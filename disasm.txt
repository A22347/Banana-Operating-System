
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 03 9b 00 00       	call   c0009b23 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f9 0f 02 00       	call   c002101e <_init>
c0000025:	c3                   	ret    
c0000026:	bb 72 1c 02 c0       	mov    ebx,0xc0021c72
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 80 1c 02 c0    	cmp    ebx,0xc0021c80
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 5c 02 c0       	mov    eax,0xc0025c98
c0000049:	3d 98 5c 02 c0       	cmp    eax,0xc0025c98
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 5c 02 c0       	push   0xc0025c98
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 5c 02 c0       	mov    eax,0xc0025c98
c0000075:	2d 98 5c 02 c0       	sub    eax,0xc0025c98
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 5c 02 c0       	push   0xc0025c98
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 20 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025e20,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 88 1c 02 c0       	mov    ebx,0xc0021c88
c00000bb:	81 eb 84 1c 02 c0    	sub    ebx,0xc0021c84
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 84 1c 02 c0       	mov    esi,0xc0021c84
c00000ca:	a1 24 5e 02 c0       	mov    eax,ds:0xc0025e24
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 24 5e 02 c0       	mov    ds:0xc0025e24,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 24 5e 02 c0       	mov    eax,ds:0xc0025e24
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 5c 02 c0       	push   0xc0025c98
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 20 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025e20,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 28 5e 02 c0       	push   0xc0025e28
c000012c:	68 98 5c 02 c0       	push   0xc0025c98
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 37 75 01 00       	call   c00178da <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 70 c4 00 00       	call   c000c82b <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 15 75 01 00       	call   c00178da <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 bd 79 01 00       	call   c0017da1 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 e2 7f 01 00       	call   c00183cf <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 70 62 02 c0 	lgdtd  ds:0xc0026270
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 ed e1 00 00       	call   c000e7cf <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 57 83 00 00       	jmp    c00089a2 <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 40 5e 02 c0       	mov    ds:0xc0025e40,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 40 5e 02 c0    	mov    DWORD PTR ds:0xc0025e40,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 40 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025e40
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 a0 1c 02 c0 02 	test   BYTE PTR [edx-0x3ffde360],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 a0 1c 02 c0 01 	test   BYTE PTR [edx-0x3ffde360],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 a0 1c 02 c0 08 	test   BYTE PTR [edx-0x3ffde360],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 a0 1c 02 c0 04 	test   BYTE PTR [ebx-0x3ffde360],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 a0 1c 02 c0 01 	test   BYTE PTR [edx-0x3ffde360],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 60 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025e60
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 60 5e 02 c0    	mov    DWORD PTR ds:0xc0025e60,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 64 5e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffda19c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 64 5e 02 c0 	mov    DWORD PTR [eax*4-0x3ffda19c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 60 5e 02 c0    	mov    DWORD PTR ds:0xc0025e60,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 8c 5e 02 c0    	cmp    DWORD PTR ds:0xc0025e8c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 9c 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025e9c
c0000e38:	c7 42 0c 94 5e 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025e94
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 9c 5e 02 c0    	mov    DWORD PTR ds:0xc0025e9c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 8c 5e 02 c0    	mov    DWORD PTR ds:0xc0025e8c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 60 5e 02 c0 02 	test   BYTE PTR ds:0xc0025e60,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 60 5e 02 c0       	mov    eax,0xc0025e60
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 0d 8a 00 00       	call   c0009926 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 4f 89 00 00       	call   c0009926 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 39 89 00 00       	call   c0009926 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 15 89 00 00       	call   c0009926 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 60 5e 02 c0    	mov    edi,DWORD PTR ds:0xc0025e60
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 60 5e 02 c0       	mov    eax,0xc0025e60
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 64 5e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda19c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 64 5e 02 c0 	mov    DWORD PTR [edx*4-0x3ffda19c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 94 5e 02 c0 	lea    edx,[eax*8-0x3ffda16c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 60 5e 02 c0       	mov    eax,0xc0025e60
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d a0 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ea0
c00011ba:	81 fb 94 5e 02 c0    	cmp    ebx,0xc0025e94
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 94 5e 02 c0       	cmp    eax,0xc0025e94
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 90 5e 02 c0    	cmp    DWORD PTR ds:0xc0025e90,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 9c 5e 02 c0       	mov    ds:0xc0025e9c,eax
c00011f6:	a3 a0 5e 02 c0       	mov    ds:0xc0025ea0,eax
c00011fb:	a3 90 5e 02 c0       	mov    ds:0xc0025e90,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 94 5e 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025e94
c0001209:	c7 40 0c 94 5e 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025e94
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 a0 5e 02 c0       	mov    ds:0xc0025ea0,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 94 5e 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025e94
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 58 5e 02 c0 	lea    ebp,[edx*4-0x3ffda1a8]
c000125a:	8b 14 95 60 5e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda1a0]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 60 5e 02 c0 	lea    ecx,[edx*4-0x3ffda1a0]
c0001275:	8b 14 95 60 5e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda1a0]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 94 61 02 c0 	or     DWORD PTR [edi*4-0x3ffd9e6c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 94 5e 02 c0 	lea    eax,[eax*8-0x3ffda16c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 9c 5e 02 c0    	mov    DWORD PTR ds:0xc0025e9c,ecx
c000132f:	89 0d a0 5e 02 c0    	mov    DWORD PTR ds:0xc0025ea0,ecx
c0001335:	c7 41 08 94 5e 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025e94
c000133c:	c7 41 0c 94 5e 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025e94
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 8c 5e 02 c0 	lea    edx,[ecx*8-0x3ffda174]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 94 61 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9e6c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 94 61 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9e6c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 8c 5e 02 c0 	lea    edx,[eax*4-0x3ffda174]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 94 61 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9e6c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 9c 5e 02 c0    	mov    DWORD PTR ds:0xc0025e9c,edi
c0001402:	89 3d a0 5e 02 c0    	mov    DWORD PTR ds:0xc0025ea0,edi
c0001408:	c7 47 08 94 5e 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025e94
c000140f:	c7 47 0c 94 5e 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025e94
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 90 5e 02 c0    	mov    DWORD PTR ds:0xc0025e90,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 8c 5e 02 c0       	mov    eax,ds:0xc0025e8c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 8c 5e 02 c0    	mov    DWORD PTR ds:0xc0025e8c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 60 5e 02 c0       	mov    edx,0xc0025e60
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 60 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025e60,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 60 5e 02 c0       	mov    eax,0xc0025e60
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d b4 61 02 c0    	mov    ebx,DWORD PTR ds:0xc00261b4
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 b4 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261b4,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d b4 61 02 c0    	mov    DWORD PTR ds:0xc00261b4,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 8c 5e 02 c0    	cmp    DWORD PTR ds:0xc0025e8c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 8c 5e 02 c0    	mov    DWORD PTR ds:0xc0025e8c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 60 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025e60,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 60 5e 02 c0       	mov    eax,0xc0025e60
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 bc 61 02 c0    	push   DWORD PTR ds:0xc00261bc
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 60 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025e60,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 60 5e 02 c0       	mov    eax,0xc0025e60
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 bc 61 02 c0       	mov    eax,ds:0xc00261bc
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 60 5e 02 c0       	mov    eax,0xc0025e60
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 8c 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025e8c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 60 5e 02 c0       	mov    eax,0xc0025e60
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 8c 5e 02 c0       	mov    eax,ds:0xc0025e8c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 64 5e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda19c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 94 5e 02 c0       	mov    eax,0xc0025e94
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 8c 61 02 c0       	cmp    eax,0xc002618c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 c8 61 02 c0       	mov    eax,ds:0xc00261c8
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 b0 61 02 c0    	mov    esi,DWORD PTR ds:0xc00261b0
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 c4 61 02 c0    	mov    esi,DWORD PTR ds:0xc00261c4
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 d4 61 02 c0    	mov    esi,DWORD PTR ds:0xc00261d4
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 60 5e 02 c0       	mov    eax,0xc0025e60
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 a4 1d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde25c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 60 5e 02 c0       	mov    eax,ds:0xc0025e60
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 60 5e 02 c0       	mov    ds:0xc0025e60,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d a4 61 02 c0    	mov    DWORD PTR ds:0xc00261a4,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d a8 61 02 c0    	mov    DWORD PTR ds:0xc00261a8,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d ac 61 02 c0    	mov    DWORD PTR ds:0xc00261ac,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 b4 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261b4,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 00 79 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8700]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 24 93 01 00       	jmp    c001af16 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 00 79 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8700]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 55 93 01 00       	jmp    c001af5d <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 00 79 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8700]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 7d 93 01 00       	jmp    c001afa4 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 fa ee 01 00       	call   c0020e04 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 c0 1e 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffde140]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 c0 1e 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffde140]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba c0 1d 02 c0       	mov    edx,0xc0021dc0
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba e0 1e 02 c0       	mov    edx,0xc0021ee0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 74 49 02 c0       	mov    edx,0xc0024974
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba ec 1e 02 c0       	mov    edx,0xc0021eec
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba d0 1e 02 c0       	mov    edx,0xc0021ed0
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 00 62 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd9e00]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 e0 61 02 c0    	mov    ax,ds:0xc00261e0
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 e0 61 02 c0    	mov    ds:0xc00261e0,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 f7 dc 01 00       	call   c0020e04 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 6b 50 00 00       	call   c0008690 <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 fd 4f 00 00       	call   c00086a6 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 f2 1e 02 c0       	mov    eax,0xc0021ef2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 7e 48 00 00       	call   c00086bd <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 40 1e 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffde1c0]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 fb 1e 02 c0       	mov    eax,0xc0021efb
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 54 48 00 00       	call   c00087b9 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 c0 1e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde140]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 30 47 00 00       	call   c00087b9 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 17 47 00 00       	call   c00087b9 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 44 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 31 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 c2 c6 01 00       	call   c0020e04 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba d0 1e 02 c0       	mov    edx,0xc0021ed0
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba c0 1d 02 c0       	mov    edx,0xc0021dc0
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba d0 1d 02 c0       	mov    edx,0xc0021dd0
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 7c 3a 00 00       	call   c000874d <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 00 62 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9e00]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 00 62 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9e00],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 d9 36 00 00       	call   c0008690 <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 2a 33 00 00       	call   c00086a6 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 26 2d 00 00       	call   c0008690 <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 65 2c 00 00       	call   c00086a6 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 89 b0 01 00       	call   c0020e04 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 6f b0 01 00       	call   c0020e04 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 c1 26 00 00       	call   c0008690 <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 38 26 00 00       	call   c00086a6 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 a4 25 00 00       	call   c0008690 <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 66 25 00 00       	call   c00086a6 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 11 25 00 00       	call   c0008690 <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 d5 24 00 00       	call   c00086a6 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 b6 21 00 00       	call   c0008690 <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 93 20 00 00       	call   c00086a6 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 2e 20 00 00       	call   c0008690 <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 c5 1f 00 00       	call   c00086a6 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 f9 1d 00 00       	call   c0008690 <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 76 1b 00 00       	call   c00086a6 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 11 1b 00 00       	call   c0008690 <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 94 1a 00 00       	call   c00086a6 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 38 1a 00 00       	call   c0008690 <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 b5 19 00 00       	call   c00086a6 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 39 19 00 00       	call   c000874d <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 17 1e 02 c0       	mov    eax,0xc0021e17
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 cd 17 00 00       	call   c00087b9 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 c4 16 00 00       	call   c00086bd <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 10 1e 02 c0       	mov    eax,0xc0021e10
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_expand>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 3c             	sub    esp,0x3c
c0007160:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007164:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007168:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000716c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007170:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007174:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007178:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000717c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007180:	89 d8                	mov    eax,ebx
c0007182:	e8 a3 b1 ff ff       	call   c000232a <validate>
c0007187:	89 c5                	mov    ebp,eax
c0007189:	85 c0                	test   eax,eax
c000718b:	0f 85 f4 01 00 00    	jne    c0007385 <f_expand+0x22c>
c0007191:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007195:	85 ed                	test   ebp,ebp
c0007197:	0f 85 e8 01 00 00    	jne    c0007385 <f_expand+0x22c>
c000719d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071a1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00071a5:	75 0a                	jne    c00071b1 <f_expand+0x58>
c00071a7:	bd 07 00 00 00       	mov    ebp,0x7
c00071ac:	e9 d4 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c00071b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00071b4:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00071b7:	75 ee                	jne    c00071a7 <f_expand+0x4e>
c00071b9:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00071bd:	74 e8                	je     c00071a7 <f_expand+0x4e>
c00071bf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00071c3:	8a 0e                	mov    cl,BYTE PTR [esi]
c00071c5:	80 f9 04             	cmp    cl,0x4
c00071c8:	74 07                	je     c00071d1 <f_expand+0x78>
c00071ca:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00071cf:	77 d6                	ja     c00071a7 <f_expand+0x4e>
c00071d1:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00071d5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00071d9:	c1 e0 09             	shl    eax,0x9
c00071dc:	8d 50 ff             	lea    edx,[eax-0x1]
c00071df:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c00071e3:	0f 95 c2             	setne  dl
c00071e6:	0f b6 d2             	movzx  edx,dl
c00071e9:	89 d7                	mov    edi,edx
c00071eb:	31 d2                	xor    edx,edx
c00071ed:	52                   	push   edx
c00071ee:	50                   	push   eax
c00071ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f7:	e8 08 9c 01 00       	call   c0020e04 <__udivdi3>
c00071fc:	83 c4 10             	add    esp,0x10
c00071ff:	01 f8                	add    eax,edi
c0007201:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007205:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0007208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000720c:	83 ff 01             	cmp    edi,0x1
c000720f:	76 05                	jbe    c0007216 <f_expand+0xbd>
c0007211:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007214:	77 05                	ja     c000721b <f_expand+0xc2>
c0007216:	bf 02 00 00 00       	mov    edi,0x2
c000721b:	80 f9 04             	cmp    cl,0x4
c000721e:	75 19                	jne    c0007239 <f_expand+0xe0>
c0007220:	89 f0                	mov    eax,esi
c0007222:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007226:	89 fa                	mov    edx,edi
c0007228:	e8 f3 b9 ff ff       	call   c0002c20 <find_bitmap>
c000722d:	89 c6                	mov    esi,eax
c000722f:	85 c0                	test   eax,eax
c0007231:	0f 84 70 ff ff ff    	je     c00071a7 <f_expand+0x4e>
c0007237:	eb 7f                	jmp    c00072b8 <f_expand+0x15f>
c0007239:	89 fe                	mov    esi,edi
c000723b:	89 f9                	mov    ecx,edi
c000723d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007245:	89 ca                	mov    edx,ecx
c0007247:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000724b:	89 d8                	mov    eax,ebx
c000724d:	e8 3b bd ff ff       	call   c0002f8d <get_fat>
c0007252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007256:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000725a:	41                   	inc    ecx
c000725b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000725f:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007262:	77 05                	ja     c0007269 <f_expand+0x110>
c0007264:	b9 02 00 00 00       	mov    ecx,0x2
c0007269:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000726e:	74 3e                	je     c00072ae <f_expand+0x155>
c0007270:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0007275:	75 0a                	jne    c0007281 <f_expand+0x128>
c0007277:	bd 01 00 00 00       	mov    ebp,0x1
c000727c:	e9 04 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c0007281:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007286:	75 13                	jne    c000729b <f_expand+0x142>
c0007288:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000728c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007290:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c0007294:	75 0f                	jne    c00072a5 <f_expand+0x14c>
c0007296:	e9 ce 00 00 00       	jmp    c0007369 <f_expand+0x210>
c000729b:	89 ce                	mov    esi,ecx
c000729d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072a5:	39 f9                	cmp    ecx,edi
c00072a7:	75 9c                	jne    c0007245 <f_expand+0xec>
c00072a9:	e9 f9 fe ff ff       	jmp    c00071a7 <f_expand+0x4e>
c00072ae:	bd 02 00 00 00       	mov    ebp,0x2
c00072b3:	e9 cd 00 00 00       	jmp    c0007385 <f_expand+0x22c>
c00072b8:	83 f8 ff             	cmp    eax,0xffffffff
c00072bb:	74 ba                	je     c0007277 <f_expand+0x11e>
c00072bd:	8d 7e ff             	lea    edi,[esi-0x1]
c00072c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00072c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00072c8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072cd:	74 51                	je     c0007320 <f_expand+0x1c7>
c00072cf:	83 ec 0c             	sub    esp,0xc
c00072d2:	89 f2                	mov    edx,esi
c00072d4:	6a 01                	push   0x1
c00072d6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00072da:	e8 f4 b9 ff ff       	call   c0002cd3 <change_bitmap>
c00072df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00072e3:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c00072e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00072eb:	83 c4 10             	add    esp,0x10
c00072ee:	85 c0                	test   eax,eax
c00072f0:	74 2e                	je     c0007320 <f_expand+0x1c7>
c00072f2:	eb 71                	jmp    c0007365 <f_expand+0x20c>
c00072f4:	83 c9 ff             	or     ecx,0xffffffff
c00072f7:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00072fc:	74 03                	je     c0007301 <f_expand+0x1a8>
c00072fe:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007301:	89 fa                	mov    edx,edi
c0007303:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007307:	e8 7c ba ff ff       	call   c0002d88 <put_fat>
c000730c:	85 c0                	test   eax,eax
c000730e:	75 55                	jne    c0007365 <f_expand+0x20c>
c0007310:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007314:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007318:	47                   	inc    edi
c0007319:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000731e:	75 d4                	jne    c00072f4 <f_expand+0x19b>
c0007320:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007324:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007328:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000732d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007330:	74 53                	je     c0007385 <f_expand+0x22c>
c0007332:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007335:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007339:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c000733d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007341:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007345:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0007348:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000734b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000734e:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007351:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007354:	39 ca                	cmp    edx,ecx
c0007356:	77 2d                	ja     c0007385 <f_expand+0x22c>
c0007358:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c000735c:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007360:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007363:	eb 20                	jmp    c0007385 <f_expand+0x22c>
c0007365:	89 c5                	mov    ebp,eax
c0007367:	eb 1c                	jmp    c0007385 <f_expand+0x22c>
c0007369:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000736e:	74 0c                	je     c000737c <f_expand+0x223>
c0007370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007374:	89 f7                	mov    edi,esi
c0007376:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000737a:	eb 9d                	jmp    c0007319 <f_expand+0x1c0>
c000737c:	8d 46 ff             	lea    eax,[esi-0x1]
c000737f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007383:	eb 9b                	jmp    c0007320 <f_expand+0x1c7>
c0007385:	83 c4 3c             	add    esp,0x3c
c0007388:	89 e8                	mov    eax,ebp
c000738a:	5b                   	pop    ebx
c000738b:	5e                   	pop    esi
c000738c:	5f                   	pop    edi
c000738d:	5d                   	pop    ebp
c000738e:	c3                   	ret    

c000738f <f_forward>:
c000738f:	55                   	push   ebp
c0007390:	57                   	push   edi
c0007391:	56                   	push   esi
c0007392:	53                   	push   ebx
c0007393:	83 ec 2c             	sub    esp,0x2c
c0007396:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000739a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000739e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073a4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00073a8:	89 d8                	mov    eax,ebx
c00073aa:	e8 7b af ff ff       	call   c000232a <validate>
c00073af:	89 c5                	mov    ebp,eax
c00073b1:	85 c0                	test   eax,eax
c00073b3:	0f 85 aa 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073b9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00073bd:	85 ed                	test   ebp,ebp
c00073bf:	0f 85 9e 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073c5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00073c9:	0f 84 8f 01 00 00    	je     c000755e <f_forward+0x1cf>
c00073cf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00073d2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00073d5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00073d8:	bf 00 00 00 00       	mov    edi,0x0
c00073dd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00073e0:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00073e4:	89 d1                	mov    ecx,edx
c00073e6:	19 f9                	sbb    ecx,edi
c00073e8:	0f 83 cf 00 00 00    	jae    c00074bd <f_forward+0x12e>
c00073ee:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00073f2:	e9 c6 00 00 00       	jmp    c00074bd <f_forward+0x12e>
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 00                	push   0x0
c00073fb:	6a 00                	push   0x0
c00073fd:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	0f 84 57 01 00 00    	je     c0007563 <f_forward+0x1d4>
c000740c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000740f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007416:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000741a:	89 d7                	mov    edi,edx
c000741c:	8d 4e ff             	lea    ecx,[esi-0x1]
c000741f:	89 c6                	mov    esi,eax
c0007421:	0f ac fe 09          	shrd   esi,edi,0x9
c0007425:	21 ce                	and    esi,ecx
c0007427:	89 c1                	mov    ecx,eax
c0007429:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000742f:	0f 84 98 00 00 00    	je     c00074cd <f_forward+0x13e>
c0007435:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007439:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000743c:	89 c8                	mov    eax,ecx
c000743e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007442:	e8 79 aa ff ff       	call   c0001ec0 <clst2sect>
c0007447:	89 d7                	mov    edi,edx
c0007449:	09 c7                	or     edi,eax
c000744b:	0f 84 9e 00 00 00    	je     c00074ef <f_forward+0x160>
c0007451:	31 ff                	xor    edi,edi
c0007453:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007456:	01 c6                	add    esi,eax
c0007458:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000745c:	11 d7                	adc    edi,edx
c000745e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007461:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007464:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007468:	39 fa                	cmp    edx,edi
c000746a:	0f 85 a2 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007470:	39 f0                	cmp    eax,esi
c0007472:	0f 85 9a 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007478:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000747b:	ba 00 02 00 00       	mov    edx,0x200
c0007480:	25 ff 01 00 00       	and    eax,0x1ff
c0007485:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007489:	29 c2                	sub    edx,eax
c000748b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000748e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007491:	39 d1                	cmp    ecx,edx
c0007493:	76 02                	jbe    c0007497 <f_forward+0x108>
c0007495:	89 d1                	mov    ecx,edx
c0007497:	8d 73 50             	lea    esi,[ebx+0x50]
c000749a:	52                   	push   edx
c000749b:	01 c6                	add    esi,eax
c000749d:	52                   	push   edx
c000749e:	51                   	push   ecx
c000749f:	56                   	push   esi
c00074a0:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00074a4:	83 c4 10             	add    esp,0x10
c00074a7:	85 c0                	test   eax,eax
c00074a9:	74 44                	je     c00074ef <f_forward+0x160>
c00074ab:	31 ff                	xor    edi,edi
c00074ad:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00074b0:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00074b3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00074b7:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00074bb:	01 07                	add    DWORD PTR [edi],eax
c00074bd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00074c2:	0f 85 2f ff ff ff    	jne    c00073f7 <f_forward+0x68>
c00074c8:	e9 96 00 00 00       	jmp    c0007563 <f_forward+0x1d4>
c00074cd:	85 f6                	test   esi,esi
c00074cf:	0f 85 60 ff ff ff    	jne    c0007435 <f_forward+0xa6>
c00074d5:	89 d7                	mov    edi,edx
c00074d7:	09 c7                	or     edi,eax
c00074d9:	75 05                	jne    c00074e0 <f_forward+0x151>
c00074db:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00074de:	eb 0a                	jmp    c00074ea <f_forward+0x15b>
c00074e0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00074e3:	89 d8                	mov    eax,ebx
c00074e5:	e8 a3 ba ff ff       	call   c0002f8d <get_fat>
c00074ea:	83 f8 01             	cmp    eax,0x1
c00074ed:	77 0b                	ja     c00074fa <f_forward+0x16b>
c00074ef:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00074f3:	bd 02 00 00 00       	mov    ebp,0x2
c00074f8:	eb 69                	jmp    c0007563 <f_forward+0x1d4>
c00074fa:	83 f8 ff             	cmp    eax,0xffffffff
c00074fd:	75 0b                	jne    c000750a <f_forward+0x17b>
c00074ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007503:	bd 01 00 00 00       	mov    ebp,0x1
c0007508:	eb 59                	jmp    c0007563 <f_forward+0x1d4>
c000750a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000750d:	e9 23 ff ff ff       	jmp    c0007435 <f_forward+0xa6>
c0007512:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007516:	79 20                	jns    c0007538 <f_forward+0x1a9>
c0007518:	83 ec 0c             	sub    esp,0xc
c000751b:	6a 01                	push   0x1
c000751d:	52                   	push   edx
c000751e:	50                   	push   eax
c000751f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007523:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007527:	50                   	push   eax
c0007528:	e8 c5 a6 ff ff       	call   c0001bf2 <disk_write>
c000752d:	83 c4 20             	add    esp,0x20
c0007530:	85 c0                	test   eax,eax
c0007532:	75 cb                	jne    c00074ff <f_forward+0x170>
c0007534:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007538:	83 ec 0c             	sub    esp,0xc
c000753b:	6a 01                	push   0x1
c000753d:	57                   	push   edi
c000753e:	56                   	push   esi
c000753f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007543:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007547:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000754b:	50                   	push   eax
c000754c:	e8 8b a6 ff ff       	call   c0001bdc <disk_read>
c0007551:	83 c4 20             	add    esp,0x20
c0007554:	85 c0                	test   eax,eax
c0007556:	0f 84 1c ff ff ff    	je     c0007478 <f_forward+0xe9>
c000755c:	eb a1                	jmp    c00074ff <f_forward+0x170>
c000755e:	bd 07 00 00 00       	mov    ebp,0x7
c0007563:	83 c4 2c             	add    esp,0x2c
c0007566:	89 e8                	mov    eax,ebp
c0007568:	5b                   	pop    ebx
c0007569:	5e                   	pop    esi
c000756a:	5f                   	pop    edi
c000756b:	5d                   	pop    ebp
c000756c:	c3                   	ret    

c000756d <f_mkfs>:
c000756d:	55                   	push   ebp
c000756e:	57                   	push   edi
c000756f:	56                   	push   esi
c0007570:	53                   	push   ebx
c0007571:	bb 0b 00 00 00       	mov    ebx,0xb
c0007576:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000757c:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007583:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000758a:	e8 7a ac ff ff       	call   c0002209 <get_ldnumber>
c000758f:	85 c0                	test   eax,eax
c0007591:	0f 88 ec 10 00 00    	js     c0008683 <f_mkfs+0x1116>
c0007597:	8b 14 85 00 62 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9e00]
c000759e:	85 d2                	test   edx,edx
c00075a0:	74 03                	je     c00075a5 <f_mkfs+0x38>
c00075a2:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00075a5:	85 f6                	test   esi,esi
c00075a7:	75 05                	jne    c00075ae <f_mkfs+0x41>
c00075a9:	be 00 1e 02 c0       	mov    esi,0xc0021e00
c00075ae:	83 ec 0c             	sub    esp,0xc
c00075b1:	0f b6 c0             	movzx  eax,al
c00075b4:	bb 03 00 00 00       	mov    ebx,0x3
c00075b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00075bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075c1:	e8 13 a6 ff ff       	call   c0001bd9 <disk_initialize>
c00075c6:	83 c4 10             	add    esp,0x10
c00075c9:	a8 01                	test   al,0x1
c00075cb:	0f 85 b2 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075d1:	bb 0a 00 00 00       	mov    ebx,0xa
c00075d6:	a8 04                	test   al,0x4
c00075d8:	0f 85 a5 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075de:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00075e1:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00075e5:	85 c0                	test   eax,eax
c00075e7:	75 20                	jne    c0007609 <f_mkfs+0x9c>
c00075e9:	51                   	push   ecx
c00075ea:	8d 44 24 78          	lea    eax,[esp+0x78]
c00075ee:	50                   	push   eax
c00075ef:	6a 03                	push   0x3
c00075f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f5:	e8 0e a6 ff ff       	call   c0001c08 <disk_ioctl>
c00075fa:	83 c4 10             	add    esp,0x10
c00075fd:	85 c0                	test   eax,eax
c00075ff:	74 08                	je     c0007609 <f_mkfs+0x9c>
c0007601:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007609:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000760d:	8d 42 ff             	lea    eax,[edx-0x1]
c0007610:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007615:	77 04                	ja     c000761b <f_mkfs+0xae>
c0007617:	85 c2                	test   edx,eax
c0007619:	74 08                	je     c0007623 <f_mkfs+0xb6>
c000761b:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007623:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007626:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000762a:	48                   	dec    eax
c000762b:	3c 01                	cmp    al,0x1
c000762d:	76 05                	jbe    c0007634 <f_mkfs+0xc7>
c000762f:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007634:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007637:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000763b:	48                   	dec    eax
c000763c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007641:	77 07                	ja     c000764a <f_mkfs+0xdd>
c0007643:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007648:	74 08                	je     c0007652 <f_mkfs+0xe5>
c000764a:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007652:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007655:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000765b:	77 07                	ja     c0007664 <f_mkfs+0xf7>
c000765d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007660:	85 d8                	test   eax,ebx
c0007662:	74 02                	je     c0007666 <f_mkfs+0xf9>
c0007664:	31 db                	xor    ebx,ebx
c0007666:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007671:	77 0a                	ja     c000767d <f_mkfs+0x110>
c0007673:	bb 11 00 00 00       	mov    ebx,0x11
c0007678:	e9 06 10 00 00       	jmp    c0008683 <f_mkfs+0x1116>
c000767d:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007684:	8b 36                	mov    esi,DWORD PTR [esi]
c0007686:	85 ed                	test   ebp,ebp
c0007688:	75 1e                	jne    c00076a8 <f_mkfs+0x13b>
c000768a:	83 ec 0c             	sub    esp,0xc
c000768d:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007694:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007699:	50                   	push   eax
c000769a:	e8 f1 0f 00 00       	call   c0008690 <ff_memalloc>
c000769f:	83 c4 10             	add    esp,0x10
c00076a2:	89 c5                	mov    ebp,eax
c00076a4:	85 c0                	test   eax,eax
c00076a6:	74 cb                	je     c0007673 <f_mkfs+0x106>
c00076a8:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00076b0:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00076b8:	52                   	push   edx
c00076b9:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00076bd:	50                   	push   eax
c00076be:	6a 01                	push   0x1
c00076c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00076c4:	e8 3f a5 ff ff       	call   c0001c08 <disk_ioctl>
c00076c9:	83 c4 10             	add    esp,0x10
c00076cc:	85 c0                	test   eax,eax
c00076ce:	0f 85 4a 0f 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00076d4:	89 f1                	mov    ecx,esi
c00076d6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00076de:	83 e1 0f             	and    ecx,0xf
c00076e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00076e9:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00076ed:	83 e6 08             	and    esi,0x8
c00076f0:	75 56                	jne    c0007748 <f_mkfs+0x1db>
c00076f2:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00076f6:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00076fa:	83 ff 00             	cmp    edi,0x0
c00076fd:	76 20                	jbe    c000771f <f_mkfs+0x1b2>
c00076ff:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007704:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000770c:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007712:	83 d7 ff             	adc    edi,0xffffffff
c0007715:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007719:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000771d:	eb 21                	jmp    c0007740 <f_mkfs+0x1d3>
c000771f:	ba 3f 00 00 00       	mov    edx,0x3f
c0007724:	39 f2                	cmp    edx,esi
c0007726:	19 f8                	sbb    eax,edi
c0007728:	73 1e                	jae    c0007748 <f_mkfs+0x1db>
c000772a:	83 c6 c1             	add    esi,0xffffffc1
c000772d:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007735:	83 d7 ff             	adc    edi,0xffffffff
c0007738:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000773c:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007740:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007748:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000774c:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007750:	89 04 24             	mov    DWORD PTR [esp],eax
c0007753:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007757:	31 c0                	xor    eax,eax
c0007759:	ba 7f 00 00 00       	mov    edx,0x7f
c000775e:	89 c7                	mov    edi,eax
c0007760:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007763:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007767:	0f 83 c5 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c000776d:	89 df                	mov    edi,ebx
c000776f:	c1 ef 09             	shr    edi,0x9
c0007772:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007776:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000777d:	c1 ef 09             	shr    edi,0x9
c0007780:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007785:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007789:	74 29                	je     c00077b4 <f_mkfs+0x247>
c000778b:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007791:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007796:	0f 97 c2             	seta   dl
c0007799:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000779c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00077a0:	0f 92 c0             	setb   al
c00077a3:	08 c2                	or     dl,al
c00077a5:	75 5b                	jne    c0007802 <f_mkfs+0x295>
c00077a7:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077ab:	83 e0 07             	and    eax,0x7
c00077ae:	3c 04                	cmp    al,0x4
c00077b0:	74 50                	je     c0007802 <f_mkfs+0x295>
c00077b2:	eb 1b                	jmp    c00077cf <f_mkfs+0x262>
c00077b4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00077b9:	0f 87 73 0a 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c00077bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00077c5:	76 08                	jbe    c00077cf <f_mkfs+0x262>
c00077c7:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00077cf:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077d3:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00077d7:	83 e0 01             	and    eax,0x1
c00077da:	80 e1 02             	and    cl,0x2
c00077dd:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00077e1:	74 0d                	je     c00077f0 <f_mkfs+0x283>
c00077e3:	84 c0                	test   al,al
c00077e5:	0f 84 53 09 00 00    	je     c000813e <f_mkfs+0xbd1>
c00077eb:	e9 12 08 00 00       	jmp    c0008002 <f_mkfs+0xa95>
c00077f0:	bb 13 00 00 00       	mov    ebx,0x13
c00077f5:	84 c0                	test   al,al
c00077f7:	0f 85 05 08 00 00    	jne    c0008002 <f_mkfs+0xa95>
c00077fd:	e9 39 0e 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c0007802:	31 c0                	xor    eax,eax
c0007804:	ba ff 0f 00 00       	mov    edx,0xfff
c0007809:	89 c7                	mov    edi,eax
c000780b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000780e:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007812:	0f 83 1a 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c0007818:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000781e:	77 39                	ja     c0007859 <f_mkfs+0x2ec>
c0007820:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007825:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000782d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007830:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007834:	73 08                	jae    c000783e <f_mkfs+0x2d1>
c0007836:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000783e:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007843:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007846:	b8 00 00 00 00       	mov    eax,0x0
c000784b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000784f:	73 08                	jae    c0007859 <f_mkfs+0x2ec>
c0007851:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000785d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007861:	83 c0 20             	add    eax,0x20
c0007864:	83 d2 00             	adc    edx,0x0
c0007867:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000786b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000786f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007873:	31 d2                	xor    edx,edx
c0007875:	31 ff                	xor    edi,edi
c0007877:	52                   	push   edx
c0007878:	89 fb                	mov    ebx,edi
c000787a:	50                   	push   eax
c000787b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000787f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007883:	e8 7c 95 01 00       	call   c0020e04 <__udivdi3>
c0007888:	83 c4 10             	add    esp,0x10
c000788b:	c1 e0 02             	shl    eax,0x2
c000788e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007892:	05 07 02 00 00       	add    eax,0x207
c0007897:	89 f1                	mov    ecx,esi
c0007899:	c1 e8 09             	shr    eax,0x9
c000789c:	83 c1 ff             	add    ecx,0xffffffff
c000789f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00078a3:	83 d3 ff             	adc    ebx,0xffffffff
c00078a6:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00078aa:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00078ae:	31 d2                	xor    edx,edx
c00078b0:	01 c8                	add    eax,ecx
c00078b2:	11 da                	adc    edx,ebx
c00078b4:	89 c1                	mov    ecx,eax
c00078b6:	f7 de                	neg    esi
c00078b8:	89 d0                	mov    eax,edx
c00078ba:	83 d7 00             	adc    edi,0x0
c00078bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00078c1:	f7 df                	neg    edi
c00078c3:	21 f1                	and    ecx,esi
c00078c5:	21 f8                	and    eax,edi
c00078c7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00078cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00078cf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00078d3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00078d7:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00078db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00078de:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00078e2:	0f ac d0 01          	shrd   eax,edx,0x1
c00078e6:	89 df                	mov    edi,ebx
c00078e8:	d1 ea                	shr    edx,1
c00078ea:	39 c1                	cmp    ecx,eax
c00078ec:	19 d7                	sbb    edi,edx
c00078ee:	0f 83 3e 09 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c00078f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00078f8:	31 d2                	xor    edx,edx
c00078fa:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00078fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007902:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007906:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007909:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000790d:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007911:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007915:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007919:	83 f8 0f             	cmp    eax,0xf
c000791c:	0f 86 10 09 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0007922:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000792a:	0f 87 02 09 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c0007930:	31 d2                	xor    edx,edx
c0007932:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007936:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000793e:	83 c0 07             	add    eax,0x7
c0007941:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007949:	c1 e8 03             	shr    eax,0x3
c000794c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007953:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007957:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000795b:	c1 e0 09             	shl    eax,0x9
c000795e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007962:	48                   	dec    eax
c0007963:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007967:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000796b:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000796f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007973:	31 d2                	xor    edx,edx
c0007975:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007979:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007984:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007989:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000798d:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007991:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007995:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007999:	31 ff                	xor    edi,edi
c000799b:	31 f6                	xor    esi,esi
c000799d:	31 db                	xor    ebx,ebx
c000799f:	85 ff                	test   edi,edi
c00079a1:	74 05                	je     c00079a8 <f_mkfs+0x43b>
c00079a3:	4f                   	dec    edi
c00079a4:	74 44                	je     c00079ea <f_mkfs+0x47d>
c00079a6:	eb 4f                	jmp    c00079f7 <f_mkfs+0x48a>
c00079a8:	83 ec 0c             	sub    esp,0xc
c00079ab:	0f b7 c3             	movzx  eax,bx
c00079ae:	50                   	push   eax
c00079af:	e8 05 0e 00 00       	call   c00087b9 <ff_wtoupper>
c00079b4:	83 c4 10             	add    esp,0x10
c00079b7:	89 c1                	mov    ecx,eax
c00079b9:	8d 53 01             	lea    edx,[ebx+0x1]
c00079bc:	66 39 c3             	cmp    bx,ax
c00079bf:	75 3e                	jne    c00079ff <f_mkfs+0x492>
c00079c1:	be 01 00 00 00       	mov    esi,0x1
c00079c6:	89 df                	mov    edi,ebx
c00079c8:	66 01 f7             	add    di,si
c00079cb:	75 07                	jne    c00079d4 <f_mkfs+0x467>
c00079cd:	83 fe 7f             	cmp    esi,0x7f
c00079d0:	77 31                	ja     c0007a03 <f_mkfs+0x496>
c00079d2:	eb 16                	jmp    c00079ea <f_mkfs+0x47d>
c00079d4:	83 ec 0c             	sub    esp,0xc
c00079d7:	0f b7 ff             	movzx  edi,di
c00079da:	57                   	push   edi
c00079db:	e8 d9 0d 00 00       	call   c00087b9 <ff_wtoupper>
c00079e0:	83 c4 10             	add    esp,0x10
c00079e3:	39 c7                	cmp    edi,eax
c00079e5:	75 e6                	jne    c00079cd <f_mkfs+0x460>
c00079e7:	46                   	inc    esi
c00079e8:	eb dc                	jmp    c00079c6 <f_mkfs+0x459>
c00079ea:	31 c0                	xor    eax,eax
c00079ec:	89 d9                	mov    ecx,ebx
c00079ee:	4e                   	dec    esi
c00079ef:	0f 95 c0             	setne  al
c00079f2:	43                   	inc    ebx
c00079f3:	89 c7                	mov    edi,eax
c00079f5:	eb 14                	jmp    c0007a0b <f_mkfs+0x49e>
c00079f7:	89 f1                	mov    ecx,esi
c00079f9:	01 f3                	add    ebx,esi
c00079fb:	31 ff                	xor    edi,edi
c00079fd:	eb 0c                	jmp    c0007a0b <f_mkfs+0x49e>
c00079ff:	89 d3                	mov    ebx,edx
c0007a01:	eb 08                	jmp    c0007a0b <f_mkfs+0x49e>
c0007a03:	bf 02 00 00 00       	mov    edi,0x2
c0007a08:	83 c9 ff             	or     ecx,0xffffffff
c0007a0b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a12:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007a16:	0f b6 c1             	movzx  eax,cl
c0007a19:	e8 04 a7 ff ff       	call   c0002122 <xsum32>
c0007a1e:	66 c1 e9 08          	shr    cx,0x8
c0007a22:	89 c2                	mov    edx,eax
c0007a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a27:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007a2b:	0f b7 c1             	movzx  eax,cx
c0007a2e:	e8 ef a6 ff ff       	call   c0002122 <xsum32>
c0007a33:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007a38:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007a3c:	66 85 db             	test   bx,bx
c0007a3f:	74 1f                	je     c0007a60 <f_mkfs+0x4f3>
c0007a41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a44:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007a4b:	83 c0 02             	add    eax,0x2
c0007a4e:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007a54:	39 c2                	cmp    edx,eax
c0007a56:	74 08                	je     c0007a60 <f_mkfs+0x4f3>
c0007a58:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a5b:	e9 3f ff ff ff       	jmp    c000799f <f_mkfs+0x432>
c0007a60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a63:	83 ec 0c             	sub    esp,0xc
c0007a66:	05 01 02 00 00       	add    eax,0x201
c0007a6b:	c1 e8 09             	shr    eax,0x9
c0007a6e:	50                   	push   eax
c0007a6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007a73:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a77:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a7b:	55                   	push   ebp
c0007a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a80:	e8 6d a1 ff ff       	call   c0001bf2 <disk_write>
c0007a85:	83 c4 20             	add    esp,0x20
c0007a88:	85 c0                	test   eax,eax
c0007a8a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007a8d:	0f 85 8b 0b 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007a93:	89 d0                	mov    eax,edx
c0007a95:	31 d2                	xor    edx,edx
c0007a97:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007a9b:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007a9f:	66 85 db             	test   bx,bx
c0007aa2:	74 04                	je     c0007aa8 <f_mkfs+0x53b>
c0007aa4:	31 c0                	xor    eax,eax
c0007aa6:	eb b0                	jmp    c0007a58 <f_mkfs+0x4eb>
c0007aa8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007aac:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007ab0:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007ab4:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007aba:	31 d2                	xor    edx,edx
c0007abc:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007ac7:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007acb:	c1 eb 09             	shr    ebx,0x9
c0007ace:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007ad5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007ad9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007add:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ae1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007ae5:	8d 70 01             	lea    esi,[eax+0x1]
c0007ae8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007af0:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007af7:	31 d2                	xor    edx,edx
c0007af9:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007afe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b01:	89 c1                	mov    ecx,eax
c0007b03:	89 e8                	mov    eax,ebp
c0007b05:	e8 b1 a1 ff ff       	call   c0001cbb <mem_set>
c0007b0a:	31 c0                	xor    eax,eax
c0007b0c:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b0f:	76 10                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b11:	83 fe 07             	cmp    esi,0x7
c0007b14:	76 0b                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b16:	40                   	inc    eax
c0007b17:	83 ee 08             	sub    esi,0x8
c0007b1a:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007b1f:	eb eb                	jmp    c0007b0c <f_mkfs+0x59f>
c0007b21:	b2 01                	mov    dl,0x1
c0007b23:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007b27:	85 f6                	test   esi,esi
c0007b29:	74 0c                	je     c0007b37 <f_mkfs+0x5ca>
c0007b2b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b2e:	76 07                	jbe    c0007b37 <f_mkfs+0x5ca>
c0007b30:	08 11                	or     BYTE PTR [ecx],dl
c0007b32:	4e                   	dec    esi
c0007b33:	d1 e2                	shl    edx,1
c0007b35:	eb f0                	jmp    c0007b27 <f_mkfs+0x5ba>
c0007b37:	89 df                	mov    edi,ebx
c0007b39:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007b3d:	76 04                	jbe    c0007b43 <f_mkfs+0x5d6>
c0007b3f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007b43:	83 ec 0c             	sub    esp,0xc
c0007b46:	57                   	push   edi
c0007b47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4f:	55                   	push   ebp
c0007b50:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b54:	e8 99 a0 ff ff       	call   c0001bf2 <disk_write>
c0007b59:	83 c4 20             	add    esp,0x20
c0007b5c:	85 c0                	test   eax,eax
c0007b5e:	0f 85 ba 0a 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007b64:	31 d2                	xor    edx,edx
c0007b66:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007b6a:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007b6e:	29 fb                	sub    ebx,edi
c0007b70:	0f 85 7a ff ff ff    	jne    c0007af0 <f_mkfs+0x583>
c0007b76:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007b7a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007b82:	31 f6                	xor    esi,esi
c0007b84:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b88:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b8b:	31 d2                	xor    edx,edx
c0007b8d:	89 e8                	mov    eax,ebp
c0007b8f:	e8 27 a1 ff ff       	call   c0001cbb <mem_set>
c0007b94:	31 c9                	xor    ecx,ecx
c0007b96:	85 db                	test   ebx,ebx
c0007b98:	75 40                	jne    c0007bda <f_mkfs+0x66d>
c0007b9a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007b9f:	89 e8                	mov    eax,ebp
c0007ba1:	bb 02 00 00 00       	mov    ebx,0x2
c0007ba6:	e8 f2 a0 ff ff       	call   c0001c9d <st_dword>
c0007bab:	8d 45 04             	lea    eax,[ebp+0x4]
c0007bae:	83 ca ff             	or     edx,0xffffffff
c0007bb1:	e8 e7 a0 ff ff       	call   c0001c9d <st_dword>
c0007bb6:	b9 08 00 00 00       	mov    ecx,0x8
c0007bbb:	eb 1d                	jmp    c0007bda <f_mkfs+0x66d>
c0007bbd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bc0:	76 3b                	jbe    c0007bfd <f_mkfs+0x690>
c0007bc2:	43                   	inc    ebx
c0007bc3:	83 fe 01             	cmp    esi,0x1
c0007bc6:	89 da                	mov    edx,ebx
c0007bc8:	77 03                	ja     c0007bcd <f_mkfs+0x660>
c0007bca:	83 ca ff             	or     edx,0xffffffff
c0007bcd:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007bd1:	4e                   	dec    esi
c0007bd2:	e8 c6 a0 ff ff       	call   c0001c9d <st_dword>
c0007bd7:	83 c1 04             	add    ecx,0x4
c0007bda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bde:	85 f6                	test   esi,esi
c0007be0:	75 db                	jne    c0007bbd <f_mkfs+0x650>
c0007be2:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007be7:	77 14                	ja     c0007bfd <f_mkfs+0x690>
c0007be9:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007bed:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007bf4:	85 f6                	test   esi,esi
c0007bf6:	74 05                	je     c0007bfd <f_mkfs+0x690>
c0007bf8:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bfb:	77 dd                	ja     c0007bda <f_mkfs+0x66d>
c0007bfd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007c01:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c05:	39 cf                	cmp    edi,ecx
c0007c07:	76 02                	jbe    c0007c0b <f_mkfs+0x69e>
c0007c09:	89 cf                	mov    edi,ecx
c0007c0b:	83 ec 0c             	sub    esp,0xc
c0007c0e:	57                   	push   edi
c0007c0f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c17:	55                   	push   ebp
c0007c18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c1c:	e8 d1 9f ff ff       	call   c0001bf2 <disk_write>
c0007c21:	83 c4 20             	add    esp,0x20
c0007c24:	85 c0                	test   eax,eax
c0007c26:	0f 85 f2 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007c2c:	31 d2                	xor    edx,edx
c0007c2e:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007c32:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007c36:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007c3a:	0f 85 48 ff ff ff    	jne    c0007b88 <f_mkfs+0x61b>
c0007c40:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c43:	31 d2                	xor    edx,edx
c0007c45:	89 e8                	mov    eax,ebp
c0007c47:	31 ff                	xor    edi,edi
c0007c49:	e8 6d a0 ff ff       	call   c0001cbb <mem_set>
c0007c4e:	8d 45 34             	lea    eax,[ebp+0x34]
c0007c51:	ba 02 00 00 00       	mov    edx,0x2
c0007c56:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007c5a:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007c5e:	e8 3a a0 ff ff       	call   c0001c9d <st_dword>
c0007c63:	8d 45 38             	lea    eax,[ebp+0x38]
c0007c66:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007c6a:	e8 2e a0 ff ff       	call   c0001c9d <st_dword>
c0007c6f:	8d 45 44             	lea    eax,[ebp+0x44]
c0007c72:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007c76:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007c7a:	e8 1e a0 ff ff       	call   c0001c9d <st_dword>
c0007c7f:	8d 45 54             	lea    eax,[ebp+0x54]
c0007c82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007c86:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c8a:	83 c2 02             	add    edx,0x2
c0007c8d:	e8 0b a0 ff ff       	call   c0001c9d <st_dword>
c0007c92:	8d 45 58             	lea    eax,[ebp+0x58]
c0007c95:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007c99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007c9d:	e8 fb 9f ff ff       	call   c0001c9d <st_dword>
c0007ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca6:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007cab:	89 c6                	mov    esi,eax
c0007cad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007cb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cb8:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007cbc:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007cbf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007cc3:	39 cb                	cmp    ebx,ecx
c0007cc5:	76 02                	jbe    c0007cc9 <f_mkfs+0x75c>
c0007cc7:	89 cb                	mov    ebx,ecx
c0007cc9:	83 ec 0c             	sub    esp,0xc
c0007ccc:	53                   	push   ebx
c0007ccd:	57                   	push   edi
c0007cce:	56                   	push   esi
c0007ccf:	55                   	push   ebp
c0007cd0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cd4:	e8 19 9f ff ff       	call   c0001bf2 <disk_write>
c0007cd9:	83 c4 20             	add    esp,0x20
c0007cdc:	85 c0                	test   eax,eax
c0007cde:	0f 85 3a 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ce4:	31 d2                	xor    edx,edx
c0007ce6:	b9 00 02 00 00       	mov    ecx,0x200
c0007ceb:	89 e8                	mov    eax,ebp
c0007ced:	e8 c9 9f ff ff       	call   c0001cbb <mem_set>
c0007cf2:	31 d2                	xor    edx,edx
c0007cf4:	01 de                	add    esi,ebx
c0007cf6:	11 d7                	adc    edi,edx
c0007cf8:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007cfb:	75 bf                	jne    c0007cbc <f_mkfs+0x74f>
c0007cfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007d01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007d05:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007d0d:	b9 00 02 00 00       	mov    ecx,0x200
c0007d12:	31 d2                	xor    edx,edx
c0007d14:	89 e8                	mov    eax,ebp
c0007d16:	e8 a0 9f ff ff       	call   c0001cbb <mem_set>
c0007d1b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d20:	ba e0 1e 02 c0       	mov    edx,0xc0021ee0
c0007d25:	89 e8                	mov    eax,ebp
c0007d27:	e8 7a 9f ff ff       	call   c0001ca6 <mem_cpy>
c0007d2c:	8d 45 40             	lea    eax,[ebp+0x40]
c0007d2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007d33:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007d37:	e8 64 9f ff ff       	call   c0001ca0 <st_qword>
c0007d3c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007d40:	8d 45 48             	lea    eax,[ebp+0x48]
c0007d43:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007d47:	e8 54 9f ff ff       	call   c0001ca0 <st_qword>
c0007d4c:	8d 45 50             	lea    eax,[ebp+0x50]
c0007d4f:	ba 20 00 00 00       	mov    edx,0x20
c0007d54:	e8 44 9f ff ff       	call   c0001c9d <st_dword>
c0007d59:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007d5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007d61:	e8 37 9f ff ff       	call   c0001c9d <st_dword>
c0007d66:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007d6a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007d6e:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007d72:	e8 26 9f ff ff       	call   c0001c9d <st_dword>
c0007d77:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007d7a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007d7e:	e8 1a 9f ff ff       	call   c0001c9d <st_dword>
c0007d83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007d87:	8d 50 02             	lea    edx,[eax+0x2]
c0007d8a:	8d 45 60             	lea    eax,[ebp+0x60]
c0007d8d:	e8 0b 9f ff ff       	call   c0001c9d <st_dword>
c0007d92:	8d 45 64             	lea    eax,[ebp+0x64]
c0007d95:	ba 00 00 21 50       	mov    edx,0x50210000
c0007d9a:	e8 fe 9e ff ff       	call   c0001c9d <st_dword>
c0007d9f:	8d 45 68             	lea    eax,[ebp+0x68]
c0007da2:	ba 00 01 00 00       	mov    edx,0x100
c0007da7:	e8 ed 9e ff ff       	call   c0001c99 <st_word>
c0007dac:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007db0:	b8 0a 00 00 00       	mov    eax,0xa
c0007db5:	48                   	dec    eax
c0007db6:	74 05                	je     c0007dbd <f_mkfs+0x850>
c0007db8:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007dbb:	eb f8                	jmp    c0007db5 <f_mkfs+0x848>
c0007dbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc1:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007dc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dc9:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007dcd:	74 05                	je     c0007dd4 <f_mkfs+0x867>
c0007dcf:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007dd2:	eb f5                	jmp    c0007dc9 <f_mkfs+0x85c>
c0007dd4:	8d 45 78             	lea    eax,[ebp+0x78]
c0007dd7:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ddc:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007de2:	31 db                	xor    ebx,ebx
c0007de4:	e8 b0 9e ff ff       	call   c0001c99 <st_word>
c0007de9:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007def:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 9d 9e ff ff       	call   c0001c99 <st_word>
c0007dfc:	31 c9                	xor    ecx,ecx
c0007dfe:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007e01:	83 f8 01             	cmp    eax,0x1
c0007e04:	76 13                	jbe    c0007e19 <f_mkfs+0x8ac>
c0007e06:	83 f9 70             	cmp    ecx,0x70
c0007e09:	74 0e                	je     c0007e19 <f_mkfs+0x8ac>
c0007e0b:	89 da                	mov    edx,ebx
c0007e0d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007e12:	e8 0b a3 ff ff       	call   c0002122 <xsum32>
c0007e17:	89 c3                	mov    ebx,eax
c0007e19:	41                   	inc    ecx
c0007e1a:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e20:	75 dc                	jne    c0007dfe <f_mkfs+0x891>
c0007e22:	89 f0                	mov    eax,esi
c0007e24:	89 fa                	mov    edx,edi
c0007e26:	83 c0 01             	add    eax,0x1
c0007e29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e2d:	83 d2 00             	adc    edx,0x0
c0007e30:	83 ec 0c             	sub    esp,0xc
c0007e33:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007e37:	6a 01                	push   0x1
c0007e39:	57                   	push   edi
c0007e3a:	56                   	push   esi
c0007e3b:	55                   	push   ebp
c0007e3c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e40:	e8 ad 9d ff ff       	call   c0001bf2 <disk_write>
c0007e45:	83 c4 20             	add    esp,0x20
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	0f 85 ce 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	b9 00 02 00 00       	mov    ecx,0x200
c0007e57:	89 e8                	mov    eax,ebp
c0007e59:	e8 5d 9e ff ff       	call   c0001cbb <mem_set>
c0007e5e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007e63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e66:	e8 2e 9e ff ff       	call   c0001c99 <st_word>
c0007e6b:	89 f0                	mov    eax,esi
c0007e6d:	89 fa                	mov    edx,edi
c0007e6f:	83 c0 09             	add    eax,0x9
c0007e72:	83 d2 00             	adc    edx,0x0
c0007e75:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e78:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007e7c:	31 c9                	xor    ecx,ecx
c0007e7e:	41                   	inc    ecx
c0007e7f:	89 da                	mov    edx,ebx
c0007e81:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e86:	e8 97 a2 ff ff       	call   c0002122 <xsum32>
c0007e8b:	89 c3                	mov    ebx,eax
c0007e8d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e93:	75 e9                	jne    c0007e7e <f_mkfs+0x911>
c0007e95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e99:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ea4:	83 d2 00             	adc    edx,0x0
c0007ea7:	83 ec 0c             	sub    esp,0xc
c0007eaa:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007eae:	6a 01                	push   0x1
c0007eb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb8:	55                   	push   ebp
c0007eb9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ebd:	e8 30 9d ff ff       	call   c0001bf2 <disk_write>
c0007ec2:	83 c4 20             	add    esp,0x20
c0007ec5:	85 c0                	test   eax,eax
c0007ec7:	0f 85 51 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ecd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ed1:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ed5:	75 09                	jne    c0007ee0 <f_mkfs+0x973>
c0007ed7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007eda:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ede:	74 12                	je     c0007ef2 <f_mkfs+0x985>
c0007ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ee4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ee8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007eec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ef0:	eb 8a                	jmp    c0007e7c <f_mkfs+0x90f>
c0007ef2:	31 d2                	xor    edx,edx
c0007ef4:	b9 00 02 00 00       	mov    ecx,0x200
c0007ef9:	89 e8                	mov    eax,ebp
c0007efb:	e8 bb 9d ff ff       	call   c0001cbb <mem_set>
c0007f00:	83 c6 0b             	add    esi,0xb
c0007f03:	83 d7 00             	adc    edi,0x0
c0007f06:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007f0a:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007f0e:	31 c9                	xor    ecx,ecx
c0007f10:	41                   	inc    ecx
c0007f11:	89 da                	mov    edx,ebx
c0007f13:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007f18:	e8 05 a2 ff ff       	call   c0002122 <xsum32>
c0007f1d:	89 c3                	mov    ebx,eax
c0007f1f:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007f25:	75 e9                	jne    c0007f10 <f_mkfs+0x9a3>
c0007f27:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f2a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f2e:	83 c6 01             	add    esi,0x1
c0007f31:	83 d7 00             	adc    edi,0x0
c0007f34:	83 ec 0c             	sub    esp,0xc
c0007f37:	6a 01                	push   0x1
c0007f39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f41:	55                   	push   ebp
c0007f42:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f46:	e8 a7 9c ff ff       	call   c0001bf2 <disk_write>
c0007f4b:	83 c4 20             	add    esp,0x20
c0007f4e:	85 c0                	test   eax,eax
c0007f50:	0f 85 c8 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007f56:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007f5a:	75 06                	jne    c0007f62 <f_mkfs+0x9f5>
c0007f5c:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007f60:	74 09                	je     c0007f6b <f_mkfs+0x9fe>
c0007f62:	89 34 24             	mov    DWORD PTR [esp],esi
c0007f65:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007f69:	eb a3                	jmp    c0007f0e <f_mkfs+0x9a1>
c0007f6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007f6f:	89 da                	mov    edx,ebx
c0007f71:	01 e8                	add    eax,ebp
c0007f73:	e8 25 9d ff ff       	call   c0001c9d <st_dword>
c0007f78:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007f7d:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007f85:	75 e4                	jne    c0007f6b <f_mkfs+0x9fe>
c0007f87:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f8a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f8e:	83 c6 02             	add    esi,0x2
c0007f91:	83 d7 00             	adc    edi,0x0
c0007f94:	83 ec 0c             	sub    esp,0xc
c0007f97:	6a 01                	push   0x1
c0007f99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007f9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007fa1:	55                   	push   ebp
c0007fa2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa6:	e8 47 9c ff ff       	call   c0001bf2 <disk_write>
c0007fab:	83 c4 20             	add    esp,0x20
c0007fae:	85 c0                	test   eax,eax
c0007fb0:	0f 85 68 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007fb6:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007fbb:	74 0d                	je     c0007fca <f_mkfs+0xa5d>
c0007fbd:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007fc5:	e9 43 fd ff ff       	jmp    c0007d0d <f_mkfs+0x7a0>
c0007fca:	b1 07                	mov    cl,0x7
c0007fcc:	e9 e3 05 00 00       	jmp    c00085b4 <f_mkfs+0x1047>
c0007fd1:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007fd6:	0f 85 4f 02 00 00    	jne    c000822b <f_mkfs+0xcbe>
c0007fdc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007fe1:	0f 86 22 02 00 00    	jbe    c0008209 <f_mkfs+0xc9c>
c0007fe7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fec:	0f 85 81 06 00 00    	jne    c0008673 <f_mkfs+0x1106>
c0007ff2:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ff5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ff9:	83 f8 40             	cmp    eax,0x40
c0007ffc:	0f 87 51 06 00 00    	ja     c0008653 <f_mkfs+0x10e6>
c0008002:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008006:	85 ff                	test   edi,edi
c0008008:	75 1c                	jne    c0008026 <f_mkfs+0xab9>
c000800a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000800d:	ba e0 1d 02 c0       	mov    edx,0xc0021de0
c0008012:	c1 e9 0c             	shr    ecx,0xc
c0008015:	bf 01 00 00 00       	mov    edi,0x1
c000801a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000801d:	66 85 c0             	test   ax,ax
c0008020:	0f 85 95 01 00 00    	jne    c00081bb <f_mkfs+0xc4e>
c0008026:	31 d2                	xor    edx,edx
c0008028:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000802b:	f7 f7                	div    edi
c000802d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008032:	0f 86 95 01 00 00    	jbe    c00081cd <f_mkfs+0xc60>
c0008038:	83 c0 02             	add    eax,0x2
c000803b:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0008040:	01 c0                	add    eax,eax
c0008042:	05 ff 01 00 00       	add    eax,0x1ff
c0008047:	be 01 00 00 00       	mov    esi,0x1
c000804c:	c1 e8 09             	shr    eax,0x9
c000804f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008053:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008057:	c1 e0 05             	shl    eax,0x5
c000805a:	c1 e8 09             	shr    eax,0x9
c000805d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0008061:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0008066:	31 d2                	xor    edx,edx
c0008068:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000806c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0008070:	89 f0                	mov    eax,esi
c0008072:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0008076:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c000807a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000807e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0008082:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008086:	31 d2                	xor    edx,edx
c0008088:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c000808d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0008091:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0008095:	31 db                	xor    ebx,ebx
c0008097:	01 c8                	add    eax,ecx
c0008099:	11 da                	adc    edx,ebx
c000809b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000809f:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c00080a3:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c00080a7:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00080ab:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c00080af:	f7 da                	neg    edx
c00080b1:	21 d1                	and    ecx,edx
c00080b3:	29 d9                	sub    ecx,ebx
c00080b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080ba:	0f 85 20 01 00 00    	jne    c00081e0 <f_mkfs+0xc73>
c00080c0:	31 db                	xor    ebx,ebx
c00080c2:	01 ce                	add    esi,ecx
c00080c4:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c00080c8:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c00080cc:	31 d2                	xor    edx,edx
c00080ce:	89 f8                	mov    eax,edi
c00080d0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00080d4:	c1 e0 04             	shl    eax,0x4
c00080d7:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00080db:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00080df:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c00080e3:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c00080e7:	39 04 24             	cmp    DWORD PTR [esp],eax
c00080ea:	19 d3                	sbb    ebx,edx
c00080ec:	0f 82 40 01 00 00    	jb     c0008232 <f_mkfs+0xcc5>
c00080f2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00080f5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080f9:	89 c8                	mov    eax,ecx
c00080fb:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008100:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008104:	29 f0                	sub    eax,esi
c0008106:	29 d0                	sub    eax,edx
c0008108:	31 d2                	xor    edx,edx
c000810a:	f7 f7                	div    edi
c000810c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008111:	89 c3                	mov    ebx,eax
c0008113:	0f 85 b8 fe ff ff    	jne    c0007fd1 <f_mkfs+0xa64>
c0008119:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000811e:	0f 87 1d 01 00 00    	ja     c0008241 <f_mkfs+0xcd4>
c0008124:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008129:	0f 85 03 01 00 00    	jne    c0008232 <f_mkfs+0xcc5>
c000812f:	83 ff 01             	cmp    edi,0x1
c0008132:	0f 86 fa 00 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0008138:	d1 ef                	shr    edi,1
c000813a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000813e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008142:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008145:	85 db                	test   ebx,ebx
c0008147:	75 2d                	jne    c0008176 <f_mkfs+0xc09>
c0008149:	89 cb                	mov    ebx,ecx
c000814b:	ba f0 1d 02 c0       	mov    edx,0xc0021df0
c0008150:	c1 eb 11             	shr    ebx,0x11
c0008153:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000815b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000815e:	66 85 c0             	test   ax,ax
c0008161:	74 11                	je     c0008174 <f_mkfs+0xc07>
c0008163:	83 c2 02             	add    edx,0x2
c0008166:	39 d8                	cmp    eax,ebx
c0008168:	77 0a                	ja     c0008174 <f_mkfs+0xc07>
c000816a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000816e:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0008172:	eb e7                	jmp    c000815b <f_mkfs+0xbee>
c0008174:	31 db                	xor    ebx,ebx
c0008176:	31 d2                	xor    edx,edx
c0008178:	89 c8                	mov    eax,ecx
c000817a:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000817e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0008185:	2d f6 ff 00 00       	sub    eax,0xfff6
c000818a:	c1 ea 09             	shr    edx,0x9
c000818d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0008192:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0008196:	0f 87 96 00 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c000819c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081a0:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00081a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00081ac:	be 20 00 00 00       	mov    esi,0x20
c00081b1:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00081b6:	e9 a6 fe ff ff       	jmp    c0008061 <f_mkfs+0xaf4>
c00081bb:	83 c2 02             	add    edx,0x2
c00081be:	39 c8                	cmp    eax,ecx
c00081c0:	0f 87 60 fe ff ff    	ja     c0008026 <f_mkfs+0xab9>
c00081c6:	01 ff                	add    edi,edi
c00081c8:	e9 4d fe ff ff       	jmp    c000801a <f_mkfs+0xaad>
c00081cd:	8d 04 40             	lea    eax,[eax+eax*2]
c00081d0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c00081d5:	40                   	inc    eax
c00081d6:	d1 e8                	shr    eax,1
c00081d8:	83 c0 03             	add    eax,0x3
c00081db:	e9 62 fe ff ff       	jmp    c0008042 <f_mkfs+0xad5>
c00081e0:	31 d2                	xor    edx,edx
c00081e2:	89 c8                	mov    eax,ecx
c00081e4:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c00081e8:	85 d2                	test   edx,edx
c00081ea:	74 0c                	je     c00081f8 <f_mkfs+0xc8b>
c00081ec:	49                   	dec    ecx
c00081ed:	46                   	inc    esi
c00081ee:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00081f3:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c00081f8:	89 c8                	mov    eax,ecx
c00081fa:	31 d2                	xor    edx,edx
c00081fc:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008200:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008204:	e9 c3 fe ff ff       	jmp    c00080cc <f_mkfs+0xb5f>
c0008209:	3d f5 0f 00 00       	cmp    eax,0xff5
c000820e:	77 31                	ja     c0008241 <f_mkfs+0xcd4>
c0008210:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008215:	75 1b                	jne    c0008232 <f_mkfs+0xcc5>
c0008217:	8d 04 3f             	lea    eax,[edi+edi*1]
c000821a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000821e:	3d 80 00 00 00       	cmp    eax,0x80
c0008223:	0f 86 d9 fd ff ff    	jbe    c0008002 <f_mkfs+0xa95>
c0008229:	eb 07                	jmp    c0008232 <f_mkfs+0xcc5>
c000822b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008230:	76 0a                	jbe    c000823c <f_mkfs+0xccf>
c0008232:	bb 0e 00 00 00       	mov    ebx,0xe
c0008237:	e9 ff 03 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c000823c:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008241:	31 d2                	xor    edx,edx
c0008243:	b9 00 02 00 00       	mov    ecx,0x200
c0008248:	89 e8                	mov    eax,ebp
c000824a:	e8 6c 9a ff ff       	call   c0001cbb <mem_set>
c000824f:	b9 0b 00 00 00       	mov    ecx,0xb
c0008254:	ba 02 1f 02 c0       	mov    edx,0xc0021f02
c0008259:	89 e8                	mov    eax,ebp
c000825b:	e8 46 9a ff ff       	call   c0001ca6 <mem_cpy>
c0008260:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008263:	ba 00 02 00 00       	mov    edx,0x200
c0008268:	e8 2c 9a ff ff       	call   c0001c99 <st_word>
c000826d:	89 f8                	mov    eax,edi
c000826f:	0f b7 d6             	movzx  edx,si
c0008272:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008275:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008278:	e8 1c 9a ff ff       	call   c0001c99 <st_word>
c000827d:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008281:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008286:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008289:	75 08                	jne    c0008293 <f_mkfs+0xd26>
c000828b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008293:	8d 45 11             	lea    eax,[ebp+0x11]
c0008296:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000829a:	e8 fa 99 ff ff       	call   c0001c99 <st_word>
c000829f:	b8 ff ff 00 00       	mov    eax,0xffff
c00082a4:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00082a8:	39 d0                	cmp    eax,edx
c00082aa:	b8 00 00 00 00       	mov    eax,0x0
c00082af:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00082b3:	72 0a                	jb     c00082bf <f_mkfs+0xd52>
c00082b5:	8d 45 13             	lea    eax,[ebp+0x13]
c00082b8:	e8 dc 99 ff ff       	call   c0001c99 <st_word>
c00082bd:	eb 08                	jmp    c00082c7 <f_mkfs+0xd5a>
c00082bf:	8d 45 20             	lea    eax,[ebp+0x20]
c00082c2:	e8 d6 99 ff ff       	call   c0001c9d <st_dword>
c00082c7:	8d 45 18             	lea    eax,[ebp+0x18]
c00082ca:	ba 3f 00 00 00       	mov    edx,0x3f
c00082cf:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00082d3:	e8 c1 99 ff ff       	call   c0001c99 <st_word>
c00082d8:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00082db:	ba ff 00 00 00       	mov    edx,0xff
c00082e0:	e8 b4 99 ff ff       	call   c0001c99 <st_word>
c00082e5:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00082e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00082ec:	e8 ac 99 ff ff       	call   c0001c9d <st_dword>
c00082f1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f6:	75 57                	jne    c000834f <f_mkfs+0xde2>
c00082f8:	8d 45 43             	lea    eax,[ebp+0x43]
c00082fb:	ba 00 00 21 50       	mov    edx,0x50210000
c0008300:	e8 98 99 ff ff       	call   c0001c9d <st_dword>
c0008305:	8d 45 24             	lea    eax,[ebp+0x24]
c0008308:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000830c:	e8 8c 99 ff ff       	call   c0001c9d <st_dword>
c0008311:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008314:	ba 02 00 00 00       	mov    edx,0x2
c0008319:	e8 7f 99 ff ff       	call   c0001c9d <st_dword>
c000831e:	8d 45 30             	lea    eax,[ebp+0x30]
c0008321:	ba 01 00 00 00       	mov    edx,0x1
c0008326:	e8 6e 99 ff ff       	call   c0001c99 <st_word>
c000832b:	8d 45 32             	lea    eax,[ebp+0x32]
c000832e:	ba 06 00 00 00       	mov    edx,0x6
c0008333:	e8 61 99 ff ff       	call   c0001c99 <st_word>
c0008338:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000833c:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008340:	8d 45 47             	lea    eax,[ebp+0x47]
c0008343:	b9 13 00 00 00       	mov    ecx,0x13
c0008348:	ba 0e 1f 02 c0       	mov    edx,0xc0021f0e
c000834d:	eb 2f                	jmp    c000837e <f_mkfs+0xe11>
c000834f:	8d 45 27             	lea    eax,[ebp+0x27]
c0008352:	ba 00 00 21 50       	mov    edx,0x50210000
c0008357:	e8 41 99 ff ff       	call   c0001c9d <st_dword>
c000835c:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008361:	8d 45 16             	lea    eax,[ebp+0x16]
c0008364:	e8 30 99 ff ff       	call   c0001c99 <st_word>
c0008369:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c000836d:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008371:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008374:	b9 13 00 00 00       	mov    ecx,0x13
c0008379:	ba 22 1f 02 c0       	mov    edx,0xc0021f22
c000837e:	e8 23 99 ff ff       	call   c0001ca6 <mem_cpy>
c0008383:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008389:	ba 55 aa 00 00       	mov    edx,0xaa55
c000838e:	89 f0                	mov    eax,esi
c0008390:	e8 04 99 ff ff       	call   c0001c99 <st_word>
c0008395:	83 ec 0c             	sub    esp,0xc
c0008398:	6a 01                	push   0x1
c000839a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000839e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00083a2:	55                   	push   ebp
c00083a3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a7:	e8 46 98 ff ff       	call   c0001bf2 <disk_write>
c00083ac:	83 c4 20             	add    esp,0x20
c00083af:	85 c0                	test   eax,eax
c00083b1:	0f 85 67 02 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00083b7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083bc:	0f 85 b7 00 00 00    	jne    c0008479 <f_mkfs+0xf0c>
c00083c2:	83 ec 0c             	sub    esp,0xc
c00083c5:	6a 01                	push   0x1
c00083c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00083cf:	83 c0 06             	add    eax,0x6
c00083d2:	83 d2 00             	adc    edx,0x0
c00083d5:	52                   	push   edx
c00083d6:	50                   	push   eax
c00083d7:	55                   	push   ebp
c00083d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083dc:	e8 11 98 ff ff       	call   c0001bf2 <disk_write>
c00083e1:	83 c4 20             	add    esp,0x20
c00083e4:	b9 00 02 00 00       	mov    ecx,0x200
c00083e9:	31 d2                	xor    edx,edx
c00083eb:	89 e8                	mov    eax,ebp
c00083ed:	e8 c9 98 ff ff       	call   c0001cbb <mem_set>
c00083f2:	ba 52 52 61 41       	mov    edx,0x41615252
c00083f7:	89 e8                	mov    eax,ebp
c00083f9:	e8 9f 98 ff ff       	call   c0001c9d <st_dword>
c00083fe:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008404:	ba 72 72 41 61       	mov    edx,0x61417272
c0008409:	e8 8f 98 ff ff       	call   c0001c9d <st_dword>
c000840e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008411:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008417:	e8 81 98 ff ff       	call   c0001c9d <st_dword>
c000841c:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008422:	ba 02 00 00 00       	mov    edx,0x2
c0008427:	e8 71 98 ff ff       	call   c0001c9d <st_dword>
c000842c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008431:	89 f0                	mov    eax,esi
c0008433:	e8 61 98 ff ff       	call   c0001c99 <st_word>
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	6a 01                	push   0x1
c000843d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008441:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008445:	83 c0 07             	add    eax,0x7
c0008448:	83 d2 00             	adc    edx,0x0
c000844b:	52                   	push   edx
c000844c:	50                   	push   eax
c000844d:	55                   	push   ebp
c000844e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008452:	e8 9b 97 ff ff       	call   c0001bf2 <disk_write>
c0008457:	83 c4 14             	add    esp,0x14
c000845a:	6a 01                	push   0x1
c000845c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008460:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008464:	83 c0 01             	add    eax,0x1
c0008467:	83 d2 00             	adc    edx,0x0
c000846a:	52                   	push   edx
c000846b:	50                   	push   eax
c000846c:	55                   	push   ebp
c000846d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008471:	e8 7c 97 ff ff       	call   c0001bf2 <disk_write>
c0008476:	83 c4 20             	add    esp,0x20
c0008479:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008480:	31 d2                	xor    edx,edx
c0008482:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008488:	31 db                	xor    ebx,ebx
c000848a:	89 e8                	mov    eax,ebp
c000848c:	e8 2a 98 ff ff       	call   c0001cbb <mem_set>
c0008491:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008496:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000849d:	0f 94 c3             	sete   bl
c00084a0:	4b                   	dec    ebx
c00084a1:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00084a7:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00084ad:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084b2:	75 21                	jne    c00084d5 <f_mkfs+0xf68>
c00084b4:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00084b9:	89 e8                	mov    eax,ebp
c00084bb:	e8 dd 97 ff ff       	call   c0001c9d <st_dword>
c00084c0:	8d 45 04             	lea    eax,[ebp+0x4]
c00084c3:	83 ca ff             	or     edx,0xffffffff
c00084c6:	e8 d2 97 ff ff       	call   c0001c9d <st_dword>
c00084cb:	8d 45 08             	lea    eax,[ebp+0x8]
c00084ce:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00084d3:	eb 04                	jmp    c00084d9 <f_mkfs+0xf6c>
c00084d5:	89 da                	mov    edx,ebx
c00084d7:	89 e8                	mov    eax,ebp
c00084d9:	e8 bf 97 ff ff       	call   c0001c9d <st_dword>
c00084de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00084e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00084e6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00084ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00084ee:	39 ce                	cmp    esi,ecx
c00084f0:	76 02                	jbe    c00084f4 <f_mkfs+0xf87>
c00084f2:	89 ce                	mov    esi,ecx
c00084f4:	83 ec 0c             	sub    esp,0xc
c00084f7:	56                   	push   esi
c00084f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008500:	55                   	push   ebp
c0008501:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008505:	e8 e8 96 ff ff       	call   c0001bf2 <disk_write>
c000850a:	83 c4 20             	add    esp,0x20
c000850d:	85 c0                	test   eax,eax
c000850f:	0f 85 09 01 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008515:	31 d2                	xor    edx,edx
c0008517:	b9 00 02 00 00       	mov    ecx,0x200
c000851c:	89 e8                	mov    eax,ebp
c000851e:	e8 98 97 ff ff       	call   c0001cbb <mem_set>
c0008523:	31 d2                	xor    edx,edx
c0008525:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008529:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000852d:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008531:	75 b3                	jne    c00084e6 <f_mkfs+0xf79>
c0008533:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008536:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000853d:	40                   	inc    eax
c000853e:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008542:	0f 87 65 ff ff ff    	ja     c00084ad <f_mkfs+0xf40>
c0008548:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000854d:	74 04                	je     c0008553 <f_mkfs+0xfe6>
c000854f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008553:	89 fb                	mov    ebx,edi
c0008555:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008559:	76 04                	jbe    c000855f <f_mkfs+0xff2>
c000855b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000855f:	83 ec 0c             	sub    esp,0xc
c0008562:	53                   	push   ebx
c0008563:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008567:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000856b:	55                   	push   ebp
c000856c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008570:	e8 7d 96 ff ff       	call   c0001bf2 <disk_write>
c0008575:	83 c4 20             	add    esp,0x20
c0008578:	85 c0                	test   eax,eax
c000857a:	0f 85 9e 00 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008580:	31 d2                	xor    edx,edx
c0008582:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008586:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000858a:	29 df                	sub    edi,ebx
c000858c:	75 c5                	jne    c0008553 <f_mkfs+0xfe6>
c000858e:	b1 0c                	mov    cl,0xc
c0008590:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008595:	74 1d                	je     c00085b4 <f_mkfs+0x1047>
c0008597:	b8 ff ff 00 00       	mov    eax,0xffff
c000859c:	b1 06                	mov    cl,0x6
c000859e:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00085a2:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00085a6:	72 0c                	jb     c00085b4 <f_mkfs+0x1047>
c00085a8:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00085ad:	0f 94 c1             	sete   cl
c00085b0:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00085b4:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00085b9:	75 4c                	jne    c0008607 <f_mkfs+0x109a>
c00085bb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00085bf:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00085c3:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00085ca:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00085d1:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00085dc:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00085e7:	0f b6 c9             	movzx  ecx,cl
c00085ea:	83 ec 0c             	sub    esp,0xc
c00085ed:	55                   	push   ebp
c00085ee:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00085f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f9:	e8 f9 bf ff ff       	call   c00045f7 <create_partition>
c00085fe:	83 c4 10             	add    esp,0x10
c0008601:	89 c3                	mov    ebx,eax
c0008603:	85 c0                	test   eax,eax
c0008605:	75 34                	jne    c000863b <f_mkfs+0x10ce>
c0008607:	31 db                	xor    ebx,ebx
c0008609:	50                   	push   eax
c000860a:	6a 00                	push   0x0
c000860c:	6a 00                	push   0x0
c000860e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008612:	e8 f1 95 ff ff       	call   c0001c08 <disk_ioctl>
c0008617:	83 c4 10             	add    esp,0x10
c000861a:	85 c0                	test   eax,eax
c000861c:	74 1d                	je     c000863b <f_mkfs+0x10ce>
c000861e:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008626:	75 0c                	jne    c0008634 <f_mkfs+0x10c7>
c0008628:	83 ec 0c             	sub    esp,0xc
c000862b:	55                   	push   ebp
c000862c:	e8 75 00 00 00       	call   c00086a6 <ff_memfree>
c0008631:	83 c4 10             	add    esp,0x10
c0008634:	bb 01 00 00 00       	mov    ebx,0x1
c0008639:	eb 48                	jmp    c0008683 <f_mkfs+0x1116>
c000863b:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008643:	75 3e                	jne    c0008683 <f_mkfs+0x1116>
c0008645:	83 ec 0c             	sub    esp,0xc
c0008648:	55                   	push   ebp
c0008649:	e8 58 00 00 00       	call   c00086a6 <ff_memfree>
c000864e:	83 c4 10             	add    esp,0x10
c0008651:	eb 30                	jmp    c0008683 <f_mkfs+0x1116>
c0008653:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008658:	0f 85 eb fa ff ff    	jne    c0008149 <f_mkfs+0xbdc>
c000865e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008662:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008668:	0f 86 b8 f9 ff ff    	jbe    c0008026 <f_mkfs+0xab9>
c000866e:	e9 bf fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008673:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008678:	0f 85 c0 fa ff ff    	jne    c000813e <f_mkfs+0xbd1>
c000867e:	e9 af fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008683:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008689:	89 d8                	mov    eax,ebx
c000868b:	5b                   	pop    ebx
c000868c:	5e                   	pop    esi
c000868d:	5f                   	pop    edi
c000868e:	5d                   	pop    ebp
c000868f:	c3                   	ret    

c0008690 <ff_memalloc>:
c0008690:	83 ec 0c             	sub    esp,0xc
c0008693:	83 ec 0c             	sub    esp,0xc
c0008696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000869a:	e8 be 13 00 00       	call   c0009a5d <malloc>
c000869f:	83 c4 10             	add    esp,0x10
c00086a2:	83 c4 0c             	add    esp,0xc
c00086a5:	c3                   	ret    

c00086a6 <ff_memfree>:
c00086a6:	83 ec 0c             	sub    esp,0xc
c00086a9:	83 ec 0c             	sub    esp,0xc
c00086ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086b0:	e8 b8 13 00 00       	call   c0009a6d <free>
c00086b5:	83 c4 10             	add    esp,0x10
c00086b8:	90                   	nop
c00086b9:	83 c4 0c             	add    esp,0xc
c00086bc:	c3                   	ret    

c00086bd <ff_uni2oem>:
c00086bd:	83 ec 14             	sub    esp,0x14
c00086c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086c4:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086c8:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00086cf:	c7 44 24 0c 40 22 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022240
c00086d7:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00086dc:	77 0b                	ja     c00086e9 <ff_uni2oem+0x2c>
c00086de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00086e2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00086e7:	eb 5b                	jmp    c0008744 <ff_uni2oem+0x87>
c00086e9:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00086f1:	77 51                	ja     c0008744 <ff_uni2oem+0x87>
c00086f3:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086f9:	75 49                	jne    c0008744 <ff_uni2oem+0x87>
c00086fb:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008702:	eb 0b                	jmp    c000870f <ff_uni2oem+0x52>
c0008704:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008709:	40                   	inc    eax
c000870a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000870f:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008715:	77 1b                	ja     c0008732 <ff_uni2oem+0x75>
c0008717:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000871c:	01 c0                	add    eax,eax
c000871e:	89 c2                	mov    edx,eax
c0008720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008724:	01 d0                	add    eax,edx
c0008726:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008729:	0f b7 c0             	movzx  eax,ax
c000872c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008730:	75 d2                	jne    c0008704 <ff_uni2oem+0x47>
c0008732:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008737:	83 e8 80             	sub    eax,0xffffff80
c000873a:	25 ff 00 00 00       	and    eax,0xff
c000873f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008744:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008749:	83 c4 14             	add    esp,0x14
c000874c:	c3                   	ret    

c000874d <ff_oem2uni>:
c000874d:	83 ec 18             	sub    esp,0x18
c0008750:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008758:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000875d:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008761:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008768:	c7 44 24 10 40 22 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022240
c0008770:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008776:	77 0b                	ja     c0008783 <ff_oem2uni+0x36>
c0008778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000877c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008781:	eb 2d                	jmp    c00087b0 <ff_oem2uni+0x63>
c0008783:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008789:	75 25                	jne    c00087b0 <ff_oem2uni+0x63>
c000878b:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008792:	77 1c                	ja     c00087b0 <ff_oem2uni+0x63>
c0008794:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008799:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000879e:	01 c0                	add    eax,eax
c00087a0:	89 c2                	mov    edx,eax
c00087a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087a6:	01 d0                	add    eax,edx
c00087a8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087ab:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00087b0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00087b5:	83 c4 18             	add    esp,0x18
c00087b8:	c3                   	ret    

c00087b9 <ff_wtoupper>:
c00087b9:	83 ec 10             	sub    esp,0x10
c00087bc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00087c4:	0f 87 3e 01 00 00    	ja     c0008908 <ff_wtoupper+0x14f>
c00087ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087ce:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d3:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00087da:	77 07                	ja     c00087e3 <ff_wtoupper+0x2a>
c00087dc:	b8 40 20 02 c0       	mov    eax,0xc0022040
c00087e1:	eb 05                	jmp    c00087e8 <ff_wtoupper+0x2f>
c00087e3:	b8 80 1f 02 c0       	mov    eax,0xc0021f80
c00087e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087f0:	8d 50 02             	lea    edx,[eax+0x2]
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087fa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00087ff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008805:	0f 84 f4 00 00 00    	je     c00088ff <ff_wtoupper+0x146>
c000880b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008810:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008815:	0f 82 e4 00 00 00    	jb     c00088ff <ff_wtoupper+0x146>
c000881b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000881f:	8d 50 02             	lea    edx,[eax+0x2]
c0008822:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008826:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008829:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000882e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008833:	66 c1 e8 08          	shr    ax,0x8
c0008837:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000883c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008843:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008848:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000884d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008852:	01 ca                	add    edx,ecx
c0008854:	39 d0                	cmp    eax,edx
c0008856:	0f 8d 86 00 00 00    	jge    c00088e2 <ff_wtoupper+0x129>
c000885c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008861:	83 f8 08             	cmp    eax,0x8
c0008864:	0f 87 94 00 00 00    	ja     c00088fe <ff_wtoupper+0x145>
c000886a:	8b 04 85 40 1f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde0c0]
c0008871:	ff e0                	jmp    eax
c0008873:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008878:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000887d:	29 c2                	sub    edx,eax
c000887f:	89 d0                	mov    eax,edx
c0008881:	01 c0                	add    eax,eax
c0008883:	89 c2                	mov    edx,eax
c0008885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008889:	01 d0                	add    eax,edx
c000888b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000888e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008893:	eb 4b                	jmp    c00088e0 <ff_wtoupper+0x127>
c0008895:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000889a:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000889e:	83 e0 01             	and    eax,0x1
c00088a1:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00088a6:	eb 38                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088a8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00088ae:	eb 30                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00088b6:	eb 28                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00088be:	eb 20                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00088c6:	eb 18                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00088ce:	eb 10                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00088d6:	eb 08                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00088df:	90                   	nop
c00088e0:	eb 1c                	jmp    c00088fe <ff_wtoupper+0x145>
c00088e2:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00088e8:	0f 85 fe fe ff ff    	jne    c00087ec <ff_wtoupper+0x33>
c00088ee:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00088f3:	01 c0                	add    eax,eax
c00088f5:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00088f9:	e9 ee fe ff ff       	jmp    c00087ec <ff_wtoupper+0x33>
c00088fe:	90                   	nop
c00088ff:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008904:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008908:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000890c:	83 c4 10             	add    esp,0x10
c000890f:	c3                   	ret    

c0008910 <CPU::current()>:
c0008910:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0008915:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000891b:	c3                   	ret    

c000891c <operator new(unsigned long)>:
c000891c:	e9 3c 11 00 00       	jmp    c0009a5d <malloc>

c0008921 <operator delete(void*)>:
c0008921:	e9 57 11 00 00       	jmp    c0009a7d <rfree>

c0008926 <disableIRQs()>:
c0008926:	fa                   	cli    
c0008927:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c000892d:	c3                   	ret    

c000892e <enableIRQs()>:
c000892e:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0008933:	48                   	dec    eax
c0008934:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0008939:	75 01                	jne    c000893c <enableIRQs()+0xe>
c000893b:	fb                   	sti    
c000893c:	c3                   	ret    

c000893d <lockScheduler()>:
c000893d:	fa                   	cli    
c000893e:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c0008944:	c3                   	ret    

c0008945 <unlockScheduler()>:
c0008945:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000894a:	48                   	dec    eax
c000894b:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0008950:	75 01                	jne    c0008953 <unlockScheduler()+0xe>
c0008952:	fb                   	sti    
c0008953:	c3                   	ret    

c0008954 <lockStuff()>:
c0008954:	fa                   	cli    
c0008955:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c000895b:	ff 05 64 77 02 c0    	inc    DWORD PTR ds:0xc0027764
c0008961:	c3                   	ret    

c0008962 <unlockStuff()>:
c0008962:	83 ec 0c             	sub    esp,0xc
c0008965:	a1 64 77 02 c0       	mov    eax,ds:0xc0027764
c000896a:	48                   	dec    eax
c000896b:	a3 64 77 02 c0       	mov    ds:0xc0027764,eax
c0008970:	75 18                	jne    c000898a <unlockStuff()+0x28>
c0008972:	83 3d 60 77 02 c0 00 	cmp    DWORD PTR ds:0xc0027760,0x0
c0008979:	74 0f                	je     c000898a <unlockStuff()+0x28>
c000897b:	c7 05 60 77 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027760,0x0
c0008985:	e8 85 f6 00 00       	call   c001800f <schedule()>
c000898a:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000898f:	48                   	dec    eax
c0008990:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0008995:	75 01                	jne    c0008998 <unlockStuff()+0x36>
c0008997:	fb                   	sti    
c0008998:	83 c4 0c             	add    esp,0xc
c000899b:	c3                   	ret    

c000899c <Virt::getAKernelVAS()>:
c000899c:	a1 d0 63 02 c0       	mov    eax,ds:0xc00263d0
c00089a1:	c3                   	ret    

c00089a2 <__not_memcpy>:
c00089a2:	57                   	push   edi
c00089a3:	56                   	push   esi
c00089a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089a8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089ac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00089b0:	89 c7                	mov    edi,eax
c00089b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00089b4:	5e                   	pop    esi
c00089b5:	5f                   	pop    edi
c00089b6:	c3                   	ret    

c00089b7 <Krnl::resolveCompatibilitySymbol(char*)>:
c00089b7:	83 ec 0c             	sub    esp,0xc
c00089ba:	83 ec 08             	sub    esp,0x8
c00089bd:	68 40 23 02 c0       	push   0xc0022340
c00089c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089c6:	e8 cd 7e ff ff       	call   c0000898 <strcmp>
c00089cb:	83 c4 10             	add    esp,0x10
c00089ce:	85 c0                	test   eax,eax
c00089d0:	0f 94 c0             	sete   al
c00089d3:	84 c0                	test   al,al
c00089d5:	74 0a                	je     c00089e1 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c00089d7:	b8 68 62 02 c0       	mov    eax,0xc0026268
c00089dc:	e9 e3 00 00 00       	jmp    c0008ac4 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c00089e1:	83 ec 08             	sub    esp,0x8
c00089e4:	68 49 23 02 c0       	push   0xc0022349
c00089e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089ed:	e8 a6 7e ff ff       	call   c0000898 <strcmp>
c00089f2:	83 c4 10             	add    esp,0x10
c00089f5:	85 c0                	test   eax,eax
c00089f7:	0f 94 c0             	sete   al
c00089fa:	84 c0                	test   al,al
c00089fc:	74 0a                	je     c0008a08 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c00089fe:	b8 04 0e 02 c0       	mov    eax,0xc0020e04
c0008a03:	e9 bc 00 00 00       	jmp    c0008ac4 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c0008a08:	83 ec 08             	sub    esp,0x8
c0008a0b:	68 53 23 02 c0       	push   0xc0022353
c0008a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a14:	e8 7f 7e ff ff       	call   c0000898 <strcmp>
c0008a19:	83 c4 10             	add    esp,0x10
c0008a1c:	85 c0                	test   eax,eax
c0008a1e:	0f 94 c0             	sete   al
c0008a21:	84 c0                	test   al,al
c0008a23:	74 0a                	je     c0008a2f <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c0008a25:	b8 38 0b 02 c0       	mov    eax,0xc0020b38
c0008a2a:	e9 95 00 00 00       	jmp    c0008ac4 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c0008a2f:	83 ec 08             	sub    esp,0x8
c0008a32:	68 5c 23 02 c0       	push   0xc002235c
c0008a37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a3b:	e8 58 7e ff ff       	call   c0000898 <strcmp>
c0008a40:	83 c4 10             	add    esp,0x10
c0008a43:	85 c0                	test   eax,eax
c0008a45:	0f 94 c0             	sete   al
c0008a48:	84 c0                	test   al,al
c0008a4a:	74 07                	je     c0008a53 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c0008a4c:	b8 04 0f 02 c0       	mov    eax,0xc0020f04
c0008a51:	eb 71                	jmp    c0008ac4 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c0008a53:	83 ec 08             	sub    esp,0x8
c0008a56:	68 66 23 02 c0       	push   0xc0022366
c0008a5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a5f:	e8 34 7e ff ff       	call   c0000898 <strcmp>
c0008a64:	83 c4 10             	add    esp,0x10
c0008a67:	85 c0                	test   eax,eax
c0008a69:	0f 94 c0             	sete   al
c0008a6c:	84 c0                	test   al,al
c0008a6e:	74 07                	je     c0008a77 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c0008a70:	b8 84 0c 02 c0       	mov    eax,0xc0020c84
c0008a75:	eb 4d                	jmp    c0008ac4 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c0008a77:	83 ec 08             	sub    esp,0x8
c0008a7a:	68 6f 23 02 c0       	push   0xc002236f
c0008a7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a83:	e8 10 7e ff ff       	call   c0000898 <strcmp>
c0008a88:	83 c4 10             	add    esp,0x10
c0008a8b:	85 c0                	test   eax,eax
c0008a8d:	0f 94 c0             	sete   al
c0008a90:	84 c0                	test   al,al
c0008a92:	74 07                	je     c0008a9b <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c0008a94:	b8 6c 62 02 c0       	mov    eax,0xc002626c
c0008a99:	eb 29                	jmp    c0008ac4 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c0008a9b:	83 ec 08             	sub    esp,0x8
c0008a9e:	68 7c 23 02 c0       	push   0xc002237c
c0008aa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aa7:	e8 ec 7d ff ff       	call   c0000898 <strcmp>
c0008aac:	83 c4 10             	add    esp,0x10
c0008aaf:	85 c0                	test   eax,eax
c0008ab1:	0f 94 c0             	sete   al
c0008ab4:	84 c0                	test   al,al
c0008ab6:	74 07                	je     c0008abf <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c0008ab8:	b8 6d 62 02 c0       	mov    eax,0xc002626d
c0008abd:	eb 05                	jmp    c0008ac4 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c0008abf:	b8 00 00 00 00       	mov    eax,0x0
c0008ac4:	83 c4 0c             	add    esp,0xc
c0008ac7:	c3                   	ret    

c0008ac8 <Computer::close(int, int, void*)>:
c0008ac8:	57                   	push   edi
c0008ac9:	56                   	push   esi
c0008aca:	53                   	push   ebx
c0008acb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008acf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008ad7:	83 ec 0c             	sub    esp,0xc
c0008ada:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008ae0:	e8 a7 55 00 00       	call   c000e08c <Device::closeAll()>
c0008ae5:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008aeb:	83 c4 10             	add    esp,0x10
c0008aee:	8b 10                	mov    edx,DWORD PTR [eax]
c0008af0:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008af4:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008afc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008b00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008b04:	5b                   	pop    ebx
c0008b05:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008b08:	5e                   	pop    esi
c0008b09:	5f                   	pop    edi
c0008b0a:	ff e0                	jmp    eax

c0008b0c <Krnl::firstTask()>:
c0008b0c:	53                   	push   ebx
c0008b0d:	83 ec 14             	sub    esp,0x14
c0008b10:	68 89 23 02 c0       	push   0xc0022389
c0008b15:	e8 9d 0f 00 00       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0008b1a:	fb                   	sti    
c0008b1b:	c7 04 24 a0 23 02 c0 	mov    DWORD PTR [esp],0xc00223a0
c0008b22:	e8 90 0f 00 00       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0008b27:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c0008b2e:	e8 2a 0f 00 00       	call   c0009a5d <malloc>
c0008b33:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008b3a:	89 c3                	mov    ebx,eax
c0008b3c:	ff 35 90 77 02 c0    	push   DWORD PTR ds:0xc0027790
c0008b42:	68 b9 23 02 c0       	push   0xc00223b9
c0008b47:	6a 01                	push   0x1
c0008b49:	50                   	push   eax
c0008b4a:	e8 a3 f0 00 00       	call   c0017bf2 <Process::Process(bool, char const*, Process*, char**)>
c0008b4f:	83 c4 20             	add    esp,0x20
c0008b52:	68 ff 00 00 00       	push   0xff
c0008b57:	6a 00                	push   0x0
c0008b59:	68 5d 94 00 c0       	push   0xc000945d
c0008b5e:	53                   	push   ebx
c0008b5f:	e8 86 f2 00 00       	call   c0017dea <Process::createThread(void (*)(void*), void*, int)>
c0008b64:	6a 7a                	push   0x7a
c0008b66:	6a 00                	push   0x0
c0008b68:	68 dd 87 01 c0       	push   0xc00187dd
c0008b6d:	ff 35 90 77 02 c0    	push   DWORD PTR ds:0xc0027790
c0008b73:	e8 72 f2 00 00       	call   c0017dea <Process::createThread(void (*)(void*), void*, int)>
c0008b78:	83 c4 14             	add    esp,0x14
c0008b7b:	a3 48 77 02 c0       	mov    ds:0xc0027748,eax
c0008b80:	68 60 25 02 c0       	push   0xc0022560
c0008b85:	c6 05 6d 62 02 c0 01 	mov    BYTE PTR ds:0xc002626d,0x1
c0008b8c:	e8 26 0f 00 00       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0008b91:	e8 f3 ff 00 00       	call   c0018b89 <Vm::initialise8086()>
c0008b96:	e8 b9 42 00 00       	call   c000ce54 <Fs::initVFS()>
c0008b9b:	c7 04 24 c6 23 02 c0 	mov    DWORD PTR [esp],0xc00223c6
c0008ba2:	e8 10 0f 00 00       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0008ba7:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0008bac:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0008bb4:	6a 00                	push   0x0
c0008bb6:	6a 00                	push   0x0
c0008bb8:	6a 00                	push   0x0
c0008bba:	50                   	push   eax
c0008bbb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008bbe:	83 c4 14             	add    esp,0x14
c0008bc1:	68 60 25 02 c0       	push   0xc0022560
c0008bc6:	e8 ec 0e 00 00       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0008bcb:	e8 aa d8 00 00       	call   c001647a <Sys::loadSyscalls()>
c0008bd0:	e8 9f b7 00 00       	call   c0014374 <Krnl::loadSystemEnv()>
c0008bd5:	83 c4 0c             	add    esp,0xc
c0008bd8:	6a 3a                	push   0x3a
c0008bda:	68 e0 23 02 c0       	push   0xc00223e0
c0008bdf:	68 e9 23 02 c0       	push   0xc00223e9
c0008be4:	e8 50 c6 00 00       	call   c0015239 <Reg::readIntWithDefault(char*, char*, int)>
c0008be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0008bec:	e8 53 4d 00 00       	call   c000d944 <User::loadClockSettings(int)>
c0008bf1:	c7 04 24 84 25 02 c0 	mov    DWORD PTR [esp],0xc0022584
c0008bf8:	e8 ba 0e 00 00       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0008bfd:	58                   	pop    eax
c0008bfe:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0008c03:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008c09:	e8 3e 54 00 00       	call   c000e04c <Device::loadDriversForAll()>
c0008c0e:	c7 04 24 f1 23 02 c0 	mov    DWORD PTR [esp],0xc00223f1
c0008c15:	e8 9d 0e 00 00       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0008c1a:	e8 bd b2 00 00       	call   c0013edc <Krnl::startCPUs()>
c0008c1f:	c7 04 24 0b 24 02 c0 	mov    DWORD PTR [esp],0xc002240b
c0008c26:	e8 8c 0e 00 00       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0008c2b:	5a                   	pop    edx
c0008c2c:	8b 1d 68 62 02 c0    	mov    ebx,DWORD PTR ds:0xc0026268
c0008c32:	59                   	pop    ecx
c0008c33:	6a 01                	push   0x1
c0008c35:	68 1c 24 02 c0       	push   0xc002241c
c0008c3a:	e8 0b ea 00 00       	call   c001764a <Thr::loadDLL(char const*, bool)>
c0008c3f:	5a                   	pop    edx
c0008c40:	59                   	pop    ecx
c0008c41:	53                   	push   ebx
c0008c42:	50                   	push   eax
c0008c43:	e8 33 ec 00 00       	call   c001787b <Thr::executeDLL(unsigned long, void*)>
c0008c48:	83 c4 10             	add    esp,0x10
c0008c4b:	83 ec 0c             	sub    esp,0xc
c0008c4e:	6a 02                	push   0x2
c0008c50:	e8 90 f5 00 00       	call   c00181e5 <blockTask(TaskState)>
c0008c55:	83 c4 10             	add    esp,0x10
c0008c58:	eb f1                	jmp    c0008c4b <Krnl::firstTask()+0x13f>

c0008c5a <Computer::Computer()>:
c0008c5a:	83 ec 0c             	sub    esp,0xc
c0008c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c61:	83 ec 08             	sub    esp,0x8
c0008c64:	68 38 24 02 c0       	push   0xc0022438
c0008c69:	50                   	push   eax
c0008c6a:	e8 97 54 00 00       	call   c000e106 <Device::Device(char const*)>
c0008c6f:	83 c4 10             	add    esp,0x10
c0008c72:	ba 34 26 02 c0       	mov    edx,0xc0022634
c0008c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7b:	89 10                	mov    DWORD PTR [eax],edx
c0008c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c81:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008ca3:	83 ca 04             	or     edx,0x4
c0008ca6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cb6:	0f b6 d0             	movzx  edx,al
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cce:	0f b6 d0             	movzx  edx,al
c0008cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ce4:	8d 50 01             	lea    edx,[eax+0x1]
c0008ce7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ceb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cf1:	0f b6 d0             	movzx  edx,al
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cfc:	83 e1 3f             	and    ecx,0x3f
c0008cff:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d07:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008d0d:	0f b6 d0             	movzx  edx,al
c0008d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d14:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d1f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008d25:	0f b6 d0             	movzx  edx,al
c0008d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d2c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d35:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008d3b:	8d 50 01             	lea    edx,[eax+0x1]
c0008d3e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008d42:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008d48:	0f b6 d0             	movzx  edx,al
c0008d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d4f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d53:	83 e1 3f             	and    ecx,0x3f
c0008d56:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008d64:	0f b6 d0             	movzx  edx,al
c0008d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d6b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008d7c:	0f b6 d0             	movzx  edx,al
c0008d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d83:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008d92:	8d 50 01             	lea    edx,[eax+0x1]
c0008d95:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008d99:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008d9f:	0f b6 d0             	movzx  edx,al
c0008da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008da6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008daa:	83 e1 3f             	and    ecx,0x3f
c0008dad:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008db1:	90                   	nop
c0008db2:	83 c4 0c             	add    esp,0xc
c0008db5:	c3                   	ret    

c0008db6 <Computer::setBootMessage(char const*)>:
c0008db6:	c3                   	ret    
c0008db7:	90                   	nop

c0008db8 <Computer::detectFeatures()>:
c0008db8:	55                   	push   ebp
c0008db9:	57                   	push   edi
c0008dba:	56                   	push   esi
c0008dbb:	53                   	push   ebx
c0008dbc:	83 ec 1c             	sub    esp,0x1c
c0008dbf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008dc3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008dcd:	e8 12 75 ff ff       	call   c00002e4 <detectCPUID>
c0008dd2:	85 c0                	test   eax,eax
c0008dd4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dda:	0f 95 c2             	setne  dl
c0008ddd:	83 e0 fd             	and    eax,0xfffffffd
c0008de0:	d1 e2                	shl    edx,1
c0008de2:	09 d0                	or     eax,edx
c0008de4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008dea:	a8 02                	test   al,0x2
c0008dec:	75 46                	jne    c0008e34 <Computer::detectFeatures()+0x7c>
c0008dee:	f6 05 81 62 02 c0 04 	test   BYTE PTR ds:0xc0026281,0x4
c0008df5:	74 07                	je     c0008dfe <Computer::detectFeatures()+0x46>
c0008df7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008dfe:	e8 c3 7c 01 00       	call   c0020ac6 <x87Detect>
c0008e03:	83 e0 01             	and    eax,0x1
c0008e06:	c1 e0 04             	shl    eax,0x4
c0008e09:	88 c2                	mov    dl,al
c0008e0b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e11:	83 e0 ef             	and    eax,0xffffffef
c0008e14:	09 d0                	or     eax,edx
c0008e16:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e1c:	a8 10                	test   al,0x10
c0008e1e:	0f 85 2a 01 00 00    	jne    c0008f4e <Computer::detectFeatures()+0x196>
c0008e24:	84 c0                	test   al,al
c0008e26:	0f 88 45 01 00 00    	js     c0008f71 <Computer::detectFeatures()+0x1b9>
c0008e2c:	83 c4 1c             	add    esp,0x1c
c0008e2f:	5b                   	pop    ebx
c0008e30:	5e                   	pop    esi
c0008e31:	5f                   	pop    edi
c0008e32:	5d                   	pop    ebp
c0008e33:	c3                   	ret    
c0008e34:	83 ec 0c             	sub    esp,0xc
c0008e37:	6a 20                	push   0x20
c0008e39:	e8 a0 9f 00 00       	call   c0012dde <CPU::cpuidCheckEDX(unsigned int)>
c0008e3e:	83 e0 01             	and    eax,0x1
c0008e41:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008e48:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e4e:	83 e0 f7             	and    eax,0xfffffff7
c0008e51:	09 d0                	or     eax,edx
c0008e53:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e59:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008e60:	e8 79 9f 00 00       	call   c0012dde <CPU::cpuidCheckEDX(unsigned int)>
c0008e65:	83 e0 01             	and    eax,0x1
c0008e68:	88 c2                	mov    dl,al
c0008e6a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008e70:	83 e0 fe             	and    eax,0xfffffffe
c0008e73:	09 d0                	or     eax,edx
c0008e75:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008e7b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008e82:	e8 57 9f 00 00       	call   c0012dde <CPU::cpuidCheckEDX(unsigned int)>
c0008e87:	c1 e0 07             	shl    eax,0x7
c0008e8a:	88 c2                	mov    dl,al
c0008e8c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008e92:	83 e0 7f             	and    eax,0x7f
c0008e95:	09 d0                	or     eax,edx
c0008e97:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008e9d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008ea4:	e8 35 9f 00 00       	call   c0012dde <CPU::cpuidCheckEDX(unsigned int)>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	83 e0 01             	and    eax,0x1
c0008eaf:	c1 e0 05             	shl    eax,0x5
c0008eb2:	88 c2                	mov    dl,al
c0008eb4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008eba:	83 e0 df             	and    eax,0xffffffdf
c0008ebd:	09 d0                	or     eax,edx
c0008ebf:	f7 05 80 62 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026280,0x401
c0008ec9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ecf:	0f 84 c2 00 00 00    	je     c0008f97 <Computer::detectFeatures()+0x1df>
c0008ed5:	83 e0 fe             	and    eax,0xfffffffe
c0008ed8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ede:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ee4:	88 c2                	mov    dl,al
c0008ee6:	83 e2 09             	and    edx,0x9
c0008ee9:	fe ca                	dec    dl
c0008eeb:	75 09                	jne    c0008ef6 <Computer::detectFeatures()+0x13e>
c0008eed:	83 e0 fe             	and    eax,0xfffffffe
c0008ef0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ef6:	83 ec 0c             	sub    esp,0xc
c0008ef9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008efd:	50                   	push   eax
c0008efe:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008f02:	55                   	push   ebp
c0008f03:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008f07:	57                   	push   edi
c0008f08:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008f0c:	56                   	push   esi
c0008f0d:	68 00 00 00 80       	push   0x80000000
c0008f12:	e8 43 9e 00 00       	call   c0012d5a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008f17:	83 c4 20             	add    esp,0x20
c0008f1a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008f21:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008f25:	0f 86 c3 fe ff ff    	jbe    c0008dee <Computer::detectFeatures()+0x36>
c0008f2b:	83 ec 0c             	sub    esp,0xc
c0008f2e:	50                   	push   eax
c0008f2f:	55                   	push   ebp
c0008f30:	57                   	push   edi
c0008f31:	56                   	push   esi
c0008f32:	68 01 00 00 80       	push   0x80000001
c0008f37:	e8 1e 9e 00 00       	call   c0012d5a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008f3c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008f46:	83 c4 20             	add    esp,0x20
c0008f49:	e9 a0 fe ff ff       	jmp    c0008dee <Computer::detectFeatures()+0x36>
c0008f4e:	e8 2d 7b 01 00       	call   c0020a80 <absolutelyNoChanceInHell>
c0008f53:	88 c2                	mov    dl,al
c0008f55:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f5b:	c1 e2 07             	shl    edx,0x7
c0008f5e:	83 e0 7f             	and    eax,0x7f
c0008f61:	09 d0                	or     eax,edx
c0008f63:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f69:	84 c0                	test   al,al
c0008f6b:	0f 89 bb fe ff ff    	jns    c0008e2c <Computer::detectFeatures()+0x74>
c0008f71:	e8 ea 7a 01 00       	call   c0020a60 <avxDetect>
c0008f76:	83 e0 01             	and    eax,0x1
c0008f79:	c1 e0 05             	shl    eax,0x5
c0008f7c:	88 c2                	mov    dl,al
c0008f7e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008f84:	83 e0 df             	and    eax,0xffffffdf
c0008f87:	09 d0                	or     eax,edx
c0008f89:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008f8f:	83 c4 1c             	add    esp,0x1c
c0008f92:	5b                   	pop    ebx
c0008f93:	5e                   	pop    esi
c0008f94:	5f                   	pop    edi
c0008f95:	5d                   	pop    ebp
c0008f96:	c3                   	ret    
c0008f97:	83 ec 0c             	sub    esp,0xc
c0008f9a:	68 00 02 00 00       	push   0x200
c0008f9f:	e8 3a 9e 00 00       	call   c0012dde <CPU::cpuidCheckEDX(unsigned int)>
c0008fa4:	83 c4 10             	add    esp,0x10
c0008fa7:	83 e0 01             	and    eax,0x1
c0008faa:	88 c2                	mov    dl,al
c0008fac:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008fb2:	83 e0 fe             	and    eax,0xfffffffe
c0008fb5:	09 d0                	or     eax,edx
c0008fb7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008fbd:	e9 1c ff ff ff       	jmp    c0008ede <Computer::detectFeatures()+0x126>

c0008fc2 <Computer::displayFeatures()>:
c0008fc2:	c3                   	ret    
c0008fc3:	90                   	nop

c0008fc4 <Computer::rdmsr(unsigned int)>:
c0008fc4:	83 ec 0c             	sub    esp,0xc
c0008fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fcb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008fd2:	74 0a                	je     c0008fde <Computer::rdmsr(unsigned int)+0x1a>
c0008fd4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008fd8:	0f 32                	rdmsr  
c0008fda:	83 c4 0c             	add    esp,0xc
c0008fdd:	c3                   	ret    
c0008fde:	83 ec 0c             	sub    esp,0xc
c0008fe1:	68 41 24 02 c0       	push   0xc0022441
c0008fe6:	e8 92 b4 00 00       	call   c001447d <Krnl::panic(char const*)>
c0008feb:	83 c4 10             	add    esp,0x10
c0008fee:	eb e4                	jmp    c0008fd4 <Computer::rdmsr(unsigned int)+0x10>

c0008ff0 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008ff0:	57                   	push   edi
c0008ff1:	56                   	push   esi
c0008ff2:	52                   	push   edx
c0008ff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ff7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ffb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008fff:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009006:	74 0e                	je     c0009016 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0009008:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000900c:	89 f0                	mov    eax,esi
c000900e:	89 fa                	mov    edx,edi
c0009010:	0f 30                	wrmsr  
c0009012:	58                   	pop    eax
c0009013:	5e                   	pop    esi
c0009014:	5f                   	pop    edi
c0009015:	c3                   	ret    
c0009016:	83 ec 0c             	sub    esp,0xc
c0009019:	68 47 24 02 c0       	push   0xc0022447
c000901e:	e8 5a b4 00 00       	call   c001447d <Krnl::panic(char const*)>
c0009023:	83 c4 10             	add    esp,0x10
c0009026:	eb e0                	jmp    c0009008 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0009028 <Computer::nmiEnabled()>:
c0009028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000902c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0009032:	c3                   	ret    
c0009033:	90                   	nop

c0009034 <Computer::readCMOS(unsigned char)>:
c0009034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009038:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000903f:	19 c0                	sbb    eax,eax
c0009041:	83 e0 80             	and    eax,0xffffff80
c0009044:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009048:	e6 70                	out    0x70,al
c000904a:	e4 71                	in     al,0x71
c000904c:	c3                   	ret    
c000904d:	90                   	nop

c000904e <Computer::enableNMI(bool)>:
c000904e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009052:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009056:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000905c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0009064:	eb ce                	jmp    c0009034 <Computer::readCMOS(unsigned char)>

c0009066 <Computer::open(int, int, void*)>:
c0009066:	56                   	push   esi
c0009067:	53                   	push   ebx
c0009068:	83 ec 10             	sub    esp,0x10
c000906b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000906f:	68 a4 25 02 c0       	push   0xc00225a4
c0009074:	e8 3e 0a 00 00       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0009079:	58                   	pop    eax
c000907a:	f6 05 80 62 02 c0 04 	test   BYTE PTR ds:0xc0026280,0x4
c0009081:	5a                   	pop    edx
c0009082:	0f 94 05 40 56 02 c0 	sete   BYTE PTR ds:0xc0025640
c0009089:	68 58 01 00 00       	push   0x158
c000908e:	68 4d 24 02 c0       	push   0xc002244d
c0009093:	e8 26 3a 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0009098:	59                   	pop    ecx
c0009099:	5e                   	pop    esi
c000909a:	68 14 01 00 00       	push   0x114
c000909f:	68 63 24 02 c0       	push   0xc0022463
c00090a4:	e8 15 3a 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c00090a9:	58                   	pop    eax
c00090aa:	5a                   	pop    edx
c00090ab:	6a 14                	push   0x14
c00090ad:	68 77 24 02 c0       	push   0xc0022477
c00090b2:	e8 07 3a 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c00090b7:	59                   	pop    ecx
c00090b8:	5e                   	pop    esi
c00090b9:	68 3f 07 00 00       	push   0x73f
c00090be:	68 8a 24 02 c0       	push   0xc002248a
c00090c3:	e8 f6 39 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c00090c8:	58                   	pop    eax
c00090c9:	5a                   	pop    edx
c00090ca:	6a 63                	push   0x63
c00090cc:	68 a1 24 02 c0       	push   0xc00224a1
c00090d1:	e8 e8 39 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c00090d6:	c7 04 24 b7 24 02 c0 	mov    DWORD PTR [esp],0xc00224b7
c00090dd:	e8 dc 39 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c00090e2:	c7 04 24 c9 24 02 c0 	mov    DWORD PTR [esp],0xc00224c9
c00090e9:	e8 c9 09 00 00       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c00090ee:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00090f5:	e8 63 09 00 00       	call   c0009a5d <malloc>
c00090fa:	89 c6                	mov    esi,eax
c00090fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00090ff:	e8 3e 8f 00 00       	call   c0012042 <ACPI::ACPI()>
c0009104:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000910a:	c7 04 24 e3 24 02 c0 	mov    DWORD PTR [esp],0xc00224e3
c0009111:	e8 a1 09 00 00       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0009116:	59                   	pop    ecx
c0009117:	5e                   	pop    esi
c0009118:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000911e:	53                   	push   ebx
c000911f:	e8 de 4d 00 00       	call   c000df02 <Device::addChild(Device*)>
c0009124:	c7 04 24 c8 25 02 c0 	mov    DWORD PTR [esp],0xc00225c8
c000912b:	e8 87 09 00 00       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0009130:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009133:	e8 80 fc ff ff       	call   c0008db8 <Computer::detectFeatures()>
c0009138:	c7 04 24 e8 25 02 c0 	mov    DWORD PTR [esp],0xc00225e8
c000913f:	e8 73 09 00 00       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0009144:	c7 04 24 fd 24 02 c0 	mov    DWORD PTR [esp],0xc00224fd
c000914b:	e8 67 09 00 00       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0009150:	58                   	pop    eax
c0009151:	5a                   	pop    edx
c0009152:	6a 01                	push   0x1
c0009154:	53                   	push   ebx
c0009155:	e8 f4 fe ff ff       	call   c000904e <Computer::enableNMI(bool)>
c000915a:	c7 04 24 f1 23 02 c0 	mov    DWORD PTR [esp],0xc00223f1
c0009161:	e8 51 09 00 00       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0009166:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000916d:	e8 eb 08 00 00       	call   c0009a5d <malloc>
c0009172:	89 04 24             	mov    DWORD PTR [esp],eax
c0009175:	89 c6                	mov    esi,eax
c0009177:	e8 1a 9d 00 00       	call   c0012e96 <CPU::CPU()>
c000917c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0009182:	59                   	pop    ecx
c0009183:	58                   	pop    eax
c0009184:	56                   	push   esi
c0009185:	53                   	push   ebx
c0009186:	e8 77 4d 00 00       	call   c000df02 <Device::addChild(Device*)>
c000918b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0009191:	8b 10                	mov    edx,DWORD PTR [eax]
c0009193:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009197:	6a 00                	push   0x0
c0009199:	6a 00                	push   0x0
c000919b:	50                   	push   eax
c000919c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000919f:	83 c4 14             	add    esp,0x14
c00091a2:	68 08 26 02 c0       	push   0xc0022608
c00091a7:	e8 0b 09 00 00       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c00091ac:	e8 e9 52 00 00       	call   c000e49a <setupFPU()>
c00091b1:	83 c4 10             	add    esp,0x10
c00091b4:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00091ba:	85 c0                	test   eax,eax
c00091bc:	74 1f                	je     c00091dd <Computer::open(int, int, void*)+0x177>
c00091be:	83 ec 08             	sub    esp,0x8
c00091c1:	50                   	push   eax
c00091c2:	53                   	push   ebx
c00091c3:	e8 3a 4d 00 00       	call   c000df02 <Device::addChild(Device*)>
c00091c8:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c00091ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00091d0:	6a 00                	push   0x0
c00091d2:	6a 00                	push   0x0
c00091d4:	6a 00                	push   0x0
c00091d6:	50                   	push   eax
c00091d7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00091da:	83 c4 20             	add    esp,0x20
c00091dd:	83 ec 0c             	sub    esp,0xc
c00091e0:	68 0e 25 02 c0       	push   0xc002250e
c00091e5:	e8 cd 08 00 00       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c00091ea:	c7 04 24 0c 8b 00 c0 	mov    DWORD PTR [esp],0xc0008b0c
c00091f1:	e8 16 ed 00 00       	call   c0017f0c <setupMultitasking(void (*)())>
c00091f6:	83 c4 14             	add    esp,0x14
c00091f9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00091fe:	5b                   	pop    ebx
c00091ff:	5e                   	pop    esi
c0009200:	c3                   	ret    
c0009201:	90                   	nop

c0009202 <Computer::disableNMI()>:
c0009202:	6a 00                	push   0x0
c0009204:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009208:	e8 41 fe ff ff       	call   c000904e <Computer::enableNMI(bool)>
c000920d:	58                   	pop    eax
c000920e:	5a                   	pop    edx
c000920f:	c3                   	ret    

c0009210 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009210:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009214:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000921b:	19 c0                	sbb    eax,eax
c000921d:	83 e0 80             	and    eax,0xffffff80
c0009220:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009224:	e6 70                	out    0x70,al
c0009226:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000922a:	e6 71                	out    0x71,al
c000922c:	c3                   	ret    
c000922d:	90                   	nop

c000922e <Computer::handleNMI()>:
c000922e:	56                   	push   esi
c000922f:	53                   	push   ebx
c0009230:	83 ec 10             	sub    esp,0x10
c0009233:	e4 92                	in     al,0x92
c0009235:	89 c6                	mov    esi,eax
c0009237:	e4 61                	in     al,0x61
c0009239:	68 29 25 02 c0       	push   0xc0022529
c000923e:	88 c3                	mov    bl,al
c0009240:	e8 79 38 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	83 e6 10             	and    esi,0x10
c000924b:	75 0d                	jne    c000925a <Computer::handleNMI()+0x2c>
c000924d:	f6 c3 40             	test   bl,0x40
c0009250:	75 1d                	jne    c000926f <Computer::handleNMI()+0x41>
c0009252:	84 db                	test   bl,bl
c0009254:	78 2d                	js     c0009283 <Computer::handleNMI()+0x55>
c0009256:	58                   	pop    eax
c0009257:	5b                   	pop    ebx
c0009258:	5e                   	pop    esi
c0009259:	c3                   	ret    
c000925a:	83 ec 0c             	sub    esp,0xc
c000925d:	68 3a 25 02 c0       	push   0xc002253a
c0009262:	e8 16 b2 00 00       	call   c001447d <Krnl::panic(char const*)>
c0009267:	83 c4 10             	add    esp,0x10
c000926a:	f6 c3 40             	test   bl,0x40
c000926d:	74 e3                	je     c0009252 <Computer::handleNMI()+0x24>
c000926f:	83 ec 0c             	sub    esp,0xc
c0009272:	68 47 25 02 c0       	push   0xc0022547
c0009277:	e8 01 b2 00 00       	call   c001447d <Krnl::panic(char const*)>
c000927c:	83 c4 10             	add    esp,0x10
c000927f:	84 db                	test   bl,bl
c0009281:	79 d3                	jns    c0009256 <Computer::handleNMI()+0x28>
c0009283:	c7 44 24 10 51 25 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022551
c000928b:	5a                   	pop    edx
c000928c:	5b                   	pop    ebx
c000928d:	5e                   	pop    esi
c000928e:	e9 ea b1 00 00       	jmp    c001447d <Krnl::panic(char const*)>
c0009293:	90                   	nop

c0009294 <Computer::setDiskActivityLight(int, bool)>:
c0009294:	56                   	push   esi
c0009295:	53                   	push   ebx
c0009296:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000929a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000929f:	77 1b                	ja     c00092bc <Computer::setDiskActivityLight(int, bool)+0x28>
c00092a1:	e4 92                	in     al,0x92
c00092a3:	bb 40 00 00 00       	mov    ebx,0x40
c00092a8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00092ac:	89 da                	mov    edx,ebx
c00092ae:	d3 e2                	shl    edx,cl
c00092b0:	89 f1                	mov    ecx,esi
c00092b2:	f7 d2                	not    edx
c00092b4:	d3 e3                	shl    ebx,cl
c00092b6:	21 d0                	and    eax,edx
c00092b8:	09 d8                	or     eax,ebx
c00092ba:	e6 92                	out    0x92,al
c00092bc:	5b                   	pop    ebx
c00092bd:	5e                   	pop    esi
c00092be:	c3                   	ret    
c00092bf:	90                   	nop

c00092c0 <GDTEntry::setBase(unsigned int)>:
c00092c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00092c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00092c8:	89 c1                	mov    ecx,eax
c00092ca:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00092ce:	c1 e9 10             	shr    ecx,0x10
c00092d1:	c1 e8 18             	shr    eax,0x18
c00092d4:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00092d7:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00092da:	c3                   	ret    
c00092db:	90                   	nop

c00092dc <GDTEntry::setLimit(unsigned int)>:
c00092dc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00092e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00092e4:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00092e7:	66 89 01             	mov    WORD PTR [ecx],ax
c00092ea:	83 e2 f0             	and    edx,0xfffffff0
c00092ed:	c1 e8 10             	shr    eax,0x10
c00092f0:	83 e0 0f             	and    eax,0xf
c00092f3:	09 d0                	or     eax,edx
c00092f5:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00092f8:	c3                   	ret    
c00092f9:	90                   	nop

c00092fa <GDT::GDT()>:
c00092fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009304:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009308:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000930e:	90                   	nop
c000930f:	c3                   	ret    

c0009310 <GDT::addEntry(GDTEntry)>:
c0009310:	53                   	push   ebx
c0009311:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009315:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009319:	8b 02                	mov    eax,DWORD PTR [edx]
c000931b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000931f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009323:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009327:	8d 48 01             	lea    ecx,[eax+0x1]
c000932a:	c1 e0 03             	shl    eax,0x3
c000932d:	89 0a                	mov    DWORD PTR [edx],ecx
c000932f:	5b                   	pop    ebx
c0009330:	c3                   	ret    
c0009331:	90                   	nop

c0009332 <GDT::getNumberOfEntries()>:
c0009332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009336:	8b 00                	mov    eax,DWORD PTR [eax]
c0009338:	c3                   	ret    
c0009339:	90                   	nop

c000933a <GDT::flush()>:
c000933a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000933e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009340:	83 c0 04             	add    eax,0x4
c0009343:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000934a:	a3 72 62 02 c0       	mov    ds:0xc0026272,eax
c000934f:	66 89 15 70 62 02 c0 	mov    WORD PTR ds:0xc0026270,dx
c0009356:	e9 f5 70 ff ff       	jmp    c0000450 <loadGDT>
c000935b:	90                   	nop

c000935c <GDT::setup()>:
c000935c:	55                   	push   ebp
c000935d:	57                   	push   edi
c000935e:	56                   	push   esi
c000935f:	53                   	push   ebx
c0009360:	83 ec 3c             	sub    esp,0x3c
c0009363:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0009367:	6a 00                	push   0x0
c0009369:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000936d:	53                   	push   ebx
c000936e:	e8 4d ff ff ff       	call   c00092c0 <GDTEntry::setBase(unsigned int)>
c0009373:	6a 00                	push   0x0
c0009375:	53                   	push   ebx
c0009376:	e8 61 ff ff ff       	call   c00092dc <GDTEntry::setLimit(unsigned int)>
c000937b:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c0009383:	6a 00                	push   0x0
c0009385:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0009389:	53                   	push   ebx
c000938a:	e8 31 ff ff ff       	call   c00092c0 <GDTEntry::setBase(unsigned int)>
c000938f:	68 ff ff ff 00       	push   0xffffff
c0009394:	53                   	push   ebx
c0009395:	e8 42 ff ff ff       	call   c00092dc <GDTEntry::setLimit(unsigned int)>
c000939a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000939e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00093a3:	0d 00 9a c0 00       	or     eax,0xc09a00
c00093a8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00093ac:	83 c4 20             	add    esp,0x20
c00093af:	6a 00                	push   0x0
c00093b1:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00093b5:	53                   	push   ebx
c00093b6:	e8 05 ff ff ff       	call   c00092c0 <GDTEntry::setBase(unsigned int)>
c00093bb:	68 ff ff ff 00       	push   0xffffff
c00093c0:	53                   	push   ebx
c00093c1:	e8 16 ff ff ff       	call   c00092dc <GDTEntry::setLimit(unsigned int)>
c00093c6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00093ca:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00093ce:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00093d2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00093d6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00093da:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00093df:	0d 00 92 c0 00       	or     eax,0xc09200
c00093e4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00093e8:	89 d8                	mov    eax,ebx
c00093ea:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00093ee:	80 cc 60             	or     ah,0x60
c00093f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00093f5:	83 c4 0c             	add    esp,0xc
c00093f8:	89 f8                	mov    eax,edi
c00093fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00093fe:	80 cc 60             	or     ah,0x60
c0009401:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009405:	89 c7                	mov    edi,eax
c0009407:	55                   	push   ebp
c0009408:	e8 03 ff ff ff       	call   c0009310 <GDT::addEntry(GDTEntry)>
c000940d:	83 c4 0c             	add    esp,0xc
c0009410:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009414:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009418:	55                   	push   ebp
c0009419:	e8 f2 fe ff ff       	call   c0009310 <GDT::addEntry(GDTEntry)>
c000941e:	83 c4 0c             	add    esp,0xc
c0009421:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009425:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009429:	55                   	push   ebp
c000942a:	e8 e1 fe ff ff       	call   c0009310 <GDT::addEntry(GDTEntry)>
c000942f:	83 c4 0c             	add    esp,0xc
c0009432:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009436:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000943a:	53                   	push   ebx
c000943b:	51                   	push   ecx
c000943c:	55                   	push   ebp
c000943d:	e8 ce fe ff ff       	call   c0009310 <GDT::addEntry(GDTEntry)>
c0009442:	83 c4 0c             	add    esp,0xc
c0009445:	57                   	push   edi
c0009446:	56                   	push   esi
c0009447:	55                   	push   ebp
c0009448:	e8 c3 fe ff ff       	call   c0009310 <GDT::addEntry(GDTEntry)>
c000944d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009450:	e8 e5 fe ff ff       	call   c000933a <GDT::flush()>
c0009455:	83 c4 4c             	add    esp,0x4c
c0009458:	5b                   	pop    ebx
c0009459:	5e                   	pop    esi
c000945a:	5f                   	pop    edi
c000945b:	5d                   	pop    ebp
c000945c:	c3                   	ret    

c000945d <idleFunction(void*)>:
c000945d:	53                   	push   ebx
c000945e:	83 ec 08             	sub    esp,0x8
c0009461:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0009466:	48                   	dec    eax
c0009467:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c000946c:	75 01                	jne    c000946f <idleFunction(void*)+0x12>
c000946e:	fb                   	sti    
c000946f:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0009474:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000947a:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c0009481:	74 3c                	je     c00094bf <idleFunction(void*)+0x62>
c0009483:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000948a:	74 33                	je     c00094bf <idleFunction(void*)+0x62>
c000948c:	31 db                	xor    ebx,ebx
c000948e:	52                   	push   edx
c000948f:	52                   	push   edx
c0009490:	68 e1 00 00 00       	push   0xe1
c0009495:	50                   	push   eax
c0009496:	e8 29 fb ff ff       	call   c0008fc4 <Computer::rdmsr(unsigned int)>
c000949b:	53                   	push   ebx
c000949c:	83 e0 02             	and    eax,0x2
c000949f:	50                   	push   eax
c00094a0:	68 e1 00 00 00       	push   0xe1
c00094a5:	ff 35 68 62 02 c0    	push   DWORD PTR ds:0xc0026268
c00094ab:	e8 40 fb ff ff       	call   c0008ff0 <Computer::wrmsr(unsigned int, unsigned long long)>
c00094b0:	83 c4 20             	add    esp,0x20
c00094b3:	e8 c7 6d ff ff       	call   c000027f <doTPAUSE>
c00094b8:	e8 c9 7b 01 00       	call   c0021086 <idleCommon()>
c00094bd:	eb f4                	jmp    c00094b3 <idleFunction(void*)+0x56>
c00094bf:	fb                   	sti    
c00094c0:	f4                   	hlt    
c00094c1:	e8 c0 7b 01 00       	call   c0021086 <idleCommon()>
c00094c6:	eb f7                	jmp    c00094bf <idleFunction(void*)+0x62>

c00094c8 <IDTEntry::IDTEntry(bool)>:
c00094c8:	83 ec 04             	sub    esp,0x4
c00094cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00094cf:	88 04 24             	mov    BYTE PTR [esp],al
c00094d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094d6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00094dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094e0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00094e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094e8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094eb:	83 e2 f0             	and    edx,0xfffffff0
c00094ee:	83 ca 0e             	or     edx,0xe
c00094f1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094f8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094fb:	83 e2 ef             	and    edx,0xffffffef
c00094fe:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009501:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009505:	74 04                	je     c000950b <IDTEntry::IDTEntry(bool)+0x43>
c0009507:	b2 03                	mov    dl,0x3
c0009509:	eb 02                	jmp    c000950d <IDTEntry::IDTEntry(bool)+0x45>
c000950b:	b2 00                	mov    dl,0x0
c000950d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009511:	83 e2 03             	and    edx,0x3
c0009514:	88 d1                	mov    cl,dl
c0009516:	c1 e1 05             	shl    ecx,0x5
c0009519:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000951c:	83 e2 9f             	and    edx,0xffffff9f
c000951f:	09 ca                	or     edx,ecx
c0009521:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009528:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000952b:	83 ca 80             	or     edx,0xffffff80
c000952e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009531:	90                   	nop
c0009532:	83 c4 04             	add    esp,0x4
c0009535:	c3                   	ret    

c0009536 <IDTEntry::setOffset(unsigned int)>:
c0009536:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000953a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000953e:	66 89 02             	mov    WORD PTR [edx],ax
c0009541:	c1 e8 10             	shr    eax,0x10
c0009544:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0009548:	c3                   	ret    
c0009549:	90                   	nop

c000954a <IDT::IDT()>:
c000954a:	90                   	nop
c000954b:	c3                   	ret    

c000954c <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000954c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009550:	83 c0 30             	add    eax,0x30
c0009553:	c3                   	ret    

c0009554 <IDT::addEntry(IDTEntry, int)>:
c0009554:	53                   	push   ebx
c0009555:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009559:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000955d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009561:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009565:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0009568:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000956c:	5b                   	pop    ebx
c000956d:	c3                   	ret    

c000956e <IDT::addEntry(int, void (*)(), bool)>:
c000956e:	53                   	push   ebx
c000956f:	83 ec 10             	sub    esp,0x10
c0009572:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009577:	50                   	push   eax
c0009578:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000957c:	53                   	push   ebx
c000957d:	e8 46 ff ff ff       	call   c00094c8 <IDTEntry::IDTEntry(bool)>
c0009582:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009586:	53                   	push   ebx
c0009587:	e8 aa ff ff ff       	call   c0009536 <IDTEntry::setOffset(unsigned int)>
c000958c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009590:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009594:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009598:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000959c:	e8 b3 ff ff ff       	call   c0009554 <IDT::addEntry(IDTEntry, int)>
c00095a1:	83 c4 30             	add    esp,0x30
c00095a4:	5b                   	pop    ebx
c00095a5:	c3                   	ret    

c00095a6 <IDT::flush()>:
c00095a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095aa:	66 c7 05 78 62 02 c0 ff 07 	mov    WORD PTR ds:0xc0026278,0x7ff
c00095b3:	a3 7a 62 02 c0       	mov    ds:0xc002627a,eax
c00095b8:	0f 01 1d 78 62 02 c0 	lidtd  ds:0xc0026278
c00095bf:	c3                   	ret    

c00095c0 <IDT::setup()>:
c00095c0:	57                   	push   edi
c00095c1:	56                   	push   esi
c00095c2:	53                   	push   ebx
c00095c3:	83 ec 10             	sub    esp,0x10
c00095c6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00095ca:	6a 00                	push   0x0
c00095cc:	68 70 04 00 c0       	push   0xc0000470
c00095d1:	6a 00                	push   0x0
c00095d3:	53                   	push   ebx
c00095d4:	e8 95 ff ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c00095d9:	6a 00                	push   0x0
c00095db:	68 80 04 00 c0       	push   0xc0000480
c00095e0:	6a 01                	push   0x1
c00095e2:	53                   	push   ebx
c00095e3:	e8 86 ff ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c00095e8:	83 c4 20             	add    esp,0x20
c00095eb:	6a 00                	push   0x0
c00095ed:	68 8a 04 00 c0       	push   0xc000048a
c00095f2:	6a 02                	push   0x2
c00095f4:	53                   	push   ebx
c00095f5:	e8 74 ff ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c00095fa:	6a 00                	push   0x0
c00095fc:	68 94 04 00 c0       	push   0xc0000494
c0009601:	6a 03                	push   0x3
c0009603:	53                   	push   ebx
c0009604:	e8 65 ff ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c0009609:	83 c4 20             	add    esp,0x20
c000960c:	6a 00                	push   0x0
c000960e:	68 9e 04 00 c0       	push   0xc000049e
c0009613:	6a 04                	push   0x4
c0009615:	53                   	push   ebx
c0009616:	e8 53 ff ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c000961b:	6a 00                	push   0x0
c000961d:	68 a8 04 00 c0       	push   0xc00004a8
c0009622:	6a 05                	push   0x5
c0009624:	53                   	push   ebx
c0009625:	e8 44 ff ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c000962a:	83 c4 20             	add    esp,0x20
c000962d:	6a 00                	push   0x0
c000962f:	68 b2 04 00 c0       	push   0xc00004b2
c0009634:	6a 06                	push   0x6
c0009636:	53                   	push   ebx
c0009637:	e8 32 ff ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c000963c:	6a 00                	push   0x0
c000963e:	68 bc 04 00 c0       	push   0xc00004bc
c0009643:	6a 07                	push   0x7
c0009645:	53                   	push   ebx
c0009646:	e8 23 ff ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c000964b:	83 c4 20             	add    esp,0x20
c000964e:	6a 00                	push   0x0
c0009650:	68 c6 04 00 c0       	push   0xc00004c6
c0009655:	6a 08                	push   0x8
c0009657:	53                   	push   ebx
c0009658:	e8 11 ff ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c000965d:	6a 00                	push   0x0
c000965f:	68 ce 04 00 c0       	push   0xc00004ce
c0009664:	6a 09                	push   0x9
c0009666:	53                   	push   ebx
c0009667:	e8 02 ff ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c000966c:	83 c4 20             	add    esp,0x20
c000966f:	6a 00                	push   0x0
c0009671:	68 d8 04 00 c0       	push   0xc00004d8
c0009676:	6a 0a                	push   0xa
c0009678:	53                   	push   ebx
c0009679:	e8 f0 fe ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c000967e:	6a 00                	push   0x0
c0009680:	68 e0 04 00 c0       	push   0xc00004e0
c0009685:	6a 0b                	push   0xb
c0009687:	53                   	push   ebx
c0009688:	e8 e1 fe ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c000968d:	83 c4 20             	add    esp,0x20
c0009690:	6a 00                	push   0x0
c0009692:	68 e8 04 00 c0       	push   0xc00004e8
c0009697:	6a 0c                	push   0xc
c0009699:	53                   	push   ebx
c000969a:	e8 cf fe ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c000969f:	6a 00                	push   0x0
c00096a1:	68 f0 04 00 c0       	push   0xc00004f0
c00096a6:	6a 0d                	push   0xd
c00096a8:	53                   	push   ebx
c00096a9:	e8 c0 fe ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c00096ae:	83 c4 20             	add    esp,0x20
c00096b1:	6a 00                	push   0x0
c00096b3:	68 f8 04 00 c0       	push   0xc00004f8
c00096b8:	6a 0e                	push   0xe
c00096ba:	53                   	push   ebx
c00096bb:	e8 ae fe ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c00096c0:	6a 00                	push   0x0
c00096c2:	68 00 05 00 c0       	push   0xc0000500
c00096c7:	6a 0f                	push   0xf
c00096c9:	53                   	push   ebx
c00096ca:	e8 9f fe ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c00096cf:	83 c4 20             	add    esp,0x20
c00096d2:	6a 00                	push   0x0
c00096d4:	68 0a 05 00 c0       	push   0xc000050a
c00096d9:	6a 10                	push   0x10
c00096db:	53                   	push   ebx
c00096dc:	e8 8d fe ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c00096e1:	6a 00                	push   0x0
c00096e3:	68 14 05 00 c0       	push   0xc0000514
c00096e8:	6a 11                	push   0x11
c00096ea:	53                   	push   ebx
c00096eb:	e8 7e fe ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c00096f0:	83 c4 20             	add    esp,0x20
c00096f3:	6a 00                	push   0x0
c00096f5:	68 1e 05 00 c0       	push   0xc000051e
c00096fa:	6a 12                	push   0x12
c00096fc:	53                   	push   ebx
c00096fd:	e8 6c fe ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c0009702:	6a 01                	push   0x1
c0009704:	68 b8 05 00 c0       	push   0xc00005b8
c0009709:	6a 60                	push   0x60
c000970b:	53                   	push   ebx
c000970c:	e8 5d fe ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c0009711:	83 c4 20             	add    esp,0x20
c0009714:	6a 00                	push   0x0
c0009716:	68 bf 05 00 c0       	push   0xc00005bf
c000971b:	6a 20                	push   0x20
c000971d:	53                   	push   ebx
c000971e:	e8 4b fe ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c0009723:	6a 00                	push   0x0
c0009725:	68 aa 05 00 c0       	push   0xc00005aa
c000972a:	6a 21                	push   0x21
c000972c:	53                   	push   ebx
c000972d:	e8 3c fe ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c0009732:	83 c4 20             	add    esp,0x20
c0009735:	6a 00                	push   0x0
c0009737:	68 b1 05 00 c0       	push   0xc00005b1
c000973c:	6a 22                	push   0x22
c000973e:	53                   	push   ebx
c000973f:	e8 2a fe ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c0009744:	6a 00                	push   0x0
c0009746:	68 28 05 00 c0       	push   0xc0000528
c000974b:	6a 23                	push   0x23
c000974d:	53                   	push   ebx
c000974e:	e8 1b fe ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c0009753:	83 c4 20             	add    esp,0x20
c0009756:	6a 00                	push   0x0
c0009758:	68 32 05 00 c0       	push   0xc0000532
c000975d:	6a 24                	push   0x24
c000975f:	53                   	push   ebx
c0009760:	e8 09 fe ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c0009765:	6a 00                	push   0x0
c0009767:	68 3c 05 00 c0       	push   0xc000053c
c000976c:	6a 25                	push   0x25
c000976e:	53                   	push   ebx
c000976f:	e8 fa fd ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c0009774:	83 c4 20             	add    esp,0x20
c0009777:	6a 00                	push   0x0
c0009779:	68 46 05 00 c0       	push   0xc0000546
c000977e:	6a 26                	push   0x26
c0009780:	53                   	push   ebx
c0009781:	e8 e8 fd ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c0009786:	6a 00                	push   0x0
c0009788:	68 50 05 00 c0       	push   0xc0000550
c000978d:	6a 27                	push   0x27
c000978f:	53                   	push   ebx
c0009790:	e8 d9 fd ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c0009795:	83 c4 20             	add    esp,0x20
c0009798:	6a 00                	push   0x0
c000979a:	68 5a 05 00 c0       	push   0xc000055a
c000979f:	6a 28                	push   0x28
c00097a1:	53                   	push   ebx
c00097a2:	e8 c7 fd ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c00097a7:	6a 00                	push   0x0
c00097a9:	68 64 05 00 c0       	push   0xc0000564
c00097ae:	6a 29                	push   0x29
c00097b0:	53                   	push   ebx
c00097b1:	e8 b8 fd ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c00097b6:	83 c4 20             	add    esp,0x20
c00097b9:	6a 00                	push   0x0
c00097bb:	68 6e 05 00 c0       	push   0xc000056e
c00097c0:	6a 2a                	push   0x2a
c00097c2:	53                   	push   ebx
c00097c3:	e8 a6 fd ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c00097c8:	6a 00                	push   0x0
c00097ca:	68 78 05 00 c0       	push   0xc0000578
c00097cf:	6a 2b                	push   0x2b
c00097d1:	53                   	push   ebx
c00097d2:	e8 97 fd ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c00097d7:	83 c4 20             	add    esp,0x20
c00097da:	6a 00                	push   0x0
c00097dc:	68 82 05 00 c0       	push   0xc0000582
c00097e1:	6a 2c                	push   0x2c
c00097e3:	53                   	push   ebx
c00097e4:	e8 85 fd ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c00097e9:	6a 00                	push   0x0
c00097eb:	68 8c 05 00 c0       	push   0xc000058c
c00097f0:	6a 2d                	push   0x2d
c00097f2:	53                   	push   ebx
c00097f3:	e8 76 fd ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c00097f8:	83 c4 20             	add    esp,0x20
c00097fb:	6a 00                	push   0x0
c00097fd:	68 96 05 00 c0       	push   0xc0000596
c0009802:	6a 2e                	push   0x2e
c0009804:	53                   	push   ebx
c0009805:	e8 64 fd ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c000980a:	6a 00                	push   0x0
c000980c:	68 a0 05 00 c0       	push   0xc00005a0
c0009811:	6a 2f                	push   0x2f
c0009813:	53                   	push   ebx
c0009814:	e8 55 fd ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c0009819:	83 c4 20             	add    esp,0x20
c000981c:	6a 00                	push   0x0
c000981e:	68 f6 05 00 c0       	push   0xc00005f6
c0009823:	6a 30                	push   0x30
c0009825:	53                   	push   ebx
c0009826:	e8 43 fd ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c000982b:	6a 00                	push   0x0
c000982d:	68 00 06 00 c0       	push   0xc0000600
c0009832:	6a 31                	push   0x31
c0009834:	53                   	push   ebx
c0009835:	e8 34 fd ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c000983a:	83 c4 20             	add    esp,0x20
c000983d:	6a 00                	push   0x0
c000983f:	68 0a 06 00 c0       	push   0xc000060a
c0009844:	6a 32                	push   0x32
c0009846:	53                   	push   ebx
c0009847:	e8 22 fd ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c000984c:	6a 00                	push   0x0
c000984e:	68 14 06 00 c0       	push   0xc0000614
c0009853:	6a 33                	push   0x33
c0009855:	53                   	push   ebx
c0009856:	e8 13 fd ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c000985b:	83 c4 20             	add    esp,0x20
c000985e:	6a 00                	push   0x0
c0009860:	68 1e 06 00 c0       	push   0xc000061e
c0009865:	6a 34                	push   0x34
c0009867:	53                   	push   ebx
c0009868:	e8 01 fd ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c000986d:	6a 00                	push   0x0
c000986f:	68 28 06 00 c0       	push   0xc0000628
c0009874:	6a 35                	push   0x35
c0009876:	53                   	push   ebx
c0009877:	e8 f2 fc ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c000987c:	83 c4 20             	add    esp,0x20
c000987f:	6a 00                	push   0x0
c0009881:	68 32 06 00 c0       	push   0xc0000632
c0009886:	6a 36                	push   0x36
c0009888:	53                   	push   ebx
c0009889:	e8 e0 fc ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c000988e:	6a 00                	push   0x0
c0009890:	68 3c 06 00 c0       	push   0xc000063c
c0009895:	6a 37                	push   0x37
c0009897:	53                   	push   ebx
c0009898:	e8 d1 fc ff ff       	call   c000956e <IDT::addEntry(int, void (*)(), bool)>
c000989d:	83 c4 1c             	add    esp,0x1c
c00098a0:	6a 03                	push   0x3
c00098a2:	6a 02                	push   0x2
c00098a4:	ff 35 d0 63 02 c0    	push   DWORD PTR ds:0xc00263d0
c00098aa:	e8 dd 25 00 00       	call   c000be8c <VAS::allocatePages(int, int)>
c00098af:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00098b6:	89 c6                	mov    esi,eax
c00098b8:	e8 a0 01 00 00       	call   c0009a5d <malloc>
c00098bd:	81 c6 00 20 00 00    	add    esi,0x2000
c00098c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00098c6:	89 c7                	mov    edi,eax
c00098c8:	e8 5d 17 00 00       	call   c000b02a <TSS::TSS()>
c00098cd:	83 c4 0c             	add    esp,0xc
c00098d0:	68 c6 04 00 c0       	push   0xc00004c6
c00098d5:	56                   	push   esi
c00098d6:	57                   	push   edi
c00098d7:	e8 8e 17 00 00       	call   c000b06a <TSS::setup(unsigned long, unsigned long)>
c00098dc:	89 c6                	mov    esi,eax
c00098de:	58                   	pop    eax
c00098df:	5a                   	pop    edx
c00098e0:	6a 00                	push   0x0
c00098e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00098e6:	50                   	push   eax
c00098e7:	e8 dc fb ff ff       	call   c00094c8 <IDTEntry::IDTEntry(bool)>
c00098ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098f0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00098f5:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00098fc:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009902:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009906:	80 ce 05             	or     dh,0x5
c0009909:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000990c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009910:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009914:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009917:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000991a:	e8 87 fc ff ff       	call   c00095a6 <IDT::flush()>
c000991f:	83 c4 20             	add    esp,0x20
c0009922:	5b                   	pop    ebx
c0009923:	5e                   	pop    esi
c0009924:	5f                   	pop    edi
c0009925:	c3                   	ret    

c0009926 <sbrk>:
c0009926:	55                   	push   ebp
c0009927:	57                   	push   edi
c0009928:	56                   	push   esi
c0009929:	53                   	push   ebx
c000992a:	83 ec 24             	sub    esp,0x24
c000992d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009931:	53                   	push   ebx
c0009932:	68 58 26 02 c0       	push   0xc0022658
c0009937:	e8 82 31 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000993c:	83 c4 10             	add    esp,0x10
c000993f:	85 db                	test   ebx,ebx
c0009941:	74 5f                	je     c00099a2 <sbrk+0x7c>
c0009943:	78 64                	js     c00099a9 <sbrk+0x83>
c0009945:	a1 d0 54 02 c0       	mov    eax,ds:0xc00254d0
c000994a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000994e:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009954:	89 dd                	mov    ebp,ebx
c0009956:	78 69                	js     c00099c1 <sbrk+0x9b>
c0009958:	c1 fd 0c             	sar    ebp,0xc
c000995b:	bb 00 00 00 00       	mov    ebx,0x0
c0009960:	8b 35 d0 63 02 c0    	mov    esi,DWORD PTR ds:0xc00263d0
c0009966:	8b 3d d0 54 02 c0    	mov    edi,DWORD PTR ds:0xc00254d0
c000996c:	e8 e8 04 00 00       	call   c0009e59 <Phys::allocatePage()>
c0009971:	68 01 04 00 00       	push   0x401
c0009976:	57                   	push   edi
c0009977:	50                   	push   eax
c0009978:	56                   	push   esi
c0009979:	e8 0c 24 00 00       	call   c000bd8a <VAS::mapPage(unsigned long, unsigned long, int)>
c000997e:	81 05 d0 54 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00254d0,0x1000
c0009988:	43                   	inc    ebx
c0009989:	83 c4 10             	add    esp,0x10
c000998c:	39 dd                	cmp    ebp,ebx
c000998e:	75 d0                	jne    c0009960 <sbrk+0x3a>
c0009990:	0f 20 d8             	mov    eax,cr3
c0009993:	0f 22 d8             	mov    cr3,eax
c0009996:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000999a:	83 c4 1c             	add    esp,0x1c
c000999d:	5b                   	pop    ebx
c000999e:	5e                   	pop    esi
c000999f:	5f                   	pop    edi
c00099a0:	5d                   	pop    ebp
c00099a1:	c3                   	ret    
c00099a2:	a1 d0 54 02 c0       	mov    eax,ds:0xc00254d0
c00099a7:	eb f1                	jmp    c000999a <sbrk+0x74>
c00099a9:	83 ec 08             	sub    esp,0x8
c00099ac:	53                   	push   ebx
c00099ad:	68 84 26 02 c0       	push   0xc0022684
c00099b2:	e8 07 31 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00099bf:	eb d9                	jmp    c000999a <sbrk+0x74>
c00099c1:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c00099c7:	eb 8f                	jmp    c0009958 <sbrk+0x32>

c00099c9 <mmap>:
c00099c9:	83 ec 18             	sub    esp,0x18
c00099cc:	68 76 26 02 c0       	push   0xc0022676
c00099d1:	e8 a7 aa 00 00       	call   c001447d <Krnl::panic(char const*)>
c00099d6:	b8 00 00 00 00       	mov    eax,0x0
c00099db:	83 c4 1c             	add    esp,0x1c
c00099de:	c3                   	ret    

c00099df <munmap>:
c00099df:	83 ec 18             	sub    esp,0x18
c00099e2:	68 7b 26 02 c0       	push   0xc002267b
c00099e7:	e8 91 aa 00 00       	call   c001447d <Krnl::panic(char const*)>
c00099ec:	b8 00 00 00 00       	mov    eax,0x0
c00099f1:	83 c4 1c             	add    esp,0x1c
c00099f4:	c3                   	ret    

c00099f5 <liballoc_lock()>:
c00099f5:	fa                   	cli    
c00099f6:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c00099fc:	b8 00 00 00 00       	mov    eax,0x0
c0009a01:	c3                   	ret    

c0009a02 <liballoc_unlock()>:
c0009a02:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0009a07:	48                   	dec    eax
c0009a08:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0009a0d:	75 01                	jne    c0009a10 <liballoc_unlock()+0xe>
c0009a0f:	fb                   	sti    
c0009a10:	b8 00 00 00 00       	mov    eax,0x0
c0009a15:	c3                   	ret    

c0009a16 <liballoc_alloc(int)>:
c0009a16:	83 ec 10             	sub    esp,0x10
c0009a19:	6a 01                	push   0x1
c0009a1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009a1f:	ff 35 d0 63 02 c0    	push   DWORD PTR ds:0xc00263d0
c0009a25:	e8 62 24 00 00       	call   c000be8c <VAS::allocatePages(int, int)>
c0009a2a:	83 c4 1c             	add    esp,0x1c
c0009a2d:	c3                   	ret    

c0009a2e <liballoc_free(void*, int)>:
c0009a2e:	83 ec 14             	sub    esp,0x14
c0009a31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009a35:	ff 35 d0 63 02 c0    	push   DWORD PTR ds:0xc00263d0
c0009a3b:	e8 f6 20 00 00       	call   c000bb36 <VAS::freeAllocatedPages(unsigned long)>
c0009a40:	b8 00 00 00 00       	mov    eax,0x0
c0009a45:	83 c4 1c             	add    esp,0x1c
c0009a48:	c3                   	ret    

c0009a49 <realloc>:
c0009a49:	83 ec 14             	sub    esp,0x14
c0009a4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a54:	e8 d3 7b ff ff       	call   c000162c <dlrealloc>
c0009a59:	83 c4 1c             	add    esp,0x1c
c0009a5c:	c3                   	ret    

c0009a5d <malloc>:
c0009a5d:	83 ec 18             	sub    esp,0x18
c0009a60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a64:	e8 86 76 ff ff       	call   c00010ef <dlmalloc>
c0009a69:	83 c4 1c             	add    esp,0x1c
c0009a6c:	c3                   	ret    

c0009a6d <free>:
c0009a6d:	83 ec 18             	sub    esp,0x18
c0009a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a74:	e8 1b 73 ff ff       	call   c0000d94 <dlfree>
c0009a79:	83 c4 1c             	add    esp,0x1c
c0009a7c:	c3                   	ret    

c0009a7d <rfree>:
c0009a7d:	83 ec 18             	sub    esp,0x18
c0009a80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a84:	e8 0b 73 ff ff       	call   c0000d94 <dlfree>
c0009a89:	83 c4 1c             	add    esp,0x1c
c0009a8c:	c3                   	ret    

c0009a8d <calloc>:
c0009a8d:	56                   	push   esi
c0009a8e:	53                   	push   ebx
c0009a8f:	83 ec 10             	sub    esp,0x10
c0009a92:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009a96:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a9b:	53                   	push   ebx
c0009a9c:	e8 bc ff ff ff       	call   c0009a5d <malloc>
c0009aa1:	89 c6                	mov    esi,eax
c0009aa3:	83 c4 0c             	add    esp,0xc
c0009aa6:	53                   	push   ebx
c0009aa7:	6a 00                	push   0x0
c0009aa9:	50                   	push   eax
c0009aaa:	e8 a1 6c ff ff       	call   c0000750 <memset>
c0009aaf:	89 f0                	mov    eax,esi
c0009ab1:	83 c4 14             	add    esp,0x14
c0009ab4:	5b                   	pop    ebx
c0009ab5:	5e                   	pop    esi
c0009ab6:	c3                   	ret    

c0009ab7 <Krnl::setBootMessage(char const*)>:
c0009ab7:	57                   	push   edi
c0009ab8:	56                   	push   esi
c0009ab9:	53                   	push   ebx
c0009aba:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009ac0:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009ac7:	68 9e 00 00 00       	push   0x9e
c0009acc:	6a 00                	push   0x0
c0009ace:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009ad2:	56                   	push   esi
c0009ad3:	e8 78 6c ff ff       	call   c0000750 <memset>
c0009ad8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009adb:	e8 8c 6c ff ff       	call   c000076c <strlen>
c0009ae0:	ba 50 00 00 00       	mov    edx,0x50
c0009ae5:	83 c4 10             	add    esp,0x10
c0009ae8:	29 c2                	sub    edx,eax
c0009aea:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009aee:	d1 ea                	shr    edx,1
c0009af0:	84 c0                	test   al,al
c0009af2:	74 19                	je     c0009b0d <Krnl::setBootMessage(char const*)+0x56>
c0009af4:	01 d2                	add    edx,edx
c0009af6:	43                   	inc    ebx
c0009af7:	01 f2                	add    edx,esi
c0009af9:	80 cc 0f             	or     ah,0xf
c0009afc:	83 c2 02             	add    edx,0x2
c0009aff:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009b03:	43                   	inc    ebx
c0009b04:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009b09:	84 c0                	test   al,al
c0009b0b:	75 ec                	jne    c0009af9 <Krnl::setBootMessage(char const*)+0x42>
c0009b0d:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009b12:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009b17:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009b19:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009b1f:	5b                   	pop    ebx
c0009b20:	5e                   	pop    esi
c0009b21:	5f                   	pop    edi
c0009b22:	c3                   	ret    

c0009b23 <kernel_main>:
c0009b23:	57                   	push   edi
c0009b24:	bf f9 03 00 00       	mov    edi,0x3f9
c0009b29:	56                   	push   esi
c0009b2a:	89 fa                	mov    edx,edi
c0009b2c:	53                   	push   ebx
c0009b2d:	31 f6                	xor    esi,esi
c0009b2f:	83 ec 2c             	sub    esp,0x2c
c0009b32:	89 f0                	mov    eax,esi
c0009b34:	ee                   	out    dx,al
c0009b35:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009b3a:	b0 80                	mov    al,0x80
c0009b3c:	89 da                	mov    edx,ebx
c0009b3e:	ee                   	out    dx,al
c0009b3f:	b1 03                	mov    cl,0x3
c0009b41:	ba f8 03 00 00       	mov    edx,0x3f8
c0009b46:	88 c8                	mov    al,cl
c0009b48:	ee                   	out    dx,al
c0009b49:	89 f0                	mov    eax,esi
c0009b4b:	89 fa                	mov    edx,edi
c0009b4d:	ee                   	out    dx,al
c0009b4e:	88 c8                	mov    al,cl
c0009b50:	89 da                	mov    edx,ebx
c0009b52:	ee                   	out    dx,al
c0009b53:	b0 c7                	mov    al,0xc7
c0009b55:	ba fa 03 00 00       	mov    edx,0x3fa
c0009b5a:	ee                   	out    dx,al
c0009b5b:	b0 0b                	mov    al,0xb
c0009b5d:	ba fc 03 00 00       	mov    edx,0x3fc
c0009b62:	ee                   	out    dx,al
c0009b63:	68 b4 26 02 c0       	push   0xc00226b4
c0009b68:	e8 51 2f 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0009b6d:	e8 b8 09 00 00       	call   c000a52a <installVgaTextImplementation()>
c0009b72:	0f b6 05 e0 54 02 c0 	movzx  eax,BYTE PTR ds:0xc00254e0
c0009b79:	83 c4 10             	add    esp,0x10
c0009b7c:	84 c0                	test   al,al
c0009b7e:	74 6c                	je     c0009bec <kernel_main+0xc9>
c0009b80:	31 db                	xor    ebx,ebx
c0009b82:	bf 0a 00 00 00       	mov    edi,0xa
c0009b87:	be 05 00 00 00       	mov    esi,0x5
c0009b8c:	31 c9                	xor    ecx,ecx
c0009b8e:	eb 2a                	jmp    c0009bba <kernel_main+0x97>
c0009b90:	3c 0d                	cmp    al,0xd
c0009b92:	74 1a                	je     c0009bae <kernel_main+0x8b>
c0009b94:	3c 0a                	cmp    al,0xa
c0009b96:	74 40                	je     c0009bd8 <kernel_main+0xb5>
c0009b98:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b9b:	80 cc 0e             	or     ah,0xe
c0009b9e:	c1 e2 04             	shl    edx,0x4
c0009ba1:	01 ca                	add    edx,ecx
c0009ba3:	41                   	inc    ecx
c0009ba4:	01 fa                	add    edx,edi
c0009ba6:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009bae:	43                   	inc    ebx
c0009baf:	0f b6 83 e0 54 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffdab20]
c0009bb6:	84 c0                	test   al,al
c0009bb8:	74 32                	je     c0009bec <kernel_main+0xc9>
c0009bba:	80 b9 16 55 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffdaaea],0xdb
c0009bc1:	75 cd                	jne    c0009b90 <kernel_main+0x6d>
c0009bc3:	0f b6 91 15 55 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffdaaeb]
c0009bca:	83 e2 fe             	and    edx,0xfffffffe
c0009bcd:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009bd3:	75 bb                	jne    c0009b90 <kernel_main+0x6d>
c0009bd5:	47                   	inc    edi
c0009bd6:	eb b8                	jmp    c0009b90 <kernel_main+0x6d>
c0009bd8:	43                   	inc    ebx
c0009bd9:	46                   	inc    esi
c0009bda:	31 c9                	xor    ecx,ecx
c0009bdc:	0f b6 83 e0 54 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffdab20]
c0009be3:	bf 0a 00 00 00       	mov    edi,0xa
c0009be8:	84 c0                	test   al,al
c0009bea:	75 ce                	jne    c0009bba <kernel_main+0x97>
c0009bec:	83 ec 0c             	sub    esp,0xc
c0009bef:	68 cc 26 02 c0       	push   0xc00226cc
c0009bf4:	e8 be fe ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0009bf9:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009bfe:	a3 80 62 02 c0       	mov    ds:0xc0026280,eax
c0009c03:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009c08:	05 ff 0f 00 00       	add    eax,0xfff
c0009c0d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c12:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c15:	e8 cb 03 00 00       	call   c0009fe5 <Phys::physicalMemorySetup(unsigned int)>
c0009c1a:	e8 83 1c 00 00       	call   c000b8a2 <Virt::virtualMemorySetup()>
c0009c1f:	58                   	pop    eax
c0009c20:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0009c24:	53                   	push   ebx
c0009c25:	e8 34 1d 00 00       	call   c000b95e <VAS::VAS()>
c0009c2a:	89 1d d0 63 02 c0    	mov    DWORD PTR ds:0xc00263d0,ebx
c0009c30:	e8 eb 63 ff ff       	call   c0000020 <callGlobalConstructors>
c0009c35:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0009c3c:	e8 1c fe ff ff       	call   c0009a5d <malloc>
c0009c41:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c44:	89 c6                	mov    esi,eax
c0009c46:	e8 0f f0 ff ff       	call   c0008c5a <Computer::Computer()>
c0009c4b:	6a 00                	push   0x0
c0009c4d:	89 35 68 62 02 c0    	mov    DWORD PTR ds:0xc0026268,esi
c0009c53:	6a 00                	push   0x0
c0009c55:	6a 00                	push   0x0
c0009c57:	56                   	push   esi
c0009c58:	e8 09 f4 ff ff       	call   c0009066 <Computer::open(int, int, void*)>
c0009c5d:	83 c4 14             	add    esp,0x14
c0009c60:	53                   	push   ebx
c0009c61:	e8 a8 1f 00 00       	call   c000bc0e <VAS::~VAS()>
c0009c66:	83 c4 30             	add    esp,0x30
c0009c69:	5b                   	pop    ebx
c0009c6a:	5e                   	pop    esi
c0009c6b:	5f                   	pop    edi
c0009c6c:	c3                   	ret    

c0009c6d <Phys::allocateDMA(unsigned long)>:
c0009c6d:	55                   	push   ebp
c0009c6e:	31 ed                	xor    ebp,ebp
c0009c70:	57                   	push   edi
c0009c71:	56                   	push   esi
c0009c72:	53                   	push   ebx
c0009c73:	31 db                	xor    ebx,ebx
c0009c75:	83 ec 18             	sub    esp,0x18
c0009c78:	68 eb 26 02 c0       	push   0xc00226eb
c0009c7d:	e8 3c 2e 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0009c82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c86:	31 d2                	xor    edx,edx
c0009c88:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0009c8e:	83 c4 10             	add    esp,0x10
c0009c91:	c1 ee 0c             	shr    esi,0xc
c0009c94:	31 c9                	xor    ecx,ecx
c0009c96:	eb 17                	jmp    c0009caf <Phys::allocateDMA(unsigned long)+0x42>
c0009c98:	85 c9                	test   ecx,ecx
c0009c9a:	75 04                	jne    c0009ca0 <Phys::allocateDMA(unsigned long)+0x33>
c0009c9c:	89 d5                	mov    ebp,edx
c0009c9e:	89 d3                	mov    ebx,edx
c0009ca0:	8d 41 01             	lea    eax,[ecx+0x1]
c0009ca3:	39 c6                	cmp    esi,eax
c0009ca5:	74 23                	je     c0009cca <Phys::allocateDMA(unsigned long)+0x5d>
c0009ca7:	42                   	inc    edx
c0009ca8:	89 c1                	mov    ecx,eax
c0009caa:	83 fa 2f             	cmp    edx,0x2f
c0009cad:	7f 11                	jg     c0009cc0 <Phys::allocateDMA(unsigned long)+0x53>
c0009caf:	80 ba c0 62 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd9d40],0x0
c0009cb6:	74 e0                	je     c0009c98 <Phys::allocateDMA(unsigned long)+0x2b>
c0009cb8:	31 c9                	xor    ecx,ecx
c0009cba:	42                   	inc    edx
c0009cbb:	83 fa 2f             	cmp    edx,0x2f
c0009cbe:	7e ef                	jle    c0009caf <Phys::allocateDMA(unsigned long)+0x42>
c0009cc0:	83 c4 0c             	add    esp,0xc
c0009cc3:	31 c0                	xor    eax,eax
c0009cc5:	5b                   	pop    ebx
c0009cc6:	5e                   	pop    esi
c0009cc7:	5f                   	pop    edi
c0009cc8:	5d                   	pop    ebp
c0009cc9:	c3                   	ret    
c0009cca:	8d 14 33             	lea    edx,[ebx+esi*1]
c0009ccd:	89 d7                	mov    edi,edx
c0009ccf:	4f                   	dec    edi
c0009cd0:	79 03                	jns    c0009cd5 <Phys::allocateDMA(unsigned long)+0x68>
c0009cd2:	8d 7a 0e             	lea    edi,[edx+0xe]
c0009cd5:	c1 ff 04             	sar    edi,0x4
c0009cd8:	89 da                	mov    edx,ebx
c0009cda:	c1 fa 04             	sar    edx,0x4
c0009cdd:	39 fa                	cmp    edx,edi
c0009cdf:	75 43                	jne    c0009d24 <Phys::allocateDMA(unsigned long)+0xb7>
c0009ce1:	85 c0                	test   eax,eax
c0009ce3:	74 1a                	je     c0009cff <Phys::allocateDMA(unsigned long)+0x92>
c0009ce5:	be c0 62 02 c0       	mov    esi,0xc00262c0
c0009cea:	8d 93 c0 62 02 c0    	lea    edx,[ebx-0x3ffd9d40]
c0009cf0:	f7 d6                	not    esi
c0009cf2:	29 de                	sub    esi,ebx
c0009cf4:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009cf7:	42                   	inc    edx
c0009cf8:	8d 04 16             	lea    eax,[esi+edx*1]
c0009cfb:	39 c1                	cmp    ecx,eax
c0009cfd:	7f f5                	jg     c0009cf4 <Phys::allocateDMA(unsigned long)+0x87>
c0009cff:	83 ec 0c             	sub    esp,0xc
c0009d02:	68 04 27 02 c0       	push   0xc0022704
c0009d07:	e8 b2 2d 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0009d0c:	83 c4 10             	add    esp,0x10
c0009d0f:	85 ff                	test   edi,edi
c0009d11:	74 17                	je     c0009d2a <Phys::allocateDMA(unsigned long)+0xbd>
c0009d13:	83 c4 0c             	add    esp,0xc
c0009d16:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c0009d1c:	5b                   	pop    ebx
c0009d1d:	c1 e0 0c             	shl    eax,0xc
c0009d20:	5e                   	pop    esi
c0009d21:	5f                   	pop    edi
c0009d22:	5d                   	pop    ebp
c0009d23:	c3                   	ret    
c0009d24:	89 ea                	mov    edx,ebp
c0009d26:	31 c9                	xor    ecx,ecx
c0009d28:	eb 90                	jmp    c0009cba <Phys::allocateDMA(unsigned long)+0x4d>
c0009d2a:	83 c4 0c             	add    esp,0xc
c0009d2d:	c1 e3 0c             	shl    ebx,0xc
c0009d30:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c0009d36:	5b                   	pop    ebx
c0009d37:	5e                   	pop    esi
c0009d38:	5f                   	pop    edi
c0009d39:	5d                   	pop    ebp
c0009d3a:	c3                   	ret    

c0009d3b <Phys::freeDMA(unsigned long, unsigned long)>:
c0009d3b:	83 ec 18             	sub    esp,0x18
c0009d3e:	68 1b 27 02 c0       	push   0xc002271b
c0009d43:	e8 76 2d 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0009d48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009d4c:	83 c4 10             	add    esp,0x10
c0009d4f:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c0009d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d59:	c1 e9 0c             	shr    ecx,0xc
c0009d5c:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c0009d64:	76 29                	jbe    c0009d8f <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c0009d66:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c0009d6c:	c1 ea 0c             	shr    edx,0xc
c0009d6f:	83 c2 10             	add    edx,0x10
c0009d72:	85 c9                	test   ecx,ecx
c0009d74:	74 15                	je     c0009d8b <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c0009d76:	8d 82 c0 62 02 c0    	lea    eax,[edx-0x3ffd9d40]
c0009d7c:	8d 94 11 c0 62 02 c0 	lea    edx,[ecx+edx*1-0x3ffd9d40]
c0009d83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009d86:	40                   	inc    eax
c0009d87:	39 d0                	cmp    eax,edx
c0009d89:	75 f8                	jne    c0009d83 <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c0009d8b:	83 c4 0c             	add    esp,0xc
c0009d8e:	c3                   	ret    
c0009d8f:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c0009d95:	c1 ea 0c             	shr    edx,0xc
c0009d98:	eb d8                	jmp    c0009d72 <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c0009d9a <Phys::setPageState(unsigned long, bool)>:
c0009d9a:	56                   	push   esi
c0009d9b:	ba 01 00 00 00       	mov    edx,0x1
c0009da0:	53                   	push   ebx
c0009da1:	8b 35 24 56 02 c0    	mov    esi,DWORD PTR ds:0xc0025624
c0009da7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009dab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009daf:	89 c8                	mov    eax,ecx
c0009db1:	83 e1 07             	and    ecx,0x7
c0009db4:	c1 e8 03             	shr    eax,0x3
c0009db7:	d3 e3                	shl    ebx,cl
c0009db9:	01 c6                	add    esi,eax
c0009dbb:	d3 e2                	shl    edx,cl
c0009dbd:	f7 d2                	not    edx
c0009dbf:	20 16                	and    BYTE PTR [esi],dl
c0009dc1:	03 05 24 56 02 c0    	add    eax,DWORD PTR ds:0xc0025624
c0009dc7:	08 18                	or     BYTE PTR [eax],bl
c0009dc9:	5b                   	pop    ebx
c0009dca:	5e                   	pop    esi
c0009dcb:	c3                   	ret    

c0009dcc <Phys::getPageState(unsigned long)>:
c0009dcc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009dd0:	8b 15 24 56 02 c0    	mov    edx,DWORD PTR ds:0xc0025624
c0009dd6:	89 c8                	mov    eax,ecx
c0009dd8:	83 e1 07             	and    ecx,0x7
c0009ddb:	c1 e8 03             	shr    eax,0x3
c0009dde:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009de2:	d3 f8                	sar    eax,cl
c0009de4:	83 e0 01             	and    eax,0x1
c0009de7:	c3                   	ret    

c0009de8 <Phys::freePage(unsigned long)>:
c0009de8:	53                   	push   ebx
c0009de9:	83 ec 10             	sub    esp,0x10
c0009dec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009df0:	53                   	push   ebx
c0009df1:	68 31 27 02 c0       	push   0xc0022731
c0009df6:	e8 c3 2c 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c0009e04:	76 3d                	jbe    c0009e43 <Phys::freePage(unsigned long)+0x5b>
c0009e06:	83 ec 0c             	sub    esp,0xc
c0009e09:	c1 eb 0c             	shr    ebx,0xc
c0009e0c:	53                   	push   ebx
c0009e0d:	e8 ba ff ff ff       	call   c0009dcc <Phys::getPageState(unsigned long)>
c0009e12:	83 c4 10             	add    esp,0x10
c0009e15:	84 c0                	test   al,al
c0009e17:	74 19                	je     c0009e32 <Phys::freePage(unsigned long)+0x4a>
c0009e19:	83 ec 08             	sub    esp,0x8
c0009e1c:	ff 0d b0 62 02 c0    	dec    DWORD PTR ds:0xc00262b0
c0009e22:	6a 00                	push   0x0
c0009e24:	53                   	push   ebx
c0009e25:	e8 70 ff ff ff       	call   c0009d9a <Phys::setPageState(unsigned long, bool)>
c0009e2a:	83 c4 10             	add    esp,0x10
c0009e2d:	83 c4 08             	add    esp,0x8
c0009e30:	5b                   	pop    ebx
c0009e31:	c3                   	ret    
c0009e32:	c7 44 24 10 44 27 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022744
c0009e3a:	83 c4 08             	add    esp,0x8
c0009e3d:	5b                   	pop    ebx
c0009e3e:	e9 3a a6 00 00       	jmp    c001447d <Krnl::panic(char const*)>
c0009e43:	83 ec 08             	sub    esp,0x8
c0009e46:	68 00 10 00 00       	push   0x1000
c0009e4b:	53                   	push   ebx
c0009e4c:	e8 ea fe ff ff       	call   c0009d3b <Phys::freeDMA(unsigned long, unsigned long)>
c0009e51:	83 c4 10             	add    esp,0x10
c0009e54:	83 c4 08             	add    esp,0x8
c0009e57:	5b                   	pop    ebx
c0009e58:	c3                   	ret    

c0009e59 <Phys::allocatePage()>:
c0009e59:	56                   	push   esi
c0009e5a:	53                   	push   ebx
c0009e5b:	83 ec 14             	sub    esp,0x14
c0009e5e:	8b 35 a4 62 02 c0    	mov    esi,DWORD PTR ds:0xc00262a4
c0009e64:	89 f3                	mov    ebx,esi
c0009e66:	eb 0a                	jmp    c0009e72 <Phys::allocatePage()+0x19>
c0009e68:	89 1d a4 62 02 c0    	mov    DWORD PTR ds:0xc00262a4,ebx
c0009e6e:	39 de                	cmp    esi,ebx
c0009e70:	74 24                	je     c0009e96 <Phys::allocatePage()+0x3d>
c0009e72:	53                   	push   ebx
c0009e73:	e8 54 ff ff ff       	call   c0009dcc <Phys::getPageState(unsigned long)>
c0009e78:	5a                   	pop    edx
c0009e79:	84 c0                	test   al,al
c0009e7b:	74 76                	je     c0009ef3 <Phys::allocatePage()+0x9a>
c0009e7d:	43                   	inc    ebx
c0009e7e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009e84:	75 e2                	jne    c0009e68 <Phys::allocatePage()+0xf>
c0009e86:	31 db                	xor    ebx,ebx
c0009e88:	c7 05 a4 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00262a4,0x0
c0009e92:	39 de                	cmp    esi,ebx
c0009e94:	75 dc                	jne    c0009e72 <Phys::allocatePage()+0x19>
c0009e96:	83 ec 0c             	sub    esp,0xc
c0009e99:	68 78 27 02 c0       	push   0xc0022778
c0009e9e:	e8 1b 2c 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0009ea3:	58                   	pop    eax
c0009ea4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009ea9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0009eac:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0009eb2:	e8 8d 28 00 00       	call   c000c744 <VAS::scanForEviction()>
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	85 c0                	test   eax,eax
c0009ebc:	75 76                	jne    c0009f34 <Phys::allocatePage()+0xdb>
c0009ebe:	83 ec 0c             	sub    esp,0xc
c0009ec1:	68 00 10 00 00       	push   0x1000
c0009ec6:	e8 a2 fd ff ff       	call   c0009c6d <Phys::allocateDMA(unsigned long)>
c0009ecb:	83 c4 10             	add    esp,0x10
c0009ece:	85 c0                	test   eax,eax
c0009ed0:	75 5c                	jne    c0009f2e <Phys::allocatePage()+0xd5>
c0009ed2:	83 ec 0c             	sub    esp,0xc
c0009ed5:	68 90 27 02 c0       	push   0xc0022790
c0009eda:	e8 9e a5 00 00       	call   c001447d <Krnl::panic(char const*)>
c0009edf:	83 c4 10             	add    esp,0x10
c0009ee2:	8b 1d a4 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262a4
c0009ee8:	53                   	push   ebx
c0009ee9:	e8 de fe ff ff       	call   c0009dcc <Phys::getPageState(unsigned long)>
c0009eee:	5a                   	pop    edx
c0009eef:	84 c0                	test   al,al
c0009ef1:	75 8a                	jne    c0009e7d <Phys::allocatePage()+0x24>
c0009ef3:	6a 01                	push   0x1
c0009ef5:	53                   	push   ebx
c0009ef6:	e8 9f fe ff ff       	call   c0009d9a <Phys::setPageState(unsigned long, bool)>
c0009efb:	5a                   	pop    edx
c0009efc:	a1 b0 62 02 c0       	mov    eax,ds:0xc00262b0
c0009f01:	59                   	pop    ecx
c0009f02:	40                   	inc    eax
c0009f03:	8b 15 a4 62 02 c0    	mov    edx,DWORD PTR ds:0xc00262a4
c0009f09:	a3 b0 62 02 c0       	mov    ds:0xc00262b0,eax
c0009f0e:	c1 e2 0c             	shl    edx,0xc
c0009f11:	52                   	push   edx
c0009f12:	ff 35 b4 62 02 c0    	push   DWORD PTR ds:0xc00262b4
c0009f18:	50                   	push   eax
c0009f19:	68 5a 27 02 c0       	push   0xc002275a
c0009f1e:	e8 9b 2b 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0009f23:	a1 a4 62 02 c0       	mov    eax,ds:0xc00262a4
c0009f28:	83 c4 10             	add    esp,0x10
c0009f2b:	c1 e0 0c             	shl    eax,0xc
c0009f2e:	83 c4 14             	add    esp,0x14
c0009f31:	5b                   	pop    ebx
c0009f32:	5e                   	pop    esi
c0009f33:	c3                   	ret    
c0009f34:	83 ec 08             	sub    esp,0x8
c0009f37:	89 c2                	mov    edx,eax
c0009f39:	6a 01                	push   0x1
c0009f3b:	c1 ea 0c             	shr    edx,0xc
c0009f3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f42:	52                   	push   edx
c0009f43:	e8 52 fe ff ff       	call   c0009d9a <Phys::setPageState(unsigned long, bool)>
c0009f48:	83 c4 10             	add    esp,0x10
c0009f4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f4f:	eb dd                	jmp    c0009f2e <Phys::allocatePage()+0xd5>

c0009f51 <Phys::allocateContiguousPages(int)>:
c0009f51:	57                   	push   edi
c0009f52:	56                   	push   esi
c0009f53:	53                   	push   ebx
c0009f54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009f58:	fa                   	cli    
c0009f59:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c0009f5f:	31 db                	xor    ebx,ebx
c0009f61:	85 db                	test   ebx,ebx
c0009f63:	75 11                	jne    c0009f76 <Phys::allocateContiguousPages(int)+0x25>
c0009f65:	e8 ef fe ff ff       	call   c0009e59 <Phys::allocatePage()>
c0009f6a:	83 fe 01             	cmp    esi,0x1
c0009f6d:	89 c7                	mov    edi,eax
c0009f6f:	74 21                	je     c0009f92 <Phys::allocateContiguousPages(int)+0x41>
c0009f71:	bb 01 00 00 00       	mov    ebx,0x1
c0009f76:	e8 de fe ff ff       	call   c0009e59 <Phys::allocatePage()>
c0009f7b:	89 da                	mov    edx,ebx
c0009f7d:	c1 e2 0c             	shl    edx,0xc
c0009f80:	01 fa                	add    edx,edi
c0009f82:	39 c2                	cmp    edx,eax
c0009f84:	74 20                	je     c0009fa6 <Phys::allocateContiguousPages(int)+0x55>
c0009f86:	bb 01 00 00 00       	mov    ebx,0x1
c0009f8b:	89 c7                	mov    edi,eax
c0009f8d:	83 fe 01             	cmp    esi,0x1
c0009f90:	75 e4                	jne    c0009f76 <Phys::allocateContiguousPages(int)+0x25>
c0009f92:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0009f97:	48                   	dec    eax
c0009f98:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0009f9d:	75 01                	jne    c0009fa0 <Phys::allocateContiguousPages(int)+0x4f>
c0009f9f:	fb                   	sti    
c0009fa0:	89 f8                	mov    eax,edi
c0009fa2:	5b                   	pop    ebx
c0009fa3:	5e                   	pop    esi
c0009fa4:	5f                   	pop    edi
c0009fa5:	c3                   	ret    
c0009fa6:	43                   	inc    ebx
c0009fa7:	39 f3                	cmp    ebx,esi
c0009fa9:	75 b6                	jne    c0009f61 <Phys::allocateContiguousPages(int)+0x10>
c0009fab:	eb e5                	jmp    c0009f92 <Phys::allocateContiguousPages(int)+0x41>

c0009fad <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0009fad:	56                   	push   esi
c0009fae:	53                   	push   ebx
c0009faf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009fb3:	39 1d a8 62 02 c0    	cmp    DWORD PTR ds:0xc00262a8,ebx
c0009fb9:	73 06                	jae    c0009fc1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0009fbb:	89 1d a8 62 02 c0    	mov    DWORD PTR ds:0xc00262a8,ebx
c0009fc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fc5:	c1 eb 0c             	shr    ebx,0xc
c0009fc8:	c1 e8 0c             	shr    eax,0xc
c0009fcb:	39 d8                	cmp    eax,ebx
c0009fcd:	73 13                	jae    c0009fe2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0009fcf:	6a 00                	push   0x0
c0009fd1:	8d 70 01             	lea    esi,[eax+0x1]
c0009fd4:	50                   	push   eax
c0009fd5:	e8 c0 fd ff ff       	call   c0009d9a <Phys::setPageState(unsigned long, bool)>
c0009fda:	5a                   	pop    edx
c0009fdb:	89 f0                	mov    eax,esi
c0009fdd:	59                   	pop    ecx
c0009fde:	39 f3                	cmp    ebx,esi
c0009fe0:	75 ed                	jne    c0009fcf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0009fe2:	5b                   	pop    ebx
c0009fe3:	5e                   	pop    esi
c0009fe4:	c3                   	ret    

c0009fe5 <Phys::physicalMemorySetup(unsigned int)>:
c0009fe5:	55                   	push   ebp
c0009fe6:	57                   	push   edi
c0009fe7:	56                   	push   esi
c0009fe8:	53                   	push   ebx
c0009fe9:	83 ec 40             	sub    esp,0x40
c0009fec:	6a 30                	push   0x30
c0009fee:	6a 00                	push   0x0
c0009ff0:	68 c0 62 02 c0       	push   0xc00262c0
c0009ff5:	e8 56 67 ff ff       	call   c0000750 <memset>
c0009ffa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009ffe:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a003:	05 00 10 00 00       	add    eax,0x1000
c000a008:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a00c:	5b                   	pop    ebx
c000a00d:	31 db                	xor    ebx,ebx
c000a00f:	5e                   	pop    esi
c000a010:	50                   	push   eax
c000a011:	68 9e 27 02 c0       	push   0xc002279e
c000a016:	e8 a3 2a 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000a01b:	83 c4 10             	add    esp,0x10
c000a01e:	83 ec 08             	sub    esp,0x8
c000a021:	6a 01                	push   0x1
c000a023:	53                   	push   ebx
c000a024:	43                   	inc    ebx
c000a025:	e8 70 fd ff ff       	call   c0009d9a <Phys::setPageState(unsigned long, bool)>
c000a02a:	83 c4 10             	add    esp,0x10
c000a02d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a033:	75 e9                	jne    c000a01e <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a035:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a03c:	66 85 c0             	test   ax,ax
c000a03f:	0f 84 8e 01 00 00    	je     c000a1d3 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a045:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a049:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a051:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a055:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a05a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a05e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a066:	eb 15                	jmp    c000a07d <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a068:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a06c:	83 c3 18             	add    ebx,0x18
c000a06f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a073:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a077:	0f 84 66 01 00 00    	je     c000a1e3 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a07d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a080:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a083:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a086:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a08a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a08e:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a090:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a093:	01 f0                	add    eax,esi
c000a095:	55                   	push   ebp
c000a096:	11 fa                	adc    edx,edi
c000a098:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a09c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a0a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a0a4:	56                   	push   esi
c000a0a5:	68 e0 27 02 c0       	push   0xc00227e0
c000a0aa:	e8 0f 2a 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000a0af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	09 f8                	or     eax,edi
c000a0b8:	0f 85 25 01 00 00    	jne    c000a1e3 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a0be:	4d                   	dec    ebp
c000a0bf:	75 a7                	jne    c000a068 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a0c1:	ba 00 00 08 00       	mov    edx,0x80000
c000a0c6:	89 c1                	mov    ecx,eax
c000a0c8:	39 f2                	cmp    edx,esi
c000a0ca:	19 f9                	sbb    ecx,edi
c000a0cc:	0f 82 a7 00 00 00    	jb     c000a179 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a0d2:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a0d6:	89 c1                	mov    ecx,eax
c000a0d8:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a0dc:	0f 83 97 00 00 00    	jae    c000a179 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a0e2:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a0e7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a0eb:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a0ef:	39 fa                	cmp    edx,edi
c000a0f1:	19 e8                	sbb    eax,ebp
c000a0f3:	0f 82 14 01 00 00    	jb     c000a20d <Phys::physicalMemorySetup(unsigned int)+0x228>
c000a0f9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a0fd:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a101:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a107:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a10c:	83 d5 ff             	adc    ebp,0xffffffff
c000a10f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a113:	31 c0                	xor    eax,eax
c000a115:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a119:	39 fa                	cmp    edx,edi
c000a11b:	89 c1                	mov    ecx,eax
c000a11d:	19 e9                	sbb    ecx,ebp
c000a11f:	0f 83 43 ff ff ff    	jae    c000a068 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a125:	be 00 00 08 00       	mov    esi,0x80000
c000a12a:	50                   	push   eax
c000a12b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a12f:	57                   	push   edi
c000a130:	56                   	push   esi
c000a131:	68 04 28 02 c0       	push   0xc0022804
c000a136:	e8 83 29 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000a13b:	5a                   	pop    edx
c000a13c:	59                   	pop    ecx
c000a13d:	57                   	push   edi
c000a13e:	56                   	push   esi
c000a13f:	e8 69 fe ff ff       	call   c0009fad <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a144:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a148:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a14c:	83 c4 0c             	add    esp,0xc
c000a14f:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a153:	03 05 b4 62 02 c0    	add    eax,DWORD PTR ds:0xc00262b4
c000a159:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a160:	a3 b4 62 02 c0       	mov    ds:0xc00262b4,eax
c000a165:	52                   	push   edx
c000a166:	50                   	push   eax
c000a167:	68 c4 27 02 c0       	push   0xc00227c4
c000a16c:	e8 4d 29 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000a171:	83 c4 10             	add    esp,0x10
c000a174:	e9 ef fe ff ff       	jmp    c000a068 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a179:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a17d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a181:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a185:	39 ea                	cmp    edx,ebp
c000a187:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a18b:	0f 82 d7 fe ff ff    	jb     c000a068 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a191:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a196:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a19a:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a19e:	0f 83 c4 fe ff ff    	jae    c000a068 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a1a4:	39 ee                	cmp    esi,ebp
c000a1a6:	89 f8                	mov    eax,edi
c000a1a8:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a1ac:	0f 83 78 ff ff ff    	jae    c000a12a <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a1b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a1b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a1ba:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a1be:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a1c2:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a1c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1ca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1ce:	e9 57 ff ff ff       	jmp    c000a12a <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a1d3:	83 ec 0c             	sub    esp,0xc
c000a1d6:	68 b6 27 02 c0       	push   0xc00227b6
c000a1db:	e8 9d a2 00 00       	call   c001447d <Krnl::panic(char const*)>
c000a1e0:	83 c4 10             	add    esp,0x10
c000a1e3:	bb 40 01 00 00       	mov    ebx,0x140
c000a1e8:	83 ec 08             	sub    esp,0x8
c000a1eb:	6a 00                	push   0x0
c000a1ed:	53                   	push   ebx
c000a1ee:	43                   	inc    ebx
c000a1ef:	e8 a6 fb ff ff       	call   c0009d9a <Phys::setPageState(unsigned long, bool)>
c000a1f4:	ff 05 b4 62 02 c0    	inc    DWORD PTR ds:0xc00262b4
c000a1fa:	83 c4 10             	add    esp,0x10
c000a1fd:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000a203:	75 e3                	jne    c000a1e8 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000a205:	83 c4 3c             	add    esp,0x3c
c000a208:	5b                   	pop    ebx
c000a209:	5e                   	pop    esi
c000a20a:	5f                   	pop    edi
c000a20b:	5d                   	pop    ebp
c000a20c:	c3                   	ret    
c000a20d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a215:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a21d:	e9 d7 fe ff ff       	jmp    c000a0f9 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a222 <Pipe::isAtty()>:
c000a222:	31 c0                	xor    eax,eax
c000a224:	c3                   	ret    
c000a225:	90                   	nop

c000a226 <Pipe::~Pipe()>:
c000a226:	83 ec 0c             	sub    esp,0xc
c000a229:	ba 70 28 02 c0       	mov    edx,0xc0022870
c000a22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a232:	89 10                	mov    DWORD PTR [eax],edx
c000a234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a238:	83 ec 0c             	sub    esp,0xc
c000a23b:	50                   	push   eax
c000a23c:	e8 41 12 00 00       	call   c000b482 <UnixFile::~UnixFile()>
c000a241:	83 c4 10             	add    esp,0x10
c000a244:	90                   	nop
c000a245:	83 c4 0c             	add    esp,0xc
c000a248:	c3                   	ret    
c000a249:	90                   	nop

c000a24a <Pipe::~Pipe()>:
c000a24a:	83 ec 0c             	sub    esp,0xc
c000a24d:	83 ec 0c             	sub    esp,0xc
c000a250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a254:	e8 cd ff ff ff       	call   c000a226 <Pipe::~Pipe()>
c000a259:	83 c4 10             	add    esp,0x10
c000a25c:	83 ec 08             	sub    esp,0x8
c000a25f:	6a 20                	push   0x20
c000a261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a265:	e8 73 27 00 00       	call   c000c9dd <operator delete(void*, unsigned long)>
c000a26a:	83 c4 10             	add    esp,0x10
c000a26d:	83 c4 0c             	add    esp,0xc
c000a270:	c3                   	ret    
c000a271:	90                   	nop

c000a272 <Pipe::read(unsigned long long, void*, int*)>:
c000a272:	55                   	push   ebp
c000a273:	57                   	push   edi
c000a274:	56                   	push   esi
c000a275:	53                   	push   ebx
c000a276:	83 ec 1c             	sub    esp,0x1c
c000a279:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a27d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a281:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a285:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a288:	89 c8                	mov    eax,ecx
c000a28a:	99                   	cdq    
c000a28b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a28f:	74 24                	je     c000a2b5 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a291:	39 f9                	cmp    ecx,edi
c000a293:	89 d1                	mov    ecx,edx
c000a295:	19 f1                	sbb    ecx,esi
c000a297:	73 1c                	jae    c000a2b5 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a299:	fa                   	cli    
c000a29a:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c000a2a0:	e8 6a dd 00 00       	call   c001800f <schedule()>
c000a2a5:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000a2aa:	48                   	dec    eax
c000a2ab:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c000a2b0:	75 d3                	jne    c000a285 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a2b2:	fb                   	sti    
c000a2b3:	eb d0                	jmp    c000a285 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a2b5:	39 f8                	cmp    eax,edi
c000a2b7:	89 d1                	mov    ecx,edx
c000a2b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a2bc:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a2c0:	19 f1                	sbb    ecx,esi
c000a2c2:	73 07                	jae    c000a2cb <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a2c4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a2c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a2cb:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a2ce:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a2d1:	29 f7                	sub    edi,esi
c000a2d3:	89 f8                	mov    eax,edi
c000a2d5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a2d9:	99                   	cdq    
c000a2da:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a2dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a2e1:	19 d0                	sbb    eax,edx
c000a2e3:	73 07                	jae    c000a2ec <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a2e5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a2e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2ec:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a2ef:	89 ea                	mov    edx,ebp
c000a2f1:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a2f5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a2fa:	74 0d                	je     c000a309 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a2fc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a2ff:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a303:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a307:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a309:	85 d2                	test   edx,edx
c000a30b:	74 11                	je     c000a31e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a30d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a311:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a314:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a318:	89 d1                	mov    ecx,edx
c000a31a:	89 c7                	mov    edi,eax
c000a31c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a31e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a321:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a324:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a327:	99                   	cdq    
c000a328:	89 f7                	mov    edi,esi
c000a32a:	03 04 24             	add    eax,DWORD PTR [esp]
c000a32d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a331:	c1 ff 1f             	sar    edi,0x1f
c000a334:	57                   	push   edi
c000a335:	56                   	push   esi
c000a336:	52                   	push   edx
c000a337:	50                   	push   eax
c000a338:	e8 c7 6b 01 00       	call   c0020f04 <__umoddi3>
c000a33d:	83 c4 10             	add    esp,0x10
c000a340:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a343:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a348:	75 10                	jne    c000a35a <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a34a:	83 ec 0c             	sub    esp,0xc
c000a34d:	68 2d 28 02 c0       	push   0xc002282d
c000a352:	e8 26 a1 00 00       	call   c001447d <Krnl::panic(char const*)>
c000a357:	83 c4 10             	add    esp,0x10
c000a35a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a35e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a361:	89 10                	mov    DWORD PTR [eax],edx
c000a363:	83 c4 1c             	add    esp,0x1c
c000a366:	31 c0                	xor    eax,eax
c000a368:	5b                   	pop    ebx
c000a369:	5e                   	pop    esi
c000a36a:	5f                   	pop    edi
c000a36b:	5d                   	pop    ebp
c000a36c:	c3                   	ret    
c000a36d:	90                   	nop

c000a36e <Pipe::write(unsigned long long, void*, int*)>:
c000a36e:	55                   	push   ebp
c000a36f:	57                   	push   edi
c000a370:	56                   	push   esi
c000a371:	53                   	push   ebx
c000a372:	83 ec 1c             	sub    esp,0x1c
c000a375:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a379:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a37d:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a380:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a384:	89 04 24             	mov    DWORD PTR [esp],eax
c000a387:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a38b:	89 d8                	mov    eax,ebx
c000a38d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a390:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a394:	89 d6                	mov    esi,edx
c000a396:	89 d7                	mov    edi,edx
c000a398:	c1 ff 1f             	sar    edi,0x1f
c000a39b:	03 34 24             	add    esi,DWORD PTR [esp]
c000a39e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a3a2:	c1 f8 1f             	sar    eax,0x1f
c000a3a5:	39 f3                	cmp    ebx,esi
c000a3a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a3ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a3af:	19 f8                	sbb    eax,edi
c000a3b1:	b8 01 00 00 00       	mov    eax,0x1
c000a3b6:	72 6e                	jb     c000a426 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a3b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a3bb:	01 d0                	add    eax,edx
c000a3bd:	99                   	cdq    
c000a3be:	f7 fb                	idiv   ebx
c000a3c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a3c4:	29 d3                	sub    ebx,edx
c000a3c6:	89 d7                	mov    edi,edx
c000a3c8:	89 de                	mov    esi,ebx
c000a3ca:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a3cd:	c1 fb 1f             	sar    ebx,0x1f
c000a3d0:	39 f2                	cmp    edx,esi
c000a3d2:	19 d8                	sbb    eax,ebx
c000a3d4:	b8 00 00 00 00       	mov    eax,0x0
c000a3d9:	72 04                	jb     c000a3df <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a3db:	89 d0                	mov    eax,edx
c000a3dd:	29 f0                	sub    eax,esi
c000a3df:	89 d3                	mov    ebx,edx
c000a3e1:	29 c3                	sub    ebx,eax
c000a3e3:	74 0b                	je     c000a3f0 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a3e5:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a3e8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a3ec:	89 d9                	mov    ecx,ebx
c000a3ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a3f0:	85 c0                	test   eax,eax
c000a3f2:	74 0d                	je     c000a401 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a3f4:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a3f8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a3fb:	89 de                	mov    esi,ebx
c000a3fd:	89 c1                	mov    ecx,eax
c000a3ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a401:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a404:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a409:	75 10                	jne    c000a41b <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 49 28 02 c0       	push   0xc0022849
c000a413:	e8 65 a0 00 00       	call   c001447d <Krnl::panic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a41f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a422:	89 08                	mov    DWORD PTR [eax],ecx
c000a424:	31 c0                	xor    eax,eax
c000a426:	83 c4 1c             	add    esp,0x1c
c000a429:	5b                   	pop    ebx
c000a42a:	5e                   	pop    esi
c000a42b:	5f                   	pop    edi
c000a42c:	5d                   	pop    ebp
c000a42d:	c3                   	ret    

c000a42e <Pipe::Pipe(int)>:
c000a42e:	83 ec 0c             	sub    esp,0xc
c000a431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a435:	83 ec 08             	sub    esp,0x8
c000a438:	6a 00                	push   0x0
c000a43a:	50                   	push   eax
c000a43b:	e8 60 0e 00 00       	call   c000b2a0 <UnixFile::UnixFile(int)>
c000a440:	83 c4 10             	add    esp,0x10
c000a443:	ba 70 28 02 c0       	mov    edx,0xc0022870
c000a448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a44c:	89 10                	mov    DWORD PTR [eax],edx
c000a44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a452:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a456:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a45d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a468:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a46f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a473:	83 ec 0c             	sub    esp,0xc
c000a476:	50                   	push   eax
c000a477:	e8 e1 f5 ff ff       	call   c0009a5d <malloc>
c000a47c:	83 c4 10             	add    esp,0x10
c000a47f:	89 c2                	mov    edx,eax
c000a481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a485:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a48c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a490:	90                   	nop
c000a491:	83 c4 0c             	add    esp,0xc
c000a494:	c3                   	ret    
c000a495:	90                   	nop

c000a496 <VgaText::isAtty()>:
c000a496:	b0 01                	mov    al,0x1
c000a498:	c3                   	ret    
c000a499:	90                   	nop

c000a49a <VgaText::~VgaText()>:
c000a49a:	83 ec 0c             	sub    esp,0xc
c000a49d:	ba f8 28 02 c0       	mov    edx,0xc00228f8
c000a4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4a6:	89 10                	mov    DWORD PTR [eax],edx
c000a4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4ac:	83 ec 0c             	sub    esp,0xc
c000a4af:	50                   	push   eax
c000a4b0:	e8 cd 0f 00 00       	call   c000b482 <UnixFile::~UnixFile()>
c000a4b5:	83 c4 10             	add    esp,0x10
c000a4b8:	90                   	nop
c000a4b9:	83 c4 0c             	add    esp,0xc
c000a4bc:	c3                   	ret    
c000a4bd:	90                   	nop

c000a4be <VgaText::~VgaText()>:
c000a4be:	83 ec 0c             	sub    esp,0xc
c000a4c1:	83 ec 0c             	sub    esp,0xc
c000a4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4c8:	e8 cd ff ff ff       	call   c000a49a <VgaText::~VgaText()>
c000a4cd:	83 c4 10             	add    esp,0x10
c000a4d0:	83 ec 08             	sub    esp,0x8
c000a4d3:	68 c4 02 00 00       	push   0x2c4
c000a4d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4dc:	e8 fc 24 00 00       	call   c000c9dd <operator delete(void*, unsigned long)>
c000a4e1:	83 c4 10             	add    esp,0x10
c000a4e4:	83 c4 0c             	add    esp,0xc
c000a4e7:	c3                   	ret    

c000a4e8 <VgaText::read(unsigned long long, void*, int*)>:
c000a4e8:	83 ec 10             	sub    esp,0x10
c000a4eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4f7:	e8 9a 5a 00 00       	call   c000ff96 <readKeyboard(VgaText*, char*, unsigned long)>
c000a4fc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a500:	89 02                	mov    DWORD PTR [edx],eax
c000a502:	31 c0                	xor    eax,eax
c000a504:	83 c4 1c             	add    esp,0x1c
c000a507:	c3                   	ret    

c000a508 <setTerminalScrollLock(bool)>:
c000a508:	c3                   	ret    

c000a509 <addToTerminalCycle(VgaText*)>:
c000a509:	8b 15 20 63 02 c0    	mov    edx,DWORD PTR ds:0xc0026320
c000a50f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a513:	85 d2                	test   edx,edx
c000a515:	75 09                	jne    c000a520 <addToTerminalCycle(VgaText*)+0x17>
c000a517:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a51a:	a3 20 63 02 c0       	mov    ds:0xc0026320,eax
c000a51f:	c3                   	ret    
c000a520:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a523:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a526:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a529:	c3                   	ret    

c000a52a <installVgaTextImplementation()>:
c000a52a:	83 ec 10             	sub    esp,0x10
c000a52d:	6a 20                	push   0x20
c000a52f:	6a 00                	push   0x0
c000a531:	68 00 63 02 c0       	push   0xc0026300
c000a536:	e8 15 62 ff ff       	call   c0000750 <memset>
c000a53b:	83 c4 1c             	add    esp,0x1c
c000a53e:	c3                   	ret    

c000a53f <scrollTerminalScrollLock(int)>:
c000a53f:	c3                   	ret    

c000a540 <VgaText::updateTitle()>:
c000a540:	53                   	push   ebx
c000a541:	31 c0                	xor    eax,eax
c000a543:	83 ec 58             	sub    esp,0x58
c000a546:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a54a:	89 e1                	mov    ecx,esp
c000a54c:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a550:	40                   	inc    eax
c000a551:	83 f8 50             	cmp    eax,0x50
c000a554:	75 f6                	jne    c000a54c <VgaText::updateTitle()+0xc>
c000a556:	31 c0                	xor    eax,eax
c000a558:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a55f:	84 db                	test   bl,bl
c000a561:	74 06                	je     c000a569 <VgaText::updateTitle()+0x29>
c000a563:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a566:	40                   	inc    eax
c000a567:	eb ef                	jmp    c000a558 <VgaText::updateTitle()+0x18>
c000a569:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a56c:	85 c0                	test   eax,eax
c000a56e:	74 09                	je     c000a579 <VgaText::updateTitle()+0x39>
c000a570:	53                   	push   ebx
c000a571:	53                   	push   ebx
c000a572:	51                   	push   ecx
c000a573:	52                   	push   edx
c000a574:	ff d0                	call   eax
c000a576:	83 c4 10             	add    esp,0x10
c000a579:	83 c4 58             	add    esp,0x58
c000a57c:	5b                   	pop    ebx
c000a57d:	c3                   	ret    

c000a57e <VgaText::load()>:
c000a57e:	53                   	push   ebx
c000a57f:	31 c0                	xor    eax,eax
c000a581:	83 ec 58             	sub    esp,0x58
c000a584:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a588:	89 e2                	mov    edx,esp
c000a58a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a58e:	40                   	inc    eax
c000a58f:	83 f8 50             	cmp    eax,0x50
c000a592:	75 f6                	jne    c000a58a <VgaText::load()+0xc>
c000a594:	31 c0                	xor    eax,eax
c000a596:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a59d:	84 c9                	test   cl,cl
c000a59f:	74 06                	je     c000a5a7 <VgaText::load()+0x29>
c000a5a1:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a5a4:	40                   	inc    eax
c000a5a5:	eb ef                	jmp    c000a596 <VgaText::load()+0x18>
c000a5a7:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a5aa:	85 c0                	test   eax,eax
c000a5ac:	74 09                	je     c000a5b7 <VgaText::load()+0x39>
c000a5ae:	51                   	push   ecx
c000a5af:	51                   	push   ecx
c000a5b0:	52                   	push   edx
c000a5b1:	53                   	push   ebx
c000a5b2:	ff d0                	call   eax
c000a5b4:	83 c4 10             	add    esp,0x10
c000a5b7:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a5ba:	85 c0                	test   eax,eax
c000a5bc:	74 09                	je     c000a5c7 <VgaText::load()+0x49>
c000a5be:	83 ec 0c             	sub    esp,0xc
c000a5c1:	53                   	push   ebx
c000a5c2:	ff d0                	call   eax
c000a5c4:	83 c4 10             	add    esp,0x10
c000a5c7:	83 c4 58             	add    esp,0x58
c000a5ca:	5b                   	pop    ebx
c000a5cb:	c3                   	ret    

c000a5cc <VgaText::updateCursor()>:
c000a5cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5d0:	39 05 24 63 02 c0    	cmp    DWORD PTR ds:0xc0026324,eax
c000a5d6:	75 09                	jne    c000a5e1 <VgaText::updateCursor()+0x15>
c000a5d8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a5db:	85 c0                	test   eax,eax
c000a5dd:	74 02                	je     c000a5e1 <VgaText::updateCursor()+0x15>
c000a5df:	ff e0                	jmp    eax
c000a5e1:	c3                   	ret    

c000a5e2 <VgaText::doANSI_SGR(int)>:
c000a5e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a5e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5ea:	85 d2                	test   edx,edx
c000a5ec:	75 0b                	jne    c000a5f9 <VgaText::doANSI_SGR(int)+0x17>
c000a5ee:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a5f1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a5f4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a5f7:	eb 59                	jmp    c000a652 <VgaText::doANSI_SGR(int)+0x70>
c000a5f9:	83 fa 07             	cmp    edx,0x7
c000a5fc:	75 0b                	jne    c000a609 <VgaText::doANSI_SGR(int)+0x27>
c000a5fe:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a601:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a604:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a607:	eb 49                	jmp    c000a652 <VgaText::doANSI_SGR(int)+0x70>
c000a609:	83 fa 1b             	cmp    edx,0x1b
c000a60c:	74 e0                	je     c000a5ee <VgaText::doANSI_SGR(int)+0xc>
c000a60e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a611:	83 f9 07             	cmp    ecx,0x7
c000a614:	77 09                	ja     c000a61f <VgaText::doANSI_SGR(int)+0x3d>
c000a616:	8b 14 8d 60 56 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda9a0]
c000a61d:	eb 20                	jmp    c000a63f <VgaText::doANSI_SGR(int)+0x5d>
c000a61f:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a622:	83 f9 07             	cmp    ecx,0x7
c000a625:	77 09                	ja     c000a630 <VgaText::doANSI_SGR(int)+0x4e>
c000a627:	8b 14 8d 60 56 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda9a0]
c000a62e:	eb 22                	jmp    c000a652 <VgaText::doANSI_SGR(int)+0x70>
c000a630:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a633:	83 f9 07             	cmp    ecx,0x7
c000a636:	77 0b                	ja     c000a643 <VgaText::doANSI_SGR(int)+0x61>
c000a638:	8b 14 95 18 55 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaae8]
c000a63f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a642:	c3                   	ret    
c000a643:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a646:	83 f9 07             	cmp    ecx,0x7
c000a649:	77 0a                	ja     c000a655 <VgaText::doANSI_SGR(int)+0x73>
c000a64b:	8b 14 95 f0 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdab10]
c000a652:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a655:	c3                   	ret    

c000a656 <VgaText::setDefaultBgColour(VgaColour)>:
c000a656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a65a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a65e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a661:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a664:	c3                   	ret    
c000a665:	90                   	nop

c000a666 <VgaText::setDefaultFgColour(VgaColour)>:
c000a666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a66a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a66e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a671:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a674:	c3                   	ret    
c000a675:	90                   	nop

c000a676 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a676:	53                   	push   ebx
c000a677:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a67b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a67f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a683:	51                   	push   ecx
c000a684:	e8 cd ff ff ff       	call   c000a656 <VgaText::setDefaultBgColour(VgaColour)>
c000a689:	58                   	pop    eax
c000a68a:	5a                   	pop    edx
c000a68b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a68f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a693:	5b                   	pop    ebx
c000a694:	eb d0                	jmp    c000a666 <VgaText::setDefaultFgColour(VgaColour)>

c000a696 <VgaText::setTitleTextColour(VgaColour)>:
c000a696:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a69a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a69e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a6a1:	e9 9a fe ff ff       	jmp    c000a540 <VgaText::updateTitle()>

c000a6a6 <VgaText::setTitleColour(VgaColour)>:
c000a6a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a6b1:	e9 8a fe ff ff       	jmp    c000a540 <VgaText::updateTitle()>

c000a6b6 <VgaText::setTitle(char*)>:
c000a6b6:	53                   	push   ebx
c000a6b7:	83 ec 10             	sub    esp,0x10
c000a6ba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a6be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6c2:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a6c8:	50                   	push   eax
c000a6c9:	e8 3e 61 ff ff       	call   c000080c <strcpy>
c000a6ce:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a6d2:	83 c4 18             	add    esp,0x18
c000a6d5:	5b                   	pop    ebx
c000a6d6:	e9 65 fe ff ff       	jmp    c000a540 <VgaText::updateTitle()>
c000a6db:	90                   	nop

c000a6dc <VgaText::combineColours(unsigned char, unsigned char)>:
c000a6dc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a6e0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a6e5:	83 e0 0f             	and    eax,0xf
c000a6e8:	c1 e2 04             	shl    edx,0x4
c000a6eb:	09 d0                	or     eax,edx
c000a6ed:	c3                   	ret    

c000a6ee <VgaText::scrollScreen()>:
c000a6ee:	55                   	push   ebp
c000a6ef:	b9 01 00 00 00       	mov    ecx,0x1
c000a6f4:	57                   	push   edi
c000a6f5:	56                   	push   esi
c000a6f6:	53                   	push   ebx
c000a6f7:	83 ec 0c             	sub    esp,0xc
c000a6fa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a6fe:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a704:	31 ff                	xor    edi,edi
c000a706:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a709:	83 f9 17             	cmp    ecx,0x17
c000a70c:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a70f:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a716:	75 27                	jne    c000a73f <VgaText::scrollScreen()+0x51>
c000a718:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a71b:	01 f5                	add    ebp,esi
c000a71d:	f7 c7 01 00 00 00    	test   edi,0x1
c000a723:	74 16                	je     c000a73b <VgaText::scrollScreen()+0x4d>
c000a725:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a729:	50                   	push   eax
c000a72a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a72e:	50                   	push   eax
c000a72f:	e8 a8 ff ff ff       	call   c000a6dc <VgaText::combineColours(unsigned char, unsigned char)>
c000a734:	5a                   	pop    edx
c000a735:	5a                   	pop    edx
c000a736:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a739:	eb 04                	jmp    c000a73f <VgaText::scrollScreen()+0x51>
c000a73b:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a73f:	47                   	inc    edi
c000a740:	46                   	inc    esi
c000a741:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a747:	75 bd                	jne    c000a706 <VgaText::scrollScreen()+0x18>
c000a749:	41                   	inc    ecx
c000a74a:	83 f9 18             	cmp    ecx,0x18
c000a74d:	75 af                	jne    c000a6fe <VgaText::scrollScreen()+0x10>
c000a74f:	39 1d 24 63 02 c0    	cmp    DWORD PTR ds:0xc0026324,ebx
c000a755:	75 1b                	jne    c000a772 <VgaText::scrollScreen()+0x84>
c000a757:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a75b:	74 05                	je     c000a762 <VgaText::scrollScreen()+0x74>
c000a75d:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a760:	eb 10                	jmp    c000a772 <VgaText::scrollScreen()+0x84>
c000a762:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000a765:	85 c0                	test   eax,eax
c000a767:	74 09                	je     c000a772 <VgaText::scrollScreen()+0x84>
c000a769:	83 ec 0c             	sub    esp,0xc
c000a76c:	53                   	push   ebx
c000a76d:	ff d0                	call   eax
c000a76f:	83 c4 10             	add    esp,0x10
c000a772:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a776:	83 c4 0c             	add    esp,0xc
c000a779:	5b                   	pop    ebx
c000a77a:	5e                   	pop    esi
c000a77b:	5f                   	pop    edi
c000a77c:	5d                   	pop    ebp
c000a77d:	e9 4a fe ff ff       	jmp    c000a5cc <VgaText::updateCursor()>

c000a782 <VgaText::combineCharAndColour(char, unsigned char)>:
c000a782:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a787:	c1 e0 08             	shl    eax,0x8
c000a78a:	89 c2                	mov    edx,eax
c000a78c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a791:	09 d0                	or     eax,edx
c000a793:	c3                   	ret    

c000a794 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a794:	56                   	push   esi
c000a795:	53                   	push   ebx
c000a796:	51                   	push   ecx
c000a797:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a79b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a7a0:	50                   	push   eax
c000a7a1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a7a6:	50                   	push   eax
c000a7a7:	e8 30 ff ff ff       	call   c000a6dc <VgaText::combineColours(unsigned char, unsigned char)>
c000a7ac:	5b                   	pop    ebx
c000a7ad:	0f b6 c0             	movzx  eax,al
c000a7b0:	5e                   	pop    esi
c000a7b1:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000a7b6:	50                   	push   eax
c000a7b7:	53                   	push   ebx
c000a7b8:	e8 c5 ff ff ff       	call   c000a782 <VgaText::combineCharAndColour(char, unsigned char)>
c000a7bd:	5a                   	pop    edx
c000a7be:	5e                   	pop    esi
c000a7bf:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000a7c2:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000a7c8:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000a7cc:	0f b7 d2             	movzx  edx,dx
c000a7cf:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000a7d3:	39 0d 24 63 02 c0    	cmp    DWORD PTR ds:0xc0026324,ecx
c000a7d9:	75 10                	jne    c000a7eb <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a7db:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000a7de:	85 c0                	test   eax,eax
c000a7e0:	74 09                	je     c000a7eb <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a7e2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000a7e6:	5a                   	pop    edx
c000a7e7:	5b                   	pop    ebx
c000a7e8:	5e                   	pop    esi
c000a7e9:	ff e0                	jmp    eax
c000a7eb:	58                   	pop    eax
c000a7ec:	5b                   	pop    ebx
c000a7ed:	5e                   	pop    esi
c000a7ee:	c3                   	ret    
c000a7ef:	90                   	nop

c000a7f0 <VgaText::getCursorX()>:
c000a7f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7f4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000a7f7:	c3                   	ret    

c000a7f8 <VgaText::getCursorY()>:
c000a7f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7fc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000a7ff:	c3                   	ret    

c000a800 <VgaText::setCursor(int, int)>:
c000a800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a804:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a808:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000a80b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a80f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a812:	e9 b5 fd ff ff       	jmp    c000a5cc <VgaText::updateCursor()>

c000a817 <setActiveTerminal(VgaText*)>:
c000a817:	53                   	push   ebx
c000a818:	83 ec 08             	sub    esp,0x8
c000a81b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a81f:	85 db                	test   ebx,ebx
c000a821:	75 11                	jne    c000a834 <setActiveTerminal(VgaText*)+0x1d>
c000a823:	c7 44 24 10 84 28 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022884
c000a82b:	83 c4 08             	add    esp,0x8
c000a82e:	5b                   	pop    ebx
c000a82f:	e9 49 9c 00 00       	jmp    c001447d <Krnl::panic(char const*)>
c000a834:	a1 24 63 02 c0       	mov    eax,ds:0xc0026324
c000a839:	85 c0                	test   eax,eax
c000a83b:	74 0c                	je     c000a849 <setActiveTerminal(VgaText*)+0x32>
c000a83d:	83 ec 0c             	sub    esp,0xc
c000a840:	50                   	push   eax
c000a841:	e8 86 fd ff ff       	call   c000a5cc <VgaText::updateCursor()>
c000a846:	83 c4 10             	add    esp,0x10
c000a849:	89 1d 24 63 02 c0    	mov    DWORD PTR ds:0xc0026324,ebx
c000a84f:	51                   	push   ecx
c000a850:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a853:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a856:	53                   	push   ebx
c000a857:	e8 a4 ff ff ff       	call   c000a800 <VgaText::setCursor(int, int)>
c000a85c:	83 c4 10             	add    esp,0x10
c000a85f:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a863:	75 07                	jne    c000a86c <setActiveTerminal(VgaText*)+0x55>
c000a865:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000a86c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a870:	83 c4 08             	add    esp,0x8
c000a873:	5b                   	pop    ebx
c000a874:	e9 05 fd ff ff       	jmp    c000a57e <VgaText::load()>

c000a879 <doTerminalCycle()>:
c000a879:	83 ec 18             	sub    esp,0x18
c000a87c:	a1 20 63 02 c0       	mov    eax,ds:0xc0026320
c000a881:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000a884:	50                   	push   eax
c000a885:	a3 20 63 02 c0       	mov    ds:0xc0026320,eax
c000a88a:	e8 88 ff ff ff       	call   c000a817 <setActiveTerminal(VgaText*)>
c000a88f:	83 c4 1c             	add    esp,0x1c
c000a892:	c3                   	ret    
c000a893:	90                   	nop

c000a894 <VgaText::setCursorX(int)>:
c000a894:	83 ec 10             	sub    esp,0x10
c000a897:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a89b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8a2:	50                   	push   eax
c000a8a3:	e8 58 ff ff ff       	call   c000a800 <VgaText::setCursor(int, int)>
c000a8a8:	83 c4 1c             	add    esp,0x1c
c000a8ab:	c3                   	ret    

c000a8ac <VgaText::setCursorY(int)>:
c000a8ac:	83 ec 10             	sub    esp,0x10
c000a8af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a8b7:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a8ba:	50                   	push   eax
c000a8bb:	e8 40 ff ff ff       	call   c000a800 <VgaText::setCursor(int, int)>
c000a8c0:	83 c4 1c             	add    esp,0x1c
c000a8c3:	c3                   	ret    

c000a8c4 <VgaText::incrementCursor(bool)>:
c000a8c4:	56                   	push   esi
c000a8c5:	53                   	push   ebx
c000a8c6:	51                   	push   ecx
c000a8c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a8cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a8cf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a8d2:	40                   	inc    eax
c000a8d3:	83 f8 50             	cmp    eax,0x50
c000a8d6:	74 05                	je     c000a8dd <VgaText::incrementCursor(bool)+0x19>
c000a8d8:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000a8db:	eb 24                	jmp    c000a901 <VgaText::incrementCursor(bool)+0x3d>
c000a8dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a8e0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a8e7:	8d 50 01             	lea    edx,[eax+0x1]
c000a8ea:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a8ed:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a8f0:	75 0f                	jne    c000a901 <VgaText::incrementCursor(bool)+0x3d>
c000a8f2:	83 ec 0c             	sub    esp,0xc
c000a8f5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a8f8:	53                   	push   ebx
c000a8f9:	e8 f0 fd ff ff       	call   c000a6ee <VgaText::scrollScreen()>
c000a8fe:	83 c4 10             	add    esp,0x10
c000a901:	89 f0                	mov    eax,esi
c000a903:	84 c0                	test   al,al
c000a905:	74 0c                	je     c000a913 <VgaText::incrementCursor(bool)+0x4f>
c000a907:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a90b:	5a                   	pop    edx
c000a90c:	5b                   	pop    ebx
c000a90d:	5e                   	pop    esi
c000a90e:	e9 b9 fc ff ff       	jmp    c000a5cc <VgaText::updateCursor()>
c000a913:	58                   	pop    eax
c000a914:	5b                   	pop    ebx
c000a915:	5e                   	pop    esi
c000a916:	c3                   	ret    
c000a917:	90                   	nop

c000a918 <VgaText::decrementCursor(bool)>:
c000a918:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a91c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a920:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000a923:	85 c0                	test   eax,eax
c000a925:	74 04                	je     c000a92b <VgaText::decrementCursor(bool)+0x13>
c000a927:	48                   	dec    eax
c000a928:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000a92b:	84 c9                	test   cl,cl
c000a92d:	74 09                	je     c000a938 <VgaText::decrementCursor(bool)+0x20>
c000a92f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a933:	e9 94 fc ff ff       	jmp    c000a5cc <VgaText::updateCursor()>
c000a938:	c3                   	ret    
c000a939:	90                   	nop

c000a93a <VgaText::putchar(char, VgaColour, VgaColour)>:
c000a93a:	53                   	push   ebx
c000a93b:	83 ec 08             	sub    esp,0x8
c000a93e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a942:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a946:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a94a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a94e:	3c 07                	cmp    al,0x7
c000a950:	75 2a                	jne    c000a97c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000a952:	a1 d8 63 02 c0       	mov    eax,ds:0xc00263d8
c000a957:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a95f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000a967:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000a96f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a973:	83 c4 08             	add    esp,0x8
c000a976:	5b                   	pop    ebx
c000a977:	e9 5a 2f 00 00       	jmp    c000d8d6 <Buzzer::beep(int, int, bool)>
c000a97c:	3c 0d                	cmp    al,0xd
c000a97e:	75 09                	jne    c000a989 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000a980:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a987:	eb 2c                	jmp    c000a9b5 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000a989:	3c 0a                	cmp    al,0xa
c000a98b:	75 31                	jne    c000a9be <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000a98d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a990:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a997:	8d 50 01             	lea    edx,[eax+0x1]
c000a99a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a99d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a9a0:	75 0f                	jne    c000a9b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000a9a2:	83 ec 0c             	sub    esp,0xc
c000a9a5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a9a8:	53                   	push   ebx
c000a9a9:	e8 40 fd ff ff       	call   c000a6ee <VgaText::scrollScreen()>
c000a9ae:	83 c4 10             	add    esp,0x10
c000a9b1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a9b5:	83 c4 08             	add    esp,0x8
c000a9b8:	5b                   	pop    ebx
c000a9b9:	e9 0e fc ff ff       	jmp    c000a5cc <VgaText::updateCursor()>
c000a9be:	3c 08                	cmp    al,0x8
c000a9c0:	75 25                	jne    c000a9e7 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000a9c2:	50                   	push   eax
c000a9c3:	50                   	push   eax
c000a9c4:	6a 01                	push   0x1
c000a9c6:	53                   	push   ebx
c000a9c7:	e8 4c ff ff ff       	call   c000a918 <VgaText::decrementCursor(bool)>
c000a9cc:	5a                   	pop    edx
c000a9cd:	59                   	pop    ecx
c000a9ce:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a9d1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a9d4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a9d7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a9da:	6a 20                	push   0x20
c000a9dc:	53                   	push   ebx
c000a9dd:	e8 b2 fd ff ff       	call   c000a794 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a9e2:	83 c4 28             	add    esp,0x28
c000a9e5:	5b                   	pop    ebx
c000a9e6:	c3                   	ret    
c000a9e7:	83 ec 08             	sub    esp,0x8
c000a9ea:	0f be c0             	movsx  eax,al
c000a9ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a9f0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a9f3:	51                   	push   ecx
c000a9f4:	52                   	push   edx
c000a9f5:	50                   	push   eax
c000a9f6:	53                   	push   ebx
c000a9f7:	e8 98 fd ff ff       	call   c000a794 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a9fc:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000aa00:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000aa08:	83 c4 28             	add    esp,0x28
c000aa0b:	5b                   	pop    ebx
c000aa0c:	e9 b3 fe ff ff       	jmp    c000a8c4 <VgaText::incrementCursor(bool)>
c000aa11:	90                   	nop

c000aa12 <VgaText::doUpdate()>:
c000aa12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa16:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000aa19:	85 c0                	test   eax,eax
c000aa1b:	74 02                	je     c000aa1f <VgaText::doUpdate()+0xd>
c000aa1d:	ff e0                	jmp    eax
c000aa1f:	c3                   	ret    

c000aa20 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000aa20:	55                   	push   ebp
c000aa21:	31 ed                	xor    ebp,ebp
c000aa23:	57                   	push   edi
c000aa24:	56                   	push   esi
c000aa25:	53                   	push   ebx
c000aa26:	83 ec 1c             	sub    esp,0x1c
c000aa29:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aa2d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000aa32:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000aa39:	50                   	push   eax
c000aa3a:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000aa3f:	50                   	push   eax
c000aa40:	e8 97 fc ff ff       	call   c000a6dc <VgaText::combineColours(unsigned char, unsigned char)>
c000aa45:	59                   	pop    ecx
c000aa46:	0f b6 c0             	movzx  eax,al
c000aa49:	5e                   	pop    esi
c000aa4a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa4f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000aa53:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5a:	0f b7 f6             	movzx  esi,si
c000aa5d:	01 f6                	add    esi,esi
c000aa5f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa62:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000aa65:	84 c0                	test   al,al
c000aa67:	0f 84 fd 00 00 00    	je     c000ab6a <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000aa6d:	3c 0d                	cmp    al,0xd
c000aa6f:	75 0c                	jne    c000aa7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000aa71:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aa78:	e9 e7 00 00 00       	jmp    c000ab64 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aa7d:	3c 0a                	cmp    al,0xa
c000aa7f:	75 47                	jne    c000aac8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000aa81:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000aa84:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aa8b:	8d 48 01             	lea    ecx,[eax+0x1]
c000aa8e:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000aa91:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000aa94:	75 0f                	jne    c000aaa5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000aa96:	83 ec 0c             	sub    esp,0xc
c000aa99:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000aa9c:	53                   	push   ebx
c000aa9d:	e8 4c fc ff ff       	call   c000a6ee <VgaText::scrollScreen()>
c000aaa2:	83 c4 10             	add    esp,0x10
c000aaa5:	83 ec 0c             	sub    esp,0xc
c000aaa8:	31 ed                	xor    ebp,ebp
c000aaaa:	53                   	push   ebx
c000aaab:	e8 1c fb ff ff       	call   c000a5cc <VgaText::updateCursor()>
c000aab0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aab5:	83 c4 10             	add    esp,0x10
c000aab8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aabb:	0f b7 f6             	movzx  esi,si
c000aabe:	01 f6                	add    esi,esi
c000aac0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aac3:	e9 9c 00 00 00       	jmp    c000ab64 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aac8:	3c 08                	cmp    al,0x8
c000aaca:	75 35                	jne    c000ab01 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000aacc:	56                   	push   esi
c000aacd:	56                   	push   esi
c000aace:	6a 01                	push   0x1
c000aad0:	53                   	push   ebx
c000aad1:	e8 42 fe ff ff       	call   c000a918 <VgaText::decrementCursor(bool)>
c000aad6:	58                   	pop    eax
c000aad7:	5a                   	pop    edx
c000aad8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aadb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aade:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aae1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aae4:	6a 20                	push   0x20
c000aae6:	53                   	push   ebx
c000aae7:	e8 a8 fc ff ff       	call   c000a794 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aaec:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aaf1:	83 c4 20             	add    esp,0x20
c000aaf4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aaf7:	0f b7 f6             	movzx  esi,si
c000aafa:	01 f6                	add    esi,esi
c000aafc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aaff:	eb 63                	jmp    c000ab64 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ab01:	51                   	push   ecx
c000ab02:	51                   	push   ecx
c000ab03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab07:	50                   	push   eax
c000ab08:	e8 75 fc ff ff       	call   c000a782 <VgaText::combineCharAndColour(char, unsigned char)>
c000ab0d:	83 c4 10             	add    esp,0x10
c000ab10:	66 89 06             	mov    WORD PTR [esi],ax
c000ab13:	39 1d 24 63 02 c0    	cmp    DWORD PTR ds:0xc0026324,ebx
c000ab19:	75 21                	jne    c000ab3c <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ab1b:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000ab1e:	85 c0                	test   eax,eax
c000ab20:	74 1a                	je     c000ab3c <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ab22:	52                   	push   edx
c000ab23:	52                   	push   edx
c000ab24:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ab27:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ab2a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab2e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab32:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000ab35:	51                   	push   ecx
c000ab36:	53                   	push   ebx
c000ab37:	ff d0                	call   eax
c000ab39:	83 c4 20             	add    esp,0x20
c000ab3c:	83 c6 02             	add    esi,0x2
c000ab3f:	50                   	push   eax
c000ab40:	50                   	push   eax
c000ab41:	6a 00                	push   0x0
c000ab43:	53                   	push   ebx
c000ab44:	e8 7b fd ff ff       	call   c000a8c4 <VgaText::incrementCursor(bool)>
c000ab49:	83 c4 10             	add    esp,0x10
c000ab4c:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000ab50:	75 0d                	jne    c000ab5f <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000ab52:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ab57:	0f b7 f6             	movzx  esi,si
c000ab5a:	01 f6                	add    esi,esi
c000ab5c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ab5f:	bd 01 00 00 00       	mov    ebp,0x1
c000ab64:	47                   	inc    edi
c000ab65:	e9 f8 fe ff ff       	jmp    c000aa62 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000ab6a:	83 ec 0c             	sub    esp,0xc
c000ab6d:	53                   	push   ebx
c000ab6e:	e8 59 fa ff ff       	call   c000a5cc <VgaText::updateCursor()>
c000ab73:	83 c4 10             	add    esp,0x10
c000ab76:	89 e8                	mov    eax,ebp
c000ab78:	84 c0                	test   al,al
c000ab7a:	74 0c                	je     c000ab88 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000ab7c:	83 ec 0c             	sub    esp,0xc
c000ab7f:	53                   	push   ebx
c000ab80:	e8 8d fe ff ff       	call   c000aa12 <VgaText::doUpdate()>
c000ab85:	83 c4 10             	add    esp,0x10
c000ab88:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ab8f:	83 c4 1c             	add    esp,0x1c
c000ab92:	5b                   	pop    ebx
c000ab93:	5e                   	pop    esi
c000ab94:	5f                   	pop    edi
c000ab95:	5d                   	pop    ebp
c000ab96:	c3                   	ret    
c000ab97:	90                   	nop

c000ab98 <VgaText::clearScreen()>:
c000ab98:	57                   	push   edi
c000ab99:	56                   	push   esi
c000ab9a:	31 f6                	xor    esi,esi
c000ab9c:	53                   	push   ebx
c000ab9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aba1:	52                   	push   edx
c000aba2:	6a 00                	push   0x0
c000aba4:	6a 00                	push   0x0
c000aba6:	53                   	push   ebx
c000aba7:	e8 54 fc ff ff       	call   c000a800 <VgaText::setCursor(int, int)>
c000abac:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000abb3:	83 c4 10             	add    esp,0x10
c000abb6:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000abb9:	7e 20                	jle    c000abdb <VgaText::clearScreen()+0x43>
c000abbb:	31 ff                	xor    edi,edi
c000abbd:	50                   	push   eax
c000abbe:	50                   	push   eax
c000abbf:	56                   	push   esi
c000abc0:	57                   	push   edi
c000abc1:	47                   	inc    edi
c000abc2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000abc5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000abc8:	6a 20                	push   0x20
c000abca:	53                   	push   ebx
c000abcb:	e8 c4 fb ff ff       	call   c000a794 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000abd0:	83 c4 20             	add    esp,0x20
c000abd3:	83 ff 50             	cmp    edi,0x50
c000abd6:	75 e5                	jne    c000abbd <VgaText::clearScreen()+0x25>
c000abd8:	46                   	inc    esi
c000abd9:	eb db                	jmp    c000abb6 <VgaText::clearScreen()+0x1e>
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	53                   	push   ebx
c000abdf:	e8 2e fe ff ff       	call   c000aa12 <VgaText::doUpdate()>
c000abe4:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000abeb:	83 c4 10             	add    esp,0x10
c000abee:	5b                   	pop    ebx
c000abef:	5e                   	pop    esi
c000abf0:	5f                   	pop    edi
c000abf1:	c3                   	ret    

c000abf2 <VgaText::putchar(char)>:
c000abf2:	56                   	push   esi
c000abf3:	53                   	push   ebx
c000abf4:	83 ec 14             	sub    esp,0x14
c000abf7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abfb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000abff:	3c 5b                	cmp    al,0x5b
c000ac01:	75 18                	jne    c000ac1b <VgaText::putchar(char)+0x29>
c000ac03:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000ac07:	74 1f                	je     c000ac28 <VgaText::putchar(char)+0x36>
c000ac09:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000ac0f:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000ac16:	e9 bd 00 00 00       	jmp    c000acd8 <VgaText::putchar(char)+0xe6>
c000ac1b:	3c 1b                	cmp    al,0x1b
c000ac1d:	75 09                	jne    c000ac28 <VgaText::putchar(char)+0x36>
c000ac1f:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000ac23:	e9 b0 00 00 00       	jmp    c000acd8 <VgaText::putchar(char)+0xe6>
c000ac28:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000ac2b:	84 c9                	test   cl,cl
c000ac2d:	0f 84 92 00 00 00    	je     c000acc5 <VgaText::putchar(char)+0xd3>
c000ac33:	8d 50 c0             	lea    edx,[eax-0x40]
c000ac36:	80 fa 3e             	cmp    dl,0x3e
c000ac39:	77 76                	ja     c000acb1 <VgaText::putchar(char)+0xbf>
c000ac3b:	3c 6d                	cmp    al,0x6d
c000ac3d:	75 47                	jne    c000ac86 <VgaText::putchar(char)+0x94>
c000ac3f:	31 f6                	xor    esi,esi
c000ac41:	31 d2                	xor    edx,edx
c000ac43:	31 c0                	xor    eax,eax
c000ac45:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000ac48:	7e 2d                	jle    c000ac77 <VgaText::putchar(char)+0x85>
c000ac4a:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000ac4f:	80 fa 3b             	cmp    dl,0x3b
c000ac52:	75 17                	jne    c000ac6b <VgaText::putchar(char)+0x79>
c000ac54:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000ac58:	50                   	push   eax
c000ac59:	53                   	push   ebx
c000ac5a:	e8 83 f9 ff ff       	call   c000a5e2 <VgaText::doANSI_SGR(int)>
c000ac5f:	59                   	pop    ecx
c000ac60:	31 d2                	xor    edx,edx
c000ac62:	58                   	pop    eax
c000ac63:	31 c0                	xor    eax,eax
c000ac65:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000ac69:	eb 09                	jmp    c000ac74 <VgaText::putchar(char)+0x82>
c000ac6b:	6b c0 0a             	imul   eax,eax,0xa
c000ac6e:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000ac72:	88 ca                	mov    dl,cl
c000ac74:	46                   	inc    esi
c000ac75:	eb ce                	jmp    c000ac45 <VgaText::putchar(char)+0x53>
c000ac77:	84 d2                	test   dl,dl
c000ac79:	74 2e                	je     c000aca9 <VgaText::putchar(char)+0xb7>
c000ac7b:	50                   	push   eax
c000ac7c:	53                   	push   ebx
c000ac7d:	e8 60 f9 ff ff       	call   c000a5e2 <VgaText::doANSI_SGR(int)>
c000ac82:	58                   	pop    eax
c000ac83:	5a                   	pop    edx
c000ac84:	eb 23                	jmp    c000aca9 <VgaText::putchar(char)+0xb7>
c000ac86:	3c 4a                	cmp    al,0x4a
c000ac88:	75 1f                	jne    c000aca9 <VgaText::putchar(char)+0xb7>
c000ac8a:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000ac8e:	75 19                	jne    c000aca9 <VgaText::putchar(char)+0xb7>
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	53                   	push   ebx
c000ac94:	e8 ff fe ff ff       	call   c000ab98 <VgaText::clearScreen()>
c000ac99:	83 c4 0c             	add    esp,0xc
c000ac9c:	6a 00                	push   0x0
c000ac9e:	6a 00                	push   0x0
c000aca0:	53                   	push   ebx
c000aca1:	e8 5a fb ff ff       	call   c000a800 <VgaText::setCursor(int, int)>
c000aca6:	83 c4 10             	add    esp,0x10
c000aca9:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000acaf:	eb 27                	jmp    c000acd8 <VgaText::putchar(char)+0xe6>
c000acb1:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000acb4:	83 fa 0e             	cmp    edx,0xe
c000acb7:	7f 1f                	jg     c000acd8 <VgaText::putchar(char)+0xe6>
c000acb9:	8d 4a 01             	lea    ecx,[edx+0x1]
c000acbc:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000acbf:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000acc3:	eb 13                	jmp    c000acd8 <VgaText::putchar(char)+0xe6>
c000acc5:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000acc8:	0f be c0             	movsx  eax,al
c000accb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000acce:	50                   	push   eax
c000accf:	53                   	push   ebx
c000acd0:	e8 65 fc ff ff       	call   c000a93a <VgaText::putchar(char, VgaColour, VgaColour)>
c000acd5:	83 c4 10             	add    esp,0x10
c000acd8:	83 c4 14             	add    esp,0x14
c000acdb:	5b                   	pop    ebx
c000acdc:	5e                   	pop    esi
c000acdd:	c3                   	ret    

c000acde <VgaText::putx(unsigned int)>:
c000acde:	57                   	push   edi
c000acdf:	b9 11 00 00 00       	mov    ecx,0x11
c000ace4:	56                   	push   esi
c000ace5:	be 92 28 02 c0       	mov    esi,0xc0022892
c000acea:	53                   	push   ebx
c000aceb:	83 ec 20             	sub    esp,0x20
c000acee:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000acf2:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000acf6:	fc                   	cld    
c000acf7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000acf9:	be 08 00 00 00       	mov    esi,0x8
c000acfe:	50                   	push   eax
c000acff:	50                   	push   eax
c000ad00:	89 d8                	mov    eax,ebx
c000ad02:	c1 e3 04             	shl    ebx,0x4
c000ad05:	c1 e8 1c             	shr    eax,0x1c
c000ad08:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000ad0d:	50                   	push   eax
c000ad0e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad12:	e8 db fe ff ff       	call   c000abf2 <VgaText::putchar(char)>
c000ad17:	83 c4 10             	add    esp,0x10
c000ad1a:	4e                   	dec    esi
c000ad1b:	75 e1                	jne    c000acfe <VgaText::putx(unsigned int)+0x20>
c000ad1d:	83 c4 20             	add    esp,0x20
c000ad20:	5b                   	pop    ebx
c000ad21:	5e                   	pop    esi
c000ad22:	5f                   	pop    edi
c000ad23:	c3                   	ret    

c000ad24 <VgaText::puts(char const*)>:
c000ad24:	53                   	push   ebx
c000ad25:	83 ec 08             	sub    esp,0x8
c000ad28:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ad2c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ad2f:	84 c0                	test   al,al
c000ad31:	74 12                	je     c000ad45 <VgaText::puts(char const*)+0x21>
c000ad33:	43                   	inc    ebx
c000ad34:	51                   	push   ecx
c000ad35:	51                   	push   ecx
c000ad36:	50                   	push   eax
c000ad37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad3b:	e8 b2 fe ff ff       	call   c000abf2 <VgaText::putchar(char)>
c000ad40:	83 c4 10             	add    esp,0x10
c000ad43:	eb e7                	jmp    c000ad2c <VgaText::puts(char const*)+0x8>
c000ad45:	83 c4 08             	add    esp,0x8
c000ad48:	5b                   	pop    ebx
c000ad49:	c3                   	ret    

c000ad4a <VgaText::VgaText(char const*)>:
c000ad4a:	57                   	push   edi
c000ad4b:	56                   	push   esi
c000ad4c:	53                   	push   ebx
c000ad4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad51:	83 ec 08             	sub    esp,0x8
c000ad54:	6a 00                	push   0x0
c000ad56:	50                   	push   eax
c000ad57:	e8 44 05 00 00       	call   c000b2a0 <UnixFile::UnixFile(int)>
c000ad5c:	83 c4 10             	add    esp,0x10
c000ad5f:	ba f8 28 02 c0       	mov    edx,0xc00228f8
c000ad64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad68:	89 10                	mov    DWORD PTR [eax],edx
c000ad6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad6e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000ad75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad79:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000ad80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad84:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000ad88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad8c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000ad90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad94:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000ad9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad9f:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000ada6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adaa:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000adb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adb5:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000adbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc0:	8d 50 60             	lea    edx,[eax+0x60]
c000adc3:	bb 00 63 02 c0       	mov    ebx,0xc0026300
c000adc8:	b8 08 00 00 00       	mov    eax,0x8
c000adcd:	fc                   	cld    
c000adce:	89 d7                	mov    edi,edx
c000add0:	89 de                	mov    esi,ebx
c000add2:	89 c1                	mov    ecx,eax
c000add4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000add6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adda:	05 82 00 00 00       	add    eax,0x82
c000addf:	83 ec 08             	sub    esp,0x8
c000ade2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ade6:	50                   	push   eax
c000ade7:	e8 20 5a ff ff       	call   c000080c <strcpy>
c000adec:	83 c4 10             	add    esp,0x10
c000adef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf3:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000adfa:	83 ec 0c             	sub    esp,0xc
c000adfd:	6a 01                	push   0x1
c000adff:	e8 df 08 00 00       	call   c000b6e3 <Virt::allocateKernelVirtualPages(int)>
c000ae04:	83 c4 10             	add    esp,0x10
c000ae07:	89 c2                	mov    edx,eax
c000ae09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae0d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ae10:	8b 1d d0 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263d0
c000ae16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae1a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae1d:	89 c6                	mov    esi,eax
c000ae1f:	e8 35 f0 ff ff       	call   c0009e59 <Phys::allocatePage()>
c000ae24:	68 05 0c 00 00       	push   0xc05
c000ae29:	56                   	push   esi
c000ae2a:	50                   	push   eax
c000ae2b:	53                   	push   ebx
c000ae2c:	e8 59 0f 00 00       	call   c000bd8a <VAS::mapPage(unsigned long, unsigned long, int)>
c000ae31:	83 c4 10             	add    esp,0x10
c000ae34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae38:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae3b:	83 ec 04             	sub    esp,0x4
c000ae3e:	68 00 0f 00 00       	push   0xf00
c000ae43:	6a 00                	push   0x0
c000ae45:	50                   	push   eax
c000ae46:	e8 05 59 ff ff       	call   c0000750 <memset>
c000ae4b:	83 c4 10             	add    esp,0x10
c000ae4e:	83 ec 04             	sub    esp,0x4
c000ae51:	6a 00                	push   0x0
c000ae53:	6a 07                	push   0x7
c000ae55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae59:	e8 18 f8 ff ff       	call   c000a676 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000ae5e:	83 c4 10             	add    esp,0x10
c000ae61:	83 ec 04             	sub    esp,0x4
c000ae64:	6a 00                	push   0x0
c000ae66:	6a 00                	push   0x0
c000ae68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae6c:	e8 8f f9 ff ff       	call   c000a800 <VgaText::setCursor(int, int)>
c000ae71:	83 c4 10             	add    esp,0x10
c000ae74:	83 ec 0c             	sub    esp,0xc
c000ae77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae7b:	e8 18 fd ff ff       	call   c000ab98 <VgaText::clearScreen()>
c000ae80:	83 c4 10             	add    esp,0x10
c000ae83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae87:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000ae8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae8f:	05 02 01 00 00       	add    eax,0x102
c000ae94:	83 ec 04             	sub    esp,0x4
c000ae97:	68 96 00 00 00       	push   0x96
c000ae9c:	6a 00                	push   0x0
c000ae9e:	50                   	push   eax
c000ae9f:	e8 ac 58 ff ff       	call   c0000750 <memset>
c000aea4:	83 c4 10             	add    esp,0x10
c000aea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeab:	05 98 01 00 00       	add    eax,0x198
c000aeb0:	83 ec 04             	sub    esp,0x4
c000aeb3:	68 2c 01 00 00       	push   0x12c
c000aeb8:	6a 00                	push   0x0
c000aeba:	50                   	push   eax
c000aebb:	e8 90 58 ff ff       	call   c0000750 <memset>
c000aec0:	83 c4 10             	add    esp,0x10
c000aec3:	90                   	nop
c000aec4:	5b                   	pop    ebx
c000aec5:	5e                   	pop    esi
c000aec6:	5f                   	pop    edi
c000aec7:	c3                   	ret    

c000aec8 <VgaText::receiveKey(unsigned char)>:
c000aec8:	55                   	push   ebp
c000aec9:	57                   	push   edi
c000aeca:	56                   	push   esi
c000aecb:	53                   	push   ebx
c000aecc:	83 ec 1c             	sub    esp,0x1c
c000aecf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000aed3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000aed7:	84 db                	test   bl,bl
c000aed9:	0f 84 c9 00 00 00    	je     c000afa8 <VgaText::receiveKey(unsigned char)+0xe0>
c000aedf:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000aee5:	80 fb 08             	cmp    bl,0x8
c000aee8:	75 2c                	jne    c000af16 <VgaText::receiveKey(unsigned char)+0x4e>
c000aeea:	83 ec 0c             	sub    esp,0xc
c000aeed:	57                   	push   edi
c000aeee:	e8 79 58 ff ff       	call   c000076c <strlen>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	85 c0                	test   eax,eax
c000aef8:	74 41                	je     c000af3b <VgaText::receiveKey(unsigned char)+0x73>
c000aefa:	50                   	push   eax
c000aefb:	50                   	push   eax
c000aefc:	6a 08                	push   0x8
c000aefe:	56                   	push   esi
c000aeff:	e8 ee fc ff ff       	call   c000abf2 <VgaText::putchar(char)>
c000af04:	89 3c 24             	mov    DWORD PTR [esp],edi
c000af07:	e8 60 58 ff ff       	call   c000076c <strlen>
c000af0c:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000af14:	eb 22                	jmp    c000af38 <VgaText::receiveKey(unsigned char)+0x70>
c000af16:	0f be c3             	movsx  eax,bl
c000af19:	52                   	push   edx
c000af1a:	52                   	push   edx
c000af1b:	50                   	push   eax
c000af1c:	56                   	push   esi
c000af1d:	e8 d0 fc ff ff       	call   c000abf2 <VgaText::putchar(char)>
c000af22:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000af26:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000af2b:	59                   	pop    ecx
c000af2c:	5d                   	pop    ebp
c000af2d:	8d 44 24 16          	lea    eax,[esp+0x16]
c000af31:	50                   	push   eax
c000af32:	57                   	push   edi
c000af33:	e8 14 5a ff ff       	call   c000094c <strcat>
c000af38:	83 c4 10             	add    esp,0x10
c000af3b:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000af42:	75 05                	jne    c000af49 <VgaText::receiveKey(unsigned char)+0x81>
c000af44:	80 fb 0a             	cmp    bl,0xa
c000af47:	75 53                	jne    c000af9c <VgaText::receiveKey(unsigned char)+0xd4>
c000af49:	83 ec 0c             	sub    esp,0xc
c000af4c:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000af52:	53                   	push   ebx
c000af53:	e8 14 58 ff ff       	call   c000076c <strlen>
c000af58:	89 3c 24             	mov    DWORD PTR [esp],edi
c000af5b:	89 c5                	mov    ebp,eax
c000af5d:	e8 0a 58 ff ff       	call   c000076c <strlen>
c000af62:	83 c4 10             	add    esp,0x10
c000af65:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000af69:	3d 2c 01 00 00       	cmp    eax,0x12c
c000af6e:	76 10                	jbe    c000af80 <VgaText::receiveKey(unsigned char)+0xb8>
c000af70:	83 ec 0c             	sub    esp,0xc
c000af73:	68 a3 28 02 c0       	push   0xc00228a3
c000af78:	e8 00 95 00 00       	call   c001447d <Krnl::panic(char const*)>
c000af7d:	83 c4 10             	add    esp,0x10
c000af80:	50                   	push   eax
c000af81:	50                   	push   eax
c000af82:	57                   	push   edi
c000af83:	53                   	push   ebx
c000af84:	e8 c3 59 ff ff       	call   c000094c <strcat>
c000af89:	83 c4 0c             	add    esp,0xc
c000af8c:	68 96 00 00 00       	push   0x96
c000af91:	6a 00                	push   0x0
c000af93:	57                   	push   edi
c000af94:	e8 b7 57 ff ff       	call   c0000750 <memset>
c000af99:	83 c4 10             	add    esp,0x10
c000af9c:	83 ec 0c             	sub    esp,0xc
c000af9f:	56                   	push   esi
c000afa0:	e8 6d fa ff ff       	call   c000aa12 <VgaText::doUpdate()>
c000afa5:	83 c4 10             	add    esp,0x10
c000afa8:	83 c4 1c             	add    esp,0x1c
c000afab:	5b                   	pop    ebx
c000afac:	5e                   	pop    esi
c000afad:	5f                   	pop    edi
c000afae:	5d                   	pop    ebp
c000afaf:	c3                   	ret    

c000afb0 <VgaText::write(unsigned long long, void*, int*)>:
c000afb0:	55                   	push   ebp
c000afb1:	57                   	push   edi
c000afb2:	56                   	push   esi
c000afb3:	53                   	push   ebx
c000afb4:	83 ec 0c             	sub    esp,0xc
c000afb7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000afbb:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000afbf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000afc3:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000afca:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000afcd:	39 eb                	cmp    ebx,ebp
c000afcf:	74 13                	je     c000afe4 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000afd1:	43                   	inc    ebx
c000afd2:	50                   	push   eax
c000afd3:	50                   	push   eax
c000afd4:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000afd8:	50                   	push   eax
c000afd9:	56                   	push   esi
c000afda:	e8 13 fc ff ff       	call   c000abf2 <VgaText::putchar(char)>
c000afdf:	83 c4 10             	add    esp,0x10
c000afe2:	eb e9                	jmp    c000afcd <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000afe4:	83 ec 0c             	sub    esp,0xc
c000afe7:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000afee:	56                   	push   esi
c000afef:	e8 1e fa ff ff       	call   c000aa12 <VgaText::doUpdate()>
c000aff4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000aff8:	89 38                	mov    DWORD PTR [eax],edi
c000affa:	83 c4 1c             	add    esp,0x1c
c000affd:	31 c0                	xor    eax,eax
c000afff:	5b                   	pop    ebx
c000b000:	5e                   	pop    esi
c000b001:	5f                   	pop    edi
c000b002:	5d                   	pop    ebp
c000b003:	c3                   	ret    

c000b004 <newTerminal(char*)>:
c000b004:	83 ec 28             	sub    esp,0x28
c000b007:	68 c4 02 00 00       	push   0x2c4
c000b00c:	e8 4c ea ff ff       	call   c0009a5d <malloc>
c000b011:	5a                   	pop    edx
c000b012:	59                   	pop    ecx
c000b013:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b017:	50                   	push   eax
c000b018:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b01c:	e8 29 fd ff ff       	call   c000ad4a <VgaText::VgaText(char const*)>
c000b021:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b025:	83 c4 2c             	add    esp,0x2c
c000b028:	c3                   	ret    
c000b029:	90                   	nop

c000b02a <TSS::TSS()>:
c000b02a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b02e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b035:	90                   	nop
c000b036:	c3                   	ret    
c000b037:	90                   	nop

c000b038 <TSS::setESP(unsigned long)>:
c000b038:	55                   	push   ebp
c000b039:	89 e5                	mov    ebp,esp
c000b03b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b03e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b041:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b044:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b047:	90                   	nop
c000b048:	5d                   	pop    ebp
c000b049:	c3                   	ret    

c000b04a <TSS::flush()>:
c000b04a:	55                   	push   ebp
c000b04b:	89 e5                	mov    ebp,esp
c000b04d:	83 ec 10             	sub    esp,0x10
c000b050:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b053:	8b 00                	mov    eax,DWORD PTR [eax]
c000b055:	83 c8 03             	or     eax,0x3
c000b058:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b05c:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b060:	66 89 d0             	mov    ax,dx
c000b063:	0f 00 d8             	ltr    ax
c000b066:	90                   	nop
c000b067:	c9                   	leave  
c000b068:	c3                   	ret    
c000b069:	90                   	nop

c000b06a <TSS::setup(unsigned long, unsigned long)>:
c000b06a:	55                   	push   ebp
c000b06b:	89 e5                	mov    ebp,esp
c000b06d:	83 ec 18             	sub    esp,0x18
c000b070:	83 ec 0c             	sub    esp,0xc
c000b073:	6a 68                	push   0x68
c000b075:	e8 e3 e9 ff ff       	call   c0009a5d <malloc>
c000b07a:	83 c4 10             	add    esp,0x10
c000b07d:	89 c2                	mov    edx,eax
c000b07f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b082:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b085:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b088:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b08b:	83 ec 04             	sub    esp,0x4
c000b08e:	6a 68                	push   0x68
c000b090:	6a 00                	push   0x0
c000b092:	50                   	push   eax
c000b093:	e8 b8 56 ff ff       	call   c0000750 <memset>
c000b098:	83 c4 10             	add    esp,0x10
c000b09b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b09e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0a1:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b0a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0ad:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b0b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0b9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b0bc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b0bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0c5:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b0cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0d1:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b0d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0dd:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b0e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0e9:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b0ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0f5:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b0fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b101:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b10a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b10d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b110:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b116:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b119:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b11c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b11f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b122:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b125:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b12c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b12f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b132:	0f 20 da             	mov    edx,cr3
c000b135:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b138:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b13b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b13e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b141:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b144:	83 ec 08             	sub    esp,0x8
c000b147:	50                   	push   eax
c000b148:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b14b:	50                   	push   eax
c000b14c:	e8 6f e1 ff ff       	call   c00092c0 <GDTEntry::setBase(unsigned int)>
c000b151:	83 c4 10             	add    esp,0x10
c000b154:	83 ec 08             	sub    esp,0x8
c000b157:	6a 68                	push   0x68
c000b159:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b15c:	50                   	push   eax
c000b15d:	e8 7a e1 ff ff       	call   c00092dc <GDTEntry::setLimit(unsigned int)>
c000b162:	83 c4 10             	add    esp,0x10
c000b165:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b169:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b16c:	83 e0 0f             	and    eax,0xf
c000b16f:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b172:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b175:	83 c8 40             	or     eax,0x40
c000b178:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b17b:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000b180:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b186:	05 78 01 00 00       	add    eax,0x178
c000b18b:	83 ec 04             	sub    esp,0x4
c000b18e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b191:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b194:	50                   	push   eax
c000b195:	e8 76 e1 ff ff       	call   c0009310 <GDT::addEntry(GDTEntry)>
c000b19a:	83 c4 10             	add    esp,0x10
c000b19d:	89 c2                	mov    edx,eax
c000b19f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b1a2:	89 10                	mov    DWORD PTR [eax],edx
c000b1a4:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000b1a9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b1af:	05 78 01 00 00       	add    eax,0x178
c000b1b4:	83 ec 0c             	sub    esp,0xc
c000b1b7:	50                   	push   eax
c000b1b8:	e8 7d e1 ff ff       	call   c000933a <GDT::flush()>
c000b1bd:	83 c4 10             	add    esp,0x10
c000b1c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b1c3:	8b 00                	mov    eax,DWORD PTR [eax]
c000b1c5:	c9                   	leave  
c000b1c6:	c3                   	ret    
c000b1c7:	90                   	nop

c000b1c8 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b1c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b1d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b1d3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b1d8:	75 08                	jne    c000b1e2 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b1da:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b1e0:	eb 38                	jmp    c000b21a <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b1e2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b1e7:	75 17                	jne    c000b200 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b1e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b1f1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000b1f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b1f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b1fd:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b200:	89 c1                	mov    ecx,eax
c000b202:	83 e1 fd             	and    ecx,0xfffffffd
c000b205:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b20b:	74 cd                	je     c000b1da <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b20d:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b212:	83 e0 ef             	and    eax,0xffffffef
c000b215:	83 f8 08             	cmp    eax,0x8
c000b218:	76 c0                	jbe    c000b1da <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b21a:	31 c0                	xor    eax,eax
c000b21c:	c3                   	ret    
c000b21d:	90                   	nop

c000b21e <ReservedFilename::isAtty()>:
c000b21e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b222:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b225:	31 c0                	xor    eax,eax
c000b227:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b22d:	74 09                	je     c000b238 <ReservedFilename::isAtty()+0x1a>
c000b22f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b235:	0f 94 c0             	sete   al
c000b238:	c3                   	ret    
c000b239:	90                   	nop

c000b23a <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b23a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b23e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b242:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b245:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b249:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b24e:	75 08                	jne    c000b258 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b250:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b256:	eb 3d                	jmp    c000b295 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b258:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b25d:	75 17                	jne    c000b276 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b25f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b264:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b267:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000b26d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b26f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b273:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b276:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b27b:	75 04                	jne    c000b281 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b27d:	89 0a                	mov    DWORD PTR [edx],ecx
c000b27f:	eb 14                	jmp    c000b295 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b281:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b286:	74 c8                	je     c000b250 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b288:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b28d:	83 e0 ef             	and    eax,0xffffffef
c000b290:	83 f8 08             	cmp    eax,0x8
c000b293:	76 bb                	jbe    c000b250 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b295:	31 c0                	xor    eax,eax
c000b297:	c3                   	ret    

c000b298 <UnixFile::getFileDescriptor()>:
c000b298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b29c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b29f:	c3                   	ret    

c000b2a0 <UnixFile::UnixFile(int)>:
c000b2a0:	53                   	push   ebx
c000b2a1:	83 ec 28             	sub    esp,0x28
c000b2a4:	ba c0 29 02 c0       	mov    edx,0xc00229c0
c000b2a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2ad:	89 10                	mov    DWORD PTR [eax],edx
c000b2af:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b2b7:	0f 8f 8c 01 00 00    	jg     c000b449 <UnixFile::UnixFile(int)+0x1a9>
c000b2bd:	a1 a0 56 02 c0       	mov    eax,ds:0xc00256a0
c000b2c2:	8d 50 01             	lea    edx,[eax+0x1]
c000b2c5:	89 15 a0 56 02 c0    	mov    DWORD PTR ds:0xc00256a0,edx
c000b2cb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b2cf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b2d2:	83 ec 08             	sub    esp,0x8
c000b2d5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2d9:	68 b8 63 02 c0       	push   0xc00263b8
c000b2de:	e8 09 5e 01 00       	call   c00210ec <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b2e3:	83 c4 10             	add    esp,0x10
c000b2e6:	a0 b4 63 02 c0       	mov    al,ds:0xc00263b4
c000b2eb:	83 f0 01             	xor    eax,0x1
c000b2ee:	84 c0                	test   al,al
c000b2f0:	0f 84 54 01 00 00    	je     c000b44a <UnixFile::UnixFile(int)+0x1aa>
c000b2f6:	c6 05 b4 63 02 c0 01 	mov    BYTE PTR ds:0xc00263b4,0x1
c000b2fd:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b305:	83 ec 0c             	sub    esp,0xc
c000b308:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b30c:	e8 4c e7 ff ff       	call   c0009a5d <malloc>
c000b311:	83 c4 10             	add    esp,0x10
c000b314:	89 c3                	mov    ebx,eax
c000b316:	83 ec 08             	sub    esp,0x8
c000b319:	68 03 ff ff 0f       	push   0xfffff03
c000b31e:	53                   	push   ebx
c000b31f:	e8 2c 01 00 00       	call   c000b450 <ReservedFilename::ReservedFilename(int)>
c000b324:	83 c4 10             	add    esp,0x10
c000b327:	89 1d ac 63 02 c0    	mov    DWORD PTR ds:0xc00263ac,ebx
c000b32d:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b335:	83 ec 0c             	sub    esp,0xc
c000b338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b33c:	e8 1c e7 ff ff       	call   c0009a5d <malloc>
c000b341:	83 c4 10             	add    esp,0x10
c000b344:	89 c3                	mov    ebx,eax
c000b346:	83 ec 08             	sub    esp,0x8
c000b349:	68 01 ff ff 0f       	push   0xfffff01
c000b34e:	53                   	push   ebx
c000b34f:	e8 fc 00 00 00       	call   c000b450 <ReservedFilename::ReservedFilename(int)>
c000b354:	83 c4 10             	add    esp,0x10
c000b357:	89 1d b0 63 02 c0    	mov    DWORD PTR ds:0xc00263b0,ebx
c000b35d:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b365:	83 ec 0c             	sub    esp,0xc
c000b368:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b36c:	e8 ec e6 ff ff       	call   c0009a5d <malloc>
c000b371:	83 c4 10             	add    esp,0x10
c000b374:	89 c3                	mov    ebx,eax
c000b376:	83 ec 08             	sub    esp,0x8
c000b379:	68 00 ff ff 0f       	push   0xfffff00
c000b37e:	53                   	push   ebx
c000b37f:	e8 cc 00 00 00       	call   c000b450 <ReservedFilename::ReservedFilename(int)>
c000b384:	83 c4 10             	add    esp,0x10
c000b387:	89 1d a4 63 02 c0    	mov    DWORD PTR ds:0xc00263a4,ebx
c000b38d:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b395:	83 ec 0c             	sub    esp,0xc
c000b398:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b39c:	e8 bc e6 ff ff       	call   c0009a5d <malloc>
c000b3a1:	83 c4 10             	add    esp,0x10
c000b3a4:	89 c3                	mov    ebx,eax
c000b3a6:	83 ec 08             	sub    esp,0x8
c000b3a9:	68 02 ff ff 0f       	push   0xfffff02
c000b3ae:	53                   	push   ebx
c000b3af:	e8 9c 00 00 00       	call   c000b450 <ReservedFilename::ReservedFilename(int)>
c000b3b4:	83 c4 10             	add    esp,0x10
c000b3b7:	89 1d a8 63 02 c0    	mov    DWORD PTR ds:0xc00263a8,ebx
c000b3bd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b3c5:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b3ca:	7f 7e                	jg     c000b44a <UnixFile::UnixFile(int)+0x1aa>
c000b3cc:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b3d4:	83 ec 0c             	sub    esp,0xc
c000b3d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3db:	e8 7d e6 ff ff       	call   c0009a5d <malloc>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 c3                	mov    ebx,eax
c000b3e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3e9:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b3ee:	83 ec 08             	sub    esp,0x8
c000b3f1:	50                   	push   eax
c000b3f2:	53                   	push   ebx
c000b3f3:	e8 58 00 00 00       	call   c000b450 <ReservedFilename::ReservedFilename(int)>
c000b3f8:	83 c4 10             	add    esp,0x10
c000b3fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3ff:	89 1c 85 80 63 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9c80],ebx
c000b406:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b40e:	83 ec 0c             	sub    esp,0xc
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	e8 43 e6 ff ff       	call   c0009a5d <malloc>
c000b41a:	83 c4 10             	add    esp,0x10
c000b41d:	89 c3                	mov    ebx,eax
c000b41f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b423:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b428:	83 ec 08             	sub    esp,0x8
c000b42b:	50                   	push   eax
c000b42c:	53                   	push   ebx
c000b42d:	e8 1e 00 00 00       	call   c000b450 <ReservedFilename::ReservedFilename(int)>
c000b432:	83 c4 10             	add    esp,0x10
c000b435:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b439:	89 1c 85 40 63 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9cc0],ebx
c000b440:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b444:	e9 7c ff ff ff       	jmp    c000b3c5 <UnixFile::UnixFile(int)+0x125>
c000b449:	90                   	nop
c000b44a:	83 c4 28             	add    esp,0x28
c000b44d:	5b                   	pop    ebx
c000b44e:	c3                   	ret    
c000b44f:	90                   	nop

c000b450 <ReservedFilename::ReservedFilename(int)>:
c000b450:	83 ec 0c             	sub    esp,0xc
c000b453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b457:	83 ec 08             	sub    esp,0x8
c000b45a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45e:	50                   	push   eax
c000b45f:	e8 3c fe ff ff       	call   c000b2a0 <UnixFile::UnixFile(int)>
c000b464:	83 c4 10             	add    esp,0x10
c000b467:	ba dc 29 02 c0       	mov    edx,0xc00229dc
c000b46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b470:	89 10                	mov    DWORD PTR [eax],edx
c000b472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b476:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b47a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b47d:	90                   	nop
c000b47e:	83 c4 0c             	add    esp,0xc
c000b481:	c3                   	ret    

c000b482 <UnixFile::~UnixFile()>:
c000b482:	83 ec 1c             	sub    esp,0x1c
c000b485:	ba c0 29 02 c0       	mov    edx,0xc00229c0
c000b48a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b48e:	89 10                	mov    DWORD PTR [eax],edx
c000b490:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b494:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b497:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b49c:	7f 73                	jg     c000b511 <UnixFile::~UnixFile()+0x8f>
c000b49e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b4a6:	83 ec 0c             	sub    esp,0xc
c000b4a9:	68 b8 63 02 c0       	push   0xc00263b8
c000b4ae:	e8 0d 5d 01 00       	call   c00211c0 <LinkedList<UnixFile>::getFirstElement()>
c000b4b3:	83 c4 10             	add    esp,0x10
c000b4b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4ba:	83 ec 0c             	sub    esp,0xc
c000b4bd:	68 b8 63 02 c0       	push   0xc00263b8
c000b4c2:	e8 01 5d 01 00       	call   c00211c8 <LinkedList<UnixFile>::removeFirst()>
c000b4c7:	83 c4 10             	add    esp,0x10
c000b4ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4ce:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b4d2:	74 40                	je     c000b514 <UnixFile::~UnixFile()+0x92>
c000b4d4:	83 ec 08             	sub    esp,0x8
c000b4d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b4db:	68 b8 63 02 c0       	push   0xc00263b8
c000b4e0:	e8 07 5c 01 00       	call   c00210ec <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b4e5:	83 c4 10             	add    esp,0x10
c000b4e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b4ec:	8d 50 01             	lea    edx,[eax+0x1]
c000b4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4f3:	3d 88 13 00 00       	cmp    eax,0x1388
c000b4f8:	0f 94 c0             	sete   al
c000b4fb:	84 c0                	test   al,al
c000b4fd:	74 a7                	je     c000b4a6 <UnixFile::~UnixFile()+0x24>
c000b4ff:	83 ec 0c             	sub    esp,0xc
c000b502:	68 98 29 02 c0       	push   0xc0022998
c000b507:	e8 71 8f 00 00       	call   c001447d <Krnl::panic(char const*)>
c000b50c:	83 c4 10             	add    esp,0x10
c000b50f:	eb 95                	jmp    c000b4a6 <UnixFile::~UnixFile()+0x24>
c000b511:	90                   	nop
c000b512:	eb 01                	jmp    c000b515 <UnixFile::~UnixFile()+0x93>
c000b514:	90                   	nop
c000b515:	90                   	nop
c000b516:	83 c4 1c             	add    esp,0x1c
c000b519:	c3                   	ret    

c000b51a <UnixFile::~UnixFile()>:
c000b51a:	83 ec 0c             	sub    esp,0xc
c000b51d:	83 ec 0c             	sub    esp,0xc
c000b520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b524:	e8 59 ff ff ff       	call   c000b482 <UnixFile::~UnixFile()>
c000b529:	83 c4 10             	add    esp,0x10
c000b52c:	83 ec 08             	sub    esp,0x8
c000b52f:	6a 0c                	push   0xc
c000b531:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b535:	e8 a3 14 00 00       	call   c000c9dd <operator delete(void*, unsigned long)>
c000b53a:	83 c4 10             	add    esp,0x10
c000b53d:	83 c4 0c             	add    esp,0xc
c000b540:	c3                   	ret    
c000b541:	90                   	nop

c000b542 <ReservedFilename::~ReservedFilename()>:
c000b542:	83 ec 0c             	sub    esp,0xc
c000b545:	ba dc 29 02 c0       	mov    edx,0xc00229dc
c000b54a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b54e:	89 10                	mov    DWORD PTR [eax],edx
c000b550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b554:	83 ec 0c             	sub    esp,0xc
c000b557:	50                   	push   eax
c000b558:	e8 25 ff ff ff       	call   c000b482 <UnixFile::~UnixFile()>
c000b55d:	83 c4 10             	add    esp,0x10
c000b560:	90                   	nop
c000b561:	83 c4 0c             	add    esp,0xc
c000b564:	c3                   	ret    
c000b565:	90                   	nop

c000b566 <ReservedFilename::~ReservedFilename()>:
c000b566:	83 ec 0c             	sub    esp,0xc
c000b569:	83 ec 0c             	sub    esp,0xc
c000b56c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b570:	e8 cd ff ff ff       	call   c000b542 <ReservedFilename::~ReservedFilename()>
c000b575:	83 c4 10             	add    esp,0x10
c000b578:	83 ec 08             	sub    esp,0x8
c000b57b:	6a 0c                	push   0xc
c000b57d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b581:	e8 57 14 00 00       	call   c000c9dd <operator delete(void*, unsigned long)>
c000b586:	83 c4 10             	add    esp,0x10
c000b589:	83 c4 0c             	add    esp,0xc
c000b58c:	c3                   	ret    

c000b58d <getFromFileDescriptor(int)>:
c000b58d:	53                   	push   ebx
c000b58e:	83 ec 08             	sub    esp,0x8
c000b591:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b595:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b59b:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b5a1:	7f 2c                	jg     c000b5cf <getFromFileDescriptor(int)+0x42>
c000b5a3:	83 ec 0c             	sub    esp,0xc
c000b5a6:	68 b8 63 02 c0       	push   0xc00263b8
c000b5ab:	e8 10 5c 01 00       	call   c00211c0 <LinkedList<UnixFile>::getFirstElement()>
c000b5b0:	83 c4 10             	add    esp,0x10
c000b5b3:	85 c0                	test   eax,eax
c000b5b5:	75 04                	jne    c000b5bb <getFromFileDescriptor(int)+0x2e>
c000b5b7:	31 c0                	xor    eax,eax
c000b5b9:	eb 6e                	jmp    c000b629 <getFromFileDescriptor(int)+0x9c>
c000b5bb:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b5be:	74 69                	je     c000b629 <getFromFileDescriptor(int)+0x9c>
c000b5c0:	52                   	push   edx
c000b5c1:	52                   	push   edx
c000b5c2:	50                   	push   eax
c000b5c3:	68 b8 63 02 c0       	push   0xc00263b8
c000b5c8:	e8 9d 5c 01 00       	call   c002126a <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b5cd:	eb e1                	jmp    c000b5b0 <getFromFileDescriptor(int)+0x23>
c000b5cf:	a1 ac 63 02 c0       	mov    eax,ds:0xc00263ac
c000b5d4:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b5da:	74 4d                	je     c000b629 <getFromFileDescriptor(int)+0x9c>
c000b5dc:	a1 b0 63 02 c0       	mov    eax,ds:0xc00263b0
c000b5e1:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b5e7:	74 40                	je     c000b629 <getFromFileDescriptor(int)+0x9c>
c000b5e9:	a1 a8 63 02 c0       	mov    eax,ds:0xc00263a8
c000b5ee:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b5f4:	74 33                	je     c000b629 <getFromFileDescriptor(int)+0x9c>
c000b5f6:	a1 a4 63 02 c0       	mov    eax,ds:0xc00263a4
c000b5fb:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b601:	74 26                	je     c000b629 <getFromFileDescriptor(int)+0x9c>
c000b603:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b609:	83 f8 08             	cmp    eax,0x8
c000b60c:	77 09                	ja     c000b617 <getFromFileDescriptor(int)+0x8a>
c000b60e:	8b 04 85 80 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9c80]
c000b615:	eb 12                	jmp    c000b629 <getFromFileDescriptor(int)+0x9c>
c000b617:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b61d:	83 fb 08             	cmp    ebx,0x8
c000b620:	77 95                	ja     c000b5b7 <getFromFileDescriptor(int)+0x2a>
c000b622:	8b 04 9d 40 63 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9cc0]
c000b629:	83 c4 08             	add    esp,0x8
c000b62c:	5b                   	pop    ebx
c000b62d:	c3                   	ret    

c000b62e <__static_initialization_and_destruction_0(int, int)>:
c000b62e:	83 ec 0c             	sub    esp,0xc
c000b631:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b636:	75 34                	jne    c000b66c <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b638:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b640:	75 2a                	jne    c000b66c <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b642:	83 ec 0c             	sub    esp,0xc
c000b645:	68 b8 63 02 c0       	push   0xc00263b8
c000b64a:	e8 5b 5a 01 00       	call   c00210aa <LinkedList<UnixFile>::LinkedList()>
c000b64f:	83 c4 10             	add    esp,0x10
c000b652:	83 ec 04             	sub    esp,0x4
c000b655:	68 cc 54 02 c0       	push   0xc00254cc
c000b65a:	68 b8 63 02 c0       	push   0xc00263b8
c000b65f:	68 a8 10 02 c0       	push   0xc00210a8
c000b664:	e8 ee 12 00 00       	call   c000c957 <__cxa_atexit>
c000b669:	83 c4 10             	add    esp,0x10
c000b66c:	90                   	nop
c000b66d:	83 c4 0c             	add    esp,0xc
c000b670:	c3                   	ret    

c000b671 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b671:	83 ec 0c             	sub    esp,0xc
c000b674:	83 ec 08             	sub    esp,0x8
c000b677:	68 ff ff 00 00       	push   0xffff
c000b67c:	6a 01                	push   0x1
c000b67e:	e8 ab ff ff ff       	call   c000b62e <__static_initialization_and_destruction_0(int, int)>
c000b683:	83 c4 10             	add    esp,0x10
c000b686:	83 c4 0c             	add    esp,0xc
c000b689:	c3                   	ret    

c000b68a <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b68a:	53                   	push   ebx
c000b68b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b68f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b693:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b699:	89 c8                	mov    eax,ecx
c000b69b:	d1 e8                	shr    eax,1
c000b69d:	03 05 a8 56 02 c0    	add    eax,DWORD PTR ds:0xc00256a8
c000b6a3:	83 e1 01             	and    ecx,0x1
c000b6a6:	8a 10                	mov    dl,BYTE PTR [eax]
c000b6a8:	75 09                	jne    c000b6b3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b6aa:	83 e2 f0             	and    edx,0xfffffff0
c000b6ad:	09 da                	or     edx,ebx
c000b6af:	88 10                	mov    BYTE PTR [eax],dl
c000b6b1:	5b                   	pop    ebx
c000b6b2:	c3                   	ret    
c000b6b3:	c1 e3 04             	shl    ebx,0x4
c000b6b6:	83 e2 0f             	and    edx,0xf
c000b6b9:	09 da                	or     edx,ebx
c000b6bb:	88 10                	mov    BYTE PTR [eax],dl
c000b6bd:	5b                   	pop    ebx
c000b6be:	c3                   	ret    

c000b6bf <Virt::getPageState(unsigned long)>:
c000b6bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6c3:	8b 0d a8 56 02 c0    	mov    ecx,DWORD PTR ds:0xc00256a8
c000b6c9:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b6cf:	89 d0                	mov    eax,edx
c000b6d1:	d1 e8                	shr    eax,1
c000b6d3:	83 e2 01             	and    edx,0x1
c000b6d6:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b6d9:	75 04                	jne    c000b6df <Virt::getPageState(unsigned long)+0x20>
c000b6db:	83 e0 0f             	and    eax,0xf
c000b6de:	c3                   	ret    
c000b6df:	c0 e8 04             	shr    al,0x4
c000b6e2:	c3                   	ret    

c000b6e3 <Virt::allocateKernelVirtualPages(int)>:
c000b6e3:	55                   	push   ebp
c000b6e4:	31 ed                	xor    ebp,ebp
c000b6e6:	57                   	push   edi
c000b6e7:	56                   	push   esi
c000b6e8:	53                   	push   ebx
c000b6e9:	31 db                	xor    ebx,ebx
c000b6eb:	83 ec 1c             	sub    esp,0x1c
c000b6ee:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b6f2:	8b 3d a4 56 02 c0    	mov    edi,DWORD PTR ds:0xc00256a4
c000b6f8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b6fd:	57                   	push   edi
c000b6fe:	e8 bc ff ff ff       	call   c000b6bf <Virt::getPageState(unsigned long)>
c000b703:	5a                   	pop    edx
c000b704:	84 c0                	test   al,al
c000b706:	75 3a                	jne    c000b742 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b708:	85 db                	test   ebx,ebx
c000b70a:	75 02                	jne    c000b70e <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b70c:	89 fd                	mov    ebp,edi
c000b70e:	43                   	inc    ebx
c000b70f:	39 f3                	cmp    ebx,esi
c000b711:	74 5a                	je     c000b76d <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b713:	47                   	inc    edi
c000b714:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b71a:	76 31                	jbe    c000b74d <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b71c:	c7 05 a4 56 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00256a4,0xc8000
c000b726:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b72b:	75 28                	jne    c000b755 <Virt::allocateKernelVirtualPages(int)+0x72>
c000b72d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b732:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b737:	57                   	push   edi
c000b738:	e8 82 ff ff ff       	call   c000b6bf <Virt::getPageState(unsigned long)>
c000b73d:	5a                   	pop    edx
c000b73e:	84 c0                	test   al,al
c000b740:	74 c6                	je     c000b708 <Virt::allocateKernelVirtualPages(int)+0x25>
c000b742:	31 db                	xor    ebx,ebx
c000b744:	47                   	inc    edi
c000b745:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b74b:	77 cf                	ja     c000b71c <Virt::allocateKernelVirtualPages(int)+0x39>
c000b74d:	89 3d a4 56 02 c0    	mov    DWORD PTR ds:0xc00256a4,edi
c000b753:	eb a8                	jmp    c000b6fd <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b755:	83 ec 0c             	sub    esp,0xc
c000b758:	68 f0 29 02 c0       	push   0xc00229f0
c000b75d:	e8 1b 8d 00 00       	call   c001447d <Krnl::panic(char const*)>
c000b762:	8b 3d a4 56 02 c0    	mov    edi,DWORD PTR ds:0xc00256a4
c000b768:	83 c4 10             	add    esp,0x10
c000b76b:	eb 90                	jmp    c000b6fd <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b76d:	89 2d a4 56 02 c0    	mov    DWORD PTR ds:0xc00256a4,ebp
c000b773:	4b                   	dec    ebx
c000b774:	74 5f                	je     c000b7d5 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b776:	85 f6                	test   esi,esi
c000b778:	74 3d                	je     c000b7b7 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b77a:	89 e8                	mov    eax,ebp
c000b77c:	31 db                	xor    ebx,ebx
c000b77e:	8d 7e ff             	lea    edi,[esi-0x1]
c000b781:	eb 14                	jmp    c000b797 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b783:	6a 01                	push   0x1
c000b785:	43                   	inc    ebx
c000b786:	50                   	push   eax
c000b787:	e8 fe fe ff ff       	call   c000b68a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b78c:	58                   	pop    eax
c000b78d:	39 f3                	cmp    ebx,esi
c000b78f:	5a                   	pop    edx
c000b790:	74 25                	je     c000b7b7 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b792:	a1 a4 56 02 c0       	mov    eax,ds:0xc00256a4
c000b797:	8d 50 01             	lea    edx,[eax+0x1]
c000b79a:	85 db                	test   ebx,ebx
c000b79c:	89 15 a4 56 02 c0    	mov    DWORD PTR ds:0xc00256a4,edx
c000b7a2:	74 20                	je     c000b7c4 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b7a4:	39 df                	cmp    edi,ebx
c000b7a6:	75 db                	jne    c000b783 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b7a8:	6a 03                	push   0x3
c000b7aa:	43                   	inc    ebx
c000b7ab:	50                   	push   eax
c000b7ac:	e8 d9 fe ff ff       	call   c000b68a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7b1:	59                   	pop    ecx
c000b7b2:	39 f3                	cmp    ebx,esi
c000b7b4:	58                   	pop    eax
c000b7b5:	75 db                	jne    c000b792 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b7b7:	83 c4 1c             	add    esp,0x1c
c000b7ba:	89 e8                	mov    eax,ebp
c000b7bc:	5b                   	pop    ebx
c000b7bd:	c1 e0 0c             	shl    eax,0xc
c000b7c0:	5e                   	pop    esi
c000b7c1:	5f                   	pop    edi
c000b7c2:	5d                   	pop    ebp
c000b7c3:	c3                   	ret    
c000b7c4:	6a 02                	push   0x2
c000b7c6:	bb 01 00 00 00       	mov    ebx,0x1
c000b7cb:	50                   	push   eax
c000b7cc:	e8 b9 fe ff ff       	call   c000b68a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7d1:	58                   	pop    eax
c000b7d2:	5a                   	pop    edx
c000b7d3:	eb bd                	jmp    c000b792 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b7d5:	6a 04                	push   0x4
c000b7d7:	8d 45 01             	lea    eax,[ebp+0x1]
c000b7da:	55                   	push   ebp
c000b7db:	a3 a4 56 02 c0       	mov    ds:0xc00256a4,eax
c000b7e0:	e8 a5 fe ff ff       	call   c000b68a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7e5:	59                   	pop    ecx
c000b7e6:	89 e8                	mov    eax,ebp
c000b7e8:	5b                   	pop    ebx
c000b7e9:	c1 e0 0c             	shl    eax,0xc
c000b7ec:	83 c4 1c             	add    esp,0x1c
c000b7ef:	5b                   	pop    ebx
c000b7f0:	5e                   	pop    esi
c000b7f1:	5f                   	pop    edi
c000b7f2:	5d                   	pop    ebp
c000b7f3:	c3                   	ret    

c000b7f4 <Virt::freeSwapfilePage(unsigned long)>:
c000b7f4:	53                   	push   ebx
c000b7f5:	8b 15 cc 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263cc
c000b7fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b7ff:	b8 01 00 00 00       	mov    eax,0x1
c000b804:	89 cb                	mov    ebx,ecx
c000b806:	d3 e0                	shl    eax,cl
c000b808:	c1 eb 05             	shr    ebx,0x5
c000b80b:	f7 d0                	not    eax
c000b80d:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000b810:	5b                   	pop    ebx
c000b811:	c3                   	ret    

c000b812 <Virt::swapIDToSector(unsigned long)>:
c000b812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b816:	0f af 05 ac 56 02 c0 	imul   eax,DWORD PTR ds:0xc00256ac
c000b81d:	03 05 b4 56 02 c0    	add    eax,DWORD PTR ds:0xc00256b4
c000b823:	c3                   	ret    

c000b824 <Virt::allocateSwapfilePage()>:
c000b824:	55                   	push   ebp
c000b825:	31 d2                	xor    edx,edx
c000b827:	57                   	push   edi
c000b828:	56                   	push   esi
c000b829:	53                   	push   ebx
c000b82a:	83 ec 0c             	sub    esp,0xc
c000b82d:	8b 0d ac 56 02 c0    	mov    ecx,DWORD PTR ds:0xc00256ac
c000b833:	a1 b0 56 02 c0       	mov    eax,ds:0xc00256b0
c000b838:	f7 f1                	div    ecx
c000b83a:	39 0d b0 56 02 c0    	cmp    DWORD PTR ds:0xc00256b0,ecx
c000b840:	72 2d                	jb     c000b86f <Virt::allocateSwapfilePage()+0x4b>
c000b842:	8b 35 cc 63 02 c0    	mov    esi,DWORD PTR ds:0xc00263cc
c000b848:	8b 16                	mov    edx,DWORD PTR [esi]
c000b84a:	f6 c2 01             	test   dl,0x1
c000b84d:	74 3c                	je     c000b88b <Virt::allocateSwapfilePage()+0x67>
c000b84f:	31 c9                	xor    ecx,ecx
c000b851:	bf 01 00 00 00       	mov    edi,0x1
c000b856:	eb 12                	jmp    c000b86a <Virt::allocateSwapfilePage()+0x46>
c000b858:	89 fd                	mov    ebp,edi
c000b85a:	89 ca                	mov    edx,ecx
c000b85c:	d3 e5                	shl    ebp,cl
c000b85e:	c1 ea 05             	shr    edx,0x5
c000b861:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000b864:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b866:	85 ea                	test   edx,ebp
c000b868:	74 2a                	je     c000b894 <Virt::allocateSwapfilePage()+0x70>
c000b86a:	41                   	inc    ecx
c000b86b:	39 c8                	cmp    eax,ecx
c000b86d:	77 e9                	ja     c000b858 <Virt::allocateSwapfilePage()+0x34>
c000b86f:	83 ec 0c             	sub    esp,0xc
c000b872:	68 d0 2b 02 c0       	push   0xc0022bd0
c000b877:	e8 01 8c 00 00       	call   c001447d <Krnl::panic(char const*)>
c000b87c:	83 c4 10             	add    esp,0x10
c000b87f:	31 c9                	xor    ecx,ecx
c000b881:	83 c4 0c             	add    esp,0xc
c000b884:	89 c8                	mov    eax,ecx
c000b886:	5b                   	pop    ebx
c000b887:	5e                   	pop    esi
c000b888:	5f                   	pop    edi
c000b889:	5d                   	pop    ebp
c000b88a:	c3                   	ret    
c000b88b:	89 f3                	mov    ebx,esi
c000b88d:	bd 01 00 00 00       	mov    ebp,0x1
c000b892:	31 c9                	xor    ecx,ecx
c000b894:	09 ea                	or     edx,ebp
c000b896:	89 c8                	mov    eax,ecx
c000b898:	89 13                	mov    DWORD PTR [ebx],edx
c000b89a:	83 c4 0c             	add    esp,0xc
c000b89d:	5b                   	pop    ebx
c000b89e:	5e                   	pop    esi
c000b89f:	5f                   	pop    edi
c000b8a0:	5d                   	pop    ebp
c000b8a1:	c3                   	ret    

c000b8a2 <Virt::virtualMemorySetup()>:
c000b8a2:	53                   	push   ebx
c000b8a3:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b8a8:	6a 0f                	push   0xf
c000b8aa:	53                   	push   ebx
c000b8ab:	43                   	inc    ebx
c000b8ac:	e8 d9 fd ff ff       	call   c000b68a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b8b1:	58                   	pop    eax
c000b8b2:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b8b8:	5a                   	pop    edx
c000b8b9:	75 ed                	jne    c000b8a8 <Virt::virtualMemorySetup()+0x6>
c000b8bb:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b8c0:	6a 00                	push   0x0
c000b8c2:	53                   	push   ebx
c000b8c3:	43                   	inc    ebx
c000b8c4:	e8 c1 fd ff ff       	call   c000b68a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b8c9:	59                   	pop    ecx
c000b8ca:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b8d0:	58                   	pop    eax
c000b8d1:	75 ed                	jne    c000b8c0 <Virt::virtualMemorySetup()+0x1e>
c000b8d3:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000b8d8:	6a 0f                	push   0xf
c000b8da:	53                   	push   ebx
c000b8db:	43                   	inc    ebx
c000b8dc:	e8 a9 fd ff ff       	call   c000b68a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b8e1:	58                   	pop    eax
c000b8e2:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000b8e8:	5a                   	pop    edx
c000b8e9:	75 ed                	jne    c000b8d8 <Virt::virtualMemorySetup()+0x36>
c000b8eb:	5b                   	pop    ebx
c000b8ec:	c3                   	ret    

c000b8ed <Virt::setupPageSwapping(int)>:
c000b8ed:	53                   	push   ebx
c000b8ee:	83 ec 0c             	sub    esp,0xc
c000b8f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b8f5:	a1 68 68 02 c0       	mov    eax,ds:0xc0026868
c000b8fa:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b900:	8b 10                	mov    edx,DWORD PTR [eax]
c000b902:	53                   	push   ebx
c000b903:	c1 e3 0b             	shl    ebx,0xb
c000b906:	68 e7 2b 02 c0       	push   0xc0022be7
c000b90b:	50                   	push   eax
c000b90c:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000b90f:	89 1d b0 56 02 c0    	mov    DWORD PTR ds:0xc00256b0,ebx
c000b915:	c6 05 b8 56 02 c0 43 	mov    BYTE PTR ds:0xc00256b8,0x43
c000b91c:	c1 eb 08             	shr    ebx,0x8
c000b91f:	a3 b4 56 02 c0       	mov    ds:0xc00256b4,eax
c000b924:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b927:	c7 05 ac 56 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00256ac,0x8
c000b931:	e8 27 e1 ff ff       	call   c0009a5d <malloc>
c000b936:	83 c4 0c             	add    esp,0xc
c000b939:	89 c1                	mov    ecx,eax
c000b93b:	a3 cc 63 02 c0       	mov    ds:0xc00263cc,eax
c000b940:	31 d2                	xor    edx,edx
c000b942:	a1 b0 56 02 c0       	mov    eax,ds:0xc00256b0
c000b947:	f7 35 ac 56 02 c0    	div    DWORD PTR ds:0xc00256ac
c000b94d:	c1 e8 05             	shr    eax,0x5
c000b950:	50                   	push   eax
c000b951:	6a 00                	push   0x0
c000b953:	51                   	push   ecx
c000b954:	e8 f7 4d ff ff       	call   c0000750 <memset>
c000b959:	83 c4 18             	add    esp,0x18
c000b95c:	5b                   	pop    ebx
c000b95d:	c3                   	ret    

c000b95e <VAS::VAS()>:
c000b95e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b962:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b969:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b96d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b978:	a3 d0 63 02 c0       	mov    ds:0xc00263d0,eax
c000b97d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b981:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000b985:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b989:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000b98c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b990:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000b997:	90                   	nop
c000b998:	c3                   	ret    
c000b999:	90                   	nop

c000b99a <VAS::VAS(VAS*)>:
c000b99a:	83 ec 0c             	sub    esp,0xc
c000b99d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9ac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b9b3:	83 ec 0c             	sub    esp,0xc
c000b9b6:	68 10 2a 02 c0       	push   0xc0022a10
c000b9bb:	e8 bd 8a 00 00       	call   c001447d <Krnl::panic(char const*)>
c000b9c0:	83 c4 10             	add    esp,0x10
c000b9c3:	90                   	nop
c000b9c4:	83 c4 0c             	add    esp,0xc
c000b9c7:	c3                   	ret    

c000b9c8 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000b9c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9cc:	89 c2                	mov    edx,eax
c000b9ce:	c1 e8 0a             	shr    eax,0xa
c000b9d1:	c1 ea 16             	shr    edx,0x16
c000b9d4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000b9d9:	19 c9                	sbb    ecx,ecx
c000b9db:	c1 e2 0c             	shl    edx,0xc
c000b9de:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000b9e4:	25 fc 0f 00 00       	and    eax,0xffc
c000b9e9:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000b9f0:	01 d0                	add    eax,edx
c000b9f2:	c3                   	ret    
c000b9f3:	90                   	nop

c000b9f4 <VAS::getPageTableEntry(unsigned long)>:
c000b9f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b9f8:	89 ca                	mov    edx,ecx
c000b9fa:	c1 e9 0a             	shr    ecx,0xa
c000b9fd:	c1 ea 16             	shr    edx,0x16
c000ba00:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000ba06:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000ba0c:	c1 e0 0c             	shl    eax,0xc
c000ba0f:	8d 04 08             	lea    eax,[eax+ecx*1]
c000ba12:	c3                   	ret    

c000ba13 <Virt::freeKernelVirtualPages(unsigned long)>:
c000ba13:	57                   	push   edi
c000ba14:	56                   	push   esi
c000ba15:	be 01 00 00 00       	mov    esi,0x1
c000ba1a:	53                   	push   ebx
c000ba1b:	83 ec 10             	sub    esp,0x10
c000ba1e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba22:	c1 eb 0c             	shr    ebx,0xc
c000ba25:	eb 3f                	jmp    c000ba66 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000ba27:	83 ec 08             	sub    esp,0x8
c000ba2a:	57                   	push   edi
c000ba2b:	ff 35 d0 63 02 c0    	push   DWORD PTR ds:0xc00263d0
c000ba31:	e8 be ff ff ff       	call   c000b9f4 <VAS::getPageTableEntry(unsigned long)>
c000ba36:	83 c4 10             	add    esp,0x10
c000ba39:	8b 00                	mov    eax,DWORD PTR [eax]
c000ba3b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ba3f:	f6 c4 04             	test   ah,0x4
c000ba42:	75 5f                	jne    c000baa3 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000ba44:	80 fa 04             	cmp    dl,0x4
c000ba47:	74 78                	je     c000bac1 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000ba49:	80 fa 02             	cmp    dl,0x2
c000ba4c:	0f 84 88 00 00 00    	je     c000bada <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000ba52:	80 fa 03             	cmp    dl,0x3
c000ba55:	0f 84 ad 00 00 00    	je     c000bb08 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000ba5b:	fe ca                	dec    dl
c000ba5d:	0f 84 92 00 00 00    	je     c000baf5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000ba63:	43                   	inc    ebx
c000ba64:	31 f6                	xor    esi,esi
c000ba66:	53                   	push   ebx
c000ba67:	89 df                	mov    edi,ebx
c000ba69:	e8 51 fc ff ff       	call   c000b6bf <Virt::getPageState(unsigned long)>
c000ba6e:	c1 e7 0c             	shl    edi,0xc
c000ba71:	59                   	pop    ecx
c000ba72:	84 c0                	test   al,al
c000ba74:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ba78:	75 ad                	jne    c000ba27 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000ba7a:	83 ec 0c             	sub    esp,0xc
c000ba7d:	68 fe 2b 02 c0       	push   0xc0022bfe
c000ba82:	e8 f6 89 00 00       	call   c001447d <Krnl::panic(char const*)>
c000ba87:	58                   	pop    eax
c000ba88:	5a                   	pop    edx
c000ba89:	57                   	push   edi
c000ba8a:	ff 35 d0 63 02 c0    	push   DWORD PTR ds:0xc00263d0
c000ba90:	e8 5f ff ff ff       	call   c000b9f4 <VAS::getPageTableEntry(unsigned long)>
c000ba95:	83 c4 10             	add    esp,0x10
c000ba98:	8b 00                	mov    eax,DWORD PTR [eax]
c000ba9a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ba9e:	f6 c4 04             	test   ah,0x4
c000baa1:	74 c0                	je     c000ba63 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000baa3:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000baa7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000baac:	83 ec 0c             	sub    esp,0xc
c000baaf:	50                   	push   eax
c000bab0:	e8 33 e3 ff ff       	call   c0009de8 <Phys::freePage(unsigned long)>
c000bab5:	83 c4 10             	add    esp,0x10
c000bab8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000babc:	80 fa 04             	cmp    dl,0x4
c000babf:	75 88                	jne    c000ba49 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000bac1:	89 f0                	mov    eax,esi
c000bac3:	84 c0                	test   al,al
c000bac5:	75 47                	jne    c000bb0e <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000bac7:	c7 44 24 20 34 2a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022a34
c000bacf:	83 c4 10             	add    esp,0x10
c000bad2:	5b                   	pop    ebx
c000bad3:	5e                   	pop    esi
c000bad4:	5f                   	pop    edi
c000bad5:	e9 a3 89 00 00       	jmp    c001447d <Krnl::panic(char const*)>
c000bada:	89 f0                	mov    eax,esi
c000badc:	84 c0                	test   al,al
c000bade:	75 15                	jne    c000baf5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bae0:	83 ec 0c             	sub    esp,0xc
c000bae3:	68 1a 2c 02 c0       	push   0xc0022c1a
c000bae8:	e8 90 89 00 00       	call   c001447d <Krnl::panic(char const*)>
c000baed:	83 c4 10             	add    esp,0x10
c000baf0:	e9 6e ff ff ff       	jmp    c000ba63 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000baf5:	83 ec 08             	sub    esp,0x8
c000baf8:	6a 00                	push   0x0
c000bafa:	53                   	push   ebx
c000bafb:	e8 8a fb ff ff       	call   c000b68a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb00:	83 c4 10             	add    esp,0x10
c000bb03:	e9 5b ff ff ff       	jmp    c000ba63 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bb08:	89 f0                	mov    eax,esi
c000bb0a:	84 c0                	test   al,al
c000bb0c:	75 15                	jne    c000bb23 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000bb0e:	83 ec 08             	sub    esp,0x8
c000bb11:	6a 00                	push   0x0
c000bb13:	53                   	push   ebx
c000bb14:	e8 71 fb ff ff       	call   c000b68a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb19:	83 c4 10             	add    esp,0x10
c000bb1c:	83 c4 10             	add    esp,0x10
c000bb1f:	5b                   	pop    ebx
c000bb20:	5e                   	pop    esi
c000bb21:	5f                   	pop    edi
c000bb22:	c3                   	ret    
c000bb23:	c7 44 24 20 36 2c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022c36
c000bb2b:	83 c4 10             	add    esp,0x10
c000bb2e:	5b                   	pop    ebx
c000bb2f:	5e                   	pop    esi
c000bb30:	5f                   	pop    edi
c000bb31:	e9 47 89 00 00       	jmp    c001447d <Krnl::panic(char const*)>

c000bb36 <VAS::freeAllocatedPages(unsigned long)>:
c000bb36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bb3e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000bb42:	74 09                	je     c000bb4d <VAS::freeAllocatedPages(unsigned long)+0x17>
c000bb44:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bb48:	e9 c6 fe ff ff       	jmp    c000ba13 <Virt::freeKernelVirtualPages(unsigned long)>
c000bb4d:	c7 44 24 04 58 2a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022a58
c000bb55:	e9 64 0f 00 00       	jmp    c000cabe <Dbg::kprintf(char const*, ...)>

c000bb5a <VAS::virtualToPhysical(unsigned long)>:
c000bb5a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bb5e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bb62:	e8 8d fe ff ff       	call   c000b9f4 <VAS::getPageTableEntry(unsigned long)>
c000bb67:	5a                   	pop    edx
c000bb68:	8b 00                	mov    eax,DWORD PTR [eax]
c000bb6a:	59                   	pop    ecx
c000bb6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb70:	c3                   	ret    
c000bb71:	90                   	nop

c000bb72 <VAS::reflagRange(unsigned long, int, int, int)>:
c000bb72:	55                   	push   ebp
c000bb73:	57                   	push   edi
c000bb74:	56                   	push   esi
c000bb75:	53                   	push   ebx
c000bb76:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb7a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000bb7e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb82:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bb86:	85 db                	test   ebx,ebx
c000bb88:	7e 22                	jle    c000bbac <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000bb8a:	c1 e3 0c             	shl    ebx,0xc
c000bb8d:	01 f3                	add    ebx,esi
c000bb8f:	56                   	push   esi
c000bb90:	81 c6 00 10 00 00    	add    esi,0x1000
c000bb96:	55                   	push   ebp
c000bb97:	e8 58 fe ff ff       	call   c000b9f4 <VAS::getPageTableEntry(unsigned long)>
c000bb9c:	5a                   	pop    edx
c000bb9d:	59                   	pop    ecx
c000bb9e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bba0:	21 f9                	and    ecx,edi
c000bba2:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000bba6:	39 f3                	cmp    ebx,esi
c000bba8:	89 08                	mov    DWORD PTR [eax],ecx
c000bbaa:	75 e3                	jne    c000bb8f <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000bbac:	5b                   	pop    ebx
c000bbad:	5e                   	pop    esi
c000bbae:	5f                   	pop    edi
c000bbaf:	5d                   	pop    ebp
c000bbb0:	c3                   	ret    
c000bbb1:	90                   	nop

c000bbb2 <VAS::setToWriteCombining(unsigned long, int)>:
c000bbb2:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000bbb7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bbbd:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000bbc4:	75 01                	jne    c000bbc7 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000bbc6:	c3                   	ret    
c000bbc7:	68 80 00 00 00       	push   0x80
c000bbcc:	6a ff                	push   0xffffffff
c000bbce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbda:	e8 93 ff ff ff       	call   c000bb72 <VAS::reflagRange(unsigned long, int, int, int)>
c000bbdf:	83 c4 14             	add    esp,0x14
c000bbe2:	c3                   	ret    
c000bbe3:	90                   	nop

c000bbe4 <VAS::mapOtherVASIn(bool, VAS*)>:
c000bbe4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bbe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bbed:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bbf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bbf4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bbf7:	19 c0                	sbb    eax,eax
c000bbf9:	83 ca 03             	or     edx,0x3
c000bbfc:	83 e0 fc             	and    eax,0xfffffffc
c000bbff:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000bc06:	0f 20 d8             	mov    eax,cr3
c000bc09:	0f 22 d8             	mov    cr3,eax
c000bc0c:	c3                   	ret    
c000bc0d:	90                   	nop

c000bc0e <VAS::~VAS()>:
c000bc0e:	83 ec 2c             	sub    esp,0x2c
c000bc11:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bc19:	fa                   	cli    
c000bc1a:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000bc1f:	40                   	inc    eax
c000bc20:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c000bc25:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bc2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc2c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000bc2f:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000bc35:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bc39:	6a 01                	push   0x1
c000bc3b:	50                   	push   eax
c000bc3c:	e8 a3 ff ff ff       	call   c000bbe4 <VAS::mapOtherVASIn(bool, VAS*)>
c000bc41:	83 c4 0c             	add    esp,0xc
c000bc44:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bc4c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bc54:	0f 8f d4 00 00 00    	jg     c000bd2e <VAS::~VAS()+0x120>
c000bc5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc5e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc61:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bc65:	c1 e2 02             	shl    edx,0x2
c000bc68:	01 d0                	add    eax,edx
c000bc6a:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc74:	83 e0 01             	and    eax,0x1
c000bc77:	0f 84 a8 00 00 00    	je     c000bd25 <VAS::~VAS()+0x117>
c000bc7d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bc85:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bc8d:	7f 72                	jg     c000bd01 <VAS::~VAS()+0xf3>
c000bc8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bc93:	c1 e0 0a             	shl    eax,0xa
c000bc96:	89 c2                	mov    edx,eax
c000bc98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bc9c:	01 d0                	add    eax,edx
c000bc9e:	c1 e0 0c             	shl    eax,0xc
c000bca1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bca5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bcaa:	8b 00                	mov    eax,DWORD PTR [eax]
c000bcac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000bcaf:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000bcb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bcb9:	6a 01                	push   0x1
c000bcbb:	50                   	push   eax
c000bcbc:	e8 07 fd ff ff       	call   c000b9c8 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bcc1:	83 c4 0c             	add    esp,0xc
c000bcc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bcc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bccc:	8b 00                	mov    eax,DWORD PTR [eax]
c000bcce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bcd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bcd6:	25 01 04 00 00       	and    eax,0x401
c000bcdb:	3d 01 04 00 00       	cmp    eax,0x401
c000bce0:	75 19                	jne    c000bcfb <VAS::~VAS()+0xed>
c000bce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bce6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bceb:	83 ec 0c             	sub    esp,0xc
c000bcee:	50                   	push   eax
c000bcef:	e8 f4 e0 ff ff       	call   c0009de8 <Phys::freePage(unsigned long)>
c000bcf4:	83 c4 10             	add    esp,0x10
c000bcf7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bcfb:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bcff:	eb 84                	jmp    c000bc85 <VAS::~VAS()+0x77>
c000bd01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd05:	25 00 04 00 00       	and    eax,0x400
c000bd0a:	74 19                	je     c000bd25 <VAS::~VAS()+0x117>
c000bd0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd10:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bd15:	83 ec 0c             	sub    esp,0xc
c000bd18:	50                   	push   eax
c000bd19:	e8 ca e0 ff ff       	call   c0009de8 <Phys::freePage(unsigned long)>
c000bd1e:	83 c4 10             	add    esp,0x10
c000bd21:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd25:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bd29:	e9 1e ff ff ff       	jmp    c000bc4c <VAS::~VAS()+0x3e>
c000bd2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd32:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bd35:	83 ec 0c             	sub    esp,0xc
c000bd38:	50                   	push   eax
c000bd39:	e8 d5 fc ff ff       	call   c000ba13 <Virt::freeKernelVirtualPages(unsigned long)>
c000bd3e:	83 c4 10             	add    esp,0x10
c000bd41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd45:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bd48:	83 ec 0c             	sub    esp,0xc
c000bd4b:	50                   	push   eax
c000bd4c:	e8 97 e0 ff ff       	call   c0009de8 <Phys::freePage(unsigned long)>
c000bd51:	83 c4 10             	add    esp,0x10
c000bd54:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bd5c:	c1 e0 02             	shl    eax,0x2
c000bd5f:	83 ec 08             	sub    esp,0x8
c000bd62:	50                   	push   eax
c000bd63:	68 7c 2a 02 c0       	push   0xc0022a7c
c000bd68:	e8 51 0d 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000bd6d:	83 c4 10             	add    esp,0x10
c000bd70:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000bd75:	48                   	dec    eax
c000bd76:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c000bd7b:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000bd80:	85 c0                	test   eax,eax
c000bd82:	75 01                	jne    c000bd85 <VAS::~VAS()+0x177>
c000bd84:	fb                   	sti    
c000bd85:	90                   	nop
c000bd86:	83 c4 2c             	add    esp,0x2c
c000bd89:	c3                   	ret    

c000bd8a <VAS::mapPage(unsigned long, unsigned long, int)>:
c000bd8a:	55                   	push   ebp
c000bd8b:	57                   	push   edi
c000bd8c:	56                   	push   esi
c000bd8d:	53                   	push   ebx
c000bd8e:	83 ec 1c             	sub    esp,0x1c
c000bd91:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bd95:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bd99:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000bd9f:	77 08                	ja     c000bda9 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000bda1:	0f 20 d8             	mov    eax,cr3
c000bda4:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000bda7:	75 47                	jne    c000bdf0 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000bda9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdad:	09 d8                	or     eax,ebx
c000bdaf:	a9 ff 0f 00 00       	test   eax,0xfff
c000bdb4:	75 57                	jne    c000be0d <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000bdb6:	89 de                	mov    esi,ebx
c000bdb8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bdbb:	c1 ee 16             	shr    esi,0x16
c000bdbe:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000bdc5:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000bdc9:	74 54                	je     c000be1f <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000bdcb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bdcf:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000bdd5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000bdd9:	c1 e6 0c             	shl    esi,0xc
c000bddc:	c1 eb 0a             	shr    ebx,0xa
c000bddf:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000bde5:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000bde8:	83 c4 1c             	add    esp,0x1c
c000bdeb:	5b                   	pop    ebx
c000bdec:	5e                   	pop    esi
c000bded:	5f                   	pop    edi
c000bdee:	5d                   	pop    ebp
c000bdef:	c3                   	ret    
c000bdf0:	83 ec 0c             	sub    esp,0xc
c000bdf3:	68 9c 2a 02 c0       	push   0xc0022a9c
c000bdf8:	e8 c1 0c 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000bdfd:	83 c4 10             	add    esp,0x10
c000be00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000be04:	09 d8                	or     eax,ebx
c000be06:	a9 ff 0f 00 00       	test   eax,0xfff
c000be0b:	74 a9                	je     c000bdb6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000be0d:	83 ec 0c             	sub    esp,0xc
c000be10:	68 04 2b 02 c0       	push   0xc0022b04
c000be15:	e8 63 86 00 00       	call   c001447d <Krnl::panic(char const*)>
c000be1a:	83 c4 10             	add    esp,0x10
c000be1d:	eb 97                	jmp    c000bdb6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000be1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be23:	e8 31 e0 ff ff       	call   c0009e59 <Phys::allocatePage()>
c000be28:	83 ec 0c             	sub    esp,0xc
c000be2b:	89 c5                	mov    ebp,eax
c000be2d:	8b 0d d0 63 02 c0    	mov    ecx,DWORD PTR ds:0xc00263d0
c000be33:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000be37:	6a 01                	push   0x1
c000be39:	e8 a5 f8 ff ff       	call   c000b6e3 <Virt::allocateKernelVirtualPages(int)>
c000be3e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000be45:	6a 01                	push   0x1
c000be47:	50                   	push   eax
c000be48:	55                   	push   ebp
c000be49:	81 cd 07 04 00 00    	or     ebp,0x407
c000be4f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000be53:	51                   	push   ecx
c000be54:	e8 27 02 00 00       	call   c000c080 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000be59:	83 c4 1c             	add    esp,0x1c
c000be5c:	68 00 10 00 00       	push   0x1000
c000be61:	6a 00                	push   0x0
c000be63:	50                   	push   eax
c000be64:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be68:	e8 e3 48 ff ff       	call   c0000750 <memset>
c000be6d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000be71:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000be74:	e8 9a fb ff ff       	call   c000ba13 <Virt::freeKernelVirtualPages(unsigned long)>
c000be79:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be7d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000be80:	83 c4 10             	add    esp,0x10
c000be83:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000be86:	e9 40 ff ff ff       	jmp    c000bdcb <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000be8b:	90                   	nop

c000be8c <VAS::allocatePages(int, int)>:
c000be8c:	55                   	push   ebp
c000be8d:	57                   	push   edi
c000be8e:	56                   	push   esi
c000be8f:	53                   	push   ebx
c000be90:	83 ec 1c             	sub    esp,0x1c
c000be93:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000be97:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000be9c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bea2:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000bea8:	83 e0 01             	and    eax,0x1
c000beab:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000beaf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000beb3:	0f 85 cc 00 00 00    	jne    c000bf85 <VAS::allocatePages(int, int)+0xf9>
c000beb9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bebc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bec0:	85 c0                	test   eax,eax
c000bec2:	0f 84 a1 00 00 00    	je     c000bf69 <VAS::allocatePages(int, int)+0xdd>
c000bec8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000becc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bed0:	c1 e6 0c             	shl    esi,0xc
c000bed3:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000bed7:	85 c0                	test   eax,eax
c000bed9:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000bedc:	7e 33                	jle    c000bf11 <VAS::allocatePages(int, int)+0x85>
c000bede:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bee2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bee6:	81 cd 00 04 00 00    	or     ebp,0x400
c000beec:	e8 68 df ff ff       	call   c0009e59 <Phys::allocatePage()>
c000bef1:	55                   	push   ebp
c000bef2:	53                   	push   ebx
c000bef3:	50                   	push   eax
c000bef4:	57                   	push   edi
c000bef5:	e8 90 fe ff ff       	call   c000bd8a <VAS::mapPage(unsigned long, unsigned long, int)>
c000befa:	83 c4 10             	add    esp,0x10
c000befd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf02:	74 03                	je     c000bf07 <VAS::allocatePages(int, int)+0x7b>
c000bf04:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf07:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf0d:	39 de                	cmp    esi,ebx
c000bf0f:	75 db                	jne    c000beec <VAS::allocatePages(int, int)+0x60>
c000bf11:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf16:	75 12                	jne    c000bf2a <VAS::allocatePages(int, int)+0x9e>
c000bf18:	0f 20 d8             	mov    eax,cr3
c000bf1b:	0f 22 d8             	mov    cr3,eax
c000bf1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf22:	83 c4 1c             	add    esp,0x1c
c000bf25:	5b                   	pop    ebx
c000bf26:	5e                   	pop    esi
c000bf27:	5f                   	pop    edi
c000bf28:	5d                   	pop    ebp
c000bf29:	c3                   	ret    
c000bf2a:	c1 ee 0a             	shr    esi,0xa
c000bf2d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bf31:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000bf37:	c1 eb 0a             	shr    ebx,0xa
c000bf3a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000bf40:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bf46:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf4c:	39 c3                	cmp    ebx,eax
c000bf4e:	77 ce                	ja     c000bf1e <VAS::allocatePages(int, int)+0x92>
c000bf50:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf53:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf59:	39 d8                	cmp    eax,ebx
c000bf5b:	73 f3                	jae    c000bf50 <VAS::allocatePages(int, int)+0xc4>
c000bf5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf61:	83 c4 1c             	add    esp,0x1c
c000bf64:	5b                   	pop    ebx
c000bf65:	5e                   	pop    esi
c000bf66:	5f                   	pop    edi
c000bf67:	5d                   	pop    ebp
c000bf68:	c3                   	ret    
c000bf69:	83 ec 0c             	sub    esp,0xc
c000bf6c:	68 28 2b 02 c0       	push   0xc0022b28
c000bf71:	e8 07 85 00 00       	call   c001447d <Krnl::panic(char const*)>
c000bf76:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bf79:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bf7d:	83 c4 10             	add    esp,0x10
c000bf80:	e9 43 ff ff ff       	jmp    c000bec8 <VAS::allocatePages(int, int)+0x3c>
c000bf85:	83 ec 0c             	sub    esp,0xc
c000bf88:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000bf8c:	e8 52 f7 ff ff       	call   c000b6e3 <Virt::allocateKernelVirtualPages(int)>
c000bf91:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bf95:	83 c4 10             	add    esp,0x10
c000bf98:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000bf9d:	0f 87 9b 00 00 00    	ja     c000c03e <VAS::allocatePages(int, int)+0x1b2>
c000bfa3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bfa7:	85 d2                	test   edx,edx
c000bfa9:	7e 3c                	jle    c000bfe7 <VAS::allocatePages(int, int)+0x15b>
c000bfab:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bfaf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bfb3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bfb7:	c1 e5 0c             	shl    ebp,0xc
c000bfba:	81 ce 00 04 00 00    	or     esi,0x400
c000bfc0:	01 dd                	add    ebp,ebx
c000bfc2:	e8 92 de ff ff       	call   c0009e59 <Phys::allocatePage()>
c000bfc7:	56                   	push   esi
c000bfc8:	53                   	push   ebx
c000bfc9:	50                   	push   eax
c000bfca:	57                   	push   edi
c000bfcb:	e8 ba fd ff ff       	call   c000bd8a <VAS::mapPage(unsigned long, unsigned long, int)>
c000bfd0:	83 c4 10             	add    esp,0x10
c000bfd3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bfd8:	74 03                	je     c000bfdd <VAS::allocatePages(int, int)+0x151>
c000bfda:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bfdd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bfe3:	39 dd                	cmp    ebp,ebx
c000bfe5:	75 db                	jne    c000bfc2 <VAS::allocatePages(int, int)+0x136>
c000bfe7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bfec:	0f 84 26 ff ff ff    	je     c000bf18 <VAS::allocatePages(int, int)+0x8c>
c000bff2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bff6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bffa:	89 d3                	mov    ebx,edx
c000bffc:	c1 e0 0c             	shl    eax,0xc
c000bfff:	c1 eb 0a             	shr    ebx,0xa
c000c002:	01 d0                	add    eax,edx
c000c004:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c00a:	c1 e8 0a             	shr    eax,0xa
c000c00d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c013:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c018:	2d 00 00 40 00       	sub    eax,0x400000
c000c01d:	39 c3                	cmp    ebx,eax
c000c01f:	0f 87 f9 fe ff ff    	ja     c000bf1e <VAS::allocatePages(int, int)+0x92>
c000c025:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c028:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c02e:	39 d8                	cmp    eax,ebx
c000c030:	73 f3                	jae    c000c025 <VAS::allocatePages(int, int)+0x199>
c000c032:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c036:	83 c4 1c             	add    esp,0x1c
c000c039:	5b                   	pop    ebx
c000c03a:	5e                   	pop    esi
c000c03b:	5f                   	pop    edi
c000c03c:	5d                   	pop    ebp
c000c03d:	c3                   	ret    
c000c03e:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000c043:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c049:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c050:	0f 84 4d ff ff ff    	je     c000bfa3 <VAS::allocatePages(int, int)+0x117>
c000c056:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c05e:	e9 40 ff ff ff       	jmp    c000bfa3 <VAS::allocatePages(int, int)+0x117>
c000c063:	90                   	nop

c000c064 <VAS::setCPUSpecific(unsigned long)>:
c000c064:	83 ec 0c             	sub    esp,0xc
c000c067:	6a 05                	push   0x5
c000c069:	68 00 00 40 c2       	push   0xc2400000
c000c06e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c076:	e8 0f fd ff ff       	call   c000bd8a <VAS::mapPage(unsigned long, unsigned long, int)>
c000c07b:	83 c4 1c             	add    esp,0x1c
c000c07e:	c3                   	ret    
c000c07f:	90                   	nop

c000c080 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c080:	55                   	push   ebp
c000c081:	57                   	push   edi
c000c082:	56                   	push   esi
c000c083:	53                   	push   ebx
c000c084:	83 ec 1c             	sub    esp,0x1c
c000c087:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000c08c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c090:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c096:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c09a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c0a0:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c0a4:	83 e0 01             	and    eax,0x1
c000c0a7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c0ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0af:	85 c0                	test   eax,eax
c000c0b1:	7e 39                	jle    c000c0ec <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c0b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0b7:	89 f3                	mov    ebx,esi
c000c0b9:	c1 e0 0c             	shl    eax,0xc
c000c0bc:	01 f0                	add    eax,esi
c000c0be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c0c2:	55                   	push   ebp
c000c0c3:	53                   	push   ebx
c000c0c4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0c8:	29 f0                	sub    eax,esi
c000c0ca:	01 d8                	add    eax,ebx
c000c0cc:	50                   	push   eax
c000c0cd:	57                   	push   edi
c000c0ce:	e8 b7 fc ff ff       	call   c000bd8a <VAS::mapPage(unsigned long, unsigned long, int)>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c0db:	74 03                	je     c000c0e0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c0dd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c0e0:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c0e6:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c0ea:	75 d6                	jne    c000c0c2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c0ec:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c0f1:	75 10                	jne    c000c103 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c0f3:	0f 20 d8             	mov    eax,cr3
c000c0f6:	0f 22 d8             	mov    cr3,eax
c000c0f9:	83 c4 1c             	add    esp,0x1c
c000c0fc:	89 f0                	mov    eax,esi
c000c0fe:	5b                   	pop    ebx
c000c0ff:	5e                   	pop    esi
c000c100:	5f                   	pop    edi
c000c101:	5d                   	pop    ebp
c000c102:	c3                   	ret    
c000c103:	89 f3                	mov    ebx,esi
c000c105:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c109:	c1 eb 0a             	shr    ebx,0xa
c000c10c:	c1 e0 0c             	shl    eax,0xc
c000c10f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c115:	01 f0                	add    eax,esi
c000c117:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c11d:	c1 e8 0a             	shr    eax,0xa
c000c120:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c125:	2d 00 00 40 00       	sub    eax,0x400000
c000c12a:	39 c3                	cmp    ebx,eax
c000c12c:	77 cb                	ja     c000c0f9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c12e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c131:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c137:	39 d8                	cmp    eax,ebx
c000c139:	73 f3                	jae    c000c12e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c13b:	83 c4 1c             	add    esp,0x1c
c000c13e:	89 f0                	mov    eax,esi
c000c140:	5b                   	pop    ebx
c000c141:	5e                   	pop    esi
c000c142:	5f                   	pop    edi
c000c143:	5d                   	pop    ebp
c000c144:	c3                   	ret    
c000c145:	90                   	nop

c000c146 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c146:	55                   	push   ebp
c000c147:	57                   	push   edi
c000c148:	56                   	push   esi
c000c149:	53                   	push   ebx
c000c14a:	83 ec 1c             	sub    esp,0x1c
c000c14d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c151:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c155:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c159:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c15d:	a9 ff 0f 00 00       	test   eax,0xfff
c000c162:	75 4a                	jne    c000c1ae <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c168:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c16b:	c1 eb 16             	shr    ebx,0x16
c000c16e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c175:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c179:	74 4d                	je     c000c1c8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c17b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c17f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c183:	c1 e8 0a             	shr    eax,0xa
c000c186:	80 fa 01             	cmp    dl,0x1
c000c189:	19 d2                	sbb    edx,edx
c000c18b:	c1 e3 0c             	shl    ebx,0xc
c000c18e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c192:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c198:	25 fc 0f 00 00       	and    eax,0xffc
c000c19d:	01 d8                	add    eax,ebx
c000c19f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c1a6:	83 c4 1c             	add    esp,0x1c
c000c1a9:	5b                   	pop    ebx
c000c1aa:	5e                   	pop    esi
c000c1ab:	5f                   	pop    edi
c000c1ac:	5d                   	pop    ebp
c000c1ad:	c3                   	ret    
c000c1ae:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c1b2:	83 ec 0c             	sub    esp,0xc
c000c1b5:	68 54 2b 02 c0       	push   0xc0022b54
c000c1ba:	e8 be 82 00 00       	call   c001447d <Krnl::panic(char const*)>
c000c1bf:	83 c4 10             	add    esp,0x10
c000c1c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c1c6:	eb 9c                	jmp    c000c164 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c1c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1cc:	e8 88 dc ff ff       	call   c0009e59 <Phys::allocatePage()>
c000c1d1:	83 ec 0c             	sub    esp,0xc
c000c1d4:	89 c5                	mov    ebp,eax
c000c1d6:	8b 0d d0 63 02 c0    	mov    ecx,DWORD PTR ds:0xc00263d0
c000c1dc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c1e0:	6a 01                	push   0x1
c000c1e2:	e8 fc f4 ff ff       	call   c000b6e3 <Virt::allocateKernelVirtualPages(int)>
c000c1e7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c1ee:	6a 01                	push   0x1
c000c1f0:	50                   	push   eax
c000c1f1:	55                   	push   ebp
c000c1f2:	81 cd 07 04 00 00    	or     ebp,0x407
c000c1f8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c1fc:	51                   	push   ecx
c000c1fd:	e8 7e fe ff ff       	call   c000c080 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c202:	83 c4 1c             	add    esp,0x1c
c000c205:	68 00 10 00 00       	push   0x1000
c000c20a:	6a 00                	push   0x0
c000c20c:	50                   	push   eax
c000c20d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c211:	e8 3a 45 ff ff       	call   c0000750 <memset>
c000c216:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c21a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c21d:	e8 f1 f7 ff ff       	call   c000ba13 <Virt::freeKernelVirtualPages(unsigned long)>
c000c222:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c225:	83 c4 10             	add    esp,0x10
c000c228:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c22b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c22f:	e9 47 ff ff ff       	jmp    c000c17b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c234 <VAS::VAS(bool)>:
c000c234:	53                   	push   ebx
c000c235:	83 ec 28             	sub    esp,0x28
c000c238:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c23c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c240:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c244:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c24b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c24f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c256:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c25a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c25e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c261:	e8 f3 db ff ff       	call   c0009e59 <Phys::allocatePage()>
c000c266:	89 c2                	mov    edx,eax
c000c268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c26c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c26f:	8b 1d d0 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263d0
c000c275:	83 ec 0c             	sub    esp,0xc
c000c278:	6a 01                	push   0x1
c000c27a:	e8 64 f4 ff ff       	call   c000b6e3 <Virt::allocateKernelVirtualPages(int)>
c000c27f:	83 c4 10             	add    esp,0x10
c000c282:	89 c2                	mov    edx,eax
c000c284:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c288:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c28b:	83 ec 0c             	sub    esp,0xc
c000c28e:	6a 03                	push   0x3
c000c290:	6a 01                	push   0x1
c000c292:	52                   	push   edx
c000c293:	50                   	push   eax
c000c294:	53                   	push   ebx
c000c295:	e8 e6 fd ff ff       	call   c000c080 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c29a:	83 c4 20             	add    esp,0x20
c000c29d:	89 c2                	mov    edx,eax
c000c29f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c2a6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c2ae:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c2b6:	7f 1c                	jg     c000c2d4 <VAS::VAS(bool)+0xa0>
c000c2b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c2c3:	c1 e2 02             	shl    edx,0x2
c000c2c6:	01 d0                	add    eax,edx
c000c2c8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c2ce:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c2d2:	eb da                	jmp    c000c2ae <VAS::VAS(bool)+0x7a>
c000c2d4:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c2dc:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c2e4:	7f 7a                	jg     c000c360 <VAS::VAS(bool)+0x12c>
c000c2e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c2ea:	2d 00 02 00 00       	sub    eax,0x200
c000c2ef:	c1 e0 0c             	shl    eax,0xc
c000c2f2:	83 c8 03             	or     eax,0x3
c000c2f5:	89 c2                	mov    edx,eax
c000c2f7:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000c2fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c302:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c308:	83 e0 10             	and    eax,0x10
c000c30b:	84 c0                	test   al,al
c000c30d:	74 07                	je     c000c316 <VAS::VAS(bool)+0xe2>
c000c30f:	b8 00 01 00 00       	mov    eax,0x100
c000c314:	eb 05                	jmp    c000c31b <VAS::VAS(bool)+0xe7>
c000c316:	b8 00 00 00 00       	mov    eax,0x0
c000c31b:	09 d0                	or     eax,edx
c000c31d:	89 c1                	mov    ecx,eax
c000c31f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c323:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c326:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c32a:	c1 e2 02             	shl    edx,0x2
c000c32d:	01 d0                	add    eax,edx
c000c32f:	89 ca                	mov    edx,ecx
c000c331:	89 10                	mov    DWORD PTR [eax],edx
c000c333:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c337:	2d 40 03 00 00       	sub    eax,0x340
c000c33c:	83 f8 7f             	cmp    eax,0x7f
c000c33f:	77 16                	ja     c000c357 <VAS::VAS(bool)+0x123>
c000c341:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c345:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c348:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c34c:	c1 e2 02             	shl    edx,0x2
c000c34f:	01 d0                	add    eax,edx
c000c351:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c357:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c35b:	e9 7c ff ff ff       	jmp    c000c2dc <VAS::VAS(bool)+0xa8>
c000c360:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000c365:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c36b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c371:	83 e0 10             	and    eax,0x10
c000c374:	84 c0                	test   al,al
c000c376:	74 07                	je     c000c37f <VAS::VAS(bool)+0x14b>
c000c378:	b8 03 41 00 00       	mov    eax,0x4103
c000c37d:	eb 05                	jmp    c000c384 <VAS::VAS(bool)+0x150>
c000c37f:	b8 03 40 00 00       	mov    eax,0x4003
c000c384:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c388:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c38b:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c391:	89 02                	mov    DWORD PTR [edx],eax
c000c393:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000c398:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c39e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c3a4:	83 ec 08             	sub    esp,0x8
c000c3a7:	50                   	push   eax
c000c3a8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3ac:	e8 b3 fc ff ff       	call   c000c064 <VAS::setCPUSpecific(unsigned long)>
c000c3b1:	83 c4 10             	add    esp,0x10
c000c3b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3b8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c3bb:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000c3c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3c6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c3cc:	83 e0 10             	and    eax,0x10
c000c3cf:	84 c0                	test   al,al
c000c3d1:	74 07                	je     c000c3da <VAS::VAS(bool)+0x1a6>
c000c3d3:	b8 00 01 00 00       	mov    eax,0x100
c000c3d8:	eb 05                	jmp    c000c3df <VAS::VAS(bool)+0x1ab>
c000c3da:	b8 00 00 00 00       	mov    eax,0x0
c000c3df:	09 c2                	or     edx,eax
c000c3e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3e5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c3e8:	05 fc 0f 00 00       	add    eax,0xffc
c000c3ed:	83 ca 03             	or     edx,0x3
c000c3f0:	89 10                	mov    DWORD PTR [eax],edx
c000c3f2:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000c3f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3fd:	83 ec 0c             	sub    esp,0xc
c000c400:	50                   	push   eax
c000c401:	e8 fc 1d 00 00       	call   c000e202 <Device::getName()>
c000c406:	83 c4 10             	add    esp,0x10
c000c409:	83 ec 08             	sub    esp,0x8
c000c40c:	68 50 2c 02 c0       	push   0xc0022c50
c000c411:	50                   	push   eax
c000c412:	e8 81 44 ff ff       	call   c0000898 <strcmp>
c000c417:	83 c4 10             	add    esp,0x10
c000c41a:	85 c0                	test   eax,eax
c000c41c:	0f 94 c0             	sete   al
c000c41f:	84 c0                	test   al,al
c000c421:	0f 84 87 00 00 00    	je     c000c4ae <VAS::VAS(bool)+0x27a>
c000c427:	fa                   	cli    
c000c428:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000c42d:	40                   	inc    eax
c000c42e:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c000c433:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000c438:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c43e:	05 7c 09 00 00       	add    eax,0x97c
c000c443:	83 ec 0c             	sub    esp,0xc
c000c446:	50                   	push   eax
c000c447:	e8 00 d1 ff ff       	call   c000954c <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c454:	89 c3                	mov    ebx,eax
c000c456:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000c45b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c461:	05 7c 09 00 00       	add    eax,0x97c
c000c466:	83 ec 0c             	sub    esp,0xc
c000c469:	50                   	push   eax
c000c46a:	e8 dd d0 ff ff       	call   c000954c <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c46f:	83 c4 10             	add    esp,0x10
c000c472:	83 ec 08             	sub    esp,0x8
c000c475:	50                   	push   eax
c000c476:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c47a:	e8 75 f5 ff ff       	call   c000b9f4 <VAS::getPageTableEntry(unsigned long)>
c000c47f:	83 c4 10             	add    esp,0x10
c000c482:	8b 00                	mov    eax,DWORD PTR [eax]
c000c484:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c489:	6a 11                	push   0x11
c000c48b:	53                   	push   ebx
c000c48c:	50                   	push   eax
c000c48d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c491:	e8 f4 f8 ff ff       	call   c000bd8a <VAS::mapPage(unsigned long, unsigned long, int)>
c000c496:	83 c4 10             	add    esp,0x10
c000c499:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000c49e:	48                   	dec    eax
c000c49f:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c000c4a4:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000c4a9:	85 c0                	test   eax,eax
c000c4ab:	75 01                	jne    c000c4ae <VAS::VAS(bool)+0x27a>
c000c4ad:	fb                   	sti    
c000c4ae:	90                   	nop
c000c4af:	83 c4 28             	add    esp,0x28
c000c4b2:	5b                   	pop    ebx
c000c4b3:	c3                   	ret    

c000c4b4 <VAS::evict(unsigned long)>:
c000c4b4:	55                   	push   ebp
c000c4b5:	57                   	push   edi
c000c4b6:	56                   	push   esi
c000c4b7:	53                   	push   ebx
c000c4b8:	83 ec 28             	sub    esp,0x28
c000c4bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c4bf:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c4c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4c7:	68 5e 2c 02 c0       	push   0xc0022c5e
c000c4cc:	e8 ed 05 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c4d1:	e8 4e f3 ff ff       	call   c000b824 <Virt::allocateSwapfilePage()>
c000c4d6:	5a                   	pop    edx
c000c4d7:	89 c7                	mov    edi,eax
c000c4d9:	59                   	pop    ecx
c000c4da:	50                   	push   eax
c000c4db:	68 7b 2c 02 c0       	push   0xc0022c7b
c000c4e0:	e8 d9 05 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c4e5:	83 c4 10             	add    esp,0x10
c000c4e8:	8b 1d ac 56 02 c0    	mov    ebx,DWORD PTR ds:0xc00256ac
c000c4ee:	85 db                	test   ebx,ebx
c000c4f0:	7e 3d                	jle    c000c52f <VAS::evict(unsigned long)+0x7b>
c000c4f2:	89 ee                	mov    esi,ebp
c000c4f4:	31 db                	xor    ebx,ebx
c000c4f6:	83 ec 0c             	sub    esp,0xc
c000c4f9:	57                   	push   edi
c000c4fa:	e8 13 f3 ff ff       	call   c000b812 <Virt::swapIDToSector(unsigned long)>
c000c4ff:	89 34 24             	mov    DWORD PTR [esp],esi
c000c502:	01 d8                	add    eax,ebx
c000c504:	6a 01                	push   0x1
c000c506:	31 d2                	xor    edx,edx
c000c508:	43                   	inc    ebx
c000c509:	52                   	push   edx
c000c50a:	81 c6 00 02 00 00    	add    esi,0x200
c000c510:	50                   	push   eax
c000c511:	0f be 05 b8 56 02 c0 	movsx  eax,BYTE PTR ds:0xc00256b8
c000c518:	ff 34 85 5c 67 02 c0 	push   DWORD PTR [eax*4-0x3ffd98a4]
c000c51f:	e8 6c 3f 00 00       	call   c0010490 <LogicalDisk::write(unsigned long long, int, void*)>
c000c524:	83 c4 20             	add    esp,0x20
c000c527:	39 1d ac 56 02 c0    	cmp    DWORD PTR ds:0xc00256ac,ebx
c000c52d:	7f c7                	jg     c000c4f6 <VAS::evict(unsigned long)+0x42>
c000c52f:	83 ec 08             	sub    esp,0x8
c000c532:	c1 e7 0b             	shl    edi,0xb
c000c535:	55                   	push   ebp
c000c536:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c53a:	e8 b5 f4 ff ff       	call   c000b9f4 <VAS::getPageTableEntry(unsigned long)>
c000c53f:	5a                   	pop    edx
c000c540:	89 c6                	mov    esi,eax
c000c542:	59                   	pop    ecx
c000c543:	ff 30                	push   DWORD PTR [eax]
c000c545:	68 8b 2c 02 c0       	push   0xc0022c8b
c000c54a:	e8 6f 05 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c54f:	8b 16                	mov    edx,DWORD PTR [esi]
c000c551:	89 d3                	mov    ebx,edx
c000c553:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c559:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c55f:	09 d7                	or     edi,edx
c000c561:	89 3e                	mov    DWORD PTR [esi],edi
c000c563:	5e                   	pop    esi
c000c564:	58                   	pop    eax
c000c565:	57                   	push   edi
c000c566:	68 a4 2c 02 c0       	push   0xc0022ca4
c000c56b:	e8 4e 05 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c570:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c573:	ff 05 c8 63 02 c0    	inc    DWORD PTR ds:0xc00263c8
c000c579:	e8 6a d8 ff ff       	call   c0009de8 <Phys::freePage(unsigned long)>
c000c57e:	0f 20 d8             	mov    eax,cr3
c000c581:	0f 22 d8             	mov    cr3,eax
c000c584:	ff 35 c8 63 02 c0    	push   DWORD PTR ds:0xc00263c8
c000c58a:	55                   	push   ebp
c000c58b:	53                   	push   ebx
c000c58c:	68 78 2b 02 c0       	push   0xc0022b78
c000c591:	e8 28 05 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c596:	a1 c4 63 02 c0       	mov    eax,ds:0xc00263c4
c000c59b:	c7 44 24 50 bd 2c 02 c0 	mov    DWORD PTR [esp+0x50],0xc0022cbd
c000c5a3:	8d 50 01             	lea    edx,[eax+0x1]
c000c5a6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c5aa:	89 15 c4 63 02 c0    	mov    DWORD PTR ds:0xc00263c4,edx
c000c5b0:	83 c4 3c             	add    esp,0x3c
c000c5b3:	5b                   	pop    ebx
c000c5b4:	5e                   	pop    esi
c000c5b5:	5f                   	pop    edi
c000c5b6:	5d                   	pop    ebp
c000c5b7:	e9 02 05 00 00       	jmp    c000cabe <Dbg::kprintf(char const*, ...)>

c000c5bc <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c5bc:	55                   	push   ebp
c000c5bd:	57                   	push   edi
c000c5be:	56                   	push   esi
c000c5bf:	53                   	push   ebx
c000c5c0:	83 ec 24             	sub    esp,0x24
c000c5c3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c5c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5cb:	68 ce 2c 02 c0       	push   0xc0022cce
c000c5d0:	e8 e9 04 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c5d5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000c5d9:	58                   	pop    eax
c000c5da:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000c5e0:	5a                   	pop    edx
c000c5e1:	57                   	push   edi
c000c5e2:	53                   	push   ebx
c000c5e3:	e8 0c f4 ff ff       	call   c000b9f4 <VAS::getPageTableEntry(unsigned long)>
c000c5e8:	59                   	pop    ecx
c000c5e9:	5e                   	pop    esi
c000c5ea:	89 c6                	mov    esi,eax
c000c5ec:	ff 30                	push   DWORD PTR [eax]
c000c5ee:	68 e1 2c 02 c0       	push   0xc0022ce1
c000c5f3:	e8 c6 04 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c5f8:	83 c4 10             	add    esp,0x10
c000c5fb:	85 ff                	test   edi,edi
c000c5fd:	74 0a                	je     c000c609 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c000c5ff:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000c601:	f7 c5 01 00 00 00    	test   ebp,0x1
c000c607:	74 0a                	je     c000c613 <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c000c609:	83 c4 1c             	add    esp,0x1c
c000c60c:	31 c0                	xor    eax,eax
c000c60e:	5b                   	pop    ebx
c000c60f:	5e                   	pop    esi
c000c610:	5f                   	pop    edi
c000c611:	5d                   	pop    ebp
c000c612:	c3                   	ret    
c000c613:	83 ec 08             	sub    esp,0x8
c000c616:	c1 ed 0b             	shr    ebp,0xb
c000c619:	55                   	push   ebp
c000c61a:	68 ef 2c 02 c0       	push   0xc0022cef
c000c61f:	e8 9a 04 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c624:	e8 30 d8 ff ff       	call   c0009e59 <Phys::allocatePage()>
c000c629:	59                   	pop    ecx
c000c62a:	5a                   	pop    edx
c000c62b:	50                   	push   eax
c000c62c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c630:	68 fa 2c 02 c0       	push   0xc0022cfa
c000c635:	e8 84 04 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c63a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c63e:	8b 16                	mov    edx,DWORD PTR [esi]
c000c640:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c646:	09 d0                	or     eax,edx
c000c648:	0d 01 08 00 00       	or     eax,0x801
c000c64d:	89 06                	mov    DWORD PTR [esi],eax
c000c64f:	59                   	pop    ecx
c000c650:	5e                   	pop    esi
c000c651:	50                   	push   eax
c000c652:	68 0f 2d 02 c0       	push   0xc0022d0f
c000c657:	e8 62 04 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c65c:	0f 20 d8             	mov    eax,cr3
c000c65f:	83 c4 0c             	add    esp,0xc
c000c662:	53                   	push   ebx
c000c663:	50                   	push   eax
c000c664:	68 27 2d 02 c0       	push   0xc0022d27
c000c669:	e8 50 04 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c66e:	c7 04 24 3f 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d3f
c000c675:	e8 44 04 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c67a:	83 c4 10             	add    esp,0x10
c000c67d:	a1 ac 56 02 c0       	mov    eax,ds:0xc00256ac
c000c682:	85 c0                	test   eax,eax
c000c684:	7e 3d                	jle    c000c6c3 <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c000c686:	89 fe                	mov    esi,edi
c000c688:	31 db                	xor    ebx,ebx
c000c68a:	83 ec 0c             	sub    esp,0xc
c000c68d:	55                   	push   ebp
c000c68e:	e8 7f f1 ff ff       	call   c000b812 <Virt::swapIDToSector(unsigned long)>
c000c693:	89 34 24             	mov    DWORD PTR [esp],esi
c000c696:	01 d8                	add    eax,ebx
c000c698:	6a 01                	push   0x1
c000c69a:	31 d2                	xor    edx,edx
c000c69c:	43                   	inc    ebx
c000c69d:	52                   	push   edx
c000c69e:	81 c6 00 02 00 00    	add    esi,0x200
c000c6a4:	50                   	push   eax
c000c6a5:	0f be 05 b8 56 02 c0 	movsx  eax,BYTE PTR ds:0xc00256b8
c000c6ac:	ff 34 85 5c 67 02 c0 	push   DWORD PTR [eax*4-0x3ffd98a4]
c000c6b3:	e8 6c 3d 00 00       	call   c0010424 <LogicalDisk::read(unsigned long long, int, void*)>
c000c6b8:	83 c4 20             	add    esp,0x20
c000c6bb:	39 1d ac 56 02 c0    	cmp    DWORD PTR ds:0xc00256ac,ebx
c000c6c1:	7f c7                	jg     c000c68a <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c000c6c3:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000c6c8:	48                   	dec    eax
c000c6c9:	52                   	push   edx
c000c6ca:	a3 c8 63 02 c0       	mov    ds:0xc00263c8,eax
c000c6cf:	50                   	push   eax
c000c6d0:	57                   	push   edi
c000c6d1:	68 4f 2d 02 c0       	push   0xc0022d4f
c000c6d6:	e8 e3 03 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c6db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c6de:	e8 11 f1 ff ff       	call   c000b7f4 <Virt::freeSwapfilePage(unsigned long)>
c000c6e3:	c7 04 24 64 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d64
c000c6ea:	e8 cf 03 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c6ef:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000c6f4:	83 c4 10             	add    esp,0x10
c000c6f7:	48                   	dec    eax
c000c6f8:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c000c6fd:	85 c0                	test   eax,eax
c000c6ff:	75 01                	jne    c000c702 <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c000c701:	fb                   	sti    
c000c702:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c706:	25 ff 0f 00 00       	and    eax,0xfff
c000c70b:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c710:	77 20                	ja     c000c732 <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c000c712:	0f 20 d8             	mov    eax,cr3
c000c715:	0f 22 d8             	mov    cr3,eax
c000c718:	83 ec 0c             	sub    esp,0xc
c000c71b:	68 8a 2d 02 c0       	push   0xc0022d8a
c000c720:	e8 99 03 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c725:	83 c4 10             	add    esp,0x10
c000c728:	b0 01                	mov    al,0x1
c000c72a:	83 c4 1c             	add    esp,0x1c
c000c72d:	5b                   	pop    ebx
c000c72e:	5e                   	pop    esi
c000c72f:	5f                   	pop    edi
c000c730:	5d                   	pop    ebp
c000c731:	c3                   	ret    
c000c732:	83 ec 0c             	sub    esp,0xc
c000c735:	68 7a 2d 02 c0       	push   0xc0022d7a
c000c73a:	e8 7f 03 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c73f:	83 c4 10             	add    esp,0x10
c000c742:	eb ce                	jmp    c000c712 <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c000c744 <VAS::scanForEviction()>:
c000c744:	55                   	push   ebp
c000c745:	31 ed                	xor    ebp,ebp
c000c747:	57                   	push   edi
c000c748:	56                   	push   esi
c000c749:	53                   	push   ebx
c000c74a:	83 ec 0c             	sub    esp,0xc
c000c74d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c751:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c754:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c75a:	75 0e                	jne    c000c76a <VAS::scanForEviction()+0x26>
c000c75c:	89 da                	mov    edx,ebx
c000c75e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c761:	c1 ea 16             	shr    edx,0x16
c000c764:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c768:	74 4e                	je     c000c7b8 <VAS::scanForEviction()+0x74>
c000c76a:	53                   	push   ebx
c000c76b:	56                   	push   esi
c000c76c:	e8 83 f2 ff ff       	call   c000b9f4 <VAS::getPageTableEntry(unsigned long)>
c000c771:	5f                   	pop    edi
c000c772:	8b 38                	mov    edi,DWORD PTR [eax]
c000c774:	5a                   	pop    edx
c000c775:	89 fa                	mov    edx,edi
c000c777:	81 e2 01 08 00 00    	and    edx,0x801
c000c77d:	81 fa 01 08 00 00    	cmp    edx,0x801
c000c783:	74 3e                	je     c000c7c3 <VAS::scanForEviction()+0x7f>
c000c785:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c78b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c791:	76 2b                	jbe    c000c7be <VAS::scanForEviction()+0x7a>
c000c793:	45                   	inc    ebp
c000c794:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c79b:	83 fd 04             	cmp    ebp,0x4
c000c79e:	74 35                	je     c000c7d5 <VAS::scanForEviction()+0x91>
c000c7a0:	31 db                	xor    ebx,ebx
c000c7a2:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c7a8:	75 c0                	jne    c000c76a <VAS::scanForEviction()+0x26>
c000c7aa:	89 da                	mov    edx,ebx
c000c7ac:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7af:	c1 ea 16             	shr    edx,0x16
c000c7b2:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c7b6:	75 b2                	jne    c000c76a <VAS::scanForEviction()+0x26>
c000c7b8:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c7be:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c7c1:	eb 91                	jmp    c000c754 <VAS::scanForEviction()+0x10>
c000c7c3:	f7 c7 20 00 00 00    	test   edi,0x20
c000c7c9:	74 22                	je     c000c7ed <VAS::scanForEviction()+0xa9>
c000c7cb:	83 e7 df             	and    edi,0xffffffdf
c000c7ce:	89 38                	mov    DWORD PTR [eax],edi
c000c7d0:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c7d3:	eb b0                	jmp    c000c785 <VAS::scanForEviction()+0x41>
c000c7d5:	83 ec 0c             	sub    esp,0xc
c000c7d8:	68 a8 2b 02 c0       	push   0xc0022ba8
c000c7dd:	e8 9b 7c 00 00       	call   c001447d <Krnl::panic(char const*)>
c000c7e2:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c7e5:	83 c4 10             	add    esp,0x10
c000c7e8:	e9 67 ff ff ff       	jmp    c000c754 <VAS::scanForEviction()+0x10>
c000c7ed:	83 ec 08             	sub    esp,0x8
c000c7f0:	53                   	push   ebx
c000c7f1:	68 98 2d 02 c0       	push   0xc0022d98
c000c7f6:	e8 c3 02 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c7fb:	58                   	pop    eax
c000c7fc:	5a                   	pop    edx
c000c7fd:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c800:	56                   	push   esi
c000c801:	e8 ae fc ff ff       	call   c000c4b4 <VAS::evict(unsigned long)>
c000c806:	59                   	pop    ecx
c000c807:	5b                   	pop    ebx
c000c808:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c80b:	68 ac 2d 02 c0       	push   0xc0022dac
c000c810:	e8 a9 02 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c815:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c81c:	89 f8                	mov    eax,edi
c000c81e:	83 c4 1c             	add    esp,0x1c
c000c821:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c826:	5b                   	pop    ebx
c000c827:	5e                   	pop    esi
c000c828:	5f                   	pop    edi
c000c829:	5d                   	pop    ebp
c000c82a:	c3                   	ret    

c000c82b <mapVASFirstTime>:
c000c82b:	55                   	push   ebp
c000c82c:	57                   	push   edi
c000c82d:	56                   	push   esi
c000c82e:	53                   	push   ebx
c000c82f:	83 ec 0c             	sub    esp,0xc
c000c832:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c837:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c83a:	4a                   	dec    edx
c000c83b:	0f 84 fe 00 00 00    	je     c000c93f <mapVASFirstTime+0x114>
c000c841:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000c844:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000c847:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000c84c:	c1 e5 15             	shl    ebp,0x15
c000c84f:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000c854:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c000c85a:	29 eb                	sub    ebx,ebp
c000c85c:	29 ef                	sub    edi,ebp
c000c85e:	83 ec 08             	sub    esp,0x8
c000c861:	53                   	push   ebx
c000c862:	68 d8 2d 02 c0       	push   0xc0022dd8
c000c867:	e8 52 02 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c86c:	e8 e8 d5 ff ff       	call   c0009e59 <Phys::allocatePage()>
c000c871:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000c878:	6a 01                	push   0x1
c000c87a:	53                   	push   ebx
c000c87b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c881:	50                   	push   eax
c000c882:	56                   	push   esi
c000c883:	e8 f8 f7 ff ff       	call   c000c080 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c888:	83 c4 20             	add    esp,0x20
c000c88b:	39 fb                	cmp    ebx,edi
c000c88d:	75 cf                	jne    c000c85e <mapVASFirstTime+0x33>
c000c88f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000c894:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000c899:	29 eb                	sub    ebx,ebp
c000c89b:	29 ef                	sub    edi,ebp
c000c89d:	83 ec 08             	sub    esp,0x8
c000c8a0:	53                   	push   ebx
c000c8a1:	68 f4 2d 02 c0       	push   0xc0022df4
c000c8a6:	e8 13 02 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c8ab:	58                   	pop    eax
c000c8ac:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c8b0:	5a                   	pop    edx
c000c8b1:	19 c0                	sbb    eax,eax
c000c8b3:	83 e0 04             	and    eax,0x4
c000c8b6:	05 03 04 00 00       	add    eax,0x403
c000c8bb:	50                   	push   eax
c000c8bc:	68 19 2d 02 c0       	push   0xc0022d19
c000c8c1:	e8 f8 01 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c8c6:	e8 8e d5 ff ff       	call   c0009e59 <Phys::allocatePage()>
c000c8cb:	59                   	pop    ecx
c000c8cc:	89 c5                	mov    ebp,eax
c000c8ce:	58                   	pop    eax
c000c8cf:	55                   	push   ebp
c000c8d0:	68 08 2e 02 c0       	push   0xc0022e08
c000c8d5:	e8 e4 01 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c8da:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c8de:	19 d2                	sbb    edx,edx
c000c8e0:	83 e2 04             	and    edx,0x4
c000c8e3:	81 c2 03 04 00 00    	add    edx,0x403
c000c8e9:	89 14 24             	mov    DWORD PTR [esp],edx
c000c8ec:	6a 01                	push   0x1
c000c8ee:	53                   	push   ebx
c000c8ef:	55                   	push   ebp
c000c8f0:	56                   	push   esi
c000c8f1:	e8 8a f7 ff ff       	call   c000c080 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c8f6:	83 c4 18             	add    esp,0x18
c000c8f9:	53                   	push   ebx
c000c8fa:	56                   	push   esi
c000c8fb:	e8 f4 f0 ff ff       	call   c000b9f4 <VAS::getPageTableEntry(unsigned long)>
c000c900:	5a                   	pop    edx
c000c901:	59                   	pop    ecx
c000c902:	ff 30                	push   DWORD PTR [eax]
c000c904:	68 24 2e 02 c0       	push   0xc0022e24
c000c909:	e8 b0 01 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c90e:	0f 20 d8             	mov    eax,cr3
c000c911:	83 c4 0c             	add    esp,0xc
c000c914:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c91a:	56                   	push   esi
c000c91b:	50                   	push   eax
c000c91c:	68 27 2d 02 c0       	push   0xc0022d27
c000c921:	e8 98 01 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c926:	83 c4 10             	add    esp,0x10
c000c929:	39 df                	cmp    edi,ebx
c000c92b:	0f 85 6c ff ff ff    	jne    c000c89d <mapVASFirstTime+0x72>
c000c931:	0f 20 d8             	mov    eax,cr3
c000c934:	0f 22 d8             	mov    cr3,eax
c000c937:	83 c4 0c             	add    esp,0xc
c000c93a:	5b                   	pop    ebx
c000c93b:	5e                   	pop    esi
c000c93c:	5f                   	pop    edi
c000c93d:	5d                   	pop    ebp
c000c93e:	c3                   	ret    
c000c93f:	83 ec 0c             	sub    esp,0xc
c000c942:	68 bf 2d 02 c0       	push   0xc0022dbf
c000c947:	e8 72 01 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c94c:	83 c4 10             	add    esp,0x10
c000c94f:	83 c4 0c             	add    esp,0xc
c000c952:	5b                   	pop    ebx
c000c953:	5e                   	pop    esi
c000c954:	5f                   	pop    edi
c000c955:	5d                   	pop    ebp
c000c956:	c3                   	ret    

c000c957 <__cxa_atexit>:
c000c957:	31 c0                	xor    eax,eax
c000c959:	c3                   	ret    

c000c95a <__cxa_finalize>:
c000c95a:	c3                   	ret    

c000c95b <__stack_chk_fail>:
c000c95b:	55                   	push   ebp
c000c95c:	89 e5                	mov    ebp,esp
c000c95e:	83 ec 14             	sub    esp,0x14
c000c961:	68 2f 2e 02 c0       	push   0xc0022e2f
c000c966:	e8 53 01 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c96b:	58                   	pop    eax
c000c96c:	5a                   	pop    edx
c000c96d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c970:	68 7f 2e 02 c0       	push   0xc0022e7f
c000c975:	e8 44 01 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c97a:	59                   	pop    ecx
c000c97b:	58                   	pop    eax
c000c97c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c97f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c982:	68 7f 2e 02 c0       	push   0xc0022e7f
c000c987:	e8 32 01 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c98c:	5a                   	pop    edx
c000c98d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c990:	59                   	pop    ecx
c000c991:	8b 00                	mov    eax,DWORD PTR [eax]
c000c993:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c996:	68 7f 2e 02 c0       	push   0xc0022e7f
c000c99b:	e8 1e 01 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c9a0:	5a                   	pop    edx
c000c9a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9a4:	59                   	pop    ecx
c000c9a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9a7:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9a9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c9ac:	68 7f 2e 02 c0       	push   0xc0022e7f
c000c9b1:	e8 08 01 00 00       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000c9b6:	c7 04 24 87 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e87
c000c9bd:	e8 bb 7a 00 00       	call   c001447d <Krnl::panic(char const*)>
c000c9c2:	83 c4 10             	add    esp,0x10
c000c9c5:	c9                   	leave  
c000c9c6:	c3                   	ret    

c000c9c7 <__cxa_pure_virtual>:
c000c9c7:	83 ec 18             	sub    esp,0x18
c000c9ca:	68 9f 2e 02 c0       	push   0xc0022e9f
c000c9cf:	e8 a9 7a 00 00       	call   c001447d <Krnl::panic(char const*)>
c000c9d4:	83 c4 1c             	add    esp,0x1c
c000c9d7:	c3                   	ret    

c000c9d8 <operator new[](unsigned long)>:
c000c9d8:	e9 80 d0 ff ff       	jmp    c0009a5d <malloc>

c000c9dd <operator delete(void*, unsigned long)>:
c000c9dd:	e9 9b d0 ff ff       	jmp    c0009a7d <rfree>

c000c9e2 <operator delete[](void*)>:
c000c9e2:	e9 96 d0 ff ff       	jmp    c0009a7d <rfree>

c000c9e7 <operator delete[](void*, unsigned long)>:
c000c9e7:	e9 91 d0 ff ff       	jmp    c0009a7d <rfree>

c000c9ec <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000c9ec:	55                   	push   ebp
c000c9ed:	b9 11 00 00 00       	mov    ecx,0x11
c000c9f2:	57                   	push   edi
c000c9f3:	56                   	push   esi
c000c9f4:	be 92 28 02 c0       	mov    esi,0xc0022892
c000c9f9:	53                   	push   ebx
c000c9fa:	83 ec 20             	sub    esp,0x20
c000c9fd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ca01:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ca05:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000ca09:	fc                   	cld    
c000ca0a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ca0c:	89 ee                	mov    esi,ebp
c000ca0e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ca12:	eb 02                	jmp    c000ca16 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000ca14:	89 c6                	mov    esi,eax
c000ca16:	31 d2                	xor    edx,edx
c000ca18:	41                   	inc    ecx
c000ca19:	89 f0                	mov    eax,esi
c000ca1b:	f7 f3                	div    ebx
c000ca1d:	39 de                	cmp    esi,ebx
c000ca1f:	73 f3                	jae    c000ca14 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000ca21:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ca24:	eb 02                	jmp    c000ca28 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000ca26:	89 c5                	mov    ebp,eax
c000ca28:	31 d2                	xor    edx,edx
c000ca2a:	49                   	dec    ecx
c000ca2b:	89 e8                	mov    eax,ebp
c000ca2d:	f7 f3                	div    ebx
c000ca2f:	39 dd                	cmp    ebp,ebx
c000ca31:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000ca35:	88 11                	mov    BYTE PTR [ecx],dl
c000ca37:	73 ed                	jae    c000ca26 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000ca39:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca3d:	83 c4 20             	add    esp,0x20
c000ca40:	5b                   	pop    ebx
c000ca41:	5e                   	pop    esi
c000ca42:	5f                   	pop    edi
c000ca43:	5d                   	pop    ebp
c000ca44:	c3                   	ret    

c000ca45 <Dbg::logc(char)>:
c000ca45:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ca49:	f6 05 80 62 02 c0 10 	test   BYTE PTR ds:0xc0026280,0x10
c000ca50:	75 12                	jne    c000ca64 <Dbg::logc(char)+0x1f>
c000ca52:	ba fd 03 00 00       	mov    edx,0x3fd
c000ca57:	ec                   	in     al,dx
c000ca58:	a8 20                	test   al,0x20
c000ca5a:	74 fb                	je     c000ca57 <Dbg::logc(char)+0x12>
c000ca5c:	ba f8 03 00 00       	mov    edx,0x3f8
c000ca61:	88 c8                	mov    al,cl
c000ca63:	ee                   	out    dx,al
c000ca64:	c3                   	ret    

c000ca65 <Dbg::logs(char*)>:
c000ca65:	53                   	push   ebx
c000ca66:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ca6a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca6d:	84 c0                	test   al,al
c000ca6f:	74 0f                	je     c000ca80 <Dbg::logs(char*)+0x1b>
c000ca71:	50                   	push   eax
c000ca72:	43                   	inc    ebx
c000ca73:	e8 cd ff ff ff       	call   c000ca45 <Dbg::logc(char)>
c000ca78:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca7b:	5a                   	pop    edx
c000ca7c:	84 c0                	test   al,al
c000ca7e:	75 f1                	jne    c000ca71 <Dbg::logs(char*)+0xc>
c000ca80:	5b                   	pop    ebx
c000ca81:	c3                   	ret    

c000ca82 <Dbg::logWriteInt(unsigned int)>:
c000ca82:	83 ec 10             	sub    esp,0x10
c000ca85:	6a 0a                	push   0xa
c000ca87:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ca8b:	50                   	push   eax
c000ca8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca90:	e8 57 ff ff ff       	call   c000c9ec <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ca95:	50                   	push   eax
c000ca96:	e8 ca ff ff ff       	call   c000ca65 <Dbg::logs(char*)>
c000ca9b:	83 c4 20             	add    esp,0x20
c000ca9e:	c3                   	ret    

c000ca9f <Dbg::logWriteIntBase(unsigned int, int)>:
c000ca9f:	83 ec 10             	sub    esp,0x10
c000caa2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000caa6:	8d 44 24 08          	lea    eax,[esp+0x8]
c000caaa:	50                   	push   eax
c000caab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caaf:	e8 38 ff ff ff       	call   c000c9ec <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cab4:	50                   	push   eax
c000cab5:	e8 ab ff ff ff       	call   c000ca65 <Dbg::logs(char*)>
c000caba:	83 c4 20             	add    esp,0x20
c000cabd:	c3                   	ret    

c000cabe <Dbg::kprintf(char const*, ...)>:
c000cabe:	55                   	push   ebp
c000cabf:	57                   	push   edi
c000cac0:	56                   	push   esi
c000cac1:	53                   	push   ebx
c000cac2:	83 ec 0c             	sub    esp,0xc
c000cac5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cac9:	f6 05 80 62 02 c0 10 	test   BYTE PTR ds:0xc0026280,0x10
c000cad0:	74 08                	je     c000cada <Dbg::kprintf(char const*, ...)+0x1c>
c000cad2:	83 c4 0c             	add    esp,0xc
c000cad5:	5b                   	pop    ebx
c000cad6:	5e                   	pop    esi
c000cad7:	5f                   	pop    edi
c000cad8:	5d                   	pop    ebp
c000cad9:	c3                   	ret    
c000cada:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cade:	31 db                	xor    ebx,ebx
c000cae0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cae4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cae7:	84 c0                	test   al,al
c000cae9:	74 e7                	je     c000cad2 <Dbg::kprintf(char const*, ...)+0x14>
c000caeb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000caee:	3c 25                	cmp    al,0x25
c000caf0:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000caf3:	75 44                	jne    c000cb39 <Dbg::kprintf(char const*, ...)+0x7b>
c000caf5:	83 c3 02             	add    ebx,0x2
c000caf8:	8a 07                	mov    al,BYTE PTR [edi]
c000cafa:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cafd:	83 e8 25             	sub    eax,0x25
c000cb00:	3c 53                	cmp    al,0x53
c000cb02:	0f 87 c9 00 00 00    	ja     c000cbd1 <Dbg::kprintf(char const*, ...)+0x113>
c000cb08:	0f b6 c0             	movzx  eax,al
c000cb0b:	ff 24 85 b4 2e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd14c]
c000cb12:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb16:	89 c8                	mov    eax,ecx
c000cb18:	83 c1 04             	add    ecx,0x4
c000cb1b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb1f:	ff 30                	push   DWORD PTR [eax]
c000cb21:	e8 5c ff ff ff       	call   c000ca82 <Dbg::logWriteInt(unsigned int)>
c000cb26:	5f                   	pop    edi
c000cb27:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cb2b:	84 c0                	test   al,al
c000cb2d:	74 a3                	je     c000cad2 <Dbg::kprintf(char const*, ...)+0x14>
c000cb2f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cb32:	3c 25                	cmp    al,0x25
c000cb34:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cb37:	74 bc                	je     c000caf5 <Dbg::kprintf(char const*, ...)+0x37>
c000cb39:	50                   	push   eax
c000cb3a:	89 eb                	mov    ebx,ebp
c000cb3c:	e8 04 ff ff ff       	call   c000ca45 <Dbg::logc(char)>
c000cb41:	89 fd                	mov    ebp,edi
c000cb43:	58                   	pop    eax
c000cb44:	eb e1                	jmp    c000cb27 <Dbg::kprintf(char const*, ...)+0x69>
c000cb46:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb4a:	89 c8                	mov    eax,ecx
c000cb4c:	83 c1 04             	add    ecx,0x4
c000cb4f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb53:	ff 30                	push   DWORD PTR [eax]
c000cb55:	e8 0b ff ff ff       	call   c000ca65 <Dbg::logs(char*)>
c000cb5a:	58                   	pop    eax
c000cb5b:	eb ca                	jmp    c000cb27 <Dbg::kprintf(char const*, ...)+0x69>
c000cb5d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb61:	89 d0                	mov    eax,edx
c000cb63:	83 c2 04             	add    edx,0x4
c000cb66:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb6a:	ff 30                	push   DWORD PTR [eax]
c000cb6c:	e8 11 ff ff ff       	call   c000ca82 <Dbg::logWriteInt(unsigned int)>
c000cb71:	58                   	pop    eax
c000cb72:	eb b3                	jmp    c000cb27 <Dbg::kprintf(char const*, ...)+0x69>
c000cb74:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb78:	89 d0                	mov    eax,edx
c000cb7a:	83 c2 04             	add    edx,0x4
c000cb7d:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cb80:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb84:	50                   	push   eax
c000cb85:	e8 bb fe ff ff       	call   c000ca45 <Dbg::logc(char)>
c000cb8a:	58                   	pop    eax
c000cb8b:	eb 9a                	jmp    c000cb27 <Dbg::kprintf(char const*, ...)+0x69>
c000cb8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb91:	89 c8                	mov    eax,ecx
c000cb93:	83 c1 04             	add    ecx,0x4
c000cb96:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb9a:	6a 10                	push   0x10
c000cb9c:	ff 30                	push   DWORD PTR [eax]
c000cb9e:	e8 fc fe ff ff       	call   c000ca9f <Dbg::logWriteIntBase(unsigned int, int)>
c000cba3:	59                   	pop    ecx
c000cba4:	5f                   	pop    edi
c000cba5:	eb 80                	jmp    c000cb27 <Dbg::kprintf(char const*, ...)+0x69>
c000cba7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cbab:	89 d0                	mov    eax,edx
c000cbad:	83 c2 08             	add    edx,0x8
c000cbb0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cbb4:	6a 10                	push   0x10
c000cbb6:	ff 30                	push   DWORD PTR [eax]
c000cbb8:	e8 e2 fe ff ff       	call   c000ca9f <Dbg::logWriteIntBase(unsigned int, int)>
c000cbbd:	58                   	pop    eax
c000cbbe:	5a                   	pop    edx
c000cbbf:	e9 63 ff ff ff       	jmp    c000cb27 <Dbg::kprintf(char const*, ...)+0x69>
c000cbc4:	6a 25                	push   0x25
c000cbc6:	e8 7a fe ff ff       	call   c000ca45 <Dbg::logc(char)>
c000cbcb:	58                   	pop    eax
c000cbcc:	e9 56 ff ff ff       	jmp    c000cb27 <Dbg::kprintf(char const*, ...)+0x69>
c000cbd1:	6a 25                	push   0x25
c000cbd3:	e8 6d fe ff ff       	call   c000ca45 <Dbg::logc(char)>
c000cbd8:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cbdb:	50                   	push   eax
c000cbdc:	e8 64 fe ff ff       	call   c000ca45 <Dbg::logc(char)>
c000cbe1:	5a                   	pop    edx
c000cbe2:	59                   	pop    ecx
c000cbe3:	e9 3f ff ff ff       	jmp    c000cb27 <Dbg::kprintf(char const*, ...)+0x69>

c000cbe8 <File::read(unsigned long long, void*, int*)>:
c000cbe8:	53                   	push   ebx
c000cbe9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cbf1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cbf8:	3c 19                	cmp    al,0x19
c000cbfa:	77 35                	ja     c000cc31 <File::read(unsigned long long, void*, int*)+0x49>
c000cbfc:	8b 04 85 60 68 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd97a0]
c000cc03:	85 c0                	test   eax,eax
c000cc05:	74 2a                	je     c000cc31 <File::read(unsigned long long, void*, int*)+0x49>
c000cc07:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc0d:	85 c0                	test   eax,eax
c000cc0f:	74 20                	je     c000cc31 <File::read(unsigned long long, void*, int*)+0x49>
c000cc11:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc15:	74 21                	je     c000cc38 <File::read(unsigned long long, void*, int*)+0x50>
c000cc17:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc19:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc1d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc27:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc2b:	5b                   	pop    ebx
c000cc2c:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000cc2f:	ff e0                	jmp    eax
c000cc31:	b8 0b 00 00 00       	mov    eax,0xb
c000cc36:	eb 05                	jmp    c000cc3d <File::read(unsigned long long, void*, int*)+0x55>
c000cc38:	b8 05 00 00 00       	mov    eax,0x5
c000cc3d:	5b                   	pop    ebx
c000cc3e:	c3                   	ret    
c000cc3f:	90                   	nop

c000cc40 <File::write(unsigned long long, void*, int*)>:
c000cc40:	53                   	push   ebx
c000cc41:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc45:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cc49:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cc50:	3c 19                	cmp    al,0x19
c000cc52:	77 35                	ja     c000cc89 <File::write(unsigned long long, void*, int*)+0x49>
c000cc54:	8b 04 85 60 68 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd97a0]
c000cc5b:	85 c0                	test   eax,eax
c000cc5d:	74 2a                	je     c000cc89 <File::write(unsigned long long, void*, int*)+0x49>
c000cc5f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc65:	85 c0                	test   eax,eax
c000cc67:	74 20                	je     c000cc89 <File::write(unsigned long long, void*, int*)+0x49>
c000cc69:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc6d:	74 21                	je     c000cc90 <File::write(unsigned long long, void*, int*)+0x50>
c000cc6f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc71:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc75:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc83:	5b                   	pop    ebx
c000cc84:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cc87:	ff e0                	jmp    eax
c000cc89:	b8 0b 00 00 00       	mov    eax,0xb
c000cc8e:	eb 05                	jmp    c000cc95 <File::write(unsigned long long, void*, int*)+0x55>
c000cc90:	b8 05 00 00 00       	mov    eax,0x5
c000cc95:	5b                   	pop    ebx
c000cc96:	c3                   	ret    
c000cc97:	90                   	nop

c000cc98 <Directory::read(unsigned long long, void*, int*)>:
c000cc98:	53                   	push   ebx
c000cc99:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc9d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cca1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cca8:	3c 19                	cmp    al,0x19
c000ccaa:	77 35                	ja     c000cce1 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ccac:	8b 04 85 60 68 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd97a0]
c000ccb3:	85 c0                	test   eax,eax
c000ccb5:	74 2a                	je     c000cce1 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ccb7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ccbd:	85 c0                	test   eax,eax
c000ccbf:	74 20                	je     c000cce1 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ccc1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ccc5:	74 21                	je     c000cce8 <Directory::read(unsigned long long, void*, int*)+0x50>
c000ccc7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ccc9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cccd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ccd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ccd7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ccdb:	5b                   	pop    ebx
c000ccdc:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ccdf:	ff e0                	jmp    eax
c000cce1:	b8 0b 00 00 00       	mov    eax,0xb
c000cce6:	eb 05                	jmp    c000cced <Directory::read(unsigned long long, void*, int*)+0x55>
c000cce8:	b8 05 00 00 00       	mov    eax,0x5
c000cced:	5b                   	pop    ebx
c000ccee:	c3                   	ret    
c000ccef:	90                   	nop

c000ccf0 <Directory::write(unsigned long long, void*, int*)>:
c000ccf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccf4:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ccfb:	b8 0b 00 00 00       	mov    eax,0xb
c000cd00:	80 fa 19             	cmp    dl,0x19
c000cd03:	77 18                	ja     c000cd1d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cd05:	8b 14 95 60 68 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd97a0]
c000cd0c:	85 d2                	test   edx,edx
c000cd0e:	74 0d                	je     c000cd1d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cd10:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000cd17:	19 c0                	sbb    eax,eax
c000cd19:	83 e0 0a             	and    eax,0xa
c000cd1c:	40                   	inc    eax
c000cd1d:	c3                   	ret    

c000cd1e <File::isAtty()>:
c000cd1e:	31 c0                	xor    eax,eax
c000cd20:	c3                   	ret    
c000cd21:	90                   	nop

c000cd22 <Directory::isAtty()>:
c000cd22:	31 c0                	xor    eax,eax
c000cd24:	c3                   	ret    
c000cd25:	90                   	nop

c000cd26 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000cd26:	b8 0a 00 00 00       	mov    eax,0xa
c000cd2b:	c3                   	ret    

c000cd2c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000cd2c:	b8 0a 00 00 00       	mov    eax,0xa
c000cd31:	c3                   	ret    

c000cd32 <Filesystem::allocateSwapfile(char const*, int)>:
c000cd32:	31 c0                	xor    eax,eax
c000cd34:	31 d2                	xor    edx,edx
c000cd36:	c3                   	ret    
c000cd37:	90                   	nop

c000cd38 <File::~File()>:
c000cd38:	83 ec 0c             	sub    esp,0xc
c000cd3b:	ba 74 30 02 c0       	mov    edx,0xc0023074
c000cd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd44:	89 10                	mov    DWORD PTR [eax],edx
c000cd46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd4a:	83 ec 0c             	sub    esp,0xc
c000cd4d:	50                   	push   eax
c000cd4e:	e8 2f e7 ff ff       	call   c000b482 <UnixFile::~UnixFile()>
c000cd53:	83 c4 10             	add    esp,0x10
c000cd56:	90                   	nop
c000cd57:	83 c4 0c             	add    esp,0xc
c000cd5a:	c3                   	ret    
c000cd5b:	90                   	nop

c000cd5c <File::~File()>:
c000cd5c:	83 ec 0c             	sub    esp,0xc
c000cd5f:	83 ec 0c             	sub    esp,0xc
c000cd62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd66:	e8 cd ff ff ff       	call   c000cd38 <File::~File()>
c000cd6b:	83 c4 10             	add    esp,0x10
c000cd6e:	83 ec 08             	sub    esp,0x8
c000cd71:	68 14 01 00 00       	push   0x114
c000cd76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd7a:	e8 5e fc ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c000cd7f:	83 c4 10             	add    esp,0x10
c000cd82:	83 c4 0c             	add    esp,0xc
c000cd85:	c3                   	ret    

c000cd86 <Directory::~Directory()>:
c000cd86:	83 ec 0c             	sub    esp,0xc
c000cd89:	ba 90 30 02 c0       	mov    edx,0xc0023090
c000cd8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd92:	89 10                	mov    DWORD PTR [eax],edx
c000cd94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd98:	83 ec 0c             	sub    esp,0xc
c000cd9b:	50                   	push   eax
c000cd9c:	e8 e1 e6 ff ff       	call   c000b482 <UnixFile::~UnixFile()>
c000cda1:	83 c4 10             	add    esp,0x10
c000cda4:	90                   	nop
c000cda5:	83 c4 0c             	add    esp,0xc
c000cda8:	c3                   	ret    
c000cda9:	90                   	nop

c000cdaa <Directory::~Directory()>:
c000cdaa:	83 ec 0c             	sub    esp,0xc
c000cdad:	83 ec 0c             	sub    esp,0xc
c000cdb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdb4:	e8 cd ff ff ff       	call   c000cd86 <Directory::~Directory()>
c000cdb9:	83 c4 10             	add    esp,0x10
c000cdbc:	83 ec 08             	sub    esp,0x8
c000cdbf:	68 14 01 00 00       	push   0x114
c000cdc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdc8:	e8 10 fc ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c000cdcd:	83 c4 10             	add    esp,0x10
c000cdd0:	83 c4 0c             	add    esp,0xc
c000cdd3:	c3                   	ret    

c000cdd4 <Filesystem::Filesystem()>:
c000cdd4:	ba 0c 30 02 c0       	mov    edx,0xc002300c
c000cdd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cddd:	89 10                	mov    DWORD PTR [eax],edx
c000cddf:	8b 15 d4 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263d4
c000cde5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cde9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000cdec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdf0:	a3 d4 63 02 c0       	mov    ds:0xc00263d4,eax
c000cdf5:	90                   	nop
c000cdf6:	c3                   	ret    
c000cdf7:	90                   	nop

c000cdf8 <Filesystem::~Filesystem()>:
c000cdf8:	ba 0c 30 02 c0       	mov    edx,0xc002300c
c000cdfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce01:	89 10                	mov    DWORD PTR [eax],edx
c000ce03:	90                   	nop
c000ce04:	c3                   	ret    
c000ce05:	90                   	nop

c000ce06 <Filesystem::~Filesystem()>:
c000ce06:	83 ec 0c             	sub    esp,0xc
c000ce09:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ce0d:	e8 e6 ff ff ff       	call   c000cdf8 <Filesystem::~Filesystem()>
c000ce12:	83 c4 04             	add    esp,0x4
c000ce15:	83 ec 08             	sub    esp,0x8
c000ce18:	6a 08                	push   0x8
c000ce1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce1e:	e8 ba fb ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	83 c4 0c             	add    esp,0xc
c000ce29:	c3                   	ret    

c000ce2a <Fs::getcwd(Process*, char*, int)>:
c000ce2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce2e:	31 c0                	xor    eax,eax
c000ce30:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ce33:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ce37:	7d 15                	jge    c000ce4e <Fs::getcwd(Process*, char*, int)+0x24>
c000ce39:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ce3d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ce44:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ce47:	84 c9                	test   cl,cl
c000ce49:	74 06                	je     c000ce51 <Fs::getcwd(Process*, char*, int)+0x27>
c000ce4b:	40                   	inc    eax
c000ce4c:	eb e2                	jmp    c000ce30 <Fs::getcwd(Process*, char*, int)+0x6>
c000ce4e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ce51:	31 c0                	xor    eax,eax
c000ce53:	c3                   	ret    

c000ce54 <Fs::initVFS()>:
c000ce54:	83 ec 18             	sub    esp,0x18
c000ce57:	6a 08                	push   0x8
c000ce59:	e8 ff cb ff ff       	call   c0009a5d <malloc>
c000ce5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce61:	e8 42 e2 00 00       	call   c001b0a8 <FAT::FAT()>
c000ce66:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ce6d:	e8 eb cb ff ff       	call   c0009a5d <malloc>
c000ce72:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce75:	e8 3a f4 00 00       	call   c001c2b4 <ISO9660::ISO9660()>
c000ce7a:	83 c4 1c             	add    esp,0x1c
c000ce7d:	c3                   	ret    

c000ce7e <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ce7e:	55                   	push   ebp
c000ce7f:	57                   	push   edi
c000ce80:	56                   	push   esi
c000ce81:	53                   	push   ebx
c000ce82:	81 ec 10 04 00 00    	sub    esp,0x410
c000ce88:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ce8f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ce96:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ce9d:	68 00 04 00 00       	push   0x400
c000cea2:	6a 00                	push   0x0
c000cea4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000cea8:	56                   	push   esi
c000cea9:	e8 a2 38 ff ff       	call   c0000750 <memset>
c000ceae:	83 c4 10             	add    esp,0x10
c000ceb1:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ceb5:	75 0b                	jne    c000cec2 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ceb7:	50                   	push   eax
c000ceb8:	50                   	push   eax
c000ceb9:	57                   	push   edi
c000ceba:	56                   	push   esi
c000cebb:	e8 4c 39 ff ff       	call   c000080c <strcpy>
c000cec0:	eb 41                	jmp    c000cf03 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000cec2:	8a 07                	mov    al,BYTE PTR [edi]
c000cec4:	3c 5c                	cmp    al,0x5c
c000cec6:	74 04                	je     c000cecc <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000cec8:	3c 2f                	cmp    al,0x2f
c000ceca:	75 18                	jne    c000cee4 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000cecc:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000cecf:	3c 60                	cmp    al,0x60
c000ced1:	7e 03                	jle    c000ced6 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000ced3:	83 e8 20             	sub    eax,0x20
c000ced6:	88 04 24             	mov    BYTE PTR [esp],al
c000ced9:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cee0:	50                   	push   eax
c000cee1:	50                   	push   eax
c000cee2:	eb 18                	jmp    c000cefc <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000cee4:	50                   	push   eax
c000cee5:	50                   	push   eax
c000cee6:	55                   	push   ebp
c000cee7:	56                   	push   esi
c000cee8:	e8 1f 39 ff ff       	call   c000080c <strcpy>
c000ceed:	5a                   	pop    edx
c000ceee:	59                   	pop    ecx
c000ceef:	68 8a 46 02 c0       	push   0xc002468a
c000cef4:	56                   	push   esi
c000cef5:	e8 52 3a ff ff       	call   c000094c <strcat>
c000cefa:	5d                   	pop    ebp
c000cefb:	58                   	pop    eax
c000cefc:	57                   	push   edi
c000cefd:	56                   	push   esi
c000cefe:	e8 49 3a ff ff       	call   c000094c <strcat>
c000cf03:	83 c4 10             	add    esp,0x10
c000cf06:	8a 04 24             	mov    al,BYTE PTR [esp]
c000cf09:	3c 60                	cmp    al,0x60
c000cf0b:	7e 03                	jle    c000cf10 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000cf0d:	83 e8 20             	sub    eax,0x20
c000cf10:	88 04 24             	mov    BYTE PTR [esp],al
c000cf13:	88 03                	mov    BYTE PTR [ebx],al
c000cf15:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cf1c:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000cf22:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000cf26:	bf 03 00 00 00       	mov    edi,0x3
c000cf2b:	b8 03 00 00 00       	mov    eax,0x3
c000cf30:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000cf33:	84 d2                	test   dl,dl
c000cf35:	0f 84 91 00 00 00    	je     c000cfcc <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000cf3b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000cf3e:	80 fa 5c             	cmp    dl,0x5c
c000cf41:	74 05                	je     c000cf48 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000cf43:	80 fa 2f             	cmp    dl,0x2f
c000cf46:	75 12                	jne    c000cf5a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cf48:	89 c5                	mov    ebp,eax
c000cf4a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cf4f:	74 09                	je     c000cf5a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cf51:	40                   	inc    eax
c000cf52:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000cf56:	89 cf                	mov    edi,ecx
c000cf58:	eb d6                	jmp    c000cf30 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000cf5a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000cf5f:	75 5b                	jne    c000cfbc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf61:	80 fa 2e             	cmp    dl,0x2e
c000cf64:	75 56                	jne    c000cfbc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf66:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000cf6a:	74 19                	je     c000cf85 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000cf6c:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cf71:	74 53                	je     c000cfc6 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cf73:	89 f9                	mov    ecx,edi
c000cf75:	41                   	inc    ecx
c000cf76:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cf79:	80 fa 2f             	cmp    dl,0x2f
c000cf7c:	74 f7                	je     c000cf75 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cf7e:	80 fa 5c             	cmp    dl,0x5c
c000cf81:	74 f2                	je     c000cf75 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cf83:	eb d1                	jmp    c000cf56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf85:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cf8a:	74 3a                	je     c000cfc6 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cf8c:	83 f8 03             	cmp    eax,0x3
c000cf8f:	74 c5                	je     c000cf56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf91:	41                   	inc    ecx
c000cf92:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cf95:	80 fa 2f             	cmp    dl,0x2f
c000cf98:	74 f7                	je     c000cf91 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cf9a:	80 fa 5c             	cmp    dl,0x5c
c000cf9d:	74 f2                	je     c000cf91 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cf9f:	48                   	dec    eax
c000cfa0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cfa4:	75 06                	jne    c000cfac <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cfa6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cfaa:	eb f3                	jmp    c000cf9f <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000cfac:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cfb0:	74 07                	je     c000cfb9 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000cfb2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cfb6:	48                   	dec    eax
c000cfb7:	eb f3                	jmp    c000cfac <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cfb9:	40                   	inc    eax
c000cfba:	eb 9a                	jmp    c000cf56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfbc:	80 fa 2f             	cmp    dl,0x2f
c000cfbf:	74 95                	je     c000cf56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfc1:	80 fa 5c             	cmp    dl,0x5c
c000cfc4:	74 90                	je     c000cf56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfc6:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000cfc9:	40                   	inc    eax
c000cfca:	eb 8a                	jmp    c000cf56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfcc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cfd0:	83 ec 0c             	sub    esp,0xc
c000cfd3:	53                   	push   ebx
c000cfd4:	e8 93 37 ff ff       	call   c000076c <strlen>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000cfe1:	75 26                	jne    c000d009 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000cfe3:	83 ec 0c             	sub    esp,0xc
c000cfe6:	53                   	push   ebx
c000cfe7:	e8 80 37 ff ff       	call   c000076c <strlen>
c000cfec:	83 c4 10             	add    esp,0x10
c000cfef:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000cff4:	74 26                	je     c000d01c <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000cff6:	83 ec 0c             	sub    esp,0xc
c000cff9:	53                   	push   ebx
c000cffa:	e8 6d 37 ff ff       	call   c000076c <strlen>
c000cfff:	83 c4 10             	add    esp,0x10
c000d002:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d007:	eb c7                	jmp    c000cfd0 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d009:	83 ec 0c             	sub    esp,0xc
c000d00c:	53                   	push   ebx
c000d00d:	e8 5a 37 ff ff       	call   c000076c <strlen>
c000d012:	83 c4 10             	add    esp,0x10
c000d015:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d01a:	74 c7                	je     c000cfe3 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d01c:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d022:	5b                   	pop    ebx
c000d023:	5e                   	pop    esi
c000d024:	5f                   	pop    edi
c000d025:	5d                   	pop    ebp
c000d026:	c3                   	ret    
c000d027:	90                   	nop

c000d028 <File::File(char const*, Process*)>:
c000d028:	83 ec 0c             	sub    esp,0xc
c000d02b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d02f:	83 ec 08             	sub    esp,0x8
c000d032:	6a 00                	push   0x0
c000d034:	50                   	push   eax
c000d035:	e8 66 e2 ff ff       	call   c000b2a0 <UnixFile::UnixFile(int)>
c000d03a:	83 c4 10             	add    esp,0x10
c000d03d:	ba 74 30 02 c0       	mov    edx,0xc0023074
c000d042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d046:	89 10                	mov    DWORD PTR [eax],edx
c000d048:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d04c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d056:	83 c0 0d             	add    eax,0xd
c000d059:	83 ec 04             	sub    esp,0x4
c000d05c:	52                   	push   edx
c000d05d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d061:	50                   	push   eax
c000d062:	e8 17 fe ff ff       	call   c000ce7e <Fs::standardiseFiles(char*, char const*, char const*)>
c000d067:	83 c4 10             	add    esp,0x10
c000d06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d06e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d071:	8d 50 bf             	lea    edx,[eax-0x41]
c000d074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d078:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d082:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d086:	90                   	nop
c000d087:	83 c4 0c             	add    esp,0xc
c000d08a:	c3                   	ret    
c000d08b:	90                   	nop

c000d08c <File::open(FileOpenMode)>:
c000d08c:	53                   	push   ebx
c000d08d:	b8 0b 00 00 00       	mov    eax,0xb
c000d092:	83 ec 08             	sub    esp,0x8
c000d095:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d099:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d0a0:	80 fa 19             	cmp    dl,0x19
c000d0a3:	77 40                	ja     c000d0e5 <File::open(FileOpenMode)+0x59>
c000d0a5:	8b 14 95 60 68 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd97a0]
c000d0ac:	85 d2                	test   edx,edx
c000d0ae:	74 35                	je     c000d0e5 <File::open(FileOpenMode)+0x59>
c000d0b0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d0b6:	85 d2                	test   edx,edx
c000d0b8:	74 2b                	je     c000d0e5 <File::open(FileOpenMode)+0x59>
c000d0ba:	b8 06 00 00 00       	mov    eax,0x6
c000d0bf:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d0c3:	75 20                	jne    c000d0e5 <File::open(FileOpenMode)+0x59>
c000d0c5:	8b 02                	mov    eax,DWORD PTR [edx]
c000d0c7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	51                   	push   ecx
c000d0d2:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d0d5:	51                   	push   ecx
c000d0d6:	52                   	push   edx
c000d0d7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d0da:	83 c4 10             	add    esp,0x10
c000d0dd:	85 c0                	test   eax,eax
c000d0df:	75 04                	jne    c000d0e5 <File::open(FileOpenMode)+0x59>
c000d0e1:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d0e5:	83 c4 08             	add    esp,0x8
c000d0e8:	5b                   	pop    ebx
c000d0e9:	c3                   	ret    

c000d0ea <File::close()>:
c000d0ea:	53                   	push   ebx
c000d0eb:	b8 0b 00 00 00       	mov    eax,0xb
c000d0f0:	83 ec 08             	sub    esp,0x8
c000d0f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d0f7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d0fe:	80 fa 19             	cmp    dl,0x19
c000d101:	77 41                	ja     c000d144 <File::close()+0x5a>
c000d103:	8b 1c 95 60 68 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd97a0]
c000d10a:	85 db                	test   ebx,ebx
c000d10c:	74 36                	je     c000d144 <File::close()+0x5a>
c000d10e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d115:	74 2d                	je     c000d144 <File::close()+0x5a>
c000d117:	b8 05 00 00 00       	mov    eax,0x5
c000d11c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d120:	74 22                	je     c000d144 <File::close()+0x5a>
c000d122:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d126:	8b 04 95 60 68 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd97a0]
c000d12d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d133:	53                   	push   ebx
c000d134:	53                   	push   ebx
c000d135:	8b 10                	mov    edx,DWORD PTR [eax]
c000d137:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d13d:	50                   	push   eax
c000d13e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d141:	83 c4 10             	add    esp,0x10
c000d144:	83 c4 08             	add    esp,0x8
c000d147:	5b                   	pop    ebx
c000d148:	c3                   	ret    
c000d149:	90                   	nop

c000d14a <File::seek(unsigned long long)>:
c000d14a:	56                   	push   esi
c000d14b:	53                   	push   ebx
c000d14c:	b8 0b 00 00 00       	mov    eax,0xb
c000d151:	51                   	push   ecx
c000d152:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d156:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d15a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d161:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d165:	80 fa 19             	cmp    dl,0x19
c000d168:	77 31                	ja     c000d19b <File::seek(unsigned long long)+0x51>
c000d16a:	8b 14 95 60 68 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd97a0]
c000d171:	85 d2                	test   edx,edx
c000d173:	74 26                	je     c000d19b <File::seek(unsigned long long)+0x51>
c000d175:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d17b:	85 d2                	test   edx,edx
c000d17d:	74 1c                	je     c000d19b <File::seek(unsigned long long)+0x51>
c000d17f:	b8 05 00 00 00       	mov    eax,0x5
c000d184:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d188:	74 11                	je     c000d19b <File::seek(unsigned long long)+0x51>
c000d18a:	8b 02                	mov    eax,DWORD PTR [edx]
c000d18c:	53                   	push   ebx
c000d18d:	51                   	push   ecx
c000d18e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d194:	52                   	push   edx
c000d195:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d198:	83 c4 10             	add    esp,0x10
c000d19b:	5a                   	pop    edx
c000d19c:	5b                   	pop    ebx
c000d19d:	5e                   	pop    esi
c000d19e:	c3                   	ret    
c000d19f:	90                   	nop

c000d1a0 <File::tell(unsigned long long*)>:
c000d1a0:	83 ec 0c             	sub    esp,0xc
c000d1a3:	b8 0b 00 00 00       	mov    eax,0xb
c000d1a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d1ac:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d1b3:	80 fa 19             	cmp    dl,0x19
c000d1b6:	77 34                	ja     c000d1ec <File::tell(unsigned long long*)+0x4c>
c000d1b8:	8b 14 95 60 68 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd97a0]
c000d1bf:	85 d2                	test   edx,edx
c000d1c1:	74 29                	je     c000d1ec <File::tell(unsigned long long*)+0x4c>
c000d1c3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d1c9:	85 d2                	test   edx,edx
c000d1cb:	74 1f                	je     c000d1ec <File::tell(unsigned long long*)+0x4c>
c000d1cd:	b8 05 00 00 00       	mov    eax,0x5
c000d1d2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d1d6:	74 14                	je     c000d1ec <File::tell(unsigned long long*)+0x4c>
c000d1d8:	50                   	push   eax
c000d1d9:	8b 02                	mov    eax,DWORD PTR [edx]
c000d1db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d1df:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d1e5:	52                   	push   edx
c000d1e6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d1e9:	83 c4 10             	add    esp,0x10
c000d1ec:	83 c4 0c             	add    esp,0xc
c000d1ef:	c3                   	ret    

c000d1f0 <File::rewind()>:
c000d1f0:	83 ec 10             	sub    esp,0x10
c000d1f3:	6a 00                	push   0x0
c000d1f5:	6a 00                	push   0x0
c000d1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1fb:	e8 4a ff ff ff       	call   c000d14a <File::seek(unsigned long long)>
c000d200:	83 c4 1c             	add    esp,0x1c
c000d203:	c3                   	ret    

c000d204 <File::unlink()>:
c000d204:	83 ec 0c             	sub    esp,0xc
c000d207:	b8 0b 00 00 00       	mov    eax,0xb
c000d20c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d210:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d217:	80 f9 19             	cmp    cl,0x19
c000d21a:	77 2f                	ja     c000d24b <File::unlink()+0x47>
c000d21c:	8b 0c 8d 60 68 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd97a0]
c000d223:	85 c9                	test   ecx,ecx
c000d225:	74 24                	je     c000d24b <File::unlink()+0x47>
c000d227:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d22d:	85 c9                	test   ecx,ecx
c000d22f:	74 1a                	je     c000d24b <File::unlink()+0x47>
c000d231:	b8 06 00 00 00       	mov    eax,0x6
c000d236:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d23a:	75 0f                	jne    c000d24b <File::unlink()+0x47>
c000d23c:	83 c2 0d             	add    edx,0xd
c000d23f:	50                   	push   eax
c000d240:	50                   	push   eax
c000d241:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d243:	52                   	push   edx
c000d244:	51                   	push   ecx
c000d245:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d248:	83 c4 10             	add    esp,0x10
c000d24b:	83 c4 0c             	add    esp,0xc
c000d24e:	c3                   	ret    
c000d24f:	90                   	nop

c000d250 <File::rename(char const*)>:
c000d250:	83 ec 0c             	sub    esp,0xc
c000d253:	b8 0b 00 00 00       	mov    eax,0xb
c000d258:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d25c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d263:	80 f9 19             	cmp    cl,0x19
c000d266:	77 32                	ja     c000d29a <File::rename(char const*)+0x4a>
c000d268:	8b 0c 8d 60 68 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd97a0]
c000d26f:	85 c9                	test   ecx,ecx
c000d271:	74 27                	je     c000d29a <File::rename(char const*)+0x4a>
c000d273:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d279:	85 c9                	test   ecx,ecx
c000d27b:	74 1d                	je     c000d29a <File::rename(char const*)+0x4a>
c000d27d:	b8 06 00 00 00       	mov    eax,0x6
c000d282:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d286:	75 12                	jne    c000d29a <File::rename(char const*)+0x4a>
c000d288:	83 c2 0d             	add    edx,0xd
c000d28b:	50                   	push   eax
c000d28c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d28e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d292:	52                   	push   edx
c000d293:	51                   	push   ecx
c000d294:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d297:	83 c4 10             	add    esp,0x10
c000d29a:	83 c4 0c             	add    esp,0xc
c000d29d:	c3                   	ret    

c000d29e <File::chfatattr(unsigned char, unsigned char)>:
c000d29e:	57                   	push   edi
c000d29f:	b8 0b 00 00 00       	mov    eax,0xb
c000d2a4:	56                   	push   esi
c000d2a5:	53                   	push   ebx
c000d2a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d2aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d2ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d2b5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d2b9:	80 f9 19             	cmp    cl,0x19
c000d2bc:	77 37                	ja     c000d2f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d2be:	8b 0c 8d 60 68 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd97a0]
c000d2c5:	85 c9                	test   ecx,ecx
c000d2c7:	74 2c                	je     c000d2f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d2c9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d2cf:	85 c9                	test   ecx,ecx
c000d2d1:	74 22                	je     c000d2f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d2d3:	b8 06 00 00 00       	mov    eax,0x6
c000d2d8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d2dc:	75 17                	jne    c000d2f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d2de:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d2e0:	89 f0                	mov    eax,esi
c000d2e2:	83 c2 0d             	add    edx,0xd
c000d2e5:	0f b6 f0             	movzx  esi,al
c000d2e8:	0f b6 db             	movzx  ebx,bl
c000d2eb:	56                   	push   esi
c000d2ec:	53                   	push   ebx
c000d2ed:	52                   	push   edx
c000d2ee:	51                   	push   ecx
c000d2ef:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d2f2:	83 c4 10             	add    esp,0x10
c000d2f5:	5b                   	pop    ebx
c000d2f6:	5e                   	pop    esi
c000d2f7:	5f                   	pop    edi
c000d2f8:	c3                   	ret    
c000d2f9:	90                   	nop

c000d2fa <File::exists()>:
c000d2fa:	83 ec 0c             	sub    esp,0xc
c000d2fd:	31 c0                	xor    eax,eax
c000d2ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d303:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d30a:	80 f9 19             	cmp    cl,0x19
c000d30d:	77 24                	ja     c000d333 <File::exists()+0x39>
c000d30f:	8b 0c 8d 60 68 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd97a0]
c000d316:	85 c9                	test   ecx,ecx
c000d318:	74 19                	je     c000d333 <File::exists()+0x39>
c000d31a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d320:	85 c9                	test   ecx,ecx
c000d322:	74 0f                	je     c000d333 <File::exists()+0x39>
c000d324:	83 c2 0d             	add    edx,0xd
c000d327:	50                   	push   eax
c000d328:	50                   	push   eax
c000d329:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d32b:	52                   	push   edx
c000d32c:	51                   	push   ecx
c000d32d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d330:	83 c4 10             	add    esp,0x10
c000d333:	83 c4 0c             	add    esp,0xc
c000d336:	c3                   	ret    
c000d337:	90                   	nop

c000d338 <File::stat(unsigned long long*, bool*)>:
c000d338:	56                   	push   esi
c000d339:	53                   	push   ebx
c000d33a:	50                   	push   eax
c000d33b:	b8 0b 00 00 00       	mov    eax,0xb
c000d340:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d344:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d348:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d34f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d353:	80 f9 19             	cmp    cl,0x19
c000d356:	77 3d                	ja     c000d395 <File::stat(unsigned long long*, bool*)+0x5d>
c000d358:	8b 0c 8d 60 68 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd97a0]
c000d35f:	85 c9                	test   ecx,ecx
c000d361:	74 32                	je     c000d395 <File::stat(unsigned long long*, bool*)+0x5d>
c000d363:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d369:	85 c9                	test   ecx,ecx
c000d36b:	74 28                	je     c000d395 <File::stat(unsigned long long*, bool*)+0x5d>
c000d36d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d36f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d373:	74 13                	je     c000d388 <File::stat(unsigned long long*, bool*)+0x50>
c000d375:	83 ec 04             	sub    esp,0x4
c000d378:	56                   	push   esi
c000d379:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d37f:	51                   	push   ecx
c000d380:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d383:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d386:	eb 0a                	jmp    c000d392 <File::stat(unsigned long long*, bool*)+0x5a>
c000d388:	53                   	push   ebx
c000d389:	83 c2 0d             	add    edx,0xd
c000d38c:	56                   	push   esi
c000d38d:	52                   	push   edx
c000d38e:	51                   	push   ecx
c000d38f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d392:	83 c4 10             	add    esp,0x10
c000d395:	5a                   	pop    edx
c000d396:	5b                   	pop    ebx
c000d397:	5e                   	pop    esi
c000d398:	c3                   	ret    

c000d399 <Fs::setcwd(Process*, char*)>:
c000d399:	55                   	push   ebp
c000d39a:	57                   	push   edi
c000d39b:	56                   	push   esi
c000d39c:	53                   	push   ebx
c000d39d:	81 ec 20 02 00 00    	sub    esp,0x220
c000d3a3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d3aa:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d3b0:	57                   	push   edi
c000d3b1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d3b8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d3bc:	56                   	push   esi
c000d3bd:	e8 bc fa ff ff       	call   c000ce7e <Fs::standardiseFiles(char*, char const*, char const*)>
c000d3c2:	89 34 24             	mov    DWORD PTR [esp],esi
c000d3c5:	e8 a2 33 ff ff       	call   c000076c <strlen>
c000d3ca:	83 c4 10             	add    esp,0x10
c000d3cd:	83 f8 02             	cmp    eax,0x2
c000d3d0:	77 17                	ja     c000d3e9 <Fs::setcwd(Process*, char*)+0x50>
c000d3d2:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000d3d7:	83 e8 41             	sub    eax,0x41
c000d3da:	83 f8 19             	cmp    eax,0x19
c000d3dd:	76 24                	jbe    c000d403 <Fs::setcwd(Process*, char*)+0x6a>
c000d3df:	b8 03 00 00 00       	mov    eax,0x3
c000d3e4:	e9 e0 00 00 00       	jmp    c000d4c9 <Fs::setcwd(Process*, char*)+0x130>
c000d3e9:	83 ec 0c             	sub    esp,0xc
c000d3ec:	56                   	push   esi
c000d3ed:	e8 7a 33 ff ff       	call   c000076c <strlen>
c000d3f2:	83 c4 10             	add    esp,0x10
c000d3f5:	83 f8 03             	cmp    eax,0x3
c000d3f8:	75 34                	jne    c000d42e <Fs::setcwd(Process*, char*)+0x95>
c000d3fa:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d3ff:	75 2d                	jne    c000d42e <Fs::setcwd(Process*, char*)+0x95>
c000d401:	eb cf                	jmp    c000d3d2 <Fs::setcwd(Process*, char*)+0x39>
c000d403:	8b 14 85 60 68 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd97a0]
c000d40a:	b8 05 00 00 00       	mov    eax,0x5
c000d40f:	85 d2                	test   edx,edx
c000d411:	0f 84 b2 00 00 00    	je     c000d4c9 <Fs::setcwd(Process*, char*)+0x130>
c000d417:	b8 06 00 00 00       	mov    eax,0x6
c000d41c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d423:	0f 85 92 00 00 00    	jne    c000d4bb <Fs::setcwd(Process*, char*)+0x122>
c000d429:	e9 9b 00 00 00       	jmp    c000d4c9 <Fs::setcwd(Process*, char*)+0x130>
c000d42e:	83 ec 0c             	sub    esp,0xc
c000d431:	68 14 01 00 00       	push   0x114
c000d436:	e8 22 c6 ff ff       	call   c0009a5d <malloc>
c000d43b:	83 c4 0c             	add    esp,0xc
c000d43e:	89 c3                	mov    ebx,eax
c000d440:	55                   	push   ebp
c000d441:	56                   	push   esi
c000d442:	50                   	push   eax
c000d443:	e8 e0 fb ff ff       	call   c000d028 <File::File(char const*, Process*)>
c000d448:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d44d:	83 c4 0c             	add    esp,0xc
c000d450:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d454:	50                   	push   eax
c000d455:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d459:	50                   	push   eax
c000d45a:	53                   	push   ebx
c000d45b:	e8 d8 fe ff ff       	call   c000d338 <File::stat(unsigned long long*, bool*)>
c000d460:	83 c4 10             	add    esp,0x10
c000d463:	83 f8 02             	cmp    eax,0x2
c000d466:	74 04                	je     c000d46c <Fs::setcwd(Process*, char*)+0xd3>
c000d468:	85 c0                	test   eax,eax
c000d46a:	74 1c                	je     c000d488 <Fs::setcwd(Process*, char*)+0xef>
c000d46c:	b8 01 00 00 00       	mov    eax,0x1
c000d471:	85 db                	test   ebx,ebx
c000d473:	74 54                	je     c000d4c9 <Fs::setcwd(Process*, char*)+0x130>
c000d475:	83 ec 0c             	sub    esp,0xc
c000d478:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d47a:	53                   	push   ebx
c000d47b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d47e:	83 c4 10             	add    esp,0x10
c000d481:	b8 01 00 00 00       	mov    eax,0x1
c000d486:	eb 41                	jmp    c000d4c9 <Fs::setcwd(Process*, char*)+0x130>
c000d488:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d48d:	75 1c                	jne    c000d4ab <Fs::setcwd(Process*, char*)+0x112>
c000d48f:	b8 02 00 00 00       	mov    eax,0x2
c000d494:	85 db                	test   ebx,ebx
c000d496:	74 31                	je     c000d4c9 <Fs::setcwd(Process*, char*)+0x130>
c000d498:	83 ec 0c             	sub    esp,0xc
c000d49b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d49d:	53                   	push   ebx
c000d49e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d4a1:	83 c4 10             	add    esp,0x10
c000d4a4:	b8 02 00 00 00       	mov    eax,0x2
c000d4a9:	eb 1e                	jmp    c000d4c9 <Fs::setcwd(Process*, char*)+0x130>
c000d4ab:	85 db                	test   ebx,ebx
c000d4ad:	74 0c                	je     c000d4bb <Fs::setcwd(Process*, char*)+0x122>
c000d4af:	83 ec 0c             	sub    esp,0xc
c000d4b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4b4:	53                   	push   ebx
c000d4b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d4b8:	83 c4 10             	add    esp,0x10
c000d4bb:	50                   	push   eax
c000d4bc:	50                   	push   eax
c000d4bd:	56                   	push   esi
c000d4be:	57                   	push   edi
c000d4bf:	e8 48 33 ff ff       	call   c000080c <strcpy>
c000d4c4:	83 c4 10             	add    esp,0x10
c000d4c7:	31 c0                	xor    eax,eax
c000d4c9:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d4cf:	5b                   	pop    ebx
c000d4d0:	5e                   	pop    esi
c000d4d1:	5f                   	pop    edi
c000d4d2:	5d                   	pop    ebp
c000d4d3:	c3                   	ret    

c000d4d4 <Directory::Directory(char const*, Process*)>:
c000d4d4:	83 ec 0c             	sub    esp,0xc
c000d4d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4db:	83 ec 08             	sub    esp,0x8
c000d4de:	6a 00                	push   0x0
c000d4e0:	50                   	push   eax
c000d4e1:	e8 ba dd ff ff       	call   c000b2a0 <UnixFile::UnixFile(int)>
c000d4e6:	83 c4 10             	add    esp,0x10
c000d4e9:	ba 90 30 02 c0       	mov    edx,0xc0023090
c000d4ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4f2:	89 10                	mov    DWORD PTR [eax],edx
c000d4f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d4f8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d4fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d502:	83 c0 0d             	add    eax,0xd
c000d505:	83 ec 04             	sub    esp,0x4
c000d508:	52                   	push   edx
c000d509:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d50d:	50                   	push   eax
c000d50e:	e8 6b f9 ff ff       	call   c000ce7e <Fs::standardiseFiles(char*, char const*, char const*)>
c000d513:	83 c4 10             	add    esp,0x10
c000d516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d51a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d51d:	8d 50 bf             	lea    edx,[eax-0x41]
c000d520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d524:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d52a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d52e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d532:	90                   	nop
c000d533:	83 c4 0c             	add    esp,0xc
c000d536:	c3                   	ret    
c000d537:	90                   	nop

c000d538 <Directory::open()>:
c000d538:	53                   	push   ebx
c000d539:	b8 0b 00 00 00       	mov    eax,0xb
c000d53e:	83 ec 08             	sub    esp,0x8
c000d541:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d545:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d54c:	80 fa 19             	cmp    dl,0x19
c000d54f:	77 3d                	ja     c000d58e <Directory::open()+0x56>
c000d551:	8b 14 95 60 68 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd97a0]
c000d558:	85 d2                	test   edx,edx
c000d55a:	74 32                	je     c000d58e <Directory::open()+0x56>
c000d55c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d562:	85 d2                	test   edx,edx
c000d564:	74 28                	je     c000d58e <Directory::open()+0x56>
c000d566:	b8 06 00 00 00       	mov    eax,0x6
c000d56b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d56f:	75 1d                	jne    c000d58e <Directory::open()+0x56>
c000d571:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d577:	50                   	push   eax
c000d578:	8b 02                	mov    eax,DWORD PTR [edx]
c000d57a:	51                   	push   ecx
c000d57b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d57e:	51                   	push   ecx
c000d57f:	52                   	push   edx
c000d580:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d583:	83 c4 10             	add    esp,0x10
c000d586:	85 c0                	test   eax,eax
c000d588:	75 04                	jne    c000d58e <Directory::open()+0x56>
c000d58a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d58e:	83 c4 08             	add    esp,0x8
c000d591:	5b                   	pop    ebx
c000d592:	c3                   	ret    
c000d593:	90                   	nop

c000d594 <Directory::close()>:
c000d594:	53                   	push   ebx
c000d595:	b8 0b 00 00 00       	mov    eax,0xb
c000d59a:	83 ec 08             	sub    esp,0x8
c000d59d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d5a1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d5a8:	80 fa 19             	cmp    dl,0x19
c000d5ab:	77 41                	ja     c000d5ee <Directory::close()+0x5a>
c000d5ad:	8b 1c 95 60 68 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd97a0]
c000d5b4:	85 db                	test   ebx,ebx
c000d5b6:	74 36                	je     c000d5ee <Directory::close()+0x5a>
c000d5b8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d5bf:	74 2d                	je     c000d5ee <Directory::close()+0x5a>
c000d5c1:	b8 05 00 00 00       	mov    eax,0x5
c000d5c6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d5ca:	74 22                	je     c000d5ee <Directory::close()+0x5a>
c000d5cc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d5d0:	8b 04 95 60 68 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd97a0]
c000d5d7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d5dd:	53                   	push   ebx
c000d5de:	53                   	push   ebx
c000d5df:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5e1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d5e7:	50                   	push   eax
c000d5e8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d5eb:	83 c4 10             	add    esp,0x10
c000d5ee:	83 c4 08             	add    esp,0x8
c000d5f1:	5b                   	pop    ebx
c000d5f2:	c3                   	ret    
c000d5f3:	90                   	nop

c000d5f4 <Directory::unlink()>:
c000d5f4:	83 ec 0c             	sub    esp,0xc
c000d5f7:	b8 0b 00 00 00       	mov    eax,0xb
c000d5fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d600:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d607:	80 f9 19             	cmp    cl,0x19
c000d60a:	77 2f                	ja     c000d63b <Directory::unlink()+0x47>
c000d60c:	8b 0c 8d 60 68 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd97a0]
c000d613:	85 c9                	test   ecx,ecx
c000d615:	74 24                	je     c000d63b <Directory::unlink()+0x47>
c000d617:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d61d:	85 c9                	test   ecx,ecx
c000d61f:	74 1a                	je     c000d63b <Directory::unlink()+0x47>
c000d621:	b8 06 00 00 00       	mov    eax,0x6
c000d626:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d62a:	75 0f                	jne    c000d63b <Directory::unlink()+0x47>
c000d62c:	83 c2 0d             	add    edx,0xd
c000d62f:	50                   	push   eax
c000d630:	50                   	push   eax
c000d631:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d633:	52                   	push   edx
c000d634:	51                   	push   ecx
c000d635:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d638:	83 c4 10             	add    esp,0x10
c000d63b:	83 c4 0c             	add    esp,0xc
c000d63e:	c3                   	ret    
c000d63f:	90                   	nop

c000d640 <Directory::rename(char const*)>:
c000d640:	83 ec 0c             	sub    esp,0xc
c000d643:	b8 0b 00 00 00       	mov    eax,0xb
c000d648:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d64c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d653:	80 f9 19             	cmp    cl,0x19
c000d656:	77 32                	ja     c000d68a <Directory::rename(char const*)+0x4a>
c000d658:	8b 0c 8d 60 68 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd97a0]
c000d65f:	85 c9                	test   ecx,ecx
c000d661:	74 27                	je     c000d68a <Directory::rename(char const*)+0x4a>
c000d663:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d669:	85 c9                	test   ecx,ecx
c000d66b:	74 1d                	je     c000d68a <Directory::rename(char const*)+0x4a>
c000d66d:	b8 06 00 00 00       	mov    eax,0x6
c000d672:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d676:	75 12                	jne    c000d68a <Directory::rename(char const*)+0x4a>
c000d678:	83 c2 0d             	add    edx,0xd
c000d67b:	50                   	push   eax
c000d67c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d67e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d682:	52                   	push   edx
c000d683:	51                   	push   ecx
c000d684:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d687:	83 c4 10             	add    esp,0x10
c000d68a:	83 c4 0c             	add    esp,0xc
c000d68d:	c3                   	ret    

c000d68e <Directory::exists()>:
c000d68e:	83 ec 0c             	sub    esp,0xc
c000d691:	31 c0                	xor    eax,eax
c000d693:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d697:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d69e:	80 f9 19             	cmp    cl,0x19
c000d6a1:	77 24                	ja     c000d6c7 <Directory::exists()+0x39>
c000d6a3:	8b 0c 8d 60 68 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd97a0]
c000d6aa:	85 c9                	test   ecx,ecx
c000d6ac:	74 19                	je     c000d6c7 <Directory::exists()+0x39>
c000d6ae:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d6b4:	85 c9                	test   ecx,ecx
c000d6b6:	74 0f                	je     c000d6c7 <Directory::exists()+0x39>
c000d6b8:	83 c2 0d             	add    edx,0xd
c000d6bb:	50                   	push   eax
c000d6bc:	50                   	push   eax
c000d6bd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d6bf:	52                   	push   edx
c000d6c0:	51                   	push   ecx
c000d6c1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d6c4:	83 c4 10             	add    esp,0x10
c000d6c7:	83 c4 0c             	add    esp,0xc
c000d6ca:	c3                   	ret    
c000d6cb:	90                   	nop

c000d6cc <Directory::read(dirent*)>:
c000d6cc:	83 ec 1c             	sub    esp,0x1c
c000d6cf:	b8 0b 00 00 00       	mov    eax,0xb
c000d6d4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d6d8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d6df:	80 fa 19             	cmp    dl,0x19
c000d6e2:	77 30                	ja     c000d714 <Directory::read(dirent*)+0x48>
c000d6e4:	8b 14 95 60 68 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd97a0]
c000d6eb:	85 d2                	test   edx,edx
c000d6ed:	74 25                	je     c000d714 <Directory::read(dirent*)+0x48>
c000d6ef:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d6f6:	74 1c                	je     c000d714 <Directory::read(dirent*)+0x48>
c000d6f8:	83 ec 0c             	sub    esp,0xc
c000d6fb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d6fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d701:	52                   	push   edx
c000d702:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d706:	6a 00                	push   0x0
c000d708:	68 10 01 00 00       	push   0x110
c000d70d:	51                   	push   ecx
c000d70e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d711:	83 c4 20             	add    esp,0x20
c000d714:	83 c4 1c             	add    esp,0x1c
c000d717:	c3                   	ret    

c000d718 <Directory::create()>:
c000d718:	83 ec 0c             	sub    esp,0xc
c000d71b:	b8 0b 00 00 00       	mov    eax,0xb
c000d720:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d724:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d72b:	80 f9 19             	cmp    cl,0x19
c000d72e:	77 2f                	ja     c000d75f <Directory::create()+0x47>
c000d730:	8b 0c 8d 60 68 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd97a0]
c000d737:	85 c9                	test   ecx,ecx
c000d739:	74 24                	je     c000d75f <Directory::create()+0x47>
c000d73b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d741:	85 c9                	test   ecx,ecx
c000d743:	74 1a                	je     c000d75f <Directory::create()+0x47>
c000d745:	b8 06 00 00 00       	mov    eax,0x6
c000d74a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d74e:	75 0f                	jne    c000d75f <Directory::create()+0x47>
c000d750:	83 c2 0d             	add    edx,0xd
c000d753:	50                   	push   eax
c000d754:	50                   	push   eax
c000d755:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d757:	52                   	push   edx
c000d758:	51                   	push   ecx
c000d759:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d75c:	83 c4 10             	add    esp,0x10
c000d75f:	83 c4 0c             	add    esp,0xc
c000d762:	c3                   	ret    
c000d763:	90                   	nop

c000d764 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d764:	b8 0a 00 00 00       	mov    eax,0xa
c000d769:	c3                   	ret    

c000d76a <Bus::Bus(char const*)>:
c000d76a:	83 ec 0c             	sub    esp,0xc
c000d76d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d771:	83 ec 08             	sub    esp,0x8
c000d774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d778:	50                   	push   eax
c000d779:	e8 88 09 00 00       	call   c000e106 <Device::Device(char const*)>
c000d77e:	83 c4 10             	add    esp,0x10
c000d781:	ba ac 30 02 c0       	mov    edx,0xc00230ac
c000d786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d78a:	89 10                	mov    DWORD PTR [eax],edx
c000d78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d790:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d79a:	90                   	nop
c000d79b:	83 c4 0c             	add    esp,0xc
c000d79e:	c3                   	ret    
c000d79f:	90                   	nop

c000d7a0 <Bus::~Bus()>:
c000d7a0:	83 ec 0c             	sub    esp,0xc
c000d7a3:	ba ac 30 02 c0       	mov    edx,0xc00230ac
c000d7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ac:	89 10                	mov    DWORD PTR [eax],edx
c000d7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b2:	83 ec 0c             	sub    esp,0xc
c000d7b5:	50                   	push   eax
c000d7b6:	e8 15 06 00 00       	call   c000ddd0 <Device::~Device()>
c000d7bb:	83 c4 10             	add    esp,0x10
c000d7be:	90                   	nop
c000d7bf:	83 c4 0c             	add    esp,0xc
c000d7c2:	c3                   	ret    
c000d7c3:	90                   	nop

c000d7c4 <Bus::~Bus()>:
c000d7c4:	83 ec 0c             	sub    esp,0xc
c000d7c7:	83 ec 0c             	sub    esp,0xc
c000d7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ce:	e8 cd ff ff ff       	call   c000d7a0 <Bus::~Bus()>
c000d7d3:	83 c4 10             	add    esp,0x10
c000d7d6:	83 ec 08             	sub    esp,0x8
c000d7d9:	68 58 01 00 00       	push   0x158
c000d7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e2:	e8 f6 f1 ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c000d7e7:	83 c4 10             	add    esp,0x10
c000d7ea:	83 c4 0c             	add    esp,0xc
c000d7ed:	c3                   	ret    

c000d7ee <Buzzer::Buzzer(char const*)>:
c000d7ee:	83 ec 0c             	sub    esp,0xc
c000d7f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f5:	83 ec 08             	sub    esp,0x8
c000d7f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7fc:	50                   	push   eax
c000d7fd:	e8 04 09 00 00       	call   c000e106 <Device::Device(char const*)>
c000d802:	83 c4 10             	add    esp,0x10
c000d805:	ba d8 30 02 c0       	mov    edx,0xc00230d8
c000d80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80e:	89 10                	mov    DWORD PTR [eax],edx
c000d810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d814:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000d81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d822:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000d82c:	90                   	nop
c000d82d:	83 c4 0c             	add    esp,0xc
c000d830:	c3                   	ret    
c000d831:	90                   	nop

c000d832 <Buzzer::~Buzzer()>:
c000d832:	83 ec 0c             	sub    esp,0xc
c000d835:	ba d8 30 02 c0       	mov    edx,0xc00230d8
c000d83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83e:	89 10                	mov    DWORD PTR [eax],edx
c000d840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d844:	83 ec 0c             	sub    esp,0xc
c000d847:	50                   	push   eax
c000d848:	e8 83 05 00 00       	call   c000ddd0 <Device::~Device()>
c000d84d:	83 c4 10             	add    esp,0x10
c000d850:	90                   	nop
c000d851:	83 c4 0c             	add    esp,0xc
c000d854:	c3                   	ret    
c000d855:	90                   	nop

c000d856 <Buzzer::~Buzzer()>:
c000d856:	83 ec 0c             	sub    esp,0xc
c000d859:	83 ec 0c             	sub    esp,0xc
c000d85c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d860:	e8 cd ff ff ff       	call   c000d832 <Buzzer::~Buzzer()>
c000d865:	83 c4 10             	add    esp,0x10
c000d868:	83 ec 08             	sub    esp,0x8
c000d86b:	68 5c 01 00 00       	push   0x15c
c000d870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d874:	e8 64 f1 ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c000d879:	83 c4 10             	add    esp,0x10
c000d87c:	83 c4 0c             	add    esp,0xc
c000d87f:	c3                   	ret    

c000d880 <Buzzer::stop()>:
c000d880:	83 ec 14             	sub    esp,0x14
c000d883:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d887:	8b 10                	mov    edx,DWORD PTR [eax]
c000d889:	6a 00                	push   0x0
c000d88b:	50                   	push   eax
c000d88c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d88f:	83 c4 1c             	add    esp,0x1c
c000d892:	c3                   	ret    

c000d893 <beepThread(void*)>:
c000d893:	53                   	push   ebx
c000d894:	83 ec 08             	sub    esp,0x8
c000d897:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000d89c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d8a0:	48                   	dec    eax
c000d8a1:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c000d8a6:	75 01                	jne    c000d8a9 <beepThread(void*)+0x16>
c000d8a8:	fb                   	sti    
c000d8a9:	50                   	push   eax
c000d8aa:	50                   	push   eax
c000d8ab:	b8 40 42 0f 00       	mov    eax,0xf4240
c000d8b0:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000d8b6:	52                   	push   edx
c000d8b7:	50                   	push   eax
c000d8b8:	e8 2c aa 00 00       	call   c00182e9 <nanoSleep(unsigned long long)>
c000d8bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d8c0:	e8 bb ff ff ff       	call   c000d880 <Buzzer::stop()>
c000d8c5:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000d8cd:	83 c4 18             	add    esp,0x18
c000d8d0:	5b                   	pop    ebx
c000d8d1:	e9 0f a9 00 00       	jmp    c00181e5 <blockTask(TaskState)>

c000d8d6 <Buzzer::beep(int, int, bool)>:
c000d8d6:	57                   	push   edi
c000d8d7:	56                   	push   esi
c000d8d8:	53                   	push   ebx
c000d8d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d8dd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d8e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d8e5:	52                   	push   edx
c000d8e6:	52                   	push   edx
c000d8e7:	8b 06                	mov    eax,DWORD PTR [esi]
c000d8e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8ed:	56                   	push   esi
c000d8ee:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d8f1:	83 c4 10             	add    esp,0x10
c000d8f4:	89 f8                	mov    eax,edi
c000d8f6:	84 c0                	test   al,al
c000d8f8:	74 1f                	je     c000d919 <Buzzer::beep(int, int, bool)+0x43>
c000d8fa:	50                   	push   eax
c000d8fb:	50                   	push   eax
c000d8fc:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000d902:	99                   	cdq    
c000d903:	52                   	push   edx
c000d904:	50                   	push   eax
c000d905:	e8 df a9 00 00       	call   c00182e9 <nanoSleep(unsigned long long)>
c000d90a:	83 c4 10             	add    esp,0x10
c000d90d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000d911:	5b                   	pop    ebx
c000d912:	5e                   	pop    esi
c000d913:	5f                   	pop    edi
c000d914:	e9 67 ff ff ff       	jmp    c000d880 <Buzzer::stop()>
c000d919:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000d91f:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000d924:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000d92c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000d930:	c7 44 24 14 93 d8 00 c0 	mov    DWORD PTR [esp+0x14],0xc000d893
c000d938:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d93c:	5b                   	pop    ebx
c000d93d:	5e                   	pop    esi
c000d93e:	5f                   	pop    edi
c000d93f:	e9 a6 a4 00 00       	jmp    c0017dea <Process::createThread(void (*)(void*), void*, int)>

c000d944 <User::loadClockSettings(int)>:
c000d944:	53                   	push   ebx
c000d945:	83 ec 14             	sub    esp,0x14
c000d948:	68 14 01 00 00       	push   0x114
c000d94d:	e8 0b c1 ff ff       	call   c0009a5d <malloc>
c000d952:	83 c4 0c             	add    esp,0xc
c000d955:	89 c3                	mov    ebx,eax
c000d957:	ff 35 90 77 02 c0    	push   DWORD PTR ds:0xc0027790
c000d95d:	68 00 31 02 c0       	push   0xc0023100
c000d962:	50                   	push   eax
c000d963:	e8 c0 f6 ff ff       	call   c000d028 <File::File(char const*, Process*)>
c000d968:	58                   	pop    eax
c000d969:	5a                   	pop    edx
c000d96a:	6a 01                	push   0x1
c000d96c:	53                   	push   ebx
c000d96d:	e8 1a f7 ff ff       	call   c000d08c <File::open(FileOpenMode)>
c000d972:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d975:	e8 70 f7 ff ff       	call   c000d0ea <File::close()>
c000d97a:	83 c4 10             	add    esp,0x10
c000d97d:	85 db                	test   ebx,ebx
c000d97f:	74 0f                	je     c000d990 <User::loadClockSettings(int)+0x4c>
c000d981:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d983:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d987:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d98a:	83 c4 08             	add    esp,0x8
c000d98d:	5b                   	pop    ebx
c000d98e:	ff e0                	jmp    eax
c000d990:	83 c4 08             	add    esp,0x8
c000d993:	5b                   	pop    ebx
c000d994:	c3                   	ret    
c000d995:	90                   	nop

c000d996 <Clock::Clock(char const*)>:
c000d996:	83 ec 0c             	sub    esp,0xc
c000d999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d99d:	83 ec 08             	sub    esp,0x8
c000d9a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9a4:	50                   	push   eax
c000d9a5:	e8 5c 07 00 00       	call   c000e106 <Device::Device(char const*)>
c000d9aa:	83 c4 10             	add    esp,0x10
c000d9ad:	ba 28 31 02 c0       	mov    edx,0xc0023128
c000d9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9b6:	89 10                	mov    DWORD PTR [eax],edx
c000d9b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9bc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000d9c6:	90                   	nop
c000d9c7:	83 c4 0c             	add    esp,0xc
c000d9ca:	c3                   	ret    
c000d9cb:	90                   	nop

c000d9cc <Clock::~Clock()>:
c000d9cc:	83 ec 0c             	sub    esp,0xc
c000d9cf:	ba 28 31 02 c0       	mov    edx,0xc0023128
c000d9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9d8:	89 10                	mov    DWORD PTR [eax],edx
c000d9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9de:	83 ec 0c             	sub    esp,0xc
c000d9e1:	50                   	push   eax
c000d9e2:	e8 e9 03 00 00       	call   c000ddd0 <Device::~Device()>
c000d9e7:	83 c4 10             	add    esp,0x10
c000d9ea:	90                   	nop
c000d9eb:	83 c4 0c             	add    esp,0xc
c000d9ee:	c3                   	ret    
c000d9ef:	90                   	nop

c000d9f0 <Clock::~Clock()>:
c000d9f0:	83 ec 0c             	sub    esp,0xc
c000d9f3:	83 ec 0c             	sub    esp,0xc
c000d9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9fa:	e8 cd ff ff ff       	call   c000d9cc <Clock::~Clock()>
c000d9ff:	83 c4 10             	add    esp,0x10
c000da02:	83 ec 08             	sub    esp,0x8
c000da05:	68 58 01 00 00       	push   0x158
c000da0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da0e:	e8 ca ef ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c000da13:	83 c4 10             	add    esp,0x10
c000da16:	83 c4 0c             	add    esp,0xc
c000da19:	c3                   	ret    

c000da1a <Clock::timeInSecondsLocal()>:
c000da1a:	53                   	push   ebx
c000da1b:	83 ec 14             	sub    esp,0x14
c000da1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da22:	8b 10                	mov    edx,DWORD PTR [eax]
c000da24:	50                   	push   eax
c000da25:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000da28:	0f b6 0d dc 63 02 c0 	movzx  ecx,BYTE PTR ds:0xc00263dc
c000da2f:	03 0d e0 63 02 c0    	add    ecx,DWORD PTR ds:0xc00263e0
c000da35:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000da3b:	89 cb                	mov    ebx,ecx
c000da3d:	c1 fb 1f             	sar    ebx,0x1f
c000da40:	01 c8                	add    eax,ecx
c000da42:	11 da                	adc    edx,ebx
c000da44:	83 c4 10             	add    esp,0x10
c000da47:	31 c9                	xor    ecx,ecx
c000da49:	80 3d dd 63 02 c0 00 	cmp    BYTE PTR ds:0xc00263dd,0x0
c000da50:	74 05                	je     c000da57 <Clock::timeInSecondsLocal()+0x3d>
c000da52:	b9 08 07 00 00       	mov    ecx,0x708
c000da57:	31 db                	xor    ebx,ebx
c000da59:	01 c8                	add    eax,ecx
c000da5b:	11 da                	adc    edx,ebx
c000da5d:	83 c4 08             	add    esp,0x8
c000da60:	5b                   	pop    ebx
c000da61:	c3                   	ret    

c000da62 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000da62:	57                   	push   edi
c000da63:	56                   	push   esi
c000da64:	53                   	push   ebx
c000da65:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000da69:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000da6d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da6f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000da73:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000da76:	0f b6 05 dc 63 02 c0 	movzx  eax,BYTE PTR ds:0xc00263dc
c000da7d:	03 05 e0 63 02 c0    	add    eax,DWORD PTR ds:0xc00263e0
c000da83:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000da89:	99                   	cdq    
c000da8a:	29 c6                	sub    esi,eax
c000da8c:	19 d7                	sbb    edi,edx
c000da8e:	89 f0                	mov    eax,esi
c000da90:	89 fa                	mov    edx,edi
c000da92:	31 f6                	xor    esi,esi
c000da94:	80 3d dd 63 02 c0 00 	cmp    BYTE PTR ds:0xc00263dd,0x0
c000da9b:	74 05                	je     c000daa2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000da9d:	be 08 07 00 00       	mov    esi,0x708
c000daa2:	31 ff                	xor    edi,edi
c000daa4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000daa8:	29 f0                	sub    eax,esi
c000daaa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000daae:	19 fa                	sbb    edx,edi
c000dab0:	89 d8                	mov    eax,ebx
c000dab2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dab6:	5b                   	pop    ebx
c000dab7:	5e                   	pop    esi
c000dab8:	5f                   	pop    edi
c000dab9:	ff e0                	jmp    eax

c000dabb <datetimeToSeconds(datetime_t)>:
c000dabb:	55                   	push   ebp
c000dabc:	57                   	push   edi
c000dabd:	56                   	push   esi
c000dabe:	53                   	push   ebx
c000dabf:	83 ec 14             	sub    esp,0x14
c000dac2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dac6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000daca:	89 d3                	mov    ebx,edx
c000dacc:	0f b6 c6             	movzx  eax,dh
c000dacf:	c1 eb 10             	shr    ebx,0x10
c000dad2:	48                   	dec    eax
c000dad3:	66 81 eb 6c 07       	sub    bx,0x76c
c000dad8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000dadc:	0f b6 f5             	movzx  esi,ch
c000dadf:	89 cf                	mov    edi,ecx
c000dae1:	6b f6 3c             	imul   esi,esi,0x3c
c000dae4:	c1 ef 10             	shr    edi,0x10
c000dae7:	0f b6 c9             	movzx  ecx,cl
c000daea:	89 f8                	mov    eax,edi
c000daec:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000daf2:	0f b6 f8             	movzx  edi,al
c000daf5:	0f b6 d2             	movzx  edx,dl
c000daf8:	01 fe                	add    esi,edi
c000dafa:	01 f1                	add    ecx,esi
c000dafc:	0f b7 f3             	movzx  esi,bx
c000daff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000db03:	c1 f9 1f             	sar    ecx,0x1f
c000db06:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000db0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000db0f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000db14:	8b 0c 8d 60 31 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcea0]
c000db1b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000db1f:	76 29                	jbe    c000db4a <datetimeToSeconds(datetime_t)+0x8f>
c000db21:	f6 c3 03             	test   bl,0x3
c000db24:	75 24                	jne    c000db4a <datetimeToSeconds(datetime_t)+0x8f>
c000db26:	31 d2                	xor    edx,edx
c000db28:	bf 64 00 00 00       	mov    edi,0x64
c000db2d:	89 d8                	mov    eax,ebx
c000db2f:	66 f7 f7             	div    di
c000db32:	66 85 d2             	test   dx,dx
c000db35:	75 12                	jne    c000db49 <datetimeToSeconds(datetime_t)+0x8e>
c000db37:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000db3d:	bf 90 01 00 00       	mov    edi,0x190
c000db42:	99                   	cdq    
c000db43:	f7 ff                	idiv   edi
c000db45:	85 d2                	test   edx,edx
c000db47:	75 01                	jne    c000db4a <datetimeToSeconds(datetime_t)+0x8f>
c000db49:	41                   	inc    ecx
c000db4a:	66 83 fb 46          	cmp    bx,0x46
c000db4e:	76 45                	jbe    c000db95 <datetimeToSeconds(datetime_t)+0xda>
c000db50:	bb 46 00 00 00       	mov    ebx,0x46
c000db55:	bf 64 00 00 00       	mov    edi,0x64
c000db5a:	bd 90 01 00 00       	mov    ebp,0x190
c000db5f:	b8 6d 01 00 00       	mov    eax,0x16d
c000db64:	f6 c3 03             	test   bl,0x3
c000db67:	75 23                	jne    c000db8c <datetimeToSeconds(datetime_t)+0xd1>
c000db69:	89 d8                	mov    eax,ebx
c000db6b:	99                   	cdq    
c000db6c:	f7 ff                	idiv   edi
c000db6e:	b8 6e 01 00 00       	mov    eax,0x16e
c000db73:	85 d2                	test   edx,edx
c000db75:	75 15                	jne    c000db8c <datetimeToSeconds(datetime_t)+0xd1>
c000db77:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000db7d:	99                   	cdq    
c000db7e:	f7 fd                	idiv   ebp
c000db80:	83 fa 01             	cmp    edx,0x1
c000db83:	19 c0                	sbb    eax,eax
c000db85:	f7 d0                	not    eax
c000db87:	05 6e 01 00 00       	add    eax,0x16e
c000db8c:	01 c1                	add    ecx,eax
c000db8e:	43                   	inc    ebx
c000db8f:	39 f3                	cmp    ebx,esi
c000db91:	7c cc                	jl     c000db5f <datetimeToSeconds(datetime_t)+0xa4>
c000db93:	eb 35                	jmp    c000dbca <datetimeToSeconds(datetime_t)+0x10f>
c000db95:	74 33                	je     c000dbca <datetimeToSeconds(datetime_t)+0x10f>
c000db97:	b8 45 00 00 00       	mov    eax,0x45
c000db9c:	89 c2                	mov    edx,eax
c000db9e:	83 e2 03             	and    edx,0x3
c000dba1:	39 f0                	cmp    eax,esi
c000dba3:	7e 0f                	jle    c000dbb4 <datetimeToSeconds(datetime_t)+0xf9>
c000dba5:	83 fa 01             	cmp    edx,0x1
c000dba8:	19 d2                	sbb    edx,edx
c000dbaa:	48                   	dec    eax
c000dbab:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000dbb2:	eb e8                	jmp    c000db9c <datetimeToSeconds(datetime_t)+0xe1>
c000dbb4:	b8 6d 01 00 00       	mov    eax,0x16d
c000dbb9:	85 d2                	test   edx,edx
c000dbbb:	75 0b                	jne    c000dbc8 <datetimeToSeconds(datetime_t)+0x10d>
c000dbbd:	66 83 fb 01          	cmp    bx,0x1
c000dbc1:	19 c0                	sbb    eax,eax
c000dbc3:	05 6e 01 00 00       	add    eax,0x16e
c000dbc8:	29 c1                	sub    ecx,eax
c000dbca:	b8 80 51 01 00       	mov    eax,0x15180
c000dbcf:	f7 e9                	imul   ecx
c000dbd1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dbd5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000dbd9:	83 c4 14             	add    esp,0x14
c000dbdc:	5b                   	pop    ebx
c000dbdd:	5e                   	pop    esi
c000dbde:	5f                   	pop    edi
c000dbdf:	5d                   	pop    ebp
c000dbe0:	c3                   	ret    
c000dbe1:	90                   	nop

c000dbe2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000dbe2:	57                   	push   edi
c000dbe3:	56                   	push   esi
c000dbe4:	53                   	push   ebx
c000dbe5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dbe9:	8b 06                	mov    eax,DWORD PTR [esi]
c000dbeb:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000dbee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbf2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbf6:	e8 c0 fe ff ff       	call   c000dabb <datetimeToSeconds(datetime_t)>
c000dbfb:	59                   	pop    ecx
c000dbfc:	0f b6 0d dc 63 02 c0 	movzx  ecx,BYTE PTR ds:0xc00263dc
c000dc03:	5b                   	pop    ebx
c000dc04:	03 0d e0 63 02 c0    	add    ecx,DWORD PTR ds:0xc00263e0
c000dc0a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dc10:	89 cb                	mov    ebx,ecx
c000dc12:	c1 fb 1f             	sar    ebx,0x1f
c000dc15:	29 c8                	sub    eax,ecx
c000dc17:	19 da                	sbb    edx,ebx
c000dc19:	31 c9                	xor    ecx,ecx
c000dc1b:	80 3d dd 63 02 c0 00 	cmp    BYTE PTR ds:0xc00263dd,0x0
c000dc22:	74 05                	je     c000dc29 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000dc24:	b9 08 07 00 00       	mov    ecx,0x708
c000dc29:	31 db                	xor    ebx,ebx
c000dc2b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000dc2f:	29 c8                	sub    eax,ecx
c000dc31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dc35:	19 da                	sbb    edx,ebx
c000dc37:	89 f8                	mov    eax,edi
c000dc39:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dc3d:	5b                   	pop    ebx
c000dc3e:	5e                   	pop    esi
c000dc3f:	5f                   	pop    edi
c000dc40:	ff e0                	jmp    eax

c000dc42 <secondsToDatetime(unsigned long long)>:
c000dc42:	55                   	push   ebp
c000dc43:	57                   	push   edi
c000dc44:	56                   	push   esi
c000dc45:	53                   	push   ebx
c000dc46:	83 ec 1c             	sub    esp,0x1c
c000dc49:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dc4d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dc51:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dc55:	6a 00                	push   0x0
c000dc57:	68 80 51 01 00       	push   0x15180
c000dc5c:	55                   	push   ebp
c000dc5d:	57                   	push   edi
c000dc5e:	e8 a1 31 01 00       	call   c0020e04 <__udivdi3>
c000dc63:	83 c4 10             	add    esp,0x10
c000dc66:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dc6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc70:	6a 00                	push   0x0
c000dc72:	68 80 51 01 00       	push   0x15180
c000dc77:	55                   	push   ebp
c000dc78:	57                   	push   edi
c000dc79:	bf 10 0e 00 00       	mov    edi,0xe10
c000dc7e:	e8 81 32 01 00       	call   c0020f04 <__umoddi3>
c000dc83:	83 c4 10             	add    esp,0x10
c000dc86:	99                   	cdq    
c000dc87:	f7 ff                	idiv   edi
c000dc89:	bf 3c 00 00 00       	mov    edi,0x3c
c000dc8e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000dc91:	89 d0                	mov    eax,edx
c000dc93:	99                   	cdq    
c000dc94:	f7 ff                	idiv   edi
c000dc96:	85 db                	test   ebx,ebx
c000dc98:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000dc9b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000dc9e:	79 11                	jns    c000dcb1 <secondsToDatetime(unsigned long long)+0x6f>
c000dca0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dca4:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000dcaa:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dcaf:	eb 07                	jmp    c000dcb8 <secondsToDatetime(unsigned long long)+0x76>
c000dcb1:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dcb6:	89 d8                	mov    eax,ebx
c000dcb8:	bf b4 05 00 00       	mov    edi,0x5b4
c000dcbd:	99                   	cdq    
c000dcbe:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000dcc3:	f7 f9                	idiv   ecx
c000dcc5:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000dcca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcce:	31 d2                	xor    edx,edx
c000dcd0:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000dcd8:	01 c3                	add    ebx,eax
c000dcda:	89 d8                	mov    eax,ebx
c000dcdc:	f7 f1                	div    ecx
c000dcde:	31 d2                	xor    edx,edx
c000dce0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000dce3:	89 d8                	mov    eax,ebx
c000dce5:	f7 f7                	div    edi
c000dce7:	31 d2                	xor    edx,edx
c000dce9:	29 c1                	sub    ecx,eax
c000dceb:	89 d8                	mov    eax,ebx
c000dced:	f7 f5                	div    ebp
c000dcef:	bd 6d 01 00 00       	mov    ebp,0x16d
c000dcf4:	29 c1                	sub    ecx,eax
c000dcf6:	31 d2                	xor    edx,edx
c000dcf8:	89 c8                	mov    eax,ecx
c000dcfa:	f7 f5                	div    ebp
c000dcfc:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000dd01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd05:	31 d2                	xor    edx,edx
c000dd07:	89 c8                	mov    eax,ecx
c000dd09:	f7 f5                	div    ebp
c000dd0b:	31 d2                	xor    edx,edx
c000dd0d:	01 c3                	add    ebx,eax
c000dd0f:	89 c8                	mov    eax,ecx
c000dd11:	f7 f7                	div    edi
c000dd13:	bf 99 00 00 00       	mov    edi,0x99
c000dd18:	29 c3                	sub    ebx,eax
c000dd1a:	31 d2                	xor    edx,edx
c000dd1c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000dd24:	29 c3                	sub    ebx,eax
c000dd26:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dd29:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000dd2c:	bb 05 00 00 00       	mov    ebx,0x5
c000dd31:	83 c1 02             	add    ecx,0x2
c000dd34:	89 c8                	mov    eax,ecx
c000dd36:	f7 f7                	div    edi
c000dd38:	31 d2                	xor    edx,edx
c000dd3a:	89 c7                	mov    edi,eax
c000dd3c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000dd42:	83 c0 02             	add    eax,0x2
c000dd45:	f7 f3                	div    ebx
c000dd47:	89 eb                	mov    ebx,ebp
c000dd49:	29 c3                	sub    ebx,eax
c000dd4b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000dd51:	88 1e                	mov    BYTE PTR [esi],bl
c000dd53:	19 c0                	sbb    eax,eax
c000dd55:	31 d2                	xor    edx,edx
c000dd57:	83 e0 0c             	and    eax,0xc
c000dd5a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000dd5e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000dd66:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dd6a:	83 f9 01             	cmp    ecx,0x1
c000dd6d:	0f 96 c2             	setbe  dl
c000dd70:	41                   	inc    ecx
c000dd71:	01 d0                	add    eax,edx
c000dd73:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000dd76:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000dd7a:	83 c4 1c             	add    esp,0x1c
c000dd7d:	89 f0                	mov    eax,esi
c000dd7f:	5b                   	pop    ebx
c000dd80:	5e                   	pop    esi
c000dd81:	5f                   	pop    edi
c000dd82:	5d                   	pop    ebp
c000dd83:	c2 04 00             	ret    0x4

c000dd86 <Clock::timeInDatetimeLocal()>:
c000dd86:	53                   	push   ebx
c000dd87:	83 ec 14             	sub    esp,0x14
c000dd8a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dd8e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dd92:	e8 83 fc ff ff       	call   c000da1a <Clock::timeInSecondsLocal()>
c000dd97:	83 c4 0c             	add    esp,0xc
c000dd9a:	52                   	push   edx
c000dd9b:	50                   	push   eax
c000dd9c:	53                   	push   ebx
c000dd9d:	e8 a0 fe ff ff       	call   c000dc42 <secondsToDatetime(unsigned long long)>
c000dda2:	89 d8                	mov    eax,ebx
c000dda4:	83 c4 14             	add    esp,0x14
c000dda7:	5b                   	pop    ebx
c000dda8:	c2 04 00             	ret    0x4
c000ddab:	90                   	nop

c000ddac <Device::hibernate()>:
c000ddac:	c3                   	ret    
c000ddad:	90                   	nop

c000ddae <Device::wake()>:
c000ddae:	c3                   	ret    
c000ddaf:	90                   	nop

c000ddb0 <Device::detect()>:
c000ddb0:	c3                   	ret    
c000ddb1:	90                   	nop

c000ddb2 <Device::disableLegacy()>:
c000ddb2:	c3                   	ret    
c000ddb3:	90                   	nop

c000ddb4 <Device::powerSaving(PowerSavingLevel)>:
c000ddb4:	c3                   	ret    
c000ddb5:	90                   	nop

c000ddb6 <DriverlessDevice::close(int, int, void*)>:
c000ddb6:	31 c0                	xor    eax,eax
c000ddb8:	c3                   	ret    
c000ddb9:	90                   	nop

c000ddba <DriverlessDevice::detect()>:
c000ddba:	c3                   	ret    
c000ddbb:	90                   	nop

c000ddbc <DriverlessDevice::open(int, int, void*)>:
c000ddbc:	83 ec 18             	sub    esp,0x18
c000ddbf:	68 90 31 02 c0       	push   0xc0023190
c000ddc4:	e8 b4 66 00 00       	call   c001447d <Krnl::panic(char const*)>
c000ddc9:	83 c8 ff             	or     eax,0xffffffff
c000ddcc:	83 c4 1c             	add    esp,0x1c
c000ddcf:	c3                   	ret    

c000ddd0 <Device::~Device()>:
c000ddd0:	ba f0 31 02 c0       	mov    edx,0xc00231f0
c000ddd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddd9:	89 10                	mov    DWORD PTR [eax],edx
c000dddb:	90                   	nop
c000dddc:	c3                   	ret    
c000dddd:	90                   	nop

c000ddde <Device::~Device()>:
c000ddde:	83 ec 0c             	sub    esp,0xc
c000dde1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dde5:	e8 e6 ff ff ff       	call   c000ddd0 <Device::~Device()>
c000ddea:	83 c4 04             	add    esp,0x4
c000dded:	83 ec 08             	sub    esp,0x8
c000ddf0:	68 58 01 00 00       	push   0x158
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 df eb ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	83 c4 0c             	add    esp,0xc
c000de04:	c3                   	ret    
c000de05:	90                   	nop

c000de06 <Device::findAndLoadDriver()>:
c000de06:	c7 44 24 04 ae 31 02 c0 	mov    DWORD PTR [esp+0x4],0xc00231ae
c000de0e:	e9 ab ec ff ff       	jmp    c000cabe <Dbg::kprintf(char const*, ...)>
c000de13:	90                   	nop

c000de14 <Device::preOpenPCI(PCIDeviceInfo)>:
c000de14:	57                   	push   edi
c000de15:	b9 09 00 00 00       	mov    ecx,0x9
c000de1a:	56                   	push   esi
c000de1b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000de1f:	8d 74 24 10          	lea    esi,[esp+0x10]
c000de23:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000de2d:	81 c7 18 01 00 00    	add    edi,0x118
c000de33:	fc                   	cld    
c000de34:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000de36:	5e                   	pop    esi
c000de37:	5f                   	pop    edi
c000de38:	c3                   	ret    
c000de39:	90                   	nop

c000de3a <Device::preOpenACPI(void*, char*, char*)>:
c000de3a:	57                   	push   edi
c000de3b:	b9 1e 00 00 00       	mov    ecx,0x1e
c000de40:	56                   	push   esi
c000de41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de49:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000de53:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000de59:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000de5f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000de63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de65:	b9 0e 00 00 00       	mov    ecx,0xe
c000de6a:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000de70:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000de74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de76:	5e                   	pop    esi
c000de77:	5f                   	pop    edi
c000de78:	c3                   	ret    
c000de79:	90                   	nop

c000de7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000de7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de7e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000de83:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000de8a:	75 0b                	jne    c000de97 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000de8c:	8b 00                	mov    eax,DWORD PTR [eax]
c000de8e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de92:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000de95:	eb 1e                	jmp    c000deb5 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000de97:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000de9c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dea2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000dea8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000deaa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000deae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000deb2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000deb5:	ff e0                	jmp    eax
c000deb7:	90                   	nop

c000deb8 <Device::getParent()>:
c000deb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000debc:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000dec2:	c3                   	ret    
c000dec3:	90                   	nop

c000dec4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000dec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dec8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000decd:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000ded4:	75 0b                	jne    c000dee1 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000ded6:	8b 00                	mov    eax,DWORD PTR [eax]
c000ded8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dedc:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000dedf:	eb 1e                	jmp    c000deff <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000dee1:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000dee6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000deec:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000def2:	8b 08                	mov    ecx,DWORD PTR [eax]
c000def4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000def8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000defc:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000deff:	ff e0                	jmp    eax
c000df01:	90                   	nop

c000df02 <Device::addChild(Device*)>:
c000df02:	53                   	push   ebx
c000df03:	83 ec 08             	sub    esp,0x8
c000df06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000df0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df0e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000df14:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000df1a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000df1c:	85 d2                	test   edx,edx
c000df1e:	74 04                	je     c000df24 <Device::addChild(Device*)+0x22>
c000df20:	89 d3                	mov    ebx,edx
c000df22:	eb f6                	jmp    c000df1a <Device::addChild(Device*)+0x18>
c000df24:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000df27:	83 ec 0c             	sub    esp,0xc
c000df2a:	6a 08                	push   0x8
c000df2c:	e8 2c bb ff ff       	call   c0009a5d <malloc>
c000df31:	89 03                	mov    DWORD PTR [ebx],eax
c000df33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000df39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000df40:	83 c4 18             	add    esp,0x18
c000df43:	5b                   	pop    ebx
c000df44:	c3                   	ret    
c000df45:	90                   	nop

c000df46 <Device::removeAllChildren()>:
c000df46:	56                   	push   esi
c000df47:	53                   	push   ebx
c000df48:	52                   	push   edx
c000df49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df4d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000df53:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df56:	74 17                	je     c000df6f <Device::removeAllChildren()+0x29>
c000df58:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000df5b:	85 c0                	test   eax,eax
c000df5d:	74 0c                	je     c000df6b <Device::removeAllChildren()+0x25>
c000df5f:	83 ec 0c             	sub    esp,0xc
c000df62:	8b 10                	mov    edx,DWORD PTR [eax]
c000df64:	50                   	push   eax
c000df65:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000df68:	83 c4 10             	add    esp,0x10
c000df6b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df6d:	eb e4                	jmp    c000df53 <Device::removeAllChildren()+0xd>
c000df6f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000df75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000df7b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000df81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000df88:	58                   	pop    eax
c000df89:	5b                   	pop    ebx
c000df8a:	5e                   	pop    esi
c000df8b:	c3                   	ret    

c000df8c <Device::hibernateAll()>:
c000df8c:	53                   	push   ebx
c000df8d:	83 ec 14             	sub    esp,0x14
c000df90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df94:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df96:	53                   	push   ebx
c000df97:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000df9a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfa0:	83 c4 10             	add    esp,0x10
c000dfa3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfa6:	74 0f                	je     c000dfb7 <Device::hibernateAll()+0x2b>
c000dfa8:	83 ec 0c             	sub    esp,0xc
c000dfab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfae:	e8 d9 ff ff ff       	call   c000df8c <Device::hibernateAll()>
c000dfb3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dfb5:	eb e9                	jmp    c000dfa0 <Device::hibernateAll()+0x14>
c000dfb7:	83 c4 08             	add    esp,0x8
c000dfba:	5b                   	pop    ebx
c000dfbb:	c3                   	ret    

c000dfbc <Device::wakeAll()>:
c000dfbc:	53                   	push   ebx
c000dfbd:	83 ec 14             	sub    esp,0x14
c000dfc0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfc6:	53                   	push   ebx
c000dfc7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000dfca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfd0:	83 c4 10             	add    esp,0x10
c000dfd3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfd6:	74 0f                	je     c000dfe7 <Device::wakeAll()+0x2b>
c000dfd8:	83 ec 0c             	sub    esp,0xc
c000dfdb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfde:	e8 d9 ff ff ff       	call   c000dfbc <Device::wakeAll()>
c000dfe3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dfe5:	eb e9                	jmp    c000dfd0 <Device::wakeAll()+0x14>
c000dfe7:	83 c4 08             	add    esp,0x8
c000dfea:	5b                   	pop    ebx
c000dfeb:	c3                   	ret    

c000dfec <Device::detectAll()>:
c000dfec:	53                   	push   ebx
c000dfed:	83 ec 14             	sub    esp,0x14
c000dff0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dff4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dff6:	53                   	push   ebx
c000dff7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000dffa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e000:	83 c4 10             	add    esp,0x10
c000e003:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e006:	74 0f                	je     c000e017 <Device::detectAll()+0x2b>
c000e008:	83 ec 0c             	sub    esp,0xc
c000e00b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e00e:	e8 d9 ff ff ff       	call   c000dfec <Device::detectAll()>
c000e013:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e015:	eb e9                	jmp    c000e000 <Device::detectAll()+0x14>
c000e017:	83 c4 08             	add    esp,0x8
c000e01a:	5b                   	pop    ebx
c000e01b:	c3                   	ret    

c000e01c <Device::disableLegacyAll()>:
c000e01c:	53                   	push   ebx
c000e01d:	83 ec 14             	sub    esp,0x14
c000e020:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e024:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e026:	53                   	push   ebx
c000e027:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e02a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e030:	83 c4 10             	add    esp,0x10
c000e033:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e036:	74 0f                	je     c000e047 <Device::disableLegacyAll()+0x2b>
c000e038:	83 ec 0c             	sub    esp,0xc
c000e03b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e03e:	e8 d9 ff ff ff       	call   c000e01c <Device::disableLegacyAll()>
c000e043:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e045:	eb e9                	jmp    c000e030 <Device::disableLegacyAll()+0x14>
c000e047:	83 c4 08             	add    esp,0x8
c000e04a:	5b                   	pop    ebx
c000e04b:	c3                   	ret    

c000e04c <Device::loadDriversForAll()>:
c000e04c:	53                   	push   ebx
c000e04d:	83 ec 08             	sub    esp,0x8
c000e050:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e054:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e05b:	75 0c                	jne    c000e069 <Device::loadDriversForAll()+0x1d>
c000e05d:	83 ec 0c             	sub    esp,0xc
c000e060:	53                   	push   ebx
c000e061:	e8 a0 fd ff ff       	call   c000de06 <Device::findAndLoadDriver()>
c000e066:	83 c4 10             	add    esp,0x10
c000e069:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e06f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e072:	74 12                	je     c000e086 <Device::loadDriversForAll()+0x3a>
c000e074:	83 ec 0c             	sub    esp,0xc
c000e077:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e07a:	e8 cd ff ff ff       	call   c000e04c <Device::loadDriversForAll()>
c000e07f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e081:	83 c4 10             	add    esp,0x10
c000e084:	eb e9                	jmp    c000e06f <Device::loadDriversForAll()+0x23>
c000e086:	83 c4 08             	add    esp,0x8
c000e089:	5b                   	pop    ebx
c000e08a:	c3                   	ret    
c000e08b:	90                   	nop

c000e08c <Device::closeAll()>:
c000e08c:	53                   	push   ebx
c000e08d:	83 ec 08             	sub    esp,0x8
c000e090:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e094:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e096:	6a 00                	push   0x0
c000e098:	6a 00                	push   0x0
c000e09a:	6a 00                	push   0x0
c000e09c:	53                   	push   ebx
c000e09d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e0a0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e0a6:	83 c4 10             	add    esp,0x10
c000e0a9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e0ac:	74 0f                	je     c000e0bd <Device::closeAll()+0x31>
c000e0ae:	83 ec 0c             	sub    esp,0xc
c000e0b1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0b4:	e8 d3 ff ff ff       	call   c000e08c <Device::closeAll()>
c000e0b9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e0bb:	eb e9                	jmp    c000e0a6 <Device::closeAll()+0x1a>
c000e0bd:	83 c4 08             	add    esp,0x8
c000e0c0:	5b                   	pop    ebx
c000e0c1:	c3                   	ret    

c000e0c2 <Device::powerSavingAll(PowerSavingLevel)>:
c000e0c2:	56                   	push   esi
c000e0c3:	53                   	push   ebx
c000e0c4:	83 ec 0c             	sub    esp,0xc
c000e0c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e0cb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e0cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0d1:	56                   	push   esi
c000e0d2:	53                   	push   ebx
c000e0d3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e0d6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e0dc:	83 c4 10             	add    esp,0x10
c000e0df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e0e2:	74 0f                	je     c000e0f3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e0e4:	52                   	push   edx
c000e0e5:	52                   	push   edx
c000e0e6:	56                   	push   esi
c000e0e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ea:	e8 d3 ff ff ff       	call   c000e0c2 <Device::powerSavingAll(PowerSavingLevel)>
c000e0ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e0f1:	eb e9                	jmp    c000e0dc <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e0f3:	58                   	pop    eax
c000e0f4:	5b                   	pop    ebx
c000e0f5:	5e                   	pop    esi
c000e0f6:	c3                   	ret    
c000e0f7:	90                   	nop

c000e0f8 <Device::setName(char const*)>:
c000e0f8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e100:	e9 07 27 ff ff       	jmp    c000080c <strcpy>
c000e105:	90                   	nop

c000e106 <Device::Device(char const*)>:
c000e106:	83 ec 1c             	sub    esp,0x1c
c000e109:	ba f0 31 02 c0       	mov    edx,0xc00231f0
c000e10e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e112:	89 10                	mov    DWORD PTR [eax],edx
c000e114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e118:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e126:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e130:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e134:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e13e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e142:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e14c:	83 ec 08             	sub    esp,0x8
c000e14f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e153:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e157:	e8 9c ff ff ff       	call   c000e0f8 <Device::setName(char const*)>
c000e15c:	83 c4 10             	add    esp,0x10
c000e15f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e167:	83 ec 0c             	sub    esp,0xc
c000e16a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e16e:	e8 ea b8 ff ff       	call   c0009a5d <malloc>
c000e173:	83 c4 10             	add    esp,0x10
c000e176:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e17c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e183:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e187:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e18d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e191:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e197:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e19d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1a1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e1a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e1ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1b2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e1b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1bd:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e1c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1c8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e1d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1d6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e1e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1e4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e1ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1f2:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e1fc:	90                   	nop
c000e1fd:	83 c4 1c             	add    esp,0x1c
c000e200:	c3                   	ret    
c000e201:	90                   	nop

c000e202 <Device::getName()>:
c000e202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e206:	05 d0 00 00 00       	add    eax,0xd0
c000e20b:	c3                   	ret    

c000e20c <DriverlessDevice::DriverlessDevice(char const*)>:
c000e20c:	83 ec 0c             	sub    esp,0xc
c000e20f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e213:	83 ec 08             	sub    esp,0x8
c000e216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21a:	50                   	push   eax
c000e21b:	e8 e6 fe ff ff       	call   c000e106 <Device::Device(char const*)>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	ba 1c 32 02 c0       	mov    edx,0xc002321c
c000e228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e22c:	89 10                	mov    DWORD PTR [eax],edx
c000e22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e232:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e23c:	90                   	nop
c000e23d:	83 c4 0c             	add    esp,0xc
c000e240:	c3                   	ret    
c000e241:	90                   	nop

c000e242 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e242:	57                   	push   edi
c000e243:	56                   	push   esi
c000e244:	53                   	push   ebx
c000e245:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e249:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e24d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e251:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e257:	75 0c                	jne    c000e265 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e259:	52                   	push   edx
c000e25a:	52                   	push   edx
c000e25b:	53                   	push   ebx
c000e25c:	56                   	push   esi
c000e25d:	e8 54 30 01 00       	call   c00212b6 <LinkedList<Device>::addElement(Device*)>
c000e262:	83 c4 10             	add    esp,0x10
c000e265:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e26b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e26e:	74 12                	je     c000e282 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e270:	50                   	push   eax
c000e271:	57                   	push   edi
c000e272:	56                   	push   esi
c000e273:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e276:	e8 c7 ff ff ff       	call   c000e242 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e27b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e27d:	83 c4 10             	add    esp,0x10
c000e280:	eb e9                	jmp    c000e26b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e282:	5b                   	pop    ebx
c000e283:	5e                   	pop    esi
c000e284:	5f                   	pop    edi
c000e285:	c3                   	ret    

c000e286 <getDevicesOfType(DeviceType)>:
c000e286:	53                   	push   ebx
c000e287:	83 ec 14             	sub    esp,0x14
c000e28a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e28e:	53                   	push   ebx
c000e28f:	e8 fe 30 01 00       	call   c0021392 <LinkedList<Device>::LinkedList()>
c000e294:	83 c4 0c             	add    esp,0xc
c000e297:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e29b:	53                   	push   ebx
c000e29c:	ff 35 68 62 02 c0    	push   DWORD PTR ds:0xc0026268
c000e2a2:	e8 9b ff ff ff       	call   c000e242 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e2a7:	89 d8                	mov    eax,ebx
c000e2a9:	83 c4 18             	add    esp,0x18
c000e2ac:	5b                   	pop    ebx
c000e2ad:	c2 04 00             	ret    0x4

c000e2b0 <HardDiskController::HardDiskController(char const*)>:
c000e2b0:	83 ec 0c             	sub    esp,0xc
c000e2b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2b7:	83 ec 08             	sub    esp,0x8
c000e2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2be:	50                   	push   eax
c000e2bf:	e8 42 fe ff ff       	call   c000e106 <Device::Device(char const*)>
c000e2c4:	83 c4 10             	add    esp,0x10
c000e2c7:	ba 48 32 02 c0       	mov    edx,0xc0023248
c000e2cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2d0:	89 10                	mov    DWORD PTR [eax],edx
c000e2d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2d6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e2e0:	90                   	nop
c000e2e1:	83 c4 0c             	add    esp,0xc
c000e2e4:	c3                   	ret    
c000e2e5:	90                   	nop

c000e2e6 <HardDiskController::~HardDiskController()>:
c000e2e6:	83 ec 0c             	sub    esp,0xc
c000e2e9:	ba 48 32 02 c0       	mov    edx,0xc0023248
c000e2ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f2:	89 10                	mov    DWORD PTR [eax],edx
c000e2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f8:	83 ec 0c             	sub    esp,0xc
c000e2fb:	50                   	push   eax
c000e2fc:	e8 cf fa ff ff       	call   c000ddd0 <Device::~Device()>
c000e301:	83 c4 10             	add    esp,0x10
c000e304:	90                   	nop
c000e305:	83 c4 0c             	add    esp,0xc
c000e308:	c3                   	ret    
c000e309:	90                   	nop

c000e30a <HardDiskController::~HardDiskController()>:
c000e30a:	83 ec 0c             	sub    esp,0xc
c000e30d:	83 ec 0c             	sub    esp,0xc
c000e310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e314:	e8 cd ff ff ff       	call   c000e2e6 <HardDiskController::~HardDiskController()>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	83 ec 08             	sub    esp,0x8
c000e31f:	68 58 01 00 00       	push   0x158
c000e324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e328:	e8 b0 e6 ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c000e32d:	83 c4 10             	add    esp,0x10
c000e330:	83 c4 0c             	add    esp,0xc
c000e333:	c3                   	ret    

c000e334 <PhysicalDisk::eject()>:
c000e334:	83 c8 ff             	or     eax,0xffffffff
c000e337:	c3                   	ret    

c000e338 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e338:	83 ec 0c             	sub    esp,0xc
c000e33b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33f:	83 ec 08             	sub    esp,0x8
c000e342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e346:	50                   	push   eax
c000e347:	e8 ba fd ff ff       	call   c000e106 <Device::Device(char const*)>
c000e34c:	83 c4 10             	add    esp,0x10
c000e34f:	ba 74 32 02 c0       	mov    edx,0xc0023274
c000e354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e358:	89 10                	mov    DWORD PTR [eax],edx
c000e35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e35e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e369:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e374:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e382:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e386:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e390:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e39a:	90                   	nop
c000e39b:	83 c4 0c             	add    esp,0xc
c000e39e:	c3                   	ret    
c000e39f:	90                   	nop

c000e3a0 <PhysicalDisk::startCache()>:
c000e3a0:	56                   	push   esi
c000e3a1:	53                   	push   ebx
c000e3a2:	83 ec 10             	sub    esp,0x10
c000e3a5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e3a9:	6a 44                	push   0x44
c000e3ab:	e8 ad b6 ff ff       	call   c0009a5d <malloc>
c000e3b0:	89 c6                	mov    esi,eax
c000e3b2:	58                   	pop    eax
c000e3b3:	5a                   	pop    edx
c000e3b4:	53                   	push   ebx
c000e3b5:	56                   	push   esi
c000e3b6:	e8 77 28 00 00       	call   c0010c32 <VCache::VCache(PhysicalDisk*)>
c000e3bb:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e3c1:	83 c4 14             	add    esp,0x14
c000e3c4:	5b                   	pop    ebx
c000e3c5:	5e                   	pop    esi
c000e3c6:	c3                   	ret    
c000e3c7:	90                   	nop

c000e3c8 <PhysicalDisk::~PhysicalDisk()>:
c000e3c8:	83 ec 0c             	sub    esp,0xc
c000e3cb:	ba 74 32 02 c0       	mov    edx,0xc0023274
c000e3d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3d4:	89 10                	mov    DWORD PTR [eax],edx
c000e3d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3da:	83 ec 0c             	sub    esp,0xc
c000e3dd:	50                   	push   eax
c000e3de:	e8 ed f9 ff ff       	call   c000ddd0 <Device::~Device()>
c000e3e3:	83 c4 10             	add    esp,0x10
c000e3e6:	90                   	nop
c000e3e7:	83 c4 0c             	add    esp,0xc
c000e3ea:	c3                   	ret    
c000e3eb:	90                   	nop

c000e3ec <PhysicalDisk::~PhysicalDisk()>:
c000e3ec:	83 ec 0c             	sub    esp,0xc
c000e3ef:	83 ec 0c             	sub    esp,0xc
c000e3f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3f6:	e8 cd ff ff ff       	call   c000e3c8 <PhysicalDisk::~PhysicalDisk()>
c000e3fb:	83 c4 10             	add    esp,0x10
c000e3fe:	83 ec 08             	sub    esp,0x8
c000e401:	68 6c 01 00 00       	push   0x16c
c000e406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e40a:	e8 ce e5 ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c000e40f:	83 c4 10             	add    esp,0x10
c000e412:	83 c4 0c             	add    esp,0xc
c000e415:	c3                   	ret    

c000e416 <FPU::FPU(char const*)>:
c000e416:	83 ec 0c             	sub    esp,0xc
c000e419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41d:	83 ec 08             	sub    esp,0x8
c000e420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e424:	50                   	push   eax
c000e425:	e8 dc fc ff ff       	call   c000e106 <Device::Device(char const*)>
c000e42a:	83 c4 10             	add    esp,0x10
c000e42d:	ba b8 32 02 c0       	mov    edx,0xc00232b8
c000e432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e436:	89 10                	mov    DWORD PTR [eax],edx
c000e438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e43c:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e446:	90                   	nop
c000e447:	83 c4 0c             	add    esp,0xc
c000e44a:	c3                   	ret    
c000e44b:	90                   	nop

c000e44c <FPU::~FPU()>:
c000e44c:	83 ec 0c             	sub    esp,0xc
c000e44f:	ba b8 32 02 c0       	mov    edx,0xc00232b8
c000e454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e458:	89 10                	mov    DWORD PTR [eax],edx
c000e45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e45e:	83 ec 0c             	sub    esp,0xc
c000e461:	50                   	push   eax
c000e462:	e8 69 f9 ff ff       	call   c000ddd0 <Device::~Device()>
c000e467:	83 c4 10             	add    esp,0x10
c000e46a:	90                   	nop
c000e46b:	83 c4 0c             	add    esp,0xc
c000e46e:	c3                   	ret    
c000e46f:	90                   	nop

c000e470 <FPU::~FPU()>:
c000e470:	83 ec 0c             	sub    esp,0xc
c000e473:	83 ec 0c             	sub    esp,0xc
c000e476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e47a:	e8 cd ff ff ff       	call   c000e44c <FPU::~FPU()>
c000e47f:	83 c4 10             	add    esp,0x10
c000e482:	83 ec 08             	sub    esp,0x8
c000e485:	68 58 01 00 00       	push   0x158
c000e48a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e48e:	e8 4a e5 ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c000e493:	83 c4 10             	add    esp,0x10
c000e496:	83 c4 0c             	add    esp,0xc
c000e499:	c3                   	ret    

c000e49a <setupFPU()>:
c000e49a:	53                   	push   ebx
c000e49b:	83 ec 08             	sub    esp,0x8
c000e49e:	8b 15 68 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026268
c000e4a4:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e4ab:	74 19                	je     c000e4c6 <setupFPU()+0x2c>
c000e4ad:	83 ec 0c             	sub    esp,0xc
c000e4b0:	68 58 01 00 00       	push   0x158
c000e4b5:	e8 a3 b5 ff ff       	call   c0009a5d <malloc>
c000e4ba:	89 c3                	mov    ebx,eax
c000e4bc:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4bf:	e8 c4 14 01 00       	call   c001f988 <AVX::AVX()>
c000e4c4:	eb 5b                	jmp    c000e521 <setupFPU()+0x87>
c000e4c6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e4cc:	84 c0                	test   al,al
c000e4ce:	79 19                	jns    c000e4e9 <setupFPU()+0x4f>
c000e4d0:	83 ec 0c             	sub    esp,0xc
c000e4d3:	68 58 01 00 00       	push   0x158
c000e4d8:	e8 80 b5 ff ff       	call   c0009a5d <malloc>
c000e4dd:	89 c3                	mov    ebx,eax
c000e4df:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4e2:	e8 c7 15 01 00       	call   c001faae <SSE::SSE()>
c000e4e7:	eb 38                	jmp    c000e521 <setupFPU()+0x87>
c000e4e9:	a8 20                	test   al,0x20
c000e4eb:	74 19                	je     c000e506 <setupFPU()+0x6c>
c000e4ed:	83 ec 0c             	sub    esp,0xc
c000e4f0:	68 58 01 00 00       	push   0x158
c000e4f5:	e8 63 b5 ff ff       	call   c0009a5d <malloc>
c000e4fa:	89 c3                	mov    ebx,eax
c000e4fc:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4ff:	e8 14 15 01 00       	call   c001fa18 <MMX::MMX()>
c000e504:	eb 1b                	jmp    c000e521 <setupFPU()+0x87>
c000e506:	a8 10                	test   al,0x10
c000e508:	74 1c                	je     c000e526 <setupFPU()+0x8c>
c000e50a:	83 ec 0c             	sub    esp,0xc
c000e50d:	68 58 01 00 00       	push   0x158
c000e512:	e8 46 b5 ff ff       	call   c0009a5d <malloc>
c000e517:	89 c3                	mov    ebx,eax
c000e519:	89 04 24             	mov    DWORD PTR [esp],eax
c000e51c:	e8 1b 16 01 00       	call   c001fb3c <x87::x87()>
c000e521:	83 c4 10             	add    esp,0x10
c000e524:	eb 24                	jmp    c000e54a <setupFPU()+0xb0>
c000e526:	83 e0 ef             	and    eax,0xffffffef
c000e529:	83 ec 0c             	sub    esp,0xc
c000e52c:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e532:	68 a4 32 02 c0       	push   0xc00232a4
c000e537:	e8 82 e5 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000e53c:	0f 20 c0             	mov    eax,cr0
c000e53f:	83 c8 04             	or     eax,0x4
c000e542:	0f 22 c0             	mov    cr0,eax
c000e545:	31 db                	xor    ebx,ebx
c000e547:	83 c4 10             	add    esp,0x10
c000e54a:	89 d8                	mov    eax,ebx
c000e54c:	83 c4 08             	add    esp,0x8
c000e54f:	5b                   	pop    ebx
c000e550:	c3                   	ret    
c000e551:	90                   	nop

c000e552 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e552:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e556:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e55a:	c1 e0 04             	shl    eax,0x4
c000e55d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e561:	8d 50 10             	lea    edx,[eax+0x10]
c000e564:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e56a:	74 08                	je     c000e574 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e56c:	83 c0 04             	add    eax,0x4
c000e56f:	39 d0                	cmp    eax,edx
c000e571:	75 f1                	jne    c000e564 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e573:	c3                   	ret    
c000e574:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e57e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e588:	eb e2                	jmp    c000e56c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e58a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e58a:	57                   	push   edi
c000e58b:	31 c0                	xor    eax,eax
c000e58d:	56                   	push   esi
c000e58e:	53                   	push   ebx
c000e58f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e593:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e597:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e59b:	89 da                	mov    edx,ebx
c000e59d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e5a1:	c1 e2 04             	shl    edx,0x4
c000e5a4:	01 ca                	add    edx,ecx
c000e5a6:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e5ae:	74 16                	je     c000e5c6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e5b0:	40                   	inc    eax
c000e5b1:	83 f8 04             	cmp    eax,0x4
c000e5b4:	75 f0                	jne    c000e5a6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e5b6:	c7 44 24 10 e8 32 02 c0 	mov    DWORD PTR [esp+0x10],0xc00232e8
c000e5be:	5b                   	pop    ebx
c000e5bf:	5e                   	pop    esi
c000e5c0:	5f                   	pop    edi
c000e5c1:	e9 b7 5e 00 00       	jmp    c001447d <Krnl::panic(char const*)>
c000e5c6:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e5c9:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e5cc:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e5d2:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e5d8:	5b                   	pop    ebx
c000e5d9:	5e                   	pop    esi
c000e5da:	5f                   	pop    edi
c000e5db:	c3                   	ret    

c000e5dc <doubleFault(regs*, void*)>:
c000e5dc:	55                   	push   ebp
c000e5dd:	89 e5                	mov    ebp,esp
c000e5df:	83 ec 08             	sub    esp,0x8
c000e5e2:	83 ec 0c             	sub    esp,0xc
c000e5e5:	68 f5 32 02 c0       	push   0xc00232f5
c000e5ea:	e8 8e 5e 00 00       	call   c001447d <Krnl::panic(char const*)>
c000e5ef:	83 c4 10             	add    esp,0x10
c000e5f2:	90                   	nop
c000e5f3:	c9                   	leave  
c000e5f4:	c3                   	ret    
c000e5f5:	90                   	nop

c000e5f6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e5f6:	56                   	push   esi
c000e5f7:	53                   	push   ebx
c000e5f8:	50                   	push   eax
c000e5f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e5fd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e601:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e606:	75 35                	jne    c000e63d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e608:	8d 43 20             	lea    eax,[ebx+0x20]
c000e60b:	31 d2                	xor    edx,edx
c000e60d:	89 c1                	mov    ecx,eax
c000e60f:	c1 e1 04             	shl    ecx,0x4
c000e612:	01 f1                	add    ecx,esi
c000e614:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e61c:	74 3e                	je     c000e65c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e61e:	42                   	inc    edx
c000e61f:	83 fa 04             	cmp    edx,0x4
c000e622:	75 f0                	jne    c000e614 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e624:	83 ec 0c             	sub    esp,0xc
c000e627:	68 0f 33 02 c0       	push   0xc002330f
c000e62c:	e8 4c 5e 00 00       	call   c001447d <Krnl::panic(char const*)>
c000e631:	83 c4 10             	add    esp,0x10
c000e634:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e639:	5a                   	pop    edx
c000e63a:	5b                   	pop    ebx
c000e63b:	5e                   	pop    esi
c000e63c:	c3                   	ret    
c000e63d:	83 ec 0c             	sub    esp,0xc
c000e640:	56                   	push   esi
c000e641:	e8 bc fb ff ff       	call   c000e202 <Device::getName()>
c000e646:	83 c4 10             	add    esp,0x10
c000e649:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e64c:	75 ba                	jne    c000e608 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e64e:	83 fb 0f             	cmp    ebx,0xf
c000e651:	7f 29                	jg     c000e67c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e653:	0f b6 9b 60 59 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffda6a0]
c000e65a:	eb ac                	jmp    c000e608 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e65c:	8d 04 82             	lea    eax,[edx+eax*4]
c000e65f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e663:	8d 04 86             	lea    eax,[esi+eax*4]
c000e666:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e66c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e670:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e676:	89 d8                	mov    eax,ebx
c000e678:	5a                   	pop    edx
c000e679:	5b                   	pop    ebx
c000e67a:	5e                   	pop    esi
c000e67b:	c3                   	ret    
c000e67c:	83 ec 0c             	sub    esp,0xc
c000e67f:	68 02 33 02 c0       	push   0xc0023302
c000e684:	e8 f4 5d 00 00       	call   c001447d <Krnl::panic(char const*)>
c000e689:	83 c4 10             	add    esp,0x10
c000e68c:	e9 77 ff ff ff       	jmp    c000e608 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e691:	90                   	nop

c000e692 <InterruptController::clearAllHandlers(int, bool)>:
c000e692:	56                   	push   esi
c000e693:	53                   	push   ebx
c000e694:	52                   	push   edx
c000e695:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e699:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e69d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e6a2:	75 61                	jne    c000e705 <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e6a4:	8d 46 20             	lea    eax,[esi+0x20]
c000e6a7:	c1 e6 04             	shl    esi,0x4
c000e6aa:	c1 e0 04             	shl    eax,0x4
c000e6ad:	01 de                	add    esi,ebx
c000e6af:	01 d8                	add    eax,ebx
c000e6b1:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e6bb:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e6c5:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e6cf:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e6d9:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e6e3:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000e6ed:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000e6f7:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000e701:	58                   	pop    eax
c000e702:	5b                   	pop    ebx
c000e703:	5e                   	pop    esi
c000e704:	c3                   	ret    
c000e705:	83 ec 0c             	sub    esp,0xc
c000e708:	53                   	push   ebx
c000e709:	e8 f4 fa ff ff       	call   c000e202 <Device::getName()>
c000e70e:	83 c4 10             	add    esp,0x10
c000e711:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e714:	75 8e                	jne    c000e6a4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e716:	83 fe 0f             	cmp    esi,0xf
c000e719:	7f 09                	jg     c000e724 <InterruptController::clearAllHandlers(int, bool)+0x92>
c000e71b:	0f b6 b6 60 59 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda6a0]
c000e722:	eb 80                	jmp    c000e6a4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e724:	83 ec 0c             	sub    esp,0xc
c000e727:	68 1c 33 02 c0       	push   0xc002331c
c000e72c:	e8 4c 5d 00 00       	call   c001447d <Krnl::panic(char const*)>
c000e731:	83 c4 10             	add    esp,0x10
c000e734:	e9 6b ff ff ff       	jmp    c000e6a4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e739:	90                   	nop

c000e73a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e73a:	56                   	push   esi
c000e73b:	53                   	push   ebx
c000e73c:	52                   	push   edx
c000e73d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e741:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e745:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e74a:	75 3a                	jne    c000e786 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000e74c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e750:	8d 50 20             	lea    edx,[eax+0x20]
c000e753:	c1 e2 04             	shl    edx,0x4
c000e756:	8d 04 16             	lea    eax,[esi+edx*1]
c000e759:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000e75d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000e763:	74 0b                	je     c000e770 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000e765:	83 c0 04             	add    eax,0x4
c000e768:	39 d0                	cmp    eax,edx
c000e76a:	75 f1                	jne    c000e75d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000e76c:	58                   	pop    eax
c000e76d:	5b                   	pop    ebx
c000e76e:	5e                   	pop    esi
c000e76f:	c3                   	ret    
c000e770:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e77a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e784:	eb df                	jmp    c000e765 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000e786:	83 ec 0c             	sub    esp,0xc
c000e789:	56                   	push   esi
c000e78a:	e8 73 fa ff ff       	call   c000e202 <Device::getName()>
c000e78f:	83 c4 10             	add    esp,0x10
c000e792:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e795:	75 b5                	jne    c000e74c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e797:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000e79c:	7f 11                	jg     c000e7af <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000e79e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7a2:	0f b6 80 60 59 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda6a0]
c000e7a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e7ad:	eb 9d                	jmp    c000e74c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e7af:	83 ec 0c             	sub    esp,0xc
c000e7b2:	68 29 33 02 c0       	push   0xc0023329
c000e7b7:	e8 c1 5c 00 00       	call   c001447d <Krnl::panic(char const*)>
c000e7bc:	83 c4 10             	add    esp,0x10
c000e7bf:	eb 8b                	jmp    c000e74c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000e7c1 <nmiHandler(regs*, void*)>:
c000e7c1:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000e7c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e7ca:	e9 5f aa ff ff       	jmp    c000922e <Computer::handleNMI()>

c000e7cf <int_handler>:
c000e7cf:	55                   	push   ebp
c000e7d0:	57                   	push   edi
c000e7d1:	56                   	push   esi
c000e7d2:	53                   	push   ebx
c000e7d3:	83 ec 0c             	sub    esp,0xc
c000e7d6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e7da:	80 3d 84 6d 02 c0 00 	cmp    BYTE PTR ds:0xc0026d84,0x0
c000e7e1:	74 0b                	je     c000e7ee <int_handler+0x1f>
c000e7e3:	fa                   	cli    
c000e7e4:	f4                   	hlt    
c000e7e5:	80 3d 84 6d 02 c0 00 	cmp    BYTE PTR ds:0xc0026d84,0x0
c000e7ec:	75 f5                	jne    c000e7e3 <int_handler+0x14>
c000e7ee:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000e7f3:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000e7f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e7fc:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000e802:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e805:	83 f8 17             	cmp    eax,0x17
c000e808:	77 13                	ja     c000e81d <int_handler+0x4e>
c000e80a:	83 ec 08             	sub    esp,0x8
c000e80d:	8b 17                	mov    edx,DWORD PTR [edi]
c000e80f:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e812:	0f b6 c0             	movzx  eax,al
c000e815:	50                   	push   eax
c000e816:	57                   	push   edi
c000e817:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000e81a:	83 c4 10             	add    esp,0x10
c000e81d:	83 c3 15             	add    ebx,0x15
c000e820:	c1 e3 04             	shl    ebx,0x4
c000e823:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000e827:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000e82e:	31 db                	xor    ebx,ebx
c000e830:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e834:	85 c0                	test   eax,eax
c000e836:	74 13                	je     c000e84b <int_handler+0x7c>
c000e838:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000e83b:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000e83f:	74 1c                	je     c000e85d <int_handler+0x8e>
c000e841:	83 ec 08             	sub    esp,0x8
c000e844:	52                   	push   edx
c000e845:	56                   	push   esi
c000e846:	ff d0                	call   eax
c000e848:	83 c4 10             	add    esp,0x10
c000e84b:	43                   	inc    ebx
c000e84c:	83 fb 04             	cmp    ebx,0x4
c000e84f:	75 df                	jne    c000e830 <int_handler+0x61>
c000e851:	83 c4 0c             	add    esp,0xc
c000e854:	31 c0                	xor    eax,eax
c000e856:	5b                   	pop    ebx
c000e857:	31 d2                	xor    edx,edx
c000e859:	5e                   	pop    esi
c000e85a:	5f                   	pop    edi
c000e85b:	5d                   	pop    ebp
c000e85c:	c3                   	ret    
c000e85d:	83 ec 08             	sub    esp,0x8
c000e860:	52                   	push   edx
c000e861:	56                   	push   esi
c000e862:	ff d0                	call   eax
c000e864:	83 c4 10             	add    esp,0x10
c000e867:	83 c4 0c             	add    esp,0xc
c000e86a:	5b                   	pop    ebx
c000e86b:	5e                   	pop    esi
c000e86c:	5f                   	pop    edi
c000e86d:	5d                   	pop    ebp
c000e86e:	c3                   	ret    
c000e86f:	90                   	nop

c000e870 <InterruptController::InterruptController(char const*)>:
c000e870:	83 ec 1c             	sub    esp,0x1c
c000e873:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e877:	83 ec 08             	sub    esp,0x8
c000e87a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e87e:	50                   	push   eax
c000e87f:	e8 82 f8 ff ff       	call   c000e106 <Device::Device(char const*)>
c000e884:	83 c4 10             	add    esp,0x10
c000e887:	ba f0 35 02 c0       	mov    edx,0xc00235f0
c000e88c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e890:	89 10                	mov    DWORD PTR [eax],edx
c000e892:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e896:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000e8a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e8a8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e8b0:	7f 5e                	jg     c000e910 <InterruptController::InterruptController(char const*)+0xa0>
c000e8b2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e8ba:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e8bf:	7f 49                	jg     c000e90a <InterruptController::InterruptController(char const*)+0x9a>
c000e8c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e8c9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e8d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e8d4:	01 ca                	add    edx,ecx
c000e8d6:	83 c2 54             	add    edx,0x54
c000e8d9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e8e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e8e9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e8f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e8f4:	01 ca                	add    edx,ecx
c000e8f6:	81 c2 54 04 00 00    	add    edx,0x454
c000e8fc:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e904:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000e908:	eb b0                	jmp    c000e8ba <InterruptController::InterruptController(char const*)+0x4a>
c000e90a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e90e:	eb 98                	jmp    c000e8a8 <InterruptController::InterruptController(char const*)+0x38>
c000e910:	90                   	nop
c000e911:	83 c4 1c             	add    esp,0x1c
c000e914:	c3                   	ret    
c000e915:	90                   	nop

c000e916 <InterruptController::~InterruptController()>:
c000e916:	83 ec 0c             	sub    esp,0xc
c000e919:	ba f0 35 02 c0       	mov    edx,0xc00235f0
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	89 10                	mov    DWORD PTR [eax],edx
c000e924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e928:	83 ec 0c             	sub    esp,0xc
c000e92b:	50                   	push   eax
c000e92c:	e8 9f f4 ff ff       	call   c000ddd0 <Device::~Device()>
c000e931:	83 c4 10             	add    esp,0x10
c000e934:	90                   	nop
c000e935:	83 c4 0c             	add    esp,0xc
c000e938:	c3                   	ret    
c000e939:	90                   	nop

c000e93a <InterruptController::~InterruptController()>:
c000e93a:	83 ec 0c             	sub    esp,0xc
c000e93d:	83 ec 0c             	sub    esp,0xc
c000e940:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e944:	e8 cd ff ff ff       	call   c000e916 <InterruptController::~InterruptController()>
c000e949:	83 c4 10             	add    esp,0x10
c000e94c:	83 ec 08             	sub    esp,0x8
c000e94f:	68 58 21 00 00       	push   0x2158
c000e954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e958:	e8 80 e0 ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c000e95d:	83 c4 10             	add    esp,0x10
c000e960:	83 c4 0c             	add    esp,0xc
c000e963:	c3                   	ret    

c000e964 <displayDebugInfo(regs*)>:
c000e964:	55                   	push   ebp
c000e965:	57                   	push   edi
c000e966:	56                   	push   esi
c000e967:	53                   	push   ebx
c000e968:	83 ec 24             	sub    esp,0x24
c000e96b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e96f:	0f 20 c2             	mov    edx,cr0
c000e972:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e976:	0f 20 d7             	mov    edi,cr2
c000e979:	0f 20 de             	mov    esi,cr3
c000e97c:	0f 20 e5             	mov    ebp,cr4
c000e97f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000e982:	68 36 33 02 c0       	push   0xc0023336
c000e987:	e8 32 e1 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000e98c:	59                   	pop    ecx
c000e98d:	58                   	pop    eax
c000e98e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e991:	68 41 33 02 c0       	push   0xc0023341
c000e996:	e8 23 e1 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000e99b:	58                   	pop    eax
c000e99c:	5a                   	pop    edx
c000e99d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e9a0:	68 4c 33 02 c0       	push   0xc002334c
c000e9a5:	e8 14 e1 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000e9aa:	59                   	pop    ecx
c000e9ab:	58                   	pop    eax
c000e9ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e9af:	68 57 33 02 c0       	push   0xc0023357
c000e9b4:	e8 05 e1 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000e9b9:	58                   	pop    eax
c000e9ba:	5a                   	pop    edx
c000e9bb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e9be:	68 62 33 02 c0       	push   0xc0023362
c000e9c3:	e8 f6 e0 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000e9c8:	59                   	pop    ecx
c000e9c9:	58                   	pop    eax
c000e9ca:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e9cd:	68 6d 33 02 c0       	push   0xc002336d
c000e9d2:	e8 e7 e0 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000e9d7:	58                   	pop    eax
c000e9d8:	5a                   	pop    edx
c000e9d9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e9dc:	68 78 33 02 c0       	push   0xc0023378
c000e9e1:	e8 d8 e0 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000e9e6:	59                   	pop    ecx
c000e9e7:	58                   	pop    eax
c000e9e8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e9eb:	68 83 33 02 c0       	push   0xc0023383
c000e9f0:	e8 c9 e0 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000e9f5:	58                   	pop    eax
c000e9f6:	5a                   	pop    edx
c000e9f7:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000e9fa:	68 8e 33 02 c0       	push   0xc002338e
c000e9ff:	e8 ba e0 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000ea04:	59                   	pop    ecx
c000ea05:	58                   	pop    eax
c000ea06:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ea09:	68 9d 33 02 c0       	push   0xc002339d
c000ea0e:	e8 ab e0 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000ea13:	58                   	pop    eax
c000ea14:	5a                   	pop    edx
c000ea15:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ea18:	68 a8 33 02 c0       	push   0xc00233a8
c000ea1d:	e8 9c e0 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000ea22:	59                   	pop    ecx
c000ea23:	58                   	pop    eax
c000ea24:	57                   	push   edi
c000ea25:	68 b3 33 02 c0       	push   0xc00233b3
c000ea2a:	e8 8f e0 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000ea2f:	58                   	pop    eax
c000ea30:	5a                   	pop    edx
c000ea31:	56                   	push   esi
c000ea32:	68 be 33 02 c0       	push   0xc00233be
c000ea37:	e8 82 e0 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000ea3c:	59                   	pop    ecx
c000ea3d:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ea42:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ea48:	e8 ca bd ff ff       	call   c000a817 <setActiveTerminal(VgaText*)>
c000ea4d:	58                   	pop    eax
c000ea4e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ea51:	5a                   	pop    edx
c000ea52:	c1 e0 05             	shl    eax,0x5
c000ea55:	05 c0 56 02 c0       	add    eax,0xc00256c0
c000ea5a:	50                   	push   eax
c000ea5b:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ea60:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ea66:	e8 b9 c2 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000ea6b:	59                   	pop    ecx
c000ea6c:	58                   	pop    eax
c000ea6d:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ea72:	68 c9 33 02 c0       	push   0xc00233c9
c000ea77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ea7d:	e8 a2 c2 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000ea82:	58                   	pop    eax
c000ea83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ea88:	5a                   	pop    edx
c000ea89:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ea8c:	83 c0 0c             	add    eax,0xc
c000ea8f:	50                   	push   eax
c000ea90:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ea95:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ea9b:	e8 84 c2 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000eaa0:	59                   	pop    ecx
c000eaa1:	58                   	pop    eax
c000eaa2:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000eaa7:	68 d2 33 02 c0       	push   0xc00233d2
c000eaac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eab2:	e8 6d c2 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000eab7:	58                   	pop    eax
c000eab8:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000eabd:	5a                   	pop    edx
c000eabe:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000eac1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eac7:	e8 12 c2 ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c000eacc:	59                   	pop    ecx
c000eacd:	58                   	pop    eax
c000eace:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ead3:	68 da 33 02 c0       	push   0xc00233da
c000ead8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eade:	e8 41 c2 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000eae3:	58                   	pop    eax
c000eae4:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000eae9:	5a                   	pop    edx
c000eaea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000eaed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eaf3:	e8 e6 c1 ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c000eaf8:	59                   	pop    ecx
c000eaf9:	58                   	pop    eax
c000eafa:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000eaff:	68 e2 33 02 c0       	push   0xc00233e2
c000eb04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eb0a:	e8 15 c2 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000eb0f:	58                   	pop    eax
c000eb10:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000eb15:	5a                   	pop    edx
c000eb16:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000eb19:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eb1f:	e8 ba c1 ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c000eb24:	59                   	pop    ecx
c000eb25:	58                   	pop    eax
c000eb26:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000eb2b:	68 ea 33 02 c0       	push   0xc00233ea
c000eb30:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eb36:	e8 e9 c1 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000eb3b:	58                   	pop    eax
c000eb3c:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000eb41:	5a                   	pop    edx
c000eb42:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000eb45:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eb4b:	e8 8e c1 ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c000eb50:	59                   	pop    ecx
c000eb51:	58                   	pop    eax
c000eb52:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000eb57:	68 f2 33 02 c0       	push   0xc00233f2
c000eb5c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eb62:	e8 bd c1 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000eb67:	58                   	pop    eax
c000eb68:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000eb6d:	5a                   	pop    edx
c000eb6e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000eb71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eb77:	e8 62 c1 ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c000eb7c:	59                   	pop    ecx
c000eb7d:	58                   	pop    eax
c000eb7e:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000eb83:	68 fa 33 02 c0       	push   0xc00233fa
c000eb88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eb8e:	e8 91 c1 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000eb93:	58                   	pop    eax
c000eb94:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000eb99:	5a                   	pop    edx
c000eb9a:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000eb9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eba3:	e8 36 c1 ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c000eba8:	59                   	pop    ecx
c000eba9:	58                   	pop    eax
c000ebaa:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ebaf:	68 02 34 02 c0       	push   0xc0023402
c000ebb4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ebba:	e8 65 c1 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000ebbf:	58                   	pop    eax
c000ebc0:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ebc5:	5a                   	pop    edx
c000ebc6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ebca:	52                   	push   edx
c000ebcb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ebd1:	e8 08 c1 ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c000ebd6:	59                   	pop    ecx
c000ebd7:	58                   	pop    eax
c000ebd8:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ebdd:	68 0b 34 02 c0       	push   0xc002340b
c000ebe2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ebe8:	e8 37 c1 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000ebed:	58                   	pop    eax
c000ebee:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ebf3:	5a                   	pop    edx
c000ebf4:	57                   	push   edi
c000ebf5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ebfb:	e8 de c0 ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c000ec00:	59                   	pop    ecx
c000ec01:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ec06:	5f                   	pop    edi
c000ec07:	68 13 34 02 c0       	push   0xc0023413
c000ec0c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ec12:	e8 0d c1 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000ec17:	58                   	pop    eax
c000ec18:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ec1d:	5a                   	pop    edx
c000ec1e:	56                   	push   esi
c000ec1f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ec25:	e8 b4 c0 ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c000ec2a:	59                   	pop    ecx
c000ec2b:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ec30:	5e                   	pop    esi
c000ec31:	68 1b 34 02 c0       	push   0xc002341b
c000ec36:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ec3c:	e8 e3 c0 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000ec41:	5f                   	pop    edi
c000ec42:	58                   	pop    eax
c000ec43:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ec48:	55                   	push   ebp
c000ec49:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ec4f:	e8 8a c0 ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c000ec54:	58                   	pop    eax
c000ec55:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ec5a:	5a                   	pop    edx
c000ec5b:	68 23 34 02 c0       	push   0xc0023423
c000ec60:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ec66:	e8 b9 c0 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000ec6b:	0f 21 c0             	mov    eax,db0
c000ec6e:	59                   	pop    ecx
c000ec6f:	5e                   	pop    esi
c000ec70:	50                   	push   eax
c000ec71:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ec76:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ec7c:	e8 5d c0 ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c000ec81:	5f                   	pop    edi
c000ec82:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ec87:	5d                   	pop    ebp
c000ec88:	68 2c 34 02 c0       	push   0xc002342c
c000ec8d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ec93:	e8 8c c0 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000ec98:	0f 21 c8             	mov    eax,db1
c000ec9b:	5a                   	pop    edx
c000ec9c:	59                   	pop    ecx
c000ec9d:	50                   	push   eax
c000ec9e:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000eca3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eca9:	e8 30 c0 ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c000ecae:	5e                   	pop    esi
c000ecaf:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ecb4:	5f                   	pop    edi
c000ecb5:	68 34 34 02 c0       	push   0xc0023434
c000ecba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ecc0:	e8 5f c0 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000ecc5:	0f 21 d0             	mov    eax,db2
c000ecc8:	5d                   	pop    ebp
c000ecc9:	5a                   	pop    edx
c000ecca:	50                   	push   eax
c000eccb:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ecd0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ecd6:	e8 03 c0 ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c000ecdb:	59                   	pop    ecx
c000ecdc:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ece1:	5e                   	pop    esi
c000ece2:	68 3c 34 02 c0       	push   0xc002343c
c000ece7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eced:	e8 32 c0 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000ecf2:	0f 21 d8             	mov    eax,db3
c000ecf5:	5f                   	pop    edi
c000ecf6:	5d                   	pop    ebp
c000ecf7:	50                   	push   eax
c000ecf8:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ecfd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ed03:	e8 d6 bf ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c000ed08:	58                   	pop    eax
c000ed09:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ed0e:	5a                   	pop    edx
c000ed0f:	68 44 34 02 c0       	push   0xc0023444
c000ed14:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ed1a:	e8 05 c0 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000ed1f:	0f 21 f0             	mov    eax,db6
c000ed22:	59                   	pop    ecx
c000ed23:	5e                   	pop    esi
c000ed24:	50                   	push   eax
c000ed25:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ed2a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ed30:	e8 a9 bf ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c000ed35:	5f                   	pop    edi
c000ed36:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ed3b:	5d                   	pop    ebp
c000ed3c:	68 4c 34 02 c0       	push   0xc002344c
c000ed41:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ed47:	e8 d8 bf ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000ed4c:	0f 21 f8             	mov    eax,db7
c000ed4f:	5a                   	pop    edx
c000ed50:	59                   	pop    ecx
c000ed51:	50                   	push   eax
c000ed52:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ed57:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ed5d:	e8 7c bf ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c000ed62:	5e                   	pop    esi
c000ed63:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed66:	e8 8e 88 00 00       	call   c00175f9 <Thr::getDriverNameFromAddress(unsigned long)>
c000ed6b:	83 c4 10             	add    esp,0x10
c000ed6e:	85 c0                	test   eax,eax
c000ed70:	74 7d                	je     c000edef <displayDebugInfo(regs*)+0x48b>
c000ed72:	89 c6                	mov    esi,eax
c000ed74:	50                   	push   eax
c000ed75:	50                   	push   eax
c000ed76:	56                   	push   esi
c000ed77:	68 54 34 02 c0       	push   0xc0023454
c000ed7c:	e8 3d dd ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000ed81:	5a                   	pop    edx
c000ed82:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ed87:	59                   	pop    ecx
c000ed88:	68 62 34 02 c0       	push   0xc0023462
c000ed8d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ed93:	e8 8c bf ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000ed98:	5f                   	pop    edi
c000ed99:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000ed9e:	5d                   	pop    ebp
c000ed9f:	56                   	push   esi
c000eda0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eda6:	e8 79 bf ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000edab:	58                   	pop    eax
c000edac:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000edb1:	5a                   	pop    edx
c000edb2:	68 6e 34 02 c0       	push   0xc002346e
c000edb7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000edbd:	e8 62 bf ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c000edc2:	59                   	pop    ecx
c000edc3:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000edc8:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c000edce:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000edd1:	e8 5a 88 00 00       	call   c0017630 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000edd6:	5b                   	pop    ebx
c000edd7:	5d                   	pop    ebp
c000edd8:	50                   	push   eax
c000edd9:	57                   	push   edi
c000edda:	e8 ff be ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c000eddf:	58                   	pop    eax
c000ede0:	5a                   	pop    edx
c000ede1:	56                   	push   esi
c000ede2:	68 7a 34 02 c0       	push   0xc002347a
c000ede7:	e8 d2 dc ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000edec:	83 c4 10             	add    esp,0x10
c000edef:	fa                   	cli    
c000edf0:	f4                   	hlt    
c000edf1:	eb fe                	jmp    c000edf1 <displayDebugInfo(regs*)+0x48d>

c000edf3 <x87EmulHandler(regs*, void*)>:
c000edf3:	83 ec 0c             	sub    esp,0xc
c000edf6:	0f 20 c2             	mov    edx,cr0
c000edf9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000edfe:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c000ee02:	75 4b                	jne    c000ee4f <x87EmulHandler(regs*, void*)+0x5c>
c000ee04:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000ee09:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000ee0f:	85 c0                	test   eax,eax
c000ee11:	74 05                	je     c000ee18 <x87EmulHandler(regs*, void*)+0x25>
c000ee13:	83 e2 08             	and    edx,0x8
c000ee16:	75 17                	jne    c000ee2f <x87EmulHandler(regs*, void*)+0x3c>
c000ee18:	83 ec 0c             	sub    esp,0xc
c000ee1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ee1f:	e8 bb ab 00 00       	call   c00199df <Vm::x87Handler(regs*)>
c000ee24:	83 c4 10             	add    esp,0x10
c000ee27:	84 c0                	test   al,al
c000ee29:	74 24                	je     c000ee4f <x87EmulHandler(regs*, void*)+0x5c>
c000ee2b:	83 c4 0c             	add    esp,0xc
c000ee2e:	c3                   	ret    
c000ee2f:	83 ec 0c             	sub    esp,0xc
c000ee32:	68 a0 34 02 c0       	push   0xc00234a0
c000ee37:	e8 82 dc ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000ee3c:	0f 06                	clts   
c000ee3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee43:	83 c4 10             	add    esp,0x10
c000ee46:	a3 e8 63 02 c0       	mov    ds:0xc00263e8,eax
c000ee4b:	83 c4 0c             	add    esp,0xc
c000ee4e:	c3                   	ret    
c000ee4f:	83 ec 0c             	sub    esp,0xc
c000ee52:	68 8a 34 02 c0       	push   0xc002348a
c000ee57:	e8 62 dc ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000ee5c:	5a                   	pop    edx
c000ee5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ee61:	e8 fe fa ff ff       	call   c000e964 <displayDebugInfo(regs*)>

c000ee66 <gpFault(regs*, void*)>:
c000ee66:	53                   	push   ebx
c000ee67:	83 ec 14             	sub    esp,0x14
c000ee6a:	c7 05 e4 63 02 c0 b8 8e 01 c0 	mov    DWORD PTR ds:0xc00263e4,0xc0018eb8
c000ee74:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee78:	53                   	push   ebx
c000ee79:	e8 3a a0 00 00       	call   c0018eb8 <Vm::faultHandler(regs*)>
c000ee7e:	83 c4 10             	add    esp,0x10
c000ee81:	84 c0                	test   al,al
c000ee83:	74 05                	je     c000ee8a <gpFault(regs*, void*)+0x24>
c000ee85:	83 c4 08             	add    esp,0x8
c000ee88:	5b                   	pop    ebx
c000ee89:	c3                   	ret    
c000ee8a:	83 ec 0c             	sub    esp,0xc
c000ee8d:	68 ad 34 02 c0       	push   0xc00234ad
c000ee92:	e8 27 dc ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000ee97:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee9a:	e8 c5 fa ff ff       	call   c000e964 <displayDebugInfo(regs*)>

c000ee9f <pgFault(regs*, void*)>:
c000ee9f:	53                   	push   ebx
c000eea0:	83 ec 10             	sub    esp,0x10
c000eea3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000eea7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000eeaa:	68 c8 34 02 c0       	push   0xc00234c8
c000eeaf:	e8 0a dc ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000eeb4:	0f 20 d0             	mov    eax,cr2
c000eeb7:	5a                   	pop    edx
c000eeb8:	59                   	pop    ecx
c000eeb9:	50                   	push   eax
c000eeba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eebf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eec2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000eec8:	e8 ef d6 ff ff       	call   c000c5bc <VAS::tryLoadBackOffDisk(unsigned long)>
c000eecd:	83 c4 10             	add    esp,0x10
c000eed0:	84 c0                	test   al,al
c000eed2:	74 05                	je     c000eed9 <pgFault(regs*, void*)+0x3a>
c000eed4:	83 c4 08             	add    esp,0x8
c000eed7:	5b                   	pop    ebx
c000eed8:	c3                   	ret    
c000eed9:	83 ec 0c             	sub    esp,0xc
c000eedc:	68 dd 34 02 c0       	push   0xc00234dd
c000eee1:	e8 d8 db ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000eee6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eee9:	e8 76 fa ff ff       	call   c000e964 <displayDebugInfo(regs*)>

c000eeee <otherISRHandler(regs*, void*)>:
c000eeee:	53                   	push   ebx
c000eeef:	83 ec 0c             	sub    esp,0xc
c000eef2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000eef6:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000eef9:	50                   	push   eax
c000eefa:	50                   	push   eax
c000eefb:	68 ea 34 02 c0       	push   0xc00234ea
c000ef00:	e8 b9 db ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000ef05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef08:	e8 57 fa ff ff       	call   c000e964 <displayDebugInfo(regs*)>

c000ef0d <opcodeFault(regs*, void*)>:
c000ef0d:	55                   	push   ebp
c000ef0e:	89 e5                	mov    ebp,esp
c000ef10:	56                   	push   esi
c000ef11:	53                   	push   ebx
c000ef12:	83 ec 40             	sub    esp,0x40
c000ef15:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000ef1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ef20:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000ef26:	84 c0                	test   al,al
c000ef28:	74 24                	je     c000ef4e <opcodeFault(regs*, void*)+0x41>
c000ef2a:	83 ec 0c             	sub    esp,0xc
c000ef2d:	68 08 35 02 c0       	push   0xc0023508
c000ef32:	e8 87 db ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000ef37:	83 c4 10             	add    esp,0x10
c000ef3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef3d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef40:	8d 50 19             	lea    edx,[eax+0x19]
c000ef43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef46:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef49:	e9 d5 05 00 00       	jmp    c000f523 <opcodeFault(regs*, void*)+0x616>
c000ef4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef51:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef54:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ef57:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000ef5b:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c000ef5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef62:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef65:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000ef68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef6b:	8a 00                	mov    al,BYTE PTR [eax]
c000ef6d:	3c f0                	cmp    al,0xf0
c000ef6f:	75 17                	jne    c000ef88 <opcodeFault(regs*, void*)+0x7b>
c000ef71:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef77:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef7a:	8d 50 01             	lea    edx,[eax+0x1]
c000ef7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef80:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef83:	e9 da 00 00 00       	jmp    c000f062 <opcodeFault(regs*, void*)+0x155>
c000ef88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef8b:	8a 00                	mov    al,BYTE PTR [eax]
c000ef8d:	3c f2                	cmp    al,0xf2
c000ef8f:	74 09                	je     c000ef9a <opcodeFault(regs*, void*)+0x8d>
c000ef91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef94:	8a 00                	mov    al,BYTE PTR [eax]
c000ef96:	3c f3                	cmp    al,0xf3
c000ef98:	75 1b                	jne    c000efb5 <opcodeFault(regs*, void*)+0xa8>
c000ef9a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef9e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efa4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efa7:	8d 50 01             	lea    edx,[eax+0x1]
c000efaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efb0:	e9 ad 00 00 00       	jmp    c000f062 <opcodeFault(regs*, void*)+0x155>
c000efb5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efb8:	8a 00                	mov    al,BYTE PTR [eax]
c000efba:	3c 66                	cmp    al,0x66
c000efbc:	75 1f                	jne    c000efdd <opcodeFault(regs*, void*)+0xd0>
c000efbe:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000efc2:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c000efc6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efcc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efcf:	8d 50 01             	lea    edx,[eax+0x1]
c000efd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efd5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efd8:	e9 85 00 00 00       	jmp    c000f062 <opcodeFault(regs*, void*)+0x155>
c000efdd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efe0:	8a 00                	mov    al,BYTE PTR [eax]
c000efe2:	3c 67                	cmp    al,0x67
c000efe4:	75 18                	jne    c000effe <opcodeFault(regs*, void*)+0xf1>
c000efe6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000efea:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eff0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000eff3:	8d 50 01             	lea    edx,[eax+0x1]
c000eff6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eff9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000effc:	eb 64                	jmp    c000f062 <opcodeFault(regs*, void*)+0x155>
c000effe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f001:	8a 00                	mov    al,BYTE PTR [eax]
c000f003:	3c 2e                	cmp    al,0x2e
c000f005:	74 09                	je     c000f010 <opcodeFault(regs*, void*)+0x103>
c000f007:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f00a:	8a 00                	mov    al,BYTE PTR [eax]
c000f00c:	3c 3e                	cmp    al,0x3e
c000f00e:	75 18                	jne    c000f028 <opcodeFault(regs*, void*)+0x11b>
c000f010:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f014:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f017:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f01a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f01d:	8d 50 01             	lea    edx,[eax+0x1]
c000f020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f023:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f026:	eb 3a                	jmp    c000f062 <opcodeFault(regs*, void*)+0x155>
c000f028:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f02b:	8a 00                	mov    al,BYTE PTR [eax]
c000f02d:	3c 36                	cmp    al,0x36
c000f02f:	74 1b                	je     c000f04c <opcodeFault(regs*, void*)+0x13f>
c000f031:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f034:	8a 00                	mov    al,BYTE PTR [eax]
c000f036:	3c 26                	cmp    al,0x26
c000f038:	74 12                	je     c000f04c <opcodeFault(regs*, void*)+0x13f>
c000f03a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f03d:	8a 00                	mov    al,BYTE PTR [eax]
c000f03f:	3c 64                	cmp    al,0x64
c000f041:	74 09                	je     c000f04c <opcodeFault(regs*, void*)+0x13f>
c000f043:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f046:	8a 00                	mov    al,BYTE PTR [eax]
c000f048:	3c 65                	cmp    al,0x65
c000f04a:	75 16                	jne    c000f062 <opcodeFault(regs*, void*)+0x155>
c000f04c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f050:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f053:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f056:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f059:	8d 50 01             	lea    edx,[eax+0x1]
c000f05c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f05f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f062:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f065:	8a 00                	mov    al,BYTE PTR [eax]
c000f067:	3c 0f                	cmp    al,0xf
c000f069:	0f 85 ad 00 00 00    	jne    c000f11c <opcodeFault(regs*, void*)+0x20f>
c000f06f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f072:	40                   	inc    eax
c000f073:	8a 00                	mov    al,BYTE PTR [eax]
c000f075:	3c c2                	cmp    al,0xc2
c000f077:	74 0e                	je     c000f087 <opcodeFault(regs*, void*)+0x17a>
c000f079:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f07c:	40                   	inc    eax
c000f07d:	8a 00                	mov    al,BYTE PTR [eax]
c000f07f:	3c c3                	cmp    al,0xc3
c000f081:	0f 85 95 00 00 00    	jne    c000f11c <opcodeFault(regs*, void*)+0x20f>
c000f087:	83 ec 0c             	sub    esp,0xc
c000f08a:	68 2b 35 02 c0       	push   0xc002352b
c000f08f:	e8 2a da ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000f094:	83 c4 10             	add    esp,0x10
c000f097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f09a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0a3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f0a6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f0a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f0ac:	8a 00                	mov    al,BYTE PTR [eax]
c000f0ae:	8d 50 fe             	lea    edx,[eax-0x2]
c000f0b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f0b4:	88 10                	mov    BYTE PTR [eax],dl
c000f0b6:	8d 45 c2             	lea    eax,[ebp-0x3e]
c000f0b9:	50                   	push   eax
c000f0ba:	8d 45 c3             	lea    eax,[ebp-0x3d]
c000f0bd:	50                   	push   eax
c000f0be:	8d 45 c4             	lea    eax,[ebp-0x3c]
c000f0c1:	50                   	push   eax
c000f0c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f0c5:	e8 cc 4a 00 00       	call   c0013b96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f0ca:	83 c4 10             	add    esp,0x10
c000f0cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0d0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f0d3:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c000f0d6:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000f0d9:	01 d0                	add    eax,edx
c000f0db:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000f0de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0e1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f0e4:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c000f0e7:	48                   	dec    eax
c000f0e8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f0eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0ee:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c000f0f1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f0f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0f7:	83 ec 04             	sub    esp,0x4
c000f0fa:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f0fd:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f100:	50                   	push   eax
c000f101:	e8 ae 10 ff ff       	call   c00001b4 <voodooXADD>
c000f106:	83 c4 10             	add    esp,0x10
c000f109:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f10c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f10f:	01 c2                	add    edx,eax
c000f111:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f114:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f117:	e9 07 04 00 00       	jmp    c000f523 <opcodeFault(regs*, void*)+0x616>
c000f11c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f11f:	8a 00                	mov    al,BYTE PTR [eax]
c000f121:	3c 0f                	cmp    al,0xf
c000f123:	0f 85 8b 01 00 00    	jne    c000f2b4 <opcodeFault(regs*, void*)+0x3a7>
c000f129:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f12c:	40                   	inc    eax
c000f12d:	8a 00                	mov    al,BYTE PTR [eax]
c000f12f:	3c c7                	cmp    al,0xc7
c000f131:	0f 86 7d 01 00 00    	jbe    c000f2b4 <opcodeFault(regs*, void*)+0x3a7>
c000f137:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f13a:	40                   	inc    eax
c000f13b:	8a 00                	mov    al,BYTE PTR [eax]
c000f13d:	3c cf                	cmp    al,0xcf
c000f13f:	0f 87 6f 01 00 00    	ja     c000f2b4 <opcodeFault(regs*, void*)+0x3a7>
c000f145:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f148:	40                   	inc    eax
c000f149:	8a 00                	mov    al,BYTE PTR [eax]
c000f14b:	83 c0 38             	add    eax,0x38
c000f14e:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c000f151:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c000f155:	75 0b                	jne    c000f162 <opcodeFault(regs*, void*)+0x255>
c000f157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f15a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f15d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f160:	eb 75                	jmp    c000f1d7 <opcodeFault(regs*, void*)+0x2ca>
c000f162:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c000f166:	75 0b                	jne    c000f173 <opcodeFault(regs*, void*)+0x266>
c000f168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f16b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f16e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f171:	eb 64                	jmp    c000f1d7 <opcodeFault(regs*, void*)+0x2ca>
c000f173:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c000f177:	75 0b                	jne    c000f184 <opcodeFault(regs*, void*)+0x277>
c000f179:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f17c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f17f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f182:	eb 53                	jmp    c000f1d7 <opcodeFault(regs*, void*)+0x2ca>
c000f184:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c000f188:	75 0b                	jne    c000f195 <opcodeFault(regs*, void*)+0x288>
c000f18a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f18d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f190:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f193:	eb 42                	jmp    c000f1d7 <opcodeFault(regs*, void*)+0x2ca>
c000f195:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c000f199:	75 0b                	jne    c000f1a6 <opcodeFault(regs*, void*)+0x299>
c000f19b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f19e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c000f1a1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f1a4:	eb 31                	jmp    c000f1d7 <opcodeFault(regs*, void*)+0x2ca>
c000f1a6:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c000f1aa:	75 0b                	jne    c000f1b7 <opcodeFault(regs*, void*)+0x2aa>
c000f1ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1af:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000f1b2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f1b5:	eb 20                	jmp    c000f1d7 <opcodeFault(regs*, void*)+0x2ca>
c000f1b7:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c000f1bb:	75 0b                	jne    c000f1c8 <opcodeFault(regs*, void*)+0x2bb>
c000f1bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1c0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000f1c3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f1c6:	eb 0f                	jmp    c000f1d7 <opcodeFault(regs*, void*)+0x2ca>
c000f1c8:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c000f1cc:	75 09                	jne    c000f1d7 <opcodeFault(regs*, void*)+0x2ca>
c000f1ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000f1d4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f1d7:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c000f1db:	74 10                	je     c000f1ed <opcodeFault(regs*, void*)+0x2e0>
c000f1dd:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c000f1e4:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c000f1eb:	eb 2d                	jmp    c000f21a <opcodeFault(regs*, void*)+0x30d>
c000f1ed:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000f1f0:	c1 e0 18             	shl    eax,0x18
c000f1f3:	89 c2                	mov    edx,eax
c000f1f5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000f1f8:	c1 e0 08             	shl    eax,0x8
c000f1fb:	25 00 00 ff 00       	and    eax,0xff0000
c000f200:	09 c2                	or     edx,eax
c000f202:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000f205:	c1 e8 08             	shr    eax,0x8
c000f208:	25 00 ff 00 00       	and    eax,0xff00
c000f20d:	09 c2                	or     edx,eax
c000f20f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000f212:	c1 e8 18             	shr    eax,0x18
c000f215:	09 d0                	or     eax,edx
c000f217:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f21a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c000f21e:	75 0b                	jne    c000f22b <opcodeFault(regs*, void*)+0x31e>
c000f220:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f223:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000f226:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f229:	eb 75                	jmp    c000f2a0 <opcodeFault(regs*, void*)+0x393>
c000f22b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c000f22f:	75 0b                	jne    c000f23c <opcodeFault(regs*, void*)+0x32f>
c000f231:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f234:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000f237:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000f23a:	eb 64                	jmp    c000f2a0 <opcodeFault(regs*, void*)+0x393>
c000f23c:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c000f240:	75 0b                	jne    c000f24d <opcodeFault(regs*, void*)+0x340>
c000f242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f245:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000f248:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f24b:	eb 53                	jmp    c000f2a0 <opcodeFault(regs*, void*)+0x393>
c000f24d:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c000f251:	75 0b                	jne    c000f25e <opcodeFault(regs*, void*)+0x351>
c000f253:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f256:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000f259:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000f25c:	eb 42                	jmp    c000f2a0 <opcodeFault(regs*, void*)+0x393>
c000f25e:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c000f262:	75 0b                	jne    c000f26f <opcodeFault(regs*, void*)+0x362>
c000f264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f267:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000f26a:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c000f26d:	eb 31                	jmp    c000f2a0 <opcodeFault(regs*, void*)+0x393>
c000f26f:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c000f273:	75 0b                	jne    c000f280 <opcodeFault(regs*, void*)+0x373>
c000f275:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f278:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000f27b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000f27e:	eb 20                	jmp    c000f2a0 <opcodeFault(regs*, void*)+0x393>
c000f280:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c000f284:	75 0b                	jne    c000f291 <opcodeFault(regs*, void*)+0x384>
c000f286:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f289:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000f28c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000f28f:	eb 0f                	jmp    c000f2a0 <opcodeFault(regs*, void*)+0x393>
c000f291:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c000f295:	75 09                	jne    c000f2a0 <opcodeFault(regs*, void*)+0x393>
c000f297:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f29a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000f29d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000f2a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2a3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2a6:	8d 50 02             	lea    edx,[eax+0x2]
c000f2a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2ac:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f2af:	e9 6f 02 00 00       	jmp    c000f523 <opcodeFault(regs*, void*)+0x616>
c000f2b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2b7:	8a 00                	mov    al,BYTE PTR [eax]
c000f2b9:	3c 0f                	cmp    al,0xf
c000f2bb:	0f 85 8d 01 00 00    	jne    c000f44e <opcodeFault(regs*, void*)+0x541>
c000f2c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2c4:	40                   	inc    eax
c000f2c5:	8a 00                	mov    al,BYTE PTR [eax]
c000f2c7:	3c c7                	cmp    al,0xc7
c000f2c9:	0f 85 7f 01 00 00    	jne    c000f44e <opcodeFault(regs*, void*)+0x541>
c000f2cf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f2d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2d5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2d8:	8d 50 01             	lea    edx,[eax+0x1]
c000f2db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2de:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f2e1:	8d 45 ba             	lea    eax,[ebp-0x46]
c000f2e4:	50                   	push   eax
c000f2e5:	8d 45 bb             	lea    eax,[ebp-0x45]
c000f2e8:	50                   	push   eax
c000f2e9:	8d 45 bc             	lea    eax,[ebp-0x44]
c000f2ec:	50                   	push   eax
c000f2ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f2f0:	e8 a1 48 00 00       	call   c0013b96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f2f5:	83 c4 10             	add    esp,0x10
c000f2f8:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f2fb:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c000f2fe:	83 f0 01             	xor    eax,0x1
c000f301:	84 c0                	test   al,al
c000f303:	0f 84 45 01 00 00    	je     c000f44e <opcodeFault(regs*, void*)+0x541>
c000f309:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c000f30c:	3c 01                	cmp    al,0x1
c000f30e:	0f 85 3a 01 00 00    	jne    c000f44e <opcodeFault(regs*, void*)+0x541>
c000f314:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f317:	83 f0 01             	xor    eax,0x1
c000f31a:	84 c0                	test   al,al
c000f31c:	0f 84 2c 01 00 00    	je     c000f44e <opcodeFault(regs*, void*)+0x541>
c000f322:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f325:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f328:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000f32b:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c000f332:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c000f335:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f338:	89 c2                	mov    edx,eax
c000f33a:	b8 00 00 00 00       	mov    eax,0x0
c000f33f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000f342:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c000f345:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f348:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f34b:	ba 00 00 00 00       	mov    edx,0x0
c000f350:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c000f353:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c000f356:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f359:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f35c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c000f35f:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c000f366:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c000f369:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c000f36c:	89 c2                	mov    edx,eax
c000f36e:	b8 00 00 00 00       	mov    eax,0x0
c000f373:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c000f376:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c000f379:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f37c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f37f:	ba 00 00 00 00       	mov    edx,0x0
c000f384:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c000f387:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c000f38a:	fa                   	cli    
c000f38b:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000f390:	40                   	inc    eax
c000f391:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c000f396:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f399:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f39c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f39e:	89 c1                	mov    ecx,eax
c000f3a0:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c000f3a3:	89 cb                	mov    ebx,ecx
c000f3a5:	89 d0                	mov    eax,edx
c000f3a7:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c000f3aa:	89 c6                	mov    esi,eax
c000f3ac:	89 f0                	mov    eax,esi
c000f3ae:	09 d8                	or     eax,ebx
c000f3b0:	85 c0                	test   eax,eax
c000f3b2:	75 21                	jne    c000f3d5 <opcodeFault(regs*, void*)+0x4c8>
c000f3b4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c000f3b7:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c000f3ba:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c000f3bd:	89 01                	mov    DWORD PTR [ecx],eax
c000f3bf:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f3c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f3c8:	83 c8 40             	or     eax,0x40
c000f3cb:	89 c2                	mov    edx,eax
c000f3cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3d0:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f3d3:	eb 3e                	jmp    c000f413 <opcodeFault(regs*, void*)+0x506>
c000f3d5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f3d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f3db:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3dd:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000f3e0:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c000f3e3:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c000f3e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3e9:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f3ec:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c000f3ef:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f3f2:	89 d0                	mov    eax,edx
c000f3f4:	31 d2                	xor    edx,edx
c000f3f6:	89 c3                	mov    ebx,eax
c000f3f8:	89 d6                	mov    esi,edx
c000f3fa:	89 da                	mov    edx,ebx
c000f3fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3ff:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f402:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f405:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f408:	83 e0 bf             	and    eax,0xffffffbf
c000f40b:	89 c2                	mov    edx,eax
c000f40d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f410:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f413:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000f418:	48                   	dec    eax
c000f419:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c000f41e:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000f423:	85 c0                	test   eax,eax
c000f425:	75 01                	jne    c000f428 <opcodeFault(regs*, void*)+0x51b>
c000f427:	fb                   	sti    
c000f428:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f42b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f42e:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c000f431:	01 c2                	add    edx,eax
c000f433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f436:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f439:	83 ec 0c             	sub    esp,0xc
c000f43c:	68 3a 35 02 c0       	push   0xc002353a
c000f441:	e8 78 d6 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000f446:	83 c4 10             	add    esp,0x10
c000f449:	e9 d5 00 00 00       	jmp    c000f523 <opcodeFault(regs*, void*)+0x616>
c000f44e:	83 ec 0c             	sub    esp,0xc
c000f451:	68 4d 35 02 c0       	push   0xc002354d
c000f456:	e8 63 d6 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000f45b:	83 c4 10             	add    esp,0x10
c000f45e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f461:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f467:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f46a:	c1 e0 04             	shl    eax,0x4
c000f46d:	01 d0                	add    eax,edx
c000f46f:	83 c0 03             	add    eax,0x3
c000f472:	8a 00                	mov    al,BYTE PTR [eax]
c000f474:	0f b6 d8             	movzx  ebx,al
c000f477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f47a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f47d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f480:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f483:	c1 e0 04             	shl    eax,0x4
c000f486:	01 d0                	add    eax,edx
c000f488:	83 c0 02             	add    eax,0x2
c000f48b:	8a 00                	mov    al,BYTE PTR [eax]
c000f48d:	0f b6 c8             	movzx  ecx,al
c000f490:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f493:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f496:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f499:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f49c:	c1 e0 04             	shl    eax,0x4
c000f49f:	01 d0                	add    eax,edx
c000f4a1:	40                   	inc    eax
c000f4a2:	8a 00                	mov    al,BYTE PTR [eax]
c000f4a4:	0f b6 d0             	movzx  edx,al
c000f4a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4aa:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f4ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4b0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f4b3:	c1 e0 04             	shl    eax,0x4
c000f4b6:	01 f0                	add    eax,esi
c000f4b8:	8a 00                	mov    al,BYTE PTR [eax]
c000f4ba:	0f b6 c0             	movzx  eax,al
c000f4bd:	83 ec 0c             	sub    esp,0xc
c000f4c0:	53                   	push   ebx
c000f4c1:	51                   	push   ecx
c000f4c2:	52                   	push   edx
c000f4c3:	50                   	push   eax
c000f4c4:	68 60 35 02 c0       	push   0xc0023560
c000f4c9:	e8 f0 d5 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000f4ce:	83 c4 20             	add    esp,0x20
c000f4d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4d4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f4d7:	83 c0 03             	add    eax,0x3
c000f4da:	8a 00                	mov    al,BYTE PTR [eax]
c000f4dc:	0f b6 d8             	movzx  ebx,al
c000f4df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4e2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f4e5:	83 c0 02             	add    eax,0x2
c000f4e8:	8a 00                	mov    al,BYTE PTR [eax]
c000f4ea:	0f b6 c8             	movzx  ecx,al
c000f4ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4f0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f4f3:	40                   	inc    eax
c000f4f4:	8a 00                	mov    al,BYTE PTR [eax]
c000f4f6:	0f b6 d0             	movzx  edx,al
c000f4f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4fc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f4ff:	8a 00                	mov    al,BYTE PTR [eax]
c000f501:	0f b6 c0             	movzx  eax,al
c000f504:	83 ec 0c             	sub    esp,0xc
c000f507:	53                   	push   ebx
c000f508:	51                   	push   ecx
c000f509:	52                   	push   edx
c000f50a:	50                   	push   eax
c000f50b:	68 88 35 02 c0       	push   0xc0023588
c000f510:	e8 a9 d5 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c000f515:	83 c4 20             	add    esp,0x20
c000f518:	83 ec 0c             	sub    esp,0xc
c000f51b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f51e:	e8 41 f4 ff ff       	call   c000e964 <displayDebugInfo(regs*)>
c000f523:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f526:	5b                   	pop    ebx
c000f527:	5e                   	pop    esi
c000f528:	5d                   	pop    ebp
c000f529:	c3                   	ret    

c000f52a <displayProgramFault(char const*)>:
c000f52a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f52f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f532:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000f538:	85 c0                	test   eax,eax
c000f53a:	74 15                	je     c000f551 <displayProgramFault(char const*)+0x27>
c000f53c:	83 ec 0c             	sub    esp,0xc
c000f53f:	6a 04                	push   0x4
c000f541:	6a 0f                	push   0xf
c000f543:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f547:	50                   	push   eax
c000f548:	e8 d3 b4 ff ff       	call   c000aa20 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f54d:	83 c4 1c             	add    esp,0x1c
c000f550:	c3                   	ret    
c000f551:	c3                   	ret    

c000f552 <setupInterruptController()>:
c000f552:	55                   	push   ebp
c000f553:	89 e5                	mov    ebp,esp
c000f555:	53                   	push   ebx
c000f556:	83 ec 24             	sub    esp,0x24
c000f559:	b8 00 00 00 00       	mov    eax,0x0
c000f55e:	85 c0                	test   eax,eax
c000f560:	0f 95 c0             	setne  al
c000f563:	84 c0                	test   al,al
c000f565:	74 5b                	je     c000f5c2 <setupInterruptController()+0x70>
c000f567:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f56e:	83 ec 0c             	sub    esp,0xc
c000f571:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f574:	e8 e4 a4 ff ff       	call   c0009a5d <malloc>
c000f579:	83 c4 10             	add    esp,0x10
c000f57c:	89 c3                	mov    ebx,eax
c000f57e:	83 ec 0c             	sub    esp,0xc
c000f581:	53                   	push   ebx
c000f582:	e8 f3 07 01 00       	call   c001fd7a <APIC::APIC()>
c000f587:	83 c4 10             	add    esp,0x10
c000f58a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f58d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f590:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f593:	8b 00                	mov    eax,DWORD PTR [eax]
c000f595:	83 c0 08             	add    eax,0x8
c000f598:	8b 00                	mov    eax,DWORD PTR [eax]
c000f59a:	6a 00                	push   0x0
c000f59c:	6a 00                	push   0x0
c000f59e:	6a 00                	push   0x0
c000f5a0:	52                   	push   edx
c000f5a1:	ff d0                	call   eax
c000f5a3:	83 c4 10             	add    esp,0x10
c000f5a6:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000f5ab:	83 ec 08             	sub    esp,0x8
c000f5ae:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f5b1:	50                   	push   eax
c000f5b2:	e8 4b e9 ff ff       	call   c000df02 <Device::addChild(Device*)>
c000f5b7:	83 c4 10             	add    esp,0x10
c000f5ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f5bd:	e9 79 03 00 00       	jmp    c000f93b <setupInterruptController()+0x3e9>
c000f5c2:	a0 c0 6b 02 c0       	mov    al,ds:0xc0026bc0
c000f5c7:	84 c0                	test   al,al
c000f5c9:	75 14                	jne    c000f5df <setupInterruptController()+0x8d>
c000f5cb:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000f5d0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f5d6:	83 e2 fe             	and    edx,0xfffffffe
c000f5d9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f5df:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000f5e4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f5ea:	83 e0 01             	and    eax,0x1
c000f5ed:	84 c0                	test   al,al
c000f5ef:	0f 95 c0             	setne  al
c000f5f2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f5f5:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f5fc:	83 ec 0c             	sub    esp,0xc
c000f5ff:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f602:	e8 56 a4 ff ff       	call   c0009a5d <malloc>
c000f607:	83 c4 10             	add    esp,0x10
c000f60a:	89 c3                	mov    ebx,eax
c000f60c:	83 ec 0c             	sub    esp,0xc
c000f60f:	53                   	push   ebx
c000f610:	e8 bd 0c 01 00       	call   c00202d2 <PIC::PIC()>
c000f615:	83 c4 10             	add    esp,0x10
c000f618:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f61b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f61e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f621:	8b 00                	mov    eax,DWORD PTR [eax]
c000f623:	83 c0 08             	add    eax,0x8
c000f626:	8b 00                	mov    eax,DWORD PTR [eax]
c000f628:	6a 00                	push   0x0
c000f62a:	6a 00                	push   0x0
c000f62c:	6a 00                	push   0x0
c000f62e:	52                   	push   edx
c000f62f:	ff d0                	call   eax
c000f631:	83 c4 10             	add    esp,0x10
c000f634:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f638:	74 73                	je     c000f6ad <setupInterruptController()+0x15b>
c000f63a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f63d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f640:	8b 00                	mov    eax,DWORD PTR [eax]
c000f642:	83 c0 0c             	add    eax,0xc
c000f645:	8b 00                	mov    eax,DWORD PTR [eax]
c000f647:	6a 00                	push   0x0
c000f649:	6a 00                	push   0x0
c000f64b:	6a 00                	push   0x0
c000f64d:	52                   	push   edx
c000f64e:	ff d0                	call   eax
c000f650:	83 c4 10             	add    esp,0x10
c000f653:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f657:	74 15                	je     c000f66e <setupInterruptController()+0x11c>
c000f659:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f65c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f65e:	83 c0 04             	add    eax,0x4
c000f661:	8b 00                	mov    eax,DWORD PTR [eax]
c000f663:	83 ec 0c             	sub    esp,0xc
c000f666:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f669:	ff d0                	call   eax
c000f66b:	83 c4 10             	add    esp,0x10
c000f66e:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f675:	83 ec 0c             	sub    esp,0xc
c000f678:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f67b:	e8 dd a3 ff ff       	call   c0009a5d <malloc>
c000f680:	83 c4 10             	add    esp,0x10
c000f683:	89 c3                	mov    ebx,eax
c000f685:	83 ec 0c             	sub    esp,0xc
c000f688:	53                   	push   ebx
c000f689:	e8 ec 06 01 00       	call   c001fd7a <APIC::APIC()>
c000f68e:	83 c4 10             	add    esp,0x10
c000f691:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f694:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f697:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f69a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f69c:	83 c0 08             	add    eax,0x8
c000f69f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6a1:	6a 00                	push   0x0
c000f6a3:	6a 00                	push   0x0
c000f6a5:	6a 00                	push   0x0
c000f6a7:	52                   	push   edx
c000f6a8:	ff d0                	call   eax
c000f6aa:	83 c4 10             	add    esp,0x10
c000f6ad:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000f6b2:	83 ec 08             	sub    esp,0x8
c000f6b5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6b8:	50                   	push   eax
c000f6b9:	e8 44 e8 ff ff       	call   c000df02 <Device::addChild(Device*)>
c000f6be:	83 c4 10             	add    esp,0x10
c000f6c1:	c7 05 e8 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e8,0x0
c000f6cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6d0:	83 c0 24             	add    eax,0x24
c000f6d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6d5:	6a 00                	push   0x0
c000f6d7:	68 ee ee 00 c0       	push   0xc000eeee
c000f6dc:	6a 00                	push   0x0
c000f6de:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6e1:	ff d0                	call   eax
c000f6e3:	83 c4 10             	add    esp,0x10
c000f6e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6e9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6eb:	83 c0 24             	add    eax,0x24
c000f6ee:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6f0:	6a 00                	push   0x0
c000f6f2:	68 ee ee 00 c0       	push   0xc000eeee
c000f6f7:	6a 01                	push   0x1
c000f6f9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6fc:	ff d0                	call   eax
c000f6fe:	83 c4 10             	add    esp,0x10
c000f701:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f704:	8b 00                	mov    eax,DWORD PTR [eax]
c000f706:	83 c0 24             	add    eax,0x24
c000f709:	8b 00                	mov    eax,DWORD PTR [eax]
c000f70b:	6a 00                	push   0x0
c000f70d:	68 c1 e7 00 c0       	push   0xc000e7c1
c000f712:	6a 02                	push   0x2
c000f714:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f717:	ff d0                	call   eax
c000f719:	83 c4 10             	add    esp,0x10
c000f71c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f71f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f721:	83 c0 24             	add    eax,0x24
c000f724:	8b 00                	mov    eax,DWORD PTR [eax]
c000f726:	6a 00                	push   0x0
c000f728:	68 ee ee 00 c0       	push   0xc000eeee
c000f72d:	6a 03                	push   0x3
c000f72f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f732:	ff d0                	call   eax
c000f734:	83 c4 10             	add    esp,0x10
c000f737:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f73a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f73c:	83 c0 24             	add    eax,0x24
c000f73f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f741:	6a 00                	push   0x0
c000f743:	68 ee ee 00 c0       	push   0xc000eeee
c000f748:	6a 04                	push   0x4
c000f74a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f74d:	ff d0                	call   eax
c000f74f:	83 c4 10             	add    esp,0x10
c000f752:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f755:	8b 00                	mov    eax,DWORD PTR [eax]
c000f757:	83 c0 24             	add    eax,0x24
c000f75a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f75c:	6a 00                	push   0x0
c000f75e:	68 ee ee 00 c0       	push   0xc000eeee
c000f763:	6a 05                	push   0x5
c000f765:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f768:	ff d0                	call   eax
c000f76a:	83 c4 10             	add    esp,0x10
c000f76d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f770:	8b 00                	mov    eax,DWORD PTR [eax]
c000f772:	83 c0 24             	add    eax,0x24
c000f775:	8b 00                	mov    eax,DWORD PTR [eax]
c000f777:	6a 00                	push   0x0
c000f779:	68 0d ef 00 c0       	push   0xc000ef0d
c000f77e:	6a 06                	push   0x6
c000f780:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f783:	ff d0                	call   eax
c000f785:	83 c4 10             	add    esp,0x10
c000f788:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f78b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f78d:	83 c0 24             	add    eax,0x24
c000f790:	8b 00                	mov    eax,DWORD PTR [eax]
c000f792:	6a 00                	push   0x0
c000f794:	68 f3 ed 00 c0       	push   0xc000edf3
c000f799:	6a 07                	push   0x7
c000f79b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f79e:	ff d0                	call   eax
c000f7a0:	83 c4 10             	add    esp,0x10
c000f7a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7a6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7a8:	83 c0 24             	add    eax,0x24
c000f7ab:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7ad:	6a 00                	push   0x0
c000f7af:	68 dc e5 00 c0       	push   0xc000e5dc
c000f7b4:	6a 08                	push   0x8
c000f7b6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7b9:	ff d0                	call   eax
c000f7bb:	83 c4 10             	add    esp,0x10
c000f7be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7c3:	83 c0 24             	add    eax,0x24
c000f7c6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7c8:	6a 00                	push   0x0
c000f7ca:	68 ee ee 00 c0       	push   0xc000eeee
c000f7cf:	6a 09                	push   0x9
c000f7d1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7d4:	ff d0                	call   eax
c000f7d6:	83 c4 10             	add    esp,0x10
c000f7d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7de:	83 c0 24             	add    eax,0x24
c000f7e1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7e3:	6a 00                	push   0x0
c000f7e5:	68 ee ee 00 c0       	push   0xc000eeee
c000f7ea:	6a 0a                	push   0xa
c000f7ec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7ef:	ff d0                	call   eax
c000f7f1:	83 c4 10             	add    esp,0x10
c000f7f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7f9:	83 c0 24             	add    eax,0x24
c000f7fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7fe:	6a 00                	push   0x0
c000f800:	68 ee ee 00 c0       	push   0xc000eeee
c000f805:	6a 0b                	push   0xb
c000f807:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f80a:	ff d0                	call   eax
c000f80c:	83 c4 10             	add    esp,0x10
c000f80f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f812:	8b 00                	mov    eax,DWORD PTR [eax]
c000f814:	83 c0 24             	add    eax,0x24
c000f817:	8b 00                	mov    eax,DWORD PTR [eax]
c000f819:	6a 00                	push   0x0
c000f81b:	68 ee ee 00 c0       	push   0xc000eeee
c000f820:	6a 0c                	push   0xc
c000f822:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f825:	ff d0                	call   eax
c000f827:	83 c4 10             	add    esp,0x10
c000f82a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f82d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f82f:	83 c0 24             	add    eax,0x24
c000f832:	8b 00                	mov    eax,DWORD PTR [eax]
c000f834:	6a 00                	push   0x0
c000f836:	68 66 ee 00 c0       	push   0xc000ee66
c000f83b:	6a 0d                	push   0xd
c000f83d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f840:	ff d0                	call   eax
c000f842:	83 c4 10             	add    esp,0x10
c000f845:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f848:	8b 00                	mov    eax,DWORD PTR [eax]
c000f84a:	83 c0 24             	add    eax,0x24
c000f84d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f84f:	6a 00                	push   0x0
c000f851:	68 9f ee 00 c0       	push   0xc000ee9f
c000f856:	6a 0e                	push   0xe
c000f858:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f85b:	ff d0                	call   eax
c000f85d:	83 c4 10             	add    esp,0x10
c000f860:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f863:	8b 00                	mov    eax,DWORD PTR [eax]
c000f865:	83 c0 24             	add    eax,0x24
c000f868:	8b 00                	mov    eax,DWORD PTR [eax]
c000f86a:	6a 00                	push   0x0
c000f86c:	68 ee ee 00 c0       	push   0xc000eeee
c000f871:	6a 0f                	push   0xf
c000f873:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f876:	ff d0                	call   eax
c000f878:	83 c4 10             	add    esp,0x10
c000f87b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f87e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f880:	83 c0 24             	add    eax,0x24
c000f883:	8b 00                	mov    eax,DWORD PTR [eax]
c000f885:	6a 00                	push   0x0
c000f887:	68 ee ee 00 c0       	push   0xc000eeee
c000f88c:	6a 10                	push   0x10
c000f88e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f891:	ff d0                	call   eax
c000f893:	83 c4 10             	add    esp,0x10
c000f896:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f899:	8b 00                	mov    eax,DWORD PTR [eax]
c000f89b:	83 c0 24             	add    eax,0x24
c000f89e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8a0:	6a 00                	push   0x0
c000f8a2:	68 ee ee 00 c0       	push   0xc000eeee
c000f8a7:	6a 11                	push   0x11
c000f8a9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8ac:	ff d0                	call   eax
c000f8ae:	83 c4 10             	add    esp,0x10
c000f8b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8b6:	83 c0 24             	add    eax,0x24
c000f8b9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8bb:	6a 00                	push   0x0
c000f8bd:	68 ee ee 00 c0       	push   0xc000eeee
c000f8c2:	6a 12                	push   0x12
c000f8c4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8c7:	ff d0                	call   eax
c000f8c9:	83 c4 10             	add    esp,0x10
c000f8cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8cf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8d1:	83 c0 24             	add    eax,0x24
c000f8d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8d6:	6a 00                	push   0x0
c000f8d8:	68 ee ee 00 c0       	push   0xc000eeee
c000f8dd:	6a 13                	push   0x13
c000f8df:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8e2:	ff d0                	call   eax
c000f8e4:	83 c4 10             	add    esp,0x10
c000f8e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8ec:	83 c0 24             	add    eax,0x24
c000f8ef:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8f1:	6a 00                	push   0x0
c000f8f3:	68 ee ee 00 c0       	push   0xc000eeee
c000f8f8:	6a 14                	push   0x14
c000f8fa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8fd:	ff d0                	call   eax
c000f8ff:	83 c4 10             	add    esp,0x10
c000f902:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f905:	8b 00                	mov    eax,DWORD PTR [eax]
c000f907:	83 c0 24             	add    eax,0x24
c000f90a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f90c:	6a 00                	push   0x0
c000f90e:	68 ee ee 00 c0       	push   0xc000eeee
c000f913:	6a 1e                	push   0x1e
c000f915:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f918:	ff d0                	call   eax
c000f91a:	83 c4 10             	add    esp,0x10
c000f91d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f920:	8b 00                	mov    eax,DWORD PTR [eax]
c000f922:	83 c0 24             	add    eax,0x24
c000f925:	8b 00                	mov    eax,DWORD PTR [eax]
c000f927:	6a 00                	push   0x0
c000f929:	68 6f 66 01 c0       	push   0xc001666f
c000f92e:	6a 60                	push   0x60
c000f930:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f933:	ff d0                	call   eax
c000f935:	83 c4 10             	add    esp,0x10
c000f938:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f93b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f93e:	c9                   	leave  
c000f93f:	c3                   	ret    

c000f940 <InterruptController::convertLegacyIRQNumber(int)>:
c000f940:	55                   	push   ebp
c000f941:	89 e5                	mov    ebp,esp
c000f943:	83 ec 08             	sub    esp,0x8
c000f946:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f949:	83 ec 0c             	sub    esp,0xc
c000f94c:	50                   	push   eax
c000f94d:	e8 b0 e8 ff ff       	call   c000e202 <Device::getName()>
c000f952:	83 c4 10             	add    esp,0x10
c000f955:	8a 00                	mov    al,BYTE PTR [eax]
c000f957:	3c 41                	cmp    al,0x41
c000f959:	0f 94 c0             	sete   al
c000f95c:	84 c0                	test   al,al
c000f95e:	74 28                	je     c000f988 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f960:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000f964:	7f 12                	jg     c000f978 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000f966:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f969:	05 60 59 02 c0       	add    eax,0xc0025960
c000f96e:	8a 00                	mov    al,BYTE PTR [eax]
c000f970:	0f b6 c0             	movzx  eax,al
c000f973:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000f976:	eb 10                	jmp    c000f988 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f978:	83 ec 0c             	sub    esp,0xc
c000f97b:	68 b0 35 02 c0       	push   0xc00235b0
c000f980:	e8 f8 4a 00 00       	call   c001447d <Krnl::panic(char const*)>
c000f985:	83 c4 10             	add    esp,0x10
c000f988:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f98b:	c9                   	leave  
c000f98c:	c3                   	ret    
c000f98d:	90                   	nop

c000f98e <startGUI(void*)>:
c000f98e:	55                   	push   ebp
c000f98f:	89 e5                	mov    ebp,esp
c000f991:	53                   	push   ebx
c000f992:	83 ec 04             	sub    esp,0x4
c000f995:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000f99a:	48                   	dec    eax
c000f99b:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c000f9a0:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000f9a5:	85 c0                	test   eax,eax
c000f9a7:	75 01                	jne    c000f9aa <startGUI(void*)+0x1c>
c000f9a9:	fb                   	sti    
c000f9aa:	8b 1d 68 62 02 c0    	mov    ebx,DWORD PTR ds:0xc0026268
c000f9b0:	83 ec 08             	sub    esp,0x8
c000f9b3:	6a 01                	push   0x1
c000f9b5:	68 30 36 02 c0       	push   0xc0023630
c000f9ba:	e8 8b 7c 00 00       	call   c001764a <Thr::loadDLL(char const*, bool)>
c000f9bf:	83 c4 10             	add    esp,0x10
c000f9c2:	83 ec 08             	sub    esp,0x8
c000f9c5:	53                   	push   ebx
c000f9c6:	50                   	push   eax
c000f9c7:	e8 af 7e 00 00       	call   c001787b <Thr::executeDLL(unsigned long, void*)>
c000f9cc:	83 c4 10             	add    esp,0x10
c000f9cf:	8b 1d 68 62 02 c0    	mov    ebx,DWORD PTR ds:0xc0026268
c000f9d5:	83 ec 08             	sub    esp,0x8
c000f9d8:	6a 01                	push   0x1
c000f9da:	68 4a 36 02 c0       	push   0xc002364a
c000f9df:	e8 66 7c 00 00       	call   c001764a <Thr::loadDLL(char const*, bool)>
c000f9e4:	83 c4 10             	add    esp,0x10
c000f9e7:	83 ec 08             	sub    esp,0x8
c000f9ea:	53                   	push   ebx
c000f9eb:	50                   	push   eax
c000f9ec:	e8 8a 7e 00 00       	call   c001787b <Thr::executeDLL(unsigned long, void*)>
c000f9f1:	83 c4 10             	add    esp,0x10
c000f9f4:	90                   	nop
c000f9f5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f9f8:	c9                   	leave  
c000f9f9:	c3                   	ret    

c000f9fa <startGUIVESA(void*)>:
c000f9fa:	55                   	push   ebp
c000f9fb:	89 e5                	mov    ebp,esp
c000f9fd:	53                   	push   ebx
c000f9fe:	83 ec 04             	sub    esp,0x4
c000fa01:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000fa06:	48                   	dec    eax
c000fa07:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c000fa0c:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000fa11:	85 c0                	test   eax,eax
c000fa13:	75 01                	jne    c000fa16 <startGUIVESA(void*)+0x1c>
c000fa15:	fb                   	sti    
c000fa16:	8b 1d 68 62 02 c0    	mov    ebx,DWORD PTR ds:0xc0026268
c000fa1c:	83 ec 08             	sub    esp,0x8
c000fa1f:	6a 01                	push   0x1
c000fa21:	68 64 36 02 c0       	push   0xc0023664
c000fa26:	e8 1f 7c 00 00       	call   c001764a <Thr::loadDLL(char const*, bool)>
c000fa2b:	83 c4 10             	add    esp,0x10
c000fa2e:	83 ec 08             	sub    esp,0x8
c000fa31:	53                   	push   ebx
c000fa32:	50                   	push   eax
c000fa33:	e8 43 7e 00 00       	call   c001787b <Thr::executeDLL(unsigned long, void*)>
c000fa38:	83 c4 10             	add    esp,0x10
c000fa3b:	8b 1d 68 62 02 c0    	mov    ebx,DWORD PTR ds:0xc0026268
c000fa41:	83 ec 08             	sub    esp,0x8
c000fa44:	6a 01                	push   0x1
c000fa46:	68 4a 36 02 c0       	push   0xc002364a
c000fa4b:	e8 fa 7b 00 00       	call   c001764a <Thr::loadDLL(char const*, bool)>
c000fa50:	83 c4 10             	add    esp,0x10
c000fa53:	83 ec 08             	sub    esp,0x8
c000fa56:	53                   	push   ebx
c000fa57:	50                   	push   eax
c000fa58:	e8 1e 7e 00 00       	call   c001787b <Thr::executeDLL(unsigned long, void*)>
c000fa5d:	83 c4 10             	add    esp,0x10
c000fa60:	90                   	nop
c000fa61:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fa64:	c9                   	leave  
c000fa65:	c3                   	ret    

c000fa66 <sendKeyToTerminal(unsigned char)>:
c000fa66:	55                   	push   ebp
c000fa67:	89 e5                	mov    ebp,esp
c000fa69:	83 ec 28             	sub    esp,0x28
c000fa6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa6f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000fa72:	a1 24 63 02 c0       	mov    eax,ds:0xc0026324
c000fa77:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000fa7b:	83 ec 08             	sub    esp,0x8
c000fa7e:	52                   	push   edx
c000fa7f:	50                   	push   eax
c000fa80:	e8 43 b4 ff ff       	call   c000aec8 <VgaText::receiveKey(unsigned char)>
c000fa85:	83 c4 10             	add    esp,0x10
c000fa88:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000fa8c:	0f 85 8f 00 00 00    	jne    c000fb21 <sendKeyToTerminal(unsigned char)+0xbb>
c000fa92:	fa                   	cli    
c000fa93:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000fa98:	40                   	inc    eax
c000fa99:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c000fa9e:	a1 64 77 02 c0       	mov    eax,ds:0xc0027764
c000faa3:	40                   	inc    eax
c000faa4:	a3 64 77 02 c0       	mov    ds:0xc0027764,eax
c000faa9:	a1 00 64 02 c0       	mov    eax,ds:0xc0026400
c000faae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fab1:	c7 05 00 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026400,0x0
c000fabb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fabf:	74 1f                	je     c000fae0 <sendKeyToTerminal(unsigned char)+0x7a>
c000fac1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fac4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000fac7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000faca:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000facd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fad0:	83 ec 0c             	sub    esp,0xc
c000fad3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fad6:	e8 c6 89 00 00       	call   c00184a1 <unblockTask(ThreadControlBlock*)>
c000fadb:	83 c4 10             	add    esp,0x10
c000fade:	eb db                	jmp    c000fabb <sendKeyToTerminal(unsigned char)+0x55>
c000fae0:	a1 64 77 02 c0       	mov    eax,ds:0xc0027764
c000fae5:	48                   	dec    eax
c000fae6:	a3 64 77 02 c0       	mov    ds:0xc0027764,eax
c000faeb:	a1 64 77 02 c0       	mov    eax,ds:0xc0027764
c000faf0:	85 c0                	test   eax,eax
c000faf2:	75 18                	jne    c000fb0c <sendKeyToTerminal(unsigned char)+0xa6>
c000faf4:	a1 60 77 02 c0       	mov    eax,ds:0xc0027760
c000faf9:	85 c0                	test   eax,eax
c000fafb:	74 0f                	je     c000fb0c <sendKeyToTerminal(unsigned char)+0xa6>
c000fafd:	c7 05 60 77 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027760,0x0
c000fb07:	e8 03 85 00 00       	call   c001800f <schedule()>
c000fb0c:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000fb11:	48                   	dec    eax
c000fb12:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c000fb17:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000fb1c:	85 c0                	test   eax,eax
c000fb1e:	75 01                	jne    c000fb21 <sendKeyToTerminal(unsigned char)+0xbb>
c000fb20:	fb                   	sti    
c000fb21:	90                   	nop
c000fb22:	c9                   	leave  
c000fb23:	c3                   	ret    

c000fb24 <sendKeyboardToken(KeyboardToken)>:
c000fb24:	55                   	push   ebp
c000fb25:	89 e5                	mov    ebp,esp
c000fb27:	83 ec 18             	sub    esp,0x18
c000fb2a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000fb2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb30:	0f b7 c0             	movzx  eax,ax
c000fb33:	83 f2 01             	xor    edx,0x1
c000fb36:	88 90 20 64 02 c0    	mov    BYTE PTR [eax-0x3ffd9be0],dl
c000fb3c:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000fb41:	85 c0                	test   eax,eax
c000fb43:	74 24                	je     c000fb69 <sendKeyboardToken(KeyboardToken)+0x45>
c000fb45:	8b 0d 08 64 02 c0    	mov    ecx,DWORD PTR ds:0xc0026408
c000fb4b:	83 ec 04             	sub    esp,0x4
c000fb4e:	68 20 64 02 c0       	push   0xc0026420
c000fb53:	83 ec 08             	sub    esp,0x8
c000fb56:	89 e2                	mov    edx,esp
c000fb58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb5b:	89 02                	mov    DWORD PTR [edx],eax
c000fb5d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fb60:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fb64:	ff d1                	call   ecx
c000fb66:	83 c4 10             	add    esp,0x10
c000fb69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb6c:	66 3d 03 02          	cmp    ax,0x203
c000fb70:	75 07                	jne    c000fb79 <sendKeyboardToken(KeyboardToken)+0x55>
c000fb72:	a0 20 65 02 c0       	mov    al,ds:0xc0026520
c000fb77:	84 c0                	test   al,al
c000fb79:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fb7d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000fb80:	a0 28 68 02 c0       	mov    al,ds:0xc0026828
c000fb85:	38 c2                	cmp    dl,al
c000fb87:	74 1c                	je     c000fba5 <sendKeyboardToken(KeyboardToken)+0x81>
c000fb89:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000fb8c:	a2 28 68 02 c0       	mov    ds:0xc0026828,al
c000fb91:	a0 28 68 02 c0       	mov    al,ds:0xc0026828
c000fb96:	0f b6 c0             	movzx  eax,al
c000fb99:	83 ec 0c             	sub    esp,0xc
c000fb9c:	50                   	push   eax
c000fb9d:	e8 66 a9 ff ff       	call   c000a508 <setTerminalScrollLock(bool)>
c000fba2:	83 c4 10             	add    esp,0x10
c000fba5:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000fba8:	84 c0                	test   al,al
c000fbaa:	0f 84 ae 00 00 00    	je     c000fc5e <sendKeyboardToken(KeyboardToken)+0x13a>
c000fbb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbb3:	66 3d 10 03          	cmp    ax,0x310
c000fbb7:	75 06                	jne    c000fbbf <sendKeyboardToken(KeyboardToken)+0x9b>
c000fbb9:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000fbbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbc2:	66 3d 11 03          	cmp    ax,0x311
c000fbc6:	75 06                	jne    c000fbce <sendKeyboardToken(KeyboardToken)+0xaa>
c000fbc8:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000fbce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbd1:	66 3d 12 03          	cmp    ax,0x312
c000fbd5:	75 06                	jne    c000fbdd <sendKeyboardToken(KeyboardToken)+0xb9>
c000fbd7:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000fbdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbe0:	66 3d 13 03          	cmp    ax,0x313
c000fbe4:	75 06                	jne    c000fbec <sendKeyboardToken(KeyboardToken)+0xc8>
c000fbe6:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000fbec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbef:	66 3d 14 03          	cmp    ax,0x314
c000fbf3:	75 06                	jne    c000fbfb <sendKeyboardToken(KeyboardToken)+0xd7>
c000fbf5:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000fbfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbfe:	66 3d 15 03          	cmp    ax,0x315
c000fc02:	75 06                	jne    c000fc0a <sendKeyboardToken(KeyboardToken)+0xe6>
c000fc04:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fc0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc0d:	66 3d 16 03          	cmp    ax,0x316
c000fc11:	75 06                	jne    c000fc19 <sendKeyboardToken(KeyboardToken)+0xf5>
c000fc13:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000fc19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc1c:	66 3d 17 03          	cmp    ax,0x317
c000fc20:	75 06                	jne    c000fc28 <sendKeyboardToken(KeyboardToken)+0x104>
c000fc22:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000fc28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc2b:	66 3d 18 03          	cmp    ax,0x318
c000fc2f:	75 06                	jne    c000fc37 <sendKeyboardToken(KeyboardToken)+0x113>
c000fc31:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000fc37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc3a:	66 3d 19 03          	cmp    ax,0x319
c000fc3e:	75 06                	jne    c000fc46 <sendKeyboardToken(KeyboardToken)+0x122>
c000fc40:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000fc46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc49:	66 3d 1a 03          	cmp    ax,0x31a
c000fc4d:	0f 85 c9 00 00 00    	jne    c000fd1c <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fc53:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000fc59:	e9 be 00 00 00       	jmp    c000fd1c <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fc5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc61:	66 3d 10 03          	cmp    ax,0x310
c000fc65:	75 0a                	jne    c000fc71 <sendKeyboardToken(KeyboardToken)+0x14d>
c000fc67:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000fc6d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc74:	66 3d 11 03          	cmp    ax,0x311
c000fc78:	75 0a                	jne    c000fc84 <sendKeyboardToken(KeyboardToken)+0x160>
c000fc7a:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000fc80:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc87:	66 3d 12 03          	cmp    ax,0x312
c000fc8b:	75 0a                	jne    c000fc97 <sendKeyboardToken(KeyboardToken)+0x173>
c000fc8d:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000fc93:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc9a:	66 3d 13 03          	cmp    ax,0x313
c000fc9e:	75 0a                	jne    c000fcaa <sendKeyboardToken(KeyboardToken)+0x186>
c000fca0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fca6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fcaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcad:	66 3d 14 03          	cmp    ax,0x314
c000fcb1:	75 0a                	jne    c000fcbd <sendKeyboardToken(KeyboardToken)+0x199>
c000fcb3:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fcb9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fcbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcc0:	66 3d 15 03          	cmp    ax,0x315
c000fcc4:	75 0a                	jne    c000fcd0 <sendKeyboardToken(KeyboardToken)+0x1ac>
c000fcc6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fccc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fcd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcd3:	66 3d 16 03          	cmp    ax,0x316
c000fcd7:	75 0a                	jne    c000fce3 <sendKeyboardToken(KeyboardToken)+0x1bf>
c000fcd9:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fcdf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fce3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fce6:	66 3d 17 03          	cmp    ax,0x317
c000fcea:	75 0a                	jne    c000fcf6 <sendKeyboardToken(KeyboardToken)+0x1d2>
c000fcec:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fcf2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fcf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcf9:	66 3d 18 03          	cmp    ax,0x318
c000fcfd:	75 0a                	jne    c000fd09 <sendKeyboardToken(KeyboardToken)+0x1e5>
c000fcff:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fd05:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd0c:	66 3d 19 03          	cmp    ax,0x319
c000fd10:	75 0a                	jne    c000fd1c <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fd12:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fd18:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd1f:	66 3d 00 02          	cmp    ax,0x200
c000fd23:	75 2c                	jne    c000fd51 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fd25:	a0 20 68 02 c0       	mov    al,ds:0xc0026820
c000fd2a:	83 f0 01             	xor    eax,0x1
c000fd2d:	84 c0                	test   al,al
c000fd2f:	74 20                	je     c000fd51 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fd31:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000fd36:	6a 01                	push   0x1
c000fd38:	6a 00                	push   0x0
c000fd3a:	68 8e f9 00 c0       	push   0xc000f98e
c000fd3f:	50                   	push   eax
c000fd40:	e8 a5 80 00 00       	call   c0017dea <Process::createThread(void (*)(void*), void*, int)>
c000fd45:	83 c4 10             	add    esp,0x10
c000fd48:	c6 05 20 68 02 c0 01 	mov    BYTE PTR ds:0xc0026820,0x1
c000fd4f:	eb 33                	jmp    c000fd84 <sendKeyboardToken(KeyboardToken)+0x260>
c000fd51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd54:	66 3d 01 02          	cmp    ax,0x201
c000fd58:	75 2a                	jne    c000fd84 <sendKeyboardToken(KeyboardToken)+0x260>
c000fd5a:	a0 20 68 02 c0       	mov    al,ds:0xc0026820
c000fd5f:	83 f0 01             	xor    eax,0x1
c000fd62:	84 c0                	test   al,al
c000fd64:	74 1e                	je     c000fd84 <sendKeyboardToken(KeyboardToken)+0x260>
c000fd66:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c000fd6b:	6a 01                	push   0x1
c000fd6d:	6a 00                	push   0x0
c000fd6f:	68 fa f9 00 c0       	push   0xc000f9fa
c000fd74:	50                   	push   eax
c000fd75:	e8 70 80 00 00       	call   c0017dea <Process::createThread(void (*)(void*), void*, int)>
c000fd7a:	83 c4 10             	add    esp,0x10
c000fd7d:	c6 05 20 68 02 c0 01 	mov    BYTE PTR ds:0xc0026820,0x1
c000fd84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd87:	66 3d 1d 03          	cmp    ax,0x31d
c000fd8b:	75 06                	jne    c000fd93 <sendKeyboardToken(KeyboardToken)+0x26f>
c000fd8d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000fd93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd96:	66 3d 1c 03          	cmp    ax,0x31c
c000fd9a:	75 06                	jne    c000fda2 <sendKeyboardToken(KeyboardToken)+0x27e>
c000fd9c:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fda2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fda5:	66 3d 1b 03          	cmp    ax,0x31b
c000fda9:	75 06                	jne    c000fdb1 <sendKeyboardToken(KeyboardToken)+0x28d>
c000fdab:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fdb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdb4:	66 3d 1e 03          	cmp    ax,0x31e
c000fdb8:	75 06                	jne    c000fdc0 <sendKeyboardToken(KeyboardToken)+0x29c>
c000fdba:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fdc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdc3:	66 3d 1f 03          	cmp    ax,0x31f
c000fdc7:	75 06                	jne    c000fdcf <sendKeyboardToken(KeyboardToken)+0x2ab>
c000fdc9:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fdcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdd2:	66 3d 1a 03          	cmp    ax,0x31a
c000fdd6:	75 06                	jne    c000fdde <sendKeyboardToken(KeyboardToken)+0x2ba>
c000fdd8:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fdde:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fde2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fde5:	83 f0 01             	xor    eax,0x1
c000fde8:	84 c0                	test   al,al
c000fdea:	74 77                	je     c000fe63 <sendKeyboardToken(KeyboardToken)+0x33f>
c000fdec:	a0 21 65 02 c0       	mov    al,ds:0xc0026521
c000fdf1:	84 c0                	test   al,al
c000fdf3:	74 41                	je     c000fe36 <sendKeyboardToken(KeyboardToken)+0x312>
c000fdf5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fdf9:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fdfd:	74 2b                	je     c000fe2a <sendKeyboardToken(KeyboardToken)+0x306>
c000fdff:	8b 15 24 68 02 c0    	mov    edx,DWORD PTR ds:0xc0026824
c000fe05:	89 d0                	mov    eax,edx
c000fe07:	c1 e0 02             	shl    eax,0x2
c000fe0a:	01 d0                	add    eax,edx
c000fe0c:	01 c0                	add    eax,eax
c000fe0e:	a3 24 68 02 c0       	mov    ds:0xc0026824,eax
c000fe13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe16:	0f b7 c0             	movzx  eax,ax
c000fe19:	8d 50 d0             	lea    edx,[eax-0x30]
c000fe1c:	a1 24 68 02 c0       	mov    eax,ds:0xc0026824
c000fe21:	01 d0                	add    eax,edx
c000fe23:	a3 24 68 02 c0       	mov    ds:0xc0026824,eax
c000fe28:	eb 6d                	jmp    c000fe97 <sendKeyboardToken(KeyboardToken)+0x373>
c000fe2a:	c7 05 24 68 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026824,0x0
c000fe34:	eb 61                	jmp    c000fe97 <sendKeyboardToken(KeyboardToken)+0x373>
c000fe36:	a1 24 68 02 c0       	mov    eax,ds:0xc0026824
c000fe3b:	85 c0                	test   eax,eax
c000fe3d:	74 18                	je     c000fe57 <sendKeyboardToken(KeyboardToken)+0x333>
c000fe3f:	a1 24 68 02 c0       	mov    eax,ds:0xc0026824
c000fe44:	0f b6 c0             	movzx  eax,al
c000fe47:	83 ec 0c             	sub    esp,0xc
c000fe4a:	50                   	push   eax
c000fe4b:	e8 16 fc ff ff       	call   c000fa66 <sendKeyToTerminal(unsigned char)>
c000fe50:	83 c4 10             	add    esp,0x10
c000fe53:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fe57:	c7 05 24 68 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026824,0x0
c000fe61:	eb 34                	jmp    c000fe97 <sendKeyboardToken(KeyboardToken)+0x373>
c000fe63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe66:	66 3d 01 01          	cmp    ax,0x101
c000fe6a:	75 2b                	jne    c000fe97 <sendKeyboardToken(KeyboardToken)+0x373>
c000fe6c:	a1 24 68 02 c0       	mov    eax,ds:0xc0026824
c000fe71:	85 c0                	test   eax,eax
c000fe73:	74 18                	je     c000fe8d <sendKeyboardToken(KeyboardToken)+0x369>
c000fe75:	a1 24 68 02 c0       	mov    eax,ds:0xc0026824
c000fe7a:	0f b6 c0             	movzx  eax,al
c000fe7d:	83 ec 0c             	sub    esp,0xc
c000fe80:	50                   	push   eax
c000fe81:	e8 e0 fb ff ff       	call   c000fa66 <sendKeyToTerminal(unsigned char)>
c000fe86:	83 c4 10             	add    esp,0x10
c000fe89:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fe8d:	c7 05 24 68 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026824,0x0
c000fe97:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fe9a:	83 f0 01             	xor    eax,0x1
c000fe9d:	84 c0                	test   al,al
c000fe9f:	74 4c                	je     c000feed <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fea1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fea4:	83 f0 01             	xor    eax,0x1
c000fea7:	84 c0                	test   al,al
c000fea9:	74 42                	je     c000feed <sendKeyboardToken(KeyboardToken)+0x3c9>
c000feab:	a0 20 65 02 c0       	mov    al,ds:0xc0026520
c000feb0:	83 f0 01             	xor    eax,0x1
c000feb3:	84 c0                	test   al,al
c000feb5:	74 36                	je     c000feed <sendKeyboardToken(KeyboardToken)+0x3c9>
c000feb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000feba:	66 83 f8 1f          	cmp    ax,0x1f
c000febe:	76 09                	jbe    c000fec9 <sendKeyboardToken(KeyboardToken)+0x3a5>
c000fec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fec3:	66 83 f8 7e          	cmp    ax,0x7e
c000fec7:	76 12                	jbe    c000fedb <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fec9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fecc:	66 83 f8 0a          	cmp    ax,0xa
c000fed0:	74 09                	je     c000fedb <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fed2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fed5:	66 83 f8 08          	cmp    ax,0x8
c000fed9:	75 12                	jne    c000feed <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fedb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fede:	0f b6 c0             	movzx  eax,al
c000fee1:	83 ec 0c             	sub    esp,0xc
c000fee4:	50                   	push   eax
c000fee5:	e8 7c fb ff ff       	call   c000fa66 <sendKeyToTerminal(unsigned char)>
c000feea:	83 c4 10             	add    esp,0x10
c000feed:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fef0:	83 f0 01             	xor    eax,0x1
c000fef3:	84 c0                	test   al,al
c000fef5:	74 4f                	je     c000ff46 <sendKeyboardToken(KeyboardToken)+0x422>
c000fef7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fefa:	83 f0 01             	xor    eax,0x1
c000fefd:	84 c0                	test   al,al
c000feff:	74 45                	je     c000ff46 <sendKeyboardToken(KeyboardToken)+0x422>
c000ff01:	a0 20 65 02 c0       	mov    al,ds:0xc0026520
c000ff06:	84 c0                	test   al,al
c000ff08:	74 3c                	je     c000ff46 <sendKeyboardToken(KeyboardToken)+0x422>
c000ff0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff0d:	66 83 f8 3f          	cmp    ax,0x3f
c000ff11:	76 33                	jbe    c000ff46 <sendKeyboardToken(KeyboardToken)+0x422>
c000ff13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff16:	66 83 f8 7f          	cmp    ax,0x7f
c000ff1a:	77 2a                	ja     c000ff46 <sendKeyboardToken(KeyboardToken)+0x422>
c000ff1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff1f:	88 c2                	mov    dl,al
c000ff21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff24:	66 83 f8 5f          	cmp    ax,0x5f
c000ff28:	76 04                	jbe    c000ff2e <sendKeyboardToken(KeyboardToken)+0x40a>
c000ff2a:	b0 20                	mov    al,0x20
c000ff2c:	eb 02                	jmp    c000ff30 <sendKeyboardToken(KeyboardToken)+0x40c>
c000ff2e:	b0 00                	mov    al,0x0
c000ff30:	29 c2                	sub    edx,eax
c000ff32:	88 d0                	mov    al,dl
c000ff34:	83 e8 40             	sub    eax,0x40
c000ff37:	0f b6 c0             	movzx  eax,al
c000ff3a:	83 ec 0c             	sub    esp,0xc
c000ff3d:	50                   	push   eax
c000ff3e:	e8 23 fb ff ff       	call   c000fa66 <sendKeyToTerminal(unsigned char)>
c000ff43:	83 c4 10             	add    esp,0x10
c000ff46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff49:	66 3d 00 03          	cmp    ax,0x300
c000ff4d:	75 0f                	jne    c000ff5e <sendKeyboardToken(KeyboardToken)+0x43a>
c000ff4f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ff52:	83 f0 01             	xor    eax,0x1
c000ff55:	84 c0                	test   al,al
c000ff57:	74 05                	je     c000ff5e <sendKeyboardToken(KeyboardToken)+0x43a>
c000ff59:	e8 1b a9 ff ff       	call   c000a879 <doTerminalCycle()>
c000ff5e:	90                   	nop
c000ff5f:	c9                   	leave  
c000ff60:	c3                   	ret    

c000ff61 <clearInternalKeybuffer(VgaText*)>:
c000ff61:	55                   	push   ebp
c000ff62:	89 e5                	mov    ebp,esp
c000ff64:	83 ec 08             	sub    esp,0x8
c000ff67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff6a:	05 98 01 00 00       	add    eax,0x198
c000ff6f:	83 ec 0c             	sub    esp,0xc
c000ff72:	50                   	push   eax
c000ff73:	e8 f4 07 ff ff       	call   c000076c <strlen>
c000ff78:	83 c4 10             	add    esp,0x10
c000ff7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ff7e:	81 c2 98 01 00 00    	add    edx,0x198
c000ff84:	83 ec 04             	sub    esp,0x4
c000ff87:	50                   	push   eax
c000ff88:	6a 00                	push   0x0
c000ff8a:	52                   	push   edx
c000ff8b:	e8 c0 07 ff ff       	call   c0000750 <memset>
c000ff90:	83 c4 10             	add    esp,0x10
c000ff93:	90                   	nop
c000ff94:	c9                   	leave  
c000ff95:	c3                   	ret    

c000ff96 <readKeyboard(VgaText*, char*, unsigned long)>:
c000ff96:	55                   	push   ebp
c000ff97:	89 e5                	mov    ebp,esp
c000ff99:	83 ec 18             	sub    esp,0x18
c000ff9c:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000ffa1:	85 c0                	test   eax,eax
c000ffa3:	74 2a                	je     c000ffcf <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ffa5:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ffab:	8b 0d 08 64 02 c0    	mov    ecx,DWORD PTR ds:0xc0026408
c000ffb1:	83 ec 04             	sub    esp,0x4
c000ffb4:	68 20 64 02 c0       	push   0xc0026420
c000ffb9:	83 ec 08             	sub    esp,0x8
c000ffbc:	89 e2                	mov    edx,esp
c000ffbe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000ffc1:	89 02                	mov    DWORD PTR [edx],eax
c000ffc3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ffc6:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ffca:	ff d1                	call   ecx
c000ffcc:	83 c4 10             	add    esp,0x10
c000ffcf:	fb                   	sti    
c000ffd0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ffd7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ffdb:	0f 84 a1 00 00 00    	je     c0010082 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000ffe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffe4:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000ffea:	84 c0                	test   al,al
c000ffec:	75 28                	jne    c0010016 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000ffee:	fa                   	cli    
c000ffef:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c000fff4:	40                   	inc    eax
c000fff5:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c000fffa:	e8 10 80 00 00       	call   c001800f <schedule()>
c000ffff:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0010004:	48                   	dec    eax
c0010005:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c001000a:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c001000f:	85 c0                	test   eax,eax
c0010011:	75 ce                	jne    c000ffe1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010013:	fb                   	sti    
c0010014:	eb cb                	jmp    c000ffe1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010016:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0010019:	8d 50 01             	lea    edx,[eax+0x1]
c001001c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001001f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010022:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0010028:	88 10                	mov    BYTE PTR [eax],dl
c001002a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001002d:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0010033:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0010036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010039:	05 98 01 00 00       	add    eax,0x198
c001003e:	83 ec 0c             	sub    esp,0xc
c0010041:	50                   	push   eax
c0010042:	e8 25 07 ff ff       	call   c000076c <strlen>
c0010047:	83 c4 10             	add    esp,0x10
c001004a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001004d:	81 c2 98 01 00 00    	add    edx,0x198
c0010053:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010056:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010059:	81 c2 98 01 00 00    	add    edx,0x198
c001005f:	83 ec 04             	sub    esp,0x4
c0010062:	50                   	push   eax
c0010063:	51                   	push   ecx
c0010064:	52                   	push   edx
c0010065:	e8 1e 06 ff ff       	call   c0000688 <memmove>
c001006a:	83 c4 10             	add    esp,0x10
c001006d:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0010070:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0010073:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0010077:	0f 85 5a ff ff ff    	jne    c000ffd7 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001007d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010080:	eb 03                	jmp    c0010085 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0010082:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010085:	c9                   	leave  
c0010086:	c3                   	ret    
c0010087:	90                   	nop

c0010088 <Keyboard::Keyboard(char const*)>:
c0010088:	83 ec 0c             	sub    esp,0xc
c001008b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001008f:	83 ec 08             	sub    esp,0x8
c0010092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010096:	50                   	push   eax
c0010097:	e8 6a e0 ff ff       	call   c000e106 <Device::Device(char const*)>
c001009c:	83 c4 10             	add    esp,0x10
c001009f:	ba 88 36 02 c0       	mov    edx,0xc0023688
c00100a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100a8:	89 10                	mov    DWORD PTR [eax],edx
c00100aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ae:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00100b8:	c6 05 04 64 02 c0 01 	mov    BYTE PTR ds:0xc0026404,0x1
c00100bf:	90                   	nop
c00100c0:	83 c4 0c             	add    esp,0xc
c00100c3:	c3                   	ret    

c00100c4 <Keyboard::~Keyboard()>:
c00100c4:	83 ec 0c             	sub    esp,0xc
c00100c7:	ba 88 36 02 c0       	mov    edx,0xc0023688
c00100cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100d0:	89 10                	mov    DWORD PTR [eax],edx
c00100d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100d6:	83 ec 0c             	sub    esp,0xc
c00100d9:	50                   	push   eax
c00100da:	e8 f1 dc ff ff       	call   c000ddd0 <Device::~Device()>
c00100df:	83 c4 10             	add    esp,0x10
c00100e2:	90                   	nop
c00100e3:	83 c4 0c             	add    esp,0xc
c00100e6:	c3                   	ret    
c00100e7:	90                   	nop

c00100e8 <Keyboard::~Keyboard()>:
c00100e8:	83 ec 0c             	sub    esp,0xc
c00100eb:	83 ec 0c             	sub    esp,0xc
c00100ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100f2:	e8 cd ff ff ff       	call   c00100c4 <Keyboard::~Keyboard()>
c00100f7:	83 c4 10             	add    esp,0x10
c00100fa:	83 ec 08             	sub    esp,0x8
c00100fd:	68 5c 01 00 00       	push   0x15c
c0010102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010106:	e8 d2 c8 ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c001010b:	83 c4 10             	add    esp,0x10
c001010e:	83 c4 0c             	add    esp,0xc
c0010111:	c3                   	ret    

c0010112 <LogicalDisk::close(int, int, void*)>:
c0010112:	83 c8 ff             	or     eax,0xffffffff
c0010115:	c3                   	ret    

c0010116 <LogicalDisk::~LogicalDisk()>:
c0010116:	83 ec 0c             	sub    esp,0xc
c0010119:	ba 00 37 02 c0       	mov    edx,0xc0023700
c001011e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010122:	89 10                	mov    DWORD PTR [eax],edx
c0010124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010128:	83 ec 0c             	sub    esp,0xc
c001012b:	50                   	push   eax
c001012c:	e8 9f dc ff ff       	call   c000ddd0 <Device::~Device()>
c0010131:	83 c4 10             	add    esp,0x10
c0010134:	90                   	nop
c0010135:	83 c4 0c             	add    esp,0xc
c0010138:	c3                   	ret    
c0010139:	90                   	nop

c001013a <LogicalDisk::~LogicalDisk()>:
c001013a:	83 ec 0c             	sub    esp,0xc
c001013d:	83 ec 0c             	sub    esp,0xc
c0010140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010144:	e8 cd ff ff ff       	call   c0010116 <LogicalDisk::~LogicalDisk()>
c0010149:	83 c4 10             	add    esp,0x10
c001014c:	83 ec 08             	sub    esp,0x8
c001014f:	68 74 01 00 00       	push   0x174
c0010154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010158:	e8 80 c8 ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c001015d:	83 c4 10             	add    esp,0x10
c0010160:	83 c4 0c             	add    esp,0xc
c0010163:	c3                   	ret    

c0010164 <LogicalDisk::open(int, int, void*)>:
c0010164:	83 ec 18             	sub    esp,0x18
c0010167:	68 b4 36 02 c0       	push   0xc00236b4
c001016c:	e8 0c 43 00 00       	call   c001447d <Krnl::panic(char const*)>
c0010171:	83 c8 ff             	or     eax,0xffffffff
c0010174:	83 c4 1c             	add    esp,0x1c
c0010177:	c3                   	ret    

c0010178 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0010178:	53                   	push   ebx
c0010179:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001017d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010181:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010185:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001018b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0010191:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0010197:	77 10                	ja     c00101a9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0010199:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001019f:	89 d3                	mov    ebx,edx
c00101a1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00101a7:	72 05                	jb     c00101ae <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00101a9:	83 c8 ff             	or     eax,0xffffffff
c00101ac:	89 c2                	mov    edx,eax
c00101ae:	5b                   	pop    ebx
c00101af:	c3                   	ret    

c00101b0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00101b0:	56                   	push   esi
c00101b1:	83 c8 ff             	or     eax,0xffffffff
c00101b4:	53                   	push   ebx
c00101b5:	89 c2                	mov    edx,eax
c00101b7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00101bb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00101bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00101c3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00101c9:	77 27                	ja     c00101f2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00101cb:	89 d8                	mov    eax,ebx
c00101cd:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00101d3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00101d9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00101de:	89 c2                	mov    edx,eax
c00101e0:	73 10                	jae    c00101f2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00101e2:	89 c8                	mov    eax,ecx
c00101e4:	89 da                	mov    edx,ebx
c00101e6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00101ec:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00101f2:	5b                   	pop    ebx
c00101f3:	5e                   	pop    esi
c00101f4:	c3                   	ret    
c00101f5:	90                   	nop

c00101f6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00101f6:	83 ec 1c             	sub    esp,0x1c
c00101f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00101fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010201:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010205:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010209:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001020d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010210:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010214:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010218:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001021c:	83 ec 08             	sub    esp,0x8
c001021f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010223:	50                   	push   eax
c0010224:	e8 dd de ff ff       	call   c000e106 <Device::Device(char const*)>
c0010229:	83 c4 10             	add    esp,0x10
c001022c:	ba 00 37 02 c0       	mov    edx,0xc0023700
c0010231:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010235:	89 10                	mov    DWORD PTR [eax],edx
c0010237:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001023b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010242:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010246:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001024d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010251:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001025b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001025f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010263:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010267:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001026d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0010273:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010277:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001027a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001027e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0010284:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001028a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001028e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010292:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0010298:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001029c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00102a6:	90                   	nop
c00102a7:	83 c4 1c             	add    esp,0x1c
c00102aa:	c3                   	ret    
c00102ab:	90                   	nop

c00102ac <LogicalDisk::assignDriveLetter()>:
c00102ac:	55                   	push   ebp
c00102ad:	57                   	push   edi
c00102ae:	56                   	push   esi
c00102af:	53                   	push   ebx
c00102b0:	83 ec 14             	sub    esp,0x14
c00102b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00102b7:	8b 3d 40 68 02 c0    	mov    edi,DWORD PTR ds:0xc0026840
c00102bd:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00102c3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00102c7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00102cd:	8b 3d 44 68 02 c0    	mov    edi,DWORD PTR ds:0xc0026844
c00102d3:	3c 01                	cmp    al,0x1
c00102d5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00102d9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00102dd:	19 c0                	sbb    eax,eax
c00102df:	83 e0 02             	and    eax,0x2
c00102e2:	83 c0 41             	add    eax,0x41
c00102e5:	0f be e8             	movsx  ebp,al
c00102e8:	3c 43                	cmp    al,0x43
c00102ea:	75 10                	jne    c00102fc <LogicalDisk::assignDriveLetter()+0x50>
c00102ec:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00102f3:	75 5d                	jne    c0010352 <LogicalDisk::assignDriveLetter()+0xa6>
c00102f5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00102fa:	75 56                	jne    c0010352 <LogicalDisk::assignDriveLetter()+0xa6>
c00102fc:	8d 75 bf             	lea    esi,[ebp-0x41]
c00102ff:	ba 01 00 00 00       	mov    edx,0x1
c0010304:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010308:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001030c:	d3 e2                	shl    edx,cl
c001030e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010312:	89 d7                	mov    edi,edx
c0010314:	89 d6                	mov    esi,edx
c0010316:	c1 ff 1f             	sar    edi,0x1f
c0010319:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001031d:	21 f9                	and    ecx,edi
c001031f:	09 d1                	or     ecx,edx
c0010321:	75 2f                	jne    c0010352 <LogicalDisk::assignDriveLetter()+0xa6>
c0010323:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010327:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001032b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010331:	09 f2                	or     edx,esi
c0010333:	89 15 40 68 02 c0    	mov    DWORD PTR ds:0xc0026840,edx
c0010339:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001033d:	09 fa                	or     edx,edi
c001033f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010343:	89 15 44 68 02 c0    	mov    DWORD PTR ds:0xc0026844,edx
c0010349:	89 1c bd 60 68 02 c0 	mov    DWORD PTR [edi*4-0x3ffd97a0],ebx
c0010350:	eb 08                	jmp    c001035a <LogicalDisk::assignDriveLetter()+0xae>
c0010352:	45                   	inc    ebp
c0010353:	40                   	inc    eax
c0010354:	3c 5b                	cmp    al,0x5b
c0010356:	75 90                	jne    c00102e8 <LogicalDisk::assignDriveLetter()+0x3c>
c0010358:	31 c0                	xor    eax,eax
c001035a:	83 c4 14             	add    esp,0x14
c001035d:	5b                   	pop    ebx
c001035e:	5e                   	pop    esi
c001035f:	5f                   	pop    edi
c0010360:	5d                   	pop    ebp
c0010361:	c3                   	ret    

c0010362 <LogicalDisk::mount()>:
c0010362:	56                   	push   esi
c0010363:	53                   	push   ebx
c0010364:	53                   	push   ebx
c0010365:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010369:	8b 1d d4 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263d4
c001036f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0010379:	85 db                	test   ebx,ebx
c001037b:	74 27                	je     c00103a4 <LogicalDisk::mount()+0x42>
c001037d:	51                   	push   ecx
c001037e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0010385:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010387:	83 e8 41             	sub    eax,0x41
c001038a:	50                   	push   eax
c001038b:	56                   	push   esi
c001038c:	53                   	push   ebx
c001038d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010390:	83 c4 10             	add    esp,0x10
c0010393:	84 c0                	test   al,al
c0010395:	74 08                	je     c001039f <LogicalDisk::mount()+0x3d>
c0010397:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001039d:	eb 07                	jmp    c00103a6 <LogicalDisk::mount()+0x44>
c001039f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00103a2:	eb d5                	jmp    c0010379 <LogicalDisk::mount()+0x17>
c00103a4:	31 c0                	xor    eax,eax
c00103a6:	5a                   	pop    edx
c00103a7:	5b                   	pop    ebx
c00103a8:	5e                   	pop    esi
c00103a9:	c3                   	ret    

c00103aa <LogicalDisk::unmount()>:
c00103aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ae:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00103b8:	c3                   	ret    
c00103b9:	90                   	nop

c00103ba <LogicalDisk::eject()>:
c00103ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103be:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00103c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00103c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00103ca:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00103cd:	90                   	nop

c00103ce <LogicalDisk::unassignDriveLetter()>:
c00103ce:	57                   	push   edi
c00103cf:	56                   	push   esi
c00103d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00103d4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00103db:	84 c9                	test   cl,cl
c00103dd:	75 0f                	jne    c00103ee <LogicalDisk::unassignDriveLetter()+0x20>
c00103df:	c7 44 24 0c d8 36 02 c0 	mov    DWORD PTR [esp+0xc],0xc00236d8
c00103e7:	5e                   	pop    esi
c00103e8:	5f                   	pop    edi
c00103e9:	e9 8f 40 00 00       	jmp    c001447d <Krnl::panic(char const*)>
c00103ee:	83 e9 41             	sub    ecx,0x41
c00103f1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00103f8:	b8 01 00 00 00       	mov    eax,0x1
c00103fd:	c7 04 8d 60 68 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd97a0],0x0
c0010408:	d3 e0                	shl    eax,cl
c001040a:	89 c7                	mov    edi,eax
c001040c:	f7 d0                	not    eax
c001040e:	c1 ff 1f             	sar    edi,0x1f
c0010411:	21 05 40 68 02 c0    	and    DWORD PTR ds:0xc0026840,eax
c0010417:	89 fe                	mov    esi,edi
c0010419:	f7 d6                	not    esi
c001041b:	21 35 44 68 02 c0    	and    DWORD PTR ds:0xc0026844,esi
c0010421:	5e                   	pop    esi
c0010422:	5f                   	pop    edi
c0010423:	c3                   	ret    

c0010424 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010424:	57                   	push   edi
c0010425:	56                   	push   esi
c0010426:	53                   	push   ebx
c0010427:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001042b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001042f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010433:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010437:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001043d:	77 41                	ja     c0010480 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001043f:	99                   	cdq    
c0010440:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010446:	01 c8                	add    eax,ecx
c0010448:	11 da                	adc    edx,ebx
c001044a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010450:	19 d7                	sbb    edi,edx
c0010452:	72 33                	jb     c0010487 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010454:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001045a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010460:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010464:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010468:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001046e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010474:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010478:	5b                   	pop    ebx
c0010479:	5e                   	pop    esi
c001047a:	5f                   	pop    edi
c001047b:	e9 28 0b 00 00       	jmp    c0010fa8 <VCache::read(unsigned long long, int, void*)>
c0010480:	b8 05 00 00 00       	mov    eax,0x5
c0010485:	eb 05                	jmp    c001048c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0010487:	b8 07 00 00 00       	mov    eax,0x7
c001048c:	5b                   	pop    ebx
c001048d:	5e                   	pop    esi
c001048e:	5f                   	pop    edi
c001048f:	c3                   	ret    

c0010490 <LogicalDisk::write(unsigned long long, int, void*)>:
c0010490:	57                   	push   edi
c0010491:	56                   	push   esi
c0010492:	53                   	push   ebx
c0010493:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010497:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001049b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001049f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00104a3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00104a9:	77 41                	ja     c00104ec <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00104ab:	99                   	cdq    
c00104ac:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00104b2:	01 c8                	add    eax,ecx
c00104b4:	11 da                	adc    edx,ebx
c00104b6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00104bc:	19 d7                	sbb    edi,edx
c00104be:	72 33                	jb     c00104f3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00104c0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00104c6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00104cc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00104d0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00104d4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00104da:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00104e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104e4:	5b                   	pop    ebx
c00104e5:	5e                   	pop    esi
c00104e6:	5f                   	pop    edi
c00104e7:	e9 86 09 00 00       	jmp    c0010e72 <VCache::write(unsigned long long, int, void*)>
c00104ec:	b8 05 00 00 00       	mov    eax,0x5
c00104f1:	eb 05                	jmp    c00104f8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00104f3:	b8 07 00 00 00       	mov    eax,0x7
c00104f8:	5b                   	pop    ebx
c00104f9:	5e                   	pop    esi
c00104fa:	5f                   	pop    edi
c00104fb:	c3                   	ret    

c00104fc <Mouse::Mouse(char const*)>:
c00104fc:	83 ec 0c             	sub    esp,0xc
c00104ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010503:	83 ec 08             	sub    esp,0x8
c0010506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001050a:	50                   	push   eax
c001050b:	e8 f6 db ff ff       	call   c000e106 <Device::Device(char const*)>
c0010510:	83 c4 10             	add    esp,0x10
c0010513:	ba 2c 37 02 c0       	mov    edx,0xc002372c
c0010518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051c:	89 10                	mov    DWORD PTR [eax],edx
c001051e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010522:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001052c:	90                   	nop
c001052d:	83 c4 0c             	add    esp,0xc
c0010530:	c3                   	ret    
c0010531:	90                   	nop

c0010532 <Mouse::~Mouse()>:
c0010532:	83 ec 0c             	sub    esp,0xc
c0010535:	ba 2c 37 02 c0       	mov    edx,0xc002372c
c001053a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001053e:	89 10                	mov    DWORD PTR [eax],edx
c0010540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010544:	83 ec 0c             	sub    esp,0xc
c0010547:	50                   	push   eax
c0010548:	e8 83 d8 ff ff       	call   c000ddd0 <Device::~Device()>
c001054d:	83 c4 10             	add    esp,0x10
c0010550:	90                   	nop
c0010551:	83 c4 0c             	add    esp,0xc
c0010554:	c3                   	ret    
c0010555:	90                   	nop

c0010556 <Mouse::~Mouse()>:
c0010556:	83 ec 0c             	sub    esp,0xc
c0010559:	83 ec 0c             	sub    esp,0xc
c001055c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010560:	e8 cd ff ff ff       	call   c0010532 <Mouse::~Mouse()>
c0010565:	83 c4 10             	add    esp,0x10
c0010568:	83 ec 08             	sub    esp,0x8
c001056b:	68 58 01 00 00       	push   0x158
c0010570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010574:	e8 64 c4 ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c0010579:	83 c4 10             	add    esp,0x10
c001057c:	83 c4 0c             	add    esp,0xc
c001057f:	c3                   	ret    

c0010580 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010580:	55                   	push   ebp
c0010581:	57                   	push   edi
c0010582:	56                   	push   esi
c0010583:	53                   	push   ebx
c0010584:	81 ec 28 01 00 00    	sub    esp,0x128
c001058a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0010591:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0010598:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001059f:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00105a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00105aa:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00105ae:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00105b5:	e8 48 dc ff ff       	call   c000e202 <Device::getName()>
c00105ba:	5a                   	pop    edx
c00105bb:	59                   	pop    ecx
c00105bc:	50                   	push   eax
c00105bd:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00105c1:	55                   	push   ebp
c00105c2:	e8 45 02 ff ff       	call   c000080c <strcpy>
c00105c7:	5b                   	pop    ebx
c00105c8:	58                   	pop    eax
c00105c9:	68 50 37 02 c0       	push   0xc0023750
c00105ce:	55                   	push   ebp
c00105cf:	e8 78 03 ff ff       	call   c000094c <strcat>
c00105d4:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00105db:	e8 7d 94 ff ff       	call   c0009a5d <malloc>
c00105e0:	83 c4 0c             	add    esp,0xc
c00105e3:	89 c3                	mov    ebx,eax
c00105e5:	57                   	push   edi
c00105e6:	56                   	push   esi
c00105e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105ef:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00105f6:	55                   	push   ebp
c00105f7:	50                   	push   eax
c00105f8:	e8 f9 fb ff ff       	call   c00101f6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00105fd:	83 c4 14             	add    esp,0x14
c0010600:	53                   	push   ebx
c0010601:	e8 a6 fc ff ff       	call   c00102ac <LogicalDisk::assignDriveLetter()>
c0010606:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010609:	e8 54 fd ff ff       	call   c0010362 <LogicalDisk::mount()>
c001060e:	58                   	pop    eax
c001060f:	5a                   	pop    edx
c0010610:	53                   	push   ebx
c0010611:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010618:	e8 e5 d8 ff ff       	call   c000df02 <Device::addChild(Device*)>
c001061d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010623:	5b                   	pop    ebx
c0010624:	5e                   	pop    esi
c0010625:	5f                   	pop    edi
c0010626:	5d                   	pop    ebp
c0010627:	c3                   	ret    

c0010628 <createPartitionsForDisk(PhysicalDisk*)>:
c0010628:	55                   	push   ebp
c0010629:	57                   	push   edi
c001062a:	56                   	push   esi
c001062b:	53                   	push   ebx
c001062c:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010632:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010639:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001063f:	3d 00 02 00 00       	cmp    eax,0x200
c0010644:	74 27                	je     c001066d <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010646:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001064c:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010652:	83 ec 10             	sub    esp,0x10
c0010655:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010659:	99                   	cdq    
c001065a:	c1 e6 0a             	shl    esi,0xa
c001065d:	52                   	push   edx
c001065e:	89 fd                	mov    ebp,edi
c0010660:	50                   	push   eax
c0010661:	55                   	push   ebp
c0010662:	56                   	push   esi
c0010663:	e8 9c 07 01 00       	call   c0020e04 <__udivdi3>
c0010668:	e9 b1 00 00 00       	jmp    c001071e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001066d:	83 ec 0c             	sub    esp,0xc
c0010670:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010672:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010676:	56                   	push   esi
c0010677:	6a 01                	push   0x1
c0010679:	6a 00                	push   0x0
c001067b:	6a 00                	push   0x0
c001067d:	53                   	push   ebx
c001067e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0010681:	83 c4 20             	add    esp,0x20
c0010684:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001068c:	75 0a                	jne    c0010698 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001068e:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010696:	74 2c                	je     c00106c4 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010698:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001069e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00106a4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00106aa:	83 ec 10             	sub    esp,0x10
c00106ad:	0f a4 c2 0a          	shld   edx,eax,0xa
c00106b1:	89 f7                	mov    edi,esi
c00106b3:	c1 e0 0a             	shl    eax,0xa
c00106b6:	c1 ff 1f             	sar    edi,0x1f
c00106b9:	57                   	push   edi
c00106ba:	56                   	push   esi
c00106bb:	52                   	push   edx
c00106bc:	50                   	push   eax
c00106bd:	e8 42 07 01 00       	call   c0020e04 <__udivdi3>
c00106c2:	eb 5a                	jmp    c001071e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00106c4:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00106cb:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00106d2:	83 e1 7f             	and    ecx,0x7f
c00106d5:	83 e0 7f             	and    eax,0x7f
c00106d8:	01 c1                	add    ecx,eax
c00106da:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00106e1:	83 e0 7f             	and    eax,0x7f
c00106e4:	01 c1                	add    ecx,eax
c00106e6:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00106ed:	83 e0 7f             	and    eax,0x7f
c00106f0:	00 c1                	add    cl,al
c00106f2:	74 41                	je     c0010735 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00106f4:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00106fa:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010700:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010706:	83 ec 10             	sub    esp,0x10
c0010709:	0f a4 c2 0a          	shld   edx,eax,0xa
c001070d:	89 f7                	mov    edi,esi
c001070f:	c1 e0 0a             	shl    eax,0xa
c0010712:	c1 ff 1f             	sar    edi,0x1f
c0010715:	57                   	push   edi
c0010716:	56                   	push   esi
c0010717:	52                   	push   edx
c0010718:	50                   	push   eax
c0010719:	e8 e6 06 01 00       	call   c0020e04 <__udivdi3>
c001071e:	83 c4 14             	add    esp,0x14
c0010721:	52                   	push   edx
c0010722:	50                   	push   eax
c0010723:	6a 00                	push   0x0
c0010725:	6a 00                	push   0x0
c0010727:	53                   	push   ebx
c0010728:	e8 53 fe ff ff       	call   c0010580 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001072d:	83 c4 20             	add    esp,0x20
c0010730:	e9 79 01 00 00       	jmp    c00108ae <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010735:	89 f0                	mov    eax,esi
c0010737:	31 f6                	xor    esi,esi
c0010739:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0010740:	75 02                	jne    c0010744 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010742:	89 f1                	mov    ecx,esi
c0010744:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001074b:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010752:	c1 e2 08             	shl    edx,0x8
c0010755:	c1 e7 10             	shl    edi,0x10
c0010758:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010760:	09 fa                	or     edx,edi
c0010762:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001076a:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0010771:	83 c0 10             	add    eax,0x10
c0010774:	09 fa                	or     edx,edi
c0010776:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001077d:	c1 e7 18             	shl    edi,0x18
c0010780:	09 fa                	or     edx,edi
c0010782:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0010789:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001078d:	c1 e7 10             	shl    edi,0x10
c0010790:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010797:	c1 e2 08             	shl    edx,0x8
c001079a:	09 fa                	or     edx,edi
c001079c:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00107a3:	09 fa                	or     edx,edi
c00107a5:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00107ac:	c1 e7 18             	shl    edi,0x18
c00107af:	09 fa                	or     edx,edi
c00107b1:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00107b5:	46                   	inc    esi
c00107b6:	83 fe 04             	cmp    esi,0x4
c00107b9:	0f 85 7a ff ff ff    	jne    c0010739 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00107bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107c3:	83 f0 01             	xor    eax,0x1
c00107c6:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00107ca:	75 57                	jne    c0010823 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00107cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00107d0:	83 f0 01             	xor    eax,0x1
c00107d3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00107d7:	75 4a                	jne    c0010823 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00107d9:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00107dd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00107e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00107ed:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00107f3:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00107f9:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00107ff:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010803:	89 f7                	mov    edi,esi
c0010805:	c1 e0 0a             	shl    eax,0xa
c0010808:	c1 ff 1f             	sar    edi,0x1f
c001080b:	57                   	push   edi
c001080c:	56                   	push   esi
c001080d:	52                   	push   edx
c001080e:	50                   	push   eax
c001080f:	e8 f0 05 01 00       	call   c0020e04 <__udivdi3>
c0010814:	83 c4 10             	add    esp,0x10
c0010817:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001081b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001081f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010823:	84 c9                	test   cl,cl
c0010825:	74 53                	je     c001087a <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010827:	0f b6 c9             	movzx  ecx,cl
c001082a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010832:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010836:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001083a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001083e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010842:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010846:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001084a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001084e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010852:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010856:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001085a:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001085e:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010862:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010866:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001086a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001086e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010872:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010876:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001087a:	31 ed                	xor    ebp,ebp
c001087c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0010880:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010884:	89 f8                	mov    eax,edi
c0010886:	09 f0                	or     eax,esi
c0010888:	74 1e                	je     c00108a8 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001088a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001088e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010892:	89 d1                	mov    ecx,edx
c0010894:	09 c1                	or     ecx,eax
c0010896:	74 10                	je     c00108a8 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010898:	83 ec 0c             	sub    esp,0xc
c001089b:	57                   	push   edi
c001089c:	56                   	push   esi
c001089d:	52                   	push   edx
c001089e:	50                   	push   eax
c001089f:	53                   	push   ebx
c00108a0:	e8 db fc ff ff       	call   c0010580 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00108a5:	83 c4 20             	add    esp,0x20
c00108a8:	45                   	inc    ebp
c00108a9:	83 fd 04             	cmp    ebp,0x4
c00108ac:	75 ce                	jne    c001087c <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00108ae:	81 c4 5c 02 00 00    	add    esp,0x25c
c00108b4:	5b                   	pop    ebx
c00108b5:	5e                   	pop    esi
c00108b6:	5f                   	pop    edi
c00108b7:	5d                   	pop    ebp
c00108b8:	c3                   	ret    
c00108b9:	90                   	nop

c00108ba <Serial::Serial(char const*)>:
c00108ba:	83 ec 0c             	sub    esp,0xc
c00108bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c1:	83 ec 08             	sub    esp,0x8
c00108c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108c8:	50                   	push   eax
c00108c9:	e8 38 d8 ff ff       	call   c000e106 <Device::Device(char const*)>
c00108ce:	83 c4 10             	add    esp,0x10
c00108d1:	ba 64 37 02 c0       	mov    edx,0xc0023764
c00108d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108da:	89 10                	mov    DWORD PTR [eax],edx
c00108dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e0:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00108ea:	90                   	nop
c00108eb:	83 c4 0c             	add    esp,0xc
c00108ee:	c3                   	ret    
c00108ef:	90                   	nop

c00108f0 <Serial::~Serial()>:
c00108f0:	83 ec 0c             	sub    esp,0xc
c00108f3:	ba 64 37 02 c0       	mov    edx,0xc0023764
c00108f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fc:	89 10                	mov    DWORD PTR [eax],edx
c00108fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010902:	83 ec 0c             	sub    esp,0xc
c0010905:	50                   	push   eax
c0010906:	e8 c5 d4 ff ff       	call   c000ddd0 <Device::~Device()>
c001090b:	83 c4 10             	add    esp,0x10
c001090e:	90                   	nop
c001090f:	83 c4 0c             	add    esp,0xc
c0010912:	c3                   	ret    
c0010913:	90                   	nop

c0010914 <Serial::~Serial()>:
c0010914:	83 ec 0c             	sub    esp,0xc
c0010917:	83 ec 0c             	sub    esp,0xc
c001091a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001091e:	e8 cd ff ff ff       	call   c00108f0 <Serial::~Serial()>
c0010923:	83 c4 10             	add    esp,0x10
c0010926:	83 ec 08             	sub    esp,0x8
c0010929:	68 58 01 00 00       	push   0x158
c001092e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010932:	e8 a6 c0 ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c0010937:	83 c4 10             	add    esp,0x10
c001093a:	83 c4 0c             	add    esp,0xc
c001093d:	c3                   	ret    

c001093e <Timer::Timer(char const*)>:
c001093e:	83 ec 0c             	sub    esp,0xc
c0010941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010945:	83 ec 08             	sub    esp,0x8
c0010948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001094c:	50                   	push   eax
c001094d:	e8 b4 d7 ff ff       	call   c000e106 <Device::Device(char const*)>
c0010952:	83 c4 10             	add    esp,0x10
c0010955:	ba a8 37 02 c0       	mov    edx,0xc00237a8
c001095a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095e:	89 10                	mov    DWORD PTR [eax],edx
c0010960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010964:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001096e:	90                   	nop
c001096f:	83 c4 0c             	add    esp,0xc
c0010972:	c3                   	ret    
c0010973:	90                   	nop

c0010974 <Timer::~Timer()>:
c0010974:	83 ec 0c             	sub    esp,0xc
c0010977:	ba a8 37 02 c0       	mov    edx,0xc00237a8
c001097c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010980:	89 10                	mov    DWORD PTR [eax],edx
c0010982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010986:	83 ec 0c             	sub    esp,0xc
c0010989:	50                   	push   eax
c001098a:	e8 41 d4 ff ff       	call   c000ddd0 <Device::~Device()>
c001098f:	83 c4 10             	add    esp,0x10
c0010992:	90                   	nop
c0010993:	83 c4 0c             	add    esp,0xc
c0010996:	c3                   	ret    
c0010997:	90                   	nop

c0010998 <Timer::~Timer()>:
c0010998:	83 ec 0c             	sub    esp,0xc
c001099b:	83 ec 0c             	sub    esp,0xc
c001099e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a2:	e8 cd ff ff ff       	call   c0010974 <Timer::~Timer()>
c00109a7:	83 c4 10             	add    esp,0x10
c00109aa:	83 ec 08             	sub    esp,0x8
c00109ad:	68 5c 01 00 00       	push   0x15c
c00109b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b6:	e8 22 c0 ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c00109bb:	83 c4 10             	add    esp,0x10
c00109be:	83 c4 0c             	add    esp,0xc
c00109c1:	c3                   	ret    

c00109c2 <Timer::read()>:
c00109c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00109cc:	c3                   	ret    

c00109cd <timerHandler(unsigned long long)>:
c00109cd:	55                   	push   ebp
c00109ce:	57                   	push   edi
c00109cf:	56                   	push   esi
c00109d0:	53                   	push   ebx
c00109d1:	83 ec 0c             	sub    esp,0xc
c00109d4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00109d8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00109dc:	01 35 d0 68 02 c0    	add    DWORD PTR ds:0xc00268d0,esi
c00109e2:	11 3d d4 68 02 c0    	adc    DWORD PTR ds:0xc00268d4,edi
c00109e8:	80 3d 6d 62 02 c0 00 	cmp    BYTE PTR ds:0xc002626d,0x0
c00109ef:	0f 84 42 01 00 00    	je     c0010b37 <timerHandler(unsigned long long)+0x16a>
c00109f5:	fa                   	cli    
c00109f6:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c00109fc:	83 ec 0c             	sub    esp,0xc
c00109ff:	ff 05 64 77 02 c0    	inc    DWORD PTR ds:0xc0027764
c0010a05:	68 78 77 02 c0       	push   0xc0027778
c0010a0a:	e8 c5 09 01 00       	call   c00213d4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010a0f:	83 c4 10             	add    esp,0x10
c0010a12:	84 c0                	test   al,al
c0010a14:	0f 85 a2 00 00 00    	jne    c0010abc <timerHandler(unsigned long long)+0xef>
c0010a1a:	83 ec 0c             	sub    esp,0xc
c0010a1d:	68 78 77 02 c0       	push   0xc0027778
c0010a22:	e8 c9 09 01 00       	call   c00213f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010a27:	83 c4 10             	add    esp,0x10
c0010a2a:	89 c3                	mov    ebx,eax
c0010a2c:	83 ec 0c             	sub    esp,0xc
c0010a2f:	68 78 77 02 c0       	push   0xc0027778
c0010a34:	e8 b7 09 01 00       	call   c00213f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010a39:	c7 04 24 78 77 02 c0 	mov    DWORD PTR [esp],0xc0027778
c0010a40:	89 c5                	mov    ebp,eax
c0010a42:	e8 b1 09 01 00       	call   c00213f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010a47:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0010a4a:	83 c4 10             	add    esp,0x10
c0010a4d:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0010a50:	39 15 d0 68 02 c0    	cmp    DWORD PTR ds:0xc00268d0,edx
c0010a56:	a1 d4 68 02 c0       	mov    eax,ds:0xc00268d4
c0010a5b:	19 c8                	sbb    eax,ecx
c0010a5d:	72 21                	jb     c0010a80 <timerHandler(unsigned long long)+0xb3>
c0010a5f:	83 ec 0c             	sub    esp,0xc
c0010a62:	55                   	push   ebp
c0010a63:	e8 39 7a 00 00       	call   c00184a1 <unblockTask(ThreadControlBlock*)>
c0010a68:	83 c4 10             	add    esp,0x10
c0010a6b:	39 eb                	cmp    ebx,ebp
c0010a6d:	75 21                	jne    c0010a90 <timerHandler(unsigned long long)+0xc3>
c0010a6f:	83 ec 0c             	sub    esp,0xc
c0010a72:	68 78 77 02 c0       	push   0xc0027778
c0010a77:	e8 74 09 01 00       	call   c00213f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010a7c:	89 c3                	mov    ebx,eax
c0010a7e:	eb 0d                	jmp    c0010a8d <timerHandler(unsigned long long)+0xc0>
c0010a80:	50                   	push   eax
c0010a81:	50                   	push   eax
c0010a82:	55                   	push   ebp
c0010a83:	68 78 77 02 c0       	push   0xc0027778
c0010a88:	e8 19 0a 01 00       	call   c00214a6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010a8d:	83 c4 10             	add    esp,0x10
c0010a90:	83 ec 0c             	sub    esp,0xc
c0010a93:	68 78 77 02 c0       	push   0xc0027778
c0010a98:	e8 37 09 01 00       	call   c00213d4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010a9d:	83 c4 10             	add    esp,0x10
c0010aa0:	84 c0                	test   al,al
c0010aa2:	75 18                	jne    c0010abc <timerHandler(unsigned long long)+0xef>
c0010aa4:	83 ec 0c             	sub    esp,0xc
c0010aa7:	68 78 77 02 c0       	push   0xc0027778
c0010aac:	e8 3f 09 01 00       	call   c00213f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010ab1:	83 c4 10             	add    esp,0x10
c0010ab4:	39 d8                	cmp    eax,ebx
c0010ab6:	0f 85 70 ff ff ff    	jne    c0010a2c <timerHandler(unsigned long long)+0x5f>
c0010abc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ac1:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0010ac5:	74 3d                	je     c0010b04 <timerHandler(unsigned long long)+0x137>
c0010ac7:	80 3d 6c 62 02 c0 00 	cmp    BYTE PTR ds:0xc002626c,0x0
c0010ace:	74 34                	je     c0010b04 <timerHandler(unsigned long long)+0x137>
c0010ad0:	fa                   	cli    
c0010ad1:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c0010ad7:	31 d2                	xor    edx,edx
c0010ad9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ade:	89 f9                	mov    ecx,edi
c0010ae0:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0010ae3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ae8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010aeb:	39 c6                	cmp    esi,eax
c0010aed:	19 d1                	sbb    ecx,edx
c0010aef:	72 05                	jb     c0010af6 <timerHandler(unsigned long long)+0x129>
c0010af1:	e8 19 75 00 00       	call   c001800f <schedule()>
c0010af6:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0010afb:	48                   	dec    eax
c0010afc:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0010b01:	75 01                	jne    c0010b04 <timerHandler(unsigned long long)+0x137>
c0010b03:	fb                   	sti    
c0010b04:	a1 64 77 02 c0       	mov    eax,ds:0xc0027764
c0010b09:	48                   	dec    eax
c0010b0a:	a3 64 77 02 c0       	mov    ds:0xc0027764,eax
c0010b0f:	75 18                	jne    c0010b29 <timerHandler(unsigned long long)+0x15c>
c0010b11:	83 3d 60 77 02 c0 00 	cmp    DWORD PTR ds:0xc0027760,0x0
c0010b18:	74 0f                	je     c0010b29 <timerHandler(unsigned long long)+0x15c>
c0010b1a:	c7 05 60 77 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027760,0x0
c0010b24:	e8 e6 74 00 00       	call   c001800f <schedule()>
c0010b29:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0010b2e:	48                   	dec    eax
c0010b2f:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0010b34:	75 01                	jne    c0010b37 <timerHandler(unsigned long long)+0x16a>
c0010b36:	fb                   	sti    
c0010b37:	83 c4 0c             	add    esp,0xc
c0010b3a:	5b                   	pop    ebx
c0010b3b:	5e                   	pop    esi
c0010b3c:	5f                   	pop    edi
c0010b3d:	5d                   	pop    ebp
c0010b3e:	c3                   	ret    

c0010b3f <setupTimer(int)>:
c0010b3f:	57                   	push   edi
c0010b40:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0010b45:	56                   	push   esi
c0010b46:	53                   	push   ebx
c0010b47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010b51:	83 ec 0c             	sub    esp,0xc
c0010b54:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010b5a:	e8 a3 d6 ff ff       	call   c000e202 <Device::getName()>
c0010b5f:	83 c4 10             	add    esp,0x10
c0010b62:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010b65:	0f 85 8d 00 00 00    	jne    c0010bf8 <setupTimer(int)+0xb9>
c0010b6b:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0010b70:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010b77:	74 7f                	je     c0010bf8 <setupTimer(int)+0xb9>
c0010b79:	83 ec 0c             	sub    esp,0xc
c0010b7c:	68 5c 01 00 00       	push   0x15c
c0010b81:	e8 d7 8e ff ff       	call   c0009a5d <malloc>
c0010b86:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b89:	89 c3                	mov    ebx,eax
c0010b8b:	e8 4c fe 00 00       	call   c00209dc <PIT::PIT()>
c0010b90:	59                   	pop    ecx
c0010b91:	5f                   	pop    edi
c0010b92:	53                   	push   ebx
c0010b93:	ff 35 68 62 02 c0    	push   DWORD PTR ds:0xc0026268
c0010b99:	e8 64 d3 ff ff       	call   c000df02 <Device::addChild(Device*)>
c0010b9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ba0:	6a 00                	push   0x0
c0010ba2:	6a 00                	push   0x0
c0010ba4:	56                   	push   esi
c0010ba5:	53                   	push   ebx
c0010ba6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010ba9:	83 c4 14             	add    esp,0x14
c0010bac:	68 60 01 00 00       	push   0x160
c0010bb1:	e8 a7 8e ff ff       	call   c0009a5d <malloc>
c0010bb6:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bb9:	89 c7                	mov    edi,eax
c0010bbb:	e8 cc fc 00 00       	call   c002088c <APICTimer::APICTimer()>
c0010bc0:	6a 00                	push   0x0
c0010bc2:	6a 00                	push   0x0
c0010bc4:	56                   	push   esi
c0010bc5:	57                   	push   edi
c0010bc6:	e8 c3 fb 00 00       	call   c002078e <APICTimer::open(int, int, void*)>
c0010bcb:	83 c4 20             	add    esp,0x20
c0010bce:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010bd0:	6a 00                	push   0x0
c0010bd2:	6a 00                	push   0x0
c0010bd4:	6a 00                	push   0x0
c0010bd6:	53                   	push   ebx
c0010bd7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010bda:	58                   	pop    eax
c0010bdb:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0010be0:	5a                   	pop    edx
c0010be1:	57                   	push   edi
c0010be2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010be8:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010bee:	e8 0f d3 ff ff       	call   c000df02 <Device::addChild(Device*)>
c0010bf3:	83 c4 10             	add    esp,0x10
c0010bf6:	eb 33                	jmp    c0010c2b <setupTimer(int)+0xec>
c0010bf8:	83 ec 0c             	sub    esp,0xc
c0010bfb:	68 5c 01 00 00       	push   0x15c
c0010c00:	e8 58 8e ff ff       	call   c0009a5d <malloc>
c0010c05:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c08:	89 c3                	mov    ebx,eax
c0010c0a:	e8 cd fd 00 00       	call   c00209dc <PIT::PIT()>
c0010c0f:	58                   	pop    eax
c0010c10:	5a                   	pop    edx
c0010c11:	53                   	push   ebx
c0010c12:	ff 35 68 62 02 c0    	push   DWORD PTR ds:0xc0026268
c0010c18:	e8 e5 d2 ff ff       	call   c000df02 <Device::addChild(Device*)>
c0010c1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c1f:	6a 00                	push   0x0
c0010c21:	6a 00                	push   0x0
c0010c23:	56                   	push   esi
c0010c24:	53                   	push   ebx
c0010c25:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c28:	83 c4 20             	add    esp,0x20
c0010c2b:	89 d8                	mov    eax,ebx
c0010c2d:	5b                   	pop    ebx
c0010c2e:	5e                   	pop    esi
c0010c2f:	5f                   	pop    edi
c0010c30:	c3                   	ret    
c0010c31:	90                   	nop

c0010c32 <VCache::VCache(PhysicalDisk*)>:
c0010c32:	53                   	push   ebx
c0010c33:	83 ec 18             	sub    esp,0x18
c0010c36:	ba f8 38 02 c0       	mov    edx,0xc00238f8
c0010c3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c3f:	89 10                	mov    DWORD PTR [eax],edx
c0010c41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c45:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010c4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c50:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0010c57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c5b:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0010c62:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0010c69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c6d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0010c74:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c7f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0010c86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c8a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c92:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010c99:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010ca0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ca4:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010ca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cac:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010cb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cb4:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010cb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cbc:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010cc3:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010ccb:	83 ec 0c             	sub    esp,0xc
c0010cce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010cd2:	e8 86 8d ff ff       	call   c0009a5d <malloc>
c0010cd7:	83 c4 10             	add    esp,0x10
c0010cda:	89 c3                	mov    ebx,eax
c0010cdc:	83 ec 0c             	sub    esp,0xc
c0010cdf:	53                   	push   ebx
c0010ce0:	e8 f3 70 00 00       	call   c0017dd8 <Mutex::Mutex()>
c0010ce5:	83 c4 10             	add    esp,0x10
c0010ce8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cec:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010cef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cf3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010cf7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010cfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cfe:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010d05:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010d09:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010d0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d13:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d16:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010d1a:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010d20:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010d26:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010d2a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010d2d:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d34:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010d38:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010d3c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010d42:	05 00 01 00 00       	add    eax,0x100
c0010d47:	c1 e0 04             	shl    eax,0x4
c0010d4a:	83 ec 0c             	sub    esp,0xc
c0010d4d:	50                   	push   eax
c0010d4e:	e8 0a 8d ff ff       	call   c0009a5d <malloc>
c0010d53:	83 c4 10             	add    esp,0x10
c0010d56:	89 c2                	mov    edx,eax
c0010d58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d5c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010d5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d63:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010d6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d6e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010d72:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010d76:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010d7c:	c1 e0 07             	shl    eax,0x7
c0010d7f:	83 ec 0c             	sub    esp,0xc
c0010d82:	50                   	push   eax
c0010d83:	e8 d5 8c ff ff       	call   c0009a5d <malloc>
c0010d88:	83 c4 10             	add    esp,0x10
c0010d8b:	89 c2                	mov    edx,eax
c0010d8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d91:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010d94:	90                   	nop
c0010d95:	83 c4 18             	add    esp,0x18
c0010d98:	5b                   	pop    ebx
c0010d99:	c3                   	ret    

c0010d9a <VCache::invalidateReadBuffer()>:
c0010d9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d9e:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010da4:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010da8:	c3                   	ret    
c0010da9:	90                   	nop

c0010daa <VCache::writeWriteBuffer()>:
c0010daa:	53                   	push   ebx
c0010dab:	83 ec 0c             	sub    esp,0xc
c0010dae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010db2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010db5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010db8:	68 d0 37 02 c0       	push   0xc00237d0
c0010dbd:	e8 fc bc ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0010dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010dc5:	5a                   	pop    edx
c0010dc6:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dc8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010dcb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010dce:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010dd1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010dd4:	50                   	push   eax
c0010dd5:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010dd8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010ddf:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010de6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010dea:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010df1:	83 c4 28             	add    esp,0x28
c0010df4:	5b                   	pop    ebx
c0010df5:	c3                   	ret    

c0010df6 <VCache::~VCache()>:
c0010df6:	83 ec 0c             	sub    esp,0xc
c0010df9:	ba f8 38 02 c0       	mov    edx,0xc00238f8
c0010dfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e02:	89 10                	mov    DWORD PTR [eax],edx
c0010e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e08:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010e0b:	84 c0                	test   al,al
c0010e0d:	74 0f                	je     c0010e1e <VCache::~VCache()+0x28>
c0010e0f:	83 ec 0c             	sub    esp,0xc
c0010e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e16:	e8 8f ff ff ff       	call   c0010daa <VCache::writeWriteBuffer()>
c0010e1b:	83 c4 10             	add    esp,0x10
c0010e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e22:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010e25:	83 ec 0c             	sub    esp,0xc
c0010e28:	50                   	push   eax
c0010e29:	e8 3f 8c ff ff       	call   c0009a6d <free>
c0010e2e:	83 c4 10             	add    esp,0x10
c0010e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e35:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010e38:	83 ec 0c             	sub    esp,0xc
c0010e3b:	50                   	push   eax
c0010e3c:	e8 2c 8c ff ff       	call   c0009a6d <free>
c0010e41:	83 c4 10             	add    esp,0x10
c0010e44:	90                   	nop
c0010e45:	83 c4 0c             	add    esp,0xc
c0010e48:	c3                   	ret    
c0010e49:	90                   	nop

c0010e4a <VCache::~VCache()>:
c0010e4a:	83 ec 0c             	sub    esp,0xc
c0010e4d:	83 ec 0c             	sub    esp,0xc
c0010e50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e54:	e8 9d ff ff ff       	call   c0010df6 <VCache::~VCache()>
c0010e59:	83 c4 10             	add    esp,0x10
c0010e5c:	83 ec 08             	sub    esp,0x8
c0010e5f:	6a 44                	push   0x44
c0010e61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e65:	e8 73 bb ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c0010e6a:	83 c4 10             	add    esp,0x10
c0010e6d:	83 c4 0c             	add    esp,0xc
c0010e70:	c3                   	ret    
c0010e71:	90                   	nop

c0010e72 <VCache::write(unsigned long long, int, void*)>:
c0010e72:	55                   	push   ebp
c0010e73:	31 c0                	xor    eax,eax
c0010e75:	57                   	push   edi
c0010e76:	56                   	push   esi
c0010e77:	53                   	push   ebx
c0010e78:	83 ec 0c             	sub    esp,0xc
c0010e7b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010e7f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010e83:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
c0010e87:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e8b:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010e8f:	7d 15                	jge    c0010ea6 <VCache::write(unsigned long long, int, void*)+0x34>
c0010e91:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010e94:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010e9a:	0f af c8             	imul   ecx,eax
c0010e9d:	89 ca                	mov    edx,ecx
c0010e9f:	01 f2                	add    edx,esi
c0010ea1:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010ea3:	40                   	inc    eax
c0010ea4:	eb e5                	jmp    c0010e8b <VCache::write(unsigned long long, int, void*)+0x19>
c0010ea6:	83 ec 0c             	sub    esp,0xc
c0010ea9:	68 f4 37 02 c0       	push   0xc00237f4
c0010eae:	e8 0b bc ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0010eb3:	83 c4 10             	add    esp,0x10
c0010eb6:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010eba:	74 0c                	je     c0010ec8 <VCache::write(unsigned long long, int, void*)+0x56>
c0010ebc:	83 ec 0c             	sub    esp,0xc
c0010ebf:	53                   	push   ebx
c0010ec0:	e8 d5 fe ff ff       	call   c0010d9a <VCache::invalidateReadBuffer()>
c0010ec5:	83 c4 10             	add    esp,0x10
c0010ec8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010ecc:	74 64                	je     c0010f32 <VCache::write(unsigned long long, int, void*)+0xc0>
c0010ece:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ed1:	99                   	cdq    
c0010ed2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010ed5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010ed8:	31 f8                	xor    eax,edi
c0010eda:	89 d1                	mov    ecx,edx
c0010edc:	89 ca                	mov    edx,ecx
c0010ede:	31 ea                	xor    edx,ebp
c0010ee0:	09 d0                	or     eax,edx
c0010ee2:	75 42                	jne    c0010f26 <VCache::write(unsigned long long, int, void*)+0xb4>
c0010ee4:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010ee9:	75 3b                	jne    c0010f26 <VCache::write(unsigned long long, int, void*)+0xb4>
c0010eeb:	83 ec 0c             	sub    esp,0xc
c0010eee:	68 1b 38 02 c0       	push   0xc002381b
c0010ef3:	e8 c6 bb ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0010ef8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010efb:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0010efe:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010f04:	0f af f9             	imul   edi,ecx
c0010f07:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010f0a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f0c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010f0f:	83 c4 10             	add    esp,0x10
c0010f12:	40                   	inc    eax
c0010f13:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010f16:	83 c0 80             	add    eax,0xffffff80
c0010f19:	75 75                	jne    c0010f90 <VCache::write(unsigned long long, int, void*)+0x11e>
c0010f1b:	83 ec 0c             	sub    esp,0xc
c0010f1e:	53                   	push   ebx
c0010f1f:	e8 86 fe ff ff       	call   c0010daa <VCache::writeWriteBuffer()>
c0010f24:	eb 40                	jmp    c0010f66 <VCache::write(unsigned long long, int, void*)+0xf4>
c0010f26:	83 ec 0c             	sub    esp,0xc
c0010f29:	53                   	push   ebx
c0010f2a:	e8 7b fe ff ff       	call   c0010daa <VCache::writeWriteBuffer()>
c0010f2f:	83 c4 10             	add    esp,0x10
c0010f32:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0010f37:	7f 32                	jg     c0010f6b <VCache::write(unsigned long long, int, void*)+0xf9>
c0010f39:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f3d:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0010f40:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010f43:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c0010f46:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0010f4a:	52                   	push   edx
c0010f4b:	56                   	push   esi
c0010f4c:	6a 01                	push   0x1
c0010f4e:	68 31 38 02 c0       	push   0xc0023831
c0010f53:	e8 66 bb ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0010f58:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010f5b:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010f5e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010f64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f66:	83 c4 10             	add    esp,0x10
c0010f69:	eb 25                	jmp    c0010f90 <VCache::write(unsigned long long, int, void*)+0x11e>
c0010f6b:	50                   	push   eax
c0010f6c:	56                   	push   esi
c0010f6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0010f71:	68 52 38 02 c0       	push   0xc0023852
c0010f76:	e8 43 bb ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0010f7b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010f7e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f80:	89 34 24             	mov    DWORD PTR [esp],esi
c0010f83:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f87:	55                   	push   ebp
c0010f88:	57                   	push   edi
c0010f89:	50                   	push   eax
c0010f8a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010f8d:	83 c4 20             	add    esp,0x20
c0010f90:	83 ec 0c             	sub    esp,0xc
c0010f93:	68 6f 38 02 c0       	push   0xc002386f
c0010f98:	e8 21 bb ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0010f9d:	83 c4 1c             	add    esp,0x1c
c0010fa0:	31 c0                	xor    eax,eax
c0010fa2:	5b                   	pop    ebx
c0010fa3:	5e                   	pop    esi
c0010fa4:	5f                   	pop    edi
c0010fa5:	5d                   	pop    ebp
c0010fa6:	c3                   	ret    
c0010fa7:	90                   	nop

c0010fa8 <VCache::read(unsigned long long, int, void*)>:
c0010fa8:	55                   	push   ebp
c0010fa9:	57                   	push   edi
c0010faa:	56                   	push   esi
c0010fab:	53                   	push   ebx
c0010fac:	83 ec 1c             	sub    esp,0x1c
c0010faf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010fb3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010fb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fba:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010fbe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010fc2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010fc6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0010fca:	31 c0                	xor    eax,eax
c0010fcc:	39 f0                	cmp    eax,esi
c0010fce:	7d 15                	jge    c0010fe5 <VCache::read(unsigned long long, int, void*)+0x3d>
c0010fd0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010fd3:	8b ba 5c 01 00 00    	mov    edi,DWORD PTR [edx+0x15c]
c0010fd9:	0f af f8             	imul   edi,eax
c0010fdc:	89 fa                	mov    edx,edi
c0010fde:	01 ea                	add    edx,ebp
c0010fe0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010fe2:	40                   	inc    eax
c0010fe3:	eb e7                	jmp    c0010fcc <VCache::read(unsigned long long, int, void*)+0x24>
c0010fe5:	83 ec 0c             	sub    esp,0xc
c0010fe8:	68 8f 38 02 c0       	push   0xc002388f
c0010fed:	e8 cc ba ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0010ff2:	83 c4 10             	add    esp,0x10
c0010ff5:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010ff9:	74 0c                	je     c0011007 <VCache::read(unsigned long long, int, void*)+0x5f>
c0010ffb:	83 ec 0c             	sub    esp,0xc
c0010ffe:	53                   	push   ebx
c0010fff:	e8 a6 fd ff ff       	call   c0010daa <VCache::writeWriteBuffer()>
c0011004:	83 c4 10             	add    esp,0x10
c0011007:	83 fe 01             	cmp    esi,0x1
c001100a:	75 79                	jne    c0011085 <VCache::read(unsigned long long, int, void*)+0xdd>
c001100c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001100f:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0011016:	75 6d                	jne    c0011085 <VCache::read(unsigned long long, int, void*)+0xdd>
c0011018:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001101b:	89 d1                	mov    ecx,edx
c001101d:	f7 d9                	neg    ecx
c001101f:	89 cf                	mov    edi,ecx
c0011021:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0011025:	c1 ff 1f             	sar    edi,0x1f
c0011028:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001102b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001102f:	89 ce                	mov    esi,ecx
c0011031:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011035:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0011039:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001103d:	89 cf                	mov    edi,ecx
c001103f:	74 0a                	je     c001104b <VCache::read(unsigned long long, int, void*)+0xa3>
c0011041:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0011044:	75 05                	jne    c001104b <VCache::read(unsigned long long, int, void*)+0xa3>
c0011046:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0011049:	74 1c                	je     c0011067 <VCache::read(unsigned long long, int, void*)+0xbf>
c001104b:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001104f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0011052:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0011055:	83 ec 0c             	sub    esp,0xc
c0011058:	8b 08                	mov    ecx,DWORD PTR [eax]
c001105a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001105d:	52                   	push   edx
c001105e:	57                   	push   edi
c001105f:	56                   	push   esi
c0011060:	50                   	push   eax
c0011061:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0011064:	83 c4 20             	add    esp,0x20
c0011067:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001106a:	89 ef                	mov    edi,ebp
c001106c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011072:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0011075:	8d 70 ff             	lea    esi,[eax-0x1]
c0011078:	23 34 24             	and    esi,DWORD PTR [esp]
c001107b:	0f af f1             	imul   esi,ecx
c001107e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0011081:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011083:	eb 30                	jmp    c00110b5 <VCache::read(unsigned long long, int, void*)+0x10d>
c0011085:	83 ec 0c             	sub    esp,0xc
c0011088:	53                   	push   ebx
c0011089:	e8 0c fd ff ff       	call   c0010d9a <VCache::invalidateReadBuffer()>
c001108e:	83 c4 0c             	add    esp,0xc
c0011091:	55                   	push   ebp
c0011092:	56                   	push   esi
c0011093:	68 b5 38 02 c0       	push   0xc00238b5
c0011098:	e8 21 ba ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001109d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00110a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00110a2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00110a5:	56                   	push   esi
c00110a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110ae:	50                   	push   eax
c00110af:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00110b2:	83 c4 20             	add    esp,0x20
c00110b5:	83 ec 0c             	sub    esp,0xc
c00110b8:	68 d1 38 02 c0       	push   0xc00238d1
c00110bd:	e8 fc b9 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c00110c2:	83 c4 2c             	add    esp,0x2c
c00110c5:	31 c0                	xor    eax,eax
c00110c7:	5b                   	pop    ebx
c00110c8:	5e                   	pop    esi
c00110c9:	5f                   	pop    edi
c00110ca:	5d                   	pop    ebp
c00110cb:	c3                   	ret    

c00110cc <Video::putrect(int, int, int, int, unsigned int)>:
c00110cc:	55                   	push   ebp
c00110cd:	57                   	push   edi
c00110ce:	56                   	push   esi
c00110cf:	53                   	push   ebx
c00110d0:	83 ec 1c             	sub    esp,0x1c
c00110d3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00110d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00110db:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00110df:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00110e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00110e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110eb:	01 df                	add    edi,ebx
c00110ed:	39 fb                	cmp    ebx,edi
c00110ef:	7d 1f                	jge    c0011110 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00110f1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00110f5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00110f9:	7d 12                	jge    c001110d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00110fb:	8b 16                	mov    edx,DWORD PTR [esi]
c00110fd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011101:	53                   	push   ebx
c0011102:	55                   	push   ebp
c0011103:	45                   	inc    ebp
c0011104:	56                   	push   esi
c0011105:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0011108:	83 c4 10             	add    esp,0x10
c001110b:	eb e8                	jmp    c00110f5 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001110d:	43                   	inc    ebx
c001110e:	eb dd                	jmp    c00110ed <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0011110:	83 c4 1c             	add    esp,0x1c
c0011113:	5b                   	pop    ebx
c0011114:	5e                   	pop    esi
c0011115:	5f                   	pop    edi
c0011116:	5d                   	pop    ebp
c0011117:	c3                   	ret    

c0011118 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0011118:	55                   	push   ebp
c0011119:	57                   	push   edi
c001111a:	31 ff                	xor    edi,edi
c001111c:	56                   	push   esi
c001111d:	53                   	push   ebx
c001111e:	83 ec 1c             	sub    esp,0x1c
c0011121:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0011125:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011129:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0011130:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0011135:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011139:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001113d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011141:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0011144:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011148:	01 f9                	add    ecx,edi
c001114a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001114e:	7d 2f                	jge    c001117f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0011150:	31 f6                	xor    esi,esi
c0011152:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011156:	01 f2                	add    edx,esi
c0011158:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001115c:	7d 1a                	jge    c0011178 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001115e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011161:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0011164:	46                   	inc    esi
c0011165:	51                   	push   ecx
c0011166:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001116a:	52                   	push   edx
c001116b:	55                   	push   ebp
c001116c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001116f:	83 c4 10             	add    esp,0x10
c0011172:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011176:	eb da                	jmp    c0011152 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0011178:	47                   	inc    edi
c0011179:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001117d:	eb c5                	jmp    c0011144 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001117f:	83 c4 1c             	add    esp,0x1c
c0011182:	5b                   	pop    ebx
c0011183:	5e                   	pop    esi
c0011184:	5f                   	pop    edi
c0011185:	5d                   	pop    ebp
c0011186:	c3                   	ret    
c0011187:	90                   	nop

c0011188 <Video::blit(unsigned int*, int, int, int, int)>:
c0011188:	55                   	push   ebp
c0011189:	57                   	push   edi
c001118a:	56                   	push   esi
c001118b:	53                   	push   ebx
c001118c:	83 ec 1c             	sub    esp,0x1c
c001118f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011193:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011197:	85 c0                	test   eax,eax
c0011199:	79 02                	jns    c001119d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001119b:	31 c0                	xor    eax,eax
c001119d:	c1 e0 02             	shl    eax,0x2
c00111a0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00111a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00111a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00111ac:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00111b0:	39 d8                	cmp    eax,ebx
c00111b2:	7e 49                	jle    c00111fd <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00111b4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00111ba:	7c 41                	jl     c00111fd <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00111bc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00111c0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00111c4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00111c8:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00111cc:	39 f9                	cmp    ecx,edi
c00111ce:	7e 22                	jle    c00111f2 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00111d0:	83 c5 04             	add    ebp,0x4
c00111d3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00111d9:	7c 14                	jl     c00111ef <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00111db:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00111dd:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00111e0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00111e4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00111e8:	56                   	push   esi
c00111e9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00111ec:	83 c4 10             	add    esp,0x10
c00111ef:	47                   	inc    edi
c00111f0:	eb d2                	jmp    c00111c4 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00111f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111f6:	43                   	inc    ebx
c00111f7:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00111fb:	eb ab                	jmp    c00111a8 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00111fd:	83 c4 1c             	add    esp,0x1c
c0011200:	5b                   	pop    ebx
c0011201:	5e                   	pop    esi
c0011202:	5f                   	pop    edi
c0011203:	5d                   	pop    ebp
c0011204:	c3                   	ret    
c0011205:	90                   	nop

c0011206 <Video::clearScreen(unsigned int)>:
c0011206:	57                   	push   edi
c0011207:	56                   	push   esi
c0011208:	53                   	push   ebx
c0011209:	31 db                	xor    ebx,ebx
c001120b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001120f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011215:	7e 1f                	jle    c0011236 <Video::clearScreen(unsigned int)+0x30>
c0011217:	31 ff                	xor    edi,edi
c0011219:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001121f:	7e 12                	jle    c0011233 <Video::clearScreen(unsigned int)+0x2d>
c0011221:	8b 06                	mov    eax,DWORD PTR [esi]
c0011223:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011227:	53                   	push   ebx
c0011228:	57                   	push   edi
c0011229:	47                   	inc    edi
c001122a:	56                   	push   esi
c001122b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001122e:	83 c4 10             	add    esp,0x10
c0011231:	eb e6                	jmp    c0011219 <Video::clearScreen(unsigned int)+0x13>
c0011233:	43                   	inc    ebx
c0011234:	eb d9                	jmp    c001120f <Video::clearScreen(unsigned int)+0x9>
c0011236:	5b                   	pop    ebx
c0011237:	5e                   	pop    esi
c0011238:	5f                   	pop    edi
c0011239:	c3                   	ret    

c001123a <Video::putpixel(int, int, unsigned int)>:
c001123a:	c7 44 24 04 00 39 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023900
c0011242:	e9 36 32 00 00       	jmp    c001447d <Krnl::panic(char const*)>
c0011247:	90                   	nop

c0011248 <Video::Video(char const*)>:
c0011248:	83 ec 0c             	sub    esp,0xc
c001124b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001124f:	83 ec 08             	sub    esp,0x8
c0011252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011256:	50                   	push   eax
c0011257:	e8 aa ce ff ff       	call   c000e106 <Device::Device(char const*)>
c001125c:	83 c4 10             	add    esp,0x10
c001125f:	ba 70 39 02 c0       	mov    edx,0xc0023970
c0011264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011268:	89 10                	mov    DWORD PTR [eax],edx
c001126a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001126e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0011278:	90                   	nop
c0011279:	83 c4 0c             	add    esp,0xc
c001127c:	c3                   	ret    
c001127d:	90                   	nop

c001127e <Video::~Video()>:
c001127e:	83 ec 0c             	sub    esp,0xc
c0011281:	ba 70 39 02 c0       	mov    edx,0xc0023970
c0011286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001128a:	89 10                	mov    DWORD PTR [eax],edx
c001128c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011290:	83 ec 0c             	sub    esp,0xc
c0011293:	50                   	push   eax
c0011294:	e8 37 cb ff ff       	call   c000ddd0 <Device::~Device()>
c0011299:	83 c4 10             	add    esp,0x10
c001129c:	90                   	nop
c001129d:	83 c4 0c             	add    esp,0xc
c00112a0:	c3                   	ret    
c00112a1:	90                   	nop

c00112a2 <Video::~Video()>:
c00112a2:	83 ec 0c             	sub    esp,0xc
c00112a5:	83 ec 0c             	sub    esp,0xc
c00112a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ac:	e8 cd ff ff ff       	call   c001127e <Video::~Video()>
c00112b1:	83 c4 10             	add    esp,0x10
c00112b4:	83 ec 08             	sub    esp,0x8
c00112b7:	68 64 01 00 00       	push   0x164
c00112bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c0:	e8 18 b7 ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c00112c5:	83 c4 10             	add    esp,0x10
c00112c8:	83 c4 0c             	add    esp,0xc
c00112cb:	c3                   	ret    

c00112cc <Video::isMonochrome()>:
c00112cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112d0:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00112d6:	c3                   	ret    
c00112d7:	90                   	nop

c00112d8 <Video::getWidth()>:
c00112d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112dc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00112e2:	c3                   	ret    
c00112e3:	90                   	nop

c00112e4 <Video::getHeight()>:
c00112e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112e8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00112ee:	c3                   	ret    
c00112ef:	90                   	nop

c00112f0 <Video::drawCursor(int, int, unsigned char*, int)>:
c00112f0:	55                   	push   ebp
c00112f1:	57                   	push   edi
c00112f2:	56                   	push   esi
c00112f3:	53                   	push   ebx
c00112f4:	83 ec 2c             	sub    esp,0x2c
c00112f7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00112fb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00112ff:	83 f8 01             	cmp    eax,0x1
c0011302:	19 c9                	sbb    ecx,ecx
c0011304:	31 db                	xor    ebx,ebx
c0011306:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001130a:	89 cd                	mov    ebp,ecx
c001130c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0011314:	f7 d5                	not    ebp
c0011316:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001131c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011320:	01 d8                	add    eax,ebx
c0011322:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011326:	56                   	push   esi
c0011327:	e8 b8 ff ff ff       	call   c00112e4 <Video::getHeight()>
c001132c:	59                   	pop    ecx
c001132d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0011331:	7e 70                	jle    c00113a3 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011333:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011337:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001133b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001133e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011342:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011346:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001134d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011351:	89 f8                	mov    eax,edi
c0011353:	83 c0 20             	add    eax,0x20
c0011356:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001135a:	56                   	push   esi
c001135b:	e8 78 ff ff ff       	call   c00112d8 <Video::getWidth()>
c0011360:	5a                   	pop    edx
c0011361:	39 c7                	cmp    edi,eax
c0011363:	7d 34                	jge    c0011399 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0011365:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001136a:	74 05                	je     c0011371 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001136c:	8b 06                	mov    eax,DWORD PTR [esi]
c001136e:	55                   	push   ebp
c001136f:	eb 0d                	jmp    c001137e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0011371:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0011376:	74 12                	je     c001138a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0011378:	8b 06                	mov    eax,DWORD PTR [esi]
c001137a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001137e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011382:	57                   	push   edi
c0011383:	56                   	push   esi
c0011384:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011387:	83 c4 10             	add    esp,0x10
c001138a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001138e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0011392:	47                   	inc    edi
c0011393:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011397:	75 c1                	jne    c001135a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0011399:	43                   	inc    ebx
c001139a:	83 fb 20             	cmp    ebx,0x20
c001139d:	0f 85 79 ff ff ff    	jne    c001131c <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00113a3:	83 c4 2c             	add    esp,0x2c
c00113a6:	5b                   	pop    ebx
c00113a7:	5e                   	pop    esi
c00113a8:	5f                   	pop    edi
c00113a9:	5d                   	pop    ebp
c00113aa:	c3                   	ret    
c00113ab:	90                   	nop

c00113ac <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00113ac:	55                   	push   ebp
c00113ad:	57                   	push   edi
c00113ae:	56                   	push   esi
c00113af:	53                   	push   ebx
c00113b0:	83 ec 28             	sub    esp,0x28
c00113b3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00113b7:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00113bb:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00113bf:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00113c3:	c1 e6 08             	shl    esi,0x8
c00113c6:	01 c6                	add    esi,eax
c00113c8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00113cc:	c1 e0 08             	shl    eax,0x8
c00113cf:	01 d0                	add    eax,edx
c00113d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00113d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113d9:	0f af c6             	imul   eax,esi
c00113dc:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00113e3:	50                   	push   eax
c00113e4:	e8 74 86 ff ff       	call   c0009a5d <malloc>
c00113e9:	83 c4 10             	add    esp,0x10
c00113ec:	89 c7                	mov    edi,eax
c00113ee:	85 c0                	test   eax,eax
c00113f0:	75 10                	jne    c0011402 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00113f2:	83 ec 0c             	sub    esp,0xc
c00113f5:	68 21 39 02 c0       	push   0xc0023921
c00113fa:	e8 7e 30 00 00       	call   c001447d <Krnl::panic(char const*)>
c00113ff:	83 c4 10             	add    esp,0x10
c0011402:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0011405:	ba 12 00 00 00       	mov    edx,0x12
c001140a:	84 c0                	test   al,al
c001140c:	74 11                	je     c001141f <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c001140e:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0011412:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0011416:	c1 fa 03             	sar    edx,0x3
c0011419:	0f af d1             	imul   edx,ecx
c001141c:	83 c2 12             	add    edx,0x12
c001141f:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0011423:	74 04                	je     c0011429 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0011425:	85 f6                	test   esi,esi
c0011427:	75 12                	jne    c001143b <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0011429:	83 ec 0c             	sub    esp,0xc
c001142c:	68 31 39 02 c0       	push   0xc0023931
c0011431:	e8 88 b6 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0011436:	e9 b8 00 00 00       	jmp    c00114f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c001143b:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001143f:	80 f9 02             	cmp    cl,0x2
c0011442:	0f 85 96 00 00 00    	jne    c00114de <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0011448:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001144d:	75 0e                	jne    c001145d <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001144f:	84 c0                	test   al,al
c0011451:	75 0a                	jne    c001145d <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011453:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011456:	83 e8 18             	sub    eax,0x18
c0011459:	a8 f7                	test   al,0xf7
c001145b:	74 0a                	je     c0011467 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c001145d:	83 ec 0c             	sub    esp,0xc
c0011460:	68 46 39 02 c0       	push   0xc0023946
c0011465:	eb 7f                	jmp    c00114e6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011467:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001146f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011477:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c001147b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011483:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011487:	75 0c                	jne    c0011495 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011489:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c001148e:	c1 e0 18             	shl    eax,0x18
c0011491:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011495:	45                   	inc    ebp
c0011496:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c001149b:	c1 e1 10             	shl    ecx,0x10
c001149e:	89 c8                	mov    eax,ecx
c00114a0:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00114a5:	c1 e1 08             	shl    ecx,0x8
c00114a8:	09 c1                	or     ecx,eax
c00114aa:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00114ae:	09 c1                	or     ecx,eax
c00114b0:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00114b4:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00114b8:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00114bc:	c1 f8 03             	sar    eax,0x3
c00114bf:	01 c2                	add    edx,eax
c00114c1:	89 e8                	mov    eax,ebp
c00114c3:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00114c7:	39 c6                	cmp    esi,eax
c00114c9:	7f b0                	jg     c001147b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00114cb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00114cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00114d3:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00114d6:	7e 22                	jle    c00114fa <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00114d8:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00114dc:	eb 99                	jmp    c0011477 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00114de:	50                   	push   eax
c00114df:	50                   	push   eax
c00114e0:	51                   	push   ecx
c00114e1:	68 54 39 02 c0       	push   0xc0023954
c00114e6:	e8 d3 b5 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c00114eb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114ee:	e8 7a 85 ff ff       	call   c0009a6d <free>
c00114f3:	83 c4 10             	add    esp,0x10
c00114f6:	31 ff                	xor    edi,edi
c00114f8:	eb 0f                	jmp    c0011509 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00114fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00114fe:	89 30                	mov    DWORD PTR [eax],esi
c0011500:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011504:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0011507:	89 30                	mov    DWORD PTR [eax],esi
c0011509:	83 c4 1c             	add    esp,0x1c
c001150c:	89 f8                	mov    eax,edi
c001150e:	5b                   	pop    ebx
c001150f:	5e                   	pop    esi
c0011510:	5f                   	pop    edi
c0011511:	5d                   	pop    ebp
c0011512:	c3                   	ret    
c0011513:	90                   	nop

c0011514 <Video::putTGA(int, int, unsigned char*, int)>:
c0011514:	55                   	push   ebp
c0011515:	57                   	push   edi
c0011516:	56                   	push   esi
c0011517:	53                   	push   ebx
c0011518:	83 ec 28             	sub    esp,0x28
c001151b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001151f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011523:	50                   	push   eax
c0011524:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011528:	50                   	push   eax
c0011529:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001152d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011531:	56                   	push   esi
c0011532:	e8 75 fe ff ff       	call   c00113ac <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011537:	83 c4 20             	add    esp,0x20
c001153a:	85 c0                	test   eax,eax
c001153c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011540:	74 35                	je     c0011577 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011542:	89 c7                	mov    edi,eax
c0011544:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011548:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001154c:	39 d8                	cmp    eax,ebx
c001154e:	7e 27                	jle    c0011577 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011550:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011554:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011558:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001155c:	39 e8                	cmp    eax,ebp
c001155e:	7e 14                	jle    c0011574 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0011560:	8b 06                	mov    eax,DWORD PTR [esi]
c0011562:	83 c7 04             	add    edi,0x4
c0011565:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011568:	53                   	push   ebx
c0011569:	55                   	push   ebp
c001156a:	45                   	inc    ebp
c001156b:	56                   	push   esi
c001156c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001156f:	83 c4 10             	add    esp,0x10
c0011572:	eb e0                	jmp    c0011554 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011574:	43                   	inc    ebx
c0011575:	eb cd                	jmp    c0011544 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011577:	83 c4 1c             	add    esp,0x1c
c001157a:	5b                   	pop    ebx
c001157b:	5e                   	pop    esi
c001157c:	5f                   	pop    edi
c001157d:	5d                   	pop    ebp
c001157e:	c3                   	ret    
c001157f:	90                   	nop

c0011580 <ACPI::close(int, int, void*)>:
c0011580:	83 ec 1c             	sub    esp,0x1c
c0011583:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001158b:	74 0a                	je     c0011597 <ACPI::close(int, int, void*)+0x17>
c001158d:	b8 00 00 00 00       	mov    eax,0x0
c0011592:	e9 8a 00 00 00       	jmp    c0011621 <ACPI::close(int, int, void*)+0xa1>
c0011597:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001159c:	75 27                	jne    c00115c5 <ACPI::close(int, int, void*)+0x45>
c001159e:	a1 e8 68 02 c0       	mov    eax,ds:0xc00268e8
c00115a3:	85 c0                	test   eax,eax
c00115a5:	74 07                	je     c00115ae <ACPI::close(int, int, void*)+0x2e>
c00115a7:	a1 e8 68 02 c0       	mov    eax,ds:0xc00268e8
c00115ac:	ff d0                	call   eax
c00115ae:	83 ec 0c             	sub    esp,0xc
c00115b1:	68 b0 39 02 c0       	push   0xc00239b0
c00115b6:	e8 c2 2e 00 00       	call   c001447d <Krnl::panic(char const*)>
c00115bb:	83 c4 10             	add    esp,0x10
c00115be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115c3:	eb 5c                	jmp    c0011621 <ACPI::close(int, int, void*)+0xa1>
c00115c5:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00115ca:	75 50                	jne    c001161c <ACPI::close(int, int, void*)+0x9c>
c00115cc:	a1 e4 68 02 c0       	mov    eax,ds:0xc00268e4
c00115d1:	85 c0                	test   eax,eax
c00115d3:	74 07                	je     c00115dc <ACPI::close(int, int, void*)+0x5c>
c00115d5:	a1 e4 68 02 c0       	mov    eax,ds:0xc00268e4
c00115da:	ff d0                	call   eax
c00115dc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00115e1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00115e6:	83 e0 02             	and    eax,0x2
c00115e9:	74 1c                	je     c0011607 <ACPI::close(int, int, void*)+0x87>
c00115eb:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00115f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115f6:	89 c2                	mov    edx,eax
c00115f8:	ec                   	in     al,dx
c00115f9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00115fd:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011601:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011605:	eb da                	jmp    c00115e1 <ACPI::close(int, int, void*)+0x61>
c0011607:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001160e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011613:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011617:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001161b:	ee                   	out    dx,al
c001161c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011621:	83 c4 1c             	add    esp,0x1c
c0011624:	c3                   	ret    

c0011625 <findRSDP()>:
c0011625:	83 ec 1c             	sub    esp,0x1c
c0011628:	83 ec 0c             	sub    esp,0xc
c001162b:	68 8b 3a 02 c0       	push   0xc0023a8b
c0011630:	e8 82 84 ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0011635:	83 c4 10             	add    esp,0x10
c0011638:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c001163d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011643:	83 e0 04             	and    eax,0x4
c0011646:	84 c0                	test   al,al
c0011648:	75 0a                	jne    c0011654 <findRSDP()+0x2f>
c001164a:	b8 00 00 00 00       	mov    eax,0x0
c001164f:	e9 9a 00 00 00       	jmp    c00116ee <findRSDP()+0xc9>
c0011654:	a1 b4 62 02 c0       	mov    eax,ds:0xc00262b4
c0011659:	3d ff 07 00 00       	cmp    eax,0x7ff
c001165e:	7f 1b                	jg     c001167b <findRSDP()+0x56>
c0011660:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0011665:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001166b:	83 e2 fb             	and    edx,0xfffffffb
c001166e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011674:	b8 00 00 00 00       	mov    eax,0x0
c0011679:	eb 73                	jmp    c00116ee <findRSDP()+0xc9>
c001167b:	83 ec 0c             	sub    esp,0xc
c001167e:	68 9b 3a 02 c0       	push   0xc0023a9b
c0011683:	e8 2f 84 ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0011688:	83 c4 10             	add    esp,0x10
c001168b:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011693:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001169b:	77 3c                	ja     c00116d9 <findRSDP()+0xb4>
c001169d:	83 ec 04             	sub    esp,0x4
c00116a0:	6a 08                	push   0x8
c00116a2:	68 b4 3a 02 c0       	push   0xc0023ab4
c00116a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00116ab:	e8 9c ef fe ff       	call   c000064c <memcmp>
c00116b0:	83 c4 10             	add    esp,0x10
c00116b3:	85 c0                	test   eax,eax
c00116b5:	0f 94 c0             	sete   al
c00116b8:	84 c0                	test   al,al
c00116ba:	74 16                	je     c00116d2 <findRSDP()+0xad>
c00116bc:	83 ec 0c             	sub    esp,0xc
c00116bf:	68 bd 3a 02 c0       	push   0xc0023abd
c00116c4:	e8 ee 83 ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c00116c9:	83 c4 10             	add    esp,0x10
c00116cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116d0:	eb 1c                	jmp    c00116ee <findRSDP()+0xc9>
c00116d2:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00116d7:	eb ba                	jmp    c0011693 <findRSDP()+0x6e>
c00116d9:	83 ec 0c             	sub    esp,0xc
c00116dc:	68 cb 3a 02 c0       	push   0xc0023acb
c00116e1:	e8 d1 83 ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c00116e6:	83 c4 10             	add    esp,0x10
c00116e9:	b8 00 00 00 00       	mov    eax,0x0
c00116ee:	83 c4 1c             	add    esp,0x1c
c00116f1:	c3                   	ret    

c00116f2 <loadACPITables(unsigned char*)>:
c00116f2:	57                   	push   edi
c00116f3:	56                   	push   esi
c00116f4:	53                   	push   ebx
c00116f5:	83 ec 60             	sub    esp,0x60
c00116f8:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c00116fd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011703:	83 e0 04             	and    eax,0x4
c0011706:	84 c0                	test   al,al
c0011708:	0f 84 33 02 00 00    	je     c0011941 <loadACPITables(unsigned char*)+0x24f>
c001170e:	a0 00 6b 02 c0       	mov    al,ds:0xc0026b00
c0011713:	84 c0                	test   al,al
c0011715:	74 75                	je     c001178c <loadACPITables(unsigned char*)+0x9a>
c0011717:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001171b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001171f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011723:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011726:	83 e8 24             	sub    eax,0x24
c0011729:	c1 e8 03             	shr    eax,0x3
c001172c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011730:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011738:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001173c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011740:	0f 8d b2 00 00 00    	jge    c00117f8 <loadACPITables(unsigned char*)+0x106>
c0011746:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001174a:	83 c0 24             	add    eax,0x24
c001174d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011751:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011755:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011759:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001175d:	c1 e0 03             	shl    eax,0x3
c0011760:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011764:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011768:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001176b:	8b 00                	mov    eax,DWORD PTR [eax]
c001176d:	89 c1                	mov    ecx,eax
c001176f:	a1 ec 68 02 c0       	mov    eax,ds:0xc00268ec
c0011774:	8d 50 01             	lea    edx,[eax+0x1]
c0011777:	89 15 ec 68 02 c0    	mov    DWORD PTR ds:0xc00268ec,edx
c001177d:	89 ca                	mov    edx,ecx
c001177f:	89 14 c5 04 69 02 c0 	mov    DWORD PTR [eax*8-0x3ffd96fc],edx
c0011786:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001178a:	eb ac                	jmp    c0011738 <loadACPITables(unsigned char*)+0x46>
c001178c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011790:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011794:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011798:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001179b:	83 e8 24             	sub    eax,0x24
c001179e:	c1 e8 02             	shr    eax,0x2
c00117a1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00117a5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00117ad:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00117b1:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00117b5:	7d 41                	jge    c00117f8 <loadACPITables(unsigned char*)+0x106>
c00117b7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00117bb:	83 c0 24             	add    eax,0x24
c00117be:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00117c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00117c6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00117ca:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00117ce:	c1 e0 02             	shl    eax,0x2
c00117d1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00117d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00117d9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00117db:	a1 ec 68 02 c0       	mov    eax,ds:0xc00268ec
c00117e0:	8d 50 01             	lea    edx,[eax+0x1]
c00117e3:	89 15 ec 68 02 c0    	mov    DWORD PTR ds:0xc00268ec,edx
c00117e9:	89 ca                	mov    edx,ecx
c00117eb:	89 14 c5 04 69 02 c0 	mov    DWORD PTR [eax*8-0x3ffd96fc],edx
c00117f2:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00117f6:	eb b5                	jmp    c00117ad <loadACPITables(unsigned char*)+0xbb>
c00117f8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011800:	a1 ec 68 02 c0       	mov    eax,ds:0xc00268ec
c0011805:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011809:	0f 8d 33 01 00 00    	jge    c0011942 <loadACPITables(unsigned char*)+0x250>
c001180f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011813:	8b 04 c5 04 69 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd96fc]
c001181a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001181e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011822:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011826:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001182a:	25 ff 0f 00 00       	and    eax,0xfff
c001182f:	89 c6                	mov    esi,eax
c0011831:	8b 1d d0 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263d0
c0011837:	83 ec 0c             	sub    esp,0xc
c001183a:	6a 01                	push   0x1
c001183c:	e8 a2 9e ff ff       	call   c000b6e3 <Virt::allocateKernelVirtualPages(int)>
c0011841:	83 c4 10             	add    esp,0x10
c0011844:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011848:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001184e:	83 ec 0c             	sub    esp,0xc
c0011851:	6a 01                	push   0x1
c0011853:	6a 01                	push   0x1
c0011855:	50                   	push   eax
c0011856:	52                   	push   edx
c0011857:	53                   	push   ebx
c0011858:	e8 23 a8 ff ff       	call   c000c080 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001185d:	83 c4 20             	add    esp,0x20
c0011860:	09 f0                	or     eax,esi
c0011862:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011866:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001186a:	c1 e0 03             	shl    eax,0x3
c001186d:	05 00 69 02 c0       	add    eax,0xc0026900
c0011872:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011876:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001187a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001187e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011886:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001188a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001188e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011892:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011896:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001189a:	89 c6                	mov    esi,eax
c001189c:	89 d7                	mov    edi,edx
c001189e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00118a0:	89 c8                	mov    eax,ecx
c00118a2:	89 fa                	mov    edx,edi
c00118a4:	89 f3                	mov    ebx,esi
c00118a6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00118aa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00118ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118b9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00118bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00118c1:	05 00 10 00 00       	add    eax,0x1000
c00118c6:	c1 e8 0c             	shr    eax,0xc
c00118c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00118cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00118d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118d9:	25 ff 0f 00 00       	and    eax,0xfff
c00118de:	89 c6                	mov    esi,eax
c00118e0:	8b 1d d0 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263d0
c00118e6:	83 ec 0c             	sub    esp,0xc
c00118e9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00118ed:	e8 f1 9d ff ff       	call   c000b6e3 <Virt::allocateKernelVirtualPages(int)>
c00118f2:	83 c4 10             	add    esp,0x10
c00118f5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00118f9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00118ff:	83 ec 0c             	sub    esp,0xc
c0011902:	6a 01                	push   0x1
c0011904:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011908:	50                   	push   eax
c0011909:	52                   	push   edx
c001190a:	53                   	push   ebx
c001190b:	e8 70 a7 ff ff       	call   c000c080 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011910:	83 c4 20             	add    esp,0x20
c0011913:	09 f0                	or     eax,esi
c0011915:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011919:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001191d:	83 ec 0c             	sub    esp,0xc
c0011920:	50                   	push   eax
c0011921:	e8 ed a0 ff ff       	call   c000ba13 <Virt::freeKernelVirtualPages(unsigned long)>
c0011926:	83 c4 10             	add    esp,0x10
c0011929:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001192d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011931:	89 14 c5 04 69 02 c0 	mov    DWORD PTR [eax*8-0x3ffd96fc],edx
c0011938:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c001193c:	e9 bf fe ff ff       	jmp    c0011800 <loadACPITables(unsigned char*)+0x10e>
c0011941:	90                   	nop
c0011942:	83 c4 60             	add    esp,0x60
c0011945:	5b                   	pop    ebx
c0011946:	5e                   	pop    esi
c0011947:	5f                   	pop    edi
c0011948:	c3                   	ret    

c0011949 <findRSDT(unsigned char*)>:
c0011949:	57                   	push   edi
c001194a:	56                   	push   esi
c001194b:	53                   	push   ebx
c001194c:	83 ec 50             	sub    esp,0x50
c001194f:	83 ec 0c             	sub    esp,0xc
c0011952:	68 df 3a 02 c0       	push   0xc0023adf
c0011957:	e8 5b 81 ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c001195c:	83 c4 10             	add    esp,0x10
c001195f:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0011964:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001196a:	83 e0 04             	and    eax,0x4
c001196d:	84 c0                	test   al,al
c001196f:	75 0a                	jne    c001197b <findRSDT(unsigned char*)+0x32>
c0011971:	b8 00 00 00 00       	mov    eax,0x0
c0011976:	e9 81 01 00 00       	jmp    c0011afc <findRSDT(unsigned char*)+0x1b3>
c001197b:	83 ec 0c             	sub    esp,0xc
c001197e:	68 f1 3a 02 c0       	push   0xc0023af1
c0011983:	e8 2f 81 ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0011988:	83 c4 10             	add    esp,0x10
c001198b:	89 e0                	mov    eax,esp
c001198d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011991:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011995:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011999:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00119a1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00119a5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00119a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00119ad:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00119b1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00119b5:	89 c6                	mov    esi,eax
c00119b7:	89 d7                	mov    edi,edx
c00119b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119bb:	89 c8                	mov    eax,ecx
c00119bd:	89 fa                	mov    edx,edi
c00119bf:	89 f3                	mov    ebx,esi
c00119c1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00119c5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00119c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00119cd:	83 ec 0c             	sub    esp,0xc
c00119d0:	68 03 3b 02 c0       	push   0xc0023b03
c00119d5:	e8 dd 80 ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c00119da:	83 c4 10             	add    esp,0x10
c00119dd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00119e1:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00119e5:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00119ed:	83 ec 0c             	sub    esp,0xc
c00119f0:	68 15 3b 02 c0       	push   0xc0023b15
c00119f5:	e8 bd 80 ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c00119fa:	83 c4 10             	add    esp,0x10
c00119fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011a01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a05:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a0d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011a11:	83 ec 04             	sub    esp,0x4
c0011a14:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011a18:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011a1c:	68 d4 39 02 c0       	push   0xc00239d4
c0011a21:	e8 98 b0 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0011a26:	83 c4 10             	add    esp,0x10
c0011a29:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011a2d:	25 ff 0f 00 00       	and    eax,0xfff
c0011a32:	89 c6                	mov    esi,eax
c0011a34:	8b 1d d0 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263d0
c0011a3a:	83 ec 0c             	sub    esp,0xc
c0011a3d:	6a 02                	push   0x2
c0011a3f:	e8 9f 9c ff ff       	call   c000b6e3 <Virt::allocateKernelVirtualPages(int)>
c0011a44:	83 c4 10             	add    esp,0x10
c0011a47:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011a4b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011a51:	83 ec 0c             	sub    esp,0xc
c0011a54:	6a 01                	push   0x1
c0011a56:	6a 02                	push   0x2
c0011a58:	50                   	push   eax
c0011a59:	52                   	push   edx
c0011a5a:	53                   	push   ebx
c0011a5b:	e8 20 a6 ff ff       	call   c000c080 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a60:	83 c4 20             	add    esp,0x20
c0011a63:	09 f0                	or     eax,esi
c0011a65:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011a69:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011a6d:	25 ff 0f 00 00       	and    eax,0xfff
c0011a72:	89 c6                	mov    esi,eax
c0011a74:	8b 1d d0 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263d0
c0011a7a:	83 ec 0c             	sub    esp,0xc
c0011a7d:	6a 02                	push   0x2
c0011a7f:	e8 5f 9c ff ff       	call   c000b6e3 <Virt::allocateKernelVirtualPages(int)>
c0011a84:	83 c4 10             	add    esp,0x10
c0011a87:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011a8b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011a91:	83 ec 0c             	sub    esp,0xc
c0011a94:	6a 01                	push   0x1
c0011a96:	6a 02                	push   0x2
c0011a98:	50                   	push   eax
c0011a99:	52                   	push   edx
c0011a9a:	53                   	push   ebx
c0011a9b:	e8 e0 a5 ff ff       	call   c000c080 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011aa0:	83 c4 20             	add    esp,0x20
c0011aa3:	09 f0                	or     eax,esi
c0011aa5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011aa9:	83 ec 04             	sub    esp,0x4
c0011aac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011ab0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011ab4:	68 f4 39 02 c0       	push   0xc00239f4
c0011ab9:	e8 00 b0 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0011abe:	83 c4 10             	add    esp,0x10
c0011ac1:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011ac6:	75 11                	jne    c0011ad9 <findRSDT(unsigned char*)+0x190>
c0011ac8:	c6 05 00 6b 02 c0 00 	mov    BYTE PTR ds:0xc0026b00,0x0
c0011acf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ad3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011ad7:	eb 1f                	jmp    c0011af8 <findRSDT(unsigned char*)+0x1af>
c0011ad9:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011ade:	75 11                	jne    c0011af1 <findRSDT(unsigned char*)+0x1a8>
c0011ae0:	c6 05 00 6b 02 c0 01 	mov    BYTE PTR ds:0xc0026b00,0x1
c0011ae7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011aeb:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011aef:	eb 07                	jmp    c0011af8 <findRSDT(unsigned char*)+0x1af>
c0011af1:	b8 00 00 00 00       	mov    eax,0x0
c0011af6:	eb 04                	jmp    c0011afc <findRSDT(unsigned char*)+0x1b3>
c0011af8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011afc:	83 c4 50             	add    esp,0x50
c0011aff:	5b                   	pop    ebx
c0011b00:	5e                   	pop    esi
c0011b01:	5f                   	pop    edi
c0011b02:	c3                   	ret    

c0011b03 <findDataTable(unsigned char*, char*)>:
c0011b03:	83 ec 1c             	sub    esp,0x1c
c0011b06:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0011b0b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011b11:	83 e0 04             	and    eax,0x4
c0011b14:	84 c0                	test   al,al
c0011b16:	75 07                	jne    c0011b1f <findDataTable(unsigned char*, char*)+0x1c>
c0011b18:	b8 00 00 00 00       	mov    eax,0x0
c0011b1d:	eb 52                	jmp    c0011b71 <findDataTable(unsigned char*, char*)+0x6e>
c0011b1f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b27:	a1 ec 68 02 c0       	mov    eax,ds:0xc00268ec
c0011b2c:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011b30:	7d 3a                	jge    c0011b6c <findDataTable(unsigned char*, char*)+0x69>
c0011b32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b36:	c1 e0 03             	shl    eax,0x3
c0011b39:	05 00 69 02 c0       	add    eax,0xc0026900
c0011b3e:	83 ec 04             	sub    esp,0x4
c0011b41:	6a 04                	push   0x4
c0011b43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011b47:	50                   	push   eax
c0011b48:	e8 ff ea fe ff       	call   c000064c <memcmp>
c0011b4d:	83 c4 10             	add    esp,0x10
c0011b50:	85 c0                	test   eax,eax
c0011b52:	0f 94 c0             	sete   al
c0011b55:	84 c0                	test   al,al
c0011b57:	74 0d                	je     c0011b66 <findDataTable(unsigned char*, char*)+0x63>
c0011b59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b5d:	8b 04 c5 04 69 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd96fc]
c0011b64:	eb 0b                	jmp    c0011b71 <findDataTable(unsigned char*, char*)+0x6e>
c0011b66:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011b6a:	eb bb                	jmp    c0011b27 <findDataTable(unsigned char*, char*)+0x24>
c0011b6c:	b8 00 00 00 00       	mov    eax,0x0
c0011b71:	83 c4 1c             	add    esp,0x1c
c0011b74:	c3                   	ret    

c0011b75 <scanMADT()>:
c0011b75:	53                   	push   ebx
c0011b76:	83 ec 38             	sub    esp,0x38
c0011b79:	83 ec 0c             	sub    esp,0xc
c0011b7c:	68 27 3b 02 c0       	push   0xc0023b27
c0011b81:	e8 31 7f ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0011b86:	83 c4 10             	add    esp,0x10
c0011b89:	a1 80 62 02 c0       	mov    eax,ds:0xc0026280
c0011b8e:	25 00 04 00 00       	and    eax,0x400
c0011b93:	74 14                	je     c0011ba9 <scanMADT()+0x34>
c0011b95:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0011b9a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011ba0:	83 e2 fb             	and    edx,0xfffffffb
c0011ba3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011ba9:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0011bae:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011bb4:	83 e0 04             	and    eax,0x4
c0011bb7:	84 c0                	test   al,al
c0011bb9:	0f 84 7a 04 00 00    	je     c0012039 <scanMADT()+0x4c4>
c0011bbf:	83 ec 0c             	sub    esp,0xc
c0011bc2:	68 34 3b 02 c0       	push   0xc0023b34
c0011bc7:	e8 eb 7e ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0011bcc:	83 c4 10             	add    esp,0x10
c0011bcf:	e8 51 fa ff ff       	call   c0011625 <findRSDP()>
c0011bd4:	a3 0c 6b 02 c0       	mov    ds:0xc0026b0c,eax
c0011bd9:	a1 0c 6b 02 c0       	mov    eax,ds:0xc0026b0c
c0011bde:	85 c0                	test   eax,eax
c0011be0:	75 19                	jne    c0011bfb <scanMADT()+0x86>
c0011be2:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0011be7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011bed:	83 e2 fb             	and    edx,0xfffffffb
c0011bf0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011bf6:	e9 42 04 00 00       	jmp    c001203d <scanMADT()+0x4c8>
c0011bfb:	83 ec 0c             	sub    esp,0xc
c0011bfe:	68 46 3b 02 c0       	push   0xc0023b46
c0011c03:	e8 af 7e ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0011c08:	83 c4 10             	add    esp,0x10
c0011c0b:	a1 0c 6b 02 c0       	mov    eax,ds:0xc0026b0c
c0011c10:	83 ec 0c             	sub    esp,0xc
c0011c13:	50                   	push   eax
c0011c14:	e8 30 fd ff ff       	call   c0011949 <findRSDT(unsigned char*)>
c0011c19:	83 c4 10             	add    esp,0x10
c0011c1c:	a3 08 6b 02 c0       	mov    ds:0xc0026b08,eax
c0011c21:	a1 08 6b 02 c0       	mov    eax,ds:0xc0026b08
c0011c26:	85 c0                	test   eax,eax
c0011c28:	75 19                	jne    c0011c43 <scanMADT()+0xce>
c0011c2a:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0011c2f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011c35:	83 e2 fb             	and    edx,0xfffffffb
c0011c38:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011c3e:	e9 fa 03 00 00       	jmp    c001203d <scanMADT()+0x4c8>
c0011c43:	83 ec 0c             	sub    esp,0xc
c0011c46:	68 56 3b 02 c0       	push   0xc0023b56
c0011c4b:	e8 67 7e ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0011c50:	83 c4 10             	add    esp,0x10
c0011c53:	a1 08 6b 02 c0       	mov    eax,ds:0xc0026b08
c0011c58:	83 ec 0c             	sub    esp,0xc
c0011c5b:	50                   	push   eax
c0011c5c:	e8 91 fa ff ff       	call   c00116f2 <loadACPITables(unsigned char*)>
c0011c61:	83 c4 10             	add    esp,0x10
c0011c64:	a1 08 6b 02 c0       	mov    eax,ds:0xc0026b08
c0011c69:	83 ec 08             	sub    esp,0x8
c0011c6c:	68 6e 3b 02 c0       	push   0xc0023b6e
c0011c71:	50                   	push   eax
c0011c72:	e8 8c fe ff ff       	call   c0011b03 <findDataTable(unsigned char*, char*)>
c0011c77:	83 c4 10             	add    esp,0x10
c0011c7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011c7e:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011c83:	75 19                	jne    c0011c9e <scanMADT()+0x129>
c0011c85:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0011c8a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011c90:	83 e2 fe             	and    edx,0xfffffffe
c0011c93:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011c99:	e9 9f 03 00 00       	jmp    c001203d <scanMADT()+0x4c8>
c0011c9e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011ca6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011caa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011cad:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011cb1:	0f 87 86 03 00 00    	ja     c001203d <scanMADT()+0x4c8>
c0011cb7:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011cbf:	0f 87 78 03 00 00    	ja     c001203d <scanMADT()+0x4c8>
c0011cc5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cc9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011ccd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cd1:	8d 50 01             	lea    edx,[eax+0x1]
c0011cd4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011cd8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cdc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011ce0:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011ce4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ce8:	8d 50 01             	lea    edx,[eax+0x1]
c0011ceb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011cef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cf3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011cf7:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011cfb:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011d00:	0f 86 36 03 00 00    	jbe    c001203c <scanMADT()+0x4c7>
c0011d06:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011d0b:	75 57                	jne    c0011d64 <scanMADT()+0x1ef>
c0011d0d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d11:	8d 50 01             	lea    edx,[eax+0x1]
c0011d14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d18:	8a 15 00 6d 02 c0    	mov    dl,BYTE PTR ds:0xc0026d00
c0011d1e:	0f b6 d2             	movzx  edx,dl
c0011d21:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011d25:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011d29:	88 82 40 6d 02 c0    	mov    BYTE PTR [edx-0x3ffd92c0],al
c0011d2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d33:	8d 50 01             	lea    edx,[eax+0x1]
c0011d36:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d3a:	8a 15 00 6d 02 c0    	mov    dl,BYTE PTR ds:0xc0026d00
c0011d40:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011d43:	88 0d 00 6d 02 c0    	mov    BYTE PTR ds:0xc0026d00,cl
c0011d49:	0f b6 d2             	movzx  edx,dl
c0011d4c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011d50:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011d54:	88 82 20 6d 02 c0    	mov    BYTE PTR [edx-0x3ffd92e0],al
c0011d5a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011d5f:	e9 c1 02 00 00       	jmp    c0012025 <scanMADT()+0x4b0>
c0011d64:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011d69:	0f 85 14 01 00 00    	jne    c0011e83 <scanMADT()+0x30e>
c0011d6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d73:	8d 50 01             	lea    edx,[eax+0x1]
c0011d76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d7a:	8a 15 c0 6b 02 c0    	mov    dl,BYTE PTR ds:0xc0026bc0
c0011d80:	0f b6 d2             	movzx  edx,dl
c0011d83:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011d87:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011d8b:	88 82 e0 6b 02 c0    	mov    BYTE PTR [edx-0x3ffd9420],al
c0011d91:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011d95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d99:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d9d:	01 d0                	add    eax,edx
c0011d9f:	83 c0 2c             	add    eax,0x2c
c0011da2:	8a 00                	mov    al,BYTE PTR [eax]
c0011da4:	0f b6 d0             	movzx  edx,al
c0011da7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dab:	8d 48 01             	lea    ecx,[eax+0x1]
c0011dae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011db2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011db6:	0f b6 c0             	movzx  eax,al
c0011db9:	c1 e0 08             	shl    eax,0x8
c0011dbc:	89 d1                	mov    ecx,edx
c0011dbe:	09 c1                	or     ecx,eax
c0011dc0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dc4:	8d 50 02             	lea    edx,[eax+0x2]
c0011dc7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011dcb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011dcf:	0f b6 c0             	movzx  eax,al
c0011dd2:	c1 e0 10             	shl    eax,0x10
c0011dd5:	09 c1                	or     ecx,eax
c0011dd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ddb:	8d 50 03             	lea    edx,[eax+0x3]
c0011dde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011de2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011de6:	0f b6 c0             	movzx  eax,al
c0011de9:	c1 e0 18             	shl    eax,0x18
c0011dec:	09 c1                	or     ecx,eax
c0011dee:	89 ca                	mov    edx,ecx
c0011df0:	a0 c0 6b 02 c0       	mov    al,ds:0xc0026bc0
c0011df5:	0f b6 c0             	movzx  eax,al
c0011df8:	89 14 85 00 6c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9400],edx
c0011dff:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011e04:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e0c:	01 d0                	add    eax,edx
c0011e0e:	83 c0 2c             	add    eax,0x2c
c0011e11:	8a 00                	mov    al,BYTE PTR [eax]
c0011e13:	0f b6 d0             	movzx  edx,al
c0011e16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e1a:	8d 48 01             	lea    ecx,[eax+0x1]
c0011e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e21:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011e25:	0f b6 c0             	movzx  eax,al
c0011e28:	c1 e0 08             	shl    eax,0x8
c0011e2b:	89 d1                	mov    ecx,edx
c0011e2d:	09 c1                	or     ecx,eax
c0011e2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e33:	8d 50 02             	lea    edx,[eax+0x2]
c0011e36:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e3a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011e3e:	0f b6 c0             	movzx  eax,al
c0011e41:	c1 e0 10             	shl    eax,0x10
c0011e44:	09 c1                	or     ecx,eax
c0011e46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e4a:	8d 50 03             	lea    edx,[eax+0x3]
c0011e4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e51:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011e55:	0f b6 c0             	movzx  eax,al
c0011e58:	c1 e0 18             	shl    eax,0x18
c0011e5b:	09 c1                	or     ecx,eax
c0011e5d:	89 ca                	mov    edx,ecx
c0011e5f:	a0 c0 6b 02 c0       	mov    al,ds:0xc0026bc0
c0011e64:	0f b6 c0             	movzx  eax,al
c0011e67:	89 14 85 80 6c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9380],edx
c0011e6e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011e73:	a0 c0 6b 02 c0       	mov    al,ds:0xc0026bc0
c0011e78:	40                   	inc    eax
c0011e79:	a2 c0 6b 02 c0       	mov    ds:0xc0026bc0,al
c0011e7e:	e9 a2 01 00 00       	jmp    c0012025 <scanMADT()+0x4b0>
c0011e83:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011e88:	0f 85 e9 00 00 00    	jne    c0011f77 <scanMADT()+0x402>
c0011e8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e92:	8d 50 01             	lea    edx,[eax+0x1]
c0011e95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e99:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e9d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011ea1:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011ea5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ea9:	8d 50 01             	lea    edx,[eax+0x1]
c0011eac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011eb0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011eb4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011eb8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011ebc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ec0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ec4:	01 d0                	add    eax,edx
c0011ec6:	83 c0 2c             	add    eax,0x2c
c0011ec9:	8a 00                	mov    al,BYTE PTR [eax]
c0011ecb:	0f b6 d0             	movzx  edx,al
c0011ece:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ed2:	8d 48 01             	lea    ecx,[eax+0x1]
c0011ed5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ed9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011edd:	0f b6 c0             	movzx  eax,al
c0011ee0:	c1 e0 08             	shl    eax,0x8
c0011ee3:	89 d1                	mov    ecx,edx
c0011ee5:	09 c1                	or     ecx,eax
c0011ee7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011eeb:	8d 50 02             	lea    edx,[eax+0x2]
c0011eee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ef2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011ef6:	0f b6 c0             	movzx  eax,al
c0011ef9:	c1 e0 10             	shl    eax,0x10
c0011efc:	09 c1                	or     ecx,eax
c0011efe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f02:	8d 50 03             	lea    edx,[eax+0x3]
c0011f05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f09:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f0d:	0f b6 c0             	movzx  eax,al
c0011f10:	c1 e0 18             	shl    eax,0x18
c0011f13:	09 c8                	or     eax,ecx
c0011f15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f19:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011f1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f26:	01 d0                	add    eax,edx
c0011f28:	83 c0 2c             	add    eax,0x2c
c0011f2b:	8a 00                	mov    al,BYTE PTR [eax]
c0011f2d:	0f b6 c0             	movzx  eax,al
c0011f30:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011f34:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011f37:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f3b:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011f3f:	0f b6 d2             	movzx  edx,dl
c0011f42:	c1 e2 08             	shl    edx,0x8
c0011f45:	09 d0                	or     eax,edx
c0011f47:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0011f4c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011f51:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011f56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f5a:	88 90 60 59 02 c0    	mov    BYTE PTR [eax-0x3ffda6a0],dl
c0011f60:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0011f65:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011f6a:	66 89 84 12 a0 6b 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd9460],ax
c0011f72:	e9 ae 00 00 00       	jmp    c0012025 <scanMADT()+0x4b0>
c0011f77:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0011f7c:	0f 85 97 00 00 00    	jne    c0012019 <scanMADT()+0x4a4>
c0011f82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f86:	8d 50 01             	lea    edx,[eax+0x1]
c0011f89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011f8d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f91:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011f95:	0f b6 c0             	movzx  eax,al
c0011f98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011f9c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011fa0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fa4:	01 d0                	add    eax,edx
c0011fa6:	83 c0 2c             	add    eax,0x2c
c0011fa9:	8a 00                	mov    al,BYTE PTR [eax]
c0011fab:	0f b6 d0             	movzx  edx,al
c0011fae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fb2:	8d 48 01             	lea    ecx,[eax+0x1]
c0011fb5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fb9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011fbd:	0f b6 c0             	movzx  eax,al
c0011fc0:	c1 e0 08             	shl    eax,0x8
c0011fc3:	09 d0                	or     eax,edx
c0011fc5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011fc9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011fce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fd2:	8d 50 01             	lea    edx,[eax+0x1]
c0011fd5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011fd9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011fdd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011fe1:	0f b6 c0             	movzx  eax,al
c0011fe4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fec:	c1 e0 08             	shl    eax,0x8
c0011fef:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011ff3:	89 c1                	mov    ecx,eax
c0011ff5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ff9:	c1 e0 18             	shl    eax,0x18
c0011ffc:	89 c3                	mov    ebx,eax
c0011ffe:	a1 10 6b 02 c0       	mov    eax,ds:0xc0026b10
c0012003:	8d 50 01             	lea    edx,[eax+0x1]
c0012006:	89 15 10 6b 02 c0    	mov    DWORD PTR ds:0xc0026b10,edx
c001200c:	09 d9                	or     ecx,ebx
c001200e:	89 ca                	mov    edx,ecx
c0012010:	89 14 85 20 6b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd94e0],edx
c0012017:	eb 0c                	jmp    c0012025 <scanMADT()+0x4b0>
c0012019:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001201e:	75 05                	jne    c0012025 <scanMADT()+0x4b0>
c0012020:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0012025:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001202a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001202e:	01 d0                	add    eax,edx
c0012030:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012034:	e9 6d fc ff ff       	jmp    c0011ca6 <scanMADT()+0x131>
c0012039:	90                   	nop
c001203a:	eb 01                	jmp    c001203d <scanMADT()+0x4c8>
c001203c:	90                   	nop
c001203d:	83 c4 38             	add    esp,0x38
c0012040:	5b                   	pop    ebx
c0012041:	c3                   	ret    

c0012042 <ACPI::ACPI()>:
c0012042:	83 ec 0c             	sub    esp,0xc
c0012045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012049:	83 ec 08             	sub    esp,0x8
c001204c:	68 73 3b 02 c0       	push   0xc0023b73
c0012051:	50                   	push   eax
c0012052:	e8 af c0 ff ff       	call   c000e106 <Device::Device(char const*)>
c0012057:	83 c4 10             	add    esp,0x10
c001205a:	ba dc 3c 02 c0       	mov    edx,0xc0023cdc
c001205f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012063:	89 10                	mov    DWORD PTR [eax],edx
c0012065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012069:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0012070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012074:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001207e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012082:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001208c:	83 ec 0c             	sub    esp,0xc
c001208f:	68 78 3b 02 c0       	push   0xc0023b78
c0012094:	e8 1e 7a ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0012099:	83 c4 10             	add    esp,0x10
c001209c:	e8 d4 fa ff ff       	call   c0011b75 <scanMADT()>
c00120a1:	90                   	nop
c00120a2:	83 c4 0c             	add    esp,0xc
c00120a5:	c3                   	ret    

c00120a6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00120a6:	83 ec 2c             	sub    esp,0x2c
c00120a9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00120ad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120b1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00120b5:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00120b9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00120be:	88 d0                	mov    al,dl
c00120c0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00120c4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00120c9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00120d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120d5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00120db:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00120df:	0f 8d 97 00 00 00    	jge    c001217c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00120e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120ed:	83 c2 2a             	add    edx,0x2a
c00120f0:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00120f4:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00120f9:	75 78                	jne    c0012173 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00120fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012103:	83 c2 2a             	add    edx,0x2a
c0012106:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001210a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001210e:	75 63                	jne    c0012173 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0012110:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012115:	74 3a                	je     c0012151 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0012117:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001211b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001211f:	83 c2 2a             	add    edx,0x2a
c0012122:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0012126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001212a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001212d:	39 c2                	cmp    edx,eax
c001212f:	74 10                	je     c0012141 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0012131:	83 ec 0c             	sub    esp,0xc
c0012134:	68 14 3a 02 c0       	push   0xc0023a14
c0012139:	e8 3f 23 00 00       	call   c001447d <Krnl::panic(char const*)>
c001213e:	83 c4 10             	add    esp,0x10
c0012141:	83 ec 0c             	sub    esp,0xc
c0012144:	68 86 3b 02 c0       	push   0xc0023b86
c0012149:	e8 2f 23 00 00       	call   c001447d <Krnl::panic(char const*)>
c001214e:	83 c4 10             	add    esp,0x10
c0012151:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012155:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012159:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001215d:	83 c2 2a             	add    edx,0x2a
c0012160:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0012164:	8b 02                	mov    eax,DWORD PTR [edx]
c0012166:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012169:	89 01                	mov    DWORD PTR [ecx],eax
c001216b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001216e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012173:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012177:	e9 55 ff ff ff       	jmp    c00120d1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001217c:	90                   	nop
c001217d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012181:	83 c4 2c             	add    esp,0x2c
c0012184:	c2 04 00             	ret    0x4
c0012187:	90                   	nop

c0012188 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0012188:	83 ec 1c             	sub    esp,0x1c
c001218b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001218f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0012193:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012197:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001219c:	88 c8                	mov    al,cl
c001219e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00121a2:	88 d0                	mov    al,dl
c00121a4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00121a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121ac:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00121b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121b6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00121b9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00121bd:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00121c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121c5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00121cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00121cf:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00121d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121d6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00121db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121df:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00121e5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00121e9:	8d 48 01             	lea    ecx,[eax+0x1]
c00121ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121f0:	83 c2 2a             	add    edx,0x2a
c00121f3:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00121f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121fb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012201:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012205:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012208:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001220c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0012210:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012214:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001221a:	8d 50 01             	lea    edx,[eax+0x1]
c001221d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012221:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0012227:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001222b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012231:	3d 00 02 00 00       	cmp    eax,0x200
c0012236:	75 10                	jne    c0012248 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0012238:	83 ec 0c             	sub    esp,0xc
c001223b:	68 95 3b 02 c0       	push   0xc0023b95
c0012240:	e8 38 22 00 00       	call   c001447d <Krnl::panic(char const*)>
c0012245:	83 c4 10             	add    esp,0x10
c0012248:	90                   	nop
c0012249:	83 c4 1c             	add    esp,0x1c
c001224c:	c3                   	ret    
c001224d:	90                   	nop

c001224e <ACPI::setScreenBrightnessLevel(void*, int)>:
c001224e:	b8 00 00 00 00       	mov    eax,0x0
c0012253:	c3                   	ret    

c0012254 <ACPI::detectPCI()>:
c0012254:	53                   	push   ebx
c0012255:	83 ec 28             	sub    esp,0x28
c0012258:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001225d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0012262:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0012267:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001226d:	83 e0 04             	and    eax,0x4
c0012270:	84 c0                	test   al,al
c0012272:	74 2b                	je     c001229f <ACPI::detectPCI()+0x4b>
c0012274:	a1 08 6b 02 c0       	mov    eax,ds:0xc0026b08
c0012279:	83 ec 08             	sub    esp,0x8
c001227c:	68 b2 3b 02 c0       	push   0xc0023bb2
c0012281:	50                   	push   eax
c0012282:	e8 7c f8 ff ff       	call   c0011b03 <findDataTable(unsigned char*, char*)>
c0012287:	83 c4 10             	add    esp,0x10
c001228a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001228e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012293:	74 0a                	je     c001229f <ACPI::detectPCI()+0x4b>
c0012295:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001229a:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001229f:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c00122a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122ab:	8a 00                	mov    al,BYTE PTR [eax]
c00122ad:	3c 01                	cmp    al,0x1
c00122af:	75 0c                	jne    c00122bd <ACPI::detectPCI()+0x69>
c00122b1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00122b6:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00122bb:	eb 26                	jmp    c00122e3 <ACPI::detectPCI()+0x8f>
c00122bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122c1:	8a 00                	mov    al,BYTE PTR [eax]
c00122c3:	3c 02                	cmp    al,0x2
c00122c5:	75 1c                	jne    c00122e3 <ACPI::detectPCI()+0x8f>
c00122c7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00122cc:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00122d1:	74 10                	je     c00122e3 <ACPI::detectPCI()+0x8f>
c00122d3:	83 ec 0c             	sub    esp,0xc
c00122d6:	68 44 3a 02 c0       	push   0xc0023a44
c00122db:	e8 9d 21 00 00       	call   c001447d <Krnl::panic(char const*)>
c00122e0:	83 c4 10             	add    esp,0x10
c00122e3:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00122e7:	83 f0 01             	xor    eax,0x1
c00122ea:	84 c0                	test   al,al
c00122ec:	74 3f                	je     c001232d <ACPI::detectPCI()+0xd9>
c00122ee:	e8 5d de fe ff       	call   c0000150 <manualPCIProbe>
c00122f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00122f7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00122fc:	75 0c                	jne    c001230a <ACPI::detectPCI()+0xb6>
c00122fe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012303:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0012308:	eb 23                	jmp    c001232d <ACPI::detectPCI()+0xd9>
c001230a:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001230f:	75 1c                	jne    c001232d <ACPI::detectPCI()+0xd9>
c0012311:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012316:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c001231b:	74 10                	je     c001232d <ACPI::detectPCI()+0xd9>
c001231d:	83 ec 0c             	sub    esp,0xc
c0012320:	68 44 3a 02 c0       	push   0xc0023a44
c0012325:	e8 53 21 00 00       	call   c001447d <Krnl::panic(char const*)>
c001232a:	83 c4 10             	add    esp,0x10
c001232d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012332:	74 7e                	je     c00123b2 <ACPI::detectPCI()+0x15e>
c0012334:	83 ec 0c             	sub    esp,0xc
c0012337:	68 b7 3b 02 c0       	push   0xc0023bb7
c001233c:	e8 76 77 ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0012341:	83 c4 10             	add    esp,0x10
c0012344:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001234c:	83 ec 0c             	sub    esp,0xc
c001234f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012353:	e8 05 77 ff ff       	call   c0009a5d <malloc>
c0012358:	83 c4 10             	add    esp,0x10
c001235b:	89 c3                	mov    ebx,eax
c001235d:	83 ec 0c             	sub    esp,0xc
c0012360:	53                   	push   ebx
c0012361:	e8 6c a6 00 00       	call   c001c9d2 <PCI::PCI()>
c0012366:	83 c4 10             	add    esp,0x10
c0012369:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001236d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012371:	83 ec 08             	sub    esp,0x8
c0012374:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012378:	50                   	push   eax
c0012379:	e8 84 bb ff ff       	call   c000df02 <Device::addChild(Device*)>
c001237e:	83 c4 10             	add    esp,0x10
c0012381:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012385:	8b 00                	mov    eax,DWORD PTR [eax]
c0012387:	83 c0 08             	add    eax,0x8
c001238a:	8b 00                	mov    eax,DWORD PTR [eax]
c001238c:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0012391:	74 07                	je     c001239a <ACPI::detectPCI()+0x146>
c0012393:	ba 01 00 00 00       	mov    edx,0x1
c0012398:	eb 05                	jmp    c001239f <ACPI::detectPCI()+0x14b>
c001239a:	ba 02 00 00 00       	mov    edx,0x2
c001239f:	6a 00                	push   0x0
c00123a1:	6a 00                	push   0x0
c00123a3:	52                   	push   edx
c00123a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123a8:	ff d0                	call   eax
c00123aa:	83 c4 10             	add    esp,0x10
c00123ad:	e9 9e 00 00 00       	jmp    c0012450 <ACPI::detectPCI()+0x1fc>
c00123b2:	83 ec 0c             	sub    esp,0xc
c00123b5:	68 cf 3b 02 c0       	push   0xc0023bcf
c00123ba:	e8 ff a6 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c00123bf:	83 c4 10             	add    esp,0x10
c00123c2:	83 ec 0c             	sub    esp,0xc
c00123c5:	68 da 3b 02 c0       	push   0xc0023bda
c00123ca:	e8 e8 76 ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c00123cf:	83 c4 10             	add    esp,0x10
c00123d2:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c00123d9:	83 ec 0c             	sub    esp,0xc
c00123dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00123e0:	e8 78 76 ff ff       	call   c0009a5d <malloc>
c00123e5:	83 c4 10             	add    esp,0x10
c00123e8:	89 c3                	mov    ebx,eax
c00123ea:	83 ec 0c             	sub    esp,0xc
c00123ed:	53                   	push   ebx
c00123ee:	e8 49 b1 00 00       	call   c001d53c <IDE::IDE()>
c00123f3:	83 c4 10             	add    esp,0x10
c00123f6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00123fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123fe:	83 ec 08             	sub    esp,0x8
c0012401:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012405:	50                   	push   eax
c0012406:	e8 f7 ba ff ff       	call   c000df02 <Device::addChild(Device*)>
c001240b:	83 c4 10             	add    esp,0x10
c001240e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012412:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001241c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012420:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012429:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001242d:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012436:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001243a:	8b 00                	mov    eax,DWORD PTR [eax]
c001243c:	83 c0 08             	add    eax,0x8
c001243f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012441:	6a 00                	push   0x0
c0012443:	6a 00                	push   0x0
c0012445:	6a 00                	push   0x0
c0012447:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001244b:	ff d0                	call   eax
c001244d:	83 c4 10             	add    esp,0x10
c0012450:	90                   	nop
c0012451:	83 c4 28             	add    esp,0x28
c0012454:	5b                   	pop    ebx
c0012455:	c3                   	ret    

c0012456 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012456:	83 ec 1c             	sub    esp,0x1c
c0012459:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001245d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012460:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012464:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0012469:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001246e:	83 ec 08             	sub    esp,0x8
c0012471:	52                   	push   edx
c0012472:	50                   	push   eax
c0012473:	e8 bc 6b ff ff       	call   c0009034 <Computer::readCMOS(unsigned char)>
c0012478:	83 c4 10             	add    esp,0x10
c001247b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001247f:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0012484:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012489:	83 ec 04             	sub    esp,0x4
c001248c:	6a 01                	push   0x1
c001248e:	52                   	push   edx
c001248f:	50                   	push   eax
c0012490:	e8 7b 6d ff ff       	call   c0009210 <Computer::writeCMOS(unsigned char, unsigned char)>
c0012495:	83 c4 10             	add    esp,0x10
c0012498:	90                   	nop
c0012499:	83 c4 1c             	add    esp,0x1c
c001249c:	c3                   	ret    
c001249d:	90                   	nop

c001249e <ACPI::sleep()>:
c001249e:	83 ec 0c             	sub    esp,0xc
c00124a1:	a1 e0 68 02 c0       	mov    eax,ds:0xc00268e0
c00124a6:	85 c0                	test   eax,eax
c00124a8:	74 07                	je     c00124b1 <ACPI::sleep()+0x13>
c00124aa:	a1 e0 68 02 c0       	mov    eax,ds:0xc00268e0
c00124af:	ff d0                	call   eax
c00124b1:	90                   	nop
c00124b2:	83 c4 0c             	add    esp,0xc
c00124b5:	c3                   	ret    

c00124b6 <ACPI::open(int, int, void*)>:
c00124b6:	57                   	push   edi
c00124b7:	56                   	push   esi
c00124b8:	53                   	push   ebx
c00124b9:	81 ec 60 01 00 00    	sub    esp,0x160
c00124bf:	83 ec 0c             	sub    esp,0xc
c00124c2:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00124c9:	e8 86 fd ff ff       	call   c0012254 <ACPI::detectPCI()>
c00124ce:	83 c4 10             	add    esp,0x10
c00124d1:	83 ec 0c             	sub    esp,0xc
c00124d4:	68 6c 3a 02 c0       	push   0xc0023a6c
c00124d9:	e8 d9 75 ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c00124de:	83 c4 10             	add    esp,0x10
c00124e1:	83 ec 0c             	sub    esp,0xc
c00124e4:	68 ef 3b 02 c0       	push   0xc0023bef
c00124e9:	e8 e5 46 00 00       	call   c0016bd3 <Thr::loadKernelSymbolTable(char const*)>
c00124ee:	83 c4 10             	add    esp,0x10
c00124f1:	83 ec 0c             	sub    esp,0xc
c00124f4:	68 0d 3c 02 c0       	push   0xc0023c0d
c00124f9:	e8 b9 75 ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c00124fe:	83 c4 10             	add    esp,0x10
c0012501:	83 ec 04             	sub    esp,0x4
c0012504:	6a 0c                	push   0xc
c0012506:	68 28 3c 02 c0       	push   0xc0023c28
c001250b:	68 39 3c 02 c0       	push   0xc0023c39
c0012510:	e8 24 2d 00 00       	call   c0015239 <Reg::readIntWithDefault(char*, char*, int)>
c0012515:	83 c4 10             	add    esp,0x10
c0012518:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001251f:	83 ec 0c             	sub    esp,0xc
c0012522:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0012529:	e8 bf 93 ff ff       	call   c000b8ed <Virt::setupPageSwapping(int)>
c001252e:	83 c4 10             	add    esp,0x10
c0012531:	83 ec 0c             	sub    esp,0xc
c0012534:	68 c6 23 02 c0       	push   0xc00223c6
c0012539:	e8 79 75 ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c001253e:	83 c4 10             	add    esp,0x10
c0012541:	8b 1d 68 62 02 c0    	mov    ebx,DWORD PTR ds:0xc0026268
c0012547:	83 ec 08             	sub    esp,0x8
c001254a:	6a 01                	push   0x1
c001254c:	68 40 3c 02 c0       	push   0xc0023c40
c0012551:	e8 f4 50 00 00       	call   c001764a <Thr::loadDLL(char const*, bool)>
c0012556:	83 c4 10             	add    esp,0x10
c0012559:	83 ec 08             	sub    esp,0x8
c001255c:	53                   	push   ebx
c001255d:	50                   	push   eax
c001255e:	e8 18 53 00 00       	call   c001787b <Thr::executeDLL(unsigned long, void*)>
c0012563:	83 c4 10             	add    esp,0x10
c0012566:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001256d:	83 ec 08             	sub    esp,0x8
c0012570:	6a 12                	push   0x12
c0012572:	50                   	push   eax
c0012573:	e8 0e bd ff ff       	call   c000e286 <getDevicesOfType(DeviceType)>
c0012578:	83 c4 0c             	add    esp,0xc
c001257b:	83 ec 0c             	sub    esp,0xc
c001257e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012585:	50                   	push   eax
c0012586:	e8 3f f0 00 00       	call   c00215ca <LinkedList<Device>::isEmpty()>
c001258b:	83 c4 10             	add    esp,0x10
c001258e:	83 f0 01             	xor    eax,0x1
c0012591:	84 c0                	test   al,al
c0012593:	0f 84 43 01 00 00    	je     c00126dc <ACPI::open(int, int, void*)+0x226>
c0012599:	83 ec 0c             	sub    esp,0xc
c001259c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00125a3:	50                   	push   eax
c00125a4:	e8 3d f0 00 00       	call   c00215e6 <LinkedList<Device>::getFirstElement()>
c00125a9:	83 c4 10             	add    esp,0x10
c00125ac:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00125b3:	83 ec 0c             	sub    esp,0xc
c00125b6:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00125bd:	50                   	push   eax
c00125be:	e8 2b f0 00 00       	call   c00215ee <LinkedList<Device>::removeFirst()>
c00125c3:	83 c4 10             	add    esp,0x10
c00125c6:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c00125cd:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00125d4:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c00125db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00125df:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00125e5:	ba 09 00 00 00       	mov    edx,0x9
c00125ea:	fc                   	cld    
c00125eb:	89 c7                	mov    edi,eax
c00125ed:	89 de                	mov    esi,ebx
c00125ef:	89 d1                	mov    ecx,edx
c00125f1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00125f3:	83 ec 08             	sub    esp,0x8
c00125f6:	8d 44 24 38          	lea    eax,[esp+0x38]
c00125fa:	50                   	push   eax
c00125fb:	83 ec 24             	sub    esp,0x24
c00125fe:	89 e0                	mov    eax,esp
c0012600:	89 c3                	mov    ebx,eax
c0012602:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012606:	ba 09 00 00 00       	mov    edx,0x9
c001260b:	89 df                	mov    edi,ebx
c001260d:	89 c6                	mov    esi,eax
c001260f:	89 d1                	mov    ecx,edx
c0012611:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012613:	e8 98 a8 00 00       	call   c001ceb0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012618:	83 c4 30             	add    esp,0x30
c001261b:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0012622:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001262a:	0f 84 4b ff ff ff    	je     c001257b <ACPI::open(int, int, void*)+0xc5>
c0012630:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001263b:	83 ec 0c             	sub    esp,0xc
c001263e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012645:	e8 13 74 ff ff       	call   c0009a5d <malloc>
c001264a:	83 c4 10             	add    esp,0x10
c001264d:	89 c3                	mov    ebx,eax
c001264f:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c0012654:	83 ec 04             	sub    esp,0x4
c0012657:	50                   	push   eax
c0012658:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001265f:	53                   	push   ebx
c0012660:	e8 c3 a9 ff ff       	call   c000d028 <File::File(char const*, Process*)>
c0012665:	83 c4 10             	add    esp,0x10
c0012668:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001266f:	83 ec 0c             	sub    esp,0xc
c0012672:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012679:	e8 7c ac ff ff       	call   c000d2fa <File::exists()>
c001267e:	83 c4 10             	add    esp,0x10
c0012681:	84 c0                	test   al,al
c0012683:	74 27                	je     c00126ac <ACPI::open(int, int, void*)+0x1f6>
c0012685:	83 ec 08             	sub    esp,0x8
c0012688:	6a 01                	push   0x1
c001268a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012691:	e8 b4 4f 00 00       	call   c001764a <Thr::loadDLL(char const*, bool)>
c0012696:	83 c4 10             	add    esp,0x10
c0012699:	83 ec 08             	sub    esp,0x8
c001269c:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00126a3:	50                   	push   eax
c00126a4:	e8 d2 51 00 00       	call   c001787b <Thr::executeDLL(unsigned long, void*)>
c00126a9:	83 c4 10             	add    esp,0x10
c00126ac:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00126b4:	0f 84 c1 fe ff ff    	je     c001257b <ACPI::open(int, int, void*)+0xc5>
c00126ba:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00126c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00126c3:	83 c0 08             	add    eax,0x8
c00126c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00126c8:	83 ec 0c             	sub    esp,0xc
c00126cb:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00126d2:	ff d0                	call   eax
c00126d4:	83 c4 10             	add    esp,0x10
c00126d7:	e9 9f fe ff ff       	jmp    c001257b <ACPI::open(int, int, void*)+0xc5>
c00126dc:	83 ec 0c             	sub    esp,0xc
c00126df:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00126e6:	50                   	push   eax
c00126e7:	e8 dc ee 00 00       	call   c00215c8 <LinkedList<Device>::~LinkedList()>
c00126ec:	83 c4 10             	add    esp,0x10
c00126ef:	8b 1d 68 62 02 c0    	mov    ebx,DWORD PTR ds:0xc0026268
c00126f5:	83 ec 08             	sub    esp,0x8
c00126f8:	6a 01                	push   0x1
c00126fa:	68 5b 3c 02 c0       	push   0xc0023c5b
c00126ff:	e8 46 4f 00 00       	call   c001764a <Thr::loadDLL(char const*, bool)>
c0012704:	83 c4 10             	add    esp,0x10
c0012707:	83 ec 08             	sub    esp,0x8
c001270a:	53                   	push   ebx
c001270b:	50                   	push   eax
c001270c:	e8 6a 51 00 00       	call   c001787b <Thr::executeDLL(unsigned long, void*)>
c0012711:	83 c4 10             	add    esp,0x10
c0012714:	8b 1d 68 62 02 c0    	mov    ebx,DWORD PTR ds:0xc0026268
c001271a:	83 ec 08             	sub    esp,0x8
c001271d:	6a 01                	push   0x1
c001271f:	68 78 3c 02 c0       	push   0xc0023c78
c0012724:	e8 21 4f 00 00       	call   c001764a <Thr::loadDLL(char const*, bool)>
c0012729:	83 c4 10             	add    esp,0x10
c001272c:	83 ec 08             	sub    esp,0x8
c001272f:	53                   	push   ebx
c0012730:	50                   	push   eax
c0012731:	e8 45 51 00 00       	call   c001787b <Thr::executeDLL(unsigned long, void*)>
c0012736:	83 c4 10             	add    esp,0x10
c0012739:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c001273e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012744:	83 e0 04             	and    eax,0x4
c0012747:	84 c0                	test   al,al
c0012749:	0f 84 0d 01 00 00    	je     c001285c <ACPI::open(int, int, void*)+0x3a6>
c001274f:	83 ec 0c             	sub    esp,0xc
c0012752:	68 95 3c 02 c0       	push   0xc0023c95
c0012757:	e8 5b 73 ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c001275c:	83 c4 10             	add    esp,0x10
c001275f:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001276a:	83 ec 0c             	sub    esp,0xc
c001276d:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012774:	e8 e4 72 ff ff       	call   c0009a5d <malloc>
c0012779:	83 c4 10             	add    esp,0x10
c001277c:	89 c3                	mov    ebx,eax
c001277e:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c0012783:	83 ec 04             	sub    esp,0x4
c0012786:	50                   	push   eax
c0012787:	68 b2 3c 02 c0       	push   0xc0023cb2
c001278c:	53                   	push   ebx
c001278d:	e8 96 a8 ff ff       	call   c000d028 <File::File(char const*, Process*)>
c0012792:	83 c4 10             	add    esp,0x10
c0012795:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c001279c:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00127a4:	74 1a                	je     c00127c0 <ACPI::open(int, int, void*)+0x30a>
c00127a6:	83 ec 0c             	sub    esp,0xc
c00127a9:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00127b0:	e8 45 ab ff ff       	call   c000d2fa <File::exists()>
c00127b5:	83 c4 10             	add    esp,0x10
c00127b8:	84 c0                	test   al,al
c00127ba:	74 04                	je     c00127c0 <ACPI::open(int, int, void*)+0x30a>
c00127bc:	b0 01                	mov    al,0x1
c00127be:	eb 02                	jmp    c00127c2 <ACPI::open(int, int, void*)+0x30c>
c00127c0:	b0 00                	mov    al,0x0
c00127c2:	84 c0                	test   al,al
c00127c4:	74 25                	je     c00127eb <ACPI::open(int, int, void*)+0x335>
c00127c6:	83 ec 08             	sub    esp,0x8
c00127c9:	6a 01                	push   0x1
c00127cb:	68 b2 3c 02 c0       	push   0xc0023cb2
c00127d0:	e8 75 4e 00 00       	call   c001764a <Thr::loadDLL(char const*, bool)>
c00127d5:	83 c4 10             	add    esp,0x10
c00127d8:	83 ec 08             	sub    esp,0x8
c00127db:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c00127e2:	50                   	push   eax
c00127e3:	e8 93 50 00 00       	call   c001787b <Thr::executeDLL(unsigned long, void*)>
c00127e8:	83 c4 10             	add    esp,0x10
c00127eb:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00127f3:	74 27                	je     c001281c <ACPI::open(int, int, void*)+0x366>
c00127f5:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00127fd:	74 1d                	je     c001281c <ACPI::open(int, int, void*)+0x366>
c00127ff:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0012806:	8b 00                	mov    eax,DWORD PTR [eax]
c0012808:	83 c0 08             	add    eax,0x8
c001280b:	8b 00                	mov    eax,DWORD PTR [eax]
c001280d:	83 ec 0c             	sub    esp,0xc
c0012810:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012817:	ff d0                	call   eax
c0012819:	83 c4 10             	add    esp,0x10
c001281c:	a1 08 6b 02 c0       	mov    eax,ds:0xc0026b08
c0012821:	83 ec 08             	sub    esp,0x8
c0012824:	68 cf 3c 02 c0       	push   0xc0023ccf
c0012829:	50                   	push   eax
c001282a:	e8 d4 f2 ff ff       	call   c0011b03 <findDataTable(unsigned char*, char*)>
c001282f:	83 c4 10             	add    esp,0x10
c0012832:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0012839:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0012841:	74 19                	je     c001285c <ACPI::open(int, int, void*)+0x3a6>
c0012843:	83 ec 08             	sub    esp,0x8
c0012846:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001284d:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0012854:	e8 fd fb ff ff       	call   c0012456 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012859:	83 c4 10             	add    esp,0x10
c001285c:	b8 00 00 00 00       	mov    eax,0x0
c0012861:	81 c4 60 01 00 00    	add    esp,0x160
c0012867:	5b                   	pop    ebx
c0012868:	5e                   	pop    esi
c0012869:	5f                   	pop    edi
c001286a:	c3                   	ret    
c001286b:	90                   	nop

c001286c <CPU::close(int, int, void*)>:
c001286c:	31 c0                	xor    eax,eax
c001286e:	c3                   	ret    
c001286f:	90                   	nop

c0012870 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012870:	55                   	push   ebp
c0012871:	57                   	push   edi
c0012872:	56                   	push   esi
c0012873:	53                   	push   ebx
c0012874:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012878:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001287c:	89 ce                	mov    esi,ecx
c001287e:	89 d5                	mov    ebp,edx
c0012880:	80 f9 04             	cmp    cl,0x4
c0012883:	75 28                	jne    c00128ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0012885:	8d 42 f9             	lea    eax,[edx-0x7]
c0012888:	3c 03                	cmp    al,0x3
c001288a:	0f 86 63 01 00 00    	jbe    c00129f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012890:	80 fa 03             	cmp    dl,0x3
c0012893:	0f 84 5a 01 00 00    	je     c00129f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012899:	8d 7a f2             	lea    edi,[edx-0xe]
c001289c:	b8 30 5b 02 c0       	mov    eax,0xc0025b30
c00128a1:	89 fb                	mov    ebx,edi
c00128a3:	80 fb 01             	cmp    bl,0x1
c00128a6:	77 4e                	ja     c00128f6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00128a8:	e9 52 01 00 00       	jmp    c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128ad:	80 f9 05             	cmp    cl,0x5
c00128b0:	75 4d                	jne    c00128ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00128b2:	b8 40 5b 02 c0       	mov    eax,0xc0025b40
c00128b7:	80 fa 03             	cmp    dl,0x3
c00128ba:	0f 86 3f 01 00 00    	jbe    c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128c0:	8d 7a fa             	lea    edi,[edx-0x6]
c00128c3:	b8 50 5b 02 c0       	mov    eax,0xc0025b50
c00128c8:	89 fb                	mov    ebx,edi
c00128ca:	80 fb 01             	cmp    bl,0x1
c00128cd:	0f 86 2c 01 00 00    	jbe    c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128d3:	b8 60 5b 02 c0       	mov    eax,0xc0025b60
c00128d8:	80 fa 08             	cmp    dl,0x8
c00128db:	0f 84 1e 01 00 00    	je     c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128e1:	89 d7                	mov    edi,edx
c00128e3:	b8 70 5b 02 c0       	mov    eax,0xc0025b70
c00128e8:	83 e7 fb             	and    edi,0xfffffffb
c00128eb:	89 fb                	mov    ebx,edi
c00128ed:	80 fb 09             	cmp    bl,0x9
c00128f0:	0f 84 09 01 00 00    	je     c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128f6:	31 c0                	xor    eax,eax
c00128f8:	89 eb                	mov    ebx,ebp
c00128fa:	0f b6 fb             	movzx  edi,bl
c00128fd:	eb 30                	jmp    c001292f <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00128ff:	31 c0                	xor    eax,eax
c0012901:	80 f9 06             	cmp    cl,0x6
c0012904:	75 f2                	jne    c00128f8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012906:	80 fa 0a             	cmp    dl,0xa
c0012909:	77 ed                	ja     c00128f8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001290b:	bf de 05 00 00       	mov    edi,0x5de
c0012910:	0f a3 d7             	bt     edi,edx
c0012913:	73 e3                	jae    c00128f8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012915:	b8 80 5b 02 c0       	mov    eax,0xc0025b80
c001291a:	e9 e0 00 00 00       	jmp    c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001291f:	39 c7                	cmp    edi,eax
c0012921:	0f 84 d3 00 00 00    	je     c00129fa <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012927:	40                   	inc    eax
c0012928:	3d d0 00 00 00       	cmp    eax,0xd0
c001292d:	74 09                	je     c0012938 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001292f:	89 f3                	mov    ebx,esi
c0012931:	80 fb 0f             	cmp    bl,0xf
c0012934:	75 f1                	jne    c0012927 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0012936:	eb e7                	jmp    c001291f <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0012938:	80 f9 10             	cmp    cl,0x10
c001293b:	75 14                	jne    c0012951 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001293d:	8d 42 fc             	lea    eax,[edx-0x4]
c0012940:	83 e0 fb             	and    eax,0xfffffffb
c0012943:	3c 02                	cmp    al,0x2
c0012945:	76 34                	jbe    c001297b <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0012947:	b8 55 3e 02 c0       	mov    eax,0xc0023e55
c001294c:	80 fa 02             	cmp    dl,0x2
c001294f:	eb 24                	jmp    c0012975 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012951:	80 f9 11             	cmp    cl,0x11
c0012954:	75 13                	jne    c0012969 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0012956:	b8 55 3e 02 c0       	mov    eax,0xc0023e55
c001295b:	80 fa 03             	cmp    dl,0x3
c001295e:	0f 85 9b 00 00 00    	jne    c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012964:	e9 91 00 00 00       	jmp    c00129fa <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012969:	80 f9 12             	cmp    cl,0x12
c001296c:	75 14                	jne    c0012982 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001296e:	b8 55 3e 02 c0       	mov    eax,0xc0023e55
c0012973:	fe ca                	dec    dl
c0012975:	0f 85 84 00 00 00    	jne    c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001297b:	b8 a0 5b 02 c0       	mov    eax,0xc0025ba0
c0012980:	eb 7d                	jmp    c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012982:	80 f9 14             	cmp    cl,0x14
c0012985:	75 12                	jne    c0012999 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0012987:	4a                   	dec    edx
c0012988:	b8 55 3e 02 c0       	mov    eax,0xc0023e55
c001298d:	80 fa 01             	cmp    dl,0x1
c0012990:	77 6d                	ja     c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012992:	b8 b0 5b 02 c0       	mov    eax,0xc0025bb0
c0012997:	eb 66                	jmp    c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012999:	80 f9 15             	cmp    cl,0x15
c001299c:	75 31                	jne    c00129cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001299e:	b8 c0 5b 02 c0       	mov    eax,0xc0025bc0
c00129a3:	80 fa 01             	cmp    dl,0x1
c00129a6:	74 57                	je     c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00129a8:	b8 55 3e 02 c0       	mov    eax,0xc0023e55
c00129ad:	80 fa 13             	cmp    dl,0x13
c00129b0:	76 0c                	jbe    c00129be <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00129b2:	80 fa 30             	cmp    dl,0x30
c00129b5:	75 48                	jne    c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00129b7:	b8 e0 5b 02 c0       	mov    eax,0xc0025be0
c00129bc:	eb 41                	jmp    c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00129be:	b9 04 00 09 00       	mov    ecx,0x90004
c00129c3:	0f a3 d1             	bt     ecx,edx
c00129c6:	73 37                	jae    c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00129c8:	b8 d0 5b 02 c0       	mov    eax,0xc0025bd0
c00129cd:	eb 30                	jmp    c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00129cf:	b8 55 3e 02 c0       	mov    eax,0xc0023e55
c00129d4:	80 f9 16             	cmp    cl,0x16
c00129d7:	75 26                	jne    c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00129d9:	b8 f0 5b 02 c0       	mov    eax,0xc0025bf0
c00129de:	84 d2                	test   dl,dl
c00129e0:	74 1d                	je     c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00129e2:	b8 55 3e 02 c0       	mov    eax,0xc0023e55
c00129e7:	80 fa 30             	cmp    dl,0x30
c00129ea:	75 13                	jne    c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00129ec:	b8 00 5c 02 c0       	mov    eax,0xc0025c00
c00129f1:	eb 0c                	jmp    c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00129f3:	b8 20 5b 02 c0       	mov    eax,0xc0025b20
c00129f8:	eb 05                	jmp    c00129ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00129fa:	b8 90 5b 02 c0       	mov    eax,0xc0025b90
c00129ff:	5b                   	pop    ebx
c0012a00:	5e                   	pop    esi
c0012a01:	5f                   	pop    edi
c0012a02:	5d                   	pop    ebp
c0012a03:	c3                   	ret    

c0012a04 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012a04:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a0c:	80 f9 04             	cmp    cl,0x4
c0012a0f:	75 6b                	jne    c0012a7c <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012a11:	b8 80 59 02 c0       	mov    eax,0xc0025980
c0012a16:	80 fa 01             	cmp    dl,0x1
c0012a19:	0f 86 92 02 00 00    	jbe    c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a1f:	b8 90 59 02 c0       	mov    eax,0xc0025990
c0012a24:	80 fa 02             	cmp    dl,0x2
c0012a27:	0f 84 84 02 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a2d:	b8 a0 59 02 c0       	mov    eax,0xc00259a0
c0012a32:	80 fa 03             	cmp    dl,0x3
c0012a35:	0f 84 76 02 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a3b:	b8 b0 59 02 c0       	mov    eax,0xc00259b0
c0012a40:	80 fa 04             	cmp    dl,0x4
c0012a43:	0f 84 68 02 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a49:	b8 c0 59 02 c0       	mov    eax,0xc00259c0
c0012a4e:	80 fa 05             	cmp    dl,0x5
c0012a51:	0f 84 5a 02 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a57:	b8 a0 59 02 c0       	mov    eax,0xc00259a0
c0012a5c:	80 fa 07             	cmp    dl,0x7
c0012a5f:	0f 84 4c 02 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a65:	83 ea 08             	sub    edx,0x8
c0012a68:	b8 55 3e 02 c0       	mov    eax,0xc0023e55
c0012a6d:	80 fa 01             	cmp    dl,0x1
c0012a70:	0f 87 3b 02 00 00    	ja     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a76:	b8 d0 59 02 c0       	mov    eax,0xc00259d0
c0012a7b:	c3                   	ret    
c0012a7c:	80 f9 05             	cmp    cl,0x5
c0012a7f:	75 45                	jne    c0012ac6 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0012a81:	8d 4a ff             	lea    ecx,[edx-0x1]
c0012a84:	b8 e0 59 02 c0       	mov    eax,0xc00259e0
c0012a89:	80 f9 02             	cmp    cl,0x2
c0012a8c:	0f 86 1f 02 00 00    	jbe    c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a92:	80 fa 04             	cmp    dl,0x4
c0012a95:	0f 84 f3 01 00 00    	je     c0012c8e <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0012a9b:	80 fa 07             	cmp    dl,0x7
c0012a9e:	0f 84 0d 02 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012aa4:	b8 f0 59 02 c0       	mov    eax,0xc00259f0
c0012aa9:	80 fa 08             	cmp    dl,0x8
c0012aac:	0f 84 ff 01 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ab2:	b8 55 3e 02 c0       	mov    eax,0xc0023e55
c0012ab7:	80 fa 09             	cmp    dl,0x9
c0012aba:	0f 85 f1 01 00 00    	jne    c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ac0:	b8 00 5a 02 c0       	mov    eax,0xc0025a00
c0012ac5:	c3                   	ret    
c0012ac6:	80 f9 06             	cmp    cl,0x6
c0012ac9:	0f 85 85 01 00 00    	jne    c0012c54 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0012acf:	b8 10 5a 02 c0       	mov    eax,0xc0025a10
c0012ad4:	80 fa 01             	cmp    dl,0x1
c0012ad7:	0f 84 d4 01 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012add:	8d 42 fb             	lea    eax,[edx-0x5]
c0012ae0:	3c 01                	cmp    al,0x1
c0012ae2:	0f 86 ac 01 00 00    	jbe    c0012c94 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012ae8:	80 fa 03             	cmp    dl,0x3
c0012aeb:	0f 84 a3 01 00 00    	je     c0012c94 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012af1:	8d 4a f9             	lea    ecx,[edx-0x7]
c0012af4:	b8 30 5a 02 c0       	mov    eax,0xc0025a30
c0012af9:	80 f9 01             	cmp    cl,0x1
c0012afc:	0f 86 af 01 00 00    	jbe    c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b02:	80 fa 09             	cmp    dl,0x9
c0012b05:	0f 84 8f 01 00 00    	je     c0012c9a <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0012b0b:	8d 4a f6             	lea    ecx,[edx-0xa]
c0012b0e:	80 f9 01             	cmp    cl,0x1
c0012b11:	0f 86 9a 01 00 00    	jbe    c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b17:	b8 40 5a 02 c0       	mov    eax,0xc0025a40
c0012b1c:	80 fa 0d             	cmp    dl,0xd
c0012b1f:	0f 84 8c 01 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b25:	b8 50 5a 02 c0       	mov    eax,0xc0025a50
c0012b2a:	80 fa 0e             	cmp    dl,0xe
c0012b2d:	0f 84 7e 01 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b33:	b8 60 5a 02 c0       	mov    eax,0xc0025a60
c0012b38:	80 fa 0f             	cmp    dl,0xf
c0012b3b:	0f 84 70 01 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b41:	b8 40 5a 02 c0       	mov    eax,0xc0025a40
c0012b46:	80 fa 15             	cmp    dl,0x15
c0012b49:	0f 84 62 01 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b4f:	8d 4a ea             	lea    ecx,[edx-0x16]
c0012b52:	b8 60 5a 02 c0       	mov    eax,0xc0025a60
c0012b57:	80 f9 01             	cmp    cl,0x1
c0012b5a:	0f 86 51 01 00 00    	jbe    c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b60:	80 fa 1a             	cmp    dl,0x1a
c0012b63:	0f 84 37 01 00 00    	je     c0012ca0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0012b69:	80 fa 1c             	cmp    dl,0x1c
c0012b6c:	0f 84 34 01 00 00    	je     c0012ca6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0012b72:	80 fa 1d             	cmp    dl,0x1d
c0012b75:	0f 84 36 01 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b7b:	b8 90 5a 02 c0       	mov    eax,0xc0025a90
c0012b80:	80 fa 25             	cmp    dl,0x25
c0012b83:	0f 84 28 01 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b89:	8d 4a da             	lea    ecx,[edx-0x26]
c0012b8c:	b8 80 5a 02 c0       	mov    eax,0xc0025a80
c0012b91:	80 f9 01             	cmp    cl,0x1
c0012b94:	0f 86 17 01 00 00    	jbe    c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b9a:	b8 a0 5a 02 c0       	mov    eax,0xc0025aa0
c0012b9f:	80 fa 2a             	cmp    dl,0x2a
c0012ba2:	0f 84 09 01 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ba8:	b8 90 5a 02 c0       	mov    eax,0xc0025a90
c0012bad:	80 fa 2c             	cmp    dl,0x2c
c0012bb0:	0f 84 fb 00 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012bb6:	b8 a0 5a 02 c0       	mov    eax,0xc0025aa0
c0012bbb:	80 fa 2d             	cmp    dl,0x2d
c0012bbe:	0f 84 ed 00 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012bc4:	b8 70 5a 02 c0       	mov    eax,0xc0025a70
c0012bc9:	80 fa 2e             	cmp    dl,0x2e
c0012bcc:	0f 84 df 00 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012bd2:	b8 90 5a 02 c0       	mov    eax,0xc0025a90
c0012bd7:	80 fa 2f             	cmp    dl,0x2f
c0012bda:	0f 84 d1 00 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012be0:	8d 4a cb             	lea    ecx,[edx-0x35]
c0012be3:	b8 80 5a 02 c0       	mov    eax,0xc0025a80
c0012be8:	80 f9 01             	cmp    cl,0x1
c0012beb:	0f 86 c0 00 00 00    	jbe    c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012bf1:	b8 b0 5a 02 c0       	mov    eax,0xc0025ab0
c0012bf6:	80 fa 37             	cmp    dl,0x37
c0012bf9:	0f 84 b2 00 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012bff:	b8 c0 5a 02 c0       	mov    eax,0xc0025ac0
c0012c04:	80 fa 3a             	cmp    dl,0x3a
c0012c07:	0f 84 a4 00 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012c0d:	b8 d0 5a 02 c0       	mov    eax,0xc0025ad0
c0012c12:	80 fa 3c             	cmp    dl,0x3c
c0012c15:	0f 84 96 00 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012c1b:	b8 e0 5a 02 c0       	mov    eax,0xc0025ae0
c0012c20:	80 fa 3d             	cmp    dl,0x3d
c0012c23:	0f 84 88 00 00 00    	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012c29:	b8 c0 5a 02 c0       	mov    eax,0xc0025ac0
c0012c2e:	80 fa 3e             	cmp    dl,0x3e
c0012c31:	74 7e                	je     c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012c33:	8d 42 bb             	lea    eax,[edx-0x45]
c0012c36:	3c 01                	cmp    al,0x1
c0012c38:	76 72                	jbe    c0012cac <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012c3a:	80 fa 3f             	cmp    dl,0x3f
c0012c3d:	74 6d                	je     c0012cac <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012c3f:	80 fa 4a             	cmp    dl,0x4a
c0012c42:	74 0a                	je     c0012c4e <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0012c44:	b8 55 3e 02 c0       	mov    eax,0xc0023e55
c0012c49:	80 fa 4d             	cmp    dl,0x4d
c0012c4c:	75 63                	jne    c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012c4e:	b8 b0 5a 02 c0       	mov    eax,0xc0025ab0
c0012c53:	c3                   	ret    
c0012c54:	b8 55 3e 02 c0       	mov    eax,0xc0023e55
c0012c59:	80 f9 0b             	cmp    cl,0xb
c0012c5c:	75 0a                	jne    c0012c68 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0012c5e:	fe ca                	dec    dl
c0012c60:	75 4f                	jne    c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012c62:	b8 f0 5a 02 c0       	mov    eax,0xc0025af0
c0012c67:	c3                   	ret    
c0012c68:	80 f9 0f             	cmp    cl,0xf
c0012c6b:	75 44                	jne    c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012c6d:	b8 00 5b 02 c0       	mov    eax,0xc0025b00
c0012c72:	80 fa 02             	cmp    dl,0x2
c0012c75:	76 3a                	jbe    c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012c77:	8d 42 fd             	lea    eax,[edx-0x3]
c0012c7a:	3c 01                	cmp    al,0x1
c0012c7c:	76 0a                	jbe    c0012c88 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0012c7e:	b8 55 3e 02 c0       	mov    eax,0xc0023e55
c0012c83:	80 fa 06             	cmp    dl,0x6
c0012c86:	75 29                	jne    c0012cb1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012c88:	b8 10 5b 02 c0       	mov    eax,0xc0025b10
c0012c8d:	c3                   	ret    
c0012c8e:	b8 f0 59 02 c0       	mov    eax,0xc00259f0
c0012c93:	c3                   	ret    
c0012c94:	b8 20 5a 02 c0       	mov    eax,0xc0025a20
c0012c99:	c3                   	ret    
c0012c9a:	b8 40 5a 02 c0       	mov    eax,0xc0025a40
c0012c9f:	c3                   	ret    
c0012ca0:	b8 70 5a 02 c0       	mov    eax,0xc0025a70
c0012ca5:	c3                   	ret    
c0012ca6:	b8 80 5a 02 c0       	mov    eax,0xc0025a80
c0012cab:	c3                   	ret    
c0012cac:	b8 d0 5a 02 c0       	mov    eax,0xc0025ad0
c0012cb1:	c3                   	ret    

c0012cb2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0012cb2:	60                   	pusha  
c0012cb3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012cb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012cbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012cbf:	9c                   	pushf  
c0012cc0:	fa                   	cli    
c0012cc1:	0f 09                	wbinvd 
c0012cc3:	0f 30                	wrmsr  
c0012cc5:	9d                   	popf   
c0012cc6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012cca:	89 02                	mov    DWORD PTR [edx],eax
c0012ccc:	61                   	popa   
c0012ccd:	c3                   	ret    

c0012cce <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0012cce:	60                   	pusha  
c0012ccf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012cd3:	9c                   	pushf  
c0012cd4:	fa                   	cli    
c0012cd5:	0f 09                	wbinvd 
c0012cd7:	31 c0                	xor    eax,eax
c0012cd9:	31 d2                	xor    edx,edx
c0012cdb:	0f 32                	rdmsr  
c0012cdd:	9d                   	popf   
c0012cde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ce2:	89 02                	mov    DWORD PTR [edx],eax
c0012ce4:	61                   	popa   
c0012ce5:	c3                   	ret    

c0012ce6 <CPU::AMD_K6_writeback(int, int, int)>:
c0012ce6:	56                   	push   esi
c0012ce7:	53                   	push   ebx
c0012ce8:	83 ec 10             	sub    esp,0x10
c0012ceb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012cef:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0012cf4:	75 5d                	jne    c0012d53 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012cf6:	83 f8 08             	cmp    eax,0x8
c0012cf9:	75 09                	jne    c0012d04 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0012cfb:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0012d00:	7e 13                	jle    c0012d15 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012d02:	eb 30                	jmp    c0012d34 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012d04:	83 f8 06             	cmp    eax,0x6
c0012d07:	7c 4a                	jl     c0012d53 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012d09:	83 f8 07             	cmp    eax,0x7
c0012d0c:	7e 07                	jle    c0012d15 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012d0e:	83 f8 09             	cmp    eax,0x9
c0012d11:	74 21                	je     c0012d34 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012d13:	eb 3e                	jmp    c0012d53 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012d15:	89 e6                	mov    esi,esp
c0012d17:	8b 1d a8 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262a8
c0012d1d:	56                   	push   esi
c0012d1e:	c1 eb 15             	shr    ebx,0x15
c0012d21:	68 82 00 00 c0       	push   0xc0000082
c0012d26:	83 e3 7e             	and    ebx,0x7e
c0012d29:	e8 a0 ff ff ff       	call   c0012cce <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012d2e:	56                   	push   esi
c0012d2f:	6a 00                	push   0x0
c0012d31:	53                   	push   ebx
c0012d32:	eb 12                	jmp    c0012d46 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0012d34:	89 e3                	mov    ebx,esp
c0012d36:	53                   	push   ebx
c0012d37:	68 82 00 00 c0       	push   0xc0000082
c0012d3c:	e8 8d ff ff ff       	call   c0012cce <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012d41:	53                   	push   ebx
c0012d42:	6a 00                	push   0x0
c0012d44:	6a 00                	push   0x0
c0012d46:	68 82 00 00 c0       	push   0xc0000082
c0012d4b:	e8 62 ff ff ff       	call   c0012cb2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0012d50:	83 c4 18             	add    esp,0x18
c0012d53:	83 c4 10             	add    esp,0x10
c0012d56:	5b                   	pop    ebx
c0012d57:	5e                   	pop    esi
c0012d58:	c3                   	ret    
c0012d59:	90                   	nop

c0012d5a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0012d5a:	55                   	push   ebp
c0012d5b:	57                   	push   edi
c0012d5c:	56                   	push   esi
c0012d5d:	53                   	push   ebx
c0012d5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012d62:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012d66:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012d6a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0012d6e:	39 05 20 5c 02 c0    	cmp    DWORD PTR ds:0xc0025c20,eax
c0012d74:	75 23                	jne    c0012d99 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0012d76:	a1 6c 6d 02 c0       	mov    eax,ds:0xc0026d6c
c0012d7b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012d7f:	89 06                	mov    DWORD PTR [esi],eax
c0012d81:	a1 68 6d 02 c0       	mov    eax,ds:0xc0026d68
c0012d86:	89 07                	mov    DWORD PTR [edi],eax
c0012d88:	a1 64 6d 02 c0       	mov    eax,ds:0xc0026d64
c0012d8d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012d90:	a1 60 6d 02 c0       	mov    eax,ds:0xc0026d60
c0012d95:	89 02                	mov    DWORD PTR [edx],eax
c0012d97:	eb 3f                	jmp    c0012dd8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0012d99:	31 c9                	xor    ecx,ecx
c0012d9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012d9f:	0f a2                	cpuid  
c0012da1:	89 06                	mov    DWORD PTR [esi],eax
c0012da3:	89 1f                	mov    DWORD PTR [edi],ebx
c0012da5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012da9:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0012dac:	89 10                	mov    DWORD PTR [eax],edx
c0012dae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012db2:	a3 20 5c 02 c0       	mov    ds:0xc0025c20,eax
c0012db7:	8b 06                	mov    eax,DWORD PTR [esi]
c0012db9:	a3 6c 6d 02 c0       	mov    ds:0xc0026d6c,eax
c0012dbe:	8b 07                	mov    eax,DWORD PTR [edi]
c0012dc0:	a3 68 6d 02 c0       	mov    ds:0xc0026d68,eax
c0012dc5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012dc8:	a3 64 6d 02 c0       	mov    ds:0xc0026d64,eax
c0012dcd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012dd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dd3:	a3 60 6d 02 c0       	mov    ds:0xc0026d60,eax
c0012dd8:	5b                   	pop    ebx
c0012dd9:	5e                   	pop    esi
c0012dda:	5f                   	pop    edi
c0012ddb:	5d                   	pop    ebp
c0012ddc:	c3                   	ret    
c0012ddd:	90                   	nop

c0012dde <CPU::cpuidCheckEDX(unsigned int)>:
c0012dde:	83 ec 10             	sub    esp,0x10
c0012de1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012de5:	50                   	push   eax
c0012de6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012dea:	50                   	push   eax
c0012deb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012def:	50                   	push   eax
c0012df0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012df4:	50                   	push   eax
c0012df5:	6a 01                	push   0x1
c0012df7:	e8 5e ff ff ff       	call   c0012d5a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012dfc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012e00:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0012e04:	0f 95 c0             	setne  al
c0012e07:	83 c4 24             	add    esp,0x24
c0012e0a:	c3                   	ret    
c0012e0b:	90                   	nop

c0012e0c <CPU::cpuidCheckECX(unsigned int)>:
c0012e0c:	83 ec 10             	sub    esp,0x10
c0012e0f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012e13:	50                   	push   eax
c0012e14:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012e18:	50                   	push   eax
c0012e19:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012e1d:	50                   	push   eax
c0012e1e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012e22:	50                   	push   eax
c0012e23:	6a 01                	push   0x1
c0012e25:	e8 30 ff ff ff       	call   c0012d5a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012e2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012e2e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012e32:	0f 95 c0             	setne  al
c0012e35:	83 c4 24             	add    esp,0x24
c0012e38:	c3                   	ret    
c0012e39:	90                   	nop

c0012e3a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0012e3a:	83 ec 10             	sub    esp,0x10
c0012e3d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012e41:	50                   	push   eax
c0012e42:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012e46:	50                   	push   eax
c0012e47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012e4b:	50                   	push   eax
c0012e4c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012e50:	50                   	push   eax
c0012e51:	6a 07                	push   0x7
c0012e53:	e8 02 ff ff ff       	call   c0012d5a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012e58:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012e5c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0012e60:	0f 95 c0             	setne  al
c0012e63:	83 c4 24             	add    esp,0x24
c0012e66:	c3                   	ret    
c0012e67:	90                   	nop

c0012e68 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0012e68:	83 ec 10             	sub    esp,0x10
c0012e6b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012e6f:	50                   	push   eax
c0012e70:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012e74:	50                   	push   eax
c0012e75:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012e79:	50                   	push   eax
c0012e7a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012e7e:	50                   	push   eax
c0012e7f:	6a 07                	push   0x7
c0012e81:	e8 d4 fe ff ff       	call   c0012d5a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012e86:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012e8a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012e8e:	0f 95 c0             	setne  al
c0012e91:	83 c4 24             	add    esp,0x24
c0012e94:	c3                   	ret    
c0012e95:	90                   	nop

c0012e96 <CPU::CPU()>:
c0012e96:	83 ec 0c             	sub    esp,0xc
c0012e99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e9d:	83 ec 08             	sub    esp,0x8
c0012ea0:	68 55 3e 02 c0       	push   0xc0023e55
c0012ea5:	50                   	push   eax
c0012ea6:	e8 5b b2 ff ff       	call   c000e106 <Device::Device(char const*)>
c0012eab:	83 c4 10             	add    esp,0x10
c0012eae:	ba 78 40 02 c0       	mov    edx,0xc0024078
c0012eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012eb7:	89 10                	mov    DWORD PTR [eax],edx
c0012eb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ebd:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0012ec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ecb:	05 78 01 00 00       	add    eax,0x178
c0012ed0:	83 ec 0c             	sub    esp,0xc
c0012ed3:	50                   	push   eax
c0012ed4:	e8 21 64 ff ff       	call   c00092fa <GDT::GDT()>
c0012ed9:	83 c4 10             	add    esp,0x10
c0012edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ee0:	05 7c 09 00 00       	add    eax,0x97c
c0012ee5:	83 ec 0c             	sub    esp,0xc
c0012ee8:	50                   	push   eax
c0012ee9:	e8 5c 66 ff ff       	call   c000954a <IDT::IDT()>
c0012eee:	83 c4 10             	add    esp,0x10
c0012ef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ef5:	05 7c 11 00 00       	add    eax,0x117c
c0012efa:	83 ec 0c             	sub    esp,0xc
c0012efd:	50                   	push   eax
c0012efe:	e8 27 81 ff ff       	call   c000b02a <TSS::TSS()>
c0012f03:	83 c4 10             	add    esp,0x10
c0012f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f0a:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0012f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f15:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0012f1f:	90                   	nop
c0012f20:	83 c4 0c             	add    esp,0xc
c0012f23:	c3                   	ret    

c0012f24 <CPU::displayFeatures()>:
c0012f24:	c3                   	ret    
c0012f25:	90                   	nop

c0012f26 <CPU::detectFeatures()>:
c0012f26:	55                   	push   ebp
c0012f27:	57                   	push   edi
c0012f28:	56                   	push   esi
c0012f29:	53                   	push   ebx
c0012f2a:	83 ec 50             	sub    esp,0x50
c0012f2d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0012f31:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0012f3b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0012f42:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0012f48:	6a 0d                	push   0xd
c0012f4a:	6a 00                	push   0x0
c0012f4c:	55                   	push   ebp
c0012f4d:	e8 fe d7 fe ff       	call   c0000750 <memset>
c0012f52:	83 c4 10             	add    esp,0x10
c0012f55:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0012f5a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0012f61:	0f 84 22 09 00 00    	je     c0013889 <CPU::detectFeatures()+0x963>
c0012f67:	83 ec 0c             	sub    esp,0xc
c0012f6a:	89 ef                	mov    edi,ebp
c0012f6c:	6a 10                	push   0x10
c0012f6e:	e8 6b fe ff ff       	call   c0012dde <CPU::cpuidCheckEDX(unsigned int)>
c0012f73:	83 e0 01             	and    eax,0x1
c0012f76:	8d 14 00             	lea    edx,[eax+eax*1]
c0012f79:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012f7f:	83 e0 fd             	and    eax,0xfffffffd
c0012f82:	09 d0                	or     eax,edx
c0012f84:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012f8a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0012f91:	e8 48 fe ff ff       	call   c0012dde <CPU::cpuidCheckEDX(unsigned int)>
c0012f96:	83 e0 01             	and    eax,0x1
c0012f99:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0012fa0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012fa6:	83 e0 fb             	and    eax,0xfffffffb
c0012fa9:	09 d0                	or     eax,edx
c0012fab:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012fb1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012fb8:	e8 21 fe ff ff       	call   c0012dde <CPU::cpuidCheckEDX(unsigned int)>
c0012fbd:	83 e0 01             	and    eax,0x1
c0012fc0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0012fc7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012fcd:	83 e0 f7             	and    eax,0xfffffff7
c0012fd0:	09 d0                	or     eax,edx
c0012fd2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012fd8:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0012fdf:	e8 fa fd ff ff       	call   c0012dde <CPU::cpuidCheckEDX(unsigned int)>
c0012fe4:	83 e0 01             	and    eax,0x1
c0012fe7:	c1 e0 04             	shl    eax,0x4
c0012fea:	88 c2                	mov    dl,al
c0012fec:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012ff2:	83 e0 ef             	and    eax,0xffffffef
c0012ff5:	09 d0                	or     eax,edx
c0012ff7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012ffd:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013004:	e8 d5 fd ff ff       	call   c0012dde <CPU::cpuidCheckEDX(unsigned int)>
c0013009:	83 e0 01             	and    eax,0x1
c001300c:	c1 e0 05             	shl    eax,0x5
c001300f:	88 c2                	mov    dl,al
c0013011:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013017:	83 e0 df             	and    eax,0xffffffdf
c001301a:	09 d0                	or     eax,edx
c001301c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013022:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013029:	e8 b0 fd ff ff       	call   c0012dde <CPU::cpuidCheckEDX(unsigned int)>
c001302e:	83 e0 01             	and    eax,0x1
c0013031:	8d 14 00             	lea    edx,[eax+eax*1]
c0013034:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001303a:	83 e0 fd             	and    eax,0xfffffffd
c001303d:	09 d0                	or     eax,edx
c001303f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013045:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001304c:	e8 8d fd ff ff       	call   c0012dde <CPU::cpuidCheckEDX(unsigned int)>
c0013051:	83 e0 01             	and    eax,0x1
c0013054:	c1 e0 06             	shl    eax,0x6
c0013057:	88 c2                	mov    dl,al
c0013059:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001305f:	83 e0 bf             	and    eax,0xffffffbf
c0013062:	09 d0                	or     eax,edx
c0013064:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001306a:	58                   	pop    eax
c001306b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001306f:	50                   	push   eax
c0013070:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013074:	50                   	push   eax
c0013075:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013079:	56                   	push   esi
c001307a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001307e:	50                   	push   eax
c001307f:	6a 00                	push   0x0
c0013081:	e8 d4 fc ff ff       	call   c0012d5a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013086:	b8 04 00 00 00       	mov    eax,0x4
c001308b:	89 c1                	mov    ecx,eax
c001308d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001308f:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0013095:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013099:	89 c1                	mov    ecx,eax
c001309b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001309d:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00130a3:	8d 74 24 38          	lea    esi,[esp+0x38]
c00130a7:	89 c1                	mov    ecx,eax
c00130a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00130ab:	83 c4 18             	add    esp,0x18
c00130ae:	68 00 3d 02 c0       	push   0xc0023d00
c00130b3:	55                   	push   ebp
c00130b4:	e8 df d7 fe ff       	call   c0000898 <strcmp>
c00130b9:	83 c4 10             	add    esp,0x10
c00130bc:	85 c0                	test   eax,eax
c00130be:	75 0f                	jne    c00130cf <CPU::detectFeatures()+0x1a9>
c00130c0:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00130ca:	e9 22 02 00 00       	jmp    c00132f1 <CPU::detectFeatures()+0x3cb>
c00130cf:	50                   	push   eax
c00130d0:	50                   	push   eax
c00130d1:	68 0d 3d 02 c0       	push   0xc0023d0d
c00130d6:	55                   	push   ebp
c00130d7:	e8 bc d7 fe ff       	call   c0000898 <strcmp>
c00130dc:	83 c4 10             	add    esp,0x10
c00130df:	85 c0                	test   eax,eax
c00130e1:	74 dd                	je     c00130c0 <CPU::detectFeatures()+0x19a>
c00130e3:	50                   	push   eax
c00130e4:	50                   	push   eax
c00130e5:	68 1a 3d 02 c0       	push   0xc0023d1a
c00130ea:	55                   	push   ebp
c00130eb:	e8 a8 d7 fe ff       	call   c0000898 <strcmp>
c00130f0:	83 c4 10             	add    esp,0x10
c00130f3:	85 c0                	test   eax,eax
c00130f5:	74 2a                	je     c0013121 <CPU::detectFeatures()+0x1fb>
c00130f7:	50                   	push   eax
c00130f8:	50                   	push   eax
c00130f9:	68 27 3d 02 c0       	push   0xc0023d27
c00130fe:	55                   	push   ebp
c00130ff:	e8 94 d7 fe ff       	call   c0000898 <strcmp>
c0013104:	83 c4 10             	add    esp,0x10
c0013107:	85 c0                	test   eax,eax
c0013109:	74 16                	je     c0013121 <CPU::detectFeatures()+0x1fb>
c001310b:	50                   	push   eax
c001310c:	50                   	push   eax
c001310d:	68 34 3d 02 c0       	push   0xc0023d34
c0013112:	55                   	push   ebp
c0013113:	e8 80 d7 fe ff       	call   c0000898 <strcmp>
c0013118:	83 c4 10             	add    esp,0x10
c001311b:	85 c0                	test   eax,eax
c001311d:	74 48                	je     c0013167 <CPU::detectFeatures()+0x241>
c001311f:	eb 0f                	jmp    c0013130 <CPU::detectFeatures()+0x20a>
c0013121:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001312b:	e9 c1 01 00 00       	jmp    c00132f1 <CPU::detectFeatures()+0x3cb>
c0013130:	50                   	push   eax
c0013131:	50                   	push   eax
c0013132:	68 41 3d 02 c0       	push   0xc0023d41
c0013137:	55                   	push   ebp
c0013138:	e8 5b d7 fe ff       	call   c0000898 <strcmp>
c001313d:	83 c4 10             	add    esp,0x10
c0013140:	85 c0                	test   eax,eax
c0013142:	74 23                	je     c0013167 <CPU::detectFeatures()+0x241>
c0013144:	57                   	push   edi
c0013145:	57                   	push   edi
c0013146:	68 4e 3d 02 c0       	push   0xc0023d4e
c001314b:	55                   	push   ebp
c001314c:	e8 47 d7 fe ff       	call   c0000898 <strcmp>
c0013151:	83 c4 10             	add    esp,0x10
c0013154:	85 c0                	test   eax,eax
c0013156:	75 1e                	jne    c0013176 <CPU::detectFeatures()+0x250>
c0013158:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013162:	e9 8a 01 00 00       	jmp    c00132f1 <CPU::detectFeatures()+0x3cb>
c0013167:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013171:	e9 7b 01 00 00       	jmp    c00132f1 <CPU::detectFeatures()+0x3cb>
c0013176:	56                   	push   esi
c0013177:	56                   	push   esi
c0013178:	68 5b 3d 02 c0       	push   0xc0023d5b
c001317d:	55                   	push   ebp
c001317e:	e8 15 d7 fe ff       	call   c0000898 <strcmp>
c0013183:	83 c4 10             	add    esp,0x10
c0013186:	85 c0                	test   eax,eax
c0013188:	75 0f                	jne    c0013199 <CPU::detectFeatures()+0x273>
c001318a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013194:	e9 58 01 00 00       	jmp    c00132f1 <CPU::detectFeatures()+0x3cb>
c0013199:	51                   	push   ecx
c001319a:	51                   	push   ecx
c001319b:	68 1a 3d 02 c0       	push   0xc0023d1a
c00131a0:	55                   	push   ebp
c00131a1:	e8 f2 d6 fe ff       	call   c0000898 <strcmp>
c00131a6:	83 c4 10             	add    esp,0x10
c00131a9:	85 c0                	test   eax,eax
c00131ab:	75 0f                	jne    c00131bc <CPU::detectFeatures()+0x296>
c00131ad:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00131b7:	e9 35 01 00 00       	jmp    c00132f1 <CPU::detectFeatures()+0x3cb>
c00131bc:	52                   	push   edx
c00131bd:	52                   	push   edx
c00131be:	68 68 3d 02 c0       	push   0xc0023d68
c00131c3:	55                   	push   ebp
c00131c4:	e8 cf d6 fe ff       	call   c0000898 <strcmp>
c00131c9:	83 c4 10             	add    esp,0x10
c00131cc:	85 c0                	test   eax,eax
c00131ce:	75 0f                	jne    c00131df <CPU::detectFeatures()+0x2b9>
c00131d0:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00131da:	e9 12 01 00 00       	jmp    c00132f1 <CPU::detectFeatures()+0x3cb>
c00131df:	50                   	push   eax
c00131e0:	50                   	push   eax
c00131e1:	68 75 3d 02 c0       	push   0xc0023d75
c00131e6:	55                   	push   ebp
c00131e7:	e8 ac d6 fe ff       	call   c0000898 <strcmp>
c00131ec:	83 c4 10             	add    esp,0x10
c00131ef:	85 c0                	test   eax,eax
c00131f1:	75 0f                	jne    c0013202 <CPU::detectFeatures()+0x2dc>
c00131f3:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00131fd:	e9 ef 00 00 00       	jmp    c00132f1 <CPU::detectFeatures()+0x3cb>
c0013202:	50                   	push   eax
c0013203:	50                   	push   eax
c0013204:	68 82 3d 02 c0       	push   0xc0023d82
c0013209:	55                   	push   ebp
c001320a:	e8 89 d6 fe ff       	call   c0000898 <strcmp>
c001320f:	83 c4 10             	add    esp,0x10
c0013212:	85 c0                	test   eax,eax
c0013214:	75 0f                	jne    c0013225 <CPU::detectFeatures()+0x2ff>
c0013216:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013220:	e9 cc 00 00 00       	jmp    c00132f1 <CPU::detectFeatures()+0x3cb>
c0013225:	50                   	push   eax
c0013226:	50                   	push   eax
c0013227:	68 8f 3d 02 c0       	push   0xc0023d8f
c001322c:	55                   	push   ebp
c001322d:	e8 66 d6 fe ff       	call   c0000898 <strcmp>
c0013232:	83 c4 10             	add    esp,0x10
c0013235:	85 c0                	test   eax,eax
c0013237:	75 0f                	jne    c0013248 <CPU::detectFeatures()+0x322>
c0013239:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013243:	e9 a9 00 00 00       	jmp    c00132f1 <CPU::detectFeatures()+0x3cb>
c0013248:	50                   	push   eax
c0013249:	50                   	push   eax
c001324a:	68 9c 3d 02 c0       	push   0xc0023d9c
c001324f:	55                   	push   ebp
c0013250:	e8 43 d6 fe ff       	call   c0000898 <strcmp>
c0013255:	83 c4 10             	add    esp,0x10
c0013258:	85 c0                	test   eax,eax
c001325a:	75 0f                	jne    c001326b <CPU::detectFeatures()+0x345>
c001325c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013266:	e9 86 00 00 00       	jmp    c00132f1 <CPU::detectFeatures()+0x3cb>
c001326b:	50                   	push   eax
c001326c:	50                   	push   eax
c001326d:	68 a9 3d 02 c0       	push   0xc0023da9
c0013272:	55                   	push   ebp
c0013273:	e8 20 d6 fe ff       	call   c0000898 <strcmp>
c0013278:	83 c4 10             	add    esp,0x10
c001327b:	85 c0                	test   eax,eax
c001327d:	75 0c                	jne    c001328b <CPU::detectFeatures()+0x365>
c001327f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013289:	eb 66                	jmp    c00132f1 <CPU::detectFeatures()+0x3cb>
c001328b:	50                   	push   eax
c001328c:	50                   	push   eax
c001328d:	68 b6 3d 02 c0       	push   0xc0023db6
c0013292:	55                   	push   ebp
c0013293:	e8 00 d6 fe ff       	call   c0000898 <strcmp>
c0013298:	83 c4 10             	add    esp,0x10
c001329b:	85 c0                	test   eax,eax
c001329d:	75 0c                	jne    c00132ab <CPU::detectFeatures()+0x385>
c001329f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00132a9:	eb 46                	jmp    c00132f1 <CPU::detectFeatures()+0x3cb>
c00132ab:	57                   	push   edi
c00132ac:	57                   	push   edi
c00132ad:	68 c3 3d 02 c0       	push   0xc0023dc3
c00132b2:	55                   	push   ebp
c00132b3:	e8 e0 d5 fe ff       	call   c0000898 <strcmp>
c00132b8:	83 c4 10             	add    esp,0x10
c00132bb:	85 c0                	test   eax,eax
c00132bd:	74 e0                	je     c001329f <CPU::detectFeatures()+0x379>
c00132bf:	56                   	push   esi
c00132c0:	56                   	push   esi
c00132c1:	68 d0 3d 02 c0       	push   0xc0023dd0
c00132c6:	55                   	push   ebp
c00132c7:	e8 cc d5 fe ff       	call   c0000898 <strcmp>
c00132cc:	83 c4 10             	add    esp,0x10
c00132cf:	85 c0                	test   eax,eax
c00132d1:	74 cc                	je     c001329f <CPU::detectFeatures()+0x379>
c00132d3:	51                   	push   ecx
c00132d4:	51                   	push   ecx
c00132d5:	68 dd 3d 02 c0       	push   0xc0023ddd
c00132da:	55                   	push   ebp
c00132db:	e8 b8 d5 fe ff       	call   c0000898 <strcmp>
c00132e0:	83 c4 10             	add    esp,0x10
c00132e3:	85 c0                	test   eax,eax
c00132e5:	74 b8                	je     c001329f <CPU::detectFeatures()+0x379>
c00132e7:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00132f1:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00132f6:	0f 86 be 00 00 00    	jbe    c00133ba <CPU::detectFeatures()+0x494>
c00132fc:	83 ec 0c             	sub    esp,0xc
c00132ff:	68 80 00 00 00       	push   0x80
c0013304:	e8 31 fb ff ff       	call   c0012e3a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013309:	83 e0 01             	and    eax,0x1
c001330c:	c1 e0 06             	shl    eax,0x6
c001330f:	88 c2                	mov    dl,al
c0013311:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013317:	83 e0 bf             	and    eax,0xffffffbf
c001331a:	09 d0                	or     eax,edx
c001331c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013322:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013329:	e8 0c fb ff ff       	call   c0012e3a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001332e:	83 e0 01             	and    eax,0x1
c0013331:	c1 e0 04             	shl    eax,0x4
c0013334:	88 c2                	mov    dl,al
c0013336:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001333c:	83 e0 ef             	and    eax,0xffffffef
c001333f:	09 d0                	or     eax,edx
c0013341:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013347:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001334e:	e8 e7 fa ff ff       	call   c0012e3a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013353:	c1 e0 07             	shl    eax,0x7
c0013356:	88 c2                	mov    dl,al
c0013358:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001335e:	83 e0 7f             	and    eax,0x7f
c0013361:	09 d0                	or     eax,edx
c0013363:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013369:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013370:	e8 f3 fa ff ff       	call   c0012e68 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013375:	83 e0 01             	and    eax,0x1
c0013378:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001337f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013385:	83 e0 f7             	and    eax,0xfffffff7
c0013388:	09 d0                	or     eax,edx
c001338a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013390:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0013397:	e8 cc fa ff ff       	call   c0012e68 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001339c:	83 c4 10             	add    esp,0x10
c001339f:	83 e0 01             	and    eax,0x1
c00133a2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00133a9:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00133af:	83 e0 fb             	and    eax,0xfffffffb
c00133b2:	09 d0                	or     eax,edx
c00133b4:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00133ba:	83 ec 0c             	sub    esp,0xc
c00133bd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00133c1:	50                   	push   eax
c00133c2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00133c6:	50                   	push   eax
c00133c7:	8d 74 24 28          	lea    esi,[esp+0x28]
c00133cb:	56                   	push   esi
c00133cc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00133d0:	50                   	push   eax
c00133d1:	6a 01                	push   0x1
c00133d3:	e8 82 f9 ff ff       	call   c0012d5a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00133d8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00133dc:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00133e2:	88 ca                	mov    dl,cl
c00133e4:	83 e0 f0             	and    eax,0xfffffff0
c00133e7:	83 e2 0f             	and    edx,0xf
c00133ea:	09 d0                	or     eax,edx
c00133ec:	88 ca                	mov    dl,cl
c00133ee:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00133f4:	c0 ea 04             	shr    dl,0x4
c00133f7:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00133fb:	0f b6 c2             	movzx  eax,dl
c00133fe:	83 c4 20             	add    esp,0x20
c0013401:	c1 e0 06             	shl    eax,0x6
c0013404:	89 c7                	mov    edi,eax
c0013406:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001340c:	66 25 3f c0          	and    ax,0xc03f
c0013410:	09 f8                	or     eax,edi
c0013412:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0013419:	89 c8                	mov    eax,ecx
c001341b:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0013422:	c1 e8 08             	shr    eax,0x8
c0013425:	83 e5 3f             	and    ebp,0x3f
c0013428:	83 e0 0f             	and    eax,0xf
c001342b:	89 c7                	mov    edi,eax
c001342d:	c1 e7 06             	shl    edi,0x6
c0013430:	09 ef                	or     edi,ebp
c0013432:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0013439:	89 fa                	mov    edx,edi
c001343b:	83 e5 c0             	and    ebp,0xffffffc0
c001343e:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0013444:	88 c2                	mov    dl,al
c0013446:	c0 ea 02             	shr    dl,0x2
c0013449:	89 d7                	mov    edi,edx
c001344b:	09 ef                	or     edi,ebp
c001344d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0013453:	89 fa                	mov    edx,edi
c0013455:	83 e5 cf             	and    ebp,0xffffffcf
c0013458:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001345e:	89 cf                	mov    edi,ecx
c0013460:	c1 ef 0c             	shr    edi,0xc
c0013463:	83 e7 03             	and    edi,0x3
c0013466:	c1 e7 04             	shl    edi,0x4
c0013469:	09 ef                	or     edi,ebp
c001346b:	3c 06                	cmp    al,0x6
c001346d:	89 fa                	mov    edx,edi
c001346f:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0013475:	74 04                	je     c001347b <CPU::detectFeatures()+0x555>
c0013477:	3c 0f                	cmp    al,0xf
c0013479:	75 5c                	jne    c00134d7 <CPU::detectFeatures()+0x5b1>
c001347b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001347f:	89 cf                	mov    edi,ecx
c0013481:	c1 ef 10             	shr    edi,0x10
c0013484:	c1 e7 04             	shl    edi,0x4
c0013487:	09 fa                	or     edx,edi
c0013489:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c001348f:	0f b6 d2             	movzx  edx,dl
c0013492:	66 81 e7 3f c0       	and    di,0xc03f
c0013497:	c1 e2 06             	shl    edx,0x6
c001349a:	09 fa                	or     edx,edi
c001349c:	3c 0f                	cmp    al,0xf
c001349e:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00134a5:	75 30                	jne    c00134d7 <CPU::detectFeatures()+0x5b1>
c00134a7:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00134ad:	c1 e9 14             	shr    ecx,0x14
c00134b0:	83 e0 3f             	and    eax,0x3f
c00134b3:	83 c1 0f             	add    ecx,0xf
c00134b6:	88 ca                	mov    dl,cl
c00134b8:	c0 e9 02             	shr    cl,0x2
c00134bb:	c1 e2 06             	shl    edx,0x6
c00134be:	09 d0                	or     eax,edx
c00134c0:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00134c6:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00134cc:	83 e0 c0             	and    eax,0xffffffc0
c00134cf:	09 c1                	or     ecx,eax
c00134d1:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00134d7:	83 ec 0c             	sub    esp,0xc
c00134da:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00134e1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00134e5:	50                   	push   eax
c00134e6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00134ea:	55                   	push   ebp
c00134eb:	56                   	push   esi
c00134ec:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00134f0:	57                   	push   edi
c00134f1:	68 00 00 00 80       	push   0x80000000
c00134f6:	e8 5f f8 ff ff       	call   c0012d5a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00134fb:	83 c4 20             	add    esp,0x20
c00134fe:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0013506:	76 22                	jbe    c001352a <CPU::detectFeatures()+0x604>
c0013508:	83 ec 0c             	sub    esp,0xc
c001350b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001350f:	50                   	push   eax
c0013510:	55                   	push   ebp
c0013511:	56                   	push   esi
c0013512:	57                   	push   edi
c0013513:	68 01 00 00 80       	push   0x80000001
c0013518:	e8 3d f8 ff ff       	call   c0012d5a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001351d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0013527:	83 c4 20             	add    esp,0x20
c001352a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0013530:	83 f8 01             	cmp    eax,0x1
c0013533:	75 6f                	jne    c00135a4 <CPU::detectFeatures()+0x67e>
c0013535:	51                   	push   ecx
c0013536:	51                   	push   ecx
c0013537:	68 e9 3d 02 c0       	push   0xc0023de9
c001353c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013540:	56                   	push   esi
c0013541:	e8 c6 d2 fe ff       	call   c000080c <strcpy>
c0013546:	5f                   	pop    edi
c0013547:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001354d:	5d                   	pop    ebp
c001354e:	66 c1 e8 06          	shr    ax,0x6
c0013552:	0f b6 c0             	movzx  eax,al
c0013555:	50                   	push   eax
c0013556:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001355c:	c1 e8 0e             	shr    eax,0xe
c001355f:	0f b6 c0             	movzx  eax,al
c0013562:	50                   	push   eax
c0013563:	e8 9c f4 ff ff       	call   c0012a04 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0013568:	5a                   	pop    edx
c0013569:	59                   	pop    ecx
c001356a:	50                   	push   eax
c001356b:	56                   	push   esi
c001356c:	e8 db d3 fe ff       	call   c000094c <strcat>
c0013571:	5f                   	pop    edi
c0013572:	5d                   	pop    ebp
c0013573:	56                   	push   esi
c0013574:	53                   	push   ebx
c0013575:	e8 7e ab ff ff       	call   c000e0f8 <Device::setName(char const*)>
c001357a:	58                   	pop    eax
c001357b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013581:	5a                   	pop    edx
c0013582:	68 f0 3d 02 c0       	push   0xc0023df0
c0013587:	50                   	push   eax
c0013588:	e8 0b d3 fe ff       	call   c0000898 <strcmp>
c001358d:	83 c4 10             	add    esp,0x10
c0013590:	85 c0                	test   eax,eax
c0013592:	0f 85 71 03 00 00    	jne    c0013909 <CPU::detectFeatures()+0x9e3>
c0013598:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001359f:	e9 65 03 00 00       	jmp    c0013909 <CPU::detectFeatures()+0x9e3>
c00135a4:	83 f8 02             	cmp    eax,0x2
c00135a7:	0f 85 b5 00 00 00    	jne    c0013662 <CPU::detectFeatures()+0x73c>
c00135ad:	57                   	push   edi
c00135ae:	57                   	push   edi
c00135af:	68 02 3e 02 c0       	push   0xc0023e02
c00135b4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00135b8:	56                   	push   esi
c00135b9:	e8 4e d2 fe ff       	call   c000080c <strcpy>
c00135be:	5d                   	pop    ebp
c00135bf:	58                   	pop    eax
c00135c0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00135c6:	66 c1 e8 06          	shr    ax,0x6
c00135ca:	0f b6 c0             	movzx  eax,al
c00135cd:	50                   	push   eax
c00135ce:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00135d4:	c1 e8 0e             	shr    eax,0xe
c00135d7:	0f b6 c0             	movzx  eax,al
c00135da:	50                   	push   eax
c00135db:	e8 90 f2 ff ff       	call   c0012870 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00135e0:	5a                   	pop    edx
c00135e1:	59                   	pop    ecx
c00135e2:	50                   	push   eax
c00135e3:	56                   	push   esi
c00135e4:	e8 63 d3 fe ff       	call   c000094c <strcat>
c00135e9:	5f                   	pop    edi
c00135ea:	5d                   	pop    ebp
c00135eb:	56                   	push   esi
c00135ec:	53                   	push   ebx
c00135ed:	e8 06 ab ff ff       	call   c000e0f8 <Device::setName(char const*)>
c00135f2:	58                   	pop    eax
c00135f3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00135f9:	5a                   	pop    edx
c00135fa:	68 07 3e 02 c0       	push   0xc0023e07
c00135ff:	50                   	push   eax
c0013600:	e8 93 d2 fe ff       	call   c0000898 <strcmp>
c0013605:	83 c4 10             	add    esp,0x10
c0013608:	85 c0                	test   eax,eax
c001360a:	75 20                	jne    c001362c <CPU::detectFeatures()+0x706>
c001360c:	8b 15 68 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026268
c0013612:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013618:	a8 01                	test   al,0x1
c001361a:	74 10                	je     c001362c <CPU::detectFeatures()+0x706>
c001361c:	83 e0 fe             	and    eax,0xfffffffe
c001361f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013625:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001362c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013632:	c1 e8 0e             	shr    eax,0xe
c0013635:	3c 05                	cmp    al,0x5
c0013637:	0f 85 cc 02 00 00    	jne    c0013909 <CPU::detectFeatures()+0x9e3>
c001363d:	56                   	push   esi
c001363e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013644:	83 e0 0f             	and    eax,0xf
c0013647:	50                   	push   eax
c0013648:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001364e:	66 c1 e8 06          	shr    ax,0x6
c0013652:	0f b6 c0             	movzx  eax,al
c0013655:	50                   	push   eax
c0013656:	6a 05                	push   0x5
c0013658:	e8 89 f6 ff ff       	call   c0012ce6 <CPU::AMD_K6_writeback(int, int, int)>
c001365d:	e9 1f 02 00 00       	jmp    c0013881 <CPU::detectFeatures()+0x95b>
c0013662:	8d 50 fd             	lea    edx,[eax-0x3]
c0013665:	83 fa 01             	cmp    edx,0x1
c0013668:	76 09                	jbe    c0013673 <CPU::detectFeatures()+0x74d>
c001366a:	83 f8 06             	cmp    eax,0x6
c001366d:	0f 85 91 01 00 00    	jne    c0013804 <CPU::detectFeatures()+0x8de>
c0013673:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013679:	c1 ea 0e             	shr    edx,0xe
c001367c:	80 fa 05             	cmp    dl,0x5
c001367f:	75 7b                	jne    c00136fc <CPU::detectFeatures()+0x7d6>
c0013681:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013687:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001368c:	66 81 fa 00 01       	cmp    dx,0x100
c0013691:	75 0c                	jne    c001369f <CPU::detectFeatures()+0x779>
c0013693:	51                   	push   ecx
c0013694:	51                   	push   ecx
c0013695:	68 0e 3e 02 c0       	push   0xc0023e0e
c001369a:	e9 dc 01 00 00       	jmp    c001387b <CPU::detectFeatures()+0x955>
c001369f:	66 81 fa 00 02       	cmp    dx,0x200
c00136a4:	75 0c                	jne    c00136b2 <CPU::detectFeatures()+0x78c>
c00136a6:	52                   	push   edx
c00136a7:	52                   	push   edx
c00136a8:	68 21 3e 02 c0       	push   0xc0023e21
c00136ad:	e9 c9 01 00 00       	jmp    c001387b <CPU::detectFeatures()+0x955>
c00136b2:	66 81 fa 40 02       	cmp    dx,0x240
c00136b7:	75 0c                	jne    c00136c5 <CPU::detectFeatures()+0x79f>
c00136b9:	50                   	push   eax
c00136ba:	50                   	push   eax
c00136bb:	68 33 3e 02 c0       	push   0xc0023e33
c00136c0:	e9 b6 01 00 00       	jmp    c001387b <CPU::detectFeatures()+0x955>
c00136c5:	83 f8 06             	cmp    eax,0x6
c00136c8:	75 0c                	jne    c00136d6 <CPU::detectFeatures()+0x7b0>
c00136ca:	50                   	push   eax
c00136cb:	50                   	push   eax
c00136cc:	68 45 3e 02 c0       	push   0xc0023e45
c00136d1:	e9 a5 01 00 00       	jmp    c001387b <CPU::detectFeatures()+0x955>
c00136d6:	83 f8 04             	cmp    eax,0x4
c00136d9:	75 0c                	jne    c00136e7 <CPU::detectFeatures()+0x7c1>
c00136db:	50                   	push   eax
c00136dc:	50                   	push   eax
c00136dd:	68 51 3e 02 c0       	push   0xc0023e51
c00136e2:	e9 94 01 00 00       	jmp    c001387b <CPU::detectFeatures()+0x955>
c00136e7:	83 f8 03             	cmp    eax,0x3
c00136ea:	0f 85 19 02 00 00    	jne    c0013909 <CPU::detectFeatures()+0x9e3>
c00136f0:	50                   	push   eax
c00136f1:	50                   	push   eax
c00136f2:	68 59 3e 02 c0       	push   0xc0023e59
c00136f7:	e9 7f 01 00 00       	jmp    c001387b <CPU::detectFeatures()+0x955>
c00136fc:	80 fa 06             	cmp    dl,0x6
c00136ff:	0f 85 db 00 00 00    	jne    c00137e0 <CPU::detectFeatures()+0x8ba>
c0013705:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001370b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013710:	66 81 fa 80 01       	cmp    dx,0x180
c0013715:	75 0c                	jne    c0013723 <CPU::detectFeatures()+0x7fd>
c0013717:	50                   	push   eax
c0013718:	50                   	push   eax
c0013719:	68 64 3e 02 c0       	push   0xc0023e64
c001371e:	e9 58 01 00 00       	jmp    c001387b <CPU::detectFeatures()+0x955>
c0013723:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0013729:	66 f7 c1 80 ff       	test   cx,0xff80
c001372e:	75 0c                	jne    c001373c <CPU::detectFeatures()+0x816>
c0013730:	50                   	push   eax
c0013731:	50                   	push   eax
c0013732:	68 74 3e 02 c0       	push   0xc0023e74
c0013737:	e9 3f 01 00 00       	jmp    c001387b <CPU::detectFeatures()+0x955>
c001373c:	66 81 fa 40 02       	cmp    dx,0x240
c0013741:	75 0c                	jne    c001374f <CPU::detectFeatures()+0x829>
c0013743:	55                   	push   ebp
c0013744:	55                   	push   ebp
c0013745:	68 7b 3e 02 c0       	push   0xc0023e7b
c001374a:	e9 2c 01 00 00       	jmp    c001387b <CPU::detectFeatures()+0x955>
c001374f:	66 81 fa 80 02       	cmp    dx,0x280
c0013754:	75 0c                	jne    c0013762 <CPU::detectFeatures()+0x83c>
c0013756:	57                   	push   edi
c0013757:	57                   	push   edi
c0013758:	68 84 3e 02 c0       	push   0xc0023e84
c001375d:	e9 19 01 00 00       	jmp    c001387b <CPU::detectFeatures()+0x955>
c0013762:	66 81 fa 40 03       	cmp    dx,0x340
c0013767:	74 ed                	je     c0013756 <CPU::detectFeatures()+0x830>
c0013769:	66 81 fa c0 03       	cmp    dx,0x3c0
c001376e:	75 0c                	jne    c001377c <CPU::detectFeatures()+0x856>
c0013770:	56                   	push   esi
c0013771:	56                   	push   esi
c0013772:	68 8b 3e 02 c0       	push   0xc0023e8b
c0013777:	e9 ff 00 00 00       	jmp    c001387b <CPU::detectFeatures()+0x955>
c001377c:	83 f8 06             	cmp    eax,0x6
c001377f:	0f 84 45 ff ff ff    	je     c00136ca <CPU::detectFeatures()+0x7a4>
c0013785:	83 f8 04             	cmp    eax,0x4
c0013788:	0f 84 4d ff ff ff    	je     c00136db <CPU::detectFeatures()+0x7b5>
c001378e:	83 f8 03             	cmp    eax,0x3
c0013791:	0f 85 72 01 00 00    	jne    c0013909 <CPU::detectFeatures()+0x9e3>
c0013797:	51                   	push   ecx
c0013798:	51                   	push   ecx
c0013799:	68 94 3e 02 c0       	push   0xc0023e94
c001379e:	53                   	push   ebx
c001379f:	e8 54 a9 ff ff       	call   c000e0f8 <Device::setName(char const*)>
c00137a4:	b1 c1                	mov    cl,0xc1
c00137a6:	88 c8                	mov    al,cl
c00137a8:	e6 22                	out    0x22,al
c00137aa:	e4 23                	in     al,0x23
c00137ac:	88 c2                	mov    dl,al
c00137ae:	88 c8                	mov    al,cl
c00137b0:	e6 22                	out    0x22,al
c00137b2:	88 d0                	mov    al,dl
c00137b4:	83 c8 10             	or     eax,0x10
c00137b7:	e6 23                	out    0x23,al
c00137b9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00137c0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00137c3:	89 d0                	mov    eax,edx
c00137c5:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00137cb:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00137cf:	40                   	inc    eax
c00137d0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00137d6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00137db:	e9 a1 00 00 00       	jmp    c0013881 <CPU::detectFeatures()+0x95b>
c00137e0:	83 f8 06             	cmp    eax,0x6
c00137e3:	0f 84 e1 fe ff ff    	je     c00136ca <CPU::detectFeatures()+0x7a4>
c00137e9:	83 f8 04             	cmp    eax,0x4
c00137ec:	0f 84 e9 fe ff ff    	je     c00136db <CPU::detectFeatures()+0x7b5>
c00137f2:	83 f8 03             	cmp    eax,0x3
c00137f5:	0f 85 0e 01 00 00    	jne    c0013909 <CPU::detectFeatures()+0x9e3>
c00137fb:	52                   	push   edx
c00137fc:	52                   	push   edx
c00137fd:	68 9f 3e 02 c0       	push   0xc0023e9f
c0013802:	eb 77                	jmp    c001387b <CPU::detectFeatures()+0x955>
c0013804:	83 f8 07             	cmp    eax,0x7
c0013807:	75 09                	jne    c0013812 <CPU::detectFeatures()+0x8ec>
c0013809:	50                   	push   eax
c001380a:	50                   	push   eax
c001380b:	68 a9 3e 02 c0       	push   0xc0023ea9
c0013810:	eb 69                	jmp    c001387b <CPU::detectFeatures()+0x955>
c0013812:	83 f8 0a             	cmp    eax,0xa
c0013815:	75 09                	jne    c0013820 <CPU::detectFeatures()+0x8fa>
c0013817:	50                   	push   eax
c0013818:	50                   	push   eax
c0013819:	68 b4 3e 02 c0       	push   0xc0023eb4
c001381e:	eb 5b                	jmp    c001387b <CPU::detectFeatures()+0x955>
c0013820:	83 f8 0b             	cmp    eax,0xb
c0013823:	75 09                	jne    c001382e <CPU::detectFeatures()+0x908>
c0013825:	50                   	push   eax
c0013826:	50                   	push   eax
c0013827:	68 bc 3e 02 c0       	push   0xc0023ebc
c001382c:	eb 4d                	jmp    c001387b <CPU::detectFeatures()+0x955>
c001382e:	83 f8 08             	cmp    eax,0x8
c0013831:	75 09                	jne    c001383c <CPU::detectFeatures()+0x916>
c0013833:	50                   	push   eax
c0013834:	50                   	push   eax
c0013835:	68 c5 3e 02 c0       	push   0xc0023ec5
c001383a:	eb 3f                	jmp    c001387b <CPU::detectFeatures()+0x955>
c001383c:	83 f8 09             	cmp    eax,0x9
c001383f:	75 09                	jne    c001384a <CPU::detectFeatures()+0x924>
c0013841:	50                   	push   eax
c0013842:	50                   	push   eax
c0013843:	68 cd 3e 02 c0       	push   0xc0023ecd
c0013848:	eb 31                	jmp    c001387b <CPU::detectFeatures()+0x955>
c001384a:	83 f8 05             	cmp    eax,0x5
c001384d:	75 09                	jne    c0013858 <CPU::detectFeatures()+0x932>
c001384f:	50                   	push   eax
c0013850:	50                   	push   eax
c0013851:	68 d5 3e 02 c0       	push   0xc0023ed5
c0013856:	eb 23                	jmp    c001387b <CPU::detectFeatures()+0x955>
c0013858:	83 f8 0c             	cmp    eax,0xc
c001385b:	75 09                	jne    c0013866 <CPU::detectFeatures()+0x940>
c001385d:	55                   	push   ebp
c001385e:	55                   	push   ebp
c001385f:	68 e3 3e 02 c0       	push   0xc0023ee3
c0013864:	eb 15                	jmp    c001387b <CPU::detectFeatures()+0x955>
c0013866:	83 f8 0d             	cmp    eax,0xd
c0013869:	75 09                	jne    c0013874 <CPU::detectFeatures()+0x94e>
c001386b:	57                   	push   edi
c001386c:	57                   	push   edi
c001386d:	68 ee 3e 02 c0       	push   0xc0023eee
c0013872:	eb 07                	jmp    c001387b <CPU::detectFeatures()+0x955>
c0013874:	56                   	push   esi
c0013875:	56                   	push   esi
c0013876:	68 02 3f 02 c0       	push   0xc0023f02
c001387b:	53                   	push   ebx
c001387c:	e8 77 a8 ff ff       	call   c000e0f8 <Device::setName(char const*)>
c0013881:	83 c4 10             	add    esp,0x10
c0013884:	e9 80 00 00 00       	jmp    c0013909 <CPU::detectFeatures()+0x9e3>
c0013889:	51                   	push   ecx
c001388a:	51                   	push   ecx
c001388b:	68 4e 3d 02 c0       	push   0xc0023d4e
c0013890:	55                   	push   ebp
c0013891:	e8 76 cf fe ff       	call   c000080c <strcpy>
c0013896:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00138a0:	e8 09 ca fe ff       	call   c00002ae <is486>
c00138a5:	83 c4 10             	add    esp,0x10
c00138a8:	85 c0                	test   eax,eax
c00138aa:	74 2b                	je     c00138d7 <CPU::detectFeatures()+0x9b1>
c00138ac:	52                   	push   edx
c00138ad:	52                   	push   edx
c00138ae:	68 0e 3f 02 c0       	push   0xc0023f0e
c00138b3:	53                   	push   ebx
c00138b4:	e8 3f a8 ff ff       	call   c000e0f8 <Device::setName(char const*)>
c00138b9:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00138c0:	0f 20 c0             	mov    eax,cr0
c00138c3:	83 e0 14             	and    eax,0x14
c00138c6:	83 c4 10             	add    esp,0x10
c00138c9:	83 f8 04             	cmp    eax,0x4
c00138cc:	75 1f                	jne    c00138ed <CPU::detectFeatures()+0x9c7>
c00138ce:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00138d5:	eb 32                	jmp    c0013909 <CPU::detectFeatures()+0x9e3>
c00138d7:	50                   	push   eax
c00138d8:	50                   	push   eax
c00138d9:	68 19 3f 02 c0       	push   0xc0023f19
c00138de:	53                   	push   ebx
c00138df:	e8 14 a8 ff ff       	call   c000e0f8 <Device::setName(char const*)>
c00138e4:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00138eb:	eb d3                	jmp    c00138c0 <CPU::detectFeatures()+0x99a>
c00138ed:	e8 97 c9 fe ff       	call   c0000289 <hasLegacyFPU>
c00138f2:	83 e0 01             	and    eax,0x1
c00138f5:	8d 14 00             	lea    edx,[eax+eax*1]
c00138f8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00138fe:	83 e0 fd             	and    eax,0xfffffffd
c0013901:	09 d0                	or     eax,edx
c0013903:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013909:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0013910:	83 c4 4c             	add    esp,0x4c
c0013913:	5b                   	pop    ebx
c0013914:	5e                   	pop    esi
c0013915:	5f                   	pop    edi
c0013916:	5d                   	pop    ebp
c0013917:	c3                   	ret    

c0013918 <CPU::setupSMEP()>:
c0013918:	0f 20 e0             	mov    eax,cr4
c001391b:	0d 00 00 10 00       	or     eax,0x100000
c0013920:	0f 22 e0             	mov    cr4,eax
c0013923:	c3                   	ret    

c0013924 <CPU::setupUMIP()>:
c0013924:	0f 20 e0             	mov    eax,cr4
c0013927:	80 cc 08             	or     ah,0x8
c001392a:	0f 22 e0             	mov    cr4,eax
c001392d:	c3                   	ret    

c001392e <CPU::setupTSC()>:
c001392e:	0f 20 e0             	mov    eax,cr4
c0013931:	83 c8 04             	or     eax,0x4
c0013934:	0f 22 e0             	mov    cr4,eax
c0013937:	c3                   	ret    

c0013938 <CPU::setupLargePages()>:
c0013938:	0f 20 e0             	mov    eax,cr4
c001393b:	83 c8 10             	or     eax,0x10
c001393e:	0f 22 e0             	mov    cr4,eax
c0013941:	c3                   	ret    

c0013942 <CPU::setupPAT()>:
c0013942:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0013947:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001394e:	74 2c                	je     c001397c <CPU::setupPAT()+0x3a>
c0013950:	53                   	push   ebx
c0013951:	83 ec 10             	sub    esp,0x10
c0013954:	68 77 02 00 00       	push   0x277
c0013959:	50                   	push   eax
c001395a:	e8 65 56 ff ff       	call   c0008fc4 <Computer::rdmsr(unsigned int)>
c001395f:	83 e2 f8             	and    edx,0xfffffff8
c0013962:	83 ca 01             	or     edx,0x1
c0013965:	52                   	push   edx
c0013966:	50                   	push   eax
c0013967:	68 77 02 00 00       	push   0x277
c001396c:	ff 35 68 62 02 c0    	push   DWORD PTR ds:0xc0026268
c0013972:	e8 79 56 ff ff       	call   c0008ff0 <Computer::wrmsr(unsigned int, unsigned long long)>
c0013977:	83 c4 28             	add    esp,0x28
c001397a:	5b                   	pop    ebx
c001397b:	c3                   	ret    
c001397c:	c3                   	ret    
c001397d:	90                   	nop

c001397e <CPU::setupMTRR()>:
c001397e:	c3                   	ret    
c001397f:	90                   	nop

c0013980 <CPU::setupGlobalPages()>:
c0013980:	0f 20 e0             	mov    eax,cr4
c0013983:	0c 80                	or     al,0x80
c0013985:	0f 22 e0             	mov    cr4,eax
c0013988:	c3                   	ret    
c0013989:	90                   	nop

c001398a <CPU::allowUsermodeDataAccess()>:
c001398a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001398e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013995:	74 03                	je     c001399a <CPU::allowUsermodeDataAccess()+0x10>
c0013997:	0f 01 cb             	stac   
c001399a:	c3                   	ret    
c001399b:	90                   	nop

c001399c <CPU::prohibitUsermodeDataAccess()>:
c001399c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139a0:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00139a7:	74 03                	je     c00139ac <CPU::prohibitUsermodeDataAccess()+0x10>
c00139a9:	0f 01 ca             	clac   
c00139ac:	c3                   	ret    
c00139ad:	90                   	nop

c00139ae <CPU::setupSMAP()>:
c00139ae:	0f 20 e0             	mov    eax,cr4
c00139b1:	0d 00 00 20 00       	or     eax,0x200000
c00139b6:	0f 22 e0             	mov    cr4,eax
c00139b9:	eb e1                	jmp    c001399c <CPU::prohibitUsermodeDataAccess()>
c00139bb:	90                   	nop

c00139bc <CPU::setupFeatures()>:
c00139bc:	83 ec 0c             	sub    esp,0xc
c00139bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139c3:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00139ca:	74 07                	je     c00139d3 <CPU::setupFeatures()+0x17>
c00139cc:	52                   	push   edx
c00139cd:	e8 46 ff ff ff       	call   c0013918 <CPU::setupSMEP()>
c00139d2:	58                   	pop    eax
c00139d3:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00139da:	74 07                	je     c00139e3 <CPU::setupFeatures()+0x27>
c00139dc:	52                   	push   edx
c00139dd:	e8 cc ff ff ff       	call   c00139ae <CPU::setupSMAP()>
c00139e2:	58                   	pop    eax
c00139e3:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00139ea:	74 07                	je     c00139f3 <CPU::setupFeatures()+0x37>
c00139ec:	52                   	push   edx
c00139ed:	e8 32 ff ff ff       	call   c0013924 <CPU::setupUMIP()>
c00139f2:	58                   	pop    eax
c00139f3:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00139fa:	74 07                	je     c0013a03 <CPU::setupFeatures()+0x47>
c00139fc:	52                   	push   edx
c00139fd:	e8 2c ff ff ff       	call   c001392e <CPU::setupTSC()>
c0013a02:	58                   	pop    eax
c0013a03:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0013a0a:	74 07                	je     c0013a13 <CPU::setupFeatures()+0x57>
c0013a0c:	52                   	push   edx
c0013a0d:	e8 26 ff ff ff       	call   c0013938 <CPU::setupLargePages()>
c0013a12:	59                   	pop    ecx
c0013a13:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0013a1a:	74 07                	je     c0013a23 <CPU::setupFeatures()+0x67>
c0013a1c:	52                   	push   edx
c0013a1d:	e8 5e ff ff ff       	call   c0013980 <CPU::setupGlobalPages()>
c0013a22:	58                   	pop    eax
c0013a23:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0013a2a:	74 0c                	je     c0013a38 <CPU::setupFeatures()+0x7c>
c0013a2c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a30:	83 c4 0c             	add    esp,0xc
c0013a33:	e9 0a ff ff ff       	jmp    c0013942 <CPU::setupPAT()>
c0013a38:	83 c4 0c             	add    esp,0xc
c0013a3b:	c3                   	ret    

c0013a3c <CPU::open(int, int, void*)>:
c0013a3c:	57                   	push   edi
c0013a3d:	56                   	push   esi
c0013a3e:	53                   	push   ebx
c0013a3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a43:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a47:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0013a4d:	83 ec 0c             	sub    esp,0xc
c0013a50:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0013a56:	68 24 3f 02 c0       	push   0xc0023f24
c0013a5b:	e8 57 60 ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0013a60:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0013a66:	89 04 24             	mov    DWORD PTR [esp],eax
c0013a69:	e8 ee 58 ff ff       	call   c000935c <GDT::setup()>
c0013a6e:	c7 04 24 36 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f36
c0013a75:	e8 3d 60 ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0013a7a:	83 c4 0c             	add    esp,0xc
c0013a7d:	6a 00                	push   0x0
c0013a7f:	68 ef be ad de       	push   0xdeadbeef
c0013a84:	57                   	push   edi
c0013a85:	e8 e0 75 ff ff       	call   c000b06a <TSS::setup(unsigned long, unsigned long)>
c0013a8a:	c7 04 24 48 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f48
c0013a91:	e8 21 60 ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0013a96:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013a99:	e8 ac 75 ff ff       	call   c000b04a <TSS::flush()>
c0013a9e:	c7 04 24 5c 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f5c
c0013aa5:	e8 0d 60 ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0013aaa:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0013ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0013ab3:	e8 08 5b ff ff       	call   c00095c0 <IDT::setup()>
c0013ab8:	c7 04 24 6e 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f6e
c0013abf:	e8 f3 5f ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0013ac4:	b8 00 04 00 00       	mov    eax,0x400
c0013ac9:	0f 23 f8             	mov    db7,eax
c0013acc:	c7 04 24 8c 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f8c
c0013ad3:	e8 df 5f ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0013ad8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0013ae2:	e8 72 63 ff ff       	call   c0009e59 <Phys::allocatePage()>
c0013ae7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0013aed:	89 30                	mov    DWORD PTR [eax],esi
c0013aef:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0013af5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0013af8:	c7 04 24 ae 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fae
c0013aff:	e8 b3 5f ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0013b04:	58                   	pop    eax
c0013b05:	5a                   	pop    edx
c0013b06:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0013b0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013b10:	e8 4f 85 ff ff       	call   c000c064 <VAS::setCPUSpecific(unsigned long)>
c0013b15:	c7 04 24 d6 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fd6
c0013b1c:	e8 96 5f ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0013b21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b24:	e8 fd f3 ff ff       	call   c0012f26 <CPU::detectFeatures()>
c0013b29:	c7 04 24 f9 3f 02 c0 	mov    DWORD PTR [esp],0xc0023ff9
c0013b30:	e8 82 5f ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0013b35:	e8 18 ba ff ff       	call   c000f552 <setupInterruptController()>
c0013b3a:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0013b40:	c7 04 24 1d 40 02 c0 	mov    DWORD PTR [esp],0xc002401d
c0013b47:	e8 6b 5f ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0013b4c:	a1 80 62 02 c0       	mov    eax,ds:0xc0026280
c0013b51:	83 e0 10             	and    eax,0x10
c0013b54:	83 f8 01             	cmp    eax,0x1
c0013b57:	19 c0                	sbb    eax,eax
c0013b59:	83 e0 46             	and    eax,0x46
c0013b5c:	83 c0 1e             	add    eax,0x1e
c0013b5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0013b62:	e8 d8 cf ff ff       	call   c0010b3f <setupTimer(int)>
c0013b67:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0013b6d:	c7 04 24 38 40 02 c0 	mov    DWORD PTR [esp],0xc0024038
c0013b74:	e8 3e 5f ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0013b79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b7c:	e8 3b fe ff ff       	call   c00139bc <CPU::setupFeatures()>
c0013b81:	c7 04 24 53 40 02 c0 	mov    DWORD PTR [esp],0xc0024053
c0013b88:	e8 2a 5f ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0013b8d:	83 c4 10             	add    esp,0x10
c0013b90:	31 c0                	xor    eax,eax
c0013b92:	5b                   	pop    ebx
c0013b93:	5e                   	pop    esi
c0013b94:	5f                   	pop    edi
c0013b95:	c3                   	ret    

c0013b96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0013b96:	57                   	push   edi
c0013b97:	56                   	push   esi
c0013b98:	53                   	push   ebx
c0013b99:	51                   	push   ecx
c0013b9a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013b9e:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0013ba1:	0f 02 c0             	lar    eax,ax
c0013ba4:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0013ba7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013bab:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0013bae:	88 ca                	mov    dl,cl
c0013bb0:	c0 ea 06             	shr    dl,0x6
c0013bb3:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0013bb7:	89 ca                	mov    edx,ecx
c0013bb9:	66 c1 ea 03          	shr    dx,0x3
c0013bbd:	83 e2 07             	and    edx,0x7
c0013bc0:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0013bc5:	88 17                	mov    BYTE PTR [edi],dl
c0013bc7:	0f 84 a6 01 00 00    	je     c0013d73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0013bcd:	83 e1 07             	and    ecx,0x7
c0013bd0:	80 f9 04             	cmp    cl,0x4
c0013bd3:	0f 84 98 00 00 00    	je     c0013c71 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0013bd9:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013bde:	0f 95 c0             	setne  al
c0013be1:	80 f9 05             	cmp    cl,0x5
c0013be4:	0f 95 c2             	setne  dl
c0013be7:	08 c2                	or     dl,al
c0013be9:	74 79                	je     c0013c64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0013beb:	84 c9                	test   cl,cl
c0013bed:	75 05                	jne    c0013bf4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0013bef:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013bf2:	eb 3c                	jmp    c0013c30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013bf4:	80 f9 01             	cmp    cl,0x1
c0013bf7:	75 05                	jne    c0013bfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0013bf9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013bfc:	eb 32                	jmp    c0013c30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013bfe:	80 f9 02             	cmp    cl,0x2
c0013c01:	75 05                	jne    c0013c08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0013c03:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013c06:	eb 28                	jmp    c0013c30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013c08:	31 c0                	xor    eax,eax
c0013c0a:	80 f9 03             	cmp    cl,0x3
c0013c0d:	75 05                	jne    c0013c14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0013c0f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013c12:	eb 1c                	jmp    c0013c30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013c14:	80 f9 05             	cmp    cl,0x5
c0013c17:	75 05                	jne    c0013c1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0013c19:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013c1c:	eb 12                	jmp    c0013c30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013c1e:	80 f9 06             	cmp    cl,0x6
c0013c21:	75 05                	jne    c0013c28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0013c23:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013c26:	eb 08                	jmp    c0013c30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013c28:	80 f9 07             	cmp    cl,0x7
c0013c2b:	75 03                	jne    c0013c30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013c2d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013c30:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013c35:	75 10                	jne    c0013c47 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0013c37:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0013c3b:	b9 03 00 00 00       	mov    ecx,0x3
c0013c40:	01 d0                	add    eax,edx
c0013c42:	e9 37 01 00 00       	jmp    c0013d7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013c47:	b9 02 00 00 00       	mov    ecx,0x2
c0013c4c:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0013c51:	0f 85 27 01 00 00    	jne    c0013d7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013c57:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0013c5a:	b9 06 00 00 00       	mov    ecx,0x6
c0013c5f:	e9 1a 01 00 00       	jmp    c0013d7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013c64:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0013c67:	b9 06 00 00 00       	mov    ecx,0x6
c0013c6c:	e9 0f 01 00 00       	jmp    c0013d80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c71:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0013c74:	88 ca                	mov    dl,cl
c0013c76:	c0 ea 06             	shr    dl,0x6
c0013c79:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0013c7d:	89 ca                	mov    edx,ecx
c0013c7f:	66 c1 ea 03          	shr    dx,0x3
c0013c83:	83 e2 07             	and    edx,0x7
c0013c86:	80 e1 07             	and    cl,0x7
c0013c89:	75 05                	jne    c0013c90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0013c8b:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0013c8e:	eb 4c                	jmp    c0013cdc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013c90:	80 f9 01             	cmp    cl,0x1
c0013c93:	75 05                	jne    c0013c9a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0013c95:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013c98:	eb 42                	jmp    c0013cdc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013c9a:	80 f9 02             	cmp    cl,0x2
c0013c9d:	75 05                	jne    c0013ca4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0013c9f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0013ca2:	eb 38                	jmp    c0013cdc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013ca4:	80 f9 03             	cmp    cl,0x3
c0013ca7:	75 05                	jne    c0013cae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0013ca9:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0013cac:	eb 2e                	jmp    c0013cdc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013cae:	80 f9 04             	cmp    cl,0x4
c0013cb1:	75 12                	jne    c0013cc5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0013cb3:	f6 c4 60             	test   ah,0x60
c0013cb6:	75 08                	jne    c0013cc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0013cb8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0013cbb:	8d 78 14             	lea    edi,[eax+0x14]
c0013cbe:	eb 1c                	jmp    c0013cdc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013cc0:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0013cc3:	eb 17                	jmp    c0013cdc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013cc5:	80 f9 05             	cmp    cl,0x5
c0013cc8:	75 05                	jne    c0013ccf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0013cca:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0013ccd:	eb 0d                	jmp    c0013cdc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013ccf:	80 f9 06             	cmp    cl,0x6
c0013cd2:	75 05                	jne    c0013cd9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0013cd4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0013cd7:	eb 03                	jmp    c0013cdc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013cd9:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0013cdc:	84 d2                	test   dl,dl
c0013cde:	75 05                	jne    c0013ce5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0013ce0:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013ce3:	eb 3c                	jmp    c0013d21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013ce5:	80 fa 01             	cmp    dl,0x1
c0013ce8:	75 05                	jne    c0013cef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0013cea:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013ced:	eb 32                	jmp    c0013d21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013cef:	80 fa 02             	cmp    dl,0x2
c0013cf2:	75 05                	jne    c0013cf9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0013cf4:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013cf7:	eb 28                	jmp    c0013d21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013cf9:	80 fa 03             	cmp    dl,0x3
c0013cfc:	75 05                	jne    c0013d03 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0013cfe:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013d01:	eb 1e                	jmp    c0013d21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013d03:	31 c0                	xor    eax,eax
c0013d05:	80 fa 04             	cmp    dl,0x4
c0013d08:	74 17                	je     c0013d21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013d0a:	80 fa 05             	cmp    dl,0x5
c0013d0d:	75 05                	jne    c0013d14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0013d0f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013d12:	eb 0d                	jmp    c0013d21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013d14:	80 fa 06             	cmp    dl,0x6
c0013d17:	75 05                	jne    c0013d1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0013d19:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013d1c:	eb 03                	jmp    c0013d21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013d1e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013d21:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013d26:	0f 94 c2             	sete   dl
c0013d29:	80 f9 05             	cmp    cl,0x5
c0013d2c:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0013d30:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0013d35:	d3 e0                	shl    eax,cl
c0013d37:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0013d3b:	74 0a                	je     c0013d47 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0013d3d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013d40:	b9 07 00 00 00       	mov    ecx,0x7
c0013d45:	eb 37                	jmp    c0013d7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013d47:	01 f8                	add    eax,edi
c0013d49:	b9 03 00 00 00       	mov    ecx,0x3
c0013d4e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013d53:	74 2b                	je     c0013d80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013d55:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013d5a:	75 0d                	jne    c0013d69 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0013d5c:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0013d60:	01 c8                	add    eax,ecx
c0013d62:	b9 04 00 00 00       	mov    ecx,0x4
c0013d67:	eb 17                	jmp    c0013d80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013d69:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013d6c:	b9 07 00 00 00       	mov    ecx,0x7
c0013d71:	eb 0d                	jmp    c0013d80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013d73:	b9 02 00 00 00       	mov    ecx,0x2
c0013d78:	b2 01                	mov    dl,0x1
c0013d7a:	31 c0                	xor    eax,eax
c0013d7c:	eb 02                	jmp    c0013d80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013d7e:	31 d2                	xor    edx,edx
c0013d80:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d84:	89 0b                	mov    DWORD PTR [ebx],ecx
c0013d86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013d8a:	88 11                	mov    BYTE PTR [ecx],dl
c0013d8c:	5a                   	pop    edx
c0013d8d:	5b                   	pop    ebx
c0013d8e:	5e                   	pop    esi
c0013d8f:	5f                   	pop    edi
c0013d90:	c3                   	ret    

c0013d91 <Krnl::smpEntry()>:
c0013d91:	eb fe                	jmp    c0013d91 <Krnl::smpEntry()>

c0013d93 <Krnl::startCPU(int)>:
c0013d93:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0013d98:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013d9f:	0f 84 36 01 00 00    	je     c0013edb <Krnl::startCPU(int)+0x148>
c0013da5:	53                   	push   ebx
c0013da6:	83 ec 10             	sub    esp,0x10
c0013da9:	fa                   	cli    
c0013daa:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c0013db0:	6a 1b                	push   0x1b
c0013db2:	ff 35 68 62 02 c0    	push   DWORD PTR ds:0xc0026268
c0013db8:	e8 07 52 ff ff       	call   c0008fc4 <Computer::rdmsr(unsigned int)>
c0013dbd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013dc2:	89 c3                	mov    ebx,eax
c0013dc4:	58                   	pop    eax
c0013dc5:	5a                   	pop    edx
c0013dc6:	53                   	push   ebx
c0013dc7:	68 9c 40 02 c0       	push   0xc002409c
c0013dcc:	e8 ed 8c ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0013dd1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013ddb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ddf:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013de9:	c1 e0 18             	shl    eax,0x18
c0013dec:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0013df2:	83 c4 10             	add    esp,0x10
c0013df5:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013dfb:	09 c2                	or     edx,eax
c0013dfd:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0013e03:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0013e09:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013e0f:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013e15:	80 cd c5             	or     ch,0xc5
c0013e18:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013e1e:	f3 90                	pause  
c0013e20:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013e22:	0f ba e1 0c          	bt     ecx,0xc
c0013e26:	72 f6                	jb     c0013e1e <Krnl::startCPU(int)+0x8b>
c0013e28:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013e2e:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013e34:	09 c1                	or     ecx,eax
c0013e36:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013e3c:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013e42:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013e48:	80 cd 85             	or     ch,0x85
c0013e4b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013e51:	f3 90                	pause  
c0013e53:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013e55:	0f ba e1 0c          	bt     ecx,0xc
c0013e59:	72 f6                	jb     c0013e51 <Krnl::startCPU(int)+0xbe>
c0013e5b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013e65:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013e6b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013e71:	09 c1                	or     ecx,eax
c0013e73:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013e79:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013e7f:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0013e85:	81 c9 02 06 00 00    	or     ecx,0x602
c0013e8b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013e91:	f3 90                	pause  
c0013e93:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013e95:	0f ba e1 0c          	bt     ecx,0xc
c0013e99:	72 f6                	jb     c0013e91 <Krnl::startCPU(int)+0xfe>
c0013e9b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013ea5:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013eab:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013eb1:	09 c8                	or     eax,ecx
c0013eb3:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0013eb9:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0013ebf:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0013ec4:	0d 02 06 00 00       	or     eax,0x602
c0013ec9:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0013ecf:	f3 90                	pause  
c0013ed1:	8b 02                	mov    eax,DWORD PTR [edx]
c0013ed3:	0f ba e0 0c          	bt     eax,0xc
c0013ed7:	72 f6                	jb     c0013ecf <Krnl::startCPU(int)+0x13c>
c0013ed9:	eb fe                	jmp    c0013ed9 <Krnl::startCPU(int)+0x146>
c0013edb:	c3                   	ret    

c0013edc <Krnl::startCPUs()>:
c0013edc:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0013ee1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013ee7:	88 c2                	mov    dl,al
c0013ee9:	83 e2 0a             	and    edx,0xa
c0013eec:	80 fa 0a             	cmp    dl,0xa
c0013eef:	75 09                	jne    c0013efa <Krnl::startCPUs()+0x1e>
c0013ef1:	a8 01                	test   al,0x1
c0013ef3:	74 05                	je     c0013efa <Krnl::startCPUs()+0x1e>
c0013ef5:	e9 a1 c2 fe ff       	jmp    c000019b <prepareTramp>
c0013efa:	c3                   	ret    
c0013efb:	90                   	nop

c0013efc <EnvVarContainer::getEnv(char const*)>:
c0013efc:	57                   	push   edi
c0013efd:	56                   	push   esi
c0013efe:	53                   	push   ebx
c0013eff:	31 db                	xor    ebx,ebx
c0013f01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f05:	39 1e                	cmp    DWORD PTR [esi],ebx
c0013f07:	7e 2b                	jle    c0013f34 <EnvVarContainer::getEnv(char const*)+0x38>
c0013f09:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0013f10:	50                   	push   eax
c0013f11:	50                   	push   eax
c0013f12:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013f15:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0013f18:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013f1c:	e8 77 c9 fe ff       	call   c0000898 <strcmp>
c0013f21:	83 c4 10             	add    esp,0x10
c0013f24:	85 c0                	test   eax,eax
c0013f26:	75 09                	jne    c0013f31 <EnvVarContainer::getEnv(char const*)+0x35>
c0013f28:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013f2b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0013f2f:	eb 05                	jmp    c0013f36 <EnvVarContainer::getEnv(char const*)+0x3a>
c0013f31:	43                   	inc    ebx
c0013f32:	eb d1                	jmp    c0013f05 <EnvVarContainer::getEnv(char const*)+0x9>
c0013f34:	31 c0                	xor    eax,eax
c0013f36:	5b                   	pop    ebx
c0013f37:	5e                   	pop    esi
c0013f38:	5f                   	pop    edi
c0013f39:	c3                   	ret    

c0013f3a <EnvVarContainer::setEnv(char const*, char const*)>:
c0013f3a:	55                   	push   ebp
c0013f3b:	57                   	push   edi
c0013f3c:	56                   	push   esi
c0013f3d:	53                   	push   ebx
c0013f3e:	83 ec 28             	sub    esp,0x28
c0013f41:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013f45:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0013f49:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013f4d:	56                   	push   esi
c0013f4e:	e8 19 c8 fe ff       	call   c000076c <strlen>
c0013f53:	40                   	inc    eax
c0013f54:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f57:	e8 01 5b ff ff       	call   c0009a5d <malloc>
c0013f5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f63:	e8 04 c8 fe ff       	call   c000076c <strlen>
c0013f68:	40                   	inc    eax
c0013f69:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f6c:	e8 ec 5a ff ff       	call   c0009a5d <malloc>
c0013f71:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f74:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013f78:	e8 ef c7 fe ff       	call   c000076c <strlen>
c0013f7d:	83 c4 0c             	add    esp,0xc
c0013f80:	40                   	inc    eax
c0013f81:	50                   	push   eax
c0013f82:	6a 00                	push   0x0
c0013f84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013f88:	e8 c3 c7 fe ff       	call   c0000750 <memset>
c0013f8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f90:	e8 d7 c7 fe ff       	call   c000076c <strlen>
c0013f95:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f99:	8d 48 01             	lea    ecx,[eax+0x1]
c0013f9c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013fa1:	89 de                	mov    esi,ebx
c0013fa3:	e8 c4 c7 fe ff       	call   c000076c <strlen>
c0013fa8:	83 c4 0c             	add    esp,0xc
c0013fab:	40                   	inc    eax
c0013fac:	50                   	push   eax
c0013fad:	6a 00                	push   0x0
c0013faf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fb3:	e8 98 c7 fe ff       	call   c0000750 <memset>
c0013fb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013fbb:	e8 ac c7 fe ff       	call   c000076c <strlen>
c0013fc0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013fc4:	8d 48 01             	lea    ecx,[eax+0x1]
c0013fc7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fc9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013fcc:	40                   	inc    eax
c0013fcd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013fd0:	c1 e0 03             	shl    eax,0x3
c0013fd3:	5a                   	pop    edx
c0013fd4:	59                   	pop    ecx
c0013fd5:	50                   	push   eax
c0013fd6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0013fd9:	e8 6b 5a ff ff       	call   c0009a49 <realloc>
c0013fde:	8d 74 24 18          	lea    esi,[esp+0x18]
c0013fe2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013fe5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013fe8:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0013fec:	b9 08 00 00 00       	mov    ecx,0x8
c0013ff1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ff3:	83 c4 2c             	add    esp,0x2c
c0013ff6:	5b                   	pop    ebx
c0013ff7:	5e                   	pop    esi
c0013ff8:	5f                   	pop    edi
c0013ff9:	5d                   	pop    ebp
c0013ffa:	c3                   	ret    
c0013ffb:	90                   	nop

c0013ffc <EnvVarContainer::deleteEnv(char const*)>:
c0013ffc:	c3                   	ret    
c0013ffd:	90                   	nop

c0013ffe <EnvVarContainer::loadFrom(char const*, char const*)>:
c0013ffe:	55                   	push   ebp
c0013fff:	57                   	push   edi
c0014000:	56                   	push   esi
c0014001:	53                   	push   ebx
c0014002:	81 ec 38 01 00 00    	sub    esp,0x138
c0014008:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001400f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0014016:	68 14 01 00 00       	push   0x114
c001401b:	e8 3d 5a ff ff       	call   c0009a5d <malloc>
c0014020:	83 c4 0c             	add    esp,0xc
c0014023:	89 c3                	mov    ebx,eax
c0014025:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014028:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001402f:	50                   	push   eax
c0014030:	e8 f3 8f ff ff       	call   c000d028 <File::File(char const*, Process*)>
c0014035:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014038:	e8 bd 92 ff ff       	call   c000d2fa <File::exists()>
c001403d:	83 c4 10             	add    esp,0x10
c0014040:	84 c0                	test   al,al
c0014042:	75 31                	jne    c0014075 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0014044:	50                   	push   eax
c0014045:	50                   	push   eax
c0014046:	6a 12                	push   0x12
c0014048:	53                   	push   ebx
c0014049:	e8 3e 90 ff ff       	call   c000d08c <File::open(FileOpenMode)>
c001404e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014050:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014053:	89 34 24             	mov    DWORD PTR [esp],esi
c0014056:	e8 11 c7 fe ff       	call   c000076c <strlen>
c001405b:	5a                   	pop    edx
c001405c:	31 d2                	xor    edx,edx
c001405e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014062:	51                   	push   ecx
c0014063:	56                   	push   esi
c0014064:	52                   	push   edx
c0014065:	50                   	push   eax
c0014066:	53                   	push   ebx
c0014067:	ff d7                	call   edi
c0014069:	83 c4 14             	add    esp,0x14
c001406c:	53                   	push   ebx
c001406d:	e8 78 90 ff ff       	call   c000d0ea <File::close()>
c0014072:	83 c4 10             	add    esp,0x10
c0014075:	56                   	push   esi
c0014076:	31 f6                	xor    esi,esi
c0014078:	68 00 01 00 00       	push   0x100
c001407d:	6a 00                	push   0x0
c001407f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014083:	50                   	push   eax
c0014084:	e8 c7 c6 fe ff       	call   c0000750 <memset>
c0014089:	5f                   	pop    edi
c001408a:	58                   	pop    eax
c001408b:	6a 01                	push   0x1
c001408d:	53                   	push   ebx
c001408e:	e8 f9 8f ff ff       	call   c000d08c <File::open(FileOpenMode)>
c0014093:	83 c4 10             	add    esp,0x10
c0014096:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001409e:	83 ec 0c             	sub    esp,0xc
c00140a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140a3:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00140a7:	51                   	push   ecx
c00140a8:	8d 54 24 23          	lea    edx,[esp+0x23]
c00140ac:	52                   	push   edx
c00140ad:	6a 00                	push   0x0
c00140af:	6a 01                	push   0x1
c00140b1:	53                   	push   ebx
c00140b2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140b5:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00140b9:	83 c4 20             	add    esp,0x20
c00140bc:	3c 0d                	cmp    al,0xd
c00140be:	0f 84 09 01 00 00    	je     c00141cd <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00140c4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00140c9:	0f 84 ef 00 00 00    	je     c00141be <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00140cf:	3c 0a                	cmp    al,0xa
c00140d1:	74 13                	je     c00140e6 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00140d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00140d8:	74 0c                	je     c00140e6 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00140da:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00140e0:	0f 8e d8 00 00 00    	jle    c00141be <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00140e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140ea:	83 ec 0c             	sub    esp,0xc
c00140ed:	8d 78 01             	lea    edi,[eax+0x1]
c00140f0:	57                   	push   edi
c00140f1:	e8 67 59 ff ff       	call   c0009a5d <malloc>
c00140f6:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00140fa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00140fe:	8d 56 04             	lea    edx,[esi+0x4]
c0014101:	89 14 24             	mov    DWORD PTR [esp],edx
c0014104:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014108:	e8 50 59 ff ff       	call   c0009a5d <malloc>
c001410d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014111:	83 c4 0c             	add    esp,0xc
c0014114:	57                   	push   edi
c0014115:	6a 00                	push   0x0
c0014117:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001411b:	e8 30 c6 fe ff       	call   c0000750 <memset>
c0014120:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014124:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014128:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001412c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001412e:	83 c4 0c             	add    esp,0xc
c0014131:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014135:	52                   	push   edx
c0014136:	6a 00                	push   0x0
c0014138:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001413c:	e8 0f c6 fe ff       	call   c0000750 <memset>
c0014141:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014145:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014149:	89 34 24             	mov    DWORD PTR [esp],esi
c001414c:	e8 1b c6 fe ff       	call   c000076c <strlen>
c0014151:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014155:	89 c1                	mov    ecx,eax
c0014157:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014159:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001415c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001415f:	40                   	inc    eax
c0014160:	83 c4 10             	add    esp,0x10
c0014163:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014166:	85 d2                	test   edx,edx
c0014168:	75 0c                	jne    c0014176 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c001416a:	83 ec 0c             	sub    esp,0xc
c001416d:	6a 08                	push   0x8
c001416f:	e8 e9 58 ff ff       	call   c0009a5d <malloc>
c0014174:	eb 0c                	jmp    c0014182 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014176:	c1 e0 03             	shl    eax,0x3
c0014179:	51                   	push   ecx
c001417a:	51                   	push   ecx
c001417b:	50                   	push   eax
c001417c:	52                   	push   edx
c001417d:	e8 c7 58 ff ff       	call   c0009a49 <realloc>
c0014182:	83 c4 10             	add    esp,0x10
c0014185:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014188:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001418b:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001418e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014192:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014196:	b9 08 00 00 00       	mov    ecx,0x8
c001419b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001419d:	31 f6                	xor    esi,esi
c001419f:	50                   	push   eax
c00141a0:	68 00 01 00 00       	push   0x100
c00141a5:	6a 00                	push   0x0
c00141a7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00141ab:	50                   	push   eax
c00141ac:	e8 9f c5 fe ff       	call   c0000750 <memset>
c00141b1:	83 c4 10             	add    esp,0x10
c00141b4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00141bc:	eb 0f                	jmp    c00141cd <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00141be:	3c 3d                	cmp    al,0x3d
c00141c0:	74 07                	je     c00141c9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00141c2:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00141c6:	46                   	inc    esi
c00141c7:	eb 04                	jmp    c00141cd <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00141c9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00141cd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00141d2:	0f 85 c6 fe ff ff    	jne    c001409e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00141d8:	81 c4 2c 01 00 00    	add    esp,0x12c
c00141de:	5b                   	pop    ebx
c00141df:	5e                   	pop    esi
c00141e0:	5f                   	pop    edi
c00141e1:	5d                   	pop    ebp
c00141e2:	c3                   	ret    
c00141e3:	90                   	nop

c00141e4 <EnvVarContainer::__loadSystem()>:
c00141e4:	83 ec 10             	sub    esp,0x10
c00141e7:	68 40 5c 02 c0       	push   0xc0025c40
c00141ec:	68 ad 40 02 c0       	push   0xc00240ad
c00141f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141f5:	e8 04 fe ff ff       	call   c0013ffe <EnvVarContainer::loadFrom(char const*, char const*)>
c00141fa:	83 c4 1c             	add    esp,0x1c
c00141fd:	c3                   	ret    

c00141fe <EnvVarContainer::__loadUser()>:
c00141fe:	c3                   	ret    
c00141ff:	90                   	nop

c0014200 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014204:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001420a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001420e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014212:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014219:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014220:	90                   	nop
c0014221:	c3                   	ret    

c0014222 <EnvVarContainer::~EnvVarContainer()>:
c0014222:	83 ec 0c             	sub    esp,0xc
c0014225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014229:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001422c:	85 c0                	test   eax,eax
c001422e:	74 1d                	je     c001424d <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014234:	8b 00                	mov    eax,DWORD PTR [eax]
c0014236:	85 c0                	test   eax,eax
c0014238:	74 13                	je     c001424d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001423a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001423e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014241:	83 ec 0c             	sub    esp,0xc
c0014244:	50                   	push   eax
c0014245:	e8 23 58 ff ff       	call   c0009a6d <free>
c001424a:	83 c4 10             	add    esp,0x10
c001424d:	90                   	nop
c001424e:	83 c4 0c             	add    esp,0xc
c0014251:	c3                   	ret    

c0014252 <Krnl::getEnv(Process*, char const*)>:
c0014252:	53                   	push   ebx
c0014253:	83 ec 08             	sub    esp,0x8
c0014256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001425a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001425e:	39 05 90 77 02 c0    	cmp    DWORD PTR ds:0xc0027790,eax
c0014264:	74 04                	je     c001426a <Krnl::getEnv(Process*, char const*)+0x18>
c0014266:	85 c0                	test   eax,eax
c0014268:	75 0b                	jne    c0014275 <Krnl::getEnv(Process*, char const*)+0x23>
c001426a:	a1 74 6d 02 c0       	mov    eax,ds:0xc0026d74
c001426f:	85 c0                	test   eax,eax
c0014271:	75 19                	jne    c001428c <Krnl::getEnv(Process*, char const*)+0x3a>
c0014273:	eb 27                	jmp    c001429c <Krnl::getEnv(Process*, char const*)+0x4a>
c0014275:	52                   	push   edx
c0014276:	52                   	push   edx
c0014277:	53                   	push   ebx
c0014278:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001427e:	e8 79 fc ff ff       	call   c0013efc <EnvVarContainer::getEnv(char const*)>
c0014283:	83 c4 10             	add    esp,0x10
c0014286:	85 c0                	test   eax,eax
c0014288:	75 28                	jne    c00142b2 <Krnl::getEnv(Process*, char const*)+0x60>
c001428a:	eb de                	jmp    c001426a <Krnl::getEnv(Process*, char const*)+0x18>
c001428c:	52                   	push   edx
c001428d:	52                   	push   edx
c001428e:	53                   	push   ebx
c001428f:	50                   	push   eax
c0014290:	e8 67 fc ff ff       	call   c0013efc <EnvVarContainer::getEnv(char const*)>
c0014295:	83 c4 10             	add    esp,0x10
c0014298:	85 c0                	test   eax,eax
c001429a:	75 16                	jne    c00142b2 <Krnl::getEnv(Process*, char const*)+0x60>
c001429c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00142a0:	a1 78 6d 02 c0       	mov    eax,ds:0xc0026d78
c00142a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00142a9:	83 c4 08             	add    esp,0x8
c00142ac:	5b                   	pop    ebx
c00142ad:	e9 4a fc ff ff       	jmp    c0013efc <EnvVarContainer::getEnv(char const*)>
c00142b2:	83 c4 08             	add    esp,0x8
c00142b5:	5b                   	pop    ebx
c00142b6:	c3                   	ret    

c00142b7 <Krnl::setEnvSystem(char const*, char const*)>:
c00142b7:	83 ec 10             	sub    esp,0x10
c00142ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00142be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00142c2:	ff 35 78 6d 02 c0    	push   DWORD PTR ds:0xc0026d78
c00142c8:	e8 6d fc ff ff       	call   c0013f3a <EnvVarContainer::setEnv(char const*, char const*)>
c00142cd:	83 c4 1c             	add    esp,0x1c
c00142d0:	c3                   	ret    

c00142d1 <Krnl::setEnvUser(char const*, char const*)>:
c00142d1:	a1 74 6d 02 c0       	mov    eax,ds:0xc0026d74
c00142d6:	85 c0                	test   eax,eax
c00142d8:	74 15                	je     c00142ef <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00142da:	83 ec 10             	sub    esp,0x10
c00142dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00142e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00142e5:	50                   	push   eax
c00142e6:	e8 4f fc ff ff       	call   c0013f3a <EnvVarContainer::setEnv(char const*, char const*)>
c00142eb:	83 c4 1c             	add    esp,0x1c
c00142ee:	c3                   	ret    
c00142ef:	c3                   	ret    

c00142f0 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00142f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142f4:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c00142fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142fe:	e9 37 fc ff ff       	jmp    c0013f3a <EnvVarContainer::setEnv(char const*, char const*)>

c0014303 <Krnl::deleteEnvSystem(char const*)>:
c0014303:	c3                   	ret    

c0014304 <Krnl::deleteEnvUser(char const*)>:
c0014304:	c3                   	ret    

c0014305 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014305:	c3                   	ret    

c0014306 <Krnl::newProcessEnv(Process*)>:
c0014306:	83 ec 28             	sub    esp,0x28
c0014309:	6a 0c                	push   0xc
c001430b:	e8 4d 57 ff ff       	call   c0009a5d <malloc>
c0014310:	5a                   	pop    edx
c0014311:	59                   	pop    ecx
c0014312:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014316:	50                   	push   eax
c0014317:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001431b:	e8 e0 fe ff ff       	call   c0014200 <EnvVarContainer::EnvVarContainer(Process*)>
c0014320:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014324:	83 c4 2c             	add    esp,0x2c
c0014327:	c3                   	ret    

c0014328 <Krnl::copyProcessEnv(Process*, Process*)>:
c0014328:	57                   	push   edi
c0014329:	56                   	push   esi
c001432a:	53                   	push   ebx
c001432b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001432f:	83 ec 0c             	sub    esp,0xc
c0014332:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0014338:	6a 0c                	push   0xc
c001433a:	e8 1e 57 ff ff       	call   c0009a5d <malloc>
c001433f:	89 c3                	mov    ebx,eax
c0014341:	58                   	pop    eax
c0014342:	5a                   	pop    edx
c0014343:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014347:	53                   	push   ebx
c0014348:	e8 b3 fe ff ff       	call   c0014200 <EnvVarContainer::EnvVarContainer(Process*)>
c001434d:	8b 07                	mov    eax,DWORD PTR [edi]
c001434f:	89 03                	mov    DWORD PTR [ebx],eax
c0014351:	c1 e0 03             	shl    eax,0x3
c0014354:	89 04 24             	mov    DWORD PTR [esp],eax
c0014357:	e8 01 57 ff ff       	call   c0009a5d <malloc>
c001435c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001435f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014361:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0014364:	c1 e1 03             	shl    ecx,0x3
c0014367:	89 c7                	mov    edi,eax
c0014369:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001436b:	83 c4 10             	add    esp,0x10
c001436e:	89 d8                	mov    eax,ebx
c0014370:	5b                   	pop    ebx
c0014371:	5e                   	pop    esi
c0014372:	5f                   	pop    edi
c0014373:	c3                   	ret    

c0014374 <Krnl::loadSystemEnv()>:
c0014374:	53                   	push   ebx
c0014375:	83 ec 14             	sub    esp,0x14
c0014378:	6a 0c                	push   0xc
c001437a:	e8 de 56 ff ff       	call   c0009a5d <malloc>
c001437f:	89 c3                	mov    ebx,eax
c0014381:	58                   	pop    eax
c0014382:	5a                   	pop    edx
c0014383:	ff 35 90 77 02 c0    	push   DWORD PTR ds:0xc0027790
c0014389:	53                   	push   ebx
c001438a:	e8 71 fe ff ff       	call   c0014200 <EnvVarContainer::EnvVarContainer(Process*)>
c001438f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014392:	89 1d 78 6d 02 c0    	mov    DWORD PTR ds:0xc0026d78,ebx
c0014398:	e8 47 fe ff ff       	call   c00141e4 <EnvVarContainer::__loadSystem()>
c001439d:	83 c4 18             	add    esp,0x18
c00143a0:	5b                   	pop    ebx
c00143a1:	c3                   	ret    

c00143a2 <Krnl::loadUserEnv()>:
c00143a2:	53                   	push   ebx
c00143a3:	83 ec 14             	sub    esp,0x14
c00143a6:	6a 0c                	push   0xc
c00143a8:	e8 b0 56 ff ff       	call   c0009a5d <malloc>
c00143ad:	89 c3                	mov    ebx,eax
c00143af:	58                   	pop    eax
c00143b0:	5a                   	pop    edx
c00143b1:	ff 35 90 77 02 c0    	push   DWORD PTR ds:0xc0027790
c00143b7:	53                   	push   ebx
c00143b8:	e8 43 fe ff ff       	call   c0014200 <EnvVarContainer::EnvVarContainer(Process*)>
c00143bd:	89 1d 74 6d 02 c0    	mov    DWORD PTR ds:0xc0026d74,ebx
c00143c3:	83 c4 18             	add    esp,0x18
c00143c6:	5b                   	pop    ebx
c00143c7:	c3                   	ret    

c00143c8 <Krnl::flushEnv()>:
c00143c8:	c3                   	ret    

c00143c9 <Krnl::getProcessTotalEnvCount(Process*)>:
c00143c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143cd:	8b 15 74 6d 02 c0    	mov    edx,DWORD PTR ds:0xc0026d74
c00143d3:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c00143d9:	a1 78 6d 02 c0       	mov    eax,ds:0xc0026d78
c00143de:	8b 00                	mov    eax,DWORD PTR [eax]
c00143e0:	03 01                	add    eax,DWORD PTR [ecx]
c00143e2:	85 d2                	test   edx,edx
c00143e4:	74 02                	je     c00143e8 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00143e6:	03 02                	add    eax,DWORD PTR [edx]
c00143e8:	c3                   	ret    

c00143e9 <Krnl::getProcessEnvPair(Process*, int)>:
c00143e9:	57                   	push   edi
c00143ea:	56                   	push   esi
c00143eb:	8b 35 74 6d 02 c0    	mov    esi,DWORD PTR ds:0xc0026d74
c00143f1:	53                   	push   ebx
c00143f2:	85 f6                	test   esi,esi
c00143f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143fc:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0014402:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014406:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014408:	75 16                	jne    c0014420 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001440a:	39 c2                	cmp    edx,eax
c001440c:	7c 16                	jl     c0014424 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001440e:	8b 0d 78 6d 02 c0    	mov    ecx,DWORD PTR ds:0xc0026d78
c0014414:	8b 31                	mov    esi,DWORD PTR [ecx]
c0014416:	01 c6                	add    esi,eax
c0014418:	39 d6                	cmp    esi,edx
c001441a:	7e 3c                	jle    c0014458 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001441c:	29 c2                	sub    edx,eax
c001441e:	eb 04                	jmp    c0014424 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014420:	39 c2                	cmp    edx,eax
c0014422:	7d 05                	jge    c0014429 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0014424:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0014427:	eb 20                	jmp    c0014449 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0014429:	8b 3e                	mov    edi,DWORD PTR [esi]
c001442b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001442e:	39 d1                	cmp    ecx,edx
c0014430:	7e 04                	jle    c0014436 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0014432:	29 c2                	sub    edx,eax
c0014434:	eb 10                	jmp    c0014446 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0014436:	8b 35 78 6d 02 c0    	mov    esi,DWORD PTR ds:0xc0026d78
c001443c:	03 0e                	add    ecx,DWORD PTR [esi]
c001443e:	39 d1                	cmp    ecx,edx
c0014440:	7e 16                	jle    c0014458 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014442:	29 c2                	sub    edx,eax
c0014444:	29 fa                	sub    edx,edi
c0014446:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014449:	8d 14 d0             	lea    edx,[eax+edx*8]
c001444c:	8b 02                	mov    eax,DWORD PTR [edx]
c001444e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0014451:	89 03                	mov    DWORD PTR [ebx],eax
c0014453:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0014456:	eb 1d                	jmp    c0014475 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0014458:	83 ec 0c             	sub    esp,0xc
c001445b:	68 cf 40 02 c0       	push   0xc00240cf
c0014460:	e8 18 00 00 00       	call   c001447d <Krnl::panic(char const*)>
c0014465:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001446b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0014472:	83 c4 10             	add    esp,0x10
c0014475:	89 d8                	mov    eax,ebx
c0014477:	5b                   	pop    ebx
c0014478:	5e                   	pop    esi
c0014479:	5f                   	pop    edi
c001447a:	c2 04 00             	ret    0x4

c001447d <Krnl::panic(char const*)>:
c001447d:	55                   	push   ebp
c001447e:	89 e5                	mov    ebp,esp
c0014480:	53                   	push   ebx
c0014481:	83 ec 10             	sub    esp,0x10
c0014484:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0014487:	fa                   	cli    
c0014488:	c6 05 84 6d 02 c0 01 	mov    BYTE PTR ds:0xc0026d84,0x1
c001448f:	53                   	push   ebx
c0014490:	e8 22 56 ff ff       	call   c0009ab7 <Krnl::setBootMessage(char const*)>
c0014495:	58                   	pop    eax
c0014496:	c6 05 40 56 02 c0 00 	mov    BYTE PTR ds:0xc0025640,0x0
c001449d:	5a                   	pop    edx
c001449e:	53                   	push   ebx
c001449f:	68 e9 40 02 c0       	push   0xc00240e9
c00144a4:	e8 15 86 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c00144a9:	59                   	pop    ecx
c00144aa:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c00144af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144b5:	e8 5d 63 ff ff       	call   c000a817 <setActiveTerminal(VgaText*)>
c00144ba:	83 c4 0c             	add    esp,0xc
c00144bd:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c00144c2:	6a 01                	push   0x1
c00144c4:	6a 0f                	push   0xf
c00144c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144cc:	e8 a5 61 ff ff       	call   c000a676 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00144d1:	58                   	pop    eax
c00144d2:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c00144d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144dd:	e8 b6 66 ff ff       	call   c000ab98 <VgaText::clearScreen()>
c00144e2:	58                   	pop    eax
c00144e3:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c00144e8:	5a                   	pop    edx
c00144e9:	68 02 41 02 c0       	push   0xc0024102
c00144ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144f4:	e8 2b 68 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c00144f9:	59                   	pop    ecx
c00144fa:	58                   	pop    eax
c00144fb:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c0014500:	68 a8 41 02 c0       	push   0xc00241a8
c0014505:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001450b:	e8 14 68 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c0014510:	58                   	pop    eax
c0014511:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c0014516:	5a                   	pop    edx
c0014517:	68 1e 41 02 c0       	push   0xc002411e
c001451c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014522:	e8 fd 67 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c0014527:	59                   	pop    ecx
c0014528:	58                   	pop    eax
c0014529:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c001452e:	53                   	push   ebx
c001452f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014535:	e8 ea 67 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c001453a:	58                   	pop    eax
c001453b:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c0014540:	5a                   	pop    edx
c0014541:	68 3e 41 02 c0       	push   0xc002413e
c0014546:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001454c:	e8 d3 67 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c0014551:	a1 80 6d 02 c0       	mov    eax,ds:0xc0026d80
c0014556:	83 c4 10             	add    esp,0x10
c0014559:	85 c0                	test   eax,eax
c001455b:	74 02                	je     c001455f <Krnl::panic(char const*)+0xe2>
c001455d:	ff d0                	call   eax
c001455f:	83 ec 0c             	sub    esp,0xc
c0014562:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014565:	e8 8f 30 00 00       	call   c00175f9 <Thr::getDriverNameFromAddress(unsigned long)>
c001456a:	83 c4 10             	add    esp,0x10
c001456d:	89 c3                	mov    ebx,eax
c001456f:	85 c0                	test   eax,eax
c0014571:	0f 84 4e 02 00 00    	je     c00147c5 <Krnl::panic(char const*)+0x348>
c0014577:	83 ec 08             	sub    esp,0x8
c001457a:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c001457f:	68 e4 41 02 c0       	push   0xc00241e4
c0014584:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001458a:	e8 95 67 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c001458f:	58                   	pop    eax
c0014590:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c0014595:	5a                   	pop    edx
c0014596:	68 1e 41 02 c0       	push   0xc002411e
c001459b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145a1:	e8 7e 67 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c00145a6:	59                   	pop    ecx
c00145a7:	58                   	pop    eax
c00145a8:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c00145ad:	53                   	push   ebx
c00145ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145b4:	e8 6b 67 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c00145b9:	83 c4 10             	add    esp,0x10
c00145bc:	83 ec 08             	sub    esp,0x8
c00145bf:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c00145c4:	68 3d 41 02 c0       	push   0xc002413d
c00145c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145cf:	e8 50 67 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c00145d4:	58                   	pop    eax
c00145d5:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c00145da:	5a                   	pop    edx
c00145db:	68 3c 42 02 c0       	push   0xc002423c
c00145e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145e6:	e8 39 67 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c00145eb:	59                   	pop    ecx
c00145ec:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c00145f1:	5b                   	pop    ebx
c00145f2:	68 7c 42 02 c0       	push   0xc002427c
c00145f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145fd:	e8 22 67 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c0014602:	58                   	pop    eax
c0014603:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c0014608:	5a                   	pop    edx
c0014609:	68 29 41 02 c0       	push   0xc0024129
c001460e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014614:	e8 0b 67 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c0014619:	59                   	pop    ecx
c001461a:	5b                   	pop    ebx
c001461b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001461e:	68 41 41 02 c0       	push   0xc0024141
c0014623:	e8 96 84 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0014628:	58                   	pop    eax
c0014629:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001462c:	5a                   	pop    edx
c001462d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014630:	68 4a 41 02 c0       	push   0xc002414a
c0014635:	e8 84 84 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001463a:	59                   	pop    ecx
c001463b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001463e:	5b                   	pop    ebx
c001463f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014641:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014644:	68 53 41 02 c0       	push   0xc0024153
c0014649:	e8 70 84 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001464e:	58                   	pop    eax
c001464f:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c0014654:	5a                   	pop    edx
c0014655:	68 c0 42 02 c0       	push   0xc00242c0
c001465a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014660:	e8 bf 66 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c0014665:	59                   	pop    ecx
c0014666:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c001466b:	5b                   	pop    ebx
c001466c:	68 5c 41 02 c0       	push   0xc002415c
c0014671:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014677:	e8 a8 66 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c001467c:	0f 20 c0             	mov    eax,cr0
c001467f:	5a                   	pop    edx
c0014680:	59                   	pop    ecx
c0014681:	50                   	push   eax
c0014682:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c0014687:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001468d:	e8 4c 66 ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c0014692:	5b                   	pop    ebx
c0014693:	58                   	pop    eax
c0014694:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c0014699:	68 66 41 02 c0       	push   0xc0024166
c001469e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146a4:	e8 7b 66 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c00146a9:	0f 20 d0             	mov    eax,cr2
c00146ac:	5a                   	pop    edx
c00146ad:	59                   	pop    ecx
c00146ae:	50                   	push   eax
c00146af:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c00146b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146ba:	e8 1f 66 ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c00146bf:	5b                   	pop    ebx
c00146c0:	58                   	pop    eax
c00146c1:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c00146c6:	68 70 41 02 c0       	push   0xc0024170
c00146cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146d1:	e8 4e 66 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c00146d6:	0f 20 d8             	mov    eax,cr3
c00146d9:	5a                   	pop    edx
c00146da:	59                   	pop    ecx
c00146db:	50                   	push   eax
c00146dc:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c00146e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146e7:	e8 f2 65 ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c00146ec:	5b                   	pop    ebx
c00146ed:	58                   	pop    eax
c00146ee:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c00146f3:	68 83 41 02 c0       	push   0xc0024183
c00146f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146fe:	e8 21 66 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c0014703:	0f 20 e0             	mov    eax,cr4
c0014706:	5a                   	pop    edx
c0014707:	59                   	pop    ecx
c0014708:	50                   	push   eax
c0014709:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c001470e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014714:	e8 c5 65 ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c0014719:	5b                   	pop    ebx
c001471a:	58                   	pop    eax
c001471b:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c0014720:	68 8d 41 02 c0       	push   0xc002418d
c0014725:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001472b:	e8 f4 65 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c0014730:	5a                   	pop    edx
c0014731:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c0014736:	59                   	pop    ecx
c0014737:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001473d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014740:	50                   	push   eax
c0014741:	e8 98 65 ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c0014746:	5b                   	pop    ebx
c0014747:	58                   	pop    eax
c0014748:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c001474d:	68 a4 41 02 c0       	push   0xc00241a4
c0014752:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014758:	e8 c7 65 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c001475d:	5a                   	pop    edx
c001475e:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c0014763:	59                   	pop    ecx
c0014764:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001476a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001476d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014770:	50                   	push   eax
c0014771:	e8 68 65 ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c0014776:	5b                   	pop    ebx
c0014777:	58                   	pop    eax
c0014778:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c001477d:	68 a4 41 02 c0       	push   0xc00241a4
c0014782:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014788:	e8 97 65 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c001478d:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c0014792:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014795:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001479b:	8b 12                	mov    edx,DWORD PTR [edx]
c001479d:	59                   	pop    ecx
c001479e:	5b                   	pop    ebx
c001479f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c00147a2:	50                   	push   eax
c00147a3:	e8 36 65 ff ff       	call   c000acde <VgaText::putx(unsigned int)>
c00147a8:	83 c4 10             	add    esp,0x10
c00147ab:	b2 fe                	mov    dl,0xfe
c00147ad:	e4 60                	in     al,0x60
c00147af:	3c 1c                	cmp    al,0x1c
c00147b1:	74 04                	je     c00147b7 <Krnl::panic(char const*)+0x33a>
c00147b3:	3c 5a                	cmp    al,0x5a
c00147b5:	75 f6                	jne    c00147ad <Krnl::panic(char const*)+0x330>
c00147b7:	e4 64                	in     al,0x64
c00147b9:	a8 02                	test   al,0x2
c00147bb:	75 fa                	jne    c00147b7 <Krnl::panic(char const*)+0x33a>
c00147bd:	88 d0                	mov    al,dl
c00147bf:	e6 64                	out    0x64,al
c00147c1:	fa                   	cli    
c00147c2:	f4                   	hlt    
c00147c3:	eb e8                	jmp    c00147ad <Krnl::panic(char const*)+0x330>
c00147c5:	50                   	push   eax
c00147c6:	50                   	push   eax
c00147c7:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c00147cc:	68 10 42 02 c0       	push   0xc0024210
c00147d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d7:	e8 48 65 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c00147dc:	58                   	pop    eax
c00147dd:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c00147e2:	5a                   	pop    edx
c00147e3:	68 1e 41 02 c0       	push   0xc002411e
c00147e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ee:	e8 31 65 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c00147f3:	59                   	pop    ecx
c00147f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147f9:	5b                   	pop    ebx
c00147fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00147fd:	83 c0 0c             	add    eax,0xc
c0014800:	50                   	push   eax
c0014801:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c0014806:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001480c:	e8 13 65 ff ff       	call   c000ad24 <VgaText::puts(char const*)>
c0014811:	83 c4 10             	add    esp,0x10
c0014814:	e9 a3 fd ff ff       	jmp    c00145bc <Krnl::panic(char const*)+0x13f>

c0014819 <Net::switchEndian16(unsigned short)>:
c0014819:	83 ec 04             	sub    esp,0x4
c001481c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014820:	66 89 04 24          	mov    WORD PTR [esp],ax
c0014824:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014828:	c1 f8 08             	sar    eax,0x8
c001482b:	89 c2                	mov    edx,eax
c001482d:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014831:	c1 e0 08             	shl    eax,0x8
c0014834:	09 d0                	or     eax,edx
c0014836:	83 c4 04             	add    esp,0x4
c0014839:	c3                   	ret    

c001483a <Net::switchEndian32(unsigned int)>:
c001483a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001483e:	c1 e8 18             	shr    eax,0x18
c0014841:	89 c2                	mov    edx,eax
c0014843:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014847:	c1 e0 08             	shl    eax,0x8
c001484a:	25 00 00 ff 00       	and    eax,0xff0000
c001484f:	09 c2                	or     edx,eax
c0014851:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014855:	c1 e8 08             	shr    eax,0x8
c0014858:	25 00 ff 00 00       	and    eax,0xff00
c001485d:	09 c2                	or     edx,eax
c001485f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014863:	c1 e0 18             	shl    eax,0x18
c0014866:	09 d0                	or     eax,edx
c0014868:	c3                   	ret    

c0014869 <Net::crc32Calc(unsigned char*, int)>:
c0014869:	83 ec 10             	sub    esp,0x10
c001486c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014871:	75 07                	jne    c001487a <Net::crc32Calc(unsigned char*, int)+0x11>
c0014873:	b8 00 00 00 00       	mov    eax,0x0
c0014878:	eb 7c                	jmp    c00148f6 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001487a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001487f:	7f 07                	jg     c0014888 <Net::crc32Calc(unsigned char*, int)+0x1f>
c0014881:	b8 00 00 00 00       	mov    eax,0x0
c0014886:	eb 6e                	jmp    c00148f6 <Net::crc32Calc(unsigned char*, int)+0x8d>
c0014888:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0014890:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014898:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001489c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00148a0:	7d 4e                	jge    c00148f0 <Net::crc32Calc(unsigned char*, int)+0x87>
c00148a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00148a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00148aa:	01 d0                	add    eax,edx
c00148ac:	8a 00                	mov    al,BYTE PTR [eax]
c00148ae:	0f b6 c0             	movzx  eax,al
c00148b1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00148b5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00148bd:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00148c2:	7f 26                	jg     c00148ea <Net::crc32Calc(unsigned char*, int)+0x81>
c00148c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148c8:	83 e0 01             	and    eax,0x1
c00148cb:	74 0d                	je     c00148da <Net::crc32Calc(unsigned char*, int)+0x71>
c00148cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148d1:	d1 e8                	shr    eax,1
c00148d3:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00148d8:	eb 06                	jmp    c00148e0 <Net::crc32Calc(unsigned char*, int)+0x77>
c00148da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148de:	d1 e8                	shr    eax,1
c00148e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00148e4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00148e8:	eb d3                	jmp    c00148bd <Net::crc32Calc(unsigned char*, int)+0x54>
c00148ea:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00148ee:	eb a8                	jmp    c0014898 <Net::crc32Calc(unsigned char*, int)+0x2f>
c00148f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148f4:	f7 d0                	not    eax
c00148f6:	83 c4 10             	add    esp,0x10
c00148f9:	c3                   	ret    

c00148fa <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c00148fa:	57                   	push   edi
c00148fb:	56                   	push   esi
c00148fc:	53                   	push   ebx
c00148fd:	83 ec 60             	sub    esp,0x60
c0014900:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014907:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001490b:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0014913:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c0014918:	7f 1a                	jg     c0014934 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001491a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014921:	8d 50 01             	lea    edx,[eax+0x1]
c0014924:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001492b:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001492e:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0014932:	eb df                	jmp    c0014913 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c0014934:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001493b:	8d 50 01             	lea    edx,[eax+0x1]
c001493e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014945:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0014948:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001494f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014953:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0014957:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001495b:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c0014963:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014967:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001496b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001496f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014973:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014977:	89 c6                	mov    esi,eax
c0014979:	89 d7                	mov    edi,edx
c001497b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001497d:	89 c8                	mov    eax,ecx
c001497f:	89 fa                	mov    edx,edi
c0014981:	89 f3                	mov    ebx,esi
c0014983:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014987:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001498b:	89 04 24             	mov    DWORD PTR [esp],eax
c001498e:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014996:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001499d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00149a1:	8d 44 24 78          	lea    eax,[esp+0x78]
c00149a5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00149a9:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c00149b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00149b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00149b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00149bd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00149c1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00149c5:	89 c6                	mov    esi,eax
c00149c7:	89 d7                	mov    edi,edx
c00149c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00149cb:	89 c8                	mov    eax,ecx
c00149cd:	89 fa                	mov    edx,edi
c00149cf:	89 f3                	mov    ebx,esi
c00149d1:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00149d5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00149d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00149dd:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00149e5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00149ec:	0f b7 c0             	movzx  eax,ax
c00149ef:	c1 f8 08             	sar    eax,0x8
c00149f2:	89 c1                	mov    ecx,eax
c00149f4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00149fb:	8d 50 01             	lea    edx,[eax+0x1]
c00149fe:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014a05:	88 ca                	mov    dl,cl
c0014a07:	88 10                	mov    BYTE PTR [eax],dl
c0014a09:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014a10:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014a17:	8d 48 01             	lea    ecx,[eax+0x1]
c0014a1a:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c0014a21:	88 10                	mov    BYTE PTR [eax],dl
c0014a23:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014a27:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0014a2b:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0014a32:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c0014a36:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0014a3a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0014a3e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014a42:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014a46:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014a4a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014a4e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014a52:	89 c6                	mov    esi,eax
c0014a54:	89 d7                	mov    edi,edx
c0014a56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a58:	89 c8                	mov    eax,ecx
c0014a5a:	89 fa                	mov    edx,edi
c0014a5c:	89 f3                	mov    ebx,esi
c0014a5e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014a62:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014a66:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014a6a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014a6e:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0014a75:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014a7c:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c0014a80:	50                   	push   eax
c0014a81:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014a85:	e8 df fd ff ff       	call   c0014869 <Net::crc32Calc(unsigned char*, int)>
c0014a8a:	83 c4 08             	add    esp,0x8
c0014a8d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014a91:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014a95:	c1 e8 18             	shr    eax,0x18
c0014a98:	89 c1                	mov    ecx,eax
c0014a9a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014aa1:	8d 50 01             	lea    edx,[eax+0x1]
c0014aa4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014aab:	88 ca                	mov    dl,cl
c0014aad:	88 10                	mov    BYTE PTR [eax],dl
c0014aaf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014ab3:	c1 e8 10             	shr    eax,0x10
c0014ab6:	89 c1                	mov    ecx,eax
c0014ab8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014abf:	8d 50 01             	lea    edx,[eax+0x1]
c0014ac2:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014ac9:	88 ca                	mov    dl,cl
c0014acb:	88 10                	mov    BYTE PTR [eax],dl
c0014acd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014ad1:	c1 e8 08             	shr    eax,0x8
c0014ad4:	89 c1                	mov    ecx,eax
c0014ad6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014add:	8d 50 01             	lea    edx,[eax+0x1]
c0014ae0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014ae7:	88 ca                	mov    dl,cl
c0014ae9:	88 10                	mov    BYTE PTR [eax],dl
c0014aeb:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014af2:	8d 50 01             	lea    edx,[eax+0x1]
c0014af5:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014afc:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0014b00:	88 10                	mov    BYTE PTR [eax],dl
c0014b02:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014b06:	83 c4 60             	add    esp,0x60
c0014b09:	5b                   	pop    ebx
c0014b0a:	5e                   	pop    esi
c0014b0b:	5f                   	pop    edi
c0014b0c:	c3                   	ret    

c0014b0d <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0014b0d:	57                   	push   edi
c0014b0e:	56                   	push   esi
c0014b0f:	53                   	push   ebx
c0014b10:	83 ec 70             	sub    esp,0x70
c0014b13:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0014b1e:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c0014b26:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b2d:	83 c0 0e             	add    eax,0xe
c0014b30:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014b34:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b3b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014b3f:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014b47:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014b4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014b4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b53:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014b57:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014b5b:	89 c6                	mov    esi,eax
c0014b5d:	89 d7                	mov    edi,edx
c0014b5f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b61:	89 c8                	mov    eax,ecx
c0014b63:	89 fa                	mov    edx,edi
c0014b65:	89 f3                	mov    ebx,esi
c0014b67:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014b6b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014b6f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014b73:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014b7b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b82:	83 c0 08             	add    eax,0x8
c0014b85:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0014b89:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b90:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0014b94:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0014b9c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014ba0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014ba4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014ba8:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014bac:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014bb0:	89 c6                	mov    esi,eax
c0014bb2:	89 d7                	mov    edi,edx
c0014bb4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014bb6:	89 c8                	mov    eax,ecx
c0014bb8:	89 fa                	mov    edx,edi
c0014bba:	89 f3                	mov    ebx,esi
c0014bbc:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014bc0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014bc4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014bc8:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014bd0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bd7:	8d 50 01             	lea    edx,[eax+0x1]
c0014bda:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014be1:	8a 00                	mov    al,BYTE PTR [eax]
c0014be3:	0f b6 c0             	movzx  eax,al
c0014be6:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0014beb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bf2:	8d 50 01             	lea    edx,[eax+0x1]
c0014bf5:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014bfc:	8a 00                	mov    al,BYTE PTR [eax]
c0014bfe:	0f b6 c0             	movzx  eax,al
c0014c01:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0014c06:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0014c0b:	c1 e0 08             	shl    eax,0x8
c0014c0e:	89 c2                	mov    edx,eax
c0014c10:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0014c14:	09 d0                	or     eax,edx
c0014c16:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014c1d:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0014c21:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0014c29:	75 46                	jne    c0014c71 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014c2b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014c32:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014c35:	66 3d dc 05          	cmp    ax,0x5dc
c0014c39:	77 16                	ja     c0014c51 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0014c3b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014c42:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014c45:	0f b7 c0             	movzx  eax,ax
c0014c48:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0014c4f:	eb 20                	jmp    c0014c71 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014c51:	83 ec 0c             	sub    esp,0xc
c0014c54:	68 e8 42 02 c0       	push   0xc00242e8
c0014c59:	e8 60 7e ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0014c5e:	83 c4 10             	add    esp,0x10
c0014c61:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014c68:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0014c6c:	e9 17 01 00 00       	jmp    c0014d88 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c0014c71:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014c78:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014c7f:	8b 12                	mov    edx,DWORD PTR [edx]
c0014c81:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014c85:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014c8c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014c90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014c94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014c9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ca0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014ca4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014ca8:	89 c6                	mov    esi,eax
c0014caa:	89 d7                	mov    edi,edx
c0014cac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014cae:	89 c8                	mov    eax,ecx
c0014cb0:	89 fa                	mov    edx,edi
c0014cb2:	89 f3                	mov    ebx,esi
c0014cb4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014cb8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014cbc:	89 04 24             	mov    DWORD PTR [esp],eax
c0014cbf:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014cc6:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0014ccd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014cd4:	8d 50 01             	lea    edx,[eax+0x1]
c0014cd7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014cde:	8a 00                	mov    al,BYTE PTR [eax]
c0014ce0:	0f b6 c0             	movzx  eax,al
c0014ce3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0014ce7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014cee:	8d 50 01             	lea    edx,[eax+0x1]
c0014cf1:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014cf8:	8a 00                	mov    al,BYTE PTR [eax]
c0014cfa:	0f b6 c0             	movzx  eax,al
c0014cfd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0014d01:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014d08:	8d 50 01             	lea    edx,[eax+0x1]
c0014d0b:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014d12:	8a 00                	mov    al,BYTE PTR [eax]
c0014d14:	0f b6 c0             	movzx  eax,al
c0014d17:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0014d1b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014d22:	8d 50 01             	lea    edx,[eax+0x1]
c0014d25:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014d2c:	8a 00                	mov    al,BYTE PTR [eax]
c0014d2e:	0f b6 c0             	movzx  eax,al
c0014d31:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014d35:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0014d39:	c1 e0 18             	shl    eax,0x18
c0014d3c:	89 c2                	mov    edx,eax
c0014d3e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0014d42:	c1 e0 10             	shl    eax,0x10
c0014d45:	09 c2                	or     edx,eax
c0014d47:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0014d4b:	c1 e0 08             	shl    eax,0x8
c0014d4e:	09 d0                	or     eax,edx
c0014d50:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0014d54:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014d58:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014d5f:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0014d63:	83 e8 04             	sub    eax,0x4
c0014d66:	83 ec 08             	sub    esp,0x8
c0014d69:	50                   	push   eax
c0014d6a:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014d6e:	e8 f6 fa ff ff       	call   c0014869 <Net::crc32Calc(unsigned char*, int)>
c0014d73:	83 c4 10             	add    esp,0x10
c0014d76:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0014d7a:	0f 94 c2             	sete   dl
c0014d7d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014d84:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0014d87:	90                   	nop
c0014d88:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014d8f:	83 c4 70             	add    esp,0x70
c0014d92:	5b                   	pop    ebx
c0014d93:	5e                   	pop    esi
c0014d94:	5f                   	pop    edi
c0014d95:	c2 04 00             	ret    0x4

c0014d98 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014d98:	55                   	push   ebp
c0014d99:	57                   	push   edi
c0014d9a:	56                   	push   esi
c0014d9b:	53                   	push   ebx
c0014d9c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014da2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014da9:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014dab:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014dae:	80 fb 40             	cmp    bl,0x40
c0014db1:	75 1b                	jne    c0014dce <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014db3:	8a 16                	mov    dl,BYTE PTR [esi]
c0014db5:	84 d2                	test   dl,dl
c0014db7:	0f 84 f1 00 00 00    	je     c0014eae <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014dbd:	8d 46 01             	lea    eax,[esi+0x1]
c0014dc0:	80 fa 3a             	cmp    dl,0x3a
c0014dc3:	74 04                	je     c0014dc9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014dc5:	89 c6                	mov    esi,eax
c0014dc7:	eb ea                	jmp    c0014db3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014dc9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014dcc:	89 c6                	mov    esi,eax
c0014dce:	50                   	push   eax
c0014dcf:	6a 40                	push   0x40
c0014dd1:	6a 00                	push   0x0
c0014dd3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014dd7:	50                   	push   eax
c0014dd8:	e8 73 b9 fe ff       	call   c0000750 <memset>
c0014ddd:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014de4:	31 c0                	xor    eax,eax
c0014de6:	83 c4 10             	add    esp,0x10
c0014de9:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014deb:	84 c9                	test   cl,cl
c0014ded:	0f 84 bb 00 00 00    	je     c0014eae <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014df3:	3d c7 00 00 00       	cmp    eax,0xc7
c0014df8:	0f 8f b0 00 00 00    	jg     c0014eae <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014dfe:	80 f9 0a             	cmp    cl,0xa
c0014e01:	0f 85 98 00 00 00    	jne    c0014e9f <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014e07:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014e0c:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014e10:	a8 df                	test   al,0xdf
c0014e12:	0f 94 c1             	sete   cl
c0014e15:	3c 23                	cmp    al,0x23
c0014e17:	0f 94 c2             	sete   dl
c0014e1a:	08 d1                	or     cl,dl
c0014e1c:	75 4a                	jne    c0014e68 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014e1e:	8d 50 f7             	lea    edx,[eax-0x9]
c0014e21:	80 fa 01             	cmp    dl,0x1
c0014e24:	76 42                	jbe    c0014e68 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014e26:	3c 5b                	cmp    al,0x5b
c0014e28:	75 42                	jne    c0014e6c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014e2a:	80 fb 40             	cmp    bl,0x40
c0014e2d:	75 39                	jne    c0014e68 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014e2f:	83 ec 0c             	sub    esp,0xc
c0014e32:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014e36:	52                   	push   edx
c0014e37:	e8 30 b9 fe ff       	call   c000076c <strlen>
c0014e3c:	83 c4 10             	add    esp,0x10
c0014e3f:	83 f8 3f             	cmp    eax,0x3f
c0014e42:	77 6a                	ja     c0014eae <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014e44:	50                   	push   eax
c0014e45:	50                   	push   eax
c0014e46:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014e4a:	52                   	push   edx
c0014e4b:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014e4f:	52                   	push   edx
c0014e50:	e8 b7 b9 fe ff       	call   c000080c <strcpy>
c0014e55:	58                   	pop    eax
c0014e56:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014e5a:	52                   	push   edx
c0014e5b:	e8 0c b9 fe ff       	call   c000076c <strlen>
c0014e60:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014e65:	83 c4 10             	add    esp,0x10
c0014e68:	31 d2                	xor    edx,edx
c0014e6a:	eb 3a                	jmp    c0014ea6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014e6c:	80 fb 40             	cmp    bl,0x40
c0014e6f:	74 06                	je     c0014e77 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014e71:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014e75:	eb 20                	jmp    c0014e97 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014e77:	50                   	push   eax
c0014e78:	50                   	push   eax
c0014e79:	55                   	push   ebp
c0014e7a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014e7e:	50                   	push   eax
c0014e7f:	e8 14 ba fe ff       	call   c0000898 <strcmp>
c0014e84:	83 c4 10             	add    esp,0x10
c0014e87:	85 c0                	test   eax,eax
c0014e89:	75 dd                	jne    c0014e68 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014e8b:	eb e4                	jmp    c0014e71 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014e8d:	8d 50 01             	lea    edx,[eax+0x1]
c0014e90:	80 f9 3d             	cmp    cl,0x3d
c0014e93:	74 1d                	je     c0014eb2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014e95:	89 d0                	mov    eax,edx
c0014e97:	8a 08                	mov    cl,BYTE PTR [eax]
c0014e99:	84 c9                	test   cl,cl
c0014e9b:	75 f0                	jne    c0014e8d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014e9d:	eb 0f                	jmp    c0014eae <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014e9f:	8d 50 01             	lea    edx,[eax+0x1]
c0014ea2:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014ea6:	47                   	inc    edi
c0014ea7:	89 d0                	mov    eax,edx
c0014ea9:	e9 3b ff ff ff       	jmp    c0014de9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014eae:	31 c0                	xor    eax,eax
c0014eb0:	eb 33                	jmp    c0014ee5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014eb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014eb6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014eb9:	50                   	push   eax
c0014eba:	50                   	push   eax
c0014ebb:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014ebf:	50                   	push   eax
c0014ec0:	56                   	push   esi
c0014ec1:	e8 d2 b9 fe ff       	call   c0000898 <strcmp>
c0014ec6:	83 c4 10             	add    esp,0x10
c0014ec9:	85 c0                	test   eax,eax
c0014ecb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ecf:	75 97                	jne    c0014e68 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014ed1:	51                   	push   ecx
c0014ed2:	51                   	push   ecx
c0014ed3:	52                   	push   edx
c0014ed4:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014edb:	e8 2c b9 fe ff       	call   c000080c <strcpy>
c0014ee0:	83 c4 10             	add    esp,0x10
c0014ee3:	b0 01                	mov    al,0x1
c0014ee5:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014eeb:	5b                   	pop    ebx
c0014eec:	5e                   	pop    esi
c0014eed:	5f                   	pop    edi
c0014eee:	5d                   	pop    ebp
c0014eef:	c3                   	ret    

c0014ef0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014ef0:	57                   	push   edi
c0014ef1:	56                   	push   esi
c0014ef2:	53                   	push   ebx
c0014ef3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014ef9:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0014f00:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0014f07:	53                   	push   ebx
c0014f08:	e8 5f b8 fe ff       	call   c000076c <strlen>
c0014f0d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014f10:	89 c7                	mov    edi,eax
c0014f12:	e8 55 b8 fe ff       	call   c000076c <strlen>
c0014f17:	83 c4 10             	add    esp,0x10
c0014f1a:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014f1e:	3d ff 00 00 00       	cmp    eax,0xff
c0014f23:	0f 87 d3 00 00 00    	ja     c0014ffc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014f29:	57                   	push   edi
c0014f2a:	57                   	push   edi
c0014f2b:	56                   	push   esi
c0014f2c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014f30:	56                   	push   esi
c0014f31:	e8 d6 b8 fe ff       	call   c000080c <strcpy>
c0014f36:	58                   	pop    eax
c0014f37:	5a                   	pop    edx
c0014f38:	68 8a 46 02 c0       	push   0xc002468a
c0014f3d:	56                   	push   esi
c0014f3e:	e8 09 ba fe ff       	call   c000094c <strcat>
c0014f43:	59                   	pop    ecx
c0014f44:	5f                   	pop    edi
c0014f45:	53                   	push   ebx
c0014f46:	56                   	push   esi
c0014f47:	e8 00 ba fe ff       	call   c000094c <strcat>
c0014f4c:	58                   	pop    eax
c0014f4d:	5a                   	pop    edx
c0014f4e:	68 34 43 02 c0       	push   0xc0024334
c0014f53:	56                   	push   esi
c0014f54:	e8 f3 b9 fe ff       	call   c000094c <strcat>
c0014f59:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014f60:	e8 f8 4a ff ff       	call   c0009a5d <malloc>
c0014f65:	83 c4 0c             	add    esp,0xc
c0014f68:	89 c3                	mov    ebx,eax
c0014f6a:	ff 35 90 77 02 c0    	push   DWORD PTR ds:0xc0027790
c0014f70:	56                   	push   esi
c0014f71:	50                   	push   eax
c0014f72:	e8 b1 80 ff ff       	call   c000d028 <File::File(char const*, Process*)>
c0014f77:	83 c4 10             	add    esp,0x10
c0014f7a:	85 db                	test   ebx,ebx
c0014f7c:	74 7e                	je     c0014ffc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014f7e:	51                   	push   ecx
c0014f7f:	51                   	push   ecx
c0014f80:	6a 01                	push   0x1
c0014f82:	53                   	push   ebx
c0014f83:	e8 04 81 ff ff       	call   c000d08c <File::open(FileOpenMode)>
c0014f88:	83 c4 10             	add    esp,0x10
c0014f8b:	85 c0                	test   eax,eax
c0014f8d:	74 08                	je     c0014f97 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0014f8f:	83 ec 0c             	sub    esp,0xc
c0014f92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f94:	53                   	push   ebx
c0014f95:	eb 5f                	jmp    c0014ff6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0014f97:	52                   	push   edx
c0014f98:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014f9c:	50                   	push   eax
c0014f9d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014fa1:	50                   	push   eax
c0014fa2:	53                   	push   ebx
c0014fa3:	e8 90 83 ff ff       	call   c000d338 <File::stat(unsigned long long*, bool*)>
c0014fa8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014fac:	83 c4 10             	add    esp,0x10
c0014faf:	89 c1                	mov    ecx,eax
c0014fb1:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0014fb5:	74 31                	je     c0014fe8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014fb7:	83 ec 0c             	sub    esp,0xc
c0014fba:	50                   	push   eax
c0014fbb:	e8 9d 4a ff ff       	call   c0009a5d <malloc>
c0014fc0:	89 c6                	mov    esi,eax
c0014fc2:	58                   	pop    eax
c0014fc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014fc5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0014fc9:	52                   	push   edx
c0014fca:	56                   	push   esi
c0014fcb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014fcf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014fd3:	53                   	push   ebx
c0014fd4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014fd7:	83 c4 20             	add    esp,0x20
c0014fda:	85 c0                	test   eax,eax
c0014fdc:	75 0a                	jne    c0014fe8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014fde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014fe2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0014fe6:	74 18                	je     c0015000 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0014fe8:	83 ec 0c             	sub    esp,0xc
c0014feb:	53                   	push   ebx
c0014fec:	e8 f9 80 ff ff       	call   c000d0ea <File::close()>
c0014ff1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ff3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ff6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ff9:	83 c4 10             	add    esp,0x10
c0014ffc:	31 c0                	xor    eax,eax
c0014ffe:	eb 3b                	jmp    c001503b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0015000:	83 ec 0c             	sub    esp,0xc
c0015003:	53                   	push   ebx
c0015004:	e8 e1 80 ff ff       	call   c000d0ea <File::close()>
c0015009:	8b 03                	mov    eax,DWORD PTR [ebx]
c001500b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001500e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015011:	83 c4 0c             	add    esp,0xc
c0015014:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001501b:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015022:	56                   	push   esi
c0015023:	e8 70 fd ff ff       	call   c0014d98 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015028:	89 34 24             	mov    DWORD PTR [esp],esi
c001502b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001502f:	e8 39 4a ff ff       	call   c0009a6d <free>
c0015034:	83 c4 10             	add    esp,0x10
c0015037:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001503b:	81 c4 20 01 00 00    	add    esp,0x120
c0015041:	5b                   	pop    ebx
c0015042:	5e                   	pop    esi
c0015043:	5f                   	pop    edi
c0015044:	c3                   	ret    

c0015045 <Reg::getLine(char*, char*, char*)>:
c0015045:	57                   	push   edi
c0015046:	56                   	push   esi
c0015047:	53                   	push   ebx
c0015048:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001504c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015050:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015054:	57                   	push   edi
c0015055:	56                   	push   esi
c0015056:	53                   	push   ebx
c0015057:	68 39 43 02 c0       	push   0xc0024339
c001505c:	e8 8f fe ff ff       	call   c0014ef0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015061:	83 c4 10             	add    esp,0x10
c0015064:	84 c0                	test   al,al
c0015066:	75 10                	jne    c0015078 <Reg::getLine(char*, char*, char*)+0x33>
c0015068:	57                   	push   edi
c0015069:	56                   	push   esi
c001506a:	53                   	push   ebx
c001506b:	68 5e 43 02 c0       	push   0xc002435e
c0015070:	e8 7b fe ff ff       	call   c0014ef0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015075:	83 c4 10             	add    esp,0x10
c0015078:	5b                   	pop    ebx
c0015079:	5e                   	pop    esi
c001507a:	5f                   	pop    edi
c001507b:	c3                   	ret    

c001507c <Reg::readInt(char*, char*, int*)>:
c001507c:	55                   	push   ebp
c001507d:	57                   	push   edi
c001507e:	56                   	push   esi
c001507f:	53                   	push   ebx
c0015080:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015086:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001508a:	57                   	push   edi
c001508b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015092:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015099:	e8 a7 ff ff ff       	call   c0015045 <Reg::getLine(char*, char*, char*)>
c001509e:	83 c4 10             	add    esp,0x10
c00150a1:	84 c0                	test   al,al
c00150a3:	0f 84 b3 00 00 00    	je     c001515c <Reg::readInt(char*, char*, int*)+0xe0>
c00150a9:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00150ad:	80 fa 2b             	cmp    dl,0x2b
c00150b0:	74 0c                	je     c00150be <Reg::readInt(char*, char*, int*)+0x42>
c00150b2:	80 fa 2d             	cmp    dl,0x2d
c00150b5:	75 0e                	jne    c00150c5 <Reg::readInt(char*, char*, int*)+0x49>
c00150b7:	ba 01 00 00 00       	mov    edx,0x1
c00150bc:	eb 0b                	jmp    c00150c9 <Reg::readInt(char*, char*, int*)+0x4d>
c00150be:	ba 01 00 00 00       	mov    edx,0x1
c00150c3:	eb 02                	jmp    c00150c7 <Reg::readInt(char*, char*, int*)+0x4b>
c00150c5:	31 d2                	xor    edx,edx
c00150c7:	31 c0                	xor    eax,eax
c00150c9:	be 0a 00 00 00       	mov    esi,0xa
c00150ce:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00150d3:	75 20                	jne    c00150f5 <Reg::readInt(char*, char*, int*)+0x79>
c00150d5:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00150d9:	80 f9 78             	cmp    cl,0x78
c00150dc:	75 0a                	jne    c00150e8 <Reg::readInt(char*, char*, int*)+0x6c>
c00150de:	83 c2 02             	add    edx,0x2
c00150e1:	be 10 00 00 00       	mov    esi,0x10
c00150e6:	eb 0d                	jmp    c00150f5 <Reg::readInt(char*, char*, int*)+0x79>
c00150e8:	80 f9 62             	cmp    cl,0x62
c00150eb:	75 08                	jne    c00150f5 <Reg::readInt(char*, char*, int*)+0x79>
c00150ed:	83 c2 02             	add    edx,0x2
c00150f0:	be 02 00 00 00       	mov    esi,0x2
c00150f5:	01 d7                	add    edi,edx
c00150f7:	31 d2                	xor    edx,edx
c00150f9:	8a 1f                	mov    bl,BYTE PTR [edi]
c00150fb:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00150ff:	80 fb 0d             	cmp    bl,0xd
c0015102:	0f 94 c3             	sete   bl
c0015105:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001510a:	0f 94 c1             	sete   cl
c001510d:	08 cb                	or     bl,cl
c001510f:	75 3a                	jne    c001514b <Reg::readInt(char*, char*, int*)+0xcf>
c0015111:	0f af d6             	imul   edx,esi
c0015114:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015119:	83 fe 10             	cmp    esi,0x10
c001511c:	75 26                	jne    c0015144 <Reg::readInt(char*, char*, int*)+0xc8>
c001511e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015122:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015125:	89 e9                	mov    ecx,ebp
c0015127:	80 f9 05             	cmp    cl,0x5
c001512a:	77 06                	ja     c0015132 <Reg::readInt(char*, char*, int*)+0xb6>
c001512c:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015130:	eb 16                	jmp    c0015148 <Reg::readInt(char*, char*, int*)+0xcc>
c0015132:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015136:	83 e9 61             	sub    ecx,0x61
c0015139:	80 f9 05             	cmp    cl,0x5
c001513c:	77 06                	ja     c0015144 <Reg::readInt(char*, char*, int*)+0xc8>
c001513e:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015142:	eb 04                	jmp    c0015148 <Reg::readInt(char*, char*, int*)+0xcc>
c0015144:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015148:	47                   	inc    edi
c0015149:	eb ae                	jmp    c00150f9 <Reg::readInt(char*, char*, int*)+0x7d>
c001514b:	84 c0                	test   al,al
c001514d:	74 02                	je     c0015151 <Reg::readInt(char*, char*, int*)+0xd5>
c001514f:	f7 da                	neg    edx
c0015151:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015158:	89 10                	mov    DWORD PTR [eax],edx
c001515a:	88 d8                	mov    al,bl
c001515c:	81 c4 ec 00 00 00    	add    esp,0xec
c0015162:	5b                   	pop    ebx
c0015163:	5e                   	pop    esi
c0015164:	5f                   	pop    edi
c0015165:	5d                   	pop    ebp
c0015166:	c3                   	ret    

c0015167 <Reg::readString(char*, char*, char*, int)>:
c0015167:	57                   	push   edi
c0015168:	56                   	push   esi
c0015169:	53                   	push   ebx
c001516a:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015170:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015177:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001517b:	57                   	push   edi
c001517c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015183:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001518a:	e8 b6 fe ff ff       	call   c0015045 <Reg::getLine(char*, char*, char*)>
c001518f:	83 c4 10             	add    esp,0x10
c0015192:	89 c6                	mov    esi,eax
c0015194:	84 c0                	test   al,al
c0015196:	74 44                	je     c00151dc <Reg::readString(char*, char*, char*, int)+0x75>
c0015198:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001519f:	31 c0                	xor    eax,eax
c00151a1:	4a                   	dec    edx
c00151a2:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00151a5:	84 c9                	test   cl,cl
c00151a7:	74 0f                	je     c00151b8 <Reg::readString(char*, char*, char*, int)+0x51>
c00151a9:	39 c2                	cmp    edx,eax
c00151ab:	7e 0b                	jle    c00151b8 <Reg::readString(char*, char*, char*, int)+0x51>
c00151ad:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00151b0:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00151b5:	40                   	inc    eax
c00151b6:	eb ea                	jmp    c00151a2 <Reg::readString(char*, char*, char*, int)+0x3b>
c00151b8:	83 ec 0c             	sub    esp,0xc
c00151bb:	53                   	push   ebx
c00151bc:	e8 ab b5 fe ff       	call   c000076c <strlen>
c00151c1:	83 c4 10             	add    esp,0x10
c00151c4:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00151c9:	75 11                	jne    c00151dc <Reg::readString(char*, char*, char*, int)+0x75>
c00151cb:	83 ec 0c             	sub    esp,0xc
c00151ce:	53                   	push   ebx
c00151cf:	e8 98 b5 fe ff       	call   c000076c <strlen>
c00151d4:	83 c4 10             	add    esp,0x10
c00151d7:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00151dc:	81 c4 d0 00 00 00    	add    esp,0xd0
c00151e2:	89 f0                	mov    eax,esi
c00151e4:	5b                   	pop    ebx
c00151e5:	5e                   	pop    esi
c00151e6:	5f                   	pop    edi
c00151e7:	c3                   	ret    

c00151e8 <Reg::readBool(char*, char*, bool*)>:
c00151e8:	83 ec 20             	sub    esp,0x20
c00151eb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00151ef:	50                   	push   eax
c00151f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151f8:	e8 7f fe ff ff       	call   c001507c <Reg::readInt(char*, char*, int*)>
c00151fd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015202:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015206:	0f 95 02             	setne  BYTE PTR [edx]
c0015209:	83 c4 2c             	add    esp,0x2c
c001520c:	c3                   	ret    

c001520d <Reg::readBoolWithDefault(char*, char*, bool)>:
c001520d:	53                   	push   ebx
c001520e:	83 ec 1c             	sub    esp,0x1c
c0015211:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015215:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015219:	50                   	push   eax
c001521a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001521e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015222:	e8 c1 ff ff ff       	call   c00151e8 <Reg::readBool(char*, char*, bool*)>
c0015227:	83 c4 10             	add    esp,0x10
c001522a:	84 c0                	test   al,al
c001522c:	74 04                	je     c0015232 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001522e:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015232:	88 d8                	mov    al,bl
c0015234:	83 c4 18             	add    esp,0x18
c0015237:	5b                   	pop    ebx
c0015238:	c3                   	ret    

c0015239 <Reg::readIntWithDefault(char*, char*, int)>:
c0015239:	53                   	push   ebx
c001523a:	83 ec 1c             	sub    esp,0x1c
c001523d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015241:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015245:	50                   	push   eax
c0015246:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001524a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001524e:	e8 29 fe ff ff       	call   c001507c <Reg::readInt(char*, char*, int*)>
c0015253:	83 c4 10             	add    esp,0x10
c0015256:	84 c0                	test   al,al
c0015258:	74 04                	je     c001525e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001525a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001525e:	89 d8                	mov    eax,ebx
c0015260:	83 c4 18             	add    esp,0x18
c0015263:	5b                   	pop    ebx
c0015264:	c3                   	ret    

c0015265 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015265:	57                   	push   edi
c0015266:	56                   	push   esi
c0015267:	56                   	push   esi
c0015268:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001526c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015270:	56                   	push   esi
c0015271:	57                   	push   edi
c0015272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001527a:	e8 e8 fe ff ff       	call   c0015167 <Reg::readString(char*, char*, char*, int)>
c001527f:	83 c4 10             	add    esp,0x10
c0015282:	84 c0                	test   al,al
c0015284:	75 1a                	jne    c00152a0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0015286:	51                   	push   ecx
c0015287:	56                   	push   esi
c0015288:	6a 00                	push   0x0
c001528a:	57                   	push   edi
c001528b:	e8 c0 b4 fe ff       	call   c0000750 <memset>
c0015290:	8d 4e ff             	lea    ecx,[esi-0x1]
c0015293:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015297:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015299:	83 c4 10             	add    esp,0x10
c001529c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00152a0:	89 f8                	mov    eax,edi
c00152a2:	5a                   	pop    edx
c00152a3:	5e                   	pop    esi
c00152a4:	5f                   	pop    edi
c00152a5:	c3                   	ret    

c00152a6 <Sys::eject(regs*)>:
c00152a6:	83 ec 0c             	sub    esp,0xc
c00152a9:	83 ca ff             	or     edx,0xffffffff
c00152ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152b0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00152b3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00152b8:	83 e9 41             	sub    ecx,0x41
c00152bb:	83 f9 19             	cmp    ecx,0x19
c00152be:	77 18                	ja     c00152d8 <Sys::eject(regs*)+0x32>
c00152c0:	8b 0c 8d 60 68 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd97a0]
c00152c7:	85 c9                	test   ecx,ecx
c00152c9:	74 0d                	je     c00152d8 <Sys::eject(regs*)+0x32>
c00152cb:	83 ec 0c             	sub    esp,0xc
c00152ce:	51                   	push   ecx
c00152cf:	e8 e6 b0 ff ff       	call   c00103ba <LogicalDisk::eject()>
c00152d4:	83 c4 10             	add    esp,0x10
c00152d7:	99                   	cdq    
c00152d8:	83 c4 0c             	add    esp,0xc
c00152db:	c3                   	ret    

c00152dc <Sys::exit(regs*)>:
c00152dc:	83 ec 18             	sub    esp,0x18
c00152df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152e3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00152e6:	e8 d3 35 00 00       	call   c00188be <terminateTask(int)>
c00152eb:	83 c8 ff             	or     eax,0xffffffff
c00152ee:	83 c4 1c             	add    esp,0x1c
c00152f1:	89 c2                	mov    edx,eax
c00152f3:	c3                   	ret    

c00152f4 <Sys::getCwd(regs*)>:
c00152f4:	83 ec 10             	sub    esp,0x10
c00152f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00152fb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00152fe:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015301:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015306:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015309:	e8 1c 7b ff ff       	call   c000ce2a <Fs::getcwd(Process*, char*, int)>
c001530e:	83 c4 1c             	add    esp,0x1c
c0015311:	99                   	cdq    
c0015312:	c3                   	ret    

c0015313 <Sys::getPID(regs*)>:
c0015313:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015318:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001531b:	8b 00                	mov    eax,DWORD PTR [eax]
c001531d:	99                   	cdq    
c001531e:	c3                   	ret    

c001531f <Sys::getRAMData(regs*)>:
c001531f:	8b 0d b4 62 02 c0    	mov    ecx,DWORD PTR ds:0xc00262b4
c0015325:	69 05 b0 62 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00262b0,0xc8
c001532f:	99                   	cdq    
c0015330:	f7 f9                	idiv   ecx
c0015332:	c1 e0 18             	shl    eax,0x18
c0015335:	09 c8                	or     eax,ecx
c0015337:	99                   	cdq    
c0015338:	c3                   	ret    

c0015339 <Sys::getVGAPtr(regs*)>:
c0015339:	55                   	push   ebp
c001533a:	57                   	push   edi
c001533b:	56                   	push   esi
c001533c:	53                   	push   ebx
c001533d:	83 ec 18             	sub    esp,0x18
c0015340:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0015344:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0015347:	e8 be 30 00 00       	call   c001840a <Thr::processFromPID(int)>
c001534c:	83 c4 10             	add    esp,0x10
c001534f:	89 c1                	mov    ecx,eax
c0015351:	b8 01 00 00 00       	mov    eax,0x1
c0015356:	85 c9                	test   ecx,ecx
c0015358:	74 59                	je     c00153b3 <Sys::getVGAPtr(regs*)+0x7a>
c001535a:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c0015360:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015364:	74 0c                	je     c0015372 <Sys::getVGAPtr(regs*)+0x39>
c0015366:	83 ec 0c             	sub    esp,0xc
c0015369:	53                   	push   ebx
c001536a:	e8 a8 54 ff ff       	call   c000a817 <setActiveTerminal(VgaText*)>
c001536f:	83 c4 10             	add    esp,0x10
c0015372:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015375:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0015378:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001537d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001537f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0015382:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015385:	81 c3 82 00 00 00    	add    ebx,0x82
c001538b:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015391:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015394:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0015397:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001539d:	50                   	push   eax
c001539e:	50                   	push   eax
c001539f:	53                   	push   ebx
c00153a0:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00153a3:	05 a8 0f 00 00       	add    eax,0xfa8
c00153a8:	50                   	push   eax
c00153a9:	e8 5e b4 fe ff       	call   c000080c <strcpy>
c00153ae:	83 c4 10             	add    esp,0x10
c00153b1:	31 c0                	xor    eax,eax
c00153b3:	83 c4 0c             	add    esp,0xc
c00153b6:	31 d2                	xor    edx,edx
c00153b8:	5b                   	pop    ebx
c00153b9:	5e                   	pop    esi
c00153ba:	5f                   	pop    edi
c00153bb:	5d                   	pop    ebp
c00153bc:	c3                   	ret    

c00153bd <Sys::loadDLL(regs*)>:
c00153bd:	56                   	push   esi
c00153be:	53                   	push   ebx
c00153bf:	31 d2                	xor    edx,edx
c00153c1:	51                   	push   ecx
c00153c2:	b8 01 00 00 00       	mov    eax,0x1
c00153c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00153cb:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00153cf:	0f 84 8c 00 00 00    	je     c0015461 <Sys::loadDLL(regs*)+0xa4>
c00153d5:	83 ec 0c             	sub    esp,0xc
c00153d8:	68 14 01 00 00       	push   0x114
c00153dd:	e8 7b 46 ff ff       	call   c0009a5d <malloc>
c00153e2:	83 c4 0c             	add    esp,0xc
c00153e5:	89 c3                	mov    ebx,eax
c00153e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153ec:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00153ef:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00153f2:	53                   	push   ebx
c00153f3:	e8 30 7c ff ff       	call   c000d028 <File::File(char const*, Process*)>
c00153f8:	83 c4 10             	add    esp,0x10
c00153fb:	31 d2                	xor    edx,edx
c00153fd:	b8 02 00 00 00       	mov    eax,0x2
c0015402:	85 db                	test   ebx,ebx
c0015404:	74 5b                	je     c0015461 <Sys::loadDLL(regs*)+0xa4>
c0015406:	83 ec 0c             	sub    esp,0xc
c0015409:	53                   	push   ebx
c001540a:	e8 eb 7e ff ff       	call   c000d2fa <File::exists()>
c001540f:	83 c4 10             	add    esp,0x10
c0015412:	84 c0                	test   al,al
c0015414:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015416:	75 11                	jne    c0015429 <Sys::loadDLL(regs*)+0x6c>
c0015418:	83 ec 0c             	sub    esp,0xc
c001541b:	53                   	push   ebx
c001541c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001541f:	83 c4 10             	add    esp,0x10
c0015422:	b8 03 00 00 00       	mov    eax,0x3
c0015427:	eb 36                	jmp    c001545f <Sys::loadDLL(regs*)+0xa2>
c0015429:	83 ec 0c             	sub    esp,0xc
c001542c:	53                   	push   ebx
c001542d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015430:	58                   	pop    eax
c0015431:	5a                   	pop    edx
c0015432:	6a 00                	push   0x0
c0015434:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015437:	e8 0e 22 00 00       	call   c001764a <Thr::loadDLL(char const*, bool)>
c001543c:	83 c4 10             	add    esp,0x10
c001543f:	89 c1                	mov    ecx,eax
c0015441:	31 d2                	xor    edx,edx
c0015443:	b8 04 00 00 00       	mov    eax,0x4
c0015448:	85 c9                	test   ecx,ecx
c001544a:	74 15                	je     c0015461 <Sys::loadDLL(regs*)+0xa4>
c001544c:	53                   	push   ebx
c001544d:	53                   	push   ebx
c001544e:	ff 35 68 62 02 c0    	push   DWORD PTR ds:0xc0026268
c0015454:	51                   	push   ecx
c0015455:	e8 21 24 00 00       	call   c001787b <Thr::executeDLL(unsigned long, void*)>
c001545a:	83 c4 10             	add    esp,0x10
c001545d:	31 c0                	xor    eax,eax
c001545f:	31 d2                	xor    edx,edx
c0015461:	59                   	pop    ecx
c0015462:	5b                   	pop    ebx
c0015463:	5e                   	pop    esi
c0015464:	c3                   	ret    

c0015465 <Sys::read(regs*)>:
c0015465:	57                   	push   edi
c0015466:	56                   	push   esi
c0015467:	53                   	push   ebx
c0015468:	83 ec 10             	sub    esp,0x10
c001546b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001546f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015472:	83 f8 02             	cmp    eax,0x2
c0015475:	77 10                	ja     c0015487 <Sys::read(regs*)+0x22>
c0015477:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001547c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001547f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015485:	eb 0e                	jmp    c0015495 <Sys::read(regs*)+0x30>
c0015487:	83 ec 0c             	sub    esp,0xc
c001548a:	50                   	push   eax
c001548b:	e8 fd 60 ff ff       	call   c000b58d <getFromFileDescriptor(int)>
c0015490:	83 c4 10             	add    esp,0x10
c0015493:	89 c1                	mov    ecx,eax
c0015495:	83 c8 ff             	or     eax,0xffffffff
c0015498:	85 c9                	test   ecx,ecx
c001549a:	89 c2                	mov    edx,eax
c001549c:	74 28                	je     c00154c6 <Sys::read(regs*)+0x61>
c001549e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00154a6:	31 ff                	xor    edi,edi
c00154a8:	83 ec 0c             	sub    esp,0xc
c00154ab:	8b 01                	mov    eax,DWORD PTR [ecx]
c00154ad:	8d 54 24 18          	lea    edx,[esp+0x18]
c00154b1:	52                   	push   edx
c00154b2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00154b5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00154b8:	57                   	push   edi
c00154b9:	56                   	push   esi
c00154ba:	51                   	push   ecx
c00154bb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00154be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00154c2:	83 c4 20             	add    esp,0x20
c00154c5:	99                   	cdq    
c00154c6:	83 c4 10             	add    esp,0x10
c00154c9:	5b                   	pop    ebx
c00154ca:	5e                   	pop    esi
c00154cb:	5f                   	pop    edi
c00154cc:	c3                   	ret    

c00154cd <Sys::sbrk(regs*)>:
c00154cd:	56                   	push   esi
c00154ce:	53                   	push   ebx
c00154cf:	50                   	push   eax
c00154d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00154d9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154dc:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00154df:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00154e5:	85 db                	test   ebx,ebx
c00154e7:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00154ea:	74 02                	je     c00154ee <Sys::sbrk(regs*)+0x21>
c00154ec:	79 06                	jns    c00154f4 <Sys::sbrk(regs*)+0x27>
c00154ee:	89 f0                	mov    eax,esi
c00154f0:	31 d2                	xor    edx,edx
c00154f2:	eb 2a                	jmp    c001551e <Sys::sbrk(regs*)+0x51>
c00154f4:	83 c8 ff             	or     eax,0xffffffff
c00154f7:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00154fd:	89 c2                	mov    edx,eax
c00154ff:	77 1d                	ja     c001551e <Sys::sbrk(regs*)+0x51>
c0015501:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015507:	50                   	push   eax
c0015508:	c1 ea 0c             	shr    edx,0xc
c001550b:	68 07 0c 00 00       	push   0xc07
c0015510:	52                   	push   edx
c0015511:	51                   	push   ecx
c0015512:	e8 75 69 ff ff       	call   c000be8c <VAS::allocatePages(int, int)>
c0015517:	89 f0                	mov    eax,esi
c0015519:	31 d2                	xor    edx,edx
c001551b:	83 c4 10             	add    esp,0x10
c001551e:	59                   	pop    ecx
c001551f:	5b                   	pop    ebx
c0015520:	5e                   	pop    esi
c0015521:	c3                   	ret    

c0015522 <Sys::setCwd(regs*)>:
c0015522:	83 ec 14             	sub    esp,0x14
c0015525:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015529:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001552c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015531:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015534:	e8 60 7e ff ff       	call   c000d399 <Fs::setcwd(Process*, char*)>
c0015539:	83 c4 1c             	add    esp,0x1c
c001553c:	99                   	cdq    
c001553d:	c3                   	ret    

c001553e <Sys::setTime(regs*)>:
c001553e:	55                   	push   ebp
c001553f:	31 c9                	xor    ecx,ecx
c0015541:	57                   	push   edi
c0015542:	bd 0c 00 00 00       	mov    ebp,0xc
c0015547:	56                   	push   esi
c0015548:	53                   	push   ebx
c0015549:	31 db                	xor    ebx,ebx
c001554b:	83 ec 10             	sub    esp,0x10
c001554e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015552:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015555:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015558:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001555b:	89 c2                	mov    edx,eax
c001555d:	66 81 ef 6c 07       	sub    di,0x76c
c0015562:	83 e2 1f             	and    edx,0x1f
c0015565:	c1 e7 10             	shl    edi,0x10
c0015568:	42                   	inc    edx
c0015569:	c1 e8 05             	shr    eax,0x5
c001556c:	88 d1                	mov    cl,dl
c001556e:	31 d2                	xor    edx,edx
c0015570:	f7 f5                	div    ebp
c0015572:	89 dd                	mov    ebp,ebx
c0015574:	88 d5                	mov    ch,dl
c0015576:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001557c:	0f b7 c1             	movzx  eax,cx
c001557f:	31 d2                	xor    edx,edx
c0015581:	09 f8                	or     eax,edi
c0015583:	bf 3c 00 00 00       	mov    edi,0x3c
c0015588:	89 c1                	mov    ecx,eax
c001558a:	89 f0                	mov    eax,esi
c001558c:	f7 f7                	div    edi
c001558e:	c1 e2 10             	shl    edx,0x10
c0015591:	09 d5                	or     ebp,edx
c0015593:	31 d2                	xor    edx,edx
c0015595:	89 eb                	mov    ebx,ebp
c0015597:	f7 f7                	div    edi
c0015599:	bf 10 0e 00 00       	mov    edi,0xe10
c001559e:	88 d7                	mov    bh,dl
c00155a0:	89 f0                	mov    eax,esi
c00155a2:	31 d2                	xor    edx,edx
c00155a4:	f7 f7                	div    edi
c00155a6:	bf 18 00 00 00       	mov    edi,0x18
c00155ab:	31 d2                	xor    edx,edx
c00155ad:	f7 f7                	div    edi
c00155af:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c00155b4:	88 d3                	mov    bl,dl
c00155b6:	53                   	push   ebx
c00155b7:	51                   	push   ecx
c00155b8:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00155be:	e8 1f 86 ff ff       	call   c000dbe2 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00155c3:	83 c4 1c             	add    esp,0x1c
c00155c6:	83 f0 01             	xor    eax,0x1
c00155c9:	5b                   	pop    ebx
c00155ca:	0f b6 c0             	movzx  eax,al
c00155cd:	5e                   	pop    esi
c00155ce:	31 d2                	xor    edx,edx
c00155d0:	5f                   	pop    edi
c00155d1:	5d                   	pop    ebp
c00155d2:	c3                   	ret    

c00155d3 <Sys::timezone(regs*)>:
c00155d3:	53                   	push   ebx
c00155d4:	83 ec 08             	sub    esp,0x8
c00155d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00155db:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00155df:	75 17                	jne    c00155f8 <Sys::timezone(regs*)+0x25>
c00155e1:	83 ec 0c             	sub    esp,0xc
c00155e4:	68 79 43 02 c0       	push   0xc0024379
c00155e9:	e8 d0 74 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c00155ee:	83 c8 ff             	or     eax,0xffffffff
c00155f1:	83 c4 10             	add    esp,0x10
c00155f4:	89 c2                	mov    edx,eax
c00155f6:	eb 20                	jmp    c0015618 <Sys::timezone(regs*)+0x45>
c00155f8:	83 ec 0c             	sub    esp,0xc
c00155fb:	68 8e 43 02 c0       	push   0xc002438e
c0015600:	e8 b9 74 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0015605:	58                   	pop    eax
c0015606:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015609:	e8 36 83 ff ff       	call   c000d944 <User::loadClockSettings(int)>
c001560e:	83 c4 10             	add    esp,0x10
c0015611:	b8 01 00 00 00       	mov    eax,0x1
c0015616:	31 d2                	xor    edx,edx
c0015618:	83 c4 08             	add    esp,0x8
c001561b:	5b                   	pop    ebx
c001561c:	c3                   	ret    

c001561d <Sys::write(regs*)>:
c001561d:	57                   	push   edi
c001561e:	56                   	push   esi
c001561f:	53                   	push   ebx
c0015620:	83 ec 10             	sub    esp,0x10
c0015623:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015627:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001562a:	83 f8 02             	cmp    eax,0x2
c001562d:	77 10                	ja     c001563f <Sys::write(regs*)+0x22>
c001562f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015634:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015637:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001563d:	eb 0e                	jmp    c001564d <Sys::write(regs*)+0x30>
c001563f:	83 ec 0c             	sub    esp,0xc
c0015642:	50                   	push   eax
c0015643:	e8 45 5f ff ff       	call   c000b58d <getFromFileDescriptor(int)>
c0015648:	83 c4 10             	add    esp,0x10
c001564b:	89 c1                	mov    ecx,eax
c001564d:	83 c8 ff             	or     eax,0xffffffff
c0015650:	85 c9                	test   ecx,ecx
c0015652:	89 c2                	mov    edx,eax
c0015654:	74 28                	je     c001567e <Sys::write(regs*)+0x61>
c0015656:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001565e:	31 ff                	xor    edi,edi
c0015660:	83 ec 0c             	sub    esp,0xc
c0015663:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015665:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015669:	52                   	push   edx
c001566a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001566d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015670:	57                   	push   edi
c0015671:	56                   	push   esi
c0015672:	51                   	push   ecx
c0015673:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015676:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001567a:	83 c4 20             	add    esp,0x20
c001567d:	99                   	cdq    
c001567e:	83 c4 10             	add    esp,0x10
c0015681:	5b                   	pop    ebx
c0015682:	5e                   	pop    esi
c0015683:	5f                   	pop    edi
c0015684:	c3                   	ret    

c0015685 <Sys::wsbe(regs*)>:
c0015685:	57                   	push   edi
c0015686:	b9 0b 00 00 00       	mov    ecx,0xb
c001568b:	56                   	push   esi
c001568c:	be cd 43 02 c0       	mov    esi,0xc00243cd
c0015691:	53                   	push   ebx
c0015692:	83 ec 30             	sub    esp,0x30
c0015695:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015699:	fc                   	cld    
c001569a:	83 ec 0c             	sub    esp,0xc
c001569d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001569f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00156a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156ab:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c00156b1:	8b 06                	mov    eax,DWORD PTR [esi]
c00156b3:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00156b6:	57                   	push   edi
c00156b7:	e8 b0 b0 fe ff       	call   c000076c <strlen>
c00156bc:	5a                   	pop    edx
c00156bd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00156c1:	52                   	push   edx
c00156c2:	31 d2                	xor    edx,edx
c00156c4:	57                   	push   edi
c00156c5:	52                   	push   edx
c00156c6:	50                   	push   eax
c00156c7:	56                   	push   esi
c00156c8:	ff d3                	call   ebx
c00156ca:	83 c4 14             	add    esp,0x14
c00156cd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00156d1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00156d4:	e8 e5 31 00 00       	call   c00188be <terminateTask(int)>
c00156d9:	83 c4 40             	add    esp,0x40
c00156dc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00156e1:	5b                   	pop    ebx
c00156e2:	31 d2                	xor    edx,edx
c00156e4:	5e                   	pop    esi
c00156e5:	5f                   	pop    edi
c00156e6:	c3                   	ret    

c00156e7 <Sys::yield(regs*)>:
c00156e7:	57                   	push   edi
c00156e8:	56                   	push   esi
c00156e9:	53                   	push   ebx
c00156ea:	fa                   	cli    
c00156eb:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c00156f1:	e8 19 29 00 00       	call   c001800f <schedule()>
c00156f6:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c00156fb:	48                   	dec    eax
c00156fc:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0015701:	75 01                	jne    c0015704 <Sys::yield(regs*)+0x1d>
c0015703:	fb                   	sti    
c0015704:	8b 35 d0 68 02 c0    	mov    esi,DWORD PTR ds:0xc00268d0
c001570a:	8b 3d d4 68 02 c0    	mov    edi,DWORD PTR ds:0xc00268d4
c0015710:	89 f0                	mov    eax,esi
c0015712:	89 fb                	mov    ebx,edi
c0015714:	89 f1                	mov    ecx,esi
c0015716:	c1 e0 07             	shl    eax,0x7
c0015719:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001571d:	25 80 30 0f 00       	and    eax,0xf3080
c0015722:	c1 eb 17             	shr    ebx,0x17
c0015725:	31 c8                	xor    eax,ecx
c0015727:	89 da                	mov    edx,ebx
c0015729:	5b                   	pop    ebx
c001572a:	5e                   	pop    esi
c001572b:	5f                   	pop    edi
c001572c:	c3                   	ret    

c001572d <sysCallSeekDir(regs*)>:
c001572d:	31 c0                	xor    eax,eax
c001572f:	31 d2                	xor    edx,edx
c0015731:	c3                   	ret    

c0015732 <sysCallTellDir(regs*)>:
c0015732:	31 c0                	xor    eax,eax
c0015734:	31 d2                	xor    edx,edx
c0015736:	c3                   	ret    

c0015737 <sysCallVerify(regs*)>:
c0015737:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001573b:	31 d2                	xor    edx,edx
c001573d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015740:	c3                   	ret    

c0015741 <sysCallGetArgc(regs*)>:
c0015741:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015746:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015749:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001574f:	99                   	cdq    
c0015750:	c3                   	ret    

c0015751 <sysFormatDisk(regs*)>:
c0015751:	56                   	push   esi
c0015752:	53                   	push   ebx
c0015753:	53                   	push   ebx
c0015754:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015758:	8b 1d d4 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263d4
c001575e:	eb 25                	jmp    c0015785 <sysFormatDisk(regs*)+0x34>
c0015760:	83 ec 0c             	sub    esp,0xc
c0015763:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015766:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015768:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001576b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001576e:	50                   	push   eax
c001576f:	ff 34 85 60 68 02 c0 	push   DWORD PTR [eax*4-0x3ffd97a0]
c0015776:	53                   	push   ebx
c0015777:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001577a:	83 c4 20             	add    esp,0x20
c001577d:	83 f8 08             	cmp    eax,0x8
c0015780:	75 12                	jne    c0015794 <sysFormatDisk(regs*)+0x43>
c0015782:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015785:	85 db                	test   ebx,ebx
c0015787:	75 d7                	jne    c0015760 <sysFormatDisk(regs*)+0xf>
c0015789:	59                   	pop    ecx
c001578a:	b8 03 00 00 00       	mov    eax,0x3
c001578f:	31 d2                	xor    edx,edx
c0015791:	5b                   	pop    ebx
c0015792:	5e                   	pop    esi
c0015793:	c3                   	ret    
c0015794:	85 c0                	test   eax,eax
c0015796:	74 1b                	je     c00157b3 <sysFormatDisk(regs*)+0x62>
c0015798:	83 f8 09             	cmp    eax,0x9
c001579b:	74 0b                	je     c00157a8 <sysFormatDisk(regs*)+0x57>
c001579d:	59                   	pop    ecx
c001579e:	b8 02 00 00 00       	mov    eax,0x2
c00157a3:	31 d2                	xor    edx,edx
c00157a5:	5b                   	pop    ebx
c00157a6:	5e                   	pop    esi
c00157a7:	c3                   	ret    
c00157a8:	59                   	pop    ecx
c00157a9:	b8 01 00 00 00       	mov    eax,0x1
c00157ae:	31 d2                	xor    edx,edx
c00157b0:	5b                   	pop    ebx
c00157b1:	5e                   	pop    esi
c00157b2:	c3                   	ret    
c00157b3:	59                   	pop    ecx
c00157b4:	31 c0                	xor    eax,eax
c00157b6:	31 d2                	xor    edx,edx
c00157b8:	5b                   	pop    ebx
c00157b9:	5e                   	pop    esi
c00157ba:	c3                   	ret    

c00157bb <sysSetDiskVolumeLabel(regs*)>:
c00157bb:	56                   	push   esi
c00157bc:	53                   	push   ebx
c00157bd:	53                   	push   ebx
c00157be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00157c2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00157c5:	83 f8 19             	cmp    eax,0x19
c00157c8:	77 29                	ja     c00157f3 <sysSetDiskVolumeLabel(regs*)+0x38>
c00157ca:	8b 0c 85 60 68 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd97a0]
c00157d1:	85 c9                	test   ecx,ecx
c00157d3:	74 1e                	je     c00157f3 <sysSetDiskVolumeLabel(regs*)+0x38>
c00157d5:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00157d8:	85 d2                	test   edx,edx
c00157da:	74 17                	je     c00157f3 <sysSetDiskVolumeLabel(regs*)+0x38>
c00157dc:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c00157e2:	8b 33                	mov    esi,DWORD PTR [ebx]
c00157e4:	52                   	push   edx
c00157e5:	50                   	push   eax
c00157e6:	51                   	push   ecx
c00157e7:	53                   	push   ebx
c00157e8:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00157eb:	83 c4 10             	add    esp,0x10
c00157ee:	99                   	cdq    
c00157ef:	59                   	pop    ecx
c00157f0:	5b                   	pop    ebx
c00157f1:	5e                   	pop    esi
c00157f2:	c3                   	ret    
c00157f3:	59                   	pop    ecx
c00157f4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00157f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00157fe:	5b                   	pop    ebx
c00157ff:	5e                   	pop    esi
c0015800:	c3                   	ret    

c0015801 <sysGetDiskVolumeLabel(regs*)>:
c0015801:	57                   	push   edi
c0015802:	56                   	push   esi
c0015803:	53                   	push   ebx
c0015804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015808:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001580b:	83 fa 19             	cmp    edx,0x19
c001580e:	77 34                	ja     c0015844 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015810:	8b 0c 95 60 68 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd97a0]
c0015817:	85 c9                	test   ecx,ecx
c0015819:	74 29                	je     c0015844 <sysGetDiskVolumeLabel(regs*)+0x43>
c001581b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001581e:	85 db                	test   ebx,ebx
c0015820:	74 22                	je     c0015844 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015822:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015825:	85 c0                	test   eax,eax
c0015827:	74 1b                	je     c0015844 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015829:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001582f:	83 ec 0c             	sub    esp,0xc
c0015832:	8b 3e                	mov    edi,DWORD PTR [esi]
c0015834:	50                   	push   eax
c0015835:	53                   	push   ebx
c0015836:	52                   	push   edx
c0015837:	51                   	push   ecx
c0015838:	56                   	push   esi
c0015839:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001583c:	83 c4 20             	add    esp,0x20
c001583f:	99                   	cdq    
c0015840:	5b                   	pop    ebx
c0015841:	5e                   	pop    esi
c0015842:	5f                   	pop    edi
c0015843:	c3                   	ret    
c0015844:	5b                   	pop    ebx
c0015845:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001584a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001584f:	5e                   	pop    esi
c0015850:	5f                   	pop    edi
c0015851:	c3                   	ret    

c0015852 <sysShutdown(regs*)>:
c0015852:	83 ec 0c             	sub    esp,0xc
c0015855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015859:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001585c:	85 c0                	test   eax,eax
c001585e:	74 18                	je     c0015878 <sysShutdown(regs*)+0x26>
c0015860:	83 f8 01             	cmp    eax,0x1
c0015863:	74 38                	je     c001589d <sysShutdown(regs*)+0x4b>
c0015865:	83 f8 02             	cmp    eax,0x2
c0015868:	74 24                	je     c001588e <sysShutdown(regs*)+0x3c>
c001586a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001586f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015874:	83 c4 0c             	add    esp,0xc
c0015877:	c3                   	ret    
c0015878:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c001587d:	8b 10                	mov    edx,DWORD PTR [eax]
c001587f:	6a 00                	push   0x0
c0015881:	6a 00                	push   0x0
c0015883:	6a 00                	push   0x0
c0015885:	50                   	push   eax
c0015886:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015889:	83 c4 10             	add    esp,0x10
c001588c:	eb dc                	jmp    c001586a <sysShutdown(regs*)+0x18>
c001588e:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c0015893:	8b 10                	mov    edx,DWORD PTR [eax]
c0015895:	6a 00                	push   0x0
c0015897:	6a 00                	push   0x0
c0015899:	6a 01                	push   0x1
c001589b:	eb e8                	jmp    c0015885 <sysShutdown(regs*)+0x33>
c001589d:	a1 e0 68 02 c0       	mov    eax,ds:0xc00268e0
c00158a2:	85 c0                	test   eax,eax
c00158a4:	74 02                	je     c00158a8 <sysShutdown(regs*)+0x56>
c00158a6:	ff d0                	call   eax
c00158a8:	31 c0                	xor    eax,eax
c00158aa:	31 d2                	xor    edx,edx
c00158ac:	83 c4 0c             	add    esp,0xc
c00158af:	c3                   	ret    

c00158b0 <sysCallRealpath(regs*)>:
c00158b0:	83 ec 0c             	sub    esp,0xc
c00158b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158b7:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00158ba:	85 d2                	test   edx,edx
c00158bc:	74 07                	je     c00158c5 <sysCallRealpath(regs*)+0x15>
c00158be:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00158c1:	85 c0                	test   eax,eax
c00158c3:	75 0b                	jne    c00158d0 <sysCallRealpath(regs*)+0x20>
c00158c5:	b8 01 00 00 00       	mov    eax,0x1
c00158ca:	31 d2                	xor    edx,edx
c00158cc:	83 c4 0c             	add    esp,0xc
c00158cf:	c3                   	ret    
c00158d0:	51                   	push   ecx
c00158d1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00158d7:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00158da:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00158e0:	51                   	push   ecx
c00158e1:	52                   	push   edx
c00158e2:	50                   	push   eax
c00158e3:	e8 96 75 ff ff       	call   c000ce7e <Fs::standardiseFiles(char*, char const*, char const*)>
c00158e8:	83 c4 10             	add    esp,0x10
c00158eb:	31 c0                	xor    eax,eax
c00158ed:	31 d2                	xor    edx,edx
c00158ef:	83 c4 0c             	add    esp,0xc
c00158f2:	c3                   	ret    

c00158f3 <sysCallReadDir(regs*)>:
c00158f3:	53                   	push   ebx
c00158f4:	83 ec 18             	sub    esp,0x18
c00158f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00158fb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00158fe:	83 f8 02             	cmp    eax,0x2
c0015901:	76 60                	jbe    c0015963 <sysCallReadDir(regs*)+0x70>
c0015903:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001590a:	77 48                	ja     c0015954 <sysCallReadDir(regs*)+0x61>
c001590c:	83 ec 0c             	sub    esp,0xc
c001590f:	50                   	push   eax
c0015910:	e8 78 5c ff ff       	call   c000b58d <getFromFileDescriptor(int)>
c0015915:	83 c4 10             	add    esp,0x10
c0015918:	85 c0                	test   eax,eax
c001591a:	74 38                	je     c0015954 <sysCallReadDir(regs*)+0x61>
c001591c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015924:	83 ec 0c             	sub    esp,0xc
c0015927:	8b 10                	mov    edx,DWORD PTR [eax]
c0015929:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001592d:	51                   	push   ecx
c001592e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015931:	6a 00                	push   0x0
c0015933:	68 10 01 00 00       	push   0x110
c0015938:	50                   	push   eax
c0015939:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001593c:	83 c4 20             	add    esp,0x20
c001593f:	85 c0                	test   eax,eax
c0015941:	74 29                	je     c001596c <sysCallReadDir(regs*)+0x79>
c0015943:	83 f8 07             	cmp    eax,0x7
c0015946:	74 1b                	je     c0015963 <sysCallReadDir(regs*)+0x70>
c0015948:	b8 02 00 00 00       	mov    eax,0x2
c001594d:	31 d2                	xor    edx,edx
c001594f:	83 c4 18             	add    esp,0x18
c0015952:	5b                   	pop    ebx
c0015953:	c3                   	ret    
c0015954:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015959:	ba ff ff ff ff       	mov    edx,0xffffffff
c001595e:	83 c4 18             	add    esp,0x18
c0015961:	5b                   	pop    ebx
c0015962:	c3                   	ret    
c0015963:	b8 01 00 00 00       	mov    eax,0x1
c0015968:	31 d2                	xor    edx,edx
c001596a:	eb e3                	jmp    c001594f <sysCallReadDir(regs*)+0x5c>
c001596c:	31 c0                	xor    eax,eax
c001596e:	31 d2                	xor    edx,edx
c0015970:	eb dd                	jmp    c001594f <sysCallReadDir(regs*)+0x5c>

c0015972 <sysCallIsATTY(regs*)>:
c0015972:	83 ec 0c             	sub    esp,0xc
c0015975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015979:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001597c:	83 f8 02             	cmp    eax,0x2
c001597f:	76 07                	jbe    c0015988 <sysCallIsATTY(regs*)+0x16>
c0015981:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015986:	75 26                	jne    c00159ae <sysCallIsATTY(regs*)+0x3c>
c0015988:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001598d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015990:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015996:	85 c0                	test   eax,eax
c0015998:	74 24                	je     c00159be <sysCallIsATTY(regs*)+0x4c>
c001599a:	83 ec 0c             	sub    esp,0xc
c001599d:	8b 10                	mov    edx,DWORD PTR [eax]
c001599f:	50                   	push   eax
c00159a0:	ff 12                	call   DWORD PTR [edx]
c00159a2:	31 d2                	xor    edx,edx
c00159a4:	0f b6 c0             	movzx  eax,al
c00159a7:	83 c4 10             	add    esp,0x10
c00159aa:	83 c4 0c             	add    esp,0xc
c00159ad:	c3                   	ret    
c00159ae:	83 ec 0c             	sub    esp,0xc
c00159b1:	50                   	push   eax
c00159b2:	e8 d6 5b ff ff       	call   c000b58d <getFromFileDescriptor(int)>
c00159b7:	83 c4 10             	add    esp,0x10
c00159ba:	85 c0                	test   eax,eax
c00159bc:	75 dc                	jne    c001599a <sysCallIsATTY(regs*)+0x28>
c00159be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159c3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159c8:	83 c4 0c             	add    esp,0xc
c00159cb:	c3                   	ret    

c00159cc <sysCallSeek(regs*)>:
c00159cc:	53                   	push   ebx
c00159cd:	83 ec 08             	sub    esp,0x8
c00159d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159d4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00159d7:	8d 50 fd             	lea    edx,[eax-0x3]
c00159da:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00159e0:	77 32                	ja     c0015a14 <sysCallSeek(regs*)+0x48>
c00159e2:	83 ec 0c             	sub    esp,0xc
c00159e5:	50                   	push   eax
c00159e6:	e8 a2 5b ff ff       	call   c000b58d <getFromFileDescriptor(int)>
c00159eb:	83 c4 0c             	add    esp,0xc
c00159ee:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00159f1:	31 db                	xor    ebx,ebx
c00159f3:	53                   	push   ebx
c00159f4:	51                   	push   ecx
c00159f5:	50                   	push   eax
c00159f6:	e8 4f 77 ff ff       	call   c000d14a <File::seek(unsigned long long)>
c00159fb:	83 c4 10             	add    esp,0x10
c00159fe:	85 c0                	test   eax,eax
c0015a00:	0f 95 c0             	setne  al
c0015a03:	31 d2                	xor    edx,edx
c0015a05:	0f b6 c0             	movzx  eax,al
c0015a08:	f7 d8                	neg    eax
c0015a0a:	83 d2 00             	adc    edx,0x0
c0015a0d:	83 c4 08             	add    esp,0x8
c0015a10:	f7 da                	neg    edx
c0015a12:	5b                   	pop    ebx
c0015a13:	c3                   	ret    
c0015a14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a19:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a1e:	83 c4 08             	add    esp,0x8
c0015a21:	5b                   	pop    ebx
c0015a22:	c3                   	ret    

c0015a23 <sysCallTell(regs*)>:
c0015a23:	53                   	push   ebx
c0015a24:	83 ec 08             	sub    esp,0x8
c0015a27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a2b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015a2e:	83 f8 02             	cmp    eax,0x2
c0015a31:	76 4d                	jbe    c0015a80 <sysCallTell(regs*)+0x5d>
c0015a33:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015a38:	76 19                	jbe    c0015a53 <sysCallTell(regs*)+0x30>
c0015a3a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015a3d:	31 d2                	xor    edx,edx
c0015a3f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015a45:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015a4c:	31 c0                	xor    eax,eax
c0015a4e:	83 c4 08             	add    esp,0x8
c0015a51:	5b                   	pop    ebx
c0015a52:	c3                   	ret    
c0015a53:	83 ec 0c             	sub    esp,0xc
c0015a56:	50                   	push   eax
c0015a57:	e8 31 5b ff ff       	call   c000b58d <getFromFileDescriptor(int)>
c0015a5c:	5a                   	pop    edx
c0015a5d:	59                   	pop    ecx
c0015a5e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015a61:	50                   	push   eax
c0015a62:	e8 39 77 ff ff       	call   c000d1a0 <File::tell(unsigned long long*)>
c0015a67:	83 c4 10             	add    esp,0x10
c0015a6a:	85 c0                	test   eax,eax
c0015a6c:	0f 95 c0             	setne  al
c0015a6f:	31 d2                	xor    edx,edx
c0015a71:	0f b6 c0             	movzx  eax,al
c0015a74:	f7 d8                	neg    eax
c0015a76:	83 d2 00             	adc    edx,0x0
c0015a79:	83 c4 08             	add    esp,0x8
c0015a7c:	f7 da                	neg    edx
c0015a7e:	5b                   	pop    ebx
c0015a7f:	c3                   	ret    
c0015a80:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a85:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a8a:	83 c4 08             	add    esp,0x8
c0015a8d:	5b                   	pop    ebx
c0015a8e:	c3                   	ret    

c0015a8f <sysCallSize(regs*)>:
c0015a8f:	53                   	push   ebx
c0015a90:	83 ec 18             	sub    esp,0x18
c0015a93:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015a97:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015a9a:	83 f8 02             	cmp    eax,0x2
c0015a9d:	76 53                	jbe    c0015af2 <sysCallSize(regs*)+0x63>
c0015a9f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015aa4:	76 19                	jbe    c0015abf <sysCallSize(regs*)+0x30>
c0015aa6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015aa9:	31 d2                	xor    edx,edx
c0015aab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015ab1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015ab8:	31 c0                	xor    eax,eax
c0015aba:	83 c4 18             	add    esp,0x18
c0015abd:	5b                   	pop    ebx
c0015abe:	c3                   	ret    
c0015abf:	83 ec 0c             	sub    esp,0xc
c0015ac2:	50                   	push   eax
c0015ac3:	e8 c5 5a ff ff       	call   c000b58d <getFromFileDescriptor(int)>
c0015ac8:	83 c4 0c             	add    esp,0xc
c0015acb:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015acf:	52                   	push   edx
c0015ad0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015ad3:	50                   	push   eax
c0015ad4:	e8 5f 78 ff ff       	call   c000d338 <File::stat(unsigned long long*, bool*)>
c0015ad9:	83 c4 10             	add    esp,0x10
c0015adc:	85 c0                	test   eax,eax
c0015ade:	0f 95 c0             	setne  al
c0015ae1:	31 d2                	xor    edx,edx
c0015ae3:	0f b6 c0             	movzx  eax,al
c0015ae6:	f7 d8                	neg    eax
c0015ae8:	83 d2 00             	adc    edx,0x0
c0015aeb:	83 c4 18             	add    esp,0x18
c0015aee:	f7 da                	neg    edx
c0015af0:	5b                   	pop    ebx
c0015af1:	c3                   	ret    
c0015af2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015af7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015afc:	83 c4 18             	add    esp,0x18
c0015aff:	5b                   	pop    ebx
c0015b00:	c3                   	ret    

c0015b01 <sysCallSizeFromFilename(regs*)>:
c0015b01:	57                   	push   edi
c0015b02:	56                   	push   esi
c0015b03:	53                   	push   ebx
c0015b04:	83 ec 20             	sub    esp,0x20
c0015b07:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015b0b:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015b0e:	83 fb 02             	cmp    ebx,0x2
c0015b11:	0f 86 88 00 00 00    	jbe    c0015b9f <sysCallSizeFromFilename(regs*)+0x9e>
c0015b17:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0015b1d:	76 1b                	jbe    c0015b3a <sysCallSizeFromFilename(regs*)+0x39>
c0015b1f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015b22:	31 d2                	xor    edx,edx
c0015b24:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015b2a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015b31:	83 c4 20             	add    esp,0x20
c0015b34:	31 c0                	xor    eax,eax
c0015b36:	5b                   	pop    ebx
c0015b37:	5e                   	pop    esi
c0015b38:	5f                   	pop    edi
c0015b39:	c3                   	ret    
c0015b3a:	83 ec 0c             	sub    esp,0xc
c0015b3d:	68 14 01 00 00       	push   0x114
c0015b42:	e8 16 3f ff ff       	call   c0009a5d <malloc>
c0015b47:	83 c4 0c             	add    esp,0xc
c0015b4a:	89 c7                	mov    edi,eax
c0015b4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b51:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015b54:	53                   	push   ebx
c0015b55:	57                   	push   edi
c0015b56:	e8 cd 74 ff ff       	call   c000d028 <File::File(char const*, Process*)>
c0015b5b:	83 c4 0c             	add    esp,0xc
c0015b5e:	8d 44 24 23          	lea    eax,[esp+0x23]
c0015b62:	50                   	push   eax
c0015b63:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015b66:	57                   	push   edi
c0015b67:	e8 cc 77 ff ff       	call   c000d338 <File::stat(unsigned long long*, bool*)>
c0015b6c:	83 c4 10             	add    esp,0x10
c0015b6f:	85 ff                	test   edi,edi
c0015b71:	74 14                	je     c0015b87 <sysCallSizeFromFilename(regs*)+0x86>
c0015b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b77:	8b 17                	mov    edx,DWORD PTR [edi]
c0015b79:	83 ec 0c             	sub    esp,0xc
c0015b7c:	57                   	push   edi
c0015b7d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015b80:	83 c4 10             	add    esp,0x10
c0015b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b87:	85 c0                	test   eax,eax
c0015b89:	0f 95 c0             	setne  al
c0015b8c:	31 d2                	xor    edx,edx
c0015b8e:	0f b6 c0             	movzx  eax,al
c0015b91:	f7 d8                	neg    eax
c0015b93:	83 d2 00             	adc    edx,0x0
c0015b96:	83 c4 20             	add    esp,0x20
c0015b99:	f7 da                	neg    edx
c0015b9b:	5b                   	pop    ebx
c0015b9c:	5e                   	pop    esi
c0015b9d:	5f                   	pop    edi
c0015b9e:	c3                   	ret    
c0015b9f:	83 c4 20             	add    esp,0x20
c0015ba2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ba7:	5b                   	pop    ebx
c0015ba8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015bad:	5e                   	pop    esi
c0015bae:	5f                   	pop    edi
c0015baf:	c3                   	ret    

c0015bb0 <sysCallClose(regs*)>:
c0015bb0:	53                   	push   ebx
c0015bb1:	83 ec 08             	sub    esp,0x8
c0015bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bb8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015bbb:	83 f8 02             	cmp    eax,0x2
c0015bbe:	76 41                	jbe    c0015c01 <sysCallClose(regs*)+0x51>
c0015bc0:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015bc6:	83 fa 01             	cmp    edx,0x1
c0015bc9:	76 2d                	jbe    c0015bf8 <sysCallClose(regs*)+0x48>
c0015bcb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015bd0:	77 2f                	ja     c0015c01 <sysCallClose(regs*)+0x51>
c0015bd2:	83 ec 0c             	sub    esp,0xc
c0015bd5:	50                   	push   eax
c0015bd6:	e8 b2 59 ff ff       	call   c000b58d <getFromFileDescriptor(int)>
c0015bdb:	89 c3                	mov    ebx,eax
c0015bdd:	89 04 24             	mov    DWORD PTR [esp],eax
c0015be0:	e8 05 75 ff ff       	call   c000d0ea <File::close()>
c0015be5:	83 c4 10             	add    esp,0x10
c0015be8:	85 db                	test   ebx,ebx
c0015bea:	74 0c                	je     c0015bf8 <sysCallClose(regs*)+0x48>
c0015bec:	83 ec 0c             	sub    esp,0xc
c0015bef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bf1:	53                   	push   ebx
c0015bf2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bf5:	83 c4 10             	add    esp,0x10
c0015bf8:	31 c0                	xor    eax,eax
c0015bfa:	31 d2                	xor    edx,edx
c0015bfc:	83 c4 08             	add    esp,0x8
c0015bff:	5b                   	pop    ebx
c0015c00:	c3                   	ret    
c0015c01:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c06:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c0b:	83 c4 08             	add    esp,0x8
c0015c0e:	5b                   	pop    ebx
c0015c0f:	c3                   	ret    

c0015c10 <sysCallOpenDir(regs*)>:
c0015c10:	56                   	push   esi
c0015c11:	53                   	push   ebx
c0015c12:	53                   	push   ebx
c0015c13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c17:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015c1a:	85 f6                	test   esi,esi
c0015c1c:	74 59                	je     c0015c77 <sysCallOpenDir(regs*)+0x67>
c0015c1e:	83 ec 0c             	sub    esp,0xc
c0015c21:	68 14 01 00 00       	push   0x114
c0015c26:	e8 32 3e ff ff       	call   c0009a5d <malloc>
c0015c2b:	83 c4 0c             	add    esp,0xc
c0015c2e:	89 c6                	mov    esi,eax
c0015c30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c35:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015c38:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015c3b:	56                   	push   esi
c0015c3c:	e8 93 78 ff ff       	call   c000d4d4 <Directory::Directory(char const*, Process*)>
c0015c41:	83 c4 10             	add    esp,0x10
c0015c44:	85 f6                	test   esi,esi
c0015c46:	74 2f                	je     c0015c77 <sysCallOpenDir(regs*)+0x67>
c0015c48:	83 ec 0c             	sub    esp,0xc
c0015c4b:	56                   	push   esi
c0015c4c:	e8 e7 78 ff ff       	call   c000d538 <Directory::open()>
c0015c51:	83 c4 10             	add    esp,0x10
c0015c54:	85 c0                	test   eax,eax
c0015c56:	75 1f                	jne    c0015c77 <sysCallOpenDir(regs*)+0x67>
c0015c58:	83 ec 0c             	sub    esp,0xc
c0015c5b:	56                   	push   esi
c0015c5c:	e8 37 56 ff ff       	call   c000b298 <UnixFile::getFileDescriptor()>
c0015c61:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015c64:	83 c4 10             	add    esp,0x10
c0015c67:	89 02                	mov    DWORD PTR [edx],eax
c0015c69:	c1 f8 1f             	sar    eax,0x1f
c0015c6c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015c6f:	31 c0                	xor    eax,eax
c0015c71:	59                   	pop    ecx
c0015c72:	31 d2                	xor    edx,edx
c0015c74:	5b                   	pop    ebx
c0015c75:	5e                   	pop    esi
c0015c76:	c3                   	ret    
c0015c77:	59                   	pop    ecx
c0015c78:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c7d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c82:	5b                   	pop    ebx
c0015c83:	5e                   	pop    esi
c0015c84:	c3                   	ret    

c0015c85 <sysCallCloseDir(regs*)>:
c0015c85:	53                   	push   ebx
c0015c86:	83 ec 08             	sub    esp,0x8
c0015c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c8d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015c90:	8d 50 fd             	lea    edx,[eax-0x3]
c0015c93:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015c99:	77 2f                	ja     c0015cca <sysCallCloseDir(regs*)+0x45>
c0015c9b:	83 ec 0c             	sub    esp,0xc
c0015c9e:	50                   	push   eax
c0015c9f:	e8 e9 58 ff ff       	call   c000b58d <getFromFileDescriptor(int)>
c0015ca4:	89 c3                	mov    ebx,eax
c0015ca6:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ca9:	e8 e6 78 ff ff       	call   c000d594 <Directory::close()>
c0015cae:	83 c4 10             	add    esp,0x10
c0015cb1:	85 db                	test   ebx,ebx
c0015cb3:	74 0c                	je     c0015cc1 <sysCallCloseDir(regs*)+0x3c>
c0015cb5:	83 ec 0c             	sub    esp,0xc
c0015cb8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015cba:	53                   	push   ebx
c0015cbb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015cbe:	83 c4 10             	add    esp,0x10
c0015cc1:	31 c0                	xor    eax,eax
c0015cc3:	31 d2                	xor    edx,edx
c0015cc5:	83 c4 08             	add    esp,0x8
c0015cc8:	5b                   	pop    ebx
c0015cc9:	c3                   	ret    
c0015cca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ccf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015cd4:	83 c4 08             	add    esp,0x8
c0015cd7:	5b                   	pop    ebx
c0015cd8:	c3                   	ret    

c0015cd9 <sysCallMakeDir(regs*)>:
c0015cd9:	56                   	push   esi
c0015cda:	53                   	push   ebx
c0015cdb:	83 ec 10             	sub    esp,0x10
c0015cde:	68 14 01 00 00       	push   0x114
c0015ce3:	e8 75 3d ff ff       	call   c0009a5d <malloc>
c0015ce8:	83 c4 0c             	add    esp,0xc
c0015ceb:	89 c3                	mov    ebx,eax
c0015ced:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cf2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015cf5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015cf9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015cfc:	53                   	push   ebx
c0015cfd:	e8 d2 77 ff ff       	call   c000d4d4 <Directory::Directory(char const*, Process*)>
c0015d02:	83 c4 10             	add    esp,0x10
c0015d05:	85 db                	test   ebx,ebx
c0015d07:	74 32                	je     c0015d3b <sysCallMakeDir(regs*)+0x62>
c0015d09:	83 ec 0c             	sub    esp,0xc
c0015d0c:	53                   	push   ebx
c0015d0d:	e8 06 7a ff ff       	call   c000d718 <Directory::create()>
c0015d12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d15:	89 c6                	mov    esi,eax
c0015d17:	e8 78 78 ff ff       	call   c000d594 <Directory::close()>
c0015d1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d21:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015d24:	83 c4 10             	add    esp,0x10
c0015d27:	31 c0                	xor    eax,eax
c0015d29:	59                   	pop    ecx
c0015d2a:	85 f6                	test   esi,esi
c0015d2c:	5b                   	pop    ebx
c0015d2d:	0f 95 c0             	setne  al
c0015d30:	5e                   	pop    esi
c0015d31:	31 d2                	xor    edx,edx
c0015d33:	f7 d8                	neg    eax
c0015d35:	83 d2 00             	adc    edx,0x0
c0015d38:	f7 da                	neg    edx
c0015d3a:	c3                   	ret    
c0015d3b:	59                   	pop    ecx
c0015d3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d41:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015d46:	5b                   	pop    ebx
c0015d47:	5e                   	pop    esi
c0015d48:	c3                   	ret    

c0015d49 <sysCallWait(regs*)>:
c0015d49:	83 ec 10             	sub    esp,0x10
c0015d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d50:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015d53:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015d56:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015d59:	e8 b4 24 00 00       	call   c0018212 <waitTask(int, int*, int)>
c0015d5e:	83 c4 1c             	add    esp,0x1c
c0015d61:	99                   	cdq    
c0015d62:	c3                   	ret    

c0015d63 <sysCallNotImpl(regs*)>:
c0015d63:	83 ec 18             	sub    esp,0x18
c0015d66:	68 f9 43 02 c0       	push   0xc00243f9
c0015d6b:	e8 0d e7 ff ff       	call   c001447d <Krnl::panic(char const*)>
c0015d70:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d75:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015d7a:	83 c4 1c             	add    esp,0x1c
c0015d7d:	c3                   	ret    

c0015d7e <sysPanic(regs*)>:
c0015d7e:	83 ec 18             	sub    esp,0x18
c0015d81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d85:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015d88:	e8 f0 e6 ff ff       	call   c001447d <Krnl::panic(char const*)>
c0015d8d:	b8 01 00 00 00       	mov    eax,0x1
c0015d92:	31 d2                	xor    edx,edx
c0015d94:	83 c4 1c             	add    esp,0x1c
c0015d97:	c3                   	ret    

c0015d98 <sysCallRmdir(regs*)>:
c0015d98:	56                   	push   esi
c0015d99:	53                   	push   ebx
c0015d9a:	83 ec 20             	sub    esp,0x20
c0015d9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015da1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015da4:	68 14 01 00 00       	push   0x114
c0015da9:	e8 af 3c ff ff       	call   c0009a5d <malloc>
c0015dae:	83 c4 0c             	add    esp,0xc
c0015db1:	89 c3                	mov    ebx,eax
c0015db3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015db8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015dbb:	56                   	push   esi
c0015dbc:	53                   	push   ebx
c0015dbd:	e8 66 72 ff ff       	call   c000d028 <File::File(char const*, Process*)>
c0015dc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015dc5:	e8 3a 74 ff ff       	call   c000d204 <File::unlink()>
c0015dca:	83 c4 10             	add    esp,0x10
c0015dcd:	85 db                	test   ebx,ebx
c0015dcf:	74 14                	je     c0015de5 <sysCallRmdir(regs*)+0x4d>
c0015dd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015dd5:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015dd7:	83 ec 0c             	sub    esp,0xc
c0015dda:	53                   	push   ebx
c0015ddb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015dde:	83 c4 10             	add    esp,0x10
c0015de1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015de5:	85 c0                	test   eax,eax
c0015de7:	0f 95 c0             	setne  al
c0015dea:	31 d2                	xor    edx,edx
c0015dec:	0f b6 c0             	movzx  eax,al
c0015def:	f7 d8                	neg    eax
c0015df1:	83 d2 00             	adc    edx,0x0
c0015df4:	83 c4 14             	add    esp,0x14
c0015df7:	f7 da                	neg    edx
c0015df9:	5b                   	pop    ebx
c0015dfa:	5e                   	pop    esi
c0015dfb:	c3                   	ret    

c0015dfc <sysCallUnlink(regs*)>:
c0015dfc:	56                   	push   esi
c0015dfd:	53                   	push   ebx
c0015dfe:	83 ec 20             	sub    esp,0x20
c0015e01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015e05:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015e08:	68 14 01 00 00       	push   0x114
c0015e0d:	e8 4b 3c ff ff       	call   c0009a5d <malloc>
c0015e12:	83 c4 0c             	add    esp,0xc
c0015e15:	89 c3                	mov    ebx,eax
c0015e17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e1c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015e1f:	56                   	push   esi
c0015e20:	53                   	push   ebx
c0015e21:	e8 02 72 ff ff       	call   c000d028 <File::File(char const*, Process*)>
c0015e26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e29:	e8 d6 73 ff ff       	call   c000d204 <File::unlink()>
c0015e2e:	83 c4 10             	add    esp,0x10
c0015e31:	85 db                	test   ebx,ebx
c0015e33:	74 14                	je     c0015e49 <sysCallUnlink(regs*)+0x4d>
c0015e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e39:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015e3b:	83 ec 0c             	sub    esp,0xc
c0015e3e:	53                   	push   ebx
c0015e3f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015e42:	83 c4 10             	add    esp,0x10
c0015e45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e49:	85 c0                	test   eax,eax
c0015e4b:	0f 95 c0             	setne  al
c0015e4e:	31 d2                	xor    edx,edx
c0015e50:	0f b6 c0             	movzx  eax,al
c0015e53:	f7 d8                	neg    eax
c0015e55:	83 d2 00             	adc    edx,0x0
c0015e58:	83 c4 14             	add    esp,0x14
c0015e5b:	f7 da                	neg    edx
c0015e5d:	5b                   	pop    ebx
c0015e5e:	5e                   	pop    esi
c0015e5f:	c3                   	ret    

c0015e60 <sysCallGetArgv(regs*)>:
c0015e60:	83 ec 0c             	sub    esp,0xc
c0015e63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e67:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015e6a:	85 c0                	test   eax,eax
c0015e6c:	78 2b                	js     c0015e99 <sysCallGetArgv(regs*)+0x39>
c0015e6e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015e74:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015e77:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0015e7d:	7d 1a                	jge    c0015e99 <sysCallGetArgv(regs*)+0x39>
c0015e7f:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0015e86:	85 c0                	test   eax,eax
c0015e88:	74 17                	je     c0015ea1 <sysCallGetArgv(regs*)+0x41>
c0015e8a:	83 ec 08             	sub    esp,0x8
c0015e8d:	50                   	push   eax
c0015e8e:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015e91:	e8 76 a9 fe ff       	call   c000080c <strcpy>
c0015e96:	83 c4 10             	add    esp,0x10
c0015e99:	31 c0                	xor    eax,eax
c0015e9b:	31 d2                	xor    edx,edx
c0015e9d:	83 c4 0c             	add    esp,0xc
c0015ea0:	c3                   	ret    
c0015ea1:	b8 01 00 00 00       	mov    eax,0x1
c0015ea6:	31 d2                	xor    edx,edx
c0015ea8:	83 c4 0c             	add    esp,0xc
c0015eab:	c3                   	ret    

c0015eac <sysCallTTYName(regs*)>:
c0015eac:	56                   	push   esi
c0015ead:	53                   	push   ebx
c0015eae:	53                   	push   ebx
c0015eaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015eb3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015eb6:	85 c0                	test   eax,eax
c0015eb8:	74 5f                	je     c0015f19 <sysCallTTYName(regs*)+0x6d>
c0015eba:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015ebd:	83 f8 02             	cmp    eax,0x2
c0015ec0:	77 3e                	ja     c0015f00 <sysCallTTYName(regs*)+0x54>
c0015ec2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ec7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015eca:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015ed0:	85 db                	test   ebx,ebx
c0015ed2:	74 45                	je     c0015f19 <sysCallTTYName(regs*)+0x6d>
c0015ed4:	83 ec 0c             	sub    esp,0xc
c0015ed7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ed9:	53                   	push   ebx
c0015eda:	ff 10                	call   DWORD PTR [eax]
c0015edc:	83 c4 10             	add    esp,0x10
c0015edf:	84 c0                	test   al,al
c0015ee1:	74 41                	je     c0015f24 <sysCallTTYName(regs*)+0x78>
c0015ee3:	83 ec 08             	sub    esp,0x8
c0015ee6:	81 c3 82 00 00 00    	add    ebx,0x82
c0015eec:	53                   	push   ebx
c0015eed:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015ef0:	e8 17 a9 fe ff       	call   c000080c <strcpy>
c0015ef5:	83 c4 10             	add    esp,0x10
c0015ef8:	31 c0                	xor    eax,eax
c0015efa:	59                   	pop    ecx
c0015efb:	31 d2                	xor    edx,edx
c0015efd:	5b                   	pop    ebx
c0015efe:	5e                   	pop    esi
c0015eff:	c3                   	ret    
c0015f00:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015f05:	74 bb                	je     c0015ec2 <sysCallTTYName(regs*)+0x16>
c0015f07:	83 ec 0c             	sub    esp,0xc
c0015f0a:	50                   	push   eax
c0015f0b:	e8 7d 56 ff ff       	call   c000b58d <getFromFileDescriptor(int)>
c0015f10:	83 c4 10             	add    esp,0x10
c0015f13:	89 c3                	mov    ebx,eax
c0015f15:	85 db                	test   ebx,ebx
c0015f17:	75 bb                	jne    c0015ed4 <sysCallTTYName(regs*)+0x28>
c0015f19:	59                   	pop    ecx
c0015f1a:	b8 01 00 00 00       	mov    eax,0x1
c0015f1f:	31 d2                	xor    edx,edx
c0015f21:	5b                   	pop    ebx
c0015f22:	5e                   	pop    esi
c0015f23:	c3                   	ret    
c0015f24:	59                   	pop    ecx
c0015f25:	b8 02 00 00 00       	mov    eax,0x2
c0015f2a:	31 d2                	xor    edx,edx
c0015f2c:	5b                   	pop    ebx
c0015f2d:	5e                   	pop    esi
c0015f2e:	c3                   	ret    

c0015f2f <sysCallUSleep(regs*)>:
c0015f2f:	83 ec 14             	sub    esp,0x14
c0015f32:	b8 e8 03 00 00       	mov    eax,0x3e8
c0015f37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015f3b:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0015f42:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0015f45:	01 ca                	add    edx,ecx
c0015f47:	52                   	push   edx
c0015f48:	50                   	push   eax
c0015f49:	e8 9b 23 00 00       	call   c00182e9 <nanoSleep(unsigned long long)>
c0015f4e:	31 c0                	xor    eax,eax
c0015f50:	31 d2                	xor    edx,edx
c0015f52:	83 c4 1c             	add    esp,0x1c
c0015f55:	c3                   	ret    

c0015f56 <sysCallSpawn(regs*)>:
c0015f56:	56                   	push   esi
c0015f57:	53                   	push   ebx
c0015f58:	50                   	push   eax
c0015f59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f5d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015f60:	85 c0                	test   eax,eax
c0015f62:	75 08                	jne    c0015f6c <sysCallSpawn(regs*)+0x16>
c0015f64:	59                   	pop    ecx
c0015f65:	31 c0                	xor    eax,eax
c0015f67:	31 d2                	xor    edx,edx
c0015f69:	5b                   	pop    ebx
c0015f6a:	5e                   	pop    esi
c0015f6b:	c3                   	ret    
c0015f6c:	83 ec 0c             	sub    esp,0xc
c0015f6f:	68 3f 07 00 00       	push   0x73f
c0015f74:	e8 e4 3a ff ff       	call   c0009a5d <malloc>
c0015f79:	83 c4 10             	add    esp,0x10
c0015f7c:	89 c6                	mov    esi,eax
c0015f7e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0015f81:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015f84:	85 c0                	test   eax,eax
c0015f86:	75 32                	jne    c0015fba <sysCallSpawn(regs*)+0x64>
c0015f88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f8d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015f90:	52                   	push   edx
c0015f91:	50                   	push   eax
c0015f92:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015f95:	56                   	push   esi
c0015f96:	e8 73 1a 00 00       	call   c0017a0e <Process::Process(char const*, Process*, char**)>
c0015f9b:	83 c4 10             	add    esp,0x10
c0015f9e:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c0015fa5:	75 bd                	jne    c0015f64 <sysCallSpawn(regs*)+0xe>
c0015fa7:	83 ec 0c             	sub    esp,0xc
c0015faa:	56                   	push   esi
c0015fab:	e8 40 1f 00 00       	call   c0017ef0 <Process::createUserThread()>
c0015fb0:	8b 06                	mov    eax,DWORD PTR [esi]
c0015fb2:	83 c4 10             	add    esp,0x10
c0015fb5:	99                   	cdq    
c0015fb6:	59                   	pop    ecx
c0015fb7:	5b                   	pop    ebx
c0015fb8:	5e                   	pop    esi
c0015fb9:	c3                   	ret    
c0015fba:	31 c0                	xor    eax,eax
c0015fbc:	eb d2                	jmp    c0015f90 <sysCallSpawn(regs*)+0x3a>

c0015fbe <sysCallGetEnv(regs*)>:
c0015fbe:	57                   	push   edi
c0015fbf:	56                   	push   esi
c0015fc0:	53                   	push   ebx
c0015fc1:	83 ec 1c             	sub    esp,0x1c
c0015fc4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015fc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fcd:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0015fd0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015fd3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015fd6:	e8 ee e3 ff ff       	call   c00143c9 <Krnl::getProcessTotalEnvCount(Process*)>
c0015fdb:	83 c4 10             	add    esp,0x10
c0015fde:	39 c7                	cmp    edi,eax
c0015fe0:	7c 14                	jl     c0015ff6 <sysCallGetEnv(regs*)+0x38>
c0015fe2:	85 f6                	test   esi,esi
c0015fe4:	75 0b                	jne    c0015ff1 <sysCallGetEnv(regs*)+0x33>
c0015fe6:	83 c4 10             	add    esp,0x10
c0015fe9:	31 c0                	xor    eax,eax
c0015feb:	5b                   	pop    ebx
c0015fec:	31 d2                	xor    edx,edx
c0015fee:	5e                   	pop    esi
c0015fef:	5f                   	pop    edi
c0015ff0:	c3                   	ret    
c0015ff1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015ff4:	eb f0                	jmp    c0015fe6 <sysCallGetEnv(regs*)+0x28>
c0015ff6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015ffa:	52                   	push   edx
c0015ffb:	57                   	push   edi
c0015ffc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016002:	ff 72 40             	push   DWORD PTR [edx+0x40]
c0016005:	50                   	push   eax
c0016006:	e8 de e3 ff ff       	call   c00143e9 <Krnl::getProcessEnvPair(Process*, int)>
c001600b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001600e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016012:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016016:	83 c4 0c             	add    esp,0xc
c0016019:	85 c9                	test   ecx,ecx
c001601b:	75 23                	jne    c0016040 <sysCallGetEnv(regs*)+0x82>
c001601d:	83 ec 0c             	sub    esp,0xc
c0016020:	50                   	push   eax
c0016021:	e8 46 a7 fe ff       	call   c000076c <strlen>
c0016026:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016029:	89 c3                	mov    ebx,eax
c001602b:	e8 3c a7 fe ff       	call   c000076c <strlen>
c0016030:	83 c4 10             	add    esp,0x10
c0016033:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0016037:	83 c4 10             	add    esp,0x10
c001603a:	31 d2                	xor    edx,edx
c001603c:	5b                   	pop    ebx
c001603d:	5e                   	pop    esi
c001603e:	5f                   	pop    edi
c001603f:	c3                   	ret    
c0016040:	83 ec 08             	sub    esp,0x8
c0016043:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016046:	50                   	push   eax
c0016047:	56                   	push   esi
c0016048:	e8 bf a7 fe ff       	call   c000080c <strcpy>
c001604d:	58                   	pop    eax
c001604e:	5a                   	pop    edx
c001604f:	68 13 44 02 c0       	push   0xc0024413
c0016054:	56                   	push   esi
c0016055:	e8 f2 a8 fe ff       	call   c000094c <strcat>
c001605a:	59                   	pop    ecx
c001605b:	5b                   	pop    ebx
c001605c:	57                   	push   edi
c001605d:	56                   	push   esi
c001605e:	e8 e9 a8 fe ff       	call   c000094c <strcat>
c0016063:	83 c4 10             	add    esp,0x10
c0016066:	e9 7b ff ff ff       	jmp    c0015fe6 <sysCallGetEnv(regs*)+0x28>

c001606b <sysAppSettings(regs*)>:
c001606b:	57                   	push   edi
c001606c:	56                   	push   esi
c001606d:	56                   	push   esi
c001606e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016072:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016075:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001607b:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016080:	66 3d c0 09          	cmp    ax,0x9c0
c0016084:	75 2e                	jne    c00160b4 <sysAppSettings(regs*)+0x49>
c0016086:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001608c:	83 e0 1f             	and    eax,0x1f
c001608f:	3c 01                	cmp    al,0x1
c0016091:	74 2c                	je     c00160bf <sysAppSettings(regs*)+0x54>
c0016093:	3c 07                	cmp    al,0x7
c0016095:	0f 84 b3 00 00 00    	je     c001614e <sysAppSettings(regs*)+0xe3>
c001609b:	84 c0                	test   al,al
c001609d:	0f 84 d2 00 00 00    	je     c0016175 <sysAppSettings(regs*)+0x10a>
c00160a3:	3c 08                	cmp    al,0x8
c00160a5:	74 63                	je     c001610a <sysAppSettings(regs*)+0x9f>
c00160a7:	59                   	pop    ecx
c00160a8:	0f b6 c0             	movzx  eax,al
c00160ab:	5e                   	pop    esi
c00160ac:	05 e8 03 00 00       	add    eax,0x3e8
c00160b1:	5f                   	pop    edi
c00160b2:	99                   	cdq    
c00160b3:	c3                   	ret    
c00160b4:	b8 01 00 00 00       	mov    eax,0x1
c00160b9:	59                   	pop    ecx
c00160ba:	31 d2                	xor    edx,edx
c00160bc:	5e                   	pop    esi
c00160bd:	5f                   	pop    edi
c00160be:	c3                   	ret    
c00160bf:	50                   	push   eax
c00160c0:	68 00 01 00 00       	push   0x100
c00160c5:	6a 00                	push   0x0
c00160c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00160cf:	83 c0 0c             	add    eax,0xc
c00160d2:	50                   	push   eax
c00160d3:	e8 78 a6 fe ff       	call   c0000750 <memset>
c00160d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160dd:	b9 ff 00 00 00       	mov    ecx,0xff
c00160e2:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c00160e5:	83 c7 0c             	add    edi,0xc
c00160e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00160ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160ef:	5a                   	pop    edx
c00160f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00160f3:	59                   	pop    ecx
c00160f4:	8d 50 0c             	lea    edx,[eax+0xc]
c00160f7:	52                   	push   edx
c00160f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00160fe:	e8 b3 45 ff ff       	call   c000a6b6 <VgaText::setTitle(char*)>
c0016103:	83 c4 10             	add    esp,0x10
c0016106:	31 c0                	xor    eax,eax
c0016108:	eb af                	jmp    c00160b9 <sysAppSettings(regs*)+0x4e>
c001610a:	83 ec 08             	sub    esp,0x8
c001610d:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016113:	83 e0 0f             	and    eax,0xf
c0016116:	50                   	push   eax
c0016117:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001611c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001611f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016125:	e8 7c 45 ff ff       	call   c000a6a6 <VgaText::setTitleColour(VgaColour)>
c001612a:	5f                   	pop    edi
c001612b:	58                   	pop    eax
c001612c:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016132:	c1 e8 04             	shr    eax,0x4
c0016135:	83 e0 0f             	and    eax,0xf
c0016138:	50                   	push   eax
c0016139:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001613e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016141:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016147:	e8 4a 45 ff ff       	call   c000a696 <VgaText::setTitleTextColour(VgaColour)>
c001614c:	eb b5                	jmp    c0016103 <sysAppSettings(regs*)+0x98>
c001614e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016153:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016156:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001615c:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0016162:	c0 e8 06             	shr    al,0x6
c0016165:	83 e0 01             	and    eax,0x1
c0016168:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001616e:	31 c0                	xor    eax,eax
c0016170:	e9 44 ff ff ff       	jmp    c00160b9 <sysAppSettings(regs*)+0x4e>
c0016175:	b8 02 00 00 00       	mov    eax,0x2
c001617a:	e9 3a ff ff ff       	jmp    c00160b9 <sysAppSettings(regs*)+0x4e>

c001617f <sysSetFatAttrib(regs*)>:
c001617f:	57                   	push   edi
c0016180:	56                   	push   esi
c0016181:	53                   	push   ebx
c0016182:	83 ec 1c             	sub    esp,0x1c
c0016185:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016189:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001618c:	68 14 01 00 00       	push   0x114
c0016191:	e8 c7 38 ff ff       	call   c0009a5d <malloc>
c0016196:	83 c4 0c             	add    esp,0xc
c0016199:	89 c3                	mov    ebx,eax
c001619b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161a0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00161a3:	57                   	push   edi
c00161a4:	53                   	push   ebx
c00161a5:	e8 7e 6e ff ff       	call   c000d028 <File::File(char const*, Process*)>
c00161aa:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00161ad:	83 c4 0c             	add    esp,0xc
c00161b0:	0f b6 d4             	movzx  edx,ah
c00161b3:	0f b6 c0             	movzx  eax,al
c00161b6:	52                   	push   edx
c00161b7:	50                   	push   eax
c00161b8:	53                   	push   ebx
c00161b9:	e8 e0 70 ff ff       	call   c000d29e <File::chfatattr(unsigned char, unsigned char)>
c00161be:	83 c4 10             	add    esp,0x10
c00161c1:	85 db                	test   ebx,ebx
c00161c3:	74 14                	je     c00161d9 <sysSetFatAttrib(regs*)+0x5a>
c00161c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00161c9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00161cb:	83 ec 0c             	sub    esp,0xc
c00161ce:	53                   	push   ebx
c00161cf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00161d2:	83 c4 10             	add    esp,0x10
c00161d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00161d9:	85 c0                	test   eax,eax
c00161db:	0f 95 c0             	setne  al
c00161de:	31 d2                	xor    edx,edx
c00161e0:	0f b6 c0             	movzx  eax,al
c00161e3:	f7 d8                	neg    eax
c00161e5:	83 d2 00             	adc    edx,0x0
c00161e8:	83 c4 10             	add    esp,0x10
c00161eb:	f7 da                	neg    edx
c00161ed:	5b                   	pop    ebx
c00161ee:	5e                   	pop    esi
c00161ef:	5f                   	pop    edi
c00161f0:	c3                   	ret    

c00161f1 <sysPipe(regs*)>:
c00161f1:	57                   	push   edi
c00161f2:	56                   	push   esi
c00161f3:	53                   	push   ebx
c00161f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161f8:	83 ec 0c             	sub    esp,0xc
c00161fb:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00161fe:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016201:	6a 20                	push   0x20
c0016203:	e8 55 38 ff ff       	call   c0009a5d <malloc>
c0016208:	89 c3                	mov    ebx,eax
c001620a:	58                   	pop    eax
c001620b:	5a                   	pop    edx
c001620c:	68 00 50 00 00       	push   0x5000
c0016211:	53                   	push   ebx
c0016212:	e8 17 42 ff ff       	call   c000a42e <Pipe::Pipe(int)>
c0016217:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001621a:	e8 79 50 ff ff       	call   c000b298 <UnixFile::getFileDescriptor()>
c001621f:	89 07                	mov    DWORD PTR [edi],eax
c0016221:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016224:	e8 6f 50 ff ff       	call   c000b298 <UnixFile::getFileDescriptor()>
c0016229:	83 c4 10             	add    esp,0x10
c001622c:	89 06                	mov    DWORD PTR [esi],eax
c001622e:	31 d2                	xor    edx,edx
c0016230:	5b                   	pop    ebx
c0016231:	31 c0                	xor    eax,eax
c0016233:	5e                   	pop    esi
c0016234:	5f                   	pop    edi
c0016235:	c3                   	ret    

c0016236 <sysGetUnixTime(regs*)>:
c0016236:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c001623b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016241:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016245:	e9 d0 77 ff ff       	jmp    c000da1a <Clock::timeInSecondsLocal()>

c001624a <string_ends_with(char const*, char const*)>:
c001624a:	57                   	push   edi
c001624b:	56                   	push   esi
c001624c:	53                   	push   ebx
c001624d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016251:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016255:	83 ec 0c             	sub    esp,0xc
c0016258:	53                   	push   ebx
c0016259:	e8 0e a5 fe ff       	call   c000076c <strlen>
c001625e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016261:	89 c6                	mov    esi,eax
c0016263:	e8 04 a5 fe ff       	call   c000076c <strlen>
c0016268:	83 c4 10             	add    esp,0x10
c001626b:	39 c6                	cmp    esi,eax
c001626d:	7d 06                	jge    c0016275 <string_ends_with(char const*, char const*)+0x2b>
c001626f:	5b                   	pop    ebx
c0016270:	31 c0                	xor    eax,eax
c0016272:	5e                   	pop    esi
c0016273:	5f                   	pop    edi
c0016274:	c3                   	ret    
c0016275:	83 ec 08             	sub    esp,0x8
c0016278:	29 c6                	sub    esi,eax
c001627a:	57                   	push   edi
c001627b:	01 f3                	add    ebx,esi
c001627d:	53                   	push   ebx
c001627e:	e8 15 a6 fe ff       	call   c0000898 <strcmp>
c0016283:	83 c4 10             	add    esp,0x10
c0016286:	85 c0                	test   eax,eax
c0016288:	5b                   	pop    ebx
c0016289:	0f 94 c0             	sete   al
c001628c:	5e                   	pop    esi
c001628d:	0f b6 c0             	movzx  eax,al
c0016290:	5f                   	pop    edi
c0016291:	c3                   	ret    

c0016292 <sysCallOpen(regs*)>:
c0016292:	56                   	push   esi
c0016293:	53                   	push   ebx
c0016294:	81 ec 04 01 00 00    	sub    esp,0x104
c001629a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00162a1:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00162a4:	85 c9                	test   ecx,ecx
c00162a6:	0f 84 ad 01 00 00    	je     c0016459 <sysCallOpen(regs*)+0x1c7>
c00162ac:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00162af:	85 c0                	test   eax,eax
c00162b1:	0f 84 a2 01 00 00    	je     c0016459 <sysCallOpen(regs*)+0x1c7>
c00162b7:	52                   	push   edx
c00162b8:	68 15 44 02 c0       	push   0xc0024415
c00162bd:	50                   	push   eax
c00162be:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00162c2:	56                   	push   esi
c00162c3:	e8 b6 6b ff ff       	call   c000ce7e <Fs::standardiseFiles(char*, char const*, char const*)>
c00162c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00162cb:	e8 9c a4 fe ff       	call   c000076c <strlen>
c00162d0:	83 c4 10             	add    esp,0x10
c00162d3:	48                   	dec    eax
c00162d4:	74 1d                	je     c00162f3 <sysCallOpen(regs*)+0x61>
c00162d6:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00162d9:	eb 0f                	jmp    c00162ea <sysCallOpen(regs*)+0x58>
c00162db:	80 fa 3a             	cmp    dl,0x3a
c00162de:	74 0f                	je     c00162ef <sysCallOpen(regs*)+0x5d>
c00162e0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00162e4:	48                   	dec    eax
c00162e5:	74 0c                	je     c00162f3 <sysCallOpen(regs*)+0x61>
c00162e7:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00162ea:	80 fa 2e             	cmp    dl,0x2e
c00162ed:	75 ec                	jne    c00162db <sysCallOpen(regs*)+0x49>
c00162ef:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00162f3:	83 ec 08             	sub    esp,0x8
c00162f6:	68 19 44 02 c0       	push   0xc0024419
c00162fb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162fe:	e8 47 ff ff ff       	call   c001624a <string_ends_with(char const*, char const*)>
c0016303:	83 c4 10             	add    esp,0x10
c0016306:	85 c0                	test   eax,eax
c0016308:	74 1d                	je     c0016327 <sysCallOpen(regs*)+0x95>
c001630a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001630d:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016313:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001631a:	81 c4 04 01 00 00    	add    esp,0x104
c0016320:	31 c0                	xor    eax,eax
c0016322:	31 d2                	xor    edx,edx
c0016324:	5b                   	pop    ebx
c0016325:	5e                   	pop    esi
c0016326:	c3                   	ret    
c0016327:	83 ec 08             	sub    esp,0x8
c001632a:	68 1e 44 02 c0       	push   0xc002441e
c001632f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016332:	e8 13 ff ff ff       	call   c001624a <string_ends_with(char const*, char const*)>
c0016337:	83 c4 10             	add    esp,0x10
c001633a:	85 c0                	test   eax,eax
c001633c:	75 cc                	jne    c001630a <sysCallOpen(regs*)+0x78>
c001633e:	83 ec 08             	sub    esp,0x8
c0016341:	68 1a 44 02 c0       	push   0xc002441a
c0016346:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016349:	e8 4a a5 fe ff       	call   c0000898 <strcmp>
c001634e:	83 c4 10             	add    esp,0x10
c0016351:	85 c0                	test   eax,eax
c0016353:	74 b5                	je     c001630a <sysCallOpen(regs*)+0x78>
c0016355:	83 ec 08             	sub    esp,0x8
c0016358:	68 19 44 02 c0       	push   0xc0024419
c001635d:	56                   	push   esi
c001635e:	e8 e7 fe ff ff       	call   c001624a <string_ends_with(char const*, char const*)>
c0016363:	83 c4 10             	add    esp,0x10
c0016366:	85 c0                	test   eax,eax
c0016368:	75 a0                	jne    c001630a <sysCallOpen(regs*)+0x78>
c001636a:	83 ec 08             	sub    esp,0x8
c001636d:	68 23 44 02 c0       	push   0xc0024423
c0016372:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016375:	e8 d0 fe ff ff       	call   c001624a <string_ends_with(char const*, char const*)>
c001637a:	83 c4 10             	add    esp,0x10
c001637d:	85 c0                	test   eax,eax
c001637f:	0f 85 e7 00 00 00    	jne    c001646c <sysCallOpen(regs*)+0x1da>
c0016385:	83 ec 08             	sub    esp,0x8
c0016388:	68 28 44 02 c0       	push   0xc0024428
c001638d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016390:	e8 b5 fe ff ff       	call   c001624a <string_ends_with(char const*, char const*)>
c0016395:	83 c4 10             	add    esp,0x10
c0016398:	85 c0                	test   eax,eax
c001639a:	0f 85 cc 00 00 00    	jne    c001646c <sysCallOpen(regs*)+0x1da>
c00163a0:	83 ec 08             	sub    esp,0x8
c00163a3:	68 24 44 02 c0       	push   0xc0024424
c00163a8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163ab:	e8 e8 a4 fe ff       	call   c0000898 <strcmp>
c00163b0:	83 c4 10             	add    esp,0x10
c00163b3:	85 c0                	test   eax,eax
c00163b5:	0f 84 b1 00 00 00    	je     c001646c <sysCallOpen(regs*)+0x1da>
c00163bb:	83 ec 08             	sub    esp,0x8
c00163be:	68 23 44 02 c0       	push   0xc0024423
c00163c3:	56                   	push   esi
c00163c4:	e8 81 fe ff ff       	call   c001624a <string_ends_with(char const*, char const*)>
c00163c9:	83 c4 10             	add    esp,0x10
c00163cc:	85 c0                	test   eax,eax
c00163ce:	0f 85 98 00 00 00    	jne    c001646c <sysCallOpen(regs*)+0x1da>
c00163d4:	83 ec 0c             	sub    esp,0xc
c00163d7:	68 14 01 00 00       	push   0x114
c00163dc:	e8 7c 36 ff ff       	call   c0009a5d <malloc>
c00163e1:	83 c4 0c             	add    esp,0xc
c00163e4:	89 c6                	mov    esi,eax
c00163e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163eb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00163ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163f1:	56                   	push   esi
c00163f2:	e8 31 6c ff ff       	call   c000d028 <File::File(char const*, Process*)>
c00163f7:	83 c4 10             	add    esp,0x10
c00163fa:	85 f6                	test   esi,esi
c00163fc:	74 5b                	je     c0016459 <sysCallOpen(regs*)+0x1c7>
c00163fe:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016401:	0f b6 c2             	movzx  eax,dl
c0016404:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016407:	89 d0                	mov    eax,edx
c0016409:	83 e0 01             	and    eax,0x1
c001640c:	f6 c2 02             	test   dl,0x2
c001640f:	74 03                	je     c0016414 <sysCallOpen(regs*)+0x182>
c0016411:	83 c8 02             	or     eax,0x2
c0016414:	f6 c2 04             	test   dl,0x4
c0016417:	74 03                	je     c001641c <sysCallOpen(regs*)+0x18a>
c0016419:	83 c8 04             	or     eax,0x4
c001641c:	f6 c2 08             	test   dl,0x8
c001641f:	74 03                	je     c0016424 <sysCallOpen(regs*)+0x192>
c0016421:	83 c8 0a             	or     eax,0xa
c0016424:	83 e2 10             	and    edx,0x10
c0016427:	74 03                	je     c001642c <sysCallOpen(regs*)+0x19a>
c0016429:	83 c8 12             	or     eax,0x12
c001642c:	83 ec 08             	sub    esp,0x8
c001642f:	50                   	push   eax
c0016430:	56                   	push   esi
c0016431:	e8 56 6c ff ff       	call   c000d08c <File::open(FileOpenMode)>
c0016436:	83 c4 10             	add    esp,0x10
c0016439:	85 c0                	test   eax,eax
c001643b:	75 1c                	jne    c0016459 <sysCallOpen(regs*)+0x1c7>
c001643d:	83 ec 0c             	sub    esp,0xc
c0016440:	56                   	push   esi
c0016441:	e8 52 4e ff ff       	call   c000b298 <UnixFile::getFileDescriptor()>
c0016446:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016449:	83 c4 10             	add    esp,0x10
c001644c:	89 02                	mov    DWORD PTR [edx],eax
c001644e:	c1 f8 1f             	sar    eax,0x1f
c0016451:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016454:	e9 c1 fe ff ff       	jmp    c001631a <sysCallOpen(regs*)+0x88>
c0016459:	81 c4 04 01 00 00    	add    esp,0x104
c001645f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016464:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016469:	5b                   	pop    ebx
c001646a:	5e                   	pop    esi
c001646b:	c3                   	ret    
c001646c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001646f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016475:	e9 99 fe ff ff       	jmp    c0016313 <sysCallOpen(regs*)+0x81>

c001647a <Sys::loadSyscalls()>:
c001647a:	c7 05 a0 6d 02 c0 e7 56 01 c0 	mov    DWORD PTR ds:0xc0026da0,0xc00156e7
c0016484:	c7 05 a4 6d 02 c0 dc 52 01 c0 	mov    DWORD PTR ds:0xc0026da4,0xc00152dc
c001648e:	c7 05 a8 6d 02 c0 cd 54 01 c0 	mov    DWORD PTR ds:0xc0026da8,0xc00154cd
c0016498:	c7 05 ac 6d 02 c0 1d 56 01 c0 	mov    DWORD PTR ds:0xc0026dac,0xc001561d
c00164a2:	c7 05 b0 6d 02 c0 65 54 01 c0 	mov    DWORD PTR ds:0xc0026db0,0xc0015465
c00164ac:	c7 05 b4 6d 02 c0 13 53 01 c0 	mov    DWORD PTR ds:0xc0026db4,0xc0015313
c00164b6:	c7 05 b8 6d 02 c0 f4 52 01 c0 	mov    DWORD PTR ds:0xc0026db8,0xc00152f4
c00164c0:	c7 05 bc 6d 02 c0 22 55 01 c0 	mov    DWORD PTR ds:0xc0026dbc,0xc0015522
c00164ca:	c7 05 c4 6d 02 c0 b0 5b 01 c0 	mov    DWORD PTR ds:0xc0026dc4,0xc0015bb0
c00164d4:	c7 05 c0 6d 02 c0 92 62 01 c0 	mov    DWORD PTR ds:0xc0026dc0,0xc0016292
c00164de:	c7 05 c8 6d 02 c0 10 5c 01 c0 	mov    DWORD PTR ds:0xc0026dc8,0xc0015c10
c00164e8:	c7 05 cc 6d 02 c0 f3 58 01 c0 	mov    DWORD PTR ds:0xc0026dcc,0xc00158f3
c00164f2:	c7 05 d0 6d 02 c0 2d 57 01 c0 	mov    DWORD PTR ds:0xc0026dd0,0xc001572d
c00164fc:	c7 05 d4 6d 02 c0 32 57 01 c0 	mov    DWORD PTR ds:0xc0026dd4,0xc0015732
c0016506:	c7 05 d8 6d 02 c0 d9 5c 01 c0 	mov    DWORD PTR ds:0xc0026dd8,0xc0015cd9
c0016510:	c7 05 dc 6d 02 c0 85 5c 01 c0 	mov    DWORD PTR ds:0xc0026ddc,0xc0015c85
c001651a:	c7 05 e0 6d 02 c0 cc 59 01 c0 	mov    DWORD PTR ds:0xc0026de0,0xc00159cc
c0016524:	c7 05 e4 6d 02 c0 23 5a 01 c0 	mov    DWORD PTR ds:0xc0026de4,0xc0015a23
c001652e:	c7 05 e8 6d 02 c0 8f 5a 01 c0 	mov    DWORD PTR ds:0xc0026de8,0xc0015a8f
c0016538:	c7 05 ec 6d 02 c0 37 57 01 c0 	mov    DWORD PTR ds:0xc0026dec,0xc0015737
c0016542:	c7 05 f0 6d 02 c0 49 5d 01 c0 	mov    DWORD PTR ds:0xc0026df0,0xc0015d49
c001654c:	c7 05 f4 6d 02 c0 63 5d 01 c0 	mov    DWORD PTR ds:0xc0026df4,0xc0015d63
c0016556:	c7 05 f8 6d 02 c0 63 5d 01 c0 	mov    DWORD PTR ds:0xc0026df8,0xc0015d63
c0016560:	c7 05 fc 6d 02 c0 98 5d 01 c0 	mov    DWORD PTR ds:0xc0026dfc,0xc0015d98
c001656a:	c7 05 00 6e 02 c0 fc 5d 01 c0 	mov    DWORD PTR ds:0xc0026e00,0xc0015dfc
c0016574:	c7 05 04 6e 02 c0 41 57 01 c0 	mov    DWORD PTR ds:0xc0026e04,0xc0015741
c001657e:	c7 05 08 6e 02 c0 60 5e 01 c0 	mov    DWORD PTR ds:0xc0026e08,0xc0015e60
c0016588:	c7 05 0c 6e 02 c0 b0 58 01 c0 	mov    DWORD PTR ds:0xc0026e0c,0xc00158b0
c0016592:	c7 05 10 6e 02 c0 ac 5e 01 c0 	mov    DWORD PTR ds:0xc0026e10,0xc0015eac
c001659c:	c7 05 14 6e 02 c0 72 59 01 c0 	mov    DWORD PTR ds:0xc0026e14,0xc0015972
c00165a6:	c7 05 18 6e 02 c0 2f 5f 01 c0 	mov    DWORD PTR ds:0xc0026e18,0xc0015f2f
c00165b0:	c7 05 1c 6e 02 c0 01 5b 01 c0 	mov    DWORD PTR ds:0xc0026e1c,0xc0015b01
c00165ba:	c7 05 20 6e 02 c0 56 5f 01 c0 	mov    DWORD PTR ds:0xc0026e20,0xc0015f56
c00165c4:	c7 05 24 6e 02 c0 be 5f 01 c0 	mov    DWORD PTR ds:0xc0026e24,0xc0015fbe
c00165ce:	c7 05 28 6e 02 c0 6b 60 01 c0 	mov    DWORD PTR ds:0xc0026e28,0xc001606b
c00165d8:	c7 05 2c 6e 02 c0 51 57 01 c0 	mov    DWORD PTR ds:0xc0026e2c,0xc0015751
c00165e2:	c7 05 30 6e 02 c0 bb 57 01 c0 	mov    DWORD PTR ds:0xc0026e30,0xc00157bb
c00165ec:	c7 05 34 6e 02 c0 01 58 01 c0 	mov    DWORD PTR ds:0xc0026e34,0xc0015801
c00165f6:	c7 05 38 6e 02 c0 7f 61 01 c0 	mov    DWORD PTR ds:0xc0026e38,0xc001617f
c0016600:	c7 05 3c 6e 02 c0 7e 5d 01 c0 	mov    DWORD PTR ds:0xc0026e3c,0xc0015d7e
c001660a:	c7 05 40 6e 02 c0 52 58 01 c0 	mov    DWORD PTR ds:0xc0026e40,0xc0015852
c0016614:	c7 05 44 6e 02 c0 f1 61 01 c0 	mov    DWORD PTR ds:0xc0026e44,0xc00161f1
c001661e:	c7 05 48 6e 02 c0 36 62 01 c0 	mov    DWORD PTR ds:0xc0026e48,0xc0016236
c0016628:	c7 05 4c 6e 02 c0 bd 53 01 c0 	mov    DWORD PTR ds:0xc0026e4c,0xc00153bd
c0016632:	c7 05 50 6e 02 c0 3e 55 01 c0 	mov    DWORD PTR ds:0xc0026e50,0xc001553e
c001663c:	c7 05 54 6e 02 c0 d3 55 01 c0 	mov    DWORD PTR ds:0xc0026e54,0xc00155d3
c0016646:	c7 05 58 6e 02 c0 a6 52 01 c0 	mov    DWORD PTR ds:0xc0026e58,0xc00152a6
c0016650:	c7 05 5c 6e 02 c0 85 56 01 c0 	mov    DWORD PTR ds:0xc0026e5c,0xc0015685
c001665a:	c7 05 60 6e 02 c0 1f 53 01 c0 	mov    DWORD PTR ds:0xc0026e60,0xc001531f
c0016664:	c7 05 64 6e 02 c0 39 53 01 c0 	mov    DWORD PTR ds:0xc0026e64,0xc0015339
c001666e:	c3                   	ret    

c001666f <Sys::systemCall(regs*, void*)>:
c001666f:	53                   	push   ebx
c0016670:	83 ec 08             	sub    esp,0x8
c0016673:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016677:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001667a:	83 f8 7f             	cmp    eax,0x7f
c001667d:	77 16                	ja     c0016695 <Sys::systemCall(regs*, void*)+0x26>
c001667f:	8b 14 85 a0 6d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9260]
c0016686:	85 d2                	test   edx,edx
c0016688:	74 0b                	je     c0016695 <Sys::systemCall(regs*, void*)+0x26>
c001668a:	83 ec 0c             	sub    esp,0xc
c001668d:	53                   	push   ebx
c001668e:	ff d2                	call   edx
c0016690:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016693:	eb 0d                	jmp    c00166a2 <Sys::systemCall(regs*, void*)+0x33>
c0016695:	52                   	push   edx
c0016696:	52                   	push   edx
c0016697:	50                   	push   eax
c0016698:	68 2d 44 02 c0       	push   0xc002442d
c001669d:	e8 1c 64 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c00166a2:	83 c4 10             	add    esp,0x10
c00166a5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00166aa:	31 d2                	xor    edx,edx
c00166ac:	83 c4 08             	add    esp,0x8
c00166af:	5b                   	pop    ebx
c00166b0:	c3                   	ret    

c00166b1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00166b1:	55                   	push   ebp
c00166b2:	57                   	push   edi
c00166b3:	56                   	push   esi
c00166b4:	53                   	push   ebx
c00166b5:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00166bb:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00166c2:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c00166c9:	85 c0                	test   eax,eax
c00166cb:	0f 95 c1             	setne  cl
c00166ce:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00166d6:	0f 94 c2             	sete   dl
c00166d9:	84 d1                	test   cl,dl
c00166db:	74 23                	je     c0016700 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00166dd:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c00166e3:	74 1b                	je     c0016700 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00166e5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00166eb:	89 da                	mov    edx,ebx
c00166ed:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00166f3:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00166f9:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0016700:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0016707:	05 ff 0f 00 00       	add    eax,0xfff
c001670c:	83 ec 0c             	sub    esp,0xc
c001670f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016713:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0016719:	c1 e8 0c             	shr    eax,0xc
c001671c:	89 fe                	mov    esi,edi
c001671e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016722:	c1 ee 0c             	shr    esi,0xc
c0016725:	6a 01                	push   0x1
c0016727:	e8 b7 4f ff ff       	call   c000b6e3 <Virt::allocateKernelVirtualPages(int)>
c001672c:	89 c5                	mov    ebp,eax
c001672e:	58                   	pop    eax
c001672f:	5a                   	pop    edx
c0016730:	56                   	push   esi
c0016731:	68 41 44 02 c0       	push   0xc0024441
c0016736:	e8 83 63 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001673b:	59                   	pop    ecx
c001673c:	58                   	pop    eax
c001673d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016741:	68 53 44 02 c0       	push   0xc0024453
c0016746:	e8 73 63 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001674b:	83 c4 10             	add    esp,0x10
c001674e:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016754:	0f 86 31 01 00 00    	jbe    c001688b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001675a:	c1 e6 0c             	shl    esi,0xc
c001675d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016760:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0016763:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016767:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001676e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016771:	01 df                	add    edi,ebx
c0016773:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016776:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001677a:	0f 84 08 01 00 00    	je     c0016888 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016780:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016786:	76 05                	jbe    c001678d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016788:	bf 00 10 00 00       	mov    edi,0x1000
c001678d:	83 ec 0c             	sub    esp,0xc
c0016790:	31 d2                	xor    edx,edx
c0016792:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016799:	8b 08                	mov    ecx,DWORD PTR [eax]
c001679b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001679f:	50                   	push   eax
c00167a0:	8d 74 24 30          	lea    esi,[esp+0x30]
c00167a4:	56                   	push   esi
c00167a5:	52                   	push   edx
c00167a6:	57                   	push   edi
c00167a7:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00167ae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00167b1:	83 c4 20             	add    esp,0x20
c00167b4:	85 c0                	test   eax,eax
c00167b6:	74 0a                	je     c00167c2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c00167b8:	53                   	push   ebx
c00167b9:	53                   	push   ebx
c00167ba:	50                   	push   eax
c00167bb:	68 65 44 02 c0       	push   0xc0024465
c00167c0:	eb 0f                	jmp    c00167d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c00167c2:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00167c6:	74 20                	je     c00167e8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c00167c8:	51                   	push   ecx
c00167c9:	51                   	push   ecx
c00167ca:	6a 00                	push   0x0
c00167cc:	68 90 44 02 c0       	push   0xc0024490
c00167d1:	e8 e8 62 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c00167d6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00167d9:	e8 35 52 ff ff       	call   c000ba13 <Virt::freeKernelVirtualPages(unsigned long)>
c00167de:	83 c4 10             	add    esp,0x10
c00167e1:	31 c0                	xor    eax,eax
c00167e3:	e9 68 01 00 00       	jmp    c0016950 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c00167e8:	fa                   	cli    
c00167e9:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c00167ef:	e8 65 36 ff ff       	call   c0009e59 <Phys::allocatePage()>
c00167f4:	6a 07                	push   0x7
c00167f6:	89 c7                	mov    edi,eax
c00167f8:	55                   	push   ebp
c00167f9:	50                   	push   eax
c00167fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016802:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016808:	e8 7d 55 ff ff       	call   c000bd8a <VAS::mapPage(unsigned long, unsigned long, int)>
c001680d:	83 c4 0c             	add    esp,0xc
c0016810:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016817:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001681d:	6a 00                	push   0x0
c001681f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016824:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016827:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001682d:	e8 b2 53 ff ff       	call   c000bbe4 <VAS::mapOtherVASIn(bool, VAS*)>
c0016832:	58                   	pop    eax
c0016833:	5a                   	pop    edx
c0016834:	68 07 0c 00 00       	push   0xc07
c0016839:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001683d:	57                   	push   edi
c001683e:	89 ef                	mov    edi,ebp
c0016840:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016847:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001684d:	6a 00                	push   0x0
c001684f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016854:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016857:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001685d:	e8 e4 58 ff ff       	call   c000c146 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016862:	b9 00 10 00 00       	mov    ecx,0x1000
c0016867:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016869:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c001686e:	83 c4 20             	add    esp,0x20
c0016871:	48                   	dec    eax
c0016872:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0016877:	85 c0                	test   eax,eax
c0016879:	75 01                	jne    c001687c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001687b:	fb                   	sti    
c001687c:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0016883:	e9 df fe ff ff       	jmp    c0016767 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016888:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001688b:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0016893:	0f 86 a9 00 00 00    	jbe    c0016942 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016899:	fa                   	cli    
c001689a:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c00168a0:	51                   	push   ecx
c00168a1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00168a8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00168ae:	6a 00                	push   0x0
c00168b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00168b8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00168be:	e8 21 53 ff ff       	call   c000bbe4 <VAS::mapOtherVASIn(bool, VAS*)>
c00168c3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00168c7:	c1 e6 0c             	shl    esi,0xc
c00168ca:	01 de                	add    esi,ebx
c00168cc:	83 c4 10             	add    esp,0x10
c00168cf:	39 de                	cmp    esi,ebx
c00168d1:	74 61                	je     c0016934 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00168d3:	e8 81 35 ff ff       	call   c0009e59 <Phys::allocatePage()>
c00168d8:	6a 07                	push   0x7
c00168da:	89 c7                	mov    edi,eax
c00168dc:	55                   	push   ebp
c00168dd:	50                   	push   eax
c00168de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00168e6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00168ec:	e8 99 54 ff ff       	call   c000bd8a <VAS::mapPage(unsigned long, unsigned long, int)>
c00168f1:	58                   	pop    eax
c00168f2:	5a                   	pop    edx
c00168f3:	68 07 0c 00 00       	push   0xc07
c00168f8:	53                   	push   ebx
c00168f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00168ff:	57                   	push   edi
c0016900:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016907:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001690d:	6a 00                	push   0x0
c001690f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016914:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016917:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001691d:	e8 24 58 ff ff       	call   c000c146 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016922:	83 c4 1c             	add    esp,0x1c
c0016925:	68 00 10 00 00       	push   0x1000
c001692a:	6a 00                	push   0x0
c001692c:	55                   	push   ebp
c001692d:	e8 1e 9e fe ff       	call   c0000750 <memset>
c0016932:	eb 98                	jmp    c00168cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0016934:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0016939:	48                   	dec    eax
c001693a:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c001693f:	75 01                	jne    c0016942 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016941:	fb                   	sti    
c0016942:	83 ec 0c             	sub    esp,0xc
c0016945:	55                   	push   ebp
c0016946:	e8 c8 50 ff ff       	call   c000ba13 <Virt::freeKernelVirtualPages(unsigned long)>
c001694b:	83 c4 10             	add    esp,0x10
c001694e:	b0 01                	mov    al,0x1
c0016950:	81 c4 2c 10 00 00    	add    esp,0x102c
c0016956:	5b                   	pop    ebx
c0016957:	5e                   	pop    esi
c0016958:	5f                   	pop    edi
c0016959:	5d                   	pop    ebp
c001695a:	c3                   	ret    

c001695b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001695b:	55                   	push   ebp
c001695c:	57                   	push   edi
c001695d:	56                   	push   esi
c001695e:	53                   	push   ebx
c001695f:	83 ec 48             	sub    esp,0x48
c0016962:	68 14 01 00 00       	push   0x114
c0016967:	e8 f1 30 ff ff       	call   c0009a5d <malloc>
c001696c:	83 c4 0c             	add    esp,0xc
c001696f:	89 c6                	mov    esi,eax
c0016971:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016975:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016979:	50                   	push   eax
c001697a:	e8 a9 66 ff ff       	call   c000d028 <File::File(char const*, Process*)>
c001697f:	58                   	pop    eax
c0016980:	5a                   	pop    edx
c0016981:	6a 01                	push   0x1
c0016983:	56                   	push   esi
c0016984:	e8 03 67 ff ff       	call   c000d08c <File::open(FileOpenMode)>
c0016989:	83 c4 10             	add    esp,0x10
c001698c:	85 c0                	test   eax,eax
c001698e:	0f 85 47 01 00 00    	jne    c0016adb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016994:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001699c:	83 ec 0c             	sub    esp,0xc
c001699f:	6a 34                	push   0x34
c00169a1:	e8 b7 30 ff ff       	call   c0009a5d <malloc>
c00169a6:	89 c3                	mov    ebx,eax
c00169a8:	58                   	pop    eax
c00169a9:	8b 06                	mov    eax,DWORD PTR [esi]
c00169ab:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00169af:	57                   	push   edi
c00169b0:	53                   	push   ebx
c00169b1:	6a 00                	push   0x0
c00169b3:	6a 34                	push   0x34
c00169b5:	56                   	push   esi
c00169b6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00169b9:	83 c4 20             	add    esp,0x20
c00169bc:	85 c0                	test   eax,eax
c00169be:	0f 85 17 01 00 00    	jne    c0016adb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169c4:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00169ca:	0f 85 0b 01 00 00    	jne    c0016adb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00169d3:	85 c0                	test   eax,eax
c00169d5:	0f 84 00 01 00 00    	je     c0016adb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169db:	31 d2                	xor    edx,edx
c00169dd:	55                   	push   ebp
c00169de:	52                   	push   edx
c00169df:	50                   	push   eax
c00169e0:	56                   	push   esi
c00169e1:	e8 64 67 ff ff       	call   c000d14a <File::seek(unsigned long long)>
c00169e6:	83 c4 10             	add    esp,0x10
c00169e9:	85 c0                	test   eax,eax
c00169eb:	0f 85 ea 00 00 00    	jne    c0016adb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169f1:	83 ec 0c             	sub    esp,0xc
c00169f4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00169f7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00169fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00169ff:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016a03:	0f af c2             	imul   eax,edx
c0016a06:	50                   	push   eax
c0016a07:	e8 51 30 ff ff       	call   c0009a5d <malloc>
c0016a0c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016a0e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016a12:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016a15:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016a19:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016a1d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016a21:	0f af c2             	imul   eax,edx
c0016a24:	99                   	cdq    
c0016a25:	52                   	push   edx
c0016a26:	50                   	push   eax
c0016a27:	56                   	push   esi
c0016a28:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016a2b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016a2e:	83 c4 20             	add    esp,0x20
c0016a31:	85 c0                	test   eax,eax
c0016a33:	0f 84 a2 00 00 00    	je     c0016adb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016a39:	31 d2                	xor    edx,edx
c0016a3b:	51                   	push   ecx
c0016a3c:	52                   	push   edx
c0016a3d:	50                   	push   eax
c0016a3e:	56                   	push   esi
c0016a3f:	e8 06 67 ff ff       	call   c000d14a <File::seek(unsigned long long)>
c0016a44:	83 c4 10             	add    esp,0x10
c0016a47:	85 c0                	test   eax,eax
c0016a49:	0f 85 8c 00 00 00    	jne    c0016adb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016a4f:	83 ec 0c             	sub    esp,0xc
c0016a52:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016a56:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016a5a:	31 ed                	xor    ebp,ebp
c0016a5c:	0f af c2             	imul   eax,edx
c0016a5f:	50                   	push   eax
c0016a60:	e8 f8 2f ff ff       	call   c0009a5d <malloc>
c0016a65:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016a67:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016a6b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016a6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a72:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016a76:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016a7a:	0f af c2             	imul   eax,edx
c0016a7d:	99                   	cdq    
c0016a7e:	52                   	push   edx
c0016a7f:	50                   	push   eax
c0016a80:	56                   	push   esi
c0016a81:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016a84:	83 c4 20             	add    esp,0x20
c0016a87:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016a8f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0016a93:	0f 86 80 00 00 00    	jbe    c0016b19 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016a99:	0f b7 fd             	movzx  edi,bp
c0016a9c:	c1 e7 05             	shl    edi,0x5
c0016a9f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0016aa3:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016aa6:	75 6b                	jne    c0016b13 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016aa8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016aab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016aaf:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016ab2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ab6:	52                   	push   edx
c0016ab7:	31 d2                	xor    edx,edx
c0016ab9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016abc:	52                   	push   edx
c0016abd:	50                   	push   eax
c0016abe:	56                   	push   esi
c0016abf:	e8 86 66 ff ff       	call   c000d14a <File::seek(unsigned long long)>
c0016ac4:	83 c4 10             	add    esp,0x10
c0016ac7:	85 c0                	test   eax,eax
c0016ac9:	74 17                	je     c0016ae2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016acb:	83 ec 0c             	sub    esp,0xc
c0016ace:	68 bc 44 02 c0       	push   0xc00244bc
c0016ad3:	e8 e6 5f ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0016ad8:	83 c4 10             	add    esp,0x10
c0016adb:	31 c0                	xor    eax,eax
c0016add:	e9 87 00 00 00       	jmp    c0016b69 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016ae2:	83 ec 0c             	sub    esp,0xc
c0016ae5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016ae8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016aeb:	50                   	push   eax
c0016aec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016af0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016af4:	56                   	push   esi
c0016af5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016af9:	e8 b3 fb ff ff       	call   c00166b1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016afe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b02:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016b06:	83 c4 20             	add    esp,0x20
c0016b09:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016b0d:	73 04                	jae    c0016b13 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016b0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b13:	45                   	inc    ebp
c0016b14:	e9 76 ff ff ff       	jmp    c0016a8f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016b19:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016b1d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016b21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b25:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c0016b2b:	83 ec 0c             	sub    esp,0xc
c0016b2e:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c0016b34:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016b39:	05 00 10 00 00       	add    eax,0x1000
c0016b3e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b45:	e8 23 2f ff ff       	call   c0009a6d <free>
c0016b4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b4d:	e8 1b 2f ff ff       	call   c0009a6d <free>
c0016b52:	58                   	pop    eax
c0016b53:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b57:	e8 11 2f ff ff       	call   c0009a6d <free>
c0016b5c:	89 34 24             	mov    DWORD PTR [esp],esi
c0016b5f:	e8 86 65 ff ff       	call   c000d0ea <File::close()>
c0016b64:	83 c4 10             	add    esp,0x10
c0016b67:	b0 01                	mov    al,0x1
c0016b69:	83 c4 3c             	add    esp,0x3c
c0016b6c:	5b                   	pop    ebx
c0016b6d:	5e                   	pop    esi
c0016b6e:	5f                   	pop    edi
c0016b6f:	5d                   	pop    ebp
c0016b70:	c3                   	ret    

c0016b71 <Thr::runtimeReferenceHelper()>:
c0016b71:	83 ec 18             	sub    esp,0x18
c0016b74:	68 c4 44 02 c0       	push   0xc00244c4
c0016b79:	e8 40 5f ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0016b7e:	fa                   	cli    
c0016b7f:	83 c4 10             	add    esp,0x10
c0016b82:	eb fe                	jmp    c0016b82 <Thr::runtimeReferenceHelper()+0x11>

c0016b84 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016b84:	57                   	push   edi
c0016b85:	56                   	push   esi
c0016b86:	53                   	push   ebx
c0016b87:	31 db                	xor    ebx,ebx
c0016b89:	39 1d 40 77 02 c0    	cmp    DWORD PTR ds:0xc0027740,ebx
c0016b8f:	7e 3c                	jle    c0016bcd <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016b91:	8b 34 9d c0 76 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8940]
c0016b98:	31 ff                	xor    edi,edi
c0016b9a:	39 3c 9d c0 75 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8a40],edi
c0016ba1:	7e 27                	jle    c0016bca <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016ba3:	50                   	push   eax
c0016ba4:	50                   	push   eax
c0016ba5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ba9:	8b 06                	mov    eax,DWORD PTR [esi]
c0016bab:	03 04 9d 40 76 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd89c0]
c0016bb2:	50                   	push   eax
c0016bb3:	e8 e0 9c fe ff       	call   c0000898 <strcmp>
c0016bb8:	83 c4 10             	add    esp,0x10
c0016bbb:	85 c0                	test   eax,eax
c0016bbd:	75 05                	jne    c0016bc4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016bbf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016bc2:	eb 0b                	jmp    c0016bcf <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016bc4:	83 c6 10             	add    esi,0x10
c0016bc7:	47                   	inc    edi
c0016bc8:	eb d0                	jmp    c0016b9a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016bca:	43                   	inc    ebx
c0016bcb:	eb bc                	jmp    c0016b89 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016bcd:	31 c0                	xor    eax,eax
c0016bcf:	5b                   	pop    ebx
c0016bd0:	5e                   	pop    esi
c0016bd1:	5f                   	pop    edi
c0016bd2:	c3                   	ret    

c0016bd3 <Thr::loadKernelSymbolTable(char const*)>:
c0016bd3:	55                   	push   ebp
c0016bd4:	57                   	push   edi
c0016bd5:	56                   	push   esi
c0016bd6:	53                   	push   ebx
c0016bd7:	83 ec 68             	sub    esp,0x68
c0016bda:	8b 35 90 77 02 c0    	mov    esi,DWORD PTR ds:0xc0027790
c0016be0:	68 14 01 00 00       	push   0x114
c0016be5:	e8 73 2e ff ff       	call   c0009a5d <malloc>
c0016bea:	83 c4 0c             	add    esp,0xc
c0016bed:	89 c3                	mov    ebx,eax
c0016bef:	56                   	push   esi
c0016bf0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016bf4:	50                   	push   eax
c0016bf5:	e8 2e 64 ff ff       	call   c000d028 <File::File(char const*, Process*)>
c0016bfa:	5e                   	pop    esi
c0016bfb:	5f                   	pop    edi
c0016bfc:	6a 01                	push   0x1
c0016bfe:	53                   	push   ebx
c0016bff:	e8 88 64 ff ff       	call   c000d08c <File::open(FileOpenMode)>
c0016c04:	83 c4 10             	add    esp,0x10
c0016c07:	85 c0                	test   eax,eax
c0016c09:	74 0a                	je     c0016c15 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0016c0b:	83 ec 0c             	sub    esp,0xc
c0016c0e:	68 e6 44 02 c0       	push   0xc00244e6
c0016c13:	eb 34                	jmp    c0016c49 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0016c15:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016c1d:	83 ec 0c             	sub    esp,0xc
c0016c20:	6a 34                	push   0x34
c0016c22:	e8 36 2e ff ff       	call   c0009a5d <malloc>
c0016c27:	59                   	pop    ecx
c0016c28:	89 c7                	mov    edi,eax
c0016c2a:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016c2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c30:	56                   	push   esi
c0016c31:	57                   	push   edi
c0016c32:	6a 00                	push   0x0
c0016c34:	6a 34                	push   0x34
c0016c36:	53                   	push   ebx
c0016c37:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c3a:	83 c4 20             	add    esp,0x20
c0016c3d:	85 c0                	test   eax,eax
c0016c3f:	74 17                	je     c0016c58 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016c41:	83 ec 0c             	sub    esp,0xc
c0016c44:	68 fd 44 02 c0       	push   0xc00244fd
c0016c49:	e8 2f d8 ff ff       	call   c001447d <Krnl::panic(char const*)>
c0016c4e:	83 c4 10             	add    esp,0x10
c0016c51:	31 c0                	xor    eax,eax
c0016c53:	e9 31 02 00 00       	jmp    c0016e89 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0016c58:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016c5e:	75 e1                	jne    c0016c41 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016c60:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016c63:	85 c0                	test   eax,eax
c0016c65:	74 da                	je     c0016c41 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016c67:	52                   	push   edx
c0016c68:	31 d2                	xor    edx,edx
c0016c6a:	52                   	push   edx
c0016c6b:	50                   	push   eax
c0016c6c:	53                   	push   ebx
c0016c6d:	e8 d8 64 ff ff       	call   c000d14a <File::seek(unsigned long long)>
c0016c72:	83 c4 10             	add    esp,0x10
c0016c75:	85 c0                	test   eax,eax
c0016c77:	75 c8                	jne    c0016c41 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016c79:	83 ec 0c             	sub    esp,0xc
c0016c7c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016c80:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016c84:	31 ed                	xor    ebp,ebp
c0016c86:	0f af c2             	imul   eax,edx
c0016c89:	50                   	push   eax
c0016c8a:	e8 ce 2d ff ff       	call   c0009a5d <malloc>
c0016c8f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016c91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c95:	89 34 24             	mov    DWORD PTR [esp],esi
c0016c98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c9c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016ca0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016ca4:	0f af c2             	imul   eax,edx
c0016ca7:	99                   	cdq    
c0016ca8:	52                   	push   edx
c0016ca9:	50                   	push   eax
c0016caa:	53                   	push   ebx
c0016cab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016cae:	83 c4 20             	add    esp,0x20
c0016cb1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016cb9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016cc1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016cc9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016cd1:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016cd5:	0f 86 aa 00 00 00    	jbe    c0016d85 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0016cdb:	0f b7 f5             	movzx  esi,bp
c0016cde:	6b f6 28             	imul   esi,esi,0x28
c0016ce1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016ce5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016ce8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016cec:	50                   	push   eax
c0016ced:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016cf1:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016cf5:	8b 16                	mov    edx,DWORD PTR [esi]
c0016cf7:	6b c0 28             	imul   eax,eax,0x28
c0016cfa:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016cfe:	89 d0                	mov    eax,edx
c0016d00:	31 d2                	xor    edx,edx
c0016d02:	52                   	push   edx
c0016d03:	50                   	push   eax
c0016d04:	53                   	push   ebx
c0016d05:	e8 40 64 ff ff       	call   c000d14a <File::seek(unsigned long long)>
c0016d0a:	83 c4 0c             	add    esp,0xc
c0016d0d:	6a 20                	push   0x20
c0016d0f:	6a 00                	push   0x0
c0016d11:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016d15:	52                   	push   edx
c0016d16:	e8 35 9a fe ff       	call   c0000750 <memset>
c0016d1b:	58                   	pop    eax
c0016d1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d1e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016d22:	51                   	push   ecx
c0016d23:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016d27:	52                   	push   edx
c0016d28:	6a 00                	push   0x0
c0016d2a:	6a 1f                	push   0x1f
c0016d2c:	53                   	push   ebx
c0016d2d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d30:	83 c4 18             	add    esp,0x18
c0016d33:	68 14 45 02 c0       	push   0xc0024514
c0016d38:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016d3c:	52                   	push   edx
c0016d3d:	e8 56 9b fe ff       	call   c0000898 <strcmp>
c0016d42:	83 c4 10             	add    esp,0x10
c0016d45:	85 c0                	test   eax,eax
c0016d47:	75 0f                	jne    c0016d58 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0016d49:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016d4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d58:	50                   	push   eax
c0016d59:	50                   	push   eax
c0016d5a:	68 1c 45 02 c0       	push   0xc002451c
c0016d5f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016d63:	50                   	push   eax
c0016d64:	e8 2f 9b fe ff       	call   c0000898 <strcmp>
c0016d69:	83 c4 10             	add    esp,0x10
c0016d6c:	85 c0                	test   eax,eax
c0016d6e:	75 0f                	jne    c0016d7f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0016d70:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016d73:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d7b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016d7f:	45                   	inc    ebp
c0016d80:	e9 4c ff ff ff       	jmp    c0016cd1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0016d85:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016d8a:	75 10                	jne    c0016d9c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0016d8c:	83 ec 0c             	sub    esp,0xc
c0016d8f:	68 24 45 02 c0       	push   0xc0024524
c0016d94:	e8 e4 d6 ff ff       	call   c001447d <Krnl::panic(char const*)>
c0016d99:	83 c4 10             	add    esp,0x10
c0016d9c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0016da1:	75 10                	jne    c0016db3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0016da3:	83 ec 0c             	sub    esp,0xc
c0016da6:	68 24 45 02 c0       	push   0xc0024524
c0016dab:	e8 cd d6 ff ff       	call   c001447d <Krnl::panic(char const*)>
c0016db0:	83 c4 10             	add    esp,0x10
c0016db3:	31 d2                	xor    edx,edx
c0016db5:	50                   	push   eax
c0016db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dba:	52                   	push   edx
c0016dbb:	50                   	push   eax
c0016dbc:	53                   	push   ebx
c0016dbd:	e8 88 63 ff ff       	call   c000d14a <File::seek(unsigned long long)>
c0016dc2:	5a                   	pop    edx
c0016dc3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016dc7:	e8 91 2c ff ff       	call   c0009a5d <malloc>
c0016dcc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016dd0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016dd4:	31 c9                	xor    ecx,ecx
c0016dd6:	5e                   	pop    esi
c0016dd7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016dd9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016ddd:	55                   	push   ebp
c0016dde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016de2:	51                   	push   ecx
c0016de3:	52                   	push   edx
c0016de4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016de8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0016dec:	53                   	push   ebx
c0016ded:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016df0:	83 c4 14             	add    esp,0x14
c0016df3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016df7:	e8 61 2c ff ff       	call   c0009a5d <malloc>
c0016dfc:	89 c6                	mov    esi,eax
c0016dfe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016e03:	56                   	push   esi
c0016e04:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016e08:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016e0c:	51                   	push   ecx
c0016e0d:	52                   	push   edx
c0016e0e:	53                   	push   ebx
c0016e0f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e12:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e16:	8b 15 40 77 02 c0    	mov    edx,DWORD PTR ds:0xc0027740
c0016e1c:	83 c4 1c             	add    esp,0x1c
c0016e1f:	c1 e8 04             	shr    eax,0x4
c0016e22:	89 04 95 c0 75 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8a40],eax
c0016e29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016e2d:	31 d2                	xor    edx,edx
c0016e2f:	52                   	push   edx
c0016e30:	50                   	push   eax
c0016e31:	53                   	push   ebx
c0016e32:	e8 13 63 ff ff       	call   c000d14a <File::seek(unsigned long long)>
c0016e37:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016e39:	31 d2                	xor    edx,edx
c0016e3b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016e3e:	56                   	push   esi
c0016e3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016e43:	52                   	push   edx
c0016e44:	50                   	push   eax
c0016e45:	53                   	push   ebx
c0016e46:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e49:	83 c4 14             	add    esp,0x14
c0016e4c:	53                   	push   ebx
c0016e4d:	e8 98 62 ff ff       	call   c000d0ea <File::close()>
c0016e52:	5d                   	pop    ebp
c0016e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016e57:	e8 11 2c ff ff       	call   c0009a6d <free>
c0016e5c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e5f:	e8 09 2c ff ff       	call   c0009a6d <free>
c0016e64:	a1 40 77 02 c0       	mov    eax,ds:0xc0027740
c0016e69:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016e6d:	8d 50 01             	lea    edx,[eax+0x1]
c0016e70:	89 0c 85 c0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8940],ecx
c0016e77:	89 34 85 40 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd89c0],esi
c0016e7e:	89 15 40 77 02 c0    	mov    DWORD PTR ds:0xc0027740,edx
c0016e84:	83 c4 10             	add    esp,0x10
c0016e87:	b0 01                	mov    al,0x1
c0016e89:	83 c4 5c             	add    esp,0x5c
c0016e8c:	5b                   	pop    ebx
c0016e8d:	5e                   	pop    esi
c0016e8e:	5f                   	pop    edi
c0016e8f:	5d                   	pop    ebp
c0016e90:	c3                   	ret    

c0016e91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016e91:	55                   	push   ebp
c0016e92:	57                   	push   edi
c0016e93:	56                   	push   esi
c0016e94:	53                   	push   ebx
c0016e95:	81 ec 68 03 00 00    	sub    esp,0x368
c0016e9b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016ea2:	8b 1d 90 77 02 c0    	mov    ebx,DWORD PTR ds:0xc0027790
c0016ea8:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016eac:	68 14 01 00 00       	push   0x114
c0016eb1:	e8 a7 2b ff ff       	call   c0009a5d <malloc>
c0016eb6:	83 c4 0c             	add    esp,0xc
c0016eb9:	89 c5                	mov    ebp,eax
c0016ebb:	53                   	push   ebx
c0016ebc:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016ec3:	50                   	push   eax
c0016ec4:	e8 5f 61 ff ff       	call   c000d028 <File::File(char const*, Process*)>
c0016ec9:	5e                   	pop    esi
c0016eca:	5f                   	pop    edi
c0016ecb:	6a 01                	push   0x1
c0016ecd:	55                   	push   ebp
c0016ece:	e8 b9 61 ff ff       	call   c000d08c <File::open(FileOpenMode)>
c0016ed3:	83 c4 10             	add    esp,0x10
c0016ed6:	85 c0                	test   eax,eax
c0016ed8:	0f 85 a7 06 00 00    	jne    c0017585 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016ede:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016ee6:	83 ec 0c             	sub    esp,0xc
c0016ee9:	6a 34                	push   0x34
c0016eeb:	e8 6d 2b ff ff       	call   c0009a5d <malloc>
c0016ef0:	5b                   	pop    ebx
c0016ef1:	89 c7                	mov    edi,eax
c0016ef3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016ef7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016efa:	53                   	push   ebx
c0016efb:	57                   	push   edi
c0016efc:	6a 00                	push   0x0
c0016efe:	6a 34                	push   0x34
c0016f00:	55                   	push   ebp
c0016f01:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f04:	83 c4 20             	add    esp,0x20
c0016f07:	85 c0                	test   eax,eax
c0016f09:	0f 85 76 06 00 00    	jne    c0017585 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016f0f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016f15:	0f 85 6a 06 00 00    	jne    c0017585 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016f1b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016f1e:	85 c0                	test   eax,eax
c0016f20:	0f 84 5f 06 00 00    	je     c0017585 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016f26:	31 d2                	xor    edx,edx
c0016f28:	51                   	push   ecx
c0016f29:	52                   	push   edx
c0016f2a:	50                   	push   eax
c0016f2b:	55                   	push   ebp
c0016f2c:	e8 19 62 ff ff       	call   c000d14a <File::seek(unsigned long long)>
c0016f31:	83 c4 10             	add    esp,0x10
c0016f34:	85 c0                	test   eax,eax
c0016f36:	0f 85 49 06 00 00    	jne    c0017585 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016f3c:	83 ec 0c             	sub    esp,0xc
c0016f3f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016f42:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016f46:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016f4a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016f4e:	0f af c2             	imul   eax,edx
c0016f51:	50                   	push   eax
c0016f52:	e8 06 2b ff ff       	call   c0009a5d <malloc>
c0016f57:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016f5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f65:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016f69:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016f6d:	0f af c2             	imul   eax,edx
c0016f70:	99                   	cdq    
c0016f71:	52                   	push   edx
c0016f72:	50                   	push   eax
c0016f73:	55                   	push   ebp
c0016f74:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f77:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016f7a:	83 c4 20             	add    esp,0x20
c0016f7d:	85 c0                	test   eax,eax
c0016f7f:	0f 84 00 06 00 00    	je     c0017585 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016f85:	52                   	push   edx
c0016f86:	31 d2                	xor    edx,edx
c0016f88:	52                   	push   edx
c0016f89:	50                   	push   eax
c0016f8a:	55                   	push   ebp
c0016f8b:	e8 ba 61 ff ff       	call   c000d14a <File::seek(unsigned long long)>
c0016f90:	83 c4 10             	add    esp,0x10
c0016f93:	85 c0                	test   eax,eax
c0016f95:	0f 85 ea 05 00 00    	jne    c0017585 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016f9b:	83 ec 0c             	sub    esp,0xc
c0016f9e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016fa2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016fa6:	31 f6                	xor    esi,esi
c0016fa8:	0f af c2             	imul   eax,edx
c0016fab:	50                   	push   eax
c0016fac:	e8 ac 2a ff ff       	call   c0009a5d <malloc>
c0016fb1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016fb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016fb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016fbb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016fbf:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016fc3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016fc7:	0f af c2             	imul   eax,edx
c0016fca:	99                   	cdq    
c0016fcb:	52                   	push   edx
c0016fcc:	50                   	push   eax
c0016fcd:	55                   	push   ebp
c0016fce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016fd1:	83 c4 20             	add    esp,0x20
c0016fd4:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016fd8:	0f 86 8a 00 00 00    	jbe    c0017068 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016fde:	0f b7 de             	movzx  ebx,si
c0016fe1:	c1 e3 05             	shl    ebx,0x5
c0016fe4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0016fe8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016feb:	75 75                	jne    c0017062 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016fed:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ff0:	31 d2                	xor    edx,edx
c0016ff2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016ff6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016ff9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ffd:	50                   	push   eax
c0016ffe:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017001:	52                   	push   edx
c0017002:	50                   	push   eax
c0017003:	55                   	push   ebp
c0017004:	e8 41 61 ff ff       	call   c000d14a <File::seek(unsigned long long)>
c0017009:	83 c4 10             	add    esp,0x10
c001700c:	85 c0                	test   eax,eax
c001700e:	0f 85 71 05 00 00    	jne    c0017585 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017014:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001701b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001701e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0017022:	31 d2                	xor    edx,edx
c0017024:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017028:	83 ec 0c             	sub    esp,0xc
c001702b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001702f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017036:	50                   	push   eax
c0017037:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001703b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703f:	52                   	push   edx
c0017040:	50                   	push   eax
c0017041:	55                   	push   ebp
c0017042:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017045:	83 c4 1c             	add    esp,0x1c
c0017048:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001704b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001704e:	50                   	push   eax
c001704f:	6a 00                	push   0x0
c0017051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017055:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017059:	50                   	push   eax
c001705a:	e8 f1 96 fe ff       	call   c0000750 <memset>
c001705f:	83 c4 10             	add    esp,0x10
c0017062:	46                   	inc    esi
c0017063:	e9 6c ff ff ff       	jmp    c0016fd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017068:	53                   	push   ebx
c0017069:	31 db                	xor    ebx,ebx
c001706b:	68 00 01 00 00       	push   0x100
c0017070:	6a 00                	push   0x0
c0017072:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017076:	50                   	push   eax
c0017077:	e8 d4 96 fe ff       	call   c0000750 <memset>
c001707c:	83 c4 0c             	add    esp,0xc
c001707f:	68 00 01 00 00       	push   0x100
c0017084:	6a 00                	push   0x0
c0017086:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001708d:	50                   	push   eax
c001708e:	e8 bd 96 fe ff       	call   c0000750 <memset>
c0017093:	83 c4 10             	add    esp,0x10
c0017096:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001709e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00170a6:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00170ae:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00170b6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00170be:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00170c2:	0f 86 30 01 00 00    	jbe    c00171f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00170c8:	0f b7 f3             	movzx  esi,bx
c00170cb:	6b f6 28             	imul   esi,esi,0x28
c00170ce:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00170d2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00170d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170d9:	52                   	push   edx
c00170da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00170de:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00170e2:	8b 06                	mov    eax,DWORD PTR [esi]
c00170e4:	6b d2 28             	imul   edx,edx,0x28
c00170e7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00170eb:	31 d2                	xor    edx,edx
c00170ed:	52                   	push   edx
c00170ee:	50                   	push   eax
c00170ef:	55                   	push   ebp
c00170f0:	e8 55 60 ff ff       	call   c000d14a <File::seek(unsigned long long)>
c00170f5:	83 c4 0c             	add    esp,0xc
c00170f8:	6a 20                	push   0x20
c00170fa:	6a 00                	push   0x0
c00170fc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017103:	51                   	push   ecx
c0017104:	e8 47 96 fe ff       	call   c0000750 <memset>
c0017109:	59                   	pop    ecx
c001710a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001710d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017111:	52                   	push   edx
c0017112:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017119:	51                   	push   ecx
c001711a:	6a 00                	push   0x0
c001711c:	6a 1f                	push   0x1f
c001711e:	55                   	push   ebp
c001711f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017122:	83 c4 1c             	add    esp,0x1c
c0017125:	6a 09                	push   0x9
c0017127:	68 3e 45 02 c0       	push   0xc002453e
c001712c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017133:	51                   	push   ecx
c0017134:	e8 13 95 fe ff       	call   c000064c <memcmp>
c0017139:	83 c4 10             	add    esp,0x10
c001713c:	85 c0                	test   eax,eax
c001713e:	75 21                	jne    c0017161 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017144:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017148:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001714c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017150:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017153:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001715a:	89 d0                	mov    eax,edx
c001715c:	40                   	inc    eax
c001715d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017161:	50                   	push   eax
c0017162:	6a 09                	push   0x9
c0017164:	68 48 45 02 c0       	push   0xc0024548
c0017169:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017170:	50                   	push   eax
c0017171:	e8 d6 94 fe ff       	call   c000064c <memcmp>
c0017176:	83 c4 10             	add    esp,0x10
c0017179:	85 c0                	test   eax,eax
c001717b:	75 21                	jne    c001719e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001717d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017181:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017185:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017189:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001718d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017190:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017197:	89 d0                	mov    eax,edx
c0017199:	40                   	inc    eax
c001719a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001719e:	50                   	push   eax
c001719f:	50                   	push   eax
c00171a0:	68 14 45 02 c0       	push   0xc0024514
c00171a5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00171ac:	50                   	push   eax
c00171ad:	e8 e6 96 fe ff       	call   c0000898 <strcmp>
c00171b2:	83 c4 10             	add    esp,0x10
c00171b5:	85 c0                	test   eax,eax
c00171b7:	75 0f                	jne    c00171c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00171b9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00171bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171c8:	50                   	push   eax
c00171c9:	50                   	push   eax
c00171ca:	68 1c 45 02 c0       	push   0xc002451c
c00171cf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00171d6:	50                   	push   eax
c00171d7:	e8 bc 96 fe ff       	call   c0000898 <strcmp>
c00171dc:	83 c4 10             	add    esp,0x10
c00171df:	85 c0                	test   eax,eax
c00171e1:	75 0f                	jne    c00171f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00171e3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00171e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00171ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171ee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00171f2:	43                   	inc    ebx
c00171f3:	e9 c6 fe ff ff       	jmp    c00170be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00171f8:	31 d2                	xor    edx,edx
c00171fa:	50                   	push   eax
c00171fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00171ff:	52                   	push   edx
c0017200:	50                   	push   eax
c0017201:	55                   	push   ebp
c0017202:	e8 43 5f ff ff       	call   c000d14a <File::seek(unsigned long long)>
c0017207:	58                   	pop    eax
c0017208:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001720c:	e8 4c 28 ff ff       	call   c0009a5d <malloc>
c0017211:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017214:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017218:	31 d2                	xor    edx,edx
c001721a:	58                   	pop    eax
c001721b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001721f:	53                   	push   ebx
c0017220:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017224:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017228:	52                   	push   edx
c0017229:	50                   	push   eax
c001722a:	55                   	push   ebp
c001722b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001722e:	83 c4 14             	add    esp,0x14
c0017231:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017235:	e8 23 28 ff ff       	call   c0009a5d <malloc>
c001723a:	31 d2                	xor    edx,edx
c001723c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017240:	83 c4 0c             	add    esp,0xc
c0017243:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017247:	52                   	push   edx
c0017248:	50                   	push   eax
c0017249:	55                   	push   ebp
c001724a:	e8 fb 5e ff ff       	call   c000d14a <File::seek(unsigned long long)>
c001724f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017252:	31 d2                	xor    edx,edx
c0017254:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017257:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001725b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001725f:	52                   	push   edx
c0017260:	50                   	push   eax
c0017261:	55                   	push   ebp
c0017262:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017265:	83 c4 20             	add    esp,0x20
c0017268:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017270:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017274:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017278:	0f 84 0b 03 00 00    	je     c0017589 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001727e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0017285:	31 d2                	xor    edx,edx
c0017287:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001728b:	c1 e8 03             	shr    eax,0x3
c001728e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017292:	51                   	push   ecx
c0017293:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017297:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001729b:	52                   	push   edx
c001729c:	50                   	push   eax
c001729d:	55                   	push   ebp
c001729e:	e8 a7 5e ff ff       	call   c000d14a <File::seek(unsigned long long)>
c00172a3:	5b                   	pop    ebx
c00172a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172a8:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00172af:	e8 a9 27 ff ff       	call   c0009a5d <malloc>
c00172b4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00172b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00172bb:	31 d2                	xor    edx,edx
c00172bd:	5e                   	pop    esi
c00172be:	8d 44 24 58          	lea    eax,[esp+0x58]
c00172c2:	50                   	push   eax
c00172c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00172c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00172cb:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00172d2:	52                   	push   edx
c00172d3:	50                   	push   eax
c00172d4:	55                   	push   ebp
c00172d5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00172d8:	83 c4 20             	add    esp,0x20
c00172db:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00172e3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00172e7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00172eb:	0f 8d 7c 02 00 00    	jge    c001756d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00172f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00172f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172f9:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00172fe:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0017301:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017305:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017309:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001730d:	89 d8                	mov    eax,ebx
c001730f:	c1 e8 08             	shr    eax,0x8
c0017312:	89 c6                	mov    esi,eax
c0017314:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017318:	c1 e6 04             	shl    esi,0x4
c001731b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001731f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0017322:	85 d2                	test   edx,edx
c0017324:	0f 85 bf 00 00 00    	jne    c00173e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001732a:	83 ec 0c             	sub    esp,0xc
c001732d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017331:	03 06                	add    eax,DWORD PTR [esi]
c0017333:	50                   	push   eax
c0017334:	e8 4b f8 ff ff       	call   c0016b84 <Thr::getAddressOfKernelSymbol(char const*)>
c0017339:	83 c4 10             	add    esp,0x10
c001733c:	89 c2                	mov    edx,eax
c001733e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0017343:	85 c0                	test   eax,eax
c0017345:	0f 85 9e 00 00 00    	jne    c00173e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001734b:	83 ec 0c             	sub    esp,0xc
c001734e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017352:	03 06                	add    eax,DWORD PTR [esi]
c0017354:	50                   	push   eax
c0017355:	e8 5d 16 ff ff       	call   c00089b7 <Krnl::resolveCompatibilitySymbol(char*)>
c001735a:	83 c4 10             	add    esp,0x10
c001735d:	89 c2                	mov    edx,eax
c001735f:	85 c0                	test   eax,eax
c0017361:	0f 85 82 00 00 00    	jne    c00173e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017367:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001736b:	50                   	push   eax
c001736c:	50                   	push   eax
c001736d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017371:	03 06                	add    eax,DWORD PTR [esi]
c0017373:	50                   	push   eax
c0017374:	68 52 45 02 c0       	push   0xc0024552
c0017379:	e8 40 57 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001737e:	58                   	pop    eax
c001737f:	5a                   	pop    edx
c0017380:	68 6c 45 02 c0       	push   0xc002456c
c0017385:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001738c:	50                   	push   eax
c001738d:	e8 7a 94 fe ff       	call   c000080c <strcpy>
c0017392:	59                   	pop    ecx
c0017393:	58                   	pop    eax
c0017394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017398:	03 06                	add    eax,DWORD PTR [esi]
c001739a:	50                   	push   eax
c001739b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00173a2:	50                   	push   eax
c00173a3:	e8 a4 95 fe ff       	call   c000094c <strcat>
c00173a8:	58                   	pop    eax
c00173a9:	5a                   	pop    edx
c00173aa:	68 02 46 02 c0       	push   0xc0024602
c00173af:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00173b6:	50                   	push   eax
c00173b7:	e8 90 95 fe ff       	call   c000094c <strcat>
c00173bc:	83 c4 10             	add    esp,0x10
c00173bf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00173c4:	0f 84 5d 01 00 00    	je     c0017527 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00173ca:	83 ec 0c             	sub    esp,0xc
c00173cd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00173d4:	50                   	push   eax
c00173d5:	e8 a3 d0 ff ff       	call   c001447d <Krnl::panic(char const*)>
c00173da:	83 c4 10             	add    esp,0x10
c00173dd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00173e1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00173e5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00173e9:	80 fb 01             	cmp    bl,0x1
c00173ec:	0f 85 88 00 00 00    	jne    c001747a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00173f2:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00173f9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00173fd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0017401:	01 ce                	add    esi,ecx
c0017403:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017409:	0f 94 c0             	sete   al
c001740c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017412:	0f 94 c3             	sete   bl
c0017415:	09 c3                	or     ebx,eax
c0017417:	8b 06                	mov    eax,DWORD PTR [esi]
c0017419:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001741e:	74 41                	je     c0017461 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0017420:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017423:	84 db                	test   bl,bl
c0017425:	75 15                	jne    c001743c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0017427:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001742b:	66 83 f8 0c          	cmp    ax,0xc
c001742f:	76 05                	jbe    c0017436 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0017431:	b8 0c 00 00 00       	mov    eax,0xc
c0017436:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001743a:	76 37                	jbe    c0017473 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001743c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0017440:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017445:	0f 84 dc 00 00 00    	je     c0017527 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001744b:	83 ec 0c             	sub    esp,0xc
c001744e:	68 83 45 02 c0       	push   0xc0024583
c0017453:	e8 25 d0 ff ff       	call   c001447d <Krnl::panic(char const*)>
c0017458:	83 c4 10             	add    esp,0x10
c001745b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001745f:	eb 12                	jmp    c0017473 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017461:	01 c1                	add    ecx,eax
c0017463:	84 db                	test   bl,bl
c0017465:	75 0c                	jne    c0017473 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017467:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001746b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001746f:	77 02                	ja     c0017473 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017471:	01 d1                	add    ecx,edx
c0017473:	89 0e                	mov    DWORD PTR [esi],ecx
c0017475:	e9 ea 00 00 00       	jmp    c0017564 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001747a:	80 fb 02             	cmp    bl,0x2
c001747d:	75 7c                	jne    c00174fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001747f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017486:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001748a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001748e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017494:	74 20                	je     c00174b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017496:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001749c:	74 18                	je     c00174b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001749e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00174a2:	b9 0a 00 00 00       	mov    ecx,0xa
c00174a7:	66 83 f8 0e          	cmp    ax,0xe
c00174ab:	77 03                	ja     c00174b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c00174ad:	8d 48 fc             	lea    ecx,[eax-0x4]
c00174b0:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c00174b4:	76 1f                	jbe    c00174d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c00174b6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00174ba:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00174bf:	74 66                	je     c0017527 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00174c1:	83 ec 0c             	sub    esp,0xc
c00174c4:	68 9f 45 02 c0       	push   0xc002459f
c00174c9:	e8 af cf ff ff       	call   c001447d <Krnl::panic(char const*)>
c00174ce:	83 c4 10             	add    esp,0x10
c00174d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00174d5:	8b 06                	mov    eax,DWORD PTR [esi]
c00174d7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00174dc:	74 13                	je     c00174f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c00174de:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00174e2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00174e9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00174ed:	01 c8                	add    eax,ecx
c00174ef:	eb 04                	jmp    c00174f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00174f1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00174f5:	01 c2                	add    edx,eax
c00174f7:	89 16                	mov    DWORD PTR [esi],edx
c00174f9:	eb 69                	jmp    c0017564 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00174fb:	0f b6 db             	movzx  ebx,bl
c00174fe:	50                   	push   eax
c00174ff:	50                   	push   eax
c0017500:	53                   	push   ebx
c0017501:	68 bb 45 02 c0       	push   0xc00245bb
c0017506:	e8 b3 55 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001750b:	83 c4 10             	add    esp,0x10
c001750e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017513:	74 12                	je     c0017527 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017515:	83 ec 0c             	sub    esp,0xc
c0017518:	68 c6 45 02 c0       	push   0xc00245c6
c001751d:	e8 5b cf ff ff       	call   c001447d <Krnl::panic(char const*)>
c0017522:	83 c4 10             	add    esp,0x10
c0017525:	eb 3d                	jmp    c0017564 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017527:	83 ec 0c             	sub    esp,0xc
c001752a:	55                   	push   ebp
c001752b:	e8 ba 5b ff ff       	call   c000d0ea <File::close()>
c0017530:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017533:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017536:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017539:	59                   	pop    ecx
c001753a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001753e:	e8 2a 25 ff ff       	call   c0009a6d <free>
c0017543:	5b                   	pop    ebx
c0017544:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017548:	e8 20 25 ff ff       	call   c0009a6d <free>
c001754d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017550:	e8 18 25 ff ff       	call   c0009a6d <free>
c0017555:	5e                   	pop    esi
c0017556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001755a:	e8 0e 25 ff ff       	call   c0009a6d <free>
c001755f:	83 c4 10             	add    esp,0x10
c0017562:	eb 21                	jmp    c0017585 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017564:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017568:	e9 76 fd ff ff       	jmp    c00172e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001756d:	83 ec 0c             	sub    esp,0xc
c0017570:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017574:	e8 f4 24 ff ff       	call   c0009a6d <free>
c0017579:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001757d:	83 c4 10             	add    esp,0x10
c0017580:	e9 eb fc ff ff       	jmp    c0017270 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017585:	31 c0                	xor    eax,eax
c0017587:	eb 33                	jmp    c00175bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017589:	83 ec 0c             	sub    esp,0xc
c001758c:	55                   	push   ebp
c001758d:	e8 58 5b ff ff       	call   c000d0ea <File::close()>
c0017592:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017595:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017598:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001759b:	58                   	pop    eax
c001759c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00175a0:	e8 c8 24 ff ff       	call   c0009a6d <free>
c00175a5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00175a8:	e8 c0 24 ff ff       	call   c0009a6d <free>
c00175ad:	5a                   	pop    edx
c00175ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175b2:	e8 b6 24 ff ff       	call   c0009a6d <free>
c00175b7:	83 c4 10             	add    esp,0x10
c00175ba:	b0 01                	mov    al,0x1
c00175bc:	81 c4 5c 03 00 00    	add    esp,0x35c
c00175c2:	5b                   	pop    ebx
c00175c3:	5e                   	pop    esi
c00175c4:	5f                   	pop    edi
c00175c5:	5d                   	pop    ebp
c00175c6:	c3                   	ret    

c00175c7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00175c7:	56                   	push   esi
c00175c8:	31 d2                	xor    edx,edx
c00175ca:	53                   	push   ebx
c00175cb:	8b 1d a0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fa0
c00175d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00175d5:	39 d3                	cmp    ebx,edx
c00175d7:	7e 1b                	jle    c00175f4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00175d9:	8b 04 95 c0 71 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8e40]
c00175e0:	39 c8                	cmp    eax,ecx
c00175e2:	77 0d                	ja     c00175f1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00175e4:	8b 34 95 c0 6f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd9040]
c00175eb:	01 c6                	add    esi,eax
c00175ed:	39 ce                	cmp    esi,ecx
c00175ef:	77 05                	ja     c00175f6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00175f1:	42                   	inc    edx
c00175f2:	eb e1                	jmp    c00175d5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00175f4:	31 c0                	xor    eax,eax
c00175f6:	5b                   	pop    ebx
c00175f7:	5e                   	pop    esi
c00175f8:	c3                   	ret    

c00175f9 <Thr::getDriverNameFromAddress(unsigned long)>:
c00175f9:	53                   	push   ebx
c00175fa:	31 c0                	xor    eax,eax
c00175fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017600:	8b 1d a0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fa0
c0017606:	39 c3                	cmp    ebx,eax
c0017608:	7e 22                	jle    c001762c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001760a:	8b 14 85 c0 71 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8e40]
c0017611:	39 ca                	cmp    edx,ecx
c0017613:	77 14                	ja     c0017629 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017615:	03 14 85 c0 6f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd9040]
c001761c:	39 ca                	cmp    edx,ecx
c001761e:	76 09                	jbe    c0017629 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017620:	8b 04 85 c0 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8c40]
c0017627:	eb 05                	jmp    c001762e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017629:	40                   	inc    eax
c001762a:	eb da                	jmp    c0017606 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001762c:	31 c0                	xor    eax,eax
c001762e:	5b                   	pop    ebx
c001762f:	c3                   	ret    

c0017630 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017630:	53                   	push   ebx
c0017631:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017635:	53                   	push   ebx
c0017636:	e8 8c ff ff ff       	call   c00175c7 <Thr::getDriverBaseFromAddress(unsigned long)>
c001763b:	5a                   	pop    edx
c001763c:	31 d2                	xor    edx,edx
c001763e:	85 c0                	test   eax,eax
c0017640:	74 04                	je     c0017646 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017642:	89 da                	mov    edx,ebx
c0017644:	29 c2                	sub    edx,eax
c0017646:	89 d0                	mov    eax,edx
c0017648:	5b                   	pop    ebx
c0017649:	c3                   	ret    

c001764a <Thr::loadDLL(char const*, bool)>:
c001764a:	55                   	push   ebp
c001764b:	57                   	push   edi
c001764c:	56                   	push   esi
c001764d:	53                   	push   ebx
c001764e:	81 ec 34 01 00 00    	sub    esp,0x134
c0017654:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001765b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0017662:	56                   	push   esi
c0017663:	68 de 45 02 c0       	push   0xc00245de
c0017668:	e8 51 54 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001766d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017674:	e8 e4 23 ff ff       	call   c0009a5d <malloc>
c0017679:	83 c4 0c             	add    esp,0xc
c001767c:	89 c3                	mov    ebx,eax
c001767e:	ff 35 90 77 02 c0    	push   DWORD PTR ds:0xc0027790
c0017684:	56                   	push   esi
c0017685:	50                   	push   eax
c0017686:	e8 9d 59 ff ff       	call   c000d028 <File::File(char const*, Process*)>
c001768b:	83 c4 10             	add    esp,0x10
c001768e:	85 db                	test   ebx,ebx
c0017690:	75 3c                	jne    c00176ce <Thr::loadDLL(char const*, bool)+0x84>
c0017692:	89 f8                	mov    eax,edi
c0017694:	84 c0                	test   al,al
c0017696:	0f 84 d2 01 00 00    	je     c001786e <Thr::loadDLL(char const*, bool)+0x224>
c001769c:	55                   	push   ebp
c001769d:	55                   	push   ebp
c001769e:	68 ef 45 02 c0       	push   0xc00245ef
c00176a3:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00176a7:	55                   	push   ebp
c00176a8:	e8 5f 91 fe ff       	call   c000080c <strcpy>
c00176ad:	58                   	pop    eax
c00176ae:	5a                   	pop    edx
c00176af:	56                   	push   esi
c00176b0:	55                   	push   ebp
c00176b1:	e8 96 92 fe ff       	call   c000094c <strcat>
c00176b6:	59                   	pop    ecx
c00176b7:	58                   	pop    eax
c00176b8:	68 02 46 02 c0       	push   0xc0024602
c00176bd:	55                   	push   ebp
c00176be:	e8 89 92 fe ff       	call   c000094c <strcat>
c00176c3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00176c6:	e8 b2 cd ff ff       	call   c001447d <Krnl::panic(char const*)>
c00176cb:	83 c4 10             	add    esp,0x10
c00176ce:	51                   	push   ecx
c00176cf:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00176d3:	50                   	push   eax
c00176d4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00176d8:	50                   	push   eax
c00176d9:	53                   	push   ebx
c00176da:	e8 59 5c ff ff       	call   c000d338 <File::stat(unsigned long long*, bool*)>
c00176df:	83 c4 10             	add    esp,0x10
c00176e2:	85 db                	test   ebx,ebx
c00176e4:	74 0c                	je     c00176f2 <Thr::loadDLL(char const*, bool)+0xa8>
c00176e6:	83 ec 0c             	sub    esp,0xc
c00176e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00176eb:	53                   	push   ebx
c00176ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00176ef:	83 c4 10             	add    esp,0x10
c00176f2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00176f7:	75 0a                	jne    c0017703 <Thr::loadDLL(char const*, bool)+0xb9>
c00176f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00176fd:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017701:	75 3c                	jne    c001773f <Thr::loadDLL(char const*, bool)+0xf5>
c0017703:	89 f8                	mov    eax,edi
c0017705:	84 c0                	test   al,al
c0017707:	0f 84 49 01 00 00    	je     c0017856 <Thr::loadDLL(char const*, bool)+0x20c>
c001770d:	51                   	push   ecx
c001770e:	51                   	push   ecx
c001770f:	68 ef 45 02 c0       	push   0xc00245ef
c0017714:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017718:	53                   	push   ebx
c0017719:	e8 ee 90 fe ff       	call   c000080c <strcpy>
c001771e:	5d                   	pop    ebp
c001771f:	58                   	pop    eax
c0017720:	56                   	push   esi
c0017721:	53                   	push   ebx
c0017722:	e8 25 92 fe ff       	call   c000094c <strcat>
c0017727:	58                   	pop    eax
c0017728:	5a                   	pop    edx
c0017729:	68 02 46 02 c0       	push   0xc0024602
c001772e:	53                   	push   ebx
c001772f:	e8 18 92 fe ff       	call   c000094c <strcat>
c0017734:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017737:	e8 41 cd ff ff       	call   c001447d <Krnl::panic(char const*)>
c001773c:	83 c4 10             	add    esp,0x10
c001773f:	52                   	push   edx
c0017740:	6a 03                	push   0x3
c0017742:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017746:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001774a:	05 ff 0f 00 00       	add    eax,0xfff
c001774f:	83 d2 00             	adc    edx,0x0
c0017752:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017756:	50                   	push   eax
c0017757:	ff 35 d0 63 02 c0    	push   DWORD PTR ds:0xc00263d0
c001775d:	e8 2a 47 ff ff       	call   c000be8c <VAS::allocatePages(int, int)>
c0017762:	59                   	pop    ecx
c0017763:	89 c3                	mov    ebx,eax
c0017765:	5d                   	pop    ebp
c0017766:	50                   	push   eax
c0017767:	68 a9 27 02 c0       	push   0xc00227a9
c001776c:	e8 4d 53 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0017771:	89 34 24             	mov    DWORD PTR [esp],esi
c0017774:	e8 f3 8f fe ff       	call   c000076c <strlen>
c0017779:	8b 2d a0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fa0
c001777f:	40                   	inc    eax
c0017780:	89 04 24             	mov    DWORD PTR [esp],eax
c0017783:	e8 d5 22 ff ff       	call   c0009a5d <malloc>
c0017788:	89 04 ad c0 73 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8c40],eax
c001778f:	58                   	pop    eax
c0017790:	a1 a0 6f 02 c0       	mov    eax,ds:0xc0026fa0
c0017795:	5a                   	pop    edx
c0017796:	56                   	push   esi
c0017797:	ff 34 85 c0 73 02 c0 	push   DWORD PTR [eax*4-0x3ffd8c40]
c001779e:	e8 69 90 fe ff       	call   c000080c <strcpy>
c00177a3:	a1 a0 6f 02 c0       	mov    eax,ds:0xc0026fa0
c00177a8:	8d 50 01             	lea    edx,[eax+0x1]
c00177ab:	89 1c 85 c0 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8e40],ebx
c00177b2:	89 15 a0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa0,edx
c00177b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177bc:	83 c4 0c             	add    esp,0xc
c00177bf:	89 14 85 c0 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9040],edx
c00177c6:	6a 01                	push   0x1
c00177c8:	53                   	push   ebx
c00177c9:	56                   	push   esi
c00177ca:	e8 c2 f6 ff ff       	call   c0016e91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00177cf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00177d3:	83 c4 10             	add    esp,0x10
c00177d6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00177db:	0f 85 89 00 00 00    	jne    c001786a <Thr::loadDLL(char const*, bool)+0x220>
c00177e1:	89 f8                	mov    eax,edi
c00177e3:	84 c0                	test   al,al
c00177e5:	74 73                	je     c001785a <Thr::loadDLL(char const*, bool)+0x210>
c00177e7:	83 ec 0c             	sub    esp,0xc
c00177ea:	68 04 46 02 c0       	push   0xc0024604
c00177ef:	e8 89 cc ff ff       	call   c001447d <Krnl::panic(char const*)>
c00177f4:	83 c4 10             	add    esp,0x10
c00177f7:	eb 61                	jmp    c001785a <Thr::loadDLL(char const*, bool)+0x210>
c00177f9:	50                   	push   eax
c00177fa:	50                   	push   eax
c00177fb:	89 e8                	mov    eax,ebp
c00177fd:	c1 e0 0c             	shl    eax,0xc
c0017800:	01 d8                	add    eax,ebx
c0017802:	50                   	push   eax
c0017803:	ff 35 d0 63 02 c0    	push   DWORD PTR ds:0xc00263d0
c0017809:	e8 e6 41 ff ff       	call   c000b9f4 <VAS::getPageTableEntry(unsigned long)>
c001780e:	83 c4 10             	add    esp,0x10
c0017811:	8b 00                	mov    eax,DWORD PTR [eax]
c0017813:	a8 60                	test   al,0x60
c0017815:	75 11                	jne    c0017828 <Thr::loadDLL(char const*, bool)+0x1de>
c0017817:	83 ec 0c             	sub    esp,0xc
c001781a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001781f:	50                   	push   eax
c0017820:	e8 c3 25 ff ff       	call   c0009de8 <Phys::freePage(unsigned long)>
c0017825:	83 c4 10             	add    esp,0x10
c0017828:	45                   	inc    ebp
c0017829:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001782d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017831:	05 ff 0f 00 00       	add    eax,0xfff
c0017836:	bf 00 00 00 00       	mov    edi,0x0
c001783b:	83 d2 00             	adc    edx,0x0
c001783e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017842:	c1 ea 0c             	shr    edx,0xc
c0017845:	39 c5                	cmp    ebp,eax
c0017847:	89 d1                	mov    ecx,edx
c0017849:	89 f8                	mov    eax,edi
c001784b:	19 c8                	sbb    eax,ecx
c001784d:	72 aa                	jb     c00177f9 <Thr::loadDLL(char const*, bool)+0x1af>
c001784f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017854:	75 18                	jne    c001786e <Thr::loadDLL(char const*, bool)+0x224>
c0017856:	31 db                	xor    ebx,ebx
c0017858:	eb 14                	jmp    c001786e <Thr::loadDLL(char const*, bool)+0x224>
c001785a:	83 ec 0c             	sub    esp,0xc
c001785d:	68 23 46 02 c0       	push   0xc0024623
c0017862:	e8 16 cc ff ff       	call   c001447d <Krnl::panic(char const*)>
c0017867:	83 c4 10             	add    esp,0x10
c001786a:	31 ed                	xor    ebp,ebp
c001786c:	eb bb                	jmp    c0017829 <Thr::loadDLL(char const*, bool)+0x1df>
c001786e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017874:	89 d8                	mov    eax,ebx
c0017876:	5b                   	pop    ebx
c0017877:	5e                   	pop    esi
c0017878:	5f                   	pop    edi
c0017879:	5d                   	pop    ebp
c001787a:	c3                   	ret    

c001787b <Thr::executeDLL(unsigned long, void*)>:
c001787b:	56                   	push   esi
c001787c:	53                   	push   ebx
c001787d:	52                   	push   edx
c001787e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017882:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017886:	85 db                	test   ebx,ebx
c0017888:	75 10                	jne    c001789a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001788a:	83 ec 0c             	sub    esp,0xc
c001788d:	68 3f 46 02 c0       	push   0xc002463f
c0017892:	e8 e6 cb ff ff       	call   c001447d <Krnl::panic(char const*)>
c0017897:	83 c4 10             	add    esp,0x10
c001789a:	50                   	push   eax
c001789b:	50                   	push   eax
c001789c:	53                   	push   ebx
c001789d:	68 69 46 02 c0       	push   0xc0024669
c00178a2:	e8 17 52 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c00178a7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00178ab:	89 d8                	mov    eax,ebx
c00178ad:	83 c4 14             	add    esp,0x14
c00178b0:	5b                   	pop    ebx
c00178b1:	5e                   	pop    esi
c00178b2:	ff e0                	jmp    eax

c00178b4 <userModeEntryPoint(void*)>:
c00178b4:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c00178b9:	48                   	dec    eax
c00178ba:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c00178bf:	75 01                	jne    c00178c2 <userModeEntryPoint(void*)+0xe>
c00178c1:	fb                   	sti    
c00178c2:	fb                   	sti    
c00178c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00178c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00178cb:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c00178d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00178d5:	e9 50 8a fe ff       	jmp    c000032a <goToUsermode>

c00178da <changeTSS>:
c00178da:	83 ec 14             	sub    esp,0x14
c00178dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00178e2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00178e5:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00178ea:	c1 e2 15             	shl    edx,0x15
c00178ed:	29 d0                	sub    eax,edx
c00178ef:	50                   	push   eax
c00178f0:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c00178f5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00178fb:	05 7c 11 00 00       	add    eax,0x117c
c0017900:	50                   	push   eax
c0017901:	e8 32 37 ff ff       	call   c000b038 <TSS::setESP(unsigned long)>
c0017906:	83 c4 1c             	add    esp,0x1c
c0017909:	c3                   	ret    

c001790a <switchToThread(ThreadControlBlock*)>:
c001790a:	57                   	push   edi
c001790b:	a1 64 77 02 c0       	mov    eax,ds:0xc0027764
c0017910:	56                   	push   esi
c0017911:	85 c0                	test   eax,eax
c0017913:	53                   	push   ebx
c0017914:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017918:	0f 85 88 00 00 00    	jne    c00179a6 <switchToThread(ThreadControlBlock*)+0x9c>
c001791e:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c0017921:	3c ff                	cmp    al,0xff
c0017923:	74 7d                	je     c00179a2 <switchToThread(ThreadControlBlock*)+0x98>
c0017925:	0f b6 d0             	movzx  edx,al
c0017928:	b8 84 03 00 00       	mov    eax,0x384
c001792d:	29 d0                	sub    eax,edx
c001792f:	c1 e0 10             	shl    eax,0x10
c0017932:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c0017935:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0017938:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c001793d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017943:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001794a:	74 4a                	je     c0017996 <switchToThread(ThreadControlBlock*)+0x8c>
c001794c:	0f 31                	rdtsc  
c001794e:	a3 a8 77 02 c0       	mov    ds:0xc00277a8,eax
c0017953:	89 c6                	mov    esi,eax
c0017955:	89 d7                	mov    edi,edx
c0017957:	2b 35 98 77 02 c0    	sub    esi,DWORD PTR ds:0xc0027798
c001795d:	89 15 ac 77 02 c0    	mov    DWORD PTR ds:0xc00277ac,edx
c0017963:	1b 3d 9c 77 02 c0    	sbb    edi,DWORD PTR ds:0xc002779c
c0017969:	89 35 a0 77 02 c0    	mov    DWORD PTR ds:0xc00277a0,esi
c001796f:	a3 98 77 02 c0       	mov    ds:0xc0027798,eax
c0017974:	89 3d a4 77 02 c0    	mov    DWORD PTR ds:0xc00277a4,edi
c001797a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017980:	89 15 9c 77 02 c0    	mov    DWORD PTR ds:0xc002779c,edx
c0017986:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017989:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001798c:	01 c6                	add    esi,eax
c001798e:	11 d7                	adc    edi,edx
c0017990:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0017993:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0017996:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001799a:	5b                   	pop    ebx
c001799b:	5e                   	pop    esi
c001799c:	5f                   	pop    edi
c001799d:	e9 c0 89 fe ff       	jmp    c0000362 <switchToThreadASM>
c00179a2:	31 c0                	xor    eax,eax
c00179a4:	eb 8f                	jmp    c0017935 <switchToThread(ThreadControlBlock*)+0x2b>
c00179a6:	5b                   	pop    ebx
c00179a7:	c7 05 60 77 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027760,0x1
c00179b1:	5e                   	pop    esi
c00179b2:	5f                   	pop    edi
c00179b3:	c3                   	ret    

c00179b4 <Process::addArgs(char**)>:
c00179b4:	57                   	push   edi
c00179b5:	56                   	push   esi
c00179b6:	53                   	push   ebx
c00179b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00179bb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00179bf:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c00179c9:	85 ff                	test   edi,edi
c00179cb:	74 3d                	je     c0017a0a <Process::addArgs(char**)+0x56>
c00179cd:	8b 07                	mov    eax,DWORD PTR [edi]
c00179cf:	85 c0                	test   eax,eax
c00179d1:	74 37                	je     c0017a0a <Process::addArgs(char**)+0x56>
c00179d3:	31 db                	xor    ebx,ebx
c00179d5:	83 ec 0c             	sub    esp,0xc
c00179d8:	50                   	push   eax
c00179d9:	e8 8e 8d fe ff       	call   c000076c <strlen>
c00179de:	40                   	inc    eax
c00179df:	89 04 24             	mov    DWORD PTR [esp],eax
c00179e2:	e8 76 20 ff ff       	call   c0009a5d <malloc>
c00179e7:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00179ee:	5a                   	pop    edx
c00179ef:	59                   	pop    ecx
c00179f0:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00179f3:	43                   	inc    ebx
c00179f4:	50                   	push   eax
c00179f5:	e8 12 8e fe ff       	call   c000080c <strcpy>
c00179fa:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c0017a00:	83 c4 10             	add    esp,0x10
c0017a03:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017a06:	85 c0                	test   eax,eax
c0017a08:	75 cb                	jne    c00179d5 <Process::addArgs(char**)+0x21>
c0017a0a:	5b                   	pop    ebx
c0017a0b:	5e                   	pop    esi
c0017a0c:	5f                   	pop    edi
c0017a0d:	c3                   	ret    

c0017a0e <Process::Process(char const*, Process*, char**)>:
c0017a0e:	56                   	push   esi
c0017a0f:	53                   	push   ebx
c0017a10:	83 ec 14             	sub    esp,0x14
c0017a13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a17:	05 0c 02 00 00       	add    eax,0x20c
c0017a1c:	bb 07 00 00 00       	mov    ebx,0x7
c0017a21:	89 c6                	mov    esi,eax
c0017a23:	85 db                	test   ebx,ebx
c0017a25:	78 12                	js     c0017a39 <Process::Process(char const*, Process*, char**)+0x2b>
c0017a27:	83 ec 0c             	sub    esp,0xc
c0017a2a:	56                   	push   esi
c0017a2b:	e8 bc 9c 00 00       	call   c00216ec <ThreadControlBlock::ThreadControlBlock()>
c0017a30:	83 c4 10             	add    esp,0x10
c0017a33:	83 c6 63             	add    esi,0x63
c0017a36:	4b                   	dec    ebx
c0017a37:	eb ea                	jmp    c0017a23 <Process::Process(char const*, Process*, char**)+0x15>
c0017a39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a3d:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c0017a44:	83 ec 0c             	sub    esp,0xc
c0017a47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a4b:	e8 b6 c8 ff ff       	call   c0014306 <Krnl::newProcessEnv(Process*)>
c0017a50:	83 c4 10             	add    esp,0x10
c0017a53:	89 c2                	mov    edx,eax
c0017a55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a59:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c0017a5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a63:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0017a6c:	a1 90 5c 02 c0       	mov    eax,ds:0xc0025c90
c0017a71:	8d 50 01             	lea    edx,[eax+0x1]
c0017a74:	89 15 90 5c 02 c0    	mov    DWORD PTR ds:0xc0025c90,edx
c0017a7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a7e:	89 02                	mov    DWORD PTR [edx],eax
c0017a80:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0017a88:	83 ec 0c             	sub    esp,0xc
c0017a8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017a8f:	e8 c9 1f ff ff       	call   c0009a5d <malloc>
c0017a94:	83 c4 10             	add    esp,0x10
c0017a97:	89 c3                	mov    ebx,eax
c0017a99:	83 ec 08             	sub    esp,0x8
c0017a9c:	6a 00                	push   0x0
c0017a9e:	53                   	push   ebx
c0017a9f:	e8 90 47 ff ff       	call   c000c234 <VAS::VAS(bool)>
c0017aa4:	83 c4 10             	add    esp,0x10
c0017aa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aab:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0017ab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ab5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017abf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ac3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ac7:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0017acd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ad1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017ad7:	85 c0                	test   eax,eax
c0017ad9:	74 42                	je     c0017b1d <Process::Process(char const*, Process*, char**)+0x10f>
c0017adb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017adf:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017ae5:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017aeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aef:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0017af5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017af9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017aff:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017b05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b09:	05 0c 01 00 00       	add    eax,0x10c
c0017b0e:	83 ec 08             	sub    esp,0x8
c0017b11:	52                   	push   edx
c0017b12:	50                   	push   eax
c0017b13:	e8 f4 8c fe ff       	call   c000080c <strcpy>
c0017b18:	83 c4 10             	add    esp,0x10
c0017b1b:	eb 63                	jmp    c0017b80 <Process::Process(char const*, Process*, char**)+0x172>
c0017b1d:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c0017b25:	83 ec 0c             	sub    esp,0xc
c0017b28:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b2c:	e8 2c 1f ff ff       	call   c0009a5d <malloc>
c0017b31:	83 c4 10             	add    esp,0x10
c0017b34:	89 c3                	mov    ebx,eax
c0017b36:	83 ec 08             	sub    esp,0x8
c0017b39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b3d:	53                   	push   ebx
c0017b3e:	e8 07 32 ff ff       	call   c000ad4a <VgaText::VgaText(char const*)>
c0017b43:	83 c4 10             	add    esp,0x10
c0017b46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b4a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0017b50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b54:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0017b5a:	83 ec 0c             	sub    esp,0xc
c0017b5d:	50                   	push   eax
c0017b5e:	e8 a6 29 ff ff       	call   c000a509 <addToTerminalCycle(VgaText*)>
c0017b63:	83 c4 10             	add    esp,0x10
c0017b66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b6a:	05 0c 01 00 00       	add    eax,0x10c
c0017b6f:	83 ec 08             	sub    esp,0x8
c0017b72:	68 88 46 02 c0       	push   0xc0024688
c0017b77:	50                   	push   eax
c0017b78:	e8 8f 8c fe ff       	call   c000080c <strcpy>
c0017b7d:	83 c4 10             	add    esp,0x10
c0017b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b84:	83 c0 0c             	add    eax,0xc
c0017b87:	83 ec 08             	sub    esp,0x8
c0017b8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b8e:	50                   	push   eax
c0017b8f:	e8 78 8c fe ff       	call   c000080c <strcpy>
c0017b94:	83 c4 10             	add    esp,0x10
c0017b97:	83 ec 08             	sub    esp,0x8
c0017b9a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017b9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ba2:	e8 0d fe ff ff       	call   c00179b4 <Process::addArgs(char**)>
c0017ba7:	83 c4 10             	add    esp,0x10
c0017baa:	83 ec 08             	sub    esp,0x8
c0017bad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bb5:	e8 a1 ed ff ff       	call   c001695b <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017bba:	83 c4 10             	add    esp,0x10
c0017bbd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017bc1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017bc5:	83 f0 01             	xor    eax,0x1
c0017bc8:	88 c2                	mov    dl,al
c0017bca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bce:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c0017bd4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017bd9:	83 ec 08             	sub    esp,0x8
c0017bdc:	50                   	push   eax
c0017bdd:	68 e0 46 02 c0       	push   0xc00246e0
c0017be2:	e8 d7 4e ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0017be7:	83 c4 10             	add    esp,0x10
c0017bea:	90                   	nop
c0017beb:	83 c4 14             	add    esp,0x14
c0017bee:	5b                   	pop    ebx
c0017bef:	5e                   	pop    esi
c0017bf0:	c3                   	ret    
c0017bf1:	90                   	nop

c0017bf2 <Process::Process(bool, char const*, Process*, char**)>:
c0017bf2:	56                   	push   esi
c0017bf3:	53                   	push   ebx
c0017bf4:	83 ec 24             	sub    esp,0x24
c0017bf7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bfb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017bff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c03:	05 0c 02 00 00       	add    eax,0x20c
c0017c08:	bb 07 00 00 00       	mov    ebx,0x7
c0017c0d:	89 c6                	mov    esi,eax
c0017c0f:	85 db                	test   ebx,ebx
c0017c11:	78 12                	js     c0017c25 <Process::Process(bool, char const*, Process*, char**)+0x33>
c0017c13:	83 ec 0c             	sub    esp,0xc
c0017c16:	56                   	push   esi
c0017c17:	e8 d0 9a 00 00       	call   c00216ec <ThreadControlBlock::ThreadControlBlock()>
c0017c1c:	83 c4 10             	add    esp,0x10
c0017c1f:	83 c6 63             	add    esi,0x63
c0017c22:	4b                   	dec    ebx
c0017c23:	eb ea                	jmp    c0017c0f <Process::Process(bool, char const*, Process*, char**)+0x1d>
c0017c25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c29:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c0017c30:	83 ec 0c             	sub    esp,0xc
c0017c33:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017c37:	e8 ca c6 ff ff       	call   c0014306 <Krnl::newProcessEnv(Process*)>
c0017c3c:	83 c4 10             	add    esp,0x10
c0017c3f:	89 c2                	mov    edx,eax
c0017c41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c45:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c0017c4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c4f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0017c58:	a1 90 5c 02 c0       	mov    eax,ds:0xc0025c90
c0017c5d:	8d 50 01             	lea    edx,[eax+0x1]
c0017c60:	89 15 90 5c 02 c0    	mov    DWORD PTR ds:0xc0025c90,edx
c0017c66:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c6a:	89 02                	mov    DWORD PTR [edx],eax
c0017c6c:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0017c74:	83 ec 0c             	sub    esp,0xc
c0017c77:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017c7b:	e8 dd 1d ff ff       	call   c0009a5d <malloc>
c0017c80:	83 c4 10             	add    esp,0x10
c0017c83:	89 c3                	mov    ebx,eax
c0017c85:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017c8a:	83 ec 08             	sub    esp,0x8
c0017c8d:	50                   	push   eax
c0017c8e:	53                   	push   ebx
c0017c8f:	e8 a0 45 ff ff       	call   c000c234 <VAS::VAS(bool)>
c0017c94:	83 c4 10             	add    esp,0x10
c0017c97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c9b:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0017ca1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ca5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017caf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cb3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017cb7:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0017cbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cc1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017cc7:	85 c0                	test   eax,eax
c0017cc9:	74 42                	je     c0017d0d <Process::Process(bool, char const*, Process*, char**)+0x11b>
c0017ccb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ccf:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017cd5:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017cdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cdf:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0017ce5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ce9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017cef:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017cf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cf9:	05 0c 01 00 00       	add    eax,0x10c
c0017cfe:	83 ec 08             	sub    esp,0x8
c0017d01:	52                   	push   edx
c0017d02:	50                   	push   eax
c0017d03:	e8 04 8b fe ff       	call   c000080c <strcpy>
c0017d08:	83 c4 10             	add    esp,0x10
c0017d0b:	eb 63                	jmp    c0017d70 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c0017d0d:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c0017d15:	83 ec 0c             	sub    esp,0xc
c0017d18:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017d1c:	e8 3c 1d ff ff       	call   c0009a5d <malloc>
c0017d21:	83 c4 10             	add    esp,0x10
c0017d24:	89 c3                	mov    ebx,eax
c0017d26:	83 ec 08             	sub    esp,0x8
c0017d29:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017d2d:	53                   	push   ebx
c0017d2e:	e8 17 30 ff ff       	call   c000ad4a <VgaText::VgaText(char const*)>
c0017d33:	83 c4 10             	add    esp,0x10
c0017d36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d3a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0017d40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d44:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0017d4a:	83 ec 0c             	sub    esp,0xc
c0017d4d:	50                   	push   eax
c0017d4e:	e8 b6 27 ff ff       	call   c000a509 <addToTerminalCycle(VgaText*)>
c0017d53:	83 c4 10             	add    esp,0x10
c0017d56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d5a:	05 0c 01 00 00       	add    eax,0x10c
c0017d5f:	83 ec 08             	sub    esp,0x8
c0017d62:	68 88 46 02 c0       	push   0xc0024688
c0017d67:	50                   	push   eax
c0017d68:	e8 9f 8a fe ff       	call   c000080c <strcpy>
c0017d6d:	83 c4 10             	add    esp,0x10
c0017d70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d74:	83 c0 0c             	add    eax,0xc
c0017d77:	83 ec 08             	sub    esp,0x8
c0017d7a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017d7e:	50                   	push   eax
c0017d7f:	e8 88 8a fe ff       	call   c000080c <strcpy>
c0017d84:	83 c4 10             	add    esp,0x10
c0017d87:	83 ec 08             	sub    esp,0x8
c0017d8a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017d8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017d92:	e8 1d fc ff ff       	call   c00179b4 <Process::addArgs(char**)>
c0017d97:	83 c4 10             	add    esp,0x10
c0017d9a:	90                   	nop
c0017d9b:	83 c4 24             	add    esp,0x24
c0017d9e:	5b                   	pop    ebx
c0017d9f:	5e                   	pop    esi
c0017da0:	c3                   	ret    

c0017da1 <taskStartupFunction>:
c0017da1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017da6:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0017da9:	c3                   	ret    

c0017daa <Semaphore::Semaphore(int)>:
c0017daa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017dae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017db2:	89 10                	mov    DWORD PTR [eax],edx
c0017db4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017db8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017dbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017dc3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017dca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017dce:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017dd5:	90                   	nop
c0017dd6:	c3                   	ret    
c0017dd7:	90                   	nop

c0017dd8 <Mutex::Mutex()>:
c0017dd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ddc:	6a 01                	push   0x1
c0017dde:	50                   	push   eax
c0017ddf:	e8 c6 ff ff ff       	call   c0017daa <Semaphore::Semaphore(int)>
c0017de4:	83 c4 08             	add    esp,0x8
c0017de7:	90                   	nop
c0017de8:	c3                   	ret    
c0017de9:	90                   	nop

c0017dea <Process::createThread(void (*)(void*), void*, int)>:
c0017dea:	55                   	push   ebp
c0017deb:	31 c9                	xor    ecx,ecx
c0017ded:	57                   	push   edi
c0017dee:	56                   	push   esi
c0017def:	53                   	push   ebx
c0017df0:	83 ec 1c             	sub    esp,0x1c
c0017df3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017df7:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0017dfe:	89 f2                	mov    edx,esi
c0017e00:	0f b7 c2             	movzx  eax,dx
c0017e03:	83 e2 01             	and    edx,0x1
c0017e06:	74 16                	je     c0017e1e <Process::createThread(void (*)(void*), void*, int)+0x34>
c0017e08:	d1 f8                	sar    eax,1
c0017e0a:	41                   	inc    ecx
c0017e0b:	89 c2                	mov    edx,eax
c0017e0d:	83 f9 10             	cmp    ecx,0x10
c0017e10:	75 ee                	jne    c0017e00 <Process::createThread(void (*)(void*), void*, int)+0x16>
c0017e12:	83 c4 1c             	add    esp,0x1c
c0017e15:	31 db                	xor    ebx,ebx
c0017e17:	89 d8                	mov    eax,ebx
c0017e19:	5b                   	pop    ebx
c0017e1a:	5e                   	pop    esi
c0017e1b:	5f                   	pop    edi
c0017e1c:	5d                   	pop    ebp
c0017e1d:	c3                   	ret    
c0017e1e:	b8 01 00 00 00       	mov    eax,0x1
c0017e23:	8d 14 09             	lea    edx,[ecx+ecx*1]
c0017e26:	d3 e0                	shl    eax,cl
c0017e28:	09 c6                	or     esi,eax
c0017e2a:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0017e2d:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0017e34:	89 c6                	mov    esi,eax
c0017e36:	c1 e6 05             	shl    esi,0x5
c0017e39:	01 f0                	add    eax,esi
c0017e3b:	01 d8                	add    eax,ebx
c0017e3d:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0017e44:	75 0a                	jne    c0017e50 <Process::createThread(void (*)(void*), void*, int)+0x66>
c0017e46:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0017e50:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017e56:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0017e5a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0017e5d:	01 ca                	add    edx,ecx
c0017e5f:	83 ec 08             	sub    esp,0x8
c0017e62:	89 d0                	mov    eax,edx
c0017e64:	c1 e0 05             	shl    eax,0x5
c0017e67:	01 d0                	add    eax,edx
c0017e69:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c0017e6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017e71:	01 d8                	add    eax,ebx
c0017e73:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c0017e79:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c0017e7f:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0017e85:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0017e8b:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0017e91:	89 cd                	mov    ebp,ecx
c0017e93:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0017e97:	f7 dd                	neg    ebp
c0017e99:	c1 e5 15             	shl    ebp,0x15
c0017e9c:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c0017ea2:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c0017ea8:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017eb2:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0017eb8:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017ec2:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017ecc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ed0:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c0017ed7:	53                   	push   ebx
c0017ed8:	68 84 77 02 c0       	push   0xc0027784
c0017edd:	e8 c4 95 00 00       	call   c00214a6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017ee2:	89 d8                	mov    eax,ebx
c0017ee4:	83 c4 10             	add    esp,0x10
c0017ee7:	83 c4 1c             	add    esp,0x1c
c0017eea:	5b                   	pop    ebx
c0017eeb:	5e                   	pop    esi
c0017eec:	5f                   	pop    edi
c0017eed:	5d                   	pop    ebp
c0017eee:	c3                   	ret    
c0017eef:	90                   	nop

c0017ef0 <Process::createUserThread()>:
c0017ef0:	83 ec 0c             	sub    esp,0xc
c0017ef3:	68 80 00 00 00       	push   0x80
c0017ef8:	6a 00                	push   0x0
c0017efa:	68 b4 78 01 c0       	push   0xc00178b4
c0017eff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f03:	e8 e2 fe ff ff       	call   c0017dea <Process::createThread(void (*)(void*), void*, int)>
c0017f08:	83 c4 1c             	add    esp,0x1c
c0017f0b:	c3                   	ret    

c0017f0c <setupMultitasking(void (*)())>:
c0017f0c:	56                   	push   esi
c0017f0d:	53                   	push   ebx
c0017f0e:	51                   	push   ecx
c0017f0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017f13:	eb 10                	jmp    c0017f25 <setupMultitasking(void (*)())+0x19>
c0017f15:	83 ec 0c             	sub    esp,0xc
c0017f18:	68 84 77 02 c0       	push   0xc0027784
c0017f1d:	e8 d6 94 00 00       	call   c00213f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017f22:	83 c4 10             	add    esp,0x10
c0017f25:	83 ec 0c             	sub    esp,0xc
c0017f28:	68 84 77 02 c0       	push   0xc0027784
c0017f2d:	e8 a2 94 00 00       	call   c00213d4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017f32:	83 c4 10             	add    esp,0x10
c0017f35:	84 c0                	test   al,al
c0017f37:	74 dc                	je     c0017f15 <setupMultitasking(void (*)())+0x9>
c0017f39:	83 ec 0c             	sub    esp,0xc
c0017f3c:	68 3f 07 00 00       	push   0x73f
c0017f41:	e8 17 1b ff ff       	call   c0009a5d <malloc>
c0017f46:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017f4d:	89 c3                	mov    ebx,eax
c0017f4f:	6a 00                	push   0x0
c0017f51:	68 8c 46 02 c0       	push   0xc002468c
c0017f56:	6a 01                	push   0x1
c0017f58:	50                   	push   eax
c0017f59:	e8 94 fc ff ff       	call   c0017bf2 <Process::Process(bool, char const*, Process*, char**)>
c0017f5e:	83 c4 14             	add    esp,0x14
c0017f61:	89 1d 90 77 02 c0    	mov    DWORD PTR ds:0xc0027790,ebx
c0017f67:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017f6d:	e8 a5 28 ff ff       	call   c000a817 <setActiveTerminal(VgaText*)>
c0017f72:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c0017f7a:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0017f84:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017f8a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017f8d:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017f97:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017f9d:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017fa3:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017fad:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0017fb7:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017fc1:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017fc7:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017fd1:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017fd7:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017fe1:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017fe7:	58                   	pop    eax
c0017fe8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017fee:	5a                   	pop    edx
c0017fef:	68 88 46 02 c0       	push   0xc0024688
c0017ff4:	50                   	push   eax
c0017ff5:	e8 12 88 fe ff       	call   c000080c <strcpy>
c0017ffa:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018001:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018005:	83 c4 14             	add    esp,0x14
c0018008:	5b                   	pop    ebx
c0018009:	5e                   	pop    esi
c001800a:	e9 45 83 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001800f <schedule()>:
c001800f:	a1 64 77 02 c0       	mov    eax,ds:0xc0027764
c0018014:	85 c0                	test   eax,eax
c0018016:	74 0b                	je     c0018023 <schedule()+0x14>
c0018018:	c7 05 60 77 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027760,0x1
c0018022:	c3                   	ret    
c0018023:	53                   	push   ebx
c0018024:	83 ec 14             	sub    esp,0x14
c0018027:	68 84 77 02 c0       	push   0xc0027784
c001802c:	e8 a3 93 00 00       	call   c00213d4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018031:	83 c4 10             	add    esp,0x10
c0018034:	84 c0                	test   al,al
c0018036:	75 38                	jne    c0018070 <schedule()+0x61>
c0018038:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001803d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018040:	4a                   	dec    edx
c0018041:	74 32                	je     c0018075 <schedule()+0x66>
c0018043:	83 ec 0c             	sub    esp,0xc
c0018046:	68 84 77 02 c0       	push   0xc0027784
c001804b:	e8 a0 93 00 00       	call   c00213f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018050:	c7 04 24 84 77 02 c0 	mov    DWORD PTR [esp],0xc0027784
c0018057:	89 c3                	mov    ebx,eax
c0018059:	e8 9a 93 00 00       	call   c00213f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001805e:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018065:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018068:	e8 9d f8 ff ff       	call   c001790a <switchToThread(ThreadControlBlock*)>
c001806d:	83 c4 10             	add    esp,0x10
c0018070:	83 c4 08             	add    esp,0x8
c0018073:	5b                   	pop    ebx
c0018074:	c3                   	ret    
c0018075:	83 ec 08             	sub    esp,0x8
c0018078:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001807f:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018085:	68 84 77 02 c0       	push   0xc0027784
c001808a:	e8 17 94 00 00       	call   c00214a6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001808f:	83 c4 10             	add    esp,0x10
c0018092:	eb af                	jmp    c0018043 <schedule()+0x34>

c0018094 <Semaphore::tryAcquire()>:
c0018094:	53                   	push   ebx
c0018095:	83 ec 08             	sub    esp,0x8
c0018098:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001809c:	fa                   	cli    
c001809d:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c00180a2:	8d 50 01             	lea    edx,[eax+0x1]
c00180a5:	89 15 68 77 02 c0    	mov    DWORD PTR ds:0xc0027768,edx
c00180ab:	8b 15 64 77 02 c0    	mov    edx,DWORD PTR ds:0xc0027764
c00180b1:	8d 5a 01             	lea    ebx,[edx+0x1]
c00180b4:	89 1d 64 77 02 c0    	mov    DWORD PTR ds:0xc0027764,ebx
c00180ba:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00180bd:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00180bf:	7c 2a                	jl     c00180eb <Semaphore::tryAcquire()+0x57>
c00180c1:	89 15 64 77 02 c0    	mov    DWORD PTR ds:0xc0027764,edx
c00180c7:	85 d2                	test   edx,edx
c00180c9:	75 0a                	jne    c00180d5 <Semaphore::tryAcquire()+0x41>
c00180cb:	8b 15 60 77 02 c0    	mov    edx,DWORD PTR ds:0xc0027760
c00180d1:	85 d2                	test   edx,edx
c00180d3:	75 5b                	jne    c0018130 <Semaphore::tryAcquire()+0x9c>
c00180d5:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c00180da:	85 c0                	test   eax,eax
c00180dc:	74 07                	je     c00180e5 <Semaphore::tryAcquire()+0x51>
c00180de:	31 c0                	xor    eax,eax
c00180e0:	83 c4 08             	add    esp,0x8
c00180e3:	5b                   	pop    ebx
c00180e4:	c3                   	ret    
c00180e5:	fb                   	sti    
c00180e6:	83 c4 08             	add    esp,0x8
c00180e9:	5b                   	pop    ebx
c00180ea:	c3                   	ret    
c00180eb:	43                   	inc    ebx
c00180ec:	89 15 64 77 02 c0    	mov    DWORD PTR ds:0xc0027764,edx
c00180f2:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00180f5:	85 d2                	test   edx,edx
c00180f7:	75 1f                	jne    c0018118 <Semaphore::tryAcquire()+0x84>
c00180f9:	8b 0d 60 77 02 c0    	mov    ecx,DWORD PTR ds:0xc0027760
c00180ff:	85 c9                	test   ecx,ecx
c0018101:	74 15                	je     c0018118 <Semaphore::tryAcquire()+0x84>
c0018103:	c7 05 60 77 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027760,0x0
c001810d:	e8 fd fe ff ff       	call   c001800f <schedule()>
c0018112:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0018117:	48                   	dec    eax
c0018118:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c001811d:	85 c0                	test   eax,eax
c001811f:	75 08                	jne    c0018129 <Semaphore::tryAcquire()+0x95>
c0018121:	fb                   	sti    
c0018122:	b0 01                	mov    al,0x1
c0018124:	83 c4 08             	add    esp,0x8
c0018127:	5b                   	pop    ebx
c0018128:	c3                   	ret    
c0018129:	b0 01                	mov    al,0x1
c001812b:	83 c4 08             	add    esp,0x8
c001812e:	5b                   	pop    ebx
c001812f:	c3                   	ret    
c0018130:	c7 05 60 77 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027760,0x0
c001813a:	e8 d0 fe ff ff       	call   c001800f <schedule()>
c001813f:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0018144:	48                   	dec    eax
c0018145:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c001814a:	85 c0                	test   eax,eax
c001814c:	75 90                	jne    c00180de <Semaphore::tryAcquire()+0x4a>
c001814e:	eb 95                	jmp    c00180e5 <Semaphore::tryAcquire()+0x51>

c0018150 <Semaphore::assertLocked(char const*)>:
c0018150:	83 ec 0c             	sub    esp,0xc
c0018153:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018157:	fa                   	cli    
c0018158:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c001815e:	a1 64 77 02 c0       	mov    eax,ds:0xc0027764
c0018163:	8d 48 01             	lea    ecx,[eax+0x1]
c0018166:	89 0d 64 77 02 c0    	mov    DWORD PTR ds:0xc0027764,ecx
c001816c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001816e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018171:	7c 24                	jl     c0018197 <Semaphore::assertLocked(char const*)+0x47>
c0018173:	a3 64 77 02 c0       	mov    ds:0xc0027764,eax
c0018178:	85 c0                	test   eax,eax
c001817a:	75 09                	jne    c0018185 <Semaphore::assertLocked(char const*)+0x35>
c001817c:	a1 60 77 02 c0       	mov    eax,ds:0xc0027760
c0018181:	85 c0                	test   eax,eax
c0018183:	75 29                	jne    c00181ae <Semaphore::assertLocked(char const*)+0x5e>
c0018185:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c001818a:	48                   	dec    eax
c001818b:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0018190:	75 01                	jne    c0018193 <Semaphore::assertLocked(char const*)+0x43>
c0018192:	fb                   	sti    
c0018193:	83 c4 0c             	add    esp,0xc
c0018196:	c3                   	ret    
c0018197:	83 ec 0c             	sub    esp,0xc
c001819a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001819e:	e8 da c2 ff ff       	call   c001447d <Krnl::panic(char const*)>
c00181a3:	a1 64 77 02 c0       	mov    eax,ds:0xc0027764
c00181a8:	83 c4 10             	add    esp,0x10
c00181ab:	48                   	dec    eax
c00181ac:	eb c5                	jmp    c0018173 <Semaphore::assertLocked(char const*)+0x23>
c00181ae:	c7 05 60 77 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027760,0x0
c00181b8:	e8 52 fe ff ff       	call   c001800f <schedule()>
c00181bd:	eb c6                	jmp    c0018185 <Semaphore::assertLocked(char const*)+0x35>

c00181bf <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00181bf:	83 ec 0c             	sub    esp,0xc
c00181c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00181cb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00181ce:	e8 3c fe ff ff       	call   c001800f <schedule()>
c00181d3:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c00181d8:	48                   	dec    eax
c00181d9:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c00181de:	75 01                	jne    c00181e1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c00181e0:	fb                   	sti    
c00181e1:	83 c4 0c             	add    esp,0xc
c00181e4:	c3                   	ret    

c00181e5 <blockTask(TaskState)>:
c00181e5:	83 ec 0c             	sub    esp,0xc
c00181e8:	fa                   	cli    
c00181e9:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c00181ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00181f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181f8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00181fb:	e8 0f fe ff ff       	call   c001800f <schedule()>
c0018200:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0018205:	48                   	dec    eax
c0018206:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c001820b:	75 01                	jne    c001820e <blockTask(TaskState)+0x29>
c001820d:	fb                   	sti    
c001820e:	83 c4 0c             	add    esp,0xc
c0018211:	c3                   	ret    

c0018212 <waitTask(int, int*, int)>:
c0018212:	83 ec 18             	sub    esp,0x18
c0018215:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001821a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001821e:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018221:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018225:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001822a:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001822d:	6a 07                	push   0x7
c001822f:	e8 b1 ff ff ff       	call   c00181e5 <blockTask(TaskState)>
c0018234:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018239:	83 c4 10             	add    esp,0x10
c001823c:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001823f:	85 d2                	test   edx,edx
c0018241:	74 0a                	je     c001824d <waitTask(int, int*, int)+0x3b>
c0018243:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018246:	89 02                	mov    DWORD PTR [edx],eax
c0018248:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001824d:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018250:	83 c4 0c             	add    esp,0xc
c0018253:	c3                   	ret    

c0018254 <nanoSleepUntil(unsigned long long)>:
c0018254:	83 ec 0c             	sub    esp,0xc
c0018257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001825b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001825f:	3b 05 d0 68 02 c0    	cmp    eax,DWORD PTR ds:0xc00268d0
c0018265:	89 d1                	mov    ecx,edx
c0018267:	1b 0d d4 68 02 c0    	sbb    ecx,DWORD PTR ds:0xc00268d4
c001826d:	73 04                	jae    c0018273 <nanoSleepUntil(unsigned long long)+0x1f>
c001826f:	83 c4 0c             	add    esp,0xc
c0018272:	c3                   	ret    
c0018273:	fa                   	cli    
c0018274:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c001827a:	83 ec 08             	sub    esp,0x8
c001827d:	ff 05 64 77 02 c0    	inc    DWORD PTR ds:0xc0027764
c0018283:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018289:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001828c:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001828f:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018295:	68 78 77 02 c0       	push   0xc0027778
c001829a:	e8 07 92 00 00       	call   c00214a6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001829f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00182a6:	e8 3a ff ff ff       	call   c00181e5 <blockTask(TaskState)>
c00182ab:	a1 64 77 02 c0       	mov    eax,ds:0xc0027764
c00182b0:	83 c4 10             	add    esp,0x10
c00182b3:	48                   	dec    eax
c00182b4:	a3 64 77 02 c0       	mov    ds:0xc0027764,eax
c00182b9:	85 c0                	test   eax,eax
c00182bb:	75 09                	jne    c00182c6 <nanoSleepUntil(unsigned long long)+0x72>
c00182bd:	a1 60 77 02 c0       	mov    eax,ds:0xc0027760
c00182c2:	85 c0                	test   eax,eax
c00182c4:	75 12                	jne    c00182d8 <nanoSleepUntil(unsigned long long)+0x84>
c00182c6:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c00182cb:	48                   	dec    eax
c00182cc:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c00182d1:	75 9c                	jne    c001826f <nanoSleepUntil(unsigned long long)+0x1b>
c00182d3:	fb                   	sti    
c00182d4:	83 c4 0c             	add    esp,0xc
c00182d7:	c3                   	ret    
c00182d8:	c7 05 60 77 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027760,0x0
c00182e2:	e8 28 fd ff ff       	call   c001800f <schedule()>
c00182e7:	eb dd                	jmp    c00182c6 <nanoSleepUntil(unsigned long long)+0x72>

c00182e9 <nanoSleep(unsigned long long)>:
c00182e9:	a1 d0 68 02 c0       	mov    eax,ds:0xc00268d0
c00182ee:	8b 15 d4 68 02 c0    	mov    edx,DWORD PTR ds:0xc00268d4
c00182f4:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00182f8:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c00182fc:	e9 53 ff ff ff       	jmp    c0018254 <nanoSleepUntil(unsigned long long)>

c0018301 <sleep(unsigned long long)>:
c0018301:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018309:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001830e:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018312:	01 ca                	add    edx,ecx
c0018314:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018318:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001831c:	eb cb                	jmp    c00182e9 <nanoSleep(unsigned long long)>

c001831e <Semaphore::acquire()>:
c001831e:	83 ec 0c             	sub    esp,0xc
c0018321:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018325:	fa                   	cli    
c0018326:	a1 64 77 02 c0       	mov    eax,ds:0xc0027764
c001832b:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c0018331:	8d 48 01             	lea    ecx,[eax+0x1]
c0018334:	89 0d 64 77 02 c0    	mov    DWORD PTR ds:0xc0027764,ecx
c001833a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001833d:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001833f:	7d 28                	jge    c0018369 <Semaphore::acquire()+0x4b>
c0018341:	41                   	inc    ecx
c0018342:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0018345:	a3 64 77 02 c0       	mov    ds:0xc0027764,eax
c001834a:	85 c0                	test   eax,eax
c001834c:	75 09                	jne    c0018357 <Semaphore::acquire()+0x39>
c001834e:	a1 60 77 02 c0       	mov    eax,ds:0xc0027760
c0018353:	85 c0                	test   eax,eax
c0018355:	75 5d                	jne    c00183b4 <Semaphore::acquire()+0x96>
c0018357:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c001835c:	48                   	dec    eax
c001835d:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0018362:	75 01                	jne    c0018365 <Semaphore::acquire()+0x47>
c0018364:	fb                   	sti    
c0018365:	83 c4 0c             	add    esp,0xc
c0018368:	c3                   	ret    
c0018369:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001836e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018375:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018378:	85 c9                	test   ecx,ecx
c001837a:	74 49                	je     c00183c5 <Semaphore::acquire()+0xa7>
c001837c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001837f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018385:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018388:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001838d:	83 ec 0c             	sub    esp,0xc
c0018390:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0018393:	68 08 47 02 c0       	push   0xc0024708
c0018398:	e8 21 47 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001839d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00183a4:	e8 3c fe ff ff       	call   c00181e5 <blockTask(TaskState)>
c00183a9:	a1 64 77 02 c0       	mov    eax,ds:0xc0027764
c00183ae:	83 c4 10             	add    esp,0x10
c00183b1:	48                   	dec    eax
c00183b2:	eb 91                	jmp    c0018345 <Semaphore::acquire()+0x27>
c00183b4:	c7 05 60 77 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027760,0x0
c00183be:	e8 4c fc ff ff       	call   c001800f <schedule()>
c00183c3:	eb 92                	jmp    c0018357 <Semaphore::acquire()+0x39>
c00183c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00183ca:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00183cd:	eb b9                	jmp    c0018388 <Semaphore::acquire()+0x6a>

c00183cf <taskReturned>:
c00183cf:	83 ec 18             	sub    esp,0x18
c00183d2:	68 28 47 02 c0       	push   0xc0024728
c00183d7:	e8 a1 c0 ff ff       	call   c001447d <Krnl::panic(char const*)>
c00183dc:	83 c4 10             	add    esp,0x10
c00183df:	83 ec 0c             	sub    esp,0xc
c00183e2:	6a 02                	push   0x2
c00183e4:	e8 fc fd ff ff       	call   c00181e5 <blockTask(TaskState)>
c00183e9:	fa                   	cli    
c00183ea:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c00183f0:	e8 1a fc ff ff       	call   c001800f <schedule()>
c00183f5:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c00183fa:	83 c4 10             	add    esp,0x10
c00183fd:	48                   	dec    eax
c00183fe:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0018403:	85 c0                	test   eax,eax
c0018405:	75 d8                	jne    c00183df <taskReturned+0x10>
c0018407:	fb                   	sti    
c0018408:	eb d5                	jmp    c00183df <taskReturned+0x10>

c001840a <Thr::processFromPID(int)>:
c001840a:	57                   	push   edi
c001840b:	56                   	push   esi
c001840c:	53                   	push   ebx
c001840d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018411:	fa                   	cli    
c0018412:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c0018418:	83 ec 0c             	sub    esp,0xc
c001841b:	68 84 77 02 c0       	push   0xc0027784
c0018420:	e8 cb 8f 00 00       	call   c00213f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018425:	83 c4 10             	add    esp,0x10
c0018428:	89 c7                	mov    edi,eax
c001842a:	eb 14                	jmp    c0018440 <Thr::processFromPID(int)+0x36>
c001842c:	83 ec 0c             	sub    esp,0xc
c001842f:	68 84 77 02 c0       	push   0xc0027784
c0018434:	e8 b7 8f 00 00       	call   c00213f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018439:	83 c4 10             	add    esp,0x10
c001843c:	39 f8                	cmp    eax,edi
c001843e:	74 49                	je     c0018489 <Thr::processFromPID(int)+0x7f>
c0018440:	83 ec 0c             	sub    esp,0xc
c0018443:	68 84 77 02 c0       	push   0xc0027784
c0018448:	e8 a3 8f 00 00       	call   c00213f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001844d:	c7 04 24 84 77 02 c0 	mov    DWORD PTR [esp],0xc0027784
c0018454:	89 c3                	mov    ebx,eax
c0018456:	e8 9d 8f 00 00       	call   c00213f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001845b:	58                   	pop    eax
c001845c:	5a                   	pop    edx
c001845d:	53                   	push   ebx
c001845e:	68 84 77 02 c0       	push   0xc0027784
c0018463:	e8 3e 90 00 00       	call   c00214a6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018468:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001846b:	83 c4 10             	add    esp,0x10
c001846e:	39 30                	cmp    DWORD PTR [eax],esi
c0018470:	75 ba                	jne    c001842c <Thr::processFromPID(int)+0x22>
c0018472:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0018477:	48                   	dec    eax
c0018478:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c001847d:	74 07                	je     c0018486 <Thr::processFromPID(int)+0x7c>
c001847f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018482:	5b                   	pop    ebx
c0018483:	5e                   	pop    esi
c0018484:	5f                   	pop    edi
c0018485:	c3                   	ret    
c0018486:	fb                   	sti    
c0018487:	eb f6                	jmp    c001847f <Thr::processFromPID(int)+0x75>
c0018489:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c001848e:	48                   	dec    eax
c001848f:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0018494:	75 05                	jne    c001849b <Thr::processFromPID(int)+0x91>
c0018496:	fb                   	sti    
c0018497:	5b                   	pop    ebx
c0018498:	5e                   	pop    esi
c0018499:	5f                   	pop    edi
c001849a:	c3                   	ret    
c001849b:	5b                   	pop    ebx
c001849c:	31 c0                	xor    eax,eax
c001849e:	5e                   	pop    esi
c001849f:	5f                   	pop    edi
c00184a0:	c3                   	ret    

c00184a1 <unblockTask(ThreadControlBlock*)>:
c00184a1:	53                   	push   ebx
c00184a2:	83 ec 08             	sub    esp,0x8
c00184a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00184a9:	fa                   	cli    
c00184aa:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c00184b0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00184b3:	85 c0                	test   eax,eax
c00184b5:	74 5a                	je     c0018511 <unblockTask(ThreadControlBlock*)+0x70>
c00184b7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00184ba:	48                   	dec    eax
c00184bb:	74 31                	je     c00184ee <unblockTask(ThreadControlBlock*)+0x4d>
c00184bd:	83 ec 0c             	sub    esp,0xc
c00184c0:	68 84 77 02 c0       	push   0xc0027784
c00184c5:	e8 26 8f 00 00       	call   c00213f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00184ca:	83 c4 10             	add    esp,0x10
c00184cd:	85 c0                	test   eax,eax
c00184cf:	75 17                	jne    c00184e8 <unblockTask(ThreadControlBlock*)+0x47>
c00184d1:	eb 50                	jmp    c0018523 <unblockTask(ThreadControlBlock*)+0x82>
c00184d3:	83 ec 08             	sub    esp,0x8
c00184d6:	50                   	push   eax
c00184d7:	68 84 77 02 c0       	push   0xc0027784
c00184dc:	e8 97 92 00 00       	call   c0021778 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00184e1:	83 c4 10             	add    esp,0x10
c00184e4:	85 c0                	test   eax,eax
c00184e6:	74 3b                	je     c0018523 <unblockTask(ThreadControlBlock*)+0x82>
c00184e8:	39 c3                	cmp    ebx,eax
c00184ea:	75 e7                	jne    c00184d3 <unblockTask(ThreadControlBlock*)+0x32>
c00184ec:	eb 10                	jmp    c00184fe <unblockTask(ThreadControlBlock*)+0x5d>
c00184ee:	83 ec 0c             	sub    esp,0xc
c00184f1:	68 aa 46 02 c0       	push   0xc00246aa
c00184f6:	e8 c3 45 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c00184fb:	83 c4 10             	add    esp,0x10
c00184fe:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0018503:	48                   	dec    eax
c0018504:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0018509:	75 01                	jne    c001850c <unblockTask(ThreadControlBlock*)+0x6b>
c001850b:	fb                   	sti    
c001850c:	83 c4 08             	add    esp,0x8
c001850f:	5b                   	pop    ebx
c0018510:	c3                   	ret    
c0018511:	83 ec 0c             	sub    esp,0xc
c0018514:	68 93 46 02 c0       	push   0xc0024693
c0018519:	e8 a0 45 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001851e:	83 c4 10             	add    esp,0x10
c0018521:	eb db                	jmp    c00184fe <unblockTask(ThreadControlBlock*)+0x5d>
c0018523:	83 ec 08             	sub    esp,0x8
c0018526:	53                   	push   ebx
c0018527:	68 84 77 02 c0       	push   0xc0027784
c001852c:	e8 75 8f 00 00       	call   c00214a6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018531:	83 c4 10             	add    esp,0x10
c0018534:	eb c8                	jmp    c00184fe <unblockTask(ThreadControlBlock*)+0x5d>

c0018536 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018536:	55                   	push   ebp
c0018537:	57                   	push   edi
c0018538:	56                   	push   esi
c0018539:	53                   	push   ebx
c001853a:	83 ec 1c             	sub    esp,0x1c
c001853d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018541:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018544:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001854a:	85 ff                	test   edi,edi
c001854c:	7e 20                	jle    c001856e <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001854e:	31 f6                	xor    esi,esi
c0018550:	83 ec 0c             	sub    esp,0xc
c0018553:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001855a:	46                   	inc    esi
c001855b:	e8 0d 15 ff ff       	call   c0009a6d <free>
c0018560:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018563:	83 c4 10             	add    esp,0x10
c0018566:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001856c:	7f e2                	jg     c0018550 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001856e:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018578:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001857d:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0018580:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018583:	d3 c0                	rol    eax,cl
c0018585:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001858c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001858f:	89 f7                	mov    edi,esi
c0018591:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0018599:	0f 85 64 01 00 00    	jne    c0018703 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001859f:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c00185a5:	85 ed                	test   ebp,ebp
c00185a7:	74 1b                	je     c00185c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c00185a9:	83 ec 0c             	sub    esp,0xc
c00185ac:	55                   	push   ebp
c00185ad:	e8 70 bc ff ff       	call   c0014222 <EnvVarContainer::~EnvVarContainer()>
c00185b2:	59                   	pop    ecx
c00185b3:	5e                   	pop    esi
c00185b4:	6a 0c                	push   0xc
c00185b6:	55                   	push   ebp
c00185b7:	e8 21 44 ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c00185bc:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00185bf:	83 c4 10             	add    esp,0x10
c00185c2:	89 f7                	mov    edi,esi
c00185c4:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00185ca:	85 c0                	test   eax,eax
c00185cc:	0f 84 aa 00 00 00    	je     c001867c <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c00185d2:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00185d5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00185d9:	31 c9                	xor    ecx,ecx
c00185db:	eb 10                	jmp    c00185ed <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c00185dd:	41                   	inc    ecx
c00185de:	83 f9 10             	cmp    ecx,0x10
c00185e1:	0f 84 95 00 00 00    	je     c001867c <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c00185e7:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00185ed:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c00185f4:	d3 fa                	sar    edx,cl
c00185f6:	83 e2 01             	and    edx,0x1
c00185f9:	74 e2                	je     c00185dd <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c00185fb:	8d 14 09             	lea    edx,[ecx+ecx*1]
c00185fe:	01 ca                	add    edx,ecx
c0018600:	89 d5                	mov    ebp,edx
c0018602:	c1 e5 05             	shl    ebp,0x5
c0018605:	01 ea                	add    edx,ebp
c0018607:	01 d0                	add    eax,edx
c0018609:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001860f:	83 fd 07             	cmp    ebp,0x7
c0018612:	75 c9                	jne    c00185dd <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c0018614:	05 40 02 00 00       	add    eax,0x240
c0018619:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001861c:	83 fd ff             	cmp    ebp,0xffffffff
c001861f:	0f 8c e6 00 00 00    	jl     c001870b <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c0018625:	0f 84 97 01 00 00    	je     c00187c2 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001862b:	85 ed                	test   ebp,ebp
c001862d:	0f 84 7e 01 00 00    	je     c00187b1 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c0018633:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018635:	75 a6                	jne    c00185dd <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c0018637:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001863d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018641:	01 d0                	add    eax,edx
c0018643:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018647:	83 ec 0c             	sub    esp,0xc
c001864a:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0018650:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018653:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018659:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018660:	50                   	push   eax
c0018661:	e8 3b fe ff ff       	call   c00184a1 <unblockTask(ThreadControlBlock*)>
c0018666:	83 c4 10             	add    esp,0x10
c0018669:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001866c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018670:	89 f7                	mov    edi,esi
c0018672:	41                   	inc    ecx
c0018673:	83 f9 10             	cmp    ecx,0x10
c0018676:	0f 85 6b ff ff ff    	jne    c00185e7 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001867c:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c0018682:	85 c0                	test   eax,eax
c0018684:	74 5d                	je     c00186e3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c0018686:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001868c:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c0018692:	74 4f                	je     c00186e3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c0018694:	83 ec 0c             	sub    esp,0xc
c0018697:	68 84 77 02 c0       	push   0xc0027784
c001869c:	e8 4f 8d 00 00       	call   c00213f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186a1:	c7 04 24 84 77 02 c0 	mov    DWORD PTR [esp],0xc0027784
c00186a8:	89 c7                	mov    edi,eax
c00186aa:	e8 25 8d 00 00       	call   c00213d4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00186af:	83 c4 10             	add    esp,0x10
c00186b2:	84 c0                	test   al,al
c00186b4:	0f 84 c2 00 00 00    	je     c001877c <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c00186ba:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00186bd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00186c3:	85 d2                	test   edx,edx
c00186c5:	74 0f                	je     c00186d6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00186c7:	83 ec 0c             	sub    esp,0xc
c00186ca:	8b 02                	mov    eax,DWORD PTR [edx]
c00186cc:	52                   	push   edx
c00186cd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00186d0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00186d3:	83 c4 10             	add    esp,0x10
c00186d6:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c00186e0:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00186e3:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c00186e9:	85 db                	test   ebx,ebx
c00186eb:	74 16                	je     c0018703 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c00186ed:	83 ec 0c             	sub    esp,0xc
c00186f0:	53                   	push   ebx
c00186f1:	e8 18 35 ff ff       	call   c000bc0e <VAS::~VAS()>
c00186f6:	58                   	pop    eax
c00186f7:	5a                   	pop    edx
c00186f8:	6a 14                	push   0x14
c00186fa:	53                   	push   ebx
c00186fb:	e8 dd 42 ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c0018700:	83 c4 10             	add    esp,0x10
c0018703:	83 c4 1c             	add    esp,0x1c
c0018706:	5b                   	pop    ebx
c0018707:	5e                   	pop    esi
c0018708:	5f                   	pop    edi
c0018709:	5d                   	pop    ebp
c001870a:	c3                   	ret    
c001870b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001870f:	83 ec 0c             	sub    esp,0xc
c0018712:	68 5c 47 02 c0       	push   0xc002475c
c0018717:	e8 61 bd ff ff       	call   c001447d <Krnl::panic(char const*)>
c001871c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001871f:	83 c4 10             	add    esp,0x10
c0018722:	89 f7                	mov    edi,esi
c0018724:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018728:	e9 b0 fe ff ff       	jmp    c00185dd <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001872d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018733:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c0018739:	75 1c                	jne    c0018757 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001873b:	83 ec 0c             	sub    esp,0xc
c001873e:	68 c4 47 02 c0       	push   0xc00247c4
c0018743:	e8 76 43 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0018748:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001874f:	e8 91 fa ff ff       	call   c00181e5 <blockTask(TaskState)>
c0018754:	83 c4 10             	add    esp,0x10
c0018757:	83 ec 08             	sub    esp,0x8
c001875a:	56                   	push   esi
c001875b:	68 84 77 02 c0       	push   0xc0027784
c0018760:	e8 41 8d 00 00       	call   c00214a6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018765:	c7 04 24 84 77 02 c0 	mov    DWORD PTR [esp],0xc0027784
c001876c:	e8 7f 8c 00 00       	call   c00213f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018771:	83 c4 10             	add    esp,0x10
c0018774:	39 f8                	cmp    eax,edi
c0018776:	0f 84 3e ff ff ff    	je     c00186ba <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001877c:	83 ec 0c             	sub    esp,0xc
c001877f:	68 84 77 02 c0       	push   0xc0027784
c0018784:	e8 67 8c 00 00       	call   c00213f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018789:	c7 04 24 84 77 02 c0 	mov    DWORD PTR [esp],0xc0027784
c0018790:	89 c6                	mov    esi,eax
c0018792:	e8 61 8c 00 00       	call   c00213f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018797:	83 c4 10             	add    esp,0x10
c001879a:	39 f3                	cmp    ebx,esi
c001879c:	74 b9                	je     c0018757 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001879e:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c00187a1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00187a4:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c00187aa:	75 ab                	jne    c0018757 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c00187ac:	e9 7c ff ff ff       	jmp    c001872d <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c00187b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00187b5:	83 ec 0c             	sub    esp,0xc
c00187b8:	68 90 47 02 c0       	push   0xc0024790
c00187bd:	e9 55 ff ff ff       	jmp    c0018717 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c00187c2:	8b 36                	mov    esi,DWORD PTR [esi]
c00187c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00187c8:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00187cb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00187ce:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c00187d4:	01 d7                	add    edi,edx
c00187d6:	89 f8                	mov    eax,edi
c00187d8:	e9 66 fe ff ff       	jmp    c0018643 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c00187dd <cleanerTaskFunction(void*)>:
c00187dd:	53                   	push   ebx
c00187de:	83 ec 08             	sub    esp,0x8
c00187e1:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c00187e6:	48                   	dec    eax
c00187e7:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c00187ec:	75 01                	jne    c00187ef <cleanerTaskFunction(void*)+0x12>
c00187ee:	fb                   	sti    
c00187ef:	fa                   	cli    
c00187f0:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c00187f5:	80 3d 4c 77 02 c0 00 	cmp    BYTE PTR ds:0xc002774c,0x0
c00187fc:	8d 50 01             	lea    edx,[eax+0x1]
c00187ff:	89 15 68 77 02 c0    	mov    DWORD PTR ds:0xc0027768,edx
c0018805:	0f 84 a1 00 00 00    	je     c00188ac <cleanerTaskFunction(void*)+0xcf>
c001880b:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0018810:	85 c0                	test   eax,eax
c0018812:	75 01                	jne    c0018815 <cleanerTaskFunction(void*)+0x38>
c0018814:	fb                   	sti    
c0018815:	c6 05 4c 77 02 c0 00 	mov    BYTE PTR ds:0xc002774c,0x0
c001881c:	fa                   	cli    
c001881d:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c0018823:	ff 05 64 77 02 c0    	inc    DWORD PTR ds:0xc0027764
c0018829:	fa                   	cli    
c001882a:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c0018830:	eb 26                	jmp    c0018858 <cleanerTaskFunction(void*)+0x7b>
c0018832:	83 ec 0c             	sub    esp,0xc
c0018835:	68 6c 77 02 c0       	push   0xc002776c
c001883a:	e8 b1 8b 00 00       	call   c00213f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001883f:	c7 04 24 6c 77 02 c0 	mov    DWORD PTR [esp],0xc002776c
c0018846:	89 c3                	mov    ebx,eax
c0018848:	e8 ab 8b 00 00       	call   c00213f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001884d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018850:	e8 e1 fc ff ff       	call   c0018536 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018855:	83 c4 10             	add    esp,0x10
c0018858:	83 ec 0c             	sub    esp,0xc
c001885b:	68 6c 77 02 c0       	push   0xc002776c
c0018860:	e8 6f 8b 00 00       	call   c00213d4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018865:	83 c4 10             	add    esp,0x10
c0018868:	84 c0                	test   al,al
c001886a:	74 c6                	je     c0018832 <cleanerTaskFunction(void*)+0x55>
c001886c:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0018871:	48                   	dec    eax
c0018872:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0018877:	75 01                	jne    c001887a <cleanerTaskFunction(void*)+0x9d>
c0018879:	fb                   	sti    
c001887a:	a1 64 77 02 c0       	mov    eax,ds:0xc0027764
c001887f:	48                   	dec    eax
c0018880:	a3 64 77 02 c0       	mov    ds:0xc0027764,eax
c0018885:	0f 85 56 ff ff ff    	jne    c00187e1 <cleanerTaskFunction(void*)+0x4>
c001888b:	a1 60 77 02 c0       	mov    eax,ds:0xc0027760
c0018890:	85 c0                	test   eax,eax
c0018892:	0f 84 49 ff ff ff    	je     c00187e1 <cleanerTaskFunction(void*)+0x4>
c0018898:	c7 05 60 77 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027760,0x0
c00188a2:	e8 68 f7 ff ff       	call   c001800f <schedule()>
c00188a7:	e9 35 ff ff ff       	jmp    c00187e1 <cleanerTaskFunction(void*)+0x4>
c00188ac:	83 ec 0c             	sub    esp,0xc
c00188af:	6a 02                	push   0x2
c00188b1:	e8 09 f9 ff ff       	call   c00181bf <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00188b6:	83 c4 10             	add    esp,0x10
c00188b9:	e9 57 ff ff ff       	jmp    c0018815 <cleanerTaskFunction(void*)+0x38>

c00188be <terminateTask(int)>:
c00188be:	83 ec 14             	sub    esp,0x14
c00188c1:	fa                   	cli    
c00188c2:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c00188c8:	ff 05 64 77 02 c0    	inc    DWORD PTR ds:0xc0027764
c00188ce:	fa                   	cli    
c00188cf:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c00188d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00188d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188de:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c00188e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188e6:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00188e9:	50                   	push   eax
c00188ea:	68 6c 77 02 c0       	push   0xc002776c
c00188ef:	e8 b2 8b 00 00       	call   c00214a6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00188f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188f9:	83 c4 10             	add    esp,0x10
c00188fc:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018903:	a1 48 77 02 c0       	mov    eax,ds:0xc0027748
c0018908:	85 c0                	test   eax,eax
c001890a:	74 53                	je     c001895f <terminateTask(int)+0xa1>
c001890c:	83 ec 0c             	sub    esp,0xc
c001890f:	c6 05 4c 77 02 c0 01 	mov    BYTE PTR ds:0xc002774c,0x1
c0018916:	50                   	push   eax
c0018917:	e8 85 fb ff ff       	call   c00184a1 <unblockTask(ThreadControlBlock*)>
c001891c:	83 c4 10             	add    esp,0x10
c001891f:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0018924:	48                   	dec    eax
c0018925:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c001892a:	75 01                	jne    c001892d <terminateTask(int)+0x6f>
c001892c:	fb                   	sti    
c001892d:	a1 64 77 02 c0       	mov    eax,ds:0xc0027764
c0018932:	48                   	dec    eax
c0018933:	a3 64 77 02 c0       	mov    ds:0xc0027764,eax
c0018938:	75 09                	jne    c0018943 <terminateTask(int)+0x85>
c001893a:	83 3d 60 77 02 c0 00 	cmp    DWORD PTR ds:0xc0027760,0x0
c0018941:	75 2e                	jne    c0018971 <terminateTask(int)+0xb3>
c0018943:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0018948:	48                   	dec    eax
c0018949:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c001894e:	75 01                	jne    c0018951 <terminateTask(int)+0x93>
c0018950:	fb                   	sti    
c0018951:	fa                   	cli    
c0018952:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c0018958:	e8 b2 f6 ff ff       	call   c001800f <schedule()>
c001895d:	eb e4                	jmp    c0018943 <terminateTask(int)+0x85>
c001895f:	83 ec 0c             	sub    esp,0xc
c0018962:	68 c1 46 02 c0       	push   0xc00246c1
c0018967:	e8 52 41 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001896c:	83 c4 10             	add    esp,0x10
c001896f:	eb ae                	jmp    c001891f <terminateTask(int)+0x61>
c0018971:	c7 05 60 77 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027760,0x0
c001897b:	eb db                	jmp    c0018958 <terminateTask(int)+0x9a>

c001897d <Thr::terminateFromIRQ(int)>:
c001897d:	83 ec 18             	sub    esp,0x18
c0018980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018984:	e8 35 ff ff ff       	call   c00188be <terminateTask(int)>
c0018989:	90                   	nop

c001898a <Semaphore::release()>:
c001898a:	83 ec 0c             	sub    esp,0xc
c001898d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018991:	fa                   	cli    
c0018992:	a1 64 77 02 c0       	mov    eax,ds:0xc0027764
c0018997:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c001899d:	8d 48 01             	lea    ecx,[eax+0x1]
c00189a0:	89 0d 64 77 02 c0    	mov    DWORD PTR ds:0xc0027764,ecx
c00189a6:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00189a9:	85 c9                	test   ecx,ecx
c00189ab:	74 3c                	je     c00189e9 <Semaphore::release()+0x5f>
c00189ad:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00189b0:	83 ec 0c             	sub    esp,0xc
c00189b3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00189b6:	51                   	push   ecx
c00189b7:	e8 e5 fa ff ff       	call   c00184a1 <unblockTask(ThreadControlBlock*)>
c00189bc:	a1 64 77 02 c0       	mov    eax,ds:0xc0027764
c00189c1:	83 c4 10             	add    esp,0x10
c00189c4:	48                   	dec    eax
c00189c5:	a3 64 77 02 c0       	mov    ds:0xc0027764,eax
c00189ca:	85 c0                	test   eax,eax
c00189cc:	75 09                	jne    c00189d7 <Semaphore::release()+0x4d>
c00189ce:	a1 60 77 02 c0       	mov    eax,ds:0xc0027760
c00189d3:	85 c0                	test   eax,eax
c00189d5:	75 17                	jne    c00189ee <Semaphore::release()+0x64>
c00189d7:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c00189dc:	48                   	dec    eax
c00189dd:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c00189e2:	75 01                	jne    c00189e5 <Semaphore::release()+0x5b>
c00189e4:	fb                   	sti    
c00189e5:	83 c4 0c             	add    esp,0xc
c00189e8:	c3                   	ret    
c00189e9:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00189ec:	eb d7                	jmp    c00189c5 <Semaphore::release()+0x3b>
c00189ee:	c7 05 60 77 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027760,0x0
c00189f8:	e8 12 f6 ff ff       	call   c001800f <schedule()>
c00189fd:	eb d8                	jmp    c00189d7 <Semaphore::release()+0x4d>

c00189ff <__static_initialization_and_destruction_0(int, int)>:
c00189ff:	83 ec 0c             	sub    esp,0xc
c0018a02:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018a07:	0f 85 88 00 00 00    	jne    c0018a95 <__static_initialization_and_destruction_0(int, int)+0x96>
c0018a0d:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018a15:	75 7e                	jne    c0018a95 <__static_initialization_and_destruction_0(int, int)+0x96>
c0018a17:	83 ec 0c             	sub    esp,0xc
c0018a1a:	68 84 77 02 c0       	push   0xc0027784
c0018a1f:	e8 12 8d 00 00       	call   c0021736 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018a24:	83 c4 10             	add    esp,0x10
c0018a27:	83 ec 04             	sub    esp,0x4
c0018a2a:	68 cc 54 02 c0       	push   0xc00254cc
c0018a2f:	68 84 77 02 c0       	push   0xc0027784
c0018a34:	68 ea 16 02 c0       	push   0xc00216ea
c0018a39:	e8 19 3f ff ff       	call   c000c957 <__cxa_atexit>
c0018a3e:	83 c4 10             	add    esp,0x10
c0018a41:	83 ec 0c             	sub    esp,0xc
c0018a44:	68 78 77 02 c0       	push   0xc0027778
c0018a49:	e8 e8 8c 00 00       	call   c0021736 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018a4e:	83 c4 10             	add    esp,0x10
c0018a51:	83 ec 04             	sub    esp,0x4
c0018a54:	68 cc 54 02 c0       	push   0xc00254cc
c0018a59:	68 78 77 02 c0       	push   0xc0027778
c0018a5e:	68 ea 16 02 c0       	push   0xc00216ea
c0018a63:	e8 ef 3e ff ff       	call   c000c957 <__cxa_atexit>
c0018a68:	83 c4 10             	add    esp,0x10
c0018a6b:	83 ec 0c             	sub    esp,0xc
c0018a6e:	68 6c 77 02 c0       	push   0xc002776c
c0018a73:	e8 be 8c 00 00       	call   c0021736 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018a78:	83 c4 10             	add    esp,0x10
c0018a7b:	83 ec 04             	sub    esp,0x4
c0018a7e:	68 cc 54 02 c0       	push   0xc00254cc
c0018a83:	68 6c 77 02 c0       	push   0xc002776c
c0018a88:	68 ea 16 02 c0       	push   0xc00216ea
c0018a8d:	e8 c5 3e ff ff       	call   c000c957 <__cxa_atexit>
c0018a92:	83 c4 10             	add    esp,0x10
c0018a95:	90                   	nop
c0018a96:	83 c4 0c             	add    esp,0xc
c0018a99:	c3                   	ret    

c0018a9a <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0018a9a:	83 ec 0c             	sub    esp,0xc
c0018a9d:	83 ec 08             	sub    esp,0x8
c0018aa0:	68 ff ff 00 00       	push   0xffff
c0018aa5:	6a 01                	push   0x1
c0018aa7:	e8 53 ff ff ff       	call   c00189ff <__static_initialization_and_destruction_0(int, int)>
c0018aac:	83 c4 10             	add    esp,0x10
c0018aaf:	83 c4 0c             	add    esp,0xc
c0018ab2:	c3                   	ret    

c0018ab3 <Vm::inbv(unsigned short)>:
c0018ab3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018ab7:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018abc:	75 06                	jne    c0018ac4 <Vm::inbv(unsigned short)+0x11>
c0018abe:	a0 cc 77 02 c0       	mov    al,ds:0xc00277cc
c0018ac3:	c3                   	ret    
c0018ac4:	ec                   	in     al,dx
c0018ac5:	c3                   	ret    

c0018ac6 <Vm::outbv(unsigned short, unsigned char)>:
c0018ac6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018aca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ace:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018ad3:	75 25                	jne    c0018afa <Vm::outbv(unsigned short, unsigned char)+0x34>
c0018ad5:	8b 0d cc 77 02 c0    	mov    ecx,DWORD PTR ds:0xc00277cc
c0018adb:	8d 51 01             	lea    edx,[ecx+0x1]
c0018ade:	88 81 e0 77 02 c0    	mov    BYTE PTR [ecx-0x3ffd8820],al
c0018ae4:	89 15 cc 77 02 c0    	mov    DWORD PTR ds:0xc00277cc,edx
c0018aea:	83 fa 20             	cmp    edx,0x20
c0018aed:	75 0c                	jne    c0018afb <Vm::outbv(unsigned short, unsigned char)+0x35>
c0018aef:	c7 05 cc 77 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00277cc,0x1f
c0018af9:	c3                   	ret    
c0018afa:	ee                   	out    dx,al
c0018afb:	c3                   	ret    

c0018afc <Vm::realToLinear(unsigned short, unsigned short)>:
c0018afc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018b01:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018b06:	c1 e0 04             	shl    eax,0x4
c0018b09:	01 d0                	add    eax,edx
c0018b0b:	c3                   	ret    

c0018b0c <Vm::getSegment(unsigned int)>:
c0018b0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b10:	c1 e8 10             	shr    eax,0x10
c0018b13:	c3                   	ret    

c0018b14 <Vm::getOffset(unsigned int)>:
c0018b14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b18:	c3                   	ret    

c0018b19 <Vm::mainloop2()>:
c0018b19:	83 ec 18             	sub    esp,0x18
c0018b1c:	fa                   	cli    
c0018b1d:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c0018b23:	6a 02                	push   0x2
c0018b25:	c6 05 c5 77 02 c0 01 	mov    BYTE PTR ds:0xc00277c5,0x1
c0018b2c:	e8 8e f6 ff ff       	call   c00181bf <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018b31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018b36:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0018b3a:	52                   	push   edx
c0018b3b:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0018b3f:	52                   	push   edx
c0018b40:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018b44:	52                   	push   edx
c0018b45:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0018b49:	50                   	push   eax
c0018b4a:	e8 ab 77 fe ff       	call   c00002fa <goToVM86>
c0018b4f:	83 c4 2c             	add    esp,0x2c
c0018b52:	c3                   	ret    

c0018b53 <Vm::mainVm8086Loop(void*)>:
c0018b53:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0018b58:	48                   	dec    eax
c0018b59:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0018b5e:	75 01                	jne    c0018b61 <Vm::mainVm8086Loop(void*)+0xe>
c0018b60:	fb                   	sti    
c0018b61:	eb b6                	jmp    c0018b19 <Vm::mainloop2()>

c0018b63 <Vm::mainloop3(unsigned long)>:
c0018b63:	83 ec 18             	sub    esp,0x18
c0018b66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b6a:	fa                   	cli    
c0018b6b:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c0018b71:	6a 02                	push   0x2
c0018b73:	c6 05 c4 77 02 c0 01 	mov    BYTE PTR ds:0xc00277c4,0x1
c0018b7a:	a3 c0 77 02 c0       	mov    ds:0xc00277c0,eax
c0018b7f:	e8 3b f6 ff ff       	call   c00181bf <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018b84:	83 c4 1c             	add    esp,0x1c
c0018b87:	eb 90                	jmp    c0018b19 <Vm::mainloop2()>

c0018b89 <Vm::initialise8086()>:
c0018b89:	83 ec 0c             	sub    esp,0xc
c0018b8c:	68 80 00 00 00       	push   0x80
c0018b91:	6a 00                	push   0x0
c0018b93:	68 53 8b 01 c0       	push   0xc0018b53
c0018b98:	ff 35 90 77 02 c0    	push   DWORD PTR ds:0xc0027790
c0018b9e:	e8 47 f2 ff ff       	call   c0017dea <Process::createThread(void (*)(void*), void*, int)>
c0018ba3:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018baa:	a3 c8 77 02 c0       	mov    ds:0xc00277c8,eax
c0018baf:	68 00 01 00 00       	push   0x100
c0018bb4:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c0018bb9:	6a 00                	push   0x0
c0018bbb:	6a 00                	push   0x0
c0018bbd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0018bc3:	e8 b8 34 ff ff       	call   c000c080 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018bc8:	83 c4 2c             	add    esp,0x2c
c0018bcb:	c3                   	ret    

c0018bcc <Vm::finish8086()>:
c0018bcc:	53                   	push   ebx
c0018bcd:	83 ec 08             	sub    esp,0x8
c0018bd0:	fa                   	cli    
c0018bd1:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c0018bd7:	80 3d c4 77 02 c0 00 	cmp    BYTE PTR ds:0xc00277c4,0x0
c0018bde:	75 15                	jne    c0018bf5 <Vm::finish8086()+0x29>
c0018be0:	e8 2a f4 ff ff       	call   c001800f <schedule()>
c0018be5:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0018bea:	48                   	dec    eax
c0018beb:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0018bf0:	75 de                	jne    c0018bd0 <Vm::finish8086()+0x4>
c0018bf2:	fb                   	sti    
c0018bf3:	eb db                	jmp    c0018bd0 <Vm::finish8086()+0x4>
c0018bf5:	83 ec 0c             	sub    esp,0xc
c0018bf8:	8b 1d c0 77 02 c0    	mov    ebx,DWORD PTR ds:0xc00277c0
c0018bfe:	ff 35 c8 77 02 c0    	push   DWORD PTR ds:0xc00277c8
c0018c04:	c6 05 c4 77 02 c0 00 	mov    BYTE PTR ds:0xc00277c4,0x0
c0018c0b:	e8 91 f8 ff ff       	call   c00184a1 <unblockTask(ThreadControlBlock*)>
c0018c10:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0018c15:	83 c4 10             	add    esp,0x10
c0018c18:	8d 50 ff             	lea    edx,[eax-0x1]
c0018c1b:	89 15 68 77 02 c0    	mov    DWORD PTR ds:0xc0027768,edx
c0018c21:	85 d2                	test   edx,edx
c0018c23:	75 01                	jne    c0018c26 <Vm::finish8086()+0x5a>
c0018c25:	fb                   	sti    
c0018c26:	89 d8                	mov    eax,ebx
c0018c28:	83 c4 08             	add    esp,0x8
c0018c2b:	5b                   	pop    ebx
c0018c2c:	c3                   	ret    

c0018c2d <Vm::getOutput8086(unsigned char*)>:
c0018c2d:	57                   	push   edi
c0018c2e:	8b 0d cc 77 02 c0    	mov    ecx,DWORD PTR ds:0xc00277cc
c0018c34:	56                   	push   esi
c0018c35:	be e0 77 02 c0       	mov    esi,0xc00277e0
c0018c3a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018c3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018c40:	a1 cc 77 02 c0       	mov    eax,ds:0xc00277cc
c0018c45:	5e                   	pop    esi
c0018c46:	c7 05 cc 77 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00277cc,0x0
c0018c50:	5f                   	pop    edi
c0018c51:	c3                   	ret    

c0018c52 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018c52:	55                   	push   ebp
c0018c53:	57                   	push   edi
c0018c54:	56                   	push   esi
c0018c55:	53                   	push   ebx
c0018c56:	83 ec 2c             	sub    esp,0x2c
c0018c59:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0018c5d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018c61:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0018c65:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0018c69:	fa                   	cli    
c0018c6a:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c0018c70:	0f b6 35 c5 77 02 c0 	movzx  esi,BYTE PTR ds:0xc00277c5
c0018c77:	89 f0                	mov    eax,esi
c0018c79:	84 c0                	test   al,al
c0018c7b:	75 1d                	jne    c0018c9a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0018c7d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c81:	e8 89 f3 ff ff       	call   c001800f <schedule()>
c0018c86:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0018c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c8f:	48                   	dec    eax
c0018c90:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0018c95:	75 d2                	jne    c0018c69 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018c97:	fb                   	sti    
c0018c98:	eb cf                	jmp    c0018c69 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018c9a:	a1 c8 77 02 c0       	mov    eax,ds:0xc00277c8
c0018c9f:	c7 05 cc 77 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00277cc,0x0
c0018ca9:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0018cad:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c0018cb1:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0018cb5:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c0018cb9:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0018cbd:	50                   	push   eax
c0018cbe:	6a 20                	push   0x20
c0018cc0:	6a 00                	push   0x0
c0018cc2:	68 e0 77 02 c0       	push   0xc00277e0
c0018cc7:	e8 84 7a fe ff       	call   c0000750 <memset>
c0018ccc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018cd3:	e8 85 0d ff ff       	call   c0009a5d <malloc>
c0018cd8:	83 c4 0c             	add    esp,0xc
c0018cdb:	89 c3                	mov    ebx,eax
c0018cdd:	ff 35 90 77 02 c0    	push   DWORD PTR ds:0xc0027790
c0018ce3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018ce7:	50                   	push   eax
c0018ce8:	e8 3b 43 ff ff       	call   c000d028 <File::File(char const*, Process*)>
c0018ced:	83 c4 10             	add    esp,0x10
c0018cf0:	85 db                	test   ebx,ebx
c0018cf2:	75 0a                	jne    c0018cfe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0018cf4:	83 ec 0c             	sub    esp,0xc
c0018cf7:	68 ec 47 02 c0       	push   0xc00247ec
c0018cfc:	eb 3e                	jmp    c0018d3c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018cfe:	50                   	push   eax
c0018cff:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018d03:	50                   	push   eax
c0018d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018d08:	50                   	push   eax
c0018d09:	53                   	push   ebx
c0018d0a:	e8 29 46 ff ff       	call   c000d338 <File::stat(unsigned long long*, bool*)>
c0018d0f:	83 c4 10             	add    esp,0x10
c0018d12:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0018d17:	74 0a                	je     c0018d23 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0018d19:	83 ec 0c             	sub    esp,0xc
c0018d1c:	68 00 48 02 c0       	push   0xc0024800
c0018d21:	eb 19                	jmp    c0018d3c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018d23:	51                   	push   ecx
c0018d24:	51                   	push   ecx
c0018d25:	6a 01                	push   0x1
c0018d27:	53                   	push   ebx
c0018d28:	e8 5f 43 ff ff       	call   c000d08c <File::open(FileOpenMode)>
c0018d2d:	83 c4 10             	add    esp,0x10
c0018d30:	85 c0                	test   eax,eax
c0018d32:	74 24                	je     c0018d58 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0018d34:	83 ec 0c             	sub    esp,0xc
c0018d37:	68 19 48 02 c0       	push   0xc0024819
c0018d3c:	e8 3c b7 ff ff       	call   c001447d <Krnl::panic(char const*)>
c0018d41:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0018d46:	83 c4 10             	add    esp,0x10
c0018d49:	48                   	dec    eax
c0018d4a:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0018d4f:	85 c0                	test   eax,eax
c0018d51:	75 01                	jne    c0018d54 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0018d53:	fb                   	sti    
c0018d54:	31 f6                	xor    esi,esi
c0018d56:	eb 58                	jmp    c0018db0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0018d58:	0f b7 ed             	movzx  ebp,bp
c0018d5b:	50                   	push   eax
c0018d5c:	0f b7 ff             	movzx  edi,di
c0018d5f:	50                   	push   eax
c0018d60:	55                   	push   ebp
c0018d61:	57                   	push   edi
c0018d62:	e8 95 fd ff ff       	call   c0018afc <Vm::realToLinear(unsigned short, unsigned short)>
c0018d67:	5a                   	pop    edx
c0018d68:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018d6a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018d6e:	51                   	push   ecx
c0018d6f:	50                   	push   eax
c0018d70:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d74:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d78:	53                   	push   ebx
c0018d79:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018d7c:	83 c4 14             	add    esp,0x14
c0018d7f:	53                   	push   ebx
c0018d80:	e8 65 43 ff ff       	call   c000d0ea <File::close()>
c0018d85:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c0018d8a:	83 c4 10             	add    esp,0x10
c0018d8d:	48                   	dec    eax
c0018d8e:	c6 05 c5 77 02 c0 00 	mov    BYTE PTR ds:0xc00277c5,0x0
c0018d95:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c0018d9a:	85 c0                	test   eax,eax
c0018d9c:	75 01                	jne    c0018d9f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0018d9e:	fb                   	sti    
c0018d9f:	83 ec 0c             	sub    esp,0xc
c0018da2:	ff 35 c8 77 02 c0    	push   DWORD PTR ds:0xc00277c8
c0018da8:	e8 f4 f6 ff ff       	call   c00184a1 <unblockTask(ThreadControlBlock*)>
c0018dad:	83 c4 10             	add    esp,0x10
c0018db0:	83 c4 2c             	add    esp,0x2c
c0018db3:	89 f0                	mov    eax,esi
c0018db5:	5b                   	pop    ebx
c0018db6:	5e                   	pop    esi
c0018db7:	5f                   	pop    edi
c0018db8:	5d                   	pop    ebp
c0018db9:	c3                   	ret    

c0018dba <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018dba:	57                   	push   edi
c0018dbb:	56                   	push   esi
c0018dbc:	53                   	push   ebx
c0018dbd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018dc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018dc5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018dc9:	83 e8 06             	sub    eax,0x6
c0018dcc:	0f b7 c0             	movzx  eax,ax
c0018dcf:	50                   	push   eax
c0018dd0:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018dd5:	50                   	push   eax
c0018dd6:	e8 21 fd ff ff       	call   c0018afc <Vm::realToLinear(unsigned short, unsigned short)>
c0018ddb:	5a                   	pop    edx
c0018ddc:	5e                   	pop    esi
c0018ddd:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018de0:	8d 56 fa             	lea    edx,[esi-0x6]
c0018de3:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018de9:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018dec:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018def:	83 c2 02             	add    edx,0x2
c0018df2:	66 89 10             	mov    WORD PTR [eax],dx
c0018df5:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018df8:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018dfc:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018dff:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018e03:	89 d6                	mov    esi,edx
c0018e05:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018e0b:	66 81 e6 ff fd       	and    si,0xfdff
c0018e10:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0018e14:	74 07                	je     c0018e1d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018e16:	89 d6                	mov    esi,edx
c0018e18:	66 81 ce 00 02       	or     si,0x200
c0018e1d:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018e21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e26:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018e2a:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018e32:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018e35:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018e3d:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018e40:	5b                   	pop    ebx
c0018e41:	5e                   	pop    esi
c0018e42:	5f                   	pop    edi
c0018e43:	c3                   	ret    

c0018e44 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018e44:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e49:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e4e:	c1 e0 04             	shl    eax,0x4
c0018e51:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018e54:	c3                   	ret    

c0018e55 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018e55:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e5a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e5f:	c1 e0 04             	shl    eax,0x4
c0018e62:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018e66:	c3                   	ret    

c0018e67 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018e67:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e6c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e71:	c1 e0 04             	shl    eax,0x4
c0018e74:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018e77:	c3                   	ret    

c0018e78 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018e78:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e7d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e82:	c1 e0 04             	shl    eax,0x4
c0018e85:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e89:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018e8c:	c3                   	ret    

c0018e8d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018e8d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e92:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e97:	c1 e0 04             	shl    eax,0x4
c0018e9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e9e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018ea2:	c3                   	ret    

c0018ea3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018ea3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018ea8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018ead:	c1 e0 04             	shl    eax,0x4
c0018eb0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018eb4:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018eb7:	c3                   	ret    

c0018eb8 <Vm::faultHandler(regs*)>:
c0018eb8:	55                   	push   ebp
c0018eb9:	57                   	push   edi
c0018eba:	56                   	push   esi
c0018ebb:	53                   	push   ebx
c0018ebc:	83 ec 1c             	sub    esp,0x1c
c0018ebf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018ec3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018ec6:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018eca:	0f b7 f8             	movzx  edi,ax
c0018ecd:	52                   	push   edx
c0018ece:	0f b7 c0             	movzx  eax,ax
c0018ed1:	50                   	push   eax
c0018ed2:	e8 25 fc ff ff       	call   c0018afc <Vm::realToLinear(unsigned short, unsigned short)>
c0018ed7:	5a                   	pop    edx
c0018ed8:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018edb:	59                   	pop    ecx
c0018edc:	89 c1                	mov    ecx,eax
c0018ede:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018ee1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018ee5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018eea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018eee:	0f b7 c5             	movzx  eax,bp
c0018ef1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ef5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018ef9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018efd:	e8 fa fb ff ff       	call   c0018afc <Vm::realToLinear(unsigned short, unsigned short)>
c0018f02:	5e                   	pop    esi
c0018f03:	be 06 00 00 00       	mov    esi,0x6
c0018f08:	5a                   	pop    edx
c0018f09:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018f0e:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018f13:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0018f16:	80 fa 9d             	cmp    dl,0x9d
c0018f19:	0f 84 2c 02 00 00    	je     c001914b <Vm::faultHandler(regs*)+0x293>
c0018f1f:	0f 87 91 00 00 00    	ja     c0018fb6 <Vm::faultHandler(regs*)+0xfe>
c0018f25:	80 fa 66             	cmp    dl,0x66
c0018f28:	0f 84 98 01 00 00    	je     c00190c6 <Vm::faultHandler(regs*)+0x20e>
c0018f2e:	77 47                	ja     c0018f77 <Vm::faultHandler(regs*)+0xbf>
c0018f30:	80 fa 36             	cmp    dl,0x36
c0018f33:	0f 84 80 01 00 00    	je     c00190b9 <Vm::faultHandler(regs*)+0x201>
c0018f39:	77 1a                	ja     c0018f55 <Vm::faultHandler(regs*)+0x9d>
c0018f3b:	80 fa 26             	cmp    dl,0x26
c0018f3e:	0f 84 4e 01 00 00    	je     c0019092 <Vm::faultHandler(regs*)+0x1da>
c0018f44:	80 fa 2e             	cmp    dl,0x2e
c0018f47:	0f 85 e2 05 00 00    	jne    c001952f <Vm::faultHandler(regs*)+0x677>
c0018f4d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018f50:	31 f6                	xor    esi,esi
c0018f52:	41                   	inc    ecx
c0018f53:	eb be                	jmp    c0018f13 <Vm::faultHandler(regs*)+0x5b>
c0018f55:	80 fa 64             	cmp    dl,0x64
c0018f58:	0f 84 41 01 00 00    	je     c001909f <Vm::faultHandler(regs*)+0x1e7>
c0018f5e:	0f 87 48 01 00 00    	ja     c00190ac <Vm::faultHandler(regs*)+0x1f4>
c0018f64:	80 fa 3e             	cmp    dl,0x3e
c0018f67:	0f 85 c2 05 00 00    	jne    c001952f <Vm::faultHandler(regs*)+0x677>
c0018f6d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018f70:	be 01 00 00 00       	mov    esi,0x1
c0018f75:	eb db                	jmp    c0018f52 <Vm::faultHandler(regs*)+0x9a>
c0018f77:	80 fa 6d             	cmp    dl,0x6d
c0018f7a:	0f 84 ec 02 00 00    	je     c001926c <Vm::faultHandler(regs*)+0x3b4>
c0018f80:	77 17                	ja     c0018f99 <Vm::faultHandler(regs*)+0xe1>
c0018f82:	80 fa 67             	cmp    dl,0x67
c0018f85:	0f 84 48 01 00 00    	je     c00190d3 <Vm::faultHandler(regs*)+0x21b>
c0018f8b:	80 fa 6c             	cmp    dl,0x6c
c0018f8e:	0f 84 69 02 00 00    	je     c00191fd <Vm::faultHandler(regs*)+0x345>
c0018f94:	e9 96 05 00 00       	jmp    c001952f <Vm::faultHandler(regs*)+0x677>
c0018f99:	80 fa 6f             	cmp    dl,0x6f
c0018f9c:	0f 84 f4 03 00 00    	je     c0019396 <Vm::faultHandler(regs*)+0x4de>
c0018fa2:	0f 82 59 03 00 00    	jb     c0019301 <Vm::faultHandler(regs*)+0x449>
c0018fa8:	80 fa 9c             	cmp    dl,0x9c
c0018fab:	0f 84 2f 01 00 00    	je     c00190e0 <Vm::faultHandler(regs*)+0x228>
c0018fb1:	e9 79 05 00 00       	jmp    c001952f <Vm::faultHandler(regs*)+0x677>
c0018fb6:	80 fa ec             	cmp    dl,0xec
c0018fb9:	0f 84 14 05 00 00    	je     c00194d3 <Vm::faultHandler(regs*)+0x61b>
c0018fbf:	77 7b                	ja     c001903c <Vm::faultHandler(regs*)+0x184>
c0018fc1:	80 fa e4             	cmp    dl,0xe4
c0018fc4:	0f 84 93 04 00 00    	je     c001945d <Vm::faultHandler(regs*)+0x5a5>
c0018fca:	77 53                	ja     c001901f <Vm::faultHandler(regs*)+0x167>
c0018fcc:	80 fa cd             	cmp    dl,0xcd
c0018fcf:	0f 84 d9 01 00 00    	je     c00191ae <Vm::faultHandler(regs*)+0x2f6>
c0018fd5:	80 fa cf             	cmp    dl,0xcf
c0018fd8:	0f 85 51 05 00 00    	jne    c001952f <Vm::faultHandler(regs*)+0x677>
c0018fde:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018fe1:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018fe4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018fe8:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018feb:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018fef:	81 ca 00 02 02 00    	or     edx,0x20200
c0018ff5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018ff8:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018ffc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019002:	66 c1 e8 09          	shr    ax,0x9
c0019006:	83 e0 01             	and    eax,0x1
c0019009:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001900c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001900f:	83 c0 06             	add    eax,0x6
c0019012:	25 ff ff 00 00       	and    eax,0xffff
c0019017:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001901a:	e9 0c 05 00 00       	jmp    c001952b <Vm::faultHandler(regs*)+0x673>
c001901f:	80 fa e6             	cmp    dl,0xe6
c0019022:	0f 84 7f 04 00 00    	je     c00194a7 <Vm::faultHandler(regs*)+0x5ef>
c0019028:	0f 82 4b 04 00 00    	jb     c0019479 <Vm::faultHandler(regs*)+0x5c1>
c001902e:	80 fa e7             	cmp    dl,0xe7
c0019031:	0f 84 87 04 00 00    	je     c00194be <Vm::faultHandler(regs*)+0x606>
c0019037:	e9 f3 04 00 00       	jmp    c001952f <Vm::faultHandler(regs*)+0x677>
c001903c:	80 fa ef             	cmp    dl,0xef
c001903f:	0f 84 d1 04 00 00    	je     c0019516 <Vm::faultHandler(regs*)+0x65e>
c0019045:	77 28                	ja     c001906f <Vm::faultHandler(regs*)+0x1b7>
c0019047:	80 fa ed             	cmp    dl,0xed
c001904a:	0f 84 9f 04 00 00    	je     c00194ef <Vm::faultHandler(regs*)+0x637>
c0019050:	80 fa ee             	cmp    dl,0xee
c0019053:	0f 85 d6 04 00 00    	jne    c001952f <Vm::faultHandler(regs*)+0x677>
c0019059:	50                   	push   eax
c001905a:	50                   	push   eax
c001905b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001905f:	50                   	push   eax
c0019060:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019064:	50                   	push   eax
c0019065:	e8 5c fa ff ff       	call   c0018ac6 <Vm::outbv(unsigned short, unsigned char)>
c001906a:	e9 9f 04 00 00       	jmp    c001950e <Vm::faultHandler(regs*)+0x656>
c001906f:	80 fa fa             	cmp    dl,0xfa
c0019072:	0f 84 69 01 00 00    	je     c00191e1 <Vm::faultHandler(regs*)+0x329>
c0019078:	80 fa fb             	cmp    dl,0xfb
c001907b:	0f 84 6e 01 00 00    	je     c00191ef <Vm::faultHandler(regs*)+0x337>
c0019081:	80 fa f3             	cmp    dl,0xf3
c0019084:	0f 85 a5 04 00 00    	jne    c001952f <Vm::faultHandler(regs*)+0x677>
c001908a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001908d:	e9 c0 fe ff ff       	jmp    c0018f52 <Vm::faultHandler(regs*)+0x9a>
c0019092:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019095:	be 02 00 00 00       	mov    esi,0x2
c001909a:	e9 b3 fe ff ff       	jmp    c0018f52 <Vm::faultHandler(regs*)+0x9a>
c001909f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00190a2:	be 03 00 00 00       	mov    esi,0x3
c00190a7:	e9 a6 fe ff ff       	jmp    c0018f52 <Vm::faultHandler(regs*)+0x9a>
c00190ac:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00190af:	be 04 00 00 00       	mov    esi,0x4
c00190b4:	e9 99 fe ff ff       	jmp    c0018f52 <Vm::faultHandler(regs*)+0x9a>
c00190b9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00190bc:	be 05 00 00 00       	mov    esi,0x5
c00190c1:	e9 8c fe ff ff       	jmp    c0018f52 <Vm::faultHandler(regs*)+0x9a>
c00190c6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00190c9:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00190ce:	e9 7f fe ff ff       	jmp    c0018f52 <Vm::faultHandler(regs*)+0x9a>
c00190d3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00190d6:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00190db:	e9 72 fe ff ff       	jmp    c0018f52 <Vm::faultHandler(regs*)+0x9a>
c00190e0:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00190e3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00190e7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00190ec:	74 30                	je     c001911e <Vm::faultHandler(regs*)+0x266>
c00190ee:	83 e9 04             	sub    ecx,0x4
c00190f1:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00190f7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00190fd:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019100:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019103:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019109:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001910d:	0f 84 15 04 00 00    	je     c0019528 <Vm::faultHandler(regs*)+0x670>
c0019113:	80 ce 02             	or     dh,0x2
c0019116:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019119:	e9 0a 04 00 00       	jmp    c0019528 <Vm::faultHandler(regs*)+0x670>
c001911e:	83 e9 02             	sub    ecx,0x2
c0019121:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019127:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001912a:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001912e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019134:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019138:	74 05                	je     c001913f <Vm::faultHandler(regs*)+0x287>
c001913a:	80 ce 02             	or     dh,0x2
c001913d:	eb 03                	jmp    c0019142 <Vm::faultHandler(regs*)+0x28a>
c001913f:	80 e6 fd             	and    dh,0xfd
c0019142:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019146:	e9 dd 03 00 00       	jmp    c0019528 <Vm::faultHandler(regs*)+0x670>
c001914b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019150:	74 2a                	je     c001917c <Vm::faultHandler(regs*)+0x2c4>
c0019152:	8b 10                	mov    edx,DWORD PTR [eax]
c0019154:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001915a:	81 ca 00 02 02 00    	or     edx,0x20200
c0019160:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019163:	8b 00                	mov    eax,DWORD PTR [eax]
c0019165:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001916b:	c1 e8 09             	shr    eax,0x9
c001916e:	83 e0 01             	and    eax,0x1
c0019171:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019174:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019177:	83 c0 04             	add    eax,0x4
c001917a:	eb 25                	jmp    c00191a1 <Vm::faultHandler(regs*)+0x2e9>
c001917c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001917f:	81 ca 00 02 02 00    	or     edx,0x20200
c0019185:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019188:	66 8b 00             	mov    ax,WORD PTR [eax]
c001918b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019191:	66 c1 e8 09          	shr    ax,0x9
c0019195:	83 e0 01             	and    eax,0x1
c0019198:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001919b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001919e:	83 c0 02             	add    eax,0x2
c00191a1:	25 ff ff 00 00       	and    eax,0xffff
c00191a6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00191a9:	e9 7a 03 00 00       	jmp    c0019528 <Vm::faultHandler(regs*)+0x670>
c00191ae:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00191b2:	3c ee                	cmp    al,0xee
c00191b4:	75 10                	jne    c00191c6 <Vm::faultHandler(regs*)+0x30e>
c00191b6:	83 ec 0c             	sub    esp,0xc
c00191b9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00191bc:	e8 a2 f9 ff ff       	call   c0018b63 <Vm::mainloop3(unsigned long)>
c00191c1:	e9 4b 03 00 00       	jmp    c0019511 <Vm::faultHandler(regs*)+0x659>
c00191c6:	83 ec 0c             	sub    esp,0xc
c00191c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00191cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00191d1:	51                   	push   ecx
c00191d2:	50                   	push   eax
c00191d3:	53                   	push   ebx
c00191d4:	e8 e1 fb ff ff       	call   c0018dba <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00191d9:	83 c4 20             	add    esp,0x20
c00191dc:	e9 4a 03 00 00       	jmp    c001952b <Vm::faultHandler(regs*)+0x673>
c00191e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191e6:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00191ea:	e9 39 03 00 00       	jmp    c0019528 <Vm::faultHandler(regs*)+0x670>
c00191ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191f4:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c00191f8:	e9 2b 03 00 00       	jmp    c0019528 <Vm::faultHandler(regs*)+0x670>
c00191fd:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019200:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019205:	74 2b                	je     c0019232 <Vm::faultHandler(regs*)+0x37a>
c0019207:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001920e:	76 22                	jbe    c0019232 <Vm::faultHandler(regs*)+0x37a>
c0019210:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019214:	50                   	push   eax
c0019215:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019219:	50                   	push   eax
c001921a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001921e:	50                   	push   eax
c001921f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019223:	50                   	push   eax
c0019224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019228:	50                   	push   eax
c0019229:	6a 6c                	push   0x6c
c001922b:	6a 6c                	push   0x6c
c001922d:	e9 b9 01 00 00       	jmp    c00193eb <Vm::faultHandler(regs*)+0x533>
c0019232:	83 ec 0c             	sub    esp,0xc
c0019235:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019239:	0f b7 f6             	movzx  esi,si
c001923c:	50                   	push   eax
c001923d:	e8 71 f8 ff ff       	call   c0018ab3 <Vm::inbv(unsigned short)>
c0019242:	83 c4 0c             	add    esp,0xc
c0019245:	0f b6 c0             	movzx  eax,al
c0019248:	50                   	push   eax
c0019249:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001924d:	50                   	push   eax
c001924e:	56                   	push   esi
c001924f:	e8 24 fc ff ff       	call   c0018e78 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019254:	83 c4 10             	add    esp,0x10
c0019257:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001925a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001925e:	74 03                	je     c0019263 <Vm::faultHandler(regs*)+0x3ab>
c0019260:	48                   	dec    eax
c0019261:	eb 01                	jmp    c0019264 <Vm::faultHandler(regs*)+0x3ac>
c0019263:	40                   	inc    eax
c0019264:	0f b7 c0             	movzx  eax,ax
c0019267:	e9 8d 00 00 00       	jmp    c00192f9 <Vm::faultHandler(regs*)+0x441>
c001926c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001926f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019272:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019277:	74 29                	je     c00192a2 <Vm::faultHandler(regs*)+0x3ea>
c0019279:	3d ff ff 00 00       	cmp    eax,0xffff
c001927e:	76 22                	jbe    c00192a2 <Vm::faultHandler(regs*)+0x3ea>
c0019280:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019284:	50                   	push   eax
c0019285:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019289:	50                   	push   eax
c001928a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001928e:	50                   	push   eax
c001928f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019293:	50                   	push   eax
c0019294:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019298:	50                   	push   eax
c0019299:	6a 6d                	push   0x6d
c001929b:	6a 6d                	push   0x6d
c001929d:	e9 49 01 00 00       	jmp    c00193eb <Vm::faultHandler(regs*)+0x533>
c00192a2:	0f b7 c8             	movzx  ecx,ax
c00192a5:	0f b7 f6             	movzx  esi,si
c00192a8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00192ab:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00192b0:	74 20                	je     c00192d2 <Vm::faultHandler(regs*)+0x41a>
c00192b2:	ed                   	in     eax,dx
c00192b3:	55                   	push   ebp
c00192b4:	50                   	push   eax
c00192b5:	51                   	push   ecx
c00192b6:	56                   	push   esi
c00192b7:	e8 e7 fb ff ff       	call   c0018ea3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00192bc:	83 c4 10             	add    esp,0x10
c00192bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00192c2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00192c6:	74 05                	je     c00192cd <Vm::faultHandler(regs*)+0x415>
c00192c8:	83 e8 04             	sub    eax,0x4
c00192cb:	eb 27                	jmp    c00192f4 <Vm::faultHandler(regs*)+0x43c>
c00192cd:	83 c0 04             	add    eax,0x4
c00192d0:	eb 22                	jmp    c00192f4 <Vm::faultHandler(regs*)+0x43c>
c00192d2:	66 ed                	in     ax,dx
c00192d4:	0f b7 c0             	movzx  eax,ax
c00192d7:	57                   	push   edi
c00192d8:	50                   	push   eax
c00192d9:	51                   	push   ecx
c00192da:	56                   	push   esi
c00192db:	e8 ad fb ff ff       	call   c0018e8d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00192e0:	83 c4 10             	add    esp,0x10
c00192e3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00192e6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00192ea:	74 05                	je     c00192f1 <Vm::faultHandler(regs*)+0x439>
c00192ec:	83 e8 02             	sub    eax,0x2
c00192ef:	eb 03                	jmp    c00192f4 <Vm::faultHandler(regs*)+0x43c>
c00192f1:	83 c0 02             	add    eax,0x2
c00192f4:	25 ff ff 00 00       	and    eax,0xffff
c00192f9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00192fc:	e9 27 02 00 00       	jmp    c0019528 <Vm::faultHandler(regs*)+0x670>
c0019301:	8d 46 ff             	lea    eax,[esi-0x1]
c0019304:	3c 05                	cmp    al,0x5
c0019306:	77 24                	ja     c001932c <Vm::faultHandler(regs*)+0x474>
c0019308:	0f b6 c0             	movzx  eax,al
c001930b:	ff 24 85 8c 48 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb774]
c0019312:	0f b7 fd             	movzx  edi,bp
c0019315:	eb 15                	jmp    c001932c <Vm::faultHandler(regs*)+0x474>
c0019317:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001931b:	eb 0f                	jmp    c001932c <Vm::faultHandler(regs*)+0x474>
c001931d:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0019321:	eb 09                	jmp    c001932c <Vm::faultHandler(regs*)+0x474>
c0019323:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0019327:	eb 03                	jmp    c001932c <Vm::faultHandler(regs*)+0x474>
c0019329:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001932c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001932f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019334:	74 29                	je     c001935f <Vm::faultHandler(regs*)+0x4a7>
c0019336:	3d ff ff 00 00       	cmp    eax,0xffff
c001933b:	76 22                	jbe    c001935f <Vm::faultHandler(regs*)+0x4a7>
c001933d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019341:	50                   	push   eax
c0019342:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019346:	50                   	push   eax
c0019347:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001934b:	50                   	push   eax
c001934c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019350:	50                   	push   eax
c0019351:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019355:	50                   	push   eax
c0019356:	6a 6e                	push   0x6e
c0019358:	6a 6e                	push   0x6e
c001935a:	e9 8c 00 00 00       	jmp    c00193eb <Vm::faultHandler(regs*)+0x533>
c001935f:	0f b7 c0             	movzx  eax,ax
c0019362:	52                   	push   edx
c0019363:	52                   	push   edx
c0019364:	50                   	push   eax
c0019365:	57                   	push   edi
c0019366:	e8 d9 fa ff ff       	call   c0018e44 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001936b:	59                   	pop    ecx
c001936c:	0f b6 c0             	movzx  eax,al
c001936f:	5e                   	pop    esi
c0019370:	50                   	push   eax
c0019371:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019375:	50                   	push   eax
c0019376:	e8 4b f7 ff ff       	call   c0018ac6 <Vm::outbv(unsigned short, unsigned char)>
c001937b:	83 c4 10             	add    esp,0x10
c001937e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019381:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019385:	74 03                	je     c001938a <Vm::faultHandler(regs*)+0x4d2>
c0019387:	48                   	dec    eax
c0019388:	eb 01                	jmp    c001938b <Vm::faultHandler(regs*)+0x4d3>
c001938a:	40                   	inc    eax
c001938b:	0f b7 c0             	movzx  eax,ax
c001938e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019391:	e9 92 01 00 00       	jmp    c0019528 <Vm::faultHandler(regs*)+0x670>
c0019396:	8d 46 ff             	lea    eax,[esi-0x1]
c0019399:	3c 05                	cmp    al,0x5
c001939b:	77 1f                	ja     c00193bc <Vm::faultHandler(regs*)+0x504>
c001939d:	0f b6 c0             	movzx  eax,al
c00193a0:	ff 24 85 a4 48 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb75c]
c00193a7:	89 ef                	mov    edi,ebp
c00193a9:	eb 11                	jmp    c00193bc <Vm::faultHandler(regs*)+0x504>
c00193ab:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00193ae:	eb 0c                	jmp    c00193bc <Vm::faultHandler(regs*)+0x504>
c00193b0:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00193b3:	eb 07                	jmp    c00193bc <Vm::faultHandler(regs*)+0x504>
c00193b5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00193b8:	eb 02                	jmp    c00193bc <Vm::faultHandler(regs*)+0x504>
c00193ba:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00193bc:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00193bf:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00193c4:	74 37                	je     c00193fd <Vm::faultHandler(regs*)+0x545>
c00193c6:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00193cc:	76 2f                	jbe    c00193fd <Vm::faultHandler(regs*)+0x545>
c00193ce:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00193d2:	50                   	push   eax
c00193d3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00193d7:	50                   	push   eax
c00193d8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00193dc:	50                   	push   eax
c00193dd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00193e1:	50                   	push   eax
c00193e2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00193e6:	50                   	push   eax
c00193e7:	6a 6f                	push   0x6f
c00193e9:	6a 6f                	push   0x6f
c00193eb:	68 32 48 02 c0       	push   0xc0024832
c00193f0:	e8 c9 36 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c00193f5:	83 c4 20             	add    esp,0x20
c00193f8:	e9 86 01 00 00       	jmp    c0019583 <Vm::faultHandler(regs*)+0x6cb>
c00193fd:	0f b7 d7             	movzx  edx,di
c0019400:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0019403:	0f b7 c6             	movzx  eax,si
c0019406:	81 e1 00 04 00 00    	and    ecx,0x400
c001940c:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001940f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019414:	74 1d                	je     c0019433 <Vm::faultHandler(regs*)+0x57b>
c0019416:	55                   	push   ebp
c0019417:	55                   	push   ebp
c0019418:	50                   	push   eax
c0019419:	52                   	push   edx
c001941a:	e8 48 fa ff ff       	call   c0018e67 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001941f:	83 c4 10             	add    esp,0x10
c0019422:	89 fa                	mov    edx,edi
c0019424:	ef                   	out    dx,eax
c0019425:	85 c9                	test   ecx,ecx
c0019427:	74 05                	je     c001942e <Vm::faultHandler(regs*)+0x576>
c0019429:	83 ee 04             	sub    esi,0x4
c001942c:	eb 21                	jmp    c001944f <Vm::faultHandler(regs*)+0x597>
c001942e:	83 c6 04             	add    esi,0x4
c0019431:	eb 1c                	jmp    c001944f <Vm::faultHandler(regs*)+0x597>
c0019433:	55                   	push   ebp
c0019434:	55                   	push   ebp
c0019435:	50                   	push   eax
c0019436:	52                   	push   edx
c0019437:	e8 19 fa ff ff       	call   c0018e55 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001943c:	83 c4 10             	add    esp,0x10
c001943f:	89 fa                	mov    edx,edi
c0019441:	66 ef                	out    dx,ax
c0019443:	85 c9                	test   ecx,ecx
c0019445:	74 05                	je     c001944c <Vm::faultHandler(regs*)+0x594>
c0019447:	83 ee 02             	sub    esi,0x2
c001944a:	eb 03                	jmp    c001944f <Vm::faultHandler(regs*)+0x597>
c001944c:	83 c6 02             	add    esi,0x2
c001944f:	81 e6 ff ff 00 00    	and    esi,0xffff
c0019455:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0019458:	e9 cb 00 00 00       	jmp    c0019528 <Vm::faultHandler(regs*)+0x670>
c001945d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019464:	83 ec 0c             	sub    esp,0xc
c0019467:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001946b:	50                   	push   eax
c001946c:	e8 42 f6 ff ff       	call   c0018ab3 <Vm::inbv(unsigned short)>
c0019471:	0f b6 c0             	movzx  eax,al
c0019474:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019477:	eb 3f                	jmp    c00194b8 <Vm::faultHandler(regs*)+0x600>
c0019479:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001947e:	74 07                	je     c0019487 <Vm::faultHandler(regs*)+0x5cf>
c0019480:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019484:	ed                   	in     eax,dx
c0019485:	eb 14                	jmp    c001949b <Vm::faultHandler(regs*)+0x5e3>
c0019487:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001948a:	66 31 f6             	xor    si,si
c001948d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0019490:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019494:	66 ed                	in     ax,dx
c0019496:	0f b7 c0             	movzx  eax,ax
c0019499:	09 f0                	or     eax,esi
c001949b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001949e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00194a2:	e9 84 00 00 00       	jmp    c001952b <Vm::faultHandler(regs*)+0x673>
c00194a7:	52                   	push   edx
c00194a8:	52                   	push   edx
c00194a9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00194ad:	50                   	push   eax
c00194ae:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00194b2:	50                   	push   eax
c00194b3:	e8 0e f6 ff ff       	call   c0018ac6 <Vm::outbv(unsigned short, unsigned char)>
c00194b8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00194bc:	eb 53                	jmp    c0019511 <Vm::faultHandler(regs*)+0x659>
c00194be:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00194c1:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00194c5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00194ca:	74 03                	je     c00194cf <Vm::faultHandler(regs*)+0x617>
c00194cc:	ef                   	out    dx,eax
c00194cd:	eb cf                	jmp    c001949e <Vm::faultHandler(regs*)+0x5e6>
c00194cf:	66 ef                	out    dx,ax
c00194d1:	eb cb                	jmp    c001949e <Vm::faultHandler(regs*)+0x5e6>
c00194d3:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00194da:	83 ec 0c             	sub    esp,0xc
c00194dd:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00194e1:	50                   	push   eax
c00194e2:	e8 cc f5 ff ff       	call   c0018ab3 <Vm::inbv(unsigned short)>
c00194e7:	0f b6 c0             	movzx  eax,al
c00194ea:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00194ed:	eb 1f                	jmp    c001950e <Vm::faultHandler(regs*)+0x656>
c00194ef:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00194f2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00194f7:	74 03                	je     c00194fc <Vm::faultHandler(regs*)+0x644>
c00194f9:	ed                   	in     eax,dx
c00194fa:	eb 0d                	jmp    c0019509 <Vm::faultHandler(regs*)+0x651>
c00194fc:	66 ed                	in     ax,dx
c00194fe:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019501:	0f b7 c0             	movzx  eax,ax
c0019504:	66 31 d2             	xor    dx,dx
c0019507:	09 d0                	or     eax,edx
c0019509:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001950c:	eb 1a                	jmp    c0019528 <Vm::faultHandler(regs*)+0x670>
c001950e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019511:	83 c4 10             	add    esp,0x10
c0019514:	eb 15                	jmp    c001952b <Vm::faultHandler(regs*)+0x673>
c0019516:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019519:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001951c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019521:	74 03                	je     c0019526 <Vm::faultHandler(regs*)+0x66e>
c0019523:	ef                   	out    dx,eax
c0019524:	eb 02                	jmp    c0019528 <Vm::faultHandler(regs*)+0x670>
c0019526:	66 ef                	out    dx,ax
c0019528:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001952b:	b0 01                	mov    al,0x1
c001952d:	eb 56                	jmp    c0019585 <Vm::faultHandler(regs*)+0x6cd>
c001952f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019533:	50                   	push   eax
c0019534:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019538:	50                   	push   eax
c0019539:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001953d:	50                   	push   eax
c001953e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019542:	50                   	push   eax
c0019543:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019547:	50                   	push   eax
c0019548:	52                   	push   edx
c0019549:	52                   	push   edx
c001954a:	68 5f 48 02 c0       	push   0xc002485f
c001954f:	e8 6a 35 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c0019554:	83 c4 20             	add    esp,0x20
c0019557:	83 ec 0c             	sub    esp,0xc
c001955a:	6a 60                	push   0x60
c001955c:	e8 52 f5 ff ff       	call   c0018ab3 <Vm::inbv(unsigned short)>
c0019561:	83 c4 10             	add    esp,0x10
c0019564:	3c 1c                	cmp    al,0x1c
c0019566:	74 04                	je     c001956c <Vm::faultHandler(regs*)+0x6b4>
c0019568:	3c 5a                	cmp    al,0x5a
c001956a:	75 eb                	jne    c0019557 <Vm::faultHandler(regs*)+0x69f>
c001956c:	3c 5a                	cmp    al,0x5a
c001956e:	74 04                	je     c0019574 <Vm::faultHandler(regs*)+0x6bc>
c0019570:	3c 1c                	cmp    al,0x1c
c0019572:	75 0f                	jne    c0019583 <Vm::faultHandler(regs*)+0x6cb>
c0019574:	83 ec 0c             	sub    esp,0xc
c0019577:	6a 60                	push   0x60
c0019579:	e8 35 f5 ff ff       	call   c0018ab3 <Vm::inbv(unsigned short)>
c001957e:	83 c4 10             	add    esp,0x10
c0019581:	eb e9                	jmp    c001956c <Vm::faultHandler(regs*)+0x6b4>
c0019583:	31 c0                	xor    eax,eax
c0019585:	83 c4 1c             	add    esp,0x1c
c0019588:	5b                   	pop    ebx
c0019589:	5e                   	pop    esi
c001958a:	5f                   	pop    edi
c001958b:	5d                   	pop    ebp
c001958c:	c3                   	ret    

c001958d <Vm::fpuInternalTo32(unsigned long long)>:
c001958d:	57                   	push   edi
c001958e:	56                   	push   esi
c001958f:	53                   	push   ebx
c0019590:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019598:	89 d6                	mov    esi,edx
c001959a:	89 d7                	mov    edi,edx
c001959c:	89 c1                	mov    ecx,eax
c001959e:	c1 ef 14             	shr    edi,0x14
c00195a1:	89 d3                	mov    ebx,edx
c00195a3:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00195a9:	31 d2                	xor    edx,edx
c00195ab:	89 f8                	mov    eax,edi
c00195ad:	81 e6 00 00 00 80    	and    esi,0x80000000
c00195b3:	bf ff 00 00 00       	mov    edi,0xff
c00195b8:	05 80 fc ff ff       	add    eax,0xfffffc80
c00195bd:	83 d2 ff             	adc    edx,0xffffffff
c00195c0:	39 c7                	cmp    edi,eax
c00195c2:	bf 00 00 00 00       	mov    edi,0x0
c00195c7:	19 d7                	sbb    edi,edx
c00195c9:	72 15                	jb     c00195e0 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c00195cb:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c00195cf:	c1 e0 17             	shl    eax,0x17
c00195d2:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c00195d8:	09 f1                	or     ecx,esi
c00195da:	09 c1                	or     ecx,eax
c00195dc:	89 cf                	mov    edi,ecx
c00195de:	eb 02                	jmp    c00195e2 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c00195e0:	31 ff                	xor    edi,edi
c00195e2:	89 f8                	mov    eax,edi
c00195e4:	5b                   	pop    ebx
c00195e5:	5e                   	pop    esi
c00195e6:	5f                   	pop    edi
c00195e7:	c3                   	ret    

c00195e8 <Vm::fpuInternalTo64(unsigned long long)>:
c00195e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00195f0:	c3                   	ret    

c00195f1 <Vm::fpu32ToInternal(unsigned int)>:
c00195f1:	57                   	push   edi
c00195f2:	31 ff                	xor    edi,edi
c00195f4:	56                   	push   esi
c00195f5:	53                   	push   ebx
c00195f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00195fa:	89 cb                	mov    ebx,ecx
c00195fc:	89 ce                	mov    esi,ecx
c00195fe:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0019604:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001960a:	c1 e9 17             	shr    ecx,0x17
c001960d:	89 f0                	mov    eax,esi
c001960f:	0f b6 d1             	movzx  edx,cl
c0019612:	81 c2 80 03 00 00    	add    edx,0x380
c0019618:	89 d1                	mov    ecx,edx
c001961a:	89 fa                	mov    edx,edi
c001961c:	c1 e1 14             	shl    ecx,0x14
c001961f:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0019623:	c1 e0 1d             	shl    eax,0x1d
c0019626:	89 d7                	mov    edi,edx
c0019628:	89 c6                	mov    esi,eax
c001962a:	89 ca                	mov    edx,ecx
c001962c:	89 f0                	mov    eax,esi
c001962e:	09 fa                	or     edx,edi
c0019630:	09 da                	or     edx,ebx
c0019632:	5b                   	pop    ebx
c0019633:	5e                   	pop    esi
c0019634:	5f                   	pop    edi
c0019635:	c3                   	ret    

c0019636 <Vm::fpu64ToInternal(unsigned long long)>:
c0019636:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001963a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001963e:	c3                   	ret    

c001963f <Vm::fpuFloatToLong(unsigned long long)>:
c001963f:	57                   	push   edi
c0019640:	31 c0                	xor    eax,eax
c0019642:	56                   	push   esi
c0019643:	31 d2                	xor    edx,edx
c0019645:	53                   	push   ebx
c0019646:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001964a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001964e:	89 d9                	mov    ecx,ebx
c0019650:	c1 e9 14             	shr    ecx,0x14
c0019653:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0019659:	89 cf                	mov    edi,ecx
c001965b:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0019661:	78 33                	js     c0019696 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c0019663:	89 d9                	mov    ecx,ebx
c0019665:	89 f0                	mov    eax,esi
c0019667:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001966d:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019673:	89 ca                	mov    edx,ecx
c0019675:	b9 34 00 00 00       	mov    ecx,0x34
c001967a:	29 f9                	sub    ecx,edi
c001967c:	0f ad d0             	shrd   eax,edx,cl
c001967f:	d3 fa                	sar    edx,cl
c0019681:	f6 c1 20             	test   cl,0x20
c0019684:	74 05                	je     c001968b <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c0019686:	89 d0                	mov    eax,edx
c0019688:	c1 fa 1f             	sar    edx,0x1f
c001968b:	85 db                	test   ebx,ebx
c001968d:	79 07                	jns    c0019696 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001968f:	f7 d8                	neg    eax
c0019691:	83 d2 00             	adc    edx,0x0
c0019694:	f7 da                	neg    edx
c0019696:	5b                   	pop    ebx
c0019697:	5e                   	pop    esi
c0019698:	5f                   	pop    edi
c0019699:	c3                   	ret    

c001969a <Vm::fpuULongToFloat(unsigned long long)>:
c001969a:	57                   	push   edi
c001969b:	31 c9                	xor    ecx,ecx
c001969d:	56                   	push   esi
c001969e:	53                   	push   ebx
c001969f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00196a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00196a7:	0f ba e7 14          	bt     edi,0x14
c00196ab:	72 07                	jb     c00196b4 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c00196ad:	01 f6                	add    esi,esi
c00196af:	11 ff                	adc    edi,edi
c00196b1:	41                   	inc    ecx
c00196b2:	eb f3                	jmp    c00196a7 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c00196b4:	89 fa                	mov    edx,edi
c00196b6:	89 f0                	mov    eax,esi
c00196b8:	bb 33 04 00 00       	mov    ebx,0x433
c00196bd:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c00196c3:	29 cb                	sub    ebx,ecx
c00196c5:	89 d9                	mov    ecx,ebx
c00196c7:	5b                   	pop    ebx
c00196c8:	c1 e1 14             	shl    ecx,0x14
c00196cb:	5e                   	pop    esi
c00196cc:	09 ca                	or     edx,ecx
c00196ce:	5f                   	pop    edi
c00196cf:	c3                   	ret    

c00196d0 <Vm::fpuLongToFloat(long long)>:
c00196d0:	56                   	push   esi
c00196d1:	31 c0                	xor    eax,eax
c00196d3:	53                   	push   ebx
c00196d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00196d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00196dc:	39 c8                	cmp    eax,ecx
c00196de:	19 d8                	sbb    eax,ebx
c00196e0:	7d 04                	jge    c00196e6 <Vm::fpuLongToFloat(long long)+0x16>
c00196e2:	31 f6                	xor    esi,esi
c00196e4:	eb 0c                	jmp    c00196f2 <Vm::fpuLongToFloat(long long)+0x22>
c00196e6:	f7 d9                	neg    ecx
c00196e8:	be 01 00 00 00       	mov    esi,0x1
c00196ed:	83 d3 00             	adc    ebx,0x0
c00196f0:	f7 db                	neg    ebx
c00196f2:	31 c0                	xor    eax,eax
c00196f4:	0f ba e3 14          	bt     ebx,0x14
c00196f8:	72 07                	jb     c0019701 <Vm::fpuLongToFloat(long long)+0x31>
c00196fa:	01 c9                	add    ecx,ecx
c00196fc:	11 db                	adc    ebx,ebx
c00196fe:	40                   	inc    eax
c00196ff:	eb f3                	jmp    c00196f4 <Vm::fpuLongToFloat(long long)+0x24>
c0019701:	ba 33 04 00 00       	mov    edx,0x433
c0019706:	29 c2                	sub    edx,eax
c0019708:	89 c8                	mov    eax,ecx
c001970a:	c1 e2 14             	shl    edx,0x14
c001970d:	89 d9                	mov    ecx,ebx
c001970f:	89 f3                	mov    ebx,esi
c0019711:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019717:	09 ca                	or     edx,ecx
c0019719:	84 db                	test   bl,bl
c001971b:	74 06                	je     c0019723 <Vm::fpuLongToFloat(long long)+0x53>
c001971d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0019723:	5b                   	pop    ebx
c0019724:	5e                   	pop    esi
c0019725:	c3                   	ret    

c0019726 <Vm::fpuGet0()>:
c0019726:	31 c0                	xor    eax,eax
c0019728:	31 d2                	xor    edx,edx
c001972a:	c3                   	ret    

c001972b <Vm::fpuGet1()>:
c001972b:	b8 01 00 00 00       	mov    eax,0x1
c0019730:	31 d2                	xor    edx,edx
c0019732:	c3                   	ret    

c0019733 <Vm::fpuGetPi()>:
c0019733:	b8 03 00 00 00       	mov    eax,0x3
c0019738:	31 d2                	xor    edx,edx
c001973a:	c3                   	ret    

c001973b <Vm::fpuGetLog2E()>:
c001973b:	83 ec 18             	sub    esp,0x18
c001973e:	68 bc 48 02 c0       	push   0xc00248bc
c0019743:	e8 35 ad ff ff       	call   c001447d <Krnl::panic(char const*)>
c0019748:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001974d:	31 d2                	xor    edx,edx
c001974f:	83 c4 1c             	add    esp,0x1c
c0019752:	c3                   	ret    

c0019753 <Vm::fpuGetLogE2()>:
c0019753:	83 ec 18             	sub    esp,0x18
c0019756:	68 c8 48 02 c0       	push   0xc00248c8
c001975b:	e8 1d ad ff ff       	call   c001447d <Krnl::panic(char const*)>
c0019760:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019765:	31 d2                	xor    edx,edx
c0019767:	83 c4 1c             	add    esp,0x1c
c001976a:	c3                   	ret    

c001976b <Vm::fpuGetLog210()>:
c001976b:	83 ec 18             	sub    esp,0x18
c001976e:	68 d4 48 02 c0       	push   0xc00248d4
c0019773:	e8 05 ad ff ff       	call   c001447d <Krnl::panic(char const*)>
c0019778:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001977d:	31 d2                	xor    edx,edx
c001977f:	83 c4 1c             	add    esp,0x1c
c0019782:	c3                   	ret    

c0019783 <Vm::fpuGetLog102()>:
c0019783:	83 ec 18             	sub    esp,0x18
c0019786:	68 e1 48 02 c0       	push   0xc00248e1
c001978b:	e8 ed ac ff ff       	call   c001447d <Krnl::panic(char const*)>
c0019790:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019795:	31 d2                	xor    edx,edx
c0019797:	83 c4 1c             	add    esp,0x1c
c001979a:	c3                   	ret    

c001979b <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001979b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001979f:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00197a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197a7:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c00197ab:	0f 92 c0             	setb   al
c00197ae:	c3                   	ret    

c00197af <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c00197af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00197b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00197b7:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c00197bb:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c00197bf:	09 c2                	or     edx,eax
c00197c1:	0f 94 c0             	sete   al
c00197c4:	c3                   	ret    

c00197c5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c00197c5:	57                   	push   edi
c00197c6:	56                   	push   esi
c00197c7:	53                   	push   ebx
c00197c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00197cc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197d0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00197d4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00197d8:	57                   	push   edi
c00197d9:	56                   	push   esi
c00197da:	53                   	push   ebx
c00197db:	51                   	push   ecx
c00197dc:	e8 ce ff ff ff       	call   c00197af <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c00197e1:	83 c4 10             	add    esp,0x10
c00197e4:	88 c2                	mov    dl,al
c00197e6:	31 c0                	xor    eax,eax
c00197e8:	84 d2                	test   dl,dl
c00197ea:	75 0c                	jne    c00197f8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c00197ec:	57                   	push   edi
c00197ed:	56                   	push   esi
c00197ee:	53                   	push   ebx
c00197ef:	51                   	push   ecx
c00197f0:	e8 a6 ff ff ff       	call   c001979b <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c00197f5:	83 c4 10             	add    esp,0x10
c00197f8:	83 e0 01             	and    eax,0x1
c00197fb:	5b                   	pop    ebx
c00197fc:	88 c1                	mov    cl,al
c00197fe:	83 e2 01             	and    edx,0x1
c0019801:	a0 01 78 02 c0       	mov    al,ds:0xc0027801
c0019806:	c1 e2 06             	shl    edx,0x6
c0019809:	83 e0 ba             	and    eax,0xffffffba
c001980c:	5e                   	pop    esi
c001980d:	09 c8                	or     eax,ecx
c001980f:	5f                   	pop    edi
c0019810:	09 d0                	or     eax,edx
c0019812:	a2 01 78 02 c0       	mov    ds:0xc0027801,al
c0019817:	c3                   	ret    

c0019818 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0019818:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001981c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019820:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0019824:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0019828:	c3                   	ret    

c0019829 <Vm::fpuAbs(unsigned long long)>:
c0019829:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001982d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019831:	c3                   	ret    

c0019832 <Vm::fpuChs(unsigned long long)>:
c0019832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019836:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001983a:	f7 d8                	neg    eax
c001983c:	83 d2 00             	adc    edx,0x0
c001983f:	f7 da                	neg    edx
c0019841:	c3                   	ret    

c0019842 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0019842:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0019846:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001984b:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001984f:	eb c7                	jmp    c0019818 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0019851 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0019851:	53                   	push   ebx
c0019852:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019856:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001985a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001985e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019862:	0f af ca             	imul   ecx,edx
c0019865:	0f af d8             	imul   ebx,eax
c0019868:	f7 e2                	mul    edx
c001986a:	01 d9                	add    ecx,ebx
c001986c:	5b                   	pop    ebx
c001986d:	01 ca                	add    edx,ecx
c001986f:	c3                   	ret    

c0019870 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0019870:	83 ec 0c             	sub    esp,0xc
c0019873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001987b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001987f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019883:	e8 7c 75 00 00       	call   c0020e04 <__udivdi3>
c0019888:	83 c4 1c             	add    esp,0x1c
c001988b:	c3                   	ret    

c001988c <Vm::fpuSquare(unsigned long long)>:
c001988c:	50                   	push   eax
c001988d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019891:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019895:	52                   	push   edx
c0019896:	50                   	push   eax
c0019897:	52                   	push   edx
c0019898:	50                   	push   eax
c0019899:	e8 b3 ff ff ff       	call   c0019851 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001989e:	83 c4 14             	add    esp,0x14
c00198a1:	c3                   	ret    

c00198a2 <Vm::fpuGetReg(int)>:
c00198a2:	83 ec 0c             	sub    esp,0xc
c00198a5:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00198aa:	76 10                	jbe    c00198bc <Vm::fpuGetReg(int)+0x1a>
c00198ac:	83 ec 0c             	sub    esp,0xc
c00198af:	68 ee 48 02 c0       	push   0xc00248ee
c00198b4:	e8 c4 ab ff ff       	call   c001447d <Krnl::panic(char const*)>
c00198b9:	83 c4 10             	add    esp,0x10
c00198bc:	a0 01 78 02 c0       	mov    al,ds:0xc0027801
c00198c1:	b9 08 00 00 00       	mov    ecx,0x8
c00198c6:	c0 e8 03             	shr    al,0x3
c00198c9:	83 e0 07             	and    eax,0x7
c00198cc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00198d0:	99                   	cdq    
c00198d1:	f7 f9                	idiv   ecx
c00198d3:	8b 04 d5 04 78 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd87fc]
c00198da:	8b 14 d5 08 78 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd87f8]
c00198e1:	83 c4 0c             	add    esp,0xc
c00198e4:	c3                   	ret    

c00198e5 <Vm::fpuSetReg(int, unsigned long long)>:
c00198e5:	57                   	push   edi
c00198e6:	56                   	push   esi
c00198e7:	52                   	push   edx
c00198e8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00198ec:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00198f0:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00198f5:	76 10                	jbe    c0019907 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c00198f7:	83 ec 0c             	sub    esp,0xc
c00198fa:	68 01 49 02 c0       	push   0xc0024901
c00198ff:	e8 79 ab ff ff       	call   c001447d <Krnl::panic(char const*)>
c0019904:	83 c4 10             	add    esp,0x10
c0019907:	a0 01 78 02 c0       	mov    al,ds:0xc0027801
c001990c:	b9 08 00 00 00       	mov    ecx,0x8
c0019911:	c0 e8 03             	shr    al,0x3
c0019914:	83 e0 07             	and    eax,0x7
c0019917:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001991b:	99                   	cdq    
c001991c:	f7 f9                	idiv   ecx
c001991e:	89 34 d5 04 78 02 c0 	mov    DWORD PTR [edx*8-0x3ffd87fc],esi
c0019925:	89 3c d5 08 78 02 c0 	mov    DWORD PTR [edx*8-0x3ffd87f8],edi
c001992c:	58                   	pop    eax
c001992d:	5e                   	pop    esi
c001992e:	5f                   	pop    edi
c001992f:	c3                   	ret    

c0019930 <Vm::fpuPush(unsigned long long)>:
c0019930:	a0 01 78 02 c0       	mov    al,ds:0xc0027801
c0019935:	c0 e8 03             	shr    al,0x3
c0019938:	83 e0 07             	and    eax,0x7
c001993b:	83 c0 07             	add    eax,0x7
c001993e:	88 c2                	mov    dl,al
c0019940:	83 e0 07             	and    eax,0x7
c0019943:	83 e2 07             	and    edx,0x7
c0019946:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001994d:	8a 15 01 78 02 c0    	mov    dl,BYTE PTR ds:0xc0027801
c0019953:	83 e2 c7             	and    edx,0xffffffc7
c0019956:	09 ca                	or     edx,ecx
c0019958:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001995c:	88 15 01 78 02 c0    	mov    BYTE PTR ds:0xc0027801,dl
c0019962:	89 0c c5 08 78 02 c0 	mov    DWORD PTR [eax*8-0x3ffd87f8],ecx
c0019969:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001996d:	89 14 c5 04 78 02 c0 	mov    DWORD PTR [eax*8-0x3ffd87fc],edx
c0019974:	a1 44 78 02 c0       	mov    eax,ds:0xc0027844
c0019979:	83 f8 08             	cmp    eax,0x8
c001997c:	75 08                	jne    c0019986 <Vm::fpuPush(unsigned long long)+0x56>
c001997e:	80 0d 00 78 02 c0 40 	or     BYTE PTR ds:0xc0027800,0x40
c0019985:	c3                   	ret    
c0019986:	40                   	inc    eax
c0019987:	a3 44 78 02 c0       	mov    ds:0xc0027844,eax
c001998c:	c3                   	ret    

c001998d <Vm::fpuPop()>:
c001998d:	8a 0d 01 78 02 c0    	mov    cl,BYTE PTR ds:0xc0027801
c0019993:	53                   	push   ebx
c0019994:	c0 e9 03             	shr    cl,0x3
c0019997:	8a 1d 01 78 02 c0    	mov    bl,BYTE PTR ds:0xc0027801
c001999d:	83 e1 07             	and    ecx,0x7
c00199a0:	83 e3 c7             	and    ebx,0xffffffc7
c00199a3:	8b 04 cd 04 78 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd87fc]
c00199aa:	8b 14 cd 08 78 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd87f8]
c00199b1:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c00199b8:	83 e1 38             	and    ecx,0x38
c00199bb:	09 d9                	or     ecx,ebx
c00199bd:	88 0d 01 78 02 c0    	mov    BYTE PTR ds:0xc0027801,cl
c00199c3:	8b 0d 44 78 02 c0    	mov    ecx,DWORD PTR ds:0xc0027844
c00199c9:	85 c9                	test   ecx,ecx
c00199cb:	74 09                	je     c00199d6 <Vm::fpuPop()+0x49>
c00199cd:	49                   	dec    ecx
c00199ce:	89 0d 44 78 02 c0    	mov    DWORD PTR ds:0xc0027844,ecx
c00199d4:	eb 07                	jmp    c00199dd <Vm::fpuPop()+0x50>
c00199d6:	80 0d 00 78 02 c0 40 	or     BYTE PTR ds:0xc0027800,0x40
c00199dd:	5b                   	pop    ebx
c00199de:	c3                   	ret    

c00199df <Vm::x87Handler(regs*)>:
c00199df:	55                   	push   ebp
c00199e0:	57                   	push   edi
c00199e1:	56                   	push   esi
c00199e2:	53                   	push   ebx
c00199e3:	83 ec 1c             	sub    esp,0x1c
c00199e6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00199ea:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c00199ef:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00199f2:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00199fa:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00199fe:	50                   	push   eax
c00199ff:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0019a03:	50                   	push   eax
c0019a04:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a08:	50                   	push   eax
c0019a09:	53                   	push   ebx
c0019a0a:	e8 87 a1 ff ff       	call   c0013b96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0019a0f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0019a12:	83 c4 10             	add    esp,0x10
c0019a15:	89 c6                	mov    esi,eax
c0019a17:	80 fa d9             	cmp    dl,0xd9
c0019a1a:	0f 85 52 01 00 00    	jne    c0019b72 <Vm::x87Handler(regs*)+0x193>
c0019a20:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019a24:	8d 50 20             	lea    edx,[eax+0x20]
c0019a27:	80 fa 0e             	cmp    dl,0xe
c0019a2a:	0f 87 86 00 00 00    	ja     c0019ab6 <Vm::x87Handler(regs*)+0xd7>
c0019a30:	0f b6 d2             	movzx  edx,dl
c0019a33:	ff 24 95 14 49 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb6ec]
c0019a3a:	e8 e7 fc ff ff       	call   c0019726 <Vm::fpuGet0()>
c0019a3f:	eb 05                	jmp    c0019a46 <Vm::x87Handler(regs*)+0x67>
c0019a41:	e8 e5 fc ff ff       	call   c001972b <Vm::fpuGet1()>
c0019a46:	57                   	push   edi
c0019a47:	57                   	push   edi
c0019a48:	52                   	push   edx
c0019a49:	50                   	push   eax
c0019a4a:	e8 e1 fe ff ff       	call   c0019930 <Vm::fpuPush(unsigned long long)>
c0019a4f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019a53:	83 c4 10             	add    esp,0x10
c0019a56:	b0 01                	mov    al,0x1
c0019a58:	e9 e3 09 00 00       	jmp    c001a440 <Vm::x87Handler(regs*)+0xa61>
c0019a5d:	83 ec 0c             	sub    esp,0xc
c0019a60:	6a 00                	push   0x0
c0019a62:	e8 3b fe ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019a67:	59                   	pop    ecx
c0019a68:	5e                   	pop    esi
c0019a69:	52                   	push   edx
c0019a6a:	50                   	push   eax
c0019a6b:	e8 c2 fd ff ff       	call   c0019832 <Vm::fpuChs(unsigned long long)>
c0019a70:	eb 13                	jmp    c0019a85 <Vm::x87Handler(regs*)+0xa6>
c0019a72:	83 ec 0c             	sub    esp,0xc
c0019a75:	6a 00                	push   0x0
c0019a77:	e8 26 fe ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019a7c:	5f                   	pop    edi
c0019a7d:	5d                   	pop    ebp
c0019a7e:	52                   	push   edx
c0019a7f:	50                   	push   eax
c0019a80:	e8 a4 fd ff ff       	call   c0019829 <Vm::fpuAbs(unsigned long long)>
c0019a85:	83 c4 0c             	add    esp,0xc
c0019a88:	52                   	push   edx
c0019a89:	50                   	push   eax
c0019a8a:	6a 00                	push   0x0
c0019a8c:	e8 54 fe ff ff       	call   c00198e5 <Vm::fpuSetReg(int, unsigned long long)>
c0019a91:	eb bc                	jmp    c0019a4f <Vm::x87Handler(regs*)+0x70>
c0019a93:	e8 d3 fc ff ff       	call   c001976b <Vm::fpuGetLog210()>
c0019a98:	eb ac                	jmp    c0019a46 <Vm::x87Handler(regs*)+0x67>
c0019a9a:	e8 9c fc ff ff       	call   c001973b <Vm::fpuGetLog2E()>
c0019a9f:	eb a5                	jmp    c0019a46 <Vm::x87Handler(regs*)+0x67>
c0019aa1:	e8 8d fc ff ff       	call   c0019733 <Vm::fpuGetPi()>
c0019aa6:	eb 9e                	jmp    c0019a46 <Vm::x87Handler(regs*)+0x67>
c0019aa8:	e8 d6 fc ff ff       	call   c0019783 <Vm::fpuGetLog102()>
c0019aad:	eb 97                	jmp    c0019a46 <Vm::x87Handler(regs*)+0x67>
c0019aaf:	e8 9f fc ff ff       	call   c0019753 <Vm::fpuGetLogE2()>
c0019ab4:	eb 90                	jmp    c0019a46 <Vm::x87Handler(regs*)+0x67>
c0019ab6:	8d 50 40             	lea    edx,[eax+0x40]
c0019ab9:	80 fa 07             	cmp    dl,0x7
c0019abc:	77 15                	ja     c0019ad3 <Vm::x87Handler(regs*)+0xf4>
c0019abe:	83 ec 0c             	sub    esp,0xc
c0019ac1:	2d c0 00 00 00       	sub    eax,0xc0
c0019ac6:	50                   	push   eax
c0019ac7:	e8 d6 fd ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019acc:	59                   	pop    ecx
c0019acd:	5e                   	pop    esi
c0019ace:	e9 75 ff ff ff       	jmp    c0019a48 <Vm::x87Handler(regs*)+0x69>
c0019ad3:	8d 50 38             	lea    edx,[eax+0x38]
c0019ad6:	80 fa 07             	cmp    dl,0x7
c0019ad9:	77 3c                	ja     c0019b17 <Vm::x87Handler(regs*)+0x138>
c0019adb:	83 ec 0c             	sub    esp,0xc
c0019ade:	2d c8 00 00 00       	sub    eax,0xc8
c0019ae3:	50                   	push   eax
c0019ae4:	e8 b9 fd ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019ae9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019af0:	89 c6                	mov    esi,eax
c0019af2:	89 d7                	mov    edi,edx
c0019af4:	e8 a9 fd ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019af9:	83 c4 0c             	add    esp,0xc
c0019afc:	52                   	push   edx
c0019afd:	50                   	push   eax
c0019afe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019b02:	2d c8 00 00 00       	sub    eax,0xc8
c0019b07:	50                   	push   eax
c0019b08:	e8 d8 fd ff ff       	call   c00198e5 <Vm::fpuSetReg(int, unsigned long long)>
c0019b0d:	83 c4 0c             	add    esp,0xc
c0019b10:	57                   	push   edi
c0019b11:	56                   	push   esi
c0019b12:	e9 73 ff ff ff       	jmp    c0019a8a <Vm::x87Handler(regs*)+0xab>
c0019b17:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019b1b:	84 d2                	test   dl,dl
c0019b1d:	75 0f                	jne    c0019b2e <Vm::x87Handler(regs*)+0x14f>
c0019b1f:	83 ec 0c             	sub    esp,0xc
c0019b22:	ff 36                	push   DWORD PTR [esi]
c0019b24:	e8 c8 fa ff ff       	call   c00195f1 <Vm::fpu32ToInternal(unsigned int)>
c0019b29:	e9 bf 00 00 00       	jmp    c0019bed <Vm::x87Handler(regs*)+0x20e>
c0019b2e:	80 fa 03             	cmp    dl,0x3
c0019b31:	75 13                	jne    c0019b46 <Vm::x87Handler(regs*)+0x167>
c0019b33:	e8 55 fe ff ff       	call   c001998d <Vm::fpuPop()>
c0019b38:	55                   	push   ebp
c0019b39:	55                   	push   ebp
c0019b3a:	52                   	push   edx
c0019b3b:	50                   	push   eax
c0019b3c:	e8 4c fa ff ff       	call   c001958d <Vm::fpuInternalTo32(unsigned long long)>
c0019b41:	e9 88 00 00 00       	jmp    c0019bce <Vm::x87Handler(regs*)+0x1ef>
c0019b46:	80 fa 05             	cmp    dl,0x5
c0019b49:	75 0e                	jne    c0019b59 <Vm::x87Handler(regs*)+0x17a>
c0019b4b:	66 8b 06             	mov    ax,WORD PTR [esi]
c0019b4e:	66 a3 02 78 02 c0    	mov    ds:0xc0027802,ax
c0019b54:	e9 df 00 00 00       	jmp    c0019c38 <Vm::x87Handler(regs*)+0x259>
c0019b59:	31 c0                	xor    eax,eax
c0019b5b:	80 fa 07             	cmp    dl,0x7
c0019b5e:	0f 85 dc 08 00 00    	jne    c001a440 <Vm::x87Handler(regs*)+0xa61>
c0019b64:	66 a1 02 78 02 c0    	mov    ax,ds:0xc0027802
c0019b6a:	66 89 06             	mov    WORD PTR [esi],ax
c0019b6d:	e9 c6 00 00 00       	jmp    c0019c38 <Vm::x87Handler(regs*)+0x259>
c0019b72:	80 fa d8             	cmp    dl,0xd8
c0019b75:	0f 84 c9 00 00 00    	je     c0019c44 <Vm::x87Handler(regs*)+0x265>
c0019b7b:	80 fa dc             	cmp    dl,0xdc
c0019b7e:	0f 84 0d 02 00 00    	je     c0019d91 <Vm::x87Handler(regs*)+0x3b2>
c0019b84:	80 fa de             	cmp    dl,0xde
c0019b87:	0f 84 cd 02 00 00    	je     c0019e5a <Vm::x87Handler(regs*)+0x47b>
c0019b8d:	80 fa dd             	cmp    dl,0xdd
c0019b90:	0f 84 5f 04 00 00    	je     c0019ff5 <Vm::x87Handler(regs*)+0x616>
c0019b96:	80 fa da             	cmp    dl,0xda
c0019b99:	0f 84 24 05 00 00    	je     c001a0c3 <Vm::x87Handler(regs*)+0x6e4>
c0019b9f:	80 fa df             	cmp    dl,0xdf
c0019ba2:	0f 84 68 05 00 00    	je     c001a110 <Vm::x87Handler(regs*)+0x731>
c0019ba8:	31 c0                	xor    eax,eax
c0019baa:	80 fa db             	cmp    dl,0xdb
c0019bad:	0f 85 8d 08 00 00    	jne    c001a440 <Vm::x87Handler(regs*)+0xa61>
c0019bb3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019bb7:	80 fa 03             	cmp    dl,0x3
c0019bba:	0f 85 70 06 00 00    	jne    c001a230 <Vm::x87Handler(regs*)+0x851>
c0019bc0:	e8 c8 fd ff ff       	call   c001998d <Vm::fpuPop()>
c0019bc5:	55                   	push   ebp
c0019bc6:	55                   	push   ebp
c0019bc7:	52                   	push   edx
c0019bc8:	50                   	push   eax
c0019bc9:	e8 71 fa ff ff       	call   c001963f <Vm::fpuFloatToLong(unsigned long long)>
c0019bce:	83 c4 10             	add    esp,0x10
c0019bd1:	89 06                	mov    DWORD PTR [esi],eax
c0019bd3:	eb 63                	jmp    c0019c38 <Vm::x87Handler(regs*)+0x259>
c0019bd5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019bd9:	84 d2                	test   dl,dl
c0019bdb:	0f 85 e6 05 00 00    	jne    c001a1c7 <Vm::x87Handler(regs*)+0x7e8>
c0019be1:	57                   	push   edi
c0019be2:	57                   	push   edi
c0019be3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019be6:	ff 36                	push   DWORD PTR [esi]
c0019be8:	e8 49 fa ff ff       	call   c0019636 <Vm::fpu64ToInternal(unsigned long long)>
c0019bed:	5e                   	pop    esi
c0019bee:	5f                   	pop    edi
c0019bef:	52                   	push   edx
c0019bf0:	50                   	push   eax
c0019bf1:	e8 3a fd ff ff       	call   c0019930 <Vm::fpuPush(unsigned long long)>
c0019bf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bfa:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019bfd:	e9 51 fe ff ff       	jmp    c0019a53 <Vm::x87Handler(regs*)+0x74>
c0019c02:	80 fa 03             	cmp    dl,0x3
c0019c05:	0f 85 d7 06 00 00    	jne    c001a2e2 <Vm::x87Handler(regs*)+0x903>
c0019c0b:	57                   	push   edi
c0019c0c:	57                   	push   edi
c0019c0d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019c10:	ff 36                	push   DWORD PTR [esi]
c0019c12:	e8 1f fa ff ff       	call   c0019636 <Vm::fpu64ToInternal(unsigned long long)>
c0019c17:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c1e:	89 c6                	mov    esi,eax
c0019c20:	89 d7                	mov    edi,edx
c0019c22:	e8 7b fc ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019c27:	57                   	push   edi
c0019c28:	56                   	push   esi
c0019c29:	52                   	push   edx
c0019c2a:	50                   	push   eax
c0019c2b:	e8 95 fb ff ff       	call   c00197c5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0019c30:	83 c4 20             	add    esp,0x20
c0019c33:	e8 55 fd ff ff       	call   c001998d <Vm::fpuPop()>
c0019c38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c3c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019c3f:	e9 12 fe ff ff       	jmp    c0019a56 <Vm::x87Handler(regs*)+0x77>
c0019c44:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019c48:	8d 50 40             	lea    edx,[eax+0x40]
c0019c4b:	80 fa 07             	cmp    dl,0x7
c0019c4e:	77 29                	ja     c0019c79 <Vm::x87Handler(regs*)+0x29a>
c0019c50:	83 ec 0c             	sub    esp,0xc
c0019c53:	2d c0 00 00 00       	sub    eax,0xc0
c0019c58:	50                   	push   eax
c0019c59:	e8 44 fc ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019c5e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c65:	89 c6                	mov    esi,eax
c0019c67:	89 d7                	mov    edi,edx
c0019c69:	e8 34 fc ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019c6e:	57                   	push   edi
c0019c6f:	56                   	push   esi
c0019c70:	52                   	push   edx
c0019c71:	50                   	push   eax
c0019c72:	e8 a1 fb ff ff       	call   c0019818 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019c77:	eb 2f                	jmp    c0019ca8 <Vm::x87Handler(regs*)+0x2c9>
c0019c79:	8d 50 38             	lea    edx,[eax+0x38]
c0019c7c:	80 fa 07             	cmp    dl,0x7
c0019c7f:	77 2f                	ja     c0019cb0 <Vm::x87Handler(regs*)+0x2d1>
c0019c81:	83 ec 0c             	sub    esp,0xc
c0019c84:	2d c8 00 00 00       	sub    eax,0xc8
c0019c89:	50                   	push   eax
c0019c8a:	e8 13 fc ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019c8f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c96:	89 c6                	mov    esi,eax
c0019c98:	89 d7                	mov    edi,edx
c0019c9a:	e8 03 fc ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019c9f:	57                   	push   edi
c0019ca0:	56                   	push   esi
c0019ca1:	52                   	push   edx
c0019ca2:	50                   	push   eax
c0019ca3:	e8 a9 fb ff ff       	call   c0019851 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019ca8:	83 c4 1c             	add    esp,0x1c
c0019cab:	e9 d8 fd ff ff       	jmp    c0019a88 <Vm::x87Handler(regs*)+0xa9>
c0019cb0:	8d 50 30             	lea    edx,[eax+0x30]
c0019cb3:	80 fa 07             	cmp    dl,0x7
c0019cb6:	77 0d                	ja     c0019cc5 <Vm::x87Handler(regs*)+0x2e6>
c0019cb8:	83 ec 0c             	sub    esp,0xc
c0019cbb:	2d d0 00 00 00       	sub    eax,0xd0
c0019cc0:	e9 99 03 00 00       	jmp    c001a05e <Vm::x87Handler(regs*)+0x67f>
c0019cc5:	8d 50 28             	lea    edx,[eax+0x28]
c0019cc8:	80 fa 07             	cmp    dl,0x7
c0019ccb:	77 0d                	ja     c0019cda <Vm::x87Handler(regs*)+0x2fb>
c0019ccd:	83 ec 0c             	sub    esp,0xc
c0019cd0:	2d d8 00 00 00       	sub    eax,0xd8
c0019cd5:	e9 c0 03 00 00       	jmp    c001a09a <Vm::x87Handler(regs*)+0x6bb>
c0019cda:	8d 50 20             	lea    edx,[eax+0x20]
c0019cdd:	80 fa 07             	cmp    dl,0x7
c0019ce0:	77 1b                	ja     c0019cfd <Vm::x87Handler(regs*)+0x31e>
c0019ce2:	83 ec 0c             	sub    esp,0xc
c0019ce5:	2d e0 00 00 00       	sub    eax,0xe0
c0019cea:	50                   	push   eax
c0019ceb:	e8 b2 fb ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019cf0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019cf7:	89 c6                	mov    esi,eax
c0019cf9:	89 d7                	mov    edi,edx
c0019cfb:	eb 22                	jmp    c0019d1f <Vm::x87Handler(regs*)+0x340>
c0019cfd:	8d 50 18             	lea    edx,[eax+0x18]
c0019d00:	80 fa 07             	cmp    dl,0x7
c0019d03:	77 2d                	ja     c0019d32 <Vm::x87Handler(regs*)+0x353>
c0019d05:	83 ec 0c             	sub    esp,0xc
c0019d08:	6a 00                	push   0x0
c0019d0a:	e8 93 fb ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019d0f:	89 c6                	mov    esi,eax
c0019d11:	89 d7                	mov    edi,edx
c0019d13:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d17:	2d e8 00 00 00       	sub    eax,0xe8
c0019d1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d1f:	e8 7e fb ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019d24:	57                   	push   edi
c0019d25:	56                   	push   esi
c0019d26:	52                   	push   edx
c0019d27:	50                   	push   eax
c0019d28:	e8 15 fb ff ff       	call   c0019842 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019d2d:	e9 76 ff ff ff       	jmp    c0019ca8 <Vm::x87Handler(regs*)+0x2c9>
c0019d32:	8d 50 10             	lea    edx,[eax+0x10]
c0019d35:	80 fa 07             	cmp    dl,0x7
c0019d38:	77 1b                	ja     c0019d55 <Vm::x87Handler(regs*)+0x376>
c0019d3a:	83 ec 0c             	sub    esp,0xc
c0019d3d:	2d f0 00 00 00       	sub    eax,0xf0
c0019d42:	50                   	push   eax
c0019d43:	e8 5a fb ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019d48:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d4f:	89 c6                	mov    esi,eax
c0019d51:	89 d7                	mov    edi,edx
c0019d53:	eb 22                	jmp    c0019d77 <Vm::x87Handler(regs*)+0x398>
c0019d55:	3c f7                	cmp    al,0xf7
c0019d57:	0f 86 d1 03 00 00    	jbe    c001a12e <Vm::x87Handler(regs*)+0x74f>
c0019d5d:	83 ec 0c             	sub    esp,0xc
c0019d60:	6a 00                	push   0x0
c0019d62:	e8 3b fb ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019d67:	89 c6                	mov    esi,eax
c0019d69:	89 d7                	mov    edi,edx
c0019d6b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d6f:	2d f8 00 00 00       	sub    eax,0xf8
c0019d74:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d77:	e8 26 fb ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019d7c:	57                   	push   edi
c0019d7d:	56                   	push   esi
c0019d7e:	52                   	push   edx
c0019d7f:	50                   	push   eax
c0019d80:	e8 eb fa ff ff       	call   c0019870 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019d85:	83 c4 1c             	add    esp,0x1c
c0019d88:	52                   	push   edx
c0019d89:	50                   	push   eax
c0019d8a:	6a 00                	push   0x0
c0019d8c:	e9 51 02 00 00       	jmp    c0019fe2 <Vm::x87Handler(regs*)+0x603>
c0019d91:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d95:	8d 50 40             	lea    edx,[eax+0x40]
c0019d98:	80 fa 07             	cmp    dl,0x7
c0019d9b:	77 37                	ja     c0019dd4 <Vm::x87Handler(regs*)+0x3f5>
c0019d9d:	83 ec 0c             	sub    esp,0xc
c0019da0:	2d c0 00 00 00       	sub    eax,0xc0
c0019da5:	50                   	push   eax
c0019da6:	e8 f7 fa ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019dab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019db2:	89 c6                	mov    esi,eax
c0019db4:	89 d7                	mov    edi,edx
c0019db6:	e8 e7 fa ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019dbb:	57                   	push   edi
c0019dbc:	56                   	push   esi
c0019dbd:	52                   	push   edx
c0019dbe:	50                   	push   eax
c0019dbf:	e8 54 fa ff ff       	call   c0019818 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019dc4:	83 c4 1c             	add    esp,0x1c
c0019dc7:	52                   	push   edx
c0019dc8:	50                   	push   eax
c0019dc9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019dcd:	2d c0 00 00 00       	sub    eax,0xc0
c0019dd2:	eb 3d                	jmp    c0019e11 <Vm::x87Handler(regs*)+0x432>
c0019dd4:	8d 50 38             	lea    edx,[eax+0x38]
c0019dd7:	80 fa 07             	cmp    dl,0x7
c0019dda:	77 3b                	ja     c0019e17 <Vm::x87Handler(regs*)+0x438>
c0019ddc:	83 ec 0c             	sub    esp,0xc
c0019ddf:	2d c8 00 00 00       	sub    eax,0xc8
c0019de4:	50                   	push   eax
c0019de5:	e8 b8 fa ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019dea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019df1:	89 c6                	mov    esi,eax
c0019df3:	89 d7                	mov    edi,edx
c0019df5:	e8 a8 fa ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019dfa:	57                   	push   edi
c0019dfb:	56                   	push   esi
c0019dfc:	52                   	push   edx
c0019dfd:	50                   	push   eax
c0019dfe:	e8 4e fa ff ff       	call   c0019851 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019e03:	83 c4 1c             	add    esp,0x1c
c0019e06:	52                   	push   edx
c0019e07:	50                   	push   eax
c0019e08:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e0c:	2d c8 00 00 00       	sub    eax,0xc8
c0019e11:	50                   	push   eax
c0019e12:	e9 75 fc ff ff       	jmp    c0019a8c <Vm::x87Handler(regs*)+0xad>
c0019e17:	83 c0 18             	add    eax,0x18
c0019e1a:	3c 07                	cmp    al,0x7
c0019e1c:	0f 87 3b 04 00 00    	ja     c001a25d <Vm::x87Handler(regs*)+0x87e>
c0019e22:	83 ec 0c             	sub    esp,0xc
c0019e25:	6a 00                	push   0x0
c0019e27:	e8 76 fa ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019e2c:	89 c6                	mov    esi,eax
c0019e2e:	89 d7                	mov    edi,edx
c0019e30:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e34:	2d e8 00 00 00       	sub    eax,0xe8
c0019e39:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e3c:	e8 61 fa ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019e41:	57                   	push   edi
c0019e42:	56                   	push   esi
c0019e43:	52                   	push   edx
c0019e44:	50                   	push   eax
c0019e45:	e8 f8 f9 ff ff       	call   c0019842 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019e4a:	83 c4 1c             	add    esp,0x1c
c0019e4d:	52                   	push   edx
c0019e4e:	50                   	push   eax
c0019e4f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e53:	2d e8 00 00 00       	sub    eax,0xe8
c0019e58:	eb b7                	jmp    c0019e11 <Vm::x87Handler(regs*)+0x432>
c0019e5a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e5e:	8d 50 40             	lea    edx,[eax+0x40]
c0019e61:	80 fa 07             	cmp    dl,0x7
c0019e64:	77 3a                	ja     c0019ea0 <Vm::x87Handler(regs*)+0x4c1>
c0019e66:	83 ec 0c             	sub    esp,0xc
c0019e69:	2d c0 00 00 00       	sub    eax,0xc0
c0019e6e:	50                   	push   eax
c0019e6f:	e8 2e fa ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019e74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e7b:	89 c6                	mov    esi,eax
c0019e7d:	89 d7                	mov    edi,edx
c0019e7f:	e8 1e fa ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019e84:	57                   	push   edi
c0019e85:	56                   	push   esi
c0019e86:	52                   	push   edx
c0019e87:	50                   	push   eax
c0019e88:	e8 8b f9 ff ff       	call   c0019818 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019e8d:	83 c4 1c             	add    esp,0x1c
c0019e90:	52                   	push   edx
c0019e91:	50                   	push   eax
c0019e92:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e96:	2d c0 00 00 00       	sub    eax,0xc0
c0019e9b:	e9 9e 01 00 00       	jmp    c001a03e <Vm::x87Handler(regs*)+0x65f>
c0019ea0:	8d 50 20             	lea    edx,[eax+0x20]
c0019ea3:	80 fa 07             	cmp    dl,0x7
c0019ea6:	77 3a                	ja     c0019ee2 <Vm::x87Handler(regs*)+0x503>
c0019ea8:	83 ec 0c             	sub    esp,0xc
c0019eab:	2d e0 00 00 00       	sub    eax,0xe0
c0019eb0:	50                   	push   eax
c0019eb1:	e8 ec f9 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019eb6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019ebd:	89 c6                	mov    esi,eax
c0019ebf:	89 d7                	mov    edi,edx
c0019ec1:	e8 dc f9 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019ec6:	57                   	push   edi
c0019ec7:	56                   	push   esi
c0019ec8:	52                   	push   edx
c0019ec9:	50                   	push   eax
c0019eca:	e8 73 f9 ff ff       	call   c0019842 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019ecf:	83 c4 1c             	add    esp,0x1c
c0019ed2:	52                   	push   edx
c0019ed3:	50                   	push   eax
c0019ed4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ed8:	2d e0 00 00 00       	sub    eax,0xe0
c0019edd:	e9 5c 01 00 00       	jmp    c001a03e <Vm::x87Handler(regs*)+0x65f>
c0019ee2:	8d 50 18             	lea    edx,[eax+0x18]
c0019ee5:	80 fa 07             	cmp    dl,0x7
c0019ee8:	77 3b                	ja     c0019f25 <Vm::x87Handler(regs*)+0x546>
c0019eea:	83 ec 0c             	sub    esp,0xc
c0019eed:	6a 00                	push   0x0
c0019eef:	e8 ae f9 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019ef4:	89 c6                	mov    esi,eax
c0019ef6:	89 d7                	mov    edi,edx
c0019ef8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019efc:	2d e8 00 00 00       	sub    eax,0xe8
c0019f01:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f04:	e8 99 f9 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019f09:	57                   	push   edi
c0019f0a:	56                   	push   esi
c0019f0b:	52                   	push   edx
c0019f0c:	50                   	push   eax
c0019f0d:	e8 30 f9 ff ff       	call   c0019842 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019f12:	83 c4 1c             	add    esp,0x1c
c0019f15:	52                   	push   edx
c0019f16:	50                   	push   eax
c0019f17:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f1b:	2d e8 00 00 00       	sub    eax,0xe8
c0019f20:	e9 19 01 00 00       	jmp    c001a03e <Vm::x87Handler(regs*)+0x65f>
c0019f25:	8d 50 38             	lea    edx,[eax+0x38]
c0019f28:	80 fa 07             	cmp    dl,0x7
c0019f2b:	77 37                	ja     c0019f64 <Vm::x87Handler(regs*)+0x585>
c0019f2d:	83 ec 0c             	sub    esp,0xc
c0019f30:	2d c8 00 00 00       	sub    eax,0xc8
c0019f35:	50                   	push   eax
c0019f36:	e8 67 f9 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019f3b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019f42:	89 c6                	mov    esi,eax
c0019f44:	89 d7                	mov    edi,edx
c0019f46:	e8 57 f9 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019f4b:	57                   	push   edi
c0019f4c:	56                   	push   esi
c0019f4d:	52                   	push   edx
c0019f4e:	50                   	push   eax
c0019f4f:	e8 fd f8 ff ff       	call   c0019851 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019f54:	83 c4 1c             	add    esp,0x1c
c0019f57:	52                   	push   edx
c0019f58:	50                   	push   eax
c0019f59:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f5d:	2d c8 00 00 00       	sub    eax,0xc8
c0019f62:	eb 7d                	jmp    c0019fe1 <Vm::x87Handler(regs*)+0x602>
c0019f64:	3c f7                	cmp    al,0xf7
c0019f66:	76 38                	jbe    c0019fa0 <Vm::x87Handler(regs*)+0x5c1>
c0019f68:	83 ec 0c             	sub    esp,0xc
c0019f6b:	6a 00                	push   0x0
c0019f6d:	e8 30 f9 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019f72:	89 c6                	mov    esi,eax
c0019f74:	89 d7                	mov    edi,edx
c0019f76:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f7a:	2d f8 00 00 00       	sub    eax,0xf8
c0019f7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f82:	e8 1b f9 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019f87:	57                   	push   edi
c0019f88:	56                   	push   esi
c0019f89:	52                   	push   edx
c0019f8a:	50                   	push   eax
c0019f8b:	e8 e0 f8 ff ff       	call   c0019870 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019f90:	83 c4 1c             	add    esp,0x1c
c0019f93:	52                   	push   edx
c0019f94:	50                   	push   eax
c0019f95:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f99:	2d f8 00 00 00       	sub    eax,0xf8
c0019f9e:	eb 41                	jmp    c0019fe1 <Vm::x87Handler(regs*)+0x602>
c0019fa0:	8d 50 10             	lea    edx,[eax+0x10]
c0019fa3:	80 fa 07             	cmp    dl,0x7
c0019fa6:	0f 87 5a 01 00 00    	ja     c001a106 <Vm::x87Handler(regs*)+0x727>
c0019fac:	83 ec 0c             	sub    esp,0xc
c0019faf:	2d f0 00 00 00       	sub    eax,0xf0
c0019fb4:	50                   	push   eax
c0019fb5:	e8 e8 f8 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019fba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019fc1:	89 c6                	mov    esi,eax
c0019fc3:	89 d7                	mov    edi,edx
c0019fc5:	e8 d8 f8 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c0019fca:	57                   	push   edi
c0019fcb:	56                   	push   esi
c0019fcc:	52                   	push   edx
c0019fcd:	50                   	push   eax
c0019fce:	e8 9d f8 ff ff       	call   c0019870 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019fd3:	83 c4 1c             	add    esp,0x1c
c0019fd6:	52                   	push   edx
c0019fd7:	50                   	push   eax
c0019fd8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fdc:	2d f0 00 00 00       	sub    eax,0xf0
c0019fe1:	50                   	push   eax
c0019fe2:	e8 fe f8 ff ff       	call   c00198e5 <Vm::fpuSetReg(int, unsigned long long)>
c0019fe7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019feb:	e8 9d f9 ff ff       	call   c001998d <Vm::fpuPop()>
c0019ff0:	e9 5e fa ff ff       	jmp    c0019a53 <Vm::x87Handler(regs*)+0x74>
c0019ff5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ff9:	8d 50 30             	lea    edx,[eax+0x30]
c0019ffc:	80 fa 07             	cmp    dl,0x7
c0019fff:	77 1d                	ja     c001a01e <Vm::x87Handler(regs*)+0x63f>
c001a001:	83 ec 0c             	sub    esp,0xc
c001a004:	6a 00                	push   0x0
c001a006:	e8 97 f8 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c001a00b:	83 c4 0c             	add    esp,0xc
c001a00e:	52                   	push   edx
c001a00f:	50                   	push   eax
c001a010:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a014:	2d d0 00 00 00       	sub    eax,0xd0
c001a019:	e9 f3 fd ff ff       	jmp    c0019e11 <Vm::x87Handler(regs*)+0x432>
c001a01e:	8d 50 28             	lea    edx,[eax+0x28]
c001a021:	80 fa 07             	cmp    dl,0x7
c001a024:	77 28                	ja     c001a04e <Vm::x87Handler(regs*)+0x66f>
c001a026:	83 ec 0c             	sub    esp,0xc
c001a029:	6a 00                	push   0x0
c001a02b:	e8 72 f8 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c001a030:	83 c4 0c             	add    esp,0xc
c001a033:	52                   	push   edx
c001a034:	50                   	push   eax
c001a035:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a039:	2d d8 00 00 00       	sub    eax,0xd8
c001a03e:	50                   	push   eax
c001a03f:	e8 a1 f8 ff ff       	call   c00198e5 <Vm::fpuSetReg(int, unsigned long long)>
c001a044:	e8 44 f9 ff ff       	call   c001998d <Vm::fpuPop()>
c001a049:	e9 01 fa ff ff       	jmp    c0019a4f <Vm::x87Handler(regs*)+0x70>
c001a04e:	8d 50 20             	lea    edx,[eax+0x20]
c001a051:	80 fa 07             	cmp    dl,0x7
c001a054:	77 30                	ja     c001a086 <Vm::x87Handler(regs*)+0x6a7>
c001a056:	83 ec 0c             	sub    esp,0xc
c001a059:	2d e0 00 00 00       	sub    eax,0xe0
c001a05e:	50                   	push   eax
c001a05f:	e8 3e f8 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c001a064:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a06b:	89 c6                	mov    esi,eax
c001a06d:	89 d7                	mov    edi,edx
c001a06f:	e8 2e f8 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c001a074:	57                   	push   edi
c001a075:	56                   	push   esi
c001a076:	52                   	push   edx
c001a077:	50                   	push   eax
c001a078:	e8 48 f7 ff ff       	call   c00197c5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a07d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a081:	e9 54 02 00 00       	jmp    c001a2da <Vm::x87Handler(regs*)+0x8fb>
c001a086:	8d 50 18             	lea    edx,[eax+0x18]
c001a089:	80 fa 07             	cmp    dl,0x7
c001a08c:	0f 87 43 fb ff ff    	ja     c0019bd5 <Vm::x87Handler(regs*)+0x1f6>
c001a092:	83 ec 0c             	sub    esp,0xc
c001a095:	2d e8 00 00 00       	sub    eax,0xe8
c001a09a:	50                   	push   eax
c001a09b:	e8 02 f8 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c001a0a0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a0a7:	89 c6                	mov    esi,eax
c001a0a9:	89 d7                	mov    edi,edx
c001a0ab:	e8 f2 f7 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c001a0b0:	57                   	push   edi
c001a0b1:	56                   	push   esi
c001a0b2:	52                   	push   edx
c001a0b3:	50                   	push   eax
c001a0b4:	e8 0c f7 ff ff       	call   c00197c5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a0b9:	83 c4 20             	add    esp,0x20
c001a0bc:	e8 cc f8 ff ff       	call   c001998d <Vm::fpuPop()>
c001a0c1:	eb 62                	jmp    c001a125 <Vm::x87Handler(regs*)+0x746>
c001a0c3:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a0c7:	0f 85 0f 01 00 00    	jne    c001a1dc <Vm::x87Handler(regs*)+0x7fd>
c001a0cd:	83 ec 0c             	sub    esp,0xc
c001a0d0:	6a 01                	push   0x1
c001a0d2:	e8 cb f7 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c001a0d7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a0de:	89 c6                	mov    esi,eax
c001a0e0:	89 d7                	mov    edi,edx
c001a0e2:	e8 bb f7 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c001a0e7:	57                   	push   edi
c001a0e8:	56                   	push   esi
c001a0e9:	52                   	push   edx
c001a0ea:	50                   	push   eax
c001a0eb:	e8 d5 f6 ff ff       	call   c00197c5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a0f0:	83 c4 20             	add    esp,0x20
c001a0f3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a0f7:	e8 91 f8 ff ff       	call   c001998d <Vm::fpuPop()>
c001a0fc:	e8 8c f8 ff ff       	call   c001998d <Vm::fpuPop()>
c001a101:	e9 50 f9 ff ff       	jmp    c0019a56 <Vm::x87Handler(regs*)+0x77>
c001a106:	3c d9                	cmp    al,0xd9
c001a108:	0f 85 b5 02 00 00    	jne    c001a3c3 <Vm::x87Handler(regs*)+0x9e4>
c001a10e:	eb bd                	jmp    c001a0cd <Vm::x87Handler(regs*)+0x6ee>
c001a110:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a114:	0f 85 ea 02 00 00    	jne    c001a404 <Vm::x87Handler(regs*)+0xa25>
c001a11a:	0f b7 05 00 78 02 c0 	movzx  eax,WORD PTR ds:0xc0027800
c001a121:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a125:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a129:	e9 28 f9 ff ff       	jmp    c0019a56 <Vm::x87Handler(regs*)+0x77>
c001a12e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a132:	84 d2                	test   dl,dl
c001a134:	75 0f                	jne    c001a145 <Vm::x87Handler(regs*)+0x766>
c001a136:	83 ec 0c             	sub    esp,0xc
c001a139:	ff 36                	push   DWORD PTR [esi]
c001a13b:	e8 b1 f4 ff ff       	call   c00195f1 <Vm::fpu32ToInternal(unsigned int)>
c001a140:	e9 2c 01 00 00       	jmp    c001a271 <Vm::x87Handler(regs*)+0x892>
c001a145:	80 fa 01             	cmp    dl,0x1
c001a148:	75 0f                	jne    c001a159 <Vm::x87Handler(regs*)+0x77a>
c001a14a:	83 ec 0c             	sub    esp,0xc
c001a14d:	ff 36                	push   DWORD PTR [esi]
c001a14f:	e8 9d f4 ff ff       	call   c00195f1 <Vm::fpu32ToInternal(unsigned int)>
c001a154:	e9 81 02 00 00       	jmp    c001a3da <Vm::x87Handler(regs*)+0x9fb>
c001a159:	80 fa 04             	cmp    dl,0x4
c001a15c:	75 0f                	jne    c001a16d <Vm::x87Handler(regs*)+0x78e>
c001a15e:	83 ec 0c             	sub    esp,0xc
c001a161:	ff 36                	push   DWORD PTR [esi]
c001a163:	e8 89 f4 ff ff       	call   c00195f1 <Vm::fpu32ToInternal(unsigned int)>
c001a168:	e9 86 01 00 00       	jmp    c001a2f3 <Vm::x87Handler(regs*)+0x914>
c001a16d:	80 fa 05             	cmp    dl,0x5
c001a170:	75 1b                	jne    c001a18d <Vm::x87Handler(regs*)+0x7ae>
c001a172:	83 ec 0c             	sub    esp,0xc
c001a175:	6a 00                	push   0x0
c001a177:	e8 26 f7 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c001a17c:	89 c7                	mov    edi,eax
c001a17e:	89 d5                	mov    ebp,edx
c001a180:	58                   	pop    eax
c001a181:	ff 36                	push   DWORD PTR [esi]
c001a183:	e8 69 f4 ff ff       	call   c00195f1 <Vm::fpu32ToInternal(unsigned int)>
c001a188:	e9 a3 01 00 00       	jmp    c001a330 <Vm::x87Handler(regs*)+0x951>
c001a18d:	80 fa 06             	cmp    dl,0x6
c001a190:	75 0f                	jne    c001a1a1 <Vm::x87Handler(regs*)+0x7c2>
c001a192:	83 ec 0c             	sub    esp,0xc
c001a195:	ff 36                	push   DWORD PTR [esi]
c001a197:	e8 55 f4 ff ff       	call   c00195f1 <Vm::fpu32ToInternal(unsigned int)>
c001a19c:	e9 ae 01 00 00       	jmp    c001a34f <Vm::x87Handler(regs*)+0x970>
c001a1a1:	31 c0                	xor    eax,eax
c001a1a3:	80 fa 07             	cmp    dl,0x7
c001a1a6:	0f 85 94 02 00 00    	jne    c001a440 <Vm::x87Handler(regs*)+0xa61>
c001a1ac:	83 ec 0c             	sub    esp,0xc
c001a1af:	6a 00                	push   0x0
c001a1b1:	e8 ec f6 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c001a1b6:	89 c7                	mov    edi,eax
c001a1b8:	89 d5                	mov    ebp,edx
c001a1ba:	58                   	pop    eax
c001a1bb:	ff 36                	push   DWORD PTR [esi]
c001a1bd:	e8 2f f4 ff ff       	call   c00195f1 <Vm::fpu32ToInternal(unsigned int)>
c001a1c2:	e9 cb 01 00 00       	jmp    c001a392 <Vm::x87Handler(regs*)+0x9b3>
c001a1c7:	80 fa 03             	cmp    dl,0x3
c001a1ca:	0f 85 d3 01 00 00    	jne    c001a3a3 <Vm::x87Handler(regs*)+0x9c4>
c001a1d0:	e8 b8 f7 ff ff       	call   c001998d <Vm::fpuPop()>
c001a1d5:	51                   	push   ecx
c001a1d6:	51                   	push   ecx
c001a1d7:	e9 de 01 00 00       	jmp    c001a3ba <Vm::x87Handler(regs*)+0x9db>
c001a1dc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a1e0:	80 fa 01             	cmp    dl,0x1
c001a1e3:	75 09                	jne    c001a1ee <Vm::x87Handler(regs*)+0x80f>
c001a1e5:	57                   	push   edi
c001a1e6:	57                   	push   edi
c001a1e7:	8b 06                	mov    eax,DWORD PTR [esi]
c001a1e9:	e9 e3 01 00 00       	jmp    c001a3d1 <Vm::x87Handler(regs*)+0x9f2>
c001a1ee:	80 fa 04             	cmp    dl,0x4
c001a1f1:	75 12                	jne    c001a205 <Vm::x87Handler(regs*)+0x826>
c001a1f3:	31 d2                	xor    edx,edx
c001a1f5:	51                   	push   ecx
c001a1f6:	51                   	push   ecx
c001a1f7:	8b 06                	mov    eax,DWORD PTR [esi]
c001a1f9:	52                   	push   edx
c001a1fa:	50                   	push   eax
c001a1fb:	e8 d0 f4 ff ff       	call   c00196d0 <Vm::fpuLongToFloat(long long)>
c001a200:	e9 ee 00 00 00       	jmp    c001a2f3 <Vm::x87Handler(regs*)+0x914>
c001a205:	31 c0                	xor    eax,eax
c001a207:	80 fa 07             	cmp    dl,0x7
c001a20a:	0f 85 30 02 00 00    	jne    c001a440 <Vm::x87Handler(regs*)+0xa61>
c001a210:	83 ec 0c             	sub    esp,0xc
c001a213:	6a 00                	push   0x0
c001a215:	e8 88 f6 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c001a21a:	89 c7                	mov    edi,eax
c001a21c:	89 d5                	mov    ebp,edx
c001a21e:	58                   	pop    eax
c001a21f:	8b 06                	mov    eax,DWORD PTR [esi]
c001a221:	5a                   	pop    edx
c001a222:	31 d2                	xor    edx,edx
c001a224:	52                   	push   edx
c001a225:	50                   	push   eax
c001a226:	e8 a5 f4 ff ff       	call   c00196d0 <Vm::fpuLongToFloat(long long)>
c001a22b:	e9 62 01 00 00       	jmp    c001a392 <Vm::x87Handler(regs*)+0x9b3>
c001a230:	84 d2                	test   dl,dl
c001a232:	75 0d                	jne    c001a241 <Vm::x87Handler(regs*)+0x862>
c001a234:	31 d2                	xor    edx,edx
c001a236:	55                   	push   ebp
c001a237:	55                   	push   ebp
c001a238:	8b 06                	mov    eax,DWORD PTR [esi]
c001a23a:	52                   	push   edx
c001a23b:	50                   	push   eax
c001a23c:	e9 d3 01 00 00       	jmp    c001a414 <Vm::x87Handler(regs*)+0xa35>
c001a241:	31 c0                	xor    eax,eax
c001a243:	80 fa 02             	cmp    dl,0x2
c001a246:	0f 85 f4 01 00 00    	jne    c001a440 <Vm::x87Handler(regs*)+0xa61>
c001a24c:	83 ec 0c             	sub    esp,0xc
c001a24f:	6a 00                	push   0x0
c001a251:	e8 4c f6 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c001a256:	59                   	pop    ecx
c001a257:	5f                   	pop    edi
c001a258:	e9 6a f9 ff ff       	jmp    c0019bc7 <Vm::x87Handler(regs*)+0x1e8>
c001a25d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a261:	84 d2                	test   dl,dl
c001a263:	75 2a                	jne    c001a28f <Vm::x87Handler(regs*)+0x8b0>
c001a265:	50                   	push   eax
c001a266:	50                   	push   eax
c001a267:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a26a:	ff 36                	push   DWORD PTR [esi]
c001a26c:	e8 c5 f3 ff ff       	call   c0019636 <Vm::fpu64ToInternal(unsigned long long)>
c001a271:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a278:	89 c6                	mov    esi,eax
c001a27a:	89 d7                	mov    edi,edx
c001a27c:	e8 21 f6 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c001a281:	57                   	push   edi
c001a282:	56                   	push   esi
c001a283:	52                   	push   edx
c001a284:	50                   	push   eax
c001a285:	e8 8e f5 ff ff       	call   c0019818 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a28a:	e9 64 01 00 00       	jmp    c001a3f3 <Vm::x87Handler(regs*)+0xa14>
c001a28f:	80 fa 01             	cmp    dl,0x1
c001a292:	75 11                	jne    c001a2a5 <Vm::x87Handler(regs*)+0x8c6>
c001a294:	50                   	push   eax
c001a295:	50                   	push   eax
c001a296:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a299:	ff 36                	push   DWORD PTR [esi]
c001a29b:	e8 96 f3 ff ff       	call   c0019636 <Vm::fpu64ToInternal(unsigned long long)>
c001a2a0:	e9 35 01 00 00       	jmp    c001a3da <Vm::x87Handler(regs*)+0x9fb>
c001a2a5:	80 fa 02             	cmp    dl,0x2
c001a2a8:	0f 85 54 f9 ff ff    	jne    c0019c02 <Vm::x87Handler(regs*)+0x223>
c001a2ae:	55                   	push   ebp
c001a2af:	55                   	push   ebp
c001a2b0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2b3:	ff 36                	push   DWORD PTR [esi]
c001a2b5:	e8 7c f3 ff ff       	call   c0019636 <Vm::fpu64ToInternal(unsigned long long)>
c001a2ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2c1:	89 c6                	mov    esi,eax
c001a2c3:	89 d7                	mov    edi,edx
c001a2c5:	e8 d8 f5 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c001a2ca:	57                   	push   edi
c001a2cb:	56                   	push   esi
c001a2cc:	52                   	push   edx
c001a2cd:	50                   	push   eax
c001a2ce:	e8 f2 f4 ff ff       	call   c00197c5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a2d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a2d7:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a2da:	83 c4 20             	add    esp,0x20
c001a2dd:	e9 74 f7 ff ff       	jmp    c0019a56 <Vm::x87Handler(regs*)+0x77>
c001a2e2:	80 fa 04             	cmp    dl,0x4
c001a2e5:	75 2a                	jne    c001a311 <Vm::x87Handler(regs*)+0x932>
c001a2e7:	51                   	push   ecx
c001a2e8:	51                   	push   ecx
c001a2e9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2ec:	ff 36                	push   DWORD PTR [esi]
c001a2ee:	e8 43 f3 ff ff       	call   c0019636 <Vm::fpu64ToInternal(unsigned long long)>
c001a2f3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2fa:	89 c6                	mov    esi,eax
c001a2fc:	89 d7                	mov    edi,edx
c001a2fe:	e8 9f f5 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c001a303:	57                   	push   edi
c001a304:	56                   	push   esi
c001a305:	52                   	push   edx
c001a306:	50                   	push   eax
c001a307:	e8 36 f5 ff ff       	call   c0019842 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a30c:	e9 e2 00 00 00       	jmp    c001a3f3 <Vm::x87Handler(regs*)+0xa14>
c001a311:	80 fa 05             	cmp    dl,0x5
c001a314:	75 28                	jne    c001a33e <Vm::x87Handler(regs*)+0x95f>
c001a316:	83 ec 0c             	sub    esp,0xc
c001a319:	6a 00                	push   0x0
c001a31b:	e8 82 f5 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c001a320:	89 c7                	mov    edi,eax
c001a322:	89 d5                	mov    ebp,edx
c001a324:	58                   	pop    eax
c001a325:	5a                   	pop    edx
c001a326:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a329:	ff 36                	push   DWORD PTR [esi]
c001a32b:	e8 06 f3 ff ff       	call   c0019636 <Vm::fpu64ToInternal(unsigned long long)>
c001a330:	83 c4 10             	add    esp,0x10
c001a333:	55                   	push   ebp
c001a334:	57                   	push   edi
c001a335:	52                   	push   edx
c001a336:	50                   	push   eax
c001a337:	e8 06 f5 ff ff       	call   c0019842 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a33c:	eb 60                	jmp    c001a39e <Vm::x87Handler(regs*)+0x9bf>
c001a33e:	80 fa 06             	cmp    dl,0x6
c001a341:	75 2a                	jne    c001a36d <Vm::x87Handler(regs*)+0x98e>
c001a343:	51                   	push   ecx
c001a344:	51                   	push   ecx
c001a345:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a348:	ff 36                	push   DWORD PTR [esi]
c001a34a:	e8 e7 f2 ff ff       	call   c0019636 <Vm::fpu64ToInternal(unsigned long long)>
c001a34f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a356:	89 c6                	mov    esi,eax
c001a358:	89 d7                	mov    edi,edx
c001a35a:	e8 43 f5 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c001a35f:	57                   	push   edi
c001a360:	56                   	push   esi
c001a361:	52                   	push   edx
c001a362:	50                   	push   eax
c001a363:	e8 08 f5 ff ff       	call   c0019870 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a368:	e9 86 00 00 00       	jmp    c001a3f3 <Vm::x87Handler(regs*)+0xa14>
c001a36d:	31 c0                	xor    eax,eax
c001a36f:	80 fa 07             	cmp    dl,0x7
c001a372:	0f 85 c8 00 00 00    	jne    c001a440 <Vm::x87Handler(regs*)+0xa61>
c001a378:	83 ec 0c             	sub    esp,0xc
c001a37b:	6a 00                	push   0x0
c001a37d:	e8 20 f5 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c001a382:	89 c7                	mov    edi,eax
c001a384:	89 d5                	mov    ebp,edx
c001a386:	58                   	pop    eax
c001a387:	5a                   	pop    edx
c001a388:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a38b:	ff 36                	push   DWORD PTR [esi]
c001a38d:	e8 a4 f2 ff ff       	call   c0019636 <Vm::fpu64ToInternal(unsigned long long)>
c001a392:	83 c4 10             	add    esp,0x10
c001a395:	55                   	push   ebp
c001a396:	57                   	push   edi
c001a397:	52                   	push   edx
c001a398:	50                   	push   eax
c001a399:	e8 d2 f4 ff ff       	call   c0019870 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a39e:	83 c4 0c             	add    esp,0xc
c001a3a1:	eb 53                	jmp    c001a3f6 <Vm::x87Handler(regs*)+0xa17>
c001a3a3:	31 c0                	xor    eax,eax
c001a3a5:	80 fa 02             	cmp    dl,0x2
c001a3a8:	0f 85 92 00 00 00    	jne    c001a440 <Vm::x87Handler(regs*)+0xa61>
c001a3ae:	83 ec 0c             	sub    esp,0xc
c001a3b1:	6a 00                	push   0x0
c001a3b3:	e8 ea f4 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c001a3b8:	59                   	pop    ecx
c001a3b9:	5f                   	pop    edi
c001a3ba:	52                   	push   edx
c001a3bb:	50                   	push   eax
c001a3bc:	e8 27 f2 ff ff       	call   c00195e8 <Vm::fpuInternalTo64(unsigned long long)>
c001a3c1:	eb 70                	jmp    c001a433 <Vm::x87Handler(regs*)+0xa54>
c001a3c3:	31 c0                	xor    eax,eax
c001a3c5:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a3ca:	75 74                	jne    c001a440 <Vm::x87Handler(regs*)+0xa61>
c001a3cc:	50                   	push   eax
c001a3cd:	50                   	push   eax
c001a3ce:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a3d1:	31 d2                	xor    edx,edx
c001a3d3:	52                   	push   edx
c001a3d4:	50                   	push   eax
c001a3d5:	e8 f6 f2 ff ff       	call   c00196d0 <Vm::fpuLongToFloat(long long)>
c001a3da:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a3e1:	89 c6                	mov    esi,eax
c001a3e3:	89 d7                	mov    edi,edx
c001a3e5:	e8 b8 f4 ff ff       	call   c00198a2 <Vm::fpuGetReg(int)>
c001a3ea:	57                   	push   edi
c001a3eb:	56                   	push   esi
c001a3ec:	52                   	push   edx
c001a3ed:	50                   	push   eax
c001a3ee:	e8 5e f4 ff ff       	call   c0019851 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a3f3:	83 c4 1c             	add    esp,0x1c
c001a3f6:	52                   	push   edx
c001a3f7:	50                   	push   eax
c001a3f8:	6a 00                	push   0x0
c001a3fa:	e8 e6 f4 ff ff       	call   c00198e5 <Vm::fpuSetReg(int, unsigned long long)>
c001a3ff:	e9 f2 f7 ff ff       	jmp    c0019bf6 <Vm::x87Handler(regs*)+0x217>
c001a404:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a408:	80 fa 05             	cmp    dl,0x5
c001a40b:	75 11                	jne    c001a41e <Vm::x87Handler(regs*)+0xa3f>
c001a40d:	55                   	push   ebp
c001a40e:	55                   	push   ebp
c001a40f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a412:	ff 36                	push   DWORD PTR [esi]
c001a414:	e8 81 f2 ff ff       	call   c001969a <Vm::fpuULongToFloat(unsigned long long)>
c001a419:	e9 cf f7 ff ff       	jmp    c0019bed <Vm::x87Handler(regs*)+0x20e>
c001a41e:	31 c0                	xor    eax,eax
c001a420:	80 fa 07             	cmp    dl,0x7
c001a423:	75 1b                	jne    c001a440 <Vm::x87Handler(regs*)+0xa61>
c001a425:	e8 63 f5 ff ff       	call   c001998d <Vm::fpuPop()>
c001a42a:	51                   	push   ecx
c001a42b:	51                   	push   ecx
c001a42c:	52                   	push   edx
c001a42d:	50                   	push   eax
c001a42e:	e8 0c f2 ff ff       	call   c001963f <Vm::fpuFloatToLong(unsigned long long)>
c001a433:	83 c4 10             	add    esp,0x10
c001a436:	89 06                	mov    DWORD PTR [esi],eax
c001a438:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a43b:	e9 f8 f7 ff ff       	jmp    c0019c38 <Vm::x87Handler(regs*)+0x259>
c001a440:	83 c4 1c             	add    esp,0x1c
c001a443:	5b                   	pop    ebx
c001a444:	5e                   	pop    esi
c001a445:	5f                   	pop    edi
c001a446:	5d                   	pop    ebp
c001a447:	c3                   	ret    

c001a448 <__static_initialization_and_destruction_0(int, int)>:
c001a448:	83 ec 0c             	sub    esp,0xc
c001a44b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001a450:	75 1a                	jne    c001a46c <__static_initialization_and_destruction_0(int, int)+0x24>
c001a452:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001a45a:	75 10                	jne    c001a46c <__static_initialization_and_destruction_0(int, int)+0x24>
c001a45c:	83 ec 0c             	sub    esp,0xc
c001a45f:	68 00 78 02 c0       	push   0xc0027800
c001a464:	e8 17 73 00 00       	call   c0021780 <Vm::_FPUState::_FPUState()>
c001a469:	83 c4 10             	add    esp,0x10
c001a46c:	90                   	nop
c001a46d:	83 c4 0c             	add    esp,0xc
c001a470:	c3                   	ret    

c001a471 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001a471:	83 ec 0c             	sub    esp,0xc
c001a474:	83 ec 08             	sub    esp,0x8
c001a477:	68 ff ff 00 00       	push   0xffff
c001a47c:	6a 01                	push   0x1
c001a47e:	e8 c5 ff ff ff       	call   c001a448 <__static_initialization_and_destruction_0(int, int)>
c001a483:	83 c4 10             	add    esp,0x10
c001a486:	83 c4 0c             	add    esp,0xc
c001a489:	c3                   	ret    

c001a48a <FAT::getName()>:
c001a48a:	b8 50 49 02 c0       	mov    eax,0xc0024950
c001a48f:	c3                   	ret    

c001a490 <FAT::tell(void*, unsigned long long*)>:
c001a490:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a495:	75 06                	jne    c001a49d <FAT::tell(void*, unsigned long long*)+0xd>
c001a497:	b8 04 00 00 00       	mov    eax,0x4
c001a49c:	c3                   	ret    
c001a49d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a4a2:	75 06                	jne    c001a4aa <FAT::tell(void*, unsigned long long*)+0x1a>
c001a4a4:	b8 04 00 00 00       	mov    eax,0x4
c001a4a9:	c3                   	ret    
c001a4aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4ae:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a4b1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a4b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a4b8:	89 01                	mov    DWORD PTR [ecx],eax
c001a4ba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a4bd:	b8 00 00 00 00       	mov    eax,0x0
c001a4c2:	c3                   	ret    
c001a4c3:	90                   	nop

c001a4c4 <FAT::stat(void*, unsigned long long*)>:
c001a4c4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a4c9:	75 06                	jne    c001a4d1 <FAT::stat(void*, unsigned long long*)+0xd>
c001a4cb:	b8 04 00 00 00       	mov    eax,0x4
c001a4d0:	c3                   	ret    
c001a4d1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a4d6:	75 06                	jne    c001a4de <FAT::stat(void*, unsigned long long*)+0x1a>
c001a4d8:	b8 04 00 00 00       	mov    eax,0x4
c001a4dd:	c3                   	ret    
c001a4de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4e2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a4e5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a4e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a4ec:	89 01                	mov    DWORD PTR [ecx],eax
c001a4ee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a4f1:	b8 00 00 00 00       	mov    eax,0x0
c001a4f6:	c3                   	ret    
c001a4f7:	90                   	nop

c001a4f8 <FAT::~FAT()>:
c001a4f8:	83 ec 0c             	sub    esp,0xc
c001a4fb:	ba 9c 49 02 c0       	mov    edx,0xc002499c
c001a500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a504:	89 10                	mov    DWORD PTR [eax],edx
c001a506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a50a:	83 ec 0c             	sub    esp,0xc
c001a50d:	50                   	push   eax
c001a50e:	e8 e5 28 ff ff       	call   c000cdf8 <Filesystem::~Filesystem()>
c001a513:	83 c4 10             	add    esp,0x10
c001a516:	90                   	nop
c001a517:	83 c4 0c             	add    esp,0xc
c001a51a:	c3                   	ret    
c001a51b:	90                   	nop

c001a51c <FAT::~FAT()>:
c001a51c:	83 ec 0c             	sub    esp,0xc
c001a51f:	83 ec 0c             	sub    esp,0xc
c001a522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a526:	e8 cd ff ff ff       	call   c001a4f8 <FAT::~FAT()>
c001a52b:	83 c4 10             	add    esp,0x10
c001a52e:	83 ec 08             	sub    esp,0x8
c001a531:	6a 08                	push   0x8
c001a533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a537:	e8 a1 24 ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c001a53c:	83 c4 10             	add    esp,0x10
c001a53f:	83 c4 0c             	add    esp,0xc
c001a542:	c3                   	ret    
c001a543:	90                   	nop

c001a544 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a544:	83 ec 1c             	sub    esp,0x1c
c001a547:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a54e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a553:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a557:	8b 04 85 80 78 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8780]
c001a55e:	83 f8 ff             	cmp    eax,0xffffffff
c001a561:	75 34                	jne    c001a597 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001a563:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a567:	88 c2                	mov    dl,al
c001a569:	a1 60 78 02 c0       	mov    eax,ds:0xc0027860
c001a56e:	01 d0                	add    eax,edx
c001a570:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a574:	8b 15 60 78 02 c0    	mov    edx,DWORD PTR ds:0xc0027860
c001a57a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a57e:	89 14 85 80 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8780],edx
c001a585:	a1 60 78 02 c0       	mov    eax,ds:0xc0027860
c001a58a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a58e:	89 14 85 00 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8700],edx
c001a595:	eb 17                	jmp    c001a5ae <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001a597:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a59b:	88 c2                	mov    dl,al
c001a59d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5a1:	8b 04 85 80 78 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8780]
c001a5a8:	01 d0                	add    eax,edx
c001a5aa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a5ae:	83 ec 04             	sub    esp,0x4
c001a5b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a5b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a5b9:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a5bd:	50                   	push   eax
c001a5be:	e8 3b c7 fe ff       	call   c0006cfe <f_getlabel>
c001a5c3:	83 c4 10             	add    esp,0x10
c001a5c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5ca:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a5cf:	75 07                	jne    c001a5d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001a5d1:	b8 00 00 00 00       	mov    eax,0x0
c001a5d6:	eb 05                	jmp    c001a5dd <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001a5d8:	b8 01 00 00 00       	mov    eax,0x1
c001a5dd:	83 c4 1c             	add    esp,0x1c
c001a5e0:	c3                   	ret    
c001a5e1:	90                   	nop

c001a5e2 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a5e2:	57                   	push   edi
c001a5e3:	83 ec 58             	sub    esp,0x58
c001a5e6:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a5ee:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a5f2:	b9 0f 00 00 00       	mov    ecx,0xf
c001a5f7:	b8 00 00 00 00       	mov    eax,0x0
c001a5fc:	fc                   	cld    
c001a5fd:	89 d7                	mov    edi,edx
c001a5ff:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a601:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a605:	8b 04 85 80 78 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8780]
c001a60c:	83 f8 ff             	cmp    eax,0xffffffff
c001a60f:	75 34                	jne    c001a645 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001a611:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a615:	88 c2                	mov    dl,al
c001a617:	a1 60 78 02 c0       	mov    eax,ds:0xc0027860
c001a61c:	01 d0                	add    eax,edx
c001a61e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a622:	8b 15 60 78 02 c0    	mov    edx,DWORD PTR ds:0xc0027860
c001a628:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a62c:	89 14 85 80 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8780],edx
c001a633:	a1 60 78 02 c0       	mov    eax,ds:0xc0027860
c001a638:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a63c:	89 14 85 00 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8700],edx
c001a643:	eb 17                	jmp    c001a65c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001a645:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a649:	88 c2                	mov    dl,al
c001a64b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a64f:	8b 04 85 80 78 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8780]
c001a656:	01 d0                	add    eax,edx
c001a658:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a65c:	83 ec 08             	sub    esp,0x8
c001a65f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a663:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a667:	50                   	push   eax
c001a668:	e8 df 62 fe ff       	call   c000094c <strcat>
c001a66d:	83 c4 10             	add    esp,0x10
c001a670:	83 ec 0c             	sub    esp,0xc
c001a673:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a677:	50                   	push   eax
c001a678:	e8 6f c8 fe ff       	call   c0006eec <f_setlabel>
c001a67d:	83 c4 10             	add    esp,0x10
c001a680:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a684:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a689:	75 07                	jne    c001a692 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001a68b:	b8 00 00 00 00       	mov    eax,0x0
c001a690:	eb 05                	jmp    c001a697 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001a692:	b8 01 00 00 00       	mov    eax,0x1
c001a697:	83 c4 58             	add    esp,0x58
c001a69a:	5f                   	pop    edi
c001a69b:	c3                   	ret    

c001a69c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a69c:	83 ec 2c             	sub    esp,0x2c
c001a69f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a6a7:	83 ec 08             	sub    esp,0x8
c001a6aa:	68 74 49 02 c0       	push   0xc0024974
c001a6af:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a6b3:	e8 e0 61 fe ff       	call   c0000898 <strcmp>
c001a6b8:	83 c4 10             	add    esp,0x10
c001a6bb:	85 c0                	test   eax,eax
c001a6bd:	0f 94 c0             	sete   al
c001a6c0:	84 c0                	test   al,al
c001a6c2:	74 0d                	je     c001a6d1 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001a6c4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a6cc:	e9 a6 00 00 00       	jmp    c001a777 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a6d1:	83 ec 08             	sub    esp,0x8
c001a6d4:	68 66 49 02 c0       	push   0xc0024966
c001a6d9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a6dd:	e8 b6 61 fe ff       	call   c0000898 <strcmp>
c001a6e2:	83 c4 10             	add    esp,0x10
c001a6e5:	85 c0                	test   eax,eax
c001a6e7:	0f 94 c0             	sete   al
c001a6ea:	84 c0                	test   al,al
c001a6ec:	74 0a                	je     c001a6f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001a6ee:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a6f6:	eb 7f                	jmp    c001a777 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a6f8:	83 ec 08             	sub    esp,0x8
c001a6fb:	68 6c 49 02 c0       	push   0xc002496c
c001a700:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a704:	e8 8f 61 fe ff       	call   c0000898 <strcmp>
c001a709:	83 c4 10             	add    esp,0x10
c001a70c:	85 c0                	test   eax,eax
c001a70e:	0f 94 c0             	sete   al
c001a711:	84 c0                	test   al,al
c001a713:	74 0a                	je     c001a71f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001a715:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a71d:	eb 58                	jmp    c001a777 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a71f:	83 ec 08             	sub    esp,0x8
c001a722:	68 ec 1e 02 c0       	push   0xc0021eec
c001a727:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a72b:	e8 68 61 fe ff       	call   c0000898 <strcmp>
c001a730:	83 c4 10             	add    esp,0x10
c001a733:	85 c0                	test   eax,eax
c001a735:	0f 94 c0             	sete   al
c001a738:	84 c0                	test   al,al
c001a73a:	74 0a                	je     c001a746 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001a73c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a744:	eb 31                	jmp    c001a777 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a746:	83 ec 08             	sub    esp,0x8
c001a749:	68 72 49 02 c0       	push   0xc0024972
c001a74e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a752:	e8 41 61 fe ff       	call   c0000898 <strcmp>
c001a757:	83 c4 10             	add    esp,0x10
c001a75a:	85 c0                	test   eax,eax
c001a75c:	0f 94 c0             	sete   al
c001a75f:	84 c0                	test   al,al
c001a761:	74 0a                	je     c001a76d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001a763:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a76b:	eb 0a                	jmp    c001a777 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a76d:	b8 08 00 00 00       	mov    eax,0x8
c001a772:	e9 df 00 00 00       	jmp    c001a856 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c001a777:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a77e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a783:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a787:	8b 04 85 80 78 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8780]
c001a78e:	83 f8 ff             	cmp    eax,0xffffffff
c001a791:	75 34                	jne    c001a7c7 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001a793:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a797:	88 c2                	mov    dl,al
c001a799:	a1 60 78 02 c0       	mov    eax,ds:0xc0027860
c001a79e:	01 d0                	add    eax,edx
c001a7a0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a7a4:	8b 15 60 78 02 c0    	mov    edx,DWORD PTR ds:0xc0027860
c001a7aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7ae:	89 14 85 80 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8780],edx
c001a7b5:	a1 60 78 02 c0       	mov    eax,ds:0xc0027860
c001a7ba:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a7be:	89 14 85 00 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8700],edx
c001a7c5:	eb 17                	jmp    c001a7de <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001a7c7:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a7cb:	88 c2                	mov    dl,al
c001a7cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7d1:	8b 04 85 80 78 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8780]
c001a7d8:	01 d0                	add    eax,edx
c001a7da:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a7de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a7e2:	88 04 24             	mov    BYTE PTR [esp],al
c001a7e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a7e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a7ed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a7f5:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a7fa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a802:	83 ec 0c             	sub    esp,0xc
c001a805:	68 00 20 00 00       	push   0x2000
c001a80a:	e8 4e f2 fe ff       	call   c0009a5d <malloc>
c001a80f:	83 c4 10             	add    esp,0x10
c001a812:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a816:	68 00 20 00 00       	push   0x2000
c001a81b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a81f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a823:	50                   	push   eax
c001a824:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a828:	50                   	push   eax
c001a829:	e8 3f cd fe ff       	call   c000756d <f_mkfs>
c001a82e:	83 c4 10             	add    esp,0x10
c001a831:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a835:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a83a:	75 07                	jne    c001a843 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001a83c:	b8 00 00 00 00       	mov    eax,0x0
c001a841:	eb 13                	jmp    c001a856 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c001a843:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a848:	75 07                	jne    c001a851 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c001a84a:	b8 09 00 00 00       	mov    eax,0x9
c001a84f:	eb 05                	jmp    c001a856 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c001a851:	b8 01 00 00 00       	mov    eax,0x1
c001a856:	83 c4 2c             	add    esp,0x2c
c001a859:	c3                   	ret    

c001a85a <FAT::tryMount(LogicalDisk*, int)>:
c001a85a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a860:	a1 60 78 02 c0       	mov    eax,ds:0xc0027860
c001a865:	83 f8 14             	cmp    eax,0x14
c001a868:	75 17                	jne    c001a881 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001a86a:	83 ec 0c             	sub    esp,0xc
c001a86d:	68 78 49 02 c0       	push   0xc0024978
c001a872:	e8 06 9c ff ff       	call   c001447d <Krnl::panic(char const*)>
c001a877:	83 c4 10             	add    esp,0x10
c001a87a:	b0 00                	mov    al,0x0
c001a87c:	e9 d7 01 00 00       	jmp    c001aa58 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a881:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a888:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a88e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a894:	3d 00 02 00 00       	cmp    eax,0x200
c001a899:	74 07                	je     c001a8a2 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001a89b:	b0 00                	mov    al,0x0
c001a89d:	e9 b6 01 00 00       	jmp    c001aa58 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a8a2:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a8aa:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a8b1:	8b 04 85 80 78 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8780]
c001a8b8:	83 f8 ff             	cmp    eax,0xffffffff
c001a8bb:	74 07                	je     c001a8c4 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001a8bd:	b0 01                	mov    al,0x1
c001a8bf:	e9 94 01 00 00       	jmp    c001aa58 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a8c4:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a8ce:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a8d6:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a8dd:	88 c2                	mov    dl,al
c001a8df:	a1 60 78 02 c0       	mov    eax,ds:0xc0027860
c001a8e4:	01 d0                	add    eax,edx
c001a8e6:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a8ed:	8b 15 60 78 02 c0    	mov    edx,DWORD PTR ds:0xc0027860
c001a8f3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a8fa:	89 14 85 80 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8780],edx
c001a901:	a1 60 78 02 c0       	mov    eax,ds:0xc0027860
c001a906:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a90d:	89 14 85 00 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8700],edx
c001a914:	83 ec 0c             	sub    esp,0xc
c001a917:	68 54 02 00 00       	push   0x254
c001a91c:	e8 3c f1 fe ff       	call   c0009a5d <malloc>
c001a921:	83 c4 10             	add    esp,0x10
c001a924:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a92b:	83 ec 04             	sub    esp,0x4
c001a92e:	6a 00                	push   0x0
c001a930:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a937:	50                   	push   eax
c001a938:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a93f:	e8 b1 a5 fe ff       	call   c0004ef5 <f_mount>
c001a944:	83 c4 10             	add    esp,0x10
c001a947:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a94e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a956:	74 19                	je     c001a971 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001a958:	83 ec 0c             	sub    esp,0xc
c001a95b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a962:	e8 16 f1 fe ff       	call   c0009a7d <rfree>
c001a967:	83 c4 10             	add    esp,0x10
c001a96a:	b0 00                	mov    al,0x0
c001a96c:	e9 e7 00 00 00       	jmp    c001aa58 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a971:	83 ec 04             	sub    esp,0x4
c001a974:	68 00 01 00 00       	push   0x100
c001a979:	6a 00                	push   0x0
c001a97b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a982:	50                   	push   eax
c001a983:	e8 c8 5d fe ff       	call   c0000750 <memset>
c001a988:	83 c4 10             	add    esp,0x10
c001a98b:	83 ec 08             	sub    esp,0x8
c001a98e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a995:	50                   	push   eax
c001a996:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a99d:	50                   	push   eax
c001a99e:	e8 a9 5f fe ff       	call   c000094c <strcat>
c001a9a3:	83 c4 10             	add    esp,0x10
c001a9a6:	83 ec 08             	sub    esp,0x8
c001a9a9:	68 86 49 02 c0       	push   0xc0024986
c001a9ae:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a9b5:	50                   	push   eax
c001a9b6:	e8 91 5f fe ff       	call   c000094c <strcat>
c001a9bb:	83 c4 10             	add    esp,0x10
c001a9be:	83 ec 04             	sub    esp,0x4
c001a9c1:	6a 01                	push   0x1
c001a9c3:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a9ca:	50                   	push   eax
c001a9cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a9cf:	50                   	push   eax
c001a9d0:	e8 82 a5 fe ff       	call   c0004f57 <f_open>
c001a9d5:	83 c4 10             	add    esp,0x10
c001a9d8:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a9df:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a9e6:	85 c0                	test   eax,eax
c001a9e8:	74 0a                	je     c001a9f4 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001a9ea:	78 2d                	js     c001aa19 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a9ec:	83 e8 04             	sub    eax,0x4
c001a9ef:	83 f8 01             	cmp    eax,0x1
c001a9f2:	77 25                	ja     c001aa19 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a9f4:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a9fc:	83 ec 0c             	sub    esp,0xc
c001a9ff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa03:	50                   	push   eax
c001aa04:	e8 a0 b0 fe ff       	call   c0005aa9 <f_close>
c001aa09:	83 c4 10             	add    esp,0x10
c001aa0c:	90                   	nop
c001aa0d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001aa15:	74 3a                	je     c001aa51 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001aa17:	eb 2d                	jmp    c001aa46 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001aa19:	83 ec 0c             	sub    esp,0xc
c001aa1c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aa23:	e8 55 f0 fe ff       	call   c0009a7d <rfree>
c001aa28:	83 c4 10             	add    esp,0x10
c001aa2b:	83 ec 04             	sub    esp,0x4
c001aa2e:	6a 00                	push   0x0
c001aa30:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aa37:	50                   	push   eax
c001aa38:	6a 00                	push   0x0
c001aa3a:	e8 b6 a4 fe ff       	call   c0004ef5 <f_mount>
c001aa3f:	83 c4 10             	add    esp,0x10
c001aa42:	b0 00                	mov    al,0x0
c001aa44:	eb 12                	jmp    c001aa58 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001aa46:	a1 60 78 02 c0       	mov    eax,ds:0xc0027860
c001aa4b:	40                   	inc    eax
c001aa4c:	a3 60 78 02 c0       	mov    ds:0xc0027860,eax
c001aa51:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001aa58:	81 c4 6c 03 00 00    	add    esp,0x36c
c001aa5e:	c3                   	ret    
c001aa5f:	90                   	nop

c001aa60 <FAT::allocateSwapfile(char const*, int)>:
c001aa60:	55                   	push   ebp
c001aa61:	57                   	push   edi
c001aa62:	56                   	push   esi
c001aa63:	53                   	push   ebx
c001aa64:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001aa6a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001aa75:	83 ec 0c             	sub    esp,0xc
c001aa78:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001aa7f:	e8 d9 ef fe ff       	call   c0009a5d <malloc>
c001aa84:	83 c4 10             	add    esp,0x10
c001aa87:	89 c7                	mov    edi,eax
c001aa89:	a1 90 77 02 c0       	mov    eax,ds:0xc0027790
c001aa8e:	83 ec 04             	sub    esp,0x4
c001aa91:	50                   	push   eax
c001aa92:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001aa99:	57                   	push   edi
c001aa9a:	e8 89 25 ff ff       	call   c000d028 <File::File(char const*, Process*)>
c001aa9f:	83 c4 10             	add    esp,0x10
c001aaa2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001aaa9:	83 ec 04             	sub    esp,0x4
c001aaac:	8d 44 24 13          	lea    eax,[esp+0x13]
c001aab0:	50                   	push   eax
c001aab1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aab5:	50                   	push   eax
c001aab6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aabd:	e8 76 28 ff ff       	call   c000d338 <File::stat(unsigned long long*, bool*)>
c001aac2:	83 c4 10             	add    esp,0x10
c001aac5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001aacc:	c1 e0 14             	shl    eax,0x14
c001aacf:	89 c7                	mov    edi,eax
c001aad1:	89 c5                	mov    ebp,eax
c001aad3:	c1 fd 1f             	sar    ebp,0x1f
c001aad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aada:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aade:	89 f9                	mov    ecx,edi
c001aae0:	31 c1                	xor    ecx,eax
c001aae2:	89 cb                	mov    ebx,ecx
c001aae4:	89 e9                	mov    ecx,ebp
c001aae6:	31 d1                	xor    ecx,edx
c001aae8:	89 ce                	mov    esi,ecx
c001aaea:	89 f0                	mov    eax,esi
c001aaec:	09 d8                	or     eax,ebx
c001aaee:	0f 84 98 00 00 00    	je     c001ab8c <FAT::allocateSwapfile(char const*, int)+0x12c>
c001aaf4:	83 ec 0c             	sub    esp,0xc
c001aaf7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aafe:	e8 01 27 ff ff       	call   c000d204 <File::unlink()>
c001ab03:	83 c4 10             	add    esp,0x10
c001ab06:	83 ec 08             	sub    esp,0x8
c001ab09:	6a 12                	push   0x12
c001ab0b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab12:	e8 75 25 ff ff       	call   c000d08c <File::open(FileOpenMode)>
c001ab17:	83 c4 10             	add    esp,0x10
c001ab1a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ab21:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ab27:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ab2e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ab35:	c1 e0 14             	shl    eax,0x14
c001ab38:	99                   	cdq    
c001ab39:	6a 01                	push   0x1
c001ab3b:	52                   	push   edx
c001ab3c:	50                   	push   eax
c001ab3d:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001ab44:	e8 10 c6 fe ff       	call   c0007159 <f_expand>
c001ab49:	83 c4 10             	add    esp,0x10
c001ab4c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ab53:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab55:	83 c0 10             	add    eax,0x10
c001ab58:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab5a:	83 ec 0c             	sub    esp,0xc
c001ab5d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ab61:	52                   	push   edx
c001ab62:	8d 54 24 30          	lea    edx,[esp+0x30]
c001ab66:	52                   	push   edx
c001ab67:	6a 00                	push   0x0
c001ab69:	68 00 04 00 00       	push   0x400
c001ab6e:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ab75:	ff d0                	call   eax
c001ab77:	83 c4 20             	add    esp,0x20
c001ab7a:	83 ec 0c             	sub    esp,0xc
c001ab7d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab84:	e8 61 25 ff ff       	call   c000d0ea <File::close()>
c001ab89:	83 c4 10             	add    esp,0x10
c001ab8c:	83 ec 08             	sub    esp,0x8
c001ab8f:	6a 01                	push   0x1
c001ab91:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab98:	e8 ef 24 ff ff       	call   c000d08c <File::open(FileOpenMode)>
c001ab9d:	83 c4 10             	add    esp,0x10
c001aba0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001aba7:	8b 00                	mov    eax,DWORD PTR [eax]
c001aba9:	83 c0 0c             	add    eax,0xc
c001abac:	8b 00                	mov    eax,DWORD PTR [eax]
c001abae:	83 ec 0c             	sub    esp,0xc
c001abb1:	8d 54 24 24          	lea    edx,[esp+0x24]
c001abb5:	52                   	push   edx
c001abb6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001abba:	52                   	push   edx
c001abbb:	6a 00                	push   0x0
c001abbd:	6a 04                	push   0x4
c001abbf:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001abc6:	ff d0                	call   eax
c001abc8:	83 c4 20             	add    esp,0x20
c001abcb:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001abd2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001abd8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001abdf:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001abe6:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001abe9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001abec:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001abf3:	83 ec 0c             	sub    esp,0xc
c001abf6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001abfd:	e8 e8 24 ff ff       	call   c000d0ea <File::close()>
c001ac02:	83 c4 10             	add    esp,0x10
c001ac05:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001ac0c:	ba 00 00 00 00       	mov    edx,0x0
c001ac11:	81 c4 3c 04 00 00    	add    esp,0x43c
c001ac17:	5b                   	pop    ebx
c001ac18:	5e                   	pop    esi
c001ac19:	5f                   	pop    edi
c001ac1a:	5d                   	pop    ebp
c001ac1b:	c3                   	ret    

c001ac1c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001ac1c:	57                   	push   edi
c001ac1d:	56                   	push   esi
c001ac1e:	53                   	push   ebx
c001ac1f:	81 ec 50 02 00 00    	sub    esp,0x250
c001ac25:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001ac2d:	74 0a                	je     c001ac39 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c001ac2f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001ac37:	75 0a                	jne    c001ac43 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c001ac39:	b8 04 00 00 00       	mov    eax,0x4
c001ac3e:	e9 29 01 00 00       	jmp    c001ad6c <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c001ac43:	83 ec 08             	sub    esp,0x8
c001ac46:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ac4d:	50                   	push   eax
c001ac4e:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001ac55:	e8 59 b4 fe ff       	call   c00060b3 <f_readdir>
c001ac5a:	83 c4 10             	add    esp,0x10
c001ac5d:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001ac64:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001ac6b:	83 ec 0c             	sub    esp,0xc
c001ac6e:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001ac75:	83 c0 1a             	add    eax,0x1a
c001ac78:	50                   	push   eax
c001ac79:	e8 ee 5a fe ff       	call   c000076c <strlen>
c001ac7e:	83 c4 10             	add    esp,0x10
c001ac81:	ba 00 00 00 00       	mov    edx,0x0
c001ac86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ac8e:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001ac95:	0f b6 c0             	movzx  eax,al
c001ac98:	83 e0 10             	and    eax,0x10
c001ac9b:	74 07                	je     c001aca4 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c001ac9d:	b8 02 00 00 00       	mov    eax,0x2
c001aca2:	eb 05                	jmp    c001aca9 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c001aca4:	b8 01 00 00 00       	mov    eax,0x1
c001aca9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001acad:	83 ec 08             	sub    esp,0x8
c001acb0:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001acb7:	83 c0 1a             	add    eax,0x1a
c001acba:	50                   	push   eax
c001acbb:	8d 44 24 10          	lea    eax,[esp+0x10]
c001acbf:	83 c0 10             	add    eax,0x10
c001acc2:	50                   	push   eax
c001acc3:	e8 44 5b fe ff       	call   c000080c <strcpy>
c001acc8:	83 c4 10             	add    esp,0x10
c001accb:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001acd2:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001acd9:	8d 44 24 04          	lea    eax,[esp+0x4]
c001acdd:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001ace4:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001aceb:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001acf2:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001acf9:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001ad00:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001ad07:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001ad0e:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001ad15:	89 c6                	mov    esi,eax
c001ad17:	89 d7                	mov    edi,edx
c001ad19:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad1b:	89 c8                	mov    eax,ecx
c001ad1d:	89 fa                	mov    edx,edi
c001ad1f:	89 f3                	mov    ebx,esi
c001ad21:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001ad28:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001ad2f:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001ad36:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001ad3d:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ad43:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001ad4a:	84 c0                	test   al,al
c001ad4c:	75 07                	jne    c001ad55 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c001ad4e:	b8 07 00 00 00       	mov    eax,0x7
c001ad53:	eb 17                	jmp    c001ad6c <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c001ad55:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001ad5c:	85 c0                	test   eax,eax
c001ad5e:	75 07                	jne    c001ad67 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c001ad60:	b8 00 00 00 00       	mov    eax,0x0
c001ad65:	eb 05                	jmp    c001ad6c <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c001ad67:	b8 01 00 00 00       	mov    eax,0x1
c001ad6c:	81 c4 50 02 00 00    	add    esp,0x250
c001ad72:	5b                   	pop    ebx
c001ad73:	5e                   	pop    esi
c001ad74:	5f                   	pop    edi
c001ad75:	c3                   	ret    

c001ad76 <FAT::read(void*, unsigned long, void*, int*)>:
c001ad76:	83 ec 1c             	sub    esp,0x1c
c001ad79:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ad7e:	74 07                	je     c001ad87 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001ad80:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ad85:	75 07                	jne    c001ad8e <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001ad87:	b8 04 00 00 00       	mov    eax,0x4
c001ad8c:	eb 3d                	jmp    c001adcb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001ad8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ad92:	50                   	push   eax
c001ad93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ad9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ad9f:	e8 ef a5 fe ff       	call   c0005393 <f_read>
c001ada4:	83 c4 10             	add    esp,0x10
c001ada7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001adab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001adaf:	89 c2                	mov    edx,eax
c001adb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001adb5:	89 10                	mov    DWORD PTR [eax],edx
c001adb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adbb:	85 c0                	test   eax,eax
c001adbd:	75 07                	jne    c001adc6 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001adbf:	b8 00 00 00 00       	mov    eax,0x0
c001adc4:	eb 05                	jmp    c001adcb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001adc6:	b8 01 00 00 00       	mov    eax,0x1
c001adcb:	83 c4 1c             	add    esp,0x1c
c001adce:	c3                   	ret    
c001adcf:	90                   	nop

c001add0 <FAT::write(void*, unsigned long, void*, int*)>:
c001add0:	83 ec 1c             	sub    esp,0x1c
c001add3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001add8:	74 07                	je     c001ade1 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001adda:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001addf:	75 07                	jne    c001ade8 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001ade1:	b8 04 00 00 00       	mov    eax,0x4
c001ade6:	eb 3d                	jmp    c001ae25 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001ade8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001adec:	50                   	push   eax
c001aded:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adf1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001adf5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001adf9:	e8 15 a8 fe ff       	call   c0005613 <f_write>
c001adfe:	83 c4 10             	add    esp,0x10
c001ae01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae09:	89 c2                	mov    edx,eax
c001ae0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae0f:	89 10                	mov    DWORD PTR [eax],edx
c001ae11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae15:	85 c0                	test   eax,eax
c001ae17:	75 07                	jne    c001ae20 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001ae19:	b8 00 00 00 00       	mov    eax,0x0
c001ae1e:	eb 05                	jmp    c001ae25 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001ae20:	b8 01 00 00 00       	mov    eax,0x1
c001ae25:	83 c4 1c             	add    esp,0x1c
c001ae28:	c3                   	ret    
c001ae29:	90                   	nop

c001ae2a <FAT::close(void*)>:
c001ae2a:	83 ec 1c             	sub    esp,0x1c
c001ae2d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae32:	75 07                	jne    c001ae3b <FAT::close(void*)+0x11>
c001ae34:	b8 04 00 00 00       	mov    eax,0x4
c001ae39:	eb 36                	jmp    c001ae71 <FAT::close(void*)+0x47>
c001ae3b:	83 ec 0c             	sub    esp,0xc
c001ae3e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae42:	e8 62 ac fe ff       	call   c0005aa9 <f_close>
c001ae47:	83 c4 10             	add    esp,0x10
c001ae4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae4e:	83 ec 0c             	sub    esp,0xc
c001ae51:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae55:	e8 13 ec fe ff       	call   c0009a6d <free>
c001ae5a:	83 c4 10             	add    esp,0x10
c001ae5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae61:	85 c0                	test   eax,eax
c001ae63:	75 07                	jne    c001ae6c <FAT::close(void*)+0x42>
c001ae65:	b8 00 00 00 00       	mov    eax,0x0
c001ae6a:	eb 05                	jmp    c001ae71 <FAT::close(void*)+0x47>
c001ae6c:	b8 01 00 00 00       	mov    eax,0x1
c001ae71:	83 c4 1c             	add    esp,0x1c
c001ae74:	c3                   	ret    
c001ae75:	90                   	nop

c001ae76 <FAT::closeDir(void*)>:
c001ae76:	83 ec 1c             	sub    esp,0x1c
c001ae79:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae7e:	75 07                	jne    c001ae87 <FAT::closeDir(void*)+0x11>
c001ae80:	b8 04 00 00 00       	mov    eax,0x4
c001ae85:	eb 36                	jmp    c001aebd <FAT::closeDir(void*)+0x47>
c001ae87:	83 ec 0c             	sub    esp,0xc
c001ae8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae8e:	e8 fe b1 fe ff       	call   c0006091 <f_closedir>
c001ae93:	83 c4 10             	add    esp,0x10
c001ae96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae9a:	83 ec 0c             	sub    esp,0xc
c001ae9d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aea1:	e8 c7 eb fe ff       	call   c0009a6d <free>
c001aea6:	83 c4 10             	add    esp,0x10
c001aea9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aead:	85 c0                	test   eax,eax
c001aeaf:	75 07                	jne    c001aeb8 <FAT::closeDir(void*)+0x42>
c001aeb1:	b8 00 00 00 00       	mov    eax,0x0
c001aeb6:	eb 05                	jmp    c001aebd <FAT::closeDir(void*)+0x47>
c001aeb8:	b8 01 00 00 00       	mov    eax,0x1
c001aebd:	83 c4 1c             	add    esp,0x1c
c001aec0:	c3                   	ret    
c001aec1:	90                   	nop

c001aec2 <FAT::seek(void*, unsigned long long)>:
c001aec2:	83 ec 2c             	sub    esp,0x2c
c001aec5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aec9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aecd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aed1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aed5:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001aeda:	75 07                	jne    c001aee3 <FAT::seek(void*, unsigned long long)+0x21>
c001aedc:	b8 04 00 00 00       	mov    eax,0x4
c001aee1:	eb 2f                	jmp    c001af12 <FAT::seek(void*, unsigned long long)+0x50>
c001aee3:	83 ec 04             	sub    esp,0x4
c001aee6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001aeea:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001aeee:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001aef2:	e8 e1 ab fe ff       	call   c0005ad8 <f_lseek>
c001aef7:	83 c4 10             	add    esp,0x10
c001aefa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aefe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af02:	85 c0                	test   eax,eax
c001af04:	75 07                	jne    c001af0d <FAT::seek(void*, unsigned long long)+0x4b>
c001af06:	b8 00 00 00 00       	mov    eax,0x0
c001af0b:	eb 05                	jmp    c001af12 <FAT::seek(void*, unsigned long long)+0x50>
c001af0d:	b8 01 00 00 00       	mov    eax,0x1
c001af12:	83 c4 2c             	add    esp,0x2c
c001af15:	c3                   	ret    

c001af16 <fatWrapperReadDisk>:
c001af16:	83 ec 1c             	sub    esp,0x1c
c001af19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af1d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001af21:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af25:	89 04 24             	mov    DWORD PTR [esp],eax
c001af28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af30:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001af35:	8b 04 85 60 68 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd97a0]
c001af3c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001af40:	83 ec 0c             	sub    esp,0xc
c001af43:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af47:	52                   	push   edx
c001af48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af50:	50                   	push   eax
c001af51:	e8 ce 54 ff ff       	call   c0010424 <LogicalDisk::read(unsigned long long, int, void*)>
c001af56:	83 c4 20             	add    esp,0x20
c001af59:	83 c4 1c             	add    esp,0x1c
c001af5c:	c3                   	ret    

c001af5d <fatWrapperWriteDisk>:
c001af5d:	83 ec 1c             	sub    esp,0x1c
c001af60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af64:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001af68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af6c:	89 04 24             	mov    DWORD PTR [esp],eax
c001af6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af77:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001af7c:	8b 04 85 60 68 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd97a0]
c001af83:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001af87:	83 ec 0c             	sub    esp,0xc
c001af8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af8e:	52                   	push   edx
c001af8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af97:	50                   	push   eax
c001af98:	e8 f3 54 ff ff       	call   c0010490 <LogicalDisk::write(unsigned long long, int, void*)>
c001af9d:	83 c4 20             	add    esp,0x20
c001afa0:	83 c4 1c             	add    esp,0x1c
c001afa3:	c3                   	ret    

c001afa4 <fatWrapperIoctl>:
c001afa4:	53                   	push   ebx
c001afa5:	83 ec 28             	sub    esp,0x28
c001afa8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001afac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001afb0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001afb4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001afb8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001afbd:	75 31                	jne    c001aff0 <fatWrapperIoctl+0x4c>
c001afbf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001afc3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001afc7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001afcc:	8b 04 85 60 68 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd97a0]
c001afd3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001afd9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001afdf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001afe3:	66 89 02             	mov    WORD PTR [edx],ax
c001afe6:	b8 00 00 00 00       	mov    eax,0x0
c001afeb:	e9 b2 00 00 00       	jmp    c001b0a2 <fatWrapperIoctl+0xfe>
c001aff0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001aff5:	75 6a                	jne    c001b061 <fatWrapperIoctl+0xbd>
c001aff7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001affb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001afff:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b004:	8b 04 85 60 68 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd97a0]
c001b00b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b011:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b017:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b01d:	89 c8                	mov    eax,ecx
c001b01f:	89 da                	mov    edx,ebx
c001b021:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b025:	c1 e0 0a             	shl    eax,0xa
c001b028:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b02d:	8b 0c 8d 60 68 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd97a0]
c001b034:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b03a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b040:	89 cb                	mov    ebx,ecx
c001b042:	c1 fb 1f             	sar    ebx,0x1f
c001b045:	53                   	push   ebx
c001b046:	51                   	push   ecx
c001b047:	52                   	push   edx
c001b048:	50                   	push   eax
c001b049:	e8 b6 5d 00 00       	call   c0020e04 <__udivdi3>
c001b04e:	83 c4 10             	add    esp,0x10
c001b051:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b055:	89 01                	mov    DWORD PTR [ecx],eax
c001b057:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b05a:	b8 00 00 00 00       	mov    eax,0x0
c001b05f:	eb 41                	jmp    c001b0a2 <fatWrapperIoctl+0xfe>
c001b061:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b066:	75 07                	jne    c001b06f <fatWrapperIoctl+0xcb>
c001b068:	b8 00 00 00 00       	mov    eax,0x0
c001b06d:	eb 33                	jmp    c001b0a2 <fatWrapperIoctl+0xfe>
c001b06f:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b074:	75 19                	jne    c001b08f <fatWrapperIoctl+0xeb>
c001b076:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b07a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b07e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b082:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b088:	b8 00 00 00 00       	mov    eax,0x0
c001b08d:	eb 13                	jmp    c001b0a2 <fatWrapperIoctl+0xfe>
c001b08f:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b094:	75 07                	jne    c001b09d <fatWrapperIoctl+0xf9>
c001b096:	b8 00 00 00 00       	mov    eax,0x0
c001b09b:	eb 05                	jmp    c001b0a2 <fatWrapperIoctl+0xfe>
c001b09d:	b8 04 00 00 00       	mov    eax,0x4
c001b0a2:	83 c4 28             	add    esp,0x28
c001b0a5:	5b                   	pop    ebx
c001b0a6:	c3                   	ret    
c001b0a7:	90                   	nop

c001b0a8 <FAT::FAT()>:
c001b0a8:	83 ec 1c             	sub    esp,0x1c
c001b0ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b0af:	83 ec 0c             	sub    esp,0xc
c001b0b2:	50                   	push   eax
c001b0b3:	e8 1c 1d ff ff       	call   c000cdd4 <Filesystem::Filesystem()>
c001b0b8:	83 c4 10             	add    esp,0x10
c001b0bb:	ba 9c 49 02 c0       	mov    edx,0xc002499c
c001b0c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b0c4:	89 10                	mov    DWORD PTR [eax],edx
c001b0c6:	c7 05 60 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027860,0x0
c001b0d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b0d8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b0dd:	7f 15                	jg     c001b0f4 <FAT::FAT()+0x4c>
c001b0df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b0e3:	c7 04 85 80 78 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd8780],0xffffffff
c001b0ee:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b0f2:	eb e4                	jmp    c001b0d8 <FAT::FAT()+0x30>
c001b0f4:	90                   	nop
c001b0f5:	83 c4 1c             	add    esp,0x1c
c001b0f8:	c3                   	ret    
c001b0f9:	90                   	nop

c001b0fa <FAT::fixFilepath(char*)>:
c001b0fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b0fe:	8a 00                	mov    al,BYTE PTR [eax]
c001b100:	3c 40                	cmp    al,0x40
c001b102:	7e 2c                	jle    c001b130 <FAT::fixFilepath(char*)+0x36>
c001b104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b108:	8a 00                	mov    al,BYTE PTR [eax]
c001b10a:	83 e8 41             	sub    eax,0x41
c001b10d:	88 c2                	mov    dl,al
c001b10f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b113:	88 10                	mov    BYTE PTR [eax],dl
c001b115:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b119:	8a 00                	mov    al,BYTE PTR [eax]
c001b11b:	0f be c0             	movsx  eax,al
c001b11e:	8b 04 85 80 78 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8780]
c001b125:	83 c0 30             	add    eax,0x30
c001b128:	88 c2                	mov    dl,al
c001b12a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b12e:	88 10                	mov    BYTE PTR [eax],dl
c001b130:	90                   	nop
c001b131:	c3                   	ret    

c001b132 <FAT::open(char const*, void**, FileOpenMode)>:
c001b132:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b138:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b140:	74 0a                	je     c001b14c <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001b142:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b14a:	75 0a                	jne    c001b156 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001b14c:	b8 04 00 00 00       	mov    eax,0x4
c001b151:	e9 fd 00 00 00       	jmp    c001b253 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001b156:	83 ec 08             	sub    esp,0x8
c001b159:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b160:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b164:	50                   	push   eax
c001b165:	e8 a2 56 fe ff       	call   c000080c <strcpy>
c001b16a:	83 c4 10             	add    esp,0x10
c001b16d:	83 ec 08             	sub    esp,0x8
c001b170:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b174:	50                   	push   eax
c001b175:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b17c:	e8 79 ff ff ff       	call   c001b0fa <FAT::fixFilepath(char*)>
c001b181:	83 c4 10             	add    esp,0x10
c001b184:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b18c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b193:	83 e0 01             	and    eax,0x1
c001b196:	74 08                	je     c001b1a0 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001b198:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b1a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b1a7:	83 e0 04             	and    eax,0x4
c001b1aa:	74 10                	je     c001b1bc <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001b1ac:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b1b4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b1bc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b1c3:	83 e0 02             	and    eax,0x2
c001b1c6:	74 08                	je     c001b1d0 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001b1c8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b1d0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b1d7:	83 e0 08             	and    eax,0x8
c001b1da:	74 08                	je     c001b1e4 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001b1dc:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b1e4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b1eb:	83 e0 10             	and    eax,0x10
c001b1ee:	74 08                	je     c001b1f8 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001b1f0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b1f8:	83 ec 0c             	sub    esp,0xc
c001b1fb:	68 50 02 00 00       	push   0x250
c001b200:	e8 58 e8 fe ff       	call   c0009a5d <malloc>
c001b205:	83 c4 10             	add    esp,0x10
c001b208:	89 c2                	mov    edx,eax
c001b20a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b211:	89 10                	mov    DWORD PTR [eax],edx
c001b213:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b21b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b222:	8b 00                	mov    eax,DWORD PTR [eax]
c001b224:	83 ec 04             	sub    esp,0x4
c001b227:	52                   	push   edx
c001b228:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b22c:	52                   	push   edx
c001b22d:	50                   	push   eax
c001b22e:	e8 24 9d fe ff       	call   c0004f57 <f_open>
c001b233:	83 c4 10             	add    esp,0x10
c001b236:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b23d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b245:	74 07                	je     c001b24e <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001b247:	b8 01 00 00 00       	mov    eax,0x1
c001b24c:	eb 05                	jmp    c001b253 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001b24e:	b8 00 00 00 00       	mov    eax,0x0
c001b253:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b259:	c3                   	ret    

c001b25a <FAT::openDir(char const*, void**)>:
c001b25a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b260:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b268:	74 0a                	je     c001b274 <FAT::openDir(char const*, void**)+0x1a>
c001b26a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b272:	75 07                	jne    c001b27b <FAT::openDir(char const*, void**)+0x21>
c001b274:	b8 04 00 00 00       	mov    eax,0x4
c001b279:	eb 7d                	jmp    c001b2f8 <FAT::openDir(char const*, void**)+0x9e>
c001b27b:	83 ec 08             	sub    esp,0x8
c001b27e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b285:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b289:	50                   	push   eax
c001b28a:	e8 7d 55 fe ff       	call   c000080c <strcpy>
c001b28f:	83 c4 10             	add    esp,0x10
c001b292:	83 ec 08             	sub    esp,0x8
c001b295:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b299:	50                   	push   eax
c001b29a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b2a1:	e8 54 fe ff ff       	call   c001b0fa <FAT::fixFilepath(char*)>
c001b2a6:	83 c4 10             	add    esp,0x10
c001b2a9:	83 ec 0c             	sub    esp,0xc
c001b2ac:	6a 4c                	push   0x4c
c001b2ae:	e8 aa e7 fe ff       	call   c0009a5d <malloc>
c001b2b3:	83 c4 10             	add    esp,0x10
c001b2b6:	89 c2                	mov    edx,eax
c001b2b8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b2bf:	89 10                	mov    DWORD PTR [eax],edx
c001b2c1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b2c8:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2ca:	83 ec 08             	sub    esp,0x8
c001b2cd:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b2d1:	52                   	push   edx
c001b2d2:	50                   	push   eax
c001b2d3:	e8 b7 ac fe ff       	call   c0005f8f <f_opendir>
c001b2d8:	83 c4 10             	add    esp,0x10
c001b2db:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b2e2:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b2ea:	74 07                	je     c001b2f3 <FAT::openDir(char const*, void**)+0x99>
c001b2ec:	b8 01 00 00 00       	mov    eax,0x1
c001b2f1:	eb 05                	jmp    c001b2f8 <FAT::openDir(char const*, void**)+0x9e>
c001b2f3:	b8 00 00 00 00       	mov    eax,0x0
c001b2f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b2fe:	c3                   	ret    
c001b2ff:	90                   	nop

c001b300 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b300:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b306:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b30e:	75 0a                	jne    c001b31a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001b310:	b8 04 00 00 00       	mov    eax,0x4
c001b315:	e9 c9 00 00 00       	jmp    c001b3e3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001b31a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b322:	75 0a                	jne    c001b32e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001b324:	b8 04 00 00 00       	mov    eax,0x4
c001b329:	e9 b5 00 00 00       	jmp    c001b3e3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001b32e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b336:	75 0a                	jne    c001b342 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001b338:	b8 04 00 00 00       	mov    eax,0x4
c001b33d:	e9 a1 00 00 00       	jmp    c001b3e3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001b342:	83 ec 08             	sub    esp,0x8
c001b345:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b34c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b353:	50                   	push   eax
c001b354:	e8 b3 54 fe ff       	call   c000080c <strcpy>
c001b359:	83 c4 10             	add    esp,0x10
c001b35c:	83 ec 08             	sub    esp,0x8
c001b35f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b366:	50                   	push   eax
c001b367:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b36e:	e8 87 fd ff ff       	call   c001b0fa <FAT::fixFilepath(char*)>
c001b373:	83 c4 10             	add    esp,0x10
c001b376:	83 ec 08             	sub    esp,0x8
c001b379:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b37d:	50                   	push   eax
c001b37e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b385:	50                   	push   eax
c001b386:	e8 c3 ad fe ff       	call   c000614e <f_stat>
c001b38b:	83 c4 10             	add    esp,0x10
c001b38e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b395:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b39c:	85 c0                	test   eax,eax
c001b39e:	74 07                	je     c001b3a7 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001b3a0:	83 f8 04             	cmp    eax,0x4
c001b3a3:	74 32                	je     c001b3d7 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001b3a5:	eb 37                	jmp    c001b3de <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001b3a7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b3ab:	0f b6 c0             	movzx  eax,al
c001b3ae:	83 e0 10             	and    eax,0x10
c001b3b1:	0f 95 c2             	setne  dl
c001b3b4:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b3bb:	88 10                	mov    BYTE PTR [eax],dl
c001b3bd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b3c0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b3c4:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b3cb:	89 01                	mov    DWORD PTR [ecx],eax
c001b3cd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b3d0:	b8 00 00 00 00       	mov    eax,0x0
c001b3d5:	eb 0c                	jmp    c001b3e3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001b3d7:	b8 02 00 00 00       	mov    eax,0x2
c001b3dc:	eb 05                	jmp    c001b3e3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001b3de:	b8 01 00 00 00       	mov    eax,0x1
c001b3e3:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b3e9:	c3                   	ret    

c001b3ea <FAT::unlink(char const*)>:
c001b3ea:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b3f0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b3f8:	75 07                	jne    c001b401 <FAT::unlink(char const*)+0x17>
c001b3fa:	b8 04 00 00 00       	mov    eax,0x4
c001b3ff:	eb 5c                	jmp    c001b45d <FAT::unlink(char const*)+0x73>
c001b401:	83 ec 08             	sub    esp,0x8
c001b404:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b40b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b40f:	50                   	push   eax
c001b410:	e8 f7 53 fe ff       	call   c000080c <strcpy>
c001b415:	83 c4 10             	add    esp,0x10
c001b418:	83 ec 08             	sub    esp,0x8
c001b41b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b41f:	50                   	push   eax
c001b420:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b427:	e8 ce fc ff ff       	call   c001b0fa <FAT::fixFilepath(char*)>
c001b42c:	83 c4 10             	add    esp,0x10
c001b42f:	83 ec 0c             	sub    esp,0xc
c001b432:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b436:	50                   	push   eax
c001b437:	e8 64 b0 fe ff       	call   c00064a0 <f_unlink>
c001b43c:	83 c4 10             	add    esp,0x10
c001b43f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b446:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b44d:	85 c0                	test   eax,eax
c001b44f:	75 07                	jne    c001b458 <FAT::unlink(char const*)+0x6e>
c001b451:	b8 00 00 00 00       	mov    eax,0x0
c001b456:	eb 05                	jmp    c001b45d <FAT::unlink(char const*)+0x73>
c001b458:	b8 01 00 00 00       	mov    eax,0x1
c001b45d:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b463:	c3                   	ret    

c001b464 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b464:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b46a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b471:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b478:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b47c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b480:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b488:	75 0a                	jne    c001b494 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b48a:	b8 04 00 00 00       	mov    eax,0x4
c001b48f:	e9 1c 01 00 00       	jmp    c001b5b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001b494:	83 ec 08             	sub    esp,0x8
c001b497:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b49e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b4a2:	50                   	push   eax
c001b4a3:	e8 64 53 fe ff       	call   c000080c <strcpy>
c001b4a8:	83 c4 10             	add    esp,0x10
c001b4ab:	83 ec 08             	sub    esp,0x8
c001b4ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b4b2:	50                   	push   eax
c001b4b3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b4ba:	e8 3b fc ff ff       	call   c001b0fa <FAT::fixFilepath(char*)>
c001b4bf:	83 c4 10             	add    esp,0x10
c001b4c2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b4ca:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b4d2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b4d7:	83 e0 01             	and    eax,0x1
c001b4da:	74 08                	je     c001b4e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001b4dc:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001b4e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b4e9:	83 e0 02             	and    eax,0x2
c001b4ec:	74 08                	je     c001b4f6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001b4ee:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001b4f6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b4fb:	83 e0 04             	and    eax,0x4
c001b4fe:	74 08                	je     c001b508 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001b500:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001b508:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b50d:	83 e0 08             	and    eax,0x8
c001b510:	74 08                	je     c001b51a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001b512:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001b51a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b51f:	83 e0 01             	and    eax,0x1
c001b522:	74 08                	je     c001b52c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001b524:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001b52c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b531:	83 e0 02             	and    eax,0x2
c001b534:	74 08                	je     c001b53e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001b536:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001b53e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b543:	83 e0 04             	and    eax,0x4
c001b546:	74 08                	je     c001b550 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001b548:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001b550:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b555:	83 e0 08             	and    eax,0x8
c001b558:	74 08                	je     c001b562 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001b55a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001b562:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b569:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001b570:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b578:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b580:	83 ec 04             	sub    esp,0x4
c001b583:	52                   	push   edx
c001b584:	50                   	push   eax
c001b585:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b589:	50                   	push   eax
c001b58a:	e8 b3 b5 fe ff       	call   c0006b42 <f_chmod>
c001b58f:	83 c4 10             	add    esp,0x10
c001b592:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b599:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b5a0:	85 c0                	test   eax,eax
c001b5a2:	75 07                	jne    c001b5ab <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001b5a4:	b8 00 00 00 00       	mov    eax,0x0
c001b5a9:	eb 05                	jmp    c001b5b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001b5ab:	b8 01 00 00 00       	mov    eax,0x1
c001b5b0:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b5b6:	c3                   	ret    
c001b5b7:	90                   	nop

c001b5b8 <FAT::rename(char const*, char const*)>:
c001b5b8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b5be:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b5c6:	74 0a                	je     c001b5d2 <FAT::rename(char const*, char const*)+0x1a>
c001b5c8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b5d0:	75 0a                	jne    c001b5dc <FAT::rename(char const*, char const*)+0x24>
c001b5d2:	b8 04 00 00 00       	mov    eax,0x4
c001b5d7:	e9 98 00 00 00       	jmp    c001b674 <FAT::rename(char const*, char const*)+0xbc>
c001b5dc:	83 ec 08             	sub    esp,0x8
c001b5df:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b5e6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b5ed:	50                   	push   eax
c001b5ee:	e8 19 52 fe ff       	call   c000080c <strcpy>
c001b5f3:	83 c4 10             	add    esp,0x10
c001b5f6:	83 ec 08             	sub    esp,0x8
c001b5f9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b600:	50                   	push   eax
c001b601:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b608:	e8 ed fa ff ff       	call   c001b0fa <FAT::fixFilepath(char*)>
c001b60d:	83 c4 10             	add    esp,0x10
c001b610:	83 ec 08             	sub    esp,0x8
c001b613:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b61a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b61e:	50                   	push   eax
c001b61f:	e8 e8 51 fe ff       	call   c000080c <strcpy>
c001b624:	83 c4 10             	add    esp,0x10
c001b627:	83 ec 08             	sub    esp,0x8
c001b62a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b62e:	50                   	push   eax
c001b62f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b636:	e8 bf fa ff ff       	call   c001b0fa <FAT::fixFilepath(char*)>
c001b63b:	83 c4 10             	add    esp,0x10
c001b63e:	83 ec 08             	sub    esp,0x8
c001b641:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b645:	50                   	push   eax
c001b646:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b64d:	50                   	push   eax
c001b64e:	e8 fc b1 fe ff       	call   c000684f <f_rename>
c001b653:	83 c4 10             	add    esp,0x10
c001b656:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b65d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b664:	85 c0                	test   eax,eax
c001b666:	75 07                	jne    c001b66f <FAT::rename(char const*, char const*)+0xb7>
c001b668:	b8 00 00 00 00       	mov    eax,0x0
c001b66d:	eb 05                	jmp    c001b674 <FAT::rename(char const*, char const*)+0xbc>
c001b66f:	b8 01 00 00 00       	mov    eax,0x1
c001b674:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b67a:	c3                   	ret    
c001b67b:	90                   	nop

c001b67c <FAT::mkdir(char const*)>:
c001b67c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b682:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b68a:	75 07                	jne    c001b693 <FAT::mkdir(char const*)+0x17>
c001b68c:	b8 04 00 00 00       	mov    eax,0x4
c001b691:	eb 5c                	jmp    c001b6ef <FAT::mkdir(char const*)+0x73>
c001b693:	83 ec 08             	sub    esp,0x8
c001b696:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b69d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b6a1:	50                   	push   eax
c001b6a2:	e8 65 51 fe ff       	call   c000080c <strcpy>
c001b6a7:	83 c4 10             	add    esp,0x10
c001b6aa:	83 ec 08             	sub    esp,0x8
c001b6ad:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b6b1:	50                   	push   eax
c001b6b2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b6b9:	e8 3c fa ff ff       	call   c001b0fa <FAT::fixFilepath(char*)>
c001b6be:	83 c4 10             	add    esp,0x10
c001b6c1:	83 ec 0c             	sub    esp,0xc
c001b6c4:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b6c8:	50                   	push   eax
c001b6c9:	e8 55 af fe ff       	call   c0006623 <f_mkdir>
c001b6ce:	83 c4 10             	add    esp,0x10
c001b6d1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b6d8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b6df:	85 c0                	test   eax,eax
c001b6e1:	75 07                	jne    c001b6ea <FAT::mkdir(char const*)+0x6e>
c001b6e3:	b8 00 00 00 00       	mov    eax,0x0
c001b6e8:	eb 05                	jmp    c001b6ef <FAT::mkdir(char const*)+0x73>
c001b6ea:	b8 01 00 00 00       	mov    eax,0x1
c001b6ef:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b6f5:	c3                   	ret    

c001b6f6 <FAT::exists(char const*)>:
c001b6f6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b6fc:	83 ec 08             	sub    esp,0x8
c001b6ff:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b706:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b70a:	50                   	push   eax
c001b70b:	e8 fc 50 fe ff       	call   c000080c <strcpy>
c001b710:	83 c4 10             	add    esp,0x10
c001b713:	83 ec 08             	sub    esp,0x8
c001b716:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b71a:	50                   	push   eax
c001b71b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b722:	e8 d3 f9 ff ff       	call   c001b0fa <FAT::fixFilepath(char*)>
c001b727:	83 c4 10             	add    esp,0x10
c001b72a:	83 ec 08             	sub    esp,0x8
c001b72d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b734:	50                   	push   eax
c001b735:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b739:	50                   	push   eax
c001b73a:	e8 0f aa fe ff       	call   c000614e <f_stat>
c001b73f:	83 c4 10             	add    esp,0x10
c001b742:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b749:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b750:	85 c0                	test   eax,eax
c001b752:	75 04                	jne    c001b758 <FAT::exists(char const*)+0x62>
c001b754:	b0 01                	mov    al,0x1
c001b756:	eb 02                	jmp    c001b75a <FAT::exists(char const*)+0x64>
c001b758:	b0 00                	mov    al,0x0
c001b75a:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b760:	c3                   	ret    
c001b761:	90                   	nop

c001b762 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b762:	b8 08 00 00 00       	mov    eax,0x8
c001b767:	c3                   	ret    

c001b768 <ISO9660::seek(void*, unsigned long long)>:
c001b768:	53                   	push   ebx
c001b769:	b8 04 00 00 00       	mov    eax,0x4
c001b76e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b772:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b776:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b77a:	85 d2                	test   edx,edx
c001b77c:	74 17                	je     c001b795 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b77e:	89 c8                	mov    eax,ecx
c001b780:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b783:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b786:	b8 01 00 00 00       	mov    eax,0x1
c001b78b:	73 08                	jae    c001b795 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b78d:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b790:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b793:	31 c0                	xor    eax,eax
c001b795:	5b                   	pop    ebx
c001b796:	c3                   	ret    
c001b797:	90                   	nop

c001b798 <ISO9660::tell(void*, unsigned long long*)>:
c001b798:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b79c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7a0:	85 d2                	test   edx,edx
c001b7a2:	74 12                	je     c001b7b6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b7a4:	85 c0                	test   eax,eax
c001b7a6:	74 0e                	je     c001b7b6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b7a8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b7ab:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b7ae:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b7b1:	89 10                	mov    DWORD PTR [eax],edx
c001b7b3:	31 c0                	xor    eax,eax
c001b7b5:	c3                   	ret    
c001b7b6:	b8 04 00 00 00       	mov    eax,0x4
c001b7bb:	c3                   	ret    

c001b7bc <ISO9660::getName()>:
c001b7bc:	b8 fc 49 02 c0       	mov    eax,0xc00249fc
c001b7c1:	c3                   	ret    

c001b7c2 <ISO9660::stat(void*, unsigned long long*)>:
c001b7c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b7c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7ca:	85 d2                	test   edx,edx
c001b7cc:	74 12                	je     c001b7e0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b7ce:	85 c0                	test   eax,eax
c001b7d0:	74 0e                	je     c001b7e0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b7d2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b7d5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b7d8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b7db:	89 10                	mov    DWORD PTR [eax],edx
c001b7dd:	31 c0                	xor    eax,eax
c001b7df:	c3                   	ret    
c001b7e0:	b8 04 00 00 00       	mov    eax,0x4
c001b7e5:	c3                   	ret    

c001b7e6 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b7e6:	b8 01 00 00 00       	mov    eax,0x1
c001b7eb:	c3                   	ret    

c001b7ec <ISO9660::unlink(char const*)>:
c001b7ec:	b8 01 00 00 00       	mov    eax,0x1
c001b7f1:	c3                   	ret    

c001b7f2 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b7f2:	b8 01 00 00 00       	mov    eax,0x1
c001b7f7:	c3                   	ret    

c001b7f8 <ISO9660::rename(char const*, char const*)>:
c001b7f8:	b8 01 00 00 00       	mov    eax,0x1
c001b7fd:	c3                   	ret    

c001b7fe <ISO9660::mkdir(char const*)>:
c001b7fe:	b8 01 00 00 00       	mov    eax,0x1
c001b803:	c3                   	ret    

c001b804 <ISO9660::close(void*)>:
c001b804:	83 ec 0c             	sub    esp,0xc
c001b807:	b8 04 00 00 00       	mov    eax,0x4
c001b80c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b810:	85 d2                	test   edx,edx
c001b812:	74 0e                	je     c001b822 <ISO9660::close(void*)+0x1e>
c001b814:	83 ec 0c             	sub    esp,0xc
c001b817:	52                   	push   edx
c001b818:	e8 50 e2 fe ff       	call   c0009a6d <free>
c001b81d:	83 c4 10             	add    esp,0x10
c001b820:	31 c0                	xor    eax,eax
c001b822:	83 c4 0c             	add    esp,0xc
c001b825:	c3                   	ret    

c001b826 <ISO9660::closeDir(void*)>:
c001b826:	83 ec 0c             	sub    esp,0xc
c001b829:	b8 04 00 00 00       	mov    eax,0x4
c001b82e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b832:	85 d2                	test   edx,edx
c001b834:	74 0e                	je     c001b844 <ISO9660::closeDir(void*)+0x1e>
c001b836:	83 ec 0c             	sub    esp,0xc
c001b839:	52                   	push   edx
c001b83a:	e8 2e e2 fe ff       	call   c0009a6d <free>
c001b83f:	83 c4 10             	add    esp,0x10
c001b842:	31 c0                	xor    eax,eax
c001b844:	83 c4 0c             	add    esp,0xc
c001b847:	c3                   	ret    

c001b848 <ISO9660::~ISO9660()>:
c001b848:	83 ec 0c             	sub    esp,0xc
c001b84b:	ba 20 4a 02 c0       	mov    edx,0xc0024a20
c001b850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b854:	89 10                	mov    DWORD PTR [eax],edx
c001b856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b85a:	83 ec 0c             	sub    esp,0xc
c001b85d:	50                   	push   eax
c001b85e:	e8 95 15 ff ff       	call   c000cdf8 <Filesystem::~Filesystem()>
c001b863:	83 c4 10             	add    esp,0x10
c001b866:	90                   	nop
c001b867:	83 c4 0c             	add    esp,0xc
c001b86a:	c3                   	ret    
c001b86b:	90                   	nop

c001b86c <ISO9660::~ISO9660()>:
c001b86c:	83 ec 0c             	sub    esp,0xc
c001b86f:	83 ec 0c             	sub    esp,0xc
c001b872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b876:	e8 cd ff ff ff       	call   c001b848 <ISO9660::~ISO9660()>
c001b87b:	83 c4 10             	add    esp,0x10
c001b87e:	83 ec 08             	sub    esp,0x8
c001b881:	6a 08                	push   0x8
c001b883:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b887:	e8 51 11 ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c001b88c:	83 c4 10             	add    esp,0x10
c001b88f:	83 c4 0c             	add    esp,0xc
c001b892:	c3                   	ret    

c001b893 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b893:	55                   	push   ebp
c001b894:	31 c9                	xor    ecx,ecx
c001b896:	57                   	push   edi
c001b897:	56                   	push   esi
c001b898:	53                   	push   ebx
c001b899:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b89d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b8a1:	89 eb                	mov    ebx,ebp
c001b8a3:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b8a7:	39 ce                	cmp    esi,ecx
c001b8a9:	7e 17                	jle    c001b8c2 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b8ab:	31 d2                	xor    edx,edx
c001b8ad:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b8b1:	7d 13                	jge    c001b8c6 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b8b3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b8b7:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b8ba:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b8bd:	75 0d                	jne    c001b8cc <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b8bf:	42                   	inc    edx
c001b8c0:	eb eb                	jmp    c001b8ad <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b8c2:	31 c0                	xor    eax,eax
c001b8c4:	eb 0a                	jmp    c001b8d0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b8c6:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b8ca:	eb 04                	jmp    c001b8d0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b8cc:	41                   	inc    ecx
c001b8cd:	43                   	inc    ebx
c001b8ce:	eb d7                	jmp    c001b8a7 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b8d0:	5b                   	pop    ebx
c001b8d1:	5e                   	pop    esi
c001b8d2:	5f                   	pop    edi
c001b8d3:	5d                   	pop    ebp
c001b8d4:	c3                   	ret    

c001b8d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b8d5:	57                   	push   edi
c001b8d6:	56                   	push   esi
c001b8d7:	53                   	push   ebx
c001b8d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b8dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8e0:	39 0d 60 79 02 c0    	cmp    DWORD PTR ds:0xc0027960,ecx
c001b8e6:	75 08                	jne    c001b8f0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001b8e8:	38 05 94 5c 02 c0    	cmp    BYTE PTR ds:0xc0025c94,al
c001b8ee:	74 2b                	je     c001b91b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001b8f0:	83 ec 0c             	sub    esp,0xc
c001b8f3:	a2 94 5c 02 c0       	mov    ds:0xc0025c94,al
c001b8f8:	68 80 79 02 c0       	push   0xc0027980
c001b8fd:	0f be c0             	movsx  eax,al
c001b900:	6a 01                	push   0x1
c001b902:	89 0d 60 79 02 c0    	mov    DWORD PTR ds:0xc0027960,ecx
c001b908:	31 db                	xor    ebx,ebx
c001b90a:	53                   	push   ebx
c001b90b:	51                   	push   ecx
c001b90c:	ff 34 85 5c 67 02 c0 	push   DWORD PTR [eax*4-0x3ffd98a4]
c001b913:	e8 0c 4b ff ff       	call   c0010424 <LogicalDisk::read(unsigned long long, int, void*)>
c001b918:	83 c4 20             	add    esp,0x20
c001b91b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b91f:	be 80 79 02 c0       	mov    esi,0xc0027980
c001b924:	b9 00 08 00 00       	mov    ecx,0x800
c001b929:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b92b:	5b                   	pop    ebx
c001b92c:	5e                   	pop    esi
c001b92d:	5f                   	pop    edi
c001b92e:	c3                   	ret    
c001b92f:	90                   	nop

c001b930 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b930:	81 ec 10 08 00 00    	sub    esp,0x810
c001b936:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001b93d:	83 c0 41             	add    eax,0x41
c001b940:	0f be c0             	movsx  eax,al
c001b943:	50                   	push   eax
c001b944:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b948:	50                   	push   eax
c001b949:	6a 10                	push   0x10
c001b94b:	e8 85 ff ff ff       	call   c001b8d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b950:	83 c4 10             	add    esp,0x10
c001b953:	31 c0                	xor    eax,eax
c001b955:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b95a:	75 1d                	jne    c001b979 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b95c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b961:	75 16                	jne    c001b979 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b963:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b968:	75 0f                	jne    c001b979 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b96a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b96f:	75 08                	jne    c001b979 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b971:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b976:	0f 94 c0             	sete   al
c001b979:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b97f:	c3                   	ret    

c001b980 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b980:	55                   	push   ebp
c001b981:	57                   	push   edi
c001b982:	56                   	push   esi
c001b983:	53                   	push   ebx
c001b984:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001b98a:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001b991:	85 ed                	test   ebp,ebp
c001b993:	0f 84 da 01 00 00    	je     c001bb73 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001b999:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b9a1:	0f 84 cc 01 00 00    	je     c001bb73 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001b9a7:	b8 01 00 00 00       	mov    eax,0x1
c001b9ac:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001b9b0:	0f 85 c2 01 00 00    	jne    c001bb78 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001b9b6:	31 d2                	xor    edx,edx
c001b9b8:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b9bf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001b9c2:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001b9c5:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b9c8:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9cb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b9cf:	01 c8                	add    eax,ecx
c001b9d1:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001b9d4:	11 da                	adc    edx,ebx
c001b9d6:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001b9da:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b9de:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001b9e2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b9e6:	19 d7                	sbb    edi,edx
c001b9e8:	72 11                	jb     c001b9fb <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001b9ea:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001b9ed:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001b9f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b9f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b9f9:	eb 0c                	jmp    c001ba07 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001b9fb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001b9ff:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ba03:	29 ce                	sub    esi,ecx
c001ba05:	19 df                	sbb    edi,ebx
c001ba07:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ba0a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001ba0d:	0f a4 c2 0b          	shld   edx,eax,0xb
c001ba11:	c1 e0 0b             	shl    eax,0xb
c001ba14:	01 c8                	add    eax,ecx
c001ba16:	11 da                	adc    edx,ebx
c001ba18:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ba1f:	51                   	push   ecx
c001ba20:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ba24:	50                   	push   eax
c001ba25:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001ba29:	53                   	push   ebx
c001ba2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ba2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba32:	0f ac d0 0b          	shrd   eax,edx,0xb
c001ba36:	50                   	push   eax
c001ba37:	e8 99 fe ff ff       	call   c001b8d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ba3c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001ba3f:	b8 00 08 00 00       	mov    eax,0x800
c001ba44:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001ba4a:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001ba4e:	29 d0                	sub    eax,edx
c001ba50:	83 c4 10             	add    esp,0x10
c001ba53:	89 f9                	mov    ecx,edi
c001ba55:	39 c6                	cmp    esi,eax
c001ba57:	83 d9 00             	sbb    ecx,0x0
c001ba5a:	7d 1b                	jge    c001ba77 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001ba5c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ba61:	75 12                	jne    c001ba75 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001ba63:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001ba6a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba70:	e9 fa 00 00 00       	jmp    c001bb6f <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001ba75:	89 f0                	mov    eax,esi
c001ba77:	01 d3                	add    ebx,edx
c001ba79:	31 d2                	xor    edx,edx
c001ba7b:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001ba7f:	39 c2                	cmp    edx,eax
c001ba81:	7d 14                	jge    c001ba97 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001ba83:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001ba8a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ba8e:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001ba91:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001ba94:	42                   	inc    edx
c001ba95:	eb e8                	jmp    c001ba7f <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001ba97:	89 c2                	mov    edx,eax
c001ba99:	85 c0                	test   eax,eax
c001ba9b:	79 02                	jns    c001ba9f <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001ba9d:	31 d2                	xor    edx,edx
c001ba9f:	01 c2                	add    edx,eax
c001baa1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001baa4:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001baab:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001baaf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001bab3:	99                   	cdq    
c001bab4:	01 c1                	add    ecx,eax
c001bab6:	11 d3                	adc    ebx,edx
c001bab8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001babc:	29 c6                	sub    esi,eax
c001babe:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001bac2:	19 d7                	sbb    edi,edx
c001bac4:	89 34 24             	mov    DWORD PTR [esp],esi
c001bac7:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001bacb:	b8 ff 07 00 00       	mov    eax,0x7ff
c001bad0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001bad3:	b8 00 00 00 00       	mov    eax,0x0
c001bad8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001badc:	7d 43                	jge    c001bb21 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001bade:	52                   	push   edx
c001badf:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bae3:	50                   	push   eax
c001bae4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bae8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001baec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001baf0:	0f ac d0 0b          	shrd   eax,edx,0xb
c001baf4:	50                   	push   eax
c001baf5:	e8 db fd ff ff       	call   c001b8d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bafa:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001bb02:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001bb07:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001bb0f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001bb17:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001bb1c:	83 c4 10             	add    esp,0x10
c001bb1f:	eb aa                	jmp    c001bacb <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001bb21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb25:	0b 04 24             	or     eax,DWORD PTR [esp]
c001bb28:	74 2a                	je     c001bb54 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001bb2a:	50                   	push   eax
c001bb2b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bb2f:	50                   	push   eax
c001bb30:	8d 74 24 28          	lea    esi,[esp+0x28]
c001bb34:	56                   	push   esi
c001bb35:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bb39:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb3d:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001bb41:	51                   	push   ecx
c001bb42:	e8 8e fd ff ff       	call   c001b8d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bb47:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bb4b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bb4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bb51:	83 c4 10             	add    esp,0x10
c001bb54:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bb5b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bb5f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bb63:	89 18                	mov    DWORD PTR [eax],ebx
c001bb65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb69:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bb6c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bb6f:	31 c0                	xor    eax,eax
c001bb71:	eb 05                	jmp    c001bb78 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bb73:	b8 04 00 00 00       	mov    eax,0x4
c001bb78:	81 c4 2c 08 00 00    	add    esp,0x82c
c001bb7e:	5b                   	pop    ebx
c001bb7f:	5e                   	pop    esi
c001bb80:	5f                   	pop    edi
c001bb81:	5d                   	pop    ebp
c001bb82:	c3                   	ret    
c001bb83:	90                   	nop

c001bb84 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001bb84:	55                   	push   ebp
c001bb85:	57                   	push   edi
c001bb86:	56                   	push   esi
c001bb87:	53                   	push   ebx
c001bb88:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001bb8e:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001bb95:	85 ed                	test   ebp,ebp
c001bb97:	0f 84 51 02 00 00    	je     c001bdee <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bb9d:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001bba5:	0f 84 43 02 00 00    	je     c001bdee <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bbab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bbae:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001bbb1:	75 0a                	jne    c001bbbd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001bbb3:	b8 07 00 00 00       	mov    eax,0x7
c001bbb8:	e9 36 02 00 00       	jmp    c001bdf3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bbbd:	50                   	push   eax
c001bbbe:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bbc2:	50                   	push   eax
c001bbc3:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bbca:	53                   	push   ebx
c001bbcb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bbce:	c1 e0 0b             	shl    eax,0xb
c001bbd1:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001bbd4:	c1 e8 0b             	shr    eax,0xb
c001bbd7:	50                   	push   eax
c001bbd8:	e8 f8 fc ff ff       	call   c001b8d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bbdd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bbe0:	83 c4 10             	add    esp,0x10
c001bbe3:	89 c1                	mov    ecx,eax
c001bbe5:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001bbe8:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001bbee:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001bbf1:	84 db                	test   bl,bl
c001bbf3:	0f 85 8b 00 00 00    	jne    c001bc84 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001bbf9:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001bbff:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bc02:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001bc08:	29 c6                	sub    esi,eax
c001bc0a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001bc0e:	89 f3                	mov    ebx,esi
c001bc10:	89 f1                	mov    ecx,esi
c001bc12:	c1 fb 1f             	sar    ebx,0x1f
c001bc15:	01 f0                	add    eax,esi
c001bc17:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bc1a:	11 da                	adc    edx,ebx
c001bc1c:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc1f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bc23:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bc26:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bc29:	89 d8                	mov    eax,ebx
c001bc2b:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001bc2f:	ba 00 00 00 00       	mov    edx,0x0
c001bc34:	19 f8                	sbb    eax,edi
c001bc36:	b8 00 00 00 00       	mov    eax,0x0
c001bc3b:	73 08                	jae    c001bc45 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001bc3d:	89 f0                	mov    eax,esi
c001bc3f:	89 fa                	mov    edx,edi
c001bc41:	29 c8                	sub    eax,ecx
c001bc43:	19 da                	sbb    edx,ebx
c001bc45:	89 d7                	mov    edi,edx
c001bc47:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bc4a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bc4d:	09 c7                	or     edi,eax
c001bc4f:	0f 84 5e ff ff ff    	je     c001bbb3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001bc55:	57                   	push   edi
c001bc56:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bc5a:	50                   	push   eax
c001bc5b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bc62:	53                   	push   ebx
c001bc63:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bc66:	c1 e0 0b             	shl    eax,0xb
c001bc69:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001bc6d:	c1 e8 0b             	shr    eax,0xb
c001bc70:	50                   	push   eax
c001bc71:	e8 5f fc ff ff       	call   c001b8d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc76:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bc79:	83 c4 10             	add    esp,0x10
c001bc7c:	25 ff 07 00 00       	and    eax,0x7ff
c001bc81:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001bc84:	31 ff                	xor    edi,edi
c001bc86:	56                   	push   esi
c001bc87:	6a 28                	push   0x28
c001bc89:	6a 00                	push   0x0
c001bc8b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bc8f:	50                   	push   eax
c001bc90:	e8 bb 4a fe ff       	call   c0000750 <memset>
c001bc95:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bc98:	25 ff 07 00 00       	and    eax,0x7ff
c001bc9d:	89 c6                	mov    esi,eax
c001bc9f:	83 c6 21             	add    esi,0x21
c001bca2:	83 d7 00             	adc    edi,0x0
c001bca5:	83 c4 10             	add    esp,0x10
c001bca8:	31 c9                	xor    ecx,ecx
c001bcaa:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001bcb1:	83 f9 28             	cmp    ecx,0x28
c001bcb4:	88 04 24             	mov    BYTE PTR [esp],al
c001bcb7:	0f 94 c2             	sete   dl
c001bcba:	88 d0                	mov    al,dl
c001bcbc:	ba ff 07 00 00       	mov    edx,0x7ff
c001bcc1:	39 f2                	cmp    edx,esi
c001bcc3:	ba 00 00 00 00       	mov    edx,0x0
c001bcc8:	19 fa                	sbb    edx,edi
c001bcca:	0f 92 c2             	setb   dl
c001bccd:	09 c2                	or     edx,eax
c001bccf:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001bcd3:	0f 94 c0             	sete   al
c001bcd6:	08 d0                	or     al,dl
c001bcd8:	75 16                	jne    c001bcf0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001bcda:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001bcde:	74 10                	je     c001bcf0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001bce0:	8a 04 24             	mov    al,BYTE PTR [esp]
c001bce3:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001bce7:	41                   	inc    ecx
c001bce8:	83 c6 01             	add    esi,0x1
c001bceb:	83 d7 00             	adc    edi,0x0
c001bcee:	eb ba                	jmp    c001bcaa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001bcf0:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001bcf7:	83 ec 0c             	sub    esp,0xc
c001bcfa:	8d 74 24 24          	lea    esi,[esp+0x24]
c001bcfe:	56                   	push   esi
c001bcff:	e8 68 4a fe ff       	call   c000076c <strlen>
c001bd04:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001bd0b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001bd0f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001bd17:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd1a:	5a                   	pop    edx
c001bd1b:	25 ff 07 00 00       	and    eax,0x7ff
c001bd20:	59                   	pop    ecx
c001bd21:	01 f8                	add    eax,edi
c001bd23:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001bd29:	83 e0 02             	and    eax,0x2
c001bd2c:	3c 01                	cmp    al,0x1
c001bd2e:	19 c0                	sbb    eax,eax
c001bd30:	83 c0 02             	add    eax,0x2
c001bd33:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001bd37:	56                   	push   esi
c001bd38:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001bd3c:	50                   	push   eax
c001bd3d:	e8 ca 4a fe ff       	call   c000080c <strcpy>
c001bd42:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001bd46:	83 c4 10             	add    esp,0x10
c001bd49:	84 c0                	test   al,al
c001bd4b:	75 21                	jne    c001bd6e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001bd4d:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001bd55:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bd5d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001bd65:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001bd6c:	eb 28                	jmp    c001bd96 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bd6e:	fe c8                	dec    al
c001bd70:	75 24                	jne    c001bd96 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bd72:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001bd7a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bd82:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001bd8a:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001bd91:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001bd96:	8d 74 24 40          	lea    esi,[esp+0x40]
c001bd9a:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001bda1:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001bda8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bdaa:	0f b6 f3             	movzx  esi,bl
c001bdad:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001bdb4:	31 db                	xor    ebx,ebx
c001bdb6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bdbc:	89 df                	mov    edi,ebx
c001bdbe:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001bdc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdc4:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001bdc7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001bdca:	39 c6                	cmp    esi,eax
c001bdcc:	19 d7                	sbb    edi,edx
c001bdce:	72 10                	jb     c001bde0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001bdd0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001bdd7:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001bdde:	eb 0a                	jmp    c001bdea <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001bde0:	29 f0                	sub    eax,esi
c001bde2:	19 da                	sbb    edx,ebx
c001bde4:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bde7:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bdea:	31 c0                	xor    eax,eax
c001bdec:	eb 05                	jmp    c001bdf3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bdee:	b8 04 00 00 00       	mov    eax,0x4
c001bdf3:	81 c4 5c 09 00 00    	add    esp,0x95c
c001bdf9:	5b                   	pop    ebx
c001bdfa:	5e                   	pop    esi
c001bdfb:	5f                   	pop    edi
c001bdfc:	5d                   	pop    ebp
c001bdfd:	c3                   	ret    

c001bdfe <readRoot(unsigned int*, unsigned int*, char)>:
c001bdfe:	57                   	push   edi
c001bdff:	56                   	push   esi
c001be00:	81 ec 38 08 00 00    	sub    esp,0x838
c001be06:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001be0e:	50                   	push   eax
c001be0f:	8d 44 24 38          	lea    eax,[esp+0x38]
c001be13:	50                   	push   eax
c001be14:	6a 10                	push   0x10
c001be16:	e8 ba fa ff ff       	call   c001b8d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001be1b:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001be22:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001be26:	b9 22 00 00 00       	mov    ecx,0x22
c001be2b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001be2d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001be34:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001be38:	89 10                	mov    DWORD PTR [eax],edx
c001be3a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001be41:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001be45:	89 10                	mov    DWORD PTR [eax],edx
c001be47:	81 c4 44 08 00 00    	add    esp,0x844
c001be4d:	b0 01                	mov    al,0x1
c001be4f:	5e                   	pop    esi
c001be50:	5f                   	pop    edi
c001be51:	c3                   	ret    

c001be52 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001be52:	55                   	push   ebp
c001be53:	57                   	push   edi
c001be54:	56                   	push   esi
c001be55:	53                   	push   ebx
c001be56:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001be5c:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001be63:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001be6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001be6e:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001be72:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001be76:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001be7a:	75 03                	jne    c001be7f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001be7c:	83 c3 02             	add    ebx,0x2
c001be7f:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001be82:	75 03                	jne    c001be87 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001be84:	43                   	inc    ebx
c001be85:	eb f8                	jmp    c001be7f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001be87:	51                   	push   ecx
c001be88:	68 00 01 00 00       	push   0x100
c001be8d:	6a 00                	push   0x0
c001be8f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001be93:	50                   	push   eax
c001be94:	e8 b7 48 fe ff       	call   c0000750 <memset>
c001be99:	83 c4 10             	add    esp,0x10
c001be9c:	31 d2                	xor    edx,edx
c001be9e:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001bea1:	84 c0                	test   al,al
c001bea3:	74 21                	je     c001bec6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001bea5:	3c 2f                	cmp    al,0x2f
c001bea7:	75 0b                	jne    c001beb4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001bea9:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001bead:	bd 01 00 00 00       	mov    ebp,0x1
c001beb2:	eb 14                	jmp    c001bec8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001beb4:	8d 48 9f             	lea    ecx,[eax-0x61]
c001beb7:	80 f9 19             	cmp    cl,0x19
c001beba:	77 03                	ja     c001bebf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001bebc:	83 e8 20             	sub    eax,0x20
c001bebf:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001bec3:	42                   	inc    edx
c001bec4:	eb d8                	jmp    c001be9e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001bec6:	31 ed                	xor    ebp,ebp
c001bec8:	83 ec 0c             	sub    esp,0xc
c001becb:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001bed2:	e8 86 db fe ff       	call   c0009a5d <malloc>
c001bed7:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001bede:	89 c6                	mov    esi,eax
c001bee0:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001bee6:	c1 ef 0b             	shr    edi,0xb
c001bee9:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001bef0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001bef4:	83 c4 10             	add    esp,0x10
c001bef7:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001befc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bf00:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001bf07:	74 28                	je     c001bf31 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001bf09:	52                   	push   edx
c001bf0a:	57                   	push   edi
c001bf0b:	50                   	push   eax
c001bf0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bf10:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001bf17:	e8 b9 f9 ff ff       	call   c001b8d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bf1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bf20:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001bf27:	05 00 08 00 00       	add    eax,0x800
c001bf2c:	83 c4 10             	add    esp,0x10
c001bf2f:	eb cb                	jmp    c001befc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001bf31:	83 ec 0c             	sub    esp,0xc
c001bf34:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001bf38:	57                   	push   edi
c001bf39:	e8 2e 48 fe ff       	call   c000076c <strlen>
c001bf3e:	50                   	push   eax
c001bf3f:	57                   	push   edi
c001bf40:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001bf47:	56                   	push   esi
c001bf48:	e8 46 f9 ff ff       	call   c001b893 <__memmem(unsigned char*, int, unsigned char*, int)>
c001bf4d:	83 c4 20             	add    esp,0x20
c001bf50:	85 c0                	test   eax,eax
c001bf52:	75 13                	jne    c001bf67 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001bf54:	83 ec 0c             	sub    esp,0xc
c001bf57:	56                   	push   esi
c001bf58:	e8 10 db fe ff       	call   c0009a6d <free>
c001bf5d:	83 c4 10             	add    esp,0x10
c001bf60:	31 c0                	xor    eax,eax
c001bf62:	e9 b3 00 00 00       	jmp    c001c01a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001bf67:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001bf6b:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001bf6f:	c1 e7 08             	shl    edi,0x8
c001bf72:	c1 e2 10             	shl    edx,0x10
c001bf75:	09 d7                	or     edi,edx
c001bf77:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001bf7b:	09 d7                	or     edi,edx
c001bf7d:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001bf81:	c1 e2 18             	shl    edx,0x18
c001bf84:	09 d7                	or     edi,edx
c001bf86:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001bf8a:	89 d1                	mov    ecx,edx
c001bf8c:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001bf90:	c1 e1 08             	shl    ecx,0x8
c001bf93:	c1 e2 10             	shl    edx,0x10
c001bf96:	09 ca                	or     edx,ecx
c001bf98:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001bf9c:	09 ca                	or     edx,ecx
c001bf9e:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001bfa2:	c1 e1 18             	shl    ecx,0x18
c001bfa5:	09 ca                	or     edx,ecx
c001bfa7:	89 e9                	mov    ecx,ebp
c001bfa9:	84 c9                	test   cl,cl
c001bfab:	74 3c                	je     c001bfe9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001bfad:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bfb1:	83 ec 0c             	sub    esp,0xc
c001bfb4:	56                   	push   esi
c001bfb5:	e8 b3 da fe ff       	call   c0009a6d <free>
c001bfba:	83 c4 0c             	add    esp,0xc
c001bfbd:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001bfc4:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001bfc9:	50                   	push   eax
c001bfca:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001bfd1:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001bfd8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bfdc:	52                   	push   edx
c001bfdd:	57                   	push   edi
c001bfde:	53                   	push   ebx
c001bfdf:	e8 6e fe ff ff       	call   c001be52 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001bfe4:	83 c4 20             	add    esp,0x20
c001bfe7:	eb 31                	jmp    c001c01a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001bfe9:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001bfec:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001bff3:	d0 e8                	shr    al,1
c001bff5:	89 3b                	mov    DWORD PTR [ebx],edi
c001bff7:	83 e0 01             	and    eax,0x1
c001bffa:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c001:	83 ec 0c             	sub    esp,0xc
c001c004:	89 13                	mov    DWORD PTR [ebx],edx
c001c006:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c00d:	89 03                	mov    DWORD PTR [ebx],eax
c001c00f:	56                   	push   esi
c001c010:	e8 58 da fe ff       	call   c0009a6d <free>
c001c015:	83 c4 10             	add    esp,0x10
c001c018:	b0 01                	mov    al,0x1
c001c01a:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c020:	5b                   	pop    ebx
c001c021:	5e                   	pop    esi
c001c022:	5f                   	pop    edi
c001c023:	5d                   	pop    ebp
c001c024:	c3                   	ret    

c001c025 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c025:	55                   	push   ebp
c001c026:	57                   	push   edi
c001c027:	56                   	push   esi
c001c028:	53                   	push   ebx
c001c029:	83 ec 20             	sub    esp,0x20
c001c02c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c030:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c034:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c038:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c040:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c048:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c04d:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c053:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c059:	57                   	push   edi
c001c05a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c05e:	50                   	push   eax
c001c05f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c063:	50                   	push   eax
c001c064:	e8 95 fd ff ff       	call   c001bdfe <readRoot(unsigned int*, unsigned int*, char)>
c001c069:	5a                   	pop    edx
c001c06a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c06e:	e8 f9 46 fe ff       	call   c000076c <strlen>
c001c073:	83 c4 10             	add    esp,0x10
c001c076:	83 f8 03             	cmp    eax,0x3
c001c079:	77 17                	ja     c001c092 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c07b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c07f:	89 03                	mov    DWORD PTR [ebx],eax
c001c081:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c085:	89 06                	mov    DWORD PTR [esi],eax
c001c087:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c08e:	b0 01                	mov    al,0x1
c001c090:	eb 19                	jmp    c001c0ab <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c092:	50                   	push   eax
c001c093:	55                   	push   ebp
c001c094:	57                   	push   edi
c001c095:	56                   	push   esi
c001c096:	53                   	push   ebx
c001c097:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c09b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c09f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c0a3:	e8 aa fd ff ff       	call   c001be52 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c0a8:	83 c4 20             	add    esp,0x20
c001c0ab:	83 c4 1c             	add    esp,0x1c
c001c0ae:	5b                   	pop    ebx
c001c0af:	5e                   	pop    esi
c001c0b0:	5f                   	pop    edi
c001c0b1:	5d                   	pop    ebp
c001c0b2:	c3                   	ret    
c001c0b3:	90                   	nop

c001c0b4 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c0b4:	57                   	push   edi
c001c0b5:	56                   	push   esi
c001c0b6:	53                   	push   ebx
c001c0b7:	83 ec 10             	sub    esp,0x10
c001c0ba:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c0be:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c0c2:	85 ff                	test   edi,edi
c001c0c4:	0f 84 8b 00 00 00    	je     c001c155 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c0ca:	85 f6                	test   esi,esi
c001c0cc:	0f 84 83 00 00 00    	je     c001c155 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c0d2:	b8 03 00 00 00       	mov    eax,0x3
c001c0d7:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c0dc:	75 7c                	jne    c001c15a <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c0de:	83 ec 0c             	sub    esp,0xc
c001c0e1:	6a 1c                	push   0x1c
c001c0e3:	e8 75 d9 fe ff       	call   c0009a5d <malloc>
c001c0e8:	89 07                	mov    DWORD PTR [edi],eax
c001c0ea:	89 c3                	mov    ebx,eax
c001c0ec:	58                   	pop    eax
c001c0ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0f1:	50                   	push   eax
c001c0f2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c0f5:	50                   	push   eax
c001c0f6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c0fa:	50                   	push   eax
c001c0fb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c0ff:	50                   	push   eax
c001c100:	56                   	push   esi
c001c101:	e8 1f ff ff ff       	call   c001c025 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c106:	83 c4 20             	add    esp,0x20
c001c109:	84 c0                	test   al,al
c001c10b:	74 07                	je     c001c114 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c10d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c112:	74 0b                	je     c001c11f <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c114:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c118:	b8 01 00 00 00       	mov    eax,0x1
c001c11d:	eb 3b                	jmp    c001c15a <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c11f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c123:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c127:	89 03                	mov    DWORD PTR [ebx],eax
c001c129:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c130:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c134:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c13b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c142:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c145:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c14c:	8a 06                	mov    al,BYTE PTR [esi]
c001c14e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c151:	31 c0                	xor    eax,eax
c001c153:	eb 05                	jmp    c001c15a <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c155:	b8 04 00 00 00       	mov    eax,0x4
c001c15a:	83 c4 10             	add    esp,0x10
c001c15d:	5b                   	pop    ebx
c001c15e:	5e                   	pop    esi
c001c15f:	5f                   	pop    edi
c001c160:	c3                   	ret    
c001c161:	90                   	nop

c001c162 <ISO9660::exists(char const*)>:
c001c162:	83 ec 28             	sub    esp,0x28
c001c165:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c169:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c16d:	52                   	push   edx
c001c16e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c171:	52                   	push   edx
c001c172:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c176:	52                   	push   edx
c001c177:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c17b:	52                   	push   edx
c001c17c:	50                   	push   eax
c001c17d:	e8 a3 fe ff ff       	call   c001c025 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c182:	83 c4 3c             	add    esp,0x3c
c001c185:	c3                   	ret    

c001c186 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c186:	56                   	push   esi
c001c187:	53                   	push   ebx
c001c188:	83 ec 14             	sub    esp,0x14
c001c18b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c18f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c193:	85 db                	test   ebx,ebx
c001c195:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c199:	0f 94 c2             	sete   dl
c001c19c:	85 f6                	test   esi,esi
c001c19e:	0f 94 c0             	sete   al
c001c1a1:	08 c2                	or     dl,al
c001c1a3:	75 68                	jne    c001c20d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c1a5:	85 c9                	test   ecx,ecx
c001c1a7:	74 64                	je     c001c20d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c1a9:	83 ec 0c             	sub    esp,0xc
c001c1ac:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c1af:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c1b3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c1b9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c1c0:	50                   	push   eax
c001c1c1:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c1c4:	50                   	push   eax
c001c1c5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c1c9:	50                   	push   eax
c001c1ca:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c1ce:	50                   	push   eax
c001c1cf:	51                   	push   ecx
c001c1d0:	e8 50 fe ff ff       	call   c001c025 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c1d5:	83 c4 20             	add    esp,0x20
c001c1d8:	ba 01 00 00 00       	mov    edx,0x1
c001c1dd:	84 c0                	test   al,al
c001c1df:	74 31                	je     c001c212 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c1e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1e5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c1ec:	89 03                	mov    DWORD PTR [ebx],eax
c001c1ee:	ba 00 00 00 00       	mov    edx,0x0
c001c1f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1f7:	85 c0                	test   eax,eax
c001c1f9:	0f 95 06             	setne  BYTE PTR [esi]
c001c1fc:	74 14                	je     c001c212 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c1fe:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c204:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c20b:	eb 05                	jmp    c001c212 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c20d:	ba 04 00 00 00       	mov    edx,0x4
c001c212:	83 c4 14             	add    esp,0x14
c001c215:	89 d0                	mov    eax,edx
c001c217:	5b                   	pop    ebx
c001c218:	5e                   	pop    esi
c001c219:	c3                   	ret    

c001c21a <ISO9660::openDir(char const*, void**)>:
c001c21a:	57                   	push   edi
c001c21b:	56                   	push   esi
c001c21c:	53                   	push   ebx
c001c21d:	83 ec 10             	sub    esp,0x10
c001c220:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c224:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c228:	85 ff                	test   edi,edi
c001c22a:	74 7b                	je     c001c2a7 <ISO9660::openDir(char const*, void**)+0x8d>
c001c22c:	85 f6                	test   esi,esi
c001c22e:	74 77                	je     c001c2a7 <ISO9660::openDir(char const*, void**)+0x8d>
c001c230:	83 ec 0c             	sub    esp,0xc
c001c233:	6a 1c                	push   0x1c
c001c235:	e8 23 d8 fe ff       	call   c0009a5d <malloc>
c001c23a:	89 07                	mov    DWORD PTR [edi],eax
c001c23c:	89 c3                	mov    ebx,eax
c001c23e:	58                   	pop    eax
c001c23f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c243:	50                   	push   eax
c001c244:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c247:	50                   	push   eax
c001c248:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c24c:	50                   	push   eax
c001c24d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c251:	50                   	push   eax
c001c252:	56                   	push   esi
c001c253:	e8 cd fd ff ff       	call   c001c025 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c258:	83 c4 20             	add    esp,0x20
c001c25b:	84 c0                	test   al,al
c001c25d:	74 07                	je     c001c266 <ISO9660::openDir(char const*, void**)+0x4c>
c001c25f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c264:	75 0b                	jne    c001c271 <ISO9660::openDir(char const*, void**)+0x57>
c001c266:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c26a:	b8 01 00 00 00       	mov    eax,0x1
c001c26f:	eb 3b                	jmp    c001c2ac <ISO9660::openDir(char const*, void**)+0x92>
c001c271:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c275:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c279:	89 03                	mov    DWORD PTR [ebx],eax
c001c27b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c282:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c286:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c28d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c294:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c297:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c29e:	8a 06                	mov    al,BYTE PTR [esi]
c001c2a0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c2a3:	31 c0                	xor    eax,eax
c001c2a5:	eb 05                	jmp    c001c2ac <ISO9660::openDir(char const*, void**)+0x92>
c001c2a7:	b8 04 00 00 00       	mov    eax,0x4
c001c2ac:	83 c4 10             	add    esp,0x10
c001c2af:	5b                   	pop    ebx
c001c2b0:	5e                   	pop    esi
c001c2b1:	5f                   	pop    edi
c001c2b2:	c3                   	ret    
c001c2b3:	90                   	nop

c001c2b4 <ISO9660::ISO9660()>:
c001c2b4:	83 ec 0c             	sub    esp,0xc
c001c2b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2bb:	83 ec 0c             	sub    esp,0xc
c001c2be:	50                   	push   eax
c001c2bf:	e8 10 0b ff ff       	call   c000cdd4 <Filesystem::Filesystem()>
c001c2c4:	83 c4 10             	add    esp,0x10
c001c2c7:	ba 20 4a 02 c0       	mov    edx,0xc0024a20
c001c2cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d0:	89 10                	mov    DWORD PTR [eax],edx
c001c2d2:	90                   	nop
c001c2d3:	83 c4 0c             	add    esp,0xc
c001c2d6:	c3                   	ret    
c001c2d7:	90                   	nop

c001c2d8 <SoundCard::beginPlayback()>:
c001c2d8:	c7 44 24 04 80 4a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024a80
c001c2e0:	e9 98 81 ff ff       	jmp    c001447d <Krnl::panic(char const*)>
c001c2e5:	90                   	nop

c001c2e6 <SoundCard::stopPlayback()>:
c001c2e6:	c7 44 24 04 b4 4a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024ab4
c001c2ee:	e9 8a 81 ff ff       	jmp    c001447d <Krnl::panic(char const*)>
c001c2f3:	90                   	nop

c001c2f4 <SoundCard::SoundCard(char const*)>:
c001c2f4:	83 ec 1c             	sub    esp,0x1c
c001c2f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2fb:	83 ec 08             	sub    esp,0x8
c001c2fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c302:	50                   	push   eax
c001c303:	e8 fe 1d ff ff       	call   c000e106 <Device::Device(char const*)>
c001c308:	83 c4 10             	add    esp,0x10
c001c30b:	ba d4 4b 02 c0       	mov    edx,0xc0024bd4
c001c310:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c314:	89 10                	mov    DWORD PTR [eax],edx
c001c316:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c31a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c321:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c325:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c32f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c333:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c33d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c341:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c34b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c34f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c359:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c361:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c366:	7f 19                	jg     c001c381 <SoundCard::SoundCard(char const*)+0x8d>
c001c368:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c36c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c370:	83 c2 54             	add    edx,0x54
c001c373:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c37b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c37f:	eb e0                	jmp    c001c361 <SoundCard::SoundCard(char const*)+0x6d>
c001c381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c385:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c38c:	90                   	nop
c001c38d:	83 c4 1c             	add    esp,0x1c
c001c390:	c3                   	ret    
c001c391:	90                   	nop

c001c392 <SoundCard::~SoundCard()>:
c001c392:	83 ec 0c             	sub    esp,0xc
c001c395:	ba d4 4b 02 c0       	mov    edx,0xc0024bd4
c001c39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c39e:	89 10                	mov    DWORD PTR [eax],edx
c001c3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3a4:	83 ec 0c             	sub    esp,0xc
c001c3a7:	50                   	push   eax
c001c3a8:	e8 23 1a ff ff       	call   c000ddd0 <Device::~Device()>
c001c3ad:	83 c4 10             	add    esp,0x10
c001c3b0:	90                   	nop
c001c3b1:	83 c4 0c             	add    esp,0xc
c001c3b4:	c3                   	ret    
c001c3b5:	90                   	nop

c001c3b6 <SoundCard::~SoundCard()>:
c001c3b6:	83 ec 0c             	sub    esp,0xc
c001c3b9:	83 ec 0c             	sub    esp,0xc
c001c3bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3c0:	e8 cd ff ff ff       	call   c001c392 <SoundCard::~SoundCard()>
c001c3c5:	83 c4 10             	add    esp,0x10
c001c3c8:	83 ec 08             	sub    esp,0x8
c001c3cb:	68 e8 01 00 00       	push   0x1e8
c001c3d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3d4:	e8 04 06 ff ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c001c3d9:	83 c4 10             	add    esp,0x10
c001c3dc:	83 c4 0c             	add    esp,0xc
c001c3df:	c3                   	ret    

c001c3e0 <SoundCard::configureRates(int, int, int)>:
c001c3e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c3e4:	31 c0                	xor    eax,eax
c001c3e6:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c3ed:	75 20                	jne    c001c40f <SoundCard::configureRates(int, int, int)+0x2f>
c001c3ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3f3:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c3f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3fd:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c407:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c40d:	b0 01                	mov    al,0x1
c001c40f:	c3                   	ret    

c001c410 <SoundCard::getSamples16(int, short*)>:
c001c410:	55                   	push   ebp
c001c411:	57                   	push   edi
c001c412:	31 ff                	xor    edi,edi
c001c414:	56                   	push   esi
c001c415:	53                   	push   ebx
c001c416:	83 ec 28             	sub    esp,0x28
c001c419:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c41d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c421:	8d 5c 2d 00          	lea    ebx,[ebp+ebp*1+0x0]
c001c425:	68 e7 4a 02 c0       	push   0xc0024ae7
c001c42a:	e8 8f 06 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001c42f:	83 c4 0c             	add    esp,0xc
c001c432:	53                   	push   ebx
c001c433:	6a 00                	push   0x0
c001c435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c439:	e8 12 43 fe ff       	call   c0000750 <memset>
c001c43e:	58                   	pop    eax
c001c43f:	5a                   	pop    edx
c001c440:	53                   	push   ebx
c001c441:	31 db                	xor    ebx,ebx
c001c443:	68 06 4b 02 c0       	push   0xc0024b06
c001c448:	e8 71 06 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001c44d:	83 c4 10             	add    esp,0x10
c001c450:	52                   	push   edx
c001c451:	52                   	push   edx
c001c452:	53                   	push   ebx
c001c453:	68 19 4b 02 c0       	push   0xc0024b19
c001c458:	e8 61 06 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001c45d:	59                   	pop    ecx
c001c45e:	58                   	pop    eax
c001c45f:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c466:	68 31 4b 02 c0       	push   0xc0024b31
c001c46b:	e8 4e 06 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001c470:	8b 84 9e 58 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x158]
c001c477:	83 c4 10             	add    esp,0x10
c001c47a:	85 c0                	test   eax,eax
c001c47c:	74 44                	je     c001c4c2 <SoundCard::getSamples16(int, short*)+0xb2>
c001c47e:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c482:	75 3e                	jne    c001c4c2 <SoundCard::getSamples16(int, short*)+0xb2>
c001c484:	50                   	push   eax
c001c485:	50                   	push   eax
c001c486:	53                   	push   ebx
c001c487:	68 43 4b 02 c0       	push   0xc0024b43
c001c48c:	e8 2d 06 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001c491:	56                   	push   esi
c001c492:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c496:	55                   	push   ebp
c001c497:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c49e:	e8 6f 03 00 00       	call   c001c812 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c4a3:	83 c4 18             	add    esp,0x18
c001c4a6:	50                   	push   eax
c001c4a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4ab:	68 5a 4b 02 c0       	push   0xc0024b5a
c001c4b0:	e8 09 06 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001c4b5:	83 c4 10             	add    esp,0x10
c001c4b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c4bc:	39 c7                	cmp    edi,eax
c001c4be:	7d 02                	jge    c001c4c2 <SoundCard::getSamples16(int, short*)+0xb2>
c001c4c0:	89 c7                	mov    edi,eax
c001c4c2:	43                   	inc    ebx
c001c4c3:	83 fb 20             	cmp    ebx,0x20
c001c4c6:	75 88                	jne    c001c450 <SoundCard::getSamples16(int, short*)+0x40>
c001c4c8:	85 ff                	test   edi,edi
c001c4ca:	75 21                	jne    c001c4ed <SoundCard::getSamples16(int, short*)+0xdd>
c001c4cc:	80 be d8 01 00 00 00 	cmp    BYTE PTR [esi+0x1d8],0x0
c001c4d3:	74 18                	je     c001c4ed <SoundCard::getSamples16(int, short*)+0xdd>
c001c4d5:	83 ec 0c             	sub    esp,0xc
c001c4d8:	68 78 4b 02 c0       	push   0xc0024b78
c001c4dd:	e8 dc 05 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001c4e2:	8b 06                	mov    eax,DWORD PTR [esi]
c001c4e4:	89 34 24             	mov    DWORD PTR [esp],esi
c001c4e7:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c4ea:	83 c4 10             	add    esp,0x10
c001c4ed:	83 c4 1c             	add    esp,0x1c
c001c4f0:	89 f8                	mov    eax,edi
c001c4f2:	5b                   	pop    ebx
c001c4f3:	5e                   	pop    esi
c001c4f4:	5f                   	pop    edi
c001c4f5:	5d                   	pop    ebp
c001c4f6:	c3                   	ret    
c001c4f7:	90                   	nop

c001c4f8 <SoundCard::getSamples32(int, int*)>:
c001c4f8:	55                   	push   ebp
c001c4f9:	57                   	push   edi
c001c4fa:	31 ff                	xor    edi,edi
c001c4fc:	56                   	push   esi
c001c4fd:	31 f6                	xor    esi,esi
c001c4ff:	53                   	push   ebx
c001c500:	83 ec 10             	sub    esp,0x10
c001c503:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c507:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c50b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c50f:	c1 e0 02             	shl    eax,0x2
c001c512:	50                   	push   eax
c001c513:	6a 00                	push   0x0
c001c515:	55                   	push   ebp
c001c516:	e8 35 42 fe ff       	call   c0000750 <memset>
c001c51b:	83 c4 10             	add    esp,0x10
c001c51e:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c525:	85 c0                	test   eax,eax
c001c527:	74 1b                	je     c001c544 <SoundCard::getSamples32(int, int*)+0x4c>
c001c529:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c52d:	75 15                	jne    c001c544 <SoundCard::getSamples32(int, int*)+0x4c>
c001c52f:	53                   	push   ebx
c001c530:	55                   	push   ebp
c001c531:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c535:	50                   	push   eax
c001c536:	e8 c9 03 00 00       	call   c001c904 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c53b:	83 c4 10             	add    esp,0x10
c001c53e:	39 c6                	cmp    esi,eax
c001c540:	7d 02                	jge    c001c544 <SoundCard::getSamples32(int, int*)+0x4c>
c001c542:	89 c6                	mov    esi,eax
c001c544:	47                   	inc    edi
c001c545:	83 ff 20             	cmp    edi,0x20
c001c548:	75 d4                	jne    c001c51e <SoundCard::getSamples32(int, int*)+0x26>
c001c54a:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001c550:	85 f6                	test   esi,esi
c001c552:	75 0f                	jne    c001c563 <SoundCard::getSamples32(int, int*)+0x6b>
c001c554:	84 c0                	test   al,al
c001c556:	74 1b                	je     c001c573 <SoundCard::getSamples32(int, int*)+0x7b>
c001c558:	83 ec 0c             	sub    esp,0xc
c001c55b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c55d:	53                   	push   ebx
c001c55e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c561:	eb 0d                	jmp    c001c570 <SoundCard::getSamples32(int, int*)+0x78>
c001c563:	84 c0                	test   al,al
c001c565:	75 0c                	jne    c001c573 <SoundCard::getSamples32(int, int*)+0x7b>
c001c567:	83 ec 0c             	sub    esp,0xc
c001c56a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c56c:	53                   	push   ebx
c001c56d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c570:	83 c4 10             	add    esp,0x10
c001c573:	83 c4 0c             	add    esp,0xc
c001c576:	89 f0                	mov    eax,esi
c001c578:	5b                   	pop    ebx
c001c579:	5e                   	pop    esi
c001c57a:	5f                   	pop    edi
c001c57b:	5d                   	pop    ebp
c001c57c:	c3                   	ret    
c001c57d:	90                   	nop

c001c57e <SoundCard::addChannel(SoundPort*)>:
c001c57e:	56                   	push   esi
c001c57f:	53                   	push   ebx
c001c580:	53                   	push   ebx
c001c581:	31 db                	xor    ebx,ebx
c001c583:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c587:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001c58f:	74 27                	je     c001c5b8 <SoundCard::addChannel(SoundPort*)+0x3a>
c001c591:	43                   	inc    ebx
c001c592:	83 fb 20             	cmp    ebx,0x20
c001c595:	75 f0                	jne    c001c587 <SoundCard::addChannel(SoundPort*)+0x9>
c001c597:	83 ec 0c             	sub    esp,0xc
c001c59a:	83 cb ff             	or     ebx,0xffffffff
c001c59d:	68 93 4b 02 c0       	push   0xc0024b93
c001c5a2:	e8 17 05 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001c5a7:	c7 04 24 8c 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b8c
c001c5ae:	e8 ca 7e ff ff       	call   c001447d <Krnl::panic(char const*)>
c001c5b3:	83 c4 10             	add    esp,0x10
c001c5b6:	eb 1b                	jmp    c001c5d3 <SoundCard::addChannel(SoundPort*)+0x55>
c001c5b8:	51                   	push   ecx
c001c5b9:	51                   	push   ecx
c001c5ba:	53                   	push   ebx
c001c5bb:	68 ab 4b 02 c0       	push   0xc0024bab
c001c5c0:	e8 f9 04 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001c5c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c5c9:	83 c4 10             	add    esp,0x10
c001c5cc:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001c5d3:	89 d8                	mov    eax,ebx
c001c5d5:	5a                   	pop    edx
c001c5d6:	5b                   	pop    ebx
c001c5d7:	5e                   	pop    esi
c001c5d8:	c3                   	ret    
c001c5d9:	90                   	nop

c001c5da <SoundCard::removeChannel(int)>:
c001c5da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c5e2:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c5ed:	c3                   	ret    

c001c5ee <SoundPort::SoundPort(int, int, int, int)>:
c001c5ee:	83 ec 0c             	sub    esp,0xc
c001c5f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c5fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c600:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c608:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c60c:	89 10                	mov    DWORD PTR [eax],edx
c001c60e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c612:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c616:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c61d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c621:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c624:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c629:	75 11                	jne    c001c63c <SoundPort::SoundPort(int, int, int, int)+0x4e>
c001c62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c62f:	8b 00                	mov    eax,DWORD PTR [eax]
c001c631:	05 a0 0f 00 00       	add    eax,0xfa0
c001c636:	01 c0                	add    eax,eax
c001c638:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c63c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c640:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c644:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c64b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c656:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c659:	c1 e0 02             	shl    eax,0x2
c001c65c:	83 ec 0c             	sub    esp,0xc
c001c65f:	50                   	push   eax
c001c660:	e8 f8 d3 fe ff       	call   c0009a5d <malloc>
c001c665:	83 c4 10             	add    esp,0x10
c001c668:	89 c2                	mov    edx,eax
c001c66a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c66e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c671:	90                   	nop
c001c672:	83 c4 0c             	add    esp,0xc
c001c675:	c3                   	ret    

c001c676 <SoundPort::~SoundPort()>:
c001c676:	83 ec 0c             	sub    esp,0xc
c001c679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c67d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c680:	85 c0                	test   eax,eax
c001c682:	74 1e                	je     c001c6a2 <SoundPort::~SoundPort()+0x2c>
c001c684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c688:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c68b:	83 ec 0c             	sub    esp,0xc
c001c68e:	50                   	push   eax
c001c68f:	e8 d9 d3 fe ff       	call   c0009a6d <free>
c001c694:	83 c4 10             	add    esp,0x10
c001c697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c69b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c6a2:	90                   	nop
c001c6a3:	83 c4 0c             	add    esp,0xc
c001c6a6:	c3                   	ret    
c001c6a7:	90                   	nop

c001c6a8 <SoundPort::unpause()>:
c001c6a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6ac:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c6b0:	c3                   	ret    
c001c6b1:	90                   	nop

c001c6b2 <SoundPort::pause()>:
c001c6b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6b6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c6ba:	c3                   	ret    
c001c6bb:	90                   	nop

c001c6bc <SoundPort::getBufferUsed()>:
c001c6bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6c0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c6c3:	c3                   	ret    

c001c6c4 <SoundPort::getBufferSize()>:
c001c6c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6c8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c6cb:	c3                   	ret    

c001c6cc <SoundPort::buffer16(short*, int)>:
c001c6cc:	55                   	push   ebp
c001c6cd:	57                   	push   edi
c001c6ce:	56                   	push   esi
c001c6cf:	53                   	push   ebx
c001c6d0:	83 ec 1c             	sub    esp,0x1c
c001c6d3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c6d7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c6db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c6de:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c6e1:	74 7d                	je     c001c760 <SoundPort::buffer16(short*, int)+0x94>
c001c6e3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c6e7:	85 c9                	test   ecx,ecx
c001c6e9:	7e 75                	jle    c001c760 <SoundPort::buffer16(short*, int)+0x94>
c001c6eb:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001c6ef:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c6f2:	c1 e1 0f             	shl    ecx,0xf
c001c6f5:	8d 70 01             	lea    esi,[eax+0x1]
c001c6f8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c6fb:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c6fe:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c701:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c704:	74 64                	je     c001c76a <SoundPort::buffer16(short*, int)+0x9e>
c001c706:	31 f6                	xor    esi,esi
c001c708:	eb 1e                	jmp    c001c728 <SoundPort::buffer16(short*, int)+0x5c>
c001c70a:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001c70f:	8d 79 01             	lea    edi,[ecx+0x1]
c001c712:	c1 e3 0f             	shl    ebx,0xf
c001c715:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001c718:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001c71b:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001c71e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c721:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c724:	74 17                	je     c001c73d <SoundPort::buffer16(short*, int)+0x71>
c001c726:	89 c6                	mov    esi,eax
c001c728:	8d 46 01             	lea    eax,[esi+0x1]
c001c72b:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001c72f:	75 d9                	jne    c001c70a <SoundPort::buffer16(short*, int)+0x3e>
c001c731:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c735:	83 c4 1c             	add    esp,0x1c
c001c738:	5b                   	pop    ebx
c001c739:	5e                   	pop    esi
c001c73a:	5f                   	pop    edi
c001c73b:	5d                   	pop    ebp
c001c73c:	c3                   	ret    
c001c73d:	8d 46 02             	lea    eax,[esi+0x2]
c001c740:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c744:	83 ec 0c             	sub    esp,0xc
c001c747:	68 00 4c 02 c0       	push   0xc0024c00
c001c74c:	e8 6d 03 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001c751:	83 c4 10             	add    esp,0x10
c001c754:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c758:	83 c4 1c             	add    esp,0x1c
c001c75b:	5b                   	pop    ebx
c001c75c:	5e                   	pop    esi
c001c75d:	5f                   	pop    edi
c001c75e:	5d                   	pop    ebp
c001c75f:	c3                   	ret    
c001c760:	83 c4 1c             	add    esp,0x1c
c001c763:	31 c0                	xor    eax,eax
c001c765:	5b                   	pop    ebx
c001c766:	5e                   	pop    esi
c001c767:	5f                   	pop    edi
c001c768:	5d                   	pop    ebp
c001c769:	c3                   	ret    
c001c76a:	b8 01 00 00 00       	mov    eax,0x1
c001c76f:	eb cf                	jmp    c001c740 <SoundPort::buffer16(short*, int)+0x74>
c001c771:	90                   	nop

c001c772 <SoundPort::buffer32(int*, int)>:
c001c772:	55                   	push   ebp
c001c773:	57                   	push   edi
c001c774:	56                   	push   esi
c001c775:	53                   	push   ebx
c001c776:	83 ec 1c             	sub    esp,0x1c
c001c779:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c77d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c781:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c784:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c788:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c78c:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c78f:	74 70                	je     c001c801 <SoundPort::buffer32(int*, int)+0x8f>
c001c791:	85 c0                	test   eax,eax
c001c793:	7e 6c                	jle    c001c801 <SoundPort::buffer32(int*, int)+0x8f>
c001c795:	8d 71 01             	lea    esi,[ecx+0x1]
c001c798:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c79b:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c79e:	8b 37                	mov    esi,DWORD PTR [edi]
c001c7a0:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c7a3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c7a6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c7a9:	74 60                	je     c001c80b <SoundPort::buffer32(int*, int)+0x99>
c001c7ab:	31 f6                	xor    esi,esi
c001c7ad:	eb 1a                	jmp    c001c7c9 <SoundPort::buffer32(int*, int)+0x57>
c001c7af:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c7b2:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c7b5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c7b8:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c7bb:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c7bf:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c7c2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c7c5:	74 17                	je     c001c7de <SoundPort::buffer32(int*, int)+0x6c>
c001c7c7:	89 de                	mov    esi,ebx
c001c7c9:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c7cc:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001c7d0:	75 dd                	jne    c001c7af <SoundPort::buffer32(int*, int)+0x3d>
c001c7d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7d6:	83 c4 1c             	add    esp,0x1c
c001c7d9:	5b                   	pop    ebx
c001c7da:	5e                   	pop    esi
c001c7db:	5f                   	pop    edi
c001c7dc:	5d                   	pop    ebp
c001c7dd:	c3                   	ret    
c001c7de:	8d 46 02             	lea    eax,[esi+0x2]
c001c7e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7e5:	83 ec 0c             	sub    esp,0xc
c001c7e8:	68 1b 4c 02 c0       	push   0xc0024c1b
c001c7ed:	e8 cc 02 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001c7f2:	83 c4 10             	add    esp,0x10
c001c7f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7f9:	83 c4 1c             	add    esp,0x1c
c001c7fc:	5b                   	pop    ebx
c001c7fd:	5e                   	pop    esi
c001c7fe:	5f                   	pop    edi
c001c7ff:	5d                   	pop    ebp
c001c800:	c3                   	ret    
c001c801:	83 c4 1c             	add    esp,0x1c
c001c804:	31 c0                	xor    eax,eax
c001c806:	5b                   	pop    ebx
c001c807:	5e                   	pop    esi
c001c808:	5f                   	pop    edi
c001c809:	5d                   	pop    ebp
c001c80a:	c3                   	ret    
c001c80b:	b8 01 00 00 00       	mov    eax,0x1
c001c810:	eb cf                	jmp    c001c7e1 <SoundPort::buffer32(int*, int)+0x6f>

c001c812 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c812:	57                   	push   edi
c001c813:	56                   	push   esi
c001c814:	53                   	push   ebx
c001c815:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c819:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001c81d:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001c823:	39 03                	cmp    DWORD PTR [ebx],eax
c001c825:	74 10                	je     c001c837 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x25>
c001c827:	83 ec 0c             	sub    esp,0xc
c001c82a:	68 70 4c 02 c0       	push   0xc0024c70
c001c82f:	e8 49 7c ff ff       	call   c001447d <Krnl::panic(char const*)>
c001c834:	83 c4 10             	add    esp,0x10
c001c837:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001c83d:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c840:	74 10                	je     c001c852 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x40>
c001c842:	83 ec 0c             	sub    esp,0xc
c001c845:	68 36 4c 02 c0       	push   0xc0024c36
c001c84a:	e8 2e 7c ff ff       	call   c001447d <Krnl::panic(char const*)>
c001c84f:	83 c4 10             	add    esp,0x10
c001c852:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001c858:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c85b:	74 10                	je     c001c86d <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x5b>
c001c85d:	83 ec 0c             	sub    esp,0xc
c001c860:	68 36 4c 02 c0       	push   0xc0024c36
c001c865:	e8 13 7c ff ff       	call   c001447d <Krnl::panic(char const*)>
c001c86a:	83 c4 10             	add    esp,0x10
c001c86d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c870:	89 c6                	mov    esi,eax
c001c872:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001c876:	7e 04                	jle    c001c87c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6a>
c001c878:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c87c:	85 f6                	test   esi,esi
c001c87e:	7e 2d                	jle    c001c8ad <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x9b>
c001c880:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c884:	8d 3c 36             	lea    edi,[esi+esi*1]
c001c887:	31 c9                	xor    ecx,ecx
c001c889:	01 d7                	add    edi,edx
c001c88b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c88e:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001c891:	85 c0                	test   eax,eax
c001c893:	79 05                	jns    c001c89a <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x88>
c001c895:	05 ff 7f 00 00       	add    eax,0x7fff
c001c89a:	c1 f8 0f             	sar    eax,0xf
c001c89d:	83 c1 04             	add    ecx,0x4
c001c8a0:	66 01 02             	add    WORD PTR [edx],ax
c001c8a3:	83 c2 02             	add    edx,0x2
c001c8a6:	39 d7                	cmp    edi,edx
c001c8a8:	75 e1                	jne    c001c88b <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x79>
c001c8aa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c8ad:	56                   	push   esi
c001c8ae:	89 c2                	mov    edx,eax
c001c8b0:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001c8b7:	29 f2                	sub    edx,esi
c001c8b9:	52                   	push   edx
c001c8ba:	50                   	push   eax
c001c8bb:	68 90 4c 02 c0       	push   0xc0024c90
c001c8c0:	e8 f9 01 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001c8c5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c8c8:	50                   	push   eax
c001c8c9:	01 f8                	add    eax,edi
c001c8cb:	50                   	push   eax
c001c8cc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c8cf:	29 f0                	sub    eax,esi
c001c8d1:	c1 e0 02             	shl    eax,0x2
c001c8d4:	50                   	push   eax
c001c8d5:	68 c0 4c 02 c0       	push   0xc0024cc0
c001c8da:	e8 df 01 ff ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001c8df:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001c8e2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c8e5:	83 c4 1c             	add    esp,0x1c
c001c8e8:	01 d7                	add    edi,edx
c001c8ea:	29 f0                	sub    eax,esi
c001c8ec:	c1 e0 02             	shl    eax,0x2
c001c8ef:	50                   	push   eax
c001c8f0:	57                   	push   edi
c001c8f1:	52                   	push   edx
c001c8f2:	e8 91 3d fe ff       	call   c0000688 <memmove>
c001c8f7:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001c8fa:	83 c4 10             	add    esp,0x10
c001c8fd:	89 f0                	mov    eax,esi
c001c8ff:	5b                   	pop    ebx
c001c900:	5e                   	pop    esi
c001c901:	5f                   	pop    edi
c001c902:	c3                   	ret    
c001c903:	90                   	nop

c001c904 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001c904:	57                   	push   edi
c001c905:	56                   	push   esi
c001c906:	53                   	push   ebx
c001c907:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c90b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c90f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c913:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001c919:	39 06                	cmp    DWORD PTR [esi],eax
c001c91b:	74 10                	je     c001c92d <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x29>
c001c91d:	83 ec 0c             	sub    esp,0xc
c001c920:	68 e4 4c 02 c0       	push   0xc0024ce4
c001c925:	e8 53 7b ff ff       	call   c001447d <Krnl::panic(char const*)>
c001c92a:	83 c4 10             	add    esp,0x10
c001c92d:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001c933:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001c936:	74 10                	je     c001c948 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x44>
c001c938:	83 ec 0c             	sub    esp,0xc
c001c93b:	68 52 4c 02 c0       	push   0xc0024c52
c001c940:	e8 38 7b ff ff       	call   c001447d <Krnl::panic(char const*)>
c001c945:	83 c4 10             	add    esp,0x10
c001c948:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001c94e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001c951:	74 10                	je     c001c963 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x5f>
c001c953:	83 ec 0c             	sub    esp,0xc
c001c956:	68 52 4c 02 c0       	push   0xc0024c52
c001c95b:	e8 1d 7b ff ff       	call   c001447d <Krnl::panic(char const*)>
c001c960:	83 c4 10             	add    esp,0x10
c001c963:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001c966:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001c96a:	7e 04                	jle    c001c970 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001c96c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c970:	85 ff                	test   edi,edi
c001c972:	7e 19                	jle    c001c98d <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x89>
c001c974:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001c97b:	31 c0                	xor    eax,eax
c001c97d:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001c980:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001c983:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001c986:	83 c0 04             	add    eax,0x4
c001c989:	39 c1                	cmp    ecx,eax
c001c98b:	75 f0                	jne    c001c97d <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x79>
c001c98d:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001c990:	50                   	push   eax
c001c991:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c994:	29 f8                	sub    eax,edi
c001c996:	c1 e0 02             	shl    eax,0x2
c001c999:	50                   	push   eax
c001c99a:	8d 04 ba             	lea    eax,[edx+edi*4]
c001c99d:	50                   	push   eax
c001c99e:	52                   	push   edx
c001c99f:	e8 e4 3c fe ff       	call   c0000688 <memmove>
c001c9a4:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001c9a7:	83 c4 10             	add    esp,0x10
c001c9aa:	89 f8                	mov    eax,edi
c001c9ac:	5b                   	pop    ebx
c001c9ad:	5e                   	pop    esi
c001c9ae:	5f                   	pop    edi
c001c9af:	c3                   	ret    

c001c9b0 <PCI::open(int, int, void*)>:
c001c9b0:	83 ec 18             	sub    esp,0x18
c001c9b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c9b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c9bb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c9c1:	8b 10                	mov    edx,DWORD PTR [eax]
c001c9c3:	50                   	push   eax
c001c9c4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c9c7:	31 c0                	xor    eax,eax
c001c9c9:	83 c4 1c             	add    esp,0x1c
c001c9cc:	c3                   	ret    
c001c9cd:	90                   	nop

c001c9ce <PCI::close(int, int, void*)>:
c001c9ce:	31 c0                	xor    eax,eax
c001c9d0:	c3                   	ret    
c001c9d1:	90                   	nop

c001c9d2 <PCI::PCI()>:
c001c9d2:	83 ec 0c             	sub    esp,0xc
c001c9d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9d9:	83 ec 08             	sub    esp,0x8
c001c9dc:	68 03 4d 02 c0       	push   0xc0024d03
c001c9e1:	50                   	push   eax
c001c9e2:	e8 83 0d ff ff       	call   c000d76a <Bus::Bus(char const*)>
c001c9e7:	83 c4 10             	add    esp,0x10
c001c9ea:	ba ec 4d 02 c0       	mov    edx,0xc0024dec
c001c9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9f3:	89 10                	mov    DWORD PTR [eax],edx
c001c9f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9f9:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ca03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca07:	a3 80 81 02 c0       	mov    ds:0xc0028180,eax
c001ca0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ca16:	0f b6 d0             	movzx  edx,al
c001ca19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca1d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ca24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ca2e:	0f b6 d0             	movzx  edx,al
c001ca31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca35:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ca3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ca44:	8d 50 01             	lea    edx,[eax+0x1]
c001ca47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ca4b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ca51:	0f b6 d0             	movzx  edx,al
c001ca54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ca5c:	83 c9 c0             	or     ecx,0xffffffc0
c001ca5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ca63:	90                   	nop
c001ca64:	83 c4 0c             	add    esp,0xc
c001ca67:	c3                   	ret    

c001ca68 <PCI::readBAR8(unsigned int, int)>:
c001ca68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ca6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca70:	f6 c2 01             	test   dl,0x1
c001ca73:	74 07                	je     c001ca7c <PCI::readBAR8(unsigned int, int)+0x14>
c001ca75:	83 e2 fc             	and    edx,0xfffffffc
c001ca78:	01 c2                	add    edx,eax
c001ca7a:	ec                   	in     al,dx
c001ca7b:	c3                   	ret    
c001ca7c:	83 e2 f0             	and    edx,0xfffffff0
c001ca7f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ca82:	c3                   	ret    
c001ca83:	90                   	nop

c001ca84 <PCI::readBAR16(unsigned int, int)>:
c001ca84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ca88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca8c:	f6 c2 01             	test   dl,0x1
c001ca8f:	74 08                	je     c001ca99 <PCI::readBAR16(unsigned int, int)+0x15>
c001ca91:	83 e2 fc             	and    edx,0xfffffffc
c001ca94:	01 c2                	add    edx,eax
c001ca96:	66 ed                	in     ax,dx
c001ca98:	c3                   	ret    
c001ca99:	83 e2 f0             	and    edx,0xfffffff0
c001ca9c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001caa0:	c3                   	ret    
c001caa1:	90                   	nop

c001caa2 <PCI::readBAR32(unsigned int, int)>:
c001caa2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001caa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001caaa:	f6 c2 01             	test   dl,0x1
c001caad:	74 07                	je     c001cab6 <PCI::readBAR32(unsigned int, int)+0x14>
c001caaf:	83 e2 fc             	and    edx,0xfffffffc
c001cab2:	01 c2                	add    edx,eax
c001cab4:	ed                   	in     eax,dx
c001cab5:	c3                   	ret    
c001cab6:	83 e2 f0             	and    edx,0xfffffff0
c001cab9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001cabc:	c3                   	ret    
c001cabd:	90                   	nop

c001cabe <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001cabe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cac2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cac6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001caca:	f6 c2 01             	test   dl,0x1
c001cacd:	74 07                	je     c001cad6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001cacf:	83 e2 fc             	and    edx,0xfffffffc
c001cad2:	01 ca                	add    edx,ecx
c001cad4:	ee                   	out    dx,al
c001cad5:	c3                   	ret    
c001cad6:	83 e2 f0             	and    edx,0xfffffff0
c001cad9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001cadc:	c3                   	ret    
c001cadd:	90                   	nop

c001cade <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001cade:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cae6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001caea:	f6 c2 01             	test   dl,0x1
c001caed:	74 08                	je     c001caf7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001caef:	83 e2 fc             	and    edx,0xfffffffc
c001caf2:	01 ca                	add    edx,ecx
c001caf4:	66 ef                	out    dx,ax
c001caf6:	c3                   	ret    
c001caf7:	83 e2 f0             	and    edx,0xfffffff0
c001cafa:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001cafe:	c3                   	ret    
c001caff:	90                   	nop

c001cb00 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001cb00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb0c:	f6 c2 01             	test   dl,0x1
c001cb0f:	74 07                	je     c001cb18 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001cb11:	83 e2 fc             	and    edx,0xfffffffc
c001cb14:	01 ca                	add    edx,ecx
c001cb16:	ef                   	out    dx,eax
c001cb17:	c3                   	ret    
c001cb18:	83 e2 f0             	and    edx,0xfffffff0
c001cb1b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001cb1e:	c3                   	ret    
c001cb1f:	90                   	nop

c001cb20 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cb20:	55                   	push   ebp
c001cb21:	57                   	push   edi
c001cb22:	56                   	push   esi
c001cb23:	53                   	push   ebx
c001cb24:	83 ec 0c             	sub    esp,0xc
c001cb27:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cb2b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001cb2f:	89 f0                	mov    eax,esi
c001cb31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cb35:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cb39:	3c 07                	cmp    al,0x7
c001cb3b:	76 10                	jbe    c001cb4d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001cb3d:	83 ec 0c             	sub    esp,0xc
c001cb40:	68 0b 4d 02 c0       	push   0xc0024d0b
c001cb45:	e8 33 79 ff ff       	call   c001447d <Krnl::panic(char const*)>
c001cb4a:	83 c4 10             	add    esp,0x10
c001cb4d:	80 fb 0f             	cmp    bl,0xf
c001cb50:	76 10                	jbe    c001cb62 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001cb52:	83 ec 0c             	sub    esp,0xc
c001cb55:	68 3b 4d 02 c0       	push   0xc0024d3b
c001cb5a:	e8 1e 79 ff ff       	call   c001447d <Krnl::panic(char const*)>
c001cb5f:	83 c4 10             	add    esp,0x10
c001cb62:	8d 04 36             	lea    eax,[esi+esi*1]
c001cb65:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cb6a:	83 c8 f0             	or     eax,0xfffffff0
c001cb6d:	ee                   	out    dx,al
c001cb6e:	ba fa 0c 00 00       	mov    edx,0xcfa
c001cb73:	89 e8                	mov    eax,ebp
c001cb75:	ee                   	out    dx,al
c001cb76:	83 c4 0c             	add    esp,0xc
c001cb79:	89 d8                	mov    eax,ebx
c001cb7b:	66 81 e7 fc 00       	and    di,0xfc
c001cb80:	5b                   	pop    ebx
c001cb81:	c1 e0 08             	shl    eax,0x8
c001cb84:	5e                   	pop    esi
c001cb85:	09 f8                	or     eax,edi
c001cb87:	5f                   	pop    edi
c001cb88:	66 0d 00 c0          	or     ax,0xc000
c001cb8c:	5d                   	pop    ebp
c001cb8d:	c3                   	ret    

c001cb8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cb8e:	57                   	push   edi
c001cb8f:	56                   	push   esi
c001cb90:	53                   	push   ebx
c001cb91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cb95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cb99:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001cb9f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cba7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cbab:	83 ff 01             	cmp    edi,0x1
c001cbae:	75 3e                	jne    c001cbee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001cbb0:	89 de                	mov    esi,ebx
c001cbb2:	0f b6 c0             	movzx  eax,al
c001cbb5:	81 e6 fc 00 00 00    	and    esi,0xfc
c001cbbb:	c1 e0 10             	shl    eax,0x10
c001cbbe:	0f b6 c9             	movzx  ecx,cl
c001cbc1:	09 f0                	or     eax,esi
c001cbc3:	c1 e1 08             	shl    ecx,0x8
c001cbc6:	0f b6 d2             	movzx  edx,dl
c001cbc9:	09 c8                	or     eax,ecx
c001cbcb:	c1 e2 0b             	shl    edx,0xb
c001cbce:	09 d0                	or     eax,edx
c001cbd0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cbd5:	0d 00 00 00 80       	or     eax,0x80000000
c001cbda:	ef                   	out    dx,eax
c001cbdb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cbe0:	ed                   	in     eax,dx
c001cbe1:	83 e3 02             	and    ebx,0x2
c001cbe4:	0f b6 cb             	movzx  ecx,bl
c001cbe7:	c1 e1 03             	shl    ecx,0x3
c001cbea:	d3 e8                	shr    eax,cl
c001cbec:	eb 43                	jmp    c001cc31 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cbee:	83 ff 02             	cmp    edi,0x2
c001cbf1:	75 2c                	jne    c001cc1f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001cbf3:	83 ec 0c             	sub    esp,0xc
c001cbf6:	0f b6 c9             	movzx  ecx,cl
c001cbf9:	0f b6 d2             	movzx  edx,dl
c001cbfc:	0f b6 fb             	movzx  edi,bl
c001cbff:	0f b6 c0             	movzx  eax,al
c001cc02:	57                   	push   edi
c001cc03:	51                   	push   ecx
c001cc04:	52                   	push   edx
c001cc05:	50                   	push   eax
c001cc06:	56                   	push   esi
c001cc07:	e8 14 ff ff ff       	call   c001cb20 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc0c:	89 c2                	mov    edx,eax
c001cc0e:	ed                   	in     eax,dx
c001cc0f:	83 e3 02             	and    ebx,0x2
c001cc12:	83 c4 20             	add    esp,0x20
c001cc15:	0f b6 cb             	movzx  ecx,bl
c001cc18:	c1 e1 03             	shl    ecx,0x3
c001cc1b:	d3 e8                	shr    eax,cl
c001cc1d:	eb 12                	jmp    c001cc31 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cc1f:	83 ec 0c             	sub    esp,0xc
c001cc22:	68 6b 4d 02 c0       	push   0xc0024d6b
c001cc27:	e8 51 78 ff ff       	call   c001447d <Krnl::panic(char const*)>
c001cc2c:	83 c4 10             	add    esp,0x10
c001cc2f:	31 c0                	xor    eax,eax
c001cc31:	5b                   	pop    ebx
c001cc32:	5e                   	pop    esi
c001cc33:	5f                   	pop    edi
c001cc34:	c3                   	ret    
c001cc35:	90                   	nop

c001cc36 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001cc36:	83 ec 18             	sub    esp,0x18
c001cc39:	6a 00                	push   0x0
c001cc3b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc40:	50                   	push   eax
c001cc41:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc46:	50                   	push   eax
c001cc47:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc4c:	50                   	push   eax
c001cc4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc51:	e8 38 ff ff ff       	call   c001cb8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc56:	83 c4 2c             	add    esp,0x2c
c001cc59:	c3                   	ret    

c001cc5a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001cc5a:	83 ec 18             	sub    esp,0x18
c001cc5d:	6a 0e                	push   0xe
c001cc5f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc64:	50                   	push   eax
c001cc65:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc6a:	50                   	push   eax
c001cc6b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc70:	50                   	push   eax
c001cc71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc75:	e8 14 ff ff ff       	call   c001cb8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc7a:	83 c4 2c             	add    esp,0x2c
c001cc7d:	0f b6 c0             	movzx  eax,al
c001cc80:	c3                   	ret    
c001cc81:	90                   	nop

c001cc82 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001cc82:	55                   	push   ebp
c001cc83:	57                   	push   edi
c001cc84:	56                   	push   esi
c001cc85:	53                   	push   ebx
c001cc86:	83 ec 18             	sub    esp,0x18
c001cc89:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001cc8e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001cc93:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001cc98:	6a 0a                	push   0xa
c001cc9a:	56                   	push   esi
c001cc9b:	55                   	push   ebp
c001cc9c:	57                   	push   edi
c001cc9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cca1:	e8 e8 fe ff ff       	call   c001cb8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cca6:	83 c4 14             	add    esp,0x14
c001cca9:	89 c3                	mov    ebx,eax
c001ccab:	6a 0a                	push   0xa
c001ccad:	0f b6 db             	movzx  ebx,bl
c001ccb0:	56                   	push   esi
c001ccb1:	55                   	push   ebp
c001ccb2:	57                   	push   edi
c001ccb3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ccb7:	e8 d2 fe ff ff       	call   c001cb8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ccbc:	83 c4 2c             	add    esp,0x2c
c001ccbf:	25 00 ff 00 00       	and    eax,0xff00
c001ccc4:	09 d8                	or     eax,ebx
c001ccc6:	5b                   	pop    ebx
c001ccc7:	5e                   	pop    esi
c001ccc8:	5f                   	pop    edi
c001ccc9:	5d                   	pop    ebp
c001ccca:	c3                   	ret    
c001cccb:	90                   	nop

c001cccc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001cccc:	83 ec 18             	sub    esp,0x18
c001cccf:	6a 08                	push   0x8
c001ccd1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ccd6:	50                   	push   eax
c001ccd7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ccdc:	50                   	push   eax
c001ccdd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cce2:	50                   	push   eax
c001cce3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cce7:	e8 a2 fe ff ff       	call   c001cb8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ccec:	83 c4 2c             	add    esp,0x2c
c001ccef:	0f b6 c4             	movzx  eax,ah
c001ccf2:	c3                   	ret    
c001ccf3:	90                   	nop

c001ccf4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001ccf4:	83 ec 18             	sub    esp,0x18
c001ccf7:	6a 08                	push   0x8
c001ccf9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ccfe:	50                   	push   eax
c001ccff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd04:	50                   	push   eax
c001cd05:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd0a:	50                   	push   eax
c001cd0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd0f:	e8 7a fe ff ff       	call   c001cb8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd14:	83 c4 2c             	add    esp,0x2c
c001cd17:	c3                   	ret    

c001cd18 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001cd18:	83 ec 18             	sub    esp,0x18
c001cd1b:	6a 3c                	push   0x3c
c001cd1d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd22:	50                   	push   eax
c001cd23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd28:	50                   	push   eax
c001cd29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd2e:	50                   	push   eax
c001cd2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd33:	e8 56 fe ff ff       	call   c001cb8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd38:	83 c4 2c             	add    esp,0x2c
c001cd3b:	c3                   	ret    

c001cd3c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001cd3c:	83 ec 18             	sub    esp,0x18
c001cd3f:	6a 18                	push   0x18
c001cd41:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd46:	50                   	push   eax
c001cd47:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd4c:	50                   	push   eax
c001cd4d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd52:	50                   	push   eax
c001cd53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd57:	e8 32 fe ff ff       	call   c001cb8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd5c:	83 c4 2c             	add    esp,0x2c
c001cd5f:	0f b6 c4             	movzx  eax,ah
c001cd62:	c3                   	ret    
c001cd63:	90                   	nop

c001cd64 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cd64:	55                   	push   ebp
c001cd65:	57                   	push   edi
c001cd66:	56                   	push   esi
c001cd67:	53                   	push   ebx
c001cd68:	83 ec 28             	sub    esp,0x28
c001cd6b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cd6f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001cd74:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001cd79:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001cd7e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001cd85:	8d 43 12             	lea    eax,[ebx+0x12]
c001cd88:	83 c3 10             	add    ebx,0x10
c001cd8b:	0f b6 c0             	movzx  eax,al
c001cd8e:	0f b6 db             	movzx  ebx,bl
c001cd91:	50                   	push   eax
c001cd92:	51                   	push   ecx
c001cd93:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001cd97:	57                   	push   edi
c001cd98:	55                   	push   ebp
c001cd99:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cd9d:	e8 ec fd ff ff       	call   c001cb8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cda2:	83 c4 14             	add    esp,0x14
c001cda5:	89 c6                	mov    esi,eax
c001cda7:	53                   	push   ebx
c001cda8:	c1 e6 10             	shl    esi,0x10
c001cdab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cdaf:	51                   	push   ecx
c001cdb0:	57                   	push   edi
c001cdb1:	55                   	push   ebp
c001cdb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cdb6:	e8 d3 fd ff ff       	call   c001cb8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdbb:	83 c4 3c             	add    esp,0x3c
c001cdbe:	0f b7 c0             	movzx  eax,ax
c001cdc1:	5b                   	pop    ebx
c001cdc2:	09 f0                	or     eax,esi
c001cdc4:	5e                   	pop    esi
c001cdc5:	5f                   	pop    edi
c001cdc6:	5d                   	pop    ebp
c001cdc7:	c3                   	ret    

c001cdc8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001cdc8:	55                   	push   ebp
c001cdc9:	57                   	push   edi
c001cdca:	56                   	push   esi
c001cdcb:	53                   	push   ebx
c001cdcc:	83 ec 0c             	sub    esp,0xc
c001cdcf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cdd3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001cdd7:	89 f5                	mov    ebp,esi
c001cdd9:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001cddf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cde3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cde7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cdeb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cdef:	83 f9 01             	cmp    ecx,0x1
c001cdf2:	75 5d                	jne    c001ce51 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001cdf4:	0f b6 c8             	movzx  ecx,al
c001cdf7:	0f b6 d2             	movzx  edx,dl
c001cdfa:	c1 e1 10             	shl    ecx,0x10
c001cdfd:	c1 e2 0b             	shl    edx,0xb
c001ce00:	89 f0                	mov    eax,esi
c001ce02:	25 fc 00 00 00       	and    eax,0xfc
c001ce07:	09 c1                	or     ecx,eax
c001ce09:	89 e8                	mov    eax,ebp
c001ce0b:	0f b6 c0             	movzx  eax,al
c001ce0e:	c1 e0 08             	shl    eax,0x8
c001ce11:	09 c1                	or     ecx,eax
c001ce13:	09 d1                	or     ecx,edx
c001ce15:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ce1a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001ce20:	89 c8                	mov    eax,ecx
c001ce22:	ef                   	out    dx,eax
c001ce23:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ce28:	ed                   	in     eax,dx
c001ce29:	0f b7 db             	movzx  ebx,bx
c001ce2c:	83 e6 02             	and    esi,0x2
c001ce2f:	74 0a                	je     c001ce3b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001ce31:	0f b7 d0             	movzx  edx,ax
c001ce34:	c1 e3 10             	shl    ebx,0x10
c001ce37:	09 d3                	or     ebx,edx
c001ce39:	eb 05                	jmp    c001ce40 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001ce3b:	66 31 c0             	xor    ax,ax
c001ce3e:	09 c3                	or     ebx,eax
c001ce40:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ce45:	89 c8                	mov    eax,ecx
c001ce47:	ef                   	out    dx,eax
c001ce48:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ce4d:	89 d8                	mov    eax,ebx
c001ce4f:	eb 41                	jmp    c001ce92 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001ce51:	83 f9 02             	cmp    ecx,0x2
c001ce54:	75 45                	jne    c001ce9b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001ce56:	83 ec 0c             	sub    esp,0xc
c001ce59:	0f b6 d2             	movzx  edx,dl
c001ce5c:	89 f1                	mov    ecx,esi
c001ce5e:	0f b6 c0             	movzx  eax,al
c001ce61:	0f b6 f1             	movzx  esi,cl
c001ce64:	89 e9                	mov    ecx,ebp
c001ce66:	56                   	push   esi
c001ce67:	0f b6 c9             	movzx  ecx,cl
c001ce6a:	51                   	push   ecx
c001ce6b:	52                   	push   edx
c001ce6c:	50                   	push   eax
c001ce6d:	57                   	push   edi
c001ce6e:	e8 ad fc ff ff       	call   c001cb20 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce73:	89 c2                	mov    edx,eax
c001ce75:	ed                   	in     eax,dx
c001ce76:	83 c4 20             	add    esp,0x20
c001ce79:	0f b7 db             	movzx  ebx,bx
c001ce7c:	f6 c2 02             	test   dl,0x2
c001ce7f:	74 0c                	je     c001ce8d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001ce81:	0f b7 c8             	movzx  ecx,ax
c001ce84:	89 d8                	mov    eax,ebx
c001ce86:	c1 e0 10             	shl    eax,0x10
c001ce89:	09 c8                	or     eax,ecx
c001ce8b:	eb 05                	jmp    c001ce92 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001ce8d:	66 31 c0             	xor    ax,ax
c001ce90:	09 d8                	or     eax,ebx
c001ce92:	ef                   	out    dx,eax
c001ce93:	83 c4 0c             	add    esp,0xc
c001ce96:	5b                   	pop    ebx
c001ce97:	5e                   	pop    esi
c001ce98:	5f                   	pop    edi
c001ce99:	5d                   	pop    ebp
c001ce9a:	c3                   	ret    
c001ce9b:	c7 44 24 20 6b 4d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024d6b
c001cea3:	83 c4 0c             	add    esp,0xc
c001cea6:	5b                   	pop    ebx
c001cea7:	5e                   	pop    esi
c001cea8:	5f                   	pop    edi
c001cea9:	5d                   	pop    ebp
c001ceaa:	e9 ce 75 ff ff       	jmp    c001447d <Krnl::panic(char const*)>
c001ceaf:	90                   	nop

c001ceb0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001ceb0:	55                   	push   ebp
c001ceb1:	57                   	push   edi
c001ceb2:	56                   	push   esi
c001ceb3:	53                   	push   ebx
c001ceb4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ceba:	80 3d 8c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002818c,0x0
c001cec1:	0f 85 84 00 00 00    	jne    c001cf4b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001cec7:	83 ec 0c             	sub    esp,0xc
c001ceca:	68 14 01 00 00       	push   0x114
c001cecf:	e8 89 cb fe ff       	call   c0009a5d <malloc>
c001ced4:	83 c4 0c             	add    esp,0xc
c001ced7:	89 c3                	mov    ebx,eax
c001ced9:	ff 35 90 77 02 c0    	push   DWORD PTR ds:0xc0027790
c001cedf:	68 71 4d 02 c0       	push   0xc0024d71
c001cee4:	50                   	push   eax
c001cee5:	e8 3e 01 ff ff       	call   c000d028 <File::File(char const*, Process*)>
c001ceea:	5a                   	pop    edx
c001ceeb:	59                   	pop    ecx
c001ceec:	6a 01                	push   0x1
c001ceee:	53                   	push   ebx
c001ceef:	e8 98 01 ff ff       	call   c000d08c <File::open(FileOpenMode)>
c001cef4:	83 c4 0c             	add    esp,0xc
c001cef7:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001cefb:	50                   	push   eax
c001cefc:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cf00:	50                   	push   eax
c001cf01:	53                   	push   ebx
c001cf02:	e8 31 04 ff ff       	call   c000d338 <File::stat(unsigned long long*, bool*)>
c001cf07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cf0b:	40                   	inc    eax
c001cf0c:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf0f:	e8 49 cb fe ff       	call   c0009a5d <malloc>
c001cf14:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cf18:	a3 88 81 02 c0       	mov    ds:0xc0028188,eax
c001cf1d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001cf21:	5e                   	pop    esi
c001cf22:	8b 13                	mov    edx,DWORD PTR [ebx]
c001cf24:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001cf28:	51                   	push   ecx
c001cf29:	50                   	push   eax
c001cf2a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001cf2e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001cf32:	53                   	push   ebx
c001cf33:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001cf36:	83 c4 14             	add    esp,0x14
c001cf39:	53                   	push   ebx
c001cf3a:	e8 ab 01 ff ff       	call   c000d0ea <File::close()>
c001cf3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cf43:	83 c4 10             	add    esp,0x10
c001cf46:	a3 84 81 02 c0       	mov    ds:0xc0028184,eax
c001cf4b:	a1 84 81 02 c0       	mov    eax,ds:0xc0028184
c001cf50:	8b 15 88 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028188
c001cf56:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf59:	31 ff                	xor    edi,edi
c001cf5b:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c001cf63:	31 f6                	xor    esi,esi
c001cf65:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001cf6a:	31 db                	xor    ebx,ebx
c001cf6c:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001cf74:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001cf79:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c001cf80:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001cf84:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001cf8b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001cf8f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001cf92:	0f 8e 6b 01 00 00    	jle    c001d103 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c001cf98:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001cf9b:	d4 40                	aam    0x40
c001cf9d:	d5 39                	aad    0x39
c001cf9f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cfa3:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c001cfa7:	d4 40                	aam    0x40
c001cfa9:	d5 39                	aad    0x39
c001cfab:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001cfaf:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001cfb3:	d4 40                	aam    0x40
c001cfb5:	d5 39                	aad    0x39
c001cfb7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001cfbb:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001cfbf:	d4 40                	aam    0x40
c001cfc1:	d5 39                	aad    0x39
c001cfc3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cfc7:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001cfcb:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001cfcf:	3c 56                	cmp    al,0x56
c001cfd1:	74 45                	je     c001d018 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c001cfd3:	d4 40                	aam    0x40
c001cfd5:	d5 39                	aad    0x39
c001cfd7:	8d 48 d0             	lea    ecx,[eax-0x30]
c001cfda:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001cfde:	0f b6 c9             	movzx  ecx,cl
c001cfe1:	c1 e1 04             	shl    ecx,0x4
c001cfe4:	d4 40                	aam    0x40
c001cfe6:	d5 39                	aad    0x39
c001cfe8:	8d 58 d0             	lea    ebx,[eax-0x30]
c001cfeb:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001cfef:	0f b6 db             	movzx  ebx,bl
c001cff2:	09 cb                	or     ebx,ecx
c001cff4:	c1 e3 04             	shl    ebx,0x4
c001cff7:	d4 40                	aam    0x40
c001cff9:	d5 39                	aad    0x39
c001cffb:	8d 48 d0             	lea    ecx,[eax-0x30]
c001cffe:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001d002:	0f b6 c9             	movzx  ecx,cl
c001d005:	09 cb                	or     ebx,ecx
c001d007:	c1 e3 04             	shl    ebx,0x4
c001d00a:	89 d9                	mov    ecx,ebx
c001d00c:	d4 40                	aam    0x40
c001d00e:	d5 39                	aad    0x39
c001d010:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d013:	0f b6 db             	movzx  ebx,bl
c001d016:	09 cb                	or     ebx,ecx
c001d018:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c001d01c:	80 f9 44             	cmp    cl,0x44
c001d01f:	74 47                	je     c001d068 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c001d021:	88 c8                	mov    al,cl
c001d023:	d4 40                	aam    0x40
c001d025:	d5 39                	aad    0x39
c001d027:	83 e8 30             	sub    eax,0x30
c001d02a:	0f b6 e8             	movzx  ebp,al
c001d02d:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001d031:	c1 e5 04             	shl    ebp,0x4
c001d034:	d4 40                	aam    0x40
c001d036:	d5 39                	aad    0x39
c001d038:	83 e8 30             	sub    eax,0x30
c001d03b:	0f b6 f0             	movzx  esi,al
c001d03e:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c001d042:	09 ee                	or     esi,ebp
c001d044:	c1 e6 04             	shl    esi,0x4
c001d047:	d4 40                	aam    0x40
c001d049:	d5 39                	aad    0x39
c001d04b:	83 e8 30             	sub    eax,0x30
c001d04e:	0f b6 e8             	movzx  ebp,al
c001d051:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c001d055:	09 ee                	or     esi,ebp
c001d057:	c1 e6 04             	shl    esi,0x4
c001d05a:	89 f5                	mov    ebp,esi
c001d05c:	d4 40                	aam    0x40
c001d05e:	d5 39                	aad    0x39
c001d060:	83 e8 30             	sub    eax,0x30
c001d063:	0f b6 f0             	movzx  esi,al
c001d066:	09 ee                	or     esi,ebp
c001d068:	83 c7 10             	add    edi,0x10
c001d06b:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001d06f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d072:	3c 0a                	cmp    al,0xa
c001d074:	74 09                	je     c001d07f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c001d076:	45                   	inc    ebp
c001d077:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d07a:	75 16                	jne    c001d092 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001d07c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001d07f:	3c 0a                	cmp    al,0xa
c001d081:	0f 94 c0             	sete   al
c001d084:	0f b6 c0             	movzx  eax,al
c001d087:	01 c7                	add    edi,eax
c001d089:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001d08e:	75 0c                	jne    c001d09c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c001d090:	eb 15                	jmp    c001d0a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c001d092:	47                   	inc    edi
c001d093:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001d096:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001d09a:	eb d3                	jmp    c001d06f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001d09c:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001d0a1:	0f 85 e8 fe ff ff    	jne    c001cf8f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d0a7:	80 f9 44             	cmp    cl,0x44
c001d0aa:	74 0b                	je     c001d0b7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001d0ac:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001d0b1:	0f 85 d8 fe ff ff    	jne    c001cf8f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d0b7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d0bb:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001d0bf:	c1 e1 04             	shl    ecx,0x4
c001d0c2:	83 e8 30             	sub    eax,0x30
c001d0c5:	09 c8                	or     eax,ecx
c001d0c7:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001d0cb:	0f 85 be fe ff ff    	jne    c001cf8f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d0d1:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001d0d5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d0d9:	c1 e1 04             	shl    ecx,0x4
c001d0dc:	83 e8 30             	sub    eax,0x30
c001d0df:	09 c8                	or     eax,ecx
c001d0e1:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001d0e5:	0f 85 a4 fe ff ff    	jne    c001cf8f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d0eb:	50                   	push   eax
c001d0ec:	50                   	push   eax
c001d0ed:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d0f1:	50                   	push   eax
c001d0f2:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d0f9:	e8 0e 37 fe ff       	call   c000080c <strcpy>
c001d0fe:	83 c4 10             	add    esp,0x10
c001d101:	eb 15                	jmp    c001d118 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001d103:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d10a:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d115:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d118:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d11f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d125:	5b                   	pop    ebx
c001d126:	5e                   	pop    esi
c001d127:	5f                   	pop    edi
c001d128:	5d                   	pop    ebp
c001d129:	c3                   	ret    

c001d12a <PCI::checkBus(unsigned char)>:
c001d12a:	56                   	push   esi
c001d12b:	53                   	push   ebx
c001d12c:	31 db                	xor    ebx,ebx
c001d12e:	51                   	push   ecx
c001d12f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d134:	52                   	push   edx
c001d135:	53                   	push   ebx
c001d136:	43                   	inc    ebx
c001d137:	56                   	push   esi
c001d138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d13c:	e8 37 03 00 00       	call   c001d478 <PCI::checkDevice(unsigned char, unsigned char)>
c001d141:	83 c4 10             	add    esp,0x10
c001d144:	83 fb 20             	cmp    ebx,0x20
c001d147:	75 eb                	jne    c001d134 <PCI::checkBus(unsigned char)+0xa>
c001d149:	58                   	pop    eax
c001d14a:	5b                   	pop    ebx
c001d14b:	5e                   	pop    esi
c001d14c:	c3                   	ret    
c001d14d:	90                   	nop

c001d14e <PCI::foundDevice(PCIDeviceInfo)>:
c001d14e:	55                   	push   ebp
c001d14f:	57                   	push   edi
c001d150:	56                   	push   esi
c001d151:	53                   	push   ebx
c001d152:	83 ec 1c             	sub    esp,0x1c
c001d155:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d159:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d15f:	0f 84 52 01 00 00    	je     c001d2b7 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d165:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d169:	66 81 f9 06 04       	cmp    cx,0x406
c001d16e:	75 2c                	jne    c001d19c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001d170:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d175:	50                   	push   eax
c001d176:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d17b:	50                   	push   eax
c001d17c:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d181:	50                   	push   eax
c001d182:	56                   	push   esi
c001d183:	e8 b4 fb ff ff       	call   c001cd3c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d188:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d18c:	0f b6 c0             	movzx  eax,al
c001d18f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d193:	83 c4 2c             	add    esp,0x2c
c001d196:	5b                   	pop    ebx
c001d197:	5e                   	pop    esi
c001d198:	5f                   	pop    edi
c001d199:	5d                   	pop    ebp
c001d19a:	eb 8e                	jmp    c001d12a <PCI::checkBus(unsigned char)>
c001d19c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d1a0:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001d1a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d1aa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d1ae:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d1b2:	88 d3                	mov    bl,dl
c001d1b4:	85 c0                	test   eax,eax
c001d1b6:	74 33                	je     c001d1eb <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001d1b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d1bb:	85 d2                	test   edx,edx
c001d1bd:	74 28                	je     c001d1e7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d1bf:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d1c5:	31 ef                	xor    edi,ebp
c001d1c7:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d1cd:	75 18                	jne    c001d1e7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d1cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d1d3:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001d1d9:	75 0c                	jne    c001d1e7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d1db:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001d1e1:	0f 84 d0 00 00 00    	je     c001d2b7 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d1e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1e9:	eb c9                	jmp    c001d1b4 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001d1eb:	66 81 f9 01 06       	cmp    cx,0x601
c001d1f0:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001d1f4:	75 19                	jne    c001d20f <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001d1f6:	83 ec 0c             	sub    esp,0xc
c001d1f9:	68 64 01 00 00       	push   0x164
c001d1fe:	e8 5a c8 fe ff       	call   c0009a5d <malloc>
c001d203:	89 c5                	mov    ebp,eax
c001d205:	89 04 24             	mov    DWORD PTR [esp],eax
c001d208:	e8 85 0e 00 00       	call   c001e092 <SATABus::SATABus()>
c001d20d:	eb 1e                	jmp    c001d22d <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001d20f:	66 81 f9 01 01       	cmp    cx,0x101
c001d214:	75 60                	jne    c001d276 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001d216:	83 ec 0c             	sub    esp,0xc
c001d219:	68 70 02 00 00       	push   0x270
c001d21e:	e8 3a c8 fe ff       	call   c0009a5d <malloc>
c001d223:	89 c5                	mov    ebp,eax
c001d225:	89 04 24             	mov    DWORD PTR [esp],eax
c001d228:	e8 0f 03 00 00       	call   c001d53c <IDE::IDE()>
c001d22d:	58                   	pop    eax
c001d22e:	5a                   	pop    edx
c001d22f:	55                   	push   ebp
c001d230:	56                   	push   esi
c001d231:	e8 cc 0c ff ff       	call   c000df02 <Device::addChild(Device*)>
c001d236:	83 ec 1c             	sub    esp,0x1c
c001d239:	b9 09 00 00 00       	mov    ecx,0x9
c001d23e:	fc                   	cld    
c001d23f:	89 e7                	mov    edi,esp
c001d241:	89 de                	mov    esi,ebx
c001d243:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d245:	55                   	push   ebp
c001d246:	e8 c9 0b ff ff       	call   c000de14 <Device::preOpenPCI(PCIDeviceInfo)>
c001d24b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d24e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001d252:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001d25a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001d262:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001d26a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d26d:	83 c4 4c             	add    esp,0x4c
c001d270:	5b                   	pop    ebx
c001d271:	5e                   	pop    esi
c001d272:	5f                   	pop    edi
c001d273:	5d                   	pop    ebp
c001d274:	ff e0                	jmp    eax
c001d276:	83 ec 0c             	sub    esp,0xc
c001d279:	68 58 01 00 00       	push   0x158
c001d27e:	e8 da c7 fe ff       	call   c0009a5d <malloc>
c001d283:	89 c5                	mov    ebp,eax
c001d285:	58                   	pop    eax
c001d286:	5a                   	pop    edx
c001d287:	68 8a 4d 02 c0       	push   0xc0024d8a
c001d28c:	55                   	push   ebp
c001d28d:	e8 7a 0f ff ff       	call   c000e20c <DriverlessDevice::DriverlessDevice(char const*)>
c001d292:	59                   	pop    ecx
c001d293:	5f                   	pop    edi
c001d294:	55                   	push   ebp
c001d295:	56                   	push   esi
c001d296:	e8 67 0c ff ff       	call   c000df02 <Device::addChild(Device*)>
c001d29b:	b9 09 00 00 00       	mov    ecx,0x9
c001d2a0:	fc                   	cld    
c001d2a1:	89 df                	mov    edi,ebx
c001d2a3:	89 de                	mov    esi,ebx
c001d2a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d2a7:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001d2ab:	83 c4 2c             	add    esp,0x2c
c001d2ae:	5b                   	pop    ebx
c001d2af:	5e                   	pop    esi
c001d2b0:	5f                   	pop    edi
c001d2b1:	5d                   	pop    ebp
c001d2b2:	e9 5d 0b ff ff       	jmp    c000de14 <Device::preOpenPCI(PCIDeviceInfo)>
c001d2b7:	83 c4 1c             	add    esp,0x1c
c001d2ba:	5b                   	pop    ebx
c001d2bb:	5e                   	pop    esi
c001d2bc:	5f                   	pop    edi
c001d2bd:	5d                   	pop    ebp
c001d2be:	c3                   	ret    
c001d2bf:	90                   	nop

c001d2c0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d2c0:	55                   	push   ebp
c001d2c1:	57                   	push   edi
c001d2c2:	56                   	push   esi
c001d2c3:	53                   	push   ebx
c001d2c4:	83 ec 68             	sub    esp,0x68
c001d2c7:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001d2cb:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001d2d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2d6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001d2dd:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c001d2e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d2e6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001d2ed:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001d2f2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2f6:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c001d2fb:	6a 0c                	push   0xc
c001d2fd:	57                   	push   edi
c001d2fe:	53                   	push   ebx
c001d2ff:	56                   	push   esi
c001d300:	55                   	push   ebp
c001d301:	e8 88 f8 ff ff       	call   c001cb8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d306:	83 c4 20             	add    esp,0x20
c001d309:	57                   	push   edi
c001d30a:	53                   	push   ebx
c001d30b:	56                   	push   esi
c001d30c:	55                   	push   ebp
c001d30d:	e8 70 f9 ff ff       	call   c001cc82 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d312:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001d317:	57                   	push   edi
c001d318:	53                   	push   ebx
c001d319:	56                   	push   esi
c001d31a:	55                   	push   ebp
c001d31b:	e8 f8 f9 ff ff       	call   c001cd18 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d320:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d324:	83 c4 14             	add    esp,0x14
c001d327:	6a 3c                	push   0x3c
c001d329:	57                   	push   edi
c001d32a:	53                   	push   ebx
c001d32b:	56                   	push   esi
c001d32c:	55                   	push   ebp
c001d32d:	e8 5c f8 ff ff       	call   c001cb8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d332:	0f b6 c4             	movzx  eax,ah
c001d335:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d339:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d33d:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d341:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c001d346:	83 c4 20             	add    esp,0x20
c001d349:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d34f:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001d356:	74 7c                	je     c001d3d4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d358:	31 c0                	xor    eax,eax
c001d35a:	8b 15 68 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026268
c001d360:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d366:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c001d36c:	7e 66                	jle    c001d3d4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d36e:	8d 14 c2             	lea    edx,[edx+eax*8]
c001d371:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001d378:	39 cb                	cmp    ebx,ecx
c001d37a:	75 55                	jne    c001d3d1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d37c:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001d383:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001d387:	75 48                	jne    c001d3d1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d389:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d38d:	83 ec 0c             	sub    esp,0xc
c001d390:	68 a4 4d 02 c0       	push   0xc0024da4
c001d395:	e8 24 f7 fe ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001d39a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d39e:	8b 15 68 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026268
c001d3a4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d3a8:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d3ae:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c001d3b6:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c001d3ba:	52                   	push   edx
c001d3bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3bf:	53                   	push   ebx
c001d3c0:	68 c9 4d 02 c0       	push   0xc0024dc9
c001d3c5:	e8 f4 f6 fe ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001d3ca:	83 c4 20             	add    esp,0x20
c001d3cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d3d1:	40                   	inc    eax
c001d3d2:	eb 86                	jmp    c001d35a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c001d3d4:	31 d2                	xor    edx,edx
c001d3d6:	83 ec 0c             	sub    esp,0xc
c001d3d9:	57                   	push   edi
c001d3da:	53                   	push   ebx
c001d3db:	56                   	push   esi
c001d3dc:	52                   	push   edx
c001d3dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d3e1:	55                   	push   ebp
c001d3e2:	e8 7d f9 ff ff       	call   c001cd64 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d3e7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d3eb:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001d3ef:	42                   	inc    edx
c001d3f0:	83 c4 20             	add    esp,0x20
c001d3f3:	83 fa 06             	cmp    edx,0x6
c001d3f6:	75 de                	jne    c001d3d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c001d3f8:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d3fd:	83 ec 0c             	sub    esp,0xc
c001d400:	86 e0                	xchg   al,ah
c001d402:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001d407:	6a 02                	push   0x2
c001d409:	57                   	push   edi
c001d40a:	53                   	push   ebx
c001d40b:	56                   	push   esi
c001d40c:	55                   	push   ebp
c001d40d:	e8 7c f7 ff ff       	call   c001cb8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d412:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001d417:	83 c4 20             	add    esp,0x20
c001d41a:	57                   	push   edi
c001d41b:	53                   	push   ebx
c001d41c:	56                   	push   esi
c001d41d:	55                   	push   ebp
c001d41e:	e8 a9 f8 ff ff       	call   c001cccc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d423:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d427:	57                   	push   edi
c001d428:	53                   	push   ebx
c001d429:	56                   	push   esi
c001d42a:	55                   	push   ebp
c001d42b:	e8 06 f8 ff ff       	call   c001cc36 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d430:	b9 09 00 00 00       	mov    ecx,0x9
c001d435:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001d43a:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001d43e:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d442:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001d446:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001d44a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d44e:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001d452:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d456:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001d45a:	83 ec 0c             	sub    esp,0xc
c001d45d:	fc                   	cld    
c001d45e:	89 e7                	mov    edi,esp
c001d460:	8d 74 24 58          	lea    esi,[esp+0x58]
c001d464:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d466:	55                   	push   ebp
c001d467:	e8 e2 fc ff ff       	call   c001d14e <PCI::foundDevice(PCIDeviceInfo)>
c001d46c:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d472:	5b                   	pop    ebx
c001d473:	5e                   	pop    esi
c001d474:	5f                   	pop    edi
c001d475:	5d                   	pop    ebp
c001d476:	c3                   	ret    
c001d477:	90                   	nop

c001d478 <PCI::checkDevice(unsigned char, unsigned char)>:
c001d478:	55                   	push   ebp
c001d479:	57                   	push   edi
c001d47a:	56                   	push   esi
c001d47b:	53                   	push   ebx
c001d47c:	83 ec 0c             	sub    esp,0xc
c001d47f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d483:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001d488:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001d48d:	6a 00                	push   0x0
c001d48f:	56                   	push   esi
c001d490:	57                   	push   edi
c001d491:	55                   	push   ebp
c001d492:	e8 9f f7 ff ff       	call   c001cc36 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d497:	6a 00                	push   0x0
c001d499:	56                   	push   esi
c001d49a:	57                   	push   edi
c001d49b:	55                   	push   ebp
c001d49c:	e8 1f fe ff ff       	call   c001d2c0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d4a1:	83 c4 20             	add    esp,0x20
c001d4a4:	6a 00                	push   0x0
c001d4a6:	56                   	push   esi
c001d4a7:	57                   	push   edi
c001d4a8:	55                   	push   ebp
c001d4a9:	e8 ac f7 ff ff       	call   c001cc5a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d4ae:	83 c4 10             	add    esp,0x10
c001d4b1:	84 c0                	test   al,al
c001d4b3:	79 27                	jns    c001d4dc <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001d4b5:	bb 01 00 00 00       	mov    ebx,0x1
c001d4ba:	53                   	push   ebx
c001d4bb:	56                   	push   esi
c001d4bc:	57                   	push   edi
c001d4bd:	55                   	push   ebp
c001d4be:	e8 73 f7 ff ff       	call   c001cc36 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d4c3:	83 c4 10             	add    esp,0x10
c001d4c6:	66 40                	inc    ax
c001d4c8:	74 0c                	je     c001d4d6 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001d4ca:	53                   	push   ebx
c001d4cb:	56                   	push   esi
c001d4cc:	57                   	push   edi
c001d4cd:	55                   	push   ebp
c001d4ce:	e8 ed fd ff ff       	call   c001d2c0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d4d3:	83 c4 10             	add    esp,0x10
c001d4d6:	43                   	inc    ebx
c001d4d7:	83 fb 08             	cmp    ebx,0x8
c001d4da:	75 de                	jne    c001d4ba <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001d4dc:	83 c4 0c             	add    esp,0xc
c001d4df:	5b                   	pop    ebx
c001d4e0:	5e                   	pop    esi
c001d4e1:	5f                   	pop    edi
c001d4e2:	5d                   	pop    ebp
c001d4e3:	c3                   	ret    

c001d4e4 <PCI::detect()>:
c001d4e4:	56                   	push   esi
c001d4e5:	53                   	push   ebx
c001d4e6:	53                   	push   ebx
c001d4e7:	31 db                	xor    ebx,ebx
c001d4e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d4ed:	6a 00                	push   0x0
c001d4ef:	6a 00                	push   0x0
c001d4f1:	6a 00                	push   0x0
c001d4f3:	56                   	push   esi
c001d4f4:	e8 61 f7 ff ff       	call   c001cc5a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d4f9:	83 c4 10             	add    esp,0x10
c001d4fc:	a8 80                	test   al,0x80
c001d4fe:	75 21                	jne    c001d521 <PCI::detect()+0x3d>
c001d500:	51                   	push   ecx
c001d501:	51                   	push   ecx
c001d502:	6a 00                	push   0x0
c001d504:	56                   	push   esi
c001d505:	e8 20 fc ff ff       	call   c001d12a <PCI::checkBus(unsigned char)>
c001d50a:	83 c4 10             	add    esp,0x10
c001d50d:	eb 24                	jmp    c001d533 <PCI::detect()+0x4f>
c001d50f:	52                   	push   edx
c001d510:	52                   	push   edx
c001d511:	53                   	push   ebx
c001d512:	43                   	inc    ebx
c001d513:	56                   	push   esi
c001d514:	e8 11 fc ff ff       	call   c001d12a <PCI::checkBus(unsigned char)>
c001d519:	83 c4 10             	add    esp,0x10
c001d51c:	83 fb 08             	cmp    ebx,0x8
c001d51f:	74 12                	je     c001d533 <PCI::detect()+0x4f>
c001d521:	53                   	push   ebx
c001d522:	6a 00                	push   0x0
c001d524:	6a 00                	push   0x0
c001d526:	56                   	push   esi
c001d527:	e8 0a f7 ff ff       	call   c001cc36 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d52c:	83 c4 10             	add    esp,0x10
c001d52f:	66 40                	inc    ax
c001d531:	74 dc                	je     c001d50f <PCI::detect()+0x2b>
c001d533:	58                   	pop    eax
c001d534:	5b                   	pop    ebx
c001d535:	5e                   	pop    esi
c001d536:	c3                   	ret    
c001d537:	90                   	nop

c001d538 <IDE::close(int, int, void*)>:
c001d538:	83 c8 ff             	or     eax,0xffffffff
c001d53b:	c3                   	ret    

c001d53c <IDE::IDE()>:
c001d53c:	83 ec 0c             	sub    esp,0xc
c001d53f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d543:	83 ec 08             	sub    esp,0x8
c001d546:	68 10 4e 02 c0       	push   0xc0024e10
c001d54b:	50                   	push   eax
c001d54c:	e8 5f 0d ff ff       	call   c000e2b0 <HardDiskController::HardDiskController(char const*)>
c001d551:	83 c4 10             	add    esp,0x10
c001d554:	ba a0 4e 02 c0       	mov    edx,0xc0024ea0
c001d559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d55d:	89 10                	mov    DWORD PTR [eax],edx
c001d55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d563:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001d56a:	90                   	nop
c001d56b:	83 c4 0c             	add    esp,0xc
c001d56e:	c3                   	ret    
c001d56f:	90                   	nop

c001d570 <IDE::prepareInterrupt(unsigned char)>:
c001d570:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d575:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d579:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001d581:	c3                   	ret    

c001d582 <selectDrive(unsigned char, unsigned char)>:
c001d582:	c3                   	ret    
c001d583:	90                   	nop

c001d584 <IDE::getBase(unsigned char)>:
c001d584:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001d589:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d58d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001d595:	c3                   	ret    

c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001d596:	55                   	push   ebp
c001d597:	57                   	push   edi
c001d598:	56                   	push   esi
c001d599:	53                   	push   ebx
c001d59a:	83 ec 1c             	sub    esp,0x1c
c001d59d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d5a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d5a5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001d5a8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d5ac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d5b0:	80 f9 03             	cmp    cl,0x3
c001d5b3:	77 51                	ja     c001d606 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001d5b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d5b9:	0f b6 f2             	movzx  esi,dl
c001d5bc:	0f b6 db             	movzx  ebx,bl
c001d5bf:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d5c2:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001d5c6:	83 ca 80             	or     edx,0xffffff80
c001d5c9:	0f b6 d2             	movzx  edx,dl
c001d5cc:	52                   	push   edx
c001d5cd:	6a 0c                	push   0xc
c001d5cf:	56                   	push   esi
c001d5d0:	57                   	push   edi
c001d5d1:	e8 c0 ff ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5d6:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001d5db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5df:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001d5e3:	ee                   	out    dx,al
c001d5e4:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001d5e9:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001d5ed:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001d5f1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d5f5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d5fd:	83 c4 2c             	add    esp,0x2c
c001d600:	5b                   	pop    ebx
c001d601:	5e                   	pop    esi
c001d602:	5f                   	pop    edi
c001d603:	5d                   	pop    ebp
c001d604:	eb 90                	jmp    c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d606:	80 fb 07             	cmp    bl,0x7
c001d609:	77 12                	ja     c001d61d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001d60b:	0f b6 d2             	movzx  edx,dl
c001d60e:	0f b6 db             	movzx  ebx,bl
c001d611:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001d619:	89 da                	mov    edx,ebx
c001d61b:	eb 2f                	jmp    c001d64c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d61d:	80 fb 0d             	cmp    bl,0xd
c001d620:	77 13                	ja     c001d635 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001d622:	0f b6 d2             	movzx  edx,dl
c001d625:	0f b6 db             	movzx  ebx,bl
c001d628:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001d62f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001d633:	eb 17                	jmp    c001d64c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d635:	80 fb 15             	cmp    bl,0x15
c001d638:	77 13                	ja     c001d64d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d63a:	0f b6 d2             	movzx  edx,dl
c001d63d:	0f b6 db             	movzx  ebx,bl
c001d640:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001d648:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001d64c:	ee                   	out    dx,al
c001d64d:	83 c4 1c             	add    esp,0x1c
c001d650:	5b                   	pop    ebx
c001d651:	5e                   	pop    esi
c001d652:	5f                   	pop    edi
c001d653:	5d                   	pop    ebp
c001d654:	c3                   	ret    
c001d655:	90                   	nop

c001d656 <IDE::read(unsigned char, unsigned char)>:
c001d656:	55                   	push   ebp
c001d657:	57                   	push   edi
c001d658:	56                   	push   esi
c001d659:	53                   	push   ebx
c001d65a:	83 ec 1c             	sub    esp,0x1c
c001d65d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d661:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d665:	8d 43 f8             	lea    eax,[ebx-0x8]
c001d668:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d66c:	3c 03                	cmp    al,0x3
c001d66e:	77 43                	ja     c001d6b3 <IDE::read(unsigned char, unsigned char)+0x5d>
c001d670:	0f b6 f2             	movzx  esi,dl
c001d673:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d676:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001d67a:	83 c8 80             	or     eax,0xffffff80
c001d67d:	0f b6 c0             	movzx  eax,al
c001d680:	50                   	push   eax
c001d681:	6a 0c                	push   0xc
c001d683:	56                   	push   esi
c001d684:	57                   	push   edi
c001d685:	e8 0c ff ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d68a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001d68f:	0f b6 c3             	movzx  eax,bl
c001d692:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001d696:	ec                   	in     al,dx
c001d697:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d69b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001d6a0:	52                   	push   edx
c001d6a1:	6a 0c                	push   0xc
c001d6a3:	56                   	push   esi
c001d6a4:	57                   	push   edi
c001d6a5:	e8 ec fe ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6aa:	83 c4 20             	add    esp,0x20
c001d6ad:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d6b1:	eb 49                	jmp    c001d6fc <IDE::read(unsigned char, unsigned char)+0xa6>
c001d6b3:	80 fb 07             	cmp    bl,0x7
c001d6b6:	77 12                	ja     c001d6ca <IDE::read(unsigned char, unsigned char)+0x74>
c001d6b8:	0f b6 d2             	movzx  edx,dl
c001d6bb:	0f b6 c3             	movzx  eax,bl
c001d6be:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001d6c6:	89 c2                	mov    edx,eax
c001d6c8:	eb 31                	jmp    c001d6fb <IDE::read(unsigned char, unsigned char)+0xa5>
c001d6ca:	80 fb 0d             	cmp    bl,0xd
c001d6cd:	77 13                	ja     c001d6e2 <IDE::read(unsigned char, unsigned char)+0x8c>
c001d6cf:	0f b6 d2             	movzx  edx,dl
c001d6d2:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001d6d9:	0f b6 d3             	movzx  edx,bl
c001d6dc:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d6e0:	eb 19                	jmp    c001d6fb <IDE::read(unsigned char, unsigned char)+0xa5>
c001d6e2:	31 c0                	xor    eax,eax
c001d6e4:	80 fb 15             	cmp    bl,0x15
c001d6e7:	77 13                	ja     c001d6fc <IDE::read(unsigned char, unsigned char)+0xa6>
c001d6e9:	0f b6 d2             	movzx  edx,dl
c001d6ec:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001d6f4:	0f b6 d3             	movzx  edx,bl
c001d6f7:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d6fb:	ec                   	in     al,dx
c001d6fc:	83 c4 1c             	add    esp,0x1c
c001d6ff:	5b                   	pop    ebx
c001d700:	5e                   	pop    esi
c001d701:	5f                   	pop    edi
c001d702:	5d                   	pop    ebp
c001d703:	c3                   	ret    

c001d704 <IDE::waitInterrupt(unsigned char)>:
c001d704:	55                   	push   ebp
c001d705:	57                   	push   edi
c001d706:	56                   	push   esi
c001d707:	53                   	push   ebx
c001d708:	31 db                	xor    ebx,ebx
c001d70a:	83 ec 0c             	sub    esp,0xc
c001d70d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d711:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001d716:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001d71e:	89 e8                	mov    eax,ebp
c001d720:	84 c0                	test   al,al
c001d722:	75 34                	jne    c001d758 <IDE::waitInterrupt(unsigned char)+0x54>
c001d724:	52                   	push   edx
c001d725:	6a 0c                	push   0xc
c001d727:	56                   	push   esi
c001d728:	57                   	push   edi
c001d729:	e8 28 ff ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001d72e:	83 c4 10             	add    esp,0x10
c001d731:	a8 01                	test   al,0x1
c001d733:	75 2b                	jne    c001d760 <IDE::waitInterrupt(unsigned char)+0x5c>
c001d735:	f6 c3 04             	test   bl,0x4
c001d738:	75 16                	jne    c001d750 <IDE::waitInterrupt(unsigned char)+0x4c>
c001d73a:	83 fb 32             	cmp    ebx,0x32
c001d73d:	7e 11                	jle    c001d750 <IDE::waitInterrupt(unsigned char)+0x4c>
c001d73f:	50                   	push   eax
c001d740:	50                   	push   eax
c001d741:	6a 00                	push   0x0
c001d743:	68 80 96 98 00       	push   0x989680
c001d748:	e8 9c ab ff ff       	call   c00182e9 <nanoSleep(unsigned long long)>
c001d74d:	83 c4 10             	add    esp,0x10
c001d750:	83 fb 3c             	cmp    ebx,0x3c
c001d753:	74 0b                	je     c001d760 <IDE::waitInterrupt(unsigned char)+0x5c>
c001d755:	43                   	inc    ebx
c001d756:	eb be                	jmp    c001d716 <IDE::waitInterrupt(unsigned char)+0x12>
c001d758:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001d760:	83 c4 0c             	add    esp,0xc
c001d763:	89 e8                	mov    eax,ebp
c001d765:	5b                   	pop    ebx
c001d766:	5e                   	pop    esi
c001d767:	5f                   	pop    edi
c001d768:	5d                   	pop    ebp
c001d769:	c3                   	ret    

c001d76a <ideChannel0IRQHandler(regs*, void*)>:
c001d76a:	83 ec 10             	sub    esp,0x10
c001d76d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d771:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001d778:	6a 07                	push   0x7
c001d77a:	6a 00                	push   0x0
c001d77c:	50                   	push   eax
c001d77d:	e8 d4 fe ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001d782:	83 c4 1c             	add    esp,0x1c
c001d785:	c3                   	ret    

c001d786 <ideChannel1IRQHandler(regs*, void*)>:
c001d786:	83 ec 10             	sub    esp,0x10
c001d789:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d78d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001d794:	6a 07                	push   0x7
c001d796:	6a 01                	push   0x1
c001d798:	50                   	push   eax
c001d799:	e8 b8 fe ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001d79e:	83 c4 1c             	add    esp,0x1c
c001d7a1:	c3                   	ret    

c001d7a2 <IDE::enableIRQs(unsigned char, bool)>:
c001d7a2:	57                   	push   edi
c001d7a3:	56                   	push   esi
c001d7a4:	be 04 00 00 00       	mov    esi,0x4
c001d7a9:	53                   	push   ebx
c001d7aa:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001d7af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d7b3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001d7b8:	0f 94 c0             	sete   al
c001d7bb:	d1 e0                	shl    eax,1
c001d7bd:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001d7c4:	0f b6 c0             	movzx  eax,al
c001d7c7:	50                   	push   eax
c001d7c8:	6a 0c                	push   0xc
c001d7ca:	57                   	push   edi
c001d7cb:	53                   	push   ebx
c001d7cc:	e8 c5 fd ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7d1:	83 c4 10             	add    esp,0x10
c001d7d4:	50                   	push   eax
c001d7d5:	6a 0c                	push   0xc
c001d7d7:	57                   	push   edi
c001d7d8:	53                   	push   ebx
c001d7d9:	e8 78 fe ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001d7de:	83 c4 10             	add    esp,0x10
c001d7e1:	4e                   	dec    esi
c001d7e2:	75 f0                	jne    c001d7d4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001d7e4:	5b                   	pop    ebx
c001d7e5:	5e                   	pop    esi
c001d7e6:	5f                   	pop    edi
c001d7e7:	c3                   	ret    

c001d7e8 <IDE::open(int, int, void*)>:
c001d7e8:	55                   	push   ebp
c001d7e9:	57                   	push   edi
c001d7ea:	56                   	push   esi
c001d7eb:	53                   	push   ebx
c001d7ec:	83 ec 1c             	sub    esp,0x1c
c001d7ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d7f3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001d7fc:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001d805:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001d80c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001d813:	0f 85 b0 02 00 00    	jne    c001dac9 <IDE::open(int, int, void*)+0x2e1>
c001d819:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001d81f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001d823:	83 e0 7f             	and    eax,0x7f
c001d826:	3c 05                	cmp    al,0x5
c001d828:	74 04                	je     c001d82e <IDE::open(int, int, void*)+0x46>
c001d82a:	3c 0f                	cmp    al,0xf
c001d82c:	75 32                	jne    c001d860 <IDE::open(int, int, void*)+0x78>
c001d82e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001d834:	83 e0 fc             	and    eax,0xfffffffc
c001d837:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d83e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001d844:	83 e0 fc             	and    eax,0xfffffffc
c001d847:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d84e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001d854:	83 e0 fc             	and    eax,0xfffffffc
c001d857:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d85e:	eb 14                	jmp    c001d874 <IDE::open(int, int, void*)+0x8c>
c001d860:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001d86a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001d874:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001d87b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001d882:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d886:	89 c6                	mov    esi,eax
c001d888:	bf f8 0c 00 00       	mov    edi,0xcf8
c001d88d:	c1 e6 10             	shl    esi,0x10
c001d890:	89 e8                	mov    eax,ebp
c001d892:	89 fa                	mov    edx,edi
c001d894:	c1 e0 0b             	shl    eax,0xb
c001d897:	09 f0                	or     eax,esi
c001d899:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001d8a0:	c1 e6 08             	shl    esi,0x8
c001d8a3:	09 c6                	or     esi,eax
c001d8a5:	89 f0                	mov    eax,esi
c001d8a7:	0d 08 00 00 80       	or     eax,0x80000008
c001d8ac:	ef                   	out    dx,eax
c001d8ad:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001d8b2:	89 ca                	mov    edx,ecx
c001d8b4:	ed                   	in     eax,dx
c001d8b5:	c1 e8 10             	shr    eax,0x10
c001d8b8:	3d ff ff 00 00       	cmp    eax,0xffff
c001d8bd:	0f 84 f5 00 00 00    	je     c001d9b8 <IDE::open(int, int, void*)+0x1d0>
c001d8c3:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001d8c9:	89 fa                	mov    edx,edi
c001d8cb:	89 f0                	mov    eax,esi
c001d8cd:	ef                   	out    dx,eax
c001d8ce:	b0 fe                	mov    al,0xfe
c001d8d0:	89 ca                	mov    edx,ecx
c001d8d2:	ee                   	out    dx,al
c001d8d3:	89 f0                	mov    eax,esi
c001d8d5:	89 fa                	mov    edx,edi
c001d8d7:	ef                   	out    dx,eax
c001d8d8:	89 ca                	mov    edx,ecx
c001d8da:	ed                   	in     eax,dx
c001d8db:	3c fe                	cmp    al,0xfe
c001d8dd:	0f 85 a9 00 00 00    	jne    c001d98c <IDE::open(int, int, void*)+0x1a4>
c001d8e3:	8b 15 68 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026268
c001d8e9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001d8f0:	74 33                	je     c001d925 <IDE::open(int, int, void*)+0x13d>
c001d8f2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001d8f8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001d8fc:	40                   	inc    eax
c001d8fd:	83 ec 0c             	sub    esp,0xc
c001d900:	0f b6 c0             	movzx  eax,al
c001d903:	50                   	push   eax
c001d904:	55                   	push   ebp
c001d905:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d909:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001d90f:	51                   	push   ecx
c001d910:	e8 91 47 ff ff       	call   c00120a6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001d915:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001d91a:	83 c4 1c             	add    esp,0x1c
c001d91d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001d923:	eb 0a                	jmp    c001d92f <IDE::open(int, int, void*)+0x147>
c001d925:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001d92f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001d936:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001d93d:	c1 e1 10             	shl    ecx,0x10
c001d940:	c1 e0 08             	shl    eax,0x8
c001d943:	bf f8 0c 00 00       	mov    edi,0xcf8
c001d948:	09 c1                	or     ecx,eax
c001d94a:	89 fa                	mov    edx,edi
c001d94c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001d953:	c1 e0 0b             	shl    eax,0xb
c001d956:	09 c1                	or     ecx,eax
c001d958:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001d95e:	89 c8                	mov    eax,ecx
c001d960:	ef                   	out    dx,eax
c001d961:	be fc 0c 00 00       	mov    esi,0xcfc
c001d966:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001d96c:	89 f2                	mov    edx,esi
c001d96e:	ee                   	out    dx,al
c001d96f:	89 c8                	mov    eax,ecx
c001d971:	89 fa                	mov    edx,edi
c001d973:	ef                   	out    dx,eax
c001d974:	89 f2                	mov    edx,esi
c001d976:	ed                   	in     eax,dx
c001d977:	0f b6 c0             	movzx  eax,al
c001d97a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001d980:	74 46                	je     c001d9c8 <IDE::open(int, int, void*)+0x1e0>
c001d982:	83 ec 0c             	sub    esp,0xc
c001d985:	68 28 4e 02 c0       	push   0xc0024e28
c001d98a:	eb 34                	jmp    c001d9c0 <IDE::open(int, int, void*)+0x1d8>
c001d98c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001d995:	75 17                	jne    c001d9ae <IDE::open(int, int, void*)+0x1c6>
c001d997:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001d99c:	74 07                	je     c001d9a5 <IDE::open(int, int, void*)+0x1bd>
c001d99e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001d9a3:	75 09                	jne    c001d9ae <IDE::open(int, int, void*)+0x1c6>
c001d9a5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001d9ac:	eb 1a                	jmp    c001d9c8 <IDE::open(int, int, void*)+0x1e0>
c001d9ae:	83 ec 0c             	sub    esp,0xc
c001d9b1:	68 30 4e 02 c0       	push   0xc0024e30
c001d9b6:	eb 08                	jmp    c001d9c0 <IDE::open(int, int, void*)+0x1d8>
c001d9b8:	83 ec 0c             	sub    esp,0xc
c001d9bb:	68 61 4e 02 c0       	push   0xc0024e61
c001d9c0:	e8 b8 6a ff ff       	call   c001447d <Krnl::panic(char const*)>
c001d9c5:	83 c4 10             	add    esp,0x10
c001d9c8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001d9cf:	79 1a                	jns    c001d9eb <IDE::open(int, int, void*)+0x203>
c001d9d1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001d9d7:	83 e0 fc             	and    eax,0xfffffffc
c001d9da:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001d9e1:	83 c0 08             	add    eax,0x8
c001d9e4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001d9eb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001d9f1:	89 c2                	mov    edx,eax
c001d9f3:	83 e2 0f             	and    edx,0xf
c001d9f6:	66 83 fa 08          	cmp    dx,0x8
c001d9fa:	75 0a                	jne    c001da06 <IDE::open(int, int, void*)+0x21e>
c001d9fc:	83 e8 02             	sub    eax,0x2
c001d9ff:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001da06:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001da0c:	89 c2                	mov    edx,eax
c001da0e:	83 e2 0f             	and    edx,0xf
c001da11:	66 83 fa 08          	cmp    dx,0x8
c001da15:	75 0a                	jne    c001da21 <IDE::open(int, int, void*)+0x239>
c001da17:	83 e8 02             	sub    eax,0x2
c001da1a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001da21:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001da28:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001da2f:	89 d0                	mov    eax,edx
c001da31:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001da34:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001da38:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001da3c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001da3f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001da44:	0f b6 c9             	movzx  ecx,cl
c001da47:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001da4e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001da51:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001da55:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001da59:	8d 50 02             	lea    edx,[eax+0x2]
c001da5c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001da61:	0f b6 d2             	movzx  edx,dl
c001da64:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001da6a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001da6d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001da71:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001da75:	8d 48 03             	lea    ecx,[eax+0x3]
c001da78:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001da7d:	0f b6 c9             	movzx  ecx,cl
c001da80:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001da86:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001da89:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001da8d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001da91:	8d 50 04             	lea    edx,[eax+0x4]
c001da94:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001da9a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001da9f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001daa6:	66 85 f6             	test   si,si
c001daa9:	74 5b                	je     c001db06 <IDE::open(int, int, void*)+0x31e>
c001daab:	0f b6 d2             	movzx  edx,dl
c001daae:	83 c0 05             	add    eax,0x5
c001dab1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dab4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dab8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001dabc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001dac2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dac7:	eb 3d                	jmp    c001db06 <IDE::open(int, int, void*)+0x31e>
c001dac9:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001dacf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001dad6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001dadd:	66 05 06 02          	add    ax,0x206
c001dae1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dae8:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001daef:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001daf6:	66 05 06 02          	add    ax,0x206
c001dafa:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001db01:	e9 e5 fe ff ff       	jmp    c001d9eb <IDE::open(int, int, void*)+0x203>
c001db06:	50                   	push   eax
c001db07:	50                   	push   eax
c001db08:	6a 00                	push   0x0
c001db0a:	53                   	push   ebx
c001db0b:	e8 60 fa ff ff       	call   c001d570 <IDE::prepareInterrupt(unsigned char)>
c001db10:	5a                   	pop    edx
c001db11:	59                   	pop    ecx
c001db12:	6a 01                	push   0x1
c001db14:	53                   	push   ebx
c001db15:	e8 56 fa ff ff       	call   c001d570 <IDE::prepareInterrupt(unsigned char)>
c001db1a:	83 c4 0c             	add    esp,0xc
c001db1d:	6a 00                	push   0x0
c001db1f:	6a 00                	push   0x0
c001db21:	53                   	push   ebx
c001db22:	e8 7b fc ff ff       	call   c001d7a2 <IDE::enableIRQs(unsigned char, bool)>
c001db27:	83 c4 0c             	add    esp,0xc
c001db2a:	6a 00                	push   0x0
c001db2c:	6a 01                	push   0x1
c001db2e:	53                   	push   ebx
c001db2f:	e8 6e fc ff ff       	call   c001d7a2 <IDE::enableIRQs(unsigned char, bool)>
c001db34:	83 c4 10             	add    esp,0x10
c001db37:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001db3e:	74 34                	je     c001db74 <IDE::open(int, int, void*)+0x38c>
c001db40:	83 ec 0c             	sub    esp,0xc
c001db43:	53                   	push   ebx
c001db44:	6a 01                	push   0x1
c001db46:	68 6a d7 01 c0       	push   0xc001d76a
c001db4b:	6a 0e                	push   0xe
c001db4d:	53                   	push   ebx
c001db4e:	e8 27 03 ff ff       	call   c000de7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001db53:	83 c4 14             	add    esp,0x14
c001db56:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001db5c:	53                   	push   ebx
c001db5d:	6a 01                	push   0x1
c001db5f:	68 86 d7 01 c0       	push   0xc001d786
c001db64:	6a 0f                	push   0xf
c001db66:	53                   	push   ebx
c001db67:	e8 0e 03 ff ff       	call   c000de7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001db6c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001db72:	eb 38                	jmp    c001dbac <IDE::open(int, int, void*)+0x3c4>
c001db74:	83 ec 0c             	sub    esp,0xc
c001db77:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001db81:	53                   	push   ebx
c001db82:	6a 00                	push   0x0
c001db84:	68 6a d7 01 c0       	push   0xc001d76a
c001db89:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001db8f:	53                   	push   ebx
c001db90:	e8 e5 02 ff ff       	call   c000de7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001db95:	83 c4 14             	add    esp,0x14
c001db98:	53                   	push   ebx
c001db99:	6a 00                	push   0x0
c001db9b:	68 86 d7 01 c0       	push   0xc001d786
c001dba0:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001dba6:	53                   	push   ebx
c001dba7:	e8 ce 02 ff ff       	call   c000de7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dbac:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dbae:	83 c4 20             	add    esp,0x20
c001dbb1:	83 ec 0c             	sub    esp,0xc
c001dbb4:	53                   	push   ebx
c001dbb5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001dbb8:	83 c4 0c             	add    esp,0xc
c001dbbb:	6a 07                	push   0x7
c001dbbd:	6a 00                	push   0x0
c001dbbf:	53                   	push   ebx
c001dbc0:	e8 91 fa ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001dbc5:	83 c4 0c             	add    esp,0xc
c001dbc8:	6a 07                	push   0x7
c001dbca:	6a 01                	push   0x1
c001dbcc:	53                   	push   ebx
c001dbcd:	e8 84 fa ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001dbd2:	83 c4 0c             	add    esp,0xc
c001dbd5:	6a 01                	push   0x1
c001dbd7:	6a 00                	push   0x0
c001dbd9:	53                   	push   ebx
c001dbda:	e8 c3 fb ff ff       	call   c001d7a2 <IDE::enableIRQs(unsigned char, bool)>
c001dbdf:	83 c4 0c             	add    esp,0xc
c001dbe2:	6a 01                	push   0x1
c001dbe4:	6a 01                	push   0x1
c001dbe6:	53                   	push   ebx
c001dbe7:	e8 b6 fb ff ff       	call   c001d7a2 <IDE::enableIRQs(unsigned char, bool)>
c001dbec:	83 c4 2c             	add    esp,0x2c
c001dbef:	31 c0                	xor    eax,eax
c001dbf1:	5b                   	pop    ebx
c001dbf2:	5e                   	pop    esi
c001dbf3:	5f                   	pop    edi
c001dbf4:	5d                   	pop    ebp
c001dbf5:	c3                   	ret    

c001dbf6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001dbf6:	55                   	push   ebp
c001dbf7:	57                   	push   edi
c001dbf8:	56                   	push   esi
c001dbf9:	53                   	push   ebx
c001dbfa:	83 ec 1c             	sub    esp,0x1c
c001dbfd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dc01:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dc05:	8d 50 f8             	lea    edx,[eax-0x8]
c001dc08:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dc0c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001dc10:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001dc14:	80 fa 03             	cmp    dl,0x3
c001dc17:	77 5d                	ja     c001dc76 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001dc19:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dc1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc21:	0f b6 db             	movzx  ebx,bl
c001dc24:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001dc27:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001dc2b:	83 ca 80             	or     edx,0xffffff80
c001dc2e:	0f b6 d2             	movzx  edx,dl
c001dc31:	52                   	push   edx
c001dc32:	6a 0c                	push   0xc
c001dc34:	53                   	push   ebx
c001dc35:	56                   	push   esi
c001dc36:	e8 5b f9 ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc3b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001dc40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dc44:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dc48:	0f b6 c0             	movzx  eax,al
c001dc4b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001dc4f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001dc51:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001dc56:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001dc5a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001dc5e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dc62:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001dc6a:	83 c4 2c             	add    esp,0x2c
c001dc6d:	5b                   	pop    ebx
c001dc6e:	5e                   	pop    esi
c001dc6f:	5f                   	pop    edi
c001dc70:	5d                   	pop    ebp
c001dc71:	e9 20 f9 ff ff       	jmp    c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc76:	3c 07                	cmp    al,0x7
c001dc78:	77 10                	ja     c001dc8a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001dc7a:	0f b6 db             	movzx  ebx,bl
c001dc7d:	0f b6 d0             	movzx  edx,al
c001dc80:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001dc88:	eb 2d                	jmp    c001dcb7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001dc8a:	3c 0d                	cmp    al,0xd
c001dc8c:	77 13                	ja     c001dca1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001dc8e:	0f b6 db             	movzx  ebx,bl
c001dc91:	0f b6 c0             	movzx  eax,al
c001dc94:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001dc9b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001dc9f:	eb 16                	jmp    c001dcb7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001dca1:	3c 15                	cmp    al,0x15
c001dca3:	77 14                	ja     c001dcb9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001dca5:	0f b6 db             	movzx  ebx,bl
c001dca8:	0f b6 c0             	movzx  eax,al
c001dcab:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001dcb3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001dcb7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001dcb9:	83 c4 1c             	add    esp,0x1c
c001dcbc:	5b                   	pop    ebx
c001dcbd:	5e                   	pop    esi
c001dcbe:	5f                   	pop    edi
c001dcbf:	5d                   	pop    ebp
c001dcc0:	c3                   	ret    
c001dcc1:	90                   	nop

c001dcc2 <IDE::detect()>:
c001dcc2:	55                   	push   ebp
c001dcc3:	57                   	push   edi
c001dcc4:	56                   	push   esi
c001dcc5:	53                   	push   ebx
c001dcc6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001dccc:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001dcd3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001dcda:	0f 85 9d 02 00 00    	jne    c001df7d <IDE::detect()+0x2bb>
c001dce0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001dce7:	31 f6                	xor    esi,esi
c001dce9:	31 ed                	xor    ebp,ebp
c001dceb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001dcf3:	89 e8                	mov    eax,ebp
c001dcf5:	c1 e0 06             	shl    eax,0x6
c001dcf8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001dd00:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001dd04:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001dd08:	c1 e0 04             	shl    eax,0x4
c001dd0b:	83 c8 a0             	or     eax,0xffffffa0
c001dd0e:	0f b6 c0             	movzx  eax,al
c001dd11:	50                   	push   eax
c001dd12:	6a 06                	push   0x6
c001dd14:	56                   	push   esi
c001dd15:	53                   	push   ebx
c001dd16:	e8 7b f8 ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd1b:	83 c4 0c             	add    esp,0xc
c001dd1e:	6a 0c                	push   0xc
c001dd20:	56                   	push   esi
c001dd21:	53                   	push   ebx
c001dd22:	e8 2f f9 ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001dd27:	83 c4 0c             	add    esp,0xc
c001dd2a:	6a 0c                	push   0xc
c001dd2c:	56                   	push   esi
c001dd2d:	53                   	push   ebx
c001dd2e:	e8 23 f9 ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001dd33:	83 c4 0c             	add    esp,0xc
c001dd36:	6a 0c                	push   0xc
c001dd38:	56                   	push   esi
c001dd39:	53                   	push   ebx
c001dd3a:	e8 17 f9 ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001dd3f:	83 c4 0c             	add    esp,0xc
c001dd42:	6a 0c                	push   0xc
c001dd44:	56                   	push   esi
c001dd45:	53                   	push   ebx
c001dd46:	e8 0b f9 ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001dd4b:	68 ec 00 00 00       	push   0xec
c001dd50:	6a 07                	push   0x7
c001dd52:	56                   	push   esi
c001dd53:	53                   	push   ebx
c001dd54:	e8 3d f8 ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd59:	83 c4 1c             	add    esp,0x1c
c001dd5c:	6a 0c                	push   0xc
c001dd5e:	56                   	push   esi
c001dd5f:	53                   	push   ebx
c001dd60:	e8 f1 f8 ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001dd65:	83 c4 0c             	add    esp,0xc
c001dd68:	6a 0c                	push   0xc
c001dd6a:	56                   	push   esi
c001dd6b:	53                   	push   ebx
c001dd6c:	e8 e5 f8 ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001dd71:	83 c4 0c             	add    esp,0xc
c001dd74:	6a 0c                	push   0xc
c001dd76:	56                   	push   esi
c001dd77:	53                   	push   ebx
c001dd78:	e8 d9 f8 ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001dd7d:	83 c4 0c             	add    esp,0xc
c001dd80:	6a 0c                	push   0xc
c001dd82:	56                   	push   esi
c001dd83:	53                   	push   ebx
c001dd84:	e8 cd f8 ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001dd89:	83 c4 0c             	add    esp,0xc
c001dd8c:	6a 0c                	push   0xc
c001dd8e:	56                   	push   esi
c001dd8f:	53                   	push   ebx
c001dd90:	e8 c1 f8 ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001dd95:	83 c4 10             	add    esp,0x10
c001dd98:	84 c0                	test   al,al
c001dd9a:	0f 84 63 01 00 00    	je     c001df03 <IDE::detect()+0x241>
c001dda0:	31 ff                	xor    edi,edi
c001dda2:	50                   	push   eax
c001dda3:	6a 0c                	push   0xc
c001dda5:	56                   	push   esi
c001dda6:	53                   	push   ebx
c001dda7:	e8 aa f8 ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001ddac:	83 c4 10             	add    esp,0x10
c001ddaf:	a8 01                	test   al,0x1
c001ddb1:	0f 85 6d 01 00 00    	jne    c001df24 <IDE::detect()+0x262>
c001ddb7:	84 c0                	test   al,al
c001ddb9:	78 04                	js     c001ddbf <IDE::detect()+0xfd>
c001ddbb:	a8 08                	test   al,0x8
c001ddbd:	75 27                	jne    c001dde6 <IDE::detect()+0x124>
c001ddbf:	47                   	inc    edi
c001ddc0:	81 ff 17 01 00 00    	cmp    edi,0x117
c001ddc6:	7e da                	jle    c001dda2 <IDE::detect()+0xe0>
c001ddc8:	50                   	push   eax
c001ddc9:	50                   	push   eax
c001ddca:	6a 00                	push   0x0
c001ddcc:	68 40 4b 4c 00       	push   0x4c4b40
c001ddd1:	e8 13 a5 ff ff       	call   c00182e9 <nanoSleep(unsigned long long)>
c001ddd6:	83 c4 10             	add    esp,0x10
c001ddd9:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001dddf:	75 c1                	jne    c001dda2 <IDE::detect()+0xe0>
c001dde1:	e9 3e 01 00 00       	jmp    c001df24 <IDE::detect()+0x262>
c001dde6:	31 c9                	xor    ecx,ecx
c001dde8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ddec:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ddf0:	83 ec 0c             	sub    esp,0xc
c001ddf3:	68 80 00 00 00       	push   0x80
c001ddf8:	57                   	push   edi
c001ddf9:	6a 00                	push   0x0
c001ddfb:	56                   	push   esi
c001ddfc:	53                   	push   ebx
c001ddfd:	e8 f4 fd ff ff       	call   c001dbf6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001de02:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001de07:	89 e8                	mov    eax,ebp
c001de09:	89 d1                	mov    ecx,edx
c001de0b:	c1 e0 06             	shl    eax,0x6
c001de0e:	01 d8                	add    eax,ebx
c001de10:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001de17:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001de1e:	89 f2                	mov    edx,esi
c001de20:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001de26:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001de2a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001de30:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001de34:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001de3b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001de43:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001de4a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001de52:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001de58:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001de5f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001de65:	8d 54 24 58          	lea    edx,[esp+0x58]
c001de69:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001de6d:	83 c4 20             	add    esp,0x20
c001de70:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001de73:	83 c0 02             	add    eax,0x2
c001de76:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001de7c:	83 c7 02             	add    edi,0x2
c001de7f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001de82:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001de88:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001de8c:	75 e2                	jne    c001de70 <IDE::detect()+0x1ae>
c001de8e:	89 e8                	mov    eax,ebp
c001de90:	c1 e0 06             	shl    eax,0x6
c001de93:	01 d8                	add    eax,ebx
c001de95:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001de9b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001dea2:	66 c1 ea 09          	shr    dx,0x9
c001dea6:	83 e2 01             	and    edx,0x1
c001dea9:	84 c9                	test   cl,cl
c001deab:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001deb1:	75 22                	jne    c001ded5 <IDE::detect()+0x213>
c001deb3:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001deba:	74 46                	je     c001df02 <IDE::detect()+0x240>
c001debc:	83 ec 0c             	sub    esp,0xc
c001debf:	68 7c 01 00 00       	push   0x17c
c001dec4:	e8 94 bb fe ff       	call   c0009a5d <malloc>
c001dec9:	89 c7                	mov    edi,eax
c001decb:	89 04 24             	mov    DWORD PTR [esp],eax
c001dece:	e8 15 05 00 00       	call   c001e3e8 <ATA::ATA()>
c001ded3:	eb 17                	jmp    c001deec <IDE::detect()+0x22a>
c001ded5:	83 ec 0c             	sub    esp,0xc
c001ded8:	68 80 01 00 00       	push   0x180
c001dedd:	e8 7b bb fe ff       	call   c0009a5d <malloc>
c001dee2:	89 c7                	mov    edi,eax
c001dee4:	89 04 24             	mov    DWORD PTR [esp],eax
c001dee7:	e8 88 0b 00 00       	call   c001ea74 <ATAPI::ATAPI()>
c001deec:	5a                   	pop    edx
c001deed:	59                   	pop    ecx
c001deee:	57                   	push   edi
c001deef:	53                   	push   ebx
c001def0:	e8 0d 00 ff ff       	call   c000df02 <Device::addChild(Device*)>
c001def5:	8b 07                	mov    eax,DWORD PTR [edi]
c001def7:	53                   	push   ebx
c001def8:	55                   	push   ebp
c001def9:	6a 00                	push   0x0
c001defb:	57                   	push   edi
c001defc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001deff:	83 c4 20             	add    esp,0x20
c001df02:	45                   	inc    ebp
c001df03:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001df08:	74 0d                	je     c001df17 <IDE::detect()+0x255>
c001df0a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001df12:	e9 dc fd ff ff       	jmp    c001dcf3 <IDE::detect()+0x31>
c001df17:	4e                   	dec    esi
c001df18:	74 63                	je     c001df7d <IDE::detect()+0x2bb>
c001df1a:	be 01 00 00 00       	mov    esi,0x1
c001df1f:	e9 c7 fd ff ff       	jmp    c001dceb <IDE::detect()+0x29>
c001df24:	50                   	push   eax
c001df25:	6a 04                	push   0x4
c001df27:	56                   	push   esi
c001df28:	53                   	push   ebx
c001df29:	e8 28 f7 ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001df2e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001df32:	83 c4 0c             	add    esp,0xc
c001df35:	6a 05                	push   0x5
c001df37:	56                   	push   esi
c001df38:	53                   	push   ebx
c001df39:	e8 18 f7 ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001df3e:	83 c4 10             	add    esp,0x10
c001df41:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001df45:	80 fa 14             	cmp    dl,0x14
c001df48:	75 04                	jne    c001df4e <IDE::detect()+0x28c>
c001df4a:	3c eb                	cmp    al,0xeb
c001df4c:	eb 07                	jmp    c001df55 <IDE::detect()+0x293>
c001df4e:	3c 96                	cmp    al,0x96
c001df50:	75 b1                	jne    c001df03 <IDE::detect()+0x241>
c001df52:	80 fa 69             	cmp    dl,0x69
c001df55:	75 ac                	jne    c001df03 <IDE::detect()+0x241>
c001df57:	68 a1 00 00 00       	push   0xa1
c001df5c:	6a 07                	push   0x7
c001df5e:	56                   	push   esi
c001df5f:	53                   	push   ebx
c001df60:	e8 31 f6 ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001df65:	5f                   	pop    edi
c001df66:	58                   	pop    eax
c001df67:	6a 00                	push   0x0
c001df69:	68 40 42 0f 00       	push   0xf4240
c001df6e:	e8 76 a3 ff ff       	call   c00182e9 <nanoSleep(unsigned long long)>
c001df73:	83 c4 10             	add    esp,0x10
c001df76:	b1 01                	mov    cl,0x1
c001df78:	e9 6b fe ff ff       	jmp    c001dde8 <IDE::detect()+0x126>
c001df7d:	81 c4 1c 02 00 00    	add    esp,0x21c
c001df83:	5b                   	pop    ebx
c001df84:	5e                   	pop    esi
c001df85:	5f                   	pop    edi
c001df86:	5d                   	pop    ebp
c001df87:	c3                   	ret    

c001df88 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001df88:	55                   	push   ebp
c001df89:	57                   	push   edi
c001df8a:	56                   	push   esi
c001df8b:	53                   	push   ebx
c001df8c:	83 ec 1c             	sub    esp,0x1c
c001df8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001df93:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001df97:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001df9b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001df9f:	88 c3                	mov    bl,al
c001dfa1:	84 c0                	test   al,al
c001dfa3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dfa7:	0f 84 81 00 00 00    	je     c001e02e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001dfad:	83 ec 0c             	sub    esp,0xc
c001dfb0:	68 8b 4e 02 c0       	push   0xc0024e8b
c001dfb5:	e8 04 eb fe ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001dfba:	83 c4 10             	add    esp,0x10
c001dfbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfc1:	3c 01                	cmp    al,0x1
c001dfc3:	74 63                	je     c001e028 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001dfc5:	3c 02                	cmp    al,0x2
c001dfc7:	75 53                	jne    c001e01c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001dfc9:	d1 e6                	shl    esi,1
c001dfcb:	09 ee                	or     esi,ebp
c001dfcd:	50                   	push   eax
c001dfce:	89 f0                	mov    eax,esi
c001dfd0:	6a 01                	push   0x1
c001dfd2:	0f b6 f0             	movzx  esi,al
c001dfd5:	c1 e6 06             	shl    esi,0x6
c001dfd8:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001dfe0:	50                   	push   eax
c001dfe1:	57                   	push   edi
c001dfe2:	e8 6f f6 ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001dfe7:	83 c4 10             	add    esp,0x10
c001dfea:	a8 01                	test   al,0x1
c001dfec:	74 02                	je     c001dff0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001dfee:	b3 07                	mov    bl,0x7
c001dff0:	a8 02                	test   al,0x2
c001dff2:	74 02                	je     c001dff6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001dff4:	b3 03                	mov    bl,0x3
c001dff6:	a8 04                	test   al,0x4
c001dff8:	74 02                	je     c001dffc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001dffa:	b3 14                	mov    bl,0x14
c001dffc:	a8 08                	test   al,0x8
c001dffe:	74 02                	je     c001e002 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001e000:	b3 03                	mov    bl,0x3
c001e002:	a8 10                	test   al,0x10
c001e004:	74 02                	je     c001e008 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001e006:	b3 15                	mov    bl,0x15
c001e008:	a8 20                	test   al,0x20
c001e00a:	74 02                	je     c001e00e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001e00c:	b3 03                	mov    bl,0x3
c001e00e:	a8 40                	test   al,0x40
c001e010:	74 02                	je     c001e014 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001e012:	b3 16                	mov    bl,0x16
c001e014:	84 c0                	test   al,al
c001e016:	79 16                	jns    c001e02e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e018:	b3 0d                	mov    bl,0xd
c001e01a:	eb 12                	jmp    c001e02e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e01c:	3c 03                	cmp    al,0x3
c001e01e:	74 0c                	je     c001e02c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001e020:	3c 04                	cmp    al,0x4
c001e022:	75 0a                	jne    c001e02e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e024:	b3 08                	mov    bl,0x8
c001e026:	eb 06                	jmp    c001e02e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e028:	b3 13                	mov    bl,0x13
c001e02a:	eb 02                	jmp    c001e02e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e02c:	b3 17                	mov    bl,0x17
c001e02e:	83 c4 1c             	add    esp,0x1c
c001e031:	88 d8                	mov    al,bl
c001e033:	5b                   	pop    ebx
c001e034:	5e                   	pop    esi
c001e035:	5f                   	pop    edi
c001e036:	5d                   	pop    ebp
c001e037:	c3                   	ret    

c001e038 <IDE::polling(unsigned char, unsigned int)>:
c001e038:	57                   	push   edi
c001e039:	56                   	push   esi
c001e03a:	53                   	push   ebx
c001e03b:	bb 04 00 00 00       	mov    ebx,0x4
c001e040:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e044:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e049:	52                   	push   edx
c001e04a:	6a 0c                	push   0xc
c001e04c:	56                   	push   esi
c001e04d:	57                   	push   edi
c001e04e:	e8 03 f6 ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001e053:	83 c4 10             	add    esp,0x10
c001e056:	4b                   	dec    ebx
c001e057:	75 f0                	jne    c001e049 <IDE::polling(unsigned char, unsigned int)+0x11>
c001e059:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e05e:	50                   	push   eax
c001e05f:	6a 0c                	push   0xc
c001e061:	56                   	push   esi
c001e062:	57                   	push   edi
c001e063:	e8 ee f5 ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001e068:	83 c4 10             	add    esp,0x10
c001e06b:	a8 01                	test   al,0x1
c001e06d:	75 17                	jne    c001e086 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e06f:	a8 20                	test   al,0x20
c001e071:	75 0f                	jne    c001e082 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e073:	4b                   	dec    ebx
c001e074:	74 10                	je     c001e086 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e076:	84 c0                	test   al,al
c001e078:	78 e4                	js     c001e05e <IDE::polling(unsigned char, unsigned int)+0x26>
c001e07a:	a8 08                	test   al,0x8
c001e07c:	74 e0                	je     c001e05e <IDE::polling(unsigned char, unsigned int)+0x26>
c001e07e:	31 c0                	xor    eax,eax
c001e080:	eb 06                	jmp    c001e088 <IDE::polling(unsigned char, unsigned int)+0x50>
c001e082:	b0 01                	mov    al,0x1
c001e084:	eb 02                	jmp    c001e088 <IDE::polling(unsigned char, unsigned int)+0x50>
c001e086:	b0 02                	mov    al,0x2
c001e088:	5b                   	pop    ebx
c001e089:	5e                   	pop    esi
c001e08a:	5f                   	pop    edi
c001e08b:	c3                   	ret    

c001e08c <SATABus::close(int, int, void*)>:
c001e08c:	31 c0                	xor    eax,eax
c001e08e:	c3                   	ret    
c001e08f:	90                   	nop

c001e090 <SATABus::detect()>:
c001e090:	c3                   	ret    
c001e091:	90                   	nop

c001e092 <SATABus::SATABus()>:
c001e092:	83 ec 0c             	sub    esp,0xc
c001e095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e099:	83 ec 08             	sub    esp,0x8
c001e09c:	68 c4 4e 02 c0       	push   0xc0024ec4
c001e0a1:	50                   	push   eax
c001e0a2:	e8 09 02 ff ff       	call   c000e2b0 <HardDiskController::HardDiskController(char const*)>
c001e0a7:	83 c4 10             	add    esp,0x10
c001e0aa:	ba 18 4f 02 c0       	mov    edx,0xc0024f18
c001e0af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0b3:	89 10                	mov    DWORD PTR [eax],edx
c001e0b5:	83 ec 0c             	sub    esp,0xc
c001e0b8:	6a 50                	push   0x50
c001e0ba:	e8 92 be fe ff       	call   c0009f51 <Phys::allocateContiguousPages(int)>
c001e0bf:	83 c4 10             	add    esp,0x10
c001e0c2:	89 c2                	mov    edx,eax
c001e0c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0c8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e0ce:	83 ec 0c             	sub    esp,0xc
c001e0d1:	6a 50                	push   0x50
c001e0d3:	e8 0b d6 fe ff       	call   c000b6e3 <Virt::allocateKernelVirtualPages(int)>
c001e0d8:	83 c4 10             	add    esp,0x10
c001e0db:	89 c2                	mov    edx,eax
c001e0dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0e1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e0e7:	a1 d0 63 02 c0       	mov    eax,ds:0xc00263d0
c001e0ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0f0:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e0f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0fa:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e100:	83 ec 0c             	sub    esp,0xc
c001e103:	6a 03                	push   0x3
c001e105:	6a 50                	push   0x50
c001e107:	51                   	push   ecx
c001e108:	52                   	push   edx
c001e109:	50                   	push   eax
c001e10a:	e8 71 df fe ff       	call   c000c080 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e10f:	83 c4 20             	add    esp,0x20
c001e112:	90                   	nop
c001e113:	83 c4 0c             	add    esp,0xc
c001e116:	c3                   	ret    
c001e117:	90                   	nop

c001e118 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e118:	83 ec 0c             	sub    esp,0xc
c001e11b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e11f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e122:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e125:	09 c2                	or     edx,eax
c001e127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e12b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e131:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e133:	31 c0                	xor    eax,eax
c001e135:	c1 e9 08             	shr    ecx,0x8
c001e138:	83 e1 0f             	and    ecx,0xf
c001e13b:	39 c8                	cmp    eax,ecx
c001e13d:	74 0a                	je     c001e149 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e13f:	f6 c2 01             	test   dl,0x1
c001e142:	74 18                	je     c001e15c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c001e144:	d1 ea                	shr    edx,1
c001e146:	40                   	inc    eax
c001e147:	eb f2                	jmp    c001e13b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c001e149:	83 ec 0c             	sub    esp,0xc
c001e14c:	68 e8 4e 02 c0       	push   0xc0024ee8
c001e151:	e8 27 63 ff ff       	call   c001447d <Krnl::panic(char const*)>
c001e156:	83 c4 10             	add    esp,0x10
c001e159:	83 c8 ff             	or     eax,0xffffffff
c001e15c:	83 c4 0c             	add    esp,0xc
c001e15f:	c3                   	ret    

c001e160 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e160:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e164:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e167:	89 c2                	mov    edx,eax
c001e169:	c1 ea 08             	shr    edx,0x8
c001e16c:	83 e2 0f             	and    edx,0xf
c001e16f:	fe ca                	dec    dl
c001e171:	75 31                	jne    c001e1a4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e173:	83 e0 0f             	and    eax,0xf
c001e176:	3c 03                	cmp    al,0x3
c001e178:	75 2a                	jne    c001e1a4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e17a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e17d:	b8 02 00 00 00       	mov    eax,0x2
c001e182:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e188:	74 1c                	je     c001e1a6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e18a:	b8 04 00 00 00       	mov    eax,0x4
c001e18f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e195:	74 0f                	je     c001e1a6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e197:	31 c0                	xor    eax,eax
c001e199:	83 fa 03             	cmp    edx,0x3
c001e19c:	0f 94 c0             	sete   al
c001e19f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e1a3:	c3                   	ret    
c001e1a4:	31 c0                	xor    eax,eax
c001e1a6:	c3                   	ret    
c001e1a7:	90                   	nop

c001e1a8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e1a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e1ac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1af:	0f ba e2 0f          	bt     edx,0xf
c001e1b3:	72 f7                	jb     c001e1ac <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e1b5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1b8:	83 ca 10             	or     edx,0x10
c001e1bb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e1be:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1c1:	83 ca 01             	or     edx,0x1
c001e1c4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e1c7:	c3                   	ret    

c001e1c8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e1c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e1cc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1cf:	83 e2 fe             	and    edx,0xfffffffe
c001e1d2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e1d5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1d8:	83 e2 ef             	and    edx,0xffffffef
c001e1db:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e1de:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1e1:	0f ba e2 0e          	bt     edx,0xe
c001e1e5:	72 f7                	jb     c001e1de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e1e7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1ea:	0f ba e2 0f          	bt     edx,0xf
c001e1ee:	72 ee                	jb     c001e1de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e1f0:	c3                   	ret    
c001e1f1:	90                   	nop

c001e1f2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e1f2:	55                   	push   ebp
c001e1f3:	57                   	push   edi
c001e1f4:	56                   	push   esi
c001e1f5:	53                   	push   ebx
c001e1f6:	83 ec 1c             	sub    esp,0x1c
c001e1f9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e1fd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e201:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e205:	53                   	push   ebx
c001e206:	89 fd                	mov    ebp,edi
c001e208:	56                   	push   esi
c001e209:	c1 e5 0a             	shl    ebp,0xa
c001e20c:	e8 b7 ff ff ff       	call   c001e1c8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e211:	83 ec 0c             	sub    esp,0xc
c001e214:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e21a:	01 e8                	add    eax,ebp
c001e21c:	89 03                	mov    DWORD PTR [ebx],eax
c001e21e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e220:	68 00 04 00 00       	push   0x400
c001e225:	6a 00                	push   0x0
c001e227:	50                   	push   eax
c001e228:	e8 23 25 fe ff       	call   c0000750 <memset>
c001e22d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001e233:	89 fa                	mov    edx,edi
c001e235:	01 e8                	add    eax,ebp
c001e237:	c1 e7 0d             	shl    edi,0xd
c001e23a:	89 03                	mov    DWORD PTR [ebx],eax
c001e23c:	c1 e2 08             	shl    edx,0x8
c001e23f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e246:	81 c2 00 80 00 00    	add    edx,0x8000
c001e24c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e250:	89 d0                	mov    eax,edx
c001e252:	83 c4 1c             	add    esp,0x1c
c001e255:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e25b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e25e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e261:	68 00 01 00 00       	push   0x100
c001e266:	6a 00                	push   0x0
c001e268:	50                   	push   eax
c001e269:	e8 e2 24 fe ff       	call   c0000750 <memset>
c001e26e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e272:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001e278:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001e27e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e282:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001e285:	83 c4 10             	add    esp,0x10
c001e288:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e28f:	31 ff                	xor    edi,edi
c001e291:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001e297:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001e29d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e2a1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e2a7:	83 c5 20             	add    ebp,0x20
c001e2aa:	01 f8                	add    eax,edi
c001e2ac:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e2af:	52                   	push   edx
c001e2b0:	68 00 01 00 00       	push   0x100
c001e2b5:	6a 00                	push   0x0
c001e2b7:	50                   	push   eax
c001e2b8:	e8 93 24 fe ff       	call   c0000750 <memset>
c001e2bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e2c1:	83 c4 10             	add    esp,0x10
c001e2c4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001e2ca:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e2d1:	01 f8                	add    eax,edi
c001e2d3:	81 c7 00 01 00 00    	add    edi,0x100
c001e2d9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e2dc:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001e2e2:	75 b3                	jne    c001e297 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001e2e4:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001e2e8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001e2ec:	83 c4 1c             	add    esp,0x1c
c001e2ef:	5b                   	pop    ebx
c001e2f0:	5e                   	pop    esi
c001e2f1:	5f                   	pop    edi
c001e2f2:	5d                   	pop    ebp
c001e2f3:	e9 b0 fe ff ff       	jmp    c001e1a8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001e2f8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e2f8:	55                   	push   ebp
c001e2f9:	57                   	push   edi
c001e2fa:	56                   	push   esi
c001e2fb:	53                   	push   ebx
c001e2fc:	31 db                	xor    ebx,ebx
c001e2fe:	83 ec 0c             	sub    esp,0xc
c001e301:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e305:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e309:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001e30c:	f7 c7 01 00 00 00    	test   edi,0x1
c001e312:	74 7a                	je     c001e38e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e314:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e318:	89 d8                	mov    eax,ebx
c001e31a:	c1 e0 07             	shl    eax,0x7
c001e31d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001e324:	55                   	push   ebp
c001e325:	56                   	push   esi
c001e326:	e8 35 fe ff ff       	call   c001e160 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e32b:	5a                   	pop    edx
c001e32c:	83 f8 01             	cmp    eax,0x1
c001e32f:	59                   	pop    ecx
c001e330:	75 21                	jne    c001e353 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001e332:	50                   	push   eax
c001e333:	53                   	push   ebx
c001e334:	55                   	push   ebp
c001e335:	56                   	push   esi
c001e336:	e8 b7 fe ff ff       	call   c001e1f2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e33b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001e342:	e8 16 b7 fe ff       	call   c0009a5d <malloc>
c001e347:	89 c5                	mov    ebp,eax
c001e349:	89 04 24             	mov    DWORD PTR [esp],eax
c001e34c:	e8 87 0d 00 00       	call   c001f0d8 <SATA::SATA()>
c001e351:	eb 24                	jmp    c001e377 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001e353:	83 f8 04             	cmp    eax,0x4
c001e356:	75 36                	jne    c001e38e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e358:	51                   	push   ecx
c001e359:	53                   	push   ebx
c001e35a:	55                   	push   ebp
c001e35b:	56                   	push   esi
c001e35c:	e8 91 fe ff ff       	call   c001e1f2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e361:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001e368:	e8 f0 b6 fe ff       	call   c0009a5d <malloc>
c001e36d:	89 c5                	mov    ebp,eax
c001e36f:	89 04 24             	mov    DWORD PTR [esp],eax
c001e372:	e8 d7 10 00 00       	call   c001f44e <SATAPI::SATAPI()>
c001e377:	58                   	pop    eax
c001e378:	5a                   	pop    edx
c001e379:	55                   	push   ebp
c001e37a:	56                   	push   esi
c001e37b:	e8 82 fb fe ff       	call   c000df02 <Device::addChild(Device*)>
c001e380:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001e383:	56                   	push   esi
c001e384:	6a 00                	push   0x0
c001e386:	53                   	push   ebx
c001e387:	55                   	push   ebp
c001e388:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001e38b:	83 c4 20             	add    esp,0x20
c001e38e:	d1 ef                	shr    edi,1
c001e390:	43                   	inc    ebx
c001e391:	83 fb 20             	cmp    ebx,0x20
c001e394:	0f 85 72 ff ff ff    	jne    c001e30c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001e39a:	83 c4 0c             	add    esp,0xc
c001e39d:	5b                   	pop    ebx
c001e39e:	5e                   	pop    esi
c001e39f:	5f                   	pop    edi
c001e3a0:	5d                   	pop    ebp
c001e3a1:	c3                   	ret    

c001e3a2 <SATABus::open(int, int, void*)>:
c001e3a2:	83 ec 14             	sub    esp,0x14
c001e3a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e3a9:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001e3af:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e3b5:	52                   	push   edx
c001e3b6:	50                   	push   eax
c001e3b7:	e8 3c ff ff ff       	call   c001e2f8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001e3bc:	31 c0                	xor    eax,eax
c001e3be:	83 c4 1c             	add    esp,0x1c
c001e3c1:	c3                   	ret    

c001e3c2 <ATA::close(int, int, void*)>:
c001e3c2:	83 ec 0c             	sub    esp,0xc
c001e3c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3c9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e3cf:	85 c0                	test   eax,eax
c001e3d1:	74 0c                	je     c001e3df <ATA::close(int, int, void*)+0x1d>
c001e3d3:	83 ec 0c             	sub    esp,0xc
c001e3d6:	8b 10                	mov    edx,DWORD PTR [eax]
c001e3d8:	50                   	push   eax
c001e3d9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e3dc:	83 c4 10             	add    esp,0x10
c001e3df:	31 c0                	xor    eax,eax
c001e3e1:	83 c4 0c             	add    esp,0xc
c001e3e4:	c3                   	ret    
c001e3e5:	90                   	nop

c001e3e6 <ATA::powerSaving(PowerSavingLevel)>:
c001e3e6:	c3                   	ret    
c001e3e7:	90                   	nop

c001e3e8 <ATA::ATA()>:
c001e3e8:	83 ec 0c             	sub    esp,0xc
c001e3eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ef:	83 ec 04             	sub    esp,0x4
c001e3f2:	68 00 02 00 00       	push   0x200
c001e3f7:	68 0d 50 02 c0       	push   0xc002500d
c001e3fc:	50                   	push   eax
c001e3fd:	e8 36 ff fe ff       	call   c000e338 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e402:	83 c4 10             	add    esp,0x10
c001e405:	ba 90 4f 02 c0       	mov    edx,0xc0024f90
c001e40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e40e:	89 10                	mov    DWORD PTR [eax],edx
c001e410:	90                   	nop
c001e411:	83 c4 0c             	add    esp,0xc
c001e414:	c3                   	ret    
c001e415:	90                   	nop

c001e416 <ATA::flush(bool)>:
c001e416:	53                   	push   ebx
c001e417:	83 ec 08             	sub    esp,0x8
c001e41a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001e41f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e423:	19 c0                	sbb    eax,eax
c001e425:	83 e0 fd             	and    eax,0xfffffffd
c001e428:	05 ea 00 00 00       	add    eax,0xea
c001e42d:	50                   	push   eax
c001e42e:	6a 07                	push   0x7
c001e430:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e437:	50                   	push   eax
c001e438:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e43e:	e8 53 f1 ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e443:	83 c4 0c             	add    esp,0xc
c001e446:	6a 00                	push   0x0
c001e448:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e44f:	50                   	push   eax
c001e450:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e456:	e8 dd fb ff ff       	call   c001e038 <IDE::polling(unsigned char, unsigned int)>
c001e45b:	83 c4 18             	add    esp,0x18
c001e45e:	5b                   	pop    ebx
c001e45f:	c3                   	ret    

c001e460 <ATA::readyForCommand()>:
c001e460:	56                   	push   esi
c001e461:	53                   	push   ebx
c001e462:	31 db                	xor    ebx,ebx
c001e464:	50                   	push   eax
c001e465:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e469:	50                   	push   eax
c001e46a:	6a 0c                	push   0xc
c001e46c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e473:	50                   	push   eax
c001e474:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e47a:	e8 d7 f1 ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001e47f:	83 c4 10             	add    esp,0x10
c001e482:	a8 88                	test   al,0x88
c001e484:	74 23                	je     c001e4a9 <ATA::readyForCommand()+0x49>
c001e486:	43                   	inc    ebx
c001e487:	83 fb 63             	cmp    ebx,0x63
c001e48a:	7e dd                	jle    c001e469 <ATA::readyForCommand()+0x9>
c001e48c:	51                   	push   ecx
c001e48d:	51                   	push   ecx
c001e48e:	6a 00                	push   0x0
c001e490:	68 40 42 0f 00       	push   0xf4240
c001e495:	e8 4f 9e ff ff       	call   c00182e9 <nanoSleep(unsigned long long)>
c001e49a:	83 c4 10             	add    esp,0x10
c001e49d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001e4a3:	75 c4                	jne    c001e469 <ATA::readyForCommand()+0x9>
c001e4a5:	31 c0                	xor    eax,eax
c001e4a7:	eb 02                	jmp    c001e4ab <ATA::readyForCommand()+0x4b>
c001e4a9:	b0 01                	mov    al,0x1
c001e4ab:	5a                   	pop    edx
c001e4ac:	5b                   	pop    ebx
c001e4ad:	5e                   	pop    esi
c001e4ae:	c3                   	ret    
c001e4af:	90                   	nop

c001e4b0 <ATA::access(unsigned long long, int, void*, bool)>:
c001e4b0:	55                   	push   ebp
c001e4b1:	57                   	push   edi
c001e4b2:	56                   	push   esi
c001e4b3:	53                   	push   ebx
c001e4b4:	83 ec 38             	sub    esp,0x38
c001e4b7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001e4bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e4bf:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e4c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e4c7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e4cb:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e4cf:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001e4d3:	68 3c 4f 02 c0       	push   0xc0024f3c
c001e4d8:	e8 e1 e5 fe ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001e4dd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e4e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e4e7:	83 c4 10             	add    esp,0x10
c001e4ea:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e4f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e4f4:	c1 e0 06             	shl    eax,0x6
c001e4f7:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001e4ff:	74 5d                	je     c001e55e <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001e501:	89 fa                	mov    edx,edi
c001e503:	89 f0                	mov    eax,esi
c001e505:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001e509:	c1 ea 1c             	shr    edx,0x1c
c001e50c:	89 d1                	mov    ecx,edx
c001e50e:	09 c1                	or     ecx,eax
c001e510:	74 25                	je     c001e537 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001e512:	31 ed                	xor    ebp,ebp
c001e514:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001e51b:	89 fa                	mov    edx,edi
c001e51d:	89 f0                	mov    eax,esi
c001e51f:	0f ad d0             	shrd   eax,edx,cl
c001e522:	d3 ea                	shr    edx,cl
c001e524:	f6 c1 20             	test   cl,0x20
c001e527:	74 02                	je     c001e52b <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001e529:	89 d0                	mov    eax,edx
c001e52b:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001e52f:	45                   	inc    ebp
c001e530:	83 fd 06             	cmp    ebp,0x6
c001e533:	75 df                	jne    c001e514 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001e535:	eb 76                	jmp    c001e5ad <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001e537:	89 f0                	mov    eax,esi
c001e539:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001e53e:	89 fa                	mov    edx,edi
c001e540:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e547:	0f ac d0 10          	shrd   eax,edx,0x10
c001e54b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e550:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e554:	c1 ee 18             	shr    esi,0x18
c001e557:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e55c:	eb 56                	jmp    c001e5b4 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e55e:	6a 00                	push   0x0
c001e560:	6a 3f                	push   0x3f
c001e562:	57                   	push   edi
c001e563:	56                   	push   esi
c001e564:	e8 9b 29 00 00       	call   c0020f04 <__umoddi3>
c001e569:	83 c4 10             	add    esp,0x10
c001e56c:	40                   	inc    eax
c001e56d:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001e571:	6a 00                	push   0x0
c001e573:	68 f0 03 00 00       	push   0x3f0
c001e578:	57                   	push   edi
c001e579:	56                   	push   esi
c001e57a:	e8 85 28 00 00       	call   c0020e04 <__udivdi3>
c001e57f:	83 c4 10             	add    esp,0x10
c001e582:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001e587:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e58e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e593:	6a 00                	push   0x0
c001e595:	6a 3f                	push   0x3f
c001e597:	57                   	push   edi
c001e598:	56                   	push   esi
c001e599:	e8 66 28 00 00       	call   c0020e04 <__udivdi3>
c001e59e:	83 c4 10             	add    esp,0x10
c001e5a1:	89 c6                	mov    esi,eax
c001e5a3:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e5a8:	83 e6 0f             	and    esi,0xf
c001e5ab:	eb 07                	jmp    c001e5b4 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e5ad:	31 f6                	xor    esi,esi
c001e5af:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001e5b4:	bf 01 00 00 00       	mov    edi,0x1
c001e5b9:	50                   	push   eax
c001e5ba:	6a 00                	push   0x0
c001e5bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e5c3:	50                   	push   eax
c001e5c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e5c8:	e8 d5 f1 ff ff       	call   c001d7a2 <IDE::enableIRQs(unsigned char, bool)>
c001e5cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e5d0:	e8 8b fe ff ff       	call   c001e460 <ATA::readyForCommand()>
c001e5d5:	83 c4 10             	add    esp,0x10
c001e5d8:	84 c0                	test   al,al
c001e5da:	0f 84 bc 02 00 00    	je     c001e89c <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e5e0:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e5e6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e5ec:	c1 e0 04             	shl    eax,0x4
c001e5ef:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001e5f6:	09 c6                	or     esi,eax
c001e5f8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e5fd:	75 05                	jne    c001e604 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001e5ff:	83 ce a0             	or     esi,0xffffffa0
c001e602:	eb 03                	jmp    c001e607 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001e604:	83 ce e0             	or     esi,0xffffffe0
c001e607:	89 f0                	mov    eax,esi
c001e609:	0f b6 f0             	movzx  esi,al
c001e60c:	56                   	push   esi
c001e60d:	6a 06                	push   0x6
c001e60f:	51                   	push   ecx
c001e610:	52                   	push   edx
c001e611:	e8 80 ef ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e616:	83 c4 10             	add    esp,0x10
c001e619:	6a 00                	push   0x0
c001e61b:	6a 01                	push   0x1
c001e61d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e624:	50                   	push   eax
c001e625:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e62b:	e8 66 ef ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e630:	83 c4 10             	add    esp,0x10
c001e633:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e638:	75 6e                	jne    c001e6a8 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001e63a:	6a 00                	push   0x0
c001e63c:	6a 08                	push   0x8
c001e63e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e645:	50                   	push   eax
c001e646:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e64c:	e8 45 ef ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e651:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001e656:	50                   	push   eax
c001e657:	6a 09                	push   0x9
c001e659:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e660:	50                   	push   eax
c001e661:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e667:	e8 2a ef ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e66c:	83 c4 20             	add    esp,0x20
c001e66f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e674:	50                   	push   eax
c001e675:	6a 0a                	push   0xa
c001e677:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e67e:	50                   	push   eax
c001e67f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e685:	e8 0c ef ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e68a:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001e68f:	50                   	push   eax
c001e690:	6a 0b                	push   0xb
c001e692:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e699:	50                   	push   eax
c001e69a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e6a0:	e8 f1 ee ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6a5:	83 c4 20             	add    esp,0x20
c001e6a8:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001e6ad:	50                   	push   eax
c001e6ae:	6a 02                	push   0x2
c001e6b0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e6b7:	50                   	push   eax
c001e6b8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e6be:	e8 d3 ee ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6c3:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001e6c8:	50                   	push   eax
c001e6c9:	6a 03                	push   0x3
c001e6cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e6d2:	50                   	push   eax
c001e6d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e6d9:	e8 b8 ee ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6de:	83 c4 20             	add    esp,0x20
c001e6e1:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001e6e6:	50                   	push   eax
c001e6e7:	6a 04                	push   0x4
c001e6e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e6f0:	50                   	push   eax
c001e6f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e6f7:	e8 9a ee ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6fc:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e701:	50                   	push   eax
c001e702:	6a 05                	push   0x5
c001e704:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e70b:	50                   	push   eax
c001e70c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e712:	e8 7f ee ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e717:	83 c4 20             	add    esp,0x20
c001e71a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e71f:	0f 94 c0             	sete   al
c001e722:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e727:	74 09                	je     c001e732 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001e729:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001e730:	eb 07                	jmp    c001e739 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001e732:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001e739:	0f b6 c0             	movzx  eax,al
c001e73c:	50                   	push   eax
c001e73d:	6a 07                	push   0x7
c001e73f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e746:	50                   	push   eax
c001e747:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e74d:	e8 44 ee ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e752:	c7 04 24 49 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f49
c001e759:	e8 60 e3 fe ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001e75e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001e762:	83 c4 10             	add    esp,0x10
c001e765:	85 f6                	test   esi,esi
c001e767:	0f 84 f7 00 00 00    	je     c001e864 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001e76d:	83 ec 0c             	sub    esp,0xc
c001e770:	68 4c 4f 02 c0       	push   0xc0024f4c
c001e775:	e8 44 e3 fe ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001e77a:	83 c4 0c             	add    esp,0xc
c001e77d:	6a 01                	push   0x1
c001e77f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e786:	50                   	push   eax
c001e787:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e78d:	e8 a6 f8 ff ff       	call   c001e038 <IDE::polling(unsigned char, unsigned int)>
c001e792:	c7 04 24 4f 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f4f
c001e799:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e79d:	e8 1c e3 fe ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001e7a2:	83 c4 10             	add    esp,0x10
c001e7a5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e7a9:	84 c0                	test   al,al
c001e7ab:	74 2b                	je     c001e7d8 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001e7ad:	0f b6 f8             	movzx  edi,al
c001e7b0:	57                   	push   edi
c001e7b1:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001e7b8:	50                   	push   eax
c001e7b9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7c0:	50                   	push   eax
c001e7c1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7c7:	e8 bc f7 ff ff       	call   c001df88 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e7cc:	c7 04 24 52 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f52
c001e7d3:	e9 bc 00 00 00       	jmp    c001e894 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001e7d8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e7dd:	74 50                	je     c001e82f <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001e7df:	83 ec 0c             	sub    esp,0xc
c001e7e2:	31 ed                	xor    ebp,ebp
c001e7e4:	68 5d 4f 02 c0       	push   0xc0024f5d
c001e7e9:	e8 d0 e2 fe ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001e7ee:	83 c4 10             	add    esp,0x10
c001e7f1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e7f5:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001e7f9:	50                   	push   eax
c001e7fa:	50                   	push   eax
c001e7fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e802:	50                   	push   eax
c001e803:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e809:	e8 76 ed ff ff       	call   c001d584 <IDE::getBase(unsigned char)>
c001e80e:	89 c2                	mov    edx,eax
c001e810:	89 f8                	mov    eax,edi
c001e812:	66 ef                	out    dx,ax
c001e814:	45                   	inc    ebp
c001e815:	83 c4 10             	add    esp,0x10
c001e818:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001e81e:	75 d1                	jne    c001e7f1 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001e820:	83 ec 0c             	sub    esp,0xc
c001e823:	68 60 4f 02 c0       	push   0xc0024f60
c001e828:	e8 91 e2 fe ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001e82d:	eb 24                	jmp    c001e853 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001e82f:	51                   	push   ecx
c001e830:	51                   	push   ecx
c001e831:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e838:	50                   	push   eax
c001e839:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e83f:	e8 40 ed ff ff       	call   c001d584 <IDE::getBase(unsigned char)>
c001e844:	b9 00 01 00 00       	mov    ecx,0x100
c001e849:	89 c2                	mov    edx,eax
c001e84b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001e84f:	fc                   	cld    
c001e850:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001e853:	83 c4 10             	add    esp,0x10
c001e856:	4e                   	dec    esi
c001e857:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001e85f:	e9 01 ff ff ff       	jmp    c001e765 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001e864:	31 ff                	xor    edi,edi
c001e866:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e86b:	74 2f                	je     c001e89c <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e86d:	83 ec 0c             	sub    esp,0xc
c001e870:	68 63 4f 02 c0       	push   0xc0024f63
c001e875:	e8 44 e2 fe ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001e87a:	58                   	pop    eax
c001e87b:	31 c0                	xor    eax,eax
c001e87d:	5a                   	pop    edx
c001e87e:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001e883:	0f 94 c0             	sete   al
c001e886:	50                   	push   eax
c001e887:	53                   	push   ebx
c001e888:	e8 89 fb ff ff       	call   c001e416 <ATA::flush(bool)>
c001e88d:	c7 04 24 66 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f66
c001e894:	e8 25 e2 fe ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001e899:	83 c4 10             	add    esp,0x10
c001e89c:	83 c4 2c             	add    esp,0x2c
c001e89f:	89 f8                	mov    eax,edi
c001e8a1:	5b                   	pop    ebx
c001e8a2:	5e                   	pop    esi
c001e8a3:	5f                   	pop    edi
c001e8a4:	5d                   	pop    ebp
c001e8a5:	c3                   	ret    

c001e8a6 <ATA::read(unsigned long long, int, void*)>:
c001e8a6:	57                   	push   edi
c001e8a7:	b8 04 00 00 00       	mov    eax,0x4
c001e8ac:	56                   	push   esi
c001e8ad:	53                   	push   ebx
c001e8ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e8b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e8b6:	8d 7a ff             	lea    edi,[edx-0x1]
c001e8b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e8bd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e8c1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e8c7:	77 25                	ja     c001e8ee <ATA::read(unsigned long long, int, void*)+0x48>
c001e8c9:	b8 06 00 00 00       	mov    eax,0x6
c001e8ce:	85 f6                	test   esi,esi
c001e8d0:	74 1c                	je     c001e8ee <ATA::read(unsigned long long, int, void*)+0x48>
c001e8d2:	50                   	push   eax
c001e8d3:	50                   	push   eax
c001e8d4:	6a 00                	push   0x0
c001e8d6:	56                   	push   esi
c001e8d7:	52                   	push   edx
c001e8d8:	53                   	push   ebx
c001e8d9:	51                   	push   ecx
c001e8da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e8de:	e8 cd fb ff ff       	call   c001e4b0 <ATA::access(unsigned long long, int, void*, bool)>
c001e8e3:	83 c4 20             	add    esp,0x20
c001e8e6:	85 c0                	test   eax,eax
c001e8e8:	0f 95 c0             	setne  al
c001e8eb:	0f b6 c0             	movzx  eax,al
c001e8ee:	5b                   	pop    ebx
c001e8ef:	5e                   	pop    esi
c001e8f0:	5f                   	pop    edi
c001e8f1:	c3                   	ret    

c001e8f2 <ATA::write(unsigned long long, int, void*)>:
c001e8f2:	55                   	push   ebp
c001e8f3:	57                   	push   edi
c001e8f4:	56                   	push   esi
c001e8f5:	53                   	push   ebx
c001e8f6:	83 ec 18             	sub    esp,0x18
c001e8f9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e8fd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e901:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001e905:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001e909:	68 69 4f 02 c0       	push   0xc0024f69
c001e90e:	e8 ab e1 fe ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001e913:	8d 53 ff             	lea    edx,[ebx-0x1]
c001e916:	83 c4 10             	add    esp,0x10
c001e919:	b8 04 00 00 00       	mov    eax,0x4
c001e91e:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001e924:	77 25                	ja     c001e94b <ATA::write(unsigned long long, int, void*)+0x59>
c001e926:	b8 06 00 00 00       	mov    eax,0x6
c001e92b:	85 f6                	test   esi,esi
c001e92d:	74 1c                	je     c001e94b <ATA::write(unsigned long long, int, void*)+0x59>
c001e92f:	50                   	push   eax
c001e930:	50                   	push   eax
c001e931:	6a 01                	push   0x1
c001e933:	56                   	push   esi
c001e934:	53                   	push   ebx
c001e935:	55                   	push   ebp
c001e936:	57                   	push   edi
c001e937:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e93b:	e8 70 fb ff ff       	call   c001e4b0 <ATA::access(unsigned long long, int, void*, bool)>
c001e940:	83 c4 20             	add    esp,0x20
c001e943:	85 c0                	test   eax,eax
c001e945:	0f 95 c0             	setne  al
c001e948:	0f b6 c0             	movzx  eax,al
c001e94b:	83 c4 0c             	add    esp,0xc
c001e94e:	5b                   	pop    ebx
c001e94f:	5e                   	pop    esi
c001e950:	5f                   	pop    edi
c001e951:	5d                   	pop    ebp
c001e952:	c3                   	ret    
c001e953:	90                   	nop

c001e954 <ATA::detectCHS()>:
c001e954:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e958:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001e95e:	c1 e0 06             	shl    eax,0x6
c001e961:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001e967:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001e971:	c7 44 24 04 75 4f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024f75
c001e979:	e9 ff 5a ff ff       	jmp    c001447d <Krnl::panic(char const*)>

c001e97e <ATA::open(int, int, void*)>:
c001e97e:	53                   	push   ebx
c001e97f:	83 ec 08             	sub    esp,0x8
c001e982:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e986:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e98a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e98e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e994:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e99a:	c1 e0 06             	shl    eax,0x6
c001e99d:	01 d0                	add    eax,edx
c001e99f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001e9a6:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001e9ac:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001e9b3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e9bd:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001e9c3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e9ca:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001e9d1:	75 0c                	jne    c001e9df <ATA::open(int, int, void*)+0x61>
c001e9d3:	83 ec 0c             	sub    esp,0xc
c001e9d6:	53                   	push   ebx
c001e9d7:	e8 78 ff ff ff       	call   c001e954 <ATA::detectCHS()>
c001e9dc:	83 c4 10             	add    esp,0x10
c001e9df:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e9e5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e9eb:	c1 e0 06             	shl    eax,0x6
c001e9ee:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001e9f5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e9ff:	d1 e8                	shr    eax,1
c001ea01:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ea07:	6a 04                	push   0x4
c001ea09:	6a 0c                	push   0xc
c001ea0b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ea12:	50                   	push   eax
c001ea13:	52                   	push   edx
c001ea14:	e8 7d eb ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea19:	90                   	nop
c001ea1a:	90                   	nop
c001ea1b:	6a 00                	push   0x0
c001ea1d:	6a 0c                	push   0xc
c001ea1f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ea26:	50                   	push   eax
c001ea27:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ea2d:	e8 64 eb ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea32:	83 c4 14             	add    esp,0x14
c001ea35:	53                   	push   ebx
c001ea36:	e8 65 f9 fe ff       	call   c000e3a0 <PhysicalDisk::startCache()>
c001ea3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ea3e:	e8 e5 1b ff ff       	call   c0010628 <createPartitionsForDisk(PhysicalDisk*)>
c001ea43:	31 c0                	xor    eax,eax
c001ea45:	83 c4 18             	add    esp,0x18
c001ea48:	5b                   	pop    ebx
c001ea49:	c3                   	ret    

c001ea4a <ATAPI::write(unsigned long long, int, void*)>:
c001ea4a:	b8 03 00 00 00       	mov    eax,0x3
c001ea4f:	c3                   	ret    

c001ea50 <ATAPI::close(int, int, void*)>:
c001ea50:	83 ec 0c             	sub    esp,0xc
c001ea53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea57:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ea5d:	85 c0                	test   eax,eax
c001ea5f:	74 0c                	je     c001ea6d <ATAPI::close(int, int, void*)+0x1d>
c001ea61:	83 ec 0c             	sub    esp,0xc
c001ea64:	8b 10                	mov    edx,DWORD PTR [eax]
c001ea66:	50                   	push   eax
c001ea67:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ea6a:	83 c4 10             	add    esp,0x10
c001ea6d:	31 c0                	xor    eax,eax
c001ea6f:	83 c4 0c             	add    esp,0xc
c001ea72:	c3                   	ret    
c001ea73:	90                   	nop

c001ea74 <ATAPI::ATAPI()>:
c001ea74:	83 ec 0c             	sub    esp,0xc
c001ea77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea7b:	83 ec 04             	sub    esp,0x4
c001ea7e:	68 00 08 00 00       	push   0x800
c001ea83:	68 ad 50 02 c0       	push   0xc00250ad
c001ea88:	50                   	push   eax
c001ea89:	e8 aa f8 fe ff       	call   c000e338 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ea8e:	83 c4 10             	add    esp,0x10
c001ea91:	ba c8 4f 02 c0       	mov    edx,0xc0024fc8
c001ea96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea9a:	89 10                	mov    DWORD PTR [eax],edx
c001ea9c:	90                   	nop
c001ea9d:	83 c4 0c             	add    esp,0xc
c001eaa0:	c3                   	ret    
c001eaa1:	90                   	nop

c001eaa2 <ATAPI::readyForCommand()>:
c001eaa2:	56                   	push   esi
c001eaa3:	53                   	push   ebx
c001eaa4:	31 db                	xor    ebx,ebx
c001eaa6:	50                   	push   eax
c001eaa7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eaab:	50                   	push   eax
c001eaac:	6a 0c                	push   0xc
c001eaae:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001eab5:	50                   	push   eax
c001eab6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001eabc:	e8 95 eb ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001eac1:	83 c4 10             	add    esp,0x10
c001eac4:	a8 88                	test   al,0x88
c001eac6:	74 23                	je     c001eaeb <ATAPI::readyForCommand()+0x49>
c001eac8:	43                   	inc    ebx
c001eac9:	83 fb 63             	cmp    ebx,0x63
c001eacc:	7e dd                	jle    c001eaab <ATAPI::readyForCommand()+0x9>
c001eace:	51                   	push   ecx
c001eacf:	51                   	push   ecx
c001ead0:	6a 00                	push   0x0
c001ead2:	68 40 42 0f 00       	push   0xf4240
c001ead7:	e8 0d 98 ff ff       	call   c00182e9 <nanoSleep(unsigned long long)>
c001eadc:	83 c4 10             	add    esp,0x10
c001eadf:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001eae5:	75 c4                	jne    c001eaab <ATAPI::readyForCommand()+0x9>
c001eae7:	31 c0                	xor    eax,eax
c001eae9:	eb 02                	jmp    c001eaed <ATAPI::readyForCommand()+0x4b>
c001eaeb:	b0 01                	mov    al,0x1
c001eaed:	5a                   	pop    edx
c001eaee:	5b                   	pop    ebx
c001eaef:	5e                   	pop    esi
c001eaf0:	c3                   	ret    
c001eaf1:	90                   	nop

c001eaf2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001eaf2:	55                   	push   ebp
c001eaf3:	57                   	push   edi
c001eaf4:	56                   	push   esi
c001eaf5:	53                   	push   ebx
c001eaf6:	83 ec 20             	sub    esp,0x20
c001eaf9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001eafd:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001eb01:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001eb05:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001eb09:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001eb0d:	6a 01                	push   0x1
c001eb0f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eb16:	50                   	push   eax
c001eb17:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eb1d:	e8 80 ec ff ff       	call   c001d7a2 <IDE::enableIRQs(unsigned char, bool)>
c001eb22:	5e                   	pop    esi
c001eb23:	58                   	pop    eax
c001eb24:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eb2b:	50                   	push   eax
c001eb2c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eb32:	e8 39 ea ff ff       	call   c001d570 <IDE::prepareInterrupt(unsigned char)>
c001eb37:	89 3c 24             	mov    DWORD PTR [esp],edi
c001eb3a:	e8 63 ff ff ff       	call   c001eaa2 <ATAPI::readyForCommand()>
c001eb3f:	83 c4 10             	add    esp,0x10
c001eb42:	84 c0                	test   al,al
c001eb44:	75 0a                	jne    c001eb50 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001eb46:	bb 01 00 00 00       	mov    ebx,0x1
c001eb4b:	e9 57 02 00 00       	jmp    c001eda7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001eb50:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001eb56:	c1 e0 04             	shl    eax,0x4
c001eb59:	0f b6 c0             	movzx  eax,al
c001eb5c:	50                   	push   eax
c001eb5d:	6a 06                	push   0x6
c001eb5f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eb66:	50                   	push   eax
c001eb67:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eb6d:	e8 24 ea ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb72:	6a 00                	push   0x0
c001eb74:	6a 01                	push   0x1
c001eb76:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eb7d:	50                   	push   eax
c001eb7e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eb84:	e8 0d ea ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb89:	83 c4 20             	add    esp,0x20
c001eb8c:	0f b6 c3             	movzx  eax,bl
c001eb8f:	0f b6 df             	movzx  ebx,bh
c001eb92:	50                   	push   eax
c001eb93:	6a 04                	push   0x4
c001eb95:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eb9c:	50                   	push   eax
c001eb9d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eba3:	e8 ee e9 ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eba8:	53                   	push   ebx
c001eba9:	6a 05                	push   0x5
c001ebab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ebb2:	50                   	push   eax
c001ebb3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ebb9:	e8 d8 e9 ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebbe:	83 c4 20             	add    esp,0x20
c001ebc1:	68 a0 00 00 00       	push   0xa0
c001ebc6:	6a 07                	push   0x7
c001ebc8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ebcf:	50                   	push   eax
c001ebd0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ebd6:	e8 bb e9 ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebdb:	83 c4 0c             	add    esp,0xc
c001ebde:	6a 01                	push   0x1
c001ebe0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ebe7:	50                   	push   eax
c001ebe8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ebee:	e8 45 f4 ff ff       	call   c001e038 <IDE::polling(unsigned char, unsigned int)>
c001ebf3:	83 c4 10             	add    esp,0x10
c001ebf6:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001ebfc:	84 c0                	test   al,al
c001ebfe:	74 23                	je     c001ec23 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ec00:	0f b6 d8             	movzx  ebx,al
c001ec03:	0f b6 d2             	movzx  edx,dl
c001ec06:	53                   	push   ebx
c001ec07:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ec0e:	50                   	push   eax
c001ec0f:	52                   	push   edx
c001ec10:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec16:	e8 6d f3 ff ff       	call   c001df88 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ec1b:	83 c4 10             	add    esp,0x10
c001ec1e:	e9 84 01 00 00       	jmp    c001eda7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ec23:	0f b6 d2             	movzx  edx,dl
c001ec26:	53                   	push   ebx
c001ec27:	53                   	push   ebx
c001ec28:	52                   	push   edx
c001ec29:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec2f:	e8 50 e9 ff ff       	call   c001d584 <IDE::getBase(unsigned char)>
c001ec34:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ec38:	b9 06 00 00 00       	mov    ecx,0x6
c001ec3d:	89 c2                	mov    edx,eax
c001ec3f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ec42:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ec46:	83 c4 10             	add    esp,0x10
c001ec49:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ec4f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ec56:	85 db                	test   ebx,ebx
c001ec58:	0f 84 ec 00 00 00    	je     c001ed4a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001ec5e:	51                   	push   ecx
c001ec5f:	51                   	push   ecx
c001ec60:	52                   	push   edx
c001ec61:	50                   	push   eax
c001ec62:	e8 9d ea ff ff       	call   c001d704 <IDE::waitInterrupt(unsigned char)>
c001ec67:	83 c4 10             	add    esp,0x10
c001ec6a:	84 c0                	test   al,al
c001ec6c:	0f 84 d4 fe ff ff    	je     c001eb46 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ec72:	56                   	push   esi
c001ec73:	56                   	push   esi
c001ec74:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec7b:	50                   	push   eax
c001ec7c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec82:	e8 e9 e8 ff ff       	call   c001d570 <IDE::prepareInterrupt(unsigned char)>
c001ec87:	83 c4 0c             	add    esp,0xc
c001ec8a:	6a 04                	push   0x4
c001ec8c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec93:	50                   	push   eax
c001ec94:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec9a:	e8 b7 e9 ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001ec9f:	83 c4 0c             	add    esp,0xc
c001eca2:	89 c6                	mov    esi,eax
c001eca4:	6a 05                	push   0x5
c001eca6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecad:	50                   	push   eax
c001ecae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecb4:	e8 9d e9 ff ff       	call   c001d656 <IDE::read(unsigned char, unsigned char)>
c001ecb9:	89 f1                	mov    ecx,esi
c001ecbb:	0f b6 c0             	movzx  eax,al
c001ecbe:	0f b6 f1             	movzx  esi,cl
c001ecc1:	c1 e0 08             	shl    eax,0x8
c001ecc4:	09 c6                	or     esi,eax
c001ecc6:	d1 fe                	sar    esi,1
c001ecc8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001eccc:	83 c4 10             	add    esp,0x10
c001eccf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ecd4:	74 41                	je     c001ed17 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ecd6:	31 c9                	xor    ecx,ecx
c001ecd8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ecde:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ece5:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ece9:	75 0a                	jne    c001ecf5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001eceb:	01 c9                	add    ecx,ecx
c001eced:	01 cd                	add    ebp,ecx
c001ecef:	4b                   	dec    ebx
c001ecf0:	e9 54 ff ff ff       	jmp    c001ec49 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ecf5:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ecfa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ecfe:	51                   	push   ecx
c001ecff:	51                   	push   ecx
c001ed00:	52                   	push   edx
c001ed01:	50                   	push   eax
c001ed02:	e8 7d e8 ff ff       	call   c001d584 <IDE::getBase(unsigned char)>
c001ed07:	89 c2                	mov    edx,eax
c001ed09:	89 f0                	mov    eax,esi
c001ed0b:	66 ef                	out    dx,ax
c001ed0d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ed11:	83 c4 10             	add    esp,0x10
c001ed14:	41                   	inc    ecx
c001ed15:	eb c1                	jmp    c001ecd8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001ed17:	31 f6                	xor    esi,esi
c001ed19:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ed1f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ed26:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001ed2a:	75 06                	jne    c001ed32 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001ed2c:	01 f6                	add    esi,esi
c001ed2e:	01 f5                	add    ebp,esi
c001ed30:	eb bd                	jmp    c001ecef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001ed32:	51                   	push   ecx
c001ed33:	51                   	push   ecx
c001ed34:	52                   	push   edx
c001ed35:	50                   	push   eax
c001ed36:	e8 49 e8 ff ff       	call   c001d584 <IDE::getBase(unsigned char)>
c001ed3b:	89 c2                	mov    edx,eax
c001ed3d:	66 ed                	in     ax,dx
c001ed3f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001ed44:	83 c4 10             	add    esp,0x10
c001ed47:	46                   	inc    esi
c001ed48:	eb cf                	jmp    c001ed19 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001ed4a:	51                   	push   ecx
c001ed4b:	51                   	push   ecx
c001ed4c:	52                   	push   edx
c001ed4d:	50                   	push   eax
c001ed4e:	e8 b1 e9 ff ff       	call   c001d704 <IDE::waitInterrupt(unsigned char)>
c001ed53:	83 c4 10             	add    esp,0x10
c001ed56:	84 c0                	test   al,al
c001ed58:	0f 84 e8 fd ff ff    	je     c001eb46 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ed5e:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ed63:	52                   	push   edx
c001ed64:	52                   	push   edx
c001ed65:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed6c:	50                   	push   eax
c001ed6d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed73:	e8 f8 e7 ff ff       	call   c001d570 <IDE::prepareInterrupt(unsigned char)>
c001ed78:	83 c4 10             	add    esp,0x10
c001ed7b:	50                   	push   eax
c001ed7c:	50                   	push   eax
c001ed7d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed84:	50                   	push   eax
c001ed85:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed8b:	e8 f4 e7 ff ff       	call   c001d584 <IDE::getBase(unsigned char)>
c001ed90:	8d 50 07             	lea    edx,[eax+0x7]
c001ed93:	ec                   	in     al,dx
c001ed94:	83 c4 10             	add    esp,0x10
c001ed97:	a8 88                	test   al,0x88
c001ed99:	74 0a                	je     c001eda5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001ed9b:	4b                   	dec    ebx
c001ed9c:	75 dd                	jne    c001ed7b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001ed9e:	bb 02 00 00 00       	mov    ebx,0x2
c001eda3:	eb 02                	jmp    c001eda7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001eda5:	31 db                	xor    ebx,ebx
c001eda7:	83 c4 1c             	add    esp,0x1c
c001edaa:	89 d8                	mov    eax,ebx
c001edac:	5b                   	pop    ebx
c001edad:	5e                   	pop    esi
c001edae:	5f                   	pop    edi
c001edaf:	5d                   	pop    ebp
c001edb0:	c3                   	ret    
c001edb1:	90                   	nop

c001edb2 <ATAPI::diskRemoved()>:
c001edb2:	83 ec 18             	sub    esp,0x18
c001edb5:	68 b9 50 02 c0       	push   0xc00250b9
c001edba:	e8 ff dc fe ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001edbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edc3:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001edca:	83 c4 1c             	add    esp,0x1c
c001edcd:	c3                   	ret    

c001edce <ATAPI::eject()>:
c001edce:	57                   	push   edi
c001edcf:	b9 03 00 00 00       	mov    ecx,0x3
c001edd4:	53                   	push   ebx
c001edd5:	83 ec 14             	sub    esp,0x14
c001edd8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001eddc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ede0:	fc                   	cld    
c001ede1:	31 c0                	xor    eax,eax
c001ede3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ede5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001edea:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001edef:	50                   	push   eax
c001edf0:	50                   	push   eax
c001edf1:	6a 00                	push   0x0
c001edf3:	6a 00                	push   0x0
c001edf5:	6a 00                	push   0x0
c001edf7:	6a 02                	push   0x2
c001edf9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001edfd:	50                   	push   eax
c001edfe:	53                   	push   ebx
c001edff:	e8 ee fc ff ff       	call   c001eaf2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ee04:	83 c4 14             	add    esp,0x14
c001ee07:	53                   	push   ebx
c001ee08:	e8 a5 ff ff ff       	call   c001edb2 <ATAPI::diskRemoved()>
c001ee0d:	83 c4 24             	add    esp,0x24
c001ee10:	31 c0                	xor    eax,eax
c001ee12:	5b                   	pop    ebx
c001ee13:	5f                   	pop    edi
c001ee14:	c3                   	ret    
c001ee15:	90                   	nop

c001ee16 <ATAPI::diskInserted()>:
c001ee16:	53                   	push   ebx
c001ee17:	83 ec 14             	sub    esp,0x14
c001ee1a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ee1e:	68 d0 50 02 c0       	push   0xc00250d0
c001ee23:	e8 96 dc fe ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001ee28:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001ee2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ee32:	e8 69 f5 fe ff       	call   c000e3a0 <PhysicalDisk::startCache()>
c001ee37:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001ee3b:	83 c4 18             	add    esp,0x18
c001ee3e:	5b                   	pop    ebx
c001ee3f:	e9 e4 17 ff ff       	jmp    c0010628 <createPartitionsForDisk(PhysicalDisk*)>

c001ee44 <ATAPI::detectMedia()>:
c001ee44:	56                   	push   esi
c001ee45:	53                   	push   ebx
c001ee46:	83 ec 28             	sub    esp,0x28
c001ee49:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ee4d:	6a 0c                	push   0xc
c001ee4f:	6a 00                	push   0x0
c001ee51:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ee55:	56                   	push   esi
c001ee56:	e8 f5 18 fe ff       	call   c0000750 <memset>
c001ee5b:	58                   	pop    eax
c001ee5c:	5a                   	pop    edx
c001ee5d:	6a 00                	push   0x0
c001ee5f:	6a 00                	push   0x0
c001ee61:	6a 00                	push   0x0
c001ee63:	6a 00                	push   0x0
c001ee65:	56                   	push   esi
c001ee66:	53                   	push   ebx
c001ee67:	e8 86 fc ff ff       	call   c001eaf2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ee6c:	83 c4 1c             	add    esp,0x1c
c001ee6f:	6a 0c                	push   0xc
c001ee71:	6a 00                	push   0x0
c001ee73:	56                   	push   esi
c001ee74:	e8 d7 18 fe ff       	call   c0000750 <memset>
c001ee79:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001ee7e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001ee83:	59                   	pop    ecx
c001ee84:	58                   	pop    eax
c001ee85:	6a 01                	push   0x1
c001ee87:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ee8b:	50                   	push   eax
c001ee8c:	6a 00                	push   0x0
c001ee8e:	6a 12                	push   0x12
c001ee90:	56                   	push   esi
c001ee91:	53                   	push   ebx
c001ee92:	e8 5b fc ff ff       	call   c001eaf2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ee97:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001ee9b:	83 c4 20             	add    esp,0x20
c001ee9e:	83 e0 7f             	and    eax,0x7f
c001eea1:	3c 70                	cmp    al,0x70
c001eea3:	74 15                	je     c001eeba <ATAPI::detectMedia()+0x76>
c001eea5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001eeac:	75 0c                	jne    c001eeba <ATAPI::detectMedia()+0x76>
c001eeae:	83 ec 0c             	sub    esp,0xc
c001eeb1:	53                   	push   ebx
c001eeb2:	e8 5f ff ff ff       	call   c001ee16 <ATAPI::diskInserted()>
c001eeb7:	83 c4 10             	add    esp,0x10
c001eeba:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001eebe:	83 e0 0f             	and    eax,0xf
c001eec1:	3c 02                	cmp    al,0x2
c001eec3:	75 1b                	jne    c001eee0 <ATAPI::detectMedia()+0x9c>
c001eec5:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001eeca:	75 2d                	jne    c001eef9 <ATAPI::detectMedia()+0xb5>
c001eecc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001eed3:	74 24                	je     c001eef9 <ATAPI::detectMedia()+0xb5>
c001eed5:	83 ec 0c             	sub    esp,0xc
c001eed8:	53                   	push   ebx
c001eed9:	e8 d4 fe ff ff       	call   c001edb2 <ATAPI::diskRemoved()>
c001eede:	eb 16                	jmp    c001eef6 <ATAPI::detectMedia()+0xb2>
c001eee0:	84 c0                	test   al,al
c001eee2:	75 15                	jne    c001eef9 <ATAPI::detectMedia()+0xb5>
c001eee4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001eeeb:	75 0c                	jne    c001eef9 <ATAPI::detectMedia()+0xb5>
c001eeed:	83 ec 0c             	sub    esp,0xc
c001eef0:	53                   	push   ebx
c001eef1:	e8 20 ff ff ff       	call   c001ee16 <ATAPI::diskInserted()>
c001eef6:	83 c4 10             	add    esp,0x10
c001eef9:	83 c4 24             	add    esp,0x24
c001eefc:	5b                   	pop    ebx
c001eefd:	5e                   	pop    esi
c001eefe:	c3                   	ret    
c001eeff:	90                   	nop

c001ef00 <ATAPI::open(int, int, void*)>:
c001ef00:	53                   	push   ebx
c001ef01:	83 ec 08             	sub    esp,0x8
c001ef04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ef08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef0c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ef10:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ef16:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ef1c:	c1 e0 06             	shl    eax,0x6
c001ef1f:	01 d0                	add    eax,edx
c001ef21:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001ef28:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001ef2e:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001ef35:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ef3f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ef45:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ef4c:	6a 04                	push   0x4
c001ef4e:	6a 0c                	push   0xc
c001ef50:	51                   	push   ecx
c001ef51:	52                   	push   edx
c001ef52:	e8 3f e6 ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef57:	90                   	nop
c001ef58:	90                   	nop
c001ef59:	6a 00                	push   0x0
c001ef5b:	6a 0c                	push   0xc
c001ef5d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ef64:	50                   	push   eax
c001ef65:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ef6b:	e8 26 e6 ff ff       	call   c001d596 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef70:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ef77:	83 c4 14             	add    esp,0x14
c001ef7a:	53                   	push   ebx
c001ef7b:	e8 c4 fe ff ff       	call   c001ee44 <ATAPI::detectMedia()>
c001ef80:	31 c0                	xor    eax,eax
c001ef82:	83 c4 18             	add    esp,0x18
c001ef85:	5b                   	pop    ebx
c001ef86:	c3                   	ret    
c001ef87:	90                   	nop

c001ef88 <ATAPI::read(unsigned long long, int, void*)>:
c001ef88:	55                   	push   ebp
c001ef89:	57                   	push   edi
c001ef8a:	56                   	push   esi
c001ef8b:	53                   	push   ebx
c001ef8c:	83 ec 1c             	sub    esp,0x1c
c001ef8f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ef93:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ef97:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ef9b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001efa2:	74 41                	je     c001efe5 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001efa4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001efa8:	b9 03 00 00 00       	mov    ecx,0x3
c001efad:	fc                   	cld    
c001efae:	31 c0                	xor    eax,eax
c001efb0:	86 fb                	xchg   bl,bh
c001efb2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001efb4:	c1 c3 10             	rol    ebx,0x10
c001efb7:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001efbc:	89 e8                	mov    eax,ebp
c001efbe:	86 fb                	xchg   bl,bh
c001efc0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001efc4:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001efc8:	50                   	push   eax
c001efc9:	50                   	push   eax
c001efca:	55                   	push   ebp
c001efcb:	c1 e5 0b             	shl    ebp,0xb
c001efce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001efd2:	6a 00                	push   0x0
c001efd4:	55                   	push   ebp
c001efd5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001efd9:	50                   	push   eax
c001efda:	56                   	push   esi
c001efdb:	e8 12 fb ff ff       	call   c001eaf2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001efe0:	83 c4 20             	add    esp,0x20
c001efe3:	eb 1a                	jmp    c001efff <ATAPI::read(unsigned long long, int, void*)+0x77>
c001efe5:	83 ec 0c             	sub    esp,0xc
c001efe8:	56                   	push   esi
c001efe9:	e8 56 fe ff ff       	call   c001ee44 <ATAPI::detectMedia()>
c001efee:	83 c4 10             	add    esp,0x10
c001eff1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001eff8:	75 aa                	jne    c001efa4 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001effa:	b8 02 00 00 00       	mov    eax,0x2
c001efff:	83 c4 1c             	add    esp,0x1c
c001f002:	5b                   	pop    ebx
c001f003:	5e                   	pop    esi
c001f004:	5f                   	pop    edi
c001f005:	5d                   	pop    ebp
c001f006:	c3                   	ret    
c001f007:	90                   	nop

c001f008 <SATA::close(int, int, void*)>:
c001f008:	83 ec 0c             	sub    esp,0xc
c001f00b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f00f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f015:	85 c0                	test   eax,eax
c001f017:	74 0c                	je     c001f025 <SATA::close(int, int, void*)+0x1d>
c001f019:	83 ec 0c             	sub    esp,0xc
c001f01c:	8b 10                	mov    edx,DWORD PTR [eax]
c001f01e:	50                   	push   eax
c001f01f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f022:	83 c4 10             	add    esp,0x10
c001f025:	31 c0                	xor    eax,eax
c001f027:	83 c4 0c             	add    esp,0xc
c001f02a:	c3                   	ret    
c001f02b:	90                   	nop

c001f02c <SATA::powerSaving(PowerSavingLevel)>:
c001f02c:	c3                   	ret    
c001f02d:	90                   	nop

c001f02e <SATA::open(int, int, void*)>:
c001f02e:	56                   	push   esi
c001f02f:	53                   	push   ebx
c001f030:	50                   	push   eax
c001f031:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f035:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f039:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f043:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f049:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f053:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f057:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f061:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f067:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f06e:	e8 e6 ad fe ff       	call   c0009e59 <Phys::allocatePage()>
c001f073:	89 c6                	mov    esi,eax
c001f075:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f07b:	81 c6 00 10 00 00    	add    esi,0x1000
c001f081:	e8 d3 ad fe ff       	call   c0009e59 <Phys::allocatePage()>
c001f086:	39 c6                	cmp    esi,eax
c001f088:	74 10                	je     c001f09a <SATA::open(int, int, void*)+0x6c>
c001f08a:	83 ec 0c             	sub    esp,0xc
c001f08d:	68 f8 4f 02 c0       	push   0xc0024ff8
c001f092:	e8 e6 53 ff ff       	call   c001447d <Krnl::panic(char const*)>
c001f097:	83 c4 10             	add    esp,0x10
c001f09a:	83 ec 0c             	sub    esp,0xc
c001f09d:	6a 02                	push   0x2
c001f09f:	e8 3f c6 fe ff       	call   c000b6e3 <Virt::allocateKernelVirtualPages(int)>
c001f0a4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f0aa:	6a 03                	push   0x3
c001f0ac:	50                   	push   eax
c001f0ad:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f0b3:	ff 35 d0 63 02 c0    	push   DWORD PTR ds:0xc00263d0
c001f0b9:	e8 cc cc fe ff       	call   c000bd8a <VAS::mapPage(unsigned long, unsigned long, int)>
c001f0be:	83 c4 14             	add    esp,0x14
c001f0c1:	53                   	push   ebx
c001f0c2:	e8 d9 f2 fe ff       	call   c000e3a0 <PhysicalDisk::startCache()>
c001f0c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f0ca:	e8 59 15 ff ff       	call   c0010628 <createPartitionsForDisk(PhysicalDisk*)>
c001f0cf:	83 c4 14             	add    esp,0x14
c001f0d2:	31 c0                	xor    eax,eax
c001f0d4:	5b                   	pop    ebx
c001f0d5:	5e                   	pop    esi
c001f0d6:	c3                   	ret    
c001f0d7:	90                   	nop

c001f0d8 <SATA::SATA()>:
c001f0d8:	83 ec 0c             	sub    esp,0xc
c001f0db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0df:	83 ec 04             	sub    esp,0x4
c001f0e2:	68 00 02 00 00       	push   0x200
c001f0e7:	68 0c 50 02 c0       	push   0xc002500c
c001f0ec:	50                   	push   eax
c001f0ed:	e8 46 f2 fe ff       	call   c000e338 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f0f2:	83 c4 10             	add    esp,0x10
c001f0f5:	ba 7c 50 02 c0       	mov    edx,0xc002507c
c001f0fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0fe:	89 10                	mov    DWORD PTR [eax],edx
c001f100:	90                   	nop
c001f101:	83 c4 0c             	add    esp,0xc
c001f104:	c3                   	ret    
c001f105:	90                   	nop

c001f106 <SATA::access(unsigned long long, int, void*, bool)>:
c001f106:	55                   	push   ebp
c001f107:	57                   	push   edi
c001f108:	56                   	push   esi
c001f109:	53                   	push   ebx
c001f10a:	83 ec 2c             	sub    esp,0x2c
c001f10d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f115:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f119:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f11d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f121:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001f126:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f12a:	7e 10                	jle    c001f13c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001f12c:	83 ec 0c             	sub    esp,0xc
c001f12f:	68 1c 50 02 c0       	push   0xc002501c
c001f134:	e8 44 53 ff ff       	call   c001447d <Krnl::panic(char const*)>
c001f139:	83 c4 10             	add    esp,0x10
c001f13c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f142:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001f148:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f14e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f152:	89 d0                	mov    eax,edx
c001f154:	c1 e0 07             	shl    eax,0x7
c001f157:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f15b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f165:	51                   	push   ecx
c001f166:	8d 42 02             	lea    eax,[edx+0x2]
c001f169:	51                   	push   ecx
c001f16a:	c1 e0 07             	shl    eax,0x7
c001f16d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f171:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f175:	50                   	push   eax
c001f176:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001f17c:	e8 97 ef ff ff       	call   c001e118 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f181:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f185:	83 c4 10             	add    esp,0x10
c001f188:	b8 01 00 00 00       	mov    eax,0x1
c001f18d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f192:	0f 84 cb 01 00 00    	je     c001f363 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f198:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f19c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f1a0:	c1 e0 09             	shl    eax,0x9
c001f1a3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f1a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f1ac:	74 0e                	je     c001f1bc <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c001f1ae:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001f1b4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f1b8:	89 c1                	mov    ecx,eax
c001f1ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f1bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f1c0:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f1c6:	8d 42 02             	lea    eax,[edx+0x2]
c001f1c9:	c1 e0 07             	shl    eax,0x7
c001f1cc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f1d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1d2:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f1d8:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f1de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f1e2:	c1 e1 05             	shl    ecx,0x5
c001f1e5:	01 c8                	add    eax,ecx
c001f1e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001f1eb:	83 e1 01             	and    ecx,0x1
c001f1ee:	89 ce                	mov    esi,ecx
c001f1f0:	8a 08                	mov    cl,BYTE PTR [eax]
c001f1f2:	c1 e6 06             	shl    esi,0x6
c001f1f5:	83 e1 bf             	and    ecx,0xffffffbf
c001f1f8:	09 f1                	or     ecx,esi
c001f1fa:	88 08                	mov    BYTE PTR [eax],cl
c001f1fc:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f1fe:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001f204:	81 c9 05 00 01 00    	or     ecx,0x10005
c001f20a:	89 08                	mov    DWORD PTR [eax],ecx
c001f20c:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f212:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001f218:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001f21e:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001f221:	50                   	push   eax
c001f222:	68 90 00 00 00       	push   0x90
c001f227:	6a 00                	push   0x0
c001f229:	56                   	push   esi
c001f22a:	e8 21 15 fe ff       	call   c0000750 <memset>
c001f22f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f235:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001f239:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001f23f:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001f243:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f247:	83 c4 10             	add    esp,0x10
c001f24a:	48                   	dec    eax
c001f24b:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f250:	89 c1                	mov    ecx,eax
c001f252:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001f258:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f25d:	09 c8                	or     eax,ecx
c001f25f:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001f265:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f268:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001f26f:	66 25 00 7f          	and    ax,0x7f00
c001f273:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f277:	66 0d 27 80          	or     ax,0x8027
c001f27b:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001f280:	66 89 06             	mov    WORD PTR [esi],ax
c001f283:	19 c0                	sbb    eax,eax
c001f285:	83 e0 f0             	and    eax,0xfffffff0
c001f288:	83 c0 35             	add    eax,0x35
c001f28b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001f28e:	89 e8                	mov    eax,ebp
c001f290:	c1 e8 10             	shr    eax,0x10
c001f293:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001f296:	89 e8                	mov    eax,ebp
c001f298:	c1 e8 18             	shr    eax,0x18
c001f29b:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001f29e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f2a2:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001f2a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f2a9:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001f2ac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f2b0:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001f2b4:	89 d6                	mov    esi,edx
c001f2b6:	31 c0                	xor    eax,eax
c001f2b8:	c1 e6 07             	shl    esi,0x7
c001f2bb:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001f2bf:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001f2c5:	80 e1 88             	and    cl,0x88
c001f2c8:	74 0a                	je     c001f2d4 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c001f2ca:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f2cf:	74 0a                	je     c001f2db <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c001f2d1:	40                   	inc    eax
c001f2d2:	eb eb                	jmp    c001f2bf <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c001f2d4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f2d9:	75 0a                	jne    c001f2e5 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001f2db:	83 ec 0c             	sub    esp,0xc
c001f2de:	68 55 50 02 c0       	push   0xc0025055
c001f2e3:	eb 56                	jmp    c001f33b <SATA::access(unsigned long long, int, void*, bool)+0x235>
c001f2e5:	b8 01 00 00 00       	mov    eax,0x1
c001f2ea:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f2ee:	c1 e2 07             	shl    edx,0x7
c001f2f1:	d3 e0                	shl    eax,cl
c001f2f3:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001f2f7:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001f2fd:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001f303:	85 c8                	test   eax,ecx
c001f305:	74 20                	je     c001f327 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c001f307:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001f30d:	0f ba e1 1e          	bt     ecx,0x1e
c001f311:	73 ea                	jae    c001f2fd <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c001f313:	83 ec 0c             	sub    esp,0xc
c001f316:	68 63 50 02 c0       	push   0xc0025063
c001f31b:	e8 5d 51 ff ff       	call   c001447d <Krnl::panic(char const*)>
c001f320:	83 c4 10             	add    esp,0x10
c001f323:	31 c0                	xor    eax,eax
c001f325:	eb 3c                	jmp    c001f363 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f327:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001f32d:	0f ba e0 1e          	bt     eax,0x1e
c001f331:	73 17                	jae    c001f34a <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001f333:	83 ec 0c             	sub    esp,0xc
c001f336:	68 63 50 02 c0       	push   0xc0025063
c001f33b:	e8 3d 51 ff ff       	call   c001447d <Krnl::panic(char const*)>
c001f340:	83 c4 10             	add    esp,0x10
c001f343:	b8 01 00 00 00       	mov    eax,0x1
c001f348:	eb 19                	jmp    c001f363 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f34a:	31 c0                	xor    eax,eax
c001f34c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f351:	75 10                	jne    c001f363 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f353:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001f359:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001f35d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f361:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f363:	83 c4 2c             	add    esp,0x2c
c001f366:	5b                   	pop    ebx
c001f367:	5e                   	pop    esi
c001f368:	5f                   	pop    edi
c001f369:	5d                   	pop    ebp
c001f36a:	c3                   	ret    
c001f36b:	90                   	nop

c001f36c <SATA::read(unsigned long long, int, void*)>:
c001f36c:	57                   	push   edi
c001f36d:	b8 04 00 00 00       	mov    eax,0x4
c001f372:	56                   	push   esi
c001f373:	53                   	push   ebx
c001f374:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f37c:	8d 7a ff             	lea    edi,[edx-0x1]
c001f37f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f383:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f387:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f38d:	77 25                	ja     c001f3b4 <SATA::read(unsigned long long, int, void*)+0x48>
c001f38f:	b8 06 00 00 00       	mov    eax,0x6
c001f394:	85 f6                	test   esi,esi
c001f396:	74 1c                	je     c001f3b4 <SATA::read(unsigned long long, int, void*)+0x48>
c001f398:	50                   	push   eax
c001f399:	50                   	push   eax
c001f39a:	6a 00                	push   0x0
c001f39c:	56                   	push   esi
c001f39d:	52                   	push   edx
c001f39e:	53                   	push   ebx
c001f39f:	51                   	push   ecx
c001f3a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f3a4:	e8 5d fd ff ff       	call   c001f106 <SATA::access(unsigned long long, int, void*, bool)>
c001f3a9:	83 c4 20             	add    esp,0x20
c001f3ac:	85 c0                	test   eax,eax
c001f3ae:	0f 95 c0             	setne  al
c001f3b1:	0f b6 c0             	movzx  eax,al
c001f3b4:	5b                   	pop    ebx
c001f3b5:	5e                   	pop    esi
c001f3b6:	5f                   	pop    edi
c001f3b7:	c3                   	ret    

c001f3b8 <SATA::write(unsigned long long, int, void*)>:
c001f3b8:	55                   	push   ebp
c001f3b9:	b8 04 00 00 00       	mov    eax,0x4
c001f3be:	57                   	push   edi
c001f3bf:	56                   	push   esi
c001f3c0:	53                   	push   ebx
c001f3c1:	83 ec 0c             	sub    esp,0xc
c001f3c4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f3c8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f3cc:	8d 73 ff             	lea    esi,[ebx-0x1]
c001f3cf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001f3d3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f3d7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001f3dd:	77 3d                	ja     c001f41c <SATA::write(unsigned long long, int, void*)+0x64>
c001f3df:	b8 06 00 00 00       	mov    eax,0x6
c001f3e4:	85 ed                	test   ebp,ebp
c001f3e6:	74 34                	je     c001f41c <SATA::write(unsigned long long, int, void*)+0x64>
c001f3e8:	c1 e3 09             	shl    ebx,0x9
c001f3eb:	01 eb                	add    ebx,ebp
c001f3ed:	89 d6                	mov    esi,edx
c001f3ef:	89 cf                	mov    edi,ecx
c001f3f1:	83 c6 01             	add    esi,0x1
c001f3f4:	83 d7 00             	adc    edi,0x0
c001f3f7:	50                   	push   eax
c001f3f8:	50                   	push   eax
c001f3f9:	6a 01                	push   0x1
c001f3fb:	55                   	push   ebp
c001f3fc:	81 c5 00 02 00 00    	add    ebp,0x200
c001f402:	6a 01                	push   0x1
c001f404:	51                   	push   ecx
c001f405:	52                   	push   edx
c001f406:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f40a:	e8 f7 fc ff ff       	call   c001f106 <SATA::access(unsigned long long, int, void*, bool)>
c001f40f:	83 c4 20             	add    esp,0x20
c001f412:	89 f2                	mov    edx,esi
c001f414:	89 f9                	mov    ecx,edi
c001f416:	39 dd                	cmp    ebp,ebx
c001f418:	75 d3                	jne    c001f3ed <SATA::write(unsigned long long, int, void*)+0x35>
c001f41a:	31 c0                	xor    eax,eax
c001f41c:	83 c4 0c             	add    esp,0xc
c001f41f:	5b                   	pop    ebx
c001f420:	5e                   	pop    esi
c001f421:	5f                   	pop    edi
c001f422:	5d                   	pop    ebp
c001f423:	c3                   	ret    

c001f424 <SATAPI::write(unsigned long long, int, void*)>:
c001f424:	b8 03 00 00 00       	mov    eax,0x3
c001f429:	c3                   	ret    

c001f42a <SATAPI::close(int, int, void*)>:
c001f42a:	83 ec 0c             	sub    esp,0xc
c001f42d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f431:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f437:	85 c0                	test   eax,eax
c001f439:	74 0c                	je     c001f447 <SATAPI::close(int, int, void*)+0x1d>
c001f43b:	83 ec 0c             	sub    esp,0xc
c001f43e:	8b 10                	mov    edx,DWORD PTR [eax]
c001f440:	50                   	push   eax
c001f441:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f444:	83 c4 10             	add    esp,0x10
c001f447:	31 c0                	xor    eax,eax
c001f449:	83 c4 0c             	add    esp,0xc
c001f44c:	c3                   	ret    
c001f44d:	90                   	nop

c001f44e <SATAPI::SATAPI()>:
c001f44e:	83 ec 0c             	sub    esp,0xc
c001f451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f455:	83 ec 04             	sub    esp,0x4
c001f458:	68 00 08 00 00       	push   0x800
c001f45d:	68 ac 50 02 c0       	push   0xc00250ac
c001f462:	50                   	push   eax
c001f463:	e8 d0 ee fe ff       	call   c000e338 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f468:	83 c4 10             	add    esp,0x10
c001f46b:	ba 58 51 02 c0       	mov    edx,0xc0025158
c001f470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f474:	89 10                	mov    DWORD PTR [eax],edx
c001f476:	90                   	nop
c001f477:	83 c4 0c             	add    esp,0xc
c001f47a:	c3                   	ret    
c001f47b:	90                   	nop

c001f47c <SATAPI::diskRemoved()>:
c001f47c:	83 ec 18             	sub    esp,0x18
c001f47f:	68 b8 50 02 c0       	push   0xc00250b8
c001f484:	e8 35 d6 fe ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001f489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f48d:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c001f494:	83 c4 1c             	add    esp,0x1c
c001f497:	c3                   	ret    

c001f498 <SATAPI::diskInserted()>:
c001f498:	53                   	push   ebx
c001f499:	83 ec 14             	sub    esp,0x14
c001f49c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f4a0:	68 cf 50 02 c0       	push   0xc00250cf
c001f4a5:	e8 14 d6 fe ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001f4aa:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c001f4b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f4b4:	e8 e7 ee fe ff       	call   c000e3a0 <PhysicalDisk::startCache()>
c001f4b9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001f4bd:	83 c4 18             	add    esp,0x18
c001f4c0:	5b                   	pop    ebx
c001f4c1:	e9 62 11 ff ff       	jmp    c0010628 <createPartitionsForDisk(PhysicalDisk*)>

c001f4c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001f4c6:	55                   	push   ebp
c001f4c7:	57                   	push   edi
c001f4c8:	56                   	push   esi
c001f4c9:	53                   	push   ebx
c001f4ca:	83 ec 34             	sub    esp,0x34
c001f4cd:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f4d1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f4d5:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001f4d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f4dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f4e1:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001f4e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f4ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f4f1:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001f4f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f4fb:	c1 e0 07             	shl    eax,0x7
c001f4fe:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f502:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f506:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f510:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f514:	8d 58 02             	lea    ebx,[eax+0x2]
c001f517:	c1 e3 07             	shl    ebx,0x7
c001f51a:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001f51e:	53                   	push   ebx
c001f51f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f525:	e8 ee eb ff ff       	call   c001e118 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f52a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f52e:	83 c4 10             	add    esp,0x10
c001f531:	b8 01 00 00 00       	mov    eax,0x1
c001f536:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f53b:	0f 84 85 01 00 00    	je     c001f6c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f541:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f547:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f549:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f54f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f555:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f559:	c1 e1 05             	shl    ecx,0x5
c001f55c:	01 c8                	add    eax,ecx
c001f55e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f560:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001f566:	81 c9 25 00 01 00    	or     ecx,0x10025
c001f56c:	89 08                	mov    DWORD PTR [eax],ecx
c001f56e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f574:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001f57a:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001f580:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001f583:	8d 7b 40             	lea    edi,[ebx+0x40]
c001f586:	50                   	push   eax
c001f587:	68 90 00 00 00       	push   0x90
c001f58c:	6a 00                	push   0x0
c001f58e:	53                   	push   ebx
c001f58f:	e8 bc 11 fe ff       	call   c0000750 <memset>
c001f594:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001f598:	b9 0c 00 00 00       	mov    ecx,0xc
c001f59d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f59f:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c001f5a5:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001f5a9:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001f5af:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001f5b3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f5b7:	48                   	dec    eax
c001f5b8:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f5bd:	89 c1                	mov    ecx,eax
c001f5bf:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001f5c5:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f5ca:	09 c8                	or     eax,ecx
c001f5cc:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001f5d2:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001f5d5:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001f5dc:	66 25 00 7f          	and    ax,0x7f00
c001f5e0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001f5e4:	66 0d 27 80          	or     ax,0x8027
c001f5e8:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001f5ec:	66 89 03             	mov    WORD PTR [ebx],ax
c001f5ef:	89 d0                	mov    eax,edx
c001f5f1:	c1 ea 18             	shr    edx,0x18
c001f5f4:	c1 e8 10             	shr    eax,0x10
c001f5f7:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001f5fa:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001f5fd:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001f601:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001f604:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f608:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001f60b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f60f:	83 c4 10             	add    esp,0x10
c001f612:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001f616:	31 c0                	xor    eax,eax
c001f618:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f61c:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c001f622:	80 e2 88             	and    dl,0x88
c001f625:	74 0a                	je     c001f631 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001f627:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f62c:	74 0a                	je     c001f638 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c001f62e:	40                   	inc    eax
c001f62f:	eb eb                	jmp    c001f61c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c001f631:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f636:	75 0f                	jne    c001f647 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c001f638:	83 ec 0c             	sub    esp,0xc
c001f63b:	68 55 50 02 c0       	push   0xc0025055
c001f640:	e8 38 4e ff ff       	call   c001447d <Krnl::panic(char const*)>
c001f645:	eb 3f                	jmp    c001f686 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001f647:	ba 01 00 00 00       	mov    edx,0x1
c001f64c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f654:	d3 e2                	shl    edx,cl
c001f656:	c1 e0 07             	shl    eax,0x7
c001f659:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c001f65f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f663:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c001f669:	85 ca                	test   edx,ecx
c001f66b:	74 23                	je     c001f690 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001f66d:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c001f673:	0f ba e1 1e          	bt     ecx,0x1e
c001f677:	73 ea                	jae    c001f663 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c001f679:	83 ec 0c             	sub    esp,0xc
c001f67c:	68 e7 50 02 c0       	push   0xc00250e7
c001f681:	e8 38 d4 fe ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001f686:	83 c4 10             	add    esp,0x10
c001f689:	b8 01 00 00 00       	mov    eax,0x1
c001f68e:	eb 36                	jmp    c001f6c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f690:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001f696:	0f ba e0 1e          	bt     eax,0x1e
c001f69a:	73 0a                	jae    c001f6a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c001f69c:	83 ec 0c             	sub    esp,0xc
c001f69f:	68 fa 50 02 c0       	push   0xc00250fa
c001f6a4:	eb db                	jmp    c001f681 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c001f6a6:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001f6ab:	74 17                	je     c001f6c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f6ad:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001f6b2:	74 10                	je     c001f6c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f6b4:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c001f6ba:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f6be:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001f6c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f6c4:	31 c0                	xor    eax,eax
c001f6c6:	83 c4 2c             	add    esp,0x2c
c001f6c9:	5b                   	pop    ebx
c001f6ca:	5e                   	pop    esi
c001f6cb:	5f                   	pop    edi
c001f6cc:	5d                   	pop    ebp
c001f6cd:	c3                   	ret    

c001f6ce <SATAPI::eject()>:
c001f6ce:	57                   	push   edi
c001f6cf:	b9 03 00 00 00       	mov    ecx,0x3
c001f6d4:	53                   	push   ebx
c001f6d5:	83 ec 14             	sub    esp,0x14
c001f6d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f6dc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f6e0:	fc                   	cld    
c001f6e1:	31 c0                	xor    eax,eax
c001f6e3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f6e5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f6ea:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f6ef:	50                   	push   eax
c001f6f0:	6a 00                	push   0x0
c001f6f2:	6a 00                	push   0x0
c001f6f4:	6a 00                	push   0x0
c001f6f6:	6a 00                	push   0x0
c001f6f8:	6a 02                	push   0x2
c001f6fa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f6fe:	50                   	push   eax
c001f6ff:	53                   	push   ebx
c001f700:	e8 c1 fd ff ff       	call   c001f4c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f705:	83 c4 14             	add    esp,0x14
c001f708:	53                   	push   ebx
c001f709:	e8 6e fd ff ff       	call   c001f47c <SATAPI::diskRemoved()>
c001f70e:	83 c4 24             	add    esp,0x24
c001f711:	31 c0                	xor    eax,eax
c001f713:	5b                   	pop    ebx
c001f714:	5f                   	pop    edi
c001f715:	c3                   	ret    

c001f716 <SATAPI::detectMedia()>:
c001f716:	56                   	push   esi
c001f717:	53                   	push   ebx
c001f718:	83 ec 28             	sub    esp,0x28
c001f71b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f71f:	6a 0c                	push   0xc
c001f721:	6a 00                	push   0x0
c001f723:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f727:	56                   	push   esi
c001f728:	e8 23 10 fe ff       	call   c0000750 <memset>
c001f72d:	83 c4 0c             	add    esp,0xc
c001f730:	6a 00                	push   0x0
c001f732:	6a 00                	push   0x0
c001f734:	6a 00                	push   0x0
c001f736:	6a 00                	push   0x0
c001f738:	6a 00                	push   0x0
c001f73a:	56                   	push   esi
c001f73b:	53                   	push   ebx
c001f73c:	e8 85 fd ff ff       	call   c001f4c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f741:	83 c4 1c             	add    esp,0x1c
c001f744:	6a 0c                	push   0xc
c001f746:	6a 00                	push   0x0
c001f748:	56                   	push   esi
c001f749:	e8 02 10 fe ff       	call   c0000750 <memset>
c001f74e:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f753:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f758:	83 c4 0c             	add    esp,0xc
c001f75b:	6a 01                	push   0x1
c001f75d:	8d 44 24 16          	lea    eax,[esp+0x16]
c001f761:	50                   	push   eax
c001f762:	6a 00                	push   0x0
c001f764:	6a 00                	push   0x0
c001f766:	6a 12                	push   0x12
c001f768:	56                   	push   esi
c001f769:	53                   	push   ebx
c001f76a:	e8 57 fd ff ff       	call   c001f4c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f76f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f773:	83 c4 20             	add    esp,0x20
c001f776:	83 e0 7f             	and    eax,0x7f
c001f779:	3c 70                	cmp    al,0x70
c001f77b:	74 15                	je     c001f792 <SATAPI::detectMedia()+0x7c>
c001f77d:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f784:	75 0c                	jne    c001f792 <SATAPI::detectMedia()+0x7c>
c001f786:	83 ec 0c             	sub    esp,0xc
c001f789:	53                   	push   ebx
c001f78a:	e8 09 fd ff ff       	call   c001f498 <SATAPI::diskInserted()>
c001f78f:	83 c4 10             	add    esp,0x10
c001f792:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f796:	83 e0 0f             	and    eax,0xf
c001f799:	3c 02                	cmp    al,0x2
c001f79b:	75 1b                	jne    c001f7b8 <SATAPI::detectMedia()+0xa2>
c001f79d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f7a2:	75 2d                	jne    c001f7d1 <SATAPI::detectMedia()+0xbb>
c001f7a4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f7ab:	74 24                	je     c001f7d1 <SATAPI::detectMedia()+0xbb>
c001f7ad:	83 ec 0c             	sub    esp,0xc
c001f7b0:	53                   	push   ebx
c001f7b1:	e8 c6 fc ff ff       	call   c001f47c <SATAPI::diskRemoved()>
c001f7b6:	eb 16                	jmp    c001f7ce <SATAPI::detectMedia()+0xb8>
c001f7b8:	84 c0                	test   al,al
c001f7ba:	75 15                	jne    c001f7d1 <SATAPI::detectMedia()+0xbb>
c001f7bc:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f7c3:	75 0c                	jne    c001f7d1 <SATAPI::detectMedia()+0xbb>
c001f7c5:	83 ec 0c             	sub    esp,0xc
c001f7c8:	53                   	push   ebx
c001f7c9:	e8 ca fc ff ff       	call   c001f498 <SATAPI::diskInserted()>
c001f7ce:	83 c4 10             	add    esp,0x10
c001f7d1:	83 c4 24             	add    esp,0x24
c001f7d4:	5b                   	pop    ebx
c001f7d5:	5e                   	pop    esi
c001f7d6:	c3                   	ret    
c001f7d7:	90                   	nop

c001f7d8 <SATAPI::open(int, int, void*)>:
c001f7d8:	56                   	push   esi
c001f7d9:	53                   	push   ebx
c001f7da:	50                   	push   eax
c001f7db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f7df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f7e3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f7ed:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f7f3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f7fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f801:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f80b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f811:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f818:	e8 3c a6 fe ff       	call   c0009e59 <Phys::allocatePage()>
c001f81d:	89 c6                	mov    esi,eax
c001f81f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f825:	81 c6 00 10 00 00    	add    esi,0x1000
c001f82b:	e8 29 a6 fe ff       	call   c0009e59 <Phys::allocatePage()>
c001f830:	39 c6                	cmp    esi,eax
c001f832:	74 10                	je     c001f844 <SATAPI::open(int, int, void*)+0x6c>
c001f834:	83 ec 0c             	sub    esp,0xc
c001f837:	68 0f 51 02 c0       	push   0xc002510f
c001f83c:	e8 3c 4c ff ff       	call   c001447d <Krnl::panic(char const*)>
c001f841:	83 c4 10             	add    esp,0x10
c001f844:	83 ec 0c             	sub    esp,0xc
c001f847:	6a 02                	push   0x2
c001f849:	e8 95 be fe ff       	call   c000b6e3 <Virt::allocateKernelVirtualPages(int)>
c001f84e:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f854:	6a 03                	push   0x3
c001f856:	50                   	push   eax
c001f857:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c001f85d:	ff 35 d0 63 02 c0    	push   DWORD PTR ds:0xc00263d0
c001f863:	e8 22 c5 fe ff       	call   c000bd8a <VAS::mapPage(unsigned long, unsigned long, int)>
c001f868:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001f86f:	83 c4 14             	add    esp,0x14
c001f872:	53                   	push   ebx
c001f873:	e8 9e fe ff ff       	call   c001f716 <SATAPI::detectMedia()>
c001f878:	83 c4 14             	add    esp,0x14
c001f87b:	31 c0                	xor    eax,eax
c001f87d:	5b                   	pop    ebx
c001f87e:	5e                   	pop    esi
c001f87f:	c3                   	ret    

c001f880 <SATAPI::read(unsigned long long, int, void*)>:
c001f880:	55                   	push   ebp
c001f881:	57                   	push   edi
c001f882:	56                   	push   esi
c001f883:	53                   	push   ebx
c001f884:	83 ec 1c             	sub    esp,0x1c
c001f887:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f88b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f88f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f893:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001f89a:	74 19                	je     c001f8b5 <SATAPI::read(unsigned long long, int, void*)+0x35>
c001f89c:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c001f8a1:	7e 2e                	jle    c001f8d1 <SATAPI::read(unsigned long long, int, void*)+0x51>
c001f8a3:	83 ec 0c             	sub    esp,0xc
c001f8a6:	68 25 51 02 c0       	push   0xc0025125
c001f8ab:	e8 cd 4b ff ff       	call   c001447d <Krnl::panic(char const*)>
c001f8b0:	83 c4 10             	add    esp,0x10
c001f8b3:	eb 1c                	jmp    c001f8d1 <SATAPI::read(unsigned long long, int, void*)+0x51>
c001f8b5:	83 ec 0c             	sub    esp,0xc
c001f8b8:	55                   	push   ebp
c001f8b9:	e8 58 fe ff ff       	call   c001f716 <SATAPI::detectMedia()>
c001f8be:	83 c4 10             	add    esp,0x10
c001f8c1:	b8 02 00 00 00       	mov    eax,0x2
c001f8c6:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001f8cd:	75 cd                	jne    c001f89c <SATAPI::read(unsigned long long, int, void*)+0x1c>
c001f8cf:	eb 49                	jmp    c001f91a <SATAPI::read(unsigned long long, int, void*)+0x9a>
c001f8d1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f8d5:	b9 03 00 00 00       	mov    ecx,0x3
c001f8da:	fc                   	cld    
c001f8db:	31 c0                	xor    eax,eax
c001f8dd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f8df:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f8e4:	89 d8                	mov    eax,ebx
c001f8e6:	86 e0                	xchg   al,ah
c001f8e8:	c1 c0 10             	rol    eax,0x10
c001f8eb:	86 e0                	xchg   al,ah
c001f8ed:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c001f8f1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001f8f5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f8f9:	50                   	push   eax
c001f8fa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001f8fe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f902:	56                   	push   esi
c001f903:	53                   	push   ebx
c001f904:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f908:	c1 e0 0b             	shl    eax,0xb
c001f90b:	50                   	push   eax
c001f90c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f910:	50                   	push   eax
c001f911:	55                   	push   ebp
c001f912:	e8 af fb ff ff       	call   c001f4c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f917:	83 c4 20             	add    esp,0x20
c001f91a:	83 c4 1c             	add    esp,0x1c
c001f91d:	5b                   	pop    ebx
c001f91e:	5e                   	pop    esi
c001f91f:	5f                   	pop    edi
c001f920:	5d                   	pop    ebp
c001f921:	c3                   	ret    

c001f922 <AVX::open(int, int, void*)>:
c001f922:	83 ec 0c             	sub    esp,0xc
c001f925:	e8 3e 11 00 00       	call   c0020a68 <avxInit>
c001f92a:	b8 00 00 00 00       	mov    eax,0x0
c001f92f:	83 c4 0c             	add    esp,0xc
c001f932:	c3                   	ret    
c001f933:	90                   	nop

c001f934 <AVX::close(int, int, void*)>:
c001f934:	83 ec 0c             	sub    esp,0xc
c001f937:	e8 2d 11 00 00       	call   c0020a69 <avxClose>
c001f93c:	b8 00 00 00 00       	mov    eax,0x0
c001f941:	83 c4 0c             	add    esp,0xc
c001f944:	c3                   	ret    
c001f945:	90                   	nop

c001f946 <AVX::available()>:
c001f946:	83 ec 0c             	sub    esp,0xc
c001f949:	e8 12 11 00 00       	call   c0020a60 <avxDetect>
c001f94e:	85 c0                	test   eax,eax
c001f950:	0f 95 c0             	setne  al
c001f953:	83 c4 0c             	add    esp,0xc
c001f956:	c3                   	ret    
c001f957:	90                   	nop

c001f958 <AVX::save(void*)>:
c001f958:	83 ec 0c             	sub    esp,0xc
c001f95b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f95f:	83 ec 0c             	sub    esp,0xc
c001f962:	50                   	push   eax
c001f963:	e8 fe 10 00 00       	call   c0020a66 <avxSave>
c001f968:	83 c4 10             	add    esp,0x10
c001f96b:	90                   	nop
c001f96c:	83 c4 0c             	add    esp,0xc
c001f96f:	c3                   	ret    

c001f970 <AVX::load(void*)>:
c001f970:	83 ec 0c             	sub    esp,0xc
c001f973:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f977:	83 ec 0c             	sub    esp,0xc
c001f97a:	50                   	push   eax
c001f97b:	e8 e7 10 00 00       	call   c0020a67 <avxLoad>
c001f980:	83 c4 10             	add    esp,0x10
c001f983:	90                   	nop
c001f984:	83 c4 0c             	add    esp,0xc
c001f987:	c3                   	ret    

c001f988 <AVX::AVX()>:
c001f988:	83 ec 0c             	sub    esp,0xc
c001f98b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f98f:	83 ec 08             	sub    esp,0x8
c001f992:	68 88 51 02 c0       	push   0xc0025188
c001f997:	50                   	push   eax
c001f998:	e8 79 ea fe ff       	call   c000e416 <FPU::FPU(char const*)>
c001f99d:	83 c4 10             	add    esp,0x10
c001f9a0:	ba 98 51 02 c0       	mov    edx,0xc0025198
c001f9a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a9:	89 10                	mov    DWORD PTR [eax],edx
c001f9ab:	90                   	nop
c001f9ac:	83 c4 0c             	add    esp,0xc
c001f9af:	c3                   	ret    

c001f9b0 <MMX::available()>:
c001f9b0:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c001f9b5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001f9bb:	83 e0 20             	and    eax,0x20
c001f9be:	84 c0                	test   al,al
c001f9c0:	0f 95 c0             	setne  al
c001f9c3:	c3                   	ret    

c001f9c4 <MMX::open(int, int, void*)>:
c001f9c4:	83 ec 0c             	sub    esp,0xc
c001f9c7:	e8 26 11 00 00       	call   c0020af2 <x87Init>
c001f9cc:	b8 00 00 00 00       	mov    eax,0x0
c001f9d1:	83 c4 0c             	add    esp,0xc
c001f9d4:	c3                   	ret    
c001f9d5:	90                   	nop

c001f9d6 <MMX::close(int, int, void*)>:
c001f9d6:	83 ec 0c             	sub    esp,0xc
c001f9d9:	e8 2e 11 00 00       	call   c0020b0c <x87Close>
c001f9de:	b8 00 00 00 00       	mov    eax,0x0
c001f9e3:	83 c4 0c             	add    esp,0xc
c001f9e6:	c3                   	ret    
c001f9e7:	90                   	nop

c001f9e8 <MMX::save(void*)>:
c001f9e8:	83 ec 0c             	sub    esp,0xc
c001f9eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f9ef:	83 ec 0c             	sub    esp,0xc
c001f9f2:	50                   	push   eax
c001f9f3:	e8 e9 10 00 00       	call   c0020ae1 <x87Save>
c001f9f8:	83 c4 10             	add    esp,0x10
c001f9fb:	90                   	nop
c001f9fc:	83 c4 0c             	add    esp,0xc
c001f9ff:	c3                   	ret    

c001fa00 <MMX::load(void*)>:
c001fa00:	83 ec 0c             	sub    esp,0xc
c001fa03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fa07:	83 ec 0c             	sub    esp,0xc
c001fa0a:	50                   	push   eax
c001fa0b:	e8 da 10 00 00       	call   c0020aea <x87Load>
c001fa10:	83 c4 10             	add    esp,0x10
c001fa13:	90                   	nop
c001fa14:	83 c4 0c             	add    esp,0xc
c001fa17:	c3                   	ret    

c001fa18 <MMX::MMX()>:
c001fa18:	83 ec 0c             	sub    esp,0xc
c001fa1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa1f:	83 ec 08             	sub    esp,0x8
c001fa22:	68 c8 51 02 c0       	push   0xc00251c8
c001fa27:	50                   	push   eax
c001fa28:	e8 e9 e9 fe ff       	call   c000e416 <FPU::FPU(char const*)>
c001fa2d:	83 c4 10             	add    esp,0x10
c001fa30:	ba d8 51 02 c0       	mov    edx,0xc00251d8
c001fa35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa39:	89 10                	mov    DWORD PTR [eax],edx
c001fa3b:	90                   	nop
c001fa3c:	83 c4 0c             	add    esp,0xc
c001fa3f:	c3                   	ret    

c001fa40 <SSE::open(int, int, void*)>:
c001fa40:	83 ec 0c             	sub    esp,0xc
c001fa43:	e8 5c 10 00 00       	call   c0020aa4 <sseInit>
c001fa48:	b8 00 00 00 00       	mov    eax,0x0
c001fa4d:	83 c4 0c             	add    esp,0xc
c001fa50:	c3                   	ret    
c001fa51:	90                   	nop

c001fa52 <SSE::close(int, int, void*)>:
c001fa52:	83 ec 0c             	sub    esp,0xc
c001fa55:	e8 5a 10 00 00       	call   c0020ab4 <sseClose>
c001fa5a:	b8 00 00 00 00       	mov    eax,0x0
c001fa5f:	83 c4 0c             	add    esp,0xc
c001fa62:	c3                   	ret    
c001fa63:	90                   	nop

c001fa64 <SSE::available()>:
c001fa64:	83 ec 1c             	sub    esp,0x1c
c001fa67:	e8 14 10 00 00       	call   c0020a80 <absolutelyNoChanceInHell>
c001fa6c:	85 c0                	test   eax,eax
c001fa6e:	0f 95 c0             	setne  al
c001fa71:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fa75:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001fa79:	83 c4 1c             	add    esp,0x1c
c001fa7c:	c3                   	ret    
c001fa7d:	90                   	nop

c001fa7e <SSE::save(void*)>:
c001fa7e:	83 ec 0c             	sub    esp,0xc
c001fa81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fa85:	83 ec 0c             	sub    esp,0xc
c001fa88:	50                   	push   eax
c001fa89:	e8 0a 10 00 00       	call   c0020a98 <sseSave>
c001fa8e:	83 c4 10             	add    esp,0x10
c001fa91:	90                   	nop
c001fa92:	83 c4 0c             	add    esp,0xc
c001fa95:	c3                   	ret    

c001fa96 <SSE::load(void*)>:
c001fa96:	83 ec 0c             	sub    esp,0xc
c001fa99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fa9d:	83 ec 0c             	sub    esp,0xc
c001faa0:	50                   	push   eax
c001faa1:	e8 f8 0f 00 00       	call   c0020a9e <sseLoad>
c001faa6:	83 c4 10             	add    esp,0x10
c001faa9:	90                   	nop
c001faaa:	83 c4 0c             	add    esp,0xc
c001faad:	c3                   	ret    

c001faae <SSE::SSE()>:
c001faae:	83 ec 0c             	sub    esp,0xc
c001fab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab5:	83 ec 08             	sub    esp,0x8
c001fab8:	68 08 52 02 c0       	push   0xc0025208
c001fabd:	50                   	push   eax
c001fabe:	e8 53 e9 fe ff       	call   c000e416 <FPU::FPU(char const*)>
c001fac3:	83 c4 10             	add    esp,0x10
c001fac6:	ba 18 52 02 c0       	mov    edx,0xc0025218
c001facb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001facf:	89 10                	mov    DWORD PTR [eax],edx
c001fad1:	90                   	nop
c001fad2:	83 c4 0c             	add    esp,0xc
c001fad5:	c3                   	ret    

c001fad6 <x87::open(int, int, void*)>:
c001fad6:	83 ec 0c             	sub    esp,0xc
c001fad9:	e8 14 10 00 00       	call   c0020af2 <x87Init>
c001fade:	b8 00 00 00 00       	mov    eax,0x0
c001fae3:	83 c4 0c             	add    esp,0xc
c001fae6:	c3                   	ret    
c001fae7:	90                   	nop

c001fae8 <x87::close(int, int, void*)>:
c001fae8:	83 ec 0c             	sub    esp,0xc
c001faeb:	e8 1c 10 00 00       	call   c0020b0c <x87Close>
c001faf0:	b8 00 00 00 00       	mov    eax,0x0
c001faf5:	83 c4 0c             	add    esp,0xc
c001faf8:	c3                   	ret    
c001faf9:	90                   	nop

c001fafa <x87::available()>:
c001fafa:	83 ec 0c             	sub    esp,0xc
c001fafd:	e8 c4 0f 00 00       	call   c0020ac6 <x87Detect>
c001fb02:	85 c0                	test   eax,eax
c001fb04:	0f 95 c0             	setne  al
c001fb07:	83 c4 0c             	add    esp,0xc
c001fb0a:	c3                   	ret    
c001fb0b:	90                   	nop

c001fb0c <x87::save(void*)>:
c001fb0c:	83 ec 0c             	sub    esp,0xc
c001fb0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb13:	83 ec 0c             	sub    esp,0xc
c001fb16:	50                   	push   eax
c001fb17:	e8 c5 0f 00 00       	call   c0020ae1 <x87Save>
c001fb1c:	83 c4 10             	add    esp,0x10
c001fb1f:	90                   	nop
c001fb20:	83 c4 0c             	add    esp,0xc
c001fb23:	c3                   	ret    

c001fb24 <x87::load(void*)>:
c001fb24:	83 ec 0c             	sub    esp,0xc
c001fb27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb2b:	83 ec 0c             	sub    esp,0xc
c001fb2e:	50                   	push   eax
c001fb2f:	e8 b6 0f 00 00       	call   c0020aea <x87Load>
c001fb34:	83 c4 10             	add    esp,0x10
c001fb37:	90                   	nop
c001fb38:	83 c4 0c             	add    esp,0xc
c001fb3b:	c3                   	ret    

c001fb3c <x87::x87()>:
c001fb3c:	83 ec 0c             	sub    esp,0xc
c001fb3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb43:	83 ec 08             	sub    esp,0x8
c001fb46:	68 48 52 02 c0       	push   0xc0025248
c001fb4b:	50                   	push   eax
c001fb4c:	e8 c5 e8 fe ff       	call   c000e416 <FPU::FPU(char const*)>
c001fb51:	83 c4 10             	add    esp,0x10
c001fb54:	ba 58 52 02 c0       	mov    edx,0xc0025258
c001fb59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5d:	89 10                	mov    DWORD PTR [eax],edx
c001fb5f:	90                   	nop
c001fb60:	83 c4 0c             	add    esp,0xc
c001fb63:	c3                   	ret    

c001fb64 <APIC::disable()>:
c001fb64:	90                   	nop
c001fb65:	c3                   	ret    

c001fb66 <APIC::close(int, int, void*)>:
c001fb66:	55                   	push   ebp
c001fb67:	89 e5                	mov    ebp,esp
c001fb69:	83 ec 08             	sub    esp,0x8
c001fb6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fb6f:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb71:	83 c0 3c             	add    eax,0x3c
c001fb74:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb76:	83 ec 0c             	sub    esp,0xc
c001fb79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fb7c:	ff d0                	call   eax
c001fb7e:	83 c4 10             	add    esp,0x10
c001fb81:	b8 00 00 00 00       	mov    eax,0x0
c001fb86:	c9                   	leave  
c001fb87:	c3                   	ret    

c001fb88 <IOAPIC::close(int, int, void*)>:
c001fb88:	b8 00 00 00 00       	mov    eax,0x0
c001fb8d:	c3                   	ret    

c001fb8e <APIC::io_wait()>:
c001fb8e:	eb 00                	jmp    c001fb90 <APIC::io_wait()+0x2>
c001fb90:	eb 00                	jmp    c001fb92 <APIC::io_wait()+0x4>
c001fb92:	90                   	nop
c001fb93:	c3                   	ret    

c001fb94 <APIC::getBase()>:
c001fb94:	55                   	push   ebp
c001fb95:	89 e5                	mov    ebp,esp
c001fb97:	83 ec 18             	sub    esp,0x18
c001fb9a:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c001fb9f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fba5:	83 e0 08             	and    eax,0x8
c001fba8:	84 c0                	test   al,al
c001fbaa:	75 07                	jne    c001fbb3 <APIC::getBase()+0x1f>
c001fbac:	b8 00 00 00 00       	mov    eax,0x0
c001fbb1:	eb 21                	jmp    c001fbd4 <APIC::getBase()+0x40>
c001fbb3:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c001fbb8:	83 ec 08             	sub    esp,0x8
c001fbbb:	6a 1b                	push   0x1b
c001fbbd:	50                   	push   eax
c001fbbe:	e8 01 94 fe ff       	call   c0008fc4 <Computer::rdmsr(unsigned int)>
c001fbc3:	83 c4 10             	add    esp,0x10
c001fbc6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001fbc9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001fbcc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001fbcf:	25 00 f0 ff ff       	and    eax,0xfffff000
c001fbd4:	c9                   	leave  
c001fbd5:	c3                   	ret    

c001fbd6 <APIC::eoi(unsigned char)>:
c001fbd6:	55                   	push   ebp
c001fbd7:	89 e5                	mov    ebp,esp
c001fbd9:	83 ec 28             	sub    esp,0x28
c001fbdc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fbdf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001fbe2:	83 ec 0c             	sub    esp,0xc
c001fbe5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fbe8:	e8 a7 ff ff ff       	call   c001fb94 <APIC::getBase()>
c001fbed:	83 c4 10             	add    esp,0x10
c001fbf0:	05 b0 00 00 00       	add    eax,0xb0
c001fbf5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001fbf8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001fbfb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fc01:	90                   	nop
c001fc02:	c9                   	leave  
c001fc03:	c3                   	ret    

c001fc04 <APIC::open(int, int, void*)>:
c001fc04:	55                   	push   ebp
c001fc05:	89 e5                	mov    ebp,esp
c001fc07:	57                   	push   edi
c001fc08:	56                   	push   esi
c001fc09:	53                   	push   ebx
c001fc0a:	83 ec 2c             	sub    esp,0x2c
c001fc0d:	83 ec 0c             	sub    esp,0xc
c001fc10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fc13:	e8 7c ff ff ff       	call   c001fb94 <APIC::getBase()>
c001fc18:	83 c4 10             	add    esp,0x10
c001fc1b:	89 c2                	mov    edx,eax
c001fc1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fc20:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fc26:	0f b6 f8             	movzx  edi,al
c001fc29:	89 d0                	mov    eax,edx
c001fc2b:	ba 00 00 00 00       	mov    edx,0x0
c001fc30:	89 c1                	mov    ecx,eax
c001fc32:	80 e5 ff             	and    ch,0xff
c001fc35:	89 cb                	mov    ebx,ecx
c001fc37:	0f b6 f2             	movzx  esi,dl
c001fc3a:	89 d8                	mov    eax,ebx
c001fc3c:	89 f2                	mov    edx,esi
c001fc3e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fc41:	8d 5f 08             	lea    ebx,[edi+0x8]
c001fc44:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001fc48:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001fc4c:	83 e0 00             	and    eax,0x0
c001fc4f:	09 d0                	or     eax,edx
c001fc51:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001fc55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fc58:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fc5e:	8d 50 01             	lea    edx,[eax+0x1]
c001fc61:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fc64:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001fc6a:	0f b6 d0             	movzx  edx,al
c001fc6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fc70:	83 c2 08             	add    edx,0x8
c001fc73:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001fc77:	0f b6 c9             	movzx  ecx,cl
c001fc7a:	81 c9 00 00 01 00    	or     ecx,0x10000
c001fc80:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001fc84:	83 ec 0c             	sub    esp,0xc
c001fc87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fc8a:	e8 05 ff ff ff       	call   c001fb94 <APIC::getBase()>
c001fc8f:	83 c4 10             	add    esp,0x10
c001fc92:	05 f0 00 00 00       	add    eax,0xf0
c001fc97:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001fc9a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fc9d:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc9f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001fca2:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c001fca9:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c001fcb0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fcb3:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001fcb6:	89 10                	mov    DWORD PTR [eax],edx
c001fcb8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c001fcbf:	a1 10 6b 02 c0       	mov    eax,ds:0xc0026b10
c001fcc4:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c001fcc7:	7d 7c                	jge    c001fd45 <APIC::open(int, int, void*)+0x141>
c001fcc9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fccc:	8b 04 85 20 6b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd94e0]
c001fcd3:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c001fcd6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fcd9:	8b 04 85 20 6b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd94e0]
c001fce0:	c1 e8 08             	shr    eax,0x8
c001fce3:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c001fce7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fcea:	8b 04 85 20 6b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd94e0]
c001fcf1:	c1 e8 18             	shr    eax,0x18
c001fcf4:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c001fcf7:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c001fcfb:	75 40                	jne    c001fd3d <APIC::open(int, int, void*)+0x139>
c001fcfd:	83 ec 0c             	sub    esp,0xc
c001fd00:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd03:	e8 8c fe ff ff       	call   c001fb94 <APIC::getBase()>
c001fd08:	83 c4 10             	add    esp,0x10
c001fd0b:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c001fd0f:	75 07                	jne    c001fd18 <APIC::open(int, int, void*)+0x114>
c001fd11:	ba 60 03 00 00       	mov    edx,0x360
c001fd16:	eb 05                	jmp    c001fd1d <APIC::open(int, int, void*)+0x119>
c001fd18:	ba 50 03 00 00       	mov    edx,0x350
c001fd1d:	01 d0                	add    eax,edx
c001fd1f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001fd22:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fd25:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd27:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c001fd2a:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c001fd31:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c001fd35:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fd38:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001fd3b:	89 10                	mov    DWORD PTR [eax],edx
c001fd3d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c001fd40:	e9 7a ff ff ff       	jmp    c001fcbf <APIC::open(int, int, void*)+0xbb>
c001fd45:	b8 00 00 00 00       	mov    eax,0x0
c001fd4a:	8d 65 f4             	lea    esp,[ebp-0xc]
c001fd4d:	5b                   	pop    ebx
c001fd4e:	5e                   	pop    esi
c001fd4f:	5f                   	pop    edi
c001fd50:	5d                   	pop    ebp
c001fd51:	c3                   	ret    

c001fd52 <IOAPIC::IOAPIC()>:
c001fd52:	83 ec 0c             	sub    esp,0xc
c001fd55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd59:	83 ec 08             	sub    esp,0x8
c001fd5c:	68 88 52 02 c0       	push   0xc0025288
c001fd61:	50                   	push   eax
c001fd62:	e8 9f e3 fe ff       	call   c000e106 <Device::Device(char const*)>
c001fd67:	83 c4 10             	add    esp,0x10
c001fd6a:	ba b0 53 02 c0       	mov    edx,0xc00253b0
c001fd6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd73:	89 10                	mov    DWORD PTR [eax],edx
c001fd75:	90                   	nop
c001fd76:	83 c4 0c             	add    esp,0xc
c001fd79:	c3                   	ret    

c001fd7a <APIC::APIC()>:
c001fd7a:	53                   	push   ebx
c001fd7b:	83 ec 18             	sub    esp,0x18
c001fd7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd82:	83 ec 08             	sub    esp,0x8
c001fd85:	68 90 52 02 c0       	push   0xc0025290
c001fd8a:	50                   	push   eax
c001fd8b:	e8 e0 ea fe ff       	call   c000e870 <InterruptController::InterruptController(char const*)>
c001fd90:	83 c4 10             	add    esp,0x10
c001fd93:	ba 68 53 02 c0       	mov    edx,0xc0025368
c001fd98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd9c:	89 10                	mov    DWORD PTR [eax],edx
c001fd9e:	a0 e0 81 02 c0       	mov    al,ds:0xc00281e0
c001fda3:	83 f0 01             	xor    eax,0x1
c001fda6:	84 c0                	test   al,al
c001fda8:	0f 84 a1 00 00 00    	je     c001fe4f <APIC::APIC()+0xd5>
c001fdae:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001fdb3:	a0 c0 6b 02 c0       	mov    al,ds:0xc0026bc0
c001fdb8:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001fdbc:	0f 83 86 00 00 00    	jae    c001fe48 <APIC::APIC()+0xce>
c001fdc2:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c001fdca:	83 ec 0c             	sub    esp,0xc
c001fdcd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fdd1:	e8 87 9c fe ff       	call   c0009a5d <malloc>
c001fdd6:	83 c4 10             	add    esp,0x10
c001fdd9:	89 c3                	mov    ebx,eax
c001fddb:	83 ec 0c             	sub    esp,0xc
c001fdde:	53                   	push   ebx
c001fddf:	e8 6e ff ff ff       	call   c001fd52 <IOAPIC::IOAPIC()>
c001fde4:	83 c4 10             	add    esp,0x10
c001fde7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001fdeb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001fdf0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fdf4:	89 14 85 c0 81 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7e40],edx
c001fdfb:	a1 a0 81 02 c0       	mov    eax,ds:0xc00281a0
c001fe00:	40                   	inc    eax
c001fe01:	a3 a0 81 02 c0       	mov    ds:0xc00281a0,eax
c001fe06:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c001fe0b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001fe11:	83 ec 08             	sub    esp,0x8
c001fe14:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fe18:	50                   	push   eax
c001fe19:	e8 e4 e0 fe ff       	call   c000df02 <Device::addChild(Device*)>
c001fe1e:	83 c4 10             	add    esp,0x10
c001fe21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe25:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe27:	83 c0 08             	add    eax,0x8
c001fe2a:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe2c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001fe31:	6a 00                	push   0x0
c001fe33:	6a 00                	push   0x0
c001fe35:	52                   	push   edx
c001fe36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fe3a:	ff d0                	call   eax
c001fe3c:	83 c4 10             	add    esp,0x10
c001fe3f:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001fe43:	e9 6b ff ff ff       	jmp    c001fdb3 <APIC::APIC()+0x39>
c001fe48:	c6 05 e0 81 02 c0 01 	mov    BYTE PTR ds:0xc00281e0,0x1
c001fe4f:	90                   	nop
c001fe50:	83 c4 18             	add    esp,0x18
c001fe53:	5b                   	pop    ebx
c001fe54:	c3                   	ret    
c001fe55:	90                   	nop

c001fe56 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001fe56:	55                   	push   ebp
c001fe57:	89 e5                	mov    ebp,esp
c001fe59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fe5c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001fe62:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001fe65:	72 1d                	jb     c001fe84 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001fe67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fe6a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001fe70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fe73:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001fe79:	01 d0                	add    eax,edx
c001fe7b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001fe7e:	73 04                	jae    c001fe84 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001fe80:	b0 01                	mov    al,0x1
c001fe82:	eb 02                	jmp    c001fe86 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001fe84:	b0 00                	mov    al,0x0
c001fe86:	5d                   	pop    ebp
c001fe87:	c3                   	ret    

c001fe88 <IOAPIC::read(int)>:
c001fe88:	55                   	push   ebp
c001fe89:	89 e5                	mov    ebp,esp
c001fe8b:	83 ec 10             	sub    esp,0x10
c001fe8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fe91:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fe97:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001fe9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fe9d:	0f b6 d0             	movzx  edx,al
c001fea0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001fea3:	89 10                	mov    DWORD PTR [eax],edx
c001fea5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001fea8:	83 c0 10             	add    eax,0x10
c001feab:	8b 00                	mov    eax,DWORD PTR [eax]
c001fead:	c9                   	leave  
c001feae:	c3                   	ret    
c001feaf:	90                   	nop

c001feb0 <IOAPIC::open(int, int, void*)>:
c001feb0:	55                   	push   ebp
c001feb1:	89 e5                	mov    ebp,esp
c001feb3:	57                   	push   edi
c001feb4:	56                   	push   esi
c001feb5:	53                   	push   ebx
c001feb6:	83 ec 0c             	sub    esp,0xc
c001feb9:	83 ec 0c             	sub    esp,0xc
c001febc:	68 bb 52 02 c0       	push   0xc00252bb
c001fec1:	e8 f8 cb fe ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c001fec6:	83 c4 10             	add    esp,0x10
c001fec9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fecc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001fecf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001fed5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fed8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fede:	8b 14 85 00 6c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9400]
c001fee5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fee8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001feee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fef1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fef7:	8b 14 85 80 6c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9380]
c001fefe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff01:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ff07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff0a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ff10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff13:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ff19:	0f b6 f8             	movzx  edi,al
c001ff1c:	89 d0                	mov    eax,edx
c001ff1e:	ba 00 00 00 00       	mov    edx,0x0
c001ff23:	89 c1                	mov    ecx,eax
c001ff25:	80 e5 ff             	and    ch,0xff
c001ff28:	89 cb                	mov    ebx,ecx
c001ff2a:	0f b6 f2             	movzx  esi,dl
c001ff2d:	89 d8                	mov    eax,ebx
c001ff2f:	89 f2                	mov    edx,esi
c001ff31:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ff34:	8d 5f 08             	lea    ebx,[edi+0x8]
c001ff37:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ff3b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ff3f:	83 e0 00             	and    eax,0x0
c001ff42:	09 d0                	or     eax,edx
c001ff44:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ff48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff4b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ff51:	8d 50 01             	lea    edx,[eax+0x1]
c001ff54:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ff57:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ff5d:	0f b6 d0             	movzx  edx,al
c001ff60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff63:	83 c2 08             	add    edx,0x8
c001ff66:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ff6a:	0f b6 c9             	movzx  ecx,cl
c001ff6d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ff73:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ff77:	83 ec 08             	sub    esp,0x8
c001ff7a:	6a 01                	push   0x1
c001ff7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ff7f:	e8 04 ff ff ff       	call   c001fe88 <IOAPIC::read(int)>
c001ff84:	83 c4 10             	add    esp,0x10
c001ff87:	c1 f8 10             	sar    eax,0x10
c001ff8a:	0f b6 c0             	movzx  eax,al
c001ff8d:	8d 50 01             	lea    edx,[eax+0x1]
c001ff90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff93:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ff99:	b8 00 00 00 00       	mov    eax,0x0
c001ff9e:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ffa1:	5b                   	pop    ebx
c001ffa2:	5e                   	pop    esi
c001ffa3:	5f                   	pop    edi
c001ffa4:	5d                   	pop    ebp
c001ffa5:	c3                   	ret    

c001ffa6 <IOAPIC::write(int, int)>:
c001ffa6:	55                   	push   ebp
c001ffa7:	89 e5                	mov    ebp,esp
c001ffa9:	83 ec 10             	sub    esp,0x10
c001ffac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffaf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ffb5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ffb8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ffbb:	0f b6 d0             	movzx  edx,al
c001ffbe:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ffc1:	89 10                	mov    DWORD PTR [eax],edx
c001ffc3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ffc6:	8d 50 10             	lea    edx,[eax+0x10]
c001ffc9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ffcc:	89 02                	mov    DWORD PTR [edx],eax
c001ffce:	90                   	nop
c001ffcf:	c9                   	leave  
c001ffd0:	c3                   	ret    
c001ffd1:	90                   	nop

c001ffd2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ffd2:	55                   	push   ebp
c001ffd3:	89 e5                	mov    ebp,esp
c001ffd5:	53                   	push   ebx
c001ffd6:	83 ec 2c             	sub    esp,0x2c
c001ffd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ffdc:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ffdf:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ffe2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ffe5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ffe8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ffeb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ffee:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001fff1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001fff4:	88 d8                	mov    al,bl
c001fff6:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001fff9:	88 c8                	mov    al,cl
c001fffb:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001fffe:	88 d0                	mov    al,dl
c0020000:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0020003:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020007:	83 c0 08             	add    eax,0x8
c002000a:	01 c0                	add    eax,eax
c002000c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002000f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020013:	83 c0 08             	add    eax,0x8
c0020016:	01 c0                	add    eax,eax
c0020018:	40                   	inc    eax
c0020019:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002001c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002001f:	50                   	push   eax
c0020020:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020023:	e8 60 fe ff ff       	call   c001fe88 <IOAPIC::read(int)>
c0020028:	83 c4 08             	add    esp,0x8
c002002b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002002e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020035:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020038:	c1 e0 18             	shl    eax,0x18
c002003b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002003e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020041:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020044:	52                   	push   edx
c0020045:	50                   	push   eax
c0020046:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020049:	e8 58 ff ff ff       	call   c001ffa6 <IOAPIC::write(int, int)>
c002004e:	83 c4 0c             	add    esp,0xc
c0020051:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020054:	50                   	push   eax
c0020055:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020058:	e8 2b fe ff ff       	call   c001fe88 <IOAPIC::read(int)>
c002005d:	83 c4 08             	add    esp,0x8
c0020060:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0020063:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002006a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0020071:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0020078:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002007c:	74 09                	je     c0020087 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002007e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0020085:	eb 07                	jmp    c002008e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0020087:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002008e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0020092:	74 09                	je     c002009d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0020094:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002009b:	eb 07                	jmp    c00200a4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002009d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00200a4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00200ab:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00200af:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00200b2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00200b5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00200b8:	52                   	push   edx
c00200b9:	50                   	push   eax
c00200ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00200bd:	e8 e4 fe ff ff       	call   c001ffa6 <IOAPIC::write(int, int)>
c00200c2:	83 c4 0c             	add    esp,0xc
c00200c5:	90                   	nop
c00200c6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00200c9:	c9                   	leave  
c00200ca:	c3                   	ret    
c00200cb:	90                   	nop

c00200cc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00200cc:	55                   	push   ebp
c00200cd:	89 e5                	mov    ebp,esp
c00200cf:	57                   	push   edi
c00200d0:	56                   	push   esi
c00200d1:	53                   	push   ebx
c00200d2:	83 ec 2c             	sub    esp,0x2c
c00200d5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00200d8:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00200db:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00200df:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00200e3:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00200e7:	74 5a                	je     c0020143 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00200e9:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00200ed:	7f 44                	jg     c0020133 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00200ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00200f2:	05 60 59 02 c0       	add    eax,0xc0025960
c00200f7:	8a 00                	mov    al,BYTE PTR [eax]
c00200f9:	0f b6 c0             	movzx  eax,al
c00200fc:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00200ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020102:	66 8b 84 00 a0 6b 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd9460]
c002010a:	0f b7 c0             	movzx  eax,ax
c002010d:	83 e0 02             	and    eax,0x2
c0020110:	85 c0                	test   eax,eax
c0020112:	74 04                	je     c0020118 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0020114:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0020118:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002011b:	66 8b 84 00 a0 6b 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd9460]
c0020123:	0f b7 c0             	movzx  eax,ax
c0020126:	83 e0 08             	and    eax,0x8
c0020129:	85 c0                	test   eax,eax
c002012b:	74 16                	je     c0020143 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002012d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0020131:	eb 10                	jmp    c0020143 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0020133:	83 ec 0c             	sub    esp,0xc
c0020136:	68 cc 52 02 c0       	push   0xc00252cc
c002013b:	e8 3d 43 ff ff       	call   c001447d <Krnl::panic(char const*)>
c0020140:	83 c4 10             	add    esp,0x10
c0020143:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0020147:	a1 a0 81 02 c0       	mov    eax,ds:0xc00281a0
c002014c:	83 ec 08             	sub    esp,0x8
c002014f:	50                   	push   eax
c0020150:	68 04 53 02 c0       	push   0xc0025304
c0020155:	e8 64 c9 fe ff       	call   c000cabe <Dbg::kprintf(char const*, ...)>
c002015a:	83 c4 10             	add    esp,0x10
c002015d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0020164:	a1 a0 81 02 c0       	mov    eax,ds:0xc00281a0
c0020169:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002016c:	7d 67                	jge    c00201d5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002016e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0020171:	8b 04 85 c0 81 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7e40]
c0020178:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002017b:	83 ec 08             	sub    esp,0x8
c002017e:	52                   	push   edx
c002017f:	50                   	push   eax
c0020180:	e8 d1 fc ff ff       	call   c001fe56 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0020185:	83 c4 10             	add    esp,0x10
c0020188:	84 c0                	test   al,al
c002018a:	74 44                	je     c00201d0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002018c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002018f:	8b 1c 85 c0 81 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7e40]
c0020196:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002019a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002019d:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00201a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00201a4:	83 c0 20             	add    eax,0x20
c00201a7:	0f b6 f0             	movzx  esi,al
c00201aa:	b8 00 00 00 00       	mov    eax,0x0
c00201af:	99                   	cdq    
c00201b0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00201b3:	0f b6 c9             	movzx  ecx,cl
c00201b6:	83 ec 04             	sub    esp,0x4
c00201b9:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00201bc:	57                   	push   edi
c00201bd:	56                   	push   esi
c00201be:	52                   	push   edx
c00201bf:	50                   	push   eax
c00201c0:	51                   	push   ecx
c00201c1:	53                   	push   ebx
c00201c2:	e8 0b fe ff ff       	call   c001ffd2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00201c7:	83 c4 20             	add    esp,0x20
c00201ca:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00201ce:	eb 05                	jmp    c00201d5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00201d0:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00201d3:	eb 8f                	jmp    c0020164 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00201d5:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00201d8:	83 f0 01             	xor    eax,0x1
c00201db:	84 c0                	test   al,al
c00201dd:	74 10                	je     c00201ef <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00201df:	83 ec 0c             	sub    esp,0xc
c00201e2:	68 1b 53 02 c0       	push   0xc002531b
c00201e7:	e8 91 42 ff ff       	call   c001447d <Krnl::panic(char const*)>
c00201ec:	83 c4 10             	add    esp,0x10
c00201ef:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00201f3:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00201fa:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00201fe:	7f 65                	jg     c0020265 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0020200:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020203:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020206:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002020d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020210:	01 ca                	add    edx,ecx
c0020212:	83 c2 54             	add    edx,0x54
c0020215:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0020219:	85 c0                	test   eax,eax
c002021b:	75 43                	jne    c0020260 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002021d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020220:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020223:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002022a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002022d:	01 ca                	add    edx,ecx
c002022f:	8d 4a 54             	lea    ecx,[edx+0x54]
c0020232:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0020235:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0020239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002023c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002023f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0020246:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020249:	01 ca                	add    edx,ecx
c002024b:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0020251:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0020254:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0020258:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002025b:	83 e8 20             	sub    eax,0x20
c002025e:	eb 1a                	jmp    c002027a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0020260:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0020263:	eb 95                	jmp    c00201fa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0020265:	83 ec 0c             	sub    esp,0xc
c0020268:	68 28 53 02 c0       	push   0xc0025328
c002026d:	e8 0b 42 ff ff       	call   c001447d <Krnl::panic(char const*)>
c0020272:	83 c4 10             	add    esp,0x10
c0020275:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002027a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002027d:	5b                   	pop    ebx
c002027e:	5e                   	pop    esi
c002027f:	5f                   	pop    edi
c0020280:	5d                   	pop    ebp
c0020281:	c3                   	ret    

c0020282 <PIC::disable()>:
c0020282:	55                   	push   ebp
c0020283:	89 e5                	mov    ebp,esp
c0020285:	83 ec 10             	sub    esp,0x10
c0020288:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002028e:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0020292:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0020295:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0020299:	ee                   	out    dx,al
c002029a:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00202a0:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00202a4:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00202a7:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00202ab:	ee                   	out    dx,al
c00202ac:	90                   	nop
c00202ad:	c9                   	leave  
c00202ae:	c3                   	ret    
c00202af:	90                   	nop

c00202b0 <PIC::close(int, int, void*)>:
c00202b0:	55                   	push   ebp
c00202b1:	89 e5                	mov    ebp,esp
c00202b3:	83 ec 08             	sub    esp,0x8
c00202b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00202b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00202bb:	83 c0 3c             	add    eax,0x3c
c00202be:	8b 00                	mov    eax,DWORD PTR [eax]
c00202c0:	83 ec 0c             	sub    esp,0xc
c00202c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00202c6:	ff d0                	call   eax
c00202c8:	83 c4 10             	add    esp,0x10
c00202cb:	b8 00 00 00 00       	mov    eax,0x0
c00202d0:	c9                   	leave  
c00202d1:	c3                   	ret    

c00202d2 <PIC::PIC()>:
c00202d2:	83 ec 0c             	sub    esp,0xc
c00202d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202d9:	83 ec 08             	sub    esp,0x8
c00202dc:	68 d4 53 02 c0       	push   0xc00253d4
c00202e1:	50                   	push   eax
c00202e2:	e8 89 e5 fe ff       	call   c000e870 <InterruptController::InterruptController(char const*)>
c00202e7:	83 c4 10             	add    esp,0x10
c00202ea:	ba 00 54 02 c0       	mov    edx,0xc0025400
c00202ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202f3:	89 10                	mov    DWORD PTR [eax],edx
c00202f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202f9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00202ff:	0f b6 d0             	movzx  edx,al
c0020302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020306:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002030d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020311:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020317:	0f b6 d0             	movzx  edx,al
c002031a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002031e:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0020323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020327:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002032d:	8d 50 01             	lea    edx,[eax+0x1]
c0020330:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020334:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002033a:	0f b6 d0             	movzx  edx,al
c002033d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020341:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020345:	83 e1 3f             	and    ecx,0x3f
c0020348:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002034c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020350:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020356:	0f b6 d0             	movzx  edx,al
c0020359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002035d:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0020364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020368:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002036e:	0f b6 d0             	movzx  edx,al
c0020371:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020375:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002037a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002037e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020384:	8d 50 01             	lea    edx,[eax+0x1]
c0020387:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002038b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020391:	0f b6 d0             	movzx  edx,al
c0020394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020398:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002039c:	83 e1 3f             	and    ecx,0x3f
c002039f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00203a3:	90                   	nop
c00203a4:	83 c4 0c             	add    esp,0xc
c00203a7:	c3                   	ret    

c00203a8 <PIC::ioWait()>:
c00203a8:	eb 00                	jmp    c00203aa <PIC::ioWait()+0x2>
c00203aa:	eb 00                	jmp    c00203ac <PIC::ioWait()+0x4>
c00203ac:	90                   	nop
c00203ad:	c3                   	ret    

c00203ae <PIC::getIRQReg(int)>:
c00203ae:	55                   	push   ebp
c00203af:	89 e5                	mov    ebp,esp
c00203b1:	83 ec 10             	sub    esp,0x10
c00203b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00203b7:	0f b6 c0             	movzx  eax,al
c00203ba:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00203c0:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00203c3:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00203c6:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00203ca:	ee                   	out    dx,al
c00203cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00203ce:	0f b6 c0             	movzx  eax,al
c00203d1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00203d7:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00203da:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00203dd:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00203e1:	ee                   	out    dx,al
c00203e2:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00203e8:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00203ec:	89 c2                	mov    edx,eax
c00203ee:	ec                   	in     al,dx
c00203ef:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00203f2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00203f5:	0f b6 c0             	movzx  eax,al
c00203f8:	c1 e0 08             	shl    eax,0x8
c00203fb:	89 c1                	mov    ecx,eax
c00203fd:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0020403:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0020407:	89 c2                	mov    edx,eax
c0020409:	ec                   	in     al,dx
c002040a:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002040d:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0020410:	0f b6 c0             	movzx  eax,al
c0020413:	09 c8                	or     eax,ecx
c0020415:	c9                   	leave  
c0020416:	c3                   	ret    
c0020417:	90                   	nop

c0020418 <PIC::eoi(unsigned char)>:
c0020418:	55                   	push   ebp
c0020419:	89 e5                	mov    ebp,esp
c002041b:	83 ec 14             	sub    esp,0x14
c002041e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020421:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0020424:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0020428:	75 1e                	jne    c0020448 <PIC::eoi(unsigned char)+0x30>
c002042a:	6a 0b                	push   0xb
c002042c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002042f:	e8 7a ff ff ff       	call   c00203ae <PIC::getIRQReg(int)>
c0020434:	83 c4 08             	add    esp,0x8
c0020437:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002043b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002043f:	25 80 00 00 00       	and    eax,0x80
c0020444:	85 c0                	test   eax,eax
c0020446:	74 5f                	je     c00204a7 <PIC::eoi(unsigned char)+0x8f>
c0020448:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002044c:	75 2d                	jne    c002047b <PIC::eoi(unsigned char)+0x63>
c002044e:	6a 0b                	push   0xb
c0020450:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020453:	e8 56 ff ff ff       	call   c00203ae <PIC::getIRQReg(int)>
c0020458:	83 c4 08             	add    esp,0x8
c002045b:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002045f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020462:	66 85 c0             	test   ax,ax
c0020465:	78 14                	js     c002047b <PIC::eoi(unsigned char)+0x63>
c0020467:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002046d:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0020471:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0020474:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0020478:	ee                   	out    dx,al
c0020479:	eb 2d                	jmp    c00204a8 <PIC::eoi(unsigned char)+0x90>
c002047b:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002047f:	76 12                	jbe    c0020493 <PIC::eoi(unsigned char)+0x7b>
c0020481:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0020487:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002048b:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002048e:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0020492:	ee                   	out    dx,al
c0020493:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0020499:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002049d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00204a0:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00204a4:	ee                   	out    dx,al
c00204a5:	eb 01                	jmp    c00204a8 <PIC::eoi(unsigned char)+0x90>
c00204a7:	90                   	nop
c00204a8:	c9                   	leave  
c00204a9:	c3                   	ret    

c00204aa <PIC::remap()>:
c00204aa:	55                   	push   ebp
c00204ab:	89 e5                	mov    ebp,esp
c00204ad:	83 ec 48             	sub    esp,0x48
c00204b0:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00204b7:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00204be:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00204c4:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00204c7:	89 c2                	mov    edx,eax
c00204c9:	ec                   	in     al,dx
c00204ca:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00204cd:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00204d0:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00204d3:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00204d9:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00204dc:	89 c2                	mov    edx,eax
c00204de:	ec                   	in     al,dx
c00204df:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00204e2:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00204e5:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00204e8:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00204ee:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00204f2:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00204f5:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00204f8:	ee                   	out    dx,al
c00204f9:	83 ec 0c             	sub    esp,0xc
c00204fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00204ff:	e8 a4 fe ff ff       	call   c00203a8 <PIC::ioWait()>
c0020504:	83 c4 10             	add    esp,0x10
c0020507:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002050d:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0020511:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0020514:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0020517:	ee                   	out    dx,al
c0020518:	83 ec 0c             	sub    esp,0xc
c002051b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002051e:	e8 85 fe ff ff       	call   c00203a8 <PIC::ioWait()>
c0020523:	83 c4 10             	add    esp,0x10
c0020526:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0020529:	0f b6 c0             	movzx  eax,al
c002052c:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0020532:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0020535:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0020538:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002053b:	ee                   	out    dx,al
c002053c:	83 ec 0c             	sub    esp,0xc
c002053f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020542:	e8 61 fe ff ff       	call   c00203a8 <PIC::ioWait()>
c0020547:	83 c4 10             	add    esp,0x10
c002054a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002054d:	0f b6 c0             	movzx  eax,al
c0020550:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0020556:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0020559:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002055c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002055f:	ee                   	out    dx,al
c0020560:	83 ec 0c             	sub    esp,0xc
c0020563:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020566:	e8 3d fe ff ff       	call   c00203a8 <PIC::ioWait()>
c002056b:	83 c4 10             	add    esp,0x10
c002056e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0020574:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0020578:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002057b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002057e:	ee                   	out    dx,al
c002057f:	83 ec 0c             	sub    esp,0xc
c0020582:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020585:	e8 1e fe ff ff       	call   c00203a8 <PIC::ioWait()>
c002058a:	83 c4 10             	add    esp,0x10
c002058d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0020593:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0020597:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002059a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002059d:	ee                   	out    dx,al
c002059e:	83 ec 0c             	sub    esp,0xc
c00205a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00205a4:	e8 ff fd ff ff       	call   c00203a8 <PIC::ioWait()>
c00205a9:	83 c4 10             	add    esp,0x10
c00205ac:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00205b2:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00205b6:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00205b9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00205bc:	ee                   	out    dx,al
c00205bd:	83 ec 0c             	sub    esp,0xc
c00205c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00205c3:	e8 e0 fd ff ff       	call   c00203a8 <PIC::ioWait()>
c00205c8:	83 c4 10             	add    esp,0x10
c00205cb:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00205d1:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00205d5:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00205d8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00205db:	ee                   	out    dx,al
c00205dc:	83 ec 0c             	sub    esp,0xc
c00205df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00205e2:	e8 c1 fd ff ff       	call   c00203a8 <PIC::ioWait()>
c00205e7:	83 c4 10             	add    esp,0x10
c00205ea:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00205ee:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00205f4:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00205f7:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00205fa:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00205fd:	ee                   	out    dx,al
c00205fe:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0020602:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0020608:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002060b:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002060e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020611:	ee                   	out    dx,al
c0020612:	90                   	nop
c0020613:	c9                   	leave  
c0020614:	c3                   	ret    
c0020615:	90                   	nop

c0020616 <PIC::open(int, int, void*)>:
c0020616:	55                   	push   ebp
c0020617:	89 e5                	mov    ebp,esp
c0020619:	83 ec 18             	sub    esp,0x18
c002061c:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0020622:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0020626:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0020629:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002062d:	ee                   	out    dx,al
c002062e:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0020634:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0020638:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002063b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002063f:	ee                   	out    dx,al
c0020640:	83 ec 0c             	sub    esp,0xc
c0020643:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020646:	e8 5f fe ff ff       	call   c00204aa <PIC::remap()>
c002064b:	83 c4 10             	add    esp,0x10
c002064e:	b8 00 00 00 00       	mov    eax,0x0
c0020653:	c9                   	leave  
c0020654:	c3                   	ret    
c0020655:	90                   	nop

c0020656 <APICTimer::close(int, int, void*)>:
c0020656:	b8 00 00 00 00       	mov    eax,0x0
c002065b:	c3                   	ret    

c002065c <apicTimerHandler(regs*, void*)>:
c002065c:	83 ec 0c             	sub    esp,0xc
c002065f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020663:	8b 00                	mov    eax,DWORD PTR [eax]
c0020665:	99                   	cdq    
c0020666:	52                   	push   edx
c0020667:	50                   	push   eax
c0020668:	6a 00                	push   0x0
c002066a:	68 00 ca 9a 3b       	push   0x3b9aca00
c002066f:	e8 90 07 00 00       	call   c0020e04 <__udivdi3>
c0020674:	83 c4 10             	add    esp,0x10
c0020677:	83 ec 08             	sub    esp,0x8
c002067a:	52                   	push   edx
c002067b:	50                   	push   eax
c002067c:	e8 4c 03 ff ff       	call   c00109cd <timerHandler(unsigned long long)>
c0020681:	83 c4 10             	add    esp,0x10
c0020684:	90                   	nop
c0020685:	83 c4 0c             	add    esp,0xc
c0020688:	c3                   	ret    
c0020689:	90                   	nop

c002068a <APICTimer::write(int)>:
c002068a:	53                   	push   ebx
c002068b:	83 ec 28             	sub    esp,0x28
c002068e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020692:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0020696:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002069c:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c00206a1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00206a7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00206ad:	83 ec 0c             	sub    esp,0xc
c00206b0:	50                   	push   eax
c00206b1:	e8 de f4 ff ff       	call   c001fb94 <APIC::getBase()>
c00206b6:	83 c4 10             	add    esp,0x10
c00206b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00206bd:	a1 d0 68 02 c0       	mov    eax,ds:0xc00268d0
c00206c2:	8b 15 d4 68 02 c0    	mov    edx,DWORD PTR ds:0xc00268d4
c00206c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00206cc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00206d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00206d4:	05 e0 03 00 00       	add    eax,0x3e0
c00206d9:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00206df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00206e3:	05 80 03 00 00       	add    eax,0x380
c00206e8:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00206ee:	fb                   	sti    
c00206ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00206f7:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00206fc:	83 d2 00             	adc    edx,0x0
c00206ff:	89 c1                	mov    ecx,eax
c0020701:	89 d3                	mov    ebx,edx
c0020703:	a1 d0 68 02 c0       	mov    eax,ds:0xc00268d0
c0020708:	8b 15 d4 68 02 c0    	mov    edx,DWORD PTR ds:0xc00268d4
c002070e:	39 c8                	cmp    eax,ecx
c0020710:	89 d0                	mov    eax,edx
c0020712:	19 d8                	sbb    eax,ebx
c0020714:	73 02                	jae    c0020718 <APICTimer::write(int)+0x8e>
c0020716:	eb d7                	jmp    c00206ef <APICTimer::write(int)+0x65>
c0020718:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002071c:	05 20 03 00 00       	add    eax,0x320
c0020721:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0020727:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002072b:	05 90 03 00 00       	add    eax,0x390
c0020730:	8b 00                	mov    eax,DWORD PTR [eax]
c0020732:	f7 d0                	not    eax
c0020734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020738:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002073c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020740:	ba 00 00 00 00       	mov    edx,0x0
c0020745:	f7 f3                	div    ebx
c0020747:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002074b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002074f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020755:	0d 00 00 02 00       	or     eax,0x20000
c002075a:	89 c2                	mov    edx,eax
c002075c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020760:	05 20 03 00 00       	add    eax,0x320
c0020765:	89 10                	mov    DWORD PTR [eax],edx
c0020767:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002076b:	05 e0 03 00 00       	add    eax,0x3e0
c0020770:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0020776:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002077a:	05 80 03 00 00       	add    eax,0x380
c002077f:	89 c2                	mov    edx,eax
c0020781:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020785:	89 02                	mov    DWORD PTR [edx],eax
c0020787:	90                   	nop
c0020788:	83 c4 28             	add    esp,0x28
c002078b:	5b                   	pop    ebx
c002078c:	c3                   	ret    
c002078d:	90                   	nop

c002078e <APICTimer::open(int, int, void*)>:
c002078e:	57                   	push   edi
c002078f:	56                   	push   esi
c0020790:	53                   	push   ebx
c0020791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020795:	8b 00                	mov    eax,DWORD PTR [eax]
c0020797:	83 c0 24             	add    eax,0x24
c002079a:	8b 00                	mov    eax,DWORD PTR [eax]
c002079c:	83 ec 08             	sub    esp,0x8
c002079f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207a7:	ff d0                	call   eax
c00207a9:	83 c4 10             	add    esp,0x10
c00207ac:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c00207b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00207b7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00207bd:	83 ec 0c             	sub    esp,0xc
c00207c0:	50                   	push   eax
c00207c1:	e8 ce f3 ff ff       	call   c001fb94 <APIC::getBase()>
c00207c6:	83 c4 10             	add    esp,0x10
c00207c9:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00207cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207d3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00207d9:	0f b6 f8             	movzx  edi,al
c00207dc:	89 d0                	mov    eax,edx
c00207de:	ba 00 00 00 00       	mov    edx,0x0
c00207e3:	89 c1                	mov    ecx,eax
c00207e5:	80 e5 ff             	and    ch,0xff
c00207e8:	89 cb                	mov    ebx,ecx
c00207ea:	0f b6 f2             	movzx  esi,dl
c00207ed:	89 d8                	mov    eax,ebx
c00207ef:	89 f2                	mov    edx,esi
c00207f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00207f5:	8d 5f 08             	lea    ebx,[edi+0x8]
c00207f8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00207fc:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020800:	83 e0 00             	and    eax,0x0
c0020803:	09 d0                	or     eax,edx
c0020805:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002080d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020813:	8d 50 01             	lea    edx,[eax+0x1]
c0020816:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002081a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0020820:	0f b6 d0             	movzx  edx,al
c0020823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020827:	83 c2 08             	add    edx,0x8
c002082a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002082e:	0f b6 c9             	movzx  ecx,cl
c0020831:	81 c9 00 00 01 00    	or     ecx,0x10000
c0020837:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002083b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002083f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020843:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002084d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020851:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020857:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002085b:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020861:	83 ec 0c             	sub    esp,0xc
c0020864:	51                   	push   ecx
c0020865:	6a 01                	push   0x1
c0020867:	68 5c 06 02 c0       	push   0xc002065c
c002086c:	52                   	push   edx
c002086d:	50                   	push   eax
c002086e:	e8 07 d6 fe ff       	call   c000de7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020873:	83 c4 20             	add    esp,0x20
c0020876:	89 c2                	mov    edx,eax
c0020878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002087c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020882:	b8 00 00 00 00       	mov    eax,0x0
c0020887:	5b                   	pop    ebx
c0020888:	5e                   	pop    esi
c0020889:	5f                   	pop    edi
c002088a:	c3                   	ret    
c002088b:	90                   	nop

c002088c <APICTimer::APICTimer()>:
c002088c:	83 ec 0c             	sub    esp,0xc
c002088f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020893:	83 ec 08             	sub    esp,0x8
c0020896:	68 40 54 02 c0       	push   0xc0025440
c002089b:	50                   	push   eax
c002089c:	e8 9d 00 ff ff       	call   c001093e <Timer::Timer(char const*)>
c00208a1:	83 c4 10             	add    esp,0x10
c00208a4:	ba 54 54 02 c0       	mov    edx,0xc0025454
c00208a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208ad:	89 10                	mov    DWORD PTR [eax],edx
c00208af:	90                   	nop
c00208b0:	83 c4 0c             	add    esp,0xc
c00208b3:	c3                   	ret    

c00208b4 <PIT::write(int)>:
c00208b4:	83 ec 10             	sub    esp,0x10
c00208b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00208bf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00208c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00208c9:	a3 e4 81 02 c0       	mov    ds:0xc00281e4,eax
c00208ce:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00208d3:	99                   	cdq    
c00208d4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00208d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208dc:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00208e3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00208e8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00208ec:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00208f1:	ee                   	out    dx,al
c00208f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208f6:	0f b6 c0             	movzx  eax,al
c00208f9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0020900:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020904:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020908:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002090d:	ee                   	out    dx,al
c002090e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020912:	c1 f8 08             	sar    eax,0x8
c0020915:	0f b6 c0             	movzx  eax,al
c0020918:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002091f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020923:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020927:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002092c:	ee                   	out    dx,al
c002092d:	90                   	nop
c002092e:	83 c4 10             	add    esp,0x10
c0020931:	c3                   	ret    

c0020932 <pitHandler(regs*, void*)>:
c0020932:	83 ec 0c             	sub    esp,0xc
c0020935:	a1 e4 81 02 c0       	mov    eax,ds:0xc00281e4
c002093a:	99                   	cdq    
c002093b:	52                   	push   edx
c002093c:	50                   	push   eax
c002093d:	6a 00                	push   0x0
c002093f:	68 00 ca 9a 3b       	push   0x3b9aca00
c0020944:	e8 bb 04 00 00       	call   c0020e04 <__udivdi3>
c0020949:	83 c4 10             	add    esp,0x10
c002094c:	83 ec 08             	sub    esp,0x8
c002094f:	52                   	push   edx
c0020950:	50                   	push   eax
c0020951:	e8 77 00 ff ff       	call   c00109cd <timerHandler(unsigned long long)>
c0020956:	83 c4 10             	add    esp,0x10
c0020959:	90                   	nop
c002095a:	83 c4 0c             	add    esp,0xc
c002095d:	c3                   	ret    

c002095e <PIT::open(int, int, void*)>:
c002095e:	83 ec 0c             	sub    esp,0xc
c0020961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020965:	8b 00                	mov    eax,DWORD PTR [eax]
c0020967:	83 c0 24             	add    eax,0x24
c002096a:	8b 00                	mov    eax,DWORD PTR [eax]
c002096c:	83 ec 08             	sub    esp,0x8
c002096f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020973:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020977:	ff d0                	call   eax
c0020979:	83 c4 10             	add    esp,0x10
c002097c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020980:	83 ec 0c             	sub    esp,0xc
c0020983:	6a 00                	push   0x0
c0020985:	6a 01                	push   0x1
c0020987:	68 32 09 02 c0       	push   0xc0020932
c002098c:	6a 00                	push   0x0
c002098e:	50                   	push   eax
c002098f:	e8 e6 d4 fe ff       	call   c000de7a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020994:	83 c4 20             	add    esp,0x20
c0020997:	89 c2                	mov    edx,eax
c0020999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002099d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00209a3:	b8 00 00 00 00       	mov    eax,0x0
c00209a8:	83 c4 0c             	add    esp,0xc
c00209ab:	c3                   	ret    

c00209ac <PIT::close(int, int, void*)>:
c00209ac:	83 ec 0c             	sub    esp,0xc
c00209af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209b3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00209bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209c1:	6a 01                	push   0x1
c00209c3:	68 32 09 02 c0       	push   0xc0020932
c00209c8:	6a 00                	push   0x0
c00209ca:	50                   	push   eax
c00209cb:	e8 f4 d4 fe ff       	call   c000dec4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00209d0:	83 c4 10             	add    esp,0x10
c00209d3:	b8 00 00 00 00       	mov    eax,0x0
c00209d8:	83 c4 0c             	add    esp,0xc
c00209db:	c3                   	ret    

c00209dc <PIT::PIT()>:
c00209dc:	83 ec 0c             	sub    esp,0xc
c00209df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209e3:	83 ec 08             	sub    esp,0x8
c00209e6:	68 7c 54 02 c0       	push   0xc002547c
c00209eb:	50                   	push   eax
c00209ec:	e8 4d ff fe ff       	call   c001093e <Timer::Timer(char const*)>
c00209f1:	83 c4 10             	add    esp,0x10
c00209f4:	ba a4 54 02 c0       	mov    edx,0xc00254a4
c00209f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209fd:	89 10                	mov    DWORD PTR [eax],edx
c00209ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a03:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020a09:	0f b6 d0             	movzx  edx,al
c0020a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a10:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a1b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020a21:	0f b6 d0             	movzx  edx,al
c0020a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a28:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a31:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020a37:	8d 50 01             	lea    edx,[eax+0x1]
c0020a3a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020a3e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020a44:	0f b6 d0             	movzx  edx,al
c0020a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a4b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020a4f:	83 e1 3f             	and    ecx,0x3f
c0020a52:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020a56:	90                   	nop
c0020a57:	83 c4 0c             	add    esp,0xc
c0020a5a:	c3                   	ret    
c0020a5b:	66 90                	xchg   ax,ax
c0020a5d:	66 90                	xchg   ax,ax
c0020a5f:	90                   	nop

c0020a60 <avxDetect>:
c0020a60:	b8 00 00 00 00       	mov    eax,0x0
c0020a65:	c3                   	ret    

c0020a66 <avxSave>:
c0020a66:	c3                   	ret    

c0020a67 <avxLoad>:
c0020a67:	c3                   	ret    

c0020a68 <avxInit>:
c0020a68:	c3                   	ret    

c0020a69 <avxClose>:
c0020a69:	c3                   	ret    

c0020a6a <wouldSheSayYes>:
c0020a6a:	c3                   	ret    
c0020a6b:	49                   	dec    ecx
c0020a6c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0020a70:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0020a74:	75 20                	jne    c0020a96 <sseDetect.noSSE+0x1>
c0020a76:	4e                   	dec    esi
c0020a77:	79 61                	jns    c0020ada <x87Detect+0x14>
c0020a79:	68 2e 2e 2e 00       	push   0x2e2e2e
c0020a7e:	66 90                	xchg   ax,ax

c0020a80 <absolutelyNoChanceInHell>:
c0020a80:	b8 01 00 00 00       	mov    eax,0x1
c0020a85:	0f a2                	cpuid  
c0020a87:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0020a8d:	74 06                	je     c0020a95 <sseDetect.noSSE>
c0020a8f:	b8 01 00 00 00       	mov    eax,0x1
c0020a94:	c3                   	ret    

c0020a95 <sseDetect.noSSE>:
c0020a95:	31 c0                	xor    eax,eax
c0020a97:	c3                   	ret    

c0020a98 <sseSave>:
c0020a98:	0f ae 44 24 04       	fxsave [esp+0x4]
c0020a9d:	c3                   	ret    

c0020a9e <sseLoad>:
c0020a9e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0020aa3:	c3                   	ret    

c0020aa4 <sseInit>:
c0020aa4:	e8 49 00 00 00       	call   c0020af2 <x87Init>
c0020aa9:	0f 20 e0             	mov    eax,cr4
c0020aac:	66 0d 00 06          	or     ax,0x600
c0020ab0:	0f 22 e0             	mov    cr4,eax
c0020ab3:	c3                   	ret    

c0020ab4 <sseClose>:
c0020ab4:	c3                   	ret    
c0020ab5:	66 90                	xchg   ax,ax
c0020ab7:	66 90                	xchg   ax,ax
c0020ab9:	66 90                	xchg   ax,ax
c0020abb:	66 90                	xchg   ax,ax
c0020abd:	66 90                	xchg   ax,ax
c0020abf:	90                   	nop

c0020ac0 <value_37F>:
c0020ac0:	7f 03                	jg     c0020ac5 <value_37A+0x1>

c0020ac2 <value_37E>:
c0020ac2:	7e 03                	jle    c0020ac7 <x87Detect+0x1>

c0020ac4 <value_37A>:
c0020ac4:	7a 03                	jp     c0020ac9 <x87Detect+0x3>

c0020ac6 <x87Detect>:
c0020ac6:	b8 01 00 00 00       	mov    eax,0x1
c0020acb:	0f a2                	cpuid  
c0020acd:	f7 c2 01 00 00 00    	test   edx,0x1
c0020ad3:	74 06                	je     c0020adb <x87Detect.nox87>
c0020ad5:	b8 01 00 00 00       	mov    eax,0x1
c0020ada:	c3                   	ret    

c0020adb <x87Detect.nox87>:
c0020adb:	b8 00 00 00 00       	mov    eax,0x0
c0020ae0:	c3                   	ret    

c0020ae1 <x87Save>:
c0020ae1:	55                   	push   ebp
c0020ae2:	89 e5                	mov    ebp,esp
c0020ae4:	9b dd 75 08          	fsave  [ebp+0x8]
c0020ae8:	c9                   	leave  
c0020ae9:	c3                   	ret    

c0020aea <x87Load>:
c0020aea:	55                   	push   ebp
c0020aeb:	89 e5                	mov    ebp,esp
c0020aed:	dd 65 08             	frstor [ebp+0x8]
c0020af0:	c9                   	leave  
c0020af1:	c3                   	ret    

c0020af2 <x87Init>:
c0020af2:	9b db e3             	finit  
c0020af5:	0f 20 c0             	mov    eax,cr0
c0020af8:	66 25 fb ff          	and    ax,0xfffb
c0020afc:	66 0d 22 00          	or     ax,0x22
c0020b00:	0f 22 c0             	mov    cr0,eax
c0020b03:	0f 06                	clts   
c0020b05:	d9 2d c4 0a 02 c0    	fldcw  WORD PTR ds:0xc0020ac4
c0020b0b:	c3                   	ret    

c0020b0c <x87Close>:
c0020b0c:	c3                   	ret    
c0020b0d:	66 90                	xchg   ax,ax
c0020b0f:	90                   	nop

c0020b10 <__do_global_ctors_aux>:
c0020b10:	a1 7c 1c 02 c0       	mov    eax,ds:0xc0021c7c
c0020b15:	83 f8 ff             	cmp    eax,0xffffffff
c0020b18:	74 1a                	je     c0020b34 <__do_global_ctors_aux+0x24>
c0020b1a:	55                   	push   ebp
c0020b1b:	89 e5                	mov    ebp,esp
c0020b1d:	53                   	push   ebx
c0020b1e:	52                   	push   edx
c0020b1f:	bb 7c 1c 02 c0       	mov    ebx,0xc0021c7c
c0020b24:	ff d0                	call   eax
c0020b26:	83 eb 04             	sub    ebx,0x4
c0020b29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020b2b:	83 f8 ff             	cmp    eax,0xffffffff
c0020b2e:	75 f4                	jne    c0020b24 <__do_global_ctors_aux+0x14>
c0020b30:	58                   	pop    eax
c0020b31:	5b                   	pop    ebx
c0020b32:	5d                   	pop    ebp
c0020b33:	c3                   	ret    
c0020b34:	c3                   	ret    
c0020b35:	66 90                	xchg   ax,ax
c0020b37:	90                   	nop

c0020b38 <__divdi3>:
c0020b38:	55                   	push   ebp
c0020b39:	57                   	push   edi
c0020b3a:	56                   	push   esi
c0020b3b:	53                   	push   ebx
c0020b3c:	83 ec 1c             	sub    esp,0x1c
c0020b3f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0020b43:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020b47:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020b4a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020b4e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020b52:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020b56:	85 db                	test   ebx,ebx
c0020b58:	0f 88 8e 00 00 00    	js     c0020bec <__divdi3+0xb4>
c0020b5e:	89 dd                	mov    ebp,ebx
c0020b60:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020b68:	89 d3                	mov    ebx,edx
c0020b6a:	85 d2                	test   edx,edx
c0020b6c:	79 0d                	jns    c0020b7b <__divdi3+0x43>
c0020b6e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0020b72:	f7 d8                	neg    eax
c0020b74:	83 d2 00             	adc    edx,0x0
c0020b77:	f7 da                	neg    edx
c0020b79:	89 d3                	mov    ebx,edx
c0020b7b:	89 c7                	mov    edi,eax
c0020b7d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020b80:	85 db                	test   ebx,ebx
c0020b82:	75 48                	jne    c0020bcc <__divdi3+0x94>
c0020b84:	39 ef                	cmp    edi,ebp
c0020b86:	76 24                	jbe    c0020bac <__divdi3+0x74>
c0020b88:	89 ea                	mov    edx,ebp
c0020b8a:	f7 f7                	div    edi
c0020b8c:	89 c1                	mov    ecx,eax
c0020b8e:	31 f6                	xor    esi,esi
c0020b90:	89 c8                	mov    eax,ecx
c0020b92:	89 f2                	mov    edx,esi
c0020b94:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020b98:	85 c9                	test   ecx,ecx
c0020b9a:	74 07                	je     c0020ba3 <__divdi3+0x6b>
c0020b9c:	f7 d8                	neg    eax
c0020b9e:	83 d2 00             	adc    edx,0x0
c0020ba1:	f7 da                	neg    edx
c0020ba3:	83 c4 1c             	add    esp,0x1c
c0020ba6:	5b                   	pop    ebx
c0020ba7:	5e                   	pop    esi
c0020ba8:	5f                   	pop    edi
c0020ba9:	5d                   	pop    ebp
c0020baa:	c3                   	ret    
c0020bab:	90                   	nop
c0020bac:	85 ff                	test   edi,edi
c0020bae:	75 0b                	jne    c0020bbb <__divdi3+0x83>
c0020bb0:	b8 01 00 00 00       	mov    eax,0x1
c0020bb5:	31 d2                	xor    edx,edx
c0020bb7:	f7 f3                	div    ebx
c0020bb9:	89 c7                	mov    edi,eax
c0020bbb:	31 d2                	xor    edx,edx
c0020bbd:	89 e8                	mov    eax,ebp
c0020bbf:	f7 f7                	div    edi
c0020bc1:	89 c6                	mov    esi,eax
c0020bc3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020bc6:	f7 f7                	div    edi
c0020bc8:	89 c1                	mov    ecx,eax
c0020bca:	eb c4                	jmp    c0020b90 <__divdi3+0x58>
c0020bcc:	39 eb                	cmp    ebx,ebp
c0020bce:	77 3c                	ja     c0020c0c <__divdi3+0xd4>
c0020bd0:	0f bd f3             	bsr    esi,ebx
c0020bd3:	83 f6 1f             	xor    esi,0x1f
c0020bd6:	75 40                	jne    c0020c18 <__divdi3+0xe0>
c0020bd8:	39 eb                	cmp    ebx,ebp
c0020bda:	72 09                	jb     c0020be5 <__divdi3+0xad>
c0020bdc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020bdf:	0f 87 97 00 00 00    	ja     c0020c7c <__divdi3+0x144>
c0020be5:	b9 01 00 00 00       	mov    ecx,0x1
c0020bea:	eb a4                	jmp    c0020b90 <__divdi3+0x58>
c0020bec:	f7 d9                	neg    ecx
c0020bee:	83 d3 00             	adc    ebx,0x0
c0020bf1:	f7 db                	neg    ebx
c0020bf3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020bf6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020bfa:	89 dd                	mov    ebp,ebx
c0020bfc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0020c04:	e9 5f ff ff ff       	jmp    c0020b68 <__divdi3+0x30>
c0020c09:	8d 76 00             	lea    esi,[esi+0x0]
c0020c0c:	31 f6                	xor    esi,esi
c0020c0e:	31 c9                	xor    ecx,ecx
c0020c10:	e9 7b ff ff ff       	jmp    c0020b90 <__divdi3+0x58>
c0020c15:	8d 76 00             	lea    esi,[esi+0x0]
c0020c18:	b8 20 00 00 00       	mov    eax,0x20
c0020c1d:	29 f0                	sub    eax,esi
c0020c1f:	89 f1                	mov    ecx,esi
c0020c21:	d3 e3                	shl    ebx,cl
c0020c23:	89 fa                	mov    edx,edi
c0020c25:	88 c1                	mov    cl,al
c0020c27:	d3 ea                	shr    edx,cl
c0020c29:	09 da                	or     edx,ebx
c0020c2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020c2f:	89 f1                	mov    ecx,esi
c0020c31:	d3 e7                	shl    edi,cl
c0020c33:	89 eb                	mov    ebx,ebp
c0020c35:	88 c1                	mov    cl,al
c0020c37:	d3 eb                	shr    ebx,cl
c0020c39:	89 f1                	mov    ecx,esi
c0020c3b:	d3 e5                	shl    ebp,cl
c0020c3d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0020c40:	88 c1                	mov    cl,al
c0020c42:	d3 ea                	shr    edx,cl
c0020c44:	09 d5                	or     ebp,edx
c0020c46:	89 e8                	mov    eax,ebp
c0020c48:	89 da                	mov    edx,ebx
c0020c4a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0020c4e:	89 d3                	mov    ebx,edx
c0020c50:	89 c5                	mov    ebp,eax
c0020c52:	f7 e7                	mul    edi
c0020c54:	39 d3                	cmp    ebx,edx
c0020c56:	72 18                	jb     c0020c70 <__divdi3+0x138>
c0020c58:	74 0a                	je     c0020c64 <__divdi3+0x12c>
c0020c5a:	89 e9                	mov    ecx,ebp
c0020c5c:	31 f6                	xor    esi,esi
c0020c5e:	e9 2d ff ff ff       	jmp    c0020b90 <__divdi3+0x58>
c0020c63:	90                   	nop
c0020c64:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0020c67:	89 f1                	mov    ecx,esi
c0020c69:	d3 e7                	shl    edi,cl
c0020c6b:	39 c7                	cmp    edi,eax
c0020c6d:	73 eb                	jae    c0020c5a <__divdi3+0x122>
c0020c6f:	90                   	nop
c0020c70:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0020c73:	31 f6                	xor    esi,esi
c0020c75:	e9 16 ff ff ff       	jmp    c0020b90 <__divdi3+0x58>
c0020c7a:	66 90                	xchg   ax,ax
c0020c7c:	31 c9                	xor    ecx,ecx
c0020c7e:	e9 0d ff ff ff       	jmp    c0020b90 <__divdi3+0x58>
c0020c83:	90                   	nop

c0020c84 <__moddi3>:
c0020c84:	55                   	push   ebp
c0020c85:	57                   	push   edi
c0020c86:	56                   	push   esi
c0020c87:	53                   	push   ebx
c0020c88:	83 ec 2c             	sub    esp,0x2c
c0020c8b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020c8f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0020c93:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020c97:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0020c9b:	85 db                	test   ebx,ebx
c0020c9d:	0f 88 85 00 00 00    	js     c0020d28 <__moddi3+0xa4>
c0020ca3:	89 de                	mov    esi,ebx
c0020ca5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020cad:	89 d7                	mov    edi,edx
c0020caf:	85 d2                	test   edx,edx
c0020cb1:	79 09                	jns    c0020cbc <__moddi3+0x38>
c0020cb3:	f7 d8                	neg    eax
c0020cb5:	83 d2 00             	adc    edx,0x0
c0020cb8:	f7 da                	neg    edx
c0020cba:	89 d7                	mov    edi,edx
c0020cbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cc0:	89 cd                	mov    ebp,ecx
c0020cc2:	85 ff                	test   edi,edi
c0020cc4:	75 52                	jne    c0020d18 <__moddi3+0x94>
c0020cc6:	89 c3                	mov    ebx,eax
c0020cc8:	39 f0                	cmp    eax,esi
c0020cca:	76 24                	jbe    c0020cf0 <__moddi3+0x6c>
c0020ccc:	89 c8                	mov    eax,ecx
c0020cce:	89 f2                	mov    edx,esi
c0020cd0:	f7 f3                	div    ebx
c0020cd2:	89 d6                	mov    esi,edx
c0020cd4:	89 f0                	mov    eax,esi
c0020cd6:	31 d2                	xor    edx,edx
c0020cd8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020cdc:	85 c9                	test   ecx,ecx
c0020cde:	74 07                	je     c0020ce7 <__moddi3+0x63>
c0020ce0:	f7 d8                	neg    eax
c0020ce2:	83 d2 00             	adc    edx,0x0
c0020ce5:	f7 da                	neg    edx
c0020ce7:	83 c4 2c             	add    esp,0x2c
c0020cea:	5b                   	pop    ebx
c0020ceb:	5e                   	pop    esi
c0020cec:	5f                   	pop    edi
c0020ced:	5d                   	pop    ebp
c0020cee:	c3                   	ret    
c0020cef:	90                   	nop
c0020cf0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020cf4:	85 db                	test   ebx,ebx
c0020cf6:	75 0d                	jne    c0020d05 <__moddi3+0x81>
c0020cf8:	b8 01 00 00 00       	mov    eax,0x1
c0020cfd:	31 d2                	xor    edx,edx
c0020cff:	f7 f7                	div    edi
c0020d01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d05:	89 f0                	mov    eax,esi
c0020d07:	31 d2                	xor    edx,edx
c0020d09:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020d0d:	f7 f7                	div    edi
c0020d0f:	89 e8                	mov    eax,ebp
c0020d11:	f7 f7                	div    edi
c0020d13:	89 d6                	mov    esi,edx
c0020d15:	eb bd                	jmp    c0020cd4 <__moddi3+0x50>
c0020d17:	90                   	nop
c0020d18:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020d1c:	39 f7                	cmp    edi,esi
c0020d1e:	76 20                	jbe    c0020d40 <__moddi3+0xbc>
c0020d20:	89 c8                	mov    eax,ecx
c0020d22:	89 f2                	mov    edx,esi
c0020d24:	eb b2                	jmp    c0020cd8 <__moddi3+0x54>
c0020d26:	66 90                	xchg   ax,ax
c0020d28:	f7 d9                	neg    ecx
c0020d2a:	83 d3 00             	adc    ebx,0x0
c0020d2d:	f7 db                	neg    ebx
c0020d2f:	89 de                	mov    esi,ebx
c0020d31:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0020d39:	e9 6f ff ff ff       	jmp    c0020cad <__moddi3+0x29>
c0020d3e:	66 90                	xchg   ax,ax
c0020d40:	0f bd c7             	bsr    eax,edi
c0020d43:	83 f0 1f             	xor    eax,0x1f
c0020d46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d4a:	75 24                	jne    c0020d70 <__moddi3+0xec>
c0020d4c:	39 f7                	cmp    edi,esi
c0020d4e:	72 06                	jb     c0020d56 <__moddi3+0xd2>
c0020d50:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0020d54:	77 0c                	ja     c0020d62 <__moddi3+0xde>
c0020d56:	89 e9                	mov    ecx,ebp
c0020d58:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0020d5c:	19 fe                	sbb    esi,edi
c0020d5e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020d62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d66:	89 f2                	mov    edx,esi
c0020d68:	e9 6b ff ff ff       	jmp    c0020cd8 <__moddi3+0x54>
c0020d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0020d70:	b8 20 00 00 00       	mov    eax,0x20
c0020d75:	89 c2                	mov    edx,eax
c0020d77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020d7b:	29 da                	sub    edx,ebx
c0020d7d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020d81:	88 d9                	mov    cl,bl
c0020d83:	d3 e7                	shl    edi,cl
c0020d85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d89:	88 d1                	mov    cl,dl
c0020d8b:	d3 e8                	shr    eax,cl
c0020d8d:	09 c7                	or     edi,eax
c0020d8f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020d93:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020d97:	89 d8                	mov    eax,ebx
c0020d99:	88 d9                	mov    cl,bl
c0020d9b:	d3 e7                	shl    edi,cl
c0020d9d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020da1:	89 f3                	mov    ebx,esi
c0020da3:	88 d1                	mov    cl,dl
c0020da5:	d3 eb                	shr    ebx,cl
c0020da7:	89 c7                	mov    edi,eax
c0020da9:	88 c1                	mov    cl,al
c0020dab:	d3 e6                	shl    esi,cl
c0020dad:	89 e8                	mov    eax,ebp
c0020daf:	88 d1                	mov    cl,dl
c0020db1:	d3 e8                	shr    eax,cl
c0020db3:	09 f0                	or     eax,esi
c0020db5:	89 f9                	mov    ecx,edi
c0020db7:	d3 e5                	shl    ebp,cl
c0020db9:	89 da                	mov    edx,ebx
c0020dbb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0020dbf:	89 d3                	mov    ebx,edx
c0020dc1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020dc5:	89 c6                	mov    esi,eax
c0020dc7:	89 d1                	mov    ecx,edx
c0020dc9:	39 d3                	cmp    ebx,edx
c0020dcb:	72 27                	jb     c0020df4 <__moddi3+0x170>
c0020dcd:	74 21                	je     c0020df0 <__moddi3+0x16c>
c0020dcf:	29 f5                	sub    ebp,esi
c0020dd1:	19 cb                	sbb    ebx,ecx
c0020dd3:	89 de                	mov    esi,ebx
c0020dd5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020dd9:	d3 e6                	shl    esi,cl
c0020ddb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020ddf:	89 f9                	mov    ecx,edi
c0020de1:	d3 ed                	shr    ebp,cl
c0020de3:	09 ee                	or     esi,ebp
c0020de5:	89 f0                	mov    eax,esi
c0020de7:	d3 eb                	shr    ebx,cl
c0020de9:	89 da                	mov    edx,ebx
c0020deb:	e9 e8 fe ff ff       	jmp    c0020cd8 <__moddi3+0x54>
c0020df0:	39 c5                	cmp    ebp,eax
c0020df2:	73 db                	jae    c0020dcf <__moddi3+0x14b>
c0020df4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020df8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0020dfc:	89 d1                	mov    ecx,edx
c0020dfe:	89 c6                	mov    esi,eax
c0020e00:	eb cd                	jmp    c0020dcf <__moddi3+0x14b>
c0020e02:	66 90                	xchg   ax,ax

c0020e04 <__udivdi3>:
c0020e04:	55                   	push   ebp
c0020e05:	57                   	push   edi
c0020e06:	56                   	push   esi
c0020e07:	53                   	push   ebx
c0020e08:	83 ec 1c             	sub    esp,0x1c
c0020e0b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020e0f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020e13:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020e17:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020e1b:	85 d2                	test   edx,edx
c0020e1d:	75 41                	jne    c0020e60 <__udivdi3+0x5c>
c0020e1f:	39 f7                	cmp    edi,esi
c0020e21:	76 15                	jbe    c0020e38 <__udivdi3+0x34>
c0020e23:	89 e8                	mov    eax,ebp
c0020e25:	89 f2                	mov    edx,esi
c0020e27:	f7 f7                	div    edi
c0020e29:	31 db                	xor    ebx,ebx
c0020e2b:	89 da                	mov    edx,ebx
c0020e2d:	83 c4 1c             	add    esp,0x1c
c0020e30:	5b                   	pop    ebx
c0020e31:	5e                   	pop    esi
c0020e32:	5f                   	pop    edi
c0020e33:	5d                   	pop    ebp
c0020e34:	c3                   	ret    
c0020e35:	8d 76 00             	lea    esi,[esi+0x0]
c0020e38:	89 f9                	mov    ecx,edi
c0020e3a:	85 ff                	test   edi,edi
c0020e3c:	75 0b                	jne    c0020e49 <__udivdi3+0x45>
c0020e3e:	b8 01 00 00 00       	mov    eax,0x1
c0020e43:	31 d2                	xor    edx,edx
c0020e45:	f7 f7                	div    edi
c0020e47:	89 c1                	mov    ecx,eax
c0020e49:	31 d2                	xor    edx,edx
c0020e4b:	89 f0                	mov    eax,esi
c0020e4d:	f7 f1                	div    ecx
c0020e4f:	89 c3                	mov    ebx,eax
c0020e51:	89 e8                	mov    eax,ebp
c0020e53:	f7 f1                	div    ecx
c0020e55:	89 da                	mov    edx,ebx
c0020e57:	83 c4 1c             	add    esp,0x1c
c0020e5a:	5b                   	pop    ebx
c0020e5b:	5e                   	pop    esi
c0020e5c:	5f                   	pop    edi
c0020e5d:	5d                   	pop    ebp
c0020e5e:	c3                   	ret    
c0020e5f:	90                   	nop
c0020e60:	39 f2                	cmp    edx,esi
c0020e62:	77 1c                	ja     c0020e80 <__udivdi3+0x7c>
c0020e64:	0f bd da             	bsr    ebx,edx
c0020e67:	83 f3 1f             	xor    ebx,0x1f
c0020e6a:	75 24                	jne    c0020e90 <__udivdi3+0x8c>
c0020e6c:	39 f2                	cmp    edx,esi
c0020e6e:	72 08                	jb     c0020e78 <__udivdi3+0x74>
c0020e70:	39 ef                	cmp    edi,ebp
c0020e72:	0f 87 84 00 00 00    	ja     c0020efc <__udivdi3+0xf8>
c0020e78:	b8 01 00 00 00       	mov    eax,0x1
c0020e7d:	eb ac                	jmp    c0020e2b <__udivdi3+0x27>
c0020e7f:	90                   	nop
c0020e80:	31 db                	xor    ebx,ebx
c0020e82:	31 c0                	xor    eax,eax
c0020e84:	89 da                	mov    edx,ebx
c0020e86:	83 c4 1c             	add    esp,0x1c
c0020e89:	5b                   	pop    ebx
c0020e8a:	5e                   	pop    esi
c0020e8b:	5f                   	pop    edi
c0020e8c:	5d                   	pop    ebp
c0020e8d:	c3                   	ret    
c0020e8e:	66 90                	xchg   ax,ax
c0020e90:	b8 20 00 00 00       	mov    eax,0x20
c0020e95:	29 d8                	sub    eax,ebx
c0020e97:	88 d9                	mov    cl,bl
c0020e99:	d3 e2                	shl    edx,cl
c0020e9b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020e9f:	89 fa                	mov    edx,edi
c0020ea1:	88 c1                	mov    cl,al
c0020ea3:	d3 ea                	shr    edx,cl
c0020ea5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020ea9:	09 d1                	or     ecx,edx
c0020eab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020eaf:	88 d9                	mov    cl,bl
c0020eb1:	d3 e7                	shl    edi,cl
c0020eb3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020eb7:	89 f7                	mov    edi,esi
c0020eb9:	88 c1                	mov    cl,al
c0020ebb:	d3 ef                	shr    edi,cl
c0020ebd:	88 d9                	mov    cl,bl
c0020ebf:	d3 e6                	shl    esi,cl
c0020ec1:	89 ea                	mov    edx,ebp
c0020ec3:	88 c1                	mov    cl,al
c0020ec5:	d3 ea                	shr    edx,cl
c0020ec7:	09 d6                	or     esi,edx
c0020ec9:	89 f0                	mov    eax,esi
c0020ecb:	89 fa                	mov    edx,edi
c0020ecd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020ed1:	89 d7                	mov    edi,edx
c0020ed3:	89 c6                	mov    esi,eax
c0020ed5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020ed9:	39 d7                	cmp    edi,edx
c0020edb:	72 13                	jb     c0020ef0 <__udivdi3+0xec>
c0020edd:	74 09                	je     c0020ee8 <__udivdi3+0xe4>
c0020edf:	89 f0                	mov    eax,esi
c0020ee1:	31 db                	xor    ebx,ebx
c0020ee3:	e9 43 ff ff ff       	jmp    c0020e2b <__udivdi3+0x27>
c0020ee8:	88 d9                	mov    cl,bl
c0020eea:	d3 e5                	shl    ebp,cl
c0020eec:	39 c5                	cmp    ebp,eax
c0020eee:	73 ef                	jae    c0020edf <__udivdi3+0xdb>
c0020ef0:	8d 46 ff             	lea    eax,[esi-0x1]
c0020ef3:	31 db                	xor    ebx,ebx
c0020ef5:	e9 31 ff ff ff       	jmp    c0020e2b <__udivdi3+0x27>
c0020efa:	66 90                	xchg   ax,ax
c0020efc:	31 c0                	xor    eax,eax
c0020efe:	e9 28 ff ff ff       	jmp    c0020e2b <__udivdi3+0x27>
c0020f03:	90                   	nop

c0020f04 <__umoddi3>:
c0020f04:	55                   	push   ebp
c0020f05:	57                   	push   edi
c0020f06:	56                   	push   esi
c0020f07:	53                   	push   ebx
c0020f08:	83 ec 1c             	sub    esp,0x1c
c0020f0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020f0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020f13:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020f17:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020f1b:	89 da                	mov    edx,ebx
c0020f1d:	85 c0                	test   eax,eax
c0020f1f:	75 37                	jne    c0020f58 <__umoddi3+0x54>
c0020f21:	39 df                	cmp    edi,ebx
c0020f23:	76 13                	jbe    c0020f38 <__umoddi3+0x34>
c0020f25:	89 f0                	mov    eax,esi
c0020f27:	f7 f7                	div    edi
c0020f29:	89 d0                	mov    eax,edx
c0020f2b:	31 d2                	xor    edx,edx
c0020f2d:	83 c4 1c             	add    esp,0x1c
c0020f30:	5b                   	pop    ebx
c0020f31:	5e                   	pop    esi
c0020f32:	5f                   	pop    edi
c0020f33:	5d                   	pop    ebp
c0020f34:	c3                   	ret    
c0020f35:	8d 76 00             	lea    esi,[esi+0x0]
c0020f38:	89 fd                	mov    ebp,edi
c0020f3a:	85 ff                	test   edi,edi
c0020f3c:	75 0b                	jne    c0020f49 <__umoddi3+0x45>
c0020f3e:	b8 01 00 00 00       	mov    eax,0x1
c0020f43:	31 d2                	xor    edx,edx
c0020f45:	f7 f7                	div    edi
c0020f47:	89 c5                	mov    ebp,eax
c0020f49:	89 d8                	mov    eax,ebx
c0020f4b:	31 d2                	xor    edx,edx
c0020f4d:	f7 f5                	div    ebp
c0020f4f:	89 f0                	mov    eax,esi
c0020f51:	f7 f5                	div    ebp
c0020f53:	89 d0                	mov    eax,edx
c0020f55:	eb d4                	jmp    c0020f2b <__umoddi3+0x27>
c0020f57:	90                   	nop
c0020f58:	89 f1                	mov    ecx,esi
c0020f5a:	39 d8                	cmp    eax,ebx
c0020f5c:	76 0a                	jbe    c0020f68 <__umoddi3+0x64>
c0020f5e:	89 f0                	mov    eax,esi
c0020f60:	83 c4 1c             	add    esp,0x1c
c0020f63:	5b                   	pop    ebx
c0020f64:	5e                   	pop    esi
c0020f65:	5f                   	pop    edi
c0020f66:	5d                   	pop    ebp
c0020f67:	c3                   	ret    
c0020f68:	0f bd e8             	bsr    ebp,eax
c0020f6b:	83 f5 1f             	xor    ebp,0x1f
c0020f6e:	75 1c                	jne    c0020f8c <__umoddi3+0x88>
c0020f70:	39 d8                	cmp    eax,ebx
c0020f72:	72 04                	jb     c0020f78 <__umoddi3+0x74>
c0020f74:	39 f7                	cmp    edi,esi
c0020f76:	77 08                	ja     c0020f80 <__umoddi3+0x7c>
c0020f78:	89 da                	mov    edx,ebx
c0020f7a:	29 fe                	sub    esi,edi
c0020f7c:	19 c2                	sbb    edx,eax
c0020f7e:	89 f1                	mov    ecx,esi
c0020f80:	89 c8                	mov    eax,ecx
c0020f82:	83 c4 1c             	add    esp,0x1c
c0020f85:	5b                   	pop    ebx
c0020f86:	5e                   	pop    esi
c0020f87:	5f                   	pop    edi
c0020f88:	5d                   	pop    ebp
c0020f89:	c3                   	ret    
c0020f8a:	66 90                	xchg   ax,ax
c0020f8c:	ba 20 00 00 00       	mov    edx,0x20
c0020f91:	29 ea                	sub    edx,ebp
c0020f93:	89 e9                	mov    ecx,ebp
c0020f95:	d3 e0                	shl    eax,cl
c0020f97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f9b:	89 f8                	mov    eax,edi
c0020f9d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020fa1:	88 d1                	mov    cl,dl
c0020fa3:	d3 e8                	shr    eax,cl
c0020fa5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020fa9:	09 c1                	or     ecx,eax
c0020fab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020faf:	89 e9                	mov    ecx,ebp
c0020fb1:	d3 e7                	shl    edi,cl
c0020fb3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020fb7:	89 d8                	mov    eax,ebx
c0020fb9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020fbd:	88 d1                	mov    cl,dl
c0020fbf:	d3 e8                	shr    eax,cl
c0020fc1:	89 c7                	mov    edi,eax
c0020fc3:	89 e9                	mov    ecx,ebp
c0020fc5:	d3 e3                	shl    ebx,cl
c0020fc7:	89 f0                	mov    eax,esi
c0020fc9:	88 d1                	mov    cl,dl
c0020fcb:	d3 e8                	shr    eax,cl
c0020fcd:	09 d8                	or     eax,ebx
c0020fcf:	89 e9                	mov    ecx,ebp
c0020fd1:	d3 e6                	shl    esi,cl
c0020fd3:	89 f3                	mov    ebx,esi
c0020fd5:	89 fa                	mov    edx,edi
c0020fd7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020fdb:	89 d1                	mov    ecx,edx
c0020fdd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020fe1:	89 c6                	mov    esi,eax
c0020fe3:	89 d7                	mov    edi,edx
c0020fe5:	39 d1                	cmp    ecx,edx
c0020fe7:	72 27                	jb     c0021010 <__umoddi3+0x10c>
c0020fe9:	74 21                	je     c002100c <__umoddi3+0x108>
c0020feb:	89 ca                	mov    edx,ecx
c0020fed:	29 f3                	sub    ebx,esi
c0020fef:	19 fa                	sbb    edx,edi
c0020ff1:	89 d0                	mov    eax,edx
c0020ff3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0020ff7:	d3 e0                	shl    eax,cl
c0020ff9:	89 e9                	mov    ecx,ebp
c0020ffb:	d3 eb                	shr    ebx,cl
c0020ffd:	09 d8                	or     eax,ebx
c0020fff:	d3 ea                	shr    edx,cl
c0021001:	83 c4 1c             	add    esp,0x1c
c0021004:	5b                   	pop    ebx
c0021005:	5e                   	pop    esi
c0021006:	5f                   	pop    edi
c0021007:	5d                   	pop    ebp
c0021008:	c3                   	ret    
c0021009:	8d 76 00             	lea    esi,[esi+0x0]
c002100c:	39 c3                	cmp    ebx,eax
c002100e:	73 db                	jae    c0020feb <__umoddi3+0xe7>
c0021010:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021014:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021018:	89 d7                	mov    edi,edx
c002101a:	89 c6                	mov    esi,eax
c002101c:	eb cd                	jmp    c0020feb <__umoddi3+0xe7>

Disassembly of section .init:

c002101e <_init>:
c002101e:	55                   	push   ebp
c002101f:	89 e5                	mov    ebp,esp
c0021021:	e8 f2 f0 fd ff       	call   c0000118 <frame_dummy>
c0021026:	e8 e5 fa ff ff       	call   c0020b10 <__do_global_ctors_aux>
c002102b:	5d                   	pop    ebp
c002102c:	c3                   	ret    

Disassembly of section .fini:

c002102d <_fini>:
c002102d:	55                   	push   ebp
c002102e:	89 e5                	mov    ebp,esp
c0021030:	e8 73 f0 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0021035:	5d                   	pop    ebp
c0021036:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0021038 <Computer::~Computer()>:
c0021038:	83 ec 0c             	sub    esp,0xc
c002103b:	ba 34 26 02 c0       	mov    edx,0xc0022634
c0021040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021044:	89 10                	mov    DWORD PTR [eax],edx
c0021046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002104a:	83 ec 0c             	sub    esp,0xc
c002104d:	50                   	push   eax
c002104e:	e8 7d cd fe ff       	call   c000ddd0 <Device::~Device()>
c0021053:	83 c4 10             	add    esp,0x10
c0021056:	90                   	nop
c0021057:	83 c4 0c             	add    esp,0xc
c002105a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002105c <Computer::~Computer()>:
c002105c:	83 ec 0c             	sub    esp,0xc
c002105f:	83 ec 0c             	sub    esp,0xc
c0021062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021066:	e8 cd ff ff ff       	call   c0021038 <Computer::~Computer()>
c002106b:	83 c4 10             	add    esp,0x10
c002106e:	83 ec 08             	sub    esp,0x8
c0021071:	68 ec 01 00 00       	push   0x1ec
c0021076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002107a:	e8 5e b9 fe ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c002107f:	83 c4 10             	add    esp,0x10
c0021082:	83 c4 0c             	add    esp,0xc
c0021085:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021086 <idleCommon()>:
c0021086:	83 ec 0c             	sub    esp,0xc
c0021089:	fa                   	cli    
c002108a:	ff 05 68 77 02 c0    	inc    DWORD PTR ds:0xc0027768
c0021090:	e8 7a 6f ff ff       	call   c001800f <schedule()>
c0021095:	a1 68 77 02 c0       	mov    eax,ds:0xc0027768
c002109a:	48                   	dec    eax
c002109b:	a3 68 77 02 c0       	mov    ds:0xc0027768,eax
c00210a0:	75 01                	jne    c00210a3 <idleCommon()+0x1d>
c00210a2:	fb                   	sti    
c00210a3:	83 c4 0c             	add    esp,0xc
c00210a6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00210a8 <LinkedList<UnixFile>::~LinkedList()>:
c00210a8:	90                   	nop
c00210a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00210aa <LinkedList<UnixFile>::LinkedList()>:
c00210aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210ae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00210b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00210bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210c3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00210ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00210d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210d8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00210df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210e3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00210ea:	90                   	nop
c00210eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00210ec <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00210ec:	83 ec 0c             	sub    esp,0xc
c00210ef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00210f4:	75 10                	jne    c0021106 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00210f6:	83 ec 0c             	sub    esp,0xc
c00210f9:	68 0c 29 02 c0       	push   0xc002290c
c00210fe:	e8 7a 33 ff ff       	call   c001447d <Krnl::panic(char const*)>
c0021103:	83 c4 10             	add    esp,0x10
c0021106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002110a:	8b 00                	mov    eax,DWORD PTR [eax]
c002110c:	85 c0                	test   eax,eax
c002110e:	74 34                	je     c0021144 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021114:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021117:	85 c0                	test   eax,eax
c0021119:	74 29                	je     c0021144 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002111b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002111f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021122:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021126:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002112d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021131:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021138:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002113b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021142:	eb 65                	jmp    c00211a9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021148:	8b 00                	mov    eax,DWORD PTR [eax]
c002114a:	85 c0                	test   eax,eax
c002114c:	75 4b                	jne    c0021199 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002114e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021152:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021155:	85 c0                	test   eax,eax
c0021157:	75 40                	jne    c0021199 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002115d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021161:	89 10                	mov    DWORD PTR [eax],edx
c0021163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021167:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002116b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002116e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021172:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021175:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002117c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021180:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021183:	85 c0                	test   eax,eax
c0021185:	74 22                	je     c00211a9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021187:	83 ec 0c             	sub    esp,0xc
c002118a:	68 2e 29 02 c0       	push   0xc002292e
c002118f:	e8 e9 32 ff ff       	call   c001447d <Krnl::panic(char const*)>
c0021194:	83 c4 10             	add    esp,0x10
c0021197:	eb 10                	jmp    c00211a9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021199:	83 ec 0c             	sub    esp,0xc
c002119c:	68 38 29 02 c0       	push   0xc0022938
c00211a1:	e8 d7 32 ff ff       	call   c001447d <Krnl::panic(char const*)>
c00211a6:	83 c4 10             	add    esp,0x10
c00211a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211ad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00211b0:	8d 50 01             	lea    edx,[eax+0x1]
c00211b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211b7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00211ba:	90                   	nop
c00211bb:	83 c4 0c             	add    esp,0xc
c00211be:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00211c0 <LinkedList<UnixFile>::getFirstElement()>:
c00211c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00211c6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00211c8 <LinkedList<UnixFile>::removeFirst()>:
c00211c8:	83 ec 0c             	sub    esp,0xc
c00211cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00211d1:	85 c0                	test   eax,eax
c00211d3:	75 12                	jne    c00211e7 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00211d5:	83 ec 0c             	sub    esp,0xc
c00211d8:	68 44 29 02 c0       	push   0xc0022944
c00211dd:	e8 9b 32 ff ff       	call   c001447d <Krnl::panic(char const*)>
c00211e2:	83 c4 10             	add    esp,0x10
c00211e5:	eb 7e                	jmp    c0021265 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00211e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00211ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00211f1:	85 c0                	test   eax,eax
c00211f3:	74 10                	je     c0021205 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00211f5:	83 ec 0c             	sub    esp,0xc
c00211f8:	68 8f 29 02 c0       	push   0xc002298f
c00211fd:	e8 7b 32 ff ff       	call   c001447d <Krnl::panic(char const*)>
c0021202:	83 c4 10             	add    esp,0x10
c0021205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021209:	8b 00                	mov    eax,DWORD PTR [eax]
c002120b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002120e:	85 c0                	test   eax,eax
c0021210:	75 33                	jne    c0021245 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0021212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021216:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002121c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021220:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002122b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002122e:	83 f8 01             	cmp    eax,0x1
c0021231:	74 21                	je     c0021254 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021233:	83 ec 0c             	sub    esp,0xc
c0021236:	68 68 29 02 c0       	push   0xc0022968
c002123b:	e8 3d 32 ff ff       	call   c001447d <Krnl::panic(char const*)>
c0021240:	83 c4 10             	add    esp,0x10
c0021243:	eb 0f                	jmp    c0021254 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021249:	8b 00                	mov    eax,DWORD PTR [eax]
c002124b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002124e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021252:	89 10                	mov    DWORD PTR [eax],edx
c0021254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021258:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002125b:	8d 50 ff             	lea    edx,[eax-0x1]
c002125e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021262:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021265:	83 c4 0c             	add    esp,0xc
c0021268:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002126a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002126a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002126e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021271:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021272 <DriverlessDevice::~DriverlessDevice()>:
c0021272:	ba 1c 32 02 c0       	mov    edx,0xc002321c
c0021277:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002127b:	89 10                	mov    DWORD PTR [eax],edx
c002127d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021281:	50                   	push   eax
c0021282:	e8 49 cb fe ff       	call   c000ddd0 <Device::~Device()>
c0021287:	83 c4 04             	add    esp,0x4
c002128a:	90                   	nop
c002128b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002128c <DriverlessDevice::~DriverlessDevice()>:
c002128c:	83 ec 0c             	sub    esp,0xc
c002128f:	83 ec 0c             	sub    esp,0xc
c0021292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021296:	e8 d7 ff ff ff       	call   c0021272 <DriverlessDevice::~DriverlessDevice()>
c002129b:	83 c4 10             	add    esp,0x10
c002129e:	83 ec 08             	sub    esp,0x8
c00212a1:	68 58 01 00 00       	push   0x158
c00212a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00212aa:	e8 2e b7 fe ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c00212af:	83 c4 10             	add    esp,0x10
c00212b2:	83 c4 0c             	add    esp,0xc
c00212b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00212b6 <LinkedList<Device>::addElement(Device*)>:
c00212b6:	83 ec 0c             	sub    esp,0xc
c00212b9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00212be:	75 10                	jne    c00212d0 <LinkedList<Device>::addElement(Device*)+0x1a>
c00212c0:	83 ec 0c             	sub    esp,0xc
c00212c3:	68 0c 29 02 c0       	push   0xc002290c
c00212c8:	e8 b0 31 ff ff       	call   c001447d <Krnl::panic(char const*)>
c00212cd:	83 c4 10             	add    esp,0x10
c00212d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00212d6:	85 c0                	test   eax,eax
c00212d8:	74 3a                	je     c0021314 <LinkedList<Device>::addElement(Device*)+0x5e>
c00212da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212e1:	85 c0                	test   eax,eax
c00212e3:	74 2f                	je     c0021314 <LinkedList<Device>::addElement(Device*)+0x5e>
c00212e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212f0:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00212f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212fe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021305:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021308:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021312:	eb 68                	jmp    c002137c <LinkedList<Device>::addElement(Device*)+0xc6>
c0021314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021318:	8b 00                	mov    eax,DWORD PTR [eax]
c002131a:	85 c0                	test   eax,eax
c002131c:	75 4e                	jne    c002136c <LinkedList<Device>::addElement(Device*)+0xb6>
c002131e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021322:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021325:	85 c0                	test   eax,eax
c0021327:	75 43                	jne    c002136c <LinkedList<Device>::addElement(Device*)+0xb6>
c0021329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002132d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021331:	89 10                	mov    DWORD PTR [eax],edx
c0021333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021337:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002133b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002133e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021342:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021345:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002134f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021353:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021356:	85 c0                	test   eax,eax
c0021358:	74 22                	je     c002137c <LinkedList<Device>::addElement(Device*)+0xc6>
c002135a:	83 ec 0c             	sub    esp,0xc
c002135d:	68 2e 29 02 c0       	push   0xc002292e
c0021362:	e8 16 31 ff ff       	call   c001447d <Krnl::panic(char const*)>
c0021367:	83 c4 10             	add    esp,0x10
c002136a:	eb 10                	jmp    c002137c <LinkedList<Device>::addElement(Device*)+0xc6>
c002136c:	83 ec 0c             	sub    esp,0xc
c002136f:	68 38 29 02 c0       	push   0xc0022938
c0021374:	e8 04 31 ff ff       	call   c001447d <Krnl::panic(char const*)>
c0021379:	83 c4 10             	add    esp,0x10
c002137c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021380:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021383:	8d 50 01             	lea    edx,[eax+0x1]
c0021386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002138a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002138d:	90                   	nop
c002138e:	83 c4 0c             	add    esp,0xc
c0021391:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021392 <LinkedList<Device>::LinkedList()>:
c0021392:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021396:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002139c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00213a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213ab:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00213b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00213bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00213c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213cb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00213d2:	90                   	nop
c00213d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00213d4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00213d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00213da:	85 c0                	test   eax,eax
c00213dc:	75 0e                	jne    c00213ec <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00213de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00213e5:	85 c0                	test   eax,eax
c00213e7:	75 03                	jne    c00213ec <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00213e9:	b0 01                	mov    al,0x1
c00213eb:	c3                   	ret    
c00213ec:	b0 00                	mov    al,0x0
c00213ee:	90                   	nop
c00213ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00213f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00213f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00213f6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00213f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00213f8:	83 ec 0c             	sub    esp,0xc
c00213fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0021401:	85 c0                	test   eax,eax
c0021403:	75 15                	jne    c002141a <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0021405:	83 ec 0c             	sub    esp,0xc
c0021408:	68 44 29 02 c0       	push   0xc0022944
c002140d:	e8 6b 30 ff ff       	call   c001447d <Krnl::panic(char const*)>
c0021412:	83 c4 10             	add    esp,0x10
c0021415:	e9 88 00 00 00       	jmp    c00214a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c002141a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002141e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021421:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021424:	85 c0                	test   eax,eax
c0021426:	0f 95 c0             	setne  al
c0021429:	84 c0                	test   al,al
c002142b:	74 10                	je     c002143d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c002142d:	83 ec 0c             	sub    esp,0xc
c0021430:	68 8f 29 02 c0       	push   0xc002298f
c0021435:	e8 43 30 ff ff       	call   c001447d <Krnl::panic(char const*)>
c002143a:	83 c4 10             	add    esp,0x10
c002143d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021441:	8b 00                	mov    eax,DWORD PTR [eax]
c0021443:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021446:	85 c0                	test   eax,eax
c0021448:	0f 94 c0             	sete   al
c002144b:	84 c0                	test   al,al
c002144d:	74 33                	je     c0021482 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c002144f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021453:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002145d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021468:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002146b:	83 f8 01             	cmp    eax,0x1
c002146e:	74 21                	je     c0021491 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0021470:	83 ec 0c             	sub    esp,0xc
c0021473:	68 68 29 02 c0       	push   0xc0022968
c0021478:	e8 00 30 ff ff       	call   c001447d <Krnl::panic(char const*)>
c002147d:	83 c4 10             	add    esp,0x10
c0021480:	eb 0f                	jmp    c0021491 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0021482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021486:	8b 00                	mov    eax,DWORD PTR [eax]
c0021488:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002148b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002148f:	89 10                	mov    DWORD PTR [eax],edx
c0021491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021495:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021498:	8d 50 ff             	lea    edx,[eax-0x1]
c002149b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002149f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00214a2:	83 c4 0c             	add    esp,0xc
c00214a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00214a6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00214a6:	83 ec 0c             	sub    esp,0xc
c00214a9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00214ae:	75 10                	jne    c00214c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00214b0:	83 ec 0c             	sub    esp,0xc
c00214b3:	68 0c 29 02 c0       	push   0xc002290c
c00214b8:	e8 c0 2f ff ff       	call   c001447d <Krnl::panic(char const*)>
c00214bd:	83 c4 10             	add    esp,0x10
c00214c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00214c6:	85 c0                	test   eax,eax
c00214c8:	74 34                	je     c00214fe <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00214ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214d1:	85 c0                	test   eax,eax
c00214d3:	74 29                	je     c00214fe <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00214d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00214e0:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00214e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00214eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00214ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214f5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00214fc:	eb 65                	jmp    c0021563 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00214fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021502:	8b 00                	mov    eax,DWORD PTR [eax]
c0021504:	85 c0                	test   eax,eax
c0021506:	75 4b                	jne    c0021553 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0021508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002150c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002150f:	85 c0                	test   eax,eax
c0021511:	75 40                	jne    c0021553 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0021513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021517:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002151b:	89 10                	mov    DWORD PTR [eax],edx
c002151d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021521:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021525:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002152c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002152f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002153a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002153d:	85 c0                	test   eax,eax
c002153f:	74 22                	je     c0021563 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0021541:	83 ec 0c             	sub    esp,0xc
c0021544:	68 2e 29 02 c0       	push   0xc002292e
c0021549:	e8 2f 2f ff ff       	call   c001447d <Krnl::panic(char const*)>
c002154e:	83 c4 10             	add    esp,0x10
c0021551:	eb 10                	jmp    c0021563 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0021553:	83 ec 0c             	sub    esp,0xc
c0021556:	68 38 29 02 c0       	push   0xc0022938
c002155b:	e8 1d 2f ff ff       	call   c001447d <Krnl::panic(char const*)>
c0021560:	83 c4 10             	add    esp,0x10
c0021563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021567:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002156a:	8d 50 01             	lea    edx,[eax+0x1]
c002156d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021571:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021574:	90                   	nop
c0021575:	83 c4 0c             	add    esp,0xc
c0021578:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002157a <ACPI::~ACPI()>:
c002157a:	83 ec 0c             	sub    esp,0xc
c002157d:	ba dc 3c 02 c0       	mov    edx,0xc0023cdc
c0021582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021586:	89 10                	mov    DWORD PTR [eax],edx
c0021588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002158c:	83 ec 0c             	sub    esp,0xc
c002158f:	50                   	push   eax
c0021590:	e8 3b c8 fe ff       	call   c000ddd0 <Device::~Device()>
c0021595:	83 c4 10             	add    esp,0x10
c0021598:	90                   	nop
c0021599:	83 c4 0c             	add    esp,0xc
c002159c:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002159e <ACPI::~ACPI()>:
c002159e:	83 ec 0c             	sub    esp,0xc
c00215a1:	83 ec 0c             	sub    esp,0xc
c00215a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215a8:	e8 cd ff ff ff       	call   c002157a <ACPI::~ACPI()>
c00215ad:	83 c4 10             	add    esp,0x10
c00215b0:	83 ec 08             	sub    esp,0x8
c00215b3:	68 64 12 00 00       	push   0x1264
c00215b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215bc:	e8 1c b4 fe ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c00215c1:	83 c4 10             	add    esp,0x10
c00215c4:	83 c4 0c             	add    esp,0xc
c00215c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00215c8 <LinkedList<Device>::~LinkedList()>:
c00215c8:	90                   	nop
c00215c9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00215ca <LinkedList<Device>::isEmpty()>:
c00215ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00215d0:	85 c0                	test   eax,eax
c00215d2:	75 0e                	jne    c00215e2 <LinkedList<Device>::isEmpty()+0x18>
c00215d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215db:	85 c0                	test   eax,eax
c00215dd:	75 03                	jne    c00215e2 <LinkedList<Device>::isEmpty()+0x18>
c00215df:	b0 01                	mov    al,0x1
c00215e1:	c3                   	ret    
c00215e2:	b0 00                	mov    al,0x0
c00215e4:	90                   	nop
c00215e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00215e6 <LinkedList<Device>::getFirstElement()>:
c00215e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00215ec:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00215ee <LinkedList<Device>::removeFirst()>:
c00215ee:	83 ec 0c             	sub    esp,0xc
c00215f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00215f7:	85 c0                	test   eax,eax
c00215f9:	75 15                	jne    c0021610 <LinkedList<Device>::removeFirst()+0x22>
c00215fb:	83 ec 0c             	sub    esp,0xc
c00215fe:	68 44 29 02 c0       	push   0xc0022944
c0021603:	e8 75 2e ff ff       	call   c001447d <Krnl::panic(char const*)>
c0021608:	83 c4 10             	add    esp,0x10
c002160b:	e9 87 00 00 00       	jmp    c0021697 <LinkedList<Device>::removeFirst()+0xa9>
c0021610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021614:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021617:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002161d:	85 c0                	test   eax,eax
c002161f:	74 10                	je     c0021631 <LinkedList<Device>::removeFirst()+0x43>
c0021621:	83 ec 0c             	sub    esp,0xc
c0021624:	68 8f 29 02 c0       	push   0xc002298f
c0021629:	e8 4f 2e ff ff       	call   c001447d <Krnl::panic(char const*)>
c002162e:	83 c4 10             	add    esp,0x10
c0021631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021635:	8b 00                	mov    eax,DWORD PTR [eax]
c0021637:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002163d:	85 c0                	test   eax,eax
c002163f:	75 33                	jne    c0021674 <LinkedList<Device>::removeFirst()+0x86>
c0021641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021645:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002164b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002164f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002165a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002165d:	83 f8 01             	cmp    eax,0x1
c0021660:	74 24                	je     c0021686 <LinkedList<Device>::removeFirst()+0x98>
c0021662:	83 ec 0c             	sub    esp,0xc
c0021665:	68 68 29 02 c0       	push   0xc0022968
c002166a:	e8 0e 2e ff ff       	call   c001447d <Krnl::panic(char const*)>
c002166f:	83 c4 10             	add    esp,0x10
c0021672:	eb 12                	jmp    c0021686 <LinkedList<Device>::removeFirst()+0x98>
c0021674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021678:	8b 00                	mov    eax,DWORD PTR [eax]
c002167a:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0021680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021684:	89 10                	mov    DWORD PTR [eax],edx
c0021686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002168a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002168d:	8d 50 ff             	lea    edx,[eax-0x1]
c0021690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021694:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021697:	83 c4 0c             	add    esp,0xc
c002169a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002169c <CPU::~CPU()>:
c002169c:	83 ec 0c             	sub    esp,0xc
c002169f:	ba 78 40 02 c0       	mov    edx,0xc0024078
c00216a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216a8:	89 10                	mov    DWORD PTR [eax],edx
c00216aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ae:	83 ec 0c             	sub    esp,0xc
c00216b1:	50                   	push   eax
c00216b2:	e8 19 c7 fe ff       	call   c000ddd0 <Device::~Device()>
c00216b7:	83 c4 10             	add    esp,0x10
c00216ba:	90                   	nop
c00216bb:	83 c4 0c             	add    esp,0xc
c00216be:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00216c0 <CPU::~CPU()>:
c00216c0:	83 ec 0c             	sub    esp,0xc
c00216c3:	83 ec 0c             	sub    esp,0xc
c00216c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216ca:	e8 cd ff ff ff       	call   c002169c <CPU::~CPU()>
c00216cf:	83 c4 10             	add    esp,0x10
c00216d2:	83 ec 08             	sub    esp,0x8
c00216d5:	68 98 11 00 00       	push   0x1198
c00216da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216de:	e8 fa b2 fe ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c00216e3:	83 c4 10             	add    esp,0x10
c00216e6:	83 c4 0c             	add    esp,0xc
c00216e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00216ea <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00216ea:	90                   	nop
c00216eb:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00216ec <ThreadControlBlock::ThreadControlBlock()>:
c00216ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216f0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00216f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216fb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0021702:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021706:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002170d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021711:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0021718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002171c:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0021723:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021727:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c002172b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002172f:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0021733:	90                   	nop
c0021734:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0021736 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0021736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002173a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021744:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002174b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002174f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002175a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021764:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002176b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002176f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021776:	90                   	nop
c0021777:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021778 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021778:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002177c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002177f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0021780 <Vm::_FPUState::_FPUState()>:
c0021780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021784:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002178b:	90                   	nop
c002178c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002178e <PCI::~PCI()>:
c002178e:	83 ec 0c             	sub    esp,0xc
c0021791:	ba ec 4d 02 c0       	mov    edx,0xc0024dec
c0021796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002179a:	89 10                	mov    DWORD PTR [eax],edx
c002179c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217a0:	83 ec 0c             	sub    esp,0xc
c00217a3:	50                   	push   eax
c00217a4:	e8 f7 bf fe ff       	call   c000d7a0 <Bus::~Bus()>
c00217a9:	83 c4 10             	add    esp,0x10
c00217ac:	90                   	nop
c00217ad:	83 c4 0c             	add    esp,0xc
c00217b0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00217b2 <PCI::~PCI()>:
c00217b2:	83 ec 0c             	sub    esp,0xc
c00217b5:	83 ec 0c             	sub    esp,0xc
c00217b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217bc:	e8 cd ff ff ff       	call   c002178e <PCI::~PCI()>
c00217c1:	83 c4 10             	add    esp,0x10
c00217c4:	83 ec 08             	sub    esp,0x8
c00217c7:	68 5c 01 00 00       	push   0x15c
c00217cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217d0:	e8 08 b2 fe ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c00217d5:	83 c4 10             	add    esp,0x10
c00217d8:	83 c4 0c             	add    esp,0xc
c00217db:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00217dc <IDE::~IDE()>:
c00217dc:	83 ec 0c             	sub    esp,0xc
c00217df:	ba a0 4e 02 c0       	mov    edx,0xc0024ea0
c00217e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217e8:	89 10                	mov    DWORD PTR [eax],edx
c00217ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217ee:	83 ec 0c             	sub    esp,0xc
c00217f1:	50                   	push   eax
c00217f2:	e8 ef ca fe ff       	call   c000e2e6 <HardDiskController::~HardDiskController()>
c00217f7:	83 c4 10             	add    esp,0x10
c00217fa:	90                   	nop
c00217fb:	83 c4 0c             	add    esp,0xc
c00217fe:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0021800 <IDE::~IDE()>:
c0021800:	83 ec 0c             	sub    esp,0xc
c0021803:	83 ec 0c             	sub    esp,0xc
c0021806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002180a:	e8 cd ff ff ff       	call   c00217dc <IDE::~IDE()>
c002180f:	83 c4 10             	add    esp,0x10
c0021812:	83 ec 08             	sub    esp,0x8
c0021815:	68 70 02 00 00       	push   0x270
c002181a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002181e:	e8 ba b1 fe ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c0021823:	83 c4 10             	add    esp,0x10
c0021826:	83 c4 0c             	add    esp,0xc
c0021829:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002182a <SATABus::~SATABus()>:
c002182a:	83 ec 0c             	sub    esp,0xc
c002182d:	ba 18 4f 02 c0       	mov    edx,0xc0024f18
c0021832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021836:	89 10                	mov    DWORD PTR [eax],edx
c0021838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002183c:	83 ec 0c             	sub    esp,0xc
c002183f:	50                   	push   eax
c0021840:	e8 a1 ca fe ff       	call   c000e2e6 <HardDiskController::~HardDiskController()>
c0021845:	83 c4 10             	add    esp,0x10
c0021848:	90                   	nop
c0021849:	83 c4 0c             	add    esp,0xc
c002184c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002184e <SATABus::~SATABus()>:
c002184e:	83 ec 0c             	sub    esp,0xc
c0021851:	83 ec 0c             	sub    esp,0xc
c0021854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021858:	e8 cd ff ff ff       	call   c002182a <SATABus::~SATABus()>
c002185d:	83 c4 10             	add    esp,0x10
c0021860:	83 ec 08             	sub    esp,0x8
c0021863:	68 64 01 00 00       	push   0x164
c0021868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002186c:	e8 6c b1 fe ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c0021871:	83 c4 10             	add    esp,0x10
c0021874:	83 c4 0c             	add    esp,0xc
c0021877:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0021878 <ATA::~ATA()>:
c0021878:	83 ec 0c             	sub    esp,0xc
c002187b:	ba 90 4f 02 c0       	mov    edx,0xc0024f90
c0021880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021884:	89 10                	mov    DWORD PTR [eax],edx
c0021886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002188a:	83 ec 0c             	sub    esp,0xc
c002188d:	50                   	push   eax
c002188e:	e8 35 cb fe ff       	call   c000e3c8 <PhysicalDisk::~PhysicalDisk()>
c0021893:	83 c4 10             	add    esp,0x10
c0021896:	90                   	nop
c0021897:	83 c4 0c             	add    esp,0xc
c002189a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002189c <ATA::~ATA()>:
c002189c:	83 ec 0c             	sub    esp,0xc
c002189f:	83 ec 0c             	sub    esp,0xc
c00218a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218a6:	e8 cd ff ff ff       	call   c0021878 <ATA::~ATA()>
c00218ab:	83 c4 10             	add    esp,0x10
c00218ae:	83 ec 08             	sub    esp,0x8
c00218b1:	68 7c 01 00 00       	push   0x17c
c00218b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218ba:	e8 1e b1 fe ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c00218bf:	83 c4 10             	add    esp,0x10
c00218c2:	83 c4 0c             	add    esp,0xc
c00218c5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00218c6 <ATAPI::~ATAPI()>:
c00218c6:	83 ec 0c             	sub    esp,0xc
c00218c9:	ba c8 4f 02 c0       	mov    edx,0xc0024fc8
c00218ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218d2:	89 10                	mov    DWORD PTR [eax],edx
c00218d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218d8:	83 ec 0c             	sub    esp,0xc
c00218db:	50                   	push   eax
c00218dc:	e8 e7 ca fe ff       	call   c000e3c8 <PhysicalDisk::~PhysicalDisk()>
c00218e1:	83 c4 10             	add    esp,0x10
c00218e4:	90                   	nop
c00218e5:	83 c4 0c             	add    esp,0xc
c00218e8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00218ea <ATAPI::~ATAPI()>:
c00218ea:	83 ec 0c             	sub    esp,0xc
c00218ed:	83 ec 0c             	sub    esp,0xc
c00218f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218f4:	e8 cd ff ff ff       	call   c00218c6 <ATAPI::~ATAPI()>
c00218f9:	83 c4 10             	add    esp,0x10
c00218fc:	83 ec 08             	sub    esp,0x8
c00218ff:	68 80 01 00 00       	push   0x180
c0021904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021908:	e8 d0 b0 fe ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c002190d:	83 c4 10             	add    esp,0x10
c0021910:	83 c4 0c             	add    esp,0xc
c0021913:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0021914 <SATA::~SATA()>:
c0021914:	83 ec 0c             	sub    esp,0xc
c0021917:	ba 7c 50 02 c0       	mov    edx,0xc002507c
c002191c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021920:	89 10                	mov    DWORD PTR [eax],edx
c0021922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021926:	83 ec 0c             	sub    esp,0xc
c0021929:	50                   	push   eax
c002192a:	e8 99 ca fe ff       	call   c000e3c8 <PhysicalDisk::~PhysicalDisk()>
c002192f:	83 c4 10             	add    esp,0x10
c0021932:	90                   	nop
c0021933:	83 c4 0c             	add    esp,0xc
c0021936:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0021938 <SATA::~SATA()>:
c0021938:	83 ec 0c             	sub    esp,0xc
c002193b:	83 ec 0c             	sub    esp,0xc
c002193e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021942:	e8 cd ff ff ff       	call   c0021914 <SATA::~SATA()>
c0021947:	83 c4 10             	add    esp,0x10
c002194a:	83 ec 08             	sub    esp,0x8
c002194d:	68 7c 01 00 00       	push   0x17c
c0021952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021956:	e8 82 b0 fe ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c002195b:	83 c4 10             	add    esp,0x10
c002195e:	83 c4 0c             	add    esp,0xc
c0021961:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0021962 <SATAPI::~SATAPI()>:
c0021962:	83 ec 0c             	sub    esp,0xc
c0021965:	ba 58 51 02 c0       	mov    edx,0xc0025158
c002196a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002196e:	89 10                	mov    DWORD PTR [eax],edx
c0021970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021974:	83 ec 0c             	sub    esp,0xc
c0021977:	50                   	push   eax
c0021978:	e8 4b ca fe ff       	call   c000e3c8 <PhysicalDisk::~PhysicalDisk()>
c002197d:	83 c4 10             	add    esp,0x10
c0021980:	90                   	nop
c0021981:	83 c4 0c             	add    esp,0xc
c0021984:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0021986 <SATAPI::~SATAPI()>:
c0021986:	83 ec 0c             	sub    esp,0xc
c0021989:	83 ec 0c             	sub    esp,0xc
c002198c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021990:	e8 cd ff ff ff       	call   c0021962 <SATAPI::~SATAPI()>
c0021995:	83 c4 10             	add    esp,0x10
c0021998:	83 ec 08             	sub    esp,0x8
c002199b:	68 80 01 00 00       	push   0x180
c00219a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219a4:	e8 34 b0 fe ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c00219a9:	83 c4 10             	add    esp,0x10
c00219ac:	83 c4 0c             	add    esp,0xc
c00219af:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00219b0 <AVX::~AVX()>:
c00219b0:	83 ec 0c             	sub    esp,0xc
c00219b3:	ba 98 51 02 c0       	mov    edx,0xc0025198
c00219b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219bc:	89 10                	mov    DWORD PTR [eax],edx
c00219be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219c2:	83 ec 0c             	sub    esp,0xc
c00219c5:	50                   	push   eax
c00219c6:	e8 81 ca fe ff       	call   c000e44c <FPU::~FPU()>
c00219cb:	83 c4 10             	add    esp,0x10
c00219ce:	90                   	nop
c00219cf:	83 c4 0c             	add    esp,0xc
c00219d2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00219d4 <AVX::~AVX()>:
c00219d4:	83 ec 0c             	sub    esp,0xc
c00219d7:	83 ec 0c             	sub    esp,0xc
c00219da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219de:	e8 cd ff ff ff       	call   c00219b0 <AVX::~AVX()>
c00219e3:	83 c4 10             	add    esp,0x10
c00219e6:	83 ec 08             	sub    esp,0x8
c00219e9:	68 58 01 00 00       	push   0x158
c00219ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219f2:	e8 e6 af fe ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c00219f7:	83 c4 10             	add    esp,0x10
c00219fa:	83 c4 0c             	add    esp,0xc
c00219fd:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00219fe <MMX::~MMX()>:
c00219fe:	83 ec 0c             	sub    esp,0xc
c0021a01:	ba d8 51 02 c0       	mov    edx,0xc00251d8
c0021a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a0a:	89 10                	mov    DWORD PTR [eax],edx
c0021a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a10:	83 ec 0c             	sub    esp,0xc
c0021a13:	50                   	push   eax
c0021a14:	e8 33 ca fe ff       	call   c000e44c <FPU::~FPU()>
c0021a19:	83 c4 10             	add    esp,0x10
c0021a1c:	90                   	nop
c0021a1d:	83 c4 0c             	add    esp,0xc
c0021a20:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0021a22 <MMX::~MMX()>:
c0021a22:	83 ec 0c             	sub    esp,0xc
c0021a25:	83 ec 0c             	sub    esp,0xc
c0021a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a2c:	e8 cd ff ff ff       	call   c00219fe <MMX::~MMX()>
c0021a31:	83 c4 10             	add    esp,0x10
c0021a34:	83 ec 08             	sub    esp,0x8
c0021a37:	68 58 01 00 00       	push   0x158
c0021a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a40:	e8 98 af fe ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c0021a45:	83 c4 10             	add    esp,0x10
c0021a48:	83 c4 0c             	add    esp,0xc
c0021a4b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0021a4c <SSE::~SSE()>:
c0021a4c:	83 ec 0c             	sub    esp,0xc
c0021a4f:	ba 18 52 02 c0       	mov    edx,0xc0025218
c0021a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a58:	89 10                	mov    DWORD PTR [eax],edx
c0021a5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a5e:	83 ec 0c             	sub    esp,0xc
c0021a61:	50                   	push   eax
c0021a62:	e8 e5 c9 fe ff       	call   c000e44c <FPU::~FPU()>
c0021a67:	83 c4 10             	add    esp,0x10
c0021a6a:	90                   	nop
c0021a6b:	83 c4 0c             	add    esp,0xc
c0021a6e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0021a70 <SSE::~SSE()>:
c0021a70:	83 ec 0c             	sub    esp,0xc
c0021a73:	83 ec 0c             	sub    esp,0xc
c0021a76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a7a:	e8 cd ff ff ff       	call   c0021a4c <SSE::~SSE()>
c0021a7f:	83 c4 10             	add    esp,0x10
c0021a82:	83 ec 08             	sub    esp,0x8
c0021a85:	68 58 01 00 00       	push   0x158
c0021a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a8e:	e8 4a af fe ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c0021a93:	83 c4 10             	add    esp,0x10
c0021a96:	83 c4 0c             	add    esp,0xc
c0021a99:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0021a9a <x87::~x87()>:
c0021a9a:	83 ec 0c             	sub    esp,0xc
c0021a9d:	ba 58 52 02 c0       	mov    edx,0xc0025258
c0021aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aa6:	89 10                	mov    DWORD PTR [eax],edx
c0021aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aac:	83 ec 0c             	sub    esp,0xc
c0021aaf:	50                   	push   eax
c0021ab0:	e8 97 c9 fe ff       	call   c000e44c <FPU::~FPU()>
c0021ab5:	83 c4 10             	add    esp,0x10
c0021ab8:	90                   	nop
c0021ab9:	83 c4 0c             	add    esp,0xc
c0021abc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0021abe <x87::~x87()>:
c0021abe:	83 ec 0c             	sub    esp,0xc
c0021ac1:	83 ec 0c             	sub    esp,0xc
c0021ac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ac8:	e8 cd ff ff ff       	call   c0021a9a <x87::~x87()>
c0021acd:	83 c4 10             	add    esp,0x10
c0021ad0:	83 ec 08             	sub    esp,0x8
c0021ad3:	68 58 01 00 00       	push   0x158
c0021ad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021adc:	e8 fc ae fe ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c0021ae1:	83 c4 10             	add    esp,0x10
c0021ae4:	83 c4 0c             	add    esp,0xc
c0021ae7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0021ae8 <IOAPIC::~IOAPIC()>:
c0021ae8:	83 ec 0c             	sub    esp,0xc
c0021aeb:	ba b0 53 02 c0       	mov    edx,0xc00253b0
c0021af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021af4:	89 10                	mov    DWORD PTR [eax],edx
c0021af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021afa:	83 ec 0c             	sub    esp,0xc
c0021afd:	50                   	push   eax
c0021afe:	e8 cd c2 fe ff       	call   c000ddd0 <Device::~Device()>
c0021b03:	83 c4 10             	add    esp,0x10
c0021b06:	90                   	nop
c0021b07:	83 c4 0c             	add    esp,0xc
c0021b0a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0021b0c <IOAPIC::~IOAPIC()>:
c0021b0c:	83 ec 0c             	sub    esp,0xc
c0021b0f:	83 ec 0c             	sub    esp,0xc
c0021b12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b16:	e8 cd ff ff ff       	call   c0021ae8 <IOAPIC::~IOAPIC()>
c0021b1b:	83 c4 10             	add    esp,0x10
c0021b1e:	83 ec 08             	sub    esp,0x8
c0021b21:	68 68 01 00 00       	push   0x168
c0021b26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b2a:	e8 ae ae fe ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c0021b2f:	83 c4 10             	add    esp,0x10
c0021b32:	83 c4 0c             	add    esp,0xc
c0021b35:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0021b36 <APIC::~APIC()>:
c0021b36:	83 ec 0c             	sub    esp,0xc
c0021b39:	ba 68 53 02 c0       	mov    edx,0xc0025368
c0021b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b42:	89 10                	mov    DWORD PTR [eax],edx
c0021b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b48:	83 ec 0c             	sub    esp,0xc
c0021b4b:	50                   	push   eax
c0021b4c:	e8 c5 cd fe ff       	call   c000e916 <InterruptController::~InterruptController()>
c0021b51:	83 c4 10             	add    esp,0x10
c0021b54:	90                   	nop
c0021b55:	83 c4 0c             	add    esp,0xc
c0021b58:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0021b5a <APIC::~APIC()>:
c0021b5a:	83 ec 0c             	sub    esp,0xc
c0021b5d:	83 ec 0c             	sub    esp,0xc
c0021b60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b64:	e8 cd ff ff ff       	call   c0021b36 <APIC::~APIC()>
c0021b69:	83 c4 10             	add    esp,0x10
c0021b6c:	83 ec 08             	sub    esp,0x8
c0021b6f:	68 58 21 00 00       	push   0x2158
c0021b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b78:	e8 60 ae fe ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c0021b7d:	83 c4 10             	add    esp,0x10
c0021b80:	83 c4 0c             	add    esp,0xc
c0021b83:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0021b84 <PIC::~PIC()>:
c0021b84:	83 ec 0c             	sub    esp,0xc
c0021b87:	ba 00 54 02 c0       	mov    edx,0xc0025400
c0021b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b90:	89 10                	mov    DWORD PTR [eax],edx
c0021b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b96:	83 ec 0c             	sub    esp,0xc
c0021b99:	50                   	push   eax
c0021b9a:	e8 77 cd fe ff       	call   c000e916 <InterruptController::~InterruptController()>
c0021b9f:	83 c4 10             	add    esp,0x10
c0021ba2:	90                   	nop
c0021ba3:	83 c4 0c             	add    esp,0xc
c0021ba6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0021ba8 <PIC::~PIC()>:
c0021ba8:	83 ec 0c             	sub    esp,0xc
c0021bab:	83 ec 0c             	sub    esp,0xc
c0021bae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bb2:	e8 cd ff ff ff       	call   c0021b84 <PIC::~PIC()>
c0021bb7:	83 c4 10             	add    esp,0x10
c0021bba:	83 ec 08             	sub    esp,0x8
c0021bbd:	68 58 21 00 00       	push   0x2158
c0021bc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bc6:	e8 12 ae fe ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c0021bcb:	83 c4 10             	add    esp,0x10
c0021bce:	83 c4 0c             	add    esp,0xc
c0021bd1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0021bd2 <APICTimer::~APICTimer()>:
c0021bd2:	83 ec 0c             	sub    esp,0xc
c0021bd5:	ba 54 54 02 c0       	mov    edx,0xc0025454
c0021bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bde:	89 10                	mov    DWORD PTR [eax],edx
c0021be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021be4:	83 ec 0c             	sub    esp,0xc
c0021be7:	50                   	push   eax
c0021be8:	e8 87 ed fe ff       	call   c0010974 <Timer::~Timer()>
c0021bed:	83 c4 10             	add    esp,0x10
c0021bf0:	90                   	nop
c0021bf1:	83 c4 0c             	add    esp,0xc
c0021bf4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0021bf6 <APICTimer::~APICTimer()>:
c0021bf6:	83 ec 0c             	sub    esp,0xc
c0021bf9:	83 ec 0c             	sub    esp,0xc
c0021bfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c00:	e8 cd ff ff ff       	call   c0021bd2 <APICTimer::~APICTimer()>
c0021c05:	83 c4 10             	add    esp,0x10
c0021c08:	83 ec 08             	sub    esp,0x8
c0021c0b:	68 60 01 00 00       	push   0x160
c0021c10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c14:	e8 c4 ad fe ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c0021c19:	83 c4 10             	add    esp,0x10
c0021c1c:	83 c4 0c             	add    esp,0xc
c0021c1f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0021c20 <PIT::~PIT()>:
c0021c20:	83 ec 0c             	sub    esp,0xc
c0021c23:	ba a4 54 02 c0       	mov    edx,0xc00254a4
c0021c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c2c:	89 10                	mov    DWORD PTR [eax],edx
c0021c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c32:	83 ec 0c             	sub    esp,0xc
c0021c35:	50                   	push   eax
c0021c36:	e8 39 ed fe ff       	call   c0010974 <Timer::~Timer()>
c0021c3b:	83 c4 10             	add    esp,0x10
c0021c3e:	90                   	nop
c0021c3f:	83 c4 0c             	add    esp,0xc
c0021c42:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021c44 <PIT::~PIT()>:
c0021c44:	83 ec 0c             	sub    esp,0xc
c0021c47:	83 ec 0c             	sub    esp,0xc
c0021c4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c4e:	e8 cd ff ff ff       	call   c0021c20 <PIT::~PIT()>
c0021c53:	83 c4 10             	add    esp,0x10
c0021c56:	83 ec 08             	sub    esp,0x8
c0021c59:	68 5c 01 00 00       	push   0x15c
c0021c5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c62:	e8 76 ad fe ff       	call   c000c9dd <operator delete(void*, unsigned long)>
c0021c67:	83 c4 10             	add    esp,0x10
c0021c6a:	83 c4 0c             	add    esp,0xc
c0021c6d:	c3                   	ret    
