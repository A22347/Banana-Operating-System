
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 af 78 00 00       	call   c00078cf <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 34 03 02 c0       	mov    eax,0xc0020334
c0000025:	3d 34 03 02 c0       	cmp    eax,0xc0020334
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 34 03 02 c0       	push   0xc0020334
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 34 03 02 c0       	mov    eax,0xc0020334
c0000051:	2d 34 03 02 c0       	sub    eax,0xc0020334
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 34 03 02 c0       	push   0xc0020334
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 20 02 c0 00 	cmp    BYTE PTR ds:0xc00220c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 38 d6 01 c0       	mov    ebx,0xc001d638
c0000097:	81 eb 34 d6 01 c0    	sub    ebx,0xc001d634
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 34 d6 01 c0       	mov    esi,0xc001d634
c00000a6:	a1 c4 20 02 c0       	mov    eax,ds:0xc00220c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 20 02 c0       	mov    ds:0xc00220c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 20 02 c0       	mov    eax,ds:0xc00220c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 34 03 02 c0       	push   0xc0020334
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 20 02 c0 01 	mov    BYTE PTR ds:0xc00220c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 20 02 c0       	push   0xc00220c8
c0000108:	68 34 03 02 c0       	push   0xc0020334
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 ec 2d 01 00       	call   c001309c <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 0a a1 00 00       	call   c000a3d2 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 ca 2d 01 00       	call   c001309c <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 d3 32 01 00       	call   c00135c4 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 22 39 01 00       	call   c0013c1c <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 c0 2e 02 c0 	lgdtd  ds:0xc0022ec0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 80 ff 00 00       	jmp    c0010302 <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 e0 20 02 c0       	mov    ds:0xc00220e0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 e0 20 02 c0    	mov    DWORD PTR ds:0xc00220e0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d e0 20 02 c0    	mov    ebx,DWORD PTR ds:0xc00220e0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 40 d6 01 c0 02 	test   BYTE PTR [edx-0x3ffe29c0],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 40 d6 01 c0 01 	test   BYTE PTR [edx-0x3ffe29c0],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 40 d6 01 c0 08 	test   BYTE PTR [edx-0x3ffe29c0],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 40 d6 01 c0 04 	test   BYTE PTR [ebx-0x3ffe29c0],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 40 d6 01 c0 01 	test   BYTE PTR [edx-0x3ffe29c0],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 00 21 02 c0    	mov    ecx,DWORD PTR ds:0xc0022100
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 00 21 02 c0    	mov    DWORD PTR ds:0xc0022100,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 04 21 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffddefc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 04 21 02 c0 	mov    DWORD PTR [eax*4-0x3ffddefc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 00 21 02 c0    	mov    DWORD PTR ds:0xc0022100,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 2c 21 02 c0    	cmp    DWORD PTR ds:0xc002212c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 3c 21 02 c0    	mov    ecx,DWORD PTR ds:0xc002213c
c0000d3d:	c7 42 0c 34 21 02 c0 	mov    DWORD PTR [edx+0xc],0xc0022134
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 3c 21 02 c0    	mov    DWORD PTR ds:0xc002213c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 2c 21 02 c0    	mov    DWORD PTR ds:0xc002212c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 00 21 02 c0 02 	test   BYTE PTR ds:0xc0022100,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 2e 69 00 00       	call   c000774c <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 70 68 00 00       	call   c000774c <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 5a 68 00 00       	call   c000774c <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 36 68 00 00       	call   c000774c <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 00 21 02 c0    	mov    edi,DWORD PTR ds:0xc0022100
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 04 21 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffddefc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 04 21 02 c0 	mov    DWORD PTR [edx*4-0x3ffddefc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 34 21 02 c0 	lea    edx,[eax*8-0x3ffddecc]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 00 21 02 c0       	mov    eax,0xc0022100
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 40 21 02 c0    	mov    ebx,DWORD PTR ds:0xc0022140
c00010bf:	81 fb 34 21 02 c0    	cmp    ebx,0xc0022134
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 34 21 02 c0       	cmp    eax,0xc0022134
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 30 21 02 c0    	cmp    DWORD PTR ds:0xc0022130,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 3c 21 02 c0       	mov    ds:0xc002213c,eax
c00010fb:	a3 40 21 02 c0       	mov    ds:0xc0022140,eax
c0001100:	a3 30 21 02 c0       	mov    ds:0xc0022130,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 34 21 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022134
c000110e:	c7 40 0c 34 21 02 c0 	mov    DWORD PTR [eax+0xc],0xc0022134
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 40 21 02 c0       	mov    ds:0xc0022140,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 34 21 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022134
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 f8 20 02 c0 	lea    ebp,[edx*4-0x3ffddf08]
c000115f:	8b 14 95 00 21 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddf00]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 00 21 02 c0 	lea    ecx,[edx*4-0x3ffddf00]
c000117a:	8b 14 95 00 21 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddf00]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 34 24 02 c0 	or     DWORD PTR [edi*4-0x3ffddbcc],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 34 21 02 c0 	lea    eax,[eax*8-0x3ffddecc]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 3c 21 02 c0    	mov    DWORD PTR ds:0xc002213c,ecx
c0001234:	89 0d 40 21 02 c0    	mov    DWORD PTR ds:0xc0022140,ecx
c000123a:	c7 41 08 34 21 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0022134
c0001241:	c7 41 0c 34 21 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0022134
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 2c 21 02 c0 	lea    edx,[ecx*8-0x3ffdded4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 34 24 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffddbcc]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 34 24 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffddbcc]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 2c 21 02 c0 	lea    edx,[eax*4-0x3ffdded4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 34 24 02 c0 	mov    DWORD PTR [ebx*4-0x3ffddbcc],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 3c 21 02 c0    	mov    DWORD PTR ds:0xc002213c,edi
c0001307:	89 3d 40 21 02 c0    	mov    DWORD PTR ds:0xc0022140,edi
c000130d:	c7 47 08 34 21 02 c0 	mov    DWORD PTR [edi+0x8],0xc0022134
c0001314:	c7 47 0c 34 21 02 c0 	mov    DWORD PTR [edi+0xc],0xc0022134
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 30 21 02 c0    	mov    DWORD PTR ds:0xc0022130,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 2c 21 02 c0       	mov    eax,ds:0xc002212c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 2c 21 02 c0    	mov    DWORD PTR ds:0xc002212c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 00 21 02 c0       	mov    edx,0xc0022100
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 00 21 02 c0 00 	cmp    DWORD PTR ds:0xc0022100,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 00 21 02 c0       	mov    eax,0xc0022100
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 54 24 02 c0    	mov    ebx,DWORD PTR ds:0xc0022454
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 54 24 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022454,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 54 24 02 c0    	mov    DWORD PTR ds:0xc0022454,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 2c 21 02 c0    	cmp    DWORD PTR ds:0xc002212c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 2c 21 02 c0    	mov    DWORD PTR ds:0xc002212c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 00 21 02 c0 00 	cmp    DWORD PTR ds:0xc0022100,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 00 21 02 c0       	mov    eax,0xc0022100
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 5c 24 02 c0    	push   DWORD PTR ds:0xc002245c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 00 21 02 c0 00 	cmp    DWORD PTR ds:0xc0022100,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 00 21 02 c0       	mov    eax,0xc0022100
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 5c 24 02 c0       	mov    eax,ds:0xc002245c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 2c 21 02 c0 00 	cmp    DWORD PTR ds:0xc002212c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 00 21 02 c0       	mov    eax,0xc0022100
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 2c 21 02 c0       	mov    eax,ds:0xc002212c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 04 21 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddefc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 34 21 02 c0       	mov    eax,0xc0022134
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 2c 24 02 c0       	cmp    eax,0xc002242c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 68 24 02 c0       	mov    eax,ds:0xc0022468
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 50 24 02 c0    	mov    esi,DWORD PTR ds:0xc0022450
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 64 24 02 c0    	mov    esi,DWORD PTR ds:0xc0022464
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 74 24 02 c0    	mov    esi,DWORD PTR ds:0xc0022474
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 44 d7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe28bc]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 00 21 02 c0       	mov    eax,ds:0xc0022100
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 00 21 02 c0       	mov    ds:0xc0022100,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 44 24 02 c0    	mov    DWORD PTR ds:0xc0022444,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 48 24 02 c0    	mov    DWORD PTR ds:0xc0022448,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 4c 24 02 c0    	mov    DWORD PTR ds:0xc002244c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 54 24 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022454,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 c0 62 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd9d40]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 c2 52 01 00       	jmp    c0016fac <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 c0 62 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd9d40]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 f0 52 01 00       	jmp    c0016ff0 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 c0 62 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd9d40]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 15 53 01 00       	jmp    c0017034 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 a0 d8 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2760]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 a0 d8 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2760]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba e8 f7 01 c0       	mov    edx,0xc001f7e8
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba 5c d7 01 c0       	mov    edx,0xc001d75c
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 a0 24 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffddb60]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 80 24 02 c0    	mov    ax,ds:0xc0022480
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 80 24 02 c0    	mov    ds:0xc0022480,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 62 d7 01 c0       	mov    eax,0xc001d762
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad 20 d8 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe27e0]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 6b d7 01 c0       	mov    eax,0xc001d76b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 a0 d8 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2760]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 a0 24 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffddb60]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 a0 24 02 c0 	mov    DWORD PTR [edx*4-0x3ffddb60],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 f0 d7 01 c0       	mov    eax,0xc001d7f0
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 a0 24 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddb60]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb e0 d7 01 c0       	mov    ebx,0xc001d7e0
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba c0 d7 01 c0       	mov    edx,0xc001d7c0
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba d0 d7 01 c0       	mov    edx,0xc001d7d0
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 72 d7 01 c0       	mov    edx,0xc001d772
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 7e d7 01 c0       	mov    edx,0xc001d77e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 92 d7 01 c0       	mov    edx,0xc001d792
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 fa 1d 00 00       	call   c0007875 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 f2 1d 00 00       	call   c0007885 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c c0 db 01 c0 	mov    DWORD PTR [esp+0xc],0xc001dbc0
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 c0 db 01 c0 	mov    DWORD PTR [esp+0x10],0xc001dbc0
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 c0 d9 01 c0       	mov    eax,0xc001d9c0
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 00 d9 01 c0       	mov    eax,0xc001d900
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 c0 d8 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2740]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bgrad_cache>:
c0005e15:	83 fa 0e             	cmp    edx,0xe
c0005e18:	77 16                	ja     c0005e30 <bgrad_cache+0x1b>
c0005e1a:	53                   	push   ebx
c0005e1b:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e1e:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e22:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e25:	42                   	inc    edx
c0005e26:	83 fa 0f             	cmp    edx,0xf
c0005e29:	75 f3                	jne    c0005e1e <bgrad_cache+0x9>
c0005e2b:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e2e:	5b                   	pop    ebx
c0005e2f:	c3                   	ret    
c0005e30:	c3                   	ret    

c0005e31 <ucscompare>:
c0005e31:	55                   	push   ebp
c0005e32:	57                   	push   edi
c0005e33:	89 c7                	mov    edi,eax
c0005e35:	56                   	push   esi
c0005e36:	89 d6                	mov    esi,edx
c0005e38:	53                   	push   ebx
c0005e39:	31 d2                	xor    edx,edx
c0005e3b:	83 ec 1c             	sub    esp,0x1c
c0005e3e:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e42:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e47:	c1 e3 08             	shl    ebx,0x8
c0005e4a:	09 c3                	or     ebx,eax
c0005e4c:	39 ca                	cmp    edx,ecx
c0005e4e:	7d 42                	jge    c0005e92 <ucscompare+0x61>
c0005e50:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e54:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e59:	c1 e0 08             	shl    eax,0x8
c0005e5c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e60:	09 e8                	or     eax,ebp
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	83 f8 3b             	cmp    eax,0x3b
c0005e69:	74 27                	je     c0005e92 <ucscompare+0x61>
c0005e6b:	83 ec 0c             	sub    esp,0xc
c0005e6e:	50                   	push   eax
c0005e6f:	e8 5c aa ff ff       	call   c00008d0 <tolower>
c0005e74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005e77:	89 c5                	mov    ebp,eax
c0005e79:	e8 52 aa ff ff       	call   c00008d0 <tolower>
c0005e7e:	83 c4 10             	add    esp,0x10
c0005e81:	39 c5                	cmp    ebp,eax
c0005e83:	75 20                	jne    c0005ea5 <ucscompare+0x74>
c0005e85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005e89:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005e8d:	83 c2 02             	add    edx,0x2
c0005e90:	eb ac                	jmp    c0005e3e <ucscompare+0xd>
c0005e92:	85 db                	test   ebx,ebx
c0005e94:	0f 95 c2             	setne  dl
c0005e97:	31 c0                	xor    eax,eax
c0005e99:	83 fb 2f             	cmp    ebx,0x2f
c0005e9c:	0f 95 c0             	setne  al
c0005e9f:	21 d0                	and    eax,edx
c0005ea1:	f7 d8                	neg    eax
c0005ea3:	eb 03                	jmp    c0005ea8 <ucscompare+0x77>
c0005ea5:	83 c8 ff             	or     eax,0xffffffff
c0005ea8:	83 c4 1c             	add    esp,0x1c
c0005eab:	5b                   	pop    ebx
c0005eac:	5e                   	pop    esi
c0005ead:	5f                   	pop    edi
c0005eae:	5d                   	pop    ebp
c0005eaf:	c3                   	ret    

c0005eb0 <fncompare>:
c0005eb0:	55                   	push   ebp
c0005eb1:	57                   	push   edi
c0005eb2:	89 c7                	mov    edi,eax
c0005eb4:	56                   	push   esi
c0005eb5:	89 ce                	mov    esi,ecx
c0005eb7:	53                   	push   ebx
c0005eb8:	31 db                	xor    ebx,ebx
c0005eba:	83 ec 1c             	sub    esp,0x1c
c0005ebd:	39 d3                	cmp    ebx,edx
c0005ebf:	7d 43                	jge    c0005f04 <fncompare+0x54>
c0005ec1:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005ec5:	3c 3b                	cmp    al,0x3b
c0005ec7:	74 3b                	je     c0005f04 <fncompare+0x54>
c0005ec9:	3c 2e                	cmp    al,0x2e
c0005ecb:	75 0e                	jne    c0005edb <fncompare+0x2b>
c0005ecd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005ed0:	39 d9                	cmp    ecx,ebx
c0005ed2:	74 30                	je     c0005f04 <fncompare+0x54>
c0005ed4:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005ed9:	74 29                	je     c0005f04 <fncompare+0x54>
c0005edb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005edf:	83 ec 0c             	sub    esp,0xc
c0005ee2:	50                   	push   eax
c0005ee3:	e8 e8 a9 ff ff       	call   c00008d0 <tolower>
c0005ee8:	89 c5                	mov    ebp,eax
c0005eea:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005eee:	89 04 24             	mov    DWORD PTR [esp],eax
c0005ef1:	e8 da a9 ff ff       	call   c00008d0 <tolower>
c0005ef6:	83 c4 10             	add    esp,0x10
c0005ef9:	39 c5                	cmp    ebp,eax
c0005efb:	75 1d                	jne    c0005f1a <fncompare+0x6a>
c0005efd:	43                   	inc    ebx
c0005efe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f02:	eb b9                	jmp    c0005ebd <fncompare+0xd>
c0005f04:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f07:	84 d2                	test   dl,dl
c0005f09:	0f 95 c1             	setne  cl
c0005f0c:	31 c0                	xor    eax,eax
c0005f0e:	80 fa 2f             	cmp    dl,0x2f
c0005f11:	0f 95 c0             	setne  al
c0005f14:	21 c8                	and    eax,ecx
c0005f16:	f7 d8                	neg    eax
c0005f18:	eb 03                	jmp    c0005f1d <fncompare+0x6d>
c0005f1a:	83 c8 ff             	or     eax,0xffffffff
c0005f1d:	83 c4 1c             	add    esp,0x1c
c0005f20:	5b                   	pop    ebx
c0005f21:	5e                   	pop    esi
c0005f22:	5f                   	pop    edi
c0005f23:	5d                   	pop    ebp
c0005f24:	c3                   	ret    

c0005f25 <bclear_cache>:
c0005f25:	83 ec 18             	sub    esp,0x18
c0005f28:	68 c0 dc 01 c0       	push   0xc001dcc0
c0005f2d:	e8 b2 19 01 00       	call   c00178e4 <iso_kprintf>
c0005f32:	83 c4 10             	add    esp,0x10
c0005f35:	31 c0                	xor    eax,eax
c0005f37:	8b 14 85 20 20 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddfe0]
c0005f3e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f44:	8b 14 85 80 20 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddf80]
c0005f4b:	40                   	inc    eax
c0005f4c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f52:	83 f8 10             	cmp    eax,0x10
c0005f55:	75 e0                	jne    c0005f37 <bclear_cache+0x12>
c0005f57:	83 c4 0c             	add    esp,0xc
c0005f5a:	c3                   	ret    

c0005f5b <bclear>:
c0005f5b:	eb c8                	jmp    c0005f25 <bclear_cache>

c0005f5d <iso_break_all>:
c0005f5d:	83 ec 18             	sub    esp,0x18
c0005f60:	68 ce dc 01 c0       	push   0xc001dcce
c0005f65:	e8 7a 19 01 00       	call   c00178e4 <iso_kprintf>
c0005f6a:	83 c4 10             	add    esp,0x10
c0005f6d:	31 c0                	xor    eax,eax
c0005f6f:	c7 80 d0 25 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdda30],0x1
c0005f79:	05 94 00 00 00       	add    eax,0x94
c0005f7e:	3d 40 09 00 00       	cmp    eax,0x940
c0005f83:	75 ea                	jne    c0005f6f <iso_break_all+0x12>
c0005f85:	83 c4 0c             	add    esp,0xc
c0005f88:	c3                   	ret    

c0005f89 <isoReadDiscSector>:
c0005f89:	83 ec 0c             	sub    esp,0xc
c0005f8c:	0f be 05 60 20 02 c0 	movsx  eax,BYTE PTR ds:0xc0022060
c0005f93:	50                   	push   eax
c0005f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005fa0:	e8 e3 18 01 00       	call   c0017888 <isoReadDiscSectorHelper>
c0005fa5:	83 c4 1c             	add    esp,0x1c
c0005fa8:	c3                   	ret    

c0005fa9 <bread_cache>:
c0005fa9:	55                   	push   ebp
c0005faa:	57                   	push   edi
c0005fab:	89 d7                	mov    edi,edx
c0005fad:	56                   	push   esi
c0005fae:	ba 0f 00 00 00       	mov    edx,0xf
c0005fb3:	53                   	push   ebx
c0005fb4:	89 c6                	mov    esi,eax
c0005fb6:	83 ec 0c             	sub    esp,0xc
c0005fb9:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005fbc:	39 38                	cmp    DWORD PTR [eax],edi
c0005fbe:	74 3c                	je     c0005ffc <bread_cache+0x53>
c0005fc0:	4a                   	dec    edx
c0005fc1:	83 fa ff             	cmp    edx,0xffffffff
c0005fc4:	75 f3                	jne    c0005fb9 <bread_cache+0x10>
c0005fc6:	31 db                	xor    ebx,ebx
c0005fc8:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fcb:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fce:	74 08                	je     c0005fd8 <bread_cache+0x2f>
c0005fd0:	43                   	inc    ebx
c0005fd1:	83 fb 10             	cmp    ebx,0x10
c0005fd4:	75 f2                	jne    c0005fc8 <bread_cache+0x1f>
c0005fd6:	31 db                	xor    ebx,ebx
c0005fd8:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fdb:	50                   	push   eax
c0005fdc:	6a 01                	push   0x1
c0005fde:	57                   	push   edi
c0005fdf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fe2:	83 c0 04             	add    eax,0x4
c0005fe5:	50                   	push   eax
c0005fe6:	e8 9e ff ff ff       	call   c0005f89 <isoReadDiscSector>
c0005feb:	83 c4 10             	add    esp,0x10
c0005fee:	83 c9 ff             	or     ecx,0xffffffff
c0005ff1:	85 c0                	test   eax,eax
c0005ff3:	78 13                	js     c0006008 <bread_cache+0x5f>
c0005ff5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005ff8:	89 da                	mov    edx,ebx
c0005ffa:	89 38                	mov    DWORD PTR [eax],edi
c0005ffc:	89 f0                	mov    eax,esi
c0005ffe:	e8 12 fe ff ff       	call   c0005e15 <bgrad_cache>
c0006003:	b9 0f 00 00 00       	mov    ecx,0xf
c0006008:	83 c4 0c             	add    esp,0xc
c000600b:	89 c8                	mov    eax,ecx
c000600d:	5b                   	pop    ebx
c000600e:	5e                   	pop    esi
c000600f:	5f                   	pop    edi
c0006010:	5d                   	pop    ebp
c0006011:	c3                   	ret    

c0006012 <biread>:
c0006012:	89 c2                	mov    edx,eax
c0006014:	b8 80 20 02 c0       	mov    eax,0xc0022080
c0006019:	eb 8e                	jmp    c0005fa9 <bread_cache>

c000601b <bdread>:
c000601b:	89 c2                	mov    edx,eax
c000601d:	b8 20 20 02 c0       	mov    eax,0xc0022020
c0006022:	eb 85                	jmp    c0005fa9 <bread_cache>

c0006024 <strnicmp>:
c0006024:	55                   	push   ebp
c0006025:	57                   	push   edi
c0006026:	56                   	push   esi
c0006027:	31 f6                	xor    esi,esi
c0006029:	53                   	push   ebx
c000602a:	83 ec 0c             	sub    esp,0xc
c000602d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0006031:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c0006035:	74 42                	je     c0006079 <strnicmp+0x55>
c0006037:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000603b:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c000603f:	84 c0                	test   al,al
c0006041:	74 36                	je     c0006079 <strnicmp+0x55>
c0006043:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006046:	84 d2                	test   dl,dl
c0006048:	74 2f                	je     c0006079 <strnicmp+0x55>
c000604a:	38 d0                	cmp    al,dl
c000604c:	8d 6e 01             	lea    ebp,[esi+0x1]
c000604f:	75 04                	jne    c0006055 <strnicmp+0x31>
c0006051:	89 ee                	mov    esi,ebp
c0006053:	eb dc                	jmp    c0006031 <strnicmp+0xd>
c0006055:	83 ec 0c             	sub    esp,0xc
c0006058:	50                   	push   eax
c0006059:	e8 72 a8 ff ff       	call   c00008d0 <tolower>
c000605e:	89 c7                	mov    edi,eax
c0006060:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c0006064:	89 ee                	mov    esi,ebp
c0006066:	89 04 24             	mov    DWORD PTR [esp],eax
c0006069:	e8 62 a8 ff ff       	call   c00008d0 <tolower>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	29 c7                	sub    edi,eax
c0006073:	89 f8                	mov    eax,edi
c0006075:	74 ba                	je     c0006031 <strnicmp+0xd>
c0006077:	eb 02                	jmp    c000607b <strnicmp+0x57>
c0006079:	31 c0                	xor    eax,eax
c000607b:	83 c4 0c             	add    esp,0xc
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	5d                   	pop    ebp
c0006082:	c3                   	ret    

c0006083 <find_object>:
c0006083:	55                   	push   ebp
c0006084:	89 c5                	mov    ebp,eax
c0006086:	57                   	push   edi
c0006087:	56                   	push   esi
c0006088:	53                   	push   ebx
c0006089:	89 d3                	mov    ebx,edx
c000608b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006091:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006098:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000609c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060a0:	83 3d b4 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022eb4,0x0
c00060a7:	74 0b                	je     c00060b4 <find_object+0x31>
c00060a9:	89 ea                	mov    edx,ebp
c00060ab:	8d 44 24 20          	lea    eax,[esp+0x20]
c00060af:	e8 90 fc ff ff       	call   c0005d44 <utf2ucs>
c00060b4:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00060b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00060bb:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00060c0:	7e 11                	jle    c00060d3 <find_object+0x50>
c00060c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060c6:	e8 47 ff ff ff       	call   c0006012 <biread>
c00060cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060cf:	85 c0                	test   eax,eax
c00060d1:	79 07                	jns    c00060da <find_object+0x57>
c00060d3:	31 db                	xor    ebx,ebx
c00060d5:	e9 5b 01 00 00       	jmp    c0006235 <find_object+0x1b2>
c00060da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060e6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060ea:	8b 04 85 80 20 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddf80]
c00060f1:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060f5:	8a 03                	mov    al,BYTE PTR [ebx]
c00060f7:	84 c0                	test   al,al
c00060f9:	75 0e                	jne    c0006109 <find_object+0x86>
c00060fb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060ff:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c0006107:	eb b2                	jmp    c00060bb <find_object+0x38>
c0006109:	8b 35 b4 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022eb4
c000610f:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006113:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006117:	89 ca                	mov    edx,ecx
c0006119:	85 f6                	test   esi,esi
c000611b:	74 2b                	je     c0006148 <find_object+0xc5>
c000611d:	8d 43 21             	lea    eax,[ebx+0x21]
c0006120:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006124:	e8 08 fd ff ff       	call   c0005e31 <ucscompare>
c0006129:	85 c0                	test   eax,eax
c000612b:	0f 84 c1 00 00 00    	je     c00061f2 <find_object+0x16f>
c0006131:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006134:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006138:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c0006140:	0f 8e dc 00 00 00    	jle    c0006222 <find_object+0x19f>
c0006146:	eb b3                	jmp    c00060fb <find_object+0x78>
c0006148:	0f b6 f0             	movzx  esi,al
c000614b:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c000614f:	29 ce                	sub    esi,ecx
c0006151:	80 e2 01             	and    dl,0x1
c0006154:	74 05                	je     c000615b <find_object+0xd8>
c0006156:	83 ee 21             	sub    esi,0x21
c0006159:	eb 55                	jmp    c00061b0 <find_object+0x12d>
c000615b:	47                   	inc    edi
c000615c:	83 ee 22             	sub    esi,0x22
c000615f:	eb 4f                	jmp    c00061b0 <find_object+0x12d>
c0006161:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006164:	48                   	dec    eax
c0006165:	3c 01                	cmp    al,0x1
c0006167:	77 4c                	ja     c00061b5 <find_object+0x132>
c0006169:	50                   	push   eax
c000616a:	6a 02                	push   0x2
c000616c:	68 dd dc 01 c0       	push   0xc001dcdd
c0006171:	57                   	push   edi
c0006172:	e8 e9 a5 ff ff       	call   c0000760 <strncmp>
c0006177:	83 c4 10             	add    esp,0x10
c000617a:	85 c0                	test   eax,eax
c000617c:	75 2a                	jne    c00061a8 <find_object+0x125>
c000617e:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c0006182:	8d 42 fb             	lea    eax,[edx-0x5]
c0006185:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006189:	50                   	push   eax
c000618a:	8d 47 05             	lea    eax,[edi+0x5]
c000618d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0006191:	50                   	push   eax
c0006192:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006196:	50                   	push   eax
c0006197:	e8 94 a4 ff ff       	call   c0000630 <strncpy>
c000619c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061a0:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c00061a5:	83 c4 10             	add    esp,0x10
c00061a8:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00061ac:	29 c6                	sub    esi,eax
c00061ae:	01 c7                	add    edi,eax
c00061b0:	83 fe 03             	cmp    esi,0x3
c00061b3:	7f ac                	jg     c0006161 <find_object+0xde>
c00061b5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00061ba:	7e 40                	jle    c00061fc <find_object+0x179>
c00061bc:	51                   	push   ecx
c00061bd:	51                   	push   ecx
c00061be:	6a 2f                	push   0x2f
c00061c0:	55                   	push   ebp
c00061c1:	e8 6a a5 ff ff       	call   c0000730 <strchr>
c00061c6:	83 c4 10             	add    esp,0x10
c00061c9:	85 c0                	test   eax,eax
c00061cb:	74 04                	je     c00061d1 <find_object+0x14e>
c00061cd:	29 e8                	sub    eax,ebp
c00061cf:	eb 0c                	jmp    c00061dd <find_object+0x15a>
c00061d1:	83 ec 0c             	sub    esp,0xc
c00061d4:	55                   	push   ebp
c00061d5:	e8 66 a3 ff ff       	call   c0000540 <strlen>
c00061da:	83 c4 10             	add    esp,0x10
c00061dd:	52                   	push   edx
c00061de:	50                   	push   eax
c00061df:	55                   	push   ebp
c00061e0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061e4:	50                   	push   eax
c00061e5:	e8 3a fe ff ff       	call   c0006024 <strnicmp>
c00061ea:	83 c4 10             	add    esp,0x10
c00061ed:	e9 37 ff ff ff       	jmp    c0006129 <find_object+0xa6>
c00061f2:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f6:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061fa:	eb 1e                	jmp    c000621a <find_object+0x197>
c00061fc:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006200:	8d 43 21             	lea    eax,[ebx+0x21]
c0006203:	89 e9                	mov    ecx,ebp
c0006205:	e8 a6 fc ff ff       	call   c0005eb0 <fncompare>
c000620a:	85 c0                	test   eax,eax
c000620c:	0f 85 1f ff ff ff    	jne    c0006131 <find_object+0xae>
c0006212:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006216:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000621a:	0f 85 11 ff ff ff    	jne    c0006131 <find_object+0xae>
c0006220:	eb 13                	jmp    c0006235 <find_object+0x1b2>
c0006222:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006226:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c000622a:	0f 8f b2 fe ff ff    	jg     c00060e2 <find_object+0x5f>
c0006230:	e9 c6 fe ff ff       	jmp    c00060fb <find_object+0x78>
c0006235:	81 c4 2c 01 00 00    	add    esp,0x12c
c000623b:	89 d8                	mov    eax,ebx
c000623d:	5b                   	pop    ebx
c000623e:	5e                   	pop    esi
c000623f:	5f                   	pop    edi
c0006240:	5d                   	pop    ebp
c0006241:	c3                   	ret    

c0006242 <find_object_path>:
c0006242:	55                   	push   ebp
c0006243:	57                   	push   edi
c0006244:	89 d7                	mov    edi,edx
c0006246:	56                   	push   esi
c0006247:	89 c6                	mov    esi,eax
c0006249:	53                   	push   ebx
c000624a:	89 cb                	mov    ebx,ecx
c000624c:	83 ec 0c             	sub    esp,0xc
c000624f:	50                   	push   eax
c0006250:	50                   	push   eax
c0006251:	6a 2f                	push   0x2f
c0006253:	56                   	push   esi
c0006254:	e8 d7 a4 ff ff       	call   c0000730 <strchr>
c0006259:	83 c4 10             	add    esp,0x10
c000625c:	89 c5                	mov    ebp,eax
c000625e:	85 c0                	test   eax,eax
c0006260:	74 3a                	je     c000629c <find_object_path+0x5a>
c0006262:	39 ee                	cmp    esi,ebp
c0006264:	74 31                	je     c0006297 <find_object_path+0x55>
c0006266:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006269:	e8 a5 fb ff ff       	call   c0005e13 <iso_733>
c000626e:	89 c2                	mov    edx,eax
c0006270:	8d 43 02             	lea    eax,[ebx+0x2]
c0006273:	e8 9b fb ff ff       	call   c0005e13 <iso_733>
c0006278:	83 ec 0c             	sub    esp,0xc
c000627b:	89 c1                	mov    ecx,eax
c000627d:	52                   	push   edx
c000627e:	89 f0                	mov    eax,esi
c0006280:	ba 01 00 00 00       	mov    edx,0x1
c0006285:	e8 f9 fd ff ff       	call   c0006083 <find_object>
c000628a:	83 c4 10             	add    esp,0x10
c000628d:	89 c3                	mov    ebx,eax
c000628f:	85 c0                	test   eax,eax
c0006291:	75 04                	jne    c0006297 <find_object_path+0x55>
c0006293:	31 db                	xor    ebx,ebx
c0006295:	eb 36                	jmp    c00062cd <find_object_path+0x8b>
c0006297:	8d 75 01             	lea    esi,[ebp+0x1]
c000629a:	eb b3                	jmp    c000624f <find_object_path+0xd>
c000629c:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000629f:	74 28                	je     c00062c9 <find_object_path+0x87>
c00062a1:	8d 43 0a             	lea    eax,[ebx+0xa]
c00062a4:	e8 6a fb ff ff       	call   c0005e13 <iso_733>
c00062a9:	89 c2                	mov    edx,eax
c00062ab:	8d 43 02             	lea    eax,[ebx+0x2]
c00062ae:	e8 60 fb ff ff       	call   c0005e13 <iso_733>
c00062b3:	83 ec 0c             	sub    esp,0xc
c00062b6:	89 c1                	mov    ecx,eax
c00062b8:	52                   	push   edx
c00062b9:	89 f0                	mov    eax,esi
c00062bb:	89 fa                	mov    edx,edi
c00062bd:	e8 c1 fd ff ff       	call   c0006083 <find_object>
c00062c2:	83 c4 10             	add    esp,0x10
c00062c5:	89 c3                	mov    ebx,eax
c00062c7:	eb 04                	jmp    c00062cd <find_object_path+0x8b>
c00062c9:	85 ff                	test   edi,edi
c00062cb:	74 c6                	je     c0006293 <find_object_path+0x51>
c00062cd:	83 c4 0c             	add    esp,0xc
c00062d0:	89 d8                	mov    eax,ebx
c00062d2:	5b                   	pop    ebx
c00062d3:	5e                   	pop    esi
c00062d4:	5f                   	pop    edi
c00062d5:	5d                   	pop    ebp
c00062d6:	c3                   	ret    

c00062d7 <stricmp>:
c00062d7:	57                   	push   edi
c00062d8:	56                   	push   esi
c00062d9:	31 f6                	xor    esi,esi
c00062db:	53                   	push   ebx
c00062dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e0:	83 ec 0c             	sub    esp,0xc
c00062e3:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062eb:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062ef:	50                   	push   eax
c00062f0:	e8 bb a5 ff ff       	call   c00008b0 <toupper>
c00062f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00062f8:	e8 d3 a5 ff ff       	call   c00008d0 <tolower>
c00062fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006300:	89 c3                	mov    ebx,eax
c0006302:	e8 a9 a5 ff ff       	call   c00008b0 <toupper>
c0006307:	89 04 24             	mov    DWORD PTR [esp],eax
c000630a:	e8 c1 a5 ff ff       	call   c00008d0 <tolower>
c000630f:	83 c4 10             	add    esp,0x10
c0006312:	39 c3                	cmp    ebx,eax
c0006314:	75 05                	jne    c000631b <stricmp+0x44>
c0006316:	46                   	inc    esi
c0006317:	85 db                	test   ebx,ebx
c0006319:	75 c1                	jne    c00062dc <stricmp+0x5>
c000631b:	29 c3                	sub    ebx,eax
c000631d:	89 d8                	mov    eax,ebx
c000631f:	5b                   	pop    ebx
c0006320:	5e                   	pop    esi
c0006321:	5f                   	pop    edi
c0006322:	c3                   	ret    

c0006323 <iso_open>:
c0006323:	57                   	push   edi
c0006324:	31 c0                	xor    eax,eax
c0006326:	56                   	push   esi
c0006327:	b9 80 2e 02 c0       	mov    ecx,0xc0022e80
c000632c:	53                   	push   ebx
c000632d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006332:	0f 95 c0             	setne  al
c0006335:	89 c2                	mov    edx,eax
c0006337:	89 c6                	mov    esi,eax
c0006339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000633d:	e8 00 ff ff ff       	call   c0006242 <find_object_path>
c0006342:	83 ca ff             	or     edx,0xffffffff
c0006345:	85 c0                	test   eax,eax
c0006347:	74 5e                	je     c00063a7 <iso_open+0x84>
c0006349:	89 c1                	mov    ecx,eax
c000634b:	31 d2                	xor    edx,edx
c000634d:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006353:	83 bf 40 25 02 c0 00 	cmp    DWORD PTR [edi-0x3ffddac0],0x0
c000635a:	75 42                	jne    c000639e <iso_open+0x7b>
c000635c:	8d 41 02             	lea    eax,[ecx+0x2]
c000635f:	c7 87 40 25 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffddac0],0xffffffff
c0006369:	e8 a5 fa ff ff       	call   c0005e13 <iso_733>
c000636e:	89 b7 44 25 02 c0    	mov    DWORD PTR [edi-0x3ffddabc],esi
c0006374:	89 87 40 25 02 c0    	mov    DWORD PTR [edi-0x3ffddac0],eax
c000637a:	c7 87 48 25 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffddab8],0x0
c0006384:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006387:	e8 87 fa ff ff       	call   c0005e13 <iso_733>
c000638c:	c7 87 d0 25 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdda30],0x0
c0006396:	89 87 4c 25 02 c0    	mov    DWORD PTR [edi-0x3ffddab4],eax
c000639c:	eb 09                	jmp    c00063a7 <iso_open+0x84>
c000639e:	42                   	inc    edx
c000639f:	83 fa 10             	cmp    edx,0x10
c00063a2:	75 a9                	jne    c000634d <iso_open+0x2a>
c00063a4:	83 ca ff             	or     edx,0xffffffff
c00063a7:	5b                   	pop    ebx
c00063a8:	89 d0                	mov    eax,edx
c00063aa:	5e                   	pop    esi
c00063ab:	5f                   	pop    edi
c00063ac:	c3                   	ret    

c00063ad <iso_close>:
c00063ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063b1:	83 f8 0f             	cmp    eax,0xf
c00063b4:	7f 10                	jg     c00063c6 <iso_close+0x19>
c00063b6:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00063bc:	c7 80 40 25 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffddac0],0x0
c00063c6:	e9 5a fb ff ff       	jmp    c0005f25 <bclear_cache>

c00063cb <iso_read>:
c00063cb:	55                   	push   ebp
c00063cc:	57                   	push   edi
c00063cd:	56                   	push   esi
c00063ce:	53                   	push   ebx
c00063cf:	83 ec 1c             	sub    esp,0x1c
c00063d2:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063d6:	83 fd 0f             	cmp    ebp,0xf
c00063d9:	7e 0a                	jle    c00063e5 <iso_read+0x1a>
c00063db:	83 c8 ff             	or     eax,0xffffffff
c00063de:	89 c2                	mov    edx,eax
c00063e0:	e9 f4 00 00 00       	jmp    c00064d9 <iso_read+0x10e>
c00063e5:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063eb:	83 bd 40 25 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffddac0],0x0
c00063f2:	74 e7                	je     c00063db <iso_read+0x10>
c00063f4:	8b 95 d0 25 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdda30]
c00063fa:	85 d2                	test   edx,edx
c00063fc:	75 dd                	jne    c00063db <iso_read+0x10>
c00063fe:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0006403:	0f 84 cd 00 00 00    	je     c00064d6 <iso_read+0x10b>
c0006409:	8b 85 48 25 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffddab8]
c000640f:	8b 8d 4c 25 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffddab4]
c0006415:	29 c1                	sub    ecx,eax
c0006417:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c000641b:	76 04                	jbe    c0006421 <iso_read+0x56>
c000641d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006421:	85 c9                	test   ecx,ecx
c0006423:	0f 84 ad 00 00 00    	je     c00064d6 <iso_read+0x10b>
c0006429:	89 c6                	mov    esi,eax
c000642b:	bb 00 08 00 00       	mov    ebx,0x800
c0006430:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006436:	c1 e8 0b             	shr    eax,0xb
c0006439:	29 f3                	sub    ebx,esi
c000643b:	03 85 40 25 02 c0    	add    eax,DWORD PTR [ebp-0x3ffddac0]
c0006441:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006447:	7e 3f                	jle    c0006488 <iso_read+0xbd>
c0006449:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000644f:	75 37                	jne    c0006488 <iso_read+0xbd>
c0006451:	be 20 00 00 00       	mov    esi,0x20
c0006456:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000645c:	7f 05                	jg     c0006463 <iso_read+0x98>
c000645e:	89 ce                	mov    esi,ecx
c0006460:	c1 fe 0b             	sar    esi,0xb
c0006463:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006467:	89 f3                	mov    ebx,esi
c0006469:	c1 e3 0b             	shl    ebx,0xb
c000646c:	52                   	push   edx
c000646d:	56                   	push   esi
c000646e:	50                   	push   eax
c000646f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006473:	e8 11 fb ff ff       	call   c0005f89 <isoReadDiscSector>
c0006478:	83 c4 10             	add    esp,0x10
c000647b:	85 c0                	test   eax,eax
c000647d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006481:	7f 3e                	jg     c00064c1 <iso_read+0xf6>
c0006483:	e9 53 ff ff ff       	jmp    c00063db <iso_read+0x10>
c0006488:	39 cb                	cmp    ebx,ecx
c000648a:	7e 02                	jle    c000648e <iso_read+0xc3>
c000648c:	89 cb                	mov    ebx,ecx
c000648e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006492:	e8 84 fb ff ff       	call   c000601b <bdread>
c0006497:	85 c0                	test   eax,eax
c0006499:	0f 88 3c ff ff ff    	js     c00063db <iso_read+0x10>
c000649f:	8b 0c 85 20 20 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffddfe0]
c00064a6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00064aa:	8b 85 48 25 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffddab8]
c00064b0:	25 ff 07 00 00       	and    eax,0x7ff
c00064b5:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00064b9:	89 d9                	mov    ecx,ebx
c00064bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00064bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00064c1:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00064c5:	01 9d 48 25 02 c0    	add    DWORD PTR [ebp-0x3ffddab8],ebx
c00064cb:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064cf:	01 da                	add    edx,ebx
c00064d1:	e9 28 ff ff ff       	jmp    c00063fe <iso_read+0x33>
c00064d6:	89 d0                	mov    eax,edx
c00064d8:	99                   	cdq    
c00064d9:	83 c4 1c             	add    esp,0x1c
c00064dc:	5b                   	pop    ebx
c00064dd:	5e                   	pop    esi
c00064de:	5f                   	pop    edi
c00064df:	5d                   	pop    ebp
c00064e0:	c3                   	ret    

c00064e1 <iso_seek>:
c00064e1:	55                   	push   ebp
c00064e2:	83 c8 ff             	or     eax,0xffffffff
c00064e5:	57                   	push   edi
c00064e6:	89 c2                	mov    edx,eax
c00064e8:	56                   	push   esi
c00064e9:	53                   	push   ebx
c00064ea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064ee:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064f6:	83 fe 0f             	cmp    esi,0xf
c00064f9:	7f 65                	jg     c0006560 <iso_seek+0x7f>
c00064fb:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006501:	8d 8d 40 25 02 c0    	lea    ecx,[ebp-0x3ffddac0]
c0006507:	83 bd 40 25 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffddac0],0x0
c000650e:	74 50                	je     c0006560 <iso_seek+0x7f>
c0006510:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006517:	75 47                	jne    c0006560 <iso_seek+0x7f>
c0006519:	83 fb 01             	cmp    ebx,0x1
c000651c:	74 0e                	je     c000652c <iso_seek+0x4b>
c000651e:	83 fb 02             	cmp    ebx,0x2
c0006521:	74 0e                	je     c0006531 <iso_seek+0x50>
c0006523:	85 db                	test   ebx,ebx
c0006525:	75 39                	jne    c0006560 <iso_seek+0x7f>
c0006527:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c000652a:	eb 0d                	jmp    c0006539 <iso_seek+0x58>
c000652c:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c000652f:	eb 08                	jmp    c0006539 <iso_seek+0x58>
c0006531:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006534:	01 f8                	add    eax,edi
c0006536:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006539:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c000653f:	8b 88 4c 25 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffddab4]
c0006545:	05 40 25 02 c0       	add    eax,0xc0022540
c000654a:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000654d:	76 03                	jbe    c0006552 <iso_seek+0x71>
c000654f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006552:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006558:	8b 82 48 25 02 c0    	mov    eax,DWORD PTR [edx-0x3ffddab8]
c000655e:	31 d2                	xor    edx,edx
c0006560:	5b                   	pop    ebx
c0006561:	5e                   	pop    esi
c0006562:	5f                   	pop    edi
c0006563:	5d                   	pop    ebp
c0006564:	c3                   	ret    

c0006565 <iso_tell>:
c0006565:	83 c8 ff             	or     eax,0xffffffff
c0006568:	53                   	push   ebx
c0006569:	89 c2                	mov    edx,eax
c000656b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000656f:	83 f9 0f             	cmp    ecx,0xf
c0006572:	7f 20                	jg     c0006594 <iso_tell+0x2f>
c0006574:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000657a:	83 bb 40 25 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffddac0],0x0
c0006581:	74 11                	je     c0006594 <iso_tell+0x2f>
c0006583:	83 bb d0 25 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdda30],0x0
c000658a:	75 08                	jne    c0006594 <iso_tell+0x2f>
c000658c:	8b 83 48 25 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffddab8]
c0006592:	31 d2                	xor    edx,edx
c0006594:	5b                   	pop    ebx
c0006595:	c3                   	ret    

c0006596 <iso_total>:
c0006596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659a:	83 c8 ff             	or     eax,0xffffffff
c000659d:	83 fa 0f             	cmp    edx,0xf
c00065a0:	7f 1e                	jg     c00065c0 <iso_total+0x2a>
c00065a2:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00065a8:	83 ba 40 25 02 c0 00 	cmp    DWORD PTR [edx-0x3ffddac0],0x0
c00065af:	74 0f                	je     c00065c0 <iso_total+0x2a>
c00065b1:	83 ba d0 25 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdda30],0x0
c00065b8:	75 06                	jne    c00065c0 <iso_total+0x2a>
c00065ba:	8b 82 4c 25 02 c0    	mov    eax,DWORD PTR [edx-0x3ffddab4]
c00065c0:	c3                   	ret    

c00065c1 <fn_postprocess>:
c00065c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00065c5:	89 d0                	mov    eax,edx
c00065c7:	8a 08                	mov    cl,BYTE PTR [eax]
c00065c9:	80 f9 3b             	cmp    cl,0x3b
c00065cc:	74 07                	je     c00065d5 <fn_postprocess+0x14>
c00065ce:	84 c9                	test   cl,cl
c00065d0:	74 03                	je     c00065d5 <fn_postprocess+0x14>
c00065d2:	40                   	inc    eax
c00065d3:	eb f2                	jmp    c00065c7 <fn_postprocess+0x6>
c00065d5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065d8:	39 d0                	cmp    eax,edx
c00065da:	76 0a                	jbe    c00065e6 <fn_postprocess+0x25>
c00065dc:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065e0:	75 04                	jne    c00065e6 <fn_postprocess+0x25>
c00065e2:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065e6:	c3                   	ret    

c00065e7 <iso_readdir>:
c00065e7:	55                   	push   ebp
c00065e8:	57                   	push   edi
c00065e9:	56                   	push   esi
c00065ea:	53                   	push   ebx
c00065eb:	83 ec 1c             	sub    esp,0x1c
c00065ee:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00065f2:	83 fb 0f             	cmp    ebx,0xf
c00065f5:	7f 28                	jg     c000661f <iso_readdir+0x38>
c00065f7:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00065fd:	8d b8 40 25 02 c0    	lea    edi,[eax-0x3ffddac0]
c0006603:	83 b8 40 25 02 c0 00 	cmp    DWORD PTR [eax-0x3ffddac0],0x0
c000660a:	74 13                	je     c000661f <iso_readdir+0x38>
c000660c:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006610:	74 0d                	je     c000661f <iso_readdir+0x38>
c0006612:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006619:	0f 84 b1 00 00 00    	je     c00066d0 <iso_readdir+0xe9>
c000661f:	83 ec 0c             	sub    esp,0xc
c0006622:	68 e0 dc 01 c0       	push   0xc001dce0
c0006627:	e8 b8 12 01 00       	call   c00178e4 <iso_kprintf>
c000662c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000662f:	e8 d0 12 01 00       	call   c0017904 <iso_kprintfd>
c0006634:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000663a:	c7 04 24 e5 dc 01 c0 	mov    DWORD PTR [esp],0xc001dce5
c0006641:	e8 9e 12 01 00       	call   c00178e4 <iso_kprintf>
c0006646:	5d                   	pop    ebp
c0006647:	ff b3 40 25 02 c0    	push   DWORD PTR [ebx-0x3ffddac0]
c000664d:	e8 b2 12 01 00       	call   c0017904 <iso_kprintfd>
c0006652:	c7 04 24 eb dc 01 c0 	mov    DWORD PTR [esp],0xc001dceb
c0006659:	e8 86 12 01 00       	call   c00178e4 <iso_kprintf>
c000665e:	58                   	pop    eax
c000665f:	ff b3 44 25 02 c0    	push   DWORD PTR [ebx-0x3ffddabc]
c0006665:	e8 9a 12 01 00       	call   c0017904 <iso_kprintfd>
c000666a:	c7 04 24 f1 dc 01 c0 	mov    DWORD PTR [esp],0xc001dcf1
c0006671:	e8 6e 12 01 00       	call   c00178e4 <iso_kprintf>
c0006676:	58                   	pop    eax
c0006677:	ff b3 d0 25 02 c0    	push   DWORD PTR [ebx-0x3ffdda30]
c000667d:	e8 82 12 01 00       	call   c0017904 <iso_kprintfd>
c0006682:	83 c4 10             	add    esp,0x10
c0006685:	eb 42                	jmp    c00066c9 <iso_readdir+0xe2>
c0006687:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000668a:	8b 34 85 80 20 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffddf80]
c0006691:	89 d1                	mov    ecx,edx
c0006693:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006699:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c000669d:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00066a0:	75 35                	jne    c00066d7 <iso_readdir+0xf0>
c00066a2:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00066a8:	81 c2 00 08 00 00    	add    edx,0x800
c00066ae:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00066b1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00066b4:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00066b7:	73 1e                	jae    c00066d7 <iso_readdir+0xf0>
c00066b9:	c1 ea 0b             	shr    edx,0xb
c00066bc:	8b 07                	mov    eax,DWORD PTR [edi]
c00066be:	01 d0                	add    eax,edx
c00066c0:	e8 4d f9 ff ff       	call   c0006012 <biread>
c00066c5:	85 c0                	test   eax,eax
c00066c7:	79 be                	jns    c0006687 <iso_readdir+0xa0>
c00066c9:	31 c0                	xor    eax,eax
c00066cb:	e9 66 01 00 00       	jmp    c0006836 <iso_readdir+0x24f>
c00066d0:	31 f6                	xor    esi,esi
c00066d2:	83 c8 ff             	or     eax,0xffffffff
c00066d5:	eb da                	jmp    c00066b1 <iso_readdir+0xca>
c00066d7:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00066dd:	8b ba 48 25 02 c0    	mov    edi,DWORD PTR [edx-0x3ffddab8]
c00066e3:	81 c2 40 25 02 c0    	add    edx,0xc0022540
c00066e9:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00066ec:	73 db                	jae    c00066c9 <iso_readdir+0xe2>
c00066ee:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00066f2:	75 34                	jne    c0006728 <iso_readdir+0x141>
c00066f4:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00066f8:	75 2e                	jne    c0006728 <iso_readdir+0x141>
c00066fa:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00066fd:	8b 34 85 80 20 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffddf80]
c0006704:	01 f9                	add    ecx,edi
c0006706:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006709:	89 c8                	mov    eax,ecx
c000670b:	25 ff 07 00 00       	and    eax,0x7ff
c0006710:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006715:	01 c8                	add    eax,ecx
c0006717:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000671a:	25 ff 07 00 00       	and    eax,0x7ff
c000671f:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006723:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006726:	74 a1                	je     c00066c9 <iso_readdir+0xe2>
c0006728:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000672e:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006732:	8d 56 21             	lea    edx,[esi+0x21]
c0006735:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006739:	8d a8 58 25 02 c0    	lea    ebp,[eax-0x3ffddaa8]
c000673f:	83 3d b4 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022eb4,0x0
c0006746:	74 0c                	je     c0006754 <iso_readdir+0x16d>
c0006748:	89 e8                	mov    eax,ebp
c000674a:	e8 17 f6 ff ff       	call   c0005d66 <ucs2utfn>
c000674f:	e9 a6 00 00 00       	jmp    c00067fa <iso_readdir+0x213>
c0006754:	57                   	push   edi
c0006755:	51                   	push   ecx
c0006756:	52                   	push   edx
c0006757:	55                   	push   ebp
c0006758:	e8 d3 9e ff ff       	call   c0000630 <strncpy>
c000675d:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006761:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006767:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000676a:	c6 84 01 58 25 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffddaa8],0x0
c0006772:	e8 4a fe ff ff       	call   c00065c1 <fn_postprocess>
c0006777:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c000677b:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000677e:	83 c4 10             	add    esp,0x10
c0006781:	29 d0                	sub    eax,edx
c0006783:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006787:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c000678b:	74 05                	je     c0006792 <iso_readdir+0x1ab>
c000678d:	83 e8 21             	sub    eax,0x21
c0006790:	eb 04                	jmp    c0006796 <iso_readdir+0x1af>
c0006792:	47                   	inc    edi
c0006793:	83 e8 22             	sub    eax,0x22
c0006796:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000679a:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00067a4:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00067a9:	7e 4f                	jle    c00067fa <iso_readdir+0x213>
c00067ab:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c00067ae:	48                   	dec    eax
c00067af:	3c 01                	cmp    al,0x1
c00067b1:	77 47                	ja     c00067fa <iso_readdir+0x213>
c00067b3:	52                   	push   edx
c00067b4:	6a 02                	push   0x2
c00067b6:	68 dd dc 01 c0       	push   0xc001dcdd
c00067bb:	57                   	push   edi
c00067bc:	e8 9f 9f ff ff       	call   c0000760 <strncmp>
c00067c1:	83 c4 10             	add    esp,0x10
c00067c4:	85 c0                	test   eax,eax
c00067c6:	75 26                	jne    c00067ee <iso_readdir+0x207>
c00067c8:	50                   	push   eax
c00067c9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067cd:	83 e8 05             	sub    eax,0x5
c00067d0:	50                   	push   eax
c00067d1:	8d 47 05             	lea    eax,[edi+0x5]
c00067d4:	50                   	push   eax
c00067d5:	55                   	push   ebp
c00067d6:	e8 55 9e ff ff       	call   c0000630 <strncpy>
c00067db:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00067df:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067e3:	83 c4 10             	add    esp,0x10
c00067e6:	c6 84 08 53 25 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffddaad],0x0
c00067ee:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067f2:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00067f6:	01 c7                	add    edi,eax
c00067f8:	eb aa                	jmp    c00067a4 <iso_readdir+0x1bd>
c00067fa:	83 c8 ff             	or     eax,0xffffffff
c00067fd:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006801:	89 c2                	mov    edx,eax
c0006803:	75 0a                	jne    c000680f <iso_readdir+0x228>
c0006805:	8d 46 0a             	lea    eax,[esi+0xa]
c0006808:	e8 06 f6 ff ff       	call   c0005e13 <iso_733>
c000680d:	31 d2                	xor    edx,edx
c000680f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006815:	89 83 50 25 02 c0    	mov    DWORD PTR [ebx-0x3ffddab0],eax
c000681b:	89 93 54 25 02 c0    	mov    DWORD PTR [ebx-0x3ffddaac],edx
c0006821:	81 c3 40 25 02 c0    	add    ebx,0xc0022540
c0006827:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000682a:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c000682d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006831:	05 50 25 02 c0       	add    eax,0xc0022550
c0006836:	83 c4 1c             	add    esp,0x1c
c0006839:	5b                   	pop    ebx
c000683a:	5e                   	pop    esi
c000683b:	5f                   	pop    edi
c000683c:	5d                   	pop    ebp
c000683d:	c3                   	ret    

c000683e <iso_reset>:
c000683e:	83 ec 18             	sub    esp,0x18
c0006841:	68 fa dc 01 c0       	push   0xc001dcfa
c0006846:	e8 99 10 01 00       	call   c00178e4 <iso_kprintf>
c000684b:	e8 0d f7 ff ff       	call   c0005f5d <iso_break_all>
c0006850:	e8 06 f7 ff ff       	call   c0005f5b <bclear>
c0006855:	31 c0                	xor    eax,eax
c0006857:	83 c4 1c             	add    esp,0x1c
c000685a:	c3                   	ret    

c000685b <init_percd>:
c000685b:	57                   	push   edi
c000685c:	56                   	push   esi
c000685d:	53                   	push   ebx
c000685e:	bb 01 00 00 00       	mov    ebx,0x1
c0006863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006867:	a2 60 20 02 c0       	mov    ds:0xc0022060,al
c000686c:	e8 cd ff ff ff       	call   c000683e <iso_reset>
c0006871:	c7 05 b4 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022eb4,0x0
c000687b:	a1 ac 2e 02 c0       	mov    eax,ds:0xc0022eac
c0006880:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006884:	e8 89 f7 ff ff       	call   c0006012 <biread>
c0006889:	89 c6                	mov    esi,eax
c000688b:	85 c0                	test   eax,eax
c000688d:	0f 88 ba 00 00 00    	js     c000694d <init_percd+0xf2>
c0006893:	8b 04 85 80 20 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddf80]
c000689a:	83 c0 04             	add    eax,0x4
c000689d:	52                   	push   edx
c000689e:	6a 06                	push   0x6
c00068a0:	68 05 dd 01 c0       	push   0xc001dd05
c00068a5:	50                   	push   eax
c00068a6:	e8 e5 9a ff ff       	call   c0000390 <memcmp>
c00068ab:	83 c4 10             	add    esp,0x10
c00068ae:	85 c0                	test   eax,eax
c00068b0:	74 08                	je     c00068ba <init_percd+0x5f>
c00068b2:	43                   	inc    ebx
c00068b3:	83 fb 04             	cmp    ebx,0x4
c00068b6:	75 c3                	jne    c000687b <init_percd+0x20>
c00068b8:	eb 1a                	jmp    c00068d4 <init_percd+0x79>
c00068ba:	8b 04 b5 80 20 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffddf80]
c00068c1:	83 c0 5c             	add    eax,0x5c
c00068c4:	e8 1b f5 ff ff       	call   c0005de4 <isjoliet>
c00068c9:	a3 b4 2e 02 c0       	mov    ds:0xc0022eb4,eax
c00068ce:	85 c0                	test   eax,eax
c00068d0:	74 e0                	je     c00068b2 <init_percd+0x57>
c00068d2:	eb 3e                	jmp    c0006912 <init_percd+0xb7>
c00068d4:	83 3d b4 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022eb4,0x0
c00068db:	75 35                	jne    c0006912 <init_percd+0xb7>
c00068dd:	a1 ac 2e 02 c0       	mov    eax,ds:0xc0022eac
c00068e2:	83 c0 10             	add    eax,0x10
c00068e5:	e8 28 f7 ff ff       	call   c0006012 <biread>
c00068ea:	89 c6                	mov    esi,eax
c00068ec:	85 c0                	test   eax,eax
c00068ee:	78 5f                	js     c000694f <init_percd+0xf4>
c00068f0:	83 cb ff             	or     ebx,0xffffffff
c00068f3:	50                   	push   eax
c00068f4:	8b 04 b5 80 20 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffddf80]
c00068fb:	6a 06                	push   0x6
c00068fd:	83 c0 04             	add    eax,0x4
c0006900:	68 0c dd 01 c0       	push   0xc001dd0c
c0006905:	50                   	push   eax
c0006906:	e8 85 9a ff ff       	call   c0000390 <memcmp>
c000690b:	83 c4 10             	add    esp,0x10
c000690e:	85 c0                	test   eax,eax
c0006910:	75 3d                	jne    c000694f <init_percd+0xf4>
c0006912:	8b 34 b5 80 20 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffddf80]
c0006919:	bf 80 2e 02 c0       	mov    edi,0xc0022e80
c000691e:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006924:	b9 22 00 00 00       	mov    ecx,0x22
c0006929:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000692b:	b8 82 2e 02 c0       	mov    eax,0xc0022e82
c0006930:	31 db                	xor    ebx,ebx
c0006932:	e8 dc f4 ff ff       	call   c0005e13 <iso_733>
c0006937:	a3 a8 2e 02 c0       	mov    ds:0xc0022ea8,eax
c000693c:	b8 8a 2e 02 c0       	mov    eax,0xc0022e8a
c0006941:	e8 cd f4 ff ff       	call   c0005e13 <iso_733>
c0006946:	a3 a4 2e 02 c0       	mov    ds:0xc0022ea4,eax
c000694b:	eb 02                	jmp    c000694f <init_percd+0xf4>
c000694d:	89 c3                	mov    ebx,eax
c000694f:	89 d8                	mov    eax,ebx
c0006951:	5b                   	pop    ebx
c0006952:	5e                   	pop    esi
c0006953:	5f                   	pop    edi
c0006954:	c3                   	ret    

c0006955 <iso_ioctl>:
c0006955:	83 ec 18             	sub    esp,0x18
c0006958:	68 13 dd 01 c0       	push   0xc001dd13
c000695d:	e8 82 0f 01 00       	call   c00178e4 <iso_kprintf>
c0006962:	e8 d7 fe ff ff       	call   c000683e <iso_reset>
c0006967:	31 c0                	xor    eax,eax
c0006969:	83 c4 1c             	add    esp,0x1c
c000696c:	c3                   	ret    

c000696d <fs_iso9660_init>:
c000696d:	53                   	push   ebx
c000696e:	31 db                	xor    ebx,ebx
c0006970:	83 ec 14             	sub    esp,0x14
c0006973:	68 1e dd 01 c0       	push   0xc001dd1e
c0006978:	e8 67 0f 01 00       	call   c00178e4 <iso_kprintf>
c000697d:	83 c4 0c             	add    esp,0xc
c0006980:	68 40 09 00 00       	push   0x940
c0006985:	6a 00                	push   0x0
c0006987:	68 40 25 02 c0       	push   0xc0022540
c000698c:	e8 3f 9b ff ff       	call   c00004d0 <memset>
c0006991:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006998:	c7 05 40 25 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0022540,0xffffffff
c00069a2:	e8 ce 0e 00 00       	call   c0007875 <malloc>
c00069a7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00069ae:	a3 b0 2e 02 c0       	mov    ds:0xc0022eb0,eax
c00069b3:	e8 bd 0e 00 00       	call   c0007875 <malloc>
c00069b8:	83 c4 10             	add    esp,0x10
c00069bb:	a3 20 25 02 c0       	mov    ds:0xc0022520,eax
c00069c0:	83 ec 0c             	sub    esp,0xc
c00069c3:	68 04 08 00 00       	push   0x804
c00069c8:	e8 a8 0e 00 00       	call   c0007875 <malloc>
c00069cd:	89 04 9d 80 20 02 c0 	mov    DWORD PTR [ebx*4-0x3ffddf80],eax
c00069d4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069da:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c00069e1:	e8 8f 0e 00 00       	call   c0007875 <malloc>
c00069e6:	83 c4 10             	add    esp,0x10
c00069e9:	89 04 9d 20 20 02 c0 	mov    DWORD PTR [ebx*4-0x3ffddfe0],eax
c00069f0:	43                   	inc    ebx
c00069f1:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069f7:	83 fb 10             	cmp    ebx,0x10
c00069fa:	75 c4                	jne    c00069c0 <fs_iso9660_init+0x53>
c00069fc:	31 c0                	xor    eax,eax
c00069fe:	83 c4 08             	add    esp,0x8
c0006a01:	5b                   	pop    ebx
c0006a02:	c3                   	ret    

c0006a03 <fs_iso9660_shutdown>:
c0006a03:	53                   	push   ebx
c0006a04:	31 db                	xor    ebx,ebx
c0006a06:	83 ec 08             	sub    esp,0x8
c0006a09:	83 ec 0c             	sub    esp,0xc
c0006a0c:	ff 34 9d 80 20 02 c0 	push   DWORD PTR [ebx*4-0x3ffddf80]
c0006a13:	e8 6d 0e 00 00       	call   c0007885 <free>
c0006a18:	58                   	pop    eax
c0006a19:	ff 34 9d 20 20 02 c0 	push   DWORD PTR [ebx*4-0x3ffddfe0]
c0006a20:	43                   	inc    ebx
c0006a21:	e8 5f 0e 00 00       	call   c0007885 <free>
c0006a26:	83 c4 10             	add    esp,0x10
c0006a29:	83 fb 10             	cmp    ebx,0x10
c0006a2c:	75 db                	jne    c0006a09 <fs_iso9660_shutdown+0x6>
c0006a2e:	a1 b0 2e 02 c0       	mov    eax,ds:0xc0022eb0
c0006a33:	85 c0                	test   eax,eax
c0006a35:	74 0c                	je     c0006a43 <fs_iso9660_shutdown+0x40>
c0006a37:	83 ec 0c             	sub    esp,0xc
c0006a3a:	50                   	push   eax
c0006a3b:	e8 45 0e 00 00       	call   c0007885 <free>
c0006a40:	83 c4 10             	add    esp,0x10
c0006a43:	a1 20 25 02 c0       	mov    eax,ds:0xc0022520
c0006a48:	85 c0                	test   eax,eax
c0006a4a:	74 0c                	je     c0006a58 <fs_iso9660_shutdown+0x55>
c0006a4c:	83 ec 0c             	sub    esp,0xc
c0006a4f:	50                   	push   eax
c0006a50:	e8 30 0e 00 00       	call   c0007885 <free>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	c7 05 20 25 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022520,0x0
c0006a62:	c7 05 b0 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022eb0,0x0
c0006a6c:	31 c0                	xor    eax,eax
c0006a6e:	83 c4 08             	add    esp,0x8
c0006a71:	5b                   	pop    ebx
c0006a72:	c3                   	ret    
c0006a73:	90                   	nop

c0006a74 <Computer::close(int, int, void*)>:
c0006a74:	57                   	push   edi
c0006a75:	56                   	push   esi
c0006a76:	53                   	push   ebx
c0006a77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006a7b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006a83:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a89:	83 ec 0c             	sub    esp,0xc
c0006a8c:	50                   	push   eax
c0006a8d:	e8 d8 50 00 00       	call   c000bb6a <Device::closeAll()>
c0006a92:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a98:	83 c4 10             	add    esp,0x10
c0006a9b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9d:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006aa1:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006aa9:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006aad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ab1:	5b                   	pop    ebx
c0006ab2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ab5:	5e                   	pop    esi
c0006ab6:	5f                   	pop    edi
c0006ab7:	ff e0                	jmp    eax

c0006ab9 <Krnl::firstTask()>:
c0006ab9:	53                   	push   ebx
c0006aba:	83 ec 14             	sub    esp,0x14
c0006abd:	fb                   	sti    
c0006abe:	68 2f dd 01 c0       	push   0xc001dd2f
c0006ac3:	e8 d7 91 00 00       	call   c000fc9f <KeSetBootMessage(char const*)>
c0006ac8:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006acf:	e8 a1 0d 00 00       	call   c0007875 <malloc>
c0006ad4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006adb:	89 c3                	mov    ebx,eax
c0006add:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0006ae2:	50                   	push   eax
c0006ae3:	68 48 dd 01 c0       	push   0xc001dd48
c0006ae8:	6a 01                	push   0x1
c0006aea:	53                   	push   ebx
c0006aeb:	e8 fc c8 00 00       	call   c00133ec <Process::Process(bool, char const*, Process*, char**)>
c0006af0:	83 c4 20             	add    esp,0x20
c0006af3:	68 ff 00 00 00       	push   0xff
c0006af8:	6a 00                	push   0x0
c0006afa:	68 c9 72 00 c0       	push   0xc00072c9
c0006aff:	53                   	push   ebx
c0006b00:	e8 0f cb 00 00       	call   c0013614 <Process::createThread(void (*)(void*), void*, int)>
c0006b05:	8b 15 90 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026190
c0006b0b:	6a 7a                	push   0x7a
c0006b0d:	6a 00                	push   0x0
c0006b0f:	68 68 40 01 c0       	push   0xc0014068
c0006b14:	52                   	push   edx
c0006b15:	e8 fa ca 00 00       	call   c0013614 <Process::createThread(void (*)(void*), void*, int)>
c0006b1a:	83 c4 14             	add    esp,0x14
c0006b1d:	a3 48 61 02 c0       	mov    ds:0xc0026148,eax
c0006b22:	68 44 de 01 c0       	push   0xc001de44
c0006b27:	c6 05 bd 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022ebd,0x1
c0006b2e:	e8 6c 91 00 00       	call   c000fc9f <KeSetBootMessage(char const*)>
c0006b33:	e8 0f d9 00 00       	call   c0014447 <Vm::initialise8086()>
c0006b38:	e8 73 3e 00 00       	call   c000a9b0 <Fs::initVFS()>
c0006b3d:	c7 04 24 55 dd 01 c0 	mov    DWORD PTR [esp],0xc001dd55
c0006b44:	e8 56 91 00 00       	call   c000fc9f <KeSetBootMessage(char const*)>
c0006b49:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0006b4e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006b54:	8b 10                	mov    edx,DWORD PTR [eax]
c0006b56:	6a 00                	push   0x0
c0006b58:	6a 00                	push   0x0
c0006b5a:	6a 00                	push   0x0
c0006b5c:	50                   	push   eax
c0006b5d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006b60:	83 c4 14             	add    esp,0x14
c0006b63:	68 44 de 01 c0       	push   0xc001de44
c0006b68:	e8 32 91 00 00       	call   c000fc9f <KeSetBootMessage(char const*)>
c0006b6d:	e8 08 96 00 00       	call   c001017a <Krnl::loadSystemEnv()>
c0006b72:	e8 65 98 00 00       	call   c00103dc <Krnl::setupPowerManager()>
c0006b77:	83 c4 0c             	add    esp,0xc
c0006b7a:	6a 3a                	push   0x3a
c0006b7c:	68 6f dd 01 c0       	push   0xc001dd6f
c0006b81:	68 78 dd 01 c0       	push   0xc001dd78
c0006b86:	e8 0a ae 00 00       	call   c0011995 <Reg::readIntWithDefault(char*, char*, int)>
c0006b8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0006b8e:	e8 29 49 00 00       	call   c000b4bc <User::loadClockSettings(int)>
c0006b93:	c7 04 24 68 de 01 c0 	mov    DWORD PTR [esp],0xc001de68
c0006b9a:	e8 00 91 00 00       	call   c000fc9f <KeSetBootMessage(char const*)>
c0006b9f:	59                   	pop    ecx
c0006ba0:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0006ba5:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006bab:	53                   	push   ebx
c0006bac:	e8 b7 4f 00 00       	call   c000bb68 <Device::loadDriversForAll()>
c0006bb1:	c7 04 24 80 dd 01 c0 	mov    DWORD PTR [esp],0xc001dd80
c0006bb8:	e8 e2 90 00 00       	call   c000fc9f <KeSetBootMessage(char const*)>
c0006bbd:	58                   	pop    eax
c0006bbe:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c0006bc4:	5a                   	pop    edx
c0006bc5:	6a 01                	push   0x1
c0006bc7:	68 91 dd 01 c0       	push   0xc001dd91
c0006bcc:	e8 39 c2 00 00       	call   c0012e0a <Thr::loadDLL(char const*, bool)>
c0006bd1:	59                   	pop    ecx
c0006bd2:	5a                   	pop    edx
c0006bd3:	53                   	push   ebx
c0006bd4:	50                   	push   eax
c0006bd5:	e8 61 c4 00 00       	call   c001303b <Thr::executeDLL(unsigned long, void*)>
c0006bda:	83 c4 10             	add    esp,0x10
c0006bdd:	83 ec 0c             	sub    esp,0xc
c0006be0:	6a 02                	push   0x2
c0006be2:	e8 49 ce 00 00       	call   c0013a30 <blockTask(TaskState)>
c0006be7:	83 c4 10             	add    esp,0x10
c0006bea:	eb f1                	jmp    c0006bdd <Krnl::firstTask()+0x124>

c0006bec <Computer::Computer()>:
c0006bec:	83 ec 0c             	sub    esp,0xc
c0006bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf3:	83 ec 08             	sub    esp,0x8
c0006bf6:	68 ad dd 01 c0       	push   0xc001ddad
c0006bfb:	50                   	push   eax
c0006bfc:	e8 e3 4f 00 00       	call   c000bbe4 <Device::Device(char const*)>
c0006c01:	83 c4 10             	add    esp,0x10
c0006c04:	ba b4 de 01 c0       	mov    edx,0xc001deb4
c0006c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0d:	89 10                	mov    DWORD PTR [eax],edx
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c21:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006c2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c2f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006c35:	83 ca 04             	or     edx,0x4
c0006c38:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c42:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c48:	31 d2                	xor    edx,edx
c0006c4a:	88 c2                	mov    dl,al
c0006c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c50:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c61:	31 d2                	xor    edx,edx
c0006c63:	88 c2                	mov    dl,al
c0006c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c69:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c72:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c78:	8d 50 01             	lea    edx,[eax+0x1]
c0006c7b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006c7f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006c85:	31 d2                	xor    edx,edx
c0006c87:	88 c2                	mov    dl,al
c0006c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c8d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006c91:	83 e1 3f             	and    ecx,0x3f
c0006c94:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006c98:	90                   	nop
c0006c99:	83 c4 0c             	add    esp,0xc
c0006c9c:	c3                   	ret    
c0006c9d:	90                   	nop

c0006c9e <Computer::setBootMessage(char const*)>:
c0006c9e:	c3                   	ret    
c0006c9f:	90                   	nop

c0006ca0 <Computer::detectFeatures()>:
c0006ca0:	55                   	push   ebp
c0006ca1:	57                   	push   edi
c0006ca2:	56                   	push   esi
c0006ca3:	53                   	push   ebx
c0006ca4:	83 ec 1c             	sub    esp,0x1c
c0006ca7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006cab:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006cb5:	e8 3f 95 ff ff       	call   c00001f9 <detectCPUID>
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cc2:	0f 95 c2             	setne  dl
c0006cc5:	83 e0 fd             	and    eax,0xfffffffd
c0006cc8:	01 d2                	add    edx,edx
c0006cca:	09 d0                	or     eax,edx
c0006ccc:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cd2:	a8 02                	test   al,0x2
c0006cd4:	75 46                	jne    c0006d1c <Computer::detectFeatures()+0x7c>
c0006cd6:	f6 05 d1 2e 02 c0 04 	test   BYTE PTR ds:0xc0022ed1,0x4
c0006cdd:	74 07                	je     c0006ce6 <Computer::detectFeatures()+0x46>
c0006cdf:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006ce6:	e8 4b 59 01 00       	call   c001c636 <x87Detect>
c0006ceb:	83 e0 01             	and    eax,0x1
c0006cee:	c1 e0 04             	shl    eax,0x4
c0006cf1:	88 c2                	mov    dl,al
c0006cf3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cf9:	83 e0 ef             	and    eax,0xffffffef
c0006cfc:	09 d0                	or     eax,edx
c0006cfe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d04:	a8 10                	test   al,0x10
c0006d06:	0f 85 2a 01 00 00    	jne    c0006e36 <Computer::detectFeatures()+0x196>
c0006d0c:	84 c0                	test   al,al
c0006d0e:	0f 88 45 01 00 00    	js     c0006e59 <Computer::detectFeatures()+0x1b9>
c0006d14:	83 c4 1c             	add    esp,0x1c
c0006d17:	5b                   	pop    ebx
c0006d18:	5e                   	pop    esi
c0006d19:	5f                   	pop    edi
c0006d1a:	5d                   	pop    ebp
c0006d1b:	c3                   	ret    
c0006d1c:	83 ec 0c             	sub    esp,0xc
c0006d1f:	6a 20                	push   0x20
c0006d21:	e8 a6 84 00 00       	call   c000f1cc <CPU::cpuidCheckEDX(unsigned int)>
c0006d26:	83 e0 01             	and    eax,0x1
c0006d29:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006d30:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d36:	83 e0 f7             	and    eax,0xfffffff7
c0006d39:	09 d0                	or     eax,edx
c0006d3b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d41:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006d48:	e8 7f 84 00 00       	call   c000f1cc <CPU::cpuidCheckEDX(unsigned int)>
c0006d4d:	83 e0 01             	and    eax,0x1
c0006d50:	88 c2                	mov    dl,al
c0006d52:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d58:	83 e0 fe             	and    eax,0xfffffffe
c0006d5b:	09 d0                	or     eax,edx
c0006d5d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d63:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006d6a:	e8 5d 84 00 00       	call   c000f1cc <CPU::cpuidCheckEDX(unsigned int)>
c0006d6f:	c1 e0 07             	shl    eax,0x7
c0006d72:	88 c2                	mov    dl,al
c0006d74:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d7a:	83 e0 7f             	and    eax,0x7f
c0006d7d:	09 d0                	or     eax,edx
c0006d7f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d85:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006d8c:	e8 3b 84 00 00       	call   c000f1cc <CPU::cpuidCheckEDX(unsigned int)>
c0006d91:	83 c4 10             	add    esp,0x10
c0006d94:	83 e0 01             	and    eax,0x1
c0006d97:	c1 e0 05             	shl    eax,0x5
c0006d9a:	88 c2                	mov    dl,al
c0006d9c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006da2:	83 e0 df             	and    eax,0xffffffdf
c0006da5:	09 d0                	or     eax,edx
c0006da7:	f7 05 d0 2e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0022ed0,0x401
c0006db1:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006db7:	0f 84 c2 00 00 00    	je     c0006e7f <Computer::detectFeatures()+0x1df>
c0006dbd:	83 e0 fe             	and    eax,0xfffffffe
c0006dc0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dc6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006dcc:	88 c2                	mov    dl,al
c0006dce:	83 e2 09             	and    edx,0x9
c0006dd1:	fe ca                	dec    dl
c0006dd3:	75 09                	jne    c0006dde <Computer::detectFeatures()+0x13e>
c0006dd5:	83 e0 fe             	and    eax,0xfffffffe
c0006dd8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dde:	83 ec 0c             	sub    esp,0xc
c0006de1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006de5:	50                   	push   eax
c0006de6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006dea:	55                   	push   ebp
c0006deb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006def:	57                   	push   edi
c0006df0:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006df4:	56                   	push   esi
c0006df5:	68 00 00 00 80       	push   0x80000000
c0006dfa:	e8 49 83 00 00       	call   c000f148 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006dff:	83 c4 20             	add    esp,0x20
c0006e02:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006e09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006e0d:	0f 86 c3 fe ff ff    	jbe    c0006cd6 <Computer::detectFeatures()+0x36>
c0006e13:	83 ec 0c             	sub    esp,0xc
c0006e16:	50                   	push   eax
c0006e17:	55                   	push   ebp
c0006e18:	57                   	push   edi
c0006e19:	56                   	push   esi
c0006e1a:	68 01 00 00 80       	push   0x80000001
c0006e1f:	e8 24 83 00 00       	call   c000f148 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006e24:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006e2e:	83 c4 20             	add    esp,0x20
c0006e31:	e9 a0 fe ff ff       	jmp    c0006cd6 <Computer::detectFeatures()+0x36>
c0006e36:	e8 b5 57 01 00       	call   c001c5f0 <absolutelyNoChanceInHell>
c0006e3b:	88 c2                	mov    dl,al
c0006e3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e43:	c1 e2 07             	shl    edx,0x7
c0006e46:	83 e0 7f             	and    eax,0x7f
c0006e49:	09 d0                	or     eax,edx
c0006e4b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e51:	84 c0                	test   al,al
c0006e53:	0f 89 bb fe ff ff    	jns    c0006d14 <Computer::detectFeatures()+0x74>
c0006e59:	e8 b2 54 01 00       	call   c001c310 <avxDetect>
c0006e5e:	83 e0 01             	and    eax,0x1
c0006e61:	c1 e0 05             	shl    eax,0x5
c0006e64:	88 c2                	mov    dl,al
c0006e66:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006e6c:	83 e0 df             	and    eax,0xffffffdf
c0006e6f:	09 d0                	or     eax,edx
c0006e71:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006e77:	83 c4 1c             	add    esp,0x1c
c0006e7a:	5b                   	pop    ebx
c0006e7b:	5e                   	pop    esi
c0006e7c:	5f                   	pop    edi
c0006e7d:	5d                   	pop    ebp
c0006e7e:	c3                   	ret    
c0006e7f:	83 ec 0c             	sub    esp,0xc
c0006e82:	68 00 02 00 00       	push   0x200
c0006e87:	e8 40 83 00 00       	call   c000f1cc <CPU::cpuidCheckEDX(unsigned int)>
c0006e8c:	83 c4 10             	add    esp,0x10
c0006e8f:	83 e0 01             	and    eax,0x1
c0006e92:	88 c2                	mov    dl,al
c0006e94:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e9a:	83 e0 fe             	and    eax,0xfffffffe
c0006e9d:	09 d0                	or     eax,edx
c0006e9f:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ea5:	e9 1c ff ff ff       	jmp    c0006dc6 <Computer::detectFeatures()+0x126>

c0006eaa <Computer::displayFeatures()>:
c0006eaa:	c3                   	ret    
c0006eab:	90                   	nop

c0006eac <Computer::rdmsr(unsigned int)>:
c0006eac:	83 ec 0c             	sub    esp,0xc
c0006eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eb3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006eba:	74 0a                	je     c0006ec6 <Computer::rdmsr(unsigned int)+0x1a>
c0006ebc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006ec0:	0f 32                	rdmsr  
c0006ec2:	83 c4 0c             	add    esp,0xc
c0006ec5:	c3                   	ret    
c0006ec6:	83 ec 0c             	sub    esp,0xc
c0006ec9:	68 b6 dd 01 c0       	push   0xc001ddb6
c0006ece:	e8 44 94 00 00       	call   c0010317 <KePanic(char const*)>
c0006ed3:	83 c4 10             	add    esp,0x10
c0006ed6:	eb e4                	jmp    c0006ebc <Computer::rdmsr(unsigned int)+0x10>

c0006ed8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006ed8:	57                   	push   edi
c0006ed9:	56                   	push   esi
c0006eda:	52                   	push   edx
c0006edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006edf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006ee3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006ee7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006eee:	74 0e                	je     c0006efe <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006ef0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006ef4:	89 f0                	mov    eax,esi
c0006ef6:	89 fa                	mov    edx,edi
c0006ef8:	0f 30                	wrmsr  
c0006efa:	58                   	pop    eax
c0006efb:	5e                   	pop    esi
c0006efc:	5f                   	pop    edi
c0006efd:	c3                   	ret    
c0006efe:	83 ec 0c             	sub    esp,0xc
c0006f01:	68 bc dd 01 c0       	push   0xc001ddbc
c0006f06:	e8 0c 94 00 00       	call   c0010317 <KePanic(char const*)>
c0006f0b:	83 c4 10             	add    esp,0x10
c0006f0e:	eb e0                	jmp    c0006ef0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006f10 <Computer::shutdown()>:
c0006f10:	83 ec 0c             	sub    esp,0xc
c0006f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f17:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f19:	6a 00                	push   0x0
c0006f1b:	6a 00                	push   0x0
c0006f1d:	6a 00                	push   0x0
c0006f1f:	50                   	push   eax
c0006f20:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f23:	83 c4 1c             	add    esp,0x1c
c0006f26:	c3                   	ret    
c0006f27:	90                   	nop

c0006f28 <Computer::restart()>:
c0006f28:	83 ec 0c             	sub    esp,0xc
c0006f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f31:	6a 00                	push   0x0
c0006f33:	6a 00                	push   0x0
c0006f35:	6a 01                	push   0x1
c0006f37:	50                   	push   eax
c0006f38:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f3b:	83 c4 1c             	add    esp,0x1c
c0006f3e:	c3                   	ret    
c0006f3f:	90                   	nop

c0006f40 <Computer::sleep()>:
c0006f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f44:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006f4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f4e:	e9 f1 7c 00 00       	jmp    c000ec44 <ACPI::sleep()>
c0006f53:	90                   	nop

c0006f54 <Computer::nmiEnabled()>:
c0006f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f58:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006f5e:	c3                   	ret    
c0006f5f:	90                   	nop

c0006f60 <Computer::readCMOS(unsigned char)>:
c0006f60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f64:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006f6b:	19 c0                	sbb    eax,eax
c0006f6d:	83 e0 80             	and    eax,0xffffff80
c0006f70:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006f74:	e6 70                	out    0x70,al
c0006f76:	e4 71                	in     al,0x71
c0006f78:	c3                   	ret    
c0006f79:	90                   	nop

c0006f7a <Computer::enableNMI(bool)>:
c0006f7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006f7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f82:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006f88:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006f90:	eb ce                	jmp    c0006f60 <Computer::readCMOS(unsigned char)>

c0006f92 <Computer::open(int, int, void*)>:
c0006f92:	56                   	push   esi
c0006f93:	53                   	push   ebx
c0006f94:	83 ec 10             	sub    esp,0x10
c0006f97:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006f9b:	f6 05 d0 2e 02 c0 04 	test   BYTE PTR ds:0xc0022ed0,0x4
c0006fa2:	68 c2 dd 01 c0       	push   0xc001ddc2
c0006fa7:	0f 94 05 a0 ff 01 c0 	sete   BYTE PTR ds:0xc001ffa0
c0006fae:	e8 ec 8c 00 00       	call   c000fc9f <KeSetBootMessage(char const*)>
c0006fb3:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006fba:	e8 b6 08 00 00       	call   c0007875 <malloc>
c0006fbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0006fc2:	89 c6                	mov    esi,eax
c0006fc4:	e8 13 78 00 00       	call   c000e7dc <ACPI::ACPI()>
c0006fc9:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006fcf:	58                   	pop    eax
c0006fd0:	5a                   	pop    edx
c0006fd1:	56                   	push   esi
c0006fd2:	53                   	push   ebx
c0006fd3:	e8 74 4a 00 00       	call   c000ba4c <Device::addChild(Device*)>
c0006fd8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006fdb:	e8 c0 fc ff ff       	call   c0006ca0 <Computer::detectFeatures()>
c0006fe0:	59                   	pop    ecx
c0006fe1:	5e                   	pop    esi
c0006fe2:	6a 01                	push   0x1
c0006fe4:	53                   	push   ebx
c0006fe5:	e8 90 ff ff ff       	call   c0006f7a <Computer::enableNMI(bool)>
c0006fea:	c7 04 24 da dd 01 c0 	mov    DWORD PTR [esp],0xc001ddda
c0006ff1:	e8 a9 8c 00 00       	call   c000fc9f <KeSetBootMessage(char const*)>
c0006ff6:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006ffd:	e8 73 08 00 00       	call   c0007875 <malloc>
c0007002:	89 04 24             	mov    DWORD PTR [esp],eax
c0007005:	89 c6                	mov    esi,eax
c0007007:	e8 78 82 00 00       	call   c000f284 <CPU::CPU()>
c000700c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007012:	58                   	pop    eax
c0007013:	5a                   	pop    edx
c0007014:	56                   	push   esi
c0007015:	53                   	push   ebx
c0007016:	e8 31 4a 00 00       	call   c000ba4c <Device::addChild(Device*)>
c000701b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007021:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007025:	8b 10                	mov    edx,DWORD PTR [eax]
c0007027:	51                   	push   ecx
c0007028:	6a 00                	push   0x0
c000702a:	6a 00                	push   0x0
c000702c:	50                   	push   eax
c000702d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007030:	83 c4 14             	add    esp,0x14
c0007033:	68 88 de 01 c0       	push   0xc001de88
c0007038:	e8 62 8c 00 00       	call   c000fc9f <KeSetBootMessage(char const*)>
c000703d:	e8 3c e5 00 00       	call   c001557e <HalInitialiseCoprocessor()>
c0007042:	c7 04 24 f4 dd 01 c0 	mov    DWORD PTR [esp],0xc001ddf4
c0007049:	e8 51 8c 00 00       	call   c000fc9f <KeSetBootMessage(char const*)>
c000704e:	c7 04 24 b9 6a 00 c0 	mov    DWORD PTR [esp],0xc0006ab9
c0007055:	e8 d2 c6 00 00       	call   c001372c <setupMultitasking(void (*)())>
c000705a:	83 c4 14             	add    esp,0x14
c000705d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007062:	5b                   	pop    ebx
c0007063:	5e                   	pop    esi
c0007064:	c3                   	ret    
c0007065:	90                   	nop

c0007066 <Computer::disableNMI()>:
c0007066:	6a 00                	push   0x0
c0007068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000706c:	50                   	push   eax
c000706d:	e8 08 ff ff ff       	call   c0006f7a <Computer::enableNMI(bool)>
c0007072:	5a                   	pop    edx
c0007073:	59                   	pop    ecx
c0007074:	c3                   	ret    
c0007075:	90                   	nop

c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007081:	19 c0                	sbb    eax,eax
c0007083:	83 e0 80             	and    eax,0xffffff80
c0007086:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000708a:	e6 70                	out    0x70,al
c000708c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007090:	e6 71                	out    0x71,al
c0007092:	c3                   	ret    
c0007093:	90                   	nop

c0007094 <Computer::handleNMI()>:
c0007094:	56                   	push   esi
c0007095:	53                   	push   ebx
c0007096:	83 ec 10             	sub    esp,0x10
c0007099:	e4 92                	in     al,0x92
c000709b:	89 c6                	mov    esi,eax
c000709d:	e4 61                	in     al,0x61
c000709f:	68 0f de 01 c0       	push   0xc001de0f
c00070a4:	88 c3                	mov    bl,al
c00070a6:	e8 63 35 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00070ab:	83 c4 10             	add    esp,0x10
c00070ae:	83 e6 10             	and    esi,0x10
c00070b1:	75 0d                	jne    c00070c0 <Computer::handleNMI()+0x2c>
c00070b3:	f6 c3 40             	test   bl,0x40
c00070b6:	75 1d                	jne    c00070d5 <Computer::handleNMI()+0x41>
c00070b8:	84 db                	test   bl,bl
c00070ba:	78 2d                	js     c00070e9 <Computer::handleNMI()+0x55>
c00070bc:	58                   	pop    eax
c00070bd:	5b                   	pop    ebx
c00070be:	5e                   	pop    esi
c00070bf:	c3                   	ret    
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	68 20 de 01 c0       	push   0xc001de20
c00070c8:	e8 4a 92 00 00       	call   c0010317 <KePanic(char const*)>
c00070cd:	83 c4 10             	add    esp,0x10
c00070d0:	f6 c3 40             	test   bl,0x40
c00070d3:	74 e3                	je     c00070b8 <Computer::handleNMI()+0x24>
c00070d5:	83 ec 0c             	sub    esp,0xc
c00070d8:	68 2d de 01 c0       	push   0xc001de2d
c00070dd:	e8 35 92 00 00       	call   c0010317 <KePanic(char const*)>
c00070e2:	83 c4 10             	add    esp,0x10
c00070e5:	84 db                	test   bl,bl
c00070e7:	79 d3                	jns    c00070bc <Computer::handleNMI()+0x28>
c00070e9:	c7 44 24 10 37 de 01 c0 	mov    DWORD PTR [esp+0x10],0xc001de37
c00070f1:	5a                   	pop    edx
c00070f2:	5b                   	pop    ebx
c00070f3:	5e                   	pop    esi
c00070f4:	e9 1e 92 00 00       	jmp    c0010317 <KePanic(char const*)>
c00070f9:	90                   	nop

c00070fa <GDTEntry::setBase(unsigned int)>:
c00070fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007102:	89 c1                	mov    ecx,eax
c0007104:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007108:	c1 e9 10             	shr    ecx,0x10
c000710b:	c1 e8 18             	shr    eax,0x18
c000710e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007111:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007114:	c3                   	ret    
c0007115:	90                   	nop

c0007116 <GDTEntry::setLimit(unsigned int)>:
c0007116:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000711a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007121:	66 89 01             	mov    WORD PTR [ecx],ax
c0007124:	83 e2 f0             	and    edx,0xfffffff0
c0007127:	c1 e8 10             	shr    eax,0x10
c000712a:	83 e0 0f             	and    eax,0xf
c000712d:	09 d0                	or     eax,edx
c000712f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007132:	c3                   	ret    
c0007133:	90                   	nop

c0007134 <GDT::GDT()>:
c0007134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007138:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000713e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007142:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007148:	90                   	nop
c0007149:	c3                   	ret    

c000714a <GDT::addEntry(GDTEntry)>:
c000714a:	53                   	push   ebx
c000714b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000714f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007153:	8b 02                	mov    eax,DWORD PTR [edx]
c0007155:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007159:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000715d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007161:	8d 48 01             	lea    ecx,[eax+0x1]
c0007164:	c1 e0 03             	shl    eax,0x3
c0007167:	89 0a                	mov    DWORD PTR [edx],ecx
c0007169:	5b                   	pop    ebx
c000716a:	c3                   	ret    
c000716b:	90                   	nop

c000716c <GDT::getNumberOfEntries()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8b 00                	mov    eax,DWORD PTR [eax]
c0007172:	c3                   	ret    
c0007173:	90                   	nop

c0007174 <GDT::flush()>:
c0007174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007178:	8b 10                	mov    edx,DWORD PTR [eax]
c000717a:	83 c0 04             	add    eax,0x4
c000717d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007184:	a3 c2 2e 02 c0       	mov    ds:0xc0022ec2,eax
c0007189:	66 89 15 c0 2e 02 c0 	mov    WORD PTR ds:0xc0022ec0,dx
c0007190:	e9 c8 91 ff ff       	jmp    c000035d <loadGDT>
c0007195:	90                   	nop

c0007196 <GDT::setup()>:
c0007196:	57                   	push   edi
c0007197:	56                   	push   esi
c0007198:	53                   	push   ebx
c0007199:	83 ec 30             	sub    esp,0x30
c000719c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a0:	6a 00                	push   0x0
c00071a2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00071a6:	56                   	push   esi
c00071a7:	e8 4e ff ff ff       	call   c00070fa <GDTEntry::setBase(unsigned int)>
c00071ac:	6a 00                	push   0x0
c00071ae:	56                   	push   esi
c00071af:	e8 62 ff ff ff       	call   c0007116 <GDTEntry::setLimit(unsigned int)>
c00071b4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00071bc:	6a 00                	push   0x0
c00071be:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00071c2:	56                   	push   esi
c00071c3:	e8 32 ff ff ff       	call   c00070fa <GDTEntry::setBase(unsigned int)>
c00071c8:	68 ff ff ff 00       	push   0xffffff
c00071cd:	56                   	push   esi
c00071ce:	e8 43 ff ff ff       	call   c0007116 <GDTEntry::setLimit(unsigned int)>
c00071d3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00071d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00071db:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00071df:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00071e3:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00071e8:	0d 00 9a c0 00       	or     eax,0xc09a00
c00071ed:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00071f1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00071f5:	89 f8                	mov    eax,edi
c00071f7:	89 fa                	mov    edx,edi
c00071f9:	80 e4 f7             	and    ah,0xf7
c00071fc:	80 ce 60             	or     dh,0x60
c00071ff:	89 c7                	mov    edi,eax
c0007201:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007205:	80 cc 60             	or     ah,0x60
c0007208:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000720c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007210:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007214:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007218:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000721c:	83 c4 20             	add    esp,0x20
c000721f:	6a 00                	push   0x0
c0007221:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007225:	50                   	push   eax
c0007226:	e8 cf fe ff ff       	call   c00070fa <GDTEntry::setBase(unsigned int)>
c000722b:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000722f:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007233:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007238:	6a 00                	push   0x0
c000723a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000723e:	50                   	push   eax
c000723f:	e8 b6 fe ff ff       	call   c00070fa <GDTEntry::setBase(unsigned int)>
c0007244:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007249:	83 c4 0c             	add    esp,0xc
c000724c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007250:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007254:	53                   	push   ebx
c0007255:	e8 f0 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c000725a:	83 c4 0c             	add    esp,0xc
c000725d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007261:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007265:	53                   	push   ebx
c0007266:	e8 df fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c000726b:	83 c4 0c             	add    esp,0xc
c000726e:	57                   	push   edi
c000726f:	56                   	push   esi
c0007270:	53                   	push   ebx
c0007271:	e8 d4 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c0007276:	83 c4 0c             	add    esp,0xc
c0007279:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000727d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007281:	53                   	push   ebx
c0007282:	e8 c3 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c0007287:	83 c4 0c             	add    esp,0xc
c000728a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000728e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007292:	53                   	push   ebx
c0007293:	e8 b2 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c0007298:	83 c4 0c             	add    esp,0xc
c000729b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000729f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072a3:	53                   	push   ebx
c00072a4:	e8 a1 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c00072a9:	83 c4 0c             	add    esp,0xc
c00072ac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072b4:	53                   	push   ebx
c00072b5:	e8 90 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c00072ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00072bd:	e8 b2 fe ff ff       	call   c0007174 <GDT::flush()>
c00072c2:	83 c4 40             	add    esp,0x40
c00072c5:	5b                   	pop    ebx
c00072c6:	5e                   	pop    esi
c00072c7:	5f                   	pop    edi
c00072c8:	c3                   	ret    

c00072c9 <idleFunction(void*)>:
c00072c9:	83 ec 0c             	sub    esp,0xc
c00072cc:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00072d1:	48                   	dec    eax
c00072d2:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00072d7:	75 01                	jne    c00072da <idleFunction(void*)+0x11>
c00072d9:	fb                   	sti    
c00072da:	e8 79 df 00 00       	call   c0015258 <HalSystemIdle()>
c00072df:	e8 0e 59 01 00       	call   c001cbf2 <idleCommon()>
c00072e4:	eb f4                	jmp    c00072da <idleFunction(void*)+0x11>
c00072e6:	66 90                	xchg   ax,ax

c00072e8 <IDTEntry::IDTEntry(bool)>:
c00072e8:	83 ec 04             	sub    esp,0x4
c00072eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072ef:	88 04 24             	mov    BYTE PTR [esp],al
c00072f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072f6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00072fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007300:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007304:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007308:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000730b:	83 e2 f0             	and    edx,0xfffffff0
c000730e:	83 ca 0e             	or     edx,0xe
c0007311:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007314:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007318:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000731b:	83 e2 ef             	and    edx,0xffffffef
c000731e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007321:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007325:	74 05                	je     c000732c <IDTEntry::IDTEntry(bool)+0x44>
c0007327:	b2 03                	mov    dl,0x3
c0007329:	eb 05                	jmp    c0007330 <IDTEntry::IDTEntry(bool)+0x48>
c000732b:	90                   	nop
c000732c:	b2 00                	mov    dl,0x0
c000732e:	66 90                	xchg   ax,ax
c0007330:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007334:	83 e2 03             	and    edx,0x3
c0007337:	88 d1                	mov    cl,dl
c0007339:	c1 e1 05             	shl    ecx,0x5
c000733c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000733f:	83 e2 9f             	and    edx,0xffffff9f
c0007342:	09 ca                	or     edx,ecx
c0007344:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007347:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000734b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000734e:	83 ca 80             	or     edx,0xffffff80
c0007351:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007354:	90                   	nop
c0007355:	83 c4 04             	add    esp,0x4
c0007358:	c3                   	ret    
c0007359:	90                   	nop

c000735a <IDTEntry::setOffset(unsigned int)>:
c000735a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000735e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007362:	66 89 02             	mov    WORD PTR [edx],ax
c0007365:	c1 e8 10             	shr    eax,0x10
c0007368:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000736c:	c3                   	ret    
c000736d:	90                   	nop
c000736e:	66 90                	xchg   ax,ax

c0007370 <IDT::IDT()>:
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007372:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007376:	83 c0 30             	add    eax,0x30
c0007379:	c3                   	ret    

c000737a <IDT::addEntry(IDTEntry, int)>:
c000737a:	53                   	push   ebx
c000737b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000737f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007383:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007387:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000738b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000738e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0007392:	5b                   	pop    ebx
c0007393:	c3                   	ret    

c0007394 <IDT::addEntry(int, void (*)(), bool)>:
c0007394:	53                   	push   ebx
c0007395:	83 ec 10             	sub    esp,0x10
c0007398:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000739d:	50                   	push   eax
c000739e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00073a2:	53                   	push   ebx
c00073a3:	e8 40 ff ff ff       	call   c00072e8 <IDTEntry::IDTEntry(bool)>
c00073a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00073ac:	53                   	push   ebx
c00073ad:	e8 a8 ff ff ff       	call   c000735a <IDTEntry::setOffset(unsigned int)>
c00073b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00073b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00073c2:	e8 b3 ff ff ff       	call   c000737a <IDT::addEntry(IDTEntry, int)>
c00073c7:	83 c4 30             	add    esp,0x30
c00073ca:	5b                   	pop    ebx
c00073cb:	c3                   	ret    

c00073cc <IDT::flush()>:
c00073cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073d0:	66 c7 05 c8 2e 02 c0 ff 07 	mov    WORD PTR ds:0xc0022ec8,0x7ff
c00073d9:	a3 ca 2e 02 c0       	mov    ds:0xc0022eca,eax
c00073de:	0f 01 1d c8 2e 02 c0 	lidtd  ds:0xc0022ec8
c00073e5:	c3                   	ret    

c00073e6 <IDT::setup()>:
c00073e6:	57                   	push   edi
c00073e7:	56                   	push   esi
c00073e8:	53                   	push   ebx
c00073e9:	83 ec 10             	sub    esp,0x10
c00073ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00073f0:	6a 00                	push   0x0
c00073f2:	68 a0 c3 01 c0       	push   0xc001c3a0
c00073f7:	6a 00                	push   0x0
c00073f9:	53                   	push   ebx
c00073fa:	e8 95 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00073ff:	6a 00                	push   0x0
c0007401:	68 b0 c3 01 c0       	push   0xc001c3b0
c0007406:	6a 01                	push   0x1
c0007408:	53                   	push   ebx
c0007409:	e8 86 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000740e:	83 c4 20             	add    esp,0x20
c0007411:	6a 00                	push   0x0
c0007413:	68 ba c3 01 c0       	push   0xc001c3ba
c0007418:	6a 02                	push   0x2
c000741a:	53                   	push   ebx
c000741b:	e8 74 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007420:	6a 00                	push   0x0
c0007422:	68 c4 c3 01 c0       	push   0xc001c3c4
c0007427:	6a 03                	push   0x3
c0007429:	53                   	push   ebx
c000742a:	e8 65 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000742f:	83 c4 20             	add    esp,0x20
c0007432:	6a 00                	push   0x0
c0007434:	68 ce c3 01 c0       	push   0xc001c3ce
c0007439:	6a 04                	push   0x4
c000743b:	53                   	push   ebx
c000743c:	e8 53 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007441:	6a 00                	push   0x0
c0007443:	68 d8 c3 01 c0       	push   0xc001c3d8
c0007448:	6a 05                	push   0x5
c000744a:	53                   	push   ebx
c000744b:	e8 44 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007450:	83 c4 20             	add    esp,0x20
c0007453:	6a 00                	push   0x0
c0007455:	68 e2 c3 01 c0       	push   0xc001c3e2
c000745a:	6a 06                	push   0x6
c000745c:	53                   	push   ebx
c000745d:	e8 32 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007462:	6a 00                	push   0x0
c0007464:	68 ec c3 01 c0       	push   0xc001c3ec
c0007469:	6a 07                	push   0x7
c000746b:	53                   	push   ebx
c000746c:	e8 23 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007471:	83 c4 20             	add    esp,0x20
c0007474:	6a 00                	push   0x0
c0007476:	68 f6 c3 01 c0       	push   0xc001c3f6
c000747b:	6a 08                	push   0x8
c000747d:	53                   	push   ebx
c000747e:	e8 11 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007483:	6a 00                	push   0x0
c0007485:	68 fe c3 01 c0       	push   0xc001c3fe
c000748a:	6a 09                	push   0x9
c000748c:	53                   	push   ebx
c000748d:	e8 02 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007492:	83 c4 20             	add    esp,0x20
c0007495:	6a 00                	push   0x0
c0007497:	68 08 c4 01 c0       	push   0xc001c408
c000749c:	6a 0a                	push   0xa
c000749e:	53                   	push   ebx
c000749f:	e8 f0 fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074a4:	6a 00                	push   0x0
c00074a6:	68 10 c4 01 c0       	push   0xc001c410
c00074ab:	6a 0b                	push   0xb
c00074ad:	53                   	push   ebx
c00074ae:	e8 e1 fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074b3:	83 c4 20             	add    esp,0x20
c00074b6:	6a 00                	push   0x0
c00074b8:	68 18 c4 01 c0       	push   0xc001c418
c00074bd:	6a 0c                	push   0xc
c00074bf:	53                   	push   ebx
c00074c0:	e8 cf fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074c5:	6a 00                	push   0x0
c00074c7:	68 20 c4 01 c0       	push   0xc001c420
c00074cc:	6a 0d                	push   0xd
c00074ce:	53                   	push   ebx
c00074cf:	e8 c0 fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074d4:	83 c4 20             	add    esp,0x20
c00074d7:	6a 00                	push   0x0
c00074d9:	68 28 c4 01 c0       	push   0xc001c428
c00074de:	6a 0e                	push   0xe
c00074e0:	53                   	push   ebx
c00074e1:	e8 ae fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074e6:	6a 00                	push   0x0
c00074e8:	68 30 c4 01 c0       	push   0xc001c430
c00074ed:	6a 0f                	push   0xf
c00074ef:	53                   	push   ebx
c00074f0:	e8 9f fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074f5:	83 c4 20             	add    esp,0x20
c00074f8:	6a 00                	push   0x0
c00074fa:	68 3a c4 01 c0       	push   0xc001c43a
c00074ff:	6a 10                	push   0x10
c0007501:	53                   	push   ebx
c0007502:	e8 8d fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007507:	6a 00                	push   0x0
c0007509:	68 44 c4 01 c0       	push   0xc001c444
c000750e:	6a 11                	push   0x11
c0007510:	53                   	push   ebx
c0007511:	e8 7e fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007516:	83 c4 20             	add    esp,0x20
c0007519:	6a 00                	push   0x0
c000751b:	68 4e c4 01 c0       	push   0xc001c44e
c0007520:	6a 12                	push   0x12
c0007522:	53                   	push   ebx
c0007523:	e8 6c fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007528:	6a 01                	push   0x1
c000752a:	68 e8 c4 01 c0       	push   0xc001c4e8
c000752f:	6a 60                	push   0x60
c0007531:	53                   	push   ebx
c0007532:	e8 5d fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007537:	83 c4 20             	add    esp,0x20
c000753a:	6a 00                	push   0x0
c000753c:	68 ef c4 01 c0       	push   0xc001c4ef
c0007541:	6a 20                	push   0x20
c0007543:	53                   	push   ebx
c0007544:	e8 4b fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007549:	6a 00                	push   0x0
c000754b:	68 da c4 01 c0       	push   0xc001c4da
c0007550:	6a 21                	push   0x21
c0007552:	53                   	push   ebx
c0007553:	e8 3c fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007558:	83 c4 20             	add    esp,0x20
c000755b:	6a 00                	push   0x0
c000755d:	68 e1 c4 01 c0       	push   0xc001c4e1
c0007562:	6a 22                	push   0x22
c0007564:	53                   	push   ebx
c0007565:	e8 2a fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000756a:	6a 00                	push   0x0
c000756c:	68 58 c4 01 c0       	push   0xc001c458
c0007571:	6a 23                	push   0x23
c0007573:	53                   	push   ebx
c0007574:	e8 1b fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007579:	83 c4 20             	add    esp,0x20
c000757c:	6a 00                	push   0x0
c000757e:	68 62 c4 01 c0       	push   0xc001c462
c0007583:	6a 24                	push   0x24
c0007585:	53                   	push   ebx
c0007586:	e8 09 fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000758b:	6a 00                	push   0x0
c000758d:	68 6c c4 01 c0       	push   0xc001c46c
c0007592:	6a 25                	push   0x25
c0007594:	53                   	push   ebx
c0007595:	e8 fa fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000759a:	83 c4 20             	add    esp,0x20
c000759d:	6a 00                	push   0x0
c000759f:	68 76 c4 01 c0       	push   0xc001c476
c00075a4:	6a 26                	push   0x26
c00075a6:	53                   	push   ebx
c00075a7:	e8 e8 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075ac:	6a 00                	push   0x0
c00075ae:	68 80 c4 01 c0       	push   0xc001c480
c00075b3:	6a 27                	push   0x27
c00075b5:	53                   	push   ebx
c00075b6:	e8 d9 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075bb:	83 c4 20             	add    esp,0x20
c00075be:	6a 00                	push   0x0
c00075c0:	68 8a c4 01 c0       	push   0xc001c48a
c00075c5:	6a 28                	push   0x28
c00075c7:	53                   	push   ebx
c00075c8:	e8 c7 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075cd:	6a 00                	push   0x0
c00075cf:	68 94 c4 01 c0       	push   0xc001c494
c00075d4:	6a 29                	push   0x29
c00075d6:	53                   	push   ebx
c00075d7:	e8 b8 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075dc:	83 c4 20             	add    esp,0x20
c00075df:	6a 00                	push   0x0
c00075e1:	68 9e c4 01 c0       	push   0xc001c49e
c00075e6:	6a 2a                	push   0x2a
c00075e8:	53                   	push   ebx
c00075e9:	e8 a6 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075ee:	6a 00                	push   0x0
c00075f0:	68 a8 c4 01 c0       	push   0xc001c4a8
c00075f5:	6a 2b                	push   0x2b
c00075f7:	53                   	push   ebx
c00075f8:	e8 97 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075fd:	83 c4 20             	add    esp,0x20
c0007600:	6a 00                	push   0x0
c0007602:	68 b2 c4 01 c0       	push   0xc001c4b2
c0007607:	6a 2c                	push   0x2c
c0007609:	53                   	push   ebx
c000760a:	e8 85 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000760f:	6a 00                	push   0x0
c0007611:	68 bc c4 01 c0       	push   0xc001c4bc
c0007616:	6a 2d                	push   0x2d
c0007618:	53                   	push   ebx
c0007619:	e8 76 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000761e:	83 c4 20             	add    esp,0x20
c0007621:	6a 00                	push   0x0
c0007623:	68 c6 c4 01 c0       	push   0xc001c4c6
c0007628:	6a 2e                	push   0x2e
c000762a:	53                   	push   ebx
c000762b:	e8 64 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007630:	6a 00                	push   0x0
c0007632:	68 d0 c4 01 c0       	push   0xc001c4d0
c0007637:	6a 2f                	push   0x2f
c0007639:	53                   	push   ebx
c000763a:	e8 55 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000763f:	83 c4 20             	add    esp,0x20
c0007642:	6a 00                	push   0x0
c0007644:	68 81 c5 01 c0       	push   0xc001c581
c0007649:	6a 30                	push   0x30
c000764b:	53                   	push   ebx
c000764c:	e8 43 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007651:	6a 00                	push   0x0
c0007653:	68 8b c5 01 c0       	push   0xc001c58b
c0007658:	6a 31                	push   0x31
c000765a:	53                   	push   ebx
c000765b:	e8 34 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007660:	83 c4 20             	add    esp,0x20
c0007663:	6a 00                	push   0x0
c0007665:	68 95 c5 01 c0       	push   0xc001c595
c000766a:	6a 32                	push   0x32
c000766c:	53                   	push   ebx
c000766d:	e8 22 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007672:	6a 00                	push   0x0
c0007674:	68 9f c5 01 c0       	push   0xc001c59f
c0007679:	6a 33                	push   0x33
c000767b:	53                   	push   ebx
c000767c:	e8 13 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007681:	83 c4 20             	add    esp,0x20
c0007684:	6a 00                	push   0x0
c0007686:	68 a9 c5 01 c0       	push   0xc001c5a9
c000768b:	6a 34                	push   0x34
c000768d:	53                   	push   ebx
c000768e:	e8 01 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007693:	6a 00                	push   0x0
c0007695:	68 b3 c5 01 c0       	push   0xc001c5b3
c000769a:	6a 35                	push   0x35
c000769c:	53                   	push   ebx
c000769d:	e8 f2 fc ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00076a2:	83 c4 20             	add    esp,0x20
c00076a5:	6a 00                	push   0x0
c00076a7:	68 bd c5 01 c0       	push   0xc001c5bd
c00076ac:	6a 36                	push   0x36
c00076ae:	53                   	push   ebx
c00076af:	e8 e0 fc ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00076b4:	6a 00                	push   0x0
c00076b6:	68 c7 c5 01 c0       	push   0xc001c5c7
c00076bb:	6a 37                	push   0x37
c00076bd:	53                   	push   ebx
c00076be:	e8 d1 fc ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00076c3:	83 c4 1c             	add    esp,0x1c
c00076c6:	6a 03                	push   0x3
c00076c8:	6a 02                	push   0x2
c00076ca:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c00076d0:	e8 43 24 00 00       	call   c0009b18 <VAS::allocatePages(int, int)>
c00076d5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00076dc:	89 c6                	mov    esi,eax
c00076de:	e8 92 01 00 00       	call   c0007875 <malloc>
c00076e3:	81 c6 00 20 00 00    	add    esi,0x2000
c00076e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00076ec:	89 c7                	mov    edi,eax
c00076ee:	e8 a1 15 00 00       	call   c0008c94 <TSS::TSS()>
c00076f3:	83 c4 0c             	add    esp,0xc
c00076f6:	68 f6 c3 01 c0       	push   0xc001c3f6
c00076fb:	56                   	push   esi
c00076fc:	57                   	push   edi
c00076fd:	e8 d6 15 00 00       	call   c0008cd8 <TSS::setup(unsigned long, unsigned long)>
c0007702:	89 c6                	mov    esi,eax
c0007704:	58                   	pop    eax
c0007705:	5a                   	pop    edx
c0007706:	6a 00                	push   0x0
c0007708:	8d 44 24 14          	lea    eax,[esp+0x14]
c000770c:	50                   	push   eax
c000770d:	e8 d6 fb ff ff       	call   c00072e8 <IDTEntry::IDTEntry(bool)>
c0007712:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007716:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000771b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007722:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007728:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000772c:	80 ce 05             	or     dh,0x5
c000772f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007732:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007736:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000773a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000773d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007740:	e8 87 fc ff ff       	call   c00073cc <IDT::flush()>
c0007745:	83 c4 20             	add    esp,0x20
c0007748:	5b                   	pop    ebx
c0007749:	5e                   	pop    esi
c000774a:	5f                   	pop    edi
c000774b:	c3                   	ret    

c000774c <sbrk>:
c000774c:	55                   	push   ebp
c000774d:	57                   	push   edi
c000774e:	56                   	push   esi
c000774f:	53                   	push   ebx
c0007750:	83 ec 1c             	sub    esp,0x1c
c0007753:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007757:	85 c0                	test   eax,eax
c0007759:	74 5f                	je     c00077ba <sbrk+0x6e>
c000775b:	78 64                	js     c00077c1 <sbrk+0x75>
c000775d:	8b 15 94 ff 01 c0    	mov    edx,DWORD PTR ds:0xc001ff94
c0007763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007767:	05 ff 0f 00 00       	add    eax,0xfff
c000776c:	89 c5                	mov    ebp,eax
c000776e:	78 69                	js     c00077d9 <sbrk+0x8d>
c0007770:	c1 fd 0c             	sar    ebp,0xc
c0007773:	bb 00 00 00 00       	mov    ebx,0x0
c0007778:	8b 35 b0 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022fb0
c000777e:	8b 3d 94 ff 01 c0    	mov    edi,DWORD PTR ds:0xc001ff94
c0007784:	e8 c8 03 00 00       	call   c0007b51 <Phys::allocatePage()>
c0007789:	68 01 04 00 00       	push   0x401
c000778e:	57                   	push   edi
c000778f:	50                   	push   eax
c0007790:	56                   	push   esi
c0007791:	e8 7e 22 00 00       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007796:	81 05 94 ff 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001ff94,0x1000
c00077a0:	43                   	inc    ebx
c00077a1:	83 c4 10             	add    esp,0x10
c00077a4:	39 dd                	cmp    ebp,ebx
c00077a6:	75 d0                	jne    c0007778 <sbrk+0x2c>
c00077a8:	0f 20 d8             	mov    eax,cr3
c00077ab:	0f 22 d8             	mov    cr3,eax
c00077ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00077b2:	83 c4 1c             	add    esp,0x1c
c00077b5:	5b                   	pop    ebx
c00077b6:	5e                   	pop    esi
c00077b7:	5f                   	pop    edi
c00077b8:	5d                   	pop    ebp
c00077b9:	c3                   	ret    
c00077ba:	a1 94 ff 01 c0       	mov    eax,ds:0xc001ff94
c00077bf:	eb f1                	jmp    c00077b2 <sbrk+0x66>
c00077c1:	83 ec 08             	sub    esp,0x8
c00077c4:	50                   	push   eax
c00077c5:	68 d8 de 01 c0       	push   0xc001ded8
c00077ca:	e8 3f 2e 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00077cf:	83 c4 10             	add    esp,0x10
c00077d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00077d7:	eb d9                	jmp    c00077b2 <sbrk+0x66>
c00077d9:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c00077df:	eb 8f                	jmp    c0007770 <sbrk+0x24>

c00077e1 <mmap>:
c00077e1:	83 ec 18             	sub    esp,0x18
c00077e4:	68 08 df 01 c0       	push   0xc001df08
c00077e9:	e8 29 8b 00 00       	call   c0010317 <KePanic(char const*)>
c00077ee:	b8 00 00 00 00       	mov    eax,0x0
c00077f3:	83 c4 1c             	add    esp,0x1c
c00077f6:	c3                   	ret    

c00077f7 <munmap>:
c00077f7:	83 ec 18             	sub    esp,0x18
c00077fa:	68 0d df 01 c0       	push   0xc001df0d
c00077ff:	e8 13 8b 00 00       	call   c0010317 <KePanic(char const*)>
c0007804:	b8 00 00 00 00       	mov    eax,0x0
c0007809:	83 c4 1c             	add    esp,0x1c
c000780c:	c3                   	ret    

c000780d <liballoc_lock()>:
c000780d:	fa                   	cli    
c000780e:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0007814:	b8 00 00 00 00       	mov    eax,0x0
c0007819:	c3                   	ret    

c000781a <liballoc_unlock()>:
c000781a:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000781f:	48                   	dec    eax
c0007820:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0007825:	75 01                	jne    c0007828 <liballoc_unlock()+0xe>
c0007827:	fb                   	sti    
c0007828:	b8 00 00 00 00       	mov    eax,0x0
c000782d:	c3                   	ret    

c000782e <liballoc_alloc(int)>:
c000782e:	83 ec 10             	sub    esp,0x10
c0007831:	6a 01                	push   0x1
c0007833:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007837:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c000783d:	e8 d6 22 00 00       	call   c0009b18 <VAS::allocatePages(int, int)>
c0007842:	83 c4 1c             	add    esp,0x1c
c0007845:	c3                   	ret    

c0007846 <liballoc_free(void*, int)>:
c0007846:	83 ec 14             	sub    esp,0x14
c0007849:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000784d:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c0007853:	e8 12 1f 00 00       	call   c000976a <VAS::freeAllocatedPages(unsigned long)>
c0007858:	b8 00 00 00 00       	mov    eax,0x0
c000785d:	83 c4 1c             	add    esp,0x1c
c0007860:	c3                   	ret    

c0007861 <realloc>:
c0007861:	83 ec 14             	sub    esp,0x14
c0007864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000786c:	e8 c0 9c ff ff       	call   c0001531 <dlrealloc>
c0007871:	83 c4 1c             	add    esp,0x1c
c0007874:	c3                   	ret    

c0007875 <malloc>:
c0007875:	83 ec 18             	sub    esp,0x18
c0007878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000787c:	e8 73 97 ff ff       	call   c0000ff4 <dlmalloc>
c0007881:	83 c4 1c             	add    esp,0x1c
c0007884:	c3                   	ret    

c0007885 <free>:
c0007885:	83 ec 18             	sub    esp,0x18
c0007888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000788c:	e8 08 94 ff ff       	call   c0000c99 <dlfree>
c0007891:	83 c4 1c             	add    esp,0x1c
c0007894:	c3                   	ret    

c0007895 <rfree>:
c0007895:	83 ec 18             	sub    esp,0x18
c0007898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000789c:	e8 f8 93 ff ff       	call   c0000c99 <dlfree>
c00078a1:	83 c4 1c             	add    esp,0x1c
c00078a4:	c3                   	ret    

c00078a5 <calloc>:
c00078a5:	56                   	push   esi
c00078a6:	53                   	push   ebx
c00078a7:	83 ec 10             	sub    esp,0x10
c00078aa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00078ae:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00078b3:	53                   	push   ebx
c00078b4:	e8 bc ff ff ff       	call   c0007875 <malloc>
c00078b9:	89 c6                	mov    esi,eax
c00078bb:	83 c4 0c             	add    esp,0xc
c00078be:	53                   	push   ebx
c00078bf:	6a 00                	push   0x0
c00078c1:	50                   	push   eax
c00078c2:	e8 09 8c ff ff       	call   c00004d0 <memset>
c00078c7:	89 f0                	mov    eax,esi
c00078c9:	83 c4 14             	add    esp,0x14
c00078cc:	5b                   	pop    ebx
c00078cd:	5e                   	pop    esi
c00078ce:	c3                   	ret    

c00078cf <KeEntryPoint>:
c00078cf:	57                   	push   edi
c00078d0:	bf f9 03 00 00       	mov    edi,0x3f9
c00078d5:	56                   	push   esi
c00078d6:	89 fa                	mov    edx,edi
c00078d8:	53                   	push   ebx
c00078d9:	31 f6                	xor    esi,esi
c00078db:	83 ec 2c             	sub    esp,0x2c
c00078de:	a1 00 05 00 00       	mov    eax,ds:0x500
c00078e3:	a3 d0 2e 02 c0       	mov    ds:0xc0022ed0,eax
c00078e8:	89 f0                	mov    eax,esi
c00078ea:	ee                   	out    dx,al
c00078eb:	bb fb 03 00 00       	mov    ebx,0x3fb
c00078f0:	b0 80                	mov    al,0x80
c00078f2:	89 da                	mov    edx,ebx
c00078f4:	ee                   	out    dx,al
c00078f5:	b1 03                	mov    cl,0x3
c00078f7:	ba f8 03 00 00       	mov    edx,0x3f8
c00078fc:	88 c8                	mov    al,cl
c00078fe:	ee                   	out    dx,al
c00078ff:	89 f0                	mov    eax,esi
c0007901:	89 fa                	mov    edx,edi
c0007903:	ee                   	out    dx,al
c0007904:	88 c8                	mov    al,cl
c0007906:	89 da                	mov    edx,ebx
c0007908:	ee                   	out    dx,al
c0007909:	b0 c7                	mov    al,0xc7
c000790b:	ba fa 03 00 00       	mov    edx,0x3fa
c0007910:	ee                   	out    dx,al
c0007911:	b0 0b                	mov    al,0xb
c0007913:	ba fc 03 00 00       	mov    edx,0x3fc
c0007918:	ee                   	out    dx,al
c0007919:	68 14 df 01 c0       	push   0xc001df14
c000791e:	e8 eb 2c 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0007923:	e8 09 83 00 00       	call   c000fc31 <KeDisplaySplashScreen()>
c0007928:	a1 24 05 00 00       	mov    eax,ds:0x524
c000792d:	05 ff 0f 00 00       	add    eax,0xfff
c0007932:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007937:	89 04 24             	mov    DWORD PTR [esp],eax
c000793a:	e8 64 03 00 00       	call   c0007ca3 <Phys::physicalMemorySetup(unsigned int)>
c000793f:	e8 cc 1b 00 00       	call   c0009510 <Virt::virtualMemorySetup()>
c0007944:	58                   	pop    eax
c0007945:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007949:	53                   	push   ebx
c000794a:	e8 99 1e 00 00       	call   c00097e8 <VAS::VAS()>
c000794f:	89 1d b0 2f 02 c0    	mov    DWORD PTR ds:0xc0022fb0,ebx
c0007955:	e8 30 52 01 00       	call   c001cb8a <_init>
c000795a:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007961:	e8 0f ff ff ff       	call   c0007875 <malloc>
c0007966:	89 04 24             	mov    DWORD PTR [esp],eax
c0007969:	89 c6                	mov    esi,eax
c000796b:	e8 7c f2 ff ff       	call   c0006bec <Computer::Computer()>
c0007970:	6a 00                	push   0x0
c0007972:	89 35 b8 2e 02 c0    	mov    DWORD PTR ds:0xc0022eb8,esi
c0007978:	6a 00                	push   0x0
c000797a:	6a 00                	push   0x0
c000797c:	56                   	push   esi
c000797d:	e8 10 f6 ff ff       	call   c0006f92 <Computer::open(int, int, void*)>
c0007982:	83 c4 14             	add    esp,0x14
c0007985:	53                   	push   ebx
c0007986:	e8 25 1f 00 00       	call   c00098b0 <VAS::~VAS()>
c000798b:	83 c4 30             	add    esp,0x30
c000798e:	5b                   	pop    ebx
c000798f:	5e                   	pop    esi
c0007990:	5f                   	pop    edi
c0007991:	c3                   	ret    

c0007992 <Phys::allocateDMA(unsigned long)>:
c0007992:	55                   	push   ebp
c0007993:	31 ed                	xor    ebp,ebp
c0007995:	57                   	push   edi
c0007996:	56                   	push   esi
c0007997:	53                   	push   ebx
c0007998:	31 db                	xor    ebx,ebx
c000799a:	83 ec 1c             	sub    esp,0x1c
c000799d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079a1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00079a9:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00079af:	31 c0                	xor    eax,eax
c00079b1:	c1 ef 0c             	shr    edi,0xc
c00079b4:	eb 19                	jmp    c00079cf <Phys::allocateDMA(unsigned long)+0x3d>
c00079b6:	85 c0                	test   eax,eax
c00079b8:	75 06                	jne    c00079c0 <Phys::allocateDMA(unsigned long)+0x2e>
c00079ba:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00079be:	89 dd                	mov    ebp,ebx
c00079c0:	8d 70 01             	lea    esi,[eax+0x1]
c00079c3:	39 f7                	cmp    edi,esi
c00079c5:	74 33                	je     c00079fa <Phys::allocateDMA(unsigned long)+0x68>
c00079c7:	89 f0                	mov    eax,esi
c00079c9:	43                   	inc    ebx
c00079ca:	83 fb 0f             	cmp    ebx,0xf
c00079cd:	7f 11                	jg     c00079e0 <Phys::allocateDMA(unsigned long)+0x4e>
c00079cf:	80 bb ec 2e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdd114],0x0
c00079d6:	74 de                	je     c00079b6 <Phys::allocateDMA(unsigned long)+0x24>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	43                   	inc    ebx
c00079db:	83 fb 0f             	cmp    ebx,0xf
c00079de:	7e ef                	jle    c00079cf <Phys::allocateDMA(unsigned long)+0x3d>
c00079e0:	83 ec 0c             	sub    esp,0xc
c00079e3:	68 2c df 01 c0       	push   0xc001df2c
c00079e8:	e8 2a 89 00 00       	call   c0010317 <KePanic(char const*)>
c00079ed:	83 c4 10             	add    esp,0x10
c00079f0:	31 c0                	xor    eax,eax
c00079f2:	83 c4 1c             	add    esp,0x1c
c00079f5:	5b                   	pop    ebx
c00079f6:	5e                   	pop    esi
c00079f7:	5f                   	pop    edi
c00079f8:	5d                   	pop    ebp
c00079f9:	c3                   	ret    
c00079fa:	89 e9                	mov    ecx,ebp
c00079fc:	c1 f9 04             	sar    ecx,0x4
c00079ff:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007a03:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007a07:	89 ca                	mov    edx,ecx
c0007a09:	4a                   	dec    edx
c0007a0a:	79 03                	jns    c0007a0f <Phys::allocateDMA(unsigned long)+0x7d>
c0007a0c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007a0f:	c1 fa 04             	sar    edx,0x4
c0007a12:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007a16:	74 08                	je     c0007a20 <Phys::allocateDMA(unsigned long)+0x8e>
c0007a18:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007a1c:	31 c0                	xor    eax,eax
c0007a1e:	eb ba                	jmp    c00079da <Phys::allocateDMA(unsigned long)+0x48>
c0007a20:	85 f6                	test   esi,esi
c0007a22:	74 15                	je     c0007a39 <Phys::allocateDMA(unsigned long)+0xa7>
c0007a24:	8d 95 ec 2e 02 c0    	lea    edx,[ebp-0x3ffdd114]
c0007a2a:	8d 84 05 ed 2e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdd113]
c0007a31:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007a34:	42                   	inc    edx
c0007a35:	39 d0                	cmp    eax,edx
c0007a37:	75 f8                	jne    c0007a31 <Phys::allocateDMA(unsigned long)+0x9f>
c0007a39:	01 3d e4 2e 02 c0    	add    DWORD PTR ds:0xc0022ee4,edi
c0007a3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a43:	85 c0                	test   eax,eax
c0007a45:	74 17                	je     c0007a5e <Phys::allocateDMA(unsigned long)+0xcc>
c0007a47:	83 ec 0c             	sub    esp,0xc
c0007a4a:	68 2c df 01 c0       	push   0xc001df2c
c0007a4f:	e8 c3 88 00 00       	call   c0010317 <KePanic(char const*)>
c0007a54:	83 c4 10             	add    esp,0x10
c0007a57:	89 f0                	mov    eax,esi
c0007a59:	e9 6b ff ff ff       	jmp    c00079c9 <Phys::allocateDMA(unsigned long)+0x37>
c0007a5e:	c1 e5 0c             	shl    ebp,0xc
c0007a61:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007a67:	eb 89                	jmp    c00079f2 <Phys::allocateDMA(unsigned long)+0x60>

c0007a69 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007a69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a6d:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007a73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a77:	c1 ea 0c             	shr    edx,0xc
c0007a7a:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007a7f:	29 15 e4 2e 02 c0    	sub    DWORD PTR ds:0xc0022ee4,edx
c0007a85:	c1 e8 0c             	shr    eax,0xc
c0007a88:	85 d2                	test   edx,edx
c0007a8a:	74 0f                	je     c0007a9b <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007a8c:	05 ec 2e 02 c0       	add    eax,0xc0022eec
c0007a91:	01 c2                	add    edx,eax
c0007a93:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007a96:	40                   	inc    eax
c0007a97:	39 d0                	cmp    eax,edx
c0007a99:	75 f8                	jne    c0007a93 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007a9b:	c3                   	ret    

c0007a9c <Phys::setPageState(unsigned long, bool)>:
c0007a9c:	56                   	push   esi
c0007a9d:	ba 01 00 00 00       	mov    edx,0x1
c0007aa2:	53                   	push   ebx
c0007aa3:	8b 35 98 ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ff98
c0007aa9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007aad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ab1:	89 c8                	mov    eax,ecx
c0007ab3:	83 e1 07             	and    ecx,0x7
c0007ab6:	c1 e8 03             	shr    eax,0x3
c0007ab9:	d3 e3                	shl    ebx,cl
c0007abb:	01 c6                	add    esi,eax
c0007abd:	d3 e2                	shl    edx,cl
c0007abf:	f7 d2                	not    edx
c0007ac1:	20 16                	and    BYTE PTR [esi],dl
c0007ac3:	03 05 98 ff 01 c0    	add    eax,DWORD PTR ds:0xc001ff98
c0007ac9:	08 18                	or     BYTE PTR [eax],bl
c0007acb:	5b                   	pop    ebx
c0007acc:	5e                   	pop    esi
c0007acd:	c3                   	ret    

c0007ace <Phys::getPageState(unsigned long)>:
c0007ace:	53                   	push   ebx
c0007acf:	8b 15 98 ff 01 c0    	mov    edx,DWORD PTR ds:0xc001ff98
c0007ad5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007ad9:	31 db                	xor    ebx,ebx
c0007adb:	89 c8                	mov    eax,ecx
c0007add:	83 e1 07             	and    ecx,0x7
c0007ae0:	c1 e8 03             	shr    eax,0x3
c0007ae3:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007ae6:	89 d8                	mov    eax,ebx
c0007ae8:	5b                   	pop    ebx
c0007ae9:	d3 f8                	sar    eax,cl
c0007aeb:	83 e0 01             	and    eax,0x1
c0007aee:	c3                   	ret    

c0007aef <Phys::freePage(unsigned long)>:
c0007aef:	53                   	push   ebx
c0007af0:	83 ec 08             	sub    esp,0x8
c0007af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007af7:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007afd:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007b03:	76 3a                	jbe    c0007b3f <Phys::freePage(unsigned long)+0x50>
c0007b05:	c1 e8 0c             	shr    eax,0xc
c0007b08:	50                   	push   eax
c0007b09:	89 c3                	mov    ebx,eax
c0007b0b:	e8 be ff ff ff       	call   c0007ace <Phys::getPageState(unsigned long)>
c0007b10:	5a                   	pop    edx
c0007b11:	84 c0                	test   al,al
c0007b13:	74 19                	je     c0007b2e <Phys::freePage(unsigned long)+0x3f>
c0007b15:	83 ec 08             	sub    esp,0x8
c0007b18:	ff 0d e4 2e 02 c0    	dec    DWORD PTR ds:0xc0022ee4
c0007b1e:	6a 00                	push   0x0
c0007b20:	53                   	push   ebx
c0007b21:	e8 76 ff ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007b26:	83 c4 10             	add    esp,0x10
c0007b29:	83 c4 08             	add    esp,0x8
c0007b2c:	5b                   	pop    ebx
c0007b2d:	c3                   	ret    
c0007b2e:	c7 44 24 10 d1 df 01 c0 	mov    DWORD PTR [esp+0x10],0xc001dfd1
c0007b36:	83 c4 08             	add    esp,0x8
c0007b39:	5b                   	pop    ebx
c0007b3a:	e9 d8 87 00 00       	jmp    c0010317 <KePanic(char const*)>
c0007b3f:	68 00 10 00 00       	push   0x1000
c0007b44:	50                   	push   eax
c0007b45:	e8 1f ff ff ff       	call   c0007a69 <Phys::freeDMA(unsigned long, unsigned long)>
c0007b4a:	59                   	pop    ecx
c0007b4b:	5b                   	pop    ebx
c0007b4c:	83 c4 08             	add    esp,0x8
c0007b4f:	5b                   	pop    ebx
c0007b50:	c3                   	ret    

c0007b51 <Phys::allocatePage()>:
c0007b51:	56                   	push   esi
c0007b52:	53                   	push   ebx
c0007b53:	83 ec 14             	sub    esp,0x14
c0007b56:	8b 35 d8 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022ed8
c0007b5c:	89 f3                	mov    ebx,esi
c0007b5e:	eb 0a                	jmp    c0007b6a <Phys::allocatePage()+0x19>
c0007b60:	89 1d d8 2e 02 c0    	mov    DWORD PTR ds:0xc0022ed8,ebx
c0007b66:	39 de                	cmp    esi,ebx
c0007b68:	74 24                	je     c0007b8e <Phys::allocatePage()+0x3d>
c0007b6a:	53                   	push   ebx
c0007b6b:	e8 5e ff ff ff       	call   c0007ace <Phys::getPageState(unsigned long)>
c0007b70:	5a                   	pop    edx
c0007b71:	84 c0                	test   al,al
c0007b73:	74 5f                	je     c0007bd4 <Phys::allocatePage()+0x83>
c0007b75:	43                   	inc    ebx
c0007b76:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007b7c:	75 e2                	jne    c0007b60 <Phys::allocatePage()+0xf>
c0007b7e:	31 db                	xor    ebx,ebx
c0007b80:	c7 05 d8 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ed8,0x0
c0007b8a:	39 de                	cmp    esi,ebx
c0007b8c:	75 dc                	jne    c0007b6a <Phys::allocatePage()+0x19>
c0007b8e:	83 ec 0c             	sub    esp,0xc
c0007b91:	80 35 fc 2e 02 c0 01 	xor    BYTE PTR ds:0xc0022efc,0x1
c0007b98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007b9d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ba0:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007ba6:	50                   	push   eax
c0007ba7:	e8 46 27 00 00       	call   c000a2f2 <VAS::scanForEviction()>
c0007bac:	83 c4 10             	add    esp,0x10
c0007baf:	85 c0                	test   eax,eax
c0007bb1:	75 3f                	jne    c0007bf2 <Phys::allocatePage()+0xa1>
c0007bb3:	83 ec 0c             	sub    esp,0xc
c0007bb6:	68 54 df 01 c0       	push   0xc001df54
c0007bbb:	e8 57 87 00 00       	call   c0010317 <KePanic(char const*)>
c0007bc0:	83 c4 10             	add    esp,0x10
c0007bc3:	8b 1d d8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ed8
c0007bc9:	53                   	push   ebx
c0007bca:	e8 ff fe ff ff       	call   c0007ace <Phys::getPageState(unsigned long)>
c0007bcf:	5a                   	pop    edx
c0007bd0:	84 c0                	test   al,al
c0007bd2:	75 a1                	jne    c0007b75 <Phys::allocatePage()+0x24>
c0007bd4:	6a 01                	push   0x1
c0007bd6:	53                   	push   ebx
c0007bd7:	e8 c0 fe ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007bdc:	a1 d8 2e 02 c0       	mov    eax,ds:0xc0022ed8
c0007be1:	5a                   	pop    edx
c0007be2:	ff 05 e4 2e 02 c0    	inc    DWORD PTR ds:0xc0022ee4
c0007be8:	c1 e0 0c             	shl    eax,0xc
c0007beb:	59                   	pop    ecx
c0007bec:	83 c4 14             	add    esp,0x14
c0007bef:	5b                   	pop    ebx
c0007bf0:	5e                   	pop    esi
c0007bf1:	c3                   	ret    
c0007bf2:	83 ec 08             	sub    esp,0x8
c0007bf5:	89 c2                	mov    edx,eax
c0007bf7:	6a 01                	push   0x1
c0007bf9:	c1 ea 0c             	shr    edx,0xc
c0007bfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c00:	52                   	push   edx
c0007c01:	e8 96 fe ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007c06:	83 c4 10             	add    esp,0x10
c0007c09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c0d:	eb dd                	jmp    c0007bec <Phys::allocatePage()+0x9b>

c0007c0f <Phys::allocateContiguousPages(int)>:
c0007c0f:	57                   	push   edi
c0007c10:	56                   	push   esi
c0007c11:	53                   	push   ebx
c0007c12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c16:	fa                   	cli    
c0007c17:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0007c1d:	31 db                	xor    ebx,ebx
c0007c1f:	85 db                	test   ebx,ebx
c0007c21:	75 11                	jne    c0007c34 <Phys::allocateContiguousPages(int)+0x25>
c0007c23:	e8 29 ff ff ff       	call   c0007b51 <Phys::allocatePage()>
c0007c28:	83 fe 01             	cmp    esi,0x1
c0007c2b:	89 c7                	mov    edi,eax
c0007c2d:	74 21                	je     c0007c50 <Phys::allocateContiguousPages(int)+0x41>
c0007c2f:	bb 01 00 00 00       	mov    ebx,0x1
c0007c34:	e8 18 ff ff ff       	call   c0007b51 <Phys::allocatePage()>
c0007c39:	89 da                	mov    edx,ebx
c0007c3b:	c1 e2 0c             	shl    edx,0xc
c0007c3e:	01 fa                	add    edx,edi
c0007c40:	39 c2                	cmp    edx,eax
c0007c42:	74 20                	je     c0007c64 <Phys::allocateContiguousPages(int)+0x55>
c0007c44:	bb 01 00 00 00       	mov    ebx,0x1
c0007c49:	89 c7                	mov    edi,eax
c0007c4b:	83 fe 01             	cmp    esi,0x1
c0007c4e:	75 e4                	jne    c0007c34 <Phys::allocateContiguousPages(int)+0x25>
c0007c50:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0007c55:	48                   	dec    eax
c0007c56:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0007c5b:	75 01                	jne    c0007c5e <Phys::allocateContiguousPages(int)+0x4f>
c0007c5d:	fb                   	sti    
c0007c5e:	89 f8                	mov    eax,edi
c0007c60:	5b                   	pop    ebx
c0007c61:	5e                   	pop    esi
c0007c62:	5f                   	pop    edi
c0007c63:	c3                   	ret    
c0007c64:	43                   	inc    ebx
c0007c65:	39 f3                	cmp    ebx,esi
c0007c67:	75 b6                	jne    c0007c1f <Phys::allocateContiguousPages(int)+0x10>
c0007c69:	eb e5                	jmp    c0007c50 <Phys::allocateContiguousPages(int)+0x41>

c0007c6b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007c6b:	56                   	push   esi
c0007c6c:	53                   	push   ebx
c0007c6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007c71:	39 1d dc 2e 02 c0    	cmp    DWORD PTR ds:0xc0022edc,ebx
c0007c77:	73 06                	jae    c0007c7f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007c79:	89 1d dc 2e 02 c0    	mov    DWORD PTR ds:0xc0022edc,ebx
c0007c7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c83:	c1 eb 0c             	shr    ebx,0xc
c0007c86:	c1 e8 0c             	shr    eax,0xc
c0007c89:	39 d8                	cmp    eax,ebx
c0007c8b:	73 13                	jae    c0007ca0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007c8d:	6a 00                	push   0x0
c0007c8f:	8d 70 01             	lea    esi,[eax+0x1]
c0007c92:	50                   	push   eax
c0007c93:	e8 04 fe ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007c98:	5a                   	pop    edx
c0007c99:	89 f0                	mov    eax,esi
c0007c9b:	59                   	pop    ecx
c0007c9c:	39 f3                	cmp    ebx,esi
c0007c9e:	75 ed                	jne    c0007c8d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007ca0:	5b                   	pop    ebx
c0007ca1:	5e                   	pop    esi
c0007ca2:	c3                   	ret    

c0007ca3 <Phys::physicalMemorySetup(unsigned int)>:
c0007ca3:	55                   	push   ebp
c0007ca4:	57                   	push   edi
c0007ca5:	56                   	push   esi
c0007ca6:	53                   	push   ebx
c0007ca7:	31 db                	xor    ebx,ebx
c0007ca9:	83 ec 40             	sub    esp,0x40
c0007cac:	6a 10                	push   0x10
c0007cae:	6a 00                	push   0x0
c0007cb0:	68 ec 2e 02 c0       	push   0xc0022eec
c0007cb5:	e8 16 88 ff ff       	call   c00004d0 <memset>
c0007cba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007cbe:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007cc3:	05 00 10 00 00       	add    eax,0x1000
c0007cc8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007ccc:	5a                   	pop    edx
c0007ccd:	59                   	pop    ecx
c0007cce:	50                   	push   eax
c0007ccf:	68 e7 df 01 c0       	push   0xc001dfe7
c0007cd4:	e8 35 29 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0007cd9:	83 c4 10             	add    esp,0x10
c0007cdc:	83 ec 08             	sub    esp,0x8
c0007cdf:	6a 01                	push   0x1
c0007ce1:	53                   	push   ebx
c0007ce2:	43                   	inc    ebx
c0007ce3:	e8 b4 fd ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007ce8:	83 c4 10             	add    esp,0x10
c0007ceb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007cf1:	75 e9                	jne    c0007cdc <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007cf3:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007cf9:	66 85 c0             	test   ax,ax
c0007cfc:	0f 84 97 01 00 00    	je     c0007e99 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007d02:	89 c7                	mov    edi,eax
c0007d04:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007d0c:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007d12:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007d17:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007d1b:	eb 15                	jmp    c0007d32 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007d1d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007d21:	83 c3 18             	add    ebx,0x18
c0007d24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d28:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007d2c:	0f 84 77 01 00 00    	je     c0007ea9 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d32:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007d35:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007d38:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007d3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007d3f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007d43:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007d45:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007d48:	01 f0                	add    eax,esi
c0007d4a:	55                   	push   ebp
c0007d4b:	11 fa                	adc    edx,edi
c0007d4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d51:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007d55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d59:	50                   	push   eax
c0007d5a:	56                   	push   esi
c0007d5b:	68 84 df 01 c0       	push   0xc001df84
c0007d60:	e8 a9 28 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0007d65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007d69:	83 c4 10             	add    esp,0x10
c0007d6c:	09 f8                	or     eax,edi
c0007d6e:	0f 85 35 01 00 00    	jne    c0007ea9 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d74:	4d                   	dec    ebp
c0007d75:	75 a6                	jne    c0007d1d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d77:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007d7b:	ba 00 00 08 00       	mov    edx,0x80000
c0007d80:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007d84:	39 f2                	cmp    edx,esi
c0007d86:	89 c1                	mov    ecx,eax
c0007d88:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007d90:	19 f9                	sbb    ecx,edi
c0007d92:	0f 82 a7 00 00 00    	jb     c0007e3f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007d98:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007d9c:	89 c1                	mov    ecx,eax
c0007d9e:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007da2:	0f 83 97 00 00 00    	jae    c0007e3f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007da8:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007dad:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007db1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007db5:	39 fa                	cmp    edx,edi
c0007db7:	19 e8                	sbb    eax,ebp
c0007db9:	0f 82 9a 01 00 00    	jb     c0007f59 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007dbf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dc3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007dc7:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007dcd:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007dd2:	83 d5 ff             	adc    ebp,0xffffffff
c0007dd5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007dd9:	31 c0                	xor    eax,eax
c0007ddb:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007ddf:	39 fa                	cmp    edx,edi
c0007de1:	89 c1                	mov    ecx,eax
c0007de3:	19 e9                	sbb    ecx,ebp
c0007de5:	0f 83 32 ff ff ff    	jae    c0007d1d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007deb:	be 00 00 08 00       	mov    esi,0x80000
c0007df0:	51                   	push   ecx
c0007df1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007df5:	57                   	push   edi
c0007df6:	56                   	push   esi
c0007df7:	68 a8 df 01 c0       	push   0xc001dfa8
c0007dfc:	e8 0d 28 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0007e01:	5d                   	pop    ebp
c0007e02:	58                   	pop    eax
c0007e03:	57                   	push   edi
c0007e04:	56                   	push   esi
c0007e05:	e8 61 fe ff ff       	call   c0007c6b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007e0a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007e0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e12:	83 c4 0c             	add    esp,0xc
c0007e15:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007e19:	03 05 e8 2e 02 c0    	add    eax,DWORD PTR ds:0xc0022ee8
c0007e1f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007e26:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c0007e2b:	52                   	push   edx
c0007e2c:	50                   	push   eax
c0007e2d:	68 0d e0 01 c0       	push   0xc001e00d
c0007e32:	e8 d7 27 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0007e37:	83 c4 10             	add    esp,0x10
c0007e3a:	e9 de fe ff ff       	jmp    c0007d1d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e3f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007e43:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e47:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007e4b:	39 ea                	cmp    edx,ebp
c0007e4d:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007e51:	0f 82 c6 fe ff ff    	jb     c0007d1d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e57:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007e5c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007e60:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007e64:	0f 83 b3 fe ff ff    	jae    c0007d1d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e6a:	39 ee                	cmp    esi,ebp
c0007e6c:	89 f8                	mov    eax,edi
c0007e6e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007e72:	0f 83 78 ff ff ff    	jae    c0007df0 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007e80:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007e84:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007e88:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007e8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007e94:	e9 57 ff ff ff       	jmp    c0007df0 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e99:	83 ec 0c             	sub    esp,0xc
c0007e9c:	68 ff df 01 c0       	push   0xc001dfff
c0007ea1:	e8 71 84 00 00       	call   c0010317 <KePanic(char const*)>
c0007ea6:	83 c4 10             	add    esp,0x10
c0007ea9:	83 ec 08             	sub    esp,0x8
c0007eac:	bb 60 00 00 00       	mov    ebx,0x60
c0007eb1:	6a 00                	push   0x0
c0007eb3:	6a 06                	push   0x6
c0007eb5:	e8 e2 fb ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007eba:	58                   	pop    eax
c0007ebb:	5a                   	pop    edx
c0007ebc:	6a 00                	push   0x0
c0007ebe:	6a 07                	push   0x7
c0007ec0:	e8 d7 fb ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007ec5:	83 05 e8 2e 02 c0 02 	add    DWORD PTR ds:0xc0022ee8,0x2
c0007ecc:	83 c4 10             	add    esp,0x10
c0007ecf:	83 ec 08             	sub    esp,0x8
c0007ed2:	6a 00                	push   0x0
c0007ed4:	53                   	push   ebx
c0007ed5:	43                   	inc    ebx
c0007ed6:	e8 c1 fb ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007edb:	83 c4 10             	add    esp,0x10
c0007ede:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007ee4:	75 e9                	jne    c0007ecf <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007ee6:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c0007eeb:	bb 40 01 00 00       	mov    ebx,0x140
c0007ef0:	83 c0 20             	add    eax,0x20
c0007ef3:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c0007ef8:	eb 22                	jmp    c0007f1c <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007efa:	83 ec 08             	sub    esp,0x8
c0007efd:	6a 00                	push   0x0
c0007eff:	53                   	push   ebx
c0007f00:	43                   	inc    ebx
c0007f01:	e8 96 fb ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007f06:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c0007f0b:	83 c4 10             	add    esp,0x10
c0007f0e:	40                   	inc    eax
c0007f0f:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007f15:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c0007f1a:	74 07                	je     c0007f23 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007f1c:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007f21:	7e d7                	jle    c0007efa <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007f23:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007f28:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007f2d:	7f 22                	jg     c0007f51 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007f2f:	83 ec 08             	sub    esp,0x8
c0007f32:	6a 00                	push   0x0
c0007f34:	53                   	push   ebx
c0007f35:	43                   	inc    ebx
c0007f36:	e8 61 fb ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007f3b:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c0007f40:	83 c4 10             	add    esp,0x10
c0007f43:	40                   	inc    eax
c0007f44:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007f4a:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c0007f4f:	75 d7                	jne    c0007f28 <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007f51:	83 c4 3c             	add    esp,0x3c
c0007f54:	5b                   	pop    ebx
c0007f55:	5e                   	pop    esi
c0007f56:	5f                   	pop    edi
c0007f57:	5d                   	pop    ebp
c0007f58:	c3                   	ret    
c0007f59:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007f61:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007f69:	e9 51 fe ff ff       	jmp    c0007dbf <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007f6e <Pipe::isAtty()>:
c0007f6e:	31 c0                	xor    eax,eax
c0007f70:	c3                   	ret    
c0007f71:	90                   	nop

c0007f72 <Pipe::~Pipe()>:
c0007f72:	83 ec 0c             	sub    esp,0xc
c0007f75:	ba 6c e0 01 c0       	mov    edx,0xc001e06c
c0007f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f7e:	89 10                	mov    DWORD PTR [eax],edx
c0007f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f84:	83 ec 0c             	sub    esp,0xc
c0007f87:	50                   	push   eax
c0007f88:	e8 63 11 00 00       	call   c00090f0 <UnixFile::~UnixFile()>
c0007f8d:	83 c4 10             	add    esp,0x10
c0007f90:	90                   	nop
c0007f91:	83 c4 0c             	add    esp,0xc
c0007f94:	c3                   	ret    
c0007f95:	90                   	nop

c0007f96 <Pipe::~Pipe()>:
c0007f96:	83 ec 0c             	sub    esp,0xc
c0007f99:	83 ec 0c             	sub    esp,0xc
c0007f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007fa0:	e8 cd ff ff ff       	call   c0007f72 <Pipe::~Pipe()>
c0007fa5:	83 c4 10             	add    esp,0x10
c0007fa8:	83 ec 08             	sub    esp,0x8
c0007fab:	6a 20                	push   0x20
c0007fad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007fb1:	e8 62 25 00 00       	call   c000a518 <operator delete(void*, unsigned long)>
c0007fb6:	83 c4 10             	add    esp,0x10
c0007fb9:	83 c4 0c             	add    esp,0xc
c0007fbc:	c3                   	ret    
c0007fbd:	90                   	nop

c0007fbe <Pipe::write(unsigned long long, void*, int*)>:
c0007fbe:	55                   	push   ebp
c0007fbf:	57                   	push   edi
c0007fc0:	56                   	push   esi
c0007fc1:	53                   	push   ebx
c0007fc2:	83 ec 1c             	sub    esp,0x1c
c0007fc5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007fc9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007fcd:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007fd0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007fd4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007fd7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007fdb:	89 d8                	mov    eax,ebx
c0007fdd:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007fe0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fe4:	89 d6                	mov    esi,edx
c0007fe6:	89 d7                	mov    edi,edx
c0007fe8:	c1 ff 1f             	sar    edi,0x1f
c0007feb:	03 34 24             	add    esi,DWORD PTR [esp]
c0007fee:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007ff2:	c1 f8 1f             	sar    eax,0x1f
c0007ff5:	39 f3                	cmp    ebx,esi
c0007ff7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ffb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007fff:	19 f8                	sbb    eax,edi
c0008001:	b8 01 00 00 00       	mov    eax,0x1
c0008006:	72 6e                	jb     c0008076 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0008008:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000800b:	01 d0                	add    eax,edx
c000800d:	99                   	cdq    
c000800e:	f7 fb                	idiv   ebx
c0008010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008014:	29 d3                	sub    ebx,edx
c0008016:	89 d7                	mov    edi,edx
c0008018:	89 de                	mov    esi,ebx
c000801a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000801d:	c1 fb 1f             	sar    ebx,0x1f
c0008020:	39 f2                	cmp    edx,esi
c0008022:	19 d8                	sbb    eax,ebx
c0008024:	b8 00 00 00 00       	mov    eax,0x0
c0008029:	72 04                	jb     c000802f <Pipe::write(unsigned long long, void*, int*)+0x71>
c000802b:	89 d0                	mov    eax,edx
c000802d:	29 f0                	sub    eax,esi
c000802f:	89 d3                	mov    ebx,edx
c0008031:	29 c3                	sub    ebx,eax
c0008033:	74 0b                	je     c0008040 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0008035:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008038:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000803c:	89 d9                	mov    ecx,ebx
c000803e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008040:	85 c0                	test   eax,eax
c0008042:	74 0d                	je     c0008051 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0008044:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008048:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000804b:	89 de                	mov    esi,ebx
c000804d:	89 c1                	mov    ecx,eax
c000804f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008051:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008054:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008059:	75 10                	jne    c000806b <Pipe::write(unsigned long long, void*, int*)+0xad>
c000805b:	83 ec 0c             	sub    esp,0xc
c000805e:	68 29 e0 01 c0       	push   0xc001e029
c0008063:	e8 af 82 00 00       	call   c0010317 <KePanic(char const*)>
c0008068:	83 c4 10             	add    esp,0x10
c000806b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000806f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008072:	89 08                	mov    DWORD PTR [eax],ecx
c0008074:	31 c0                	xor    eax,eax
c0008076:	83 c4 1c             	add    esp,0x1c
c0008079:	5b                   	pop    ebx
c000807a:	5e                   	pop    esi
c000807b:	5f                   	pop    edi
c000807c:	5d                   	pop    ebp
c000807d:	c3                   	ret    

c000807e <Pipe::read(unsigned long long, void*, int*)>:
c000807e:	55                   	push   ebp
c000807f:	57                   	push   edi
c0008080:	56                   	push   esi
c0008081:	53                   	push   ebx
c0008082:	83 ec 1c             	sub    esp,0x1c
c0008085:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008089:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000808d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008091:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008094:	89 c8                	mov    eax,ecx
c0008096:	99                   	cdq    
c0008097:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000809b:	74 24                	je     c00080c1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000809d:	39 f9                	cmp    ecx,edi
c000809f:	89 d1                	mov    ecx,edx
c00080a1:	19 f1                	sbb    ecx,esi
c00080a3:	73 1c                	jae    c00080c1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c00080a5:	fa                   	cli    
c00080a6:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00080ac:	e8 83 b7 00 00       	call   c0013834 <schedule()>
c00080b1:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00080b6:	48                   	dec    eax
c00080b7:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00080bc:	75 d3                	jne    c0008091 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080be:	fb                   	sti    
c00080bf:	eb d0                	jmp    c0008091 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080c1:	39 f8                	cmp    eax,edi
c00080c3:	89 d1                	mov    ecx,edx
c00080c5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00080c8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00080cc:	19 f1                	sbb    ecx,esi
c00080ce:	73 07                	jae    c00080d7 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00080d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00080d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00080d7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00080da:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00080dd:	29 f7                	sub    edi,esi
c00080df:	89 f8                	mov    eax,edi
c00080e1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00080e5:	99                   	cdq    
c00080e6:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00080e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00080ed:	19 d0                	sbb    eax,edx
c00080ef:	73 07                	jae    c00080f8 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00080f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080f8:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00080fb:	89 ea                	mov    edx,ebp
c00080fd:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008101:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0008106:	74 0d                	je     c0008115 <Pipe::read(unsigned long long, void*, int*)+0x97>
c0008108:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000810b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000810f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008113:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008115:	85 d2                	test   edx,edx
c0008117:	74 11                	je     c000812a <Pipe::read(unsigned long long, void*, int*)+0xac>
c0008119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000811d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008120:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008124:	89 d1                	mov    ecx,edx
c0008126:	89 c7                	mov    edi,eax
c0008128:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000812a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000812d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008130:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008133:	99                   	cdq    
c0008134:	89 f7                	mov    edi,esi
c0008136:	03 04 24             	add    eax,DWORD PTR [esp]
c0008139:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000813d:	c1 ff 1f             	sar    edi,0x1f
c0008140:	57                   	push   edi
c0008141:	56                   	push   esi
c0008142:	52                   	push   edx
c0008143:	50                   	push   eax
c0008144:	e8 27 49 01 00       	call   c001ca70 <__umoddi3>
c0008149:	83 c4 10             	add    esp,0x10
c000814c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000814f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008154:	75 10                	jne    c0008166 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008156:	83 ec 0c             	sub    esp,0xc
c0008159:	68 46 e0 01 c0       	push   0xc001e046
c000815e:	e8 b4 81 00 00       	call   c0010317 <KePanic(char const*)>
c0008163:	83 c4 10             	add    esp,0x10
c0008166:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000816a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000816d:	89 10                	mov    DWORD PTR [eax],edx
c000816f:	83 c4 1c             	add    esp,0x1c
c0008172:	31 c0                	xor    eax,eax
c0008174:	5b                   	pop    ebx
c0008175:	5e                   	pop    esi
c0008176:	5f                   	pop    edi
c0008177:	5d                   	pop    ebp
c0008178:	c3                   	ret    
c0008179:	90                   	nop

c000817a <Pipe::Pipe(int)>:
c000817a:	83 ec 0c             	sub    esp,0xc
c000817d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008181:	83 ec 08             	sub    esp,0x8
c0008184:	6a 00                	push   0x0
c0008186:	50                   	push   eax
c0008187:	e8 82 0d 00 00       	call   c0008f0e <UnixFile::UnixFile(int)>
c000818c:	83 c4 10             	add    esp,0x10
c000818f:	ba 6c e0 01 c0       	mov    edx,0xc001e06c
c0008194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008198:	89 10                	mov    DWORD PTR [eax],edx
c000819a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000819e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00081a2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00081a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081a9:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00081b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081b4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00081bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00081bf:	83 ec 0c             	sub    esp,0xc
c00081c2:	50                   	push   eax
c00081c3:	e8 ad f6 ff ff       	call   c0007875 <malloc>
c00081c8:	83 c4 10             	add    esp,0x10
c00081cb:	89 c2                	mov    edx,eax
c00081cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00081d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081d8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00081dc:	90                   	nop
c00081dd:	83 c4 0c             	add    esp,0xc
c00081e0:	c3                   	ret    
c00081e1:	90                   	nop

c00081e2 <VgaText::isAtty()>:
c00081e2:	b0 01                	mov    al,0x1
c00081e4:	c3                   	ret    
c00081e5:	90                   	nop

c00081e6 <VgaText::~VgaText()>:
c00081e6:	83 ec 0c             	sub    esp,0xc
c00081e9:	ba b4 e0 01 c0       	mov    edx,0xc001e0b4
c00081ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081f2:	89 10                	mov    DWORD PTR [eax],edx
c00081f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081f8:	83 ec 0c             	sub    esp,0xc
c00081fb:	50                   	push   eax
c00081fc:	e8 ef 0e 00 00       	call   c00090f0 <UnixFile::~UnixFile()>
c0008201:	83 c4 10             	add    esp,0x10
c0008204:	90                   	nop
c0008205:	83 c4 0c             	add    esp,0xc
c0008208:	c3                   	ret    
c0008209:	90                   	nop

c000820a <VgaText::~VgaText()>:
c000820a:	83 ec 0c             	sub    esp,0xc
c000820d:	83 ec 0c             	sub    esp,0xc
c0008210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008214:	e8 cd ff ff ff       	call   c00081e6 <VgaText::~VgaText()>
c0008219:	83 c4 10             	add    esp,0x10
c000821c:	83 ec 08             	sub    esp,0x8
c000821f:	68 84 01 00 00       	push   0x184
c0008224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008228:	e8 eb 22 00 00       	call   c000a518 <operator delete(void*, unsigned long)>
c000822d:	83 c4 10             	add    esp,0x10
c0008230:	83 c4 0c             	add    esp,0xc
c0008233:	c3                   	ret    

c0008234 <VgaText::read(unsigned long long, void*, int*)>:
c0008234:	83 ec 10             	sub    esp,0x10
c0008237:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000823b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000823f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008243:	e8 24 46 00 00       	call   c000c86c <readKeyboard(VgaText*, char*, unsigned long)>
c0008248:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000824c:	89 02                	mov    DWORD PTR [edx],eax
c000824e:	31 c0                	xor    eax,eax
c0008250:	83 c4 1c             	add    esp,0x1c
c0008253:	c3                   	ret    

c0008254 <setTerminalScrollLock(bool)>:
c0008254:	c3                   	ret    

c0008255 <doTerminalCycle()>:
c0008255:	c3                   	ret    

c0008256 <addToTerminalCycle(VgaText*)>:
c0008256:	c3                   	ret    

c0008257 <scrollTerminalScrollLock(int)>:
c0008257:	c3                   	ret    

c0008258 <VgaText::updateTitle()>:
c0008258:	c3                   	ret    
c0008259:	90                   	nop

c000825a <VgaText::load()>:
c000825a:	c3                   	ret    
c000825b:	90                   	nop

c000825c <VgaText::updateCursor()>:
c000825c:	83 ec 14             	sub    esp,0x14
c000825f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008263:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008266:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008269:	e8 a2 e1 00 00       	call   c0016410 <HalConsoleCursorUpdate(int, int)>
c000826e:	83 c4 1c             	add    esp,0x1c
c0008271:	c3                   	ret    

c0008272 <VgaText::doANSI_SGR(int)>:
c0008272:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	85 d2                	test   edx,edx
c000827c:	75 0b                	jne    c0008289 <VgaText::doANSI_SGR(int)+0x17>
c000827e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008281:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008284:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008287:	eb 59                	jmp    c00082e2 <VgaText::doANSI_SGR(int)+0x70>
c0008289:	83 fa 07             	cmp    edx,0x7
c000828c:	75 0b                	jne    c0008299 <VgaText::doANSI_SGR(int)+0x27>
c000828e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008291:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008294:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008297:	eb 49                	jmp    c00082e2 <VgaText::doANSI_SGR(int)+0x70>
c0008299:	83 fa 1b             	cmp    edx,0x1b
c000829c:	74 e0                	je     c000827e <VgaText::doANSI_SGR(int)+0xc>
c000829e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00082a1:	83 f9 07             	cmp    ecx,0x7
c00082a4:	77 09                	ja     c00082af <VgaText::doANSI_SGR(int)+0x3d>
c00082a6:	8b 14 8d c0 ff 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0040]
c00082ad:	eb 20                	jmp    c00082cf <VgaText::doANSI_SGR(int)+0x5d>
c00082af:	8d 4a d8             	lea    ecx,[edx-0x28]
c00082b2:	83 f9 07             	cmp    ecx,0x7
c00082b5:	77 09                	ja     c00082c0 <VgaText::doANSI_SGR(int)+0x4e>
c00082b7:	8b 14 8d c0 ff 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0040]
c00082be:	eb 22                	jmp    c00082e2 <VgaText::doANSI_SGR(int)+0x70>
c00082c0:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00082c3:	83 f9 07             	cmp    ecx,0x7
c00082c6:	77 0b                	ja     c00082d3 <VgaText::doANSI_SGR(int)+0x61>
c00082c8:	8b 14 95 78 fe 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0188]
c00082cf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00082d2:	c3                   	ret    
c00082d3:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00082d6:	83 f9 07             	cmp    ecx,0x7
c00082d9:	77 0a                	ja     c00082e5 <VgaText::doANSI_SGR(int)+0x73>
c00082db:	8b 14 95 50 fe 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe01b0]
c00082e2:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00082e5:	c3                   	ret    

c00082e6 <VgaText::setDefaultBgColour(VgaColour)>:
c00082e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082ee:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00082f1:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00082f4:	c3                   	ret    
c00082f5:	90                   	nop

c00082f6 <VgaText::setDefaultFgColour(VgaColour)>:
c00082f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082fe:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008301:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008304:	c3                   	ret    
c0008305:	90                   	nop

c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0008306:	53                   	push   ebx
c0008307:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000830b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000830f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008313:	51                   	push   ecx
c0008314:	e8 cd ff ff ff       	call   c00082e6 <VgaText::setDefaultBgColour(VgaColour)>
c0008319:	58                   	pop    eax
c000831a:	5a                   	pop    edx
c000831b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000831f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008323:	5b                   	pop    ebx
c0008324:	eb d0                	jmp    c00082f6 <VgaText::setDefaultFgColour(VgaColour)>

c0008326 <VgaText::setTitleTextColour(VgaColour)>:
c0008326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000832a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000832e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008331:	c3                   	ret    

c0008332 <VgaText::setTitleColour(VgaColour)>:
c0008332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008336:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000833a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000833d:	c3                   	ret    

c000833e <VgaText::setTitle(char*)>:
c000833e:	c3                   	ret    
c000833f:	90                   	nop

c0008340 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008340:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008344:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008349:	83 e0 0f             	and    eax,0xf
c000834c:	c1 e2 04             	shl    edx,0x4
c000834f:	09 d0                	or     eax,edx
c0008351:	c3                   	ret    

c0008352 <VgaText::scrollScreen()>:
c0008352:	55                   	push   ebp
c0008353:	b9 01 00 00 00       	mov    ecx,0x1
c0008358:	57                   	push   edi
c0008359:	56                   	push   esi
c000835a:	53                   	push   ebx
c000835b:	83 ec 0c             	sub    esp,0xc
c000835e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008362:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0008368:	31 ff                	xor    edi,edi
c000836a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000836d:	83 f9 18             	cmp    ecx,0x18
c0008370:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0008373:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000837a:	75 27                	jne    c00083a3 <VgaText::scrollScreen()+0x51>
c000837c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000837f:	01 f5                	add    ebp,esi
c0008381:	f7 c7 01 00 00 00    	test   edi,0x1
c0008387:	74 16                	je     c000839f <VgaText::scrollScreen()+0x4d>
c0008389:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000838d:	50                   	push   eax
c000838e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008392:	50                   	push   eax
c0008393:	e8 a8 ff ff ff       	call   c0008340 <VgaText::combineColours(unsigned char, unsigned char)>
c0008398:	5a                   	pop    edx
c0008399:	5a                   	pop    edx
c000839a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000839d:	eb 04                	jmp    c00083a3 <VgaText::scrollScreen()+0x51>
c000839f:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00083a3:	47                   	inc    edi
c00083a4:	46                   	inc    esi
c00083a5:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00083ab:	75 bd                	jne    c000836a <VgaText::scrollScreen()+0x18>
c00083ad:	41                   	inc    ecx
c00083ae:	83 f9 19             	cmp    ecx,0x19
c00083b1:	75 af                	jne    c0008362 <VgaText::scrollScreen()+0x10>
c00083b3:	39 1d 04 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f04,ebx
c00083b9:	75 1f                	jne    c00083da <VgaText::scrollScreen()+0x88>
c00083bb:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00083bf:	74 05                	je     c00083c6 <VgaText::scrollScreen()+0x74>
c00083c1:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00083c4:	eb 14                	jmp    c00083da <VgaText::scrollScreen()+0x88>
c00083c6:	50                   	push   eax
c00083c7:	50                   	push   eax
c00083c8:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00083cc:	50                   	push   eax
c00083cd:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00083d1:	50                   	push   eax
c00083d2:	e8 c5 de 00 00       	call   c001629c <HalConsoleScroll(int, int)>
c00083d7:	83 c4 10             	add    esp,0x10
c00083da:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00083de:	83 c4 0c             	add    esp,0xc
c00083e1:	5b                   	pop    ebx
c00083e2:	5e                   	pop    esi
c00083e3:	5f                   	pop    edi
c00083e4:	5d                   	pop    ebp
c00083e5:	e9 72 fe ff ff       	jmp    c000825c <VgaText::updateCursor()>

c00083ea <VgaText::combineCharAndColour(char, unsigned char)>:
c00083ea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00083ef:	c1 e0 08             	shl    eax,0x8
c00083f2:	89 c2                	mov    edx,eax
c00083f4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00083f9:	09 d0                	or     eax,edx
c00083fb:	c3                   	ret    

c00083fc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00083fc:	55                   	push   ebp
c00083fd:	57                   	push   edi
c00083fe:	56                   	push   esi
c00083ff:	53                   	push   ebx
c0008400:	83 ec 1c             	sub    esp,0x1c
c0008403:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008407:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000840b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000840f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008413:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008417:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000841b:	0f b6 c3             	movzx  eax,bl
c000841e:	50                   	push   eax
c000841f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008424:	50                   	push   eax
c0008425:	e8 16 ff ff ff       	call   c0008340 <VgaText::combineColours(unsigned char, unsigned char)>
c000842a:	5a                   	pop    edx
c000842b:	0f b6 c0             	movzx  eax,al
c000842e:	59                   	pop    ecx
c000842f:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008434:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008438:	50                   	push   eax
c0008439:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000843d:	e8 a8 ff ff ff       	call   c00083ea <VgaText::combineCharAndColour(char, unsigned char)>
c0008442:	5a                   	pop    edx
c0008443:	66 6b d7 50          	imul   dx,di,0x50
c0008447:	59                   	pop    ecx
c0008448:	01 f2                	add    edx,esi
c000844a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000844d:	0f b7 d2             	movzx  edx,dx
c0008450:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008454:	39 2d 04 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f04,ebp
c000845a:	75 28                	jne    c0008484 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c000845c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008460:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008464:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008468:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c000846c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008474:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008478:	83 c4 1c             	add    esp,0x1c
c000847b:	5b                   	pop    ebx
c000847c:	5e                   	pop    esi
c000847d:	5f                   	pop    edi
c000847e:	5d                   	pop    ebp
c000847f:	e9 20 df 00 00       	jmp    c00163a4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008484:	83 c4 1c             	add    esp,0x1c
c0008487:	5b                   	pop    ebx
c0008488:	5e                   	pop    esi
c0008489:	5f                   	pop    edi
c000848a:	5d                   	pop    ebp
c000848b:	c3                   	ret    

c000848c <VgaText::getCursorX()>:
c000848c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008490:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008493:	c3                   	ret    

c0008494 <VgaText::getCursorY()>:
c0008494:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008498:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000849b:	c3                   	ret    

c000849c <VgaText::setCursor(int, int)>:
c000849c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00084a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00084a4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00084a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00084ab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00084ae:	e9 a9 fd ff ff       	jmp    c000825c <VgaText::updateCursor()>

c00084b3 <setActiveTerminal(VgaText*)>:
c00084b3:	53                   	push   ebx
c00084b4:	83 ec 08             	sub    esp,0x8
c00084b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084bb:	85 db                	test   ebx,ebx
c00084bd:	75 11                	jne    c00084d0 <setActiveTerminal(VgaText*)+0x1d>
c00084bf:	c7 44 24 10 80 e0 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e080
c00084c7:	83 c4 08             	add    esp,0x8
c00084ca:	5b                   	pop    ebx
c00084cb:	e9 47 7e 00 00       	jmp    c0010317 <KePanic(char const*)>
c00084d0:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c00084d5:	85 c0                	test   eax,eax
c00084d7:	74 0c                	je     c00084e5 <setActiveTerminal(VgaText*)+0x32>
c00084d9:	83 ec 0c             	sub    esp,0xc
c00084dc:	50                   	push   eax
c00084dd:	e8 7a fd ff ff       	call   c000825c <VgaText::updateCursor()>
c00084e2:	83 c4 10             	add    esp,0x10
c00084e5:	89 1d 04 2f 02 c0    	mov    DWORD PTR ds:0xc0022f04,ebx
c00084eb:	50                   	push   eax
c00084ec:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00084ef:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00084f2:	53                   	push   ebx
c00084f3:	e8 a4 ff ff ff       	call   c000849c <VgaText::setCursor(int, int)>
c00084f8:	83 c4 18             	add    esp,0x18
c00084fb:	5b                   	pop    ebx
c00084fc:	c3                   	ret    
c00084fd:	90                   	nop

c00084fe <VgaText::clearScreen()>:
c00084fe:	57                   	push   edi
c00084ff:	56                   	push   esi
c0008500:	31 f6                	xor    esi,esi
c0008502:	53                   	push   ebx
c0008503:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008507:	52                   	push   edx
c0008508:	6a 00                	push   0x0
c000850a:	6a 00                	push   0x0
c000850c:	53                   	push   ebx
c000850d:	e8 8a ff ff ff       	call   c000849c <VgaText::setCursor(int, int)>
c0008512:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008519:	83 c4 10             	add    esp,0x10
c000851c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000851f:	7e 20                	jle    c0008541 <VgaText::clearScreen()+0x43>
c0008521:	31 ff                	xor    edi,edi
c0008523:	50                   	push   eax
c0008524:	50                   	push   eax
c0008525:	56                   	push   esi
c0008526:	57                   	push   edi
c0008527:	47                   	inc    edi
c0008528:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000852b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000852e:	6a 20                	push   0x20
c0008530:	53                   	push   ebx
c0008531:	e8 c6 fe ff ff       	call   c00083fc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008536:	83 c4 20             	add    esp,0x20
c0008539:	83 ff 50             	cmp    edi,0x50
c000853c:	75 e5                	jne    c0008523 <VgaText::clearScreen()+0x25>
c000853e:	46                   	inc    esi
c000853f:	eb db                	jmp    c000851c <VgaText::clearScreen()+0x1e>
c0008541:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008548:	5b                   	pop    ebx
c0008549:	5e                   	pop    esi
c000854a:	5f                   	pop    edi
c000854b:	c3                   	ret    

c000854c <VgaText::setCursorX(int)>:
c000854c:	83 ec 10             	sub    esp,0x10
c000854f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008553:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000855a:	50                   	push   eax
c000855b:	e8 3c ff ff ff       	call   c000849c <VgaText::setCursor(int, int)>
c0008560:	83 c4 1c             	add    esp,0x1c
c0008563:	c3                   	ret    

c0008564 <VgaText::setCursorY(int)>:
c0008564:	83 ec 10             	sub    esp,0x10
c0008567:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000856b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000856f:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008572:	50                   	push   eax
c0008573:	e8 24 ff ff ff       	call   c000849c <VgaText::setCursor(int, int)>
c0008578:	83 c4 1c             	add    esp,0x1c
c000857b:	c3                   	ret    

c000857c <VgaText::incrementCursor(bool)>:
c000857c:	56                   	push   esi
c000857d:	53                   	push   ebx
c000857e:	51                   	push   ecx
c000857f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008583:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008587:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000858a:	40                   	inc    eax
c000858b:	83 f8 50             	cmp    eax,0x50
c000858e:	74 05                	je     c0008595 <VgaText::incrementCursor(bool)+0x19>
c0008590:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008593:	eb 24                	jmp    c00085b9 <VgaText::incrementCursor(bool)+0x3d>
c0008595:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008598:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000859f:	8d 50 01             	lea    edx,[eax+0x1]
c00085a2:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00085a5:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00085a8:	75 0f                	jne    c00085b9 <VgaText::incrementCursor(bool)+0x3d>
c00085aa:	83 ec 0c             	sub    esp,0xc
c00085ad:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00085b0:	53                   	push   ebx
c00085b1:	e8 9c fd ff ff       	call   c0008352 <VgaText::scrollScreen()>
c00085b6:	83 c4 10             	add    esp,0x10
c00085b9:	89 f0                	mov    eax,esi
c00085bb:	84 c0                	test   al,al
c00085bd:	74 0c                	je     c00085cb <VgaText::incrementCursor(bool)+0x4f>
c00085bf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085c3:	5a                   	pop    edx
c00085c4:	5b                   	pop    ebx
c00085c5:	5e                   	pop    esi
c00085c6:	e9 91 fc ff ff       	jmp    c000825c <VgaText::updateCursor()>
c00085cb:	58                   	pop    eax
c00085cc:	5b                   	pop    ebx
c00085cd:	5e                   	pop    esi
c00085ce:	c3                   	ret    
c00085cf:	90                   	nop

c00085d0 <VgaText::decrementCursor(bool)>:
c00085d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00085d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085d8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00085db:	85 c0                	test   eax,eax
c00085dd:	74 04                	je     c00085e3 <VgaText::decrementCursor(bool)+0x13>
c00085df:	48                   	dec    eax
c00085e0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00085e3:	84 c9                	test   cl,cl
c00085e5:	74 09                	je     c00085f0 <VgaText::decrementCursor(bool)+0x20>
c00085e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00085eb:	e9 6c fc ff ff       	jmp    c000825c <VgaText::updateCursor()>
c00085f0:	c3                   	ret    
c00085f1:	90                   	nop

c00085f2 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00085f2:	53                   	push   ebx
c00085f3:	83 ec 08             	sub    esp,0x8
c00085f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008602:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008606:	3c 07                	cmp    al,0x7
c0008608:	75 21                	jne    c000862b <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000860a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008612:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000861a:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008622:	83 c4 08             	add    esp,0x8
c0008625:	5b                   	pop    ebx
c0008626:	e9 38 2e 00 00       	jmp    c000b463 <Krnl::beep(int, int, bool)>
c000862b:	3c 0d                	cmp    al,0xd
c000862d:	75 09                	jne    c0008638 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c000862f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008636:	eb 2c                	jmp    c0008664 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008638:	3c 0a                	cmp    al,0xa
c000863a:	75 31                	jne    c000866d <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000863c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000863f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008646:	8d 50 01             	lea    edx,[eax+0x1]
c0008649:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000864c:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000864f:	75 0f                	jne    c0008660 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008651:	83 ec 0c             	sub    esp,0xc
c0008654:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008657:	53                   	push   ebx
c0008658:	e8 f5 fc ff ff       	call   c0008352 <VgaText::scrollScreen()>
c000865d:	83 c4 10             	add    esp,0x10
c0008660:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008664:	83 c4 08             	add    esp,0x8
c0008667:	5b                   	pop    ebx
c0008668:	e9 ef fb ff ff       	jmp    c000825c <VgaText::updateCursor()>
c000866d:	3c 08                	cmp    al,0x8
c000866f:	75 25                	jne    c0008696 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0008671:	50                   	push   eax
c0008672:	50                   	push   eax
c0008673:	6a 01                	push   0x1
c0008675:	53                   	push   ebx
c0008676:	e8 55 ff ff ff       	call   c00085d0 <VgaText::decrementCursor(bool)>
c000867b:	5a                   	pop    edx
c000867c:	59                   	pop    ecx
c000867d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008680:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008683:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008686:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008689:	6a 20                	push   0x20
c000868b:	53                   	push   ebx
c000868c:	e8 6b fd ff ff       	call   c00083fc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008691:	83 c4 28             	add    esp,0x28
c0008694:	5b                   	pop    ebx
c0008695:	c3                   	ret    
c0008696:	83 ec 08             	sub    esp,0x8
c0008699:	0f be c0             	movsx  eax,al
c000869c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000869f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00086a2:	51                   	push   ecx
c00086a3:	52                   	push   edx
c00086a4:	50                   	push   eax
c00086a5:	53                   	push   ebx
c00086a6:	e8 51 fd ff ff       	call   c00083fc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00086ab:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00086af:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00086b7:	83 c4 28             	add    esp,0x28
c00086ba:	5b                   	pop    ebx
c00086bb:	e9 bc fe ff ff       	jmp    c000857c <VgaText::incrementCursor(bool)>

c00086c0 <VgaText::putchar(char)>:
c00086c0:	56                   	push   esi
c00086c1:	53                   	push   ebx
c00086c2:	83 ec 14             	sub    esp,0x14
c00086c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00086c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00086cd:	3c 5b                	cmp    al,0x5b
c00086cf:	75 18                	jne    c00086e9 <VgaText::putchar(char)+0x29>
c00086d1:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00086d5:	74 1f                	je     c00086f6 <VgaText::putchar(char)+0x36>
c00086d7:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00086dd:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00086e4:	e9 bd 00 00 00       	jmp    c00087a6 <VgaText::putchar(char)+0xe6>
c00086e9:	3c 1b                	cmp    al,0x1b
c00086eb:	75 09                	jne    c00086f6 <VgaText::putchar(char)+0x36>
c00086ed:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00086f1:	e9 b0 00 00 00       	jmp    c00087a6 <VgaText::putchar(char)+0xe6>
c00086f6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00086f9:	84 c9                	test   cl,cl
c00086fb:	0f 84 92 00 00 00    	je     c0008793 <VgaText::putchar(char)+0xd3>
c0008701:	8d 50 c0             	lea    edx,[eax-0x40]
c0008704:	80 fa 3e             	cmp    dl,0x3e
c0008707:	77 76                	ja     c000877f <VgaText::putchar(char)+0xbf>
c0008709:	3c 6d                	cmp    al,0x6d
c000870b:	75 47                	jne    c0008754 <VgaText::putchar(char)+0x94>
c000870d:	31 f6                	xor    esi,esi
c000870f:	31 d2                	xor    edx,edx
c0008711:	31 c0                	xor    eax,eax
c0008713:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008716:	7e 2d                	jle    c0008745 <VgaText::putchar(char)+0x85>
c0008718:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000871d:	80 fa 3b             	cmp    dl,0x3b
c0008720:	75 17                	jne    c0008739 <VgaText::putchar(char)+0x79>
c0008722:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008726:	50                   	push   eax
c0008727:	53                   	push   ebx
c0008728:	e8 45 fb ff ff       	call   c0008272 <VgaText::doANSI_SGR(int)>
c000872d:	59                   	pop    ecx
c000872e:	31 d2                	xor    edx,edx
c0008730:	58                   	pop    eax
c0008731:	31 c0                	xor    eax,eax
c0008733:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008737:	eb 09                	jmp    c0008742 <VgaText::putchar(char)+0x82>
c0008739:	6b c0 0a             	imul   eax,eax,0xa
c000873c:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008740:	88 ca                	mov    dl,cl
c0008742:	46                   	inc    esi
c0008743:	eb ce                	jmp    c0008713 <VgaText::putchar(char)+0x53>
c0008745:	84 d2                	test   dl,dl
c0008747:	74 2e                	je     c0008777 <VgaText::putchar(char)+0xb7>
c0008749:	50                   	push   eax
c000874a:	53                   	push   ebx
c000874b:	e8 22 fb ff ff       	call   c0008272 <VgaText::doANSI_SGR(int)>
c0008750:	58                   	pop    eax
c0008751:	5a                   	pop    edx
c0008752:	eb 23                	jmp    c0008777 <VgaText::putchar(char)+0xb7>
c0008754:	3c 4a                	cmp    al,0x4a
c0008756:	75 1f                	jne    c0008777 <VgaText::putchar(char)+0xb7>
c0008758:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000875c:	75 19                	jne    c0008777 <VgaText::putchar(char)+0xb7>
c000875e:	83 ec 0c             	sub    esp,0xc
c0008761:	53                   	push   ebx
c0008762:	e8 97 fd ff ff       	call   c00084fe <VgaText::clearScreen()>
c0008767:	83 c4 0c             	add    esp,0xc
c000876a:	6a 00                	push   0x0
c000876c:	6a 00                	push   0x0
c000876e:	53                   	push   ebx
c000876f:	e8 28 fd ff ff       	call   c000849c <VgaText::setCursor(int, int)>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000877d:	eb 27                	jmp    c00087a6 <VgaText::putchar(char)+0xe6>
c000877f:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008782:	83 fa 0e             	cmp    edx,0xe
c0008785:	7f 1f                	jg     c00087a6 <VgaText::putchar(char)+0xe6>
c0008787:	8d 4a 01             	lea    ecx,[edx+0x1]
c000878a:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000878d:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008791:	eb 13                	jmp    c00087a6 <VgaText::putchar(char)+0xe6>
c0008793:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008796:	0f be c0             	movsx  eax,al
c0008799:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000879c:	50                   	push   eax
c000879d:	53                   	push   ebx
c000879e:	e8 4f fe ff ff       	call   c00085f2 <VgaText::putchar(char, VgaColour, VgaColour)>
c00087a3:	83 c4 10             	add    esp,0x10
c00087a6:	83 c4 14             	add    esp,0x14
c00087a9:	5b                   	pop    ebx
c00087aa:	5e                   	pop    esi
c00087ab:	c3                   	ret    

c00087ac <VgaText::putx(unsigned int)>:
c00087ac:	57                   	push   edi
c00087ad:	b9 11 00 00 00       	mov    ecx,0x11
c00087b2:	56                   	push   esi
c00087b3:	be 8e e0 01 c0       	mov    esi,0xc001e08e
c00087b8:	53                   	push   ebx
c00087b9:	83 ec 20             	sub    esp,0x20
c00087bc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087c0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00087c4:	fc                   	cld    
c00087c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087c7:	be 08 00 00 00       	mov    esi,0x8
c00087cc:	50                   	push   eax
c00087cd:	50                   	push   eax
c00087ce:	89 d8                	mov    eax,ebx
c00087d0:	c1 e3 04             	shl    ebx,0x4
c00087d3:	c1 e8 1c             	shr    eax,0x1c
c00087d6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00087db:	50                   	push   eax
c00087dc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00087e0:	e8 db fe ff ff       	call   c00086c0 <VgaText::putchar(char)>
c00087e5:	83 c4 10             	add    esp,0x10
c00087e8:	4e                   	dec    esi
c00087e9:	75 e1                	jne    c00087cc <VgaText::putx(unsigned int)+0x20>
c00087eb:	83 c4 20             	add    esp,0x20
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::puts(char const*)>:
c00087f2:	53                   	push   ebx
c00087f3:	83 ec 08             	sub    esp,0x8
c00087f6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00087fa:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00087fd:	84 c0                	test   al,al
c00087ff:	74 12                	je     c0008813 <VgaText::puts(char const*)+0x21>
c0008801:	43                   	inc    ebx
c0008802:	51                   	push   ecx
c0008803:	51                   	push   ecx
c0008804:	50                   	push   eax
c0008805:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008809:	e8 b2 fe ff ff       	call   c00086c0 <VgaText::putchar(char)>
c000880e:	83 c4 10             	add    esp,0x10
c0008811:	eb e7                	jmp    c00087fa <VgaText::puts(char const*)+0x8>
c0008813:	83 c4 08             	add    esp,0x8
c0008816:	5b                   	pop    ebx
c0008817:	c3                   	ret    

c0008818 <VgaText::write(unsigned long long, void*, int*)>:
c0008818:	55                   	push   ebp
c0008819:	57                   	push   edi
c000881a:	56                   	push   esi
c000881b:	53                   	push   ebx
c000881c:	83 ec 0c             	sub    esp,0xc
c000881f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008823:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008827:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000882b:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008832:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008835:	39 eb                	cmp    ebx,ebp
c0008837:	74 13                	je     c000884c <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008839:	43                   	inc    ebx
c000883a:	50                   	push   eax
c000883b:	50                   	push   eax
c000883c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008840:	50                   	push   eax
c0008841:	56                   	push   esi
c0008842:	e8 79 fe ff ff       	call   c00086c0 <VgaText::putchar(char)>
c0008847:	83 c4 10             	add    esp,0x10
c000884a:	eb e9                	jmp    c0008835 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000884c:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008853:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008857:	89 38                	mov    DWORD PTR [eax],edi
c0008859:	83 c4 0c             	add    esp,0xc
c000885c:	31 c0                	xor    eax,eax
c000885e:	5b                   	pop    ebx
c000885f:	5e                   	pop    esi
c0008860:	5f                   	pop    edi
c0008861:	5d                   	pop    ebp
c0008862:	c3                   	ret    
c0008863:	90                   	nop

c0008864 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008864:	55                   	push   ebp
c0008865:	57                   	push   edi
c0008866:	56                   	push   esi
c0008867:	53                   	push   ebx
c0008868:	83 ec 0c             	sub    esp,0xc
c000886b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000886f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008874:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000887b:	50                   	push   eax
c000887c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008881:	50                   	push   eax
c0008882:	e8 b9 fa ff ff       	call   c0008340 <VgaText::combineColours(unsigned char, unsigned char)>
c0008887:	5a                   	pop    edx
c0008888:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000888d:	59                   	pop    ecx
c000888e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008891:	89 c5                	mov    ebp,eax
c0008893:	0f b7 f6             	movzx  esi,si
c0008896:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000889a:	01 f6                	add    esi,esi
c000889c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000889f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088a2:	84 c0                	test   al,al
c00088a4:	0f 84 f4 00 00 00    	je     c000899e <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00088aa:	3c 0d                	cmp    al,0xd
c00088ac:	75 0c                	jne    c00088ba <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00088ae:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088b5:	e9 de 00 00 00       	jmp    c0008998 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088ba:	3c 0a                	cmp    al,0xa
c00088bc:	75 45                	jne    c0008903 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00088be:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088c1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088c8:	8d 48 01             	lea    ecx,[eax+0x1]
c00088cb:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00088ce:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00088d1:	75 0f                	jne    c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c00088d3:	83 ec 0c             	sub    esp,0xc
c00088d6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088d9:	53                   	push   ebx
c00088da:	e8 73 fa ff ff       	call   c0008352 <VgaText::scrollScreen()>
c00088df:	83 c4 10             	add    esp,0x10
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 71 f9 ff ff       	call   c000825c <VgaText::updateCursor()>
c00088eb:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088f0:	83 c4 10             	add    esp,0x10
c00088f3:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00088f6:	0f b7 f6             	movzx  esi,si
c00088f9:	01 f6                	add    esi,esi
c00088fb:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088fe:	e9 95 00 00 00       	jmp    c0008998 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008903:	3c 08                	cmp    al,0x8
c0008905:	75 35                	jne    c000893c <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0008907:	51                   	push   ecx
c0008908:	51                   	push   ecx
c0008909:	6a 01                	push   0x1
c000890b:	53                   	push   ebx
c000890c:	e8 bf fc ff ff       	call   c00085d0 <VgaText::decrementCursor(bool)>
c0008911:	5e                   	pop    esi
c0008912:	58                   	pop    eax
c0008913:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008916:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008919:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000891c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000891f:	6a 20                	push   0x20
c0008921:	53                   	push   ebx
c0008922:	e8 d5 fa ff ff       	call   c00083fc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008927:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000892c:	83 c4 20             	add    esp,0x20
c000892f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008932:	0f b7 f6             	movzx  esi,si
c0008935:	01 f6                	add    esi,esi
c0008937:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000893a:	eb 5c                	jmp    c0008998 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c000893c:	52                   	push   edx
c000893d:	52                   	push   edx
c000893e:	89 ea                	mov    edx,ebp
c0008940:	0f b6 ca             	movzx  ecx,dl
c0008943:	51                   	push   ecx
c0008944:	50                   	push   eax
c0008945:	e8 a0 fa ff ff       	call   c00083ea <VgaText::combineCharAndColour(char, unsigned char)>
c000894a:	83 c4 10             	add    esp,0x10
c000894d:	66 89 06             	mov    WORD PTR [esi],ax
c0008950:	39 1d 04 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f04,ebx
c0008956:	75 1d                	jne    c0008975 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0008958:	83 ec 0c             	sub    esp,0xc
c000895b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008961:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008965:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008969:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000896c:	50                   	push   eax
c000896d:	e8 32 da 00 00       	call   c00163a4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008972:	83 c4 20             	add    esp,0x20
c0008975:	83 c6 02             	add    esi,0x2
c0008978:	50                   	push   eax
c0008979:	50                   	push   eax
c000897a:	6a 00                	push   0x0
c000897c:	53                   	push   ebx
c000897d:	e8 fa fb ff ff       	call   c000857c <VgaText::incrementCursor(bool)>
c0008982:	83 c4 10             	add    esp,0x10
c0008985:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008989:	75 0d                	jne    c0008998 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c000898b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008990:	0f b7 f6             	movzx  esi,si
c0008993:	01 f6                	add    esi,esi
c0008995:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008998:	47                   	inc    edi
c0008999:	e9 01 ff ff ff       	jmp    c000889f <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c000899e:	83 ec 0c             	sub    esp,0xc
c00089a1:	53                   	push   ebx
c00089a2:	e8 b5 f8 ff ff       	call   c000825c <VgaText::updateCursor()>
c00089a7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00089ae:	83 c4 1c             	add    esp,0x1c
c00089b1:	5b                   	pop    ebx
c00089b2:	5e                   	pop    esi
c00089b3:	5f                   	pop    edi
c00089b4:	5d                   	pop    ebp
c00089b5:	c3                   	ret    

c00089b6 <VgaText::VgaText(char const*)>:
c00089b6:	56                   	push   esi
c00089b7:	53                   	push   ebx
c00089b8:	83 ec 04             	sub    esp,0x4
c00089bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089bf:	83 ec 08             	sub    esp,0x8
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 44 05 00 00       	call   c0008f0e <UnixFile::UnixFile(int)>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	ba b4 e0 01 c0       	mov    edx,0xc001e0b4
c00089d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089d6:	89 10                	mov    DWORD PTR [eax],edx
c00089d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089dc:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00089e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089e7:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00089ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00089f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089fa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00089fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a02:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a18:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a23:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a2e:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008a35:	83 ec 0c             	sub    esp,0xc
c0008a38:	6a 01                	push   0x1
c0008a3a:	e8 12 09 00 00       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c0008a3f:	83 c4 10             	add    esp,0x10
c0008a42:	89 c2                	mov    edx,eax
c0008a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a48:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008a4b:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c0008a51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a58:	89 c6                	mov    esi,eax
c0008a5a:	e8 f2 f0 ff ff       	call   c0007b51 <Phys::allocatePage()>
c0008a5f:	68 05 0c 00 00       	push   0xc05
c0008a64:	56                   	push   esi
c0008a65:	50                   	push   eax
c0008a66:	53                   	push   ebx
c0008a67:	e8 a8 0f 00 00       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008a6c:	83 c4 10             	add    esp,0x10
c0008a6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a76:	83 ec 04             	sub    esp,0x4
c0008a79:	68 a0 0f 00 00       	push   0xfa0
c0008a7e:	6a 00                	push   0x0
c0008a80:	50                   	push   eax
c0008a81:	e8 4a 7a ff ff       	call   c00004d0 <memset>
c0008a86:	83 c4 10             	add    esp,0x10
c0008a89:	83 ec 04             	sub    esp,0x4
c0008a8c:	6a 00                	push   0x0
c0008a8e:	6a 07                	push   0x7
c0008a90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a94:	e8 6d f8 ff ff       	call   c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	83 ec 04             	sub    esp,0x4
c0008a9f:	6a 00                	push   0x0
c0008aa1:	6a 00                	push   0x0
c0008aa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aa7:	e8 f0 f9 ff ff       	call   c000849c <VgaText::setCursor(int, int)>
c0008aac:	83 c4 10             	add    esp,0x10
c0008aaf:	83 ec 0c             	sub    esp,0xc
c0008ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ab6:	e8 43 fa ff ff       	call   c00084fe <VgaText::clearScreen()>
c0008abb:	83 c4 10             	add    esp,0x10
c0008abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ac2:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008aca:	05 82 00 00 00       	add    eax,0x82
c0008acf:	83 ec 04             	sub    esp,0x4
c0008ad2:	68 80 00 00 00       	push   0x80
c0008ad7:	6a 00                	push   0x0
c0008ad9:	50                   	push   eax
c0008ada:	e8 f1 79 ff ff       	call   c00004d0 <memset>
c0008adf:	83 c4 10             	add    esp,0x10
c0008ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ae6:	05 02 01 00 00       	add    eax,0x102
c0008aeb:	83 ec 04             	sub    esp,0x4
c0008aee:	68 80 00 00 00       	push   0x80
c0008af3:	6a 00                	push   0x0
c0008af5:	50                   	push   eax
c0008af6:	e8 d5 79 ff ff       	call   c00004d0 <memset>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	90                   	nop
c0008aff:	83 c4 04             	add    esp,0x4
c0008b02:	5b                   	pop    ebx
c0008b03:	5e                   	pop    esi
c0008b04:	c3                   	ret    
c0008b05:	90                   	nop

c0008b06 <VgaText::receiveKey(unsigned char)>:
c0008b06:	55                   	push   ebp
c0008b07:	57                   	push   edi
c0008b08:	56                   	push   esi
c0008b09:	53                   	push   ebx
c0008b0a:	83 ec 1c             	sub    esp,0x1c
c0008b0d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008b11:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008b15:	89 f0                	mov    eax,esi
c0008b17:	84 c0                	test   al,al
c0008b19:	0f 84 47 01 00 00    	je     c0008c66 <VgaText::receiveKey(unsigned char)+0x160>
c0008b1f:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008b25:	3c 08                	cmp    al,0x8
c0008b27:	75 6b                	jne    c0008b94 <VgaText::receiveKey(unsigned char)+0x8e>
c0008b29:	83 ec 0c             	sub    esp,0xc
c0008b2c:	57                   	push   edi
c0008b2d:	e8 0e 7a ff ff       	call   c0000540 <strlen>
c0008b32:	83 c4 10             	add    esp,0x10
c0008b35:	85 c0                	test   eax,eax
c0008b37:	0f 84 ee 00 00 00    	je     c0008c2b <VgaText::receiveKey(unsigned char)+0x125>
c0008b3d:	50                   	push   eax
c0008b3e:	50                   	push   eax
c0008b3f:	6a 08                	push   0x8
c0008b41:	53                   	push   ebx
c0008b42:	e8 79 fb ff ff       	call   c00086c0 <VgaText::putchar(char)>
c0008b47:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b4a:	e8 f1 79 ff ff       	call   c0000540 <strlen>
c0008b4f:	83 c4 10             	add    esp,0x10
c0008b52:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008b59:	3c 0d                	cmp    al,0xd
c0008b5b:	0f 95 c1             	setne  cl
c0008b5e:	3c 18                	cmp    al,0x18
c0008b60:	0f 9e c2             	setle  dl
c0008b63:	84 d1                	test   cl,dl
c0008b65:	74 17                	je     c0008b7e <VgaText::receiveKey(unsigned char)+0x78>
c0008b67:	83 e8 08             	sub    eax,0x8
c0008b6a:	3c 02                	cmp    al,0x2
c0008b6c:	76 10                	jbe    c0008b7e <VgaText::receiveKey(unsigned char)+0x78>
c0008b6e:	55                   	push   ebp
c0008b6f:	55                   	push   ebp
c0008b70:	68 9f e0 01 c0       	push   0xc001e09f
c0008b75:	53                   	push   ebx
c0008b76:	e8 77 fc ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c0008b7b:	83 c4 10             	add    esp,0x10
c0008b7e:	83 ec 0c             	sub    esp,0xc
c0008b81:	57                   	push   edi
c0008b82:	e8 b9 79 ff ff       	call   c0000540 <strlen>
c0008b87:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008b8f:	e9 94 00 00 00       	jmp    c0008c28 <VgaText::receiveKey(unsigned char)+0x122>
c0008b94:	83 ec 0c             	sub    esp,0xc
c0008b97:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008b9d:	50                   	push   eax
c0008b9e:	e8 9d 79 ff ff       	call   c0000540 <strlen>
c0008ba3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008ba6:	89 c5                	mov    ebp,eax
c0008ba8:	e8 93 79 ff ff       	call   c0000540 <strlen>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008bb4:	3d 80 00 00 00       	cmp    eax,0x80
c0008bb9:	0f 87 a7 00 00 00    	ja     c0008c66 <VgaText::receiveKey(unsigned char)+0x160>
c0008bbf:	89 f0                	mov    eax,esi
c0008bc1:	3c 18                	cmp    al,0x18
c0008bc3:	0f 96 c2             	setbe  dl
c0008bc6:	3c 0d                	cmp    al,0xd
c0008bc8:	0f 95 c0             	setne  al
c0008bcb:	84 c2                	test   dl,al
c0008bcd:	74 30                	je     c0008bff <VgaText::receiveKey(unsigned char)+0xf9>
c0008bcf:	8d 46 f7             	lea    eax,[esi-0x9]
c0008bd2:	3c 01                	cmp    al,0x1
c0008bd4:	76 29                	jbe    c0008bff <VgaText::receiveKey(unsigned char)+0xf9>
c0008bd6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bdc:	68 a5 e0 01 c0       	push   0xc001e0a5
c0008be1:	53                   	push   ebx
c0008be2:	e8 7d fc ff ff       	call   c0008864 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008be7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bea:	8d 46 40             	lea    eax,[esi+0x40]
c0008bed:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bf0:	0f b6 c0             	movzx  eax,al
c0008bf3:	50                   	push   eax
c0008bf4:	53                   	push   ebx
c0008bf5:	e8 f8 f9 ff ff       	call   c00085f2 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008bfa:	83 c4 20             	add    esp,0x20
c0008bfd:	eb 11                	jmp    c0008c10 <VgaText::receiveKey(unsigned char)+0x10a>
c0008bff:	89 f0                	mov    eax,esi
c0008c01:	51                   	push   ecx
c0008c02:	0f be c0             	movsx  eax,al
c0008c05:	51                   	push   ecx
c0008c06:	50                   	push   eax
c0008c07:	53                   	push   ebx
c0008c08:	e8 b3 fa ff ff       	call   c00086c0 <VgaText::putchar(char)>
c0008c0d:	83 c4 10             	add    esp,0x10
c0008c10:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008c15:	89 f0                	mov    eax,esi
c0008c17:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008c1b:	52                   	push   edx
c0008c1c:	52                   	push   edx
c0008c1d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008c21:	50                   	push   eax
c0008c22:	57                   	push   edi
c0008c23:	e8 98 7b ff ff       	call   c00007c0 <strcat>
c0008c28:	83 c4 10             	add    esp,0x10
c0008c2b:	89 f0                	mov    eax,esi
c0008c2d:	3c 03                	cmp    al,0x3
c0008c2f:	0f 94 c2             	sete   dl
c0008c32:	3c 0a                	cmp    al,0xa
c0008c34:	0f 94 c0             	sete   al
c0008c37:	08 c2                	or     dl,al
c0008c39:	75 09                	jne    c0008c44 <VgaText::receiveKey(unsigned char)+0x13e>
c0008c3b:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008c42:	74 22                	je     c0008c66 <VgaText::receiveKey(unsigned char)+0x160>
c0008c44:	81 c3 02 01 00 00    	add    ebx,0x102
c0008c4a:	50                   	push   eax
c0008c4b:	50                   	push   eax
c0008c4c:	57                   	push   edi
c0008c4d:	53                   	push   ebx
c0008c4e:	e8 6d 7b ff ff       	call   c00007c0 <strcat>
c0008c53:	83 c4 0c             	add    esp,0xc
c0008c56:	68 80 00 00 00       	push   0x80
c0008c5b:	6a 00                	push   0x0
c0008c5d:	57                   	push   edi
c0008c5e:	e8 6d 78 ff ff       	call   c00004d0 <memset>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	83 c4 1c             	add    esp,0x1c
c0008c69:	5b                   	pop    ebx
c0008c6a:	5e                   	pop    esi
c0008c6b:	5f                   	pop    edi
c0008c6c:	5d                   	pop    ebp
c0008c6d:	c3                   	ret    

c0008c6e <VgaText::doUpdate()>:
c0008c6e:	c3                   	ret    

c0008c6f <newTerminal(char*)>:
c0008c6f:	83 ec 28             	sub    esp,0x28
c0008c72:	68 84 01 00 00       	push   0x184
c0008c77:	e8 f9 eb ff ff       	call   c0007875 <malloc>
c0008c7c:	5a                   	pop    edx
c0008c7d:	59                   	pop    ecx
c0008c7e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008c82:	50                   	push   eax
c0008c83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008c87:	e8 2a fd ff ff       	call   c00089b6 <VgaText::VgaText(char const*)>
c0008c8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c90:	83 c4 2c             	add    esp,0x2c
c0008c93:	c3                   	ret    

c0008c94 <TSS::TSS()>:
c0008c94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c98:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008c9f:	90                   	nop
c0008ca0:	c3                   	ret    
c0008ca1:	90                   	nop
c0008ca2:	66 90                	xchg   ax,ax

c0008ca4 <TSS::setESP(unsigned long)>:
c0008ca4:	55                   	push   ebp
c0008ca5:	89 e5                	mov    ebp,esp
c0008ca7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008caa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cad:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cb0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008cb3:	90                   	nop
c0008cb4:	5d                   	pop    ebp
c0008cb5:	c3                   	ret    
c0008cb6:	66 90                	xchg   ax,ax

c0008cb8 <TSS::flush()>:
c0008cb8:	55                   	push   ebp
c0008cb9:	89 e5                	mov    ebp,esp
c0008cbb:	83 ec 10             	sub    esp,0x10
c0008cbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0008cc3:	83 c8 03             	or     eax,0x3
c0008cc6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008cca:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008cce:	66 89 d0             	mov    ax,dx
c0008cd1:	0f 00 d8             	ltr    ax
c0008cd4:	90                   	nop
c0008cd5:	c9                   	leave  
c0008cd6:	c3                   	ret    
c0008cd7:	90                   	nop

c0008cd8 <TSS::setup(unsigned long, unsigned long)>:
c0008cd8:	55                   	push   ebp
c0008cd9:	89 e5                	mov    ebp,esp
c0008cdb:	83 ec 18             	sub    esp,0x18
c0008cde:	83 ec 0c             	sub    esp,0xc
c0008ce1:	6a 68                	push   0x68
c0008ce3:	e8 8d eb ff ff       	call   c0007875 <malloc>
c0008ce8:	83 c4 10             	add    esp,0x10
c0008ceb:	89 c2                	mov    edx,eax
c0008ced:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cf0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008cf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cf9:	83 ec 04             	sub    esp,0x4
c0008cfc:	6a 68                	push   0x68
c0008cfe:	6a 00                	push   0x0
c0008d00:	50                   	push   eax
c0008d01:	e8 ca 77 ff ff       	call   c00004d0 <memset>
c0008d06:	83 c4 10             	add    esp,0x10
c0008d09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d0f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008d15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d1b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008d21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d27:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d2a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008d2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d33:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008d39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d3f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008d45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d4b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008d51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d57:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008d5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d63:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008d69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d6f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008d75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d7b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008d7e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008d81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d87:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d8a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008d8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d93:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008d9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008da0:	0f 20 da             	mov    edx,cr3
c0008da3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008da6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008da9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008dac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008daf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008db2:	83 ec 08             	sub    esp,0x8
c0008db5:	50                   	push   eax
c0008db6:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008db9:	50                   	push   eax
c0008dba:	e8 3b e3 ff ff       	call   c00070fa <GDTEntry::setBase(unsigned int)>
c0008dbf:	83 c4 10             	add    esp,0x10
c0008dc2:	83 ec 08             	sub    esp,0x8
c0008dc5:	6a 68                	push   0x68
c0008dc7:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008dca:	50                   	push   eax
c0008dcb:	e8 46 e3 ff ff       	call   c0007116 <GDTEntry::setLimit(unsigned int)>
c0008dd0:	83 c4 10             	add    esp,0x10
c0008dd3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008dd7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008dda:	83 e0 0f             	and    eax,0xf
c0008ddd:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008de0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008de3:	83 c8 40             	or     eax,0x40
c0008de6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008de9:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0008dee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008df4:	05 78 01 00 00       	add    eax,0x178
c0008df9:	83 ec 04             	sub    esp,0x4
c0008dfc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008dff:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008e02:	50                   	push   eax
c0008e03:	e8 42 e3 ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c0008e08:	83 c4 10             	add    esp,0x10
c0008e0b:	89 c2                	mov    edx,eax
c0008e0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e10:	89 10                	mov    DWORD PTR [eax],edx
c0008e12:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0008e17:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008e1d:	05 78 01 00 00       	add    eax,0x178
c0008e22:	83 ec 0c             	sub    esp,0xc
c0008e25:	50                   	push   eax
c0008e26:	e8 49 e3 ff ff       	call   c0007174 <GDT::flush()>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e33:	c9                   	leave  
c0008e34:	c3                   	ret    
c0008e35:	90                   	nop

c0008e36 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008e36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008e3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e41:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008e46:	75 08                	jne    c0008e50 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008e48:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e4e:	eb 38                	jmp    c0008e88 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008e50:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e55:	75 17                	jne    c0008e6e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008e57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e5c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e5f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e65:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e6b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008e6e:	89 c1                	mov    ecx,eax
c0008e70:	83 e1 fd             	and    ecx,0xfffffffd
c0008e73:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008e79:	74 cd                	je     c0008e48 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e7b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e80:	83 e0 ef             	and    eax,0xffffffef
c0008e83:	83 f8 08             	cmp    eax,0x8
c0008e86:	76 c0                	jbe    c0008e48 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e88:	31 c0                	xor    eax,eax
c0008e8a:	c3                   	ret    
c0008e8b:	90                   	nop

c0008e8c <ReservedFilename::isAtty()>:
c0008e8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e90:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e93:	31 c0                	xor    eax,eax
c0008e95:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008e9b:	74 09                	je     c0008ea6 <ReservedFilename::isAtty()+0x1a>
c0008e9d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008ea3:	0f 94 c0             	sete   al
c0008ea6:	c3                   	ret    
c0008ea7:	90                   	nop

c0008ea8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008eac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008eb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008eb3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008eb7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008ebc:	75 08                	jne    c0008ec6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008ebe:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008ec4:	eb 3d                	jmp    c0008f03 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008ec6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008ecb:	75 17                	jne    c0008ee4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008ecd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008ed2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008ed5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008edb:	8b 10                	mov    edx,DWORD PTR [eax]
c0008edd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ee1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008ee4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008ee9:	75 04                	jne    c0008eef <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008eeb:	89 0a                	mov    DWORD PTR [edx],ecx
c0008eed:	eb 14                	jmp    c0008f03 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008eef:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008ef4:	74 c8                	je     c0008ebe <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008ef6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008efb:	83 e0 ef             	and    eax,0xffffffef
c0008efe:	83 f8 08             	cmp    eax,0x8
c0008f01:	76 bb                	jbe    c0008ebe <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008f03:	31 c0                	xor    eax,eax
c0008f05:	c3                   	ret    

c0008f06 <UnixFile::getFileDescriptor()>:
c0008f06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f0d:	c3                   	ret    

c0008f0e <UnixFile::UnixFile(int)>:
c0008f0e:	53                   	push   ebx
c0008f0f:	83 ec 28             	sub    esp,0x28
c0008f12:	ba 7c e1 01 c0       	mov    edx,0xc001e17c
c0008f17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f1b:	89 10                	mov    DWORD PTR [eax],edx
c0008f1d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008f25:	0f 8f 8c 01 00 00    	jg     c00090b7 <UnixFile::UnixFile(int)+0x1a9>
c0008f2b:	a1 00 00 02 c0       	mov    eax,ds:0xc0020000
c0008f30:	8d 50 01             	lea    edx,[eax+0x1]
c0008f33:	89 15 00 00 02 c0    	mov    DWORD PTR ds:0xc0020000,edx
c0008f39:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008f3d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f40:	83 ec 08             	sub    esp,0x8
c0008f43:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008f47:	68 98 2f 02 c0       	push   0xc0022f98
c0008f4c:	e8 07 3d 01 00       	call   c001cc58 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008f51:	83 c4 10             	add    esp,0x10
c0008f54:	a0 94 2f 02 c0       	mov    al,ds:0xc0022f94
c0008f59:	83 f0 01             	xor    eax,0x1
c0008f5c:	84 c0                	test   al,al
c0008f5e:	0f 84 54 01 00 00    	je     c00090b8 <UnixFile::UnixFile(int)+0x1aa>
c0008f64:	c6 05 94 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022f94,0x1
c0008f6b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008f73:	83 ec 0c             	sub    esp,0xc
c0008f76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008f7a:	e8 f6 e8 ff ff       	call   c0007875 <malloc>
c0008f7f:	83 c4 10             	add    esp,0x10
c0008f82:	89 c3                	mov    ebx,eax
c0008f84:	83 ec 08             	sub    esp,0x8
c0008f87:	68 03 ff ff 0f       	push   0xfffff03
c0008f8c:	53                   	push   ebx
c0008f8d:	e8 2c 01 00 00       	call   c00090be <ReservedFilename::ReservedFilename(int)>
c0008f92:	83 c4 10             	add    esp,0x10
c0008f95:	89 1d 8c 2f 02 c0    	mov    DWORD PTR ds:0xc0022f8c,ebx
c0008f9b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008fa3:	83 ec 0c             	sub    esp,0xc
c0008fa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008faa:	e8 c6 e8 ff ff       	call   c0007875 <malloc>
c0008faf:	83 c4 10             	add    esp,0x10
c0008fb2:	89 c3                	mov    ebx,eax
c0008fb4:	83 ec 08             	sub    esp,0x8
c0008fb7:	68 01 ff ff 0f       	push   0xfffff01
c0008fbc:	53                   	push   ebx
c0008fbd:	e8 fc 00 00 00       	call   c00090be <ReservedFilename::ReservedFilename(int)>
c0008fc2:	83 c4 10             	add    esp,0x10
c0008fc5:	89 1d 90 2f 02 c0    	mov    DWORD PTR ds:0xc0022f90,ebx
c0008fcb:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008fd3:	83 ec 0c             	sub    esp,0xc
c0008fd6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008fda:	e8 96 e8 ff ff       	call   c0007875 <malloc>
c0008fdf:	83 c4 10             	add    esp,0x10
c0008fe2:	89 c3                	mov    ebx,eax
c0008fe4:	83 ec 08             	sub    esp,0x8
c0008fe7:	68 00 ff ff 0f       	push   0xfffff00
c0008fec:	53                   	push   ebx
c0008fed:	e8 cc 00 00 00       	call   c00090be <ReservedFilename::ReservedFilename(int)>
c0008ff2:	83 c4 10             	add    esp,0x10
c0008ff5:	89 1d 84 2f 02 c0    	mov    DWORD PTR ds:0xc0022f84,ebx
c0008ffb:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0009003:	83 ec 0c             	sub    esp,0xc
c0009006:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000900a:	e8 66 e8 ff ff       	call   c0007875 <malloc>
c000900f:	83 c4 10             	add    esp,0x10
c0009012:	89 c3                	mov    ebx,eax
c0009014:	83 ec 08             	sub    esp,0x8
c0009017:	68 02 ff ff 0f       	push   0xfffff02
c000901c:	53                   	push   ebx
c000901d:	e8 9c 00 00 00       	call   c00090be <ReservedFilename::ReservedFilename(int)>
c0009022:	83 c4 10             	add    esp,0x10
c0009025:	89 1d 88 2f 02 c0    	mov    DWORD PTR ds:0xc0022f88,ebx
c000902b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009033:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0009038:	7f 7e                	jg     c00090b8 <UnixFile::UnixFile(int)+0x1aa>
c000903a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009042:	83 ec 0c             	sub    esp,0xc
c0009045:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009049:	e8 27 e8 ff ff       	call   c0007875 <malloc>
c000904e:	83 c4 10             	add    esp,0x10
c0009051:	89 c3                	mov    ebx,eax
c0009053:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009057:	05 10 ff ff 0f       	add    eax,0xfffff10
c000905c:	83 ec 08             	sub    esp,0x8
c000905f:	50                   	push   eax
c0009060:	53                   	push   ebx
c0009061:	e8 58 00 00 00       	call   c00090be <ReservedFilename::ReservedFilename(int)>
c0009066:	83 c4 10             	add    esp,0x10
c0009069:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000906d:	89 1c 85 60 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd0a0],ebx
c0009074:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000907c:	83 ec 0c             	sub    esp,0xc
c000907f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009083:	e8 ed e7 ff ff       	call   c0007875 <malloc>
c0009088:	83 c4 10             	add    esp,0x10
c000908b:	89 c3                	mov    ebx,eax
c000908d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009091:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009096:	83 ec 08             	sub    esp,0x8
c0009099:	50                   	push   eax
c000909a:	53                   	push   ebx
c000909b:	e8 1e 00 00 00       	call   c00090be <ReservedFilename::ReservedFilename(int)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090a7:	89 1c 85 20 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd0e0],ebx
c00090ae:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00090b2:	e9 7c ff ff ff       	jmp    c0009033 <UnixFile::UnixFile(int)+0x125>
c00090b7:	90                   	nop
c00090b8:	83 c4 28             	add    esp,0x28
c00090bb:	5b                   	pop    ebx
c00090bc:	c3                   	ret    
c00090bd:	90                   	nop

c00090be <ReservedFilename::ReservedFilename(int)>:
c00090be:	83 ec 0c             	sub    esp,0xc
c00090c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090c5:	83 ec 08             	sub    esp,0x8
c00090c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090cc:	50                   	push   eax
c00090cd:	e8 3c fe ff ff       	call   c0008f0e <UnixFile::UnixFile(int)>
c00090d2:	83 c4 10             	add    esp,0x10
c00090d5:	ba 98 e1 01 c0       	mov    edx,0xc001e198
c00090da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090de:	89 10                	mov    DWORD PTR [eax],edx
c00090e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090e8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00090eb:	90                   	nop
c00090ec:	83 c4 0c             	add    esp,0xc
c00090ef:	c3                   	ret    

c00090f0 <UnixFile::~UnixFile()>:
c00090f0:	83 ec 1c             	sub    esp,0x1c
c00090f3:	ba 7c e1 01 c0       	mov    edx,0xc001e17c
c00090f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090fc:	89 10                	mov    DWORD PTR [eax],edx
c00090fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009102:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009105:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000910a:	7f 73                	jg     c000917f <UnixFile::~UnixFile()+0x8f>
c000910c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009114:	83 ec 0c             	sub    esp,0xc
c0009117:	68 98 2f 02 c0       	push   0xc0022f98
c000911c:	e8 0b 3c 01 00       	call   c001cd2c <LinkedList<UnixFile>::getFirstElement()>
c0009121:	83 c4 10             	add    esp,0x10
c0009124:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009128:	83 ec 0c             	sub    esp,0xc
c000912b:	68 98 2f 02 c0       	push   0xc0022f98
c0009130:	e8 ff 3b 01 00       	call   c001cd34 <LinkedList<UnixFile>::removeFirst()>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000913c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009140:	74 40                	je     c0009182 <UnixFile::~UnixFile()+0x92>
c0009142:	83 ec 08             	sub    esp,0x8
c0009145:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009149:	68 98 2f 02 c0       	push   0xc0022f98
c000914e:	e8 05 3b 01 00       	call   c001cc58 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009153:	83 c4 10             	add    esp,0x10
c0009156:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000915a:	8d 50 01             	lea    edx,[eax+0x1]
c000915d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009161:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009166:	0f 94 c0             	sete   al
c0009169:	84 c0                	test   al,al
c000916b:	74 a7                	je     c0009114 <UnixFile::~UnixFile()+0x24>
c000916d:	83 ec 0c             	sub    esp,0xc
c0009170:	68 54 e1 01 c0       	push   0xc001e154
c0009175:	e8 9d 71 00 00       	call   c0010317 <KePanic(char const*)>
c000917a:	83 c4 10             	add    esp,0x10
c000917d:	eb 95                	jmp    c0009114 <UnixFile::~UnixFile()+0x24>
c000917f:	90                   	nop
c0009180:	eb 01                	jmp    c0009183 <UnixFile::~UnixFile()+0x93>
c0009182:	90                   	nop
c0009183:	90                   	nop
c0009184:	83 c4 1c             	add    esp,0x1c
c0009187:	c3                   	ret    

c0009188 <UnixFile::~UnixFile()>:
c0009188:	83 ec 0c             	sub    esp,0xc
c000918b:	83 ec 0c             	sub    esp,0xc
c000918e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009192:	e8 59 ff ff ff       	call   c00090f0 <UnixFile::~UnixFile()>
c0009197:	83 c4 10             	add    esp,0x10
c000919a:	83 ec 08             	sub    esp,0x8
c000919d:	6a 0c                	push   0xc
c000919f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091a3:	e8 70 13 00 00       	call   c000a518 <operator delete(void*, unsigned long)>
c00091a8:	83 c4 10             	add    esp,0x10
c00091ab:	83 c4 0c             	add    esp,0xc
c00091ae:	c3                   	ret    
c00091af:	90                   	nop

c00091b0 <ReservedFilename::~ReservedFilename()>:
c00091b0:	83 ec 0c             	sub    esp,0xc
c00091b3:	ba 98 e1 01 c0       	mov    edx,0xc001e198
c00091b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091bc:	89 10                	mov    DWORD PTR [eax],edx
c00091be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091c2:	83 ec 0c             	sub    esp,0xc
c00091c5:	50                   	push   eax
c00091c6:	e8 25 ff ff ff       	call   c00090f0 <UnixFile::~UnixFile()>
c00091cb:	83 c4 10             	add    esp,0x10
c00091ce:	90                   	nop
c00091cf:	83 c4 0c             	add    esp,0xc
c00091d2:	c3                   	ret    
c00091d3:	90                   	nop

c00091d4 <ReservedFilename::~ReservedFilename()>:
c00091d4:	83 ec 0c             	sub    esp,0xc
c00091d7:	83 ec 0c             	sub    esp,0xc
c00091da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091de:	e8 cd ff ff ff       	call   c00091b0 <ReservedFilename::~ReservedFilename()>
c00091e3:	83 c4 10             	add    esp,0x10
c00091e6:	83 ec 08             	sub    esp,0x8
c00091e9:	6a 0c                	push   0xc
c00091eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091ef:	e8 24 13 00 00       	call   c000a518 <operator delete(void*, unsigned long)>
c00091f4:	83 c4 10             	add    esp,0x10
c00091f7:	83 c4 0c             	add    esp,0xc
c00091fa:	c3                   	ret    

c00091fb <getFromFileDescriptor(int)>:
c00091fb:	53                   	push   ebx
c00091fc:	83 ec 08             	sub    esp,0x8
c00091ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009203:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009209:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000920f:	7f 2c                	jg     c000923d <getFromFileDescriptor(int)+0x42>
c0009211:	83 ec 0c             	sub    esp,0xc
c0009214:	68 98 2f 02 c0       	push   0xc0022f98
c0009219:	e8 0e 3b 01 00       	call   c001cd2c <LinkedList<UnixFile>::getFirstElement()>
c000921e:	83 c4 10             	add    esp,0x10
c0009221:	85 c0                	test   eax,eax
c0009223:	75 04                	jne    c0009229 <getFromFileDescriptor(int)+0x2e>
c0009225:	31 c0                	xor    eax,eax
c0009227:	eb 6e                	jmp    c0009297 <getFromFileDescriptor(int)+0x9c>
c0009229:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000922c:	74 69                	je     c0009297 <getFromFileDescriptor(int)+0x9c>
c000922e:	52                   	push   edx
c000922f:	52                   	push   edx
c0009230:	50                   	push   eax
c0009231:	68 98 2f 02 c0       	push   0xc0022f98
c0009236:	e8 9b 3b 01 00       	call   c001cdd6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000923b:	eb e1                	jmp    c000921e <getFromFileDescriptor(int)+0x23>
c000923d:	a1 8c 2f 02 c0       	mov    eax,ds:0xc0022f8c
c0009242:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009248:	74 4d                	je     c0009297 <getFromFileDescriptor(int)+0x9c>
c000924a:	a1 90 2f 02 c0       	mov    eax,ds:0xc0022f90
c000924f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009255:	74 40                	je     c0009297 <getFromFileDescriptor(int)+0x9c>
c0009257:	a1 88 2f 02 c0       	mov    eax,ds:0xc0022f88
c000925c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009262:	74 33                	je     c0009297 <getFromFileDescriptor(int)+0x9c>
c0009264:	a1 84 2f 02 c0       	mov    eax,ds:0xc0022f84
c0009269:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000926f:	74 26                	je     c0009297 <getFromFileDescriptor(int)+0x9c>
c0009271:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009277:	83 f8 08             	cmp    eax,0x8
c000927a:	77 09                	ja     c0009285 <getFromFileDescriptor(int)+0x8a>
c000927c:	8b 04 85 60 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0a0]
c0009283:	eb 12                	jmp    c0009297 <getFromFileDescriptor(int)+0x9c>
c0009285:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000928b:	83 fb 08             	cmp    ebx,0x8
c000928e:	77 95                	ja     c0009225 <getFromFileDescriptor(int)+0x2a>
c0009290:	8b 04 9d 20 2f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd0e0]
c0009297:	83 c4 08             	add    esp,0x8
c000929a:	5b                   	pop    ebx
c000929b:	c3                   	ret    

c000929c <__static_initialization_and_destruction_0(int, int)>:
c000929c:	83 ec 0c             	sub    esp,0xc
c000929f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00092a4:	75 34                	jne    c00092da <__static_initialization_and_destruction_0(int, int)+0x3e>
c00092a6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00092ae:	75 2a                	jne    c00092da <__static_initialization_and_destruction_0(int, int)+0x3e>
c00092b0:	83 ec 0c             	sub    esp,0xc
c00092b3:	68 98 2f 02 c0       	push   0xc0022f98
c00092b8:	e8 59 39 01 00       	call   c001cc16 <LinkedList<UnixFile>::LinkedList()>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	83 ec 04             	sub    esp,0x4
c00092c3:	68 90 ff 01 c0       	push   0xc001ff90
c00092c8:	68 98 2f 02 c0       	push   0xc0022f98
c00092cd:	68 14 cc 01 c0       	push   0xc001cc14
c00092d2:	e8 f1 11 00 00       	call   c000a4c8 <__cxa_atexit>
c00092d7:	83 c4 10             	add    esp,0x10
c00092da:	90                   	nop
c00092db:	83 c4 0c             	add    esp,0xc
c00092de:	c3                   	ret    

c00092df <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00092df:	83 ec 0c             	sub    esp,0xc
c00092e2:	83 ec 08             	sub    esp,0x8
c00092e5:	68 ff ff 00 00       	push   0xffff
c00092ea:	6a 01                	push   0x1
c00092ec:	e8 ab ff ff ff       	call   c000929c <__static_initialization_and_destruction_0(int, int)>
c00092f1:	83 c4 10             	add    esp,0x10
c00092f4:	83 c4 0c             	add    esp,0xc
c00092f7:	c3                   	ret    

c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00092f8:	53                   	push   ebx
c00092f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00092fd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009301:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0009307:	89 c8                	mov    eax,ecx
c0009309:	d1 e8                	shr    eax,1
c000930b:	03 05 08 00 02 c0    	add    eax,DWORD PTR ds:0xc0020008
c0009311:	83 e1 01             	and    ecx,0x1
c0009314:	8a 10                	mov    dl,BYTE PTR [eax]
c0009316:	75 09                	jne    c0009321 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009318:	83 e2 f0             	and    edx,0xfffffff0
c000931b:	09 da                	or     edx,ebx
c000931d:	88 10                	mov    BYTE PTR [eax],dl
c000931f:	5b                   	pop    ebx
c0009320:	c3                   	ret    
c0009321:	c1 e3 04             	shl    ebx,0x4
c0009324:	83 e2 0f             	and    edx,0xf
c0009327:	09 da                	or     edx,ebx
c0009329:	88 10                	mov    BYTE PTR [eax],dl
c000932b:	5b                   	pop    ebx
c000932c:	c3                   	ret    

c000932d <Virt::getPageState(unsigned long)>:
c000932d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009331:	8b 0d 08 00 02 c0    	mov    ecx,DWORD PTR ds:0xc0020008
c0009337:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000933d:	89 d0                	mov    eax,edx
c000933f:	d1 e8                	shr    eax,1
c0009341:	83 e2 01             	and    edx,0x1
c0009344:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009347:	75 04                	jne    c000934d <Virt::getPageState(unsigned long)+0x20>
c0009349:	83 e0 0f             	and    eax,0xf
c000934c:	c3                   	ret    
c000934d:	c0 e8 04             	shr    al,0x4
c0009350:	c3                   	ret    

c0009351 <Virt::allocateKernelVirtualPages(int)>:
c0009351:	55                   	push   ebp
c0009352:	31 ed                	xor    ebp,ebp
c0009354:	57                   	push   edi
c0009355:	56                   	push   esi
c0009356:	53                   	push   ebx
c0009357:	31 db                	xor    ebx,ebx
c0009359:	83 ec 1c             	sub    esp,0x1c
c000935c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009360:	8b 3d 04 00 02 c0    	mov    edi,DWORD PTR ds:0xc0020004
c0009366:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000936b:	57                   	push   edi
c000936c:	e8 bc ff ff ff       	call   c000932d <Virt::getPageState(unsigned long)>
c0009371:	5a                   	pop    edx
c0009372:	84 c0                	test   al,al
c0009374:	75 3a                	jne    c00093b0 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0009376:	85 db                	test   ebx,ebx
c0009378:	75 02                	jne    c000937c <Virt::allocateKernelVirtualPages(int)+0x2b>
c000937a:	89 fd                	mov    ebp,edi
c000937c:	43                   	inc    ebx
c000937d:	39 f3                	cmp    ebx,esi
c000937f:	74 5a                	je     c00093db <Virt::allocateKernelVirtualPages(int)+0x8a>
c0009381:	47                   	inc    edi
c0009382:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009388:	76 31                	jbe    c00093bb <Virt::allocateKernelVirtualPages(int)+0x6a>
c000938a:	c7 05 04 00 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0020004,0xc8000
c0009394:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0009399:	75 28                	jne    c00093c3 <Virt::allocateKernelVirtualPages(int)+0x72>
c000939b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00093a0:	bf 00 80 0c 00       	mov    edi,0xc8000
c00093a5:	57                   	push   edi
c00093a6:	e8 82 ff ff ff       	call   c000932d <Virt::getPageState(unsigned long)>
c00093ab:	5a                   	pop    edx
c00093ac:	84 c0                	test   al,al
c00093ae:	74 c6                	je     c0009376 <Virt::allocateKernelVirtualPages(int)+0x25>
c00093b0:	31 db                	xor    ebx,ebx
c00093b2:	47                   	inc    edi
c00093b3:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00093b9:	77 cf                	ja     c000938a <Virt::allocateKernelVirtualPages(int)+0x39>
c00093bb:	89 3d 04 00 02 c0    	mov    DWORD PTR ds:0xc0020004,edi
c00093c1:	eb a8                	jmp    c000936b <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093c3:	83 ec 0c             	sub    esp,0xc
c00093c6:	68 ac e1 01 c0       	push   0xc001e1ac
c00093cb:	e8 47 6f 00 00       	call   c0010317 <KePanic(char const*)>
c00093d0:	8b 3d 04 00 02 c0    	mov    edi,DWORD PTR ds:0xc0020004
c00093d6:	83 c4 10             	add    esp,0x10
c00093d9:	eb 90                	jmp    c000936b <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093db:	89 2d 04 00 02 c0    	mov    DWORD PTR ds:0xc0020004,ebp
c00093e1:	4b                   	dec    ebx
c00093e2:	74 5f                	je     c0009443 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00093e4:	85 f6                	test   esi,esi
c00093e6:	74 3d                	je     c0009425 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00093e8:	89 e8                	mov    eax,ebp
c00093ea:	31 db                	xor    ebx,ebx
c00093ec:	8d 7e ff             	lea    edi,[esi-0x1]
c00093ef:	eb 14                	jmp    c0009405 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00093f1:	6a 01                	push   0x1
c00093f3:	43                   	inc    ebx
c00093f4:	50                   	push   eax
c00093f5:	e8 fe fe ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093fa:	58                   	pop    eax
c00093fb:	39 f3                	cmp    ebx,esi
c00093fd:	5a                   	pop    edx
c00093fe:	74 25                	je     c0009425 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009400:	a1 04 00 02 c0       	mov    eax,ds:0xc0020004
c0009405:	8d 50 01             	lea    edx,[eax+0x1]
c0009408:	85 db                	test   ebx,ebx
c000940a:	89 15 04 00 02 c0    	mov    DWORD PTR ds:0xc0020004,edx
c0009410:	74 20                	je     c0009432 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009412:	39 df                	cmp    edi,ebx
c0009414:	75 db                	jne    c00093f1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009416:	6a 03                	push   0x3
c0009418:	43                   	inc    ebx
c0009419:	50                   	push   eax
c000941a:	e8 d9 fe ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000941f:	59                   	pop    ecx
c0009420:	39 f3                	cmp    ebx,esi
c0009422:	58                   	pop    eax
c0009423:	75 db                	jne    c0009400 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009425:	83 c4 1c             	add    esp,0x1c
c0009428:	89 e8                	mov    eax,ebp
c000942a:	5b                   	pop    ebx
c000942b:	c1 e0 0c             	shl    eax,0xc
c000942e:	5e                   	pop    esi
c000942f:	5f                   	pop    edi
c0009430:	5d                   	pop    ebp
c0009431:	c3                   	ret    
c0009432:	6a 02                	push   0x2
c0009434:	bb 01 00 00 00       	mov    ebx,0x1
c0009439:	50                   	push   eax
c000943a:	e8 b9 fe ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000943f:	58                   	pop    eax
c0009440:	5a                   	pop    edx
c0009441:	eb bd                	jmp    c0009400 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009443:	6a 04                	push   0x4
c0009445:	8d 45 01             	lea    eax,[ebp+0x1]
c0009448:	55                   	push   ebp
c0009449:	a3 04 00 02 c0       	mov    ds:0xc0020004,eax
c000944e:	e8 a5 fe ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009453:	59                   	pop    ecx
c0009454:	89 e8                	mov    eax,ebp
c0009456:	5b                   	pop    ebx
c0009457:	c1 e0 0c             	shl    eax,0xc
c000945a:	83 c4 1c             	add    esp,0x1c
c000945d:	5b                   	pop    ebx
c000945e:	5e                   	pop    esi
c000945f:	5f                   	pop    edi
c0009460:	5d                   	pop    ebp
c0009461:	c3                   	ret    

c0009462 <Virt::freeSwapfilePage(unsigned long)>:
c0009462:	53                   	push   ebx
c0009463:	8b 15 ac 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fac
c0009469:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000946d:	b8 01 00 00 00       	mov    eax,0x1
c0009472:	89 cb                	mov    ebx,ecx
c0009474:	d3 e0                	shl    eax,cl
c0009476:	c1 eb 05             	shr    ebx,0x5
c0009479:	f7 d0                	not    eax
c000947b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000947e:	5b                   	pop    ebx
c000947f:	c3                   	ret    

c0009480 <Virt::swapIDToSector(unsigned long)>:
c0009480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009484:	0f af 05 0c 00 02 c0 	imul   eax,DWORD PTR ds:0xc002000c
c000948b:	03 05 14 00 02 c0    	add    eax,DWORD PTR ds:0xc0020014
c0009491:	c3                   	ret    

c0009492 <Virt::allocateSwapfilePage()>:
c0009492:	55                   	push   ebp
c0009493:	31 d2                	xor    edx,edx
c0009495:	57                   	push   edi
c0009496:	56                   	push   esi
c0009497:	53                   	push   ebx
c0009498:	83 ec 0c             	sub    esp,0xc
c000949b:	8b 0d 0c 00 02 c0    	mov    ecx,DWORD PTR ds:0xc002000c
c00094a1:	a1 10 00 02 c0       	mov    eax,ds:0xc0020010
c00094a6:	f7 f1                	div    ecx
c00094a8:	39 0d 10 00 02 c0    	cmp    DWORD PTR ds:0xc0020010,ecx
c00094ae:	72 2d                	jb     c00094dd <Virt::allocateSwapfilePage()+0x4b>
c00094b0:	8b 35 ac 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022fac
c00094b6:	8b 16                	mov    edx,DWORD PTR [esi]
c00094b8:	f6 c2 01             	test   dl,0x1
c00094bb:	74 3c                	je     c00094f9 <Virt::allocateSwapfilePage()+0x67>
c00094bd:	31 c9                	xor    ecx,ecx
c00094bf:	bf 01 00 00 00       	mov    edi,0x1
c00094c4:	eb 12                	jmp    c00094d8 <Virt::allocateSwapfilePage()+0x46>
c00094c6:	89 fd                	mov    ebp,edi
c00094c8:	89 ca                	mov    edx,ecx
c00094ca:	d3 e5                	shl    ebp,cl
c00094cc:	c1 ea 05             	shr    edx,0x5
c00094cf:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00094d2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00094d4:	85 ea                	test   edx,ebp
c00094d6:	74 2a                	je     c0009502 <Virt::allocateSwapfilePage()+0x70>
c00094d8:	41                   	inc    ecx
c00094d9:	39 c8                	cmp    eax,ecx
c00094db:	77 e9                	ja     c00094c6 <Virt::allocateSwapfilePage()+0x34>
c00094dd:	83 ec 0c             	sub    esp,0xc
c00094e0:	68 13 e3 01 c0       	push   0xc001e313
c00094e5:	e8 2d 6e 00 00       	call   c0010317 <KePanic(char const*)>
c00094ea:	83 c4 10             	add    esp,0x10
c00094ed:	31 c9                	xor    ecx,ecx
c00094ef:	83 c4 0c             	add    esp,0xc
c00094f2:	89 c8                	mov    eax,ecx
c00094f4:	5b                   	pop    ebx
c00094f5:	5e                   	pop    esi
c00094f6:	5f                   	pop    edi
c00094f7:	5d                   	pop    ebp
c00094f8:	c3                   	ret    
c00094f9:	89 f3                	mov    ebx,esi
c00094fb:	bd 01 00 00 00       	mov    ebp,0x1
c0009500:	31 c9                	xor    ecx,ecx
c0009502:	09 ea                	or     edx,ebp
c0009504:	89 c8                	mov    eax,ecx
c0009506:	89 13                	mov    DWORD PTR [ebx],edx
c0009508:	83 c4 0c             	add    esp,0xc
c000950b:	5b                   	pop    ebx
c000950c:	5e                   	pop    esi
c000950d:	5f                   	pop    edi
c000950e:	5d                   	pop    ebp
c000950f:	c3                   	ret    

c0009510 <Virt::virtualMemorySetup()>:
c0009510:	53                   	push   ebx
c0009511:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009516:	6a 0f                	push   0xf
c0009518:	53                   	push   ebx
c0009519:	43                   	inc    ebx
c000951a:	e8 d9 fd ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000951f:	58                   	pop    eax
c0009520:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009526:	5a                   	pop    edx
c0009527:	75 ed                	jne    c0009516 <Virt::virtualMemorySetup()+0x6>
c0009529:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000952e:	6a 00                	push   0x0
c0009530:	53                   	push   ebx
c0009531:	43                   	inc    ebx
c0009532:	e8 c1 fd ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009537:	59                   	pop    ecx
c0009538:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000953e:	58                   	pop    eax
c000953f:	75 ed                	jne    c000952e <Virt::virtualMemorySetup()+0x1e>
c0009541:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009546:	6a 0f                	push   0xf
c0009548:	53                   	push   ebx
c0009549:	43                   	inc    ebx
c000954a:	e8 a9 fd ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000954f:	58                   	pop    eax
c0009550:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009556:	5a                   	pop    edx
c0009557:	75 ed                	jne    c0009546 <Virt::virtualMemorySetup()+0x36>
c0009559:	5b                   	pop    ebx
c000955a:	c3                   	ret    

c000955b <Virt::setupPageSwapping(int)>:
c000955b:	53                   	push   ebx
c000955c:	83 ec 0c             	sub    esp,0xc
c000955f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009563:	a1 28 54 02 c0       	mov    eax,ds:0xc0025428
c0009568:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000956e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009570:	53                   	push   ebx
c0009571:	c1 e3 0b             	shl    ebx,0xb
c0009574:	68 2a e3 01 c0       	push   0xc001e32a
c0009579:	50                   	push   eax
c000957a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000957d:	89 1d 10 00 02 c0    	mov    DWORD PTR ds:0xc0020010,ebx
c0009583:	c6 05 18 00 02 c0 43 	mov    BYTE PTR ds:0xc0020018,0x43
c000958a:	c1 eb 08             	shr    ebx,0x8
c000958d:	a3 14 00 02 c0       	mov    ds:0xc0020014,eax
c0009592:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009595:	c7 05 0c 00 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002000c,0x8
c000959f:	e8 d1 e2 ff ff       	call   c0007875 <malloc>
c00095a4:	83 c4 0c             	add    esp,0xc
c00095a7:	89 c1                	mov    ecx,eax
c00095a9:	a3 ac 2f 02 c0       	mov    ds:0xc0022fac,eax
c00095ae:	31 d2                	xor    edx,edx
c00095b0:	a1 10 00 02 c0       	mov    eax,ds:0xc0020010
c00095b5:	f7 35 0c 00 02 c0    	div    DWORD PTR ds:0xc002000c
c00095bb:	c1 e8 05             	shr    eax,0x5
c00095be:	50                   	push   eax
c00095bf:	6a 00                	push   0x0
c00095c1:	51                   	push   ecx
c00095c2:	e8 09 6f ff ff       	call   c00004d0 <memset>
c00095c7:	83 c4 18             	add    esp,0x18
c00095ca:	5b                   	pop    ebx
c00095cb:	c3                   	ret    

c00095cc <VAS::VAS(VAS*)>:
c00095cc:	83 ec 0c             	sub    esp,0xc
c00095cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00095da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095de:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00095e5:	83 ec 0c             	sub    esp,0xc
c00095e8:	68 cc e1 01 c0       	push   0xc001e1cc
c00095ed:	e8 25 6d 00 00       	call   c0010317 <KePanic(char const*)>
c00095f2:	83 c4 10             	add    esp,0x10
c00095f5:	90                   	nop
c00095f6:	83 c4 0c             	add    esp,0xc
c00095f9:	c3                   	ret    

c00095fa <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00095fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095fe:	89 c2                	mov    edx,eax
c0009600:	c1 e8 0a             	shr    eax,0xa
c0009603:	c1 ea 16             	shr    edx,0x16
c0009606:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000960b:	19 c9                	sbb    ecx,ecx
c000960d:	c1 e2 0c             	shl    edx,0xc
c0009610:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009616:	25 fc 0f 00 00       	and    eax,0xffc
c000961b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009622:	01 d0                	add    eax,edx
c0009624:	c3                   	ret    
c0009625:	90                   	nop

c0009626 <VAS::getPageTableEntry(unsigned long)>:
c0009626:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000962a:	89 ca                	mov    edx,ecx
c000962c:	c1 e9 0a             	shr    ecx,0xa
c000962f:	c1 ea 16             	shr    edx,0x16
c0009632:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009638:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000963e:	c1 e0 0c             	shl    eax,0xc
c0009641:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009644:	c3                   	ret    

c0009645 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009645:	57                   	push   edi
c0009646:	56                   	push   esi
c0009647:	be 01 00 00 00       	mov    esi,0x1
c000964c:	53                   	push   ebx
c000964d:	83 ec 10             	sub    esp,0x10
c0009650:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009654:	c1 eb 0c             	shr    ebx,0xc
c0009657:	eb 3f                	jmp    c0009698 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009659:	83 ec 08             	sub    esp,0x8
c000965c:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c0009661:	57                   	push   edi
c0009662:	50                   	push   eax
c0009663:	e8 be ff ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c0009668:	83 c4 10             	add    esp,0x10
c000966b:	8b 00                	mov    eax,DWORD PTR [eax]
c000966d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009671:	f6 c4 04             	test   ah,0x4
c0009674:	75 60                	jne    c00096d6 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009676:	80 fa 04             	cmp    dl,0x4
c0009679:	74 79                	je     c00096f4 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c000967b:	80 fa 02             	cmp    dl,0x2
c000967e:	0f 84 89 00 00 00    	je     c000970d <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009684:	80 fa 03             	cmp    dl,0x3
c0009687:	0f 84 ae 00 00 00    	je     c000973b <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c000968d:	fe ca                	dec    dl
c000968f:	0f 84 93 00 00 00    	je     c0009728 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009695:	43                   	inc    ebx
c0009696:	31 f6                	xor    esi,esi
c0009698:	53                   	push   ebx
c0009699:	89 df                	mov    edi,ebx
c000969b:	e8 8d fc ff ff       	call   c000932d <Virt::getPageState(unsigned long)>
c00096a0:	c1 e7 0c             	shl    edi,0xc
c00096a3:	5a                   	pop    edx
c00096a4:	84 c0                	test   al,al
c00096a6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00096aa:	75 ad                	jne    c0009659 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00096ac:	83 ec 0c             	sub    esp,0xc
c00096af:	68 41 e3 01 c0       	push   0xc001e341
c00096b4:	e8 5e 6c 00 00       	call   c0010317 <KePanic(char const*)>
c00096b9:	5a                   	pop    edx
c00096ba:	59                   	pop    ecx
c00096bb:	57                   	push   edi
c00096bc:	8b 3d b0 2f 02 c0    	mov    edi,DWORD PTR ds:0xc0022fb0
c00096c2:	57                   	push   edi
c00096c3:	e8 5e ff ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c00096c8:	83 c4 10             	add    esp,0x10
c00096cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00096cd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00096d1:	f6 c4 04             	test   ah,0x4
c00096d4:	74 bf                	je     c0009695 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096d6:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00096da:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096df:	83 ec 0c             	sub    esp,0xc
c00096e2:	50                   	push   eax
c00096e3:	e8 07 e4 ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c00096e8:	83 c4 10             	add    esp,0x10
c00096eb:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00096ef:	80 fa 04             	cmp    dl,0x4
c00096f2:	75 87                	jne    c000967b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00096f4:	89 f0                	mov    eax,esi
c00096f6:	84 c0                	test   al,al
c00096f8:	75 47                	jne    c0009741 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c00096fa:	c7 44 24 20 f0 e1 01 c0 	mov    DWORD PTR [esp+0x20],0xc001e1f0
c0009702:	83 c4 10             	add    esp,0x10
c0009705:	5b                   	pop    ebx
c0009706:	5e                   	pop    esi
c0009707:	5f                   	pop    edi
c0009708:	e9 0a 6c 00 00       	jmp    c0010317 <KePanic(char const*)>
c000970d:	89 f0                	mov    eax,esi
c000970f:	84 c0                	test   al,al
c0009711:	75 15                	jne    c0009728 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009713:	83 ec 0c             	sub    esp,0xc
c0009716:	68 5d e3 01 c0       	push   0xc001e35d
c000971b:	e8 f7 6b 00 00       	call   c0010317 <KePanic(char const*)>
c0009720:	83 c4 10             	add    esp,0x10
c0009723:	e9 6d ff ff ff       	jmp    c0009695 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009728:	83 ec 08             	sub    esp,0x8
c000972b:	6a 00                	push   0x0
c000972d:	53                   	push   ebx
c000972e:	e8 c5 fb ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009733:	83 c4 10             	add    esp,0x10
c0009736:	e9 5a ff ff ff       	jmp    c0009695 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000973b:	89 f0                	mov    eax,esi
c000973d:	84 c0                	test   al,al
c000973f:	75 15                	jne    c0009756 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009741:	83 ec 08             	sub    esp,0x8
c0009744:	6a 00                	push   0x0
c0009746:	53                   	push   ebx
c0009747:	e8 ac fb ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000974c:	83 c4 10             	add    esp,0x10
c000974f:	83 c4 10             	add    esp,0x10
c0009752:	5b                   	pop    ebx
c0009753:	5e                   	pop    esi
c0009754:	5f                   	pop    edi
c0009755:	c3                   	ret    
c0009756:	c7 44 24 20 79 e3 01 c0 	mov    DWORD PTR [esp+0x20],0xc001e379
c000975e:	83 c4 10             	add    esp,0x10
c0009761:	5b                   	pop    ebx
c0009762:	5e                   	pop    esi
c0009763:	5f                   	pop    edi
c0009764:	e9 ae 6b 00 00       	jmp    c0010317 <KePanic(char const*)>
c0009769:	90                   	nop

c000976a <VAS::freeAllocatedPages(unsigned long)>:
c000976a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000976e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009772:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009776:	74 09                	je     c0009781 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009778:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000977c:	e9 c4 fe ff ff       	jmp    c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c0009781:	c7 44 24 04 14 e2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e214
c0009789:	e9 80 0e 00 00       	jmp    c000a60e <Dbg::kprintf(char const*, ...)>

c000978e <VAS::virtualToPhysical(unsigned long)>:
c000978e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009792:	50                   	push   eax
c0009793:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009797:	52                   	push   edx
c0009798:	e8 89 fe ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c000979d:	59                   	pop    ecx
c000979e:	8b 00                	mov    eax,DWORD PTR [eax]
c00097a0:	5a                   	pop    edx
c00097a1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00097a6:	c3                   	ret    
c00097a7:	90                   	nop

c00097a8 <VAS::reflagRange(unsigned long, int, int, int)>:
c00097a8:	55                   	push   ebp
c00097a9:	57                   	push   edi
c00097aa:	56                   	push   esi
c00097ab:	53                   	push   ebx
c00097ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00097b0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00097b4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00097b8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00097bc:	85 db                	test   ebx,ebx
c00097be:	7e 22                	jle    c00097e2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00097c0:	c1 e3 0c             	shl    ebx,0xc
c00097c3:	01 f3                	add    ebx,esi
c00097c5:	56                   	push   esi
c00097c6:	81 c6 00 10 00 00    	add    esi,0x1000
c00097cc:	55                   	push   ebp
c00097cd:	e8 54 fe ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c00097d2:	5a                   	pop    edx
c00097d3:	59                   	pop    ecx
c00097d4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00097d6:	21 f9                	and    ecx,edi
c00097d8:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00097dc:	39 f3                	cmp    ebx,esi
c00097de:	89 08                	mov    DWORD PTR [eax],ecx
c00097e0:	75 e3                	jne    c00097c5 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00097e2:	5b                   	pop    ebx
c00097e3:	5e                   	pop    esi
c00097e4:	5f                   	pop    edi
c00097e5:	5d                   	pop    ebp
c00097e6:	c3                   	ret    
c00097e7:	90                   	nop

c00097e8 <VAS::VAS()>:
c00097e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00097f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00097fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009802:	a3 b0 2f 02 c0       	mov    ds:0xc0022fb0,eax
c0009807:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000980b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000980f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009813:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000981a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009821:	ba 7d 10 02 c0       	mov    edx,0xc002107d
c0009826:	b8 00 10 02 c0       	mov    eax,0xc0021000
c000982b:	29 c2                	sub    edx,eax
c000982d:	89 d0                	mov    eax,edx
c000982f:	05 ff 0f 00 00       	add    eax,0xfff
c0009834:	c1 e8 0c             	shr    eax,0xc
c0009837:	89 c2                	mov    edx,eax
c0009839:	b8 00 10 02 c0       	mov    eax,0xc0021000
c000983e:	6a 04                	push   0x4
c0009840:	6a ff                	push   0xffffffff
c0009842:	52                   	push   edx
c0009843:	50                   	push   eax
c0009844:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009848:	e8 5b ff ff ff       	call   c00097a8 <VAS::reflagRange(unsigned long, int, int, int)>
c000984d:	83 c4 14             	add    esp,0x14
c0009850:	90                   	nop
c0009851:	c3                   	ret    

c0009852 <VAS::setToWriteCombining(unsigned long, int)>:
c0009852:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009857:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000985d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009864:	75 01                	jne    c0009867 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009866:	c3                   	ret    
c0009867:	68 80 00 00 00       	push   0x80
c000986c:	6a ff                	push   0xffffffff
c000986e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009872:	50                   	push   eax
c0009873:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009877:	52                   	push   edx
c0009878:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000987c:	51                   	push   ecx
c000987d:	e8 26 ff ff ff       	call   c00097a8 <VAS::reflagRange(unsigned long, int, int, int)>
c0009882:	83 c4 14             	add    esp,0x14
c0009885:	c3                   	ret    

c0009886 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009886:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000988b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000988f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009892:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009896:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009899:	19 c0                	sbb    eax,eax
c000989b:	83 ca 03             	or     edx,0x3
c000989e:	83 e0 fc             	and    eax,0xfffffffc
c00098a1:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00098a8:	0f 20 d8             	mov    eax,cr3
c00098ab:	0f 22 d8             	mov    cr3,eax
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::~VAS()>:
c00098b0:	83 ec 2c             	sub    esp,0x2c
c00098b3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00098bb:	fa                   	cli    
c00098bc:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00098c1:	40                   	inc    eax
c00098c2:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00098c7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00098cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00098ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00098d1:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00098d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00098db:	6a 01                	push   0x1
c00098dd:	50                   	push   eax
c00098de:	e8 a3 ff ff ff       	call   c0009886 <VAS::mapOtherVASIn(bool, VAS*)>
c00098e3:	83 c4 0c             	add    esp,0xc
c00098e6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00098ee:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00098f6:	0f 8f d4 00 00 00    	jg     c00099d0 <VAS::~VAS()+0x120>
c00098fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009900:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009903:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009907:	c1 e2 02             	shl    edx,0x2
c000990a:	01 d0                	add    eax,edx
c000990c:	8b 00                	mov    eax,DWORD PTR [eax]
c000990e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009916:	83 e0 01             	and    eax,0x1
c0009919:	0f 84 a8 00 00 00    	je     c00099c7 <VAS::~VAS()+0x117>
c000991f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009927:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000992f:	7f 72                	jg     c00099a3 <VAS::~VAS()+0xf3>
c0009931:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009935:	c1 e0 0a             	shl    eax,0xa
c0009938:	89 c2                	mov    edx,eax
c000993a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000993e:	01 d0                	add    eax,edx
c0009940:	c1 e0 0c             	shl    eax,0xc
c0009943:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009947:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000994c:	8b 00                	mov    eax,DWORD PTR [eax]
c000994e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009951:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009957:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000995b:	6a 01                	push   0x1
c000995d:	50                   	push   eax
c000995e:	e8 97 fc ff ff       	call   c00095fa <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009963:	83 c4 0c             	add    esp,0xc
c0009966:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000996a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000996e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009970:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009978:	25 01 04 00 00       	and    eax,0x401
c000997d:	3d 01 04 00 00       	cmp    eax,0x401
c0009982:	75 19                	jne    c000999d <VAS::~VAS()+0xed>
c0009984:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009988:	25 00 f0 ff ff       	and    eax,0xfffff000
c000998d:	83 ec 0c             	sub    esp,0xc
c0009990:	50                   	push   eax
c0009991:	e8 59 e1 ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c0009996:	83 c4 10             	add    esp,0x10
c0009999:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000999d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00099a1:	eb 84                	jmp    c0009927 <VAS::~VAS()+0x77>
c00099a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099a7:	25 00 04 00 00       	and    eax,0x400
c00099ac:	74 19                	je     c00099c7 <VAS::~VAS()+0x117>
c00099ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099b2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099b7:	83 ec 0c             	sub    esp,0xc
c00099ba:	50                   	push   eax
c00099bb:	e8 2f e1 ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c00099c0:	83 c4 10             	add    esp,0x10
c00099c3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099c7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00099cb:	e9 1e ff ff ff       	jmp    c00098ee <VAS::~VAS()+0x3e>
c00099d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00099d4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099d7:	83 ec 0c             	sub    esp,0xc
c00099da:	50                   	push   eax
c00099db:	e8 65 fc ff ff       	call   c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c00099e0:	83 c4 10             	add    esp,0x10
c00099e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00099e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00099ea:	83 ec 0c             	sub    esp,0xc
c00099ed:	50                   	push   eax
c00099ee:	e8 fc e0 ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c00099f3:	83 c4 10             	add    esp,0x10
c00099f6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099fa:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00099ff:	48                   	dec    eax
c0009a00:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0009a05:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0009a0a:	85 c0                	test   eax,eax
c0009a0c:	75 01                	jne    c0009a0f <VAS::~VAS()+0x15f>
c0009a0e:	fb                   	sti    
c0009a0f:	90                   	nop
c0009a10:	83 c4 2c             	add    esp,0x2c
c0009a13:	c3                   	ret    

c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009a14:	55                   	push   ebp
c0009a15:	57                   	push   edi
c0009a16:	56                   	push   esi
c0009a17:	53                   	push   ebx
c0009a18:	83 ec 1c             	sub    esp,0x1c
c0009a1b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009a1f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a23:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009a29:	77 0b                	ja     c0009a36 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009a2b:	0f 20 d8             	mov    eax,cr3
c0009a2e:	0f 20 d8             	mov    eax,cr3
c0009a31:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009a34:	75 47                	jne    c0009a7d <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009a36:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a3a:	09 d8                	or     eax,ebx
c0009a3c:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a41:	75 57                	jne    c0009a9a <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009a43:	89 de                	mov    esi,ebx
c0009a45:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a48:	c1 ee 16             	shr    esi,0x16
c0009a4b:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009a52:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009a56:	74 54                	je     c0009aac <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009a58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009a5c:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009a62:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009a66:	c1 e6 0c             	shl    esi,0xc
c0009a69:	c1 eb 0a             	shr    ebx,0xa
c0009a6c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009a72:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009a75:	83 c4 1c             	add    esp,0x1c
c0009a78:	5b                   	pop    ebx
c0009a79:	5e                   	pop    esi
c0009a7a:	5f                   	pop    edi
c0009a7b:	5d                   	pop    ebp
c0009a7c:	c3                   	ret    
c0009a7d:	83 ec 0c             	sub    esp,0xc
c0009a80:	68 38 e2 01 c0       	push   0xc001e238
c0009a85:	e8 84 0b 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0009a8a:	83 c4 10             	add    esp,0x10
c0009a8d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a91:	09 d8                	or     eax,ebx
c0009a93:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a98:	74 a9                	je     c0009a43 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009a9a:	83 ec 0c             	sub    esp,0xc
c0009a9d:	68 a0 e2 01 c0       	push   0xc001e2a0
c0009aa2:	e8 70 68 00 00       	call   c0010317 <KePanic(char const*)>
c0009aa7:	83 c4 10             	add    esp,0x10
c0009aaa:	eb 97                	jmp    c0009a43 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009aac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ab0:	e8 9c e0 ff ff       	call   c0007b51 <Phys::allocatePage()>
c0009ab5:	83 ec 0c             	sub    esp,0xc
c0009ab8:	89 c5                	mov    ebp,eax
c0009aba:	8b 0d b0 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fb0
c0009ac0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009ac4:	6a 01                	push   0x1
c0009ac6:	e8 86 f8 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c0009acb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ad2:	6a 01                	push   0x1
c0009ad4:	50                   	push   eax
c0009ad5:	55                   	push   ebp
c0009ad6:	81 cd 07 04 00 00    	or     ebp,0x407
c0009adc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009ae0:	51                   	push   ecx
c0009ae1:	e8 28 02 00 00       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009ae6:	83 c4 1c             	add    esp,0x1c
c0009ae9:	68 00 10 00 00       	push   0x1000
c0009aee:	6a 00                	push   0x0
c0009af0:	50                   	push   eax
c0009af1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009af5:	e8 d6 69 ff ff       	call   c00004d0 <memset>
c0009afa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009afe:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009b01:	e8 3f fb ff ff       	call   c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c0009b06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b0a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009b0d:	83 c4 10             	add    esp,0x10
c0009b10:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009b13:	e9 40 ff ff ff       	jmp    c0009a58 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009b18 <VAS::allocatePages(int, int)>:
c0009b18:	55                   	push   ebp
c0009b19:	57                   	push   edi
c0009b1a:	56                   	push   esi
c0009b1b:	53                   	push   ebx
c0009b1c:	83 ec 1c             	sub    esp,0x1c
c0009b1f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009b23:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009b28:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b2e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009b34:	83 e0 01             	and    eax,0x1
c0009b37:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009b3b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009b3f:	0f 85 cc 00 00 00    	jne    c0009c11 <VAS::allocatePages(int, int)+0xf9>
c0009b45:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b4c:	85 c0                	test   eax,eax
c0009b4e:	0f 84 a1 00 00 00    	je     c0009bf5 <VAS::allocatePages(int, int)+0xdd>
c0009b54:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009b58:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b5c:	c1 e6 0c             	shl    esi,0xc
c0009b5f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009b63:	85 c0                	test   eax,eax
c0009b65:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009b68:	7e 33                	jle    c0009b9d <VAS::allocatePages(int, int)+0x85>
c0009b6a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009b6e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b72:	81 cd 00 04 00 00    	or     ebp,0x400
c0009b78:	e8 d4 df ff ff       	call   c0007b51 <Phys::allocatePage()>
c0009b7d:	55                   	push   ebp
c0009b7e:	53                   	push   ebx
c0009b7f:	50                   	push   eax
c0009b80:	57                   	push   edi
c0009b81:	e8 8e fe ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b86:	83 c4 10             	add    esp,0x10
c0009b89:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b8e:	74 03                	je     c0009b93 <VAS::allocatePages(int, int)+0x7b>
c0009b90:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b93:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b99:	39 de                	cmp    esi,ebx
c0009b9b:	75 db                	jne    c0009b78 <VAS::allocatePages(int, int)+0x60>
c0009b9d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ba2:	75 12                	jne    c0009bb6 <VAS::allocatePages(int, int)+0x9e>
c0009ba4:	0f 20 d8             	mov    eax,cr3
c0009ba7:	0f 22 d8             	mov    cr3,eax
c0009baa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bae:	83 c4 1c             	add    esp,0x1c
c0009bb1:	5b                   	pop    ebx
c0009bb2:	5e                   	pop    esi
c0009bb3:	5f                   	pop    edi
c0009bb4:	5d                   	pop    ebp
c0009bb5:	c3                   	ret    
c0009bb6:	c1 ee 0a             	shr    esi,0xa
c0009bb9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009bbd:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009bc3:	c1 eb 0a             	shr    ebx,0xa
c0009bc6:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009bcc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bd2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009bd8:	39 c3                	cmp    ebx,eax
c0009bda:	77 ce                	ja     c0009baa <VAS::allocatePages(int, int)+0x92>
c0009bdc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bdf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009be5:	39 d8                	cmp    eax,ebx
c0009be7:	73 f3                	jae    c0009bdc <VAS::allocatePages(int, int)+0xc4>
c0009be9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bed:	83 c4 1c             	add    esp,0x1c
c0009bf0:	5b                   	pop    ebx
c0009bf1:	5e                   	pop    esi
c0009bf2:	5f                   	pop    edi
c0009bf3:	5d                   	pop    ebp
c0009bf4:	c3                   	ret    
c0009bf5:	83 ec 0c             	sub    esp,0xc
c0009bf8:	68 c4 e2 01 c0       	push   0xc001e2c4
c0009bfd:	e8 15 67 00 00       	call   c0010317 <KePanic(char const*)>
c0009c02:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009c05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c09:	83 c4 10             	add    esp,0x10
c0009c0c:	e9 43 ff ff ff       	jmp    c0009b54 <VAS::allocatePages(int, int)+0x3c>
c0009c11:	83 ec 0c             	sub    esp,0xc
c0009c14:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009c18:	51                   	push   ecx
c0009c19:	e8 33 f7 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c0009c1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c22:	83 c4 10             	add    esp,0x10
c0009c25:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009c2a:	0f 87 9b 00 00 00    	ja     c0009ccb <VAS::allocatePages(int, int)+0x1b3>
c0009c30:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009c34:	85 d2                	test   edx,edx
c0009c36:	7e 3c                	jle    c0009c74 <VAS::allocatePages(int, int)+0x15c>
c0009c38:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c3c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009c40:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009c44:	c1 e5 0c             	shl    ebp,0xc
c0009c47:	81 ce 00 04 00 00    	or     esi,0x400
c0009c4d:	01 dd                	add    ebp,ebx
c0009c4f:	e8 fd de ff ff       	call   c0007b51 <Phys::allocatePage()>
c0009c54:	56                   	push   esi
c0009c55:	53                   	push   ebx
c0009c56:	50                   	push   eax
c0009c57:	57                   	push   edi
c0009c58:	e8 b7 fd ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c5d:	83 c4 10             	add    esp,0x10
c0009c60:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c65:	74 03                	je     c0009c6a <VAS::allocatePages(int, int)+0x152>
c0009c67:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c6a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c70:	39 dd                	cmp    ebp,ebx
c0009c72:	75 db                	jne    c0009c4f <VAS::allocatePages(int, int)+0x137>
c0009c74:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c79:	0f 84 25 ff ff ff    	je     c0009ba4 <VAS::allocatePages(int, int)+0x8c>
c0009c7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c87:	89 d3                	mov    ebx,edx
c0009c89:	c1 e0 0c             	shl    eax,0xc
c0009c8c:	c1 eb 0a             	shr    ebx,0xa
c0009c8f:	01 d0                	add    eax,edx
c0009c91:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c97:	c1 e8 0a             	shr    eax,0xa
c0009c9a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ca0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ca5:	2d 00 00 40 00       	sub    eax,0x400000
c0009caa:	39 c3                	cmp    ebx,eax
c0009cac:	0f 87 f8 fe ff ff    	ja     c0009baa <VAS::allocatePages(int, int)+0x92>
c0009cb2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cb5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009cbb:	39 d8                	cmp    eax,ebx
c0009cbd:	73 f3                	jae    c0009cb2 <VAS::allocatePages(int, int)+0x19a>
c0009cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cc3:	83 c4 1c             	add    esp,0x1c
c0009cc6:	5b                   	pop    ebx
c0009cc7:	5e                   	pop    esi
c0009cc8:	5f                   	pop    edi
c0009cc9:	5d                   	pop    ebp
c0009cca:	c3                   	ret    
c0009ccb:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009cd0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009cd6:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009cdd:	0f 84 4d ff ff ff    	je     c0009c30 <VAS::allocatePages(int, int)+0x118>
c0009ce3:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009ceb:	e9 40 ff ff ff       	jmp    c0009c30 <VAS::allocatePages(int, int)+0x118>

c0009cf0 <VAS::setCPUSpecific(unsigned long)>:
c0009cf0:	83 ec 0c             	sub    esp,0xc
c0009cf3:	6a 05                	push   0x5
c0009cf5:	68 00 00 40 c2       	push   0xc2400000
c0009cfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009cfe:	50                   	push   eax
c0009cff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009d03:	52                   	push   edx
c0009d04:	e8 0b fd ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d09:	83 c4 1c             	add    esp,0x1c
c0009d0c:	c3                   	ret    
c0009d0d:	90                   	nop

c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009d0e:	55                   	push   ebp
c0009d0f:	57                   	push   edi
c0009d10:	56                   	push   esi
c0009d11:	53                   	push   ebx
c0009d12:	83 ec 1c             	sub    esp,0x1c
c0009d15:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009d1a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d1e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009d24:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009d28:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009d2e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009d32:	83 e0 01             	and    eax,0x1
c0009d35:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009d39:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d3d:	85 c0                	test   eax,eax
c0009d3f:	7e 39                	jle    c0009d7a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	89 f3                	mov    ebx,esi
c0009d47:	c1 e0 0c             	shl    eax,0xc
c0009d4a:	01 f0                	add    eax,esi
c0009d4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009d50:	55                   	push   ebp
c0009d51:	53                   	push   ebx
c0009d52:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d56:	29 f0                	sub    eax,esi
c0009d58:	01 d8                	add    eax,ebx
c0009d5a:	50                   	push   eax
c0009d5b:	57                   	push   edi
c0009d5c:	e8 b3 fc ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d61:	83 c4 10             	add    esp,0x10
c0009d64:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d69:	74 03                	je     c0009d6e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009d6b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009d6e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009d74:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009d78:	75 d6                	jne    c0009d50 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009d7a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d7f:	75 10                	jne    c0009d91 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009d81:	0f 20 d8             	mov    eax,cr3
c0009d84:	0f 22 d8             	mov    cr3,eax
c0009d87:	83 c4 1c             	add    esp,0x1c
c0009d8a:	89 f0                	mov    eax,esi
c0009d8c:	5b                   	pop    ebx
c0009d8d:	5e                   	pop    esi
c0009d8e:	5f                   	pop    edi
c0009d8f:	5d                   	pop    ebp
c0009d90:	c3                   	ret    
c0009d91:	89 f3                	mov    ebx,esi
c0009d93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d97:	c1 eb 0a             	shr    ebx,0xa
c0009d9a:	c1 e0 0c             	shl    eax,0xc
c0009d9d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009da3:	01 f0                	add    eax,esi
c0009da5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009dab:	c1 e8 0a             	shr    eax,0xa
c0009dae:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009db3:	2d 00 00 40 00       	sub    eax,0x400000
c0009db8:	39 c3                	cmp    ebx,eax
c0009dba:	77 cb                	ja     c0009d87 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009dbc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009dbf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009dc5:	39 d8                	cmp    eax,ebx
c0009dc7:	73 f3                	jae    c0009dbc <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009dc9:	83 c4 1c             	add    esp,0x1c
c0009dcc:	89 f0                	mov    eax,esi
c0009dce:	5b                   	pop    ebx
c0009dcf:	5e                   	pop    esi
c0009dd0:	5f                   	pop    edi
c0009dd1:	5d                   	pop    ebp
c0009dd2:	c3                   	ret    
c0009dd3:	90                   	nop

c0009dd4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009dd4:	55                   	push   ebp
c0009dd5:	57                   	push   edi
c0009dd6:	56                   	push   esi
c0009dd7:	53                   	push   ebx
c0009dd8:	83 ec 1c             	sub    esp,0x1c
c0009ddb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009ddf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009de3:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009de7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009deb:	a9 ff 0f 00 00       	test   eax,0xfff
c0009df0:	75 4a                	jne    c0009e3c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009df2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009df6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009df9:	c1 eb 16             	shr    ebx,0x16
c0009dfc:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009e03:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009e07:	74 4d                	je     c0009e56 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009e09:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e0d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009e11:	c1 e8 0a             	shr    eax,0xa
c0009e14:	80 fa 01             	cmp    dl,0x1
c0009e17:	19 d2                	sbb    edx,edx
c0009e19:	c1 e3 0c             	shl    ebx,0xc
c0009e1c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009e20:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009e26:	25 fc 0f 00 00       	and    eax,0xffc
c0009e2b:	01 d8                	add    eax,ebx
c0009e2d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009e34:	83 c4 1c             	add    esp,0x1c
c0009e37:	5b                   	pop    ebx
c0009e38:	5e                   	pop    esi
c0009e39:	5f                   	pop    edi
c0009e3a:	5d                   	pop    ebp
c0009e3b:	c3                   	ret    
c0009e3c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009e40:	83 ec 0c             	sub    esp,0xc
c0009e43:	68 f0 e2 01 c0       	push   0xc001e2f0
c0009e48:	e8 ca 64 00 00       	call   c0010317 <KePanic(char const*)>
c0009e4d:	83 c4 10             	add    esp,0x10
c0009e50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e54:	eb 9c                	jmp    c0009df2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009e56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e5a:	e8 f2 dc ff ff       	call   c0007b51 <Phys::allocatePage()>
c0009e5f:	83 ec 0c             	sub    esp,0xc
c0009e62:	89 c5                	mov    ebp,eax
c0009e64:	8b 0d b0 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fb0
c0009e6a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009e6e:	6a 01                	push   0x1
c0009e70:	e8 dc f4 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c0009e75:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009e7c:	6a 01                	push   0x1
c0009e7e:	50                   	push   eax
c0009e7f:	55                   	push   ebp
c0009e80:	81 cd 07 04 00 00    	or     ebp,0x407
c0009e86:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009e8a:	51                   	push   ecx
c0009e8b:	e8 7e fe ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e90:	83 c4 1c             	add    esp,0x1c
c0009e93:	68 00 10 00 00       	push   0x1000
c0009e98:	6a 00                	push   0x0
c0009e9a:	50                   	push   eax
c0009e9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e9f:	e8 2c 66 ff ff       	call   c00004d0 <memset>
c0009ea4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009ea8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009eab:	e8 95 f7 ff ff       	call   c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c0009eb0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009eb3:	83 c4 10             	add    esp,0x10
c0009eb6:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009eb9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ebd:	e9 47 ff ff ff       	jmp    c0009e09 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009ec2 <VAS::VAS(bool)>:
c0009ec2:	53                   	push   ebx
c0009ec3:	83 ec 28             	sub    esp,0x28
c0009ec6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009eca:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ed2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ed9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009edd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ee4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ee8:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009eec:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009eef:	e8 5d dc ff ff       	call   c0007b51 <Phys::allocatePage()>
c0009ef4:	89 c2                	mov    edx,eax
c0009ef6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009efa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009efd:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c0009f03:	83 ec 0c             	sub    esp,0xc
c0009f06:	6a 01                	push   0x1
c0009f08:	e8 44 f4 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 c2                	mov    edx,eax
c0009f12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009f19:	83 ec 0c             	sub    esp,0xc
c0009f1c:	6a 03                	push   0x3
c0009f1e:	6a 01                	push   0x1
c0009f20:	52                   	push   edx
c0009f21:	50                   	push   eax
c0009f22:	53                   	push   ebx
c0009f23:	e8 e6 fd ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009f28:	83 c4 20             	add    esp,0x20
c0009f2b:	89 c2                	mov    edx,eax
c0009f2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f31:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009f34:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009f3c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009f44:	7f 1c                	jg     c0009f62 <VAS::VAS(bool)+0xa0>
c0009f46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f4a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f4d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009f51:	c1 e2 02             	shl    edx,0x2
c0009f54:	01 d0                	add    eax,edx
c0009f56:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f5c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009f60:	eb da                	jmp    c0009f3c <VAS::VAS(bool)+0x7a>
c0009f62:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009f6a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009f72:	7f 7a                	jg     c0009fee <VAS::VAS(bool)+0x12c>
c0009f74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f78:	2d 00 02 00 00       	sub    eax,0x200
c0009f7d:	c1 e0 0c             	shl    eax,0xc
c0009f80:	83 c8 05             	or     eax,0x5
c0009f83:	89 c2                	mov    edx,eax
c0009f85:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009f8a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f90:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f96:	83 e0 10             	and    eax,0x10
c0009f99:	84 c0                	test   al,al
c0009f9b:	74 07                	je     c0009fa4 <VAS::VAS(bool)+0xe2>
c0009f9d:	b8 00 01 00 00       	mov    eax,0x100
c0009fa2:	eb 05                	jmp    c0009fa9 <VAS::VAS(bool)+0xe7>
c0009fa4:	b8 00 00 00 00       	mov    eax,0x0
c0009fa9:	09 d0                	or     eax,edx
c0009fab:	89 c1                	mov    ecx,eax
c0009fad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fb1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fb4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009fb8:	c1 e2 02             	shl    edx,0x2
c0009fbb:	01 d0                	add    eax,edx
c0009fbd:	89 ca                	mov    edx,ecx
c0009fbf:	89 10                	mov    DWORD PTR [eax],edx
c0009fc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009fc5:	2d 40 03 00 00       	sub    eax,0x340
c0009fca:	83 f8 7f             	cmp    eax,0x7f
c0009fcd:	77 16                	ja     c0009fe5 <VAS::VAS(bool)+0x123>
c0009fcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fd3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fd6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009fda:	c1 e2 02             	shl    edx,0x2
c0009fdd:	01 d0                	add    eax,edx
c0009fdf:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009fe5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009fe9:	e9 7c ff ff ff       	jmp    c0009f6a <VAS::VAS(bool)+0xa8>
c0009fee:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009ff3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ff9:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009fff:	83 e0 10             	and    eax,0x10
c000a002:	84 c0                	test   al,al
c000a004:	74 07                	je     c000a00d <VAS::VAS(bool)+0x14b>
c000a006:	b8 03 41 00 00       	mov    eax,0x4103
c000a00b:	eb 05                	jmp    c000a012 <VAS::VAS(bool)+0x150>
c000a00d:	b8 03 40 00 00       	mov    eax,0x4003
c000a012:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a016:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a019:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a01f:	89 02                	mov    DWORD PTR [edx],eax
c000a021:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000a026:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a02c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a032:	83 ec 08             	sub    esp,0x8
c000a035:	50                   	push   eax
c000a036:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a03a:	e8 b1 fc ff ff       	call   c0009cf0 <VAS::setCPUSpecific(unsigned long)>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a046:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a049:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000a04e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a054:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a05a:	83 e0 10             	and    eax,0x10
c000a05d:	84 c0                	test   al,al
c000a05f:	74 07                	je     c000a068 <VAS::VAS(bool)+0x1a6>
c000a061:	b8 00 01 00 00       	mov    eax,0x100
c000a066:	eb 05                	jmp    c000a06d <VAS::VAS(bool)+0x1ab>
c000a068:	b8 00 00 00 00       	mov    eax,0x0
c000a06d:	09 c2                	or     edx,eax
c000a06f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a073:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a076:	05 fc 0f 00 00       	add    eax,0xffc
c000a07b:	83 ca 03             	or     edx,0x3
c000a07e:	89 10                	mov    DWORD PTR [eax],edx
c000a080:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000a085:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a08b:	83 ec 0c             	sub    esp,0xc
c000a08e:	50                   	push   eax
c000a08f:	e8 4c 1c 00 00       	call   c000bce0 <Device::getName()>
c000a094:	83 c4 10             	add    esp,0x10
c000a097:	83 ec 08             	sub    esp,0x8
c000a09a:	68 93 e3 01 c0       	push   0xc001e393
c000a09f:	50                   	push   eax
c000a0a0:	e8 3b 66 ff ff       	call   c00006e0 <strcmp>
c000a0a5:	83 c4 10             	add    esp,0x10
c000a0a8:	85 c0                	test   eax,eax
c000a0aa:	0f 94 c0             	sete   al
c000a0ad:	84 c0                	test   al,al
c000a0af:	0f 84 87 00 00 00    	je     c000a13c <VAS::VAS(bool)+0x27a>
c000a0b5:	fa                   	cli    
c000a0b6:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000a0bb:	40                   	inc    eax
c000a0bc:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000a0c1:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000a0c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0cc:	05 7c 09 00 00       	add    eax,0x97c
c000a0d1:	83 ec 0c             	sub    esp,0xc
c000a0d4:	50                   	push   eax
c000a0d5:	e8 98 d2 ff ff       	call   c0007372 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a0da:	83 c4 10             	add    esp,0x10
c000a0dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0e2:	89 c3                	mov    ebx,eax
c000a0e4:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000a0e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0ef:	05 7c 09 00 00       	add    eax,0x97c
c000a0f4:	83 ec 0c             	sub    esp,0xc
c000a0f7:	50                   	push   eax
c000a0f8:	e8 75 d2 ff ff       	call   c0007372 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a0fd:	83 c4 10             	add    esp,0x10
c000a100:	83 ec 08             	sub    esp,0x8
c000a103:	50                   	push   eax
c000a104:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a108:	e8 19 f5 ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c000a10d:	83 c4 10             	add    esp,0x10
c000a110:	8b 00                	mov    eax,DWORD PTR [eax]
c000a112:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a117:	6a 11                	push   0x11
c000a119:	53                   	push   ebx
c000a11a:	50                   	push   eax
c000a11b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a11f:	e8 f0 f8 ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a124:	83 c4 10             	add    esp,0x10
c000a127:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000a12c:	48                   	dec    eax
c000a12d:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000a132:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000a137:	85 c0                	test   eax,eax
c000a139:	75 01                	jne    c000a13c <VAS::VAS(bool)+0x27a>
c000a13b:	fb                   	sti    
c000a13c:	90                   	nop
c000a13d:	83 c4 28             	add    esp,0x28
c000a140:	5b                   	pop    ebx
c000a141:	c3                   	ret    

c000a142 <VAS::evict(unsigned long)>:
c000a142:	55                   	push   ebp
c000a143:	57                   	push   edi
c000a144:	56                   	push   esi
c000a145:	53                   	push   ebx
c000a146:	83 ec 1c             	sub    esp,0x1c
c000a149:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a14d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a151:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a155:	e8 38 f3 ff ff       	call   c0009492 <Virt::allocateSwapfilePage()>
c000a15a:	8b 0d 0c 00 02 c0    	mov    ecx,DWORD PTR ds:0xc002000c
c000a160:	89 c7                	mov    edi,eax
c000a162:	85 c9                	test   ecx,ecx
c000a164:	7e 3e                	jle    c000a1a4 <VAS::evict(unsigned long)+0x62>
c000a166:	89 ee                	mov    esi,ebp
c000a168:	31 db                	xor    ebx,ebx
c000a16a:	83 ec 0c             	sub    esp,0xc
c000a16d:	57                   	push   edi
c000a16e:	e8 0d f3 ff ff       	call   c0009480 <Virt::swapIDToSector(unsigned long)>
c000a173:	89 34 24             	mov    DWORD PTR [esp],esi
c000a176:	01 d8                	add    eax,ebx
c000a178:	6a 01                	push   0x1
c000a17a:	31 d2                	xor    edx,edx
c000a17c:	43                   	inc    ebx
c000a17d:	52                   	push   edx
c000a17e:	81 c6 00 02 00 00    	add    esi,0x200
c000a184:	50                   	push   eax
c000a185:	0f be 05 18 00 02 c0 	movsx  eax,BYTE PTR ds:0xc0020018
c000a18c:	8b 14 85 1c 53 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdace4]
c000a193:	52                   	push   edx
c000a194:	e8 f7 2b 00 00       	call   c000cd90 <LogicalDisk::write(unsigned long long, int, void*)>
c000a199:	83 c4 20             	add    esp,0x20
c000a19c:	39 1d 0c 00 02 c0    	cmp    DWORD PTR ds:0xc002000c,ebx
c000a1a2:	7f c6                	jg     c000a16a <VAS::evict(unsigned long)+0x28>
c000a1a4:	83 ec 08             	sub    esp,0x8
c000a1a7:	c1 e7 0b             	shl    edi,0xb
c000a1aa:	55                   	push   ebp
c000a1ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a1af:	50                   	push   eax
c000a1b0:	e8 71 f4 ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c000a1b5:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1b7:	89 d1                	mov    ecx,edx
c000a1b9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a1bf:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a1c5:	09 cf                	or     edi,ecx
c000a1c7:	89 38                	mov    DWORD PTR [eax],edi
c000a1c9:	89 14 24             	mov    DWORD PTR [esp],edx
c000a1cc:	ff 05 a8 2f 02 c0    	inc    DWORD PTR ds:0xc0022fa8
c000a1d2:	e8 18 d9 ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c000a1d7:	0f 20 d8             	mov    eax,cr3
c000a1da:	0f 22 d8             	mov    cr3,eax
c000a1dd:	a1 a4 2f 02 c0       	mov    eax,ds:0xc0022fa4
c000a1e2:	c7 44 24 40 a1 e3 01 c0 	mov    DWORD PTR [esp+0x40],0xc001e3a1
c000a1ea:	8d 50 01             	lea    edx,[eax+0x1]
c000a1ed:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a1f1:	89 15 a4 2f 02 c0    	mov    DWORD PTR ds:0xc0022fa4,edx
c000a1f7:	83 c4 2c             	add    esp,0x2c
c000a1fa:	5b                   	pop    ebx
c000a1fb:	5e                   	pop    esi
c000a1fc:	5f                   	pop    edi
c000a1fd:	5d                   	pop    ebp
c000a1fe:	e9 0b 04 00 00       	jmp    c000a60e <Dbg::kprintf(char const*, ...)>
c000a203:	90                   	nop

c000a204 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a204:	55                   	push   ebp
c000a205:	57                   	push   edi
c000a206:	56                   	push   esi
c000a207:	53                   	push   ebx
c000a208:	83 ec 14             	sub    esp,0x14
c000a20b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a20f:	53                   	push   ebx
c000a210:	68 b2 e3 01 c0       	push   0xc001e3b2
c000a215:	e8 f4 03 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a21a:	83 c4 10             	add    esp,0x10
c000a21d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a223:	74 21                	je     c000a246 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a225:	83 ec 08             	sub    esp,0x8
c000a228:	53                   	push   ebx
c000a229:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a22d:	57                   	push   edi
c000a22e:	e8 f3 f3 ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c000a233:	83 c4 10             	add    esp,0x10
c000a236:	89 c6                	mov    esi,eax
c000a238:	85 c0                	test   eax,eax
c000a23a:	74 0a                	je     c000a246 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a23c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a23e:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a244:	74 0a                	je     c000a250 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a246:	31 c0                	xor    eax,eax
c000a248:	83 c4 0c             	add    esp,0xc
c000a24b:	5b                   	pop    ebx
c000a24c:	5e                   	pop    esi
c000a24d:	5f                   	pop    edi
c000a24e:	5d                   	pop    ebp
c000a24f:	c3                   	ret    
c000a250:	e8 fc d8 ff ff       	call   c0007b51 <Phys::allocatePage()>
c000a255:	c1 ed 0b             	shr    ebp,0xb
c000a258:	8b 16                	mov    edx,DWORD PTR [esi]
c000a25a:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a260:	09 c2                	or     edx,eax
c000a262:	81 ca 01 08 00 00    	or     edx,0x801
c000a268:	89 16                	mov    DWORD PTR [esi],edx
c000a26a:	8b 35 0c 00 02 c0    	mov    esi,DWORD PTR ds:0xc002000c
c000a270:	85 f6                	test   esi,esi
c000a272:	7e 3e                	jle    c000a2b2 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a274:	89 df                	mov    edi,ebx
c000a276:	31 f6                	xor    esi,esi
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	55                   	push   ebp
c000a27c:	e8 ff f1 ff ff       	call   c0009480 <Virt::swapIDToSector(unsigned long)>
c000a281:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a284:	01 f0                	add    eax,esi
c000a286:	6a 01                	push   0x1
c000a288:	31 d2                	xor    edx,edx
c000a28a:	46                   	inc    esi
c000a28b:	52                   	push   edx
c000a28c:	81 c7 00 02 00 00    	add    edi,0x200
c000a292:	50                   	push   eax
c000a293:	0f be 05 18 00 02 c0 	movsx  eax,BYTE PTR ds:0xc0020018
c000a29a:	8b 0c 85 1c 53 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdace4]
c000a2a1:	51                   	push   ecx
c000a2a2:	e8 7d 2a 00 00       	call   c000cd24 <LogicalDisk::read(unsigned long long, int, void*)>
c000a2a7:	83 c4 20             	add    esp,0x20
c000a2aa:	39 35 0c 00 02 c0    	cmp    DWORD PTR ds:0xc002000c,esi
c000a2b0:	7f c6                	jg     c000a278 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a2b2:	a1 a8 2f 02 c0       	mov    eax,ds:0xc0022fa8
c000a2b7:	48                   	dec    eax
c000a2b8:	52                   	push   edx
c000a2b9:	a3 a8 2f 02 c0       	mov    ds:0xc0022fa8,eax
c000a2be:	50                   	push   eax
c000a2bf:	53                   	push   ebx
c000a2c0:	68 c5 e3 01 c0       	push   0xc001e3c5
c000a2c5:	e8 44 03 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a2ca:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a2cd:	e8 90 f1 ff ff       	call   c0009462 <Virt::freeSwapfilePage(unsigned long)>
c000a2d2:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000a2d7:	83 c4 10             	add    esp,0x10
c000a2da:	48                   	dec    eax
c000a2db:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000a2e0:	85 c0                	test   eax,eax
c000a2e2:	75 01                	jne    c000a2e5 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a2e4:	fb                   	sti    
c000a2e5:	0f 20 d8             	mov    eax,cr3
c000a2e8:	0f 22 d8             	mov    cr3,eax
c000a2eb:	b0 01                	mov    al,0x1
c000a2ed:	e9 56 ff ff ff       	jmp    c000a248 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a2f2 <VAS::scanForEviction()>:
c000a2f2:	57                   	push   edi
c000a2f3:	31 ff                	xor    edi,edi
c000a2f5:	56                   	push   esi
c000a2f6:	53                   	push   ebx
c000a2f7:	83 ec 10             	sub    esp,0x10
c000a2fa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a2fe:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a301:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a307:	75 0e                	jne    c000a317 <VAS::scanForEviction()+0x25>
c000a309:	89 da                	mov    edx,ebx
c000a30b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a30e:	c1 ea 16             	shr    edx,0x16
c000a311:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a315:	74 4e                	je     c000a365 <VAS::scanForEviction()+0x73>
c000a317:	53                   	push   ebx
c000a318:	56                   	push   esi
c000a319:	e8 08 f3 ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c000a31e:	5a                   	pop    edx
c000a31f:	8b 10                	mov    edx,DWORD PTR [eax]
c000a321:	59                   	pop    ecx
c000a322:	89 d1                	mov    ecx,edx
c000a324:	81 e1 01 08 00 00    	and    ecx,0x801
c000a32a:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a330:	74 3e                	je     c000a370 <VAS::scanForEviction()+0x7e>
c000a332:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a338:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a33e:	76 2b                	jbe    c000a36b <VAS::scanForEviction()+0x79>
c000a340:	47                   	inc    edi
c000a341:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a348:	83 ff 03             	cmp    edi,0x3
c000a34b:	74 32                	je     c000a37f <VAS::scanForEviction()+0x8d>
c000a34d:	31 db                	xor    ebx,ebx
c000a34f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a355:	75 c0                	jne    c000a317 <VAS::scanForEviction()+0x25>
c000a357:	89 da                	mov    edx,ebx
c000a359:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a35c:	c1 ea 16             	shr    edx,0x16
c000a35f:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a363:	75 b2                	jne    c000a317 <VAS::scanForEviction()+0x25>
c000a365:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a36b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a36e:	eb 91                	jmp    c000a301 <VAS::scanForEviction()+0xf>
c000a370:	f6 c2 20             	test   dl,0x20
c000a373:	74 13                	je     c000a388 <VAS::scanForEviction()+0x96>
c000a375:	83 e2 df             	and    edx,0xffffffdf
c000a378:	89 10                	mov    DWORD PTR [eax],edx
c000a37a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a37d:	eb b3                	jmp    c000a332 <VAS::scanForEviction()+0x40>
c000a37f:	83 c4 10             	add    esp,0x10
c000a382:	31 c0                	xor    eax,eax
c000a384:	5b                   	pop    ebx
c000a385:	5e                   	pop    esi
c000a386:	5f                   	pop    edi
c000a387:	c3                   	ret    
c000a388:	83 ec 08             	sub    esp,0x8
c000a38b:	89 d0                	mov    eax,edx
c000a38d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a392:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a396:	53                   	push   ebx
c000a397:	68 da e3 01 c0       	push   0xc001e3da
c000a39c:	e8 6d 02 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a3a1:	58                   	pop    eax
c000a3a2:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a3a5:	5a                   	pop    edx
c000a3a6:	51                   	push   ecx
c000a3a7:	56                   	push   esi
c000a3a8:	e8 95 fd ff ff       	call   c000a142 <VAS::evict(unsigned long)>
c000a3ad:	5b                   	pop    ebx
c000a3ae:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a3b1:	5f                   	pop    edi
c000a3b2:	50                   	push   eax
c000a3b3:	68 ee e3 01 c0       	push   0xc001e3ee
c000a3b8:	e8 51 02 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a3bd:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a3c4:	83 c4 10             	add    esp,0x10
c000a3c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a3cb:	83 c4 10             	add    esp,0x10
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	c3                   	ret    

c000a3d2 <mapVASFirstTime>:
c000a3d2:	55                   	push   ebp
c000a3d3:	57                   	push   edi
c000a3d4:	56                   	push   esi
c000a3d5:	53                   	push   ebx
c000a3d6:	83 ec 0c             	sub    esp,0xc
c000a3d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a3de:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a3e1:	4a                   	dec    edx
c000a3e2:	0f 84 c8 00 00 00    	je     c000a4b0 <mapVASFirstTime+0xde>
c000a3e8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a3eb:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a3ee:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a3f3:	c1 e5 15             	shl    ebp,0x15
c000a3f6:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a3fb:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a401:	29 eb                	sub    ebx,ebp
c000a403:	29 ef                	sub    edi,ebp
c000a405:	e8 47 d7 ff ff       	call   c0007b51 <Phys::allocatePage()>
c000a40a:	83 ec 0c             	sub    esp,0xc
c000a40d:	68 03 04 00 00       	push   0x403
c000a412:	6a 01                	push   0x1
c000a414:	53                   	push   ebx
c000a415:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a41b:	50                   	push   eax
c000a41c:	56                   	push   esi
c000a41d:	e8 ec f8 ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a422:	83 c4 20             	add    esp,0x20
c000a425:	39 fb                	cmp    ebx,edi
c000a427:	75 dc                	jne    c000a405 <mapVASFirstTime+0x33>
c000a429:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a42e:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a433:	29 eb                	sub    ebx,ebp
c000a435:	29 ef                	sub    edi,ebp
c000a437:	e8 15 d7 ff ff       	call   c0007b51 <Phys::allocatePage()>
c000a43c:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a440:	19 d2                	sbb    edx,edx
c000a442:	83 ec 0c             	sub    esp,0xc
c000a445:	83 e2 04             	and    edx,0x4
c000a448:	81 c2 03 04 00 00    	add    edx,0x403
c000a44e:	52                   	push   edx
c000a44f:	6a 01                	push   0x1
c000a451:	53                   	push   ebx
c000a452:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a458:	50                   	push   eax
c000a459:	56                   	push   esi
c000a45a:	e8 af f8 ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a45f:	83 c4 20             	add    esp,0x20
c000a462:	39 df                	cmp    edi,ebx
c000a464:	75 d1                	jne    c000a437 <mapVASFirstTime+0x65>
c000a466:	83 ec 0c             	sub    esp,0xc
c000a469:	bb 7c 20 02 c0       	mov    ebx,0xc002207c
c000a46e:	6a 04                	push   0x4
c000a470:	81 eb 00 10 02 c0    	sub    ebx,0xc0021000
c000a476:	6a ff                	push   0xffffffff
c000a478:	c1 eb 0c             	shr    ebx,0xc
c000a47b:	53                   	push   ebx
c000a47c:	68 00 10 02 c0       	push   0xc0021000
c000a481:	56                   	push   esi
c000a482:	e8 21 f3 ff ff       	call   c00097a8 <VAS::reflagRange(unsigned long, int, int, int)>
c000a487:	83 c4 14             	add    esp,0x14
c000a48a:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c000a48f:	6a 04                	push   0x4
c000a491:	6a ff                	push   0xffffffff
c000a493:	53                   	push   ebx
c000a494:	68 00 10 02 c0       	push   0xc0021000
c000a499:	50                   	push   eax
c000a49a:	e8 09 f3 ff ff       	call   c00097a8 <VAS::reflagRange(unsigned long, int, int, int)>
c000a49f:	0f 20 d8             	mov    eax,cr3
c000a4a2:	0f 22 d8             	mov    cr3,eax
c000a4a5:	83 c4 20             	add    esp,0x20
c000a4a8:	83 c4 0c             	add    esp,0xc
c000a4ab:	5b                   	pop    ebx
c000a4ac:	5e                   	pop    esi
c000a4ad:	5f                   	pop    edi
c000a4ae:	5d                   	pop    ebp
c000a4af:	c3                   	ret    
c000a4b0:	83 ec 0c             	sub    esp,0xc
c000a4b3:	68 01 e4 01 c0       	push   0xc001e401
c000a4b8:	e8 51 01 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a4bd:	83 c4 10             	add    esp,0x10
c000a4c0:	83 c4 0c             	add    esp,0xc
c000a4c3:	5b                   	pop    ebx
c000a4c4:	5e                   	pop    esi
c000a4c5:	5f                   	pop    edi
c000a4c6:	5d                   	pop    ebp
c000a4c7:	c3                   	ret    

c000a4c8 <__cxa_atexit>:
c000a4c8:	31 c0                	xor    eax,eax
c000a4ca:	c3                   	ret    

c000a4cb <__cxa_finalize>:
c000a4cb:	c3                   	ret    

c000a4cc <__stack_chk_fail>:
c000a4cc:	55                   	push   ebp
c000a4cd:	89 e5                	mov    ebp,esp
c000a4cf:	83 ec 10             	sub    esp,0x10
c000a4d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a4d5:	68 1a e4 01 c0       	push   0xc001e41a
c000a4da:	e8 2f 01 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a4df:	58                   	pop    eax
c000a4e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a4e3:	5a                   	pop    edx
c000a4e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a4e7:	68 1a e4 01 c0       	push   0xc001e41a
c000a4ec:	e8 1d 01 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a4f1:	c7 04 24 22 e4 01 c0 	mov    DWORD PTR [esp],0xc001e422
c000a4f8:	e8 1a 5e 00 00       	call   c0010317 <KePanic(char const*)>
c000a4fd:	83 c4 10             	add    esp,0x10
c000a500:	c9                   	leave  
c000a501:	c3                   	ret    

c000a502 <__cxa_pure_virtual>:
c000a502:	83 ec 18             	sub    esp,0x18
c000a505:	68 3a e4 01 c0       	push   0xc001e43a
c000a50a:	e8 08 5e 00 00       	call   c0010317 <KePanic(char const*)>
c000a50f:	83 c4 1c             	add    esp,0x1c
c000a512:	c3                   	ret    

c000a513 <operator new[](unsigned long)>:
c000a513:	e9 5d d3 ff ff       	jmp    c0007875 <malloc>

c000a518 <operator delete(void*, unsigned long)>:
c000a518:	e9 78 d3 ff ff       	jmp    c0007895 <rfree>

c000a51d <operator delete[](void*)>:
c000a51d:	e9 73 d3 ff ff       	jmp    c0007895 <rfree>

c000a522 <operator delete[](void*, unsigned long)>:
c000a522:	e9 6e d3 ff ff       	jmp    c0007895 <rfree>

c000a527 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a527:	55                   	push   ebp
c000a528:	b9 04 00 00 00       	mov    ecx,0x4
c000a52d:	57                   	push   edi
c000a52e:	56                   	push   esi
c000a52f:	be 8f e0 01 c0       	mov    esi,0xc001e08f
c000a534:	53                   	push   ebx
c000a535:	83 ec 20             	sub    esp,0x20
c000a538:	a1 8e e0 01 c0       	mov    eax,ds:0xc001e08e
c000a53d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a541:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a545:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a549:	a1 9b e0 01 c0       	mov    eax,ds:0xc001e09b
c000a54e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a552:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a556:	fc                   	cld    
c000a557:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a559:	89 ee                	mov    esi,ebp
c000a55b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a55f:	eb 02                	jmp    c000a563 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a561:	89 c6                	mov    esi,eax
c000a563:	31 d2                	xor    edx,edx
c000a565:	41                   	inc    ecx
c000a566:	89 f0                	mov    eax,esi
c000a568:	f7 f3                	div    ebx
c000a56a:	39 de                	cmp    esi,ebx
c000a56c:	73 f3                	jae    c000a561 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a56e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a571:	eb 02                	jmp    c000a575 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a573:	89 c5                	mov    ebp,eax
c000a575:	31 d2                	xor    edx,edx
c000a577:	49                   	dec    ecx
c000a578:	89 e8                	mov    eax,ebp
c000a57a:	f7 f3                	div    ebx
c000a57c:	39 dd                	cmp    ebp,ebx
c000a57e:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a582:	88 11                	mov    BYTE PTR [ecx],dl
c000a584:	73 ed                	jae    c000a573 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a586:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a58a:	83 c4 20             	add    esp,0x20
c000a58d:	5b                   	pop    ebx
c000a58e:	5e                   	pop    esi
c000a58f:	5f                   	pop    edi
c000a590:	5d                   	pop    ebp
c000a591:	c3                   	ret    

c000a592 <Dbg::logc(char)>:
c000a592:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a596:	f6 05 d0 2e 02 c0 10 	test   BYTE PTR ds:0xc0022ed0,0x10
c000a59d:	75 12                	jne    c000a5b1 <Dbg::logc(char)+0x1f>
c000a59f:	ba fd 03 00 00       	mov    edx,0x3fd
c000a5a4:	ec                   	in     al,dx
c000a5a5:	a8 20                	test   al,0x20
c000a5a7:	74 fb                	je     c000a5a4 <Dbg::logc(char)+0x12>
c000a5a9:	ba f8 03 00 00       	mov    edx,0x3f8
c000a5ae:	88 c8                	mov    al,cl
c000a5b0:	ee                   	out    dx,al
c000a5b1:	c3                   	ret    

c000a5b2 <Dbg::logs(char*)>:
c000a5b2:	53                   	push   ebx
c000a5b3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a5b7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5ba:	84 c0                	test   al,al
c000a5bc:	74 0f                	je     c000a5cd <Dbg::logs(char*)+0x1b>
c000a5be:	50                   	push   eax
c000a5bf:	43                   	inc    ebx
c000a5c0:	e8 cd ff ff ff       	call   c000a592 <Dbg::logc(char)>
c000a5c5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5c8:	5a                   	pop    edx
c000a5c9:	84 c0                	test   al,al
c000a5cb:	75 f1                	jne    c000a5be <Dbg::logs(char*)+0xc>
c000a5cd:	5b                   	pop    ebx
c000a5ce:	c3                   	ret    

c000a5cf <Dbg::logWriteInt(unsigned int)>:
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	6a 0a                	push   0xa
c000a5d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5d8:	50                   	push   eax
c000a5d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5dd:	50                   	push   eax
c000a5de:	e8 44 ff ff ff       	call   c000a527 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a5e3:	50                   	push   eax
c000a5e4:	e8 c9 ff ff ff       	call   c000a5b2 <Dbg::logs(char*)>
c000a5e9:	83 c4 20             	add    esp,0x20
c000a5ec:	c3                   	ret    

c000a5ed <Dbg::logWriteIntBase(unsigned int, int)>:
c000a5ed:	83 ec 10             	sub    esp,0x10
c000a5f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5f4:	50                   	push   eax
c000a5f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5f9:	50                   	push   eax
c000a5fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5fe:	52                   	push   edx
c000a5ff:	e8 23 ff ff ff       	call   c000a527 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a604:	50                   	push   eax
c000a605:	e8 a8 ff ff ff       	call   c000a5b2 <Dbg::logs(char*)>
c000a60a:	83 c4 20             	add    esp,0x20
c000a60d:	c3                   	ret    

c000a60e <Dbg::kprintf(char const*, ...)>:
c000a60e:	55                   	push   ebp
c000a60f:	57                   	push   edi
c000a610:	56                   	push   esi
c000a611:	53                   	push   ebx
c000a612:	83 ec 0c             	sub    esp,0xc
c000a615:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a619:	f6 05 d0 2e 02 c0 10 	test   BYTE PTR ds:0xc0022ed0,0x10
c000a620:	74 08                	je     c000a62a <Dbg::kprintf(char const*, ...)+0x1c>
c000a622:	83 c4 0c             	add    esp,0xc
c000a625:	5b                   	pop    ebx
c000a626:	5e                   	pop    esi
c000a627:	5f                   	pop    edi
c000a628:	5d                   	pop    ebp
c000a629:	c3                   	ret    
c000a62a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a62e:	31 ff                	xor    edi,edi
c000a630:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a634:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a637:	84 c0                	test   al,al
c000a639:	74 e7                	je     c000a622 <Dbg::kprintf(char const*, ...)+0x14>
c000a63b:	8d 77 01             	lea    esi,[edi+0x1]
c000a63e:	3c 25                	cmp    al,0x25
c000a640:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a643:	75 47                	jne    c000a68c <Dbg::kprintf(char const*, ...)+0x7e>
c000a645:	83 c7 02             	add    edi,0x2
c000a648:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a64b:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a64e:	83 e8 25             	sub    eax,0x25
c000a651:	3c 53                	cmp    al,0x53
c000a653:	0f 87 d2 00 00 00    	ja     c000a72b <Dbg::kprintf(char const*, ...)+0x11d>
c000a659:	25 ff 00 00 00       	and    eax,0xff
c000a65e:	ff 24 85 50 e4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1bb0]
c000a665:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a669:	89 c8                	mov    eax,ecx
c000a66b:	83 c1 04             	add    ecx,0x4
c000a66e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a672:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a674:	55                   	push   ebp
c000a675:	e8 55 ff ff ff       	call   c000a5cf <Dbg::logWriteInt(unsigned int)>
c000a67a:	58                   	pop    eax
c000a67b:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a67e:	84 c0                	test   al,al
c000a680:	74 a0                	je     c000a622 <Dbg::kprintf(char const*, ...)+0x14>
c000a682:	8d 77 01             	lea    esi,[edi+0x1]
c000a685:	3c 25                	cmp    al,0x25
c000a687:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a68a:	74 b9                	je     c000a645 <Dbg::kprintf(char const*, ...)+0x37>
c000a68c:	50                   	push   eax
c000a68d:	89 f7                	mov    edi,esi
c000a68f:	e8 fe fe ff ff       	call   c000a592 <Dbg::logc(char)>
c000a694:	89 ee                	mov    esi,ebp
c000a696:	58                   	pop    eax
c000a697:	eb e2                	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a699:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a69d:	89 c8                	mov    eax,ecx
c000a69f:	83 c1 04             	add    ecx,0x4
c000a6a2:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6a4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6a8:	50                   	push   eax
c000a6a9:	e8 04 ff ff ff       	call   c000a5b2 <Dbg::logs(char*)>
c000a6ae:	58                   	pop    eax
c000a6af:	eb ca                	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a6b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6b5:	89 d0                	mov    eax,edx
c000a6b7:	83 c2 04             	add    edx,0x4
c000a6ba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6be:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6c0:	50                   	push   eax
c000a6c1:	e8 09 ff ff ff       	call   c000a5cf <Dbg::logWriteInt(unsigned int)>
c000a6c6:	58                   	pop    eax
c000a6c7:	eb b2                	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a6c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6cd:	89 d0                	mov    eax,edx
c000a6cf:	83 c2 04             	add    edx,0x4
c000a6d2:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a6d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6d9:	50                   	push   eax
c000a6da:	e8 b3 fe ff ff       	call   c000a592 <Dbg::logc(char)>
c000a6df:	58                   	pop    eax
c000a6e0:	eb 99                	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a6e2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6e6:	89 c8                	mov    eax,ecx
c000a6e8:	83 c1 04             	add    ecx,0x4
c000a6eb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6ef:	6a 10                	push   0x10
c000a6f1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6f3:	51                   	push   ecx
c000a6f4:	e8 f4 fe ff ff       	call   c000a5ed <Dbg::logWriteIntBase(unsigned int, int)>
c000a6f9:	5d                   	pop    ebp
c000a6fa:	58                   	pop    eax
c000a6fb:	e9 7b ff ff ff       	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a700:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a704:	89 d0                	mov    eax,edx
c000a706:	83 c2 08             	add    edx,0x8
c000a709:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a70d:	6a 10                	push   0x10
c000a70f:	8b 00                	mov    eax,DWORD PTR [eax]
c000a711:	50                   	push   eax
c000a712:	e8 d6 fe ff ff       	call   c000a5ed <Dbg::logWriteIntBase(unsigned int, int)>
c000a717:	58                   	pop    eax
c000a718:	5a                   	pop    edx
c000a719:	e9 5d ff ff ff       	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a71e:	6a 25                	push   0x25
c000a720:	e8 6d fe ff ff       	call   c000a592 <Dbg::logc(char)>
c000a725:	5a                   	pop    edx
c000a726:	e9 50 ff ff ff       	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a72b:	6a 25                	push   0x25
c000a72d:	e8 60 fe ff ff       	call   c000a592 <Dbg::logc(char)>
c000a732:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a736:	50                   	push   eax
c000a737:	e8 56 fe ff ff       	call   c000a592 <Dbg::logc(char)>
c000a73c:	5a                   	pop    edx
c000a73d:	59                   	pop    ecx
c000a73e:	e9 38 ff ff ff       	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a743:	90                   	nop

c000a744 <File::read(unsigned long long, void*, int*)>:
c000a744:	53                   	push   ebx
c000a745:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a749:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a74d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a754:	3c 19                	cmp    al,0x19
c000a756:	77 35                	ja     c000a78d <File::read(unsigned long long, void*, int*)+0x49>
c000a758:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000a75f:	85 c0                	test   eax,eax
c000a761:	74 2a                	je     c000a78d <File::read(unsigned long long, void*, int*)+0x49>
c000a763:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a769:	85 c0                	test   eax,eax
c000a76b:	74 20                	je     c000a78d <File::read(unsigned long long, void*, int*)+0x49>
c000a76d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a771:	74 21                	je     c000a794 <File::read(unsigned long long, void*, int*)+0x50>
c000a773:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a775:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a779:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a77f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a783:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a787:	5b                   	pop    ebx
c000a788:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a78b:	ff e0                	jmp    eax
c000a78d:	b8 0b 00 00 00       	mov    eax,0xb
c000a792:	eb 05                	jmp    c000a799 <File::read(unsigned long long, void*, int*)+0x55>
c000a794:	b8 05 00 00 00       	mov    eax,0x5
c000a799:	5b                   	pop    ebx
c000a79a:	c3                   	ret    
c000a79b:	90                   	nop

c000a79c <File::write(unsigned long long, void*, int*)>:
c000a79c:	53                   	push   ebx
c000a79d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7a5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7ac:	3c 19                	cmp    al,0x19
c000a7ae:	77 35                	ja     c000a7e5 <File::write(unsigned long long, void*, int*)+0x49>
c000a7b0:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000a7b7:	85 c0                	test   eax,eax
c000a7b9:	74 2a                	je     c000a7e5 <File::write(unsigned long long, void*, int*)+0x49>
c000a7bb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a7c1:	85 c0                	test   eax,eax
c000a7c3:	74 20                	je     c000a7e5 <File::write(unsigned long long, void*, int*)+0x49>
c000a7c5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a7c9:	74 21                	je     c000a7ec <File::write(unsigned long long, void*, int*)+0x50>
c000a7cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a7cd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7d1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a7d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7df:	5b                   	pop    ebx
c000a7e0:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a7e3:	ff e0                	jmp    eax
c000a7e5:	b8 0b 00 00 00       	mov    eax,0xb
c000a7ea:	eb 05                	jmp    c000a7f1 <File::write(unsigned long long, void*, int*)+0x55>
c000a7ec:	b8 05 00 00 00       	mov    eax,0x5
c000a7f1:	5b                   	pop    ebx
c000a7f2:	c3                   	ret    
c000a7f3:	90                   	nop

c000a7f4 <Directory::read(unsigned long long, void*, int*)>:
c000a7f4:	53                   	push   ebx
c000a7f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7fd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a804:	3c 19                	cmp    al,0x19
c000a806:	77 35                	ja     c000a83d <Directory::read(unsigned long long, void*, int*)+0x49>
c000a808:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000a80f:	85 c0                	test   eax,eax
c000a811:	74 2a                	je     c000a83d <Directory::read(unsigned long long, void*, int*)+0x49>
c000a813:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a819:	85 c0                	test   eax,eax
c000a81b:	74 20                	je     c000a83d <Directory::read(unsigned long long, void*, int*)+0x49>
c000a81d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a821:	74 21                	je     c000a844 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a823:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a825:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a829:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a82f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a833:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a837:	5b                   	pop    ebx
c000a838:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a83b:	ff e0                	jmp    eax
c000a83d:	b8 0b 00 00 00       	mov    eax,0xb
c000a842:	eb 05                	jmp    c000a849 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a844:	b8 05 00 00 00       	mov    eax,0x5
c000a849:	5b                   	pop    ebx
c000a84a:	c3                   	ret    
c000a84b:	90                   	nop

c000a84c <Directory::write(unsigned long long, void*, int*)>:
c000a84c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a850:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a857:	b8 0b 00 00 00       	mov    eax,0xb
c000a85c:	80 fa 19             	cmp    dl,0x19
c000a85f:	77 18                	ja     c000a879 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a861:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000a868:	85 d2                	test   edx,edx
c000a86a:	74 0d                	je     c000a879 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a86c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a873:	19 c0                	sbb    eax,eax
c000a875:	83 e0 0a             	and    eax,0xa
c000a878:	40                   	inc    eax
c000a879:	c3                   	ret    

c000a87a <File::isAtty()>:
c000a87a:	31 c0                	xor    eax,eax
c000a87c:	c3                   	ret    
c000a87d:	90                   	nop

c000a87e <Directory::isAtty()>:
c000a87e:	31 c0                	xor    eax,eax
c000a880:	c3                   	ret    
c000a881:	90                   	nop

c000a882 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a882:	b8 0a 00 00 00       	mov    eax,0xa
c000a887:	c3                   	ret    

c000a888 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a888:	b8 0a 00 00 00       	mov    eax,0xa
c000a88d:	c3                   	ret    

c000a88e <Filesystem::allocateSwapfile(char const*, int)>:
c000a88e:	31 c0                	xor    eax,eax
c000a890:	31 d2                	xor    edx,edx
c000a892:	c3                   	ret    
c000a893:	90                   	nop

c000a894 <File::~File()>:
c000a894:	83 ec 0c             	sub    esp,0xc
c000a897:	ba 10 e6 01 c0       	mov    edx,0xc001e610
c000a89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8a0:	89 10                	mov    DWORD PTR [eax],edx
c000a8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8a6:	83 ec 0c             	sub    esp,0xc
c000a8a9:	50                   	push   eax
c000a8aa:	e8 41 e8 ff ff       	call   c00090f0 <UnixFile::~UnixFile()>
c000a8af:	83 c4 10             	add    esp,0x10
c000a8b2:	90                   	nop
c000a8b3:	83 c4 0c             	add    esp,0xc
c000a8b6:	c3                   	ret    
c000a8b7:	90                   	nop

c000a8b8 <File::~File()>:
c000a8b8:	83 ec 0c             	sub    esp,0xc
c000a8bb:	83 ec 0c             	sub    esp,0xc
c000a8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8c2:	e8 cd ff ff ff       	call   c000a894 <File::~File()>
c000a8c7:	83 c4 10             	add    esp,0x10
c000a8ca:	83 ec 08             	sub    esp,0x8
c000a8cd:	68 14 01 00 00       	push   0x114
c000a8d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8d6:	e8 3d fc ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	83 c4 0c             	add    esp,0xc
c000a8e1:	c3                   	ret    

c000a8e2 <Directory::~Directory()>:
c000a8e2:	83 ec 0c             	sub    esp,0xc
c000a8e5:	ba 2c e6 01 c0       	mov    edx,0xc001e62c
c000a8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8ee:	89 10                	mov    DWORD PTR [eax],edx
c000a8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8f4:	83 ec 0c             	sub    esp,0xc
c000a8f7:	50                   	push   eax
c000a8f8:	e8 f3 e7 ff ff       	call   c00090f0 <UnixFile::~UnixFile()>
c000a8fd:	83 c4 10             	add    esp,0x10
c000a900:	90                   	nop
c000a901:	83 c4 0c             	add    esp,0xc
c000a904:	c3                   	ret    
c000a905:	90                   	nop

c000a906 <Directory::~Directory()>:
c000a906:	83 ec 0c             	sub    esp,0xc
c000a909:	83 ec 0c             	sub    esp,0xc
c000a90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a910:	e8 cd ff ff ff       	call   c000a8e2 <Directory::~Directory()>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	83 ec 08             	sub    esp,0x8
c000a91b:	68 14 01 00 00       	push   0x114
c000a920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a924:	e8 ef fb ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	83 c4 0c             	add    esp,0xc
c000a92f:	c3                   	ret    

c000a930 <Filesystem::Filesystem()>:
c000a930:	ba a8 e5 01 c0       	mov    edx,0xc001e5a8
c000a935:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a939:	89 10                	mov    DWORD PTR [eax],edx
c000a93b:	8b 15 b4 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fb4
c000a941:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a945:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a94c:	a3 b4 2f 02 c0       	mov    ds:0xc0022fb4,eax
c000a951:	90                   	nop
c000a952:	c3                   	ret    
c000a953:	90                   	nop

c000a954 <Filesystem::~Filesystem()>:
c000a954:	ba a8 e5 01 c0       	mov    edx,0xc001e5a8
c000a959:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a95d:	89 10                	mov    DWORD PTR [eax],edx
c000a95f:	90                   	nop
c000a960:	c3                   	ret    
c000a961:	90                   	nop

c000a962 <Filesystem::~Filesystem()>:
c000a962:	83 ec 0c             	sub    esp,0xc
c000a965:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a969:	e8 e6 ff ff ff       	call   c000a954 <Filesystem::~Filesystem()>
c000a96e:	83 c4 04             	add    esp,0x4
c000a971:	83 ec 08             	sub    esp,0x8
c000a974:	6a 08                	push   0x8
c000a976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a97a:	e8 99 fb ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000a97f:	83 c4 10             	add    esp,0x10
c000a982:	83 c4 0c             	add    esp,0xc
c000a985:	c3                   	ret    

c000a986 <Fs::getcwd(Process*, char*, int)>:
c000a986:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a98a:	31 c0                	xor    eax,eax
c000a98c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a98f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a993:	7d 15                	jge    c000a9aa <Fs::getcwd(Process*, char*, int)+0x24>
c000a995:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a999:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a9a0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a9a3:	84 c9                	test   cl,cl
c000a9a5:	74 06                	je     c000a9ad <Fs::getcwd(Process*, char*, int)+0x27>
c000a9a7:	40                   	inc    eax
c000a9a8:	eb e2                	jmp    c000a98c <Fs::getcwd(Process*, char*, int)+0x6>
c000a9aa:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a9ad:	31 c0                	xor    eax,eax
c000a9af:	c3                   	ret    

c000a9b0 <Fs::initVFS()>:
c000a9b0:	83 ec 18             	sub    esp,0x18
c000a9b3:	6a 08                	push   0x8
c000a9b5:	e8 bb ce ff ff       	call   c0007875 <malloc>
c000a9ba:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9bd:	e8 8e c7 00 00       	call   c0017150 <FAT::FAT()>
c000a9c2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a9c9:	e8 a7 ce ff ff       	call   c0007875 <malloc>
c000a9ce:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9d1:	e8 a6 d5 00 00       	call   c0017f7c <ISO9660::ISO9660()>
c000a9d6:	83 c4 1c             	add    esp,0x1c
c000a9d9:	c3                   	ret    

c000a9da <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a9da:	55                   	push   ebp
c000a9db:	57                   	push   edi
c000a9dc:	56                   	push   esi
c000a9dd:	53                   	push   ebx
c000a9de:	81 ec 10 04 00 00    	sub    esp,0x410
c000a9e4:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a9eb:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a9f2:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a9f9:	68 00 04 00 00       	push   0x400
c000a9fe:	6a 00                	push   0x0
c000aa00:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000aa04:	56                   	push   esi
c000aa05:	e8 c6 5a ff ff       	call   c00004d0 <memset>
c000aa0a:	83 c4 10             	add    esp,0x10
c000aa0d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000aa11:	75 0b                	jne    c000aa1e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000aa13:	50                   	push   eax
c000aa14:	50                   	push   eax
c000aa15:	57                   	push   edi
c000aa16:	56                   	push   esi
c000aa17:	e8 e4 5b ff ff       	call   c0000600 <strcpy>
c000aa1c:	eb 41                	jmp    c000aa5f <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000aa1e:	8a 07                	mov    al,BYTE PTR [edi]
c000aa20:	3c 5c                	cmp    al,0x5c
c000aa22:	74 04                	je     c000aa28 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000aa24:	3c 2f                	cmp    al,0x2f
c000aa26:	75 18                	jne    c000aa40 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000aa28:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aa2b:	3c 60                	cmp    al,0x60
c000aa2d:	7e 03                	jle    c000aa32 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000aa2f:	83 e8 20             	sub    eax,0x20
c000aa32:	88 04 24             	mov    BYTE PTR [esp],al
c000aa35:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa3c:	50                   	push   eax
c000aa3d:	50                   	push   eax
c000aa3e:	eb 18                	jmp    c000aa58 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000aa40:	50                   	push   eax
c000aa41:	50                   	push   eax
c000aa42:	55                   	push   ebp
c000aa43:	56                   	push   esi
c000aa44:	e8 b7 5b ff ff       	call   c0000600 <strcpy>
c000aa49:	5a                   	pop    edx
c000aa4a:	59                   	pop    ecx
c000aa4b:	68 49 f3 01 c0       	push   0xc001f349
c000aa50:	56                   	push   esi
c000aa51:	e8 6a 5d ff ff       	call   c00007c0 <strcat>
c000aa56:	5d                   	pop    ebp
c000aa57:	58                   	pop    eax
c000aa58:	57                   	push   edi
c000aa59:	56                   	push   esi
c000aa5a:	e8 61 5d ff ff       	call   c00007c0 <strcat>
c000aa5f:	83 c4 10             	add    esp,0x10
c000aa62:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aa65:	3c 60                	cmp    al,0x60
c000aa67:	7e 03                	jle    c000aa6c <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000aa69:	83 e8 20             	sub    eax,0x20
c000aa6c:	88 04 24             	mov    BYTE PTR [esp],al
c000aa6f:	88 03                	mov    BYTE PTR [ebx],al
c000aa71:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa78:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aa7e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000aa82:	bf 03 00 00 00       	mov    edi,0x3
c000aa87:	b8 03 00 00 00       	mov    eax,0x3
c000aa8c:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000aa8f:	84 d2                	test   dl,dl
c000aa91:	0f 84 91 00 00 00    	je     c000ab28 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000aa97:	8d 4f 01             	lea    ecx,[edi+0x1]
c000aa9a:	80 fa 5c             	cmp    dl,0x5c
c000aa9d:	74 05                	je     c000aaa4 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000aa9f:	80 fa 2f             	cmp    dl,0x2f
c000aaa2:	75 12                	jne    c000aab6 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aaa4:	89 c5                	mov    ebp,eax
c000aaa6:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aaab:	74 09                	je     c000aab6 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aaad:	40                   	inc    eax
c000aaae:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000aab2:	89 cf                	mov    edi,ecx
c000aab4:	eb d6                	jmp    c000aa8c <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000aab6:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000aabb:	75 5b                	jne    c000ab18 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aabd:	80 fa 2e             	cmp    dl,0x2e
c000aac0:	75 56                	jne    c000ab18 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aac2:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aac6:	74 19                	je     c000aae1 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000aac8:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aacd:	74 53                	je     c000ab22 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aacf:	89 f9                	mov    ecx,edi
c000aad1:	41                   	inc    ecx
c000aad2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aad5:	80 fa 2f             	cmp    dl,0x2f
c000aad8:	74 f7                	je     c000aad1 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aada:	80 fa 5c             	cmp    dl,0x5c
c000aadd:	74 f2                	je     c000aad1 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aadf:	eb d1                	jmp    c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aae1:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aae6:	74 3a                	je     c000ab22 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aae8:	83 f8 03             	cmp    eax,0x3
c000aaeb:	74 c5                	je     c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aaed:	41                   	inc    ecx
c000aaee:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aaf1:	80 fa 2f             	cmp    dl,0x2f
c000aaf4:	74 f7                	je     c000aaed <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aaf6:	80 fa 5c             	cmp    dl,0x5c
c000aaf9:	74 f2                	je     c000aaed <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aafb:	48                   	dec    eax
c000aafc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab00:	75 06                	jne    c000ab08 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab02:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab06:	eb f3                	jmp    c000aafb <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000ab08:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab0c:	74 07                	je     c000ab15 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ab0e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab12:	48                   	dec    eax
c000ab13:	eb f3                	jmp    c000ab08 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab15:	40                   	inc    eax
c000ab16:	eb 9a                	jmp    c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab18:	80 fa 2f             	cmp    dl,0x2f
c000ab1b:	74 95                	je     c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab1d:	80 fa 5c             	cmp    dl,0x5c
c000ab20:	74 90                	je     c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab22:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ab25:	40                   	inc    eax
c000ab26:	eb 8a                	jmp    c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab28:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab2c:	83 ec 0c             	sub    esp,0xc
c000ab2f:	53                   	push   ebx
c000ab30:	e8 0b 5a ff ff       	call   c0000540 <strlen>
c000ab35:	83 c4 10             	add    esp,0x10
c000ab38:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ab3d:	75 26                	jne    c000ab65 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000ab3f:	83 ec 0c             	sub    esp,0xc
c000ab42:	53                   	push   ebx
c000ab43:	e8 f8 59 ff ff       	call   c0000540 <strlen>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ab50:	74 26                	je     c000ab78 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000ab52:	83 ec 0c             	sub    esp,0xc
c000ab55:	53                   	push   ebx
c000ab56:	e8 e5 59 ff ff       	call   c0000540 <strlen>
c000ab5b:	83 c4 10             	add    esp,0x10
c000ab5e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ab63:	eb c7                	jmp    c000ab2c <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000ab65:	83 ec 0c             	sub    esp,0xc
c000ab68:	53                   	push   ebx
c000ab69:	e8 d2 59 ff ff       	call   c0000540 <strlen>
c000ab6e:	83 c4 10             	add    esp,0x10
c000ab71:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ab76:	74 c7                	je     c000ab3f <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000ab78:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ab7e:	5b                   	pop    ebx
c000ab7f:	5e                   	pop    esi
c000ab80:	5f                   	pop    edi
c000ab81:	5d                   	pop    ebp
c000ab82:	c3                   	ret    
c000ab83:	90                   	nop

c000ab84 <File::File(char const*, Process*)>:
c000ab84:	83 ec 0c             	sub    esp,0xc
c000ab87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	6a 00                	push   0x0
c000ab90:	50                   	push   eax
c000ab91:	e8 78 e3 ff ff       	call   c0008f0e <UnixFile::UnixFile(int)>
c000ab96:	83 c4 10             	add    esp,0x10
c000ab99:	ba 10 e6 01 c0       	mov    edx,0xc001e610
c000ab9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba2:	89 10                	mov    DWORD PTR [eax],edx
c000aba4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aba8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000abae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abb2:	83 c0 0d             	add    eax,0xd
c000abb5:	83 ec 04             	sub    esp,0x4
c000abb8:	52                   	push   edx
c000abb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abbd:	50                   	push   eax
c000abbe:	e8 17 fe ff ff       	call   c000a9da <Fs::standardiseFiles(char*, char const*, char const*)>
c000abc3:	83 c4 10             	add    esp,0x10
c000abc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abca:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000abcd:	8d 50 bf             	lea    edx,[eax-0x41]
c000abd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000abda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abde:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000abe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000abec:	25 ff 00 00 00       	and    eax,0xff
c000abf1:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000abf8:	85 c0                	test   eax,eax
c000abfa:	74 42                	je     c000ac3e <File::File(char const*, Process*)+0xba>
c000abfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac00:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac06:	25 ff 00 00 00       	and    eax,0xff
c000ac0b:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000ac12:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ac18:	85 c0                	test   eax,eax
c000ac1a:	75 22                	jne    c000ac3e <File::File(char const*, Process*)+0xba>
c000ac1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac20:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac26:	25 ff 00 00 00       	and    eax,0xff
c000ac2b:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000ac32:	83 ec 0c             	sub    esp,0xc
c000ac35:	50                   	push   eax
c000ac36:	e8 27 20 00 00       	call   c000cc62 <LogicalDisk::mount()>
c000ac3b:	83 c4 10             	add    esp,0x10
c000ac3e:	90                   	nop
c000ac3f:	83 c4 0c             	add    esp,0xc
c000ac42:	c3                   	ret    
c000ac43:	90                   	nop

c000ac44 <File::open(FileOpenMode)>:
c000ac44:	53                   	push   ebx
c000ac45:	b8 0b 00 00 00       	mov    eax,0xb
c000ac4a:	83 ec 08             	sub    esp,0x8
c000ac4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac51:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ac58:	80 fa 19             	cmp    dl,0x19
c000ac5b:	77 40                	ja     c000ac9d <File::open(FileOpenMode)+0x59>
c000ac5d:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000ac64:	85 d2                	test   edx,edx
c000ac66:	74 35                	je     c000ac9d <File::open(FileOpenMode)+0x59>
c000ac68:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac6e:	85 d2                	test   edx,edx
c000ac70:	74 2b                	je     c000ac9d <File::open(FileOpenMode)+0x59>
c000ac72:	b8 06 00 00 00       	mov    eax,0x6
c000ac77:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ac7b:	75 20                	jne    c000ac9d <File::open(FileOpenMode)+0x59>
c000ac7d:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac7f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ac85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac89:	51                   	push   ecx
c000ac8a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ac8d:	51                   	push   ecx
c000ac8e:	52                   	push   edx
c000ac8f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ac92:	83 c4 10             	add    esp,0x10
c000ac95:	85 c0                	test   eax,eax
c000ac97:	75 04                	jne    c000ac9d <File::open(FileOpenMode)+0x59>
c000ac99:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ac9d:	83 c4 08             	add    esp,0x8
c000aca0:	5b                   	pop    ebx
c000aca1:	c3                   	ret    

c000aca2 <File::close()>:
c000aca2:	53                   	push   ebx
c000aca3:	b8 0b 00 00 00       	mov    eax,0xb
c000aca8:	83 ec 08             	sub    esp,0x8
c000acab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000acaf:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000acb6:	80 fa 19             	cmp    dl,0x19
c000acb9:	77 41                	ja     c000acfc <File::close()+0x5a>
c000acbb:	8b 1c 95 20 54 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdabe0]
c000acc2:	85 db                	test   ebx,ebx
c000acc4:	74 36                	je     c000acfc <File::close()+0x5a>
c000acc6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000accd:	74 2d                	je     c000acfc <File::close()+0x5a>
c000accf:	b8 05 00 00 00       	mov    eax,0x5
c000acd4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000acd8:	74 22                	je     c000acfc <File::close()+0x5a>
c000acda:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000acde:	8b 04 95 20 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdabe0]
c000ace5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000aceb:	53                   	push   ebx
c000acec:	53                   	push   ebx
c000aced:	8b 10                	mov    edx,DWORD PTR [eax]
c000acef:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000acf5:	50                   	push   eax
c000acf6:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000acf9:	83 c4 10             	add    esp,0x10
c000acfc:	83 c4 08             	add    esp,0x8
c000acff:	5b                   	pop    ebx
c000ad00:	c3                   	ret    
c000ad01:	90                   	nop

c000ad02 <File::seek(unsigned long long)>:
c000ad02:	56                   	push   esi
c000ad03:	53                   	push   ebx
c000ad04:	b8 0b 00 00 00       	mov    eax,0xb
c000ad09:	51                   	push   ecx
c000ad0a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ad0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ad12:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ad19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad1d:	80 fa 19             	cmp    dl,0x19
c000ad20:	77 31                	ja     c000ad53 <File::seek(unsigned long long)+0x51>
c000ad22:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000ad29:	85 d2                	test   edx,edx
c000ad2b:	74 26                	je     c000ad53 <File::seek(unsigned long long)+0x51>
c000ad2d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ad33:	85 d2                	test   edx,edx
c000ad35:	74 1c                	je     c000ad53 <File::seek(unsigned long long)+0x51>
c000ad37:	b8 05 00 00 00       	mov    eax,0x5
c000ad3c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ad40:	74 11                	je     c000ad53 <File::seek(unsigned long long)+0x51>
c000ad42:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad44:	53                   	push   ebx
c000ad45:	51                   	push   ecx
c000ad46:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ad4c:	52                   	push   edx
c000ad4d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ad50:	83 c4 10             	add    esp,0x10
c000ad53:	5a                   	pop    edx
c000ad54:	5b                   	pop    ebx
c000ad55:	5e                   	pop    esi
c000ad56:	c3                   	ret    
c000ad57:	90                   	nop

c000ad58 <File::tell(unsigned long long*)>:
c000ad58:	83 ec 0c             	sub    esp,0xc
c000ad5b:	b8 0b 00 00 00       	mov    eax,0xb
c000ad60:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad64:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ad6b:	80 fa 19             	cmp    dl,0x19
c000ad6e:	77 34                	ja     c000ada4 <File::tell(unsigned long long*)+0x4c>
c000ad70:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000ad77:	85 d2                	test   edx,edx
c000ad79:	74 29                	je     c000ada4 <File::tell(unsigned long long*)+0x4c>
c000ad7b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ad81:	85 d2                	test   edx,edx
c000ad83:	74 1f                	je     c000ada4 <File::tell(unsigned long long*)+0x4c>
c000ad85:	b8 05 00 00 00       	mov    eax,0x5
c000ad8a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ad8e:	74 14                	je     c000ada4 <File::tell(unsigned long long*)+0x4c>
c000ad90:	50                   	push   eax
c000ad91:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad97:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ad9d:	52                   	push   edx
c000ad9e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ada1:	83 c4 10             	add    esp,0x10
c000ada4:	83 c4 0c             	add    esp,0xc
c000ada7:	c3                   	ret    

c000ada8 <File::rewind()>:
c000ada8:	83 ec 10             	sub    esp,0x10
c000adab:	6a 00                	push   0x0
c000adad:	6a 00                	push   0x0
c000adaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adb3:	e8 4a ff ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c000adb8:	83 c4 1c             	add    esp,0x1c
c000adbb:	c3                   	ret    

c000adbc <File::unlink()>:
c000adbc:	83 ec 0c             	sub    esp,0xc
c000adbf:	b8 0b 00 00 00       	mov    eax,0xb
c000adc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adc8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000adcf:	80 f9 19             	cmp    cl,0x19
c000add2:	77 2f                	ja     c000ae03 <File::unlink()+0x47>
c000add4:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000addb:	85 c9                	test   ecx,ecx
c000addd:	74 24                	je     c000ae03 <File::unlink()+0x47>
c000addf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ade5:	85 c9                	test   ecx,ecx
c000ade7:	74 1a                	je     c000ae03 <File::unlink()+0x47>
c000ade9:	b8 06 00 00 00       	mov    eax,0x6
c000adee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adf2:	75 0f                	jne    c000ae03 <File::unlink()+0x47>
c000adf4:	83 c2 0d             	add    edx,0xd
c000adf7:	50                   	push   eax
c000adf8:	50                   	push   eax
c000adf9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adfb:	52                   	push   edx
c000adfc:	51                   	push   ecx
c000adfd:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ae00:	83 c4 10             	add    esp,0x10
c000ae03:	83 c4 0c             	add    esp,0xc
c000ae06:	c3                   	ret    
c000ae07:	90                   	nop

c000ae08 <File::rename(char const*)>:
c000ae08:	83 ec 0c             	sub    esp,0xc
c000ae0b:	b8 0b 00 00 00       	mov    eax,0xb
c000ae10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae14:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae1b:	80 f9 19             	cmp    cl,0x19
c000ae1e:	77 32                	ja     c000ae52 <File::rename(char const*)+0x4a>
c000ae20:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000ae27:	85 c9                	test   ecx,ecx
c000ae29:	74 27                	je     c000ae52 <File::rename(char const*)+0x4a>
c000ae2b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae31:	85 c9                	test   ecx,ecx
c000ae33:	74 1d                	je     c000ae52 <File::rename(char const*)+0x4a>
c000ae35:	b8 06 00 00 00       	mov    eax,0x6
c000ae3a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae3e:	75 12                	jne    c000ae52 <File::rename(char const*)+0x4a>
c000ae40:	83 c2 0d             	add    edx,0xd
c000ae43:	50                   	push   eax
c000ae44:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae4a:	52                   	push   edx
c000ae4b:	51                   	push   ecx
c000ae4c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	83 c4 0c             	add    esp,0xc
c000ae55:	c3                   	ret    

c000ae56 <File::chfatattr(unsigned char, unsigned char)>:
c000ae56:	57                   	push   edi
c000ae57:	b8 0b 00 00 00       	mov    eax,0xb
c000ae5c:	56                   	push   esi
c000ae5d:	53                   	push   ebx
c000ae5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae62:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae66:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae6d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ae71:	80 f9 19             	cmp    cl,0x19
c000ae74:	77 37                	ja     c000aead <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae76:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000ae7d:	85 c9                	test   ecx,ecx
c000ae7f:	74 2c                	je     c000aead <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae81:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae87:	85 c9                	test   ecx,ecx
c000ae89:	74 22                	je     c000aead <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae8b:	b8 06 00 00 00       	mov    eax,0x6
c000ae90:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae94:	75 17                	jne    c000aead <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae96:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ae98:	89 f0                	mov    eax,esi
c000ae9a:	83 c2 0d             	add    edx,0xd
c000ae9d:	0f b6 f0             	movzx  esi,al
c000aea0:	0f b6 db             	movzx  ebx,bl
c000aea3:	56                   	push   esi
c000aea4:	53                   	push   ebx
c000aea5:	52                   	push   edx
c000aea6:	51                   	push   ecx
c000aea7:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000aeaa:	83 c4 10             	add    esp,0x10
c000aead:	5b                   	pop    ebx
c000aeae:	5e                   	pop    esi
c000aeaf:	5f                   	pop    edi
c000aeb0:	c3                   	ret    
c000aeb1:	90                   	nop

c000aeb2 <File::exists()>:
c000aeb2:	83 ec 0c             	sub    esp,0xc
c000aeb5:	31 c0                	xor    eax,eax
c000aeb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aebb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aec2:	80 f9 19             	cmp    cl,0x19
c000aec5:	77 24                	ja     c000aeeb <File::exists()+0x39>
c000aec7:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000aece:	85 c9                	test   ecx,ecx
c000aed0:	74 19                	je     c000aeeb <File::exists()+0x39>
c000aed2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000aed8:	85 c9                	test   ecx,ecx
c000aeda:	74 0f                	je     c000aeeb <File::exists()+0x39>
c000aedc:	83 c2 0d             	add    edx,0xd
c000aedf:	50                   	push   eax
c000aee0:	50                   	push   eax
c000aee1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000aee3:	52                   	push   edx
c000aee4:	51                   	push   ecx
c000aee5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000aee8:	83 c4 10             	add    esp,0x10
c000aeeb:	83 c4 0c             	add    esp,0xc
c000aeee:	c3                   	ret    
c000aeef:	90                   	nop

c000aef0 <File::stat(unsigned long long*, bool*)>:
c000aef0:	56                   	push   esi
c000aef1:	53                   	push   ebx
c000aef2:	50                   	push   eax
c000aef3:	b8 0b 00 00 00       	mov    eax,0xb
c000aef8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aefc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000af00:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000af07:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000af0b:	80 f9 19             	cmp    cl,0x19
c000af0e:	77 3d                	ja     c000af4d <File::stat(unsigned long long*, bool*)+0x5d>
c000af10:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000af17:	85 c9                	test   ecx,ecx
c000af19:	74 32                	je     c000af4d <File::stat(unsigned long long*, bool*)+0x5d>
c000af1b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000af21:	85 c9                	test   ecx,ecx
c000af23:	74 28                	je     c000af4d <File::stat(unsigned long long*, bool*)+0x5d>
c000af25:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af27:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af2b:	74 13                	je     c000af40 <File::stat(unsigned long long*, bool*)+0x50>
c000af2d:	83 ec 04             	sub    esp,0x4
c000af30:	56                   	push   esi
c000af31:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000af37:	51                   	push   ecx
c000af38:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000af3b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000af3e:	eb 0a                	jmp    c000af4a <File::stat(unsigned long long*, bool*)+0x5a>
c000af40:	53                   	push   ebx
c000af41:	83 c2 0d             	add    edx,0xd
c000af44:	56                   	push   esi
c000af45:	52                   	push   edx
c000af46:	51                   	push   ecx
c000af47:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000af4a:	83 c4 10             	add    esp,0x10
c000af4d:	5a                   	pop    edx
c000af4e:	5b                   	pop    ebx
c000af4f:	5e                   	pop    esi
c000af50:	c3                   	ret    

c000af51 <Fs::setcwd(Process*, char*)>:
c000af51:	55                   	push   ebp
c000af52:	57                   	push   edi
c000af53:	56                   	push   esi
c000af54:	53                   	push   ebx
c000af55:	81 ec 20 02 00 00    	sub    esp,0x220
c000af5b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000af62:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000af68:	57                   	push   edi
c000af69:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000af70:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000af74:	56                   	push   esi
c000af75:	e8 60 fa ff ff       	call   c000a9da <Fs::standardiseFiles(char*, char const*, char const*)>
c000af7a:	89 34 24             	mov    DWORD PTR [esp],esi
c000af7d:	e8 be 55 ff ff       	call   c0000540 <strlen>
c000af82:	83 c4 10             	add    esp,0x10
c000af85:	83 f8 02             	cmp    eax,0x2
c000af88:	77 15                	ja     c000af9f <Fs::setcwd(Process*, char*)+0x4e>
c000af8a:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000af8f:	83 eb 41             	sub    ebx,0x41
c000af92:	8b 04 9d 20 54 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdabe0]
c000af99:	85 c0                	test   eax,eax
c000af9b:	75 1c                	jne    c000afb9 <Fs::setcwd(Process*, char*)+0x68>
c000af9d:	eb 2f                	jmp    c000afce <Fs::setcwd(Process*, char*)+0x7d>
c000af9f:	83 ec 0c             	sub    esp,0xc
c000afa2:	56                   	push   esi
c000afa3:	e8 98 55 ff ff       	call   c0000540 <strlen>
c000afa8:	83 c4 10             	add    esp,0x10
c000afab:	83 f8 03             	cmp    eax,0x3
c000afae:	75 57                	jne    c000b007 <Fs::setcwd(Process*, char*)+0xb6>
c000afb0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000afb5:	75 50                	jne    c000b007 <Fs::setcwd(Process*, char*)+0xb6>
c000afb7:	eb d1                	jmp    c000af8a <Fs::setcwd(Process*, char*)+0x39>
c000afb9:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000afc0:	75 0c                	jne    c000afce <Fs::setcwd(Process*, char*)+0x7d>
c000afc2:	83 ec 0c             	sub    esp,0xc
c000afc5:	50                   	push   eax
c000afc6:	e8 97 1c 00 00       	call   c000cc62 <LogicalDisk::mount()>
c000afcb:	83 c4 10             	add    esp,0x10
c000afce:	b8 03 00 00 00       	mov    eax,0x3
c000afd3:	83 fb 19             	cmp    ebx,0x19
c000afd6:	0f 87 c6 00 00 00    	ja     c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000afdc:	8b 14 9d 20 54 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdabe0]
c000afe3:	b8 05 00 00 00       	mov    eax,0x5
c000afe8:	85 d2                	test   edx,edx
c000afea:	0f 84 b2 00 00 00    	je     c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000aff0:	b8 06 00 00 00       	mov    eax,0x6
c000aff5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000affc:	0f 85 92 00 00 00    	jne    c000b094 <Fs::setcwd(Process*, char*)+0x143>
c000b002:	e9 9b 00 00 00       	jmp    c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000b007:	83 ec 0c             	sub    esp,0xc
c000b00a:	68 14 01 00 00       	push   0x114
c000b00f:	e8 61 c8 ff ff       	call   c0007875 <malloc>
c000b014:	83 c4 0c             	add    esp,0xc
c000b017:	89 c3                	mov    ebx,eax
c000b019:	55                   	push   ebp
c000b01a:	56                   	push   esi
c000b01b:	50                   	push   eax
c000b01c:	e8 63 fb ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c000b021:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b026:	83 c4 0c             	add    esp,0xc
c000b029:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b02d:	50                   	push   eax
c000b02e:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b032:	50                   	push   eax
c000b033:	53                   	push   ebx
c000b034:	e8 b7 fe ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c000b039:	83 c4 10             	add    esp,0x10
c000b03c:	83 f8 02             	cmp    eax,0x2
c000b03f:	74 27                	je     c000b068 <Fs::setcwd(Process*, char*)+0x117>
c000b041:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b046:	75 1c                	jne    c000b064 <Fs::setcwd(Process*, char*)+0x113>
c000b048:	b8 02 00 00 00       	mov    eax,0x2
c000b04d:	85 db                	test   ebx,ebx
c000b04f:	74 51                	je     c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000b051:	83 ec 0c             	sub    esp,0xc
c000b054:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b056:	53                   	push   ebx
c000b057:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b05a:	83 c4 10             	add    esp,0x10
c000b05d:	b8 02 00 00 00       	mov    eax,0x2
c000b062:	eb 3e                	jmp    c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000b064:	85 c0                	test   eax,eax
c000b066:	74 1c                	je     c000b084 <Fs::setcwd(Process*, char*)+0x133>
c000b068:	b8 01 00 00 00       	mov    eax,0x1
c000b06d:	85 db                	test   ebx,ebx
c000b06f:	74 31                	je     c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000b071:	83 ec 0c             	sub    esp,0xc
c000b074:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b076:	53                   	push   ebx
c000b077:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b07a:	83 c4 10             	add    esp,0x10
c000b07d:	b8 01 00 00 00       	mov    eax,0x1
c000b082:	eb 1e                	jmp    c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000b084:	85 db                	test   ebx,ebx
c000b086:	74 0c                	je     c000b094 <Fs::setcwd(Process*, char*)+0x143>
c000b088:	83 ec 0c             	sub    esp,0xc
c000b08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b08d:	53                   	push   ebx
c000b08e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b091:	83 c4 10             	add    esp,0x10
c000b094:	50                   	push   eax
c000b095:	50                   	push   eax
c000b096:	56                   	push   esi
c000b097:	57                   	push   edi
c000b098:	e8 63 55 ff ff       	call   c0000600 <strcpy>
c000b09d:	83 c4 10             	add    esp,0x10
c000b0a0:	31 c0                	xor    eax,eax
c000b0a2:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b0a8:	5b                   	pop    ebx
c000b0a9:	5e                   	pop    esi
c000b0aa:	5f                   	pop    edi
c000b0ab:	5d                   	pop    ebp
c000b0ac:	c3                   	ret    
c000b0ad:	90                   	nop

c000b0ae <Directory::Directory(char const*, Process*)>:
c000b0ae:	83 ec 0c             	sub    esp,0xc
c000b0b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b5:	83 ec 08             	sub    esp,0x8
c000b0b8:	6a 00                	push   0x0
c000b0ba:	50                   	push   eax
c000b0bb:	e8 4e de ff ff       	call   c0008f0e <UnixFile::UnixFile(int)>
c000b0c0:	83 c4 10             	add    esp,0x10
c000b0c3:	ba 2c e6 01 c0       	mov    edx,0xc001e62c
c000b0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0cc:	89 10                	mov    DWORD PTR [eax],edx
c000b0ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0d2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0dc:	83 c0 0d             	add    eax,0xd
c000b0df:	83 ec 04             	sub    esp,0x4
c000b0e2:	52                   	push   edx
c000b0e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0e7:	50                   	push   eax
c000b0e8:	e8 ed f8 ff ff       	call   c000a9da <Fs::standardiseFiles(char*, char const*, char const*)>
c000b0ed:	83 c4 10             	add    esp,0x10
c000b0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b0f7:	8d 50 bf             	lea    edx,[eax-0x41]
c000b0fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0fe:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b108:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b110:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b116:	25 ff 00 00 00       	and    eax,0xff
c000b11b:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000b122:	85 c0                	test   eax,eax
c000b124:	74 42                	je     c000b168 <Directory::Directory(char const*, Process*)+0xba>
c000b126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b12a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b130:	25 ff 00 00 00       	and    eax,0xff
c000b135:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000b13c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b142:	85 c0                	test   eax,eax
c000b144:	75 22                	jne    c000b168 <Directory::Directory(char const*, Process*)+0xba>
c000b146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b14a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b150:	25 ff 00 00 00       	and    eax,0xff
c000b155:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000b15c:	83 ec 0c             	sub    esp,0xc
c000b15f:	50                   	push   eax
c000b160:	e8 fd 1a 00 00       	call   c000cc62 <LogicalDisk::mount()>
c000b165:	83 c4 10             	add    esp,0x10
c000b168:	90                   	nop
c000b169:	83 c4 0c             	add    esp,0xc
c000b16c:	c3                   	ret    
c000b16d:	90                   	nop

c000b16e <Directory::open()>:
c000b16e:	53                   	push   ebx
c000b16f:	b8 0b 00 00 00       	mov    eax,0xb
c000b174:	83 ec 08             	sub    esp,0x8
c000b177:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b17b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b182:	80 fa 19             	cmp    dl,0x19
c000b185:	77 3d                	ja     c000b1c4 <Directory::open()+0x56>
c000b187:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000b18e:	85 d2                	test   edx,edx
c000b190:	74 32                	je     c000b1c4 <Directory::open()+0x56>
c000b192:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b198:	85 d2                	test   edx,edx
c000b19a:	74 28                	je     c000b1c4 <Directory::open()+0x56>
c000b19c:	b8 06 00 00 00       	mov    eax,0x6
c000b1a1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b1a5:	75 1d                	jne    c000b1c4 <Directory::open()+0x56>
c000b1a7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b1ad:	50                   	push   eax
c000b1ae:	8b 02                	mov    eax,DWORD PTR [edx]
c000b1b0:	51                   	push   ecx
c000b1b1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b1b4:	51                   	push   ecx
c000b1b5:	52                   	push   edx
c000b1b6:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b1b9:	83 c4 10             	add    esp,0x10
c000b1bc:	85 c0                	test   eax,eax
c000b1be:	75 04                	jne    c000b1c4 <Directory::open()+0x56>
c000b1c0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b1c4:	83 c4 08             	add    esp,0x8
c000b1c7:	5b                   	pop    ebx
c000b1c8:	c3                   	ret    
c000b1c9:	90                   	nop

c000b1ca <Directory::close()>:
c000b1ca:	53                   	push   ebx
c000b1cb:	b8 0b 00 00 00       	mov    eax,0xb
c000b1d0:	83 ec 08             	sub    esp,0x8
c000b1d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b1d7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1de:	80 fa 19             	cmp    dl,0x19
c000b1e1:	77 41                	ja     c000b224 <Directory::close()+0x5a>
c000b1e3:	8b 1c 95 20 54 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdabe0]
c000b1ea:	85 db                	test   ebx,ebx
c000b1ec:	74 36                	je     c000b224 <Directory::close()+0x5a>
c000b1ee:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b1f5:	74 2d                	je     c000b224 <Directory::close()+0x5a>
c000b1f7:	b8 05 00 00 00       	mov    eax,0x5
c000b1fc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b200:	74 22                	je     c000b224 <Directory::close()+0x5a>
c000b202:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b206:	8b 04 95 20 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdabe0]
c000b20d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b213:	53                   	push   ebx
c000b214:	53                   	push   ebx
c000b215:	8b 10                	mov    edx,DWORD PTR [eax]
c000b217:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b21d:	50                   	push   eax
c000b21e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b221:	83 c4 10             	add    esp,0x10
c000b224:	83 c4 08             	add    esp,0x8
c000b227:	5b                   	pop    ebx
c000b228:	c3                   	ret    
c000b229:	90                   	nop

c000b22a <Directory::unlink()>:
c000b22a:	83 ec 0c             	sub    esp,0xc
c000b22d:	b8 0b 00 00 00       	mov    eax,0xb
c000b232:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b236:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b23d:	80 f9 19             	cmp    cl,0x19
c000b240:	77 2f                	ja     c000b271 <Directory::unlink()+0x47>
c000b242:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000b249:	85 c9                	test   ecx,ecx
c000b24b:	74 24                	je     c000b271 <Directory::unlink()+0x47>
c000b24d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b253:	85 c9                	test   ecx,ecx
c000b255:	74 1a                	je     c000b271 <Directory::unlink()+0x47>
c000b257:	b8 06 00 00 00       	mov    eax,0x6
c000b25c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b260:	75 0f                	jne    c000b271 <Directory::unlink()+0x47>
c000b262:	83 c2 0d             	add    edx,0xd
c000b265:	50                   	push   eax
c000b266:	50                   	push   eax
c000b267:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b269:	52                   	push   edx
c000b26a:	51                   	push   ecx
c000b26b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b26e:	83 c4 10             	add    esp,0x10
c000b271:	83 c4 0c             	add    esp,0xc
c000b274:	c3                   	ret    
c000b275:	90                   	nop

c000b276 <Directory::rename(char const*)>:
c000b276:	83 ec 0c             	sub    esp,0xc
c000b279:	b8 0b 00 00 00       	mov    eax,0xb
c000b27e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b282:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b289:	80 f9 19             	cmp    cl,0x19
c000b28c:	77 32                	ja     c000b2c0 <Directory::rename(char const*)+0x4a>
c000b28e:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000b295:	85 c9                	test   ecx,ecx
c000b297:	74 27                	je     c000b2c0 <Directory::rename(char const*)+0x4a>
c000b299:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b29f:	85 c9                	test   ecx,ecx
c000b2a1:	74 1d                	je     c000b2c0 <Directory::rename(char const*)+0x4a>
c000b2a3:	b8 06 00 00 00       	mov    eax,0x6
c000b2a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2ac:	75 12                	jne    c000b2c0 <Directory::rename(char const*)+0x4a>
c000b2ae:	83 c2 0d             	add    edx,0xd
c000b2b1:	50                   	push   eax
c000b2b2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2b8:	52                   	push   edx
c000b2b9:	51                   	push   ecx
c000b2ba:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b2bd:	83 c4 10             	add    esp,0x10
c000b2c0:	83 c4 0c             	add    esp,0xc
c000b2c3:	c3                   	ret    

c000b2c4 <Directory::exists()>:
c000b2c4:	83 ec 0c             	sub    esp,0xc
c000b2c7:	31 c0                	xor    eax,eax
c000b2c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2cd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2d4:	80 f9 19             	cmp    cl,0x19
c000b2d7:	77 24                	ja     c000b2fd <Directory::exists()+0x39>
c000b2d9:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000b2e0:	85 c9                	test   ecx,ecx
c000b2e2:	74 19                	je     c000b2fd <Directory::exists()+0x39>
c000b2e4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b2ea:	85 c9                	test   ecx,ecx
c000b2ec:	74 0f                	je     c000b2fd <Directory::exists()+0x39>
c000b2ee:	83 c2 0d             	add    edx,0xd
c000b2f1:	50                   	push   eax
c000b2f2:	50                   	push   eax
c000b2f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2f5:	52                   	push   edx
c000b2f6:	51                   	push   ecx
c000b2f7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b2fa:	83 c4 10             	add    esp,0x10
c000b2fd:	83 c4 0c             	add    esp,0xc
c000b300:	c3                   	ret    
c000b301:	90                   	nop

c000b302 <Directory::read(dirent*)>:
c000b302:	83 ec 1c             	sub    esp,0x1c
c000b305:	b8 0b 00 00 00       	mov    eax,0xb
c000b30a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b30e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b315:	80 fa 19             	cmp    dl,0x19
c000b318:	77 30                	ja     c000b34a <Directory::read(dirent*)+0x48>
c000b31a:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000b321:	85 d2                	test   edx,edx
c000b323:	74 25                	je     c000b34a <Directory::read(dirent*)+0x48>
c000b325:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b32c:	74 1c                	je     c000b34a <Directory::read(dirent*)+0x48>
c000b32e:	83 ec 0c             	sub    esp,0xc
c000b331:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b333:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b337:	52                   	push   edx
c000b338:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33c:	6a 00                	push   0x0
c000b33e:	68 10 01 00 00       	push   0x110
c000b343:	51                   	push   ecx
c000b344:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b347:	83 c4 20             	add    esp,0x20
c000b34a:	83 c4 1c             	add    esp,0x1c
c000b34d:	c3                   	ret    

c000b34e <Directory::create()>:
c000b34e:	83 ec 0c             	sub    esp,0xc
c000b351:	b8 0b 00 00 00       	mov    eax,0xb
c000b356:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b35a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b361:	80 f9 19             	cmp    cl,0x19
c000b364:	77 2f                	ja     c000b395 <Directory::create()+0x47>
c000b366:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000b36d:	85 c9                	test   ecx,ecx
c000b36f:	74 24                	je     c000b395 <Directory::create()+0x47>
c000b371:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b377:	85 c9                	test   ecx,ecx
c000b379:	74 1a                	je     c000b395 <Directory::create()+0x47>
c000b37b:	b8 06 00 00 00       	mov    eax,0x6
c000b380:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b384:	75 0f                	jne    c000b395 <Directory::create()+0x47>
c000b386:	83 c2 0d             	add    edx,0xd
c000b389:	50                   	push   eax
c000b38a:	50                   	push   eax
c000b38b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b38d:	52                   	push   edx
c000b38e:	51                   	push   ecx
c000b38f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b392:	83 c4 10             	add    esp,0x10
c000b395:	83 c4 0c             	add    esp,0xc
c000b398:	c3                   	ret    
c000b399:	90                   	nop

c000b39a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b39a:	b8 0a 00 00 00       	mov    eax,0xa
c000b39f:	c3                   	ret    

c000b3a0 <Bus::Bus(char const*)>:
c000b3a0:	83 ec 0c             	sub    esp,0xc
c000b3a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3a7:	83 ec 08             	sub    esp,0x8
c000b3aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ae:	50                   	push   eax
c000b3af:	e8 30 08 00 00       	call   c000bbe4 <Device::Device(char const*)>
c000b3b4:	83 c4 10             	add    esp,0x10
c000b3b7:	ba 48 e6 01 c0       	mov    edx,0xc001e648
c000b3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c0:	89 10                	mov    DWORD PTR [eax],edx
c000b3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b3d0:	90                   	nop
c000b3d1:	83 c4 0c             	add    esp,0xc
c000b3d4:	c3                   	ret    
c000b3d5:	90                   	nop
c000b3d6:	66 90                	xchg   ax,ax

c000b3d8 <Bus::~Bus()>:
c000b3d8:	83 ec 0c             	sub    esp,0xc
c000b3db:	ba 48 e6 01 c0       	mov    edx,0xc001e648
c000b3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e4:	89 10                	mov    DWORD PTR [eax],edx
c000b3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ea:	83 ec 0c             	sub    esp,0xc
c000b3ed:	50                   	push   eax
c000b3ee:	e8 5b 05 00 00       	call   c000b94e <Device::~Device()>
c000b3f3:	83 c4 10             	add    esp,0x10
c000b3f6:	90                   	nop
c000b3f7:	83 c4 0c             	add    esp,0xc
c000b3fa:	c3                   	ret    
c000b3fb:	90                   	nop

c000b3fc <Bus::~Bus()>:
c000b3fc:	83 ec 0c             	sub    esp,0xc
c000b3ff:	83 ec 0c             	sub    esp,0xc
c000b402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b406:	e8 cd ff ff ff       	call   c000b3d8 <Bus::~Bus()>
c000b40b:	83 c4 10             	add    esp,0x10
c000b40e:	83 ec 08             	sub    esp,0x8
c000b411:	68 58 01 00 00       	push   0x158
c000b416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b41a:	e8 f9 f0 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000b41f:	83 c4 10             	add    esp,0x10
c000b422:	83 c4 0c             	add    esp,0xc
c000b425:	c3                   	ret    

c000b426 <beepThread(void*)>:
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000b42e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b432:	48                   	dec    eax
c000b433:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000b438:	75 01                	jne    c000b43b <beepThread(void*)+0x15>
c000b43a:	fb                   	sti    
c000b43b:	83 ec 0c             	sub    esp,0xc
c000b43e:	6b c2 0a             	imul   eax,edx,0xa
c000b441:	50                   	push   eax
c000b442:	e8 ed 86 00 00       	call   c0013b34 <milliTenthSleep(unsigned int)>
c000b447:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b44e:	e8 93 a4 00 00       	call   c00158e6 <HalMakeBeep(int)>
c000b453:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b45b:	83 c4 1c             	add    esp,0x1c
c000b45e:	e9 cd 85 00 00       	jmp    c0013a30 <blockTask(TaskState)>

c000b463 <Krnl::beep(int, int, bool)>:
c000b463:	56                   	push   esi
c000b464:	53                   	push   ebx
c000b465:	83 ec 10             	sub    esp,0x10
c000b468:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b46c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b474:	e8 6d a4 00 00       	call   c00158e6 <HalMakeBeep(int)>
c000b479:	83 c4 10             	add    esp,0x10
c000b47c:	89 f0                	mov    eax,esi
c000b47e:	84 c0                	test   al,al
c000b480:	74 1e                	je     c000b4a0 <Krnl::beep(int, int, bool)+0x3d>
c000b482:	83 ec 0c             	sub    esp,0xc
c000b485:	6b db 0a             	imul   ebx,ebx,0xa
c000b488:	53                   	push   ebx
c000b489:	e8 a6 86 00 00       	call   c0013b34 <milliTenthSleep(unsigned int)>
c000b48e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b496:	83 c4 14             	add    esp,0x14
c000b499:	5b                   	pop    ebx
c000b49a:	5e                   	pop    esi
c000b49b:	e9 46 a4 00 00       	jmp    c00158e6 <HalMakeBeep(int)>
c000b4a0:	68 e6 00 00 00       	push   0xe6
c000b4a5:	53                   	push   ebx
c000b4a6:	68 26 b4 00 c0       	push   0xc000b426
c000b4ab:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c000b4b1:	e8 5e 81 00 00       	call   c0013614 <Process::createThread(void (*)(void*), void*, int)>
c000b4b6:	83 c4 14             	add    esp,0x14
c000b4b9:	5b                   	pop    ebx
c000b4ba:	5e                   	pop    esi
c000b4bb:	c3                   	ret    

c000b4bc <User::loadClockSettings(int)>:
c000b4bc:	53                   	push   ebx
c000b4bd:	83 ec 14             	sub    esp,0x14
c000b4c0:	68 14 01 00 00       	push   0x114
c000b4c5:	e8 ab c3 ff ff       	call   c0007875 <malloc>
c000b4ca:	83 c4 0c             	add    esp,0xc
c000b4cd:	89 c3                	mov    ebx,eax
c000b4cf:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c000b4d5:	68 6c e6 01 c0       	push   0xc001e66c
c000b4da:	50                   	push   eax
c000b4db:	e8 a4 f6 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c000b4e0:	58                   	pop    eax
c000b4e1:	5a                   	pop    edx
c000b4e2:	6a 01                	push   0x1
c000b4e4:	53                   	push   ebx
c000b4e5:	e8 5a f7 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c000b4ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b4ed:	e8 b0 f7 ff ff       	call   c000aca2 <File::close()>
c000b4f2:	83 c4 10             	add    esp,0x10
c000b4f5:	85 db                	test   ebx,ebx
c000b4f7:	74 0f                	je     c000b508 <User::loadClockSettings(int)+0x4c>
c000b4f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4fb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b4ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b502:	83 c4 08             	add    esp,0x8
c000b505:	5b                   	pop    ebx
c000b506:	ff e0                	jmp    eax
c000b508:	83 c4 08             	add    esp,0x8
c000b50b:	5b                   	pop    ebx
c000b50c:	c3                   	ret    
c000b50d:	90                   	nop

c000b50e <Clock::Clock(char const*)>:
c000b50e:	83 ec 0c             	sub    esp,0xc
c000b511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b515:	83 ec 08             	sub    esp,0x8
c000b518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b51c:	50                   	push   eax
c000b51d:	e8 c2 06 00 00       	call   c000bbe4 <Device::Device(char const*)>
c000b522:	83 c4 10             	add    esp,0x10
c000b525:	ba 94 e6 01 c0       	mov    edx,0xc001e694
c000b52a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b52e:	89 10                	mov    DWORD PTR [eax],edx
c000b530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b534:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b53e:	90                   	nop
c000b53f:	83 c4 0c             	add    esp,0xc
c000b542:	c3                   	ret    
c000b543:	90                   	nop

c000b544 <Clock::~Clock()>:
c000b544:	83 ec 0c             	sub    esp,0xc
c000b547:	ba 94 e6 01 c0       	mov    edx,0xc001e694
c000b54c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b550:	89 10                	mov    DWORD PTR [eax],edx
c000b552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b556:	83 ec 0c             	sub    esp,0xc
c000b559:	50                   	push   eax
c000b55a:	e8 ef 03 00 00       	call   c000b94e <Device::~Device()>
c000b55f:	83 c4 10             	add    esp,0x10
c000b562:	90                   	nop
c000b563:	83 c4 0c             	add    esp,0xc
c000b566:	c3                   	ret    
c000b567:	90                   	nop

c000b568 <Clock::~Clock()>:
c000b568:	83 ec 0c             	sub    esp,0xc
c000b56b:	83 ec 0c             	sub    esp,0xc
c000b56e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b572:	e8 cd ff ff ff       	call   c000b544 <Clock::~Clock()>
c000b577:	83 c4 10             	add    esp,0x10
c000b57a:	83 ec 08             	sub    esp,0x8
c000b57d:	68 58 01 00 00       	push   0x158
c000b582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b586:	e8 8d ef ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000b58b:	83 c4 10             	add    esp,0x10
c000b58e:	83 c4 0c             	add    esp,0xc
c000b591:	c3                   	ret    

c000b592 <Clock::timeInSecondsLocal()>:
c000b592:	53                   	push   ebx
c000b593:	83 ec 14             	sub    esp,0x14
c000b596:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b59a:	8b 10                	mov    edx,DWORD PTR [eax]
c000b59c:	50                   	push   eax
c000b59d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b5a0:	0f b6 0d b8 2f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0022fb8
c000b5a7:	03 0d bc 2f 02 c0    	add    ecx,DWORD PTR ds:0xc0022fbc
c000b5ad:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b5b3:	89 cb                	mov    ebx,ecx
c000b5b5:	c1 fb 1f             	sar    ebx,0x1f
c000b5b8:	01 c8                	add    eax,ecx
c000b5ba:	11 da                	adc    edx,ebx
c000b5bc:	83 c4 10             	add    esp,0x10
c000b5bf:	31 c9                	xor    ecx,ecx
c000b5c1:	80 3d b9 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fb9,0x0
c000b5c8:	74 05                	je     c000b5cf <Clock::timeInSecondsLocal()+0x3d>
c000b5ca:	b9 08 07 00 00       	mov    ecx,0x708
c000b5cf:	31 db                	xor    ebx,ebx
c000b5d1:	01 c8                	add    eax,ecx
c000b5d3:	11 da                	adc    edx,ebx
c000b5d5:	83 c4 08             	add    esp,0x8
c000b5d8:	5b                   	pop    ebx
c000b5d9:	c3                   	ret    

c000b5da <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b5da:	57                   	push   edi
c000b5db:	56                   	push   esi
c000b5dc:	53                   	push   ebx
c000b5dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b5e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b5e5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b5eb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b5ee:	0f b6 05 b8 2f 02 c0 	movzx  eax,BYTE PTR ds:0xc0022fb8
c000b5f5:	03 05 bc 2f 02 c0    	add    eax,DWORD PTR ds:0xc0022fbc
c000b5fb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b601:	99                   	cdq    
c000b602:	29 c6                	sub    esi,eax
c000b604:	19 d7                	sbb    edi,edx
c000b606:	89 f0                	mov    eax,esi
c000b608:	89 fa                	mov    edx,edi
c000b60a:	31 f6                	xor    esi,esi
c000b60c:	80 3d b9 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fb9,0x0
c000b613:	74 05                	je     c000b61a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b615:	be 08 07 00 00       	mov    esi,0x708
c000b61a:	31 ff                	xor    edi,edi
c000b61c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b620:	29 f0                	sub    eax,esi
c000b622:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b626:	19 fa                	sbb    edx,edi
c000b628:	89 d8                	mov    eax,ebx
c000b62a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b62e:	5b                   	pop    ebx
c000b62f:	5e                   	pop    esi
c000b630:	5f                   	pop    edi
c000b631:	ff e0                	jmp    eax

c000b633 <datetimeToSeconds(datetime_t)>:
c000b633:	55                   	push   ebp
c000b634:	57                   	push   edi
c000b635:	56                   	push   esi
c000b636:	53                   	push   ebx
c000b637:	83 ec 14             	sub    esp,0x14
c000b63a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b63e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b642:	89 d3                	mov    ebx,edx
c000b644:	0f b6 c6             	movzx  eax,dh
c000b647:	c1 eb 10             	shr    ebx,0x10
c000b64a:	48                   	dec    eax
c000b64b:	66 81 eb 6c 07       	sub    bx,0x76c
c000b650:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b654:	0f b6 f5             	movzx  esi,ch
c000b657:	89 cf                	mov    edi,ecx
c000b659:	6b f6 3c             	imul   esi,esi,0x3c
c000b65c:	c1 ef 10             	shr    edi,0x10
c000b65f:	0f b6 c9             	movzx  ecx,cl
c000b662:	89 f8                	mov    eax,edi
c000b664:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b66a:	0f b6 f8             	movzx  edi,al
c000b66d:	0f b6 d2             	movzx  edx,dl
c000b670:	01 fe                	add    esi,edi
c000b672:	01 f1                	add    ecx,esi
c000b674:	0f b7 f3             	movzx  esi,bx
c000b677:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b67b:	c1 f9 1f             	sar    ecx,0x1f
c000b67e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b687:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b68c:	8b 0c 8d e0 e6 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe1920]
c000b693:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b697:	76 29                	jbe    c000b6c2 <datetimeToSeconds(datetime_t)+0x8f>
c000b699:	f6 c3 03             	test   bl,0x3
c000b69c:	75 24                	jne    c000b6c2 <datetimeToSeconds(datetime_t)+0x8f>
c000b69e:	31 d2                	xor    edx,edx
c000b6a0:	bf 64 00 00 00       	mov    edi,0x64
c000b6a5:	89 d8                	mov    eax,ebx
c000b6a7:	66 f7 f7             	div    di
c000b6aa:	66 85 d2             	test   dx,dx
c000b6ad:	75 12                	jne    c000b6c1 <datetimeToSeconds(datetime_t)+0x8e>
c000b6af:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b6b5:	bf 90 01 00 00       	mov    edi,0x190
c000b6ba:	99                   	cdq    
c000b6bb:	f7 ff                	idiv   edi
c000b6bd:	85 d2                	test   edx,edx
c000b6bf:	75 01                	jne    c000b6c2 <datetimeToSeconds(datetime_t)+0x8f>
c000b6c1:	41                   	inc    ecx
c000b6c2:	66 83 fb 46          	cmp    bx,0x46
c000b6c6:	76 45                	jbe    c000b70d <datetimeToSeconds(datetime_t)+0xda>
c000b6c8:	bb 46 00 00 00       	mov    ebx,0x46
c000b6cd:	bf 64 00 00 00       	mov    edi,0x64
c000b6d2:	bd 90 01 00 00       	mov    ebp,0x190
c000b6d7:	b8 6d 01 00 00       	mov    eax,0x16d
c000b6dc:	f6 c3 03             	test   bl,0x3
c000b6df:	75 23                	jne    c000b704 <datetimeToSeconds(datetime_t)+0xd1>
c000b6e1:	89 d8                	mov    eax,ebx
c000b6e3:	99                   	cdq    
c000b6e4:	f7 ff                	idiv   edi
c000b6e6:	b8 6e 01 00 00       	mov    eax,0x16e
c000b6eb:	85 d2                	test   edx,edx
c000b6ed:	75 15                	jne    c000b704 <datetimeToSeconds(datetime_t)+0xd1>
c000b6ef:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b6f5:	99                   	cdq    
c000b6f6:	f7 fd                	idiv   ebp
c000b6f8:	31 c0                	xor    eax,eax
c000b6fa:	85 d2                	test   edx,edx
c000b6fc:	0f 94 c0             	sete   al
c000b6ff:	05 6d 01 00 00       	add    eax,0x16d
c000b704:	01 c1                	add    ecx,eax
c000b706:	43                   	inc    ebx
c000b707:	39 f3                	cmp    ebx,esi
c000b709:	7c cc                	jl     c000b6d7 <datetimeToSeconds(datetime_t)+0xa4>
c000b70b:	eb 3b                	jmp    c000b748 <datetimeToSeconds(datetime_t)+0x115>
c000b70d:	74 39                	je     c000b748 <datetimeToSeconds(datetime_t)+0x115>
c000b70f:	b8 45 00 00 00       	mov    eax,0x45
c000b714:	89 c2                	mov    edx,eax
c000b716:	83 e2 03             	and    edx,0x3
c000b719:	39 f0                	cmp    eax,esi
c000b71b:	7e 13                	jle    c000b730 <datetimeToSeconds(datetime_t)+0xfd>
c000b71d:	85 d2                	test   edx,edx
c000b71f:	0f 94 c2             	sete   dl
c000b722:	48                   	dec    eax
c000b723:	0f b6 d2             	movzx  edx,dl
c000b726:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b72c:	29 d1                	sub    ecx,edx
c000b72e:	eb e4                	jmp    c000b714 <datetimeToSeconds(datetime_t)+0xe1>
c000b730:	b8 6d 01 00 00       	mov    eax,0x16d
c000b735:	85 d2                	test   edx,edx
c000b737:	75 0d                	jne    c000b746 <datetimeToSeconds(datetime_t)+0x113>
c000b739:	31 c0                	xor    eax,eax
c000b73b:	66 85 db             	test   bx,bx
c000b73e:	0f 95 c0             	setne  al
c000b741:	05 6d 01 00 00       	add    eax,0x16d
c000b746:	29 c1                	sub    ecx,eax
c000b748:	b8 80 51 01 00       	mov    eax,0x15180
c000b74d:	f7 e9                	imul   ecx
c000b74f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b753:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b757:	83 c4 14             	add    esp,0x14
c000b75a:	5b                   	pop    ebx
c000b75b:	5e                   	pop    esi
c000b75c:	5f                   	pop    edi
c000b75d:	5d                   	pop    ebp
c000b75e:	c3                   	ret    
c000b75f:	90                   	nop

c000b760 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b760:	57                   	push   edi
c000b761:	56                   	push   esi
c000b762:	53                   	push   ebx
c000b763:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b767:	8b 06                	mov    eax,DWORD PTR [esi]
c000b769:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b76c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b770:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b774:	e8 ba fe ff ff       	call   c000b633 <datetimeToSeconds(datetime_t)>
c000b779:	59                   	pop    ecx
c000b77a:	0f b6 0d b8 2f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0022fb8
c000b781:	5b                   	pop    ebx
c000b782:	03 0d bc 2f 02 c0    	add    ecx,DWORD PTR ds:0xc0022fbc
c000b788:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b78e:	89 cb                	mov    ebx,ecx
c000b790:	c1 fb 1f             	sar    ebx,0x1f
c000b793:	29 c8                	sub    eax,ecx
c000b795:	19 da                	sbb    edx,ebx
c000b797:	31 c9                	xor    ecx,ecx
c000b799:	80 3d b9 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fb9,0x0
c000b7a0:	74 05                	je     c000b7a7 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b7a2:	b9 08 07 00 00       	mov    ecx,0x708
c000b7a7:	31 db                	xor    ebx,ebx
c000b7a9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b7ad:	29 c8                	sub    eax,ecx
c000b7af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b7b3:	19 da                	sbb    edx,ebx
c000b7b5:	89 f8                	mov    eax,edi
c000b7b7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7bb:	5b                   	pop    ebx
c000b7bc:	5e                   	pop    esi
c000b7bd:	5f                   	pop    edi
c000b7be:	ff e0                	jmp    eax

c000b7c0 <secondsToDatetime(unsigned long long)>:
c000b7c0:	55                   	push   ebp
c000b7c1:	57                   	push   edi
c000b7c2:	56                   	push   esi
c000b7c3:	53                   	push   ebx
c000b7c4:	83 ec 1c             	sub    esp,0x1c
c000b7c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b7cb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7cf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b7d3:	6a 00                	push   0x0
c000b7d5:	68 80 51 01 00       	push   0x15180
c000b7da:	55                   	push   ebp
c000b7db:	57                   	push   edi
c000b7dc:	e8 8f 11 01 00       	call   c001c970 <__udivdi3>
c000b7e1:	83 c4 10             	add    esp,0x10
c000b7e4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	6a 00                	push   0x0
c000b7f0:	68 80 51 01 00       	push   0x15180
c000b7f5:	55                   	push   ebp
c000b7f6:	57                   	push   edi
c000b7f7:	bf 10 0e 00 00       	mov    edi,0xe10
c000b7fc:	e8 6f 12 01 00       	call   c001ca70 <__umoddi3>
c000b801:	83 c4 10             	add    esp,0x10
c000b804:	99                   	cdq    
c000b805:	f7 ff                	idiv   edi
c000b807:	bf 3c 00 00 00       	mov    edi,0x3c
c000b80c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b80f:	89 d0                	mov    eax,edx
c000b811:	99                   	cdq    
c000b812:	f7 ff                	idiv   edi
c000b814:	85 db                	test   ebx,ebx
c000b816:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b819:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b81c:	79 11                	jns    c000b82f <secondsToDatetime(unsigned long long)+0x6f>
c000b81e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b822:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b828:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b82d:	eb 07                	jmp    c000b836 <secondsToDatetime(unsigned long long)+0x76>
c000b82f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b834:	89 d8                	mov    eax,ebx
c000b836:	bf b4 05 00 00       	mov    edi,0x5b4
c000b83b:	99                   	cdq    
c000b83c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b841:	f7 f9                	idiv   ecx
c000b843:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b848:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84c:	31 d2                	xor    edx,edx
c000b84e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b856:	01 c3                	add    ebx,eax
c000b858:	89 d8                	mov    eax,ebx
c000b85a:	f7 f1                	div    ecx
c000b85c:	31 d2                	xor    edx,edx
c000b85e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b861:	89 d8                	mov    eax,ebx
c000b863:	f7 f7                	div    edi
c000b865:	31 d2                	xor    edx,edx
c000b867:	29 c1                	sub    ecx,eax
c000b869:	89 d8                	mov    eax,ebx
c000b86b:	f7 f5                	div    ebp
c000b86d:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b872:	29 c1                	sub    ecx,eax
c000b874:	31 d2                	xor    edx,edx
c000b876:	89 c8                	mov    eax,ecx
c000b878:	f7 f5                	div    ebp
c000b87a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b87f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b883:	31 d2                	xor    edx,edx
c000b885:	89 c8                	mov    eax,ecx
c000b887:	f7 f5                	div    ebp
c000b889:	31 d2                	xor    edx,edx
c000b88b:	01 c3                	add    ebx,eax
c000b88d:	89 c8                	mov    eax,ecx
c000b88f:	f7 f7                	div    edi
c000b891:	bf 99 00 00 00       	mov    edi,0x99
c000b896:	29 c3                	sub    ebx,eax
c000b898:	31 d2                	xor    edx,edx
c000b89a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b8a2:	29 c3                	sub    ebx,eax
c000b8a4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b8a7:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b8aa:	bb 05 00 00 00       	mov    ebx,0x5
c000b8af:	83 c1 02             	add    ecx,0x2
c000b8b2:	89 c8                	mov    eax,ecx
c000b8b4:	f7 f7                	div    edi
c000b8b6:	31 d2                	xor    edx,edx
c000b8b8:	89 c7                	mov    edi,eax
c000b8ba:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b8c0:	83 c0 02             	add    eax,0x2
c000b8c3:	f7 f3                	div    ebx
c000b8c5:	89 eb                	mov    ebx,ebp
c000b8c7:	29 c3                	sub    ebx,eax
c000b8c9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b8cf:	88 1e                	mov    BYTE PTR [esi],bl
c000b8d1:	19 c0                	sbb    eax,eax
c000b8d3:	31 d2                	xor    edx,edx
c000b8d5:	83 e0 0c             	and    eax,0xc
c000b8d8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b8dc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b8e4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b8e8:	83 f9 01             	cmp    ecx,0x1
c000b8eb:	0f 96 c2             	setbe  dl
c000b8ee:	41                   	inc    ecx
c000b8ef:	01 d0                	add    eax,edx
c000b8f1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b8f4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b8f8:	83 c4 1c             	add    esp,0x1c
c000b8fb:	89 f0                	mov    eax,esi
c000b8fd:	5b                   	pop    ebx
c000b8fe:	5e                   	pop    esi
c000b8ff:	5f                   	pop    edi
c000b900:	5d                   	pop    ebp
c000b901:	c2 04 00             	ret    0x4

c000b904 <Clock::timeInDatetimeLocal()>:
c000b904:	53                   	push   ebx
c000b905:	83 ec 14             	sub    esp,0x14
c000b908:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b90c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b910:	e8 7d fc ff ff       	call   c000b592 <Clock::timeInSecondsLocal()>
c000b915:	83 c4 0c             	add    esp,0xc
c000b918:	52                   	push   edx
c000b919:	50                   	push   eax
c000b91a:	53                   	push   ebx
c000b91b:	e8 a0 fe ff ff       	call   c000b7c0 <secondsToDatetime(unsigned long long)>
c000b920:	89 d8                	mov    eax,ebx
c000b922:	83 c4 14             	add    esp,0x14
c000b925:	5b                   	pop    ebx
c000b926:	c2 04 00             	ret    0x4
c000b929:	90                   	nop

c000b92a <Device::hibernate()>:
c000b92a:	c3                   	ret    
c000b92b:	90                   	nop

c000b92c <Device::wake()>:
c000b92c:	c3                   	ret    
c000b92d:	90                   	nop

c000b92e <Device::detect()>:
c000b92e:	c3                   	ret    
c000b92f:	90                   	nop

c000b930 <Device::disableLegacy()>:
c000b930:	c3                   	ret    
c000b931:	90                   	nop

c000b932 <Device::powerSaving(PowerSavingLevel)>:
c000b932:	c3                   	ret    
c000b933:	90                   	nop

c000b934 <DriverlessDevice::close(int, int, void*)>:
c000b934:	31 c0                	xor    eax,eax
c000b936:	c3                   	ret    
c000b937:	90                   	nop

c000b938 <DriverlessDevice::detect()>:
c000b938:	c3                   	ret    
c000b939:	90                   	nop

c000b93a <DriverlessDevice::open(int, int, void*)>:
c000b93a:	83 ec 18             	sub    esp,0x18
c000b93d:	68 10 e7 01 c0       	push   0xc001e710
c000b942:	e8 d0 49 00 00       	call   c0010317 <KePanic(char const*)>
c000b947:	83 c8 ff             	or     eax,0xffffffff
c000b94a:	83 c4 1c             	add    esp,0x1c
c000b94d:	c3                   	ret    

c000b94e <Device::~Device()>:
c000b94e:	ba 70 e7 01 c0       	mov    edx,0xc001e770
c000b953:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b957:	89 10                	mov    DWORD PTR [eax],edx
c000b959:	90                   	nop
c000b95a:	c3                   	ret    
c000b95b:	90                   	nop

c000b95c <Device::~Device()>:
c000b95c:	83 ec 0c             	sub    esp,0xc
c000b95f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b963:	e8 e6 ff ff ff       	call   c000b94e <Device::~Device()>
c000b968:	83 c4 04             	add    esp,0x4
c000b96b:	83 ec 08             	sub    esp,0x8
c000b96e:	68 58 01 00 00       	push   0x158
c000b973:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b977:	e8 9c eb ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000b97c:	83 c4 10             	add    esp,0x10
c000b97f:	83 c4 0c             	add    esp,0xc
c000b982:	c3                   	ret    
c000b983:	90                   	nop

c000b984 <Device::findAndLoadDriver()>:
c000b984:	c7 44 24 04 2e e7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e72e
c000b98c:	e9 7d ec ff ff       	jmp    c000a60e <Dbg::kprintf(char const*, ...)>
c000b991:	90                   	nop

c000b992 <Device::preOpenPCI(PCIDeviceInfo)>:
c000b992:	57                   	push   edi
c000b993:	b9 09 00 00 00       	mov    ecx,0x9
c000b998:	56                   	push   esi
c000b999:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b99d:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b9a1:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b9ab:	81 c7 18 01 00 00    	add    edi,0x118
c000b9b1:	fc                   	cld    
c000b9b2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b9b4:	5e                   	pop    esi
c000b9b5:	5f                   	pop    edi
c000b9b6:	c3                   	ret    
c000b9b7:	90                   	nop

c000b9b8 <Device::preOpenACPI(void*, char*, char*)>:
c000b9b8:	57                   	push   edi
c000b9b9:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b9be:	56                   	push   esi
c000b9bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9c7:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b9d1:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b9d7:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b9dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b9e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9e3:	b9 0e 00 00 00       	mov    ecx,0xe
c000b9e8:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b9ee:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b9f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9f4:	5e                   	pop    esi
c000b9f5:	5f                   	pop    edi
c000b9f6:	c3                   	ret    
c000b9f7:	90                   	nop

c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b9f8:	53                   	push   ebx
c000b9f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9fd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba05:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba09:	0f b6 c0             	movzx  eax,al
c000ba0c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ba10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba18:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba1c:	5b                   	pop    ebx
c000ba1d:	e9 a6 05 00 00       	jmp    c000bfc8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ba22 <Device::getParent()>:
c000ba22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba26:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ba2c:	c3                   	ret    
c000ba2d:	90                   	nop

c000ba2e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ba2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba36:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ba3b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba3f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba47:	e9 e8 06 00 00       	jmp    c000c134 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ba4c <Device::addChild(Device*)>:
c000ba4c:	53                   	push   ebx
c000ba4d:	83 ec 08             	sub    esp,0x8
c000ba50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba58:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ba5e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ba64:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ba66:	85 d2                	test   edx,edx
c000ba68:	74 04                	je     c000ba6e <Device::addChild(Device*)+0x22>
c000ba6a:	89 d3                	mov    ebx,edx
c000ba6c:	eb f6                	jmp    c000ba64 <Device::addChild(Device*)+0x18>
c000ba6e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ba71:	83 ec 0c             	sub    esp,0xc
c000ba74:	6a 08                	push   0x8
c000ba76:	e8 fa bd ff ff       	call   c0007875 <malloc>
c000ba7b:	89 03                	mov    DWORD PTR [ebx],eax
c000ba7d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba83:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba8a:	83 c4 18             	add    esp,0x18
c000ba8d:	5b                   	pop    ebx
c000ba8e:	c3                   	ret    
c000ba8f:	90                   	nop

c000ba90 <Device::removeAllChildren()>:
c000ba90:	56                   	push   esi
c000ba91:	53                   	push   ebx
c000ba92:	52                   	push   edx
c000ba93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba97:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ba9d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000baa0:	74 17                	je     c000bab9 <Device::removeAllChildren()+0x29>
c000baa2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000baa5:	85 c0                	test   eax,eax
c000baa7:	74 0c                	je     c000bab5 <Device::removeAllChildren()+0x25>
c000baa9:	83 ec 0c             	sub    esp,0xc
c000baac:	8b 10                	mov    edx,DWORD PTR [eax]
c000baae:	50                   	push   eax
c000baaf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000bab2:	83 c4 10             	add    esp,0x10
c000bab5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bab7:	eb e4                	jmp    c000ba9d <Device::removeAllChildren()+0xd>
c000bab9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000babf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bac5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bacb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bad2:	58                   	pop    eax
c000bad3:	5b                   	pop    ebx
c000bad4:	5e                   	pop    esi
c000bad5:	c3                   	ret    

c000bad6 <Device::hibernateAll()>:
c000bad6:	53                   	push   ebx
c000bad7:	83 ec 14             	sub    esp,0x14
c000bada:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bade:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bae0:	53                   	push   ebx
c000bae1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bae4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000baea:	83 c4 10             	add    esp,0x10
c000baed:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000baf0:	74 0f                	je     c000bb01 <Device::hibernateAll()+0x2b>
c000baf2:	83 ec 0c             	sub    esp,0xc
c000baf5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000baf8:	e8 d9 ff ff ff       	call   c000bad6 <Device::hibernateAll()>
c000bafd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baff:	eb e9                	jmp    c000baea <Device::hibernateAll()+0x14>
c000bb01:	83 c4 08             	add    esp,0x8
c000bb04:	5b                   	pop    ebx
c000bb05:	c3                   	ret    

c000bb06 <Device::wakeAll()>:
c000bb06:	53                   	push   ebx
c000bb07:	83 ec 14             	sub    esp,0x14
c000bb0a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb10:	53                   	push   ebx
c000bb11:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bb14:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb1a:	83 c4 10             	add    esp,0x10
c000bb1d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb20:	74 0f                	je     c000bb31 <Device::wakeAll()+0x2b>
c000bb22:	83 ec 0c             	sub    esp,0xc
c000bb25:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb28:	e8 d9 ff ff ff       	call   c000bb06 <Device::wakeAll()>
c000bb2d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb2f:	eb e9                	jmp    c000bb1a <Device::wakeAll()+0x14>
c000bb31:	83 c4 08             	add    esp,0x8
c000bb34:	5b                   	pop    ebx
c000bb35:	c3                   	ret    

c000bb36 <Device::detectAll()>:
c000bb36:	53                   	push   ebx
c000bb37:	83 ec 14             	sub    esp,0x14
c000bb3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb40:	53                   	push   ebx
c000bb41:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bb44:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb50:	74 0f                	je     c000bb61 <Device::detectAll()+0x2b>
c000bb52:	83 ec 0c             	sub    esp,0xc
c000bb55:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb58:	e8 d9 ff ff ff       	call   c000bb36 <Device::detectAll()>
c000bb5d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb5f:	eb e9                	jmp    c000bb4a <Device::detectAll()+0x14>
c000bb61:	83 c4 08             	add    esp,0x8
c000bb64:	5b                   	pop    ebx
c000bb65:	c3                   	ret    

c000bb66 <Device::disableLegacyAll()>:
c000bb66:	c3                   	ret    
c000bb67:	90                   	nop

c000bb68 <Device::loadDriversForAll()>:
c000bb68:	c3                   	ret    
c000bb69:	90                   	nop

c000bb6a <Device::closeAll()>:
c000bb6a:	53                   	push   ebx
c000bb6b:	83 ec 08             	sub    esp,0x8
c000bb6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb72:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb74:	6a 00                	push   0x0
c000bb76:	6a 00                	push   0x0
c000bb78:	6a 00                	push   0x0
c000bb7a:	53                   	push   ebx
c000bb7b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb7e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb84:	83 c4 10             	add    esp,0x10
c000bb87:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb8a:	74 0f                	je     c000bb9b <Device::closeAll()+0x31>
c000bb8c:	83 ec 0c             	sub    esp,0xc
c000bb8f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb92:	e8 d3 ff ff ff       	call   c000bb6a <Device::closeAll()>
c000bb97:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb99:	eb e9                	jmp    c000bb84 <Device::closeAll()+0x1a>
c000bb9b:	83 c4 08             	add    esp,0x8
c000bb9e:	5b                   	pop    ebx
c000bb9f:	c3                   	ret    

c000bba0 <Device::powerSavingAll(PowerSavingLevel)>:
c000bba0:	56                   	push   esi
c000bba1:	53                   	push   ebx
c000bba2:	83 ec 0c             	sub    esp,0xc
c000bba5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bba9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bbad:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bbaf:	56                   	push   esi
c000bbb0:	53                   	push   ebx
c000bbb1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bbb4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bbba:	83 c4 10             	add    esp,0x10
c000bbbd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbc0:	74 0f                	je     c000bbd1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bbc2:	52                   	push   edx
c000bbc3:	52                   	push   edx
c000bbc4:	56                   	push   esi
c000bbc5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbc8:	e8 d3 ff ff ff       	call   c000bba0 <Device::powerSavingAll(PowerSavingLevel)>
c000bbcd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbcf:	eb e9                	jmp    c000bbba <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bbd1:	58                   	pop    eax
c000bbd2:	5b                   	pop    ebx
c000bbd3:	5e                   	pop    esi
c000bbd4:	c3                   	ret    
c000bbd5:	90                   	nop

c000bbd6 <Device::setName(char const*)>:
c000bbd6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bbde:	e9 1d 4a ff ff       	jmp    c0000600 <strcpy>
c000bbe3:	90                   	nop

c000bbe4 <Device::Device(char const*)>:
c000bbe4:	83 ec 1c             	sub    esp,0x1c
c000bbe7:	ba 70 e7 01 c0       	mov    edx,0xc001e770
c000bbec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbf0:	89 10                	mov    DWORD PTR [eax],edx
c000bbf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbf6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bc00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc04:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bc0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc12:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc20:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc2a:	83 ec 08             	sub    esp,0x8
c000bc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc35:	e8 9c ff ff ff       	call   c000bbd6 <Device::setName(char const*)>
c000bc3a:	83 c4 10             	add    esp,0x10
c000bc3d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bc45:	83 ec 0c             	sub    esp,0xc
c000bc48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc4c:	e8 24 bc ff ff       	call   c0007875 <malloc>
c000bc51:	83 c4 10             	add    esp,0x10
c000bc54:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc5a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc65:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bc6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc6f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc7f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc85:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc90:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bc97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc9b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bca6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bcb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcb4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bcbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcc2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bccc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcd0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bcda:	90                   	nop
c000bcdb:	83 c4 1c             	add    esp,0x1c
c000bcde:	c3                   	ret    
c000bcdf:	90                   	nop

c000bce0 <Device::getName()>:
c000bce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bce4:	05 d0 00 00 00       	add    eax,0xd0
c000bce9:	c3                   	ret    

c000bcea <DriverlessDevice::DriverlessDevice(char const*)>:
c000bcea:	83 ec 0c             	sub    esp,0xc
c000bced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf1:	83 ec 08             	sub    esp,0x8
c000bcf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf8:	50                   	push   eax
c000bcf9:	e8 e6 fe ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000bcfe:	83 c4 10             	add    esp,0x10
c000bd01:	ba 9c e7 01 c0       	mov    edx,0xc001e79c
c000bd06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd0a:	89 10                	mov    DWORD PTR [eax],edx
c000bd0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd10:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bd1a:	90                   	nop
c000bd1b:	83 c4 0c             	add    esp,0xc
c000bd1e:	c3                   	ret    
c000bd1f:	90                   	nop

c000bd20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bd20:	57                   	push   edi
c000bd21:	56                   	push   esi
c000bd22:	53                   	push   ebx
c000bd23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd27:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd2b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd2f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bd35:	75 0c                	jne    c000bd43 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bd37:	52                   	push   edx
c000bd38:	52                   	push   edx
c000bd39:	53                   	push   ebx
c000bd3a:	56                   	push   esi
c000bd3b:	e8 e2 10 01 00       	call   c001ce22 <LinkedList<Device>::addElement(Device*)>
c000bd40:	83 c4 10             	add    esp,0x10
c000bd43:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bd49:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bd4c:	74 12                	je     c000bd60 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bd4e:	50                   	push   eax
c000bd4f:	57                   	push   edi
c000bd50:	56                   	push   esi
c000bd51:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bd54:	e8 c7 ff ff ff       	call   c000bd20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd59:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	eb e9                	jmp    c000bd49 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bd60:	5b                   	pop    ebx
c000bd61:	5e                   	pop    esi
c000bd62:	5f                   	pop    edi
c000bd63:	c3                   	ret    

c000bd64 <getDevicesOfType(DeviceType)>:
c000bd64:	53                   	push   ebx
c000bd65:	83 ec 14             	sub    esp,0x14
c000bd68:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd6c:	53                   	push   ebx
c000bd6d:	e8 8c 11 01 00       	call   c001cefe <LinkedList<Device>::LinkedList()>
c000bd72:	83 c4 0c             	add    esp,0xc
c000bd75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd79:	53                   	push   ebx
c000bd7a:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c000bd80:	e8 9b ff ff ff       	call   c000bd20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd85:	89 d8                	mov    eax,ebx
c000bd87:	83 c4 18             	add    esp,0x18
c000bd8a:	5b                   	pop    ebx
c000bd8b:	c2 04 00             	ret    0x4
c000bd8e:	66 90                	xchg   ax,ax

c000bd90 <HardDiskController::HardDiskController(char const*)>:
c000bd90:	83 ec 0c             	sub    esp,0xc
c000bd93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd97:	83 ec 08             	sub    esp,0x8
c000bd9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9e:	50                   	push   eax
c000bd9f:	e8 40 fe ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000bda4:	83 c4 10             	add    esp,0x10
c000bda7:	ba c8 e7 01 c0       	mov    edx,0xc001e7c8
c000bdac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb0:	89 10                	mov    DWORD PTR [eax],edx
c000bdb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bdc0:	90                   	nop
c000bdc1:	83 c4 0c             	add    esp,0xc
c000bdc4:	c3                   	ret    
c000bdc5:	90                   	nop
c000bdc6:	66 90                	xchg   ax,ax

c000bdc8 <HardDiskController::~HardDiskController()>:
c000bdc8:	83 ec 0c             	sub    esp,0xc
c000bdcb:	ba c8 e7 01 c0       	mov    edx,0xc001e7c8
c000bdd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdd4:	89 10                	mov    DWORD PTR [eax],edx
c000bdd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdda:	83 ec 0c             	sub    esp,0xc
c000bddd:	50                   	push   eax
c000bdde:	e8 6b fb ff ff       	call   c000b94e <Device::~Device()>
c000bde3:	83 c4 10             	add    esp,0x10
c000bde6:	90                   	nop
c000bde7:	83 c4 0c             	add    esp,0xc
c000bdea:	c3                   	ret    
c000bdeb:	90                   	nop

c000bdec <HardDiskController::~HardDiskController()>:
c000bdec:	83 ec 0c             	sub    esp,0xc
c000bdef:	83 ec 0c             	sub    esp,0xc
c000bdf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdf6:	e8 cd ff ff ff       	call   c000bdc8 <HardDiskController::~HardDiskController()>
c000bdfb:	83 c4 10             	add    esp,0x10
c000bdfe:	83 ec 08             	sub    esp,0x8
c000be01:	68 58 01 00 00       	push   0x158
c000be06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be0a:	e8 09 e7 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000be0f:	83 c4 10             	add    esp,0x10
c000be12:	83 c4 0c             	add    esp,0xc
c000be15:	c3                   	ret    

c000be16 <PhysicalDisk::eject()>:
c000be16:	83 c8 ff             	or     eax,0xffffffff
c000be19:	c3                   	ret    

c000be1a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000be1a:	83 ec 0c             	sub    esp,0xc
c000be1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be21:	83 ec 08             	sub    esp,0x8
c000be24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be28:	50                   	push   eax
c000be29:	e8 b6 fd ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000be2e:	83 c4 10             	add    esp,0x10
c000be31:	ba f4 e7 01 c0       	mov    edx,0xc001e7f4
c000be36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be3a:	89 10                	mov    DWORD PTR [eax],edx
c000be3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be40:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000be47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be4b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000be52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be56:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000be60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be64:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be68:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000be6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be72:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000be7c:	90                   	nop
c000be7d:	83 c4 0c             	add    esp,0xc
c000be80:	c3                   	ret    
c000be81:	90                   	nop

c000be82 <PhysicalDisk::startCache()>:
c000be82:	56                   	push   esi
c000be83:	53                   	push   ebx
c000be84:	83 ec 10             	sub    esp,0x10
c000be87:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be8b:	6a 44                	push   0x44
c000be8d:	e8 e3 b9 ff ff       	call   c0007875 <malloc>
c000be92:	89 c6                	mov    esi,eax
c000be94:	58                   	pop    eax
c000be95:	5a                   	pop    edx
c000be96:	53                   	push   ebx
c000be97:	56                   	push   esi
c000be98:	e8 db 15 00 00       	call   c000d478 <VCache::VCache(PhysicalDisk*)>
c000be9d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bea3:	83 c4 14             	add    esp,0x14
c000bea6:	5b                   	pop    ebx
c000bea7:	5e                   	pop    esi
c000bea8:	c3                   	ret    
c000bea9:	90                   	nop

c000beaa <PhysicalDisk::~PhysicalDisk()>:
c000beaa:	83 ec 0c             	sub    esp,0xc
c000bead:	ba f4 e7 01 c0       	mov    edx,0xc001e7f4
c000beb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beb6:	89 10                	mov    DWORD PTR [eax],edx
c000beb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bebc:	83 ec 0c             	sub    esp,0xc
c000bebf:	50                   	push   eax
c000bec0:	e8 89 fa ff ff       	call   c000b94e <Device::~Device()>
c000bec5:	83 c4 10             	add    esp,0x10
c000bec8:	90                   	nop
c000bec9:	83 c4 0c             	add    esp,0xc
c000becc:	c3                   	ret    
c000becd:	90                   	nop

c000bece <PhysicalDisk::~PhysicalDisk()>:
c000bece:	83 ec 0c             	sub    esp,0xc
c000bed1:	83 ec 0c             	sub    esp,0xc
c000bed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed8:	e8 cd ff ff ff       	call   c000beaa <PhysicalDisk::~PhysicalDisk()>
c000bedd:	83 c4 10             	add    esp,0x10
c000bee0:	83 ec 08             	sub    esp,0x8
c000bee3:	68 6c 01 00 00       	push   0x16c
c000bee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beec:	e8 27 e6 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000bef1:	83 c4 10             	add    esp,0x10
c000bef4:	83 c4 0c             	add    esp,0xc
c000bef7:	c3                   	ret    

c000bef8 <int_handler>:
c000bef8:	55                   	push   ebp
c000bef9:	57                   	push   edi
c000befa:	56                   	push   esi
c000befb:	53                   	push   ebx
c000befc:	83 ec 0c             	sub    esp,0xc
c000beff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bf03:	80 3d 38 59 02 c0 00 	cmp    BYTE PTR ds:0xc0025938,0x0
c000bf0a:	74 0b                	je     c000bf17 <int_handler+0x1f>
c000bf0c:	fa                   	cli    
c000bf0d:	f4                   	hlt    
c000bf0e:	80 3d 38 59 02 c0 00 	cmp    BYTE PTR ds:0xc0025938,0x0
c000bf15:	75 f5                	jne    c000bf0c <int_handler+0x14>
c000bf17:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bf1a:	8d 46 e0             	lea    eax,[esi-0x20]
c000bf1d:	83 f8 17             	cmp    eax,0x17
c000bf20:	76 3e                	jbe    c000bf60 <int_handler+0x68>
c000bf22:	c1 e6 04             	shl    esi,0x4
c000bf25:	31 db                	xor    ebx,ebx
c000bf27:	8d ae c0 3f 02 c0    	lea    ebp,[esi-0x3ffdc040]
c000bf2d:	81 c6 c0 2f 02 c0    	add    esi,0xc0022fc0
c000bf33:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bf37:	85 c0                	test   eax,eax
c000bf39:	74 13                	je     c000bf4e <int_handler+0x56>
c000bf3b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bf3e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bf42:	74 2a                	je     c000bf6e <int_handler+0x76>
c000bf44:	83 ec 08             	sub    esp,0x8
c000bf47:	52                   	push   edx
c000bf48:	57                   	push   edi
c000bf49:	ff d0                	call   eax
c000bf4b:	83 c4 10             	add    esp,0x10
c000bf4e:	43                   	inc    ebx
c000bf4f:	83 fb 04             	cmp    ebx,0x4
c000bf52:	75 df                	jne    c000bf33 <int_handler+0x3b>
c000bf54:	83 c4 0c             	add    esp,0xc
c000bf57:	31 c0                	xor    eax,eax
c000bf59:	5b                   	pop    ebx
c000bf5a:	31 d2                	xor    edx,edx
c000bf5c:	5e                   	pop    esi
c000bf5d:	5f                   	pop    edi
c000bf5e:	5d                   	pop    ebp
c000bf5f:	c3                   	ret    
c000bf60:	83 ec 0c             	sub    esp,0xc
c000bf63:	50                   	push   eax
c000bf64:	e8 ba 99 00 00       	call   c0015923 <HalEndOfInterrupt(int)>
c000bf69:	83 c4 10             	add    esp,0x10
c000bf6c:	eb b4                	jmp    c000bf22 <int_handler+0x2a>
c000bf6e:	83 ec 08             	sub    esp,0x8
c000bf71:	52                   	push   edx
c000bf72:	57                   	push   edi
c000bf73:	ff d0                	call   eax
c000bf75:	83 c4 10             	add    esp,0x10
c000bf78:	83 c4 0c             	add    esp,0xc
c000bf7b:	5b                   	pop    ebx
c000bf7c:	5e                   	pop    esi
c000bf7d:	5f                   	pop    edi
c000bf7e:	5d                   	pop    ebp
c000bf7f:	c3                   	ret    

c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bf80:	56                   	push   esi
c000bf81:	31 c0                	xor    eax,eax
c000bf83:	53                   	push   ebx
c000bf84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bf88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf8c:	89 ca                	mov    edx,ecx
c000bf8e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bf92:	c1 e2 04             	shl    edx,0x4
c000bf95:	83 bc 82 c0 3f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdc040],0x0
c000bf9d:	74 15                	je     c000bfb4 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bf9f:	40                   	inc    eax
c000bfa0:	83 f8 04             	cmp    eax,0x4
c000bfa3:	75 f0                	jne    c000bf95 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bfa5:	c7 44 24 0c 24 e8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e824
c000bfad:	5b                   	pop    ebx
c000bfae:	5e                   	pop    esi
c000bfaf:	e9 63 43 00 00       	jmp    c0010317 <KePanic(char const*)>
c000bfb4:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bfb7:	89 1c 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],ebx
c000bfbe:	89 34 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],esi
c000bfc5:	5b                   	pop    ebx
c000bfc6:	5e                   	pop    esi
c000bfc7:	c3                   	ret    

c000bfc8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfc8:	57                   	push   edi
c000bfc9:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c000bfcf:	56                   	push   esi
c000bfd0:	53                   	push   ebx
c000bfd1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bfd5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bfd9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bfe0:	74 5b                	je     c000c03d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bfe2:	89 c7                	mov    edi,eax
c000bfe4:	84 c0                	test   al,al
c000bfe6:	74 24                	je     c000c00c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfe8:	83 fe 0f             	cmp    esi,0xf
c000bfeb:	0f 8f d9 00 00 00    	jg     c000c0ca <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bff1:	8a 86 20 00 02 c0    	mov    al,BYTE PTR [esi-0x3ffdffe0]
c000bff7:	25 ff 00 00 00       	and    eax,0xff
c000bffc:	66 8b bc 00 60 57 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffda8a0]
c000c004:	89 c6                	mov    esi,eax
c000c006:	66 d1 ef             	shr    di,1
c000c009:	83 e7 01             	and    edi,0x1
c000c00c:	83 ec 08             	sub    esp,0x8
c000c00f:	a1 60 6b 02 c0       	mov    eax,ds:0xc0026b60
c000c014:	31 db                	xor    ebx,ebx
c000c016:	50                   	push   eax
c000c017:	68 31 e8 01 c0       	push   0xc001e831
c000c01c:	e8 ed e5 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000c021:	83 c4 10             	add    esp,0x10
c000c024:	a1 60 6b 02 c0       	mov    eax,ds:0xc0026b60
c000c029:	85 c0                	test   eax,eax
c000c02b:	7f 51                	jg     c000c07e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c02d:	83 ec 0c             	sub    esp,0xc
c000c030:	68 48 e8 01 c0       	push   0xc001e848
c000c035:	e8 dd 42 00 00       	call   c0010317 <KePanic(char const*)>
c000c03a:	83 c4 10             	add    esp,0x10
c000c03d:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c040:	31 d2                	xor    edx,edx
c000c042:	89 c8                	mov    eax,ecx
c000c044:	c1 e0 04             	shl    eax,0x4
c000c047:	8b 9c 90 c0 3f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdc040]
c000c04e:	85 db                	test   ebx,ebx
c000c050:	0f 84 8b 00 00 00    	je     c000c0e1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c056:	42                   	inc    edx
c000c057:	83 fa 04             	cmp    edx,0x4
c000c05a:	75 eb                	jne    c000c047 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c05c:	83 ec 0c             	sub    esp,0xc
c000c05f:	68 9c e8 01 c0       	push   0xc001e89c
c000c064:	e8 ae 42 00 00       	call   c0010317 <KePanic(char const*)>
c000c069:	83 c4 10             	add    esp,0x10
c000c06c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c071:	5b                   	pop    ebx
c000c072:	5e                   	pop    esi
c000c073:	5f                   	pop    edi
c000c074:	c3                   	ret    
c000c075:	43                   	inc    ebx
c000c076:	39 1d 60 6b 02 c0    	cmp    DWORD PTR ds:0xc0026b60,ebx
c000c07c:	7e af                	jle    c000c02d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c07e:	83 ec 08             	sub    esp,0x8
c000c081:	8b 04 9d 80 6b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9480]
c000c088:	56                   	push   esi
c000c089:	50                   	push   eax
c000c08a:	e8 63 fd 00 00       	call   c001bdf2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c08f:	83 c4 10             	add    esp,0x10
c000c092:	84 c0                	test   al,al
c000c094:	74 df                	je     c000c075 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c096:	81 e7 ff 00 00 00    	and    edi,0xff
c000c09c:	50                   	push   eax
c000c09d:	8d 46 20             	lea    eax,[esi+0x20]
c000c0a0:	57                   	push   edi
c000c0a1:	25 ff 00 00 00       	and    eax,0xff
c000c0a6:	6a 00                	push   0x0
c000c0a8:	50                   	push   eax
c000c0a9:	89 f0                	mov    eax,esi
c000c0ab:	6a 00                	push   0x0
c000c0ad:	25 ff 00 00 00       	and    eax,0xff
c000c0b2:	6a 00                	push   0x0
c000c0b4:	50                   	push   eax
c000c0b5:	8b 04 9d 80 6b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9480]
c000c0bc:	50                   	push   eax
c000c0bd:	e8 aa fe 00 00       	call   c001bf6c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c0c2:	83 c4 20             	add    esp,0x20
c000c0c5:	e9 73 ff ff ff       	jmp    c000c03d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c0ca:	83 ec 0c             	sub    esp,0xc
c000c0cd:	31 ff                	xor    edi,edi
c000c0cf:	68 64 e8 01 c0       	push   0xc001e864
c000c0d4:	e8 3e 42 00 00       	call   c0010317 <KePanic(char const*)>
c000c0d9:	83 c4 10             	add    esp,0x10
c000c0dc:	e9 2b ff ff ff       	jmp    c000c00c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c0e1:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c0e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c0e8:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c000c0ef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0f3:	5b                   	pop    ebx
c000c0f4:	89 14 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],edx
c000c0fb:	89 f0                	mov    eax,esi
c000c0fd:	5e                   	pop    esi
c000c0fe:	5f                   	pop    edi
c000c0ff:	c3                   	ret    

c000c100 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c104:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c108:	c1 e0 04             	shl    eax,0x4
c000c10b:	8d 50 10             	lea    edx,[eax+0x10]
c000c10e:	39 88 c0 3f 02 c0    	cmp    DWORD PTR [eax-0x3ffdc040],ecx
c000c114:	74 08                	je     c000c11e <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c116:	83 c0 04             	add    eax,0x4
c000c119:	39 d0                	cmp    eax,edx
c000c11b:	75 f1                	jne    c000c10e <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c11d:	c3                   	ret    
c000c11e:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c128:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c132:	eb e2                	jmp    c000c116 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c134 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c134:	53                   	push   ebx
c000c135:	83 ec 08             	sub    esp,0x8
c000c138:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c13c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c141:	74 0e                	je     c000c151 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c143:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000c148:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c14f:	75 37                	jne    c000c188 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c155:	83 c0 20             	add    eax,0x20
c000c158:	c1 e0 04             	shl    eax,0x4
c000c15b:	8d 50 10             	lea    edx,[eax+0x10]
c000c15e:	39 98 c0 3f 02 c0    	cmp    DWORD PTR [eax-0x3ffdc040],ebx
c000c164:	74 0c                	je     c000c172 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c166:	83 c0 04             	add    eax,0x4
c000c169:	39 d0                	cmp    eax,edx
c000c16b:	75 f1                	jne    c000c15e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c16d:	83 c4 08             	add    esp,0x8
c000c170:	5b                   	pop    ebx
c000c171:	c3                   	ret    
c000c172:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c17c:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c186:	eb de                	jmp    c000c166 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c188:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c18d:	7f 12                	jg     c000c1a1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c18f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c193:	31 c0                	xor    eax,eax
c000c195:	8a 81 20 00 02 c0    	mov    al,BYTE PTR [ecx-0x3ffdffe0]
c000c19b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c19f:	eb b0                	jmp    c000c151 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c1a1:	83 ec 0c             	sub    esp,0xc
c000c1a4:	68 55 e8 01 c0       	push   0xc001e855
c000c1a9:	e8 69 41 00 00       	call   c0010317 <KePanic(char const*)>
c000c1ae:	83 c4 10             	add    esp,0x10
c000c1b1:	eb 9e                	jmp    c000c151 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c1b3 <setupINTS()>:
c000c1b3:	31 c0                	xor    eax,eax
c000c1b5:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c1bf:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c1c9:	c7 80 c4 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc03c],0x0
c000c1d3:	c7 80 c4 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd03c],0x0
c000c1dd:	c7 80 c8 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc038],0x0
c000c1e7:	c7 80 c8 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd038],0x0
c000c1f1:	c7 80 cc 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc034],0x0
c000c1fb:	c7 80 cc 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd034],0x0
c000c205:	83 c0 10             	add    eax,0x10
c000c208:	3d 00 10 00 00       	cmp    eax,0x1000
c000c20d:	75 a6                	jne    c000c1b5 <setupINTS()+0x2>
c000c20f:	c3                   	ret    

c000c210 <convertLegacyIRQNumber(int)>:
c000c210:	83 ec 0c             	sub    esp,0xc
c000c213:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c000c219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c21d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c224:	74 0f                	je     c000c235 <convertLegacyIRQNumber(int)+0x25>
c000c226:	83 f8 0f             	cmp    eax,0xf
c000c229:	7f 0e                	jg     c000c239 <convertLegacyIRQNumber(int)+0x29>
c000c22b:	31 c9                	xor    ecx,ecx
c000c22d:	8a 88 20 00 02 c0    	mov    cl,BYTE PTR [eax-0x3ffdffe0]
c000c233:	89 c8                	mov    eax,ecx
c000c235:	83 c4 0c             	add    esp,0xc
c000c238:	c3                   	ret    
c000c239:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c23d:	83 ec 0c             	sub    esp,0xc
c000c240:	68 64 e8 01 c0       	push   0xc001e864
c000c245:	e8 cd 40 00 00       	call   c0010317 <KePanic(char const*)>
c000c24a:	83 c4 10             	add    esp,0x10
c000c24d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c251:	83 c4 0c             	add    esp,0xc
c000c254:	c3                   	ret    
c000c255:	90                   	nop

c000c256 <startGUI(void*)>:
c000c256:	55                   	push   ebp
c000c257:	89 e5                	mov    ebp,esp
c000c259:	53                   	push   ebx
c000c25a:	83 ec 04             	sub    esp,0x4
c000c25d:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c262:	48                   	dec    eax
c000c263:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c268:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c26d:	85 c0                	test   eax,eax
c000c26f:	75 01                	jne    c000c272 <startGUI(void*)+0x1c>
c000c271:	fb                   	sti    
c000c272:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000c278:	83 ec 08             	sub    esp,0x8
c000c27b:	6a 01                	push   0x1
c000c27d:	68 c1 e8 01 c0       	push   0xc001e8c1
c000c282:	e8 83 6b 00 00       	call   c0012e0a <Thr::loadDLL(char const*, bool)>
c000c287:	83 c4 10             	add    esp,0x10
c000c28a:	83 ec 08             	sub    esp,0x8
c000c28d:	53                   	push   ebx
c000c28e:	50                   	push   eax
c000c28f:	e8 a7 6d 00 00       	call   c001303b <Thr::executeDLL(unsigned long, void*)>
c000c294:	83 c4 10             	add    esp,0x10
c000c297:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000c29d:	83 ec 08             	sub    esp,0x8
c000c2a0:	6a 01                	push   0x1
c000c2a2:	68 db e8 01 c0       	push   0xc001e8db
c000c2a7:	e8 5e 6b 00 00       	call   c0012e0a <Thr::loadDLL(char const*, bool)>
c000c2ac:	83 c4 10             	add    esp,0x10
c000c2af:	83 ec 08             	sub    esp,0x8
c000c2b2:	53                   	push   ebx
c000c2b3:	50                   	push   eax
c000c2b4:	e8 82 6d 00 00       	call   c001303b <Thr::executeDLL(unsigned long, void*)>
c000c2b9:	83 c4 10             	add    esp,0x10
c000c2bc:	90                   	nop
c000c2bd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c2c0:	c9                   	leave  
c000c2c1:	c3                   	ret    

c000c2c2 <startGUIVESA(void*)>:
c000c2c2:	55                   	push   ebp
c000c2c3:	89 e5                	mov    ebp,esp
c000c2c5:	53                   	push   ebx
c000c2c6:	83 ec 04             	sub    esp,0x4
c000c2c9:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c2ce:	48                   	dec    eax
c000c2cf:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c2d4:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c2d9:	85 c0                	test   eax,eax
c000c2db:	75 01                	jne    c000c2de <startGUIVESA(void*)+0x1c>
c000c2dd:	fb                   	sti    
c000c2de:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000c2e4:	83 ec 08             	sub    esp,0x8
c000c2e7:	6a 01                	push   0x1
c000c2e9:	68 f9 e8 01 c0       	push   0xc001e8f9
c000c2ee:	e8 17 6b 00 00       	call   c0012e0a <Thr::loadDLL(char const*, bool)>
c000c2f3:	83 c4 10             	add    esp,0x10
c000c2f6:	83 ec 08             	sub    esp,0x8
c000c2f9:	53                   	push   ebx
c000c2fa:	50                   	push   eax
c000c2fb:	e8 3b 6d 00 00       	call   c001303b <Thr::executeDLL(unsigned long, void*)>
c000c300:	83 c4 10             	add    esp,0x10
c000c303:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000c309:	83 ec 08             	sub    esp,0x8
c000c30c:	6a 01                	push   0x1
c000c30e:	68 db e8 01 c0       	push   0xc001e8db
c000c313:	e8 f2 6a 00 00       	call   c0012e0a <Thr::loadDLL(char const*, bool)>
c000c318:	83 c4 10             	add    esp,0x10
c000c31b:	83 ec 08             	sub    esp,0x8
c000c31e:	53                   	push   ebx
c000c31f:	50                   	push   eax
c000c320:	e8 16 6d 00 00       	call   c001303b <Thr::executeDLL(unsigned long, void*)>
c000c325:	83 c4 10             	add    esp,0x10
c000c328:	90                   	nop
c000c329:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c32c:	c9                   	leave  
c000c32d:	c3                   	ret    

c000c32e <sendKeyToTerminal(unsigned char)>:
c000c32e:	55                   	push   ebp
c000c32f:	89 e5                	mov    ebp,esp
c000c331:	83 ec 28             	sub    esp,0x28
c000c334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c337:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c33a:	8b 15 04 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f04
c000c340:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c343:	25 ff 00 00 00       	and    eax,0xff
c000c348:	83 ec 08             	sub    esp,0x8
c000c34b:	50                   	push   eax
c000c34c:	52                   	push   edx
c000c34d:	e8 b4 c7 ff ff       	call   c0008b06 <VgaText::receiveKey(unsigned char)>
c000c352:	83 c4 10             	add    esp,0x10
c000c355:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c359:	74 0a                	je     c000c365 <sendKeyToTerminal(unsigned char)+0x37>
c000c35b:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c35f:	0f 85 8f 00 00 00    	jne    c000c3f4 <sendKeyToTerminal(unsigned char)+0xc6>
c000c365:	fa                   	cli    
c000c366:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c36b:	40                   	inc    eax
c000c36c:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c371:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000c376:	40                   	inc    eax
c000c377:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c000c37c:	a1 c0 4f 02 c0       	mov    eax,ds:0xc0024fc0
c000c381:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c384:	c7 05 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024fc0,0x0
c000c38e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c392:	74 1f                	je     c000c3b3 <sendKeyToTerminal(unsigned char)+0x85>
c000c394:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c397:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c39a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c39d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c3a0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c3a3:	83 ec 0c             	sub    esp,0xc
c000c3a6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c3a9:	e8 4a 79 00 00       	call   c0013cf8 <unblockTask(ThreadControlBlock*)>
c000c3ae:	83 c4 10             	add    esp,0x10
c000c3b1:	eb db                	jmp    c000c38e <sendKeyToTerminal(unsigned char)+0x60>
c000c3b3:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000c3b8:	48                   	dec    eax
c000c3b9:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c000c3be:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000c3c3:	85 c0                	test   eax,eax
c000c3c5:	75 18                	jne    c000c3df <sendKeyToTerminal(unsigned char)+0xb1>
c000c3c7:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c000c3cc:	85 c0                	test   eax,eax
c000c3ce:	74 0f                	je     c000c3df <sendKeyToTerminal(unsigned char)+0xb1>
c000c3d0:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c000c3da:	e8 55 74 00 00       	call   c0013834 <schedule()>
c000c3df:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c3e4:	48                   	dec    eax
c000c3e5:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c3ea:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c3ef:	85 c0                	test   eax,eax
c000c3f1:	75 01                	jne    c000c3f4 <sendKeyToTerminal(unsigned char)+0xc6>
c000c3f3:	fb                   	sti    
c000c3f4:	90                   	nop
c000c3f5:	c9                   	leave  
c000c3f6:	c3                   	ret    

c000c3f7 <sendKeyboardToken(KeyboardToken)>:
c000c3f7:	55                   	push   ebp
c000c3f8:	89 e5                	mov    ebp,esp
c000c3fa:	83 ec 18             	sub    esp,0x18
c000c3fd:	e8 65 3f 00 00       	call   c0010367 <Krnl::userIOReceived()>
c000c402:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c405:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c408:	25 ff ff 00 00       	and    eax,0xffff
c000c40d:	83 f2 01             	xor    edx,0x1
c000c410:	88 90 e0 4f 02 c0    	mov    BYTE PTR [eax-0x3ffdb020],dl
c000c416:	a1 c8 4f 02 c0       	mov    eax,ds:0xc0024fc8
c000c41b:	85 c0                	test   eax,eax
c000c41d:	74 24                	je     c000c443 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c41f:	8b 0d c8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fc8
c000c425:	83 ec 04             	sub    esp,0x4
c000c428:	68 e0 4f 02 c0       	push   0xc0024fe0
c000c42d:	83 ec 08             	sub    esp,0x8
c000c430:	89 e2                	mov    edx,esp
c000c432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c435:	89 02                	mov    DWORD PTR [edx],eax
c000c437:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c43a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c43e:	ff d1                	call   ecx
c000c440:	83 c4 10             	add    esp,0x10
c000c443:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c447:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c44a:	a0 e8 53 02 c0       	mov    al,ds:0xc00253e8
c000c44f:	38 c2                	cmp    dl,al
c000c451:	74 1e                	je     c000c471 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c453:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c456:	a2 e8 53 02 c0       	mov    ds:0xc00253e8,al
c000c45b:	a0 e8 53 02 c0       	mov    al,ds:0xc00253e8
c000c460:	25 ff 00 00 00       	and    eax,0xff
c000c465:	83 ec 0c             	sub    esp,0xc
c000c468:	50                   	push   eax
c000c469:	e8 e6 bd ff ff       	call   c0008254 <setTerminalScrollLock(bool)>
c000c46e:	83 c4 10             	add    esp,0x10
c000c471:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c474:	84 c0                	test   al,al
c000c476:	0f 84 ae 00 00 00    	je     c000c52a <sendKeyboardToken(KeyboardToken)+0x133>
c000c47c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c47f:	66 3d 10 03          	cmp    ax,0x310
c000c483:	75 06                	jne    c000c48b <sendKeyboardToken(KeyboardToken)+0x94>
c000c485:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c48b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c48e:	66 3d 11 03          	cmp    ax,0x311
c000c492:	75 06                	jne    c000c49a <sendKeyboardToken(KeyboardToken)+0xa3>
c000c494:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c49a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c49d:	66 3d 12 03          	cmp    ax,0x312
c000c4a1:	75 06                	jne    c000c4a9 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c4a3:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c4a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ac:	66 3d 13 03          	cmp    ax,0x313
c000c4b0:	75 06                	jne    c000c4b8 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c4b2:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c4b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4bb:	66 3d 14 03          	cmp    ax,0x314
c000c4bf:	75 06                	jne    c000c4c7 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c4c1:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c4c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ca:	66 3d 15 03          	cmp    ax,0x315
c000c4ce:	75 06                	jne    c000c4d6 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c4d0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c4d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d9:	66 3d 16 03          	cmp    ax,0x316
c000c4dd:	75 06                	jne    c000c4e5 <sendKeyboardToken(KeyboardToken)+0xee>
c000c4df:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c4e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e8:	66 3d 17 03          	cmp    ax,0x317
c000c4ec:	75 06                	jne    c000c4f4 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c4ee:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c4f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4f7:	66 3d 18 03          	cmp    ax,0x318
c000c4fb:	75 06                	jne    c000c503 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c4fd:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c506:	66 3d 19 03          	cmp    ax,0x319
c000c50a:	75 06                	jne    c000c512 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c50c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c512:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c515:	66 3d 1a 03          	cmp    ax,0x31a
c000c519:	0f 85 c9 00 00 00    	jne    c000c5e8 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c51f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c525:	e9 be 00 00 00       	jmp    c000c5e8 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c52a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c52d:	66 3d 10 03          	cmp    ax,0x310
c000c531:	75 0a                	jne    c000c53d <sendKeyboardToken(KeyboardToken)+0x146>
c000c533:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c539:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c53d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c540:	66 3d 11 03          	cmp    ax,0x311
c000c544:	75 0a                	jne    c000c550 <sendKeyboardToken(KeyboardToken)+0x159>
c000c546:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c54c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c553:	66 3d 12 03          	cmp    ax,0x312
c000c557:	75 0a                	jne    c000c563 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c559:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c55f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c563:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c566:	66 3d 13 03          	cmp    ax,0x313
c000c56a:	75 0a                	jne    c000c576 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c56c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c572:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c579:	66 3d 14 03          	cmp    ax,0x314
c000c57d:	75 0a                	jne    c000c589 <sendKeyboardToken(KeyboardToken)+0x192>
c000c57f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c585:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c58c:	66 3d 15 03          	cmp    ax,0x315
c000c590:	75 0a                	jne    c000c59c <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c592:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c598:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c59c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c59f:	66 3d 16 03          	cmp    ax,0x316
c000c5a3:	75 0a                	jne    c000c5af <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c5a5:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c5ab:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5b2:	66 3d 17 03          	cmp    ax,0x317
c000c5b6:	75 0a                	jne    c000c5c2 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c5b8:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c5be:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5c5:	66 3d 18 03          	cmp    ax,0x318
c000c5c9:	75 0a                	jne    c000c5d5 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c5cb:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c5d1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5d8:	66 3d 19 03          	cmp    ax,0x319
c000c5dc:	75 0a                	jne    c000c5e8 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c5de:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c5e4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5eb:	66 3d 00 02          	cmp    ax,0x200
c000c5ef:	75 2c                	jne    c000c61d <sendKeyboardToken(KeyboardToken)+0x226>
c000c5f1:	a0 e0 53 02 c0       	mov    al,ds:0xc00253e0
c000c5f6:	83 f0 01             	xor    eax,0x1
c000c5f9:	84 c0                	test   al,al
c000c5fb:	74 20                	je     c000c61d <sendKeyboardToken(KeyboardToken)+0x226>
c000c5fd:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000c602:	6a 01                	push   0x1
c000c604:	6a 00                	push   0x0
c000c606:	68 56 c2 00 c0       	push   0xc000c256
c000c60b:	50                   	push   eax
c000c60c:	e8 03 70 00 00       	call   c0013614 <Process::createThread(void (*)(void*), void*, int)>
c000c611:	83 c4 10             	add    esp,0x10
c000c614:	c6 05 e0 53 02 c0 01 	mov    BYTE PTR ds:0xc00253e0,0x1
c000c61b:	eb 33                	jmp    c000c650 <sendKeyboardToken(KeyboardToken)+0x259>
c000c61d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c620:	66 3d 01 02          	cmp    ax,0x201
c000c624:	75 2a                	jne    c000c650 <sendKeyboardToken(KeyboardToken)+0x259>
c000c626:	a0 e0 53 02 c0       	mov    al,ds:0xc00253e0
c000c62b:	83 f0 01             	xor    eax,0x1
c000c62e:	84 c0                	test   al,al
c000c630:	74 1e                	je     c000c650 <sendKeyboardToken(KeyboardToken)+0x259>
c000c632:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000c637:	6a 01                	push   0x1
c000c639:	6a 00                	push   0x0
c000c63b:	68 c2 c2 00 c0       	push   0xc000c2c2
c000c640:	50                   	push   eax
c000c641:	e8 ce 6f 00 00       	call   c0013614 <Process::createThread(void (*)(void*), void*, int)>
c000c646:	83 c4 10             	add    esp,0x10
c000c649:	c6 05 e0 53 02 c0 01 	mov    BYTE PTR ds:0xc00253e0,0x1
c000c650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c653:	66 3d 1d 03          	cmp    ax,0x31d
c000c657:	75 06                	jne    c000c65f <sendKeyboardToken(KeyboardToken)+0x268>
c000c659:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c65f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c662:	66 3d 1c 03          	cmp    ax,0x31c
c000c666:	75 06                	jne    c000c66e <sendKeyboardToken(KeyboardToken)+0x277>
c000c668:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c66e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c671:	66 3d 1b 03          	cmp    ax,0x31b
c000c675:	75 06                	jne    c000c67d <sendKeyboardToken(KeyboardToken)+0x286>
c000c677:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c67d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c680:	66 3d 1e 03          	cmp    ax,0x31e
c000c684:	75 06                	jne    c000c68c <sendKeyboardToken(KeyboardToken)+0x295>
c000c686:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c68c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c68f:	66 3d 1f 03          	cmp    ax,0x31f
c000c693:	75 06                	jne    c000c69b <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c695:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c69b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c69e:	66 3d 1a 03          	cmp    ax,0x31a
c000c6a2:	75 06                	jne    c000c6aa <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c6a4:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c6aa:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c6ae:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6b1:	83 f0 01             	xor    eax,0x1
c000c6b4:	84 c0                	test   al,al
c000c6b6:	74 7b                	je     c000c733 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c6b8:	a0 e1 50 02 c0       	mov    al,ds:0xc00250e1
c000c6bd:	84 c0                	test   al,al
c000c6bf:	74 43                	je     c000c704 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c6c1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c6c5:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c6c9:	74 2d                	je     c000c6f8 <sendKeyboardToken(KeyboardToken)+0x301>
c000c6cb:	8b 15 e4 53 02 c0    	mov    edx,DWORD PTR ds:0xc00253e4
c000c6d1:	89 d0                	mov    eax,edx
c000c6d3:	c1 e0 02             	shl    eax,0x2
c000c6d6:	01 d0                	add    eax,edx
c000c6d8:	01 c0                	add    eax,eax
c000c6da:	a3 e4 53 02 c0       	mov    ds:0xc00253e4,eax
c000c6df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6e2:	25 ff ff 00 00       	and    eax,0xffff
c000c6e7:	8d 50 d0             	lea    edx,[eax-0x30]
c000c6ea:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c6ef:	01 d0                	add    eax,edx
c000c6f1:	a3 e4 53 02 c0       	mov    ds:0xc00253e4,eax
c000c6f6:	eb 71                	jmp    c000c769 <sendKeyboardToken(KeyboardToken)+0x372>
c000c6f8:	c7 05 e4 53 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00253e4,0x0
c000c702:	eb 65                	jmp    c000c769 <sendKeyboardToken(KeyboardToken)+0x372>
c000c704:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c709:	85 c0                	test   eax,eax
c000c70b:	74 1a                	je     c000c727 <sendKeyboardToken(KeyboardToken)+0x330>
c000c70d:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c712:	25 ff 00 00 00       	and    eax,0xff
c000c717:	83 ec 0c             	sub    esp,0xc
c000c71a:	50                   	push   eax
c000c71b:	e8 0e fc ff ff       	call   c000c32e <sendKeyToTerminal(unsigned char)>
c000c720:	83 c4 10             	add    esp,0x10
c000c723:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c727:	c7 05 e4 53 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00253e4,0x0
c000c731:	eb 36                	jmp    c000c769 <sendKeyboardToken(KeyboardToken)+0x372>
c000c733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c736:	66 3d 01 01          	cmp    ax,0x101
c000c73a:	75 2d                	jne    c000c769 <sendKeyboardToken(KeyboardToken)+0x372>
c000c73c:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c741:	85 c0                	test   eax,eax
c000c743:	74 1a                	je     c000c75f <sendKeyboardToken(KeyboardToken)+0x368>
c000c745:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c74a:	25 ff 00 00 00       	and    eax,0xff
c000c74f:	83 ec 0c             	sub    esp,0xc
c000c752:	50                   	push   eax
c000c753:	e8 d6 fb ff ff       	call   c000c32e <sendKeyToTerminal(unsigned char)>
c000c758:	83 c4 10             	add    esp,0x10
c000c75b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c75f:	c7 05 e4 53 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00253e4,0x0
c000c769:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c76c:	83 f0 01             	xor    eax,0x1
c000c76f:	84 c0                	test   al,al
c000c771:	74 4e                	je     c000c7c1 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c773:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c776:	83 f0 01             	xor    eax,0x1
c000c779:	84 c0                	test   al,al
c000c77b:	74 44                	je     c000c7c1 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c77d:	a0 e0 50 02 c0       	mov    al,ds:0xc00250e0
c000c782:	83 f0 01             	xor    eax,0x1
c000c785:	84 c0                	test   al,al
c000c787:	74 38                	je     c000c7c1 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c78c:	66 83 f8 1f          	cmp    ax,0x1f
c000c790:	76 09                	jbe    c000c79b <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c795:	66 83 f8 7e          	cmp    ax,0x7e
c000c799:	76 12                	jbe    c000c7ad <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c79b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c79e:	66 83 f8 0a          	cmp    ax,0xa
c000c7a2:	74 09                	je     c000c7ad <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c7a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7a7:	66 83 f8 08          	cmp    ax,0x8
c000c7ab:	75 14                	jne    c000c7c1 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c7ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7b0:	25 ff 00 00 00       	and    eax,0xff
c000c7b5:	83 ec 0c             	sub    esp,0xc
c000c7b8:	50                   	push   eax
c000c7b9:	e8 70 fb ff ff       	call   c000c32e <sendKeyToTerminal(unsigned char)>
c000c7be:	83 c4 10             	add    esp,0x10
c000c7c1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c7c4:	83 f0 01             	xor    eax,0x1
c000c7c7:	84 c0                	test   al,al
c000c7c9:	74 51                	je     c000c81c <sendKeyboardToken(KeyboardToken)+0x425>
c000c7cb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7ce:	83 f0 01             	xor    eax,0x1
c000c7d1:	84 c0                	test   al,al
c000c7d3:	74 47                	je     c000c81c <sendKeyboardToken(KeyboardToken)+0x425>
c000c7d5:	a0 e0 50 02 c0       	mov    al,ds:0xc00250e0
c000c7da:	84 c0                	test   al,al
c000c7dc:	74 3e                	je     c000c81c <sendKeyboardToken(KeyboardToken)+0x425>
c000c7de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7e1:	66 83 f8 3f          	cmp    ax,0x3f
c000c7e5:	76 35                	jbe    c000c81c <sendKeyboardToken(KeyboardToken)+0x425>
c000c7e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ea:	66 83 f8 7f          	cmp    ax,0x7f
c000c7ee:	77 2c                	ja     c000c81c <sendKeyboardToken(KeyboardToken)+0x425>
c000c7f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f3:	88 c2                	mov    dl,al
c000c7f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f8:	66 83 f8 5f          	cmp    ax,0x5f
c000c7fc:	76 04                	jbe    c000c802 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c7fe:	b0 20                	mov    al,0x20
c000c800:	eb 02                	jmp    c000c804 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c802:	b0 00                	mov    al,0x0
c000c804:	29 c2                	sub    edx,eax
c000c806:	88 d0                	mov    al,dl
c000c808:	83 e8 40             	sub    eax,0x40
c000c80b:	25 ff 00 00 00       	and    eax,0xff
c000c810:	83 ec 0c             	sub    esp,0xc
c000c813:	50                   	push   eax
c000c814:	e8 15 fb ff ff       	call   c000c32e <sendKeyToTerminal(unsigned char)>
c000c819:	83 c4 10             	add    esp,0x10
c000c81c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c81f:	66 3d 00 03          	cmp    ax,0x300
c000c823:	75 0f                	jne    c000c834 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c825:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c828:	83 f0 01             	xor    eax,0x1
c000c82b:	84 c0                	test   al,al
c000c82d:	74 05                	je     c000c834 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c82f:	e8 21 ba ff ff       	call   c0008255 <doTerminalCycle()>
c000c834:	90                   	nop
c000c835:	c9                   	leave  
c000c836:	c3                   	ret    

c000c837 <clearInternalKeybuffer(VgaText*)>:
c000c837:	55                   	push   ebp
c000c838:	89 e5                	mov    ebp,esp
c000c83a:	83 ec 08             	sub    esp,0x8
c000c83d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c840:	05 02 01 00 00       	add    eax,0x102
c000c845:	83 ec 0c             	sub    esp,0xc
c000c848:	50                   	push   eax
c000c849:	e8 f2 3c ff ff       	call   c0000540 <strlen>
c000c84e:	83 c4 10             	add    esp,0x10
c000c851:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c854:	81 c2 02 01 00 00    	add    edx,0x102
c000c85a:	83 ec 04             	sub    esp,0x4
c000c85d:	50                   	push   eax
c000c85e:	6a 00                	push   0x0
c000c860:	52                   	push   edx
c000c861:	e8 6a 3c ff ff       	call   c00004d0 <memset>
c000c866:	83 c4 10             	add    esp,0x10
c000c869:	90                   	nop
c000c86a:	c9                   	leave  
c000c86b:	c3                   	ret    

c000c86c <readKeyboard(VgaText*, char*, unsigned long)>:
c000c86c:	55                   	push   ebp
c000c86d:	89 e5                	mov    ebp,esp
c000c86f:	83 ec 18             	sub    esp,0x18
c000c872:	a1 c8 4f 02 c0       	mov    eax,ds:0xc0024fc8
c000c877:	85 c0                	test   eax,eax
c000c879:	74 2a                	je     c000c8a5 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c87b:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c881:	8b 0d c8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fc8
c000c887:	83 ec 04             	sub    esp,0x4
c000c88a:	68 e0 4f 02 c0       	push   0xc0024fe0
c000c88f:	83 ec 08             	sub    esp,0x8
c000c892:	89 e2                	mov    edx,esp
c000c894:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c897:	89 02                	mov    DWORD PTR [edx],eax
c000c899:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c89c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c8a0:	ff d1                	call   ecx
c000c8a2:	83 c4 10             	add    esp,0x10
c000c8a5:	fb                   	sti    
c000c8a6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c8ad:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c8b1:	0f 84 cb 00 00 00    	je     c000c982 <readKeyboard(VgaText*, char*, unsigned long)+0x116>
c000c8b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8ba:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c8c0:	84 c0                	test   al,al
c000c8c2:	75 28                	jne    c000c8ec <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c8c4:	fa                   	cli    
c000c8c5:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c8ca:	40                   	inc    eax
c000c8cb:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c8d0:	e8 5f 6f 00 00       	call   c0013834 <schedule()>
c000c8d5:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c8da:	48                   	dec    eax
c000c8db:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c8e0:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c8e5:	85 c0                	test   eax,eax
c000c8e7:	75 ce                	jne    c000c8b7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8e9:	fb                   	sti    
c000c8ea:	eb cb                	jmp    c000c8b7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c8ef:	8d 50 01             	lea    edx,[eax+0x1]
c000c8f2:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8f5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8f8:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000c8fe:	88 10                	mov    BYTE PTR [eax],dl
c000c900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c903:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c909:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c90c:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c910:	75 1e                	jne    c000c930 <readKeyboard(VgaText*, char*, unsigned long)+0xc4>
c000c912:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c917:	8b 00                	mov    eax,DWORD PTR [eax]
c000c919:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c91c:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c922:	83 ec 08             	sub    esp,0x8
c000c925:	6a 02                	push   0x2
c000c927:	50                   	push   eax
c000c928:	e8 d6 3d 00 00       	call   c0010703 <KeRaiseSignal(SigHandlerBlock*, int)>
c000c92d:	83 c4 10             	add    esp,0x10
c000c930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c933:	05 02 01 00 00       	add    eax,0x102
c000c938:	83 ec 0c             	sub    esp,0xc
c000c93b:	50                   	push   eax
c000c93c:	e8 ff 3b ff ff       	call   c0000540 <strlen>
c000c941:	83 c4 10             	add    esp,0x10
c000c944:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c947:	81 c2 02 01 00 00    	add    edx,0x102
c000c94d:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c950:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c953:	81 c2 02 01 00 00    	add    edx,0x102
c000c959:	83 ec 04             	sub    esp,0x4
c000c95c:	50                   	push   eax
c000c95d:	51                   	push   ecx
c000c95e:	52                   	push   edx
c000c95f:	e8 7c 3a ff ff       	call   c00003e0 <memmove>
c000c964:	83 c4 10             	add    esp,0x10
c000c967:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c96a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c96d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c971:	74 0a                	je     c000c97d <readKeyboard(VgaText*, char*, unsigned long)+0x111>
c000c973:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c977:	0f 85 30 ff ff ff    	jne    c000c8ad <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c97d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c980:	eb 03                	jmp    c000c985 <readKeyboard(VgaText*, char*, unsigned long)+0x119>
c000c982:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c985:	c9                   	leave  
c000c986:	c3                   	ret    
c000c987:	90                   	nop

c000c988 <Keyboard::Keyboard(char const*)>:
c000c988:	83 ec 0c             	sub    esp,0xc
c000c98b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c98f:	83 ec 08             	sub    esp,0x8
c000c992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c996:	50                   	push   eax
c000c997:	e8 48 f2 ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000c99c:	83 c4 10             	add    esp,0x10
c000c99f:	ba 1c e9 01 c0       	mov    edx,0xc001e91c
c000c9a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9a8:	89 10                	mov    DWORD PTR [eax],edx
c000c9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ae:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c9b8:	c6 05 c4 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024fc4,0x1
c000c9bf:	90                   	nop
c000c9c0:	83 c4 0c             	add    esp,0xc
c000c9c3:	c3                   	ret    

c000c9c4 <Keyboard::~Keyboard()>:
c000c9c4:	83 ec 0c             	sub    esp,0xc
c000c9c7:	ba 1c e9 01 c0       	mov    edx,0xc001e91c
c000c9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d0:	89 10                	mov    DWORD PTR [eax],edx
c000c9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d6:	83 ec 0c             	sub    esp,0xc
c000c9d9:	50                   	push   eax
c000c9da:	e8 6f ef ff ff       	call   c000b94e <Device::~Device()>
c000c9df:	83 c4 10             	add    esp,0x10
c000c9e2:	90                   	nop
c000c9e3:	83 c4 0c             	add    esp,0xc
c000c9e6:	c3                   	ret    
c000c9e7:	90                   	nop

c000c9e8 <Keyboard::~Keyboard()>:
c000c9e8:	83 ec 0c             	sub    esp,0xc
c000c9eb:	83 ec 0c             	sub    esp,0xc
c000c9ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f2:	e8 cd ff ff ff       	call   c000c9c4 <Keyboard::~Keyboard()>
c000c9f7:	83 c4 10             	add    esp,0x10
c000c9fa:	83 ec 08             	sub    esp,0x8
c000c9fd:	68 5c 01 00 00       	push   0x15c
c000ca02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca06:	e8 0d db ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000ca0b:	83 c4 10             	add    esp,0x10
c000ca0e:	83 c4 0c             	add    esp,0xc
c000ca11:	c3                   	ret    

c000ca12 <LogicalDisk::close(int, int, void*)>:
c000ca12:	83 c8 ff             	or     eax,0xffffffff
c000ca15:	c3                   	ret    

c000ca16 <LogicalDisk::~LogicalDisk()>:
c000ca16:	83 ec 0c             	sub    esp,0xc
c000ca19:	ba 94 e9 01 c0       	mov    edx,0xc001e994
c000ca1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca22:	89 10                	mov    DWORD PTR [eax],edx
c000ca24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca28:	83 ec 0c             	sub    esp,0xc
c000ca2b:	50                   	push   eax
c000ca2c:	e8 1d ef ff ff       	call   c000b94e <Device::~Device()>
c000ca31:	83 c4 10             	add    esp,0x10
c000ca34:	90                   	nop
c000ca35:	83 c4 0c             	add    esp,0xc
c000ca38:	c3                   	ret    
c000ca39:	90                   	nop

c000ca3a <LogicalDisk::~LogicalDisk()>:
c000ca3a:	83 ec 0c             	sub    esp,0xc
c000ca3d:	83 ec 0c             	sub    esp,0xc
c000ca40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca44:	e8 cd ff ff ff       	call   c000ca16 <LogicalDisk::~LogicalDisk()>
c000ca49:	83 c4 10             	add    esp,0x10
c000ca4c:	83 ec 08             	sub    esp,0x8
c000ca4f:	68 74 01 00 00       	push   0x174
c000ca54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca58:	e8 bb da ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000ca5d:	83 c4 10             	add    esp,0x10
c000ca60:	83 c4 0c             	add    esp,0xc
c000ca63:	c3                   	ret    

c000ca64 <LogicalDisk::open(int, int, void*)>:
c000ca64:	83 ec 18             	sub    esp,0x18
c000ca67:	68 48 e9 01 c0       	push   0xc001e948
c000ca6c:	e8 a6 38 00 00       	call   c0010317 <KePanic(char const*)>
c000ca71:	83 c8 ff             	or     eax,0xffffffff
c000ca74:	83 c4 1c             	add    esp,0x1c
c000ca77:	c3                   	ret    

c000ca78 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ca78:	53                   	push   ebx
c000ca79:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ca7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca85:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ca8b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ca91:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ca97:	77 10                	ja     c000caa9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ca99:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ca9f:	89 d3                	mov    ebx,edx
c000caa1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000caa7:	72 05                	jb     c000caae <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000caa9:	83 c8 ff             	or     eax,0xffffffff
c000caac:	89 c2                	mov    edx,eax
c000caae:	5b                   	pop    ebx
c000caaf:	c3                   	ret    

c000cab0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cab0:	56                   	push   esi
c000cab1:	83 c8 ff             	or     eax,0xffffffff
c000cab4:	53                   	push   ebx
c000cab5:	89 c2                	mov    edx,eax
c000cab7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cabb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cabf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cac3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cac9:	77 27                	ja     c000caf2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cacb:	89 d8                	mov    eax,ebx
c000cacd:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cad3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cad9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cade:	89 c2                	mov    edx,eax
c000cae0:	73 10                	jae    c000caf2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cae2:	89 c8                	mov    eax,ecx
c000cae4:	89 da                	mov    edx,ebx
c000cae6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000caec:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000caf2:	5b                   	pop    ebx
c000caf3:	5e                   	pop    esi
c000caf4:	c3                   	ret    
c000caf5:	90                   	nop

c000caf6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000caf6:	83 ec 1c             	sub    esp,0x1c
c000caf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cafd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb09:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cb0d:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb10:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cb14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb1c:	83 ec 08             	sub    esp,0x8
c000cb1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb23:	50                   	push   eax
c000cb24:	e8 bb f0 ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000cb29:	83 c4 10             	add    esp,0x10
c000cb2c:	ba 94 e9 01 c0       	mov    edx,0xc001e994
c000cb31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb35:	89 10                	mov    DWORD PTR [eax],edx
c000cb37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb3b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb46:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb51:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cb5b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb67:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cb6d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cb73:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb77:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cb7a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb7e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cb84:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cb8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb8e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cb92:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cb98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb9c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cba6:	90                   	nop
c000cba7:	83 c4 1c             	add    esp,0x1c
c000cbaa:	c3                   	ret    
c000cbab:	90                   	nop

c000cbac <LogicalDisk::assignDriveLetter()>:
c000cbac:	55                   	push   ebp
c000cbad:	57                   	push   edi
c000cbae:	56                   	push   esi
c000cbaf:	53                   	push   ebx
c000cbb0:	83 ec 14             	sub    esp,0x14
c000cbb3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cbb7:	8b 3d 00 54 02 c0    	mov    edi,DWORD PTR ds:0xc0025400
c000cbbd:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cbc3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cbc7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cbcd:	8b 3d 04 54 02 c0    	mov    edi,DWORD PTR ds:0xc0025404
c000cbd3:	3c 01                	cmp    al,0x1
c000cbd5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cbd9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cbdd:	19 c0                	sbb    eax,eax
c000cbdf:	83 e0 02             	and    eax,0x2
c000cbe2:	83 c0 41             	add    eax,0x41
c000cbe5:	0f be e8             	movsx  ebp,al
c000cbe8:	3c 43                	cmp    al,0x43
c000cbea:	75 10                	jne    c000cbfc <LogicalDisk::assignDriveLetter()+0x50>
c000cbec:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cbf3:	75 5d                	jne    c000cc52 <LogicalDisk::assignDriveLetter()+0xa6>
c000cbf5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cbfa:	75 56                	jne    c000cc52 <LogicalDisk::assignDriveLetter()+0xa6>
c000cbfc:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cbff:	ba 01 00 00 00       	mov    edx,0x1
c000cc04:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cc08:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cc0c:	d3 e2                	shl    edx,cl
c000cc0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc12:	89 d7                	mov    edi,edx
c000cc14:	89 d6                	mov    esi,edx
c000cc16:	c1 ff 1f             	sar    edi,0x1f
c000cc19:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cc1d:	21 f9                	and    ecx,edi
c000cc1f:	09 d1                	or     ecx,edx
c000cc21:	75 2f                	jne    c000cc52 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc23:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cc27:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc2b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cc31:	09 f2                	or     edx,esi
c000cc33:	89 15 00 54 02 c0    	mov    DWORD PTR ds:0xc0025400,edx
c000cc39:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc3d:	09 fa                	or     edx,edi
c000cc3f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cc43:	89 15 04 54 02 c0    	mov    DWORD PTR ds:0xc0025404,edx
c000cc49:	89 1c bd 20 54 02 c0 	mov    DWORD PTR [edi*4-0x3ffdabe0],ebx
c000cc50:	eb 08                	jmp    c000cc5a <LogicalDisk::assignDriveLetter()+0xae>
c000cc52:	45                   	inc    ebp
c000cc53:	40                   	inc    eax
c000cc54:	3c 5b                	cmp    al,0x5b
c000cc56:	75 90                	jne    c000cbe8 <LogicalDisk::assignDriveLetter()+0x3c>
c000cc58:	31 c0                	xor    eax,eax
c000cc5a:	83 c4 14             	add    esp,0x14
c000cc5d:	5b                   	pop    ebx
c000cc5e:	5e                   	pop    esi
c000cc5f:	5f                   	pop    edi
c000cc60:	5d                   	pop    ebp
c000cc61:	c3                   	ret    

c000cc62 <LogicalDisk::mount()>:
c000cc62:	56                   	push   esi
c000cc63:	53                   	push   ebx
c000cc64:	53                   	push   ebx
c000cc65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc69:	8b 1d b4 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb4
c000cc6f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cc79:	85 db                	test   ebx,ebx
c000cc7b:	74 27                	je     c000cca4 <LogicalDisk::mount()+0x42>
c000cc7d:	51                   	push   ecx
c000cc7e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cc85:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cc87:	83 e8 41             	sub    eax,0x41
c000cc8a:	50                   	push   eax
c000cc8b:	56                   	push   esi
c000cc8c:	53                   	push   ebx
c000cc8d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cc90:	83 c4 10             	add    esp,0x10
c000cc93:	84 c0                	test   al,al
c000cc95:	74 08                	je     c000cc9f <LogicalDisk::mount()+0x3d>
c000cc97:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cc9d:	eb 07                	jmp    c000cca6 <LogicalDisk::mount()+0x44>
c000cc9f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cca2:	eb d5                	jmp    c000cc79 <LogicalDisk::mount()+0x17>
c000cca4:	31 c0                	xor    eax,eax
c000cca6:	5a                   	pop    edx
c000cca7:	5b                   	pop    ebx
c000cca8:	5e                   	pop    esi
c000cca9:	c3                   	ret    

c000ccaa <LogicalDisk::unmount()>:
c000ccaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccae:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ccb8:	c3                   	ret    
c000ccb9:	90                   	nop

c000ccba <LogicalDisk::eject()>:
c000ccba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccbe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ccc4:	8b 10                	mov    edx,DWORD PTR [eax]
c000ccc6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ccca:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cccd:	90                   	nop

c000ccce <LogicalDisk::unassignDriveLetter()>:
c000ccce:	57                   	push   edi
c000cccf:	56                   	push   esi
c000ccd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ccd4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000ccdb:	84 c9                	test   cl,cl
c000ccdd:	75 0f                	jne    c000ccee <LogicalDisk::unassignDriveLetter()+0x20>
c000ccdf:	c7 44 24 0c 6c e9 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e96c
c000cce7:	5e                   	pop    esi
c000cce8:	5f                   	pop    edi
c000cce9:	e9 29 36 00 00       	jmp    c0010317 <KePanic(char const*)>
c000ccee:	83 e9 41             	sub    ecx,0x41
c000ccf1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000ccf8:	b8 01 00 00 00       	mov    eax,0x1
c000ccfd:	c7 04 8d 20 54 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdabe0],0x0
c000cd08:	d3 e0                	shl    eax,cl
c000cd0a:	89 c7                	mov    edi,eax
c000cd0c:	f7 d0                	not    eax
c000cd0e:	c1 ff 1f             	sar    edi,0x1f
c000cd11:	21 05 00 54 02 c0    	and    DWORD PTR ds:0xc0025400,eax
c000cd17:	89 fe                	mov    esi,edi
c000cd19:	f7 d6                	not    esi
c000cd1b:	21 35 04 54 02 c0    	and    DWORD PTR ds:0xc0025404,esi
c000cd21:	5e                   	pop    esi
c000cd22:	5f                   	pop    edi
c000cd23:	c3                   	ret    

c000cd24 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cd24:	57                   	push   edi
c000cd25:	56                   	push   esi
c000cd26:	53                   	push   ebx
c000cd27:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd2f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cd37:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cd3d:	77 41                	ja     c000cd80 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cd3f:	99                   	cdq    
c000cd40:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cd46:	01 c8                	add    eax,ecx
c000cd48:	11 da                	adc    edx,ebx
c000cd4a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cd50:	19 d7                	sbb    edi,edx
c000cd52:	72 33                	jb     c000cd87 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cd54:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cd5a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd60:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd64:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd68:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cd6e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd78:	5b                   	pop    ebx
c000cd79:	5e                   	pop    esi
c000cd7a:	5f                   	pop    edi
c000cd7b:	e9 56 0a 00 00       	jmp    c000d7d6 <VCache::read(unsigned long long, int, void*)>
c000cd80:	b8 05 00 00 00       	mov    eax,0x5
c000cd85:	eb 05                	jmp    c000cd8c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cd87:	b8 07 00 00 00       	mov    eax,0x7
c000cd8c:	5b                   	pop    ebx
c000cd8d:	5e                   	pop    esi
c000cd8e:	5f                   	pop    edi
c000cd8f:	c3                   	ret    

c000cd90 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cd90:	57                   	push   edi
c000cd91:	56                   	push   esi
c000cd92:	53                   	push   ebx
c000cd93:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd9b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cda3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cda9:	77 41                	ja     c000cdec <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cdab:	99                   	cdq    
c000cdac:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cdb2:	01 c8                	add    eax,ecx
c000cdb4:	11 da                	adc    edx,ebx
c000cdb6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cdbc:	19 d7                	sbb    edi,edx
c000cdbe:	72 33                	jb     c000cdf3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cdc0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cdc6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cdcc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cdd0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cdd4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cdda:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cde0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cde4:	5b                   	pop    ebx
c000cde5:	5e                   	pop    esi
c000cde6:	5f                   	pop    edi
c000cde7:	e9 d4 08 00 00       	jmp    c000d6c0 <VCache::write(unsigned long long, int, void*)>
c000cdec:	b8 05 00 00 00       	mov    eax,0x5
c000cdf1:	eb 05                	jmp    c000cdf8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cdf3:	b8 07 00 00 00       	mov    eax,0x7
c000cdf8:	5b                   	pop    ebx
c000cdf9:	5e                   	pop    esi
c000cdfa:	5f                   	pop    edi
c000cdfb:	c3                   	ret    

c000cdfc <Mouse::Mouse(char const*)>:
c000cdfc:	83 ec 0c             	sub    esp,0xc
c000cdff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce03:	83 ec 08             	sub    esp,0x8
c000ce06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce0a:	50                   	push   eax
c000ce0b:	e8 d4 ed ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000ce10:	83 c4 10             	add    esp,0x10
c000ce13:	ba c0 e9 01 c0       	mov    edx,0xc001e9c0
c000ce18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce1c:	89 10                	mov    DWORD PTR [eax],edx
c000ce1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce22:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ce2c:	90                   	nop
c000ce2d:	83 c4 0c             	add    esp,0xc
c000ce30:	c3                   	ret    
c000ce31:	90                   	nop
c000ce32:	66 90                	xchg   ax,ax

c000ce34 <Mouse::~Mouse()>:
c000ce34:	83 ec 0c             	sub    esp,0xc
c000ce37:	ba c0 e9 01 c0       	mov    edx,0xc001e9c0
c000ce3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce40:	89 10                	mov    DWORD PTR [eax],edx
c000ce42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce46:	83 ec 0c             	sub    esp,0xc
c000ce49:	50                   	push   eax
c000ce4a:	e8 ff ea ff ff       	call   c000b94e <Device::~Device()>
c000ce4f:	83 c4 10             	add    esp,0x10
c000ce52:	90                   	nop
c000ce53:	83 c4 0c             	add    esp,0xc
c000ce56:	c3                   	ret    
c000ce57:	90                   	nop

c000ce58 <Mouse::~Mouse()>:
c000ce58:	83 ec 0c             	sub    esp,0xc
c000ce5b:	83 ec 0c             	sub    esp,0xc
c000ce5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce62:	e8 cd ff ff ff       	call   c000ce34 <Mouse::~Mouse()>
c000ce67:	83 c4 10             	add    esp,0x10
c000ce6a:	83 ec 08             	sub    esp,0x8
c000ce6d:	68 58 01 00 00       	push   0x158
c000ce72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce76:	e8 9d d6 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000ce7b:	83 c4 10             	add    esp,0x10
c000ce7e:	83 c4 0c             	add    esp,0xc
c000ce81:	c3                   	ret    

c000ce82 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ce82:	55                   	push   ebp
c000ce83:	57                   	push   edi
c000ce84:	56                   	push   esi
c000ce85:	53                   	push   ebx
c000ce86:	81 ec 28 01 00 00    	sub    esp,0x128
c000ce8c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ce93:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ce9a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cea1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cea8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ceac:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ceb0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ceb7:	e8 24 ee ff ff       	call   c000bce0 <Device::getName()>
c000cebc:	5a                   	pop    edx
c000cebd:	59                   	pop    ecx
c000cebe:	50                   	push   eax
c000cebf:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cec3:	55                   	push   ebp
c000cec4:	e8 37 37 ff ff       	call   c0000600 <strcpy>
c000cec9:	5b                   	pop    ebx
c000ceca:	58                   	pop    eax
c000cecb:	68 e4 e9 01 c0       	push   0xc001e9e4
c000ced0:	55                   	push   ebp
c000ced1:	e8 ea 38 ff ff       	call   c00007c0 <strcat>
c000ced6:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cedd:	e8 93 a9 ff ff       	call   c0007875 <malloc>
c000cee2:	83 c4 0c             	add    esp,0xc
c000cee5:	89 c3                	mov    ebx,eax
c000cee7:	57                   	push   edi
c000cee8:	56                   	push   esi
c000cee9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ceed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cef1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cef8:	55                   	push   ebp
c000cef9:	50                   	push   eax
c000cefa:	e8 f7 fb ff ff       	call   c000caf6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ceff:	83 c4 14             	add    esp,0x14
c000cf02:	53                   	push   ebx
c000cf03:	e8 a4 fc ff ff       	call   c000cbac <LogicalDisk::assignDriveLetter()>
c000cf08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf0b:	e8 52 fd ff ff       	call   c000cc62 <LogicalDisk::mount()>
c000cf10:	58                   	pop    eax
c000cf11:	5a                   	pop    edx
c000cf12:	53                   	push   ebx
c000cf13:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cf1a:	e8 2d eb ff ff       	call   c000ba4c <Device::addChild(Device*)>
c000cf1f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cf25:	5b                   	pop    ebx
c000cf26:	5e                   	pop    esi
c000cf27:	5f                   	pop    edi
c000cf28:	5d                   	pop    ebp
c000cf29:	c3                   	ret    

c000cf2a <createPartitionsForDisk(PhysicalDisk*)>:
c000cf2a:	55                   	push   ebp
c000cf2b:	57                   	push   edi
c000cf2c:	56                   	push   esi
c000cf2d:	53                   	push   ebx
c000cf2e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cf34:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cf3b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cf41:	3d 00 02 00 00       	cmp    eax,0x200
c000cf46:	74 27                	je     c000cf6f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000cf48:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000cf4e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000cf54:	83 ec 10             	sub    esp,0x10
c000cf57:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cf5b:	99                   	cdq    
c000cf5c:	c1 e6 0a             	shl    esi,0xa
c000cf5f:	52                   	push   edx
c000cf60:	89 fd                	mov    ebp,edi
c000cf62:	50                   	push   eax
c000cf63:	55                   	push   ebp
c000cf64:	56                   	push   esi
c000cf65:	e8 06 fa 00 00       	call   c001c970 <__udivdi3>
c000cf6a:	e9 b1 00 00 00       	jmp    c000d020 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cf6f:	83 ec 0c             	sub    esp,0xc
c000cf72:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cf74:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000cf78:	56                   	push   esi
c000cf79:	6a 01                	push   0x1
c000cf7b:	6a 00                	push   0x0
c000cf7d:	6a 00                	push   0x0
c000cf7f:	53                   	push   ebx
c000cf80:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cf83:	83 c4 20             	add    esp,0x20
c000cf86:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000cf8e:	75 0a                	jne    c000cf9a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000cf90:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cf98:	74 2c                	je     c000cfc6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000cf9a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cfa0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cfa6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cfac:	83 ec 10             	sub    esp,0x10
c000cfaf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cfb3:	89 f7                	mov    edi,esi
c000cfb5:	c1 e0 0a             	shl    eax,0xa
c000cfb8:	c1 ff 1f             	sar    edi,0x1f
c000cfbb:	57                   	push   edi
c000cfbc:	56                   	push   esi
c000cfbd:	52                   	push   edx
c000cfbe:	50                   	push   eax
c000cfbf:	e8 ac f9 00 00       	call   c001c970 <__udivdi3>
c000cfc4:	eb 5a                	jmp    c000d020 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cfc6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000cfcd:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000cfd4:	83 e1 7f             	and    ecx,0x7f
c000cfd7:	83 e0 7f             	and    eax,0x7f
c000cfda:	01 c1                	add    ecx,eax
c000cfdc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cfe3:	83 e0 7f             	and    eax,0x7f
c000cfe6:	01 c1                	add    ecx,eax
c000cfe8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000cfef:	83 e0 7f             	and    eax,0x7f
c000cff2:	00 c1                	add    cl,al
c000cff4:	74 41                	je     c000d037 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000cff6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cffc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d002:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d008:	83 ec 10             	sub    esp,0x10
c000d00b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d00f:	89 f7                	mov    edi,esi
c000d011:	c1 e0 0a             	shl    eax,0xa
c000d014:	c1 ff 1f             	sar    edi,0x1f
c000d017:	57                   	push   edi
c000d018:	56                   	push   esi
c000d019:	52                   	push   edx
c000d01a:	50                   	push   eax
c000d01b:	e8 50 f9 00 00       	call   c001c970 <__udivdi3>
c000d020:	83 c4 14             	add    esp,0x14
c000d023:	52                   	push   edx
c000d024:	50                   	push   eax
c000d025:	6a 00                	push   0x0
c000d027:	6a 00                	push   0x0
c000d029:	53                   	push   ebx
c000d02a:	e8 53 fe ff ff       	call   c000ce82 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d02f:	83 c4 20             	add    esp,0x20
c000d032:	e9 79 01 00 00       	jmp    c000d1b0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d037:	89 f0                	mov    eax,esi
c000d039:	31 f6                	xor    esi,esi
c000d03b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d042:	75 02                	jne    c000d046 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d044:	89 f1                	mov    ecx,esi
c000d046:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d04d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d054:	c1 e2 08             	shl    edx,0x8
c000d057:	c1 e7 10             	shl    edi,0x10
c000d05a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d062:	09 fa                	or     edx,edi
c000d064:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d06c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d073:	83 c0 10             	add    eax,0x10
c000d076:	09 fa                	or     edx,edi
c000d078:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d07f:	c1 e7 18             	shl    edi,0x18
c000d082:	09 fa                	or     edx,edi
c000d084:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d08b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d08f:	c1 e7 10             	shl    edi,0x10
c000d092:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d099:	c1 e2 08             	shl    edx,0x8
c000d09c:	09 fa                	or     edx,edi
c000d09e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d0a5:	09 fa                	or     edx,edi
c000d0a7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d0ae:	c1 e7 18             	shl    edi,0x18
c000d0b1:	09 fa                	or     edx,edi
c000d0b3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d0b7:	46                   	inc    esi
c000d0b8:	83 fe 04             	cmp    esi,0x4
c000d0bb:	0f 85 7a ff ff ff    	jne    c000d03b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d0c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c5:	83 f0 01             	xor    eax,0x1
c000d0c8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d0cc:	75 57                	jne    c000d125 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d0ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0d2:	83 f0 01             	xor    eax,0x1
c000d0d5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d0d9:	75 4a                	jne    c000d125 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d0db:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d0df:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d0e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d0ef:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d0f5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d0fb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d101:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d105:	89 f7                	mov    edi,esi
c000d107:	c1 e0 0a             	shl    eax,0xa
c000d10a:	c1 ff 1f             	sar    edi,0x1f
c000d10d:	57                   	push   edi
c000d10e:	56                   	push   esi
c000d10f:	52                   	push   edx
c000d110:	50                   	push   eax
c000d111:	e8 5a f8 00 00       	call   c001c970 <__udivdi3>
c000d116:	83 c4 10             	add    esp,0x10
c000d119:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d11d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d121:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d125:	84 c9                	test   cl,cl
c000d127:	74 53                	je     c000d17c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d129:	0f b6 c9             	movzx  ecx,cl
c000d12c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d130:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d134:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d138:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d13c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d140:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d144:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d148:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d14c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d150:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d154:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d15c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d160:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d164:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d168:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d16c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d170:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d174:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d178:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d17c:	31 ed                	xor    ebp,ebp
c000d17e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d182:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d186:	89 f8                	mov    eax,edi
c000d188:	09 f0                	or     eax,esi
c000d18a:	74 1e                	je     c000d1aa <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d18c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d190:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d194:	89 d1                	mov    ecx,edx
c000d196:	09 c1                	or     ecx,eax
c000d198:	74 10                	je     c000d1aa <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d19a:	83 ec 0c             	sub    esp,0xc
c000d19d:	57                   	push   edi
c000d19e:	56                   	push   esi
c000d19f:	52                   	push   edx
c000d1a0:	50                   	push   eax
c000d1a1:	53                   	push   ebx
c000d1a2:	e8 db fc ff ff       	call   c000ce82 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d1a7:	83 c4 20             	add    esp,0x20
c000d1aa:	45                   	inc    ebp
c000d1ab:	83 fd 04             	cmp    ebp,0x4
c000d1ae:	75 ce                	jne    c000d17e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d1b0:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d1b6:	5b                   	pop    ebx
c000d1b7:	5e                   	pop    esi
c000d1b8:	5f                   	pop    edi
c000d1b9:	5d                   	pop    ebp
c000d1ba:	c3                   	ret    
c000d1bb:	90                   	nop

c000d1bc <Serial::Serial(char const*)>:
c000d1bc:	83 ec 0c             	sub    esp,0xc
c000d1bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1c3:	83 ec 08             	sub    esp,0x8
c000d1c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1ca:	50                   	push   eax
c000d1cb:	e8 14 ea ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000d1d0:	83 c4 10             	add    esp,0x10
c000d1d3:	ba f8 e9 01 c0       	mov    edx,0xc001e9f8
c000d1d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1dc:	89 10                	mov    DWORD PTR [eax],edx
c000d1de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d1ec:	90                   	nop
c000d1ed:	83 c4 0c             	add    esp,0xc
c000d1f0:	c3                   	ret    
c000d1f1:	90                   	nop
c000d1f2:	66 90                	xchg   ax,ax

c000d1f4 <Serial::~Serial()>:
c000d1f4:	83 ec 0c             	sub    esp,0xc
c000d1f7:	ba f8 e9 01 c0       	mov    edx,0xc001e9f8
c000d1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d200:	89 10                	mov    DWORD PTR [eax],edx
c000d202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d206:	83 ec 0c             	sub    esp,0xc
c000d209:	50                   	push   eax
c000d20a:	e8 3f e7 ff ff       	call   c000b94e <Device::~Device()>
c000d20f:	83 c4 10             	add    esp,0x10
c000d212:	90                   	nop
c000d213:	83 c4 0c             	add    esp,0xc
c000d216:	c3                   	ret    
c000d217:	90                   	nop

c000d218 <Serial::~Serial()>:
c000d218:	83 ec 0c             	sub    esp,0xc
c000d21b:	83 ec 0c             	sub    esp,0xc
c000d21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d222:	e8 cd ff ff ff       	call   c000d1f4 <Serial::~Serial()>
c000d227:	83 c4 10             	add    esp,0x10
c000d22a:	83 ec 08             	sub    esp,0x8
c000d22d:	68 58 01 00 00       	push   0x158
c000d232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d236:	e8 dd d2 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000d23b:	83 c4 10             	add    esp,0x10
c000d23e:	83 c4 0c             	add    esp,0xc
c000d241:	c3                   	ret    
c000d242:	66 90                	xchg   ax,ax

c000d244 <Timer::Timer(char const*)>:
c000d244:	83 ec 0c             	sub    esp,0xc
c000d247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d24b:	83 ec 08             	sub    esp,0x8
c000d24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d252:	50                   	push   eax
c000d253:	e8 8c e9 ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000d258:	83 c4 10             	add    esp,0x10
c000d25b:	ba 3c ea 01 c0       	mov    edx,0xc001ea3c
c000d260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d264:	89 10                	mov    DWORD PTR [eax],edx
c000d266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d26a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d274:	90                   	nop
c000d275:	83 c4 0c             	add    esp,0xc
c000d278:	c3                   	ret    
c000d279:	90                   	nop
c000d27a:	66 90                	xchg   ax,ax

c000d27c <Timer::~Timer()>:
c000d27c:	83 ec 0c             	sub    esp,0xc
c000d27f:	ba 3c ea 01 c0       	mov    edx,0xc001ea3c
c000d284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d288:	89 10                	mov    DWORD PTR [eax],edx
c000d28a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d28e:	83 ec 0c             	sub    esp,0xc
c000d291:	50                   	push   eax
c000d292:	e8 b7 e6 ff ff       	call   c000b94e <Device::~Device()>
c000d297:	83 c4 10             	add    esp,0x10
c000d29a:	90                   	nop
c000d29b:	83 c4 0c             	add    esp,0xc
c000d29e:	c3                   	ret    
c000d29f:	90                   	nop

c000d2a0 <Timer::~Timer()>:
c000d2a0:	83 ec 0c             	sub    esp,0xc
c000d2a3:	83 ec 0c             	sub    esp,0xc
c000d2a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2aa:	e8 cd ff ff ff       	call   c000d27c <Timer::~Timer()>
c000d2af:	83 c4 10             	add    esp,0x10
c000d2b2:	83 ec 08             	sub    esp,0x8
c000d2b5:	68 5c 01 00 00       	push   0x15c
c000d2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2be:	e8 55 d2 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000d2c3:	83 c4 10             	add    esp,0x10
c000d2c6:	83 c4 0c             	add    esp,0xc
c000d2c9:	c3                   	ret    

c000d2ca <Timer::read()>:
c000d2ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2ce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d2d4:	c3                   	ret    

c000d2d5 <setupTimer(int)>:
c000d2d5:	53                   	push   ebx
c000d2d6:	83 ec 14             	sub    esp,0x14
c000d2d9:	68 5c 01 00 00       	push   0x15c
c000d2de:	e8 92 a5 ff ff       	call   c0007875 <malloc>
c000d2e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d2e6:	89 c3                	mov    ebx,eax
c000d2e8:	e8 9f ef 00 00       	call   c001c28c <PIT::PIT()>
c000d2ed:	58                   	pop    eax
c000d2ee:	5a                   	pop    edx
c000d2ef:	53                   	push   ebx
c000d2f0:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c000d2f6:	e8 51 e7 ff ff       	call   c000ba4c <Device::addChild(Device*)>
c000d2fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d2fd:	6a 00                	push   0x0
c000d2ff:	6a 00                	push   0x0
c000d301:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d305:	53                   	push   ebx
c000d306:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d309:	89 d8                	mov    eax,ebx
c000d30b:	83 c4 28             	add    esp,0x28
c000d30e:	5b                   	pop    ebx
c000d30f:	c3                   	ret    

c000d310 <timerHandler(unsigned int)>:
c000d310:	56                   	push   esi
c000d311:	53                   	push   ebx
c000d312:	51                   	push   ecx
c000d313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d317:	01 05 8c 54 02 c0    	add    DWORD PTR ds:0xc002548c,eax
c000d31d:	80 3d bd 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022ebd,0x0
c000d324:	0f 84 4a 01 00 00    	je     c000d474 <timerHandler(unsigned int)+0x164>
c000d32a:	fa                   	cli    
c000d32b:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c000d331:	83 ec 0c             	sub    esp,0xc
c000d334:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c000d33a:	68 78 61 02 c0       	push   0xc0026178
c000d33f:	e8 fc fb 00 00       	call   c001cf40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d344:	83 c4 10             	add    esp,0x10
c000d347:	84 c0                	test   al,al
c000d349:	0f 85 a1 00 00 00    	jne    c000d3f0 <timerHandler(unsigned int)+0xe0>
c000d34f:	83 ec 0c             	sub    esp,0xc
c000d352:	68 78 61 02 c0       	push   0xc0026178
c000d357:	e8 00 fc 00 00       	call   c001cf5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d35c:	83 c4 10             	add    esp,0x10
c000d35f:	89 c6                	mov    esi,eax
c000d361:	8d 76 00             	lea    esi,[esi+0x0]
c000d364:	83 ec 0c             	sub    esp,0xc
c000d367:	68 78 61 02 c0       	push   0xc0026178
c000d36c:	e8 eb fb 00 00       	call   c001cf5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d371:	c7 04 24 78 61 02 c0 	mov    DWORD PTR [esp],0xc0026178
c000d378:	89 c3                	mov    ebx,eax
c000d37a:	e8 e5 fb 00 00       	call   c001cf64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d37f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d382:	83 c4 10             	add    esp,0x10
c000d385:	3b 05 8c 54 02 c0    	cmp    eax,DWORD PTR ds:0xc002548c
c000d38b:	77 23                	ja     c000d3b0 <timerHandler(unsigned int)+0xa0>
c000d38d:	83 ec 0c             	sub    esp,0xc
c000d390:	53                   	push   ebx
c000d391:	e8 62 69 00 00       	call   c0013cf8 <unblockTask(ThreadControlBlock*)>
c000d396:	83 c4 10             	add    esp,0x10
c000d399:	39 de                	cmp    esi,ebx
c000d39b:	75 27                	jne    c000d3c4 <timerHandler(unsigned int)+0xb4>
c000d39d:	83 ec 0c             	sub    esp,0xc
c000d3a0:	68 78 61 02 c0       	push   0xc0026178
c000d3a5:	e8 b2 fb 00 00       	call   c001cf5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d3aa:	89 c6                	mov    esi,eax
c000d3ac:	eb 12                	jmp    c000d3c0 <timerHandler(unsigned int)+0xb0>
c000d3ae:	66 90                	xchg   ax,ax
c000d3b0:	52                   	push   edx
c000d3b1:	52                   	push   edx
c000d3b2:	53                   	push   ebx
c000d3b3:	68 78 61 02 c0       	push   0xc0026178
c000d3b8:	e8 5f fc 00 00       	call   c001d01c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d3bd:	8d 76 00             	lea    esi,[esi+0x0]
c000d3c0:	83 c4 10             	add    esp,0x10
c000d3c3:	90                   	nop
c000d3c4:	83 ec 0c             	sub    esp,0xc
c000d3c7:	68 78 61 02 c0       	push   0xc0026178
c000d3cc:	e8 6f fb 00 00       	call   c001cf40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d3d1:	83 c4 10             	add    esp,0x10
c000d3d4:	84 c0                	test   al,al
c000d3d6:	75 18                	jne    c000d3f0 <timerHandler(unsigned int)+0xe0>
c000d3d8:	83 ec 0c             	sub    esp,0xc
c000d3db:	68 78 61 02 c0       	push   0xc0026178
c000d3e0:	e8 77 fb 00 00       	call   c001cf5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d3e5:	83 c4 10             	add    esp,0x10
c000d3e8:	39 f0                	cmp    eax,esi
c000d3ea:	0f 85 74 ff ff ff    	jne    c000d364 <timerHandler(unsigned int)+0x54>
c000d3f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d3f5:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d3f9:	74 41                	je     c000d43c <timerHandler(unsigned int)+0x12c>
c000d3fb:	80 3d bc 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022ebc,0x0
c000d402:	74 38                	je     c000d43c <timerHandler(unsigned int)+0x12c>
c000d404:	fa                   	cli    
c000d405:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c000d40b:	a1 8c 54 02 c0       	mov    eax,ds:0xc002548c
c000d410:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d416:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d419:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d41f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d422:	72 08                	jb     c000d42c <timerHandler(unsigned int)+0x11c>
c000d424:	e8 0b 64 00 00       	call   c0013834 <schedule()>
c000d429:	8d 76 00             	lea    esi,[esi+0x0]
c000d42c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000d431:	48                   	dec    eax
c000d432:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000d437:	75 03                	jne    c000d43c <timerHandler(unsigned int)+0x12c>
c000d439:	fb                   	sti    
c000d43a:	66 90                	xchg   ax,ax
c000d43c:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000d441:	48                   	dec    eax
c000d442:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c000d447:	75 1b                	jne    c000d464 <timerHandler(unsigned int)+0x154>
c000d449:	83 3d 60 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026160,0x0
c000d450:	74 12                	je     c000d464 <timerHandler(unsigned int)+0x154>
c000d452:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c000d45c:	e8 d3 63 00 00       	call   c0013834 <schedule()>
c000d461:	8d 76 00             	lea    esi,[esi+0x0]
c000d464:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000d469:	48                   	dec    eax
c000d46a:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000d46f:	75 03                	jne    c000d474 <timerHandler(unsigned int)+0x164>
c000d471:	fb                   	sti    
c000d472:	66 90                	xchg   ax,ax
c000d474:	58                   	pop    eax
c000d475:	5b                   	pop    ebx
c000d476:	5e                   	pop    esi
c000d477:	c3                   	ret    

c000d478 <VCache::VCache(PhysicalDisk*)>:
c000d478:	53                   	push   ebx
c000d479:	83 ec 18             	sub    esp,0x18
c000d47c:	ba 6c ea 01 c0       	mov    edx,0xc001ea6c
c000d481:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d485:	89 10                	mov    DWORD PTR [eax],edx
c000d487:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d48b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d492:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d496:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d49d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4a1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d4a8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d4af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4b3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d4ba:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d4c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4c5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d4cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4d0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d4d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4d8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d4df:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d4e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4ea:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d4ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4f2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d4f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4fa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d4fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d502:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d509:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d511:	83 ec 0c             	sub    esp,0xc
c000d514:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d518:	e8 58 a3 ff ff       	call   c0007875 <malloc>
c000d51d:	83 c4 10             	add    esp,0x10
c000d520:	89 c3                	mov    ebx,eax
c000d522:	83 ec 0c             	sub    esp,0xc
c000d525:	53                   	push   ebx
c000d526:	e8 d5 60 00 00       	call   c0013600 <Mutex::Mutex()>
c000d52b:	83 c4 10             	add    esp,0x10
c000d52e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d532:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d535:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d539:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d53d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d540:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d544:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d54b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d54f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d555:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d559:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d55c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d560:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d566:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d56c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d570:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d573:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d576:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d57a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d57e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d582:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d588:	05 00 02 00 00       	add    eax,0x200
c000d58d:	c1 e0 03             	shl    eax,0x3
c000d590:	83 ec 0c             	sub    esp,0xc
c000d593:	50                   	push   eax
c000d594:	e8 dc a2 ff ff       	call   c0007875 <malloc>
c000d599:	83 c4 10             	add    esp,0x10
c000d59c:	89 c2                	mov    edx,eax
c000d59e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d5a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5a9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d5b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d5b8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d5bc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d5c2:	89 d0                	mov    eax,edx
c000d5c4:	c1 e0 02             	shl    eax,0x2
c000d5c7:	01 d0                	add    eax,edx
c000d5c9:	c1 e0 04             	shl    eax,0x4
c000d5cc:	83 ec 0c             	sub    esp,0xc
c000d5cf:	50                   	push   eax
c000d5d0:	e8 a0 a2 ff ff       	call   c0007875 <malloc>
c000d5d5:	83 c4 10             	add    esp,0x10
c000d5d8:	89 c2                	mov    edx,eax
c000d5da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5de:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d5e1:	90                   	nop
c000d5e2:	83 c4 18             	add    esp,0x18
c000d5e5:	5b                   	pop    ebx
c000d5e6:	c3                   	ret    
c000d5e7:	90                   	nop

c000d5e8 <VCache::invalidateReadBuffer()>:
c000d5e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d5ec:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d5f2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d5f6:	c3                   	ret    
c000d5f7:	90                   	nop

c000d5f8 <VCache::writeWriteBuffer()>:
c000d5f8:	53                   	push   ebx
c000d5f9:	83 ec 08             	sub    esp,0x8
c000d5fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d600:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d604:	74 1e                	je     c000d624 <VCache::writeWriteBuffer()+0x2c>
c000d606:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d609:	83 ec 0c             	sub    esp,0xc
c000d60c:	8b 10                	mov    edx,DWORD PTR [eax]
c000d60e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d611:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d614:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	50                   	push   eax
c000d61b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d61e:	83 c4 20             	add    esp,0x20
c000d621:	8d 76 00             	lea    esi,[esi+0x0]
c000d624:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d62b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d632:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d636:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d63d:	83 c4 08             	add    esp,0x8
c000d640:	5b                   	pop    ebx
c000d641:	c3                   	ret    
c000d642:	66 90                	xchg   ax,ax

c000d644 <VCache::~VCache()>:
c000d644:	83 ec 0c             	sub    esp,0xc
c000d647:	ba 6c ea 01 c0       	mov    edx,0xc001ea6c
c000d64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d650:	89 10                	mov    DWORD PTR [eax],edx
c000d652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d656:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d659:	84 c0                	test   al,al
c000d65b:	74 0f                	je     c000d66c <VCache::~VCache()+0x28>
c000d65d:	83 ec 0c             	sub    esp,0xc
c000d660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d664:	e8 8f ff ff ff       	call   c000d5f8 <VCache::writeWriteBuffer()>
c000d669:	83 c4 10             	add    esp,0x10
c000d66c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d670:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d673:	83 ec 0c             	sub    esp,0xc
c000d676:	50                   	push   eax
c000d677:	e8 09 a2 ff ff       	call   c0007885 <free>
c000d67c:	83 c4 10             	add    esp,0x10
c000d67f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d683:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d686:	83 ec 0c             	sub    esp,0xc
c000d689:	50                   	push   eax
c000d68a:	e8 f6 a1 ff ff       	call   c0007885 <free>
c000d68f:	83 c4 10             	add    esp,0x10
c000d692:	90                   	nop
c000d693:	83 c4 0c             	add    esp,0xc
c000d696:	c3                   	ret    
c000d697:	90                   	nop

c000d698 <VCache::~VCache()>:
c000d698:	83 ec 0c             	sub    esp,0xc
c000d69b:	83 ec 0c             	sub    esp,0xc
c000d69e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6a2:	e8 9d ff ff ff       	call   c000d644 <VCache::~VCache()>
c000d6a7:	83 c4 10             	add    esp,0x10
c000d6aa:	83 ec 08             	sub    esp,0x8
c000d6ad:	6a 44                	push   0x44
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	e8 60 ce ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000d6b8:	83 c4 10             	add    esp,0x10
c000d6bb:	83 c4 0c             	add    esp,0xc
c000d6be:	c3                   	ret    
c000d6bf:	90                   	nop

c000d6c0 <VCache::write(unsigned long long, int, void*)>:
c000d6c0:	55                   	push   ebp
c000d6c1:	57                   	push   edi
c000d6c2:	56                   	push   esi
c000d6c3:	53                   	push   ebx
c000d6c4:	83 ec 1c             	sub    esp,0x1c
c000d6c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d6cb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d6cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6d3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d6d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d6db:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d6df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d6e3:	31 c0                	xor    eax,eax
c000d6e5:	8d 76 00             	lea    esi,[esi+0x0]
c000d6e8:	39 e8                	cmp    eax,ebp
c000d6ea:	7d 18                	jge    c000d704 <VCache::write(unsigned long long, int, void*)+0x44>
c000d6ec:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d6ef:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d6f5:	0f af c8             	imul   ecx,eax
c000d6f8:	89 ca                	mov    edx,ecx
c000d6fa:	01 f2                	add    edx,esi
c000d6fc:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d6fe:	40                   	inc    eax
c000d6ff:	eb e7                	jmp    c000d6e8 <VCache::write(unsigned long long, int, void*)+0x28>
c000d701:	8d 76 00             	lea    esi,[esi+0x0]
c000d704:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d708:	74 0a                	je     c000d714 <VCache::write(unsigned long long, int, void*)+0x54>
c000d70a:	53                   	push   ebx
c000d70b:	e8 d8 fe ff ff       	call   c000d5e8 <VCache::invalidateReadBuffer()>
c000d710:	58                   	pop    eax
c000d711:	8d 76 00             	lea    esi,[esi+0x0]
c000d714:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d718:	74 5a                	je     c000d774 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d71a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d71d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d721:	89 f8                	mov    eax,edi
c000d723:	99                   	cdq    
c000d724:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d727:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d72a:	31 c1                	xor    ecx,eax
c000d72c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d730:	31 d0                	xor    eax,edx
c000d732:	09 c1                	or     ecx,eax
c000d734:	75 32                	jne    c000d768 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d736:	83 fd 01             	cmp    ebp,0x1
c000d739:	75 2d                	jne    c000d768 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d73b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d73e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d744:	0f af f9             	imul   edi,ecx
c000d747:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d74a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d74c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d74f:	40                   	inc    eax
c000d750:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d753:	83 f8 50             	cmp    eax,0x50
c000d756:	75 74                	jne    c000d7cc <VCache::write(unsigned long long, int, void*)+0x10c>
c000d758:	83 ec 0c             	sub    esp,0xc
c000d75b:	53                   	push   ebx
c000d75c:	e8 97 fe ff ff       	call   c000d5f8 <VCache::writeWriteBuffer()>
c000d761:	83 c4 10             	add    esp,0x10
c000d764:	eb 66                	jmp    c000d7cc <VCache::write(unsigned long long, int, void*)+0x10c>
c000d766:	66 90                	xchg   ax,ax
c000d768:	83 ec 0c             	sub    esp,0xc
c000d76b:	53                   	push   ebx
c000d76c:	e8 87 fe ff ff       	call   c000d5f8 <VCache::writeWriteBuffer()>
c000d771:	83 c4 10             	add    esp,0x10
c000d774:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d777:	83 fd 4f             	cmp    ebp,0x4f
c000d77a:	7f 24                	jg     c000d7a0 <VCache::write(unsigned long long, int, void*)+0xe0>
c000d77c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d780:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d783:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d786:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d78a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d78e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d791:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d794:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d79a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d79c:	eb 2e                	jmp    c000d7cc <VCache::write(unsigned long long, int, void*)+0x10c>
c000d79e:	66 90                	xchg   ax,ax
c000d7a0:	8b 10                	mov    edx,DWORD PTR [eax]
c000d7a2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d7a6:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d7aa:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d7ae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7b2:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d7b6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d7ba:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d7be:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d7c1:	83 c4 1c             	add    esp,0x1c
c000d7c4:	5b                   	pop    ebx
c000d7c5:	5e                   	pop    esi
c000d7c6:	5f                   	pop    edi
c000d7c7:	5d                   	pop    ebp
c000d7c8:	ff e0                	jmp    eax
c000d7ca:	66 90                	xchg   ax,ax
c000d7cc:	83 c4 1c             	add    esp,0x1c
c000d7cf:	31 c0                	xor    eax,eax
c000d7d1:	5b                   	pop    ebx
c000d7d2:	5e                   	pop    esi
c000d7d3:	5f                   	pop    edi
c000d7d4:	5d                   	pop    ebp
c000d7d5:	c3                   	ret    

c000d7d6 <VCache::read(unsigned long long, int, void*)>:
c000d7d6:	55                   	push   ebp
c000d7d7:	57                   	push   edi
c000d7d8:	56                   	push   esi
c000d7d9:	53                   	push   ebx
c000d7da:	83 ec 1c             	sub    esp,0x1c
c000d7dd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000d7e1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d7e5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d7e9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000d7ed:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d7f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d7f5:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000d7f9:	74 0d                	je     c000d808 <VCache::read(unsigned long long, int, void*)+0x32>
c000d7fb:	83 ec 0c             	sub    esp,0xc
c000d7fe:	57                   	push   edi
c000d7ff:	e8 f4 fd ff ff       	call   c000d5f8 <VCache::writeWriteBuffer()>
c000d804:	83 c4 10             	add    esp,0x10
c000d807:	90                   	nop
c000d808:	83 fd 01             	cmp    ebp,0x1
c000d80b:	0f 85 93 00 00 00    	jne    c000d8a4 <VCache::read(unsigned long long, int, void*)+0xce>
c000d811:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d814:	89 04 24             	mov    DWORD PTR [esp],eax
c000d817:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000d81e:	0f 85 80 00 00 00    	jne    c000d8a4 <VCache::read(unsigned long long, int, void*)+0xce>
c000d824:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000d827:	89 e9                	mov    ecx,ebp
c000d829:	f7 d9                	neg    ecx
c000d82b:	89 c8                	mov    eax,ecx
c000d82d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d831:	c1 f8 1f             	sar    eax,0x1f
c000d834:	21 d9                	and    ecx,ebx
c000d836:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d83a:	89 c8                	mov    eax,ecx
c000d83c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d840:	21 f1                	and    ecx,esi
c000d842:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000d846:	89 ca                	mov    edx,ecx
c000d848:	74 2e                	je     c000d878 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d84a:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000d84d:	75 29                	jne    c000d878 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d84f:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000d852:	75 24                	jne    c000d878 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d854:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d857:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d85d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000d860:	8d 70 ff             	lea    esi,[eax-0x1]
c000d863:	21 f3                	and    ebx,esi
c000d865:	0f af d9             	imul   ebx,ecx
c000d868:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000d86b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d86f:	89 de                	mov    esi,ebx
c000d871:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d873:	31 c0                	xor    eax,eax
c000d875:	eb 61                	jmp    c000d8d8 <VCache::read(unsigned long long, int, void*)+0x102>
c000d877:	90                   	nop
c000d878:	83 ec 0c             	sub    esp,0xc
c000d87b:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000d87f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d883:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000d886:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000d889:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d88b:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000d88e:	55                   	push   ebp
c000d88f:	52                   	push   edx
c000d890:	50                   	push   eax
c000d891:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d895:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000d898:	83 c4 20             	add    esp,0x20
c000d89b:	85 c0                	test   eax,eax
c000d89d:	75 39                	jne    c000d8d8 <VCache::read(unsigned long long, int, void*)+0x102>
c000d89f:	eb b3                	jmp    c000d854 <VCache::read(unsigned long long, int, void*)+0x7e>
c000d8a1:	8d 76 00             	lea    esi,[esi+0x0]
c000d8a4:	83 ec 0c             	sub    esp,0xc
c000d8a7:	57                   	push   edi
c000d8a8:	e8 3b fd ff ff       	call   c000d5e8 <VCache::invalidateReadBuffer()>
c000d8ad:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d8b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d8b4:	8b 10                	mov    edx,DWORD PTR [eax]
c000d8b6:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000d8ba:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000d8be:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000d8c2:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000d8c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8ca:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d8cd:	83 c4 2c             	add    esp,0x2c
c000d8d0:	5b                   	pop    ebx
c000d8d1:	5e                   	pop    esi
c000d8d2:	5f                   	pop    edi
c000d8d3:	5d                   	pop    ebp
c000d8d4:	ff e0                	jmp    eax
c000d8d6:	66 90                	xchg   ax,ax
c000d8d8:	83 c4 1c             	add    esp,0x1c
c000d8db:	5b                   	pop    ebx
c000d8dc:	5e                   	pop    esi
c000d8dd:	5f                   	pop    edi
c000d8de:	5d                   	pop    ebp
c000d8df:	c3                   	ret    

c000d8e0 <Video::putrect(int, int, int, int, unsigned int)>:
c000d8e0:	55                   	push   ebp
c000d8e1:	57                   	push   edi
c000d8e2:	56                   	push   esi
c000d8e3:	53                   	push   ebx
c000d8e4:	83 ec 1c             	sub    esp,0x1c
c000d8e7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d8eb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d8ef:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d8f3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d8f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d8fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8ff:	01 df                	add    edi,ebx
c000d901:	39 fb                	cmp    ebx,edi
c000d903:	7d 1f                	jge    c000d924 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d905:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d909:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d90d:	7d 12                	jge    c000d921 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d90f:	8b 16                	mov    edx,DWORD PTR [esi]
c000d911:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d915:	53                   	push   ebx
c000d916:	55                   	push   ebp
c000d917:	45                   	inc    ebp
c000d918:	56                   	push   esi
c000d919:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d91c:	83 c4 10             	add    esp,0x10
c000d91f:	eb e8                	jmp    c000d909 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d921:	43                   	inc    ebx
c000d922:	eb dd                	jmp    c000d901 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d924:	83 c4 1c             	add    esp,0x1c
c000d927:	5b                   	pop    ebx
c000d928:	5e                   	pop    esi
c000d929:	5f                   	pop    edi
c000d92a:	5d                   	pop    ebp
c000d92b:	c3                   	ret    

c000d92c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d92c:	55                   	push   ebp
c000d92d:	57                   	push   edi
c000d92e:	31 ff                	xor    edi,edi
c000d930:	56                   	push   esi
c000d931:	53                   	push   ebx
c000d932:	83 ec 1c             	sub    esp,0x1c
c000d935:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d939:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d93d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d944:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d949:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d94d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d951:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d955:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d958:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d95c:	01 f9                	add    ecx,edi
c000d95e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d962:	7d 2f                	jge    c000d993 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d964:	31 f6                	xor    esi,esi
c000d966:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d96a:	01 f2                	add    edx,esi
c000d96c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d970:	7d 1a                	jge    c000d98c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d972:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d975:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d978:	46                   	inc    esi
c000d979:	51                   	push   ecx
c000d97a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d97e:	52                   	push   edx
c000d97f:	55                   	push   ebp
c000d980:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d983:	83 c4 10             	add    esp,0x10
c000d986:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d98a:	eb da                	jmp    c000d966 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d98c:	47                   	inc    edi
c000d98d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d991:	eb c5                	jmp    c000d958 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d993:	83 c4 1c             	add    esp,0x1c
c000d996:	5b                   	pop    ebx
c000d997:	5e                   	pop    esi
c000d998:	5f                   	pop    edi
c000d999:	5d                   	pop    ebp
c000d99a:	c3                   	ret    
c000d99b:	90                   	nop

c000d99c <Video::blit(unsigned int*, int, int, int, int)>:
c000d99c:	55                   	push   ebp
c000d99d:	57                   	push   edi
c000d99e:	56                   	push   esi
c000d99f:	53                   	push   ebx
c000d9a0:	83 ec 1c             	sub    esp,0x1c
c000d9a3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d9a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d9ab:	85 c0                	test   eax,eax
c000d9ad:	79 02                	jns    c000d9b1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d9af:	31 c0                	xor    eax,eax
c000d9b1:	c1 e0 02             	shl    eax,0x2
c000d9b4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d9b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9bc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d9c0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d9c4:	39 d8                	cmp    eax,ebx
c000d9c6:	7e 49                	jle    c000da11 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d9c8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d9ce:	7c 41                	jl     c000da11 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d9d0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d9d4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d9d8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d9dc:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d9e0:	39 f9                	cmp    ecx,edi
c000d9e2:	7e 22                	jle    c000da06 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d9e4:	83 c5 04             	add    ebp,0x4
c000d9e7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d9ed:	7c 14                	jl     c000da03 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d9ef:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d9f1:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d9f4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d9f8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d9fc:	56                   	push   esi
c000d9fd:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000da00:	83 c4 10             	add    esp,0x10
c000da03:	47                   	inc    edi
c000da04:	eb d2                	jmp    c000d9d8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000da06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da0a:	43                   	inc    ebx
c000da0b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000da0f:	eb ab                	jmp    c000d9bc <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000da11:	83 c4 1c             	add    esp,0x1c
c000da14:	5b                   	pop    ebx
c000da15:	5e                   	pop    esi
c000da16:	5f                   	pop    edi
c000da17:	5d                   	pop    ebp
c000da18:	c3                   	ret    
c000da19:	90                   	nop

c000da1a <Video::clearScreen(unsigned int)>:
c000da1a:	57                   	push   edi
c000da1b:	56                   	push   esi
c000da1c:	53                   	push   ebx
c000da1d:	31 db                	xor    ebx,ebx
c000da1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da23:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000da29:	7e 1f                	jle    c000da4a <Video::clearScreen(unsigned int)+0x30>
c000da2b:	31 ff                	xor    edi,edi
c000da2d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000da33:	7e 12                	jle    c000da47 <Video::clearScreen(unsigned int)+0x2d>
c000da35:	8b 06                	mov    eax,DWORD PTR [esi]
c000da37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da3b:	53                   	push   ebx
c000da3c:	57                   	push   edi
c000da3d:	47                   	inc    edi
c000da3e:	56                   	push   esi
c000da3f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da42:	83 c4 10             	add    esp,0x10
c000da45:	eb e6                	jmp    c000da2d <Video::clearScreen(unsigned int)+0x13>
c000da47:	43                   	inc    ebx
c000da48:	eb d9                	jmp    c000da23 <Video::clearScreen(unsigned int)+0x9>
c000da4a:	5b                   	pop    ebx
c000da4b:	5e                   	pop    esi
c000da4c:	5f                   	pop    edi
c000da4d:	c3                   	ret    

c000da4e <Video::putpixel(int, int, unsigned int)>:
c000da4e:	c7 44 24 04 74 ea 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ea74
c000da56:	e9 bc 28 00 00       	jmp    c0010317 <KePanic(char const*)>
c000da5b:	90                   	nop

c000da5c <Video::Video(char const*)>:
c000da5c:	83 ec 0c             	sub    esp,0xc
c000da5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da63:	83 ec 08             	sub    esp,0x8
c000da66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6a:	50                   	push   eax
c000da6b:	e8 74 e1 ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000da70:	83 c4 10             	add    esp,0x10
c000da73:	ba e4 ea 01 c0       	mov    edx,0xc001eae4
c000da78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da7c:	89 10                	mov    DWORD PTR [eax],edx
c000da7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da82:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000da8c:	90                   	nop
c000da8d:	83 c4 0c             	add    esp,0xc
c000da90:	c3                   	ret    
c000da91:	90                   	nop

c000da92 <Video::~Video()>:
c000da92:	83 ec 0c             	sub    esp,0xc
c000da95:	ba e4 ea 01 c0       	mov    edx,0xc001eae4
c000da9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da9e:	89 10                	mov    DWORD PTR [eax],edx
c000daa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa4:	83 ec 0c             	sub    esp,0xc
c000daa7:	50                   	push   eax
c000daa8:	e8 a1 de ff ff       	call   c000b94e <Device::~Device()>
c000daad:	83 c4 10             	add    esp,0x10
c000dab0:	90                   	nop
c000dab1:	83 c4 0c             	add    esp,0xc
c000dab4:	c3                   	ret    
c000dab5:	90                   	nop

c000dab6 <Video::~Video()>:
c000dab6:	83 ec 0c             	sub    esp,0xc
c000dab9:	83 ec 0c             	sub    esp,0xc
c000dabc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dac0:	e8 cd ff ff ff       	call   c000da92 <Video::~Video()>
c000dac5:	83 c4 10             	add    esp,0x10
c000dac8:	83 ec 08             	sub    esp,0x8
c000dacb:	68 64 01 00 00       	push   0x164
c000dad0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dad4:	e8 3f ca ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000dad9:	83 c4 10             	add    esp,0x10
c000dadc:	83 c4 0c             	add    esp,0xc
c000dadf:	c3                   	ret    

c000dae0 <Video::isMonochrome()>:
c000dae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dae4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000daea:	c3                   	ret    
c000daeb:	90                   	nop

c000daec <Video::getWidth()>:
c000daec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daf0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000daf6:	c3                   	ret    
c000daf7:	90                   	nop

c000daf8 <Video::getHeight()>:
c000daf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dafc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db02:	c3                   	ret    
c000db03:	90                   	nop

c000db04 <Video::drawCursor(int, int, unsigned char*, int)>:
c000db04:	55                   	push   ebp
c000db05:	57                   	push   edi
c000db06:	56                   	push   esi
c000db07:	53                   	push   ebx
c000db08:	83 ec 2c             	sub    esp,0x2c
c000db0b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000db0f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000db13:	83 f8 01             	cmp    eax,0x1
c000db16:	19 c9                	sbb    ecx,ecx
c000db18:	31 db                	xor    ebx,ebx
c000db1a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000db1e:	89 cd                	mov    ebp,ecx
c000db20:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000db28:	f7 d5                	not    ebp
c000db2a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000db30:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000db34:	01 d8                	add    eax,ebx
c000db36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db3a:	56                   	push   esi
c000db3b:	e8 b8 ff ff ff       	call   c000daf8 <Video::getHeight()>
c000db40:	59                   	pop    ecx
c000db41:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000db45:	7e 70                	jle    c000dbb7 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000db47:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000db4b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000db4f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000db52:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000db56:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000db5a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000db61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db65:	89 f8                	mov    eax,edi
c000db67:	83 c0 20             	add    eax,0x20
c000db6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000db6e:	56                   	push   esi
c000db6f:	e8 78 ff ff ff       	call   c000daec <Video::getWidth()>
c000db74:	5a                   	pop    edx
c000db75:	39 c7                	cmp    edi,eax
c000db77:	7d 34                	jge    c000dbad <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000db79:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000db7e:	74 05                	je     c000db85 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000db80:	8b 06                	mov    eax,DWORD PTR [esi]
c000db82:	55                   	push   ebp
c000db83:	eb 0d                	jmp    c000db92 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000db85:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000db8a:	74 12                	je     c000db9e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000db8c:	8b 06                	mov    eax,DWORD PTR [esi]
c000db8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db92:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000db96:	57                   	push   edi
c000db97:	56                   	push   esi
c000db98:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db9b:	83 c4 10             	add    esp,0x10
c000db9e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000dba2:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000dba6:	47                   	inc    edi
c000dba7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000dbab:	75 c1                	jne    c000db6e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000dbad:	43                   	inc    ebx
c000dbae:	83 fb 20             	cmp    ebx,0x20
c000dbb1:	0f 85 79 ff ff ff    	jne    c000db30 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000dbb7:	83 c4 2c             	add    esp,0x2c
c000dbba:	5b                   	pop    ebx
c000dbbb:	5e                   	pop    esi
c000dbbc:	5f                   	pop    edi
c000dbbd:	5d                   	pop    ebp
c000dbbe:	c3                   	ret    
c000dbbf:	90                   	nop

c000dbc0 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000dbc0:	55                   	push   ebp
c000dbc1:	57                   	push   edi
c000dbc2:	56                   	push   esi
c000dbc3:	53                   	push   ebx
c000dbc4:	83 ec 28             	sub    esp,0x28
c000dbc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000dbcb:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000dbcf:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000dbd3:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000dbd7:	c1 e6 08             	shl    esi,0x8
c000dbda:	01 c6                	add    esi,eax
c000dbdc:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000dbe0:	c1 e0 08             	shl    eax,0x8
c000dbe3:	01 d0                	add    eax,edx
c000dbe5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dbed:	0f af c6             	imul   eax,esi
c000dbf0:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000dbf7:	50                   	push   eax
c000dbf8:	e8 78 9c ff ff       	call   c0007875 <malloc>
c000dbfd:	83 c4 10             	add    esp,0x10
c000dc00:	89 c7                	mov    edi,eax
c000dc02:	85 c0                	test   eax,eax
c000dc04:	75 10                	jne    c000dc16 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000dc06:	83 ec 0c             	sub    esp,0xc
c000dc09:	68 95 ea 01 c0       	push   0xc001ea95
c000dc0e:	e8 04 27 00 00       	call   c0010317 <KePanic(char const*)>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000dc19:	ba 12 00 00 00       	mov    edx,0x12
c000dc1e:	84 c0                	test   al,al
c000dc20:	74 11                	je     c000dc33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dc22:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dc26:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dc2a:	c1 fa 03             	sar    edx,0x3
c000dc2d:	0f af d1             	imul   edx,ecx
c000dc30:	83 c2 12             	add    edx,0x12
c000dc33:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dc37:	74 04                	je     c000dc3d <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000dc39:	85 f6                	test   esi,esi
c000dc3b:	75 12                	jne    c000dc4f <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dc3d:	83 ec 0c             	sub    esp,0xc
c000dc40:	68 a5 ea 01 c0       	push   0xc001eaa5
c000dc45:	e8 c4 c9 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000dc4a:	e9 b8 00 00 00       	jmp    c000dd07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dc4f:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dc53:	80 f9 02             	cmp    cl,0x2
c000dc56:	0f 85 96 00 00 00    	jne    c000dcf2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dc5c:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dc61:	75 0e                	jne    c000dc71 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dc63:	84 c0                	test   al,al
c000dc65:	75 0a                	jne    c000dc71 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dc67:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dc6a:	83 e8 18             	sub    eax,0x18
c000dc6d:	a8 f7                	test   al,0xf7
c000dc6f:	74 0a                	je     c000dc7b <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dc71:	83 ec 0c             	sub    esp,0xc
c000dc74:	68 ba ea 01 c0       	push   0xc001eaba
c000dc79:	eb 7f                	jmp    c000dcfa <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dc7b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dc83:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dc8b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dc8f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dc97:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dc9b:	75 0c                	jne    c000dca9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dc9d:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dca2:	c1 e0 18             	shl    eax,0x18
c000dca5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dca9:	45                   	inc    ebp
c000dcaa:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dcaf:	c1 e1 10             	shl    ecx,0x10
c000dcb2:	89 c8                	mov    eax,ecx
c000dcb4:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dcb9:	c1 e1 08             	shl    ecx,0x8
c000dcbc:	09 c1                	or     ecx,eax
c000dcbe:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dcc2:	09 c1                	or     ecx,eax
c000dcc4:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dcc8:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dccc:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dcd0:	c1 f8 03             	sar    eax,0x3
c000dcd3:	01 c2                	add    edx,eax
c000dcd5:	89 e8                	mov    eax,ebp
c000dcd7:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dcdb:	39 c6                	cmp    esi,eax
c000dcdd:	7f b0                	jg     c000dc8f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dcdf:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dce3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dce7:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dcea:	7e 22                	jle    c000dd0e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dcec:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dcf0:	eb 99                	jmp    c000dc8b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dcf2:	50                   	push   eax
c000dcf3:	50                   	push   eax
c000dcf4:	51                   	push   ecx
c000dcf5:	68 c8 ea 01 c0       	push   0xc001eac8
c000dcfa:	e8 0f c9 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000dcff:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dd02:	e8 7e 9b ff ff       	call   c0007885 <free>
c000dd07:	83 c4 10             	add    esp,0x10
c000dd0a:	31 ff                	xor    edi,edi
c000dd0c:	eb 0f                	jmp    c000dd1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000dd0e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dd12:	89 30                	mov    DWORD PTR [eax],esi
c000dd14:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd18:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dd1b:	89 30                	mov    DWORD PTR [eax],esi
c000dd1d:	83 c4 1c             	add    esp,0x1c
c000dd20:	89 f8                	mov    eax,edi
c000dd22:	5b                   	pop    ebx
c000dd23:	5e                   	pop    esi
c000dd24:	5f                   	pop    edi
c000dd25:	5d                   	pop    ebp
c000dd26:	c3                   	ret    
c000dd27:	90                   	nop

c000dd28 <Video::putTGA(int, int, unsigned char*, int)>:
c000dd28:	55                   	push   ebp
c000dd29:	57                   	push   edi
c000dd2a:	56                   	push   esi
c000dd2b:	53                   	push   ebx
c000dd2c:	83 ec 28             	sub    esp,0x28
c000dd2f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dd33:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dd37:	50                   	push   eax
c000dd38:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dd3c:	50                   	push   eax
c000dd3d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd41:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd45:	56                   	push   esi
c000dd46:	e8 75 fe ff ff       	call   c000dbc0 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dd4b:	83 c4 20             	add    esp,0x20
c000dd4e:	85 c0                	test   eax,eax
c000dd50:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dd54:	74 35                	je     c000dd8b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dd56:	89 c7                	mov    edi,eax
c000dd58:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dd5c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dd60:	39 d8                	cmp    eax,ebx
c000dd62:	7e 27                	jle    c000dd8b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dd64:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dd68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dd6c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dd70:	39 e8                	cmp    eax,ebp
c000dd72:	7e 14                	jle    c000dd88 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dd74:	8b 06                	mov    eax,DWORD PTR [esi]
c000dd76:	83 c7 04             	add    edi,0x4
c000dd79:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dd7c:	53                   	push   ebx
c000dd7d:	55                   	push   ebp
c000dd7e:	45                   	inc    ebp
c000dd7f:	56                   	push   esi
c000dd80:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dd83:	83 c4 10             	add    esp,0x10
c000dd86:	eb e0                	jmp    c000dd68 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dd88:	43                   	inc    ebx
c000dd89:	eb cd                	jmp    c000dd58 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dd8b:	83 c4 1c             	add    esp,0x1c
c000dd8e:	5b                   	pop    ebx
c000dd8f:	5e                   	pop    esi
c000dd90:	5f                   	pop    edi
c000dd91:	5d                   	pop    ebp
c000dd92:	c3                   	ret    
c000dd93:	90                   	nop

c000dd94 <ACPI::close(int, int, void*)>:
c000dd94:	83 ec 1c             	sub    esp,0x1c
c000dd97:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dd9f:	74 0b                	je     c000ddac <ACPI::close(int, int, void*)+0x18>
c000dda1:	b8 00 00 00 00       	mov    eax,0x0
c000dda6:	e9 9d 00 00 00       	jmp    c000de48 <ACPI::close(int, int, void*)+0xb4>
c000ddab:	90                   	nop
c000ddac:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ddb1:	75 29                	jne    c000dddc <ACPI::close(int, int, void*)+0x48>
c000ddb3:	a1 a8 54 02 c0       	mov    eax,ds:0xc00254a8
c000ddb8:	85 c0                	test   eax,eax
c000ddba:	74 08                	je     c000ddc4 <ACPI::close(int, int, void*)+0x30>
c000ddbc:	a1 a8 54 02 c0       	mov    eax,ds:0xc00254a8
c000ddc1:	ff d0                	call   eax
c000ddc3:	90                   	nop
c000ddc4:	83 ec 0c             	sub    esp,0xc
c000ddc7:	68 24 eb 01 c0       	push   0xc001eb24
c000ddcc:	e8 46 25 00 00       	call   c0010317 <KePanic(char const*)>
c000ddd1:	83 c4 10             	add    esp,0x10
c000ddd4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ddd9:	eb 6d                	jmp    c000de48 <ACPI::close(int, int, void*)+0xb4>
c000dddb:	90                   	nop
c000dddc:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dde1:	75 5d                	jne    c000de40 <ACPI::close(int, int, void*)+0xac>
c000dde3:	a1 a4 54 02 c0       	mov    eax,ds:0xc00254a4
c000dde8:	85 c0                	test   eax,eax
c000ddea:	74 08                	je     c000ddf4 <ACPI::close(int, int, void*)+0x60>
c000ddec:	a1 a4 54 02 c0       	mov    eax,ds:0xc00254a4
c000ddf1:	ff d0                	call   eax
c000ddf3:	90                   	nop
c000ddf4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ddf9:	8d 76 00             	lea    esi,[esi+0x0]
c000ddfc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000de00:	25 ff 00 00 00       	and    eax,0xff
c000de05:	83 e0 02             	and    eax,0x2
c000de08:	74 1e                	je     c000de28 <ACPI::close(int, int, void*)+0x94>
c000de0a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000de11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de15:	89 c2                	mov    edx,eax
c000de17:	ec                   	in     al,dx
c000de18:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000de1c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000de20:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000de24:	eb d6                	jmp    c000ddfc <ACPI::close(int, int, void*)+0x68>
c000de26:	66 90                	xchg   ax,ax
c000de28:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000de2f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000de34:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000de38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000de3c:	ee                   	out    dx,al
c000de3d:	8d 76 00             	lea    esi,[esi+0x0]
c000de40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000de45:	8d 76 00             	lea    esi,[esi+0x0]
c000de48:	83 c4 1c             	add    esp,0x1c
c000de4b:	c3                   	ret    

c000de4c <findRSDP()>:
c000de4c:	83 ec 1c             	sub    esp,0x1c
c000de4f:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000de54:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000de5a:	83 e0 04             	and    eax,0x4
c000de5d:	84 c0                	test   al,al
c000de5f:	75 07                	jne    c000de68 <findRSDP()+0x1c>
c000de61:	b8 00 00 00 00       	mov    eax,0x0
c000de66:	eb 70                	jmp    c000ded8 <findRSDP()+0x8c>
c000de68:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c000de6d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000de72:	7f 1c                	jg     c000de90 <findRSDP()+0x44>
c000de74:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000de79:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000de7f:	83 e2 fb             	and    edx,0xfffffffb
c000de82:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000de88:	b8 00 00 00 00       	mov    eax,0x0
c000de8d:	eb 49                	jmp    c000ded8 <findRSDP()+0x8c>
c000de8f:	90                   	nop
c000de90:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000de98:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dea0:	77 2e                	ja     c000ded0 <findRSDP()+0x84>
c000dea2:	83 ec 04             	sub    esp,0x4
c000dea5:	6a 08                	push   0x8
c000dea7:	68 bf eb 01 c0       	push   0xc001ebbf
c000deac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000deb0:	e8 db 24 ff ff       	call   c0000390 <memcmp>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	85 c0                	test   eax,eax
c000deba:	0f 94 c0             	sete   al
c000debd:	84 c0                	test   al,al
c000debf:	74 07                	je     c000dec8 <findRSDP()+0x7c>
c000dec1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dec5:	eb 11                	jmp    c000ded8 <findRSDP()+0x8c>
c000dec7:	90                   	nop
c000dec8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000decd:	eb c9                	jmp    c000de98 <findRSDP()+0x4c>
c000decf:	90                   	nop
c000ded0:	b8 00 00 00 00       	mov    eax,0x0
c000ded5:	8d 76 00             	lea    esi,[esi+0x0]
c000ded8:	83 c4 1c             	add    esp,0x1c
c000dedb:	c3                   	ret    

c000dedc <loadACPITables(unsigned char*)>:
c000dedc:	57                   	push   edi
c000dedd:	56                   	push   esi
c000dede:	53                   	push   ebx
c000dedf:	83 ec 60             	sub    esp,0x60
c000dee2:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000dee7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000deed:	83 e0 04             	and    eax,0x4
c000def0:	84 c0                	test   al,al
c000def2:	0f 84 3c 02 00 00    	je     c000e134 <loadACPITables(unsigned char*)+0x258>
c000def8:	a0 c0 56 02 c0       	mov    al,ds:0xc00256c0
c000defd:	84 c0                	test   al,al
c000deff:	74 77                	je     c000df78 <loadACPITables(unsigned char*)+0x9c>
c000df01:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df05:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000df09:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000df0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df10:	83 e8 24             	sub    eax,0x24
c000df13:	c1 e8 03             	shr    eax,0x3
c000df16:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000df1a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000df22:	66 90                	xchg   ax,ax
c000df24:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000df28:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000df2c:	0f 8d b6 00 00 00    	jge    c000dfe8 <loadACPITables(unsigned char*)+0x10c>
c000df32:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df36:	83 c0 24             	add    eax,0x24
c000df39:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000df3d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000df41:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000df45:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000df49:	c1 e0 03             	shl    eax,0x3
c000df4c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000df50:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000df54:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000df57:	8b 00                	mov    eax,DWORD PTR [eax]
c000df59:	89 c1                	mov    ecx,eax
c000df5b:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000df60:	8d 50 01             	lea    edx,[eax+0x1]
c000df63:	89 15 ac 54 02 c0    	mov    DWORD PTR ds:0xc00254ac,edx
c000df69:	89 ca                	mov    edx,ecx
c000df6b:	89 14 c5 c4 54 02 c0 	mov    DWORD PTR [eax*8-0x3ffdab3c],edx
c000df72:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000df76:	eb ac                	jmp    c000df24 <loadACPITables(unsigned char*)+0x48>
c000df78:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df7c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000df80:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df87:	83 e8 24             	sub    eax,0x24
c000df8a:	c1 e8 02             	shr    eax,0x2
c000df8d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000df91:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000df99:	8d 76 00             	lea    esi,[esi+0x0]
c000df9c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dfa0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000dfa4:	7d 42                	jge    c000dfe8 <loadACPITables(unsigned char*)+0x10c>
c000dfa6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dfaa:	83 c0 24             	add    eax,0x24
c000dfad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dfb1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dfb5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dfb9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dfbd:	c1 e0 02             	shl    eax,0x2
c000dfc0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000dfc4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dfc8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000dfca:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000dfcf:	8d 50 01             	lea    edx,[eax+0x1]
c000dfd2:	89 15 ac 54 02 c0    	mov    DWORD PTR ds:0xc00254ac,edx
c000dfd8:	89 ca                	mov    edx,ecx
c000dfda:	89 14 c5 c4 54 02 c0 	mov    DWORD PTR [eax*8-0x3ffdab3c],edx
c000dfe1:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000dfe5:	eb b5                	jmp    c000df9c <loadACPITables(unsigned char*)+0xc0>
c000dfe7:	90                   	nop
c000dfe8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000dff0:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000dff5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000dff9:	0f 8d 39 01 00 00    	jge    c000e138 <loadACPITables(unsigned char*)+0x25c>
c000dfff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e003:	8b 04 c5 c4 54 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdab3c]
c000e00a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e00e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e012:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e016:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e01a:	25 ff 0f 00 00       	and    eax,0xfff
c000e01f:	89 c6                	mov    esi,eax
c000e021:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c000e027:	83 ec 0c             	sub    esp,0xc
c000e02a:	6a 01                	push   0x1
c000e02c:	e8 20 b3 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e038:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e03e:	83 ec 0c             	sub    esp,0xc
c000e041:	6a 01                	push   0x1
c000e043:	6a 01                	push   0x1
c000e045:	50                   	push   eax
c000e046:	52                   	push   edx
c000e047:	53                   	push   ebx
c000e048:	e8 c1 bc ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e04d:	83 c4 20             	add    esp,0x20
c000e050:	09 f0                	or     eax,esi
c000e052:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e056:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e05a:	c1 e0 03             	shl    eax,0x3
c000e05d:	05 c0 54 02 c0       	add    eax,0xc00254c0
c000e062:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e066:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e06a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e06e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e076:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e07a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e07e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e082:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e086:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e08a:	89 c6                	mov    esi,eax
c000e08c:	89 d7                	mov    edi,edx
c000e08e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e090:	89 c8                	mov    eax,ecx
c000e092:	89 fa                	mov    edx,edi
c000e094:	89 f3                	mov    ebx,esi
c000e096:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e09a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e09e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e0a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e0ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e0b1:	05 00 10 00 00       	add    eax,0x1000
c000e0b6:	c1 e8 0c             	shr    eax,0xc
c000e0b9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0c9:	25 ff 0f 00 00       	and    eax,0xfff
c000e0ce:	89 c6                	mov    esi,eax
c000e0d0:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c000e0d6:	83 ec 0c             	sub    esp,0xc
c000e0d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e0dd:	e8 6f b2 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c000e0e2:	83 c4 10             	add    esp,0x10
c000e0e5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e0e9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e0ef:	83 ec 0c             	sub    esp,0xc
c000e0f2:	6a 01                	push   0x1
c000e0f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e0f8:	50                   	push   eax
c000e0f9:	52                   	push   edx
c000e0fa:	53                   	push   ebx
c000e0fb:	e8 0e bc ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e100:	83 c4 20             	add    esp,0x20
c000e103:	09 f0                	or     eax,esi
c000e105:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e109:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e10d:	83 ec 0c             	sub    esp,0xc
c000e110:	50                   	push   eax
c000e111:	e8 2f b5 ff ff       	call   c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c000e116:	83 c4 10             	add    esp,0x10
c000e119:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e11d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e121:	89 14 c5 c4 54 02 c0 	mov    DWORD PTR [eax*8-0x3ffdab3c],edx
c000e128:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e12c:	e9 bf fe ff ff       	jmp    c000dff0 <loadACPITables(unsigned char*)+0x114>
c000e131:	8d 76 00             	lea    esi,[esi+0x0]
c000e134:	90                   	nop
c000e135:	8d 76 00             	lea    esi,[esi+0x0]
c000e138:	83 c4 60             	add    esp,0x60
c000e13b:	5b                   	pop    ebx
c000e13c:	5e                   	pop    esi
c000e13d:	5f                   	pop    edi
c000e13e:	c3                   	ret    
c000e13f:	90                   	nop

c000e140 <findRSDT(unsigned char*)>:
c000e140:	57                   	push   edi
c000e141:	56                   	push   esi
c000e142:	53                   	push   ebx
c000e143:	83 ec 50             	sub    esp,0x50
c000e146:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e14b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e151:	83 e0 04             	and    eax,0x4
c000e154:	84 c0                	test   al,al
c000e156:	75 0c                	jne    c000e164 <findRSDT(unsigned char*)+0x24>
c000e158:	b8 00 00 00 00       	mov    eax,0x0
c000e15d:	e9 26 01 00 00       	jmp    c000e288 <findRSDT(unsigned char*)+0x148>
c000e162:	66 90                	xchg   ax,ax
c000e164:	89 e0                	mov    eax,esp
c000e166:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e16a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e16e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e172:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e17a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e17e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e182:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e186:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e18a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e18e:	89 c6                	mov    esi,eax
c000e190:	89 d7                	mov    edi,edx
c000e192:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e194:	89 c8                	mov    eax,ecx
c000e196:	89 fa                	mov    edx,edi
c000e198:	89 f3                	mov    ebx,esi
c000e19a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e19e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e1a2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e1a6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e1aa:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e1ae:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e1b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e1ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e1be:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e1c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e1ca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e1ce:	25 ff 0f 00 00       	and    eax,0xfff
c000e1d3:	89 c6                	mov    esi,eax
c000e1d5:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c000e1db:	83 ec 0c             	sub    esp,0xc
c000e1de:	6a 02                	push   0x2
c000e1e0:	e8 6c b1 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c000e1e5:	83 c4 10             	add    esp,0x10
c000e1e8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e1ec:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e1f2:	83 ec 0c             	sub    esp,0xc
c000e1f5:	6a 01                	push   0x1
c000e1f7:	6a 02                	push   0x2
c000e1f9:	50                   	push   eax
c000e1fa:	52                   	push   edx
c000e1fb:	53                   	push   ebx
c000e1fc:	e8 0d bb ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e201:	83 c4 20             	add    esp,0x20
c000e204:	09 f0                	or     eax,esi
c000e206:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e20a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e20e:	25 ff 0f 00 00       	and    eax,0xfff
c000e213:	89 c6                	mov    esi,eax
c000e215:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c000e21b:	83 ec 0c             	sub    esp,0xc
c000e21e:	6a 02                	push   0x2
c000e220:	e8 2c b1 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c000e225:	83 c4 10             	add    esp,0x10
c000e228:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e22c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e232:	83 ec 0c             	sub    esp,0xc
c000e235:	6a 01                	push   0x1
c000e237:	6a 02                	push   0x2
c000e239:	50                   	push   eax
c000e23a:	52                   	push   edx
c000e23b:	53                   	push   ebx
c000e23c:	e8 cd ba ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e241:	83 c4 20             	add    esp,0x20
c000e244:	09 f0                	or     eax,esi
c000e246:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e24a:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e24f:	75 13                	jne    c000e264 <findRSDT(unsigned char*)+0x124>
c000e251:	c6 05 c0 56 02 c0 00 	mov    BYTE PTR ds:0xc00256c0,0x0
c000e258:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e25c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e260:	eb 22                	jmp    c000e284 <findRSDT(unsigned char*)+0x144>
c000e262:	66 90                	xchg   ax,ax
c000e264:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e269:	75 11                	jne    c000e27c <findRSDT(unsigned char*)+0x13c>
c000e26b:	c6 05 c0 56 02 c0 01 	mov    BYTE PTR ds:0xc00256c0,0x1
c000e272:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e276:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e27a:	eb 08                	jmp    c000e284 <findRSDT(unsigned char*)+0x144>
c000e27c:	b8 00 00 00 00       	mov    eax,0x0
c000e281:	eb 05                	jmp    c000e288 <findRSDT(unsigned char*)+0x148>
c000e283:	90                   	nop
c000e284:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e288:	83 c4 50             	add    esp,0x50
c000e28b:	5b                   	pop    ebx
c000e28c:	5e                   	pop    esi
c000e28d:	5f                   	pop    edi
c000e28e:	c3                   	ret    
c000e28f:	90                   	nop

c000e290 <findDataTable(unsigned char*, char*)>:
c000e290:	83 ec 1c             	sub    esp,0x1c
c000e293:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e298:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e29e:	83 e0 04             	and    eax,0x4
c000e2a1:	84 c0                	test   al,al
c000e2a3:	75 07                	jne    c000e2ac <findDataTable(unsigned char*, char*)+0x1c>
c000e2a5:	b8 00 00 00 00       	mov    eax,0x0
c000e2aa:	eb 58                	jmp    c000e304 <findDataTable(unsigned char*, char*)+0x74>
c000e2ac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e2b4:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000e2b9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e2bd:	7d 3d                	jge    c000e2fc <findDataTable(unsigned char*, char*)+0x6c>
c000e2bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2c3:	c1 e0 03             	shl    eax,0x3
c000e2c6:	05 c0 54 02 c0       	add    eax,0xc00254c0
c000e2cb:	83 ec 04             	sub    esp,0x4
c000e2ce:	6a 04                	push   0x4
c000e2d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2d4:	50                   	push   eax
c000e2d5:	e8 b6 20 ff ff       	call   c0000390 <memcmp>
c000e2da:	83 c4 10             	add    esp,0x10
c000e2dd:	85 c0                	test   eax,eax
c000e2df:	0f 94 c0             	sete   al
c000e2e2:	84 c0                	test   al,al
c000e2e4:	74 0e                	je     c000e2f4 <findDataTable(unsigned char*, char*)+0x64>
c000e2e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2ea:	8b 04 c5 c4 54 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdab3c]
c000e2f1:	eb 11                	jmp    c000e304 <findDataTable(unsigned char*, char*)+0x74>
c000e2f3:	90                   	nop
c000e2f4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e2f8:	eb ba                	jmp    c000e2b4 <findDataTable(unsigned char*, char*)+0x24>
c000e2fa:	66 90                	xchg   ax,ax
c000e2fc:	b8 00 00 00 00       	mov    eax,0x0
c000e301:	8d 76 00             	lea    esi,[esi+0x0]
c000e304:	83 c4 1c             	add    esp,0x1c
c000e307:	c3                   	ret    

c000e308 <scanMADT()>:
c000e308:	53                   	push   ebx
c000e309:	83 ec 38             	sub    esp,0x38
c000e30c:	a1 d0 2e 02 c0       	mov    eax,ds:0xc0022ed0
c000e311:	25 00 04 00 00       	and    eax,0x400
c000e316:	74 14                	je     c000e32c <scanMADT()+0x24>
c000e318:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e31d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e323:	83 e2 fb             	and    edx,0xfffffffb
c000e326:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e32c:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e331:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e337:	83 e0 04             	and    eax,0x4
c000e33a:	84 c0                	test   al,al
c000e33c:	0f 84 8a 04 00 00    	je     c000e7cc <scanMADT()+0x4c4>
c000e342:	e8 05 fb ff ff       	call   c000de4c <findRSDP()>
c000e347:	a3 cc 56 02 c0       	mov    ds:0xc00256cc,eax
c000e34c:	a1 cc 56 02 c0       	mov    eax,ds:0xc00256cc
c000e351:	85 c0                	test   eax,eax
c000e353:	75 1b                	jne    c000e370 <scanMADT()+0x68>
c000e355:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e35a:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e360:	83 e2 fb             	and    edx,0xfffffffb
c000e363:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e369:	e9 66 04 00 00       	jmp    c000e7d4 <scanMADT()+0x4cc>
c000e36e:	66 90                	xchg   ax,ax
c000e370:	a1 cc 56 02 c0       	mov    eax,ds:0xc00256cc
c000e375:	83 ec 0c             	sub    esp,0xc
c000e378:	50                   	push   eax
c000e379:	e8 c2 fd ff ff       	call   c000e140 <findRSDT(unsigned char*)>
c000e37e:	83 c4 10             	add    esp,0x10
c000e381:	a3 c8 56 02 c0       	mov    ds:0xc00256c8,eax
c000e386:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000e38b:	85 c0                	test   eax,eax
c000e38d:	75 19                	jne    c000e3a8 <scanMADT()+0xa0>
c000e38f:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e394:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e39a:	83 e2 fb             	and    edx,0xfffffffb
c000e39d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3a3:	e9 2c 04 00 00       	jmp    c000e7d4 <scanMADT()+0x4cc>
c000e3a8:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000e3ad:	83 ec 0c             	sub    esp,0xc
c000e3b0:	50                   	push   eax
c000e3b1:	e8 26 fb ff ff       	call   c000dedc <loadACPITables(unsigned char*)>
c000e3b6:	83 c4 10             	add    esp,0x10
c000e3b9:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000e3be:	83 ec 08             	sub    esp,0x8
c000e3c1:	68 c8 eb 01 c0       	push   0xc001ebc8
c000e3c6:	50                   	push   eax
c000e3c7:	e8 c4 fe ff ff       	call   c000e290 <findDataTable(unsigned char*, char*)>
c000e3cc:	83 c4 10             	add    esp,0x10
c000e3cf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e3d3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e3d8:	75 1a                	jne    c000e3f4 <scanMADT()+0xec>
c000e3da:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e3df:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3e5:	83 e2 fe             	and    edx,0xfffffffe
c000e3e8:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3ee:	e9 e1 03 00 00       	jmp    c000e7d4 <scanMADT()+0x4cc>
c000e3f3:	90                   	nop
c000e3f4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e3fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e400:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e403:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e407:	0f 87 c7 03 00 00    	ja     c000e7d4 <scanMADT()+0x4cc>
c000e40d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e415:	0f 87 b9 03 00 00    	ja     c000e7d4 <scanMADT()+0x4cc>
c000e41b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e41f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e423:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e427:	8d 50 01             	lea    edx,[eax+0x1]
c000e42a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e42e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e432:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e436:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e43a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e43e:	8d 50 01             	lea    edx,[eax+0x1]
c000e441:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e445:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e449:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e44d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e451:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e456:	0f 86 74 03 00 00    	jbe    c000e7d0 <scanMADT()+0x4c8>
c000e45c:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e461:	75 5d                	jne    c000e4c0 <scanMADT()+0x1b8>
c000e463:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e467:	8d 50 01             	lea    edx,[eax+0x1]
c000e46a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e46e:	8a 15 c0 58 02 c0    	mov    dl,BYTE PTR ds:0xc00258c0
c000e474:	81 e2 ff 00 00 00    	and    edx,0xff
c000e47a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e47e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e482:	88 82 00 59 02 c0    	mov    BYTE PTR [edx-0x3ffda700],al
c000e488:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e48c:	8d 42 01             	lea    eax,[edx+0x1]
c000e48f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e493:	a0 c0 58 02 c0       	mov    al,ds:0xc00258c0
c000e498:	8d 48 01             	lea    ecx,[eax+0x1]
c000e49b:	88 0d c0 58 02 c0    	mov    BYTE PTR ds:0xc00258c0,cl
c000e4a1:	25 ff 00 00 00       	and    eax,0xff
c000e4a6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e4aa:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e4ae:	88 90 e0 58 02 c0    	mov    BYTE PTR [eax-0x3ffda720],dl
c000e4b4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4b9:	e9 f6 02 00 00       	jmp    c000e7b4 <scanMADT()+0x4ac>
c000e4be:	66 90                	xchg   ax,ax
c000e4c0:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e4c5:	0f 85 29 01 00 00    	jne    c000e5f4 <scanMADT()+0x2ec>
c000e4cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4cf:	8d 50 01             	lea    edx,[eax+0x1]
c000e4d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4d6:	8a 15 80 57 02 c0    	mov    dl,BYTE PTR ds:0xc0025780
c000e4dc:	81 e2 ff 00 00 00    	and    edx,0xff
c000e4e2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e4e6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e4ea:	88 82 a0 57 02 c0    	mov    BYTE PTR [edx-0x3ffda860],al
c000e4f0:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e4f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4fc:	01 d0                	add    eax,edx
c000e4fe:	83 c0 2c             	add    eax,0x2c
c000e501:	8a 00                	mov    al,BYTE PTR [eax]
c000e503:	31 d2                	xor    edx,edx
c000e505:	88 c2                	mov    dl,al
c000e507:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e50b:	8d 48 01             	lea    ecx,[eax+0x1]
c000e50e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e512:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e516:	25 ff 00 00 00       	and    eax,0xff
c000e51b:	c1 e0 08             	shl    eax,0x8
c000e51e:	89 d1                	mov    ecx,edx
c000e520:	09 c1                	or     ecx,eax
c000e522:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e526:	8d 50 02             	lea    edx,[eax+0x2]
c000e529:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e52d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e531:	25 ff 00 00 00       	and    eax,0xff
c000e536:	c1 e0 10             	shl    eax,0x10
c000e539:	09 c1                	or     ecx,eax
c000e53b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e53f:	8d 50 03             	lea    edx,[eax+0x3]
c000e542:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e546:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e54a:	25 ff 00 00 00       	and    eax,0xff
c000e54f:	c1 e0 18             	shl    eax,0x18
c000e552:	09 c1                	or     ecx,eax
c000e554:	89 ca                	mov    edx,ecx
c000e556:	a0 80 57 02 c0       	mov    al,ds:0xc0025780
c000e55b:	25 ff 00 00 00       	and    eax,0xff
c000e560:	89 14 85 c0 57 02 c0 	mov    DWORD PTR [eax*4-0x3ffda840],edx
c000e567:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e56c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e570:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e574:	01 d0                	add    eax,edx
c000e576:	83 c0 2c             	add    eax,0x2c
c000e579:	8a 00                	mov    al,BYTE PTR [eax]
c000e57b:	31 d2                	xor    edx,edx
c000e57d:	88 c2                	mov    dl,al
c000e57f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e583:	8d 48 01             	lea    ecx,[eax+0x1]
c000e586:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e58a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e58e:	25 ff 00 00 00       	and    eax,0xff
c000e593:	c1 e0 08             	shl    eax,0x8
c000e596:	89 d1                	mov    ecx,edx
c000e598:	09 c1                	or     ecx,eax
c000e59a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e59e:	8d 50 02             	lea    edx,[eax+0x2]
c000e5a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5a5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5a9:	25 ff 00 00 00       	and    eax,0xff
c000e5ae:	c1 e0 10             	shl    eax,0x10
c000e5b1:	09 c1                	or     ecx,eax
c000e5b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5b7:	8d 50 03             	lea    edx,[eax+0x3]
c000e5ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5be:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5c2:	25 ff 00 00 00       	and    eax,0xff
c000e5c7:	c1 e0 18             	shl    eax,0x18
c000e5ca:	09 c1                	or     ecx,eax
c000e5cc:	89 ca                	mov    edx,ecx
c000e5ce:	a0 80 57 02 c0       	mov    al,ds:0xc0025780
c000e5d3:	25 ff 00 00 00       	and    eax,0xff
c000e5d8:	89 14 85 40 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda7c0],edx
c000e5df:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e5e4:	a0 80 57 02 c0       	mov    al,ds:0xc0025780
c000e5e9:	40                   	inc    eax
c000e5ea:	a2 80 57 02 c0       	mov    ds:0xc0025780,al
c000e5ef:	e9 c0 01 00 00       	jmp    c000e7b4 <scanMADT()+0x4ac>
c000e5f4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e5f9:	0f 85 fd 00 00 00    	jne    c000e6fc <scanMADT()+0x3f4>
c000e5ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e603:	8d 50 01             	lea    edx,[eax+0x1]
c000e606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e60a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e60e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e612:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e616:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e61a:	8d 50 01             	lea    edx,[eax+0x1]
c000e61d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e625:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e629:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e62d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e631:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e635:	01 d0                	add    eax,edx
c000e637:	83 c0 2c             	add    eax,0x2c
c000e63a:	8a 00                	mov    al,BYTE PTR [eax]
c000e63c:	31 d2                	xor    edx,edx
c000e63e:	88 c2                	mov    dl,al
c000e640:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e644:	8d 48 01             	lea    ecx,[eax+0x1]
c000e647:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e64b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e64f:	25 ff 00 00 00       	and    eax,0xff
c000e654:	c1 e0 08             	shl    eax,0x8
c000e657:	89 d1                	mov    ecx,edx
c000e659:	09 c1                	or     ecx,eax
c000e65b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e65f:	8d 50 02             	lea    edx,[eax+0x2]
c000e662:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e666:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e66a:	25 ff 00 00 00       	and    eax,0xff
c000e66f:	c1 e0 10             	shl    eax,0x10
c000e672:	09 c1                	or     ecx,eax
c000e674:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e678:	8d 50 03             	lea    edx,[eax+0x3]
c000e67b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e67f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e683:	25 ff 00 00 00       	and    eax,0xff
c000e688:	c1 e0 18             	shl    eax,0x18
c000e68b:	09 c8                	or     eax,ecx
c000e68d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e691:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e696:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e69a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e69e:	01 d0                	add    eax,edx
c000e6a0:	83 c0 2c             	add    eax,0x2c
c000e6a3:	8a 00                	mov    al,BYTE PTR [eax]
c000e6a5:	25 ff 00 00 00       	and    eax,0xff
c000e6aa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e6ae:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e6b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6b5:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e6b9:	81 e2 ff 00 00 00    	and    edx,0xff
c000e6bf:	c1 e2 08             	shl    edx,0x8
c000e6c2:	09 d0                	or     eax,edx
c000e6c4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e6c9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e6ce:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e6d2:	25 ff 00 00 00       	and    eax,0xff
c000e6d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e6db:	88 90 20 00 02 c0    	mov    BYTE PTR [eax-0x3ffdffe0],dl
c000e6e1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e6e5:	31 d2                	xor    edx,edx
c000e6e7:	88 c2                	mov    dl,al
c000e6e9:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e6ee:	66 89 84 12 60 57 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffda8a0],ax
c000e6f6:	e9 b9 00 00 00       	jmp    c000e7b4 <scanMADT()+0x4ac>
c000e6fb:	90                   	nop
c000e6fc:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e701:	0f 85 a1 00 00 00    	jne    c000e7a8 <scanMADT()+0x4a0>
c000e707:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e70b:	8d 50 01             	lea    edx,[eax+0x1]
c000e70e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e712:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e716:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e71a:	25 ff 00 00 00       	and    eax,0xff
c000e71f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e723:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e727:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e72b:	01 d0                	add    eax,edx
c000e72d:	83 c0 2c             	add    eax,0x2c
c000e730:	8a 00                	mov    al,BYTE PTR [eax]
c000e732:	31 d2                	xor    edx,edx
c000e734:	88 c2                	mov    dl,al
c000e736:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e73a:	8d 48 01             	lea    ecx,[eax+0x1]
c000e73d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e741:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e745:	25 ff 00 00 00       	and    eax,0xff
c000e74a:	c1 e0 08             	shl    eax,0x8
c000e74d:	09 d0                	or     eax,edx
c000e74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e753:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e758:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e75c:	8d 50 01             	lea    edx,[eax+0x1]
c000e75f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e763:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e767:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e76b:	25 ff 00 00 00       	and    eax,0xff
c000e770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e778:	c1 e0 08             	shl    eax,0x8
c000e77b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e77f:	89 c1                	mov    ecx,eax
c000e781:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e785:	c1 e0 18             	shl    eax,0x18
c000e788:	89 c3                	mov    ebx,eax
c000e78a:	a1 d0 56 02 c0       	mov    eax,ds:0xc00256d0
c000e78f:	8d 50 01             	lea    edx,[eax+0x1]
c000e792:	89 15 d0 56 02 c0    	mov    DWORD PTR ds:0xc00256d0,edx
c000e798:	09 d9                	or     ecx,ebx
c000e79a:	89 ca                	mov    edx,ecx
c000e79c:	89 14 85 e0 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffda920],edx
c000e7a3:	eb 0f                	jmp    c000e7b4 <scanMADT()+0x4ac>
c000e7a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e7a8:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e7ad:	75 05                	jne    c000e7b4 <scanMADT()+0x4ac>
c000e7af:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e7b4:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e7b8:	31 d2                	xor    edx,edx
c000e7ba:	88 c2                	mov    dl,al
c000e7bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e7c0:	01 d0                	add    eax,edx
c000e7c2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e7c6:	e9 31 fc ff ff       	jmp    c000e3fc <scanMADT()+0xf4>
c000e7cb:	90                   	nop
c000e7cc:	90                   	nop
c000e7cd:	eb 05                	jmp    c000e7d4 <scanMADT()+0x4cc>
c000e7cf:	90                   	nop
c000e7d0:	90                   	nop
c000e7d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e7d4:	83 c4 38             	add    esp,0x38
c000e7d7:	5b                   	pop    ebx
c000e7d8:	c3                   	ret    
c000e7d9:	90                   	nop
c000e7da:	66 90                	xchg   ax,ax

c000e7dc <ACPI::ACPI()>:
c000e7dc:	83 ec 0c             	sub    esp,0xc
c000e7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e3:	83 ec 08             	sub    esp,0x8
c000e7e6:	68 cd eb 01 c0       	push   0xc001ebcd
c000e7eb:	50                   	push   eax
c000e7ec:	e8 f3 d3 ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000e7f1:	83 c4 10             	add    esp,0x10
c000e7f4:	ba 04 ed 01 c0       	mov    edx,0xc001ed04
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	89 10                	mov    DWORD PTR [eax],edx
c000e7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e803:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e826:	e8 dd fa ff ff       	call   c000e308 <scanMADT()>
c000e82b:	90                   	nop
c000e82c:	83 c4 0c             	add    esp,0xc
c000e82f:	c3                   	ret    

c000e830 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e830:	83 ec 2c             	sub    esp,0x2c
c000e833:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e837:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e83b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e83f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e843:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e848:	88 d0                	mov    al,dl
c000e84a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e84e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e853:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e85b:	90                   	nop
c000e85c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e860:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e866:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e86a:	0f 8d 9c 00 00 00    	jge    c000e90c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e870:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e874:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e878:	83 c2 2a             	add    edx,0x2a
c000e87b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e87f:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e884:	75 7a                	jne    c000e900 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e886:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e88a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e88e:	83 c2 2a             	add    edx,0x2a
c000e891:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e895:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e899:	75 65                	jne    c000e900 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e89b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e8a0:	74 3a                	je     c000e8dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e8a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8a6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e8aa:	83 c2 2a             	add    edx,0x2a
c000e8ad:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e8b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e8b8:	39 c2                	cmp    edx,eax
c000e8ba:	74 10                	je     c000e8cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e8bc:	83 ec 0c             	sub    esp,0xc
c000e8bf:	68 48 eb 01 c0       	push   0xc001eb48
c000e8c4:	e8 4e 1a 00 00       	call   c0010317 <KePanic(char const*)>
c000e8c9:	83 c4 10             	add    esp,0x10
c000e8cc:	83 ec 0c             	sub    esp,0xc
c000e8cf:	68 d2 eb 01 c0       	push   0xc001ebd2
c000e8d4:	e8 3e 1a 00 00       	call   c0010317 <KePanic(char const*)>
c000e8d9:	83 c4 10             	add    esp,0x10
c000e8dc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e8e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e8e8:	83 c2 2a             	add    edx,0x2a
c000e8eb:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e8ef:	8b 02                	mov    eax,DWORD PTR [edx]
c000e8f1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e8f4:	89 01                	mov    DWORD PTR [ecx],eax
c000e8f6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e8f9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8fe:	66 90                	xchg   ax,ax
c000e900:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e904:	e9 53 ff ff ff       	jmp    c000e85c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e909:	8d 76 00             	lea    esi,[esi+0x0]
c000e90c:	90                   	nop
c000e90d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e911:	83 c4 2c             	add    esp,0x2c
c000e914:	c2 04 00             	ret    0x4
c000e917:	90                   	nop

c000e918 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e918:	83 ec 1c             	sub    esp,0x1c
c000e91b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e91f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e923:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e927:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e92c:	88 c8                	mov    al,cl
c000e92e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e932:	88 d0                	mov    al,dl
c000e934:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e93c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e942:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e946:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e949:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e94d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e951:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e955:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e95b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e95f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e962:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e966:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e96b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e96f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e975:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e979:	8d 48 01             	lea    ecx,[eax+0x1]
c000e97c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e980:	83 c2 2a             	add    edx,0x2a
c000e983:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e987:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e98b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e991:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e995:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e998:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e99c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e9a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9a4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e9aa:	8d 50 01             	lea    edx,[eax+0x1]
c000e9ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9b1:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e9b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9bb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e9c1:	3d 00 02 00 00       	cmp    eax,0x200
c000e9c6:	75 10                	jne    c000e9d8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e9c8:	83 ec 0c             	sub    esp,0xc
c000e9cb:	68 e1 eb 01 c0       	push   0xc001ebe1
c000e9d0:	e8 42 19 00 00       	call   c0010317 <KePanic(char const*)>
c000e9d5:	83 c4 10             	add    esp,0x10
c000e9d8:	90                   	nop
c000e9d9:	83 c4 1c             	add    esp,0x1c
c000e9dc:	c3                   	ret    
c000e9dd:	90                   	nop
c000e9de:	66 90                	xchg   ax,ax

c000e9e0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e9e0:	b8 00 00 00 00       	mov    eax,0x0
c000e9e5:	c3                   	ret    
c000e9e6:	66 90                	xchg   ax,ax

c000e9e8 <ACPI::detectPCI()>:
c000e9e8:	53                   	push   ebx
c000e9e9:	83 ec 28             	sub    esp,0x28
c000e9ec:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e9f1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e9f6:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e9fb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ea01:	83 e0 04             	and    eax,0x4
c000ea04:	84 c0                	test   al,al
c000ea06:	74 2c                	je     c000ea34 <ACPI::detectPCI()+0x4c>
c000ea08:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000ea0d:	83 ec 08             	sub    esp,0x8
c000ea10:	68 fe eb 01 c0       	push   0xc001ebfe
c000ea15:	50                   	push   eax
c000ea16:	e8 75 f8 ff ff       	call   c000e290 <findDataTable(unsigned char*, char*)>
c000ea1b:	83 c4 10             	add    esp,0x10
c000ea1e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ea22:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ea27:	74 0b                	je     c000ea34 <ACPI::detectPCI()+0x4c>
c000ea29:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea2e:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ea33:	90                   	nop
c000ea34:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ea3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea40:	8a 00                	mov    al,BYTE PTR [eax]
c000ea42:	3c 01                	cmp    al,0x1
c000ea44:	75 0e                	jne    c000ea54 <ACPI::detectPCI()+0x6c>
c000ea46:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea4b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ea50:	eb 2a                	jmp    c000ea7c <ACPI::detectPCI()+0x94>
c000ea52:	66 90                	xchg   ax,ax
c000ea54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea58:	8a 00                	mov    al,BYTE PTR [eax]
c000ea5a:	3c 02                	cmp    al,0x2
c000ea5c:	75 1e                	jne    c000ea7c <ACPI::detectPCI()+0x94>
c000ea5e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea63:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ea68:	74 12                	je     c000ea7c <ACPI::detectPCI()+0x94>
c000ea6a:	83 ec 0c             	sub    esp,0xc
c000ea6d:	68 78 eb 01 c0       	push   0xc001eb78
c000ea72:	e8 a0 18 00 00       	call   c0010317 <KePanic(char const*)>
c000ea77:	83 c4 10             	add    esp,0x10
c000ea7a:	66 90                	xchg   ax,ax
c000ea7c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ea80:	83 f0 01             	xor    eax,0x1
c000ea83:	84 c0                	test   al,al
c000ea85:	74 41                	je     c000eac8 <ACPI::detectPCI()+0xe0>
c000ea87:	e8 a4 16 ff ff       	call   c0000130 <manualPCIProbe>
c000ea8c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ea90:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ea95:	75 0d                	jne    c000eaa4 <ACPI::detectPCI()+0xbc>
c000ea97:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea9c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eaa1:	eb 25                	jmp    c000eac8 <ACPI::detectPCI()+0xe0>
c000eaa3:	90                   	nop
c000eaa4:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000eaa9:	75 1d                	jne    c000eac8 <ACPI::detectPCI()+0xe0>
c000eaab:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eab0:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eab5:	74 11                	je     c000eac8 <ACPI::detectPCI()+0xe0>
c000eab7:	83 ec 0c             	sub    esp,0xc
c000eaba:	68 78 eb 01 c0       	push   0xc001eb78
c000eabf:	e8 53 18 00 00       	call   c0010317 <KePanic(char const*)>
c000eac4:	83 c4 10             	add    esp,0x10
c000eac7:	90                   	nop
c000eac8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000eacd:	0f 84 85 00 00 00    	je     c000eb58 <ACPI::detectPCI()+0x170>
c000ead3:	83 ec 0c             	sub    esp,0xc
c000ead6:	68 03 ec 01 c0       	push   0xc001ec03
c000eadb:	e8 bf 11 00 00       	call   c000fc9f <KeSetBootMessage(char const*)>
c000eae0:	83 c4 10             	add    esp,0x10
c000eae3:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000eaeb:	83 ec 0c             	sub    esp,0xc
c000eaee:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eaf2:	e8 7e 8d ff ff       	call   c0007875 <malloc>
c000eaf7:	83 c4 10             	add    esp,0x10
c000eafa:	89 c3                	mov    ebx,eax
c000eafc:	83 ec 0c             	sub    esp,0xc
c000eaff:	53                   	push   ebx
c000eb00:	e8 a5 9a 00 00       	call   c00185aa <PCI::PCI()>
c000eb05:	83 c4 10             	add    esp,0x10
c000eb08:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000eb0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb10:	83 ec 08             	sub    esp,0x8
c000eb13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb17:	50                   	push   eax
c000eb18:	e8 2f cf ff ff       	call   c000ba4c <Device::addChild(Device*)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb24:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb26:	83 c0 08             	add    eax,0x8
c000eb29:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb2b:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eb30:	74 0a                	je     c000eb3c <ACPI::detectPCI()+0x154>
c000eb32:	ba 01 00 00 00       	mov    edx,0x1
c000eb37:	eb 0b                	jmp    c000eb44 <ACPI::detectPCI()+0x15c>
c000eb39:	8d 76 00             	lea    esi,[esi+0x0]
c000eb3c:	ba 02 00 00 00       	mov    edx,0x2
c000eb41:	8d 76 00             	lea    esi,[esi+0x0]
c000eb44:	6a 00                	push   0x0
c000eb46:	6a 00                	push   0x0
c000eb48:	52                   	push   edx
c000eb49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eb4d:	ff d0                	call   eax
c000eb4f:	83 c4 10             	add    esp,0x10
c000eb52:	e9 91 00 00 00       	jmp    c000ebe8 <ACPI::detectPCI()+0x200>
c000eb57:	90                   	nop
c000eb58:	83 ec 0c             	sub    esp,0xc
c000eb5b:	68 1b ec 01 c0       	push   0xc001ec1b
c000eb60:	e8 3a 11 00 00       	call   c000fc9f <KeSetBootMessage(char const*)>
c000eb65:	83 c4 10             	add    esp,0x10
c000eb68:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000eb6f:	83 ec 0c             	sub    esp,0xc
c000eb72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000eb76:	e8 fa 8c ff ff       	call   c0007875 <malloc>
c000eb7b:	83 c4 10             	add    esp,0x10
c000eb7e:	89 c3                	mov    ebx,eax
c000eb80:	83 ec 0c             	sub    esp,0xc
c000eb83:	53                   	push   ebx
c000eb84:	e8 4d a5 00 00       	call   c00190d6 <IDE::IDE()>
c000eb89:	83 c4 10             	add    esp,0x10
c000eb8c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eb90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb94:	83 ec 08             	sub    esp,0x8
c000eb97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eb9b:	50                   	push   eax
c000eb9c:	e8 ab ce ff ff       	call   c000ba4c <Device::addChild(Device*)>
c000eba1:	83 c4 10             	add    esp,0x10
c000eba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eba8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ebb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebb6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ebbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebc3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ebcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebd0:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebd2:	83 c0 08             	add    eax,0x8
c000ebd5:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebd7:	6a 00                	push   0x0
c000ebd9:	6a 00                	push   0x0
c000ebdb:	6a 00                	push   0x0
c000ebdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ebe1:	ff d0                	call   eax
c000ebe3:	83 c4 10             	add    esp,0x10
c000ebe6:	66 90                	xchg   ax,ax
c000ebe8:	90                   	nop
c000ebe9:	83 c4 28             	add    esp,0x28
c000ebec:	5b                   	pop    ebx
c000ebed:	c3                   	ret    
c000ebee:	66 90                	xchg   ax,ax

c000ebf0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ebf0:	83 ec 1c             	sub    esp,0x1c
c000ebf3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ebf7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ebfa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ebfe:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c000ec04:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ec08:	25 ff 00 00 00       	and    eax,0xff
c000ec0d:	83 ec 08             	sub    esp,0x8
c000ec10:	50                   	push   eax
c000ec11:	52                   	push   edx
c000ec12:	e8 49 83 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c000ec17:	83 c4 10             	add    esp,0x10
c000ec1a:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ec1e:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c000ec24:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ec28:	25 ff 00 00 00       	and    eax,0xff
c000ec2d:	83 ec 04             	sub    esp,0x4
c000ec30:	6a 01                	push   0x1
c000ec32:	50                   	push   eax
c000ec33:	52                   	push   edx
c000ec34:	e8 3d 84 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	90                   	nop
c000ec3d:	83 c4 1c             	add    esp,0x1c
c000ec40:	c3                   	ret    
c000ec41:	90                   	nop
c000ec42:	66 90                	xchg   ax,ax

c000ec44 <ACPI::sleep()>:
c000ec44:	83 ec 0c             	sub    esp,0xc
c000ec47:	a1 a0 54 02 c0       	mov    eax,ds:0xc00254a0
c000ec4c:	85 c0                	test   eax,eax
c000ec4e:	74 08                	je     c000ec58 <ACPI::sleep()+0x14>
c000ec50:	a1 a0 54 02 c0       	mov    eax,ds:0xc00254a0
c000ec55:	ff d0                	call   eax
c000ec57:	90                   	nop
c000ec58:	90                   	nop
c000ec59:	83 c4 0c             	add    esp,0xc
c000ec5c:	c3                   	ret    
c000ec5d:	90                   	nop
c000ec5e:	66 90                	xchg   ax,ax

c000ec60 <ACPI::open(int, int, void*)>:
c000ec60:	57                   	push   edi
c000ec61:	56                   	push   esi
c000ec62:	53                   	push   ebx
c000ec63:	81 ec 70 01 00 00    	sub    esp,0x170
c000ec69:	83 ec 0c             	sub    esp,0xc
c000ec6c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ec73:	e8 70 fd ff ff       	call   c000e9e8 <ACPI::detectPCI()>
c000ec78:	83 c4 10             	add    esp,0x10
c000ec7b:	83 ec 0c             	sub    esp,0xc
c000ec7e:	68 a0 eb 01 c0       	push   0xc001eba0
c000ec83:	e8 17 10 00 00       	call   c000fc9f <KeSetBootMessage(char const*)>
c000ec88:	83 c4 10             	add    esp,0x10
c000ec8b:	83 ec 0c             	sub    esp,0xc
c000ec8e:	68 30 ec 01 c0       	push   0xc001ec30
c000ec93:	e8 fb 36 00 00       	call   c0012393 <Thr::loadKernelSymbolTable(char const*)>
c000ec98:	83 c4 10             	add    esp,0x10
c000ec9b:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000eca3:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ecae:	83 ec 0c             	sub    esp,0xc
c000ecb1:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ecb8:	e8 b8 8b ff ff       	call   c0007875 <malloc>
c000ecbd:	83 c4 10             	add    esp,0x10
c000ecc0:	89 c3                	mov    ebx,eax
c000ecc2:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000ecc7:	83 ec 04             	sub    esp,0x4
c000ecca:	50                   	push   eax
c000eccb:	68 4e ec 01 c0       	push   0xc001ec4e
c000ecd0:	53                   	push   ebx
c000ecd1:	e8 ae be ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c000ecd6:	83 c4 10             	add    esp,0x10
c000ecd9:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ece0:	83 ec 08             	sub    esp,0x8
c000ece3:	6a 01                	push   0x1
c000ece5:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ecec:	e8 53 bf ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c000ecf1:	83 c4 10             	add    esp,0x10
c000ecf4:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ecfb:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ed03:	75 17                	jne    c000ed1c <ACPI::open(int, int, void*)+0xbc>
c000ed05:	83 ec 0c             	sub    esp,0xc
c000ed08:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ed0f:	e8 8e bf ff ff       	call   c000aca2 <File::close()>
c000ed14:	83 c4 10             	add    esp,0x10
c000ed17:	eb 0b                	jmp    c000ed24 <ACPI::open(int, int, void*)+0xc4>
c000ed19:	8d 76 00             	lea    esi,[esi+0x0]
c000ed1c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ed24:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ed2c:	74 1e                	je     c000ed4c <ACPI::open(int, int, void*)+0xec>
c000ed2e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ed35:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed37:	83 c0 08             	add    eax,0x8
c000ed3a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed3c:	83 ec 0c             	sub    esp,0xc
c000ed3f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ed46:	ff d0                	call   eax
c000ed48:	83 c4 10             	add    esp,0x10
c000ed4b:	90                   	nop
c000ed4c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ed53:	83 f0 01             	xor    eax,0x1
c000ed56:	84 c0                	test   al,al
c000ed58:	74 42                	je     c000ed9c <ACPI::open(int, int, void*)+0x13c>
c000ed5a:	83 ec 0c             	sub    esp,0xc
c000ed5d:	68 6c ec 01 c0       	push   0xc001ec6c
c000ed62:	e8 38 0f 00 00       	call   c000fc9f <KeSetBootMessage(char const*)>
c000ed67:	83 c4 10             	add    esp,0x10
c000ed6a:	83 ec 04             	sub    esp,0x4
c000ed6d:	6a 0c                	push   0xc
c000ed6f:	68 87 ec 01 c0       	push   0xc001ec87
c000ed74:	68 98 ec 01 c0       	push   0xc001ec98
c000ed79:	e8 17 2c 00 00       	call   c0011995 <Reg::readIntWithDefault(char*, char*, int)>
c000ed7e:	83 c4 10             	add    esp,0x10
c000ed81:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ed88:	83 ec 0c             	sub    esp,0xc
c000ed8b:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ed92:	e8 c4 a7 ff ff       	call   c000955b <Virt::setupPageSwapping(int)>
c000ed97:	83 c4 10             	add    esp,0x10
c000ed9a:	66 90                	xchg   ax,ax
c000ed9c:	83 ec 0c             	sub    esp,0xc
c000ed9f:	68 55 dd 01 c0       	push   0xc001dd55
c000eda4:	e8 f6 0e 00 00       	call   c000fc9f <KeSetBootMessage(char const*)>
c000eda9:	83 c4 10             	add    esp,0x10
c000edac:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000edb3:	83 ec 08             	sub    esp,0x8
c000edb6:	6a 12                	push   0x12
c000edb8:	50                   	push   eax
c000edb9:	e8 a6 cf ff ff       	call   c000bd64 <getDevicesOfType(DeviceType)>
c000edbe:	83 c4 0c             	add    esp,0xc
c000edc1:	8d 76 00             	lea    esi,[esi+0x0]
c000edc4:	83 ec 0c             	sub    esp,0xc
c000edc7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000edce:	50                   	push   eax
c000edcf:	e8 78 e3 00 00       	call   c001d14c <LinkedList<Device>::isEmpty()>
c000edd4:	83 c4 10             	add    esp,0x10
c000edd7:	83 f0 01             	xor    eax,0x1
c000edda:	84 c0                	test   al,al
c000eddc:	0f 84 46 01 00 00    	je     c000ef28 <ACPI::open(int, int, void*)+0x2c8>
c000ede2:	83 ec 0c             	sub    esp,0xc
c000ede5:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000edec:	50                   	push   eax
c000eded:	e8 76 e3 00 00       	call   c001d168 <LinkedList<Device>::getFirstElement()>
c000edf2:	83 c4 10             	add    esp,0x10
c000edf5:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000edfc:	83 ec 0c             	sub    esp,0xc
c000edff:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee06:	50                   	push   eax
c000ee07:	e8 64 e3 00 00       	call   c001d170 <LinkedList<Device>::removeFirst()>
c000ee0c:	83 c4 10             	add    esp,0x10
c000ee0f:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ee16:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ee1d:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ee24:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ee28:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ee2e:	ba 09 00 00 00       	mov    edx,0x9
c000ee33:	fc                   	cld    
c000ee34:	89 c7                	mov    edi,eax
c000ee36:	89 de                	mov    esi,ebx
c000ee38:	89 d1                	mov    ecx,edx
c000ee3a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ee3c:	83 ec 08             	sub    esp,0x8
c000ee3f:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ee43:	50                   	push   eax
c000ee44:	83 ec 24             	sub    esp,0x24
c000ee47:	89 e0                	mov    eax,esp
c000ee49:	89 c3                	mov    ebx,eax
c000ee4b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ee4f:	ba 09 00 00 00       	mov    edx,0x9
c000ee54:	89 df                	mov    edi,ebx
c000ee56:	89 c6                	mov    esi,eax
c000ee58:	89 d1                	mov    ecx,edx
c000ee5a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ee5c:	e8 2b 9c 00 00       	call   c0018a8c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ee61:	83 c4 30             	add    esp,0x30
c000ee64:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ee6b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ee73:	0f 84 4b ff ff ff    	je     c000edc4 <ACPI::open(int, int, void*)+0x164>
c000ee79:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ee84:	83 ec 0c             	sub    esp,0xc
c000ee87:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ee8e:	e8 e2 89 ff ff       	call   c0007875 <malloc>
c000ee93:	83 c4 10             	add    esp,0x10
c000ee96:	89 c3                	mov    ebx,eax
c000ee98:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000ee9d:	83 ec 04             	sub    esp,0x4
c000eea0:	50                   	push   eax
c000eea1:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000eea8:	53                   	push   ebx
c000eea9:	e8 d6 bc ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c000eeae:	83 c4 10             	add    esp,0x10
c000eeb1:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000eeb8:	83 ec 0c             	sub    esp,0xc
c000eebb:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000eec2:	e8 eb bf ff ff       	call   c000aeb2 <File::exists()>
c000eec7:	83 c4 10             	add    esp,0x10
c000eeca:	84 c0                	test   al,al
c000eecc:	74 2a                	je     c000eef8 <ACPI::open(int, int, void*)+0x298>
c000eece:	83 ec 08             	sub    esp,0x8
c000eed1:	6a 01                	push   0x1
c000eed3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000eeda:	e8 2b 3f 00 00       	call   c0012e0a <Thr::loadDLL(char const*, bool)>
c000eedf:	83 c4 10             	add    esp,0x10
c000eee2:	83 ec 08             	sub    esp,0x8
c000eee5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000eeec:	50                   	push   eax
c000eeed:	e8 49 41 00 00       	call   c001303b <Thr::executeDLL(unsigned long, void*)>
c000eef2:	83 c4 10             	add    esp,0x10
c000eef5:	8d 76 00             	lea    esi,[esi+0x0]
c000eef8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ef00:	0f 84 be fe ff ff    	je     c000edc4 <ACPI::open(int, int, void*)+0x164>
c000ef06:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ef0d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef0f:	83 c0 08             	add    eax,0x8
c000ef12:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef14:	83 ec 0c             	sub    esp,0xc
c000ef17:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ef1e:	ff d0                	call   eax
c000ef20:	83 c4 10             	add    esp,0x10
c000ef23:	e9 9c fe ff ff       	jmp    c000edc4 <ACPI::open(int, int, void*)+0x164>
c000ef28:	83 ec 0c             	sub    esp,0xc
c000ef2b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ef32:	50                   	push   eax
c000ef33:	e8 10 e2 00 00       	call   c001d148 <LinkedList<Device>::~LinkedList()>
c000ef38:	83 c4 10             	add    esp,0x10
c000ef3b:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000ef41:	83 ec 08             	sub    esp,0x8
c000ef44:	6a 01                	push   0x1
c000ef46:	68 9f ec 01 c0       	push   0xc001ec9f
c000ef4b:	e8 ba 3e 00 00       	call   c0012e0a <Thr::loadDLL(char const*, bool)>
c000ef50:	83 c4 10             	add    esp,0x10
c000ef53:	83 ec 08             	sub    esp,0x8
c000ef56:	53                   	push   ebx
c000ef57:	50                   	push   eax
c000ef58:	e8 de 40 00 00       	call   c001303b <Thr::executeDLL(unsigned long, void*)>
c000ef5d:	83 c4 10             	add    esp,0x10
c000ef60:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000ef65:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef6b:	83 e0 04             	and    eax,0x4
c000ef6e:	84 c0                	test   al,al
c000ef70:	0f 84 16 01 00 00    	je     c000f08c <ACPI::open(int, int, void*)+0x42c>
c000ef76:	83 ec 0c             	sub    esp,0xc
c000ef79:	68 bc ec 01 c0       	push   0xc001ecbc
c000ef7e:	e8 1c 0d 00 00       	call   c000fc9f <KeSetBootMessage(char const*)>
c000ef83:	83 c4 10             	add    esp,0x10
c000ef86:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ef91:	83 ec 0c             	sub    esp,0xc
c000ef94:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ef9b:	e8 d5 88 ff ff       	call   c0007875 <malloc>
c000efa0:	83 c4 10             	add    esp,0x10
c000efa3:	89 c3                	mov    ebx,eax
c000efa5:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000efaa:	83 ec 04             	sub    esp,0x4
c000efad:	50                   	push   eax
c000efae:	68 d9 ec 01 c0       	push   0xc001ecd9
c000efb3:	53                   	push   ebx
c000efb4:	e8 cb bb ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c000efb9:	83 c4 10             	add    esp,0x10
c000efbc:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000efc3:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000efcb:	74 1b                	je     c000efe8 <ACPI::open(int, int, void*)+0x388>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000efd7:	e8 d6 be ff ff       	call   c000aeb2 <File::exists()>
c000efdc:	83 c4 10             	add    esp,0x10
c000efdf:	84 c0                	test   al,al
c000efe1:	74 05                	je     c000efe8 <ACPI::open(int, int, void*)+0x388>
c000efe3:	b0 01                	mov    al,0x1
c000efe5:	eb 05                	jmp    c000efec <ACPI::open(int, int, void*)+0x38c>
c000efe7:	90                   	nop
c000efe8:	b0 00                	mov    al,0x0
c000efea:	66 90                	xchg   ax,ax
c000efec:	84 c0                	test   al,al
c000efee:	74 28                	je     c000f018 <ACPI::open(int, int, void*)+0x3b8>
c000eff0:	83 ec 08             	sub    esp,0x8
c000eff3:	6a 01                	push   0x1
c000eff5:	68 d9 ec 01 c0       	push   0xc001ecd9
c000effa:	e8 0b 3e 00 00       	call   c0012e0a <Thr::loadDLL(char const*, bool)>
c000efff:	83 c4 10             	add    esp,0x10
c000f002:	83 ec 08             	sub    esp,0x8
c000f005:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f00c:	50                   	push   eax
c000f00d:	e8 29 40 00 00       	call   c001303b <Thr::executeDLL(unsigned long, void*)>
c000f012:	83 c4 10             	add    esp,0x10
c000f015:	8d 76 00             	lea    esi,[esi+0x0]
c000f018:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f020:	74 2a                	je     c000f04c <ACPI::open(int, int, void*)+0x3ec>
c000f022:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f02a:	74 20                	je     c000f04c <ACPI::open(int, int, void*)+0x3ec>
c000f02c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f033:	8b 00                	mov    eax,DWORD PTR [eax]
c000f035:	83 c0 08             	add    eax,0x8
c000f038:	8b 00                	mov    eax,DWORD PTR [eax]
c000f03a:	83 ec 0c             	sub    esp,0xc
c000f03d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f044:	ff d0                	call   eax
c000f046:	83 c4 10             	add    esp,0x10
c000f049:	8d 76 00             	lea    esi,[esi+0x0]
c000f04c:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000f051:	83 ec 08             	sub    esp,0x8
c000f054:	68 f6 ec 01 c0       	push   0xc001ecf6
c000f059:	50                   	push   eax
c000f05a:	e8 31 f2 ff ff       	call   c000e290 <findDataTable(unsigned char*, char*)>
c000f05f:	83 c4 10             	add    esp,0x10
c000f062:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f069:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f071:	74 19                	je     c000f08c <ACPI::open(int, int, void*)+0x42c>
c000f073:	83 ec 08             	sub    esp,0x8
c000f076:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f07d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f084:	e8 67 fb ff ff       	call   c000ebf0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f089:	83 c4 10             	add    esp,0x10
c000f08c:	b8 00 00 00 00       	mov    eax,0x0
c000f091:	81 c4 70 01 00 00    	add    esp,0x170
c000f097:	5b                   	pop    ebx
c000f098:	5e                   	pop    esi
c000f099:	5f                   	pop    edi
c000f09a:	c3                   	ret    
c000f09b:	90                   	nop

c000f09c <CPU::close(int, int, void*)>:
c000f09c:	31 c0                	xor    eax,eax
c000f09e:	c3                   	ret    
c000f09f:	90                   	nop

c000f0a0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f0a0:	60                   	pusha  
c000f0a1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f0ad:	9c                   	pushf  
c000f0ae:	fa                   	cli    
c000f0af:	0f 09                	wbinvd 
c000f0b1:	0f 30                	wrmsr  
c000f0b3:	9d                   	popf   
c000f0b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f0b8:	89 02                	mov    DWORD PTR [edx],eax
c000f0ba:	61                   	popa   
c000f0bb:	c3                   	ret    

c000f0bc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f0bc:	60                   	pusha  
c000f0bd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0c1:	9c                   	pushf  
c000f0c2:	fa                   	cli    
c000f0c3:	0f 09                	wbinvd 
c000f0c5:	31 c0                	xor    eax,eax
c000f0c7:	31 d2                	xor    edx,edx
c000f0c9:	0f 32                	rdmsr  
c000f0cb:	9d                   	popf   
c000f0cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f0d0:	89 02                	mov    DWORD PTR [edx],eax
c000f0d2:	61                   	popa   
c000f0d3:	c3                   	ret    

c000f0d4 <CPU::AMD_K6_writeback(int, int, int)>:
c000f0d4:	56                   	push   esi
c000f0d5:	53                   	push   ebx
c000f0d6:	83 ec 10             	sub    esp,0x10
c000f0d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0dd:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f0e2:	75 5d                	jne    c000f141 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f0e4:	83 f8 08             	cmp    eax,0x8
c000f0e7:	75 09                	jne    c000f0f2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f0e9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f0ee:	7e 13                	jle    c000f103 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f0f0:	eb 30                	jmp    c000f122 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f0f2:	83 f8 06             	cmp    eax,0x6
c000f0f5:	7c 4a                	jl     c000f141 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f0f7:	83 f8 07             	cmp    eax,0x7
c000f0fa:	7e 07                	jle    c000f103 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f0fc:	83 f8 09             	cmp    eax,0x9
c000f0ff:	74 21                	je     c000f122 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f101:	eb 3e                	jmp    c000f141 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f103:	89 e6                	mov    esi,esp
c000f105:	8b 1d dc 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022edc
c000f10b:	56                   	push   esi
c000f10c:	c1 eb 15             	shr    ebx,0x15
c000f10f:	68 82 00 00 c0       	push   0xc0000082
c000f114:	83 e3 7e             	and    ebx,0x7e
c000f117:	e8 a0 ff ff ff       	call   c000f0bc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f11c:	56                   	push   esi
c000f11d:	6a 00                	push   0x0
c000f11f:	53                   	push   ebx
c000f120:	eb 12                	jmp    c000f134 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f122:	89 e3                	mov    ebx,esp
c000f124:	53                   	push   ebx
c000f125:	68 82 00 00 c0       	push   0xc0000082
c000f12a:	e8 8d ff ff ff       	call   c000f0bc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f12f:	53                   	push   ebx
c000f130:	6a 00                	push   0x0
c000f132:	6a 00                	push   0x0
c000f134:	68 82 00 00 c0       	push   0xc0000082
c000f139:	e8 62 ff ff ff       	call   c000f0a0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f13e:	83 c4 18             	add    esp,0x18
c000f141:	83 c4 10             	add    esp,0x10
c000f144:	5b                   	pop    ebx
c000f145:	5e                   	pop    esi
c000f146:	c3                   	ret    
c000f147:	90                   	nop

c000f148 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f148:	55                   	push   ebp
c000f149:	57                   	push   edi
c000f14a:	56                   	push   esi
c000f14b:	53                   	push   ebx
c000f14c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f150:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f154:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f158:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f15c:	39 05 30 00 02 c0    	cmp    DWORD PTR ds:0xc0020030,eax
c000f162:	75 23                	jne    c000f187 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f164:	a1 2c 59 02 c0       	mov    eax,ds:0xc002592c
c000f169:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f16d:	89 06                	mov    DWORD PTR [esi],eax
c000f16f:	a1 28 59 02 c0       	mov    eax,ds:0xc0025928
c000f174:	89 07                	mov    DWORD PTR [edi],eax
c000f176:	a1 24 59 02 c0       	mov    eax,ds:0xc0025924
c000f17b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f17e:	a1 20 59 02 c0       	mov    eax,ds:0xc0025920
c000f183:	89 02                	mov    DWORD PTR [edx],eax
c000f185:	eb 3f                	jmp    c000f1c6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f187:	31 c9                	xor    ecx,ecx
c000f189:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f18d:	0f a2                	cpuid  
c000f18f:	89 06                	mov    DWORD PTR [esi],eax
c000f191:	89 1f                	mov    DWORD PTR [edi],ebx
c000f193:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f197:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f19a:	89 10                	mov    DWORD PTR [eax],edx
c000f19c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f1a0:	a3 30 00 02 c0       	mov    ds:0xc0020030,eax
c000f1a5:	8b 06                	mov    eax,DWORD PTR [esi]
c000f1a7:	a3 2c 59 02 c0       	mov    ds:0xc002592c,eax
c000f1ac:	8b 07                	mov    eax,DWORD PTR [edi]
c000f1ae:	a3 28 59 02 c0       	mov    ds:0xc0025928,eax
c000f1b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f1b6:	a3 24 59 02 c0       	mov    ds:0xc0025924,eax
c000f1bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f1bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1c1:	a3 20 59 02 c0       	mov    ds:0xc0025920,eax
c000f1c6:	5b                   	pop    ebx
c000f1c7:	5e                   	pop    esi
c000f1c8:	5f                   	pop    edi
c000f1c9:	5d                   	pop    ebp
c000f1ca:	c3                   	ret    
c000f1cb:	90                   	nop

c000f1cc <CPU::cpuidCheckEDX(unsigned int)>:
c000f1cc:	83 ec 10             	sub    esp,0x10
c000f1cf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1d3:	50                   	push   eax
c000f1d4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1d8:	50                   	push   eax
c000f1d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1dd:	50                   	push   eax
c000f1de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1e2:	50                   	push   eax
c000f1e3:	6a 01                	push   0x1
c000f1e5:	e8 5e ff ff ff       	call   c000f148 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f1ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1ee:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f1f2:	0f 95 c0             	setne  al
c000f1f5:	83 c4 24             	add    esp,0x24
c000f1f8:	c3                   	ret    
c000f1f9:	90                   	nop

c000f1fa <CPU::cpuidCheckECX(unsigned int)>:
c000f1fa:	83 ec 10             	sub    esp,0x10
c000f1fd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f201:	50                   	push   eax
c000f202:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f206:	50                   	push   eax
c000f207:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f20b:	50                   	push   eax
c000f20c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f210:	50                   	push   eax
c000f211:	6a 01                	push   0x1
c000f213:	e8 30 ff ff ff       	call   c000f148 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f218:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f21c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f220:	0f 95 c0             	setne  al
c000f223:	83 c4 24             	add    esp,0x24
c000f226:	c3                   	ret    
c000f227:	90                   	nop

c000f228 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f228:	83 ec 10             	sub    esp,0x10
c000f22b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f22f:	50                   	push   eax
c000f230:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f234:	50                   	push   eax
c000f235:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f239:	50                   	push   eax
c000f23a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f23e:	50                   	push   eax
c000f23f:	6a 07                	push   0x7
c000f241:	e8 02 ff ff ff       	call   c000f148 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f246:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f24a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f24e:	0f 95 c0             	setne  al
c000f251:	83 c4 24             	add    esp,0x24
c000f254:	c3                   	ret    
c000f255:	90                   	nop

c000f256 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f256:	83 ec 10             	sub    esp,0x10
c000f259:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f25d:	50                   	push   eax
c000f25e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f262:	50                   	push   eax
c000f263:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f267:	50                   	push   eax
c000f268:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f26c:	50                   	push   eax
c000f26d:	6a 07                	push   0x7
c000f26f:	e8 d4 fe ff ff       	call   c000f148 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f274:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f278:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f27c:	0f 95 c0             	setne  al
c000f27f:	83 c4 24             	add    esp,0x24
c000f282:	c3                   	ret    
c000f283:	90                   	nop

c000f284 <CPU::CPU()>:
c000f284:	83 ec 0c             	sub    esp,0xc
c000f287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f28b:	83 ec 08             	sub    esp,0x8
c000f28e:	68 19 ee 01 c0       	push   0xc001ee19
c000f293:	50                   	push   eax
c000f294:	e8 4b c9 ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000f299:	83 c4 10             	add    esp,0x10
c000f29c:	ba a0 ee 01 c0       	mov    edx,0xc001eea0
c000f2a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2a5:	89 10                	mov    DWORD PTR [eax],edx
c000f2a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2ab:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f2b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2b9:	05 78 01 00 00       	add    eax,0x178
c000f2be:	83 ec 0c             	sub    esp,0xc
c000f2c1:	50                   	push   eax
c000f2c2:	e8 6d 7e ff ff       	call   c0007134 <GDT::GDT()>
c000f2c7:	83 c4 10             	add    esp,0x10
c000f2ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2ce:	05 7c 09 00 00       	add    eax,0x97c
c000f2d3:	83 ec 0c             	sub    esp,0xc
c000f2d6:	50                   	push   eax
c000f2d7:	e8 94 80 ff ff       	call   c0007370 <IDT::IDT()>
c000f2dc:	83 c4 10             	add    esp,0x10
c000f2df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2e3:	05 7c 11 00 00       	add    eax,0x117c
c000f2e8:	83 ec 0c             	sub    esp,0xc
c000f2eb:	50                   	push   eax
c000f2ec:	e8 a3 99 ff ff       	call   c0008c94 <TSS::TSS()>
c000f2f1:	83 c4 10             	add    esp,0x10
c000f2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2f8:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f2ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f303:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f30d:	90                   	nop
c000f30e:	83 c4 0c             	add    esp,0xc
c000f311:	c3                   	ret    

c000f312 <CPU::displayFeatures()>:
c000f312:	c3                   	ret    
c000f313:	90                   	nop

c000f314 <CPU::detectFeatures()>:
c000f314:	55                   	push   ebp
c000f315:	57                   	push   edi
c000f316:	56                   	push   esi
c000f317:	53                   	push   ebx
c000f318:	83 ec 30             	sub    esp,0x30
c000f31b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f31f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f329:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f330:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f336:	6a 0d                	push   0xd
c000f338:	6a 00                	push   0x0
c000f33a:	55                   	push   ebp
c000f33b:	e8 90 11 ff ff       	call   c00004d0 <memset>
c000f340:	83 c4 10             	add    esp,0x10
c000f343:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000f348:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f34f:	0f 84 d5 05 00 00    	je     c000f92a <CPU::detectFeatures()+0x616>
c000f355:	83 ec 0c             	sub    esp,0xc
c000f358:	89 ef                	mov    edi,ebp
c000f35a:	6a 10                	push   0x10
c000f35c:	e8 6b fe ff ff       	call   c000f1cc <CPU::cpuidCheckEDX(unsigned int)>
c000f361:	83 e0 01             	and    eax,0x1
c000f364:	8d 14 00             	lea    edx,[eax+eax*1]
c000f367:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f36d:	83 e0 fd             	and    eax,0xfffffffd
c000f370:	09 d0                	or     eax,edx
c000f372:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f378:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f37f:	e8 48 fe ff ff       	call   c000f1cc <CPU::cpuidCheckEDX(unsigned int)>
c000f384:	83 e0 01             	and    eax,0x1
c000f387:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f38e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f394:	83 e0 fb             	and    eax,0xfffffffb
c000f397:	09 d0                	or     eax,edx
c000f399:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f39f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f3a6:	e8 21 fe ff ff       	call   c000f1cc <CPU::cpuidCheckEDX(unsigned int)>
c000f3ab:	83 e0 01             	and    eax,0x1
c000f3ae:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f3b5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f3bb:	83 e0 f7             	and    eax,0xfffffff7
c000f3be:	09 d0                	or     eax,edx
c000f3c0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f3c6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f3cd:	e8 fa fd ff ff       	call   c000f1cc <CPU::cpuidCheckEDX(unsigned int)>
c000f3d2:	83 e0 01             	and    eax,0x1
c000f3d5:	c1 e0 04             	shl    eax,0x4
c000f3d8:	88 c2                	mov    dl,al
c000f3da:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f3e0:	83 e0 ef             	and    eax,0xffffffef
c000f3e3:	09 d0                	or     eax,edx
c000f3e5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f3eb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f3f2:	e8 d5 fd ff ff       	call   c000f1cc <CPU::cpuidCheckEDX(unsigned int)>
c000f3f7:	83 e0 01             	and    eax,0x1
c000f3fa:	c1 e0 05             	shl    eax,0x5
c000f3fd:	88 c2                	mov    dl,al
c000f3ff:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f405:	83 e0 df             	and    eax,0xffffffdf
c000f408:	09 d0                	or     eax,edx
c000f40a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f410:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f417:	e8 b0 fd ff ff       	call   c000f1cc <CPU::cpuidCheckEDX(unsigned int)>
c000f41c:	83 e0 01             	and    eax,0x1
c000f41f:	8d 14 00             	lea    edx,[eax+eax*1]
c000f422:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f428:	83 e0 fd             	and    eax,0xfffffffd
c000f42b:	09 d0                	or     eax,edx
c000f42d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f433:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f43a:	e8 8d fd ff ff       	call   c000f1cc <CPU::cpuidCheckEDX(unsigned int)>
c000f43f:	83 e0 01             	and    eax,0x1
c000f442:	c1 e0 06             	shl    eax,0x6
c000f445:	88 c2                	mov    dl,al
c000f447:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f44d:	83 e0 bf             	and    eax,0xffffffbf
c000f450:	09 d0                	or     eax,edx
c000f452:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f458:	58                   	pop    eax
c000f459:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f45d:	50                   	push   eax
c000f45e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f462:	50                   	push   eax
c000f463:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f467:	56                   	push   esi
c000f468:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f46c:	50                   	push   eax
c000f46d:	6a 00                	push   0x0
c000f46f:	e8 d4 fc ff ff       	call   c000f148 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f474:	b8 04 00 00 00       	mov    eax,0x4
c000f479:	89 c1                	mov    ecx,eax
c000f47b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f47d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f483:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f487:	89 c1                	mov    ecx,eax
c000f489:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f48b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f491:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f495:	89 c1                	mov    ecx,eax
c000f497:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f499:	83 c4 18             	add    esp,0x18
c000f49c:	68 28 ed 01 c0       	push   0xc001ed28
c000f4a1:	55                   	push   ebp
c000f4a2:	e8 39 12 ff ff       	call   c00006e0 <strcmp>
c000f4a7:	83 c4 10             	add    esp,0x10
c000f4aa:	85 c0                	test   eax,eax
c000f4ac:	75 0f                	jne    c000f4bd <CPU::detectFeatures()+0x1a9>
c000f4ae:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f4b8:	e9 22 02 00 00       	jmp    c000f6df <CPU::detectFeatures()+0x3cb>
c000f4bd:	50                   	push   eax
c000f4be:	50                   	push   eax
c000f4bf:	68 35 ed 01 c0       	push   0xc001ed35
c000f4c4:	55                   	push   ebp
c000f4c5:	e8 16 12 ff ff       	call   c00006e0 <strcmp>
c000f4ca:	83 c4 10             	add    esp,0x10
c000f4cd:	85 c0                	test   eax,eax
c000f4cf:	74 dd                	je     c000f4ae <CPU::detectFeatures()+0x19a>
c000f4d1:	50                   	push   eax
c000f4d2:	50                   	push   eax
c000f4d3:	68 42 ed 01 c0       	push   0xc001ed42
c000f4d8:	55                   	push   ebp
c000f4d9:	e8 02 12 ff ff       	call   c00006e0 <strcmp>
c000f4de:	83 c4 10             	add    esp,0x10
c000f4e1:	85 c0                	test   eax,eax
c000f4e3:	74 2a                	je     c000f50f <CPU::detectFeatures()+0x1fb>
c000f4e5:	50                   	push   eax
c000f4e6:	50                   	push   eax
c000f4e7:	68 4f ed 01 c0       	push   0xc001ed4f
c000f4ec:	55                   	push   ebp
c000f4ed:	e8 ee 11 ff ff       	call   c00006e0 <strcmp>
c000f4f2:	83 c4 10             	add    esp,0x10
c000f4f5:	85 c0                	test   eax,eax
c000f4f7:	74 16                	je     c000f50f <CPU::detectFeatures()+0x1fb>
c000f4f9:	50                   	push   eax
c000f4fa:	50                   	push   eax
c000f4fb:	68 5c ed 01 c0       	push   0xc001ed5c
c000f500:	55                   	push   ebp
c000f501:	e8 da 11 ff ff       	call   c00006e0 <strcmp>
c000f506:	83 c4 10             	add    esp,0x10
c000f509:	85 c0                	test   eax,eax
c000f50b:	74 48                	je     c000f555 <CPU::detectFeatures()+0x241>
c000f50d:	eb 0f                	jmp    c000f51e <CPU::detectFeatures()+0x20a>
c000f50f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f519:	e9 c1 01 00 00       	jmp    c000f6df <CPU::detectFeatures()+0x3cb>
c000f51e:	50                   	push   eax
c000f51f:	50                   	push   eax
c000f520:	68 69 ed 01 c0       	push   0xc001ed69
c000f525:	55                   	push   ebp
c000f526:	e8 b5 11 ff ff       	call   c00006e0 <strcmp>
c000f52b:	83 c4 10             	add    esp,0x10
c000f52e:	85 c0                	test   eax,eax
c000f530:	74 23                	je     c000f555 <CPU::detectFeatures()+0x241>
c000f532:	57                   	push   edi
c000f533:	57                   	push   edi
c000f534:	68 76 ed 01 c0       	push   0xc001ed76
c000f539:	55                   	push   ebp
c000f53a:	e8 a1 11 ff ff       	call   c00006e0 <strcmp>
c000f53f:	83 c4 10             	add    esp,0x10
c000f542:	85 c0                	test   eax,eax
c000f544:	75 1e                	jne    c000f564 <CPU::detectFeatures()+0x250>
c000f546:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f550:	e9 8a 01 00 00       	jmp    c000f6df <CPU::detectFeatures()+0x3cb>
c000f555:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f55f:	e9 7b 01 00 00       	jmp    c000f6df <CPU::detectFeatures()+0x3cb>
c000f564:	56                   	push   esi
c000f565:	56                   	push   esi
c000f566:	68 83 ed 01 c0       	push   0xc001ed83
c000f56b:	55                   	push   ebp
c000f56c:	e8 6f 11 ff ff       	call   c00006e0 <strcmp>
c000f571:	83 c4 10             	add    esp,0x10
c000f574:	85 c0                	test   eax,eax
c000f576:	75 0f                	jne    c000f587 <CPU::detectFeatures()+0x273>
c000f578:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f582:	e9 58 01 00 00       	jmp    c000f6df <CPU::detectFeatures()+0x3cb>
c000f587:	51                   	push   ecx
c000f588:	51                   	push   ecx
c000f589:	68 42 ed 01 c0       	push   0xc001ed42
c000f58e:	55                   	push   ebp
c000f58f:	e8 4c 11 ff ff       	call   c00006e0 <strcmp>
c000f594:	83 c4 10             	add    esp,0x10
c000f597:	85 c0                	test   eax,eax
c000f599:	75 0f                	jne    c000f5aa <CPU::detectFeatures()+0x296>
c000f59b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f5a5:	e9 35 01 00 00       	jmp    c000f6df <CPU::detectFeatures()+0x3cb>
c000f5aa:	52                   	push   edx
c000f5ab:	52                   	push   edx
c000f5ac:	68 90 ed 01 c0       	push   0xc001ed90
c000f5b1:	55                   	push   ebp
c000f5b2:	e8 29 11 ff ff       	call   c00006e0 <strcmp>
c000f5b7:	83 c4 10             	add    esp,0x10
c000f5ba:	85 c0                	test   eax,eax
c000f5bc:	75 0f                	jne    c000f5cd <CPU::detectFeatures()+0x2b9>
c000f5be:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f5c8:	e9 12 01 00 00       	jmp    c000f6df <CPU::detectFeatures()+0x3cb>
c000f5cd:	50                   	push   eax
c000f5ce:	50                   	push   eax
c000f5cf:	68 9d ed 01 c0       	push   0xc001ed9d
c000f5d4:	55                   	push   ebp
c000f5d5:	e8 06 11 ff ff       	call   c00006e0 <strcmp>
c000f5da:	83 c4 10             	add    esp,0x10
c000f5dd:	85 c0                	test   eax,eax
c000f5df:	75 0f                	jne    c000f5f0 <CPU::detectFeatures()+0x2dc>
c000f5e1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f5eb:	e9 ef 00 00 00       	jmp    c000f6df <CPU::detectFeatures()+0x3cb>
c000f5f0:	50                   	push   eax
c000f5f1:	50                   	push   eax
c000f5f2:	68 aa ed 01 c0       	push   0xc001edaa
c000f5f7:	55                   	push   ebp
c000f5f8:	e8 e3 10 ff ff       	call   c00006e0 <strcmp>
c000f5fd:	83 c4 10             	add    esp,0x10
c000f600:	85 c0                	test   eax,eax
c000f602:	75 0f                	jne    c000f613 <CPU::detectFeatures()+0x2ff>
c000f604:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f60e:	e9 cc 00 00 00       	jmp    c000f6df <CPU::detectFeatures()+0x3cb>
c000f613:	50                   	push   eax
c000f614:	50                   	push   eax
c000f615:	68 b7 ed 01 c0       	push   0xc001edb7
c000f61a:	55                   	push   ebp
c000f61b:	e8 c0 10 ff ff       	call   c00006e0 <strcmp>
c000f620:	83 c4 10             	add    esp,0x10
c000f623:	85 c0                	test   eax,eax
c000f625:	75 0f                	jne    c000f636 <CPU::detectFeatures()+0x322>
c000f627:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f631:	e9 a9 00 00 00       	jmp    c000f6df <CPU::detectFeatures()+0x3cb>
c000f636:	50                   	push   eax
c000f637:	50                   	push   eax
c000f638:	68 c4 ed 01 c0       	push   0xc001edc4
c000f63d:	55                   	push   ebp
c000f63e:	e8 9d 10 ff ff       	call   c00006e0 <strcmp>
c000f643:	83 c4 10             	add    esp,0x10
c000f646:	85 c0                	test   eax,eax
c000f648:	75 0f                	jne    c000f659 <CPU::detectFeatures()+0x345>
c000f64a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f654:	e9 86 00 00 00       	jmp    c000f6df <CPU::detectFeatures()+0x3cb>
c000f659:	50                   	push   eax
c000f65a:	50                   	push   eax
c000f65b:	68 d1 ed 01 c0       	push   0xc001edd1
c000f660:	55                   	push   ebp
c000f661:	e8 7a 10 ff ff       	call   c00006e0 <strcmp>
c000f666:	83 c4 10             	add    esp,0x10
c000f669:	85 c0                	test   eax,eax
c000f66b:	75 0c                	jne    c000f679 <CPU::detectFeatures()+0x365>
c000f66d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f677:	eb 66                	jmp    c000f6df <CPU::detectFeatures()+0x3cb>
c000f679:	50                   	push   eax
c000f67a:	50                   	push   eax
c000f67b:	68 de ed 01 c0       	push   0xc001edde
c000f680:	55                   	push   ebp
c000f681:	e8 5a 10 ff ff       	call   c00006e0 <strcmp>
c000f686:	83 c4 10             	add    esp,0x10
c000f689:	85 c0                	test   eax,eax
c000f68b:	75 0c                	jne    c000f699 <CPU::detectFeatures()+0x385>
c000f68d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f697:	eb 46                	jmp    c000f6df <CPU::detectFeatures()+0x3cb>
c000f699:	57                   	push   edi
c000f69a:	57                   	push   edi
c000f69b:	68 eb ed 01 c0       	push   0xc001edeb
c000f6a0:	55                   	push   ebp
c000f6a1:	e8 3a 10 ff ff       	call   c00006e0 <strcmp>
c000f6a6:	83 c4 10             	add    esp,0x10
c000f6a9:	85 c0                	test   eax,eax
c000f6ab:	74 e0                	je     c000f68d <CPU::detectFeatures()+0x379>
c000f6ad:	56                   	push   esi
c000f6ae:	56                   	push   esi
c000f6af:	68 f8 ed 01 c0       	push   0xc001edf8
c000f6b4:	55                   	push   ebp
c000f6b5:	e8 26 10 ff ff       	call   c00006e0 <strcmp>
c000f6ba:	83 c4 10             	add    esp,0x10
c000f6bd:	85 c0                	test   eax,eax
c000f6bf:	74 cc                	je     c000f68d <CPU::detectFeatures()+0x379>
c000f6c1:	51                   	push   ecx
c000f6c2:	51                   	push   ecx
c000f6c3:	68 05 ee 01 c0       	push   0xc001ee05
c000f6c8:	55                   	push   ebp
c000f6c9:	e8 12 10 ff ff       	call   c00006e0 <strcmp>
c000f6ce:	83 c4 10             	add    esp,0x10
c000f6d1:	85 c0                	test   eax,eax
c000f6d3:	74 b8                	je     c000f68d <CPU::detectFeatures()+0x379>
c000f6d5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f6df:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f6e4:	0f 86 be 00 00 00    	jbe    c000f7a8 <CPU::detectFeatures()+0x494>
c000f6ea:	83 ec 0c             	sub    esp,0xc
c000f6ed:	68 80 00 00 00       	push   0x80
c000f6f2:	e8 31 fb ff ff       	call   c000f228 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f6f7:	83 e0 01             	and    eax,0x1
c000f6fa:	c1 e0 06             	shl    eax,0x6
c000f6fd:	88 c2                	mov    dl,al
c000f6ff:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f705:	83 e0 bf             	and    eax,0xffffffbf
c000f708:	09 d0                	or     eax,edx
c000f70a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f710:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f717:	e8 0c fb ff ff       	call   c000f228 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f71c:	83 e0 01             	and    eax,0x1
c000f71f:	c1 e0 04             	shl    eax,0x4
c000f722:	88 c2                	mov    dl,al
c000f724:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f72a:	83 e0 ef             	and    eax,0xffffffef
c000f72d:	09 d0                	or     eax,edx
c000f72f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f735:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f73c:	e8 e7 fa ff ff       	call   c000f228 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f741:	c1 e0 07             	shl    eax,0x7
c000f744:	88 c2                	mov    dl,al
c000f746:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f74c:	83 e0 7f             	and    eax,0x7f
c000f74f:	09 d0                	or     eax,edx
c000f751:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f757:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f75e:	e8 f3 fa ff ff       	call   c000f256 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f763:	83 e0 01             	and    eax,0x1
c000f766:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f76d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f773:	83 e0 f7             	and    eax,0xfffffff7
c000f776:	09 d0                	or     eax,edx
c000f778:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f77e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f785:	e8 cc fa ff ff       	call   c000f256 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f78a:	83 c4 10             	add    esp,0x10
c000f78d:	83 e0 01             	and    eax,0x1
c000f790:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f797:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f79d:	83 e0 fb             	and    eax,0xfffffffb
c000f7a0:	09 d0                	or     eax,edx
c000f7a2:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f7a8:	83 ec 0c             	sub    esp,0xc
c000f7ab:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f7af:	50                   	push   eax
c000f7b0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f7b4:	50                   	push   eax
c000f7b5:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f7b9:	56                   	push   esi
c000f7ba:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f7be:	50                   	push   eax
c000f7bf:	6a 01                	push   0x1
c000f7c1:	e8 82 f9 ff ff       	call   c000f148 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7c6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f7ca:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f7d0:	88 ca                	mov    dl,cl
c000f7d2:	83 e0 f0             	and    eax,0xfffffff0
c000f7d5:	83 e2 0f             	and    edx,0xf
c000f7d8:	09 d0                	or     eax,edx
c000f7da:	88 ca                	mov    dl,cl
c000f7dc:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f7e2:	c0 ea 04             	shr    dl,0x4
c000f7e5:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f7e9:	0f b6 c2             	movzx  eax,dl
c000f7ec:	83 c4 20             	add    esp,0x20
c000f7ef:	c1 e0 06             	shl    eax,0x6
c000f7f2:	89 c7                	mov    edi,eax
c000f7f4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f7fa:	66 25 3f c0          	and    ax,0xc03f
c000f7fe:	09 f8                	or     eax,edi
c000f800:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f807:	89 c8                	mov    eax,ecx
c000f809:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f810:	c1 e8 08             	shr    eax,0x8
c000f813:	83 e5 3f             	and    ebp,0x3f
c000f816:	83 e0 0f             	and    eax,0xf
c000f819:	89 c7                	mov    edi,eax
c000f81b:	c1 e7 06             	shl    edi,0x6
c000f81e:	09 ef                	or     edi,ebp
c000f820:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f827:	89 fa                	mov    edx,edi
c000f829:	83 e5 c0             	and    ebp,0xffffffc0
c000f82c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f832:	88 c2                	mov    dl,al
c000f834:	c0 ea 02             	shr    dl,0x2
c000f837:	89 d7                	mov    edi,edx
c000f839:	09 ef                	or     edi,ebp
c000f83b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f841:	89 fa                	mov    edx,edi
c000f843:	83 e5 cf             	and    ebp,0xffffffcf
c000f846:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f84c:	89 cf                	mov    edi,ecx
c000f84e:	c1 ef 0c             	shr    edi,0xc
c000f851:	83 e7 03             	and    edi,0x3
c000f854:	c1 e7 04             	shl    edi,0x4
c000f857:	09 ef                	or     edi,ebp
c000f859:	3c 06                	cmp    al,0x6
c000f85b:	89 fa                	mov    edx,edi
c000f85d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f863:	74 04                	je     c000f869 <CPU::detectFeatures()+0x555>
c000f865:	3c 0f                	cmp    al,0xf
c000f867:	75 5c                	jne    c000f8c5 <CPU::detectFeatures()+0x5b1>
c000f869:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f86d:	89 cf                	mov    edi,ecx
c000f86f:	c1 ef 10             	shr    edi,0x10
c000f872:	c1 e7 04             	shl    edi,0x4
c000f875:	09 fa                	or     edx,edi
c000f877:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f87d:	0f b6 d2             	movzx  edx,dl
c000f880:	66 81 e7 3f c0       	and    di,0xc03f
c000f885:	c1 e2 06             	shl    edx,0x6
c000f888:	09 fa                	or     edx,edi
c000f88a:	3c 0f                	cmp    al,0xf
c000f88c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f893:	75 30                	jne    c000f8c5 <CPU::detectFeatures()+0x5b1>
c000f895:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f89b:	c1 e9 14             	shr    ecx,0x14
c000f89e:	83 e0 3f             	and    eax,0x3f
c000f8a1:	83 c1 0f             	add    ecx,0xf
c000f8a4:	88 ca                	mov    dl,cl
c000f8a6:	c0 e9 02             	shr    cl,0x2
c000f8a9:	c1 e2 06             	shl    edx,0x6
c000f8ac:	09 d0                	or     eax,edx
c000f8ae:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f8b4:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f8ba:	83 e0 c0             	and    eax,0xffffffc0
c000f8bd:	09 c1                	or     ecx,eax
c000f8bf:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f8c5:	83 ec 0c             	sub    esp,0xc
c000f8c8:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f8cf:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8d3:	50                   	push   eax
c000f8d4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f8d8:	55                   	push   ebp
c000f8d9:	56                   	push   esi
c000f8da:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f8de:	57                   	push   edi
c000f8df:	68 00 00 00 80       	push   0x80000000
c000f8e4:	e8 5f f8 ff ff       	call   c000f148 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f8e9:	83 c4 20             	add    esp,0x20
c000f8ec:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f8f4:	76 22                	jbe    c000f918 <CPU::detectFeatures()+0x604>
c000f8f6:	83 ec 0c             	sub    esp,0xc
c000f8f9:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8fd:	50                   	push   eax
c000f8fe:	55                   	push   ebp
c000f8ff:	56                   	push   esi
c000f900:	57                   	push   edi
c000f901:	68 01 00 00 80       	push   0x80000001
c000f906:	e8 3d f8 ff ff       	call   c000f148 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f90b:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f915:	83 c4 20             	add    esp,0x20
c000f918:	52                   	push   edx
c000f919:	52                   	push   edx
c000f91a:	68 11 ee 01 c0       	push   0xc001ee11
c000f91f:	53                   	push   ebx
c000f920:	e8 b1 c2 ff ff       	call   c000bbd6 <Device::setName(char const*)>
c000f925:	83 c4 10             	add    esp,0x10
c000f928:	eb 67                	jmp    c000f991 <CPU::detectFeatures()+0x67d>
c000f92a:	50                   	push   eax
c000f92b:	50                   	push   eax
c000f92c:	68 76 ed 01 c0       	push   0xc001ed76
c000f931:	55                   	push   ebp
c000f932:	e8 c9 0c ff ff       	call   c0000600 <strcpy>
c000f937:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f941:	e8 7d 08 ff ff       	call   c00001c3 <is486>
c000f946:	83 c4 10             	add    esp,0x10
c000f949:	85 c0                	test   eax,eax
c000f94b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f951:	74 1d                	je     c000f970 <CPU::detectFeatures()+0x65c>
c000f953:	83 c8 07             	or     eax,0x7
c000f956:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f95c:	0f 20 c0             	mov    eax,cr0
c000f95f:	83 e0 14             	and    eax,0x14
c000f962:	83 f8 04             	cmp    eax,0x4
c000f965:	75 0e                	jne    c000f975 <CPU::detectFeatures()+0x661>
c000f967:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f96e:	eb 21                	jmp    c000f991 <CPU::detectFeatures()+0x67d>
c000f970:	83 e0 f8             	and    eax,0xfffffff8
c000f973:	eb e1                	jmp    c000f956 <CPU::detectFeatures()+0x642>
c000f975:	e8 24 08 ff ff       	call   c000019e <hasLegacyFPU>
c000f97a:	83 e0 01             	and    eax,0x1
c000f97d:	8d 14 00             	lea    edx,[eax+eax*1]
c000f980:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f986:	83 e0 fd             	and    eax,0xfffffffd
c000f989:	09 d0                	or     eax,edx
c000f98b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f991:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f998:	74 0e                	je     c000f9a8 <CPU::detectFeatures()+0x694>
c000f99a:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000f99f:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f9a6:	eb 20                	jmp    c000f9c8 <CPU::detectFeatures()+0x6b4>
c000f9a8:	e8 f1 07 ff ff       	call   c000019e <hasLegacyFPU>
c000f9ad:	83 e0 01             	and    eax,0x1
c000f9b0:	8d 14 00             	lea    edx,[eax+eax*1]
c000f9b3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f9b9:	83 e0 fd             	and    eax,0xfffffffd
c000f9bc:	09 d0                	or     eax,edx
c000f9be:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f9c4:	a8 02                	test   al,0x2
c000f9c6:	75 d2                	jne    c000f99a <CPU::detectFeatures()+0x686>
c000f9c8:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f9cf:	83 c4 2c             	add    esp,0x2c
c000f9d2:	5b                   	pop    ebx
c000f9d3:	5e                   	pop    esi
c000f9d4:	5f                   	pop    edi
c000f9d5:	5d                   	pop    ebp
c000f9d6:	c3                   	ret    
c000f9d7:	90                   	nop

c000f9d8 <CPU::setupSMEP()>:
c000f9d8:	0f 20 e0             	mov    eax,cr4
c000f9db:	0d 00 00 10 00       	or     eax,0x100000
c000f9e0:	0f 22 e0             	mov    cr4,eax
c000f9e3:	c3                   	ret    

c000f9e4 <CPU::setupUMIP()>:
c000f9e4:	0f 20 e0             	mov    eax,cr4
c000f9e7:	80 cc 08             	or     ah,0x8
c000f9ea:	0f 22 e0             	mov    cr4,eax
c000f9ed:	c3                   	ret    

c000f9ee <CPU::setupTSC()>:
c000f9ee:	0f 20 e0             	mov    eax,cr4
c000f9f1:	83 c8 04             	or     eax,0x4
c000f9f4:	0f 22 e0             	mov    cr4,eax
c000f9f7:	c3                   	ret    

c000f9f8 <CPU::setupLargePages()>:
c000f9f8:	0f 20 e0             	mov    eax,cr4
c000f9fb:	83 c8 10             	or     eax,0x10
c000f9fe:	0f 22 e0             	mov    cr4,eax
c000fa01:	c3                   	ret    

c000fa02 <CPU::setupPAT()>:
c000fa02:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000fa07:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fa0e:	74 2c                	je     c000fa3c <CPU::setupPAT()+0x3a>
c000fa10:	53                   	push   ebx
c000fa11:	83 ec 10             	sub    esp,0x10
c000fa14:	68 77 02 00 00       	push   0x277
c000fa19:	50                   	push   eax
c000fa1a:	e8 8d 74 ff ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c000fa1f:	83 e2 f8             	and    edx,0xfffffff8
c000fa22:	83 ca 01             	or     edx,0x1
c000fa25:	52                   	push   edx
c000fa26:	50                   	push   eax
c000fa27:	68 77 02 00 00       	push   0x277
c000fa2c:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c000fa32:	e8 a1 74 ff ff       	call   c0006ed8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000fa37:	83 c4 28             	add    esp,0x28
c000fa3a:	5b                   	pop    ebx
c000fa3b:	c3                   	ret    
c000fa3c:	c3                   	ret    
c000fa3d:	90                   	nop

c000fa3e <CPU::setupMTRR()>:
c000fa3e:	c3                   	ret    
c000fa3f:	90                   	nop

c000fa40 <CPU::setupGlobalPages()>:
c000fa40:	0f 20 e0             	mov    eax,cr4
c000fa43:	0c 80                	or     al,0x80
c000fa45:	0f 22 e0             	mov    cr4,eax
c000fa48:	c3                   	ret    
c000fa49:	90                   	nop

c000fa4a <CPU::allowUsermodeDataAccess()>:
c000fa4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa4e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fa55:	74 03                	je     c000fa5a <CPU::allowUsermodeDataAccess()+0x10>
c000fa57:	0f 01 cb             	stac   
c000fa5a:	c3                   	ret    
c000fa5b:	90                   	nop

c000fa5c <CPU::prohibitUsermodeDataAccess()>:
c000fa5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa60:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fa67:	74 03                	je     c000fa6c <CPU::prohibitUsermodeDataAccess()+0x10>
c000fa69:	0f 01 ca             	clac   
c000fa6c:	c3                   	ret    
c000fa6d:	90                   	nop

c000fa6e <CPU::setupSMAP()>:
c000fa6e:	0f 20 e0             	mov    eax,cr4
c000fa71:	0d 00 00 20 00       	or     eax,0x200000
c000fa76:	0f 22 e0             	mov    cr4,eax
c000fa79:	eb e1                	jmp    c000fa5c <CPU::prohibitUsermodeDataAccess()>
c000fa7b:	90                   	nop

c000fa7c <CPU::setupFeatures()>:
c000fa7c:	53                   	push   ebx
c000fa7d:	83 ec 08             	sub    esp,0x8
c000fa80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa84:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fa8b:	74 18                	je     c000faa5 <CPU::setupFeatures()+0x29>
c000fa8d:	83 ec 0c             	sub    esp,0xc
c000fa90:	68 1d ee 01 c0       	push   0xc001ee1d
c000fa95:	e8 74 ab ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000fa9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa9d:	e8 42 ff ff ff       	call   c000f9e4 <CPU::setupUMIP()>
c000faa2:	83 c4 10             	add    esp,0x10
c000faa5:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000faac:	74 18                	je     c000fac6 <CPU::setupFeatures()+0x4a>
c000faae:	83 ec 0c             	sub    esp,0xc
c000fab1:	68 27 ee 01 c0       	push   0xc001ee27
c000fab6:	e8 53 ab ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000fabb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fabe:	e8 2b ff ff ff       	call   c000f9ee <CPU::setupTSC()>
c000fac3:	83 c4 10             	add    esp,0x10
c000fac6:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000facd:	74 18                	je     c000fae7 <CPU::setupFeatures()+0x6b>
c000facf:	83 ec 0c             	sub    esp,0xc
c000fad2:	68 30 ee 01 c0       	push   0xc001ee30
c000fad7:	e8 32 ab ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000fadc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fadf:	e8 14 ff ff ff       	call   c000f9f8 <CPU::setupLargePages()>
c000fae4:	83 c4 10             	add    esp,0x10
c000fae7:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000faee:	74 18                	je     c000fb08 <CPU::setupFeatures()+0x8c>
c000faf0:	83 ec 0c             	sub    esp,0xc
c000faf3:	68 39 ee 01 c0       	push   0xc001ee39
c000faf8:	e8 11 ab ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000fafd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb00:	e8 3b ff ff ff       	call   c000fa40 <CPU::setupGlobalPages()>
c000fb05:	83 c4 10             	add    esp,0x10
c000fb08:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fb0f:	74 18                	je     c000fb29 <CPU::setupFeatures()+0xad>
c000fb11:	83 ec 0c             	sub    esp,0xc
c000fb14:	68 4b ee 01 c0       	push   0xc001ee4b
c000fb19:	e8 f0 aa ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000fb1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb21:	e8 dc fe ff ff       	call   c000fa02 <CPU::setupPAT()>
c000fb26:	83 c4 10             	add    esp,0x10
c000fb29:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fb30:	74 11                	je     c000fb43 <CPU::setupFeatures()+0xc7>
c000fb32:	c7 44 24 10 54 ee 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ee54
c000fb3a:	83 c4 08             	add    esp,0x8
c000fb3d:	5b                   	pop    ebx
c000fb3e:	e9 cb aa ff ff       	jmp    c000a60e <Dbg::kprintf(char const*, ...)>
c000fb43:	83 c4 08             	add    esp,0x8
c000fb46:	5b                   	pop    ebx
c000fb47:	c3                   	ret    

c000fb48 <CPU::open(int, int, void*)>:
c000fb48:	57                   	push   edi
c000fb49:	56                   	push   esi
c000fb4a:	53                   	push   ebx
c000fb4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb4f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fb53:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fb59:	83 ec 0c             	sub    esp,0xc
c000fb5c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fb62:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fb68:	50                   	push   eax
c000fb69:	e8 28 76 ff ff       	call   c0007196 <GDT::setup()>
c000fb6e:	83 c4 0c             	add    esp,0xc
c000fb71:	6a 00                	push   0x0
c000fb73:	68 ef be ad de       	push   0xdeadbeef
c000fb78:	57                   	push   edi
c000fb79:	e8 5a 91 ff ff       	call   c0008cd8 <TSS::setup(unsigned long, unsigned long)>
c000fb7e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fb81:	e8 32 91 ff ff       	call   c0008cb8 <TSS::flush()>
c000fb86:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fb8c:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb8f:	e8 52 78 ff ff       	call   c00073e6 <IDT::setup()>
c000fb94:	b8 00 04 00 00       	mov    eax,0x400
c000fb99:	0f 23 f8             	mov    db7,eax
c000fb9c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fba6:	e8 a6 7f ff ff       	call   c0007b51 <Phys::allocatePage()>
c000fbab:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fbb1:	89 30                	mov    DWORD PTR [eax],esi
c000fbb3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fbb9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fbbc:	58                   	pop    eax
c000fbbd:	5a                   	pop    edx
c000fbbe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fbc4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fbc8:	e8 23 a1 ff ff       	call   c0009cf0 <VAS::setCPUSpecific(unsigned long)>
c000fbcd:	c7 04 24 5e ee 01 c0 	mov    DWORD PTR [esp],0xc001ee5e
c000fbd4:	e8 c6 00 00 00       	call   c000fc9f <KeSetBootMessage(char const*)>
c000fbd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbdc:	e8 33 f7 ff ff       	call   c000f314 <CPU::detectFeatures()>
c000fbe1:	c7 04 24 81 ee 01 c0 	mov    DWORD PTR [esp],0xc001ee81
c000fbe8:	e8 b2 00 00 00       	call   c000fc9f <KeSetBootMessage(char const*)>
c000fbed:	e8 4e 5b 00 00       	call   c0015740 <HalInitialise()>
c000fbf2:	a1 d0 2e 02 c0       	mov    eax,ds:0xc0022ed0
c000fbf7:	83 e0 10             	and    eax,0x10
c000fbfa:	83 f8 01             	cmp    eax,0x1
c000fbfd:	19 c0                	sbb    eax,eax
c000fbff:	83 e0 46             	and    eax,0x46
c000fc02:	83 c0 1e             	add    eax,0x1e
c000fc05:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc08:	e8 c8 d6 ff ff       	call   c000d2d5 <setupTimer(int)>
c000fc0d:	83 c4 10             	add    esp,0x10
c000fc10:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fc16:	f6 05 d0 2e 02 c0 20 	test   BYTE PTR ds:0xc0022ed0,0x20
c000fc1d:	74 0c                	je     c000fc2b <CPU::open(int, int, void*)+0xe3>
c000fc1f:	83 ec 0c             	sub    esp,0xc
c000fc22:	53                   	push   ebx
c000fc23:	e8 54 fe ff ff       	call   c000fa7c <CPU::setupFeatures()>
c000fc28:	83 c4 10             	add    esp,0x10
c000fc2b:	5b                   	pop    ebx
c000fc2c:	31 c0                	xor    eax,eax
c000fc2e:	5e                   	pop    esi
c000fc2f:	5f                   	pop    edi
c000fc30:	c3                   	ret    

c000fc31 <KeDisplaySplashScreen()>:
c000fc31:	55                   	push   ebp
c000fc32:	bd 05 00 00 00       	mov    ebp,0x5
c000fc37:	57                   	push   edi
c000fc38:	bf 40 00 02 c0       	mov    edi,0xc0020040
c000fc3d:	56                   	push   esi
c000fc3e:	be 0a 00 00 00       	mov    esi,0xa
c000fc43:	53                   	push   ebx
c000fc44:	31 db                	xor    ebx,ebx
c000fc46:	83 ec 0c             	sub    esp,0xc
c000fc49:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fc4c:	84 c0                	test   al,al
c000fc4e:	74 47                	je     c000fc97 <KeDisplaySplashScreen()+0x66>
c000fc50:	80 bb 76 00 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdff8a],0xdb
c000fc57:	75 13                	jne    c000fc6c <KeDisplaySplashScreen()+0x3b>
c000fc59:	0f b6 93 75 00 02 c0 	movzx  edx,BYTE PTR [ebx-0x3ffdff8b]
c000fc60:	83 e2 fe             	and    edx,0xfffffffe
c000fc63:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fc69:	75 01                	jne    c000fc6c <KeDisplaySplashScreen()+0x3b>
c000fc6b:	46                   	inc    esi
c000fc6c:	3c 0d                	cmp    al,0xd
c000fc6e:	74 24                	je     c000fc94 <KeDisplaySplashScreen()+0x63>
c000fc70:	3c 0a                	cmp    al,0xa
c000fc72:	75 0a                	jne    c000fc7e <KeDisplaySplashScreen()+0x4d>
c000fc74:	45                   	inc    ebp
c000fc75:	be 0a 00 00 00       	mov    esi,0xa
c000fc7a:	31 db                	xor    ebx,ebx
c000fc7c:	eb 16                	jmp    c000fc94 <KeDisplaySplashScreen()+0x63>
c000fc7e:	83 ec 0c             	sub    esp,0xc
c000fc81:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fc84:	55                   	push   ebp
c000fc85:	43                   	inc    ebx
c000fc86:	52                   	push   edx
c000fc87:	6a 00                	push   0x0
c000fc89:	6a 0e                	push   0xe
c000fc8b:	50                   	push   eax
c000fc8c:	e8 13 67 00 00       	call   c00163a4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fc91:	83 c4 20             	add    esp,0x20
c000fc94:	47                   	inc    edi
c000fc95:	eb b2                	jmp    c000fc49 <KeDisplaySplashScreen()+0x18>
c000fc97:	83 c4 0c             	add    esp,0xc
c000fc9a:	5b                   	pop    ebx
c000fc9b:	5e                   	pop    esi
c000fc9c:	5f                   	pop    edi
c000fc9d:	5d                   	pop    ebp
c000fc9e:	c3                   	ret    

c000fc9f <KeSetBootMessage(char const*)>:
c000fc9f:	57                   	push   edi
c000fca0:	56                   	push   esi
c000fca1:	53                   	push   ebx
c000fca2:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fca8:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fcaf:	68 9e 00 00 00       	push   0x9e
c000fcb4:	6a 00                	push   0x0
c000fcb6:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fcba:	56                   	push   esi
c000fcbb:	e8 10 08 ff ff       	call   c00004d0 <memset>
c000fcc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fcc3:	e8 78 08 ff ff       	call   c0000540 <strlen>
c000fcc8:	ba 50 00 00 00       	mov    edx,0x50
c000fccd:	83 c4 10             	add    esp,0x10
c000fcd0:	29 c2                	sub    edx,eax
c000fcd2:	31 c9                	xor    ecx,ecx
c000fcd4:	83 e2 fe             	and    edx,0xfffffffe
c000fcd7:	01 f2                	add    edx,esi
c000fcd9:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fcde:	84 c0                	test   al,al
c000fce0:	74 0a                	je     c000fcec <KeSetBootMessage(char const*)+0x4d>
c000fce2:	80 cc 0f             	or     ah,0xf
c000fce5:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fce9:	41                   	inc    ecx
c000fcea:	eb ed                	jmp    c000fcd9 <KeSetBootMessage(char const*)+0x3a>
c000fcec:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fcf1:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fcf6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fcf8:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fcfe:	5b                   	pop    ebx
c000fcff:	5e                   	pop    esi
c000fd00:	5f                   	pop    edi
c000fd01:	c3                   	ret    

c000fd02 <EnvVarContainer::getEnv(char const*)>:
c000fd02:	57                   	push   edi
c000fd03:	56                   	push   esi
c000fd04:	53                   	push   ebx
c000fd05:	31 db                	xor    ebx,ebx
c000fd07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fd0b:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fd0d:	7e 2b                	jle    c000fd3a <EnvVarContainer::getEnv(char const*)+0x38>
c000fd0f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fd16:	50                   	push   eax
c000fd17:	50                   	push   eax
c000fd18:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fd1b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fd1e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fd22:	e8 b9 09 ff ff       	call   c00006e0 <strcmp>
c000fd27:	83 c4 10             	add    esp,0x10
c000fd2a:	85 c0                	test   eax,eax
c000fd2c:	75 09                	jne    c000fd37 <EnvVarContainer::getEnv(char const*)+0x35>
c000fd2e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fd31:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fd35:	eb 05                	jmp    c000fd3c <EnvVarContainer::getEnv(char const*)+0x3a>
c000fd37:	43                   	inc    ebx
c000fd38:	eb d1                	jmp    c000fd0b <EnvVarContainer::getEnv(char const*)+0x9>
c000fd3a:	31 c0                	xor    eax,eax
c000fd3c:	5b                   	pop    ebx
c000fd3d:	5e                   	pop    esi
c000fd3e:	5f                   	pop    edi
c000fd3f:	c3                   	ret    

c000fd40 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fd40:	55                   	push   ebp
c000fd41:	57                   	push   edi
c000fd42:	56                   	push   esi
c000fd43:	53                   	push   ebx
c000fd44:	83 ec 28             	sub    esp,0x28
c000fd47:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fd4b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fd4f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fd53:	56                   	push   esi
c000fd54:	e8 e7 07 ff ff       	call   c0000540 <strlen>
c000fd59:	40                   	inc    eax
c000fd5a:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd5d:	e8 13 7b ff ff       	call   c0007875 <malloc>
c000fd62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd69:	e8 d2 07 ff ff       	call   c0000540 <strlen>
c000fd6e:	40                   	inc    eax
c000fd6f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd72:	e8 fe 7a ff ff       	call   c0007875 <malloc>
c000fd77:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd7a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fd7e:	e8 bd 07 ff ff       	call   c0000540 <strlen>
c000fd83:	83 c4 0c             	add    esp,0xc
c000fd86:	40                   	inc    eax
c000fd87:	50                   	push   eax
c000fd88:	6a 00                	push   0x0
c000fd8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd8e:	e8 3d 07 ff ff       	call   c00004d0 <memset>
c000fd93:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd96:	e8 a5 07 ff ff       	call   c0000540 <strlen>
c000fd9b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fd9f:	8d 48 01             	lea    ecx,[eax+0x1]
c000fda2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fda4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fda7:	89 de                	mov    esi,ebx
c000fda9:	e8 92 07 ff ff       	call   c0000540 <strlen>
c000fdae:	83 c4 0c             	add    esp,0xc
c000fdb1:	40                   	inc    eax
c000fdb2:	50                   	push   eax
c000fdb3:	6a 00                	push   0x0
c000fdb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fdb9:	e8 12 07 ff ff       	call   c00004d0 <memset>
c000fdbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fdc1:	e8 7a 07 ff ff       	call   c0000540 <strlen>
c000fdc6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fdca:	8d 48 01             	lea    ecx,[eax+0x1]
c000fdcd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fdd2:	40                   	inc    eax
c000fdd3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fdd6:	c1 e0 03             	shl    eax,0x3
c000fdd9:	5a                   	pop    edx
c000fdda:	59                   	pop    ecx
c000fddb:	50                   	push   eax
c000fddc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fddf:	e8 7d 7a ff ff       	call   c0007861 <realloc>
c000fde4:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fde8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fdeb:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fdee:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fdf2:	b9 08 00 00 00       	mov    ecx,0x8
c000fdf7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdf9:	83 c4 2c             	add    esp,0x2c
c000fdfc:	5b                   	pop    ebx
c000fdfd:	5e                   	pop    esi
c000fdfe:	5f                   	pop    edi
c000fdff:	5d                   	pop    ebp
c000fe00:	c3                   	ret    
c000fe01:	90                   	nop

c000fe02 <EnvVarContainer::deleteEnv(char const*)>:
c000fe02:	c3                   	ret    
c000fe03:	90                   	nop

c000fe04 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fe04:	55                   	push   ebp
c000fe05:	57                   	push   edi
c000fe06:	56                   	push   esi
c000fe07:	53                   	push   ebx
c000fe08:	81 ec 38 01 00 00    	sub    esp,0x138
c000fe0e:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fe15:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fe1c:	68 14 01 00 00       	push   0x114
c000fe21:	e8 4f 7a ff ff       	call   c0007875 <malloc>
c000fe26:	83 c4 0c             	add    esp,0xc
c000fe29:	89 c3                	mov    ebx,eax
c000fe2b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fe2e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fe35:	50                   	push   eax
c000fe36:	e8 49 ad ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c000fe3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe3e:	e8 6f b0 ff ff       	call   c000aeb2 <File::exists()>
c000fe43:	83 c4 10             	add    esp,0x10
c000fe46:	84 c0                	test   al,al
c000fe48:	75 31                	jne    c000fe7b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fe4a:	50                   	push   eax
c000fe4b:	50                   	push   eax
c000fe4c:	6a 12                	push   0x12
c000fe4e:	53                   	push   ebx
c000fe4f:	e8 f0 ad ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c000fe54:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fe56:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fe59:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe5c:	e8 df 06 ff ff       	call   c0000540 <strlen>
c000fe61:	5a                   	pop    edx
c000fe62:	31 d2                	xor    edx,edx
c000fe64:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fe68:	51                   	push   ecx
c000fe69:	56                   	push   esi
c000fe6a:	52                   	push   edx
c000fe6b:	50                   	push   eax
c000fe6c:	53                   	push   ebx
c000fe6d:	ff d7                	call   edi
c000fe6f:	83 c4 14             	add    esp,0x14
c000fe72:	53                   	push   ebx
c000fe73:	e8 2a ae ff ff       	call   c000aca2 <File::close()>
c000fe78:	83 c4 10             	add    esp,0x10
c000fe7b:	56                   	push   esi
c000fe7c:	31 f6                	xor    esi,esi
c000fe7e:	68 00 01 00 00       	push   0x100
c000fe83:	6a 00                	push   0x0
c000fe85:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fe89:	50                   	push   eax
c000fe8a:	e8 41 06 ff ff       	call   c00004d0 <memset>
c000fe8f:	5f                   	pop    edi
c000fe90:	58                   	pop    eax
c000fe91:	6a 01                	push   0x1
c000fe93:	53                   	push   ebx
c000fe94:	e8 ab ad ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c000fe99:	83 c4 10             	add    esp,0x10
c000fe9c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fea4:	83 ec 0c             	sub    esp,0xc
c000fea7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fea9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fead:	51                   	push   ecx
c000feae:	8d 54 24 23          	lea    edx,[esp+0x23]
c000feb2:	52                   	push   edx
c000feb3:	6a 00                	push   0x0
c000feb5:	6a 01                	push   0x1
c000feb7:	53                   	push   ebx
c000feb8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000febb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000febf:	83 c4 20             	add    esp,0x20
c000fec2:	3c 0d                	cmp    al,0xd
c000fec4:	0f 84 09 01 00 00    	je     c000ffd3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000feca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fecf:	0f 84 ef 00 00 00    	je     c000ffc4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fed5:	3c 0a                	cmp    al,0xa
c000fed7:	74 13                	je     c000feec <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fed9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fede:	74 0c                	je     c000feec <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fee0:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fee6:	0f 8e d8 00 00 00    	jle    c000ffc4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000feec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fef0:	83 ec 0c             	sub    esp,0xc
c000fef3:	8d 78 01             	lea    edi,[eax+0x1]
c000fef6:	57                   	push   edi
c000fef7:	e8 79 79 ff ff       	call   c0007875 <malloc>
c000fefc:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000ff00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ff04:	8d 56 04             	lea    edx,[esi+0x4]
c000ff07:	89 14 24             	mov    DWORD PTR [esp],edx
c000ff0a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ff0e:	e8 62 79 ff ff       	call   c0007875 <malloc>
c000ff13:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ff17:	83 c4 0c             	add    esp,0xc
c000ff1a:	57                   	push   edi
c000ff1b:	6a 00                	push   0x0
c000ff1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ff21:	e8 aa 05 ff ff       	call   c00004d0 <memset>
c000ff26:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ff2a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000ff2e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ff32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff34:	83 c4 0c             	add    esp,0xc
c000ff37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ff3b:	52                   	push   edx
c000ff3c:	6a 00                	push   0x0
c000ff3e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff42:	e8 89 05 ff ff       	call   c00004d0 <memset>
c000ff47:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ff4b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000ff4f:	89 34 24             	mov    DWORD PTR [esp],esi
c000ff52:	e8 e9 05 ff ff       	call   c0000540 <strlen>
c000ff57:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000ff5b:	89 c1                	mov    ecx,eax
c000ff5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff5f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ff62:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ff65:	40                   	inc    eax
c000ff66:	83 c4 10             	add    esp,0x10
c000ff69:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ff6c:	85 d2                	test   edx,edx
c000ff6e:	75 0c                	jne    c000ff7c <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000ff70:	83 ec 0c             	sub    esp,0xc
c000ff73:	6a 08                	push   0x8
c000ff75:	e8 fb 78 ff ff       	call   c0007875 <malloc>
c000ff7a:	eb 0c                	jmp    c000ff88 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000ff7c:	c1 e0 03             	shl    eax,0x3
c000ff7f:	51                   	push   ecx
c000ff80:	51                   	push   ecx
c000ff81:	50                   	push   eax
c000ff82:	52                   	push   edx
c000ff83:	e8 d9 78 ff ff       	call   c0007861 <realloc>
c000ff88:	83 c4 10             	add    esp,0x10
c000ff8b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000ff8e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000ff91:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000ff94:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ff98:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000ff9c:	b9 08 00 00 00       	mov    ecx,0x8
c000ffa1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffa3:	31 f6                	xor    esi,esi
c000ffa5:	50                   	push   eax
c000ffa6:	68 00 01 00 00       	push   0x100
c000ffab:	6a 00                	push   0x0
c000ffad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ffb1:	50                   	push   eax
c000ffb2:	e8 19 05 ff ff       	call   c00004d0 <memset>
c000ffb7:	83 c4 10             	add    esp,0x10
c000ffba:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ffc2:	eb 0f                	jmp    c000ffd3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ffc4:	3c 3d                	cmp    al,0x3d
c000ffc6:	74 07                	je     c000ffcf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000ffc8:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000ffcc:	46                   	inc    esi
c000ffcd:	eb 04                	jmp    c000ffd3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ffcf:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000ffd3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ffd8:	0f 85 c6 fe ff ff    	jne    c000fea4 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000ffde:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ffe4:	5b                   	pop    ebx
c000ffe5:	5e                   	pop    esi
c000ffe6:	5f                   	pop    edi
c000ffe7:	5d                   	pop    ebp
c000ffe8:	c3                   	ret    
c000ffe9:	90                   	nop

c000ffea <EnvVarContainer::__loadSystem()>:
c000ffea:	83 ec 10             	sub    esp,0x10
c000ffed:	68 a0 01 02 c0       	push   0xc00201a0
c000fff2:	68 c4 ee 01 c0       	push   0xc001eec4
c000fff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fffb:	e8 04 fe ff ff       	call   c000fe04 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010000:	83 c4 1c             	add    esp,0x1c
c0010003:	c3                   	ret    

c0010004 <EnvVarContainer::__loadUser()>:
c0010004:	c3                   	ret    
c0010005:	90                   	nop

c0010006 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010006:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001000a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010014:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010018:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001001b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001001f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010026:	90                   	nop
c0010027:	c3                   	ret    

c0010028 <EnvVarContainer::~EnvVarContainer()>:
c0010028:	83 ec 0c             	sub    esp,0xc
c001002b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001002f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010032:	85 c0                	test   eax,eax
c0010034:	74 1d                	je     c0010053 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001003a:	8b 00                	mov    eax,DWORD PTR [eax]
c001003c:	85 c0                	test   eax,eax
c001003e:	74 13                	je     c0010053 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010047:	83 ec 0c             	sub    esp,0xc
c001004a:	50                   	push   eax
c001004b:	e8 35 78 ff ff       	call   c0007885 <free>
c0010050:	83 c4 10             	add    esp,0x10
c0010053:	90                   	nop
c0010054:	83 c4 0c             	add    esp,0xc
c0010057:	c3                   	ret    

c0010058 <Krnl::getEnv(Process*, char const*)>:
c0010058:	53                   	push   ebx
c0010059:	83 ec 08             	sub    esp,0x8
c001005c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010060:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010064:	39 05 90 61 02 c0    	cmp    DWORD PTR ds:0xc0026190,eax
c001006a:	74 04                	je     c0010070 <Krnl::getEnv(Process*, char const*)+0x18>
c001006c:	85 c0                	test   eax,eax
c001006e:	75 0b                	jne    c001007b <Krnl::getEnv(Process*, char const*)+0x23>
c0010070:	a1 30 59 02 c0       	mov    eax,ds:0xc0025930
c0010075:	85 c0                	test   eax,eax
c0010077:	75 19                	jne    c0010092 <Krnl::getEnv(Process*, char const*)+0x3a>
c0010079:	eb 27                	jmp    c00100a2 <Krnl::getEnv(Process*, char const*)+0x4a>
c001007b:	52                   	push   edx
c001007c:	52                   	push   edx
c001007d:	53                   	push   ebx
c001007e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010084:	e8 79 fc ff ff       	call   c000fd02 <EnvVarContainer::getEnv(char const*)>
c0010089:	83 c4 10             	add    esp,0x10
c001008c:	85 c0                	test   eax,eax
c001008e:	75 28                	jne    c00100b8 <Krnl::getEnv(Process*, char const*)+0x60>
c0010090:	eb de                	jmp    c0010070 <Krnl::getEnv(Process*, char const*)+0x18>
c0010092:	52                   	push   edx
c0010093:	52                   	push   edx
c0010094:	53                   	push   ebx
c0010095:	50                   	push   eax
c0010096:	e8 67 fc ff ff       	call   c000fd02 <EnvVarContainer::getEnv(char const*)>
c001009b:	83 c4 10             	add    esp,0x10
c001009e:	85 c0                	test   eax,eax
c00100a0:	75 16                	jne    c00100b8 <Krnl::getEnv(Process*, char const*)+0x60>
c00100a2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00100a6:	a1 34 59 02 c0       	mov    eax,ds:0xc0025934
c00100ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00100af:	83 c4 08             	add    esp,0x8
c00100b2:	5b                   	pop    ebx
c00100b3:	e9 4a fc ff ff       	jmp    c000fd02 <EnvVarContainer::getEnv(char const*)>
c00100b8:	83 c4 08             	add    esp,0x8
c00100bb:	5b                   	pop    ebx
c00100bc:	c3                   	ret    

c00100bd <Krnl::setEnvSystem(char const*, char const*)>:
c00100bd:	83 ec 10             	sub    esp,0x10
c00100c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100c8:	ff 35 34 59 02 c0    	push   DWORD PTR ds:0xc0025934
c00100ce:	e8 6d fc ff ff       	call   c000fd40 <EnvVarContainer::setEnv(char const*, char const*)>
c00100d3:	83 c4 1c             	add    esp,0x1c
c00100d6:	c3                   	ret    

c00100d7 <Krnl::setEnvUser(char const*, char const*)>:
c00100d7:	a1 30 59 02 c0       	mov    eax,ds:0xc0025930
c00100dc:	85 c0                	test   eax,eax
c00100de:	74 15                	je     c00100f5 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00100e0:	83 ec 10             	sub    esp,0x10
c00100e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100eb:	50                   	push   eax
c00100ec:	e8 4f fc ff ff       	call   c000fd40 <EnvVarContainer::setEnv(char const*, char const*)>
c00100f1:	83 c4 1c             	add    esp,0x1c
c00100f4:	c3                   	ret    
c00100f5:	c3                   	ret    

c00100f6 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00100f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100fa:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010100:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010104:	e9 37 fc ff ff       	jmp    c000fd40 <EnvVarContainer::setEnv(char const*, char const*)>

c0010109 <Krnl::deleteEnvSystem(char const*)>:
c0010109:	c3                   	ret    

c001010a <Krnl::deleteEnvUser(char const*)>:
c001010a:	c3                   	ret    

c001010b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001010b:	c3                   	ret    

c001010c <Krnl::newProcessEnv(Process*)>:
c001010c:	83 ec 28             	sub    esp,0x28
c001010f:	6a 0c                	push   0xc
c0010111:	e8 5f 77 ff ff       	call   c0007875 <malloc>
c0010116:	5a                   	pop    edx
c0010117:	59                   	pop    ecx
c0010118:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001011c:	50                   	push   eax
c001011d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010121:	e8 e0 fe ff ff       	call   c0010006 <EnvVarContainer::EnvVarContainer(Process*)>
c0010126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001012a:	83 c4 2c             	add    esp,0x2c
c001012d:	c3                   	ret    

c001012e <Krnl::copyProcessEnv(Process*, Process*)>:
c001012e:	57                   	push   edi
c001012f:	56                   	push   esi
c0010130:	53                   	push   ebx
c0010131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010135:	83 ec 0c             	sub    esp,0xc
c0010138:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001013e:	6a 0c                	push   0xc
c0010140:	e8 30 77 ff ff       	call   c0007875 <malloc>
c0010145:	89 c3                	mov    ebx,eax
c0010147:	58                   	pop    eax
c0010148:	5a                   	pop    edx
c0010149:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001014d:	53                   	push   ebx
c001014e:	e8 b3 fe ff ff       	call   c0010006 <EnvVarContainer::EnvVarContainer(Process*)>
c0010153:	8b 07                	mov    eax,DWORD PTR [edi]
c0010155:	89 03                	mov    DWORD PTR [ebx],eax
c0010157:	c1 e0 03             	shl    eax,0x3
c001015a:	89 04 24             	mov    DWORD PTR [esp],eax
c001015d:	e8 13 77 ff ff       	call   c0007875 <malloc>
c0010162:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010165:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010167:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001016a:	c1 e1 03             	shl    ecx,0x3
c001016d:	89 c7                	mov    edi,eax
c001016f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010171:	83 c4 10             	add    esp,0x10
c0010174:	89 d8                	mov    eax,ebx
c0010176:	5b                   	pop    ebx
c0010177:	5e                   	pop    esi
c0010178:	5f                   	pop    edi
c0010179:	c3                   	ret    

c001017a <Krnl::loadSystemEnv()>:
c001017a:	53                   	push   ebx
c001017b:	83 ec 14             	sub    esp,0x14
c001017e:	6a 0c                	push   0xc
c0010180:	e8 f0 76 ff ff       	call   c0007875 <malloc>
c0010185:	89 c3                	mov    ebx,eax
c0010187:	58                   	pop    eax
c0010188:	5a                   	pop    edx
c0010189:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c001018f:	53                   	push   ebx
c0010190:	e8 71 fe ff ff       	call   c0010006 <EnvVarContainer::EnvVarContainer(Process*)>
c0010195:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010198:	89 1d 34 59 02 c0    	mov    DWORD PTR ds:0xc0025934,ebx
c001019e:	e8 47 fe ff ff       	call   c000ffea <EnvVarContainer::__loadSystem()>
c00101a3:	83 c4 18             	add    esp,0x18
c00101a6:	5b                   	pop    ebx
c00101a7:	c3                   	ret    

c00101a8 <Krnl::loadUserEnv()>:
c00101a8:	53                   	push   ebx
c00101a9:	83 ec 14             	sub    esp,0x14
c00101ac:	6a 0c                	push   0xc
c00101ae:	e8 c2 76 ff ff       	call   c0007875 <malloc>
c00101b3:	89 c3                	mov    ebx,eax
c00101b5:	58                   	pop    eax
c00101b6:	5a                   	pop    edx
c00101b7:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c00101bd:	53                   	push   ebx
c00101be:	e8 43 fe ff ff       	call   c0010006 <EnvVarContainer::EnvVarContainer(Process*)>
c00101c3:	89 1d 30 59 02 c0    	mov    DWORD PTR ds:0xc0025930,ebx
c00101c9:	83 c4 18             	add    esp,0x18
c00101cc:	5b                   	pop    ebx
c00101cd:	c3                   	ret    

c00101ce <Krnl::flushEnv()>:
c00101ce:	c3                   	ret    

c00101cf <Krnl::getProcessTotalEnvCount(Process*)>:
c00101cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101d3:	8b 15 30 59 02 c0    	mov    edx,DWORD PTR ds:0xc0025930
c00101d9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00101df:	a1 34 59 02 c0       	mov    eax,ds:0xc0025934
c00101e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00101e6:	03 01                	add    eax,DWORD PTR [ecx]
c00101e8:	85 d2                	test   edx,edx
c00101ea:	74 02                	je     c00101ee <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00101ec:	03 02                	add    eax,DWORD PTR [edx]
c00101ee:	c3                   	ret    

c00101ef <Krnl::getProcessEnvPair(Process*, int)>:
c00101ef:	57                   	push   edi
c00101f0:	56                   	push   esi
c00101f1:	8b 35 30 59 02 c0    	mov    esi,DWORD PTR ds:0xc0025930
c00101f7:	53                   	push   ebx
c00101f8:	85 f6                	test   esi,esi
c00101fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010202:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010208:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001020c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001020e:	75 16                	jne    c0010226 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010210:	39 c2                	cmp    edx,eax
c0010212:	7c 16                	jl     c001022a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010214:	8b 0d 34 59 02 c0    	mov    ecx,DWORD PTR ds:0xc0025934
c001021a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001021c:	01 c6                	add    esi,eax
c001021e:	39 d6                	cmp    esi,edx
c0010220:	7e 3c                	jle    c001025e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010222:	29 c2                	sub    edx,eax
c0010224:	eb 04                	jmp    c001022a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010226:	39 c2                	cmp    edx,eax
c0010228:	7d 05                	jge    c001022f <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001022a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001022d:	eb 20                	jmp    c001024f <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001022f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010231:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010234:	39 d1                	cmp    ecx,edx
c0010236:	7e 04                	jle    c001023c <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010238:	29 c2                	sub    edx,eax
c001023a:	eb 10                	jmp    c001024c <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001023c:	8b 35 34 59 02 c0    	mov    esi,DWORD PTR ds:0xc0025934
c0010242:	03 0e                	add    ecx,DWORD PTR [esi]
c0010244:	39 d1                	cmp    ecx,edx
c0010246:	7e 16                	jle    c001025e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010248:	29 c2                	sub    edx,eax
c001024a:	29 fa                	sub    edx,edi
c001024c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001024f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010252:	8b 02                	mov    eax,DWORD PTR [edx]
c0010254:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010257:	89 03                	mov    DWORD PTR [ebx],eax
c0010259:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001025c:	eb 1d                	jmp    c001027b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001025e:	83 ec 0c             	sub    esp,0xc
c0010261:	68 e6 ee 01 c0       	push   0xc001eee6
c0010266:	e8 ac 00 00 00       	call   c0010317 <KePanic(char const*)>
c001026b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010271:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010278:	83 c4 10             	add    esp,0x10
c001027b:	89 d8                	mov    eax,ebx
c001027d:	5b                   	pop    ebx
c001027e:	5e                   	pop    esi
c001027f:	5f                   	pop    edi
c0010280:	c2 04 00             	ret    0x4

c0010283 <CPU::current()>:
c0010283:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0010288:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001028e:	c3                   	ret    

c001028f <operator new(unsigned long)>:
c001028f:	e9 e1 75 ff ff       	jmp    c0007875 <malloc>

c0010294 <operator delete(void*)>:
c0010294:	e9 fc 75 ff ff       	jmp    c0007895 <rfree>

c0010299 <disableIRQs()>:
c0010299:	fa                   	cli    
c001029a:	c3                   	ret    

c001029b <enableIRQs()>:
c001029b:	fb                   	sti    
c001029c:	c3                   	ret    

c001029d <lockScheduler()>:
c001029d:	fa                   	cli    
c001029e:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00102a4:	c3                   	ret    

c00102a5 <unlockScheduler()>:
c00102a5:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00102aa:	48                   	dec    eax
c00102ab:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00102b0:	75 01                	jne    c00102b3 <unlockScheduler()+0xe>
c00102b2:	fb                   	sti    
c00102b3:	c3                   	ret    

c00102b4 <lockStuff()>:
c00102b4:	fa                   	cli    
c00102b5:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00102bb:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c00102c1:	c3                   	ret    

c00102c2 <unlockStuff()>:
c00102c2:	83 ec 0c             	sub    esp,0xc
c00102c5:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c00102ca:	48                   	dec    eax
c00102cb:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c00102d0:	75 18                	jne    c00102ea <unlockStuff()+0x28>
c00102d2:	83 3d 60 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026160,0x0
c00102d9:	74 0f                	je     c00102ea <unlockStuff()+0x28>
c00102db:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c00102e5:	e8 4a 35 00 00       	call   c0013834 <schedule()>
c00102ea:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00102ef:	48                   	dec    eax
c00102f0:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00102f5:	75 01                	jne    c00102f8 <unlockStuff()+0x36>
c00102f7:	fb                   	sti    
c00102f8:	83 c4 0c             	add    esp,0xc
c00102fb:	c3                   	ret    

c00102fc <Virt::getAKernelVAS()>:
c00102fc:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c0010301:	c3                   	ret    

c0010302 <__not_memcpy>:
c0010302:	57                   	push   edi
c0010303:	56                   	push   esi
c0010304:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010308:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001030c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010310:	89 c7                	mov    edi,eax
c0010312:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010314:	5e                   	pop    esi
c0010315:	5f                   	pop    edi
c0010316:	c3                   	ret    

c0010317 <KePanic(char const*)>:
c0010317:	c6 05 38 59 02 c0 01 	mov    BYTE PTR ds:0xc0025938,0x1
c001031e:	e9 09 53 00 00       	jmp    c001562c <HalPanic(char const*)>

c0010323 <Krnl::powerThread(void*)>:
c0010323:	83 ec 0c             	sub    esp,0xc
c0010326:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001032b:	48                   	dec    eax
c001032c:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0010331:	75 01                	jne    c0010334 <Krnl::powerThread(void*)+0x11>
c0010333:	fb                   	sti    
c0010334:	83 ec 0c             	sub    esp,0xc
c0010337:	c6 05 40 59 02 c0 00 	mov    BYTE PTR ds:0xc0025940,0x0
c001033e:	6a 0a                	push   0xa
c0010340:	e8 ff 37 00 00       	call   c0013b44 <sleep(unsigned int)>
c0010345:	83 05 84 59 02 c0 0a 	add    DWORD PTR ds:0xc0025984,0xa
c001034c:	83 c4 10             	add    esp,0x10
c001034f:	eb e3                	jmp    c0010334 <Krnl::powerThread(void*)+0x11>

c0010351 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010351:	57                   	push   edi
c0010352:	b9 09 00 00 00       	mov    ecx,0x9
c0010357:	56                   	push   esi
c0010358:	bf 60 59 02 c0       	mov    edi,0xc0025960
c001035d:	fc                   	cld    
c001035e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010362:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010364:	5e                   	pop    esi
c0010365:	5f                   	pop    edi
c0010366:	c3                   	ret    

c0010367 <Krnl::userIOReceived()>:
c0010367:	c7 05 84 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025984,0x0
c0010371:	c3                   	ret    

c0010372 <Krnl::handlePowerButton()>:
c0010372:	83 ec 0c             	sub    esp,0xc
c0010375:	a1 60 59 02 c0       	mov    eax,ds:0xc0025960
c001037a:	83 f8 02             	cmp    eax,0x2
c001037d:	75 10                	jne    c001038f <Krnl::handlePowerButton()+0x1d>
c001037f:	83 ec 0c             	sub    esp,0xc
c0010382:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0010388:	e8 83 6b ff ff       	call   c0006f10 <Computer::shutdown()>
c001038d:	eb 11                	jmp    c00103a0 <Krnl::handlePowerButton()+0x2e>
c001038f:	48                   	dec    eax
c0010390:	75 11                	jne    c00103a3 <Krnl::handlePowerButton()+0x31>
c0010392:	83 ec 0c             	sub    esp,0xc
c0010395:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c001039b:	e8 a0 6b ff ff       	call   c0006f40 <Computer::sleep()>
c00103a0:	83 c4 10             	add    esp,0x10
c00103a3:	83 c4 0c             	add    esp,0xc
c00103a6:	c3                   	ret    

c00103a7 <Krnl::handleSleepButton()>:
c00103a7:	83 ec 0c             	sub    esp,0xc
c00103aa:	a1 64 59 02 c0       	mov    eax,ds:0xc0025964
c00103af:	83 f8 02             	cmp    eax,0x2
c00103b2:	75 10                	jne    c00103c4 <Krnl::handleSleepButton()+0x1d>
c00103b4:	83 ec 0c             	sub    esp,0xc
c00103b7:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00103bd:	e8 4e 6b ff ff       	call   c0006f10 <Computer::shutdown()>
c00103c2:	eb 11                	jmp    c00103d5 <Krnl::handleSleepButton()+0x2e>
c00103c4:	48                   	dec    eax
c00103c5:	75 11                	jne    c00103d8 <Krnl::handleSleepButton()+0x31>
c00103c7:	83 ec 0c             	sub    esp,0xc
c00103ca:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00103d0:	e8 6b 6b ff ff       	call   c0006f40 <Computer::sleep()>
c00103d5:	83 c4 10             	add    esp,0x10
c00103d8:	83 c4 0c             	add    esp,0xc
c00103db:	c3                   	ret    

c00103dc <Krnl::setupPowerManager()>:
c00103dc:	83 ec 0c             	sub    esp,0xc
c00103df:	c7 05 84 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025984,0x0
c00103e9:	68 f0 00 00 00       	push   0xf0
c00103ee:	c6 05 40 59 02 c0 00 	mov    BYTE PTR ds:0xc0025940,0x0
c00103f5:	6a 00                	push   0x0
c00103f7:	68 23 03 01 c0       	push   0xc0010323
c00103fc:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c0010402:	e8 0d 32 00 00       	call   c0013614 <Process::createThread(void (*)(void*), void*, int)>
c0010407:	c7 05 60 59 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0025960,0x2
c0010411:	c7 05 64 59 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025964,0x1
c001041b:	c7 05 68 59 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0025968,0x3
c0010425:	c7 05 6c 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002596c,0x0
c001042f:	c7 05 78 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025978,0x0
c0010439:	c7 05 70 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025970,0x0
c0010443:	c7 05 7c 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002597c,0x0
c001044d:	c7 05 74 59 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0025974,0x3c
c0010457:	c7 05 80 59 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0025980,0x3c
c0010461:	83 c4 1c             	add    esp,0x1c
c0010464:	c3                   	ret    
c0010465:	66 90                	xchg   ax,ax
c0010467:	90                   	nop

c0010468 <KeResolveCompatibilitySymbol(char*)>:
c0010468:	83 ec 0c             	sub    esp,0xc
c001046b:	83 ec 08             	sub    esp,0x8
c001046e:	68 00 ef 01 c0       	push   0xc001ef00
c0010473:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010477:	e8 64 02 ff ff       	call   c00006e0 <strcmp>
c001047c:	83 c4 10             	add    esp,0x10
c001047f:	85 c0                	test   eax,eax
c0010481:	0f 94 c0             	sete   al
c0010484:	84 c0                	test   al,al
c0010486:	74 0c                	je     c0010494 <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010488:	b8 b8 2e 02 c0       	mov    eax,0xc0022eb8
c001048d:	e9 62 01 00 00       	jmp    c00105f4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010492:	66 90                	xchg   ax,ax
c0010494:	83 ec 08             	sub    esp,0x8
c0010497:	68 09 ef 01 c0       	push   0xc001ef09
c001049c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104a0:	e8 3b 02 ff ff       	call   c00006e0 <strcmp>
c00104a5:	83 c4 10             	add    esp,0x10
c00104a8:	85 c0                	test   eax,eax
c00104aa:	0f 94 c0             	sete   al
c00104ad:	84 c0                	test   al,al
c00104af:	74 0b                	je     c00104bc <KeResolveCompatibilitySymbol(char*)+0x54>
c00104b1:	b8 70 c9 01 c0       	mov    eax,0xc001c970
c00104b6:	e9 39 01 00 00       	jmp    c00105f4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104bb:	90                   	nop
c00104bc:	83 ec 08             	sub    esp,0x8
c00104bf:	68 13 ef 01 c0       	push   0xc001ef13
c00104c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104c8:	e8 13 02 ff ff       	call   c00006e0 <strcmp>
c00104cd:	83 c4 10             	add    esp,0x10
c00104d0:	85 c0                	test   eax,eax
c00104d2:	0f 94 c0             	sete   al
c00104d5:	84 c0                	test   al,al
c00104d7:	74 0b                	je     c00104e4 <KeResolveCompatibilitySymbol(char*)+0x7c>
c00104d9:	b8 a4 c6 01 c0       	mov    eax,0xc001c6a4
c00104de:	e9 11 01 00 00       	jmp    c00105f4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104e3:	90                   	nop
c00104e4:	83 ec 08             	sub    esp,0x8
c00104e7:	68 1c ef 01 c0       	push   0xc001ef1c
c00104ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104f0:	e8 eb 01 ff ff       	call   c00006e0 <strcmp>
c00104f5:	83 c4 10             	add    esp,0x10
c00104f8:	85 c0                	test   eax,eax
c00104fa:	0f 94 c0             	sete   al
c00104fd:	84 c0                	test   al,al
c00104ff:	74 0b                	je     c001050c <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010501:	b8 17 03 01 c0       	mov    eax,0xc0010317
c0010506:	e9 e9 00 00 00       	jmp    c00105f4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001050b:	90                   	nop
c001050c:	83 ec 08             	sub    esp,0x8
c001050f:	68 2f ef 01 c0       	push   0xc001ef2f
c0010514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010518:	e8 c3 01 ff ff       	call   c00006e0 <strcmp>
c001051d:	83 c4 10             	add    esp,0x10
c0010520:	85 c0                	test   eax,eax
c0010522:	0f 94 c0             	sete   al
c0010525:	84 c0                	test   al,al
c0010527:	74 0b                	je     c0010534 <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010529:	b8 9f fc 00 c0       	mov    eax,0xc000fc9f
c001052e:	e9 c1 00 00 00       	jmp    c00105f4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010533:	90                   	nop
c0010534:	83 ec 08             	sub    esp,0x8
c0010537:	68 4c ef 01 c0       	push   0xc001ef4c
c001053c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010540:	e8 9b 01 ff ff       	call   c00006e0 <strcmp>
c0010545:	83 c4 10             	add    esp,0x10
c0010548:	85 c0                	test   eax,eax
c001054a:	0f 94 c0             	sete   al
c001054d:	84 c0                	test   al,al
c001054f:	74 0b                	je     c001055c <KeResolveCompatibilitySymbol(char*)+0xf4>
c0010551:	b8 70 ca 01 c0       	mov    eax,0xc001ca70
c0010556:	e9 99 00 00 00       	jmp    c00105f4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001055b:	90                   	nop
c001055c:	83 ec 08             	sub    esp,0x8
c001055f:	68 56 ef 01 c0       	push   0xc001ef56
c0010564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010568:	e8 73 01 ff ff       	call   c00006e0 <strcmp>
c001056d:	83 c4 10             	add    esp,0x10
c0010570:	85 c0                	test   eax,eax
c0010572:	0f 94 c0             	sete   al
c0010575:	84 c0                	test   al,al
c0010577:	74 07                	je     c0010580 <KeResolveCompatibilitySymbol(char*)+0x118>
c0010579:	b8 f0 c7 01 c0       	mov    eax,0xc001c7f0
c001057e:	eb 74                	jmp    c00105f4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010580:	83 ec 08             	sub    esp,0x8
c0010583:	68 5f ef 01 c0       	push   0xc001ef5f
c0010588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001058c:	e8 4f 01 ff ff       	call   c00006e0 <strcmp>
c0010591:	83 c4 10             	add    esp,0x10
c0010594:	85 c0                	test   eax,eax
c0010596:	0f 94 c0             	sete   al
c0010599:	84 c0                	test   al,al
c001059b:	74 07                	je     c00105a4 <KeResolveCompatibilitySymbol(char*)+0x13c>
c001059d:	b8 bc 2e 02 c0       	mov    eax,0xc0022ebc
c00105a2:	eb 50                	jmp    c00105f4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105a4:	83 ec 08             	sub    esp,0x8
c00105a7:	68 77 ef 01 c0       	push   0xc001ef77
c00105ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105b0:	e8 2b 01 ff ff       	call   c00006e0 <strcmp>
c00105b5:	83 c4 10             	add    esp,0x10
c00105b8:	85 c0                	test   eax,eax
c00105ba:	0f 94 c0             	sete   al
c00105bd:	84 c0                	test   al,al
c00105bf:	74 07                	je     c00105c8 <KeResolveCompatibilitySymbol(char*)+0x160>
c00105c1:	b8 bc 2e 02 c0       	mov    eax,0xc0022ebc
c00105c6:	eb 2c                	jmp    c00105f4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105c8:	83 ec 08             	sub    esp,0x8
c00105cb:	68 84 ef 01 c0       	push   0xc001ef84
c00105d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105d4:	e8 07 01 ff ff       	call   c00006e0 <strcmp>
c00105d9:	83 c4 10             	add    esp,0x10
c00105dc:	85 c0                	test   eax,eax
c00105de:	0f 94 c0             	sete   al
c00105e1:	84 c0                	test   al,al
c00105e3:	74 07                	je     c00105ec <KeResolveCompatibilitySymbol(char*)+0x184>
c00105e5:	b8 bd 2e 02 c0       	mov    eax,0xc0022ebd
c00105ea:	eb 08                	jmp    c00105f4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105ec:	b8 00 00 00 00       	mov    eax,0x0
c00105f1:	8d 76 00             	lea    esi,[esi+0x0]
c00105f4:	83 c4 0c             	add    esp,0xc
c00105f7:	c3                   	ret    

c00105f8 <KiSigKill(int)>:
c00105f8:	57                   	push   edi
c00105f9:	b9 0a 00 00 00       	mov    ecx,0xa
c00105fe:	56                   	push   esi
c00105ff:	be cd ef 01 c0       	mov    esi,0xc001efcd
c0010604:	83 ec 14             	sub    esp,0x14
c0010607:	8d 7c 24 06          	lea    edi,[esp+0x6]
c001060b:	fc                   	cld    
c001060c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001060e:	8d 44 24 06          	lea    eax,[esp+0x6]
c0010612:	50                   	push   eax
c0010613:	6a 00                	push   0x0
c0010615:	6a 00                	push   0x0
c0010617:	6a 27                	push   0x27
c0010619:	e8 34 0a 01 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001061e:	83 c4 24             	add    esp,0x24
c0010621:	5e                   	pop    esi
c0010622:	5f                   	pop    edi
c0010623:	c3                   	ret    

c0010624 <KiDefaultSignalHandlerIgnore(int)>:
c0010624:	c3                   	ret    

c0010625 <KiDefaultSignalHandlerPause(int)>:
c0010625:	57                   	push   edi
c0010626:	b9 07 00 00 00       	mov    ecx,0x7
c001062b:	56                   	push   esi
c001062c:	be d7 ef 01 c0       	mov    esi,0xc001efd7
c0010631:	83 ec 24             	sub    esp,0x24
c0010634:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010638:	fc                   	cld    
c0010639:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001063b:	8d 44 24 04          	lea    eax,[esp+0x4]
c001063f:	50                   	push   eax
c0010640:	6a 00                	push   0x0
c0010642:	6a 00                	push   0x0
c0010644:	6a 27                	push   0x27
c0010646:	e8 07 0a 01 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001064b:	83 c4 34             	add    esp,0x34
c001064e:	5e                   	pop    esi
c001064f:	5f                   	pop    edi
c0010650:	c3                   	ret    

c0010651 <KiDefaultSignalHandlerResume(int)>:
c0010651:	57                   	push   edi
c0010652:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010657:	56                   	push   esi
c0010658:	be f3 ef 01 c0       	mov    esi,0xc001eff3
c001065d:	83 ec 24             	sub    esp,0x24
c0010660:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010664:	fc                   	cld    
c0010665:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010667:	8d 44 24 03          	lea    eax,[esp+0x3]
c001066b:	50                   	push   eax
c001066c:	6a 00                	push   0x0
c001066e:	6a 00                	push   0x0
c0010670:	6a 27                	push   0x27
c0010672:	e8 db 09 01 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010677:	83 c4 34             	add    esp,0x34
c001067a:	5e                   	pop    esi
c001067b:	5f                   	pop    edi
c001067c:	c3                   	ret    

c001067d <KeDeinitSignals(SigHandlerBlock*)>:
c001067d:	e9 03 72 ff ff       	jmp    c0007885 <free>

c0010682 <KeInitSignals()>:
c0010682:	53                   	push   ebx
c0010683:	83 ec 14             	sub    esp,0x14
c0010686:	68 c8 00 00 00       	push   0xc8
c001068b:	e8 e5 71 ff ff       	call   c0007875 <malloc>
c0010690:	83 c4 0c             	add    esp,0xc
c0010693:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c001069d:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00106a7:	89 c3                	mov    ebx,eax
c00106a9:	6a 20                	push   0x20
c00106ab:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00106b1:	6a 00                	push   0x0
c00106b3:	50                   	push   eax
c00106b4:	e8 17 fe fe ff       	call   c00004d0 <memset>
c00106b9:	83 c4 0c             	add    esp,0xc
c00106bc:	6a 44                	push   0x44
c00106be:	6a 00                	push   0x0
c00106c0:	53                   	push   ebx
c00106c1:	e8 0a fe fe ff       	call   c00004d0 <memset>
c00106c6:	89 d8                	mov    eax,ebx
c00106c8:	83 c4 18             	add    esp,0x18
c00106cb:	5b                   	pop    ebx
c00106cc:	c3                   	ret    

c00106cd <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00106cd:	53                   	push   ebx
c00106ce:	b8 01 00 00 00       	mov    eax,0x1
c00106d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00106d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106db:	83 f9 10             	cmp    ecx,0x10
c00106de:	7f 21                	jg     c0010701 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00106e0:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00106e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106e7:	89 03                	mov    DWORD PTR [ebx],eax
c00106e9:	b8 01 00 00 00       	mov    eax,0x1
c00106ee:	d3 e0                	shl    eax,cl
c00106f0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00106f4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00106f7:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00106ff:	31 c0                	xor    eax,eax
c0010701:	5b                   	pop    ebx
c0010702:	c3                   	ret    

c0010703 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010703:	55                   	push   ebp
c0010704:	57                   	push   edi
c0010705:	bf 08 00 00 00       	mov    edi,0x8
c001070a:	56                   	push   esi
c001070b:	53                   	push   ebx
c001070c:	83 ec 18             	sub    esp,0x18
c001070f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010713:	68 10 f0 01 c0       	push   0xc001f010
c0010718:	e8 f1 9e ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001071d:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010724:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c001072a:	83 c4 10             	add    esp,0x10
c001072d:	31 c9                	xor    ecx,ecx
c001072f:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010733:	99                   	cdq    
c0010734:	f7 ff                	idiv   edi
c0010736:	8d 42 24             	lea    eax,[edx+0x24]
c0010739:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c001073d:	85 f6                	test   esi,esi
c001073f:	75 1a                	jne    c001075b <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010741:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010745:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010749:	50                   	push   eax
c001074a:	50                   	push   eax
c001074b:	52                   	push   edx
c001074c:	68 21 f0 01 c0       	push   0xc001f021
c0010751:	e8 b8 9e ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0010756:	83 c4 10             	add    esp,0x10
c0010759:	eb 1b                	jmp    c0010776 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c001075b:	41                   	inc    ecx
c001075c:	83 f9 08             	cmp    ecx,0x8
c001075f:	75 ce                	jne    c001072f <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010761:	83 ec 0c             	sub    esp,0xc
c0010764:	be 01 00 00 00       	mov    esi,0x1
c0010769:	68 42 f0 01 c0       	push   0xc001f042
c001076e:	e8 9b 9e ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0010773:	83 c4 10             	add    esp,0x10
c0010776:	83 c4 0c             	add    esp,0xc
c0010779:	89 f0                	mov    eax,esi
c001077b:	5b                   	pop    ebx
c001077c:	5e                   	pop    esi
c001077d:	5f                   	pop    edi
c001077e:	5d                   	pop    ebp
c001077f:	c3                   	ret    

c0010780 <KeCheckSignal(SigHandlerBlock*)>:
c0010780:	55                   	push   ebp
c0010781:	57                   	push   edi
c0010782:	56                   	push   esi
c0010783:	53                   	push   ebx
c0010784:	51                   	push   ecx
c0010785:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010789:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010790:	75 07                	jne    c0010799 <KeCheckSignal(SigHandlerBlock*)+0x19>
c0010792:	31 c0                	xor    eax,eax
c0010794:	e9 cc 00 00 00       	jmp    c0010865 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010799:	31 c9                	xor    ecx,ecx
c001079b:	bf 08 00 00 00       	mov    edi,0x8
c00107a0:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00107a6:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00107a9:	99                   	cdq    
c00107aa:	f7 ff                	idiv   edi
c00107ac:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c00107b3:	85 d2                	test   edx,edx
c00107b5:	0f 84 94 00 00 00    	je     c001084f <KeCheckSignal(SigHandlerBlock*)+0xcf>
c00107bb:	88 d1                	mov    cl,dl
c00107bd:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00107c3:	bf 01 00 00 00       	mov    edi,0x1
c00107c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00107cb:	d3 e7                	shl    edi,cl
c00107cd:	bd 01 00 00 00       	mov    ebp,0x1
c00107d2:	31 c9                	xor    ecx,ecx
c00107d4:	89 e8                	mov    eax,ebp
c00107d6:	d3 e0                	shl    eax,cl
c00107d8:	85 04 24             	test   DWORD PTR [esp],eax
c00107db:	74 06                	je     c00107e3 <KeCheckSignal(SigHandlerBlock*)+0x63>
c00107dd:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00107e1:	75 af                	jne    c0010792 <KeCheckSignal(SigHandlerBlock*)+0x12>
c00107e3:	41                   	inc    ecx
c00107e4:	83 f9 11             	cmp    ecx,0x11
c00107e7:	75 eb                	jne    c00107d4 <KeCheckSignal(SigHandlerBlock*)+0x54>
c00107e9:	8d 4e 01             	lea    ecx,[esi+0x1]
c00107ec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00107ef:	89 8b bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],ecx
c00107f5:	09 f8                	or     eax,edi
c00107f7:	c7 84 b3 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+esi*4+0x9c],0x0
c0010802:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010808:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001080f:	31 c0                	xor    eax,eax
c0010811:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010819:	74 09                	je     c0010824 <KeCheckSignal(SigHandlerBlock*)+0xa4>
c001081b:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010822:	eb 06                	jmp    c001082a <KeCheckSignal(SigHandlerBlock*)+0xaa>
c0010824:	40                   	inc    eax
c0010825:	83 f8 08             	cmp    eax,0x8
c0010828:	75 e7                	jne    c0010811 <KeCheckSignal(SigHandlerBlock*)+0x91>
c001082a:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c001082d:	83 fa 09             	cmp    edx,0x9
c0010830:	75 07                	jne    c0010839 <KeCheckSignal(SigHandlerBlock*)+0xb9>
c0010832:	b8 f8 05 01 c0       	mov    eax,0xc00105f8
c0010837:	eb 2c                	jmp    c0010865 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010839:	83 f8 01             	cmp    eax,0x1
c001083c:	0f 84 50 ff ff ff    	je     c0010792 <KeCheckSignal(SigHandlerBlock*)+0x12>
c0010842:	85 c0                	test   eax,eax
c0010844:	75 1f                	jne    c0010865 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010846:	8b 04 95 00 02 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfe00]
c001084d:	eb 16                	jmp    c0010865 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c001084f:	46                   	inc    esi
c0010850:	41                   	inc    ecx
c0010851:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010857:	83 f9 08             	cmp    ecx,0x8
c001085a:	0f 85 40 ff ff ff    	jne    c00107a0 <KeCheckSignal(SigHandlerBlock*)+0x20>
c0010860:	e9 2d ff ff ff       	jmp    c0010792 <KeCheckSignal(SigHandlerBlock*)+0x12>
c0010865:	5a                   	pop    edx
c0010866:	5b                   	pop    ebx
c0010867:	5e                   	pop    esi
c0010868:	5f                   	pop    edi
c0010869:	5d                   	pop    ebp
c001086a:	c3                   	ret    

c001086b <KiCheckSignalZ>:
c001086b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010870:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010873:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010879:	e8 02 ff ff ff       	call   c0010780 <KeCheckSignal(SigHandlerBlock*)>
c001087e:	5a                   	pop    edx
c001087f:	c3                   	ret    

c0010880 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010880:	56                   	push   esi
c0010881:	53                   	push   ebx
c0010882:	bb 01 00 00 00       	mov    ebx,0x1
c0010887:	52                   	push   edx
c0010888:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001088c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010890:	d3 e3                	shl    ebx,cl
c0010892:	83 f9 10             	cmp    ecx,0x10
c0010895:	7f 08                	jg     c001089f <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010897:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c001089d:	75 10                	jne    c00108af <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001089f:	83 ec 0c             	sub    esp,0xc
c00108a2:	68 53 f0 01 c0       	push   0xc001f053
c00108a7:	e8 6b fa ff ff       	call   c0010317 <KePanic(char const*)>
c00108ac:	83 c4 10             	add    esp,0x10
c00108af:	f7 d3                	not    ebx
c00108b1:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00108b7:	58                   	pop    eax
c00108b8:	5b                   	pop    ebx
c00108b9:	5e                   	pop    esi
c00108ba:	c3                   	ret    

c00108bb <SysSeekDir(regs*)>:
c00108bb:	31 c0                	xor    eax,eax
c00108bd:	31 d2                	xor    edx,edx
c00108bf:	c3                   	ret    

c00108c0 <SysTellDir(regs*)>:
c00108c0:	31 c0                	xor    eax,eax
c00108c2:	31 d2                	xor    edx,edx
c00108c4:	c3                   	ret    

c00108c5 <SysVerify(regs*)>:
c00108c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108c9:	31 d2                	xor    edx,edx
c00108cb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00108ce:	c3                   	ret    

c00108cf <SysGetArgc(regs*)>:
c00108cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108d7:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00108dd:	99                   	cdq    
c00108de:	c3                   	ret    

c00108df <SysTTYName(regs*)>:
c00108df:	b8 01 00 00 00       	mov    eax,0x1
c00108e4:	31 d2                	xor    edx,edx
c00108e6:	c3                   	ret    

c00108e7 <SysFormatDisk(regs*)>:
c00108e7:	56                   	push   esi
c00108e8:	53                   	push   ebx
c00108e9:	50                   	push   eax
c00108ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00108ee:	8b 1d b4 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb4
c00108f4:	eb 28                	jmp    c001091e <SysFormatDisk(regs*)+0x37>
c00108f6:	83 ec 0c             	sub    esp,0xc
c00108f9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00108fc:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00108ff:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010901:	51                   	push   ecx
c0010902:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010905:	51                   	push   ecx
c0010906:	50                   	push   eax
c0010907:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c001090e:	50                   	push   eax
c001090f:	53                   	push   ebx
c0010910:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010913:	83 c4 20             	add    esp,0x20
c0010916:	83 f8 08             	cmp    eax,0x8
c0010919:	75 12                	jne    c001092d <SysFormatDisk(regs*)+0x46>
c001091b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001091e:	85 db                	test   ebx,ebx
c0010920:	75 d4                	jne    c00108f6 <SysFormatDisk(regs*)+0xf>
c0010922:	59                   	pop    ecx
c0010923:	b8 03 00 00 00       	mov    eax,0x3
c0010928:	31 d2                	xor    edx,edx
c001092a:	5b                   	pop    ebx
c001092b:	5e                   	pop    esi
c001092c:	c3                   	ret    
c001092d:	85 c0                	test   eax,eax
c001092f:	74 1b                	je     c001094c <SysFormatDisk(regs*)+0x65>
c0010931:	83 f8 09             	cmp    eax,0x9
c0010934:	74 0b                	je     c0010941 <SysFormatDisk(regs*)+0x5a>
c0010936:	59                   	pop    ecx
c0010937:	b8 02 00 00 00       	mov    eax,0x2
c001093c:	31 d2                	xor    edx,edx
c001093e:	5b                   	pop    ebx
c001093f:	5e                   	pop    esi
c0010940:	c3                   	ret    
c0010941:	59                   	pop    ecx
c0010942:	b8 01 00 00 00       	mov    eax,0x1
c0010947:	31 d2                	xor    edx,edx
c0010949:	5b                   	pop    ebx
c001094a:	5e                   	pop    esi
c001094b:	c3                   	ret    
c001094c:	59                   	pop    ecx
c001094d:	31 c0                	xor    eax,eax
c001094f:	31 d2                	xor    edx,edx
c0010951:	5b                   	pop    ebx
c0010952:	5e                   	pop    esi
c0010953:	c3                   	ret    

c0010954 <SysSetDiskVolumeLabel(regs*)>:
c0010954:	56                   	push   esi
c0010955:	53                   	push   ebx
c0010956:	53                   	push   ebx
c0010957:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001095b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001095e:	83 f8 19             	cmp    eax,0x19
c0010961:	77 2d                	ja     c0010990 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010963:	8b 0c 85 20 54 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdabe0]
c001096a:	85 c9                	test   ecx,ecx
c001096c:	74 22                	je     c0010990 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001096e:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010971:	85 db                	test   ebx,ebx
c0010973:	74 1b                	je     c0010990 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010975:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c001097b:	85 d2                	test   edx,edx
c001097d:	74 11                	je     c0010990 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001097f:	8b 32                	mov    esi,DWORD PTR [edx]
c0010981:	53                   	push   ebx
c0010982:	50                   	push   eax
c0010983:	51                   	push   ecx
c0010984:	52                   	push   edx
c0010985:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010988:	83 c4 10             	add    esp,0x10
c001098b:	99                   	cdq    
c001098c:	59                   	pop    ecx
c001098d:	5b                   	pop    ebx
c001098e:	5e                   	pop    esi
c001098f:	c3                   	ret    
c0010990:	59                   	pop    ecx
c0010991:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010996:	ba ff ff ff ff       	mov    edx,0xffffffff
c001099b:	5b                   	pop    ebx
c001099c:	5e                   	pop    esi
c001099d:	c3                   	ret    

c001099e <SysGetDiskVolumeLabel(regs*)>:
c001099e:	57                   	push   edi
c001099f:	56                   	push   esi
c00109a0:	53                   	push   ebx
c00109a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00109a8:	83 fa 19             	cmp    edx,0x19
c00109ab:	77 38                	ja     c00109e5 <SysGetDiskVolumeLabel(regs*)+0x47>
c00109ad:	8b 0c 95 20 54 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdabe0]
c00109b4:	85 c9                	test   ecx,ecx
c00109b6:	74 2d                	je     c00109e5 <SysGetDiskVolumeLabel(regs*)+0x47>
c00109b8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00109bb:	85 db                	test   ebx,ebx
c00109bd:	74 26                	je     c00109e5 <SysGetDiskVolumeLabel(regs*)+0x47>
c00109bf:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00109c2:	85 f6                	test   esi,esi
c00109c4:	74 1f                	je     c00109e5 <SysGetDiskVolumeLabel(regs*)+0x47>
c00109c6:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00109cc:	85 c0                	test   eax,eax
c00109ce:	74 15                	je     c00109e5 <SysGetDiskVolumeLabel(regs*)+0x47>
c00109d0:	83 ec 0c             	sub    esp,0xc
c00109d3:	8b 38                	mov    edi,DWORD PTR [eax]
c00109d5:	56                   	push   esi
c00109d6:	53                   	push   ebx
c00109d7:	52                   	push   edx
c00109d8:	51                   	push   ecx
c00109d9:	50                   	push   eax
c00109da:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00109dd:	83 c4 20             	add    esp,0x20
c00109e0:	99                   	cdq    
c00109e1:	5b                   	pop    ebx
c00109e2:	5e                   	pop    esi
c00109e3:	5f                   	pop    edi
c00109e4:	c3                   	ret    
c00109e5:	5b                   	pop    ebx
c00109e6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00109eb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109f0:	5e                   	pop    esi
c00109f1:	5f                   	pop    edi
c00109f2:	c3                   	ret    

c00109f3 <SysShutdown(regs*)>:
c00109f3:	83 ec 0c             	sub    esp,0xc
c00109f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109fa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109fd:	85 c0                	test   eax,eax
c00109ff:	74 18                	je     c0010a19 <SysShutdown(regs*)+0x26>
c0010a01:	83 f8 01             	cmp    eax,0x1
c0010a04:	74 38                	je     c0010a3e <SysShutdown(regs*)+0x4b>
c0010a06:	83 f8 02             	cmp    eax,0x2
c0010a09:	74 24                	je     c0010a2f <SysShutdown(regs*)+0x3c>
c0010a0b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a10:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a15:	83 c4 0c             	add    esp,0xc
c0010a18:	c3                   	ret    
c0010a19:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0010a1e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a20:	6a 00                	push   0x0
c0010a22:	6a 00                	push   0x0
c0010a24:	6a 00                	push   0x0
c0010a26:	50                   	push   eax
c0010a27:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010a2a:	83 c4 10             	add    esp,0x10
c0010a2d:	eb dc                	jmp    c0010a0b <SysShutdown(regs*)+0x18>
c0010a2f:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0010a34:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a36:	6a 00                	push   0x0
c0010a38:	6a 00                	push   0x0
c0010a3a:	6a 01                	push   0x1
c0010a3c:	eb e8                	jmp    c0010a26 <SysShutdown(regs*)+0x33>
c0010a3e:	a1 a0 54 02 c0       	mov    eax,ds:0xc00254a0
c0010a43:	85 c0                	test   eax,eax
c0010a45:	74 02                	je     c0010a49 <SysShutdown(regs*)+0x56>
c0010a47:	ff d0                	call   eax
c0010a49:	31 c0                	xor    eax,eax
c0010a4b:	31 d2                	xor    edx,edx
c0010a4d:	83 c4 0c             	add    esp,0xc
c0010a50:	c3                   	ret    

c0010a51 <SysRealpath(regs*)>:
c0010a51:	83 ec 0c             	sub    esp,0xc
c0010a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a58:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010a5b:	85 d2                	test   edx,edx
c0010a5d:	74 07                	je     c0010a66 <SysRealpath(regs*)+0x15>
c0010a5f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010a62:	85 c0                	test   eax,eax
c0010a64:	75 0b                	jne    c0010a71 <SysRealpath(regs*)+0x20>
c0010a66:	b8 01 00 00 00       	mov    eax,0x1
c0010a6b:	31 d2                	xor    edx,edx
c0010a6d:	83 c4 0c             	add    esp,0xc
c0010a70:	c3                   	ret    
c0010a71:	51                   	push   ecx
c0010a72:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010a78:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010a7b:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010a81:	51                   	push   ecx
c0010a82:	52                   	push   edx
c0010a83:	50                   	push   eax
c0010a84:	e8 51 9f ff ff       	call   c000a9da <Fs::standardiseFiles(char*, char const*, char const*)>
c0010a89:	83 c4 10             	add    esp,0x10
c0010a8c:	31 c0                	xor    eax,eax
c0010a8e:	31 d2                	xor    edx,edx
c0010a90:	83 c4 0c             	add    esp,0xc
c0010a93:	c3                   	ret    

c0010a94 <SysReadDir(regs*)>:
c0010a94:	53                   	push   ebx
c0010a95:	83 ec 18             	sub    esp,0x18
c0010a98:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010a9c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010a9f:	83 f8 02             	cmp    eax,0x2
c0010aa2:	76 61                	jbe    c0010b05 <SysReadDir(regs*)+0x71>
c0010aa4:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010aab:	77 49                	ja     c0010af6 <SysReadDir(regs*)+0x62>
c0010aad:	83 ec 0c             	sub    esp,0xc
c0010ab0:	50                   	push   eax
c0010ab1:	e8 45 87 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0010ab6:	83 c4 10             	add    esp,0x10
c0010ab9:	85 c0                	test   eax,eax
c0010abb:	74 39                	je     c0010af6 <SysReadDir(regs*)+0x62>
c0010abd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010ac5:	83 ec 0c             	sub    esp,0xc
c0010ac8:	8b 10                	mov    edx,DWORD PTR [eax]
c0010aca:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010ace:	51                   	push   ecx
c0010acf:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010ad2:	51                   	push   ecx
c0010ad3:	6a 00                	push   0x0
c0010ad5:	68 10 01 00 00       	push   0x110
c0010ada:	50                   	push   eax
c0010adb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010ade:	83 c4 20             	add    esp,0x20
c0010ae1:	85 c0                	test   eax,eax
c0010ae3:	74 29                	je     c0010b0e <SysReadDir(regs*)+0x7a>
c0010ae5:	83 f8 07             	cmp    eax,0x7
c0010ae8:	74 1b                	je     c0010b05 <SysReadDir(regs*)+0x71>
c0010aea:	b8 02 00 00 00       	mov    eax,0x2
c0010aef:	31 d2                	xor    edx,edx
c0010af1:	83 c4 18             	add    esp,0x18
c0010af4:	5b                   	pop    ebx
c0010af5:	c3                   	ret    
c0010af6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010afb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b00:	83 c4 18             	add    esp,0x18
c0010b03:	5b                   	pop    ebx
c0010b04:	c3                   	ret    
c0010b05:	b8 01 00 00 00       	mov    eax,0x1
c0010b0a:	31 d2                	xor    edx,edx
c0010b0c:	eb e3                	jmp    c0010af1 <SysReadDir(regs*)+0x5d>
c0010b0e:	31 c0                	xor    eax,eax
c0010b10:	31 d2                	xor    edx,edx
c0010b12:	eb dd                	jmp    c0010af1 <SysReadDir(regs*)+0x5d>

c0010b14 <SysIsATTY(regs*)>:
c0010b14:	83 ec 0c             	sub    esp,0xc
c0010b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b1b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010b1e:	83 f8 02             	cmp    eax,0x2
c0010b21:	76 07                	jbe    c0010b2a <SysIsATTY(regs*)+0x16>
c0010b23:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010b28:	75 28                	jne    c0010b52 <SysIsATTY(regs*)+0x3e>
c0010b2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b2f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b32:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010b38:	85 c0                	test   eax,eax
c0010b3a:	74 26                	je     c0010b62 <SysIsATTY(regs*)+0x4e>
c0010b3c:	83 ec 0c             	sub    esp,0xc
c0010b3f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b41:	50                   	push   eax
c0010b42:	ff 12                	call   DWORD PTR [edx]
c0010b44:	31 d2                	xor    edx,edx
c0010b46:	25 ff 00 00 00       	and    eax,0xff
c0010b4b:	83 c4 10             	add    esp,0x10
c0010b4e:	83 c4 0c             	add    esp,0xc
c0010b51:	c3                   	ret    
c0010b52:	83 ec 0c             	sub    esp,0xc
c0010b55:	50                   	push   eax
c0010b56:	e8 a0 86 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0010b5b:	83 c4 10             	add    esp,0x10
c0010b5e:	85 c0                	test   eax,eax
c0010b60:	75 da                	jne    c0010b3c <SysIsATTY(regs*)+0x28>
c0010b62:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b67:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b6c:	83 c4 0c             	add    esp,0xc
c0010b6f:	c3                   	ret    

c0010b70 <SysSeek(regs*)>:
c0010b70:	53                   	push   ebx
c0010b71:	83 ec 08             	sub    esp,0x8
c0010b74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b78:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b7b:	8d 50 fd             	lea    edx,[eax-0x3]
c0010b7e:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010b84:	77 34                	ja     c0010bba <SysSeek(regs*)+0x4a>
c0010b86:	83 ec 0c             	sub    esp,0xc
c0010b89:	50                   	push   eax
c0010b8a:	e8 6c 86 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0010b8f:	83 c4 0c             	add    esp,0xc
c0010b92:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010b95:	31 db                	xor    ebx,ebx
c0010b97:	53                   	push   ebx
c0010b98:	51                   	push   ecx
c0010b99:	50                   	push   eax
c0010b9a:	e8 63 a1 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0010b9f:	83 c4 10             	add    esp,0x10
c0010ba2:	85 c0                	test   eax,eax
c0010ba4:	0f 95 c0             	setne  al
c0010ba7:	31 d2                	xor    edx,edx
c0010ba9:	25 ff 00 00 00       	and    eax,0xff
c0010bae:	f7 d8                	neg    eax
c0010bb0:	83 d2 00             	adc    edx,0x0
c0010bb3:	83 c4 08             	add    esp,0x8
c0010bb6:	f7 da                	neg    edx
c0010bb8:	5b                   	pop    ebx
c0010bb9:	c3                   	ret    
c0010bba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bbf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010bc4:	83 c4 08             	add    esp,0x8
c0010bc7:	5b                   	pop    ebx
c0010bc8:	c3                   	ret    

c0010bc9 <SysTell(regs*)>:
c0010bc9:	53                   	push   ebx
c0010bca:	83 ec 08             	sub    esp,0x8
c0010bcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bd1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010bd4:	83 f8 02             	cmp    eax,0x2
c0010bd7:	76 50                	jbe    c0010c29 <SysTell(regs*)+0x60>
c0010bd9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010bde:	76 19                	jbe    c0010bf9 <SysTell(regs*)+0x30>
c0010be0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010be3:	31 d2                	xor    edx,edx
c0010be5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010beb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010bf2:	31 c0                	xor    eax,eax
c0010bf4:	83 c4 08             	add    esp,0x8
c0010bf7:	5b                   	pop    ebx
c0010bf8:	c3                   	ret    
c0010bf9:	83 ec 0c             	sub    esp,0xc
c0010bfc:	50                   	push   eax
c0010bfd:	e8 f9 85 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0010c02:	5a                   	pop    edx
c0010c03:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010c06:	59                   	pop    ecx
c0010c07:	53                   	push   ebx
c0010c08:	50                   	push   eax
c0010c09:	e8 4a a1 ff ff       	call   c000ad58 <File::tell(unsigned long long*)>
c0010c0e:	83 c4 10             	add    esp,0x10
c0010c11:	85 c0                	test   eax,eax
c0010c13:	0f 95 c0             	setne  al
c0010c16:	31 d2                	xor    edx,edx
c0010c18:	25 ff 00 00 00       	and    eax,0xff
c0010c1d:	f7 d8                	neg    eax
c0010c1f:	83 d2 00             	adc    edx,0x0
c0010c22:	83 c4 08             	add    esp,0x8
c0010c25:	f7 da                	neg    edx
c0010c27:	5b                   	pop    ebx
c0010c28:	c3                   	ret    
c0010c29:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c2e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c33:	83 c4 08             	add    esp,0x8
c0010c36:	5b                   	pop    ebx
c0010c37:	c3                   	ret    

c0010c38 <SysSize(regs*)>:
c0010c38:	53                   	push   ebx
c0010c39:	83 ec 18             	sub    esp,0x18
c0010c3c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010c40:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c43:	83 f8 02             	cmp    eax,0x2
c0010c46:	76 56                	jbe    c0010c9e <SysSize(regs*)+0x66>
c0010c48:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010c4d:	76 19                	jbe    c0010c68 <SysSize(regs*)+0x30>
c0010c4f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010c52:	31 d2                	xor    edx,edx
c0010c54:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010c5a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c61:	31 c0                	xor    eax,eax
c0010c63:	83 c4 18             	add    esp,0x18
c0010c66:	5b                   	pop    ebx
c0010c67:	c3                   	ret    
c0010c68:	83 ec 0c             	sub    esp,0xc
c0010c6b:	50                   	push   eax
c0010c6c:	e8 8a 85 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0010c71:	83 c4 0c             	add    esp,0xc
c0010c74:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010c78:	52                   	push   edx
c0010c79:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010c7c:	52                   	push   edx
c0010c7d:	50                   	push   eax
c0010c7e:	e8 6d a2 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0010c83:	83 c4 10             	add    esp,0x10
c0010c86:	85 c0                	test   eax,eax
c0010c88:	0f 95 c0             	setne  al
c0010c8b:	31 d2                	xor    edx,edx
c0010c8d:	25 ff 00 00 00       	and    eax,0xff
c0010c92:	f7 d8                	neg    eax
c0010c94:	83 d2 00             	adc    edx,0x0
c0010c97:	83 c4 18             	add    esp,0x18
c0010c9a:	f7 da                	neg    edx
c0010c9c:	5b                   	pop    ebx
c0010c9d:	c3                   	ret    
c0010c9e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ca3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ca8:	83 c4 18             	add    esp,0x18
c0010cab:	5b                   	pop    ebx
c0010cac:	c3                   	ret    

c0010cad <SysSizeFromFilename(regs*)>:
c0010cad:	57                   	push   edi
c0010cae:	56                   	push   esi
c0010caf:	53                   	push   ebx
c0010cb0:	83 ec 20             	sub    esp,0x20
c0010cb3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010cb7:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010cba:	83 fb 02             	cmp    ebx,0x2
c0010cbd:	0f 86 8c 00 00 00    	jbe    c0010d4f <SysSizeFromFilename(regs*)+0xa2>
c0010cc3:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010cc9:	76 1b                	jbe    c0010ce6 <SysSizeFromFilename(regs*)+0x39>
c0010ccb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010cce:	31 d2                	xor    edx,edx
c0010cd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010cd6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010cdd:	83 c4 20             	add    esp,0x20
c0010ce0:	31 c0                	xor    eax,eax
c0010ce2:	5b                   	pop    ebx
c0010ce3:	5e                   	pop    esi
c0010ce4:	5f                   	pop    edi
c0010ce5:	c3                   	ret    
c0010ce6:	83 ec 0c             	sub    esp,0xc
c0010ce9:	68 14 01 00 00       	push   0x114
c0010cee:	e8 82 6b ff ff       	call   c0007875 <malloc>
c0010cf3:	83 c4 0c             	add    esp,0xc
c0010cf6:	89 c7                	mov    edi,eax
c0010cf8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cfd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d00:	50                   	push   eax
c0010d01:	53                   	push   ebx
c0010d02:	57                   	push   edi
c0010d03:	e8 7c 9e ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0010d08:	83 c4 0c             	add    esp,0xc
c0010d0b:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010d0f:	50                   	push   eax
c0010d10:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010d13:	52                   	push   edx
c0010d14:	57                   	push   edi
c0010d15:	e8 d6 a1 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0010d1a:	83 c4 10             	add    esp,0x10
c0010d1d:	85 ff                	test   edi,edi
c0010d1f:	74 14                	je     c0010d35 <SysSizeFromFilename(regs*)+0x88>
c0010d21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d25:	8b 17                	mov    edx,DWORD PTR [edi]
c0010d27:	83 ec 0c             	sub    esp,0xc
c0010d2a:	57                   	push   edi
c0010d2b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010d2e:	83 c4 10             	add    esp,0x10
c0010d31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d35:	85 c0                	test   eax,eax
c0010d37:	0f 95 c0             	setne  al
c0010d3a:	31 d2                	xor    edx,edx
c0010d3c:	25 ff 00 00 00       	and    eax,0xff
c0010d41:	f7 d8                	neg    eax
c0010d43:	83 d2 00             	adc    edx,0x0
c0010d46:	83 c4 20             	add    esp,0x20
c0010d49:	f7 da                	neg    edx
c0010d4b:	5b                   	pop    ebx
c0010d4c:	5e                   	pop    esi
c0010d4d:	5f                   	pop    edi
c0010d4e:	c3                   	ret    
c0010d4f:	83 c4 20             	add    esp,0x20
c0010d52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d57:	5b                   	pop    ebx
c0010d58:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d5d:	5e                   	pop    esi
c0010d5e:	5f                   	pop    edi
c0010d5f:	c3                   	ret    

c0010d60 <SysClose(regs*)>:
c0010d60:	53                   	push   ebx
c0010d61:	83 ec 08             	sub    esp,0x8
c0010d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d68:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010d6b:	83 f8 02             	cmp    eax,0x2
c0010d6e:	76 41                	jbe    c0010db1 <SysClose(regs*)+0x51>
c0010d70:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010d76:	83 fa 01             	cmp    edx,0x1
c0010d79:	76 2d                	jbe    c0010da8 <SysClose(regs*)+0x48>
c0010d7b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d80:	77 2f                	ja     c0010db1 <SysClose(regs*)+0x51>
c0010d82:	83 ec 0c             	sub    esp,0xc
c0010d85:	50                   	push   eax
c0010d86:	e8 70 84 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0010d8b:	89 c3                	mov    ebx,eax
c0010d8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d90:	e8 0d 9f ff ff       	call   c000aca2 <File::close()>
c0010d95:	83 c4 10             	add    esp,0x10
c0010d98:	85 db                	test   ebx,ebx
c0010d9a:	74 0c                	je     c0010da8 <SysClose(regs*)+0x48>
c0010d9c:	83 ec 0c             	sub    esp,0xc
c0010d9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010da1:	53                   	push   ebx
c0010da2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010da5:	83 c4 10             	add    esp,0x10
c0010da8:	31 c0                	xor    eax,eax
c0010daa:	31 d2                	xor    edx,edx
c0010dac:	83 c4 08             	add    esp,0x8
c0010daf:	5b                   	pop    ebx
c0010db0:	c3                   	ret    
c0010db1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010db6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010dbb:	83 c4 08             	add    esp,0x8
c0010dbe:	5b                   	pop    ebx
c0010dbf:	c3                   	ret    

c0010dc0 <SysOpenDir(regs*)>:
c0010dc0:	56                   	push   esi
c0010dc1:	53                   	push   ebx
c0010dc2:	50                   	push   eax
c0010dc3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010dc7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010dca:	85 c0                	test   eax,eax
c0010dcc:	74 5b                	je     c0010e29 <SysOpenDir(regs*)+0x69>
c0010dce:	83 ec 0c             	sub    esp,0xc
c0010dd1:	68 14 01 00 00       	push   0x114
c0010dd6:	e8 9a 6a ff ff       	call   c0007875 <malloc>
c0010ddb:	83 c4 0c             	add    esp,0xc
c0010dde:	89 c6                	mov    esi,eax
c0010de0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010de5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010de8:	50                   	push   eax
c0010de9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010dec:	50                   	push   eax
c0010ded:	56                   	push   esi
c0010dee:	e8 bb a2 ff ff       	call   c000b0ae <Directory::Directory(char const*, Process*)>
c0010df3:	83 c4 10             	add    esp,0x10
c0010df6:	85 f6                	test   esi,esi
c0010df8:	74 2f                	je     c0010e29 <SysOpenDir(regs*)+0x69>
c0010dfa:	83 ec 0c             	sub    esp,0xc
c0010dfd:	56                   	push   esi
c0010dfe:	e8 6b a3 ff ff       	call   c000b16e <Directory::open()>
c0010e03:	83 c4 10             	add    esp,0x10
c0010e06:	85 c0                	test   eax,eax
c0010e08:	75 1f                	jne    c0010e29 <SysOpenDir(regs*)+0x69>
c0010e0a:	83 ec 0c             	sub    esp,0xc
c0010e0d:	56                   	push   esi
c0010e0e:	e8 f3 80 ff ff       	call   c0008f06 <UnixFile::getFileDescriptor()>
c0010e13:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010e16:	83 c4 10             	add    esp,0x10
c0010e19:	89 02                	mov    DWORD PTR [edx],eax
c0010e1b:	c1 f8 1f             	sar    eax,0x1f
c0010e1e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e21:	31 c0                	xor    eax,eax
c0010e23:	59                   	pop    ecx
c0010e24:	31 d2                	xor    edx,edx
c0010e26:	5b                   	pop    ebx
c0010e27:	5e                   	pop    esi
c0010e28:	c3                   	ret    
c0010e29:	59                   	pop    ecx
c0010e2a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e2f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e34:	5b                   	pop    ebx
c0010e35:	5e                   	pop    esi
c0010e36:	c3                   	ret    

c0010e37 <SysMakeDir(regs*)>:
c0010e37:	56                   	push   esi
c0010e38:	53                   	push   ebx
c0010e39:	83 ec 10             	sub    esp,0x10
c0010e3c:	68 14 01 00 00       	push   0x114
c0010e41:	e8 2f 6a ff ff       	call   c0007875 <malloc>
c0010e46:	83 c4 0c             	add    esp,0xc
c0010e49:	89 c3                	mov    ebx,eax
c0010e4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e50:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010e53:	56                   	push   esi
c0010e54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010e58:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e5b:	50                   	push   eax
c0010e5c:	53                   	push   ebx
c0010e5d:	e8 4c a2 ff ff       	call   c000b0ae <Directory::Directory(char const*, Process*)>
c0010e62:	83 c4 10             	add    esp,0x10
c0010e65:	85 db                	test   ebx,ebx
c0010e67:	74 2a                	je     c0010e93 <SysMakeDir(regs*)+0x5c>
c0010e69:	83 ec 0c             	sub    esp,0xc
c0010e6c:	53                   	push   ebx
c0010e6d:	e8 dc a4 ff ff       	call   c000b34e <Directory::create()>
c0010e72:	89 c6                	mov    esi,eax
c0010e74:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e79:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e7c:	83 c4 10             	add    esp,0x10
c0010e7f:	31 c0                	xor    eax,eax
c0010e81:	59                   	pop    ecx
c0010e82:	85 f6                	test   esi,esi
c0010e84:	5b                   	pop    ebx
c0010e85:	0f 95 c0             	setne  al
c0010e88:	5e                   	pop    esi
c0010e89:	31 d2                	xor    edx,edx
c0010e8b:	f7 d8                	neg    eax
c0010e8d:	83 d2 00             	adc    edx,0x0
c0010e90:	f7 da                	neg    edx
c0010e92:	c3                   	ret    
c0010e93:	59                   	pop    ecx
c0010e94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e99:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e9e:	5b                   	pop    ebx
c0010e9f:	5e                   	pop    esi
c0010ea0:	c3                   	ret    

c0010ea1 <SysCloseDir(regs*)>:
c0010ea1:	53                   	push   ebx
c0010ea2:	83 ec 08             	sub    esp,0x8
c0010ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ea9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010eac:	8d 50 fd             	lea    edx,[eax-0x3]
c0010eaf:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010eb5:	77 2f                	ja     c0010ee6 <SysCloseDir(regs*)+0x45>
c0010eb7:	83 ec 0c             	sub    esp,0xc
c0010eba:	50                   	push   eax
c0010ebb:	e8 3b 83 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0010ec0:	89 c3                	mov    ebx,eax
c0010ec2:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ec5:	e8 00 a3 ff ff       	call   c000b1ca <Directory::close()>
c0010eca:	83 c4 10             	add    esp,0x10
c0010ecd:	85 db                	test   ebx,ebx
c0010ecf:	74 0c                	je     c0010edd <SysCloseDir(regs*)+0x3c>
c0010ed1:	83 ec 0c             	sub    esp,0xc
c0010ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ed6:	53                   	push   ebx
c0010ed7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010eda:	83 c4 10             	add    esp,0x10
c0010edd:	31 c0                	xor    eax,eax
c0010edf:	31 d2                	xor    edx,edx
c0010ee1:	83 c4 08             	add    esp,0x8
c0010ee4:	5b                   	pop    ebx
c0010ee5:	c3                   	ret    
c0010ee6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010eeb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ef0:	83 c4 08             	add    esp,0x8
c0010ef3:	5b                   	pop    ebx
c0010ef4:	c3                   	ret    

c0010ef5 <SysWait(regs*)>:
c0010ef5:	83 ec 10             	sub    esp,0x10
c0010ef8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010efc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010eff:	52                   	push   edx
c0010f00:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010f03:	51                   	push   ecx
c0010f04:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f07:	50                   	push   eax
c0010f08:	e8 53 2b 00 00       	call   c0013a60 <waitTask(int, int*, int)>
c0010f0d:	83 c4 1c             	add    esp,0x1c
c0010f10:	99                   	cdq    
c0010f11:	c3                   	ret    

c0010f12 <SysNotImpl(regs*)>:
c0010f12:	83 ec 18             	sub    esp,0x18
c0010f15:	68 64 f0 01 c0       	push   0xc001f064
c0010f1a:	e8 f8 f3 ff ff       	call   c0010317 <KePanic(char const*)>
c0010f1f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f24:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f29:	83 c4 1c             	add    esp,0x1c
c0010f2c:	c3                   	ret    

c0010f2d <SysPanic(regs*)>:
c0010f2d:	83 ec 18             	sub    esp,0x18
c0010f30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f34:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010f37:	50                   	push   eax
c0010f38:	e8 da f3 ff ff       	call   c0010317 <KePanic(char const*)>
c0010f3d:	b8 01 00 00 00       	mov    eax,0x1
c0010f42:	31 d2                	xor    edx,edx
c0010f44:	83 c4 1c             	add    esp,0x1c
c0010f47:	c3                   	ret    

c0010f48 <SysRmdir(regs*)>:
c0010f48:	56                   	push   esi
c0010f49:	53                   	push   ebx
c0010f4a:	83 ec 20             	sub    esp,0x20
c0010f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f51:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f54:	68 14 01 00 00       	push   0x114
c0010f59:	e8 17 69 ff ff       	call   c0007875 <malloc>
c0010f5e:	83 c4 0c             	add    esp,0xc
c0010f61:	89 c3                	mov    ebx,eax
c0010f63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f68:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f6b:	50                   	push   eax
c0010f6c:	56                   	push   esi
c0010f6d:	53                   	push   ebx
c0010f6e:	e8 11 9c ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0010f73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f76:	e8 41 9e ff ff       	call   c000adbc <File::unlink()>
c0010f7b:	83 c4 10             	add    esp,0x10
c0010f7e:	85 db                	test   ebx,ebx
c0010f80:	74 14                	je     c0010f96 <SysRmdir(regs*)+0x4e>
c0010f82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f86:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f88:	83 ec 0c             	sub    esp,0xc
c0010f8b:	53                   	push   ebx
c0010f8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f8f:	83 c4 10             	add    esp,0x10
c0010f92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f96:	85 c0                	test   eax,eax
c0010f98:	0f 95 c0             	setne  al
c0010f9b:	31 d2                	xor    edx,edx
c0010f9d:	25 ff 00 00 00       	and    eax,0xff
c0010fa2:	f7 d8                	neg    eax
c0010fa4:	83 d2 00             	adc    edx,0x0
c0010fa7:	83 c4 14             	add    esp,0x14
c0010faa:	f7 da                	neg    edx
c0010fac:	5b                   	pop    ebx
c0010fad:	5e                   	pop    esi
c0010fae:	c3                   	ret    

c0010faf <SysUnlink(regs*)>:
c0010faf:	56                   	push   esi
c0010fb0:	53                   	push   ebx
c0010fb1:	83 ec 20             	sub    esp,0x20
c0010fb4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010fb8:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010fbb:	68 14 01 00 00       	push   0x114
c0010fc0:	e8 b0 68 ff ff       	call   c0007875 <malloc>
c0010fc5:	83 c4 0c             	add    esp,0xc
c0010fc8:	89 c3                	mov    ebx,eax
c0010fca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fcf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fd2:	50                   	push   eax
c0010fd3:	56                   	push   esi
c0010fd4:	53                   	push   ebx
c0010fd5:	e8 aa 9b ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0010fda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fdd:	e8 da 9d ff ff       	call   c000adbc <File::unlink()>
c0010fe2:	83 c4 10             	add    esp,0x10
c0010fe5:	85 db                	test   ebx,ebx
c0010fe7:	74 14                	je     c0010ffd <SysUnlink(regs*)+0x4e>
c0010fe9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010fed:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010fef:	83 ec 0c             	sub    esp,0xc
c0010ff2:	53                   	push   ebx
c0010ff3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010ff6:	83 c4 10             	add    esp,0x10
c0010ff9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ffd:	85 c0                	test   eax,eax
c0010fff:	0f 95 c0             	setne  al
c0011002:	31 d2                	xor    edx,edx
c0011004:	25 ff 00 00 00       	and    eax,0xff
c0011009:	f7 d8                	neg    eax
c001100b:	83 d2 00             	adc    edx,0x0
c001100e:	83 c4 14             	add    esp,0x14
c0011011:	f7 da                	neg    edx
c0011013:	5b                   	pop    ebx
c0011014:	5e                   	pop    esi
c0011015:	c3                   	ret    

c0011016 <SysGetArgv(regs*)>:
c0011016:	83 ec 0c             	sub    esp,0xc
c0011019:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001101d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011020:	85 c0                	test   eax,eax
c0011022:	78 2c                	js     c0011050 <SysGetArgv(regs*)+0x3a>
c0011024:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001102a:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001102d:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011033:	7d 1b                	jge    c0011050 <SysGetArgv(regs*)+0x3a>
c0011035:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001103c:	85 c0                	test   eax,eax
c001103e:	74 18                	je     c0011058 <SysGetArgv(regs*)+0x42>
c0011040:	83 ec 08             	sub    esp,0x8
c0011043:	50                   	push   eax
c0011044:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011047:	50                   	push   eax
c0011048:	e8 b3 f5 fe ff       	call   c0000600 <strcpy>
c001104d:	83 c4 10             	add    esp,0x10
c0011050:	31 c0                	xor    eax,eax
c0011052:	31 d2                	xor    edx,edx
c0011054:	83 c4 0c             	add    esp,0xc
c0011057:	c3                   	ret    
c0011058:	b8 01 00 00 00       	mov    eax,0x1
c001105d:	31 d2                	xor    edx,edx
c001105f:	83 c4 0c             	add    esp,0xc
c0011062:	c3                   	ret    

c0011063 <SysUSleep(regs*)>:
c0011063:	83 ec 1c             	sub    esp,0x1c
c0011066:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001106a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001106d:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011070:	6a 00                	push   0x0
c0011072:	6a 64                	push   0x64
c0011074:	52                   	push   edx
c0011075:	50                   	push   eax
c0011076:	e8 f5 b8 00 00       	call   c001c970 <__udivdi3>
c001107b:	83 c4 14             	add    esp,0x14
c001107e:	50                   	push   eax
c001107f:	e8 b0 2a 00 00       	call   c0013b34 <milliTenthSleep(unsigned int)>
c0011084:	31 c0                	xor    eax,eax
c0011086:	31 d2                	xor    edx,edx
c0011088:	83 c4 1c             	add    esp,0x1c
c001108b:	c3                   	ret    

c001108c <SysSpawn(regs*)>:
c001108c:	56                   	push   esi
c001108d:	53                   	push   ebx
c001108e:	50                   	push   eax
c001108f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011093:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011096:	85 c0                	test   eax,eax
c0011098:	75 08                	jne    c00110a2 <SysSpawn(regs*)+0x16>
c001109a:	59                   	pop    ecx
c001109b:	31 c0                	xor    eax,eax
c001109d:	31 d2                	xor    edx,edx
c001109f:	5b                   	pop    ebx
c00110a0:	5e                   	pop    esi
c00110a1:	c3                   	ret    
c00110a2:	83 ec 0c             	sub    esp,0xc
c00110a5:	68 24 07 00 00       	push   0x724
c00110aa:	e8 c6 67 ff ff       	call   c0007875 <malloc>
c00110af:	83 c4 10             	add    esp,0x10
c00110b2:	89 c6                	mov    esi,eax
c00110b4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00110b7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00110ba:	85 c0                	test   eax,eax
c00110bc:	75 33                	jne    c00110f1 <SysSpawn(regs*)+0x65>
c00110be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110c6:	52                   	push   edx
c00110c7:	50                   	push   eax
c00110c8:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00110cb:	53                   	push   ebx
c00110cc:	56                   	push   esi
c00110cd:	e8 0e 21 00 00       	call   c00131e0 <Process::Process(char const*, Process*, char**)>
c00110d2:	83 c4 10             	add    esp,0x10
c00110d5:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00110dc:	75 bc                	jne    c001109a <SysSpawn(regs*)+0xe>
c00110de:	83 ec 0c             	sub    esp,0xc
c00110e1:	56                   	push   esi
c00110e2:	e8 25 26 00 00       	call   c001370c <Process::createUserThread()>
c00110e7:	8b 06                	mov    eax,DWORD PTR [esi]
c00110e9:	83 c4 10             	add    esp,0x10
c00110ec:	99                   	cdq    
c00110ed:	59                   	pop    ecx
c00110ee:	5b                   	pop    ebx
c00110ef:	5e                   	pop    esi
c00110f0:	c3                   	ret    
c00110f1:	31 c0                	xor    eax,eax
c00110f3:	eb d1                	jmp    c00110c6 <SysSpawn(regs*)+0x3a>

c00110f5 <SysGetEnv(regs*)>:
c00110f5:	57                   	push   edi
c00110f6:	56                   	push   esi
c00110f7:	53                   	push   ebx
c00110f8:	83 ec 1c             	sub    esp,0x1c
c00110fb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00110ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011104:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011107:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001110a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001110d:	50                   	push   eax
c001110e:	e8 bc f0 ff ff       	call   c00101cf <Krnl::getProcessTotalEnvCount(Process*)>
c0011113:	83 c4 10             	add    esp,0x10
c0011116:	39 c7                	cmp    edi,eax
c0011118:	7c 14                	jl     c001112e <SysGetEnv(regs*)+0x39>
c001111a:	85 f6                	test   esi,esi
c001111c:	75 0b                	jne    c0011129 <SysGetEnv(regs*)+0x34>
c001111e:	83 c4 10             	add    esp,0x10
c0011121:	31 c0                	xor    eax,eax
c0011123:	5b                   	pop    ebx
c0011124:	31 d2                	xor    edx,edx
c0011126:	5e                   	pop    esi
c0011127:	5f                   	pop    edi
c0011128:	c3                   	ret    
c0011129:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001112c:	eb f0                	jmp    c001111e <SysGetEnv(regs*)+0x29>
c001112e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011132:	52                   	push   edx
c0011133:	57                   	push   edi
c0011134:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001113a:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001113d:	51                   	push   ecx
c001113e:	50                   	push   eax
c001113f:	e8 ab f0 ff ff       	call   c00101ef <Krnl::getProcessEnvPair(Process*, int)>
c0011144:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011147:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001114b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001114f:	83 c4 0c             	add    esp,0xc
c0011152:	85 db                	test   ebx,ebx
c0011154:	75 23                	jne    c0011179 <SysGetEnv(regs*)+0x84>
c0011156:	83 ec 0c             	sub    esp,0xc
c0011159:	50                   	push   eax
c001115a:	e8 e1 f3 fe ff       	call   c0000540 <strlen>
c001115f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011162:	89 c3                	mov    ebx,eax
c0011164:	e8 d7 f3 fe ff       	call   c0000540 <strlen>
c0011169:	31 d2                	xor    edx,edx
c001116b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001116f:	83 c4 10             	add    esp,0x10
c0011172:	83 c4 10             	add    esp,0x10
c0011175:	5b                   	pop    ebx
c0011176:	5e                   	pop    esi
c0011177:	5f                   	pop    edi
c0011178:	c3                   	ret    
c0011179:	83 ec 08             	sub    esp,0x8
c001117c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001117f:	50                   	push   eax
c0011180:	56                   	push   esi
c0011181:	e8 7a f4 fe ff       	call   c0000600 <strcpy>
c0011186:	58                   	pop    eax
c0011187:	5a                   	pop    edx
c0011188:	68 7e f0 01 c0       	push   0xc001f07e
c001118d:	56                   	push   esi
c001118e:	e8 2d f6 fe ff       	call   c00007c0 <strcat>
c0011193:	59                   	pop    ecx
c0011194:	5b                   	pop    ebx
c0011195:	57                   	push   edi
c0011196:	56                   	push   esi
c0011197:	e8 24 f6 fe ff       	call   c00007c0 <strcat>
c001119c:	83 c4 10             	add    esp,0x10
c001119f:	e9 7a ff ff ff       	jmp    c001111e <SysGetEnv(regs*)+0x29>

c00111a4 <SysSetFatAttrib(regs*)>:
c00111a4:	57                   	push   edi
c00111a5:	56                   	push   esi
c00111a6:	53                   	push   ebx
c00111a7:	83 ec 1c             	sub    esp,0x1c
c00111aa:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00111ae:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00111b1:	68 14 01 00 00       	push   0x114
c00111b6:	e8 ba 66 ff ff       	call   c0007875 <malloc>
c00111bb:	83 c4 0c             	add    esp,0xc
c00111be:	89 c3                	mov    ebx,eax
c00111c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111c8:	50                   	push   eax
c00111c9:	57                   	push   edi
c00111ca:	53                   	push   ebx
c00111cb:	e8 b4 99 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c00111d0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00111d3:	83 c4 0c             	add    esp,0xc
c00111d6:	0f b6 d4             	movzx  edx,ah
c00111d9:	25 ff 00 00 00       	and    eax,0xff
c00111de:	52                   	push   edx
c00111df:	50                   	push   eax
c00111e0:	53                   	push   ebx
c00111e1:	e8 70 9c ff ff       	call   c000ae56 <File::chfatattr(unsigned char, unsigned char)>
c00111e6:	83 c4 10             	add    esp,0x10
c00111e9:	85 db                	test   ebx,ebx
c00111eb:	74 14                	je     c0011201 <SysSetFatAttrib(regs*)+0x5d>
c00111ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00111f1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00111f3:	83 ec 0c             	sub    esp,0xc
c00111f6:	53                   	push   ebx
c00111f7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00111fa:	83 c4 10             	add    esp,0x10
c00111fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011201:	85 c0                	test   eax,eax
c0011203:	0f 95 c0             	setne  al
c0011206:	31 d2                	xor    edx,edx
c0011208:	25 ff 00 00 00       	and    eax,0xff
c001120d:	f7 d8                	neg    eax
c001120f:	83 d2 00             	adc    edx,0x0
c0011212:	83 c4 10             	add    esp,0x10
c0011215:	f7 da                	neg    edx
c0011217:	5b                   	pop    ebx
c0011218:	5e                   	pop    esi
c0011219:	5f                   	pop    edi
c001121a:	c3                   	ret    

c001121b <SysPipe(regs*)>:
c001121b:	57                   	push   edi
c001121c:	56                   	push   esi
c001121d:	53                   	push   ebx
c001121e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011222:	83 ec 0c             	sub    esp,0xc
c0011225:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011228:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001122b:	6a 20                	push   0x20
c001122d:	e8 43 66 ff ff       	call   c0007875 <malloc>
c0011232:	89 c3                	mov    ebx,eax
c0011234:	58                   	pop    eax
c0011235:	5a                   	pop    edx
c0011236:	68 00 50 00 00       	push   0x5000
c001123b:	53                   	push   ebx
c001123c:	e8 39 6f ff ff       	call   c000817a <Pipe::Pipe(int)>
c0011241:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011244:	e8 bd 7c ff ff       	call   c0008f06 <UnixFile::getFileDescriptor()>
c0011249:	89 07                	mov    DWORD PTR [edi],eax
c001124b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001124e:	e8 b3 7c ff ff       	call   c0008f06 <UnixFile::getFileDescriptor()>
c0011253:	83 c4 10             	add    esp,0x10
c0011256:	89 06                	mov    DWORD PTR [esi],eax
c0011258:	31 d2                	xor    edx,edx
c001125a:	5b                   	pop    ebx
c001125b:	31 c0                	xor    eax,eax
c001125d:	5e                   	pop    esi
c001125e:	5f                   	pop    edi
c001125f:	c3                   	ret    

c0011260 <SysGetUnixTime(regs*)>:
c0011260:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0011265:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001126b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001126f:	e9 1e a3 ff ff       	jmp    c000b592 <Clock::timeInSecondsLocal()>

c0011274 <string_ends_with(char const*, char const*)>:
c0011274:	57                   	push   edi
c0011275:	56                   	push   esi
c0011276:	53                   	push   ebx
c0011277:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001127b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001127f:	83 ec 0c             	sub    esp,0xc
c0011282:	53                   	push   ebx
c0011283:	e8 b8 f2 fe ff       	call   c0000540 <strlen>
c0011288:	89 3c 24             	mov    DWORD PTR [esp],edi
c001128b:	89 c6                	mov    esi,eax
c001128d:	e8 ae f2 fe ff       	call   c0000540 <strlen>
c0011292:	83 c4 10             	add    esp,0x10
c0011295:	39 c6                	cmp    esi,eax
c0011297:	7d 06                	jge    c001129f <string_ends_with(char const*, char const*)+0x2b>
c0011299:	5b                   	pop    ebx
c001129a:	31 c0                	xor    eax,eax
c001129c:	5e                   	pop    esi
c001129d:	5f                   	pop    edi
c001129e:	c3                   	ret    
c001129f:	83 ec 08             	sub    esp,0x8
c00112a2:	29 c6                	sub    esi,eax
c00112a4:	57                   	push   edi
c00112a5:	01 f3                	add    ebx,esi
c00112a7:	53                   	push   ebx
c00112a8:	e8 33 f4 fe ff       	call   c00006e0 <strcmp>
c00112ad:	83 c4 10             	add    esp,0x10
c00112b0:	85 c0                	test   eax,eax
c00112b2:	5b                   	pop    ebx
c00112b3:	0f 94 c0             	sete   al
c00112b6:	5e                   	pop    esi
c00112b7:	25 ff 00 00 00       	and    eax,0xff
c00112bc:	5f                   	pop    edi
c00112bd:	c3                   	ret    

c00112be <SysOpen(regs*)>:
c00112be:	56                   	push   esi
c00112bf:	53                   	push   ebx
c00112c0:	81 ec 04 01 00 00    	sub    esp,0x104
c00112c6:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00112cd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00112d0:	85 c9                	test   ecx,ecx
c00112d2:	0f 84 b9 01 00 00    	je     c0011491 <SysOpen(regs*)+0x1d3>
c00112d8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112db:	85 c0                	test   eax,eax
c00112dd:	0f 84 ae 01 00 00    	je     c0011491 <SysOpen(regs*)+0x1d3>
c00112e3:	52                   	push   edx
c00112e4:	68 80 f0 01 c0       	push   0xc001f080
c00112e9:	50                   	push   eax
c00112ea:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00112ee:	56                   	push   esi
c00112ef:	e8 e6 96 ff ff       	call   c000a9da <Fs::standardiseFiles(char*, char const*, char const*)>
c00112f4:	89 34 24             	mov    DWORD PTR [esp],esi
c00112f7:	e8 44 f2 fe ff       	call   c0000540 <strlen>
c00112fc:	83 c4 10             	add    esp,0x10
c00112ff:	48                   	dec    eax
c0011300:	74 1d                	je     c001131f <SysOpen(regs*)+0x61>
c0011302:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011305:	eb 0f                	jmp    c0011316 <SysOpen(regs*)+0x58>
c0011307:	80 fa 3a             	cmp    dl,0x3a
c001130a:	74 0f                	je     c001131b <SysOpen(regs*)+0x5d>
c001130c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011310:	48                   	dec    eax
c0011311:	74 0c                	je     c001131f <SysOpen(regs*)+0x61>
c0011313:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011316:	80 fa 2e             	cmp    dl,0x2e
c0011319:	75 ec                	jne    c0011307 <SysOpen(regs*)+0x49>
c001131b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001131f:	83 ec 08             	sub    esp,0x8
c0011322:	68 84 f0 01 c0       	push   0xc001f084
c0011327:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001132a:	50                   	push   eax
c001132b:	e8 44 ff ff ff       	call   c0011274 <string_ends_with(char const*, char const*)>
c0011330:	83 c4 10             	add    esp,0x10
c0011333:	85 c0                	test   eax,eax
c0011335:	74 1d                	je     c0011354 <SysOpen(regs*)+0x96>
c0011337:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001133a:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011340:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011347:	81 c4 04 01 00 00    	add    esp,0x104
c001134d:	31 c0                	xor    eax,eax
c001134f:	31 d2                	xor    edx,edx
c0011351:	5b                   	pop    ebx
c0011352:	5e                   	pop    esi
c0011353:	c3                   	ret    
c0011354:	83 ec 08             	sub    esp,0x8
c0011357:	68 89 f0 01 c0       	push   0xc001f089
c001135c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001135f:	50                   	push   eax
c0011360:	e8 0f ff ff ff       	call   c0011274 <string_ends_with(char const*, char const*)>
c0011365:	83 c4 10             	add    esp,0x10
c0011368:	85 c0                	test   eax,eax
c001136a:	75 cb                	jne    c0011337 <SysOpen(regs*)+0x79>
c001136c:	83 ec 08             	sub    esp,0x8
c001136f:	68 85 f0 01 c0       	push   0xc001f085
c0011374:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011377:	50                   	push   eax
c0011378:	e8 63 f3 fe ff       	call   c00006e0 <strcmp>
c001137d:	83 c4 10             	add    esp,0x10
c0011380:	85 c0                	test   eax,eax
c0011382:	74 b3                	je     c0011337 <SysOpen(regs*)+0x79>
c0011384:	83 ec 08             	sub    esp,0x8
c0011387:	68 84 f0 01 c0       	push   0xc001f084
c001138c:	56                   	push   esi
c001138d:	e8 e2 fe ff ff       	call   c0011274 <string_ends_with(char const*, char const*)>
c0011392:	83 c4 10             	add    esp,0x10
c0011395:	85 c0                	test   eax,eax
c0011397:	75 9e                	jne    c0011337 <SysOpen(regs*)+0x79>
c0011399:	83 ec 08             	sub    esp,0x8
c001139c:	68 8e f0 01 c0       	push   0xc001f08e
c00113a1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113a4:	50                   	push   eax
c00113a5:	e8 ca fe ff ff       	call   c0011274 <string_ends_with(char const*, char const*)>
c00113aa:	83 c4 10             	add    esp,0x10
c00113ad:	85 c0                	test   eax,eax
c00113af:	0f 85 ef 00 00 00    	jne    c00114a4 <SysOpen(regs*)+0x1e6>
c00113b5:	83 ec 08             	sub    esp,0x8
c00113b8:	68 93 f0 01 c0       	push   0xc001f093
c00113bd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113c0:	50                   	push   eax
c00113c1:	e8 ae fe ff ff       	call   c0011274 <string_ends_with(char const*, char const*)>
c00113c6:	83 c4 10             	add    esp,0x10
c00113c9:	85 c0                	test   eax,eax
c00113cb:	0f 85 d3 00 00 00    	jne    c00114a4 <SysOpen(regs*)+0x1e6>
c00113d1:	83 ec 08             	sub    esp,0x8
c00113d4:	68 8f f0 01 c0       	push   0xc001f08f
c00113d9:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00113dc:	51                   	push   ecx
c00113dd:	e8 fe f2 fe ff       	call   c00006e0 <strcmp>
c00113e2:	83 c4 10             	add    esp,0x10
c00113e5:	85 c0                	test   eax,eax
c00113e7:	0f 84 b7 00 00 00    	je     c00114a4 <SysOpen(regs*)+0x1e6>
c00113ed:	83 ec 08             	sub    esp,0x8
c00113f0:	68 8e f0 01 c0       	push   0xc001f08e
c00113f5:	56                   	push   esi
c00113f6:	e8 79 fe ff ff       	call   c0011274 <string_ends_with(char const*, char const*)>
c00113fb:	83 c4 10             	add    esp,0x10
c00113fe:	85 c0                	test   eax,eax
c0011400:	0f 85 9e 00 00 00    	jne    c00114a4 <SysOpen(regs*)+0x1e6>
c0011406:	83 ec 0c             	sub    esp,0xc
c0011409:	68 14 01 00 00       	push   0x114
c001140e:	e8 62 64 ff ff       	call   c0007875 <malloc>
c0011413:	83 c4 0c             	add    esp,0xc
c0011416:	89 c6                	mov    esi,eax
c0011418:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001141d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011420:	50                   	push   eax
c0011421:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011424:	52                   	push   edx
c0011425:	56                   	push   esi
c0011426:	e8 59 97 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c001142b:	83 c4 10             	add    esp,0x10
c001142e:	85 f6                	test   esi,esi
c0011430:	74 5f                	je     c0011491 <SysOpen(regs*)+0x1d3>
c0011432:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011435:	89 d0                	mov    eax,edx
c0011437:	25 ff 00 00 00       	and    eax,0xff
c001143c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001143f:	89 d0                	mov    eax,edx
c0011441:	83 e0 01             	and    eax,0x1
c0011444:	f6 c2 02             	test   dl,0x2
c0011447:	74 03                	je     c001144c <SysOpen(regs*)+0x18e>
c0011449:	83 c8 02             	or     eax,0x2
c001144c:	f6 c2 04             	test   dl,0x4
c001144f:	74 03                	je     c0011454 <SysOpen(regs*)+0x196>
c0011451:	83 c8 04             	or     eax,0x4
c0011454:	f6 c2 08             	test   dl,0x8
c0011457:	74 03                	je     c001145c <SysOpen(regs*)+0x19e>
c0011459:	83 c8 0a             	or     eax,0xa
c001145c:	83 e2 10             	and    edx,0x10
c001145f:	74 03                	je     c0011464 <SysOpen(regs*)+0x1a6>
c0011461:	83 c8 12             	or     eax,0x12
c0011464:	83 ec 08             	sub    esp,0x8
c0011467:	50                   	push   eax
c0011468:	56                   	push   esi
c0011469:	e8 d6 97 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c001146e:	83 c4 10             	add    esp,0x10
c0011471:	85 c0                	test   eax,eax
c0011473:	75 1c                	jne    c0011491 <SysOpen(regs*)+0x1d3>
c0011475:	83 ec 0c             	sub    esp,0xc
c0011478:	56                   	push   esi
c0011479:	e8 88 7a ff ff       	call   c0008f06 <UnixFile::getFileDescriptor()>
c001147e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011481:	83 c4 10             	add    esp,0x10
c0011484:	89 02                	mov    DWORD PTR [edx],eax
c0011486:	c1 f8 1f             	sar    eax,0x1f
c0011489:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001148c:	e9 b6 fe ff ff       	jmp    c0011347 <SysOpen(regs*)+0x89>
c0011491:	81 c4 04 01 00 00    	add    esp,0x104
c0011497:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001149c:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114a1:	5b                   	pop    ebx
c00114a2:	5e                   	pop    esi
c00114a3:	c3                   	ret    
c00114a4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00114a7:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00114ad:	e9 8e fe ff ff       	jmp    c0011340 <SysOpen(regs*)+0x82>

c00114b2 <KeSystemCall(regs*, void*)>:
c00114b2:	53                   	push   ebx
c00114b3:	83 ec 08             	sub    esp,0x8
c00114b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114ba:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00114bd:	83 f8 32             	cmp    eax,0x32
c00114c0:	77 16                	ja     c00114d8 <KeSystemCall(regs*, void*)+0x26>
c00114c2:	8b 14 85 60 02 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdfda0]
c00114c9:	85 d2                	test   edx,edx
c00114cb:	74 0b                	je     c00114d8 <KeSystemCall(regs*, void*)+0x26>
c00114cd:	83 ec 0c             	sub    esp,0xc
c00114d0:	53                   	push   ebx
c00114d1:	ff d2                	call   edx
c00114d3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00114d6:	eb 0d                	jmp    c00114e5 <KeSystemCall(regs*, void*)+0x33>
c00114d8:	52                   	push   edx
c00114d9:	52                   	push   edx
c00114da:	50                   	push   eax
c00114db:	68 98 f0 01 c0       	push   0xc001f098
c00114e0:	e8 29 91 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00114e5:	83 c4 10             	add    esp,0x10
c00114e8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00114ed:	31 d2                	xor    edx,edx
c00114ef:	83 c4 08             	add    esp,0x8
c00114f2:	5b                   	pop    ebx
c00114f3:	c3                   	ret    

c00114f4 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00114f4:	55                   	push   ebp
c00114f5:	57                   	push   edi
c00114f6:	56                   	push   esi
c00114f7:	53                   	push   ebx
c00114f8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00114fe:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0011505:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011507:	8d 6e 01             	lea    ebp,[esi+0x1]
c001150a:	80 fb 40             	cmp    bl,0x40
c001150d:	75 1b                	jne    c001152a <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001150f:	8a 16                	mov    dl,BYTE PTR [esi]
c0011511:	84 d2                	test   dl,dl
c0011513:	0f 84 f1 00 00 00    	je     c001160a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011519:	8d 46 01             	lea    eax,[esi+0x1]
c001151c:	80 fa 3a             	cmp    dl,0x3a
c001151f:	74 04                	je     c0011525 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0011521:	89 c6                	mov    esi,eax
c0011523:	eb ea                	jmp    c001150f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0011525:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011528:	89 c6                	mov    esi,eax
c001152a:	50                   	push   eax
c001152b:	6a 40                	push   0x40
c001152d:	6a 00                	push   0x0
c001152f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011533:	50                   	push   eax
c0011534:	e8 97 ef fe ff       	call   c00004d0 <memset>
c0011539:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0011540:	31 c0                	xor    eax,eax
c0011542:	83 c4 10             	add    esp,0x10
c0011545:	8a 0f                	mov    cl,BYTE PTR [edi]
c0011547:	84 c9                	test   cl,cl
c0011549:	0f 84 bb 00 00 00    	je     c001160a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001154f:	3d c7 00 00 00       	cmp    eax,0xc7
c0011554:	0f 8f b0 00 00 00    	jg     c001160a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001155a:	80 f9 0a             	cmp    cl,0xa
c001155d:	0f 85 98 00 00 00    	jne    c00115fb <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0011563:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0011568:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001156c:	a8 df                	test   al,0xdf
c001156e:	0f 94 c1             	sete   cl
c0011571:	3c 23                	cmp    al,0x23
c0011573:	0f 94 c2             	sete   dl
c0011576:	08 d1                	or     cl,dl
c0011578:	75 4a                	jne    c00115c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001157a:	8d 50 f7             	lea    edx,[eax-0x9]
c001157d:	80 fa 01             	cmp    dl,0x1
c0011580:	76 42                	jbe    c00115c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011582:	3c 5b                	cmp    al,0x5b
c0011584:	75 42                	jne    c00115c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0011586:	80 fb 40             	cmp    bl,0x40
c0011589:	75 39                	jne    c00115c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001158b:	83 ec 0c             	sub    esp,0xc
c001158e:	8d 54 24 65          	lea    edx,[esp+0x65]
c0011592:	52                   	push   edx
c0011593:	e8 a8 ef fe ff       	call   c0000540 <strlen>
c0011598:	83 c4 10             	add    esp,0x10
c001159b:	83 f8 3f             	cmp    eax,0x3f
c001159e:	77 6a                	ja     c001160a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00115a0:	50                   	push   eax
c00115a1:	50                   	push   eax
c00115a2:	8d 54 24 61          	lea    edx,[esp+0x61]
c00115a6:	52                   	push   edx
c00115a7:	8d 54 24 24          	lea    edx,[esp+0x24]
c00115ab:	52                   	push   edx
c00115ac:	e8 4f f0 fe ff       	call   c0000600 <strcpy>
c00115b1:	58                   	pop    eax
c00115b2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00115b6:	52                   	push   edx
c00115b7:	e8 84 ef fe ff       	call   c0000540 <strlen>
c00115bc:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00115c1:	83 c4 10             	add    esp,0x10
c00115c4:	31 d2                	xor    edx,edx
c00115c6:	eb 3a                	jmp    c0011602 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00115c8:	80 fb 40             	cmp    bl,0x40
c00115cb:	74 06                	je     c00115d3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00115cd:	8d 44 24 58          	lea    eax,[esp+0x58]
c00115d1:	eb 20                	jmp    c00115f3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c00115d3:	50                   	push   eax
c00115d4:	50                   	push   eax
c00115d5:	55                   	push   ebp
c00115d6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00115da:	50                   	push   eax
c00115db:	e8 00 f1 fe ff       	call   c00006e0 <strcmp>
c00115e0:	83 c4 10             	add    esp,0x10
c00115e3:	85 c0                	test   eax,eax
c00115e5:	75 dd                	jne    c00115c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00115e7:	eb e4                	jmp    c00115cd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00115e9:	8d 50 01             	lea    edx,[eax+0x1]
c00115ec:	80 f9 3d             	cmp    cl,0x3d
c00115ef:	74 1d                	je     c001160e <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00115f1:	89 d0                	mov    eax,edx
c00115f3:	8a 08                	mov    cl,BYTE PTR [eax]
c00115f5:	84 c9                	test   cl,cl
c00115f7:	75 f0                	jne    c00115e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00115f9:	eb 0f                	jmp    c001160a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00115fb:	8d 50 01             	lea    edx,[eax+0x1]
c00115fe:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0011602:	47                   	inc    edi
c0011603:	89 d0                	mov    eax,edx
c0011605:	e9 3b ff ff ff       	jmp    c0011545 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001160a:	31 c0                	xor    eax,eax
c001160c:	eb 33                	jmp    c0011641 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001160e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011612:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011615:	50                   	push   eax
c0011616:	50                   	push   eax
c0011617:	8d 44 24 60          	lea    eax,[esp+0x60]
c001161b:	50                   	push   eax
c001161c:	56                   	push   esi
c001161d:	e8 be f0 fe ff       	call   c00006e0 <strcmp>
c0011622:	83 c4 10             	add    esp,0x10
c0011625:	85 c0                	test   eax,eax
c0011627:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001162b:	75 97                	jne    c00115c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001162d:	51                   	push   ecx
c001162e:	51                   	push   ecx
c001162f:	52                   	push   edx
c0011630:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0011637:	e8 c4 ef fe ff       	call   c0000600 <strcpy>
c001163c:	83 c4 10             	add    esp,0x10
c001163f:	b0 01                	mov    al,0x1
c0011641:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011647:	5b                   	pop    ebx
c0011648:	5e                   	pop    esi
c0011649:	5f                   	pop    edi
c001164a:	5d                   	pop    ebp
c001164b:	c3                   	ret    

c001164c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001164c:	57                   	push   edi
c001164d:	56                   	push   esi
c001164e:	53                   	push   ebx
c001164f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011655:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001165c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0011663:	53                   	push   ebx
c0011664:	e8 d7 ee fe ff       	call   c0000540 <strlen>
c0011669:	89 34 24             	mov    DWORD PTR [esp],esi
c001166c:	89 c7                	mov    edi,eax
c001166e:	e8 cd ee fe ff       	call   c0000540 <strlen>
c0011673:	83 c4 10             	add    esp,0x10
c0011676:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001167a:	3d ff 00 00 00       	cmp    eax,0xff
c001167f:	0f 87 d3 00 00 00    	ja     c0011758 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011685:	57                   	push   edi
c0011686:	57                   	push   edi
c0011687:	56                   	push   esi
c0011688:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001168c:	56                   	push   esi
c001168d:	e8 6e ef fe ff       	call   c0000600 <strcpy>
c0011692:	58                   	pop    eax
c0011693:	5a                   	pop    edx
c0011694:	68 49 f3 01 c0       	push   0xc001f349
c0011699:	56                   	push   esi
c001169a:	e8 21 f1 fe ff       	call   c00007c0 <strcat>
c001169f:	59                   	pop    ecx
c00116a0:	5f                   	pop    edi
c00116a1:	53                   	push   ebx
c00116a2:	56                   	push   esi
c00116a3:	e8 18 f1 fe ff       	call   c00007c0 <strcat>
c00116a8:	58                   	pop    eax
c00116a9:	5a                   	pop    edx
c00116aa:	68 ac f0 01 c0       	push   0xc001f0ac
c00116af:	56                   	push   esi
c00116b0:	e8 0b f1 fe ff       	call   c00007c0 <strcat>
c00116b5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00116bc:	e8 b4 61 ff ff       	call   c0007875 <malloc>
c00116c1:	83 c4 0c             	add    esp,0xc
c00116c4:	89 c3                	mov    ebx,eax
c00116c6:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c00116cc:	56                   	push   esi
c00116cd:	50                   	push   eax
c00116ce:	e8 b1 94 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c00116d3:	83 c4 10             	add    esp,0x10
c00116d6:	85 db                	test   ebx,ebx
c00116d8:	74 7e                	je     c0011758 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00116da:	51                   	push   ecx
c00116db:	51                   	push   ecx
c00116dc:	6a 01                	push   0x1
c00116de:	53                   	push   ebx
c00116df:	e8 60 95 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c00116e4:	83 c4 10             	add    esp,0x10
c00116e7:	85 c0                	test   eax,eax
c00116e9:	74 08                	je     c00116f3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00116eb:	83 ec 0c             	sub    esp,0xc
c00116ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116f0:	53                   	push   ebx
c00116f1:	eb 5f                	jmp    c0011752 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00116f3:	52                   	push   edx
c00116f4:	8d 44 24 17          	lea    eax,[esp+0x17]
c00116f8:	50                   	push   eax
c00116f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00116fd:	50                   	push   eax
c00116fe:	53                   	push   ebx
c00116ff:	e8 ec 97 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0011704:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011708:	83 c4 10             	add    esp,0x10
c001170b:	89 c1                	mov    ecx,eax
c001170d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0011711:	74 31                	je     c0011744 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011713:	83 ec 0c             	sub    esp,0xc
c0011716:	50                   	push   eax
c0011717:	e8 59 61 ff ff       	call   c0007875 <malloc>
c001171c:	89 c6                	mov    esi,eax
c001171e:	58                   	pop    eax
c001171f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011721:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011725:	52                   	push   edx
c0011726:	56                   	push   esi
c0011727:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001172b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001172f:	53                   	push   ebx
c0011730:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011733:	83 c4 20             	add    esp,0x20
c0011736:	85 c0                	test   eax,eax
c0011738:	75 0a                	jne    c0011744 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001173a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001173e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011742:	74 18                	je     c001175c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0011744:	83 ec 0c             	sub    esp,0xc
c0011747:	53                   	push   ebx
c0011748:	e8 55 95 ff ff       	call   c000aca2 <File::close()>
c001174d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001174f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011752:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011755:	83 c4 10             	add    esp,0x10
c0011758:	31 c0                	xor    eax,eax
c001175a:	eb 3b                	jmp    c0011797 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001175c:	83 ec 0c             	sub    esp,0xc
c001175f:	53                   	push   ebx
c0011760:	e8 3d 95 ff ff       	call   c000aca2 <File::close()>
c0011765:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011767:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001176a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001176d:	83 c4 0c             	add    esp,0xc
c0011770:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0011777:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001177e:	56                   	push   esi
c001177f:	e8 70 fd ff ff       	call   c00114f4 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0011784:	89 34 24             	mov    DWORD PTR [esp],esi
c0011787:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001178b:	e8 f5 60 ff ff       	call   c0007885 <free>
c0011790:	83 c4 10             	add    esp,0x10
c0011793:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011797:	81 c4 20 01 00 00    	add    esp,0x120
c001179d:	5b                   	pop    ebx
c001179e:	5e                   	pop    esi
c001179f:	5f                   	pop    edi
c00117a0:	c3                   	ret    

c00117a1 <Reg::getLine(char*, char*, char*)>:
c00117a1:	57                   	push   edi
c00117a2:	56                   	push   esi
c00117a3:	53                   	push   ebx
c00117a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117a8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00117ac:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00117b0:	57                   	push   edi
c00117b1:	56                   	push   esi
c00117b2:	53                   	push   ebx
c00117b3:	68 b1 f0 01 c0       	push   0xc001f0b1
c00117b8:	e8 8f fe ff ff       	call   c001164c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00117bd:	83 c4 10             	add    esp,0x10
c00117c0:	84 c0                	test   al,al
c00117c2:	75 10                	jne    c00117d4 <Reg::getLine(char*, char*, char*)+0x33>
c00117c4:	57                   	push   edi
c00117c5:	56                   	push   esi
c00117c6:	53                   	push   ebx
c00117c7:	68 d6 f0 01 c0       	push   0xc001f0d6
c00117cc:	e8 7b fe ff ff       	call   c001164c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00117d1:	83 c4 10             	add    esp,0x10
c00117d4:	5b                   	pop    ebx
c00117d5:	5e                   	pop    esi
c00117d6:	5f                   	pop    edi
c00117d7:	c3                   	ret    

c00117d8 <Reg::readInt(char*, char*, int*)>:
c00117d8:	55                   	push   ebp
c00117d9:	57                   	push   edi
c00117da:	56                   	push   esi
c00117db:	53                   	push   ebx
c00117dc:	81 ec f0 00 00 00    	sub    esp,0xf0
c00117e2:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00117e6:	57                   	push   edi
c00117e7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00117ee:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00117f5:	e8 a7 ff ff ff       	call   c00117a1 <Reg::getLine(char*, char*, char*)>
c00117fa:	83 c4 10             	add    esp,0x10
c00117fd:	84 c0                	test   al,al
c00117ff:	0f 84 b3 00 00 00    	je     c00118b8 <Reg::readInt(char*, char*, int*)+0xe0>
c0011805:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0011809:	80 fa 2b             	cmp    dl,0x2b
c001180c:	74 0c                	je     c001181a <Reg::readInt(char*, char*, int*)+0x42>
c001180e:	80 fa 2d             	cmp    dl,0x2d
c0011811:	75 0e                	jne    c0011821 <Reg::readInt(char*, char*, int*)+0x49>
c0011813:	ba 01 00 00 00       	mov    edx,0x1
c0011818:	eb 0b                	jmp    c0011825 <Reg::readInt(char*, char*, int*)+0x4d>
c001181a:	ba 01 00 00 00       	mov    edx,0x1
c001181f:	eb 02                	jmp    c0011823 <Reg::readInt(char*, char*, int*)+0x4b>
c0011821:	31 d2                	xor    edx,edx
c0011823:	31 c0                	xor    eax,eax
c0011825:	be 0a 00 00 00       	mov    esi,0xa
c001182a:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001182f:	75 20                	jne    c0011851 <Reg::readInt(char*, char*, int*)+0x79>
c0011831:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0011835:	80 f9 78             	cmp    cl,0x78
c0011838:	75 0a                	jne    c0011844 <Reg::readInt(char*, char*, int*)+0x6c>
c001183a:	83 c2 02             	add    edx,0x2
c001183d:	be 10 00 00 00       	mov    esi,0x10
c0011842:	eb 0d                	jmp    c0011851 <Reg::readInt(char*, char*, int*)+0x79>
c0011844:	80 f9 62             	cmp    cl,0x62
c0011847:	75 08                	jne    c0011851 <Reg::readInt(char*, char*, int*)+0x79>
c0011849:	83 c2 02             	add    edx,0x2
c001184c:	be 02 00 00 00       	mov    esi,0x2
c0011851:	01 d7                	add    edi,edx
c0011853:	31 d2                	xor    edx,edx
c0011855:	8a 1f                	mov    bl,BYTE PTR [edi]
c0011857:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001185b:	80 fb 0d             	cmp    bl,0xd
c001185e:	0f 94 c3             	sete   bl
c0011861:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011866:	0f 94 c1             	sete   cl
c0011869:	08 cb                	or     bl,cl
c001186b:	75 3a                	jne    c00118a7 <Reg::readInt(char*, char*, int*)+0xcf>
c001186d:	0f af d6             	imul   edx,esi
c0011870:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0011875:	83 fe 10             	cmp    esi,0x10
c0011878:	75 26                	jne    c00118a0 <Reg::readInt(char*, char*, int*)+0xc8>
c001187a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001187e:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0011881:	89 e9                	mov    ecx,ebp
c0011883:	80 f9 05             	cmp    cl,0x5
c0011886:	77 06                	ja     c001188e <Reg::readInt(char*, char*, int*)+0xb6>
c0011888:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001188c:	eb 16                	jmp    c00118a4 <Reg::readInt(char*, char*, int*)+0xcc>
c001188e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011892:	83 e9 61             	sub    ecx,0x61
c0011895:	80 f9 05             	cmp    cl,0x5
c0011898:	77 06                	ja     c00118a0 <Reg::readInt(char*, char*, int*)+0xc8>
c001189a:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001189e:	eb 04                	jmp    c00118a4 <Reg::readInt(char*, char*, int*)+0xcc>
c00118a0:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00118a4:	47                   	inc    edi
c00118a5:	eb ae                	jmp    c0011855 <Reg::readInt(char*, char*, int*)+0x7d>
c00118a7:	84 c0                	test   al,al
c00118a9:	74 02                	je     c00118ad <Reg::readInt(char*, char*, int*)+0xd5>
c00118ab:	f7 da                	neg    edx
c00118ad:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00118b4:	89 10                	mov    DWORD PTR [eax],edx
c00118b6:	88 d8                	mov    al,bl
c00118b8:	81 c4 ec 00 00 00    	add    esp,0xec
c00118be:	5b                   	pop    ebx
c00118bf:	5e                   	pop    esi
c00118c0:	5f                   	pop    edi
c00118c1:	5d                   	pop    ebp
c00118c2:	c3                   	ret    

c00118c3 <Reg::readString(char*, char*, char*, int)>:
c00118c3:	57                   	push   edi
c00118c4:	56                   	push   esi
c00118c5:	53                   	push   ebx
c00118c6:	81 ec d4 00 00 00    	sub    esp,0xd4
c00118cc:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00118d3:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00118d7:	57                   	push   edi
c00118d8:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00118df:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00118e6:	e8 b6 fe ff ff       	call   c00117a1 <Reg::getLine(char*, char*, char*)>
c00118eb:	83 c4 10             	add    esp,0x10
c00118ee:	89 c6                	mov    esi,eax
c00118f0:	84 c0                	test   al,al
c00118f2:	74 44                	je     c0011938 <Reg::readString(char*, char*, char*, int)+0x75>
c00118f4:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00118fb:	31 c0                	xor    eax,eax
c00118fd:	4a                   	dec    edx
c00118fe:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0011901:	84 c9                	test   cl,cl
c0011903:	74 0f                	je     c0011914 <Reg::readString(char*, char*, char*, int)+0x51>
c0011905:	39 c2                	cmp    edx,eax
c0011907:	7e 0b                	jle    c0011914 <Reg::readString(char*, char*, char*, int)+0x51>
c0011909:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001190c:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0011911:	40                   	inc    eax
c0011912:	eb ea                	jmp    c00118fe <Reg::readString(char*, char*, char*, int)+0x3b>
c0011914:	83 ec 0c             	sub    esp,0xc
c0011917:	53                   	push   ebx
c0011918:	e8 23 ec fe ff       	call   c0000540 <strlen>
c001191d:	83 c4 10             	add    esp,0x10
c0011920:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0011925:	75 11                	jne    c0011938 <Reg::readString(char*, char*, char*, int)+0x75>
c0011927:	83 ec 0c             	sub    esp,0xc
c001192a:	53                   	push   ebx
c001192b:	e8 10 ec fe ff       	call   c0000540 <strlen>
c0011930:	83 c4 10             	add    esp,0x10
c0011933:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0011938:	81 c4 d0 00 00 00    	add    esp,0xd0
c001193e:	89 f0                	mov    eax,esi
c0011940:	5b                   	pop    ebx
c0011941:	5e                   	pop    esi
c0011942:	5f                   	pop    edi
c0011943:	c3                   	ret    

c0011944 <Reg::readBool(char*, char*, bool*)>:
c0011944:	83 ec 20             	sub    esp,0x20
c0011947:	8d 44 24 10          	lea    eax,[esp+0x10]
c001194b:	50                   	push   eax
c001194c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011950:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011954:	e8 7f fe ff ff       	call   c00117d8 <Reg::readInt(char*, char*, int*)>
c0011959:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001195e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0011962:	0f 95 02             	setne  BYTE PTR [edx]
c0011965:	83 c4 2c             	add    esp,0x2c
c0011968:	c3                   	ret    

c0011969 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0011969:	53                   	push   ebx
c001196a:	83 ec 1c             	sub    esp,0x1c
c001196d:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0011971:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011975:	50                   	push   eax
c0011976:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001197a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001197e:	e8 c1 ff ff ff       	call   c0011944 <Reg::readBool(char*, char*, bool*)>
c0011983:	83 c4 10             	add    esp,0x10
c0011986:	84 c0                	test   al,al
c0011988:	74 04                	je     c001198e <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001198a:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001198e:	88 d8                	mov    al,bl
c0011990:	83 c4 18             	add    esp,0x18
c0011993:	5b                   	pop    ebx
c0011994:	c3                   	ret    

c0011995 <Reg::readIntWithDefault(char*, char*, int)>:
c0011995:	53                   	push   ebx
c0011996:	83 ec 1c             	sub    esp,0x1c
c0011999:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001199d:	8d 44 24 10          	lea    eax,[esp+0x10]
c00119a1:	50                   	push   eax
c00119a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00119a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00119aa:	e8 29 fe ff ff       	call   c00117d8 <Reg::readInt(char*, char*, int*)>
c00119af:	83 c4 10             	add    esp,0x10
c00119b2:	84 c0                	test   al,al
c00119b4:	74 04                	je     c00119ba <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00119b6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00119ba:	89 d8                	mov    eax,ebx
c00119bc:	83 c4 18             	add    esp,0x18
c00119bf:	5b                   	pop    ebx
c00119c0:	c3                   	ret    

c00119c1 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00119c1:	57                   	push   edi
c00119c2:	56                   	push   esi
c00119c3:	56                   	push   esi
c00119c4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00119c8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00119cc:	56                   	push   esi
c00119cd:	57                   	push   edi
c00119ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d6:	e8 e8 fe ff ff       	call   c00118c3 <Reg::readString(char*, char*, char*, int)>
c00119db:	83 c4 10             	add    esp,0x10
c00119de:	84 c0                	test   al,al
c00119e0:	75 1a                	jne    c00119fc <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00119e2:	51                   	push   ecx
c00119e3:	56                   	push   esi
c00119e4:	6a 00                	push   0x0
c00119e6:	57                   	push   edi
c00119e7:	e8 e4 ea fe ff       	call   c00004d0 <memset>
c00119ec:	8d 4e ff             	lea    ecx,[esi-0x1]
c00119ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00119f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119f5:	83 c4 10             	add    esp,0x10
c00119f8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00119fc:	89 f8                	mov    eax,edi
c00119fe:	5a                   	pop    edx
c00119ff:	5e                   	pop    esi
c0011a00:	5f                   	pop    edi
c0011a01:	c3                   	ret    

c0011a02 <SysEject(regs*)>:
c0011a02:	83 ec 0c             	sub    esp,0xc
c0011a05:	83 ca ff             	or     edx,0xffffffff
c0011a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a0c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011a0f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a14:	83 e9 41             	sub    ecx,0x41
c0011a17:	83 f9 19             	cmp    ecx,0x19
c0011a1a:	77 18                	ja     c0011a34 <SysEject(regs*)+0x32>
c0011a1c:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c0011a23:	85 c9                	test   ecx,ecx
c0011a25:	74 0d                	je     c0011a34 <SysEject(regs*)+0x32>
c0011a27:	83 ec 0c             	sub    esp,0xc
c0011a2a:	51                   	push   ecx
c0011a2b:	e8 8a b2 ff ff       	call   c000ccba <LogicalDisk::eject()>
c0011a30:	83 c4 10             	add    esp,0x10
c0011a33:	99                   	cdq    
c0011a34:	83 c4 0c             	add    esp,0xc
c0011a37:	c3                   	ret    

c0011a38 <SysExit(regs*)>:
c0011a38:	83 ec 18             	sub    esp,0x18
c0011a3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a3f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011a42:	e8 11 27 00 00       	call   c0014158 <terminateTask(int)>
c0011a47:	83 c8 ff             	or     eax,0xffffffff
c0011a4a:	83 c4 1c             	add    esp,0x1c
c0011a4d:	89 c2                	mov    edx,eax
c0011a4f:	c3                   	ret    

c0011a50 <SysGetCwd(regs*)>:
c0011a50:	83 ec 10             	sub    esp,0x10
c0011a53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011a57:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0011a5a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011a5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a62:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011a65:	e8 1c 8f ff ff       	call   c000a986 <Fs::getcwd(Process*, char*, int)>
c0011a6a:	83 c4 1c             	add    esp,0x1c
c0011a6d:	99                   	cdq    
c0011a6e:	c3                   	ret    

c0011a6f <SysGetPID(regs*)>:
c0011a6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a74:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a77:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a79:	99                   	cdq    
c0011a7a:	c3                   	ret    

c0011a7b <SysGetRAMData(regs*)>:
c0011a7b:	8b 0d e8 2e 02 c0    	mov    ecx,DWORD PTR ds:0xc0022ee8
c0011a81:	69 05 e4 2e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0022ee4,0xc8
c0011a8b:	99                   	cdq    
c0011a8c:	f7 f9                	idiv   ecx
c0011a8e:	c1 e0 18             	shl    eax,0x18
c0011a91:	09 c8                	or     eax,ecx
c0011a93:	99                   	cdq    
c0011a94:	c3                   	ret    

c0011a95 <SysGetVGAPtr(regs*)>:
c0011a95:	55                   	push   ebp
c0011a96:	57                   	push   edi
c0011a97:	56                   	push   esi
c0011a98:	53                   	push   ebx
c0011a99:	83 ec 18             	sub    esp,0x18
c0011a9c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011aa0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011aa3:	e8 b0 21 00 00       	call   c0013c58 <Thr::processFromPID(int)>
c0011aa8:	83 c4 10             	add    esp,0x10
c0011aab:	89 c1                	mov    ecx,eax
c0011aad:	b8 01 00 00 00       	mov    eax,0x1
c0011ab2:	85 c9                	test   ecx,ecx
c0011ab4:	74 57                	je     c0011b0d <SysGetVGAPtr(regs*)+0x78>
c0011ab6:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011abc:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011ac0:	74 0c                	je     c0011ace <SysGetVGAPtr(regs*)+0x39>
c0011ac2:	83 ec 0c             	sub    esp,0xc
c0011ac5:	55                   	push   ebp
c0011ac6:	e8 e8 69 ff ff       	call   c00084b3 <setActiveTerminal(VgaText*)>
c0011acb:	83 c4 10             	add    esp,0x10
c0011ace:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011ad1:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011ad4:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011ad9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011adb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011ade:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ae1:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011ae7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011aea:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011aed:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011af3:	50                   	push   eax
c0011af4:	50                   	push   eax
c0011af5:	68 f1 f0 01 c0       	push   0xc001f0f1
c0011afa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011afd:	05 a8 0f 00 00       	add    eax,0xfa8
c0011b02:	50                   	push   eax
c0011b03:	e8 f8 ea fe ff       	call   c0000600 <strcpy>
c0011b08:	83 c4 10             	add    esp,0x10
c0011b0b:	31 c0                	xor    eax,eax
c0011b0d:	83 c4 0c             	add    esp,0xc
c0011b10:	31 d2                	xor    edx,edx
c0011b12:	5b                   	pop    ebx
c0011b13:	5e                   	pop    esi
c0011b14:	5f                   	pop    edi
c0011b15:	5d                   	pop    ebp
c0011b16:	c3                   	ret    

c0011b17 <SysLoadDLL(regs*)>:
c0011b17:	56                   	push   esi
c0011b18:	53                   	push   ebx
c0011b19:	31 d2                	xor    edx,edx
c0011b1b:	51                   	push   ecx
c0011b1c:	b8 01 00 00 00       	mov    eax,0x1
c0011b21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011b25:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011b29:	0f 84 8c 00 00 00    	je     c0011bbb <SysLoadDLL(regs*)+0xa4>
c0011b2f:	83 ec 0c             	sub    esp,0xc
c0011b32:	68 14 01 00 00       	push   0x114
c0011b37:	e8 39 5d ff ff       	call   c0007875 <malloc>
c0011b3c:	83 c4 0c             	add    esp,0xc
c0011b3f:	89 c3                	mov    ebx,eax
c0011b41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b46:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011b49:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011b4c:	53                   	push   ebx
c0011b4d:	e8 32 90 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0011b52:	83 c4 10             	add    esp,0x10
c0011b55:	31 d2                	xor    edx,edx
c0011b57:	b8 02 00 00 00       	mov    eax,0x2
c0011b5c:	85 db                	test   ebx,ebx
c0011b5e:	74 5b                	je     c0011bbb <SysLoadDLL(regs*)+0xa4>
c0011b60:	83 ec 0c             	sub    esp,0xc
c0011b63:	53                   	push   ebx
c0011b64:	e8 49 93 ff ff       	call   c000aeb2 <File::exists()>
c0011b69:	83 c4 10             	add    esp,0x10
c0011b6c:	84 c0                	test   al,al
c0011b6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b70:	75 11                	jne    c0011b83 <SysLoadDLL(regs*)+0x6c>
c0011b72:	83 ec 0c             	sub    esp,0xc
c0011b75:	53                   	push   ebx
c0011b76:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b79:	83 c4 10             	add    esp,0x10
c0011b7c:	b8 03 00 00 00       	mov    eax,0x3
c0011b81:	eb 36                	jmp    c0011bb9 <SysLoadDLL(regs*)+0xa2>
c0011b83:	83 ec 0c             	sub    esp,0xc
c0011b86:	53                   	push   ebx
c0011b87:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b8a:	58                   	pop    eax
c0011b8b:	5a                   	pop    edx
c0011b8c:	6a 00                	push   0x0
c0011b8e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011b91:	e8 74 12 00 00       	call   c0012e0a <Thr::loadDLL(char const*, bool)>
c0011b96:	83 c4 10             	add    esp,0x10
c0011b99:	89 c1                	mov    ecx,eax
c0011b9b:	31 d2                	xor    edx,edx
c0011b9d:	b8 04 00 00 00       	mov    eax,0x4
c0011ba2:	85 c9                	test   ecx,ecx
c0011ba4:	74 15                	je     c0011bbb <SysLoadDLL(regs*)+0xa4>
c0011ba6:	53                   	push   ebx
c0011ba7:	53                   	push   ebx
c0011ba8:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0011bae:	51                   	push   ecx
c0011baf:	e8 87 14 00 00       	call   c001303b <Thr::executeDLL(unsigned long, void*)>
c0011bb4:	83 c4 10             	add    esp,0x10
c0011bb7:	31 c0                	xor    eax,eax
c0011bb9:	31 d2                	xor    edx,edx
c0011bbb:	59                   	pop    ecx
c0011bbc:	5b                   	pop    ebx
c0011bbd:	5e                   	pop    esi
c0011bbe:	c3                   	ret    

c0011bbf <SysRead(regs*)>:
c0011bbf:	57                   	push   edi
c0011bc0:	56                   	push   esi
c0011bc1:	53                   	push   ebx
c0011bc2:	83 ec 10             	sub    esp,0x10
c0011bc5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011bc9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011bcc:	83 f8 02             	cmp    eax,0x2
c0011bcf:	77 10                	ja     c0011be1 <SysRead(regs*)+0x22>
c0011bd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bd6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bd9:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011bdf:	eb 0e                	jmp    c0011bef <SysRead(regs*)+0x30>
c0011be1:	83 ec 0c             	sub    esp,0xc
c0011be4:	50                   	push   eax
c0011be5:	e8 11 76 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0011bea:	83 c4 10             	add    esp,0x10
c0011bed:	89 c1                	mov    ecx,eax
c0011bef:	83 c8 ff             	or     eax,0xffffffff
c0011bf2:	85 c9                	test   ecx,ecx
c0011bf4:	89 c2                	mov    edx,eax
c0011bf6:	74 28                	je     c0011c20 <SysRead(regs*)+0x61>
c0011bf8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c00:	31 ff                	xor    edi,edi
c0011c02:	83 ec 0c             	sub    esp,0xc
c0011c05:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011c07:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011c0b:	52                   	push   edx
c0011c0c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011c0f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011c12:	57                   	push   edi
c0011c13:	56                   	push   esi
c0011c14:	51                   	push   ecx
c0011c15:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011c18:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c1c:	83 c4 20             	add    esp,0x20
c0011c1f:	99                   	cdq    
c0011c20:	83 c4 10             	add    esp,0x10
c0011c23:	5b                   	pop    ebx
c0011c24:	5e                   	pop    esi
c0011c25:	5f                   	pop    edi
c0011c26:	c3                   	ret    

c0011c27 <SysRegisterSignal(regs*)>:
c0011c27:	83 ec 18             	sub    esp,0x18
c0011c2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c2e:	6a 00                	push   0x0
c0011c30:	6a 00                	push   0x0
c0011c32:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011c35:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011c38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c3d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c40:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c46:	e8 82 ea ff ff       	call   c00106cd <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011c4b:	83 c4 2c             	add    esp,0x2c
c0011c4e:	99                   	cdq    
c0011c4f:	c3                   	ret    

c0011c50 <SysSbrk(regs*)>:
c0011c50:	56                   	push   esi
c0011c51:	53                   	push   ebx
c0011c52:	50                   	push   eax
c0011c53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011c5c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c5f:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0011c62:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011c68:	85 db                	test   ebx,ebx
c0011c6a:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011c6d:	74 02                	je     c0011c71 <SysSbrk(regs*)+0x21>
c0011c6f:	79 06                	jns    c0011c77 <SysSbrk(regs*)+0x27>
c0011c71:	89 f0                	mov    eax,esi
c0011c73:	31 d2                	xor    edx,edx
c0011c75:	eb 2a                	jmp    c0011ca1 <SysSbrk(regs*)+0x51>
c0011c77:	83 c8 ff             	or     eax,0xffffffff
c0011c7a:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011c80:	89 c2                	mov    edx,eax
c0011c82:	77 1d                	ja     c0011ca1 <SysSbrk(regs*)+0x51>
c0011c84:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011c8a:	50                   	push   eax
c0011c8b:	c1 ea 0c             	shr    edx,0xc
c0011c8e:	68 07 0c 00 00       	push   0xc07
c0011c93:	52                   	push   edx
c0011c94:	51                   	push   ecx
c0011c95:	e8 7e 7e ff ff       	call   c0009b18 <VAS::allocatePages(int, int)>
c0011c9a:	89 f0                	mov    eax,esi
c0011c9c:	31 d2                	xor    edx,edx
c0011c9e:	83 c4 10             	add    esp,0x10
c0011ca1:	59                   	pop    ecx
c0011ca2:	5b                   	pop    ebx
c0011ca3:	5e                   	pop    esi
c0011ca4:	c3                   	ret    

c0011ca5 <SysSetCwd(regs*)>:
c0011ca5:	83 ec 14             	sub    esp,0x14
c0011ca8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011cac:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011caf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cb4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011cb7:	e8 95 92 ff ff       	call   c000af51 <Fs::setcwd(Process*, char*)>
c0011cbc:	83 c4 1c             	add    esp,0x1c
c0011cbf:	99                   	cdq    
c0011cc0:	c3                   	ret    

c0011cc1 <SysSetTime(regs*)>:
c0011cc1:	55                   	push   ebp
c0011cc2:	31 c9                	xor    ecx,ecx
c0011cc4:	57                   	push   edi
c0011cc5:	bd 0c 00 00 00       	mov    ebp,0xc
c0011cca:	56                   	push   esi
c0011ccb:	53                   	push   ebx
c0011ccc:	31 db                	xor    ebx,ebx
c0011cce:	83 ec 10             	sub    esp,0x10
c0011cd1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011cd5:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011cd8:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011cdb:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011cde:	89 c2                	mov    edx,eax
c0011ce0:	66 81 ef 6c 07       	sub    di,0x76c
c0011ce5:	83 e2 1f             	and    edx,0x1f
c0011ce8:	c1 e7 10             	shl    edi,0x10
c0011ceb:	42                   	inc    edx
c0011cec:	c1 e8 05             	shr    eax,0x5
c0011cef:	88 d1                	mov    cl,dl
c0011cf1:	31 d2                	xor    edx,edx
c0011cf3:	f7 f5                	div    ebp
c0011cf5:	89 dd                	mov    ebp,ebx
c0011cf7:	88 d5                	mov    ch,dl
c0011cf9:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011cff:	0f b7 c1             	movzx  eax,cx
c0011d02:	31 d2                	xor    edx,edx
c0011d04:	09 f8                	or     eax,edi
c0011d06:	bf 3c 00 00 00       	mov    edi,0x3c
c0011d0b:	89 c1                	mov    ecx,eax
c0011d0d:	89 f0                	mov    eax,esi
c0011d0f:	f7 f7                	div    edi
c0011d11:	c1 e2 10             	shl    edx,0x10
c0011d14:	09 d5                	or     ebp,edx
c0011d16:	31 d2                	xor    edx,edx
c0011d18:	89 eb                	mov    ebx,ebp
c0011d1a:	f7 f7                	div    edi
c0011d1c:	bf 10 0e 00 00       	mov    edi,0xe10
c0011d21:	88 d7                	mov    bh,dl
c0011d23:	89 f0                	mov    eax,esi
c0011d25:	31 d2                	xor    edx,edx
c0011d27:	f7 f7                	div    edi
c0011d29:	bf 18 00 00 00       	mov    edi,0x18
c0011d2e:	31 d2                	xor    edx,edx
c0011d30:	f7 f7                	div    edi
c0011d32:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0011d37:	88 d3                	mov    bl,dl
c0011d39:	53                   	push   ebx
c0011d3a:	51                   	push   ecx
c0011d3b:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011d41:	e8 1a 9a ff ff       	call   c000b760 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011d46:	83 c4 1c             	add    esp,0x1c
c0011d49:	83 f0 01             	xor    eax,0x1
c0011d4c:	5b                   	pop    ebx
c0011d4d:	0f b6 c0             	movzx  eax,al
c0011d50:	5e                   	pop    esi
c0011d51:	31 d2                	xor    edx,edx
c0011d53:	5f                   	pop    edi
c0011d54:	5d                   	pop    ebp
c0011d55:	c3                   	ret    

c0011d56 <SysTimezone(regs*)>:
c0011d56:	53                   	push   ebx
c0011d57:	83 ec 08             	sub    esp,0x8
c0011d5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d5e:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011d62:	75 17                	jne    c0011d7b <SysTimezone(regs*)+0x25>
c0011d64:	83 ec 0c             	sub    esp,0xc
c0011d67:	68 fb f0 01 c0       	push   0xc001f0fb
c0011d6c:	e8 9d 88 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0011d71:	83 c8 ff             	or     eax,0xffffffff
c0011d74:	83 c4 10             	add    esp,0x10
c0011d77:	89 c2                	mov    edx,eax
c0011d79:	eb 20                	jmp    c0011d9b <SysTimezone(regs*)+0x45>
c0011d7b:	83 ec 0c             	sub    esp,0xc
c0011d7e:	68 10 f1 01 c0       	push   0xc001f110
c0011d83:	e8 86 88 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0011d88:	58                   	pop    eax
c0011d89:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011d8c:	e8 2b 97 ff ff       	call   c000b4bc <User::loadClockSettings(int)>
c0011d91:	83 c4 10             	add    esp,0x10
c0011d94:	b8 01 00 00 00       	mov    eax,0x1
c0011d99:	31 d2                	xor    edx,edx
c0011d9b:	83 c4 08             	add    esp,0x8
c0011d9e:	5b                   	pop    ebx
c0011d9f:	c3                   	ret    

c0011da0 <SysWrite(regs*)>:
c0011da0:	57                   	push   edi
c0011da1:	56                   	push   esi
c0011da2:	53                   	push   ebx
c0011da3:	83 ec 10             	sub    esp,0x10
c0011da6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011daa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011dad:	83 f8 02             	cmp    eax,0x2
c0011db0:	77 10                	ja     c0011dc2 <SysWrite(regs*)+0x22>
c0011db2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011db7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dba:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011dc0:	eb 0e                	jmp    c0011dd0 <SysWrite(regs*)+0x30>
c0011dc2:	83 ec 0c             	sub    esp,0xc
c0011dc5:	50                   	push   eax
c0011dc6:	e8 30 74 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0011dcb:	83 c4 10             	add    esp,0x10
c0011dce:	89 c1                	mov    ecx,eax
c0011dd0:	83 c8 ff             	or     eax,0xffffffff
c0011dd3:	85 c9                	test   ecx,ecx
c0011dd5:	89 c2                	mov    edx,eax
c0011dd7:	74 28                	je     c0011e01 <SysWrite(regs*)+0x61>
c0011dd9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011de1:	31 ff                	xor    edi,edi
c0011de3:	83 ec 0c             	sub    esp,0xc
c0011de6:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011de8:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011dec:	52                   	push   edx
c0011ded:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011df0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011df3:	57                   	push   edi
c0011df4:	56                   	push   esi
c0011df5:	51                   	push   ecx
c0011df6:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011df9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dfd:	83 c4 20             	add    esp,0x20
c0011e00:	99                   	cdq    
c0011e01:	83 c4 10             	add    esp,0x10
c0011e04:	5b                   	pop    ebx
c0011e05:	5e                   	pop    esi
c0011e06:	5f                   	pop    edi
c0011e07:	c3                   	ret    

c0011e08 <SysWsbe(regs*)>:
c0011e08:	57                   	push   edi
c0011e09:	b9 0b 00 00 00       	mov    ecx,0xb
c0011e0e:	56                   	push   esi
c0011e0f:	be 4f f1 01 c0       	mov    esi,0xc001f14f
c0011e14:	53                   	push   ebx
c0011e15:	83 ec 30             	sub    esp,0x30
c0011e18:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011e1c:	fc                   	cld    
c0011e1d:	83 ec 0c             	sub    esp,0xc
c0011e20:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011e22:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011e26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e2b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e2e:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011e34:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e36:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011e39:	57                   	push   edi
c0011e3a:	e8 01 e7 fe ff       	call   c0000540 <strlen>
c0011e3f:	5a                   	pop    edx
c0011e40:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011e44:	52                   	push   edx
c0011e45:	31 d2                	xor    edx,edx
c0011e47:	57                   	push   edi
c0011e48:	52                   	push   edx
c0011e49:	50                   	push   eax
c0011e4a:	56                   	push   esi
c0011e4b:	ff d3                	call   ebx
c0011e4d:	83 c4 14             	add    esp,0x14
c0011e50:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011e54:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011e57:	e8 fc 22 00 00       	call   c0014158 <terminateTask(int)>
c0011e5c:	83 c4 40             	add    esp,0x40
c0011e5f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011e64:	5b                   	pop    ebx
c0011e65:	31 d2                	xor    edx,edx
c0011e67:	5e                   	pop    esi
c0011e68:	5f                   	pop    edi
c0011e69:	c3                   	ret    

c0011e6a <SysYield(regs*)>:
c0011e6a:	83 ec 0c             	sub    esp,0xc
c0011e6d:	fa                   	cli    
c0011e6e:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0011e74:	e8 bb 19 00 00       	call   c0013834 <schedule()>
c0011e79:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0011e7e:	48                   	dec    eax
c0011e7f:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0011e84:	75 01                	jne    c0011e87 <SysYield(regs*)+0x1d>
c0011e86:	fb                   	sti    
c0011e87:	31 c0                	xor    eax,eax
c0011e89:	31 d2                	xor    edx,edx
c0011e8b:	83 c4 0c             	add    esp,0xc
c0011e8e:	c3                   	ret    

c0011e8f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011e8f:	55                   	push   ebp
c0011e90:	57                   	push   edi
c0011e91:	56                   	push   esi
c0011e92:	53                   	push   ebx
c0011e93:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011e99:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011ea1:	0f 95 c2             	setne  dl
c0011ea4:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011eac:	0f 94 c0             	sete   al
c0011eaf:	84 c2                	test   dl,al
c0011eb1:	74 34                	je     c0011ee7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011eb3:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011ebe:	74 27                	je     c0011ee7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011ec0:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011ec7:	05 00 10 00 00       	add    eax,0x1000
c0011ecc:	89 c1                	mov    ecx,eax
c0011ece:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ed3:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011ed9:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011ee0:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011ee7:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011eee:	83 ec 0c             	sub    esp,0xc
c0011ef1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011ef7:	6a 01                	push   0x1
c0011ef9:	e8 53 74 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c0011efe:	83 c4 10             	add    esp,0x10
c0011f01:	89 c3                	mov    ebx,eax
c0011f03:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011f09:	0f 86 25 01 00 00    	jbe    c0012034 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011f0f:	c1 ee 0c             	shr    esi,0xc
c0011f12:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011f19:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011f1d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011f25:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011f2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f30:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011f37:	29 ef                	sub    edi,ebp
c0011f39:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011f3d:	0f 83 f8 00 00 00    	jae    c001203b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011f43:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011f49:	76 05                	jbe    c0011f50 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011f4b:	bf 00 10 00 00       	mov    edi,0x1000
c0011f50:	83 ec 0c             	sub    esp,0xc
c0011f53:	31 d2                	xor    edx,edx
c0011f55:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011f5c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011f5e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011f62:	50                   	push   eax
c0011f63:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011f67:	56                   	push   esi
c0011f68:	52                   	push   edx
c0011f69:	57                   	push   edi
c0011f6a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011f71:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011f74:	83 c4 20             	add    esp,0x20
c0011f77:	85 c0                	test   eax,eax
c0011f79:	75 06                	jne    c0011f81 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011f7b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011f7f:	74 13                	je     c0011f94 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011f81:	83 ec 0c             	sub    esp,0xc
c0011f84:	53                   	push   ebx
c0011f85:	e8 bb 76 ff ff       	call   c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f8a:	83 c4 10             	add    esp,0x10
c0011f8d:	31 c0                	xor    eax,eax
c0011f8f:	e9 7c 01 00 00       	jmp    c0012110 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011f94:	fa                   	cli    
c0011f95:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0011f9b:	e8 b1 5b ff ff       	call   c0007b51 <Phys::allocatePage()>
c0011fa0:	6a 07                	push   0x7
c0011fa2:	89 c7                	mov    edi,eax
c0011fa4:	53                   	push   ebx
c0011fa5:	50                   	push   eax
c0011fa6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fae:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fb4:	e8 5b 7a ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011fb9:	83 c4 0c             	add    esp,0xc
c0011fbc:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011fc3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fc9:	6a 00                	push   0x0
c0011fcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fd0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fd3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fd9:	e8 a8 78 ff ff       	call   c0009886 <VAS::mapOtherVASIn(bool, VAS*)>
c0011fde:	58                   	pop    eax
c0011fdf:	5a                   	pop    edx
c0011fe0:	68 07 0c 00 00       	push   0xc07
c0011fe5:	55                   	push   ebp
c0011fe6:	57                   	push   edi
c0011fe7:	89 df                	mov    edi,ebx
c0011fe9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011ff0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ff6:	6a 00                	push   0x0
c0011ff8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ffd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012000:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012006:	e8 c9 7d ff ff       	call   c0009dd4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001200b:	b9 00 10 00 00       	mov    ecx,0x1000
c0012010:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012012:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0012017:	83 c4 20             	add    esp,0x20
c001201a:	48                   	dec    eax
c001201b:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0012020:	85 c0                	test   eax,eax
c0012022:	75 01                	jne    c0012025 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0012024:	fb                   	sti    
c0012025:	81 c5 00 10 00 00    	add    ebp,0x1000
c001202b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001202f:	e9 f1 fe ff ff       	jmp    c0011f25 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0012034:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001203b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012042:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012048:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001204e:	0f 86 ae 00 00 00    	jbe    c0012102 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012054:	fa                   	cli    
c0012055:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001205b:	c1 ee 0c             	shr    esi,0xc
c001205e:	51                   	push   ecx
c001205f:	31 ff                	xor    edi,edi
c0012061:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012068:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001206e:	6a 00                	push   0x0
c0012070:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012075:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012078:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001207e:	e8 03 78 ff ff       	call   c0009886 <VAS::mapOtherVASIn(bool, VAS*)>
c0012083:	83 c4 10             	add    esp,0x10
c0012086:	e8 c6 5a ff ff       	call   c0007b51 <Phys::allocatePage()>
c001208b:	47                   	inc    edi
c001208c:	6a 07                	push   0x7
c001208e:	53                   	push   ebx
c001208f:	50                   	push   eax
c0012090:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012094:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001209a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001209d:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00120a3:	e8 6c 79 ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c00120a8:	58                   	pop    eax
c00120a9:	5a                   	pop    edx
c00120aa:	68 07 0c 00 00       	push   0xc07
c00120af:	55                   	push   ebp
c00120b0:	81 c5 00 10 00 00    	add    ebp,0x1000
c00120b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120ba:	50                   	push   eax
c00120bb:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00120c2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00120c8:	6a 00                	push   0x0
c00120ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120d2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00120d8:	e8 f7 7c ff ff       	call   c0009dd4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00120dd:	83 c4 1c             	add    esp,0x1c
c00120e0:	68 00 10 00 00       	push   0x1000
c00120e5:	6a 00                	push   0x0
c00120e7:	53                   	push   ebx
c00120e8:	e8 e3 e3 fe ff       	call   c00004d0 <memset>
c00120ed:	83 c4 10             	add    esp,0x10
c00120f0:	39 fe                	cmp    esi,edi
c00120f2:	77 92                	ja     c0012086 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c00120f4:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00120f9:	48                   	dec    eax
c00120fa:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00120ff:	75 01                	jne    c0012102 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012101:	fb                   	sti    
c0012102:	83 ec 0c             	sub    esp,0xc
c0012105:	53                   	push   ebx
c0012106:	e8 3a 75 ff ff       	call   c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c001210b:	83 c4 10             	add    esp,0x10
c001210e:	b0 01                	mov    al,0x1
c0012110:	81 c4 2c 10 00 00    	add    esp,0x102c
c0012116:	5b                   	pop    ebx
c0012117:	5e                   	pop    esi
c0012118:	5f                   	pop    edi
c0012119:	5d                   	pop    ebp
c001211a:	c3                   	ret    

c001211b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001211b:	55                   	push   ebp
c001211c:	57                   	push   edi
c001211d:	56                   	push   esi
c001211e:	53                   	push   ebx
c001211f:	83 ec 48             	sub    esp,0x48
c0012122:	68 14 01 00 00       	push   0x114
c0012127:	e8 49 57 ff ff       	call   c0007875 <malloc>
c001212c:	83 c4 0c             	add    esp,0xc
c001212f:	89 c6                	mov    esi,eax
c0012131:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012135:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012139:	50                   	push   eax
c001213a:	e8 45 8a ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c001213f:	58                   	pop    eax
c0012140:	5a                   	pop    edx
c0012141:	6a 01                	push   0x1
c0012143:	56                   	push   esi
c0012144:	e8 fb 8a ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c0012149:	83 c4 10             	add    esp,0x10
c001214c:	85 c0                	test   eax,eax
c001214e:	0f 85 47 01 00 00    	jne    c001229b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012154:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001215c:	83 ec 0c             	sub    esp,0xc
c001215f:	6a 34                	push   0x34
c0012161:	e8 0f 57 ff ff       	call   c0007875 <malloc>
c0012166:	89 c3                	mov    ebx,eax
c0012168:	58                   	pop    eax
c0012169:	8b 06                	mov    eax,DWORD PTR [esi]
c001216b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001216f:	57                   	push   edi
c0012170:	53                   	push   ebx
c0012171:	6a 00                	push   0x0
c0012173:	6a 34                	push   0x34
c0012175:	56                   	push   esi
c0012176:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012179:	83 c4 20             	add    esp,0x20
c001217c:	85 c0                	test   eax,eax
c001217e:	0f 85 17 01 00 00    	jne    c001229b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012184:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001218a:	0f 85 0b 01 00 00    	jne    c001229b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012190:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012193:	85 c0                	test   eax,eax
c0012195:	0f 84 00 01 00 00    	je     c001229b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001219b:	31 d2                	xor    edx,edx
c001219d:	55                   	push   ebp
c001219e:	52                   	push   edx
c001219f:	50                   	push   eax
c00121a0:	56                   	push   esi
c00121a1:	e8 5c 8b ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c00121a6:	83 c4 10             	add    esp,0x10
c00121a9:	85 c0                	test   eax,eax
c00121ab:	0f 85 ea 00 00 00    	jne    c001229b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121b1:	83 ec 0c             	sub    esp,0xc
c00121b4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00121b7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00121bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00121bf:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00121c3:	0f af c2             	imul   eax,edx
c00121c6:	50                   	push   eax
c00121c7:	e8 a9 56 ff ff       	call   c0007875 <malloc>
c00121cc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00121ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00121d2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121d5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00121d9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00121dd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00121e1:	0f af c2             	imul   eax,edx
c00121e4:	99                   	cdq    
c00121e5:	52                   	push   edx
c00121e6:	50                   	push   eax
c00121e7:	56                   	push   esi
c00121e8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121eb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00121ee:	83 c4 20             	add    esp,0x20
c00121f1:	85 c0                	test   eax,eax
c00121f3:	0f 84 a2 00 00 00    	je     c001229b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121f9:	31 d2                	xor    edx,edx
c00121fb:	51                   	push   ecx
c00121fc:	52                   	push   edx
c00121fd:	50                   	push   eax
c00121fe:	56                   	push   esi
c00121ff:	e8 fe 8a ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0012204:	83 c4 10             	add    esp,0x10
c0012207:	85 c0                	test   eax,eax
c0012209:	0f 85 8c 00 00 00    	jne    c001229b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001220f:	83 ec 0c             	sub    esp,0xc
c0012212:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012216:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001221a:	31 ed                	xor    ebp,ebp
c001221c:	0f af c2             	imul   eax,edx
c001221f:	50                   	push   eax
c0012220:	e8 50 56 ff ff       	call   c0007875 <malloc>
c0012225:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012227:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001222b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001222e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012232:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012236:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001223a:	0f af c2             	imul   eax,edx
c001223d:	99                   	cdq    
c001223e:	52                   	push   edx
c001223f:	50                   	push   eax
c0012240:	56                   	push   esi
c0012241:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012244:	83 c4 20             	add    esp,0x20
c0012247:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001224f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0012253:	0f 86 80 00 00 00    	jbe    c00122d9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0012259:	0f b7 fd             	movzx  edi,bp
c001225c:	c1 e7 05             	shl    edi,0x5
c001225f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0012263:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0012266:	75 6b                	jne    c00122d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012268:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001226b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001226f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0012272:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012276:	52                   	push   edx
c0012277:	31 d2                	xor    edx,edx
c0012279:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001227c:	52                   	push   edx
c001227d:	50                   	push   eax
c001227e:	56                   	push   esi
c001227f:	e8 7e 8a ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0012284:	83 c4 10             	add    esp,0x10
c0012287:	85 c0                	test   eax,eax
c0012289:	74 17                	je     c00122a2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001228b:	83 ec 0c             	sub    esp,0xc
c001228e:	68 7b f1 01 c0       	push   0xc001f17b
c0012293:	e8 76 83 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0012298:	83 c4 10             	add    esp,0x10
c001229b:	31 c0                	xor    eax,eax
c001229d:	e9 87 00 00 00       	jmp    c0012329 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00122a2:	83 ec 0c             	sub    esp,0xc
c00122a5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00122a8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00122ab:	50                   	push   eax
c00122ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00122b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00122b4:	56                   	push   esi
c00122b5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00122b9:	e8 d1 fb ff ff       	call   c0011e8f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00122be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122c2:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00122c6:	83 c4 20             	add    esp,0x20
c00122c9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00122cd:	73 04                	jae    c00122d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00122cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122d3:	45                   	inc    ebp
c00122d4:	e9 76 ff ff ff       	jmp    c001224f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00122d9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00122dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122e5:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00122eb:	83 ec 0c             	sub    esp,0xc
c00122ee:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00122f4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122f9:	05 00 10 00 00       	add    eax,0x1000
c00122fe:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012301:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012305:	e8 7b 55 ff ff       	call   c0007885 <free>
c001230a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001230d:	e8 73 55 ff ff       	call   c0007885 <free>
c0012312:	58                   	pop    eax
c0012313:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012317:	e8 69 55 ff ff       	call   c0007885 <free>
c001231c:	89 34 24             	mov    DWORD PTR [esp],esi
c001231f:	e8 7e 89 ff ff       	call   c000aca2 <File::close()>
c0012324:	83 c4 10             	add    esp,0x10
c0012327:	b0 01                	mov    al,0x1
c0012329:	83 c4 3c             	add    esp,0x3c
c001232c:	5b                   	pop    ebx
c001232d:	5e                   	pop    esi
c001232e:	5f                   	pop    edi
c001232f:	5d                   	pop    ebp
c0012330:	c3                   	ret    

c0012331 <Thr::runtimeReferenceHelper()>:
c0012331:	83 ec 18             	sub    esp,0x18
c0012334:	68 83 f1 01 c0       	push   0xc001f183
c0012339:	e8 d0 82 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001233e:	fa                   	cli    
c001233f:	83 c4 10             	add    esp,0x10
c0012342:	eb fe                	jmp    c0012342 <Thr::runtimeReferenceHelper()+0x11>

c0012344 <Thr::getAddressOfKernelSymbol(char const*)>:
c0012344:	57                   	push   edi
c0012345:	56                   	push   esi
c0012346:	53                   	push   ebx
c0012347:	31 db                	xor    ebx,ebx
c0012349:	39 1d 40 61 02 c0    	cmp    DWORD PTR ds:0xc0026140,ebx
c001234f:	7e 3c                	jle    c001238d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0012351:	8b 34 9d c0 60 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd9f40]
c0012358:	31 ff                	xor    edi,edi
c001235a:	39 3c 9d c0 5f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffda040],edi
c0012361:	7e 27                	jle    c001238a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0012363:	50                   	push   eax
c0012364:	50                   	push   eax
c0012365:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012369:	8b 06                	mov    eax,DWORD PTR [esi]
c001236b:	03 04 9d 40 60 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd9fc0]
c0012372:	50                   	push   eax
c0012373:	e8 68 e3 fe ff       	call   c00006e0 <strcmp>
c0012378:	83 c4 10             	add    esp,0x10
c001237b:	85 c0                	test   eax,eax
c001237d:	75 05                	jne    c0012384 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001237f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012382:	eb 0b                	jmp    c001238f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0012384:	83 c6 10             	add    esi,0x10
c0012387:	47                   	inc    edi
c0012388:	eb d0                	jmp    c001235a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001238a:	43                   	inc    ebx
c001238b:	eb bc                	jmp    c0012349 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001238d:	31 c0                	xor    eax,eax
c001238f:	5b                   	pop    ebx
c0012390:	5e                   	pop    esi
c0012391:	5f                   	pop    edi
c0012392:	c3                   	ret    

c0012393 <Thr::loadKernelSymbolTable(char const*)>:
c0012393:	55                   	push   ebp
c0012394:	57                   	push   edi
c0012395:	56                   	push   esi
c0012396:	53                   	push   ebx
c0012397:	83 ec 68             	sub    esp,0x68
c001239a:	8b 35 90 61 02 c0    	mov    esi,DWORD PTR ds:0xc0026190
c00123a0:	68 14 01 00 00       	push   0x114
c00123a5:	e8 cb 54 ff ff       	call   c0007875 <malloc>
c00123aa:	83 c4 0c             	add    esp,0xc
c00123ad:	89 c3                	mov    ebx,eax
c00123af:	56                   	push   esi
c00123b0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00123b4:	50                   	push   eax
c00123b5:	e8 ca 87 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c00123ba:	5e                   	pop    esi
c00123bb:	5f                   	pop    edi
c00123bc:	6a 01                	push   0x1
c00123be:	53                   	push   ebx
c00123bf:	e8 80 88 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c00123c4:	83 c4 10             	add    esp,0x10
c00123c7:	85 c0                	test   eax,eax
c00123c9:	74 0a                	je     c00123d5 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00123cb:	83 ec 0c             	sub    esp,0xc
c00123ce:	68 a5 f1 01 c0       	push   0xc001f1a5
c00123d3:	eb 34                	jmp    c0012409 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00123d5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00123dd:	83 ec 0c             	sub    esp,0xc
c00123e0:	6a 34                	push   0x34
c00123e2:	e8 8e 54 ff ff       	call   c0007875 <malloc>
c00123e7:	59                   	pop    ecx
c00123e8:	89 c7                	mov    edi,eax
c00123ea:	8d 74 24 34          	lea    esi,[esp+0x34]
c00123ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123f0:	56                   	push   esi
c00123f1:	57                   	push   edi
c00123f2:	6a 00                	push   0x0
c00123f4:	6a 34                	push   0x34
c00123f6:	53                   	push   ebx
c00123f7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00123fa:	83 c4 20             	add    esp,0x20
c00123fd:	85 c0                	test   eax,eax
c00123ff:	74 17                	je     c0012418 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012401:	83 ec 0c             	sub    esp,0xc
c0012404:	68 bc f1 01 c0       	push   0xc001f1bc
c0012409:	e8 09 df ff ff       	call   c0010317 <KePanic(char const*)>
c001240e:	83 c4 10             	add    esp,0x10
c0012411:	31 c0                	xor    eax,eax
c0012413:	e9 31 02 00 00       	jmp    c0012649 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0012418:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001241e:	75 e1                	jne    c0012401 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012420:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012423:	85 c0                	test   eax,eax
c0012425:	74 da                	je     c0012401 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012427:	52                   	push   edx
c0012428:	31 d2                	xor    edx,edx
c001242a:	52                   	push   edx
c001242b:	50                   	push   eax
c001242c:	53                   	push   ebx
c001242d:	e8 d0 88 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0012432:	83 c4 10             	add    esp,0x10
c0012435:	85 c0                	test   eax,eax
c0012437:	75 c8                	jne    c0012401 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012439:	83 ec 0c             	sub    esp,0xc
c001243c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012440:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012444:	31 ed                	xor    ebp,ebp
c0012446:	0f af c2             	imul   eax,edx
c0012449:	50                   	push   eax
c001244a:	e8 26 54 ff ff       	call   c0007875 <malloc>
c001244f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012451:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012455:	89 34 24             	mov    DWORD PTR [esp],esi
c0012458:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001245c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012460:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012464:	0f af c2             	imul   eax,edx
c0012467:	99                   	cdq    
c0012468:	52                   	push   edx
c0012469:	50                   	push   eax
c001246a:	53                   	push   ebx
c001246b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001246e:	83 c4 20             	add    esp,0x20
c0012471:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012479:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012481:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012489:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012491:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0012495:	0f 86 aa 00 00 00    	jbe    c0012545 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001249b:	0f b7 f5             	movzx  esi,bp
c001249e:	6b f6 28             	imul   esi,esi,0x28
c00124a1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00124a5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00124a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124ac:	50                   	push   eax
c00124ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00124b1:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00124b5:	8b 16                	mov    edx,DWORD PTR [esi]
c00124b7:	6b c0 28             	imul   eax,eax,0x28
c00124ba:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00124be:	89 d0                	mov    eax,edx
c00124c0:	31 d2                	xor    edx,edx
c00124c2:	52                   	push   edx
c00124c3:	50                   	push   eax
c00124c4:	53                   	push   ebx
c00124c5:	e8 38 88 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c00124ca:	83 c4 0c             	add    esp,0xc
c00124cd:	6a 20                	push   0x20
c00124cf:	6a 00                	push   0x0
c00124d1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00124d5:	52                   	push   edx
c00124d6:	e8 f5 df fe ff       	call   c00004d0 <memset>
c00124db:	58                   	pop    eax
c00124dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124de:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00124e2:	51                   	push   ecx
c00124e3:	8d 54 24 40          	lea    edx,[esp+0x40]
c00124e7:	52                   	push   edx
c00124e8:	6a 00                	push   0x0
c00124ea:	6a 1f                	push   0x1f
c00124ec:	53                   	push   ebx
c00124ed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00124f0:	83 c4 18             	add    esp,0x18
c00124f3:	68 d3 f1 01 c0       	push   0xc001f1d3
c00124f8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00124fc:	52                   	push   edx
c00124fd:	e8 de e1 fe ff       	call   c00006e0 <strcmp>
c0012502:	83 c4 10             	add    esp,0x10
c0012505:	85 c0                	test   eax,eax
c0012507:	75 0f                	jne    c0012518 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012509:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001250c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012510:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012514:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012518:	50                   	push   eax
c0012519:	50                   	push   eax
c001251a:	68 db f1 01 c0       	push   0xc001f1db
c001251f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012523:	50                   	push   eax
c0012524:	e8 b7 e1 fe ff       	call   c00006e0 <strcmp>
c0012529:	83 c4 10             	add    esp,0x10
c001252c:	85 c0                	test   eax,eax
c001252e:	75 0f                	jne    c001253f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0012530:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012533:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012537:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001253b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001253f:	45                   	inc    ebp
c0012540:	e9 4c ff ff ff       	jmp    c0012491 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012545:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001254a:	75 10                	jne    c001255c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001254c:	83 ec 0c             	sub    esp,0xc
c001254f:	68 e3 f1 01 c0       	push   0xc001f1e3
c0012554:	e8 be dd ff ff       	call   c0010317 <KePanic(char const*)>
c0012559:	83 c4 10             	add    esp,0x10
c001255c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012561:	75 10                	jne    c0012573 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0012563:	83 ec 0c             	sub    esp,0xc
c0012566:	68 e3 f1 01 c0       	push   0xc001f1e3
c001256b:	e8 a7 dd ff ff       	call   c0010317 <KePanic(char const*)>
c0012570:	83 c4 10             	add    esp,0x10
c0012573:	31 d2                	xor    edx,edx
c0012575:	50                   	push   eax
c0012576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001257a:	52                   	push   edx
c001257b:	50                   	push   eax
c001257c:	53                   	push   ebx
c001257d:	e8 80 87 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0012582:	5a                   	pop    edx
c0012583:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012587:	e8 e9 52 ff ff       	call   c0007875 <malloc>
c001258c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012590:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012594:	31 c9                	xor    ecx,ecx
c0012596:	5e                   	pop    esi
c0012597:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012599:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001259d:	55                   	push   ebp
c001259e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125a2:	51                   	push   ecx
c00125a3:	52                   	push   edx
c00125a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00125a8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00125ac:	53                   	push   ebx
c00125ad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00125b0:	83 c4 14             	add    esp,0x14
c00125b3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00125b7:	e8 b9 52 ff ff       	call   c0007875 <malloc>
c00125bc:	89 c6                	mov    esi,eax
c00125be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125c0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00125c3:	56                   	push   esi
c00125c4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00125c8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00125cc:	51                   	push   ecx
c00125cd:	52                   	push   edx
c00125ce:	53                   	push   ebx
c00125cf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00125d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00125d6:	8b 15 40 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026140
c00125dc:	83 c4 1c             	add    esp,0x1c
c00125df:	c1 e8 04             	shr    eax,0x4
c00125e2:	89 04 95 c0 5f 02 c0 	mov    DWORD PTR [edx*4-0x3ffda040],eax
c00125e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125ed:	31 d2                	xor    edx,edx
c00125ef:	52                   	push   edx
c00125f0:	50                   	push   eax
c00125f1:	53                   	push   ebx
c00125f2:	e8 0b 87 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c00125f7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00125f9:	31 d2                	xor    edx,edx
c00125fb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00125fe:	56                   	push   esi
c00125ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012603:	52                   	push   edx
c0012604:	50                   	push   eax
c0012605:	53                   	push   ebx
c0012606:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012609:	83 c4 14             	add    esp,0x14
c001260c:	53                   	push   ebx
c001260d:	e8 90 86 ff ff       	call   c000aca2 <File::close()>
c0012612:	5d                   	pop    ebp
c0012613:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012617:	e8 69 52 ff ff       	call   c0007885 <free>
c001261c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001261f:	e8 61 52 ff ff       	call   c0007885 <free>
c0012624:	a1 40 61 02 c0       	mov    eax,ds:0xc0026140
c0012629:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001262d:	8d 50 01             	lea    edx,[eax+0x1]
c0012630:	89 0c 85 c0 60 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9f40],ecx
c0012637:	89 34 85 40 60 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9fc0],esi
c001263e:	89 15 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edx
c0012644:	83 c4 10             	add    esp,0x10
c0012647:	b0 01                	mov    al,0x1
c0012649:	83 c4 5c             	add    esp,0x5c
c001264c:	5b                   	pop    ebx
c001264d:	5e                   	pop    esi
c001264e:	5f                   	pop    edi
c001264f:	5d                   	pop    ebp
c0012650:	c3                   	ret    

c0012651 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0012651:	55                   	push   ebp
c0012652:	57                   	push   edi
c0012653:	56                   	push   esi
c0012654:	53                   	push   ebx
c0012655:	81 ec 68 03 00 00    	sub    esp,0x368
c001265b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0012662:	8b 1d 90 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026190
c0012668:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001266c:	68 14 01 00 00       	push   0x114
c0012671:	e8 ff 51 ff ff       	call   c0007875 <malloc>
c0012676:	83 c4 0c             	add    esp,0xc
c0012679:	89 c5                	mov    ebp,eax
c001267b:	53                   	push   ebx
c001267c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0012683:	50                   	push   eax
c0012684:	e8 fb 84 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0012689:	5e                   	pop    esi
c001268a:	5f                   	pop    edi
c001268b:	6a 01                	push   0x1
c001268d:	55                   	push   ebp
c001268e:	e8 b1 85 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c0012693:	83 c4 10             	add    esp,0x10
c0012696:	85 c0                	test   eax,eax
c0012698:	0f 85 a7 06 00 00    	jne    c0012d45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001269e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00126a6:	83 ec 0c             	sub    esp,0xc
c00126a9:	6a 34                	push   0x34
c00126ab:	e8 c5 51 ff ff       	call   c0007875 <malloc>
c00126b0:	5b                   	pop    ebx
c00126b1:	89 c7                	mov    edi,eax
c00126b3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00126b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00126ba:	53                   	push   ebx
c00126bb:	57                   	push   edi
c00126bc:	6a 00                	push   0x0
c00126be:	6a 34                	push   0x34
c00126c0:	55                   	push   ebp
c00126c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00126c4:	83 c4 20             	add    esp,0x20
c00126c7:	85 c0                	test   eax,eax
c00126c9:	0f 85 76 06 00 00    	jne    c0012d45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126cf:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00126d5:	0f 85 6a 06 00 00    	jne    c0012d45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126db:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00126de:	85 c0                	test   eax,eax
c00126e0:	0f 84 5f 06 00 00    	je     c0012d45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126e6:	31 d2                	xor    edx,edx
c00126e8:	51                   	push   ecx
c00126e9:	52                   	push   edx
c00126ea:	50                   	push   eax
c00126eb:	55                   	push   ebp
c00126ec:	e8 11 86 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c00126f1:	83 c4 10             	add    esp,0x10
c00126f4:	85 c0                	test   eax,eax
c00126f6:	0f 85 49 06 00 00    	jne    c0012d45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126fc:	83 ec 0c             	sub    esp,0xc
c00126ff:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012702:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012706:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001270a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001270e:	0f af c2             	imul   eax,edx
c0012711:	50                   	push   eax
c0012712:	e8 5e 51 ff ff       	call   c0007875 <malloc>
c0012717:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001271a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001271e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012721:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012725:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012729:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001272d:	0f af c2             	imul   eax,edx
c0012730:	99                   	cdq    
c0012731:	52                   	push   edx
c0012732:	50                   	push   eax
c0012733:	55                   	push   ebp
c0012734:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012737:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001273a:	83 c4 20             	add    esp,0x20
c001273d:	85 c0                	test   eax,eax
c001273f:	0f 84 00 06 00 00    	je     c0012d45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012745:	52                   	push   edx
c0012746:	31 d2                	xor    edx,edx
c0012748:	52                   	push   edx
c0012749:	50                   	push   eax
c001274a:	55                   	push   ebp
c001274b:	e8 b2 85 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0012750:	83 c4 10             	add    esp,0x10
c0012753:	85 c0                	test   eax,eax
c0012755:	0f 85 ea 05 00 00    	jne    c0012d45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001275b:	83 ec 0c             	sub    esp,0xc
c001275e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012762:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012766:	31 f6                	xor    esi,esi
c0012768:	0f af c2             	imul   eax,edx
c001276b:	50                   	push   eax
c001276c:	e8 04 51 ff ff       	call   c0007875 <malloc>
c0012771:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012774:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012778:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001277b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001277f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012783:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012787:	0f af c2             	imul   eax,edx
c001278a:	99                   	cdq    
c001278b:	52                   	push   edx
c001278c:	50                   	push   eax
c001278d:	55                   	push   ebp
c001278e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012791:	83 c4 20             	add    esp,0x20
c0012794:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012798:	0f 86 8a 00 00 00    	jbe    c0012828 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001279e:	0f b7 de             	movzx  ebx,si
c00127a1:	c1 e3 05             	shl    ebx,0x5
c00127a4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00127a8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00127ab:	75 75                	jne    c0012822 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00127ad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00127b0:	31 d2                	xor    edx,edx
c00127b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00127b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127bd:	50                   	push   eax
c00127be:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00127c1:	52                   	push   edx
c00127c2:	50                   	push   eax
c00127c3:	55                   	push   ebp
c00127c4:	e8 39 85 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c00127c9:	83 c4 10             	add    esp,0x10
c00127cc:	85 c0                	test   eax,eax
c00127ce:	0f 85 71 05 00 00    	jne    c0012d45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00127d4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00127db:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00127de:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00127e2:	31 d2                	xor    edx,edx
c00127e4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00127e8:	83 ec 0c             	sub    esp,0xc
c00127eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00127ef:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00127f6:	50                   	push   eax
c00127f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00127fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127ff:	52                   	push   edx
c0012800:	50                   	push   eax
c0012801:	55                   	push   ebp
c0012802:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012805:	83 c4 1c             	add    esp,0x1c
c0012808:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001280b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001280e:	50                   	push   eax
c001280f:	6a 00                	push   0x0
c0012811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012815:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012819:	50                   	push   eax
c001281a:	e8 b1 dc fe ff       	call   c00004d0 <memset>
c001281f:	83 c4 10             	add    esp,0x10
c0012822:	46                   	inc    esi
c0012823:	e9 6c ff ff ff       	jmp    c0012794 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012828:	53                   	push   ebx
c0012829:	31 db                	xor    ebx,ebx
c001282b:	68 00 01 00 00       	push   0x100
c0012830:	6a 00                	push   0x0
c0012832:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012836:	50                   	push   eax
c0012837:	e8 94 dc fe ff       	call   c00004d0 <memset>
c001283c:	83 c4 0c             	add    esp,0xc
c001283f:	68 00 01 00 00       	push   0x100
c0012844:	6a 00                	push   0x0
c0012846:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001284d:	50                   	push   eax
c001284e:	e8 7d dc fe ff       	call   c00004d0 <memset>
c0012853:	83 c4 10             	add    esp,0x10
c0012856:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001285e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012866:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001286e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012876:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001287e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012882:	0f 86 30 01 00 00    	jbe    c00129b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012888:	0f b7 f3             	movzx  esi,bx
c001288b:	6b f6 28             	imul   esi,esi,0x28
c001288e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012892:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012895:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012899:	52                   	push   edx
c001289a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001289e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00128a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00128a4:	6b d2 28             	imul   edx,edx,0x28
c00128a7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00128ab:	31 d2                	xor    edx,edx
c00128ad:	52                   	push   edx
c00128ae:	50                   	push   eax
c00128af:	55                   	push   ebp
c00128b0:	e8 4d 84 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c00128b5:	83 c4 0c             	add    esp,0xc
c00128b8:	6a 20                	push   0x20
c00128ba:	6a 00                	push   0x0
c00128bc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00128c3:	51                   	push   ecx
c00128c4:	e8 07 dc fe ff       	call   c00004d0 <memset>
c00128c9:	59                   	pop    ecx
c00128ca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128cd:	8d 54 24 58          	lea    edx,[esp+0x58]
c00128d1:	52                   	push   edx
c00128d2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00128d9:	51                   	push   ecx
c00128da:	6a 00                	push   0x0
c00128dc:	6a 1f                	push   0x1f
c00128de:	55                   	push   ebp
c00128df:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00128e2:	83 c4 1c             	add    esp,0x1c
c00128e5:	6a 09                	push   0x9
c00128e7:	68 fd f1 01 c0       	push   0xc001f1fd
c00128ec:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00128f3:	51                   	push   ecx
c00128f4:	e8 97 da fe ff       	call   c0000390 <memcmp>
c00128f9:	83 c4 10             	add    esp,0x10
c00128fc:	85 c0                	test   eax,eax
c00128fe:	75 21                	jne    c0012921 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012904:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012908:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001290c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012910:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012913:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001291a:	89 d0                	mov    eax,edx
c001291c:	40                   	inc    eax
c001291d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012921:	50                   	push   eax
c0012922:	6a 09                	push   0x9
c0012924:	68 07 f2 01 c0       	push   0xc001f207
c0012929:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012930:	50                   	push   eax
c0012931:	e8 5a da fe ff       	call   c0000390 <memcmp>
c0012936:	83 c4 10             	add    esp,0x10
c0012939:	85 c0                	test   eax,eax
c001293b:	75 21                	jne    c001295e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001293d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012941:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012945:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012949:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001294d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012950:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012957:	89 d0                	mov    eax,edx
c0012959:	40                   	inc    eax
c001295a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001295e:	50                   	push   eax
c001295f:	50                   	push   eax
c0012960:	68 d3 f1 01 c0       	push   0xc001f1d3
c0012965:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001296c:	50                   	push   eax
c001296d:	e8 6e dd fe ff       	call   c00006e0 <strcmp>
c0012972:	83 c4 10             	add    esp,0x10
c0012975:	85 c0                	test   eax,eax
c0012977:	75 0f                	jne    c0012988 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012979:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001297c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012980:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012984:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012988:	50                   	push   eax
c0012989:	50                   	push   eax
c001298a:	68 db f1 01 c0       	push   0xc001f1db
c001298f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012996:	50                   	push   eax
c0012997:	e8 44 dd fe ff       	call   c00006e0 <strcmp>
c001299c:	83 c4 10             	add    esp,0x10
c001299f:	85 c0                	test   eax,eax
c00129a1:	75 0f                	jne    c00129b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00129a3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00129a6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00129aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00129ae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00129b2:	43                   	inc    ebx
c00129b3:	e9 c6 fe ff ff       	jmp    c001287e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00129b8:	31 d2                	xor    edx,edx
c00129ba:	50                   	push   eax
c00129bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00129bf:	52                   	push   edx
c00129c0:	50                   	push   eax
c00129c1:	55                   	push   ebp
c00129c2:	e8 3b 83 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c00129c7:	58                   	pop    eax
c00129c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00129cc:	e8 a4 4e ff ff       	call   c0007875 <malloc>
c00129d1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129d4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00129d8:	31 d2                	xor    edx,edx
c00129da:	58                   	pop    eax
c00129db:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00129df:	53                   	push   ebx
c00129e0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00129e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129e8:	52                   	push   edx
c00129e9:	50                   	push   eax
c00129ea:	55                   	push   ebp
c00129eb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129ee:	83 c4 14             	add    esp,0x14
c00129f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129f5:	e8 7b 4e ff ff       	call   c0007875 <malloc>
c00129fa:	31 d2                	xor    edx,edx
c00129fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012a00:	83 c4 0c             	add    esp,0xc
c0012a03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a07:	52                   	push   edx
c0012a08:	50                   	push   eax
c0012a09:	55                   	push   ebp
c0012a0a:	e8 f3 82 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0012a0f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a12:	31 d2                	xor    edx,edx
c0012a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a17:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012a1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012a1f:	52                   	push   edx
c0012a20:	50                   	push   eax
c0012a21:	55                   	push   ebp
c0012a22:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a25:	83 c4 20             	add    esp,0x20
c0012a28:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012a30:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012a34:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012a38:	0f 84 0b 03 00 00    	je     c0012d49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012a3e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012a45:	31 d2                	xor    edx,edx
c0012a47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a4b:	c1 e8 03             	shr    eax,0x3
c0012a4e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012a52:	51                   	push   ecx
c0012a53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a57:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012a5b:	52                   	push   edx
c0012a5c:	50                   	push   eax
c0012a5d:	55                   	push   ebp
c0012a5e:	e8 9f 82 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0012a63:	5b                   	pop    ebx
c0012a64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a68:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012a6f:	e8 01 4e ff ff       	call   c0007875 <malloc>
c0012a74:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a77:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a7b:	31 d2                	xor    edx,edx
c0012a7d:	5e                   	pop    esi
c0012a7e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012a82:	50                   	push   eax
c0012a83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a8b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012a92:	52                   	push   edx
c0012a93:	50                   	push   eax
c0012a94:	55                   	push   ebp
c0012a95:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a98:	83 c4 20             	add    esp,0x20
c0012a9b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012aa3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012aa7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012aab:	0f 8d 7c 02 00 00    	jge    c0012d2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012ab1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012ab5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ab9:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012abe:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012ac1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012ac5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ac9:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012acd:	89 d8                	mov    eax,ebx
c0012acf:	c1 e8 08             	shr    eax,0x8
c0012ad2:	89 c6                	mov    esi,eax
c0012ad4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012ad8:	c1 e6 04             	shl    esi,0x4
c0012adb:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012adf:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012ae2:	85 d2                	test   edx,edx
c0012ae4:	0f 85 bf 00 00 00    	jne    c0012ba9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012aea:	83 ec 0c             	sub    esp,0xc
c0012aed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012af1:	03 06                	add    eax,DWORD PTR [esi]
c0012af3:	50                   	push   eax
c0012af4:	e8 4b f8 ff ff       	call   c0012344 <Thr::getAddressOfKernelSymbol(char const*)>
c0012af9:	83 c4 10             	add    esp,0x10
c0012afc:	89 c2                	mov    edx,eax
c0012afe:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012b03:	85 c0                	test   eax,eax
c0012b05:	0f 85 9e 00 00 00    	jne    c0012ba9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012b0b:	83 ec 0c             	sub    esp,0xc
c0012b0e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b12:	03 06                	add    eax,DWORD PTR [esi]
c0012b14:	50                   	push   eax
c0012b15:	e8 4e d9 ff ff       	call   c0010468 <KeResolveCompatibilitySymbol(char*)>
c0012b1a:	83 c4 10             	add    esp,0x10
c0012b1d:	89 c2                	mov    edx,eax
c0012b1f:	85 c0                	test   eax,eax
c0012b21:	0f 85 82 00 00 00    	jne    c0012ba9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012b27:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012b2b:	50                   	push   eax
c0012b2c:	50                   	push   eax
c0012b2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b31:	03 06                	add    eax,DWORD PTR [esi]
c0012b33:	50                   	push   eax
c0012b34:	68 11 f2 01 c0       	push   0xc001f211
c0012b39:	e8 d0 7a ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0012b3e:	58                   	pop    eax
c0012b3f:	5a                   	pop    edx
c0012b40:	68 2b f2 01 c0       	push   0xc001f22b
c0012b45:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b4c:	50                   	push   eax
c0012b4d:	e8 ae da fe ff       	call   c0000600 <strcpy>
c0012b52:	59                   	pop    ecx
c0012b53:	58                   	pop    eax
c0012b54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b58:	03 06                	add    eax,DWORD PTR [esi]
c0012b5a:	50                   	push   eax
c0012b5b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b62:	50                   	push   eax
c0012b63:	e8 58 dc fe ff       	call   c00007c0 <strcat>
c0012b68:	58                   	pop    eax
c0012b69:	5a                   	pop    edx
c0012b6a:	68 c1 f2 01 c0       	push   0xc001f2c1
c0012b6f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b76:	50                   	push   eax
c0012b77:	e8 44 dc fe ff       	call   c00007c0 <strcat>
c0012b7c:	83 c4 10             	add    esp,0x10
c0012b7f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b84:	0f 84 5d 01 00 00    	je     c0012ce7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b8a:	83 ec 0c             	sub    esp,0xc
c0012b8d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b94:	50                   	push   eax
c0012b95:	e8 7d d7 ff ff       	call   c0010317 <KePanic(char const*)>
c0012b9a:	83 c4 10             	add    esp,0x10
c0012b9d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012ba1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012ba5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012ba9:	80 fb 01             	cmp    bl,0x1
c0012bac:	0f 85 88 00 00 00    	jne    c0012c3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012bb2:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012bb9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012bbd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012bc1:	01 ce                	add    esi,ecx
c0012bc3:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012bc9:	0f 94 c0             	sete   al
c0012bcc:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012bd2:	0f 94 c3             	sete   bl
c0012bd5:	09 c3                	or     ebx,eax
c0012bd7:	8b 06                	mov    eax,DWORD PTR [esi]
c0012bd9:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012bde:	74 41                	je     c0012c21 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012be0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012be3:	84 db                	test   bl,bl
c0012be5:	75 15                	jne    c0012bfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012be7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012beb:	66 83 f8 0c          	cmp    ax,0xc
c0012bef:	76 05                	jbe    c0012bf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012bf1:	b8 0c 00 00 00       	mov    eax,0xc
c0012bf6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012bfa:	76 37                	jbe    c0012c33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bfc:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012c00:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c05:	0f 84 dc 00 00 00    	je     c0012ce7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c0b:	83 ec 0c             	sub    esp,0xc
c0012c0e:	68 42 f2 01 c0       	push   0xc001f242
c0012c13:	e8 ff d6 ff ff       	call   c0010317 <KePanic(char const*)>
c0012c18:	83 c4 10             	add    esp,0x10
c0012c1b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012c1f:	eb 12                	jmp    c0012c33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012c21:	01 c1                	add    ecx,eax
c0012c23:	84 db                	test   bl,bl
c0012c25:	75 0c                	jne    c0012c33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012c27:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012c2b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012c2f:	77 02                	ja     c0012c33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012c31:	01 d1                	add    ecx,edx
c0012c33:	89 0e                	mov    DWORD PTR [esi],ecx
c0012c35:	e9 ea 00 00 00       	jmp    c0012d24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c3a:	80 fb 02             	cmp    bl,0x2
c0012c3d:	75 7c                	jne    c0012cbb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012c3f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012c46:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012c4a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012c4e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012c54:	74 20                	je     c0012c76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012c56:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012c5c:	74 18                	je     c0012c76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012c5e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012c62:	b9 0a 00 00 00       	mov    ecx,0xa
c0012c67:	66 83 f8 0e          	cmp    ax,0xe
c0012c6b:	77 03                	ja     c0012c70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012c6d:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012c70:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012c74:	76 1f                	jbe    c0012c95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012c76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012c7a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c7f:	74 66                	je     c0012ce7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c81:	83 ec 0c             	sub    esp,0xc
c0012c84:	68 5e f2 01 c0       	push   0xc001f25e
c0012c89:	e8 89 d6 ff ff       	call   c0010317 <KePanic(char const*)>
c0012c8e:	83 c4 10             	add    esp,0x10
c0012c91:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012c95:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c97:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012c9c:	74 13                	je     c0012cb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012c9e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012ca2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012ca9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012cad:	01 c8                	add    eax,ecx
c0012caf:	eb 04                	jmp    c0012cb5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012cb1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012cb5:	01 c2                	add    edx,eax
c0012cb7:	89 16                	mov    DWORD PTR [esi],edx
c0012cb9:	eb 69                	jmp    c0012d24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012cbb:	0f b6 db             	movzx  ebx,bl
c0012cbe:	50                   	push   eax
c0012cbf:	50                   	push   eax
c0012cc0:	53                   	push   ebx
c0012cc1:	68 7a f2 01 c0       	push   0xc001f27a
c0012cc6:	e8 43 79 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0012ccb:	83 c4 10             	add    esp,0x10
c0012cce:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012cd3:	74 12                	je     c0012ce7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012cd5:	83 ec 0c             	sub    esp,0xc
c0012cd8:	68 85 f2 01 c0       	push   0xc001f285
c0012cdd:	e8 35 d6 ff ff       	call   c0010317 <KePanic(char const*)>
c0012ce2:	83 c4 10             	add    esp,0x10
c0012ce5:	eb 3d                	jmp    c0012d24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012ce7:	83 ec 0c             	sub    esp,0xc
c0012cea:	55                   	push   ebp
c0012ceb:	e8 b2 7f ff ff       	call   c000aca2 <File::close()>
c0012cf0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cf3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012cf6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cf9:	59                   	pop    ecx
c0012cfa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cfe:	e8 82 4b ff ff       	call   c0007885 <free>
c0012d03:	5b                   	pop    ebx
c0012d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d08:	e8 78 4b ff ff       	call   c0007885 <free>
c0012d0d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012d10:	e8 70 4b ff ff       	call   c0007885 <free>
c0012d15:	5e                   	pop    esi
c0012d16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d1a:	e8 66 4b ff ff       	call   c0007885 <free>
c0012d1f:	83 c4 10             	add    esp,0x10
c0012d22:	eb 21                	jmp    c0012d45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012d24:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012d28:	e9 76 fd ff ff       	jmp    c0012aa3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012d2d:	83 ec 0c             	sub    esp,0xc
c0012d30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d34:	e8 4c 4b ff ff       	call   c0007885 <free>
c0012d39:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012d3d:	83 c4 10             	add    esp,0x10
c0012d40:	e9 eb fc ff ff       	jmp    c0012a30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012d45:	31 c0                	xor    eax,eax
c0012d47:	eb 33                	jmp    c0012d7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012d49:	83 ec 0c             	sub    esp,0xc
c0012d4c:	55                   	push   ebp
c0012d4d:	e8 50 7f ff ff       	call   c000aca2 <File::close()>
c0012d52:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d55:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012d58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d5b:	58                   	pop    eax
c0012d5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d60:	e8 20 4b ff ff       	call   c0007885 <free>
c0012d65:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012d68:	e8 18 4b ff ff       	call   c0007885 <free>
c0012d6d:	5a                   	pop    edx
c0012d6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d72:	e8 0e 4b ff ff       	call   c0007885 <free>
c0012d77:	83 c4 10             	add    esp,0x10
c0012d7a:	b0 01                	mov    al,0x1
c0012d7c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012d82:	5b                   	pop    ebx
c0012d83:	5e                   	pop    esi
c0012d84:	5f                   	pop    edi
c0012d85:	5d                   	pop    ebp
c0012d86:	c3                   	ret    

c0012d87 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012d87:	56                   	push   esi
c0012d88:	31 d2                	xor    edx,edx
c0012d8a:	53                   	push   ebx
c0012d8b:	8b 1d a0 59 02 c0    	mov    ebx,DWORD PTR ds:0xc00259a0
c0012d91:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012d95:	39 d3                	cmp    ebx,edx
c0012d97:	7e 1b                	jle    c0012db4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012d99:	8b 04 95 c0 5b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda440]
c0012da0:	39 c8                	cmp    eax,ecx
c0012da2:	77 0d                	ja     c0012db1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012da4:	8b 34 95 c0 59 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffda640]
c0012dab:	01 c6                	add    esi,eax
c0012dad:	39 ce                	cmp    esi,ecx
c0012daf:	77 05                	ja     c0012db6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012db1:	42                   	inc    edx
c0012db2:	eb e1                	jmp    c0012d95 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012db4:	31 c0                	xor    eax,eax
c0012db6:	5b                   	pop    ebx
c0012db7:	5e                   	pop    esi
c0012db8:	c3                   	ret    

c0012db9 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012db9:	53                   	push   ebx
c0012dba:	31 c0                	xor    eax,eax
c0012dbc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012dc0:	8b 1d a0 59 02 c0    	mov    ebx,DWORD PTR ds:0xc00259a0
c0012dc6:	39 c3                	cmp    ebx,eax
c0012dc8:	7e 22                	jle    c0012dec <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012dca:	8b 14 85 c0 5b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda440]
c0012dd1:	39 ca                	cmp    edx,ecx
c0012dd3:	77 14                	ja     c0012de9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012dd5:	03 14 85 c0 59 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffda640]
c0012ddc:	39 ca                	cmp    edx,ecx
c0012dde:	76 09                	jbe    c0012de9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012de0:	8b 04 85 c0 5d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda240]
c0012de7:	eb 05                	jmp    c0012dee <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012de9:	40                   	inc    eax
c0012dea:	eb da                	jmp    c0012dc6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012dec:	31 c0                	xor    eax,eax
c0012dee:	5b                   	pop    ebx
c0012def:	c3                   	ret    

c0012df0 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012df0:	53                   	push   ebx
c0012df1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012df5:	53                   	push   ebx
c0012df6:	e8 8c ff ff ff       	call   c0012d87 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012dfb:	5a                   	pop    edx
c0012dfc:	31 d2                	xor    edx,edx
c0012dfe:	85 c0                	test   eax,eax
c0012e00:	74 04                	je     c0012e06 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012e02:	89 da                	mov    edx,ebx
c0012e04:	29 c2                	sub    edx,eax
c0012e06:	89 d0                	mov    eax,edx
c0012e08:	5b                   	pop    ebx
c0012e09:	c3                   	ret    

c0012e0a <Thr::loadDLL(char const*, bool)>:
c0012e0a:	55                   	push   ebp
c0012e0b:	57                   	push   edi
c0012e0c:	56                   	push   esi
c0012e0d:	53                   	push   ebx
c0012e0e:	81 ec 34 01 00 00    	sub    esp,0x134
c0012e14:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012e1b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012e22:	56                   	push   esi
c0012e23:	68 9d f2 01 c0       	push   0xc001f29d
c0012e28:	e8 e1 77 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0012e2d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012e34:	e8 3c 4a ff ff       	call   c0007875 <malloc>
c0012e39:	83 c4 0c             	add    esp,0xc
c0012e3c:	89 c3                	mov    ebx,eax
c0012e3e:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c0012e44:	56                   	push   esi
c0012e45:	50                   	push   eax
c0012e46:	e8 39 7d ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0012e4b:	83 c4 10             	add    esp,0x10
c0012e4e:	85 db                	test   ebx,ebx
c0012e50:	75 3c                	jne    c0012e8e <Thr::loadDLL(char const*, bool)+0x84>
c0012e52:	89 f8                	mov    eax,edi
c0012e54:	84 c0                	test   al,al
c0012e56:	0f 84 d2 01 00 00    	je     c001302e <Thr::loadDLL(char const*, bool)+0x224>
c0012e5c:	55                   	push   ebp
c0012e5d:	55                   	push   ebp
c0012e5e:	68 ae f2 01 c0       	push   0xc001f2ae
c0012e63:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012e67:	55                   	push   ebp
c0012e68:	e8 93 d7 fe ff       	call   c0000600 <strcpy>
c0012e6d:	58                   	pop    eax
c0012e6e:	5a                   	pop    edx
c0012e6f:	56                   	push   esi
c0012e70:	55                   	push   ebp
c0012e71:	e8 4a d9 fe ff       	call   c00007c0 <strcat>
c0012e76:	59                   	pop    ecx
c0012e77:	58                   	pop    eax
c0012e78:	68 c1 f2 01 c0       	push   0xc001f2c1
c0012e7d:	55                   	push   ebp
c0012e7e:	e8 3d d9 fe ff       	call   c00007c0 <strcat>
c0012e83:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e86:	e8 8c d4 ff ff       	call   c0010317 <KePanic(char const*)>
c0012e8b:	83 c4 10             	add    esp,0x10
c0012e8e:	51                   	push   ecx
c0012e8f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012e93:	50                   	push   eax
c0012e94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012e98:	50                   	push   eax
c0012e99:	53                   	push   ebx
c0012e9a:	e8 51 80 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0012e9f:	83 c4 10             	add    esp,0x10
c0012ea2:	85 db                	test   ebx,ebx
c0012ea4:	74 0c                	je     c0012eb2 <Thr::loadDLL(char const*, bool)+0xa8>
c0012ea6:	83 ec 0c             	sub    esp,0xc
c0012ea9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012eab:	53                   	push   ebx
c0012eac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012eaf:	83 c4 10             	add    esp,0x10
c0012eb2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012eb7:	75 0a                	jne    c0012ec3 <Thr::loadDLL(char const*, bool)+0xb9>
c0012eb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ebd:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012ec1:	75 3c                	jne    c0012eff <Thr::loadDLL(char const*, bool)+0xf5>
c0012ec3:	89 f8                	mov    eax,edi
c0012ec5:	84 c0                	test   al,al
c0012ec7:	0f 84 49 01 00 00    	je     c0013016 <Thr::loadDLL(char const*, bool)+0x20c>
c0012ecd:	51                   	push   ecx
c0012ece:	51                   	push   ecx
c0012ecf:	68 ae f2 01 c0       	push   0xc001f2ae
c0012ed4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012ed8:	53                   	push   ebx
c0012ed9:	e8 22 d7 fe ff       	call   c0000600 <strcpy>
c0012ede:	5d                   	pop    ebp
c0012edf:	58                   	pop    eax
c0012ee0:	56                   	push   esi
c0012ee1:	53                   	push   ebx
c0012ee2:	e8 d9 d8 fe ff       	call   c00007c0 <strcat>
c0012ee7:	58                   	pop    eax
c0012ee8:	5a                   	pop    edx
c0012ee9:	68 c1 f2 01 c0       	push   0xc001f2c1
c0012eee:	53                   	push   ebx
c0012eef:	e8 cc d8 fe ff       	call   c00007c0 <strcat>
c0012ef4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012ef7:	e8 1b d4 ff ff       	call   c0010317 <KePanic(char const*)>
c0012efc:	83 c4 10             	add    esp,0x10
c0012eff:	52                   	push   edx
c0012f00:	6a 03                	push   0x3
c0012f02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012f0a:	05 ff 0f 00 00       	add    eax,0xfff
c0012f0f:	83 d2 00             	adc    edx,0x0
c0012f12:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012f16:	50                   	push   eax
c0012f17:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c0012f1d:	e8 f6 6b ff ff       	call   c0009b18 <VAS::allocatePages(int, int)>
c0012f22:	59                   	pop    ecx
c0012f23:	89 c3                	mov    ebx,eax
c0012f25:	5d                   	pop    ebp
c0012f26:	50                   	push   eax
c0012f27:	68 f2 df 01 c0       	push   0xc001dff2
c0012f2c:	e8 dd 76 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0012f31:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f34:	e8 07 d6 fe ff       	call   c0000540 <strlen>
c0012f39:	8b 2d a0 59 02 c0    	mov    ebp,DWORD PTR ds:0xc00259a0
c0012f3f:	40                   	inc    eax
c0012f40:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f43:	e8 2d 49 ff ff       	call   c0007875 <malloc>
c0012f48:	89 04 ad c0 5d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffda240],eax
c0012f4f:	58                   	pop    eax
c0012f50:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c0012f55:	5a                   	pop    edx
c0012f56:	56                   	push   esi
c0012f57:	ff 34 85 c0 5d 02 c0 	push   DWORD PTR [eax*4-0x3ffda240]
c0012f5e:	e8 9d d6 fe ff       	call   c0000600 <strcpy>
c0012f63:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c0012f68:	8d 50 01             	lea    edx,[eax+0x1]
c0012f6b:	89 1c 85 c0 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda440],ebx
c0012f72:	89 15 a0 59 02 c0    	mov    DWORD PTR ds:0xc00259a0,edx
c0012f78:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012f7c:	83 c4 0c             	add    esp,0xc
c0012f7f:	89 14 85 c0 59 02 c0 	mov    DWORD PTR [eax*4-0x3ffda640],edx
c0012f86:	6a 01                	push   0x1
c0012f88:	53                   	push   ebx
c0012f89:	56                   	push   esi
c0012f8a:	e8 c2 f6 ff ff       	call   c0012651 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012f8f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012f93:	83 c4 10             	add    esp,0x10
c0012f96:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f9b:	0f 85 89 00 00 00    	jne    c001302a <Thr::loadDLL(char const*, bool)+0x220>
c0012fa1:	89 f8                	mov    eax,edi
c0012fa3:	84 c0                	test   al,al
c0012fa5:	74 73                	je     c001301a <Thr::loadDLL(char const*, bool)+0x210>
c0012fa7:	83 ec 0c             	sub    esp,0xc
c0012faa:	68 c3 f2 01 c0       	push   0xc001f2c3
c0012faf:	e8 63 d3 ff ff       	call   c0010317 <KePanic(char const*)>
c0012fb4:	83 c4 10             	add    esp,0x10
c0012fb7:	eb 61                	jmp    c001301a <Thr::loadDLL(char const*, bool)+0x210>
c0012fb9:	50                   	push   eax
c0012fba:	50                   	push   eax
c0012fbb:	89 e8                	mov    eax,ebp
c0012fbd:	c1 e0 0c             	shl    eax,0xc
c0012fc0:	01 d8                	add    eax,ebx
c0012fc2:	50                   	push   eax
c0012fc3:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c0012fc9:	e8 58 66 ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c0012fce:	83 c4 10             	add    esp,0x10
c0012fd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012fd3:	a8 60                	test   al,0x60
c0012fd5:	75 11                	jne    c0012fe8 <Thr::loadDLL(char const*, bool)+0x1de>
c0012fd7:	83 ec 0c             	sub    esp,0xc
c0012fda:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012fdf:	50                   	push   eax
c0012fe0:	e8 0a 4b ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c0012fe5:	83 c4 10             	add    esp,0x10
c0012fe8:	45                   	inc    ebp
c0012fe9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012fed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012ff1:	05 ff 0f 00 00       	add    eax,0xfff
c0012ff6:	bf 00 00 00 00       	mov    edi,0x0
c0012ffb:	83 d2 00             	adc    edx,0x0
c0012ffe:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013002:	c1 ea 0c             	shr    edx,0xc
c0013005:	39 c5                	cmp    ebp,eax
c0013007:	89 d1                	mov    ecx,edx
c0013009:	89 f8                	mov    eax,edi
c001300b:	19 c8                	sbb    eax,ecx
c001300d:	72 aa                	jb     c0012fb9 <Thr::loadDLL(char const*, bool)+0x1af>
c001300f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013014:	75 18                	jne    c001302e <Thr::loadDLL(char const*, bool)+0x224>
c0013016:	31 db                	xor    ebx,ebx
c0013018:	eb 14                	jmp    c001302e <Thr::loadDLL(char const*, bool)+0x224>
c001301a:	83 ec 0c             	sub    esp,0xc
c001301d:	68 e2 f2 01 c0       	push   0xc001f2e2
c0013022:	e8 f0 d2 ff ff       	call   c0010317 <KePanic(char const*)>
c0013027:	83 c4 10             	add    esp,0x10
c001302a:	31 ed                	xor    ebp,ebp
c001302c:	eb bb                	jmp    c0012fe9 <Thr::loadDLL(char const*, bool)+0x1df>
c001302e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013034:	89 d8                	mov    eax,ebx
c0013036:	5b                   	pop    ebx
c0013037:	5e                   	pop    esi
c0013038:	5f                   	pop    edi
c0013039:	5d                   	pop    ebp
c001303a:	c3                   	ret    

c001303b <Thr::executeDLL(unsigned long, void*)>:
c001303b:	56                   	push   esi
c001303c:	53                   	push   ebx
c001303d:	52                   	push   edx
c001303e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013042:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013046:	85 db                	test   ebx,ebx
c0013048:	75 10                	jne    c001305a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001304a:	83 ec 0c             	sub    esp,0xc
c001304d:	68 fe f2 01 c0       	push   0xc001f2fe
c0013052:	e8 c0 d2 ff ff       	call   c0010317 <KePanic(char const*)>
c0013057:	83 c4 10             	add    esp,0x10
c001305a:	50                   	push   eax
c001305b:	50                   	push   eax
c001305c:	53                   	push   ebx
c001305d:	68 28 f3 01 c0       	push   0xc001f328
c0013062:	e8 a7 75 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0013067:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001306b:	89 d8                	mov    eax,ebx
c001306d:	83 c4 14             	add    esp,0x14
c0013070:	5b                   	pop    ebx
c0013071:	5e                   	pop    esi
c0013072:	ff e0                	jmp    eax

c0013074 <userModeEntryPoint(void*)>:
c0013074:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013079:	48                   	dec    eax
c001307a:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001307f:	75 03                	jne    c0013084 <userModeEntryPoint(void*)+0x10>
c0013081:	fb                   	sti    
c0013082:	66 90                	xchg   ax,ax
c0013084:	fb                   	sti    
c0013085:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001308a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001308d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0013093:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013097:	e9 a3 d1 fe ff       	jmp    c000023f <goToUsermode>

c001309c <changeTSS>:
c001309c:	83 ec 14             	sub    esp,0x14
c001309f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130a4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00130a7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00130ac:	c1 e2 15             	shl    edx,0x15
c00130af:	29 d0                	sub    eax,edx
c00130b1:	50                   	push   eax
c00130b2:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00130b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00130bd:	05 7c 11 00 00       	add    eax,0x117c
c00130c2:	50                   	push   eax
c00130c3:	e8 dc 5b ff ff       	call   c0008ca4 <TSS::setESP(unsigned long)>
c00130c8:	83 c4 1c             	add    esp,0x1c
c00130cb:	c3                   	ret    

c00130cc <switchToThread(ThreadControlBlock*)>:
c00130cc:	57                   	push   edi
c00130cd:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c00130d2:	56                   	push   esi
c00130d3:	85 c0                	test   eax,eax
c00130d5:	53                   	push   ebx
c00130d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130da:	0f 85 90 00 00 00    	jne    c0013170 <switchToThread(ThreadControlBlock*)+0xa4>
c00130e0:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c00130e3:	80 fa ff             	cmp    dl,0xff
c00130e6:	0f 84 80 00 00 00    	je     c001316c <switchToThread(ThreadControlBlock*)+0xa0>
c00130ec:	81 e2 ff 00 00 00    	and    edx,0xff
c00130f2:	b8 00 04 00 00       	mov    eax,0x400
c00130f7:	29 d0                	sub    eax,edx
c00130f9:	d1 f8                	sar    eax,1
c00130fb:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c00130fe:	66 90                	xchg   ax,ax
c0013100:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0013103:	e8 1d 26 00 00       	call   c0015725 <HalQueryPerformanceCounter()>
c0013108:	a3 a8 61 02 c0       	mov    ds:0xc00261a8,eax
c001310d:	89 15 ac 61 02 c0    	mov    DWORD PTR ds:0xc00261ac,edx
c0013113:	89 c6                	mov    esi,eax
c0013115:	89 d7                	mov    edi,edx
c0013117:	2b 35 98 61 02 c0    	sub    esi,DWORD PTR ds:0xc0026198
c001311d:	a3 98 61 02 c0       	mov    ds:0xc0026198,eax
c0013122:	1b 3d 9c 61 02 c0    	sbb    edi,DWORD PTR ds:0xc002619c
c0013128:	89 35 a0 61 02 c0    	mov    DWORD PTR ds:0xc00261a0,esi
c001312e:	89 3d a4 61 02 c0    	mov    DWORD PTR ds:0xc00261a4,edi
c0013134:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001313a:	89 15 9c 61 02 c0    	mov    DWORD PTR ds:0xc002619c,edx
c0013140:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0013143:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0013146:	01 c6                	add    esi,eax
c0013148:	11 d7                	adc    edi,edx
c001314a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001314d:	83 ec 0c             	sub    esp,0xc
c0013150:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0013153:	53                   	push   ebx
c0013154:	e8 1e d1 fe ff       	call   c0000277 <switchToThreadASM>
c0013159:	0f 20 c0             	mov    eax,cr0
c001315c:	83 c8 08             	or     eax,0x8
c001315f:	0f 22 c0             	mov    cr0,eax
c0013162:	83 c4 10             	add    esp,0x10
c0013165:	5b                   	pop    ebx
c0013166:	5e                   	pop    esi
c0013167:	5f                   	pop    edi
c0013168:	c3                   	ret    
c0013169:	8d 76 00             	lea    esi,[esi+0x0]
c001316c:	31 c0                	xor    eax,eax
c001316e:	eb 90                	jmp    c0013100 <switchToThread(ThreadControlBlock*)+0x34>
c0013170:	5b                   	pop    ebx
c0013171:	c7 05 60 61 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x1
c001317b:	5e                   	pop    esi
c001317c:	5f                   	pop    edi
c001317d:	c3                   	ret    
c001317e:	66 90                	xchg   ax,ax

c0013180 <Process::addArgs(char**)>:
c0013180:	57                   	push   edi
c0013181:	56                   	push   esi
c0013182:	53                   	push   ebx
c0013183:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013187:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001318b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0013195:	85 ff                	test   edi,edi
c0013197:	74 43                	je     c00131dc <Process::addArgs(char**)+0x5c>
c0013199:	8b 07                	mov    eax,DWORD PTR [edi]
c001319b:	85 c0                	test   eax,eax
c001319d:	74 3d                	je     c00131dc <Process::addArgs(char**)+0x5c>
c001319f:	31 db                	xor    ebx,ebx
c00131a1:	8d 76 00             	lea    esi,[esi+0x0]
c00131a4:	83 ec 0c             	sub    esp,0xc
c00131a7:	50                   	push   eax
c00131a8:	e8 93 d3 fe ff       	call   c0000540 <strlen>
c00131ad:	40                   	inc    eax
c00131ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00131b1:	e8 bf 46 ff ff       	call   c0007875 <malloc>
c00131b6:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00131bd:	5a                   	pop    edx
c00131be:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00131c1:	59                   	pop    ecx
c00131c2:	43                   	inc    ebx
c00131c3:	52                   	push   edx
c00131c4:	50                   	push   eax
c00131c5:	e8 36 d4 fe ff       	call   c0000600 <strcpy>
c00131ca:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00131d0:	83 c4 10             	add    esp,0x10
c00131d3:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00131d6:	85 c0                	test   eax,eax
c00131d8:	75 ca                	jne    c00131a4 <Process::addArgs(char**)+0x24>
c00131da:	66 90                	xchg   ax,ax
c00131dc:	5b                   	pop    ebx
c00131dd:	5e                   	pop    esi
c00131de:	5f                   	pop    edi
c00131df:	c3                   	ret    

c00131e0 <Process::Process(char const*, Process*, char**)>:
c00131e0:	56                   	push   esi
c00131e1:	53                   	push   ebx
c00131e2:	83 ec 14             	sub    esp,0x14
c00131e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131e9:	05 0c 02 00 00       	add    eax,0x20c
c00131ee:	bb 07 00 00 00       	mov    ebx,0x7
c00131f3:	89 c6                	mov    esi,eax
c00131f5:	8d 76 00             	lea    esi,[esi+0x0]
c00131f8:	85 db                	test   ebx,ebx
c00131fa:	78 14                	js     c0013210 <Process::Process(char const*, Process*, char**)+0x30>
c00131fc:	83 ec 0c             	sub    esp,0xc
c00131ff:	56                   	push   esi
c0013200:	e8 77 a0 00 00       	call   c001d27c <ThreadControlBlock::ThreadControlBlock()>
c0013205:	83 c4 10             	add    esp,0x10
c0013208:	83 c6 5f             	add    esi,0x5f
c001320b:	4b                   	dec    ebx
c001320c:	eb ea                	jmp    c00131f8 <Process::Process(char const*, Process*, char**)+0x18>
c001320e:	66 90                	xchg   ax,ax
c0013210:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013214:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001321b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001321f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0013226:	83 ec 0c             	sub    esp,0xc
c0013229:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001322d:	e8 da ce ff ff       	call   c001010c <Krnl::newProcessEnv(Process*)>
c0013232:	83 c4 10             	add    esp,0x10
c0013235:	89 c2                	mov    edx,eax
c0013237:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001323b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013245:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001324e:	a1 2c 03 02 c0       	mov    eax,ds:0xc002032c
c0013253:	8d 50 01             	lea    edx,[eax+0x1]
c0013256:	89 15 2c 03 02 c0    	mov    DWORD PTR ds:0xc002032c,edx
c001325c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013260:	89 02                	mov    DWORD PTR [edx],eax
c0013262:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001326a:	83 ec 0c             	sub    esp,0xc
c001326d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013271:	e8 ff 45 ff ff       	call   c0007875 <malloc>
c0013276:	83 c4 10             	add    esp,0x10
c0013279:	89 c3                	mov    ebx,eax
c001327b:	83 ec 08             	sub    esp,0x8
c001327e:	6a 00                	push   0x0
c0013280:	53                   	push   ebx
c0013281:	e8 3c 6c ff ff       	call   c0009ec2 <VAS::VAS(bool)>
c0013286:	83 c4 10             	add    esp,0x10
c0013289:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001328d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013293:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013297:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00132a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00132a9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00132af:	e8 ce d3 ff ff       	call   c0010682 <KeInitSignals()>
c00132b4:	89 c2                	mov    edx,eax
c00132b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132ba:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00132c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132c4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132ca:	85 c0                	test   eax,eax
c00132cc:	74 42                	je     c0013310 <Process::Process(char const*, Process*, char**)+0x130>
c00132ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132d2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132d8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00132de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132e2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00132e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132ec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132f2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00132f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132fc:	05 0c 01 00 00       	add    eax,0x10c
c0013301:	83 ec 08             	sub    esp,0x8
c0013304:	52                   	push   edx
c0013305:	50                   	push   eax
c0013306:	e8 f5 d2 fe ff       	call   c0000600 <strcpy>
c001330b:	83 c4 10             	add    esp,0x10
c001330e:	eb 64                	jmp    c0013374 <Process::Process(char const*, Process*, char**)+0x194>
c0013310:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0013318:	83 ec 0c             	sub    esp,0xc
c001331b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001331f:	e8 51 45 ff ff       	call   c0007875 <malloc>
c0013324:	83 c4 10             	add    esp,0x10
c0013327:	89 c3                	mov    ebx,eax
c0013329:	83 ec 08             	sub    esp,0x8
c001332c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013330:	53                   	push   ebx
c0013331:	e8 80 56 ff ff       	call   c00089b6 <VgaText::VgaText(char const*)>
c0013336:	83 c4 10             	add    esp,0x10
c0013339:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001333d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013343:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013347:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001334d:	83 ec 0c             	sub    esp,0xc
c0013350:	50                   	push   eax
c0013351:	e8 00 4f ff ff       	call   c0008256 <addToTerminalCycle(VgaText*)>
c0013356:	83 c4 10             	add    esp,0x10
c0013359:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001335d:	05 0c 01 00 00       	add    eax,0x10c
c0013362:	83 ec 08             	sub    esp,0x8
c0013365:	68 47 f3 01 c0       	push   0xc001f347
c001336a:	50                   	push   eax
c001336b:	e8 90 d2 fe ff       	call   c0000600 <strcpy>
c0013370:	83 c4 10             	add    esp,0x10
c0013373:	90                   	nop
c0013374:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013378:	83 c0 0c             	add    eax,0xc
c001337b:	83 ec 08             	sub    esp,0x8
c001337e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013382:	50                   	push   eax
c0013383:	e8 78 d2 fe ff       	call   c0000600 <strcpy>
c0013388:	83 c4 10             	add    esp,0x10
c001338b:	83 ec 08             	sub    esp,0x8
c001338e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013392:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013396:	e8 e5 fd ff ff       	call   c0013180 <Process::addArgs(char**)>
c001339b:	83 c4 10             	add    esp,0x10
c001339e:	83 ec 08             	sub    esp,0x8
c00133a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00133a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00133a9:	e8 6d ed ff ff       	call   c001211b <Thr::loadProgramIntoMemory(Process*, char const*)>
c00133ae:	83 c4 10             	add    esp,0x10
c00133b1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00133b5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00133b9:	83 f0 01             	xor    eax,0x1
c00133bc:	88 c2                	mov    dl,al
c00133be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133c2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00133c8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00133cc:	25 ff 00 00 00       	and    eax,0xff
c00133d1:	83 ec 08             	sub    esp,0x8
c00133d4:	50                   	push   eax
c00133d5:	68 a0 f3 01 c0       	push   0xc001f3a0
c00133da:	e8 2f 72 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00133df:	83 c4 10             	add    esp,0x10
c00133e2:	90                   	nop
c00133e3:	83 c4 14             	add    esp,0x14
c00133e6:	5b                   	pop    ebx
c00133e7:	5e                   	pop    esi
c00133e8:	c3                   	ret    
c00133e9:	90                   	nop
c00133ea:	66 90                	xchg   ax,ax

c00133ec <Process::Process(bool, char const*, Process*, char**)>:
c00133ec:	56                   	push   esi
c00133ed:	53                   	push   ebx
c00133ee:	83 ec 24             	sub    esp,0x24
c00133f1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00133f5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00133f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133fd:	05 0c 02 00 00       	add    eax,0x20c
c0013402:	bb 07 00 00 00       	mov    ebx,0x7
c0013407:	89 c6                	mov    esi,eax
c0013409:	8d 76 00             	lea    esi,[esi+0x0]
c001340c:	85 db                	test   ebx,ebx
c001340e:	78 14                	js     c0013424 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0013410:	83 ec 0c             	sub    esp,0xc
c0013413:	56                   	push   esi
c0013414:	e8 63 9e 00 00       	call   c001d27c <ThreadControlBlock::ThreadControlBlock()>
c0013419:	83 c4 10             	add    esp,0x10
c001341c:	83 c6 5f             	add    esi,0x5f
c001341f:	4b                   	dec    ebx
c0013420:	eb ea                	jmp    c001340c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0013422:	66 90                	xchg   ax,ax
c0013424:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013428:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001342f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013433:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001343a:	83 ec 0c             	sub    esp,0xc
c001343d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013441:	e8 c6 cc ff ff       	call   c001010c <Krnl::newProcessEnv(Process*)>
c0013446:	83 c4 10             	add    esp,0x10
c0013449:	89 c2                	mov    edx,eax
c001344b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001344f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013455:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013459:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0013462:	a1 2c 03 02 c0       	mov    eax,ds:0xc002032c
c0013467:	8d 50 01             	lea    edx,[eax+0x1]
c001346a:	89 15 2c 03 02 c0    	mov    DWORD PTR ds:0xc002032c,edx
c0013470:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013474:	89 02                	mov    DWORD PTR [edx],eax
c0013476:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001347e:	83 ec 0c             	sub    esp,0xc
c0013481:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013485:	e8 eb 43 ff ff       	call   c0007875 <malloc>
c001348a:	83 c4 10             	add    esp,0x10
c001348d:	89 c3                	mov    ebx,eax
c001348f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0013493:	25 ff 00 00 00       	and    eax,0xff
c0013498:	83 ec 08             	sub    esp,0x8
c001349b:	50                   	push   eax
c001349c:	53                   	push   ebx
c001349d:	e8 20 6a ff ff       	call   c0009ec2 <VAS::VAS(bool)>
c00134a2:	83 c4 10             	add    esp,0x10
c00134a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134a9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00134af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134b3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00134bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134c1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00134c5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00134cb:	e8 b2 d1 ff ff       	call   c0010682 <KeInitSignals()>
c00134d0:	89 c2                	mov    edx,eax
c00134d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134d6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00134dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134e0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134e6:	85 c0                	test   eax,eax
c00134e8:	74 42                	je     c001352c <Process::Process(bool, char const*, Process*, char**)+0x140>
c00134ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134ee:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134f4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00134fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134fe:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013504:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013508:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001350e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013514:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013518:	05 0c 01 00 00       	add    eax,0x10c
c001351d:	83 ec 08             	sub    esp,0x8
c0013520:	52                   	push   edx
c0013521:	50                   	push   eax
c0013522:	e8 d9 d0 fe ff       	call   c0000600 <strcpy>
c0013527:	83 c4 10             	add    esp,0x10
c001352a:	eb 64                	jmp    c0013590 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c001352c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0013534:	83 ec 0c             	sub    esp,0xc
c0013537:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001353b:	e8 35 43 ff ff       	call   c0007875 <malloc>
c0013540:	83 c4 10             	add    esp,0x10
c0013543:	89 c3                	mov    ebx,eax
c0013545:	83 ec 08             	sub    esp,0x8
c0013548:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001354c:	53                   	push   ebx
c001354d:	e8 64 54 ff ff       	call   c00089b6 <VgaText::VgaText(char const*)>
c0013552:	83 c4 10             	add    esp,0x10
c0013555:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013559:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001355f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013563:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013569:	83 ec 0c             	sub    esp,0xc
c001356c:	50                   	push   eax
c001356d:	e8 e4 4c ff ff       	call   c0008256 <addToTerminalCycle(VgaText*)>
c0013572:	83 c4 10             	add    esp,0x10
c0013575:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013579:	05 0c 01 00 00       	add    eax,0x10c
c001357e:	83 ec 08             	sub    esp,0x8
c0013581:	68 47 f3 01 c0       	push   0xc001f347
c0013586:	50                   	push   eax
c0013587:	e8 74 d0 fe ff       	call   c0000600 <strcpy>
c001358c:	83 c4 10             	add    esp,0x10
c001358f:	90                   	nop
c0013590:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013594:	83 c0 0c             	add    eax,0xc
c0013597:	83 ec 08             	sub    esp,0x8
c001359a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001359e:	50                   	push   eax
c001359f:	e8 5c d0 fe ff       	call   c0000600 <strcpy>
c00135a4:	83 c4 10             	add    esp,0x10
c00135a7:	83 ec 08             	sub    esp,0x8
c00135aa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00135ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00135b2:	e8 c9 fb ff ff       	call   c0013180 <Process::addArgs(char**)>
c00135b7:	83 c4 10             	add    esp,0x10
c00135ba:	90                   	nop
c00135bb:	83 c4 24             	add    esp,0x24
c00135be:	5b                   	pop    ebx
c00135bf:	5e                   	pop    esi
c00135c0:	c3                   	ret    
c00135c1:	8d 76 00             	lea    esi,[esi+0x0]

c00135c4 <taskStartupFunction>:
c00135c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135c9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00135cc:	c3                   	ret    
c00135cd:	90                   	nop
c00135ce:	66 90                	xchg   ax,ax

c00135d0 <Semaphore::Semaphore(int)>:
c00135d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00135d8:	89 10                	mov    DWORD PTR [eax],edx
c00135da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135de:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00135e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00135f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00135fb:	90                   	nop
c00135fc:	c3                   	ret    
c00135fd:	90                   	nop
c00135fe:	66 90                	xchg   ax,ax

c0013600 <Mutex::Mutex()>:
c0013600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013604:	6a 01                	push   0x1
c0013606:	50                   	push   eax
c0013607:	e8 c4 ff ff ff       	call   c00135d0 <Semaphore::Semaphore(int)>
c001360c:	83 c4 08             	add    esp,0x8
c001360f:	90                   	nop
c0013610:	c3                   	ret    
c0013611:	90                   	nop
c0013612:	66 90                	xchg   ax,ax

c0013614 <Process::createThread(void (*)(void*), void*, int)>:
c0013614:	57                   	push   edi
c0013615:	31 c9                	xor    ecx,ecx
c0013617:	56                   	push   esi
c0013618:	53                   	push   ebx
c0013619:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001361d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013624:	89 f2                	mov    edx,esi
c0013626:	66 90                	xchg   ax,ax
c0013628:	31 c0                	xor    eax,eax
c001362a:	66 89 d0             	mov    ax,dx
c001362d:	83 e2 01             	and    edx,0x1
c0013630:	74 12                	je     c0013644 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0013632:	d1 f8                	sar    eax,1
c0013634:	41                   	inc    ecx
c0013635:	89 c2                	mov    edx,eax
c0013637:	83 f9 10             	cmp    ecx,0x10
c001363a:	75 ec                	jne    c0013628 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001363c:	31 db                	xor    ebx,ebx
c001363e:	89 d8                	mov    eax,ebx
c0013640:	5b                   	pop    ebx
c0013641:	5e                   	pop    esi
c0013642:	5f                   	pop    edi
c0013643:	c3                   	ret    
c0013644:	b8 01 00 00 00       	mov    eax,0x1
c0013649:	d3 e0                	shl    eax,cl
c001364b:	09 c6                	or     esi,eax
c001364d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013650:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0013657:	01 c0                	add    eax,eax
c0013659:	01 c8                	add    eax,ecx
c001365b:	8d 04 80             	lea    eax,[eax+eax*4]
c001365e:	01 d8                	add    eax,ebx
c0013660:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0013667:	75 0b                	jne    c0013674 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013669:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0013673:	90                   	nop
c0013674:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001367a:	83 ec 08             	sub    esp,0x8
c001367d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013680:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013683:	01 c0                	add    eax,eax
c0013685:	01 c8                	add    eax,ecx
c0013687:	8d 3c 80             	lea    edi,[eax+eax*4]
c001368a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c001368d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0013693:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013699:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001369d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00136a3:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00136a9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00136b0:	89 ca                	mov    edx,ecx
c00136b2:	f7 da                	neg    edx
c00136b4:	c1 e2 15             	shl    edx,0x15
c00136b7:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00136bd:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00136c3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00136c7:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00136d1:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00136d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00136db:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00136e1:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00136eb:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00136f5:	53                   	push   ebx
c00136f6:	68 84 61 02 c0       	push   0xc0026184
c00136fb:	e8 1c 99 00 00       	call   c001d01c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013700:	83 c4 10             	add    esp,0x10
c0013703:	89 d8                	mov    eax,ebx
c0013705:	5b                   	pop    ebx
c0013706:	5e                   	pop    esi
c0013707:	5f                   	pop    edi
c0013708:	c3                   	ret    
c0013709:	90                   	nop
c001370a:	66 90                	xchg   ax,ax

c001370c <Process::createUserThread()>:
c001370c:	83 ec 0c             	sub    esp,0xc
c001370f:	68 80 00 00 00       	push   0x80
c0013714:	6a 00                	push   0x0
c0013716:	68 74 30 01 c0       	push   0xc0013074
c001371b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001371f:	50                   	push   eax
c0013720:	e8 ef fe ff ff       	call   c0013614 <Process::createThread(void (*)(void*), void*, int)>
c0013725:	83 c4 1c             	add    esp,0x1c
c0013728:	c3                   	ret    
c0013729:	8d 76 00             	lea    esi,[esi+0x0]

c001372c <setupMultitasking(void (*)())>:
c001372c:	56                   	push   esi
c001372d:	53                   	push   ebx
c001372e:	53                   	push   ebx
c001372f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013733:	eb 13                	jmp    c0013748 <setupMultitasking(void (*)())+0x1c>
c0013735:	8d 76 00             	lea    esi,[esi+0x0]
c0013738:	83 ec 0c             	sub    esp,0xc
c001373b:	68 84 61 02 c0       	push   0xc0026184
c0013740:	e8 1f 98 00 00       	call   c001cf64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013745:	83 c4 10             	add    esp,0x10
c0013748:	83 ec 0c             	sub    esp,0xc
c001374b:	68 84 61 02 c0       	push   0xc0026184
c0013750:	e8 eb 97 00 00       	call   c001cf40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013755:	83 c4 10             	add    esp,0x10
c0013758:	84 c0                	test   al,al
c001375a:	74 dc                	je     c0013738 <setupMultitasking(void (*)())+0xc>
c001375c:	83 ec 0c             	sub    esp,0xc
c001375f:	68 24 07 00 00       	push   0x724
c0013764:	e8 0c 41 ff ff       	call   c0007875 <malloc>
c0013769:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013770:	89 c3                	mov    ebx,eax
c0013772:	6a 00                	push   0x0
c0013774:	68 4b f3 01 c0       	push   0xc001f34b
c0013779:	6a 01                	push   0x1
c001377b:	50                   	push   eax
c001377c:	e8 6b fc ff ff       	call   c00133ec <Process::Process(bool, char const*, Process*, char**)>
c0013781:	83 c4 14             	add    esp,0x14
c0013784:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001378a:	89 1d 90 61 02 c0    	mov    DWORD PTR ds:0xc0026190,ebx
c0013790:	50                   	push   eax
c0013791:	e8 1d 4d ff ff       	call   c00084b3 <setActiveTerminal(VgaText*)>
c0013796:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c001379e:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00137a8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00137ae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00137b1:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00137bb:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00137c1:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00137c7:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00137d1:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00137db:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00137e5:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00137eb:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00137f1:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00137fb:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013801:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001380b:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013811:	5a                   	pop    edx
c0013812:	59                   	pop    ecx
c0013813:	68 47 f3 01 c0       	push   0xc001f347
c0013818:	50                   	push   eax
c0013819:	e8 e2 cd fe ff       	call   c0000600 <strcpy>
c001381e:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013825:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013829:	83 c4 14             	add    esp,0x14
c001382c:	5b                   	pop    ebx
c001382d:	5e                   	pop    esi
c001382e:	e9 36 ca fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0013833:	90                   	nop

c0013834 <schedule()>:
c0013834:	8b 15 64 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026164
c001383a:	85 d2                	test   edx,edx
c001383c:	74 0e                	je     c001384c <schedule()+0x18>
c001383e:	c7 05 60 61 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x1
c0013848:	c3                   	ret    
c0013849:	8d 76 00             	lea    esi,[esi+0x0]
c001384c:	53                   	push   ebx
c001384d:	83 ec 14             	sub    esp,0x14
c0013850:	68 84 61 02 c0       	push   0xc0026184
c0013855:	e8 e6 96 00 00       	call   c001cf40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001385a:	83 c4 10             	add    esp,0x10
c001385d:	84 c0                	test   al,al
c001385f:	75 3b                	jne    c001389c <schedule()+0x68>
c0013861:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013866:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013869:	4a                   	dec    edx
c001386a:	74 38                	je     c00138a4 <schedule()+0x70>
c001386c:	83 ec 0c             	sub    esp,0xc
c001386f:	68 84 61 02 c0       	push   0xc0026184
c0013874:	e8 e3 96 00 00       	call   c001cf5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013879:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0013880:	89 c3                	mov    ebx,eax
c0013882:	e8 dd 96 00 00       	call   c001cf64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013887:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001388e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013891:	e8 36 f8 ff ff       	call   c00130cc <switchToThread(ThreadControlBlock*)>
c0013896:	83 c4 10             	add    esp,0x10
c0013899:	8d 76 00             	lea    esi,[esi+0x0]
c001389c:	83 c4 08             	add    esp,0x8
c001389f:	5b                   	pop    ebx
c00138a0:	c3                   	ret    
c00138a1:	8d 76 00             	lea    esi,[esi+0x0]
c00138a4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00138ab:	83 ec 08             	sub    esp,0x8
c00138ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138b3:	50                   	push   eax
c00138b4:	68 84 61 02 c0       	push   0xc0026184
c00138b9:	e8 5e 97 00 00       	call   c001d01c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00138be:	83 c4 10             	add    esp,0x10
c00138c1:	eb a9                	jmp    c001386c <schedule()+0x38>
c00138c3:	90                   	nop

c00138c4 <Semaphore::tryAcquire()>:
c00138c4:	53                   	push   ebx
c00138c5:	83 ec 08             	sub    esp,0x8
c00138c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00138cc:	fa                   	cli    
c00138cd:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00138d2:	8d 50 01             	lea    edx,[eax+0x1]
c00138d5:	89 15 68 61 02 c0    	mov    DWORD PTR ds:0xc0026168,edx
c00138db:	8b 15 64 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026164
c00138e1:	8d 5a 01             	lea    ebx,[edx+0x1]
c00138e4:	89 1d 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,ebx
c00138ea:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00138ed:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00138ef:	7c 33                	jl     c0013924 <Semaphore::tryAcquire()+0x60>
c00138f1:	89 15 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,edx
c00138f7:	85 d2                	test   edx,edx
c00138f9:	75 0d                	jne    c0013908 <Semaphore::tryAcquire()+0x44>
c00138fb:	8b 15 60 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026160
c0013901:	85 d2                	test   edx,edx
c0013903:	75 6b                	jne    c0013970 <Semaphore::tryAcquire()+0xac>
c0013905:	8d 76 00             	lea    esi,[esi+0x0]
c0013908:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001390d:	85 c0                	test   eax,eax
c001390f:	74 0b                	je     c001391c <Semaphore::tryAcquire()+0x58>
c0013911:	8d 76 00             	lea    esi,[esi+0x0]
c0013914:	31 c0                	xor    eax,eax
c0013916:	83 c4 08             	add    esp,0x8
c0013919:	5b                   	pop    ebx
c001391a:	c3                   	ret    
c001391b:	90                   	nop
c001391c:	fb                   	sti    
c001391d:	83 c4 08             	add    esp,0x8
c0013920:	5b                   	pop    ebx
c0013921:	c3                   	ret    
c0013922:	66 90                	xchg   ax,ax
c0013924:	43                   	inc    ebx
c0013925:	89 15 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,edx
c001392b:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001392e:	85 d2                	test   edx,edx
c0013930:	75 22                	jne    c0013954 <Semaphore::tryAcquire()+0x90>
c0013932:	8b 0d 60 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026160
c0013938:	85 c9                	test   ecx,ecx
c001393a:	74 18                	je     c0013954 <Semaphore::tryAcquire()+0x90>
c001393c:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0013946:	e8 e9 fe ff ff       	call   c0013834 <schedule()>
c001394b:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013950:	48                   	dec    eax
c0013951:	8d 76 00             	lea    esi,[esi+0x0]
c0013954:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013959:	85 c0                	test   eax,eax
c001395b:	75 0b                	jne    c0013968 <Semaphore::tryAcquire()+0xa4>
c001395d:	fb                   	sti    
c001395e:	b0 01                	mov    al,0x1
c0013960:	83 c4 08             	add    esp,0x8
c0013963:	5b                   	pop    ebx
c0013964:	c3                   	ret    
c0013965:	8d 76 00             	lea    esi,[esi+0x0]
c0013968:	b0 01                	mov    al,0x1
c001396a:	83 c4 08             	add    esp,0x8
c001396d:	5b                   	pop    ebx
c001396e:	c3                   	ret    
c001396f:	90                   	nop
c0013970:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c001397a:	e8 b5 fe ff ff       	call   c0013834 <schedule()>
c001397f:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013984:	48                   	dec    eax
c0013985:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001398a:	85 c0                	test   eax,eax
c001398c:	75 86                	jne    c0013914 <Semaphore::tryAcquire()+0x50>
c001398e:	eb 8c                	jmp    c001391c <Semaphore::tryAcquire()+0x58>

c0013990 <Semaphore::assertLocked(char const*)>:
c0013990:	83 ec 0c             	sub    esp,0xc
c0013993:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013997:	fa                   	cli    
c0013998:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001399e:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c00139a3:	8d 48 01             	lea    ecx,[eax+0x1]
c00139a6:	89 0d 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,ecx
c00139ac:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00139ae:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00139b1:	7c 29                	jl     c00139dc <Semaphore::assertLocked(char const*)+0x4c>
c00139b3:	90                   	nop
c00139b4:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c00139b9:	85 c0                	test   eax,eax
c00139bb:	75 0b                	jne    c00139c8 <Semaphore::assertLocked(char const*)+0x38>
c00139bd:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c00139c2:	85 c0                	test   eax,eax
c00139c4:	75 2e                	jne    c00139f4 <Semaphore::assertLocked(char const*)+0x64>
c00139c6:	66 90                	xchg   ax,ax
c00139c8:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00139cd:	48                   	dec    eax
c00139ce:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00139d3:	75 03                	jne    c00139d8 <Semaphore::assertLocked(char const*)+0x48>
c00139d5:	fb                   	sti    
c00139d6:	66 90                	xchg   ax,ax
c00139d8:	83 c4 0c             	add    esp,0xc
c00139db:	c3                   	ret    
c00139dc:	83 ec 0c             	sub    esp,0xc
c00139df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00139e3:	52                   	push   edx
c00139e4:	e8 2e c9 ff ff       	call   c0010317 <KePanic(char const*)>
c00139e9:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c00139ee:	83 c4 10             	add    esp,0x10
c00139f1:	48                   	dec    eax
c00139f2:	eb c0                	jmp    c00139b4 <Semaphore::assertLocked(char const*)+0x24>
c00139f4:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c00139fe:	e8 31 fe ff ff       	call   c0013834 <schedule()>
c0013a03:	eb c3                	jmp    c00139c8 <Semaphore::assertLocked(char const*)+0x38>
c0013a05:	8d 76 00             	lea    esi,[esi+0x0]

c0013a08 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013a08:	83 ec 0c             	sub    esp,0xc
c0013a0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a14:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013a17:	e8 18 fe ff ff       	call   c0013834 <schedule()>
c0013a1c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013a21:	48                   	dec    eax
c0013a22:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013a27:	75 03                	jne    c0013a2c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013a29:	fb                   	sti    
c0013a2a:	66 90                	xchg   ax,ax
c0013a2c:	83 c4 0c             	add    esp,0xc
c0013a2f:	c3                   	ret    

c0013a30 <blockTask(TaskState)>:
c0013a30:	83 ec 0c             	sub    esp,0xc
c0013a33:	fa                   	cli    
c0013a34:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013a3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a43:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013a46:	e8 e9 fd ff ff       	call   c0013834 <schedule()>
c0013a4b:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013a50:	48                   	dec    eax
c0013a51:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013a56:	75 04                	jne    c0013a5c <blockTask(TaskState)+0x2c>
c0013a58:	fb                   	sti    
c0013a59:	8d 76 00             	lea    esi,[esi+0x0]
c0013a5c:	83 c4 0c             	add    esp,0xc
c0013a5f:	c3                   	ret    

c0013a60 <waitTask(int, int*, int)>:
c0013a60:	83 ec 18             	sub    esp,0x18
c0013a63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a68:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013a6c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013a6f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013a73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a78:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013a7b:	6a 07                	push   0x7
c0013a7d:	e8 ae ff ff ff       	call   c0013a30 <blockTask(TaskState)>
c0013a82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a87:	83 c4 10             	add    esp,0x10
c0013a8a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013a8d:	85 d2                	test   edx,edx
c0013a8f:	74 0b                	je     c0013a9c <waitTask(int, int*, int)+0x3c>
c0013a91:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013a94:	89 02                	mov    DWORD PTR [edx],eax
c0013a96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a9b:	90                   	nop
c0013a9c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013a9f:	83 c4 0c             	add    esp,0xc
c0013aa2:	c3                   	ret    
c0013aa3:	90                   	nop

c0013aa4 <milliTenthSleepUntil(unsigned int)>:
c0013aa4:	83 ec 0c             	sub    esp,0xc
c0013aa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aab:	39 05 8c 54 02 c0    	cmp    DWORD PTR ds:0xc002548c,eax
c0013ab1:	76 05                	jbe    c0013ab8 <milliTenthSleepUntil(unsigned int)+0x14>
c0013ab3:	90                   	nop
c0013ab4:	83 c4 0c             	add    esp,0xc
c0013ab7:	c3                   	ret    
c0013ab8:	fa                   	cli    
c0013ab9:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013abf:	83 ec 08             	sub    esp,0x8
c0013ac2:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c0013ac8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013ace:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013ad1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013ad7:	52                   	push   edx
c0013ad8:	68 78 61 02 c0       	push   0xc0026178
c0013add:	e8 3a 95 00 00       	call   c001d01c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013ae2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013ae9:	e8 42 ff ff ff       	call   c0013a30 <blockTask(TaskState)>
c0013aee:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0013af3:	83 c4 10             	add    esp,0x10
c0013af6:	48                   	dec    eax
c0013af7:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0013afc:	85 c0                	test   eax,eax
c0013afe:	75 0c                	jne    c0013b0c <milliTenthSleepUntil(unsigned int)+0x68>
c0013b00:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c0013b05:	85 c0                	test   eax,eax
c0013b07:	75 17                	jne    c0013b20 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013b09:	8d 76 00             	lea    esi,[esi+0x0]
c0013b0c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013b11:	48                   	dec    eax
c0013b12:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013b17:	75 9b                	jne    c0013ab4 <milliTenthSleepUntil(unsigned int)+0x10>
c0013b19:	fb                   	sti    
c0013b1a:	83 c4 0c             	add    esp,0xc
c0013b1d:	c3                   	ret    
c0013b1e:	66 90                	xchg   ax,ax
c0013b20:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0013b2a:	e8 05 fd ff ff       	call   c0013834 <schedule()>
c0013b2f:	eb db                	jmp    c0013b0c <milliTenthSleepUntil(unsigned int)+0x68>
c0013b31:	8d 76 00             	lea    esi,[esi+0x0]

c0013b34 <milliTenthSleep(unsigned int)>:
c0013b34:	a1 8c 54 02 c0       	mov    eax,ds:0xc002548c
c0013b39:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013b3d:	e9 62 ff ff ff       	jmp    c0013aa4 <milliTenthSleepUntil(unsigned int)>
c0013b42:	66 90                	xchg   ax,ax

c0013b44 <sleep(unsigned int)>:
c0013b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b48:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b4b:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b4e:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b51:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b54:	c1 e0 04             	shl    eax,0x4
c0013b57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b5b:	eb d7                	jmp    c0013b34 <milliTenthSleep(unsigned int)>
c0013b5d:	90                   	nop
c0013b5e:	66 90                	xchg   ax,ax

c0013b60 <Semaphore::acquire()>:
c0013b60:	83 ec 0c             	sub    esp,0xc
c0013b63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b67:	fa                   	cli    
c0013b68:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0013b6d:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013b73:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b76:	89 0d 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,ecx
c0013b7c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013b7f:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013b81:	7d 2d                	jge    c0013bb0 <Semaphore::acquire()+0x50>
c0013b83:	41                   	inc    ecx
c0013b84:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013b87:	90                   	nop
c0013b88:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0013b8d:	85 c0                	test   eax,eax
c0013b8f:	75 0b                	jne    c0013b9c <Semaphore::acquire()+0x3c>
c0013b91:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c0013b96:	85 c0                	test   eax,eax
c0013b98:	75 62                	jne    c0013bfc <Semaphore::acquire()+0x9c>
c0013b9a:	66 90                	xchg   ax,ax
c0013b9c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013ba1:	48                   	dec    eax
c0013ba2:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013ba7:	75 03                	jne    c0013bac <Semaphore::acquire()+0x4c>
c0013ba9:	fb                   	sti    
c0013baa:	66 90                	xchg   ax,ax
c0013bac:	83 c4 0c             	add    esp,0xc
c0013baf:	c3                   	ret    
c0013bb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bb5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013bbc:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013bbf:	85 c9                	test   ecx,ecx
c0013bc1:	74 4d                	je     c0013c10 <Semaphore::acquire()+0xb0>
c0013bc3:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013bc6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013bcc:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013bcf:	90                   	nop
c0013bd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bd5:	83 ec 0c             	sub    esp,0xc
c0013bd8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013bdb:	68 c8 f3 01 c0       	push   0xc001f3c8
c0013be0:	e8 29 6a ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0013be5:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013bec:	e8 3f fe ff ff       	call   c0013a30 <blockTask(TaskState)>
c0013bf1:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0013bf6:	83 c4 10             	add    esp,0x10
c0013bf9:	48                   	dec    eax
c0013bfa:	eb 8c                	jmp    c0013b88 <Semaphore::acquire()+0x28>
c0013bfc:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0013c06:	e8 29 fc ff ff       	call   c0013834 <schedule()>
c0013c0b:	eb 8f                	jmp    c0013b9c <Semaphore::acquire()+0x3c>
c0013c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0013c10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c15:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013c18:	eb b6                	jmp    c0013bd0 <Semaphore::acquire()+0x70>
c0013c1a:	66 90                	xchg   ax,ax

c0013c1c <taskReturned>:
c0013c1c:	83 ec 18             	sub    esp,0x18
c0013c1f:	68 e8 f3 01 c0       	push   0xc001f3e8
c0013c24:	e8 ee c6 ff ff       	call   c0010317 <KePanic(char const*)>
c0013c29:	83 c4 10             	add    esp,0x10
c0013c2c:	83 ec 0c             	sub    esp,0xc
c0013c2f:	6a 02                	push   0x2
c0013c31:	e8 fa fd ff ff       	call   c0013a30 <blockTask(TaskState)>
c0013c36:	fa                   	cli    
c0013c37:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013c3d:	e8 f2 fb ff ff       	call   c0013834 <schedule()>
c0013c42:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013c47:	83 c4 10             	add    esp,0x10
c0013c4a:	48                   	dec    eax
c0013c4b:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013c50:	85 c0                	test   eax,eax
c0013c52:	75 d8                	jne    c0013c2c <taskReturned+0x10>
c0013c54:	fb                   	sti    
c0013c55:	eb d5                	jmp    c0013c2c <taskReturned+0x10>
c0013c57:	90                   	nop

c0013c58 <Thr::processFromPID(int)>:
c0013c58:	57                   	push   edi
c0013c59:	56                   	push   esi
c0013c5a:	53                   	push   ebx
c0013c5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c5f:	fa                   	cli    
c0013c60:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013c66:	83 ec 0c             	sub    esp,0xc
c0013c69:	68 84 61 02 c0       	push   0xc0026184
c0013c6e:	e8 e9 92 00 00       	call   c001cf5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c73:	83 c4 10             	add    esp,0x10
c0013c76:	89 c7                	mov    edi,eax
c0013c78:	eb 16                	jmp    c0013c90 <Thr::processFromPID(int)+0x38>
c0013c7a:	66 90                	xchg   ax,ax
c0013c7c:	83 ec 0c             	sub    esp,0xc
c0013c7f:	68 84 61 02 c0       	push   0xc0026184
c0013c84:	e8 d3 92 00 00       	call   c001cf5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c89:	83 c4 10             	add    esp,0x10
c0013c8c:	39 f8                	cmp    eax,edi
c0013c8e:	74 4c                	je     c0013cdc <Thr::processFromPID(int)+0x84>
c0013c90:	83 ec 0c             	sub    esp,0xc
c0013c93:	68 84 61 02 c0       	push   0xc0026184
c0013c98:	e8 bf 92 00 00       	call   c001cf5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c9d:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0013ca4:	89 c3                	mov    ebx,eax
c0013ca6:	e8 b9 92 00 00       	call   c001cf64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013cab:	58                   	pop    eax
c0013cac:	5a                   	pop    edx
c0013cad:	53                   	push   ebx
c0013cae:	68 84 61 02 c0       	push   0xc0026184
c0013cb3:	e8 64 93 00 00       	call   c001d01c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013cb8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013cbb:	83 c4 10             	add    esp,0x10
c0013cbe:	39 30                	cmp    DWORD PTR [eax],esi
c0013cc0:	75 ba                	jne    c0013c7c <Thr::processFromPID(int)+0x24>
c0013cc2:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013cc7:	48                   	dec    eax
c0013cc8:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013ccd:	74 09                	je     c0013cd8 <Thr::processFromPID(int)+0x80>
c0013ccf:	90                   	nop
c0013cd0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013cd3:	5b                   	pop    ebx
c0013cd4:	5e                   	pop    esi
c0013cd5:	5f                   	pop    edi
c0013cd6:	c3                   	ret    
c0013cd7:	90                   	nop
c0013cd8:	fb                   	sti    
c0013cd9:	eb f5                	jmp    c0013cd0 <Thr::processFromPID(int)+0x78>
c0013cdb:	90                   	nop
c0013cdc:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013ce1:	48                   	dec    eax
c0013ce2:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013ce7:	75 07                	jne    c0013cf0 <Thr::processFromPID(int)+0x98>
c0013ce9:	fb                   	sti    
c0013cea:	5b                   	pop    ebx
c0013ceb:	5e                   	pop    esi
c0013cec:	5f                   	pop    edi
c0013ced:	c3                   	ret    
c0013cee:	66 90                	xchg   ax,ax
c0013cf0:	5b                   	pop    ebx
c0013cf1:	31 c0                	xor    eax,eax
c0013cf3:	5e                   	pop    esi
c0013cf4:	5f                   	pop    edi
c0013cf5:	c3                   	ret    
c0013cf6:	66 90                	xchg   ax,ax

c0013cf8 <unblockTask(ThreadControlBlock*)>:
c0013cf8:	53                   	push   ebx
c0013cf9:	83 ec 08             	sub    esp,0x8
c0013cfc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d00:	fa                   	cli    
c0013d01:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013d07:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013d0a:	85 c0                	test   eax,eax
c0013d0c:	74 66                	je     c0013d74 <unblockTask(ThreadControlBlock*)+0x7c>
c0013d0e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013d11:	48                   	dec    eax
c0013d12:	74 38                	je     c0013d4c <unblockTask(ThreadControlBlock*)+0x54>
c0013d14:	83 ec 0c             	sub    esp,0xc
c0013d17:	68 84 61 02 c0       	push   0xc0026184
c0013d1c:	e8 3b 92 00 00       	call   c001cf5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d21:	83 c4 10             	add    esp,0x10
c0013d24:	85 c0                	test   eax,eax
c0013d26:	75 1c                	jne    c0013d44 <unblockTask(ThreadControlBlock*)+0x4c>
c0013d28:	eb 5e                	jmp    c0013d88 <unblockTask(ThreadControlBlock*)+0x90>
c0013d2a:	66 90                	xchg   ax,ax
c0013d2c:	83 ec 08             	sub    esp,0x8
c0013d2f:	50                   	push   eax
c0013d30:	68 84 61 02 c0       	push   0xc0026184
c0013d35:	e8 d2 95 00 00       	call   c001d30c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013d3a:	83 c4 10             	add    esp,0x10
c0013d3d:	85 c0                	test   eax,eax
c0013d3f:	74 47                	je     c0013d88 <unblockTask(ThreadControlBlock*)+0x90>
c0013d41:	8d 76 00             	lea    esi,[esi+0x0]
c0013d44:	39 c3                	cmp    ebx,eax
c0013d46:	75 e4                	jne    c0013d2c <unblockTask(ThreadControlBlock*)+0x34>
c0013d48:	eb 12                	jmp    c0013d5c <unblockTask(ThreadControlBlock*)+0x64>
c0013d4a:	66 90                	xchg   ax,ax
c0013d4c:	83 ec 0c             	sub    esp,0xc
c0013d4f:	68 69 f3 01 c0       	push   0xc001f369
c0013d54:	e8 b5 68 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0013d59:	83 c4 10             	add    esp,0x10
c0013d5c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013d61:	48                   	dec    eax
c0013d62:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013d67:	75 03                	jne    c0013d6c <unblockTask(ThreadControlBlock*)+0x74>
c0013d69:	fb                   	sti    
c0013d6a:	66 90                	xchg   ax,ax
c0013d6c:	83 c4 08             	add    esp,0x8
c0013d6f:	5b                   	pop    ebx
c0013d70:	c3                   	ret    
c0013d71:	8d 76 00             	lea    esi,[esi+0x0]
c0013d74:	83 ec 0c             	sub    esp,0xc
c0013d77:	68 52 f3 01 c0       	push   0xc001f352
c0013d7c:	e8 8d 68 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0013d81:	83 c4 10             	add    esp,0x10
c0013d84:	eb d6                	jmp    c0013d5c <unblockTask(ThreadControlBlock*)+0x64>
c0013d86:	66 90                	xchg   ax,ax
c0013d88:	83 ec 08             	sub    esp,0x8
c0013d8b:	53                   	push   ebx
c0013d8c:	68 84 61 02 c0       	push   0xc0026184
c0013d91:	e8 86 92 00 00       	call   c001d01c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d96:	83 c4 10             	add    esp,0x10
c0013d99:	eb c1                	jmp    c0013d5c <unblockTask(ThreadControlBlock*)+0x64>
c0013d9b:	90                   	nop

c0013d9c <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013d9c:	55                   	push   ebp
c0013d9d:	57                   	push   edi
c0013d9e:	56                   	push   esi
c0013d9f:	53                   	push   ebx
c0013da0:	83 ec 1c             	sub    esp,0x1c
c0013da3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013da7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013daa:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013db0:	85 ed                	test   ebp,ebp
c0013db2:	7e 24                	jle    c0013dd8 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013db4:	31 f6                	xor    esi,esi
c0013db6:	66 90                	xchg   ax,ax
c0013db8:	83 ec 0c             	sub    esp,0xc
c0013dbb:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013dc2:	46                   	inc    esi
c0013dc3:	57                   	push   edi
c0013dc4:	e8 bc 3a ff ff       	call   c0007885 <free>
c0013dc9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013dcc:	83 c4 10             	add    esp,0x10
c0013dcf:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013dd5:	7f e1                	jg     c0013db8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013dd7:	90                   	nop
c0013dd8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013de2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013de7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013dea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013ded:	d3 c0                	rol    eax,cl
c0013def:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013df6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013df9:	89 f7                	mov    edi,esi
c0013dfb:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013e03:	0f 85 77 01 00 00    	jne    c0013f80 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013e09:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013e0f:	85 ed                	test   ebp,ebp
c0013e11:	74 1d                	je     c0013e30 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013e13:	83 ec 0c             	sub    esp,0xc
c0013e16:	55                   	push   ebp
c0013e17:	e8 0c c2 ff ff       	call   c0010028 <EnvVarContainer::~EnvVarContainer()>
c0013e1c:	59                   	pop    ecx
c0013e1d:	5e                   	pop    esi
c0013e1e:	6a 0c                	push   0xc
c0013e20:	55                   	push   ebp
c0013e21:	e8 f2 66 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c0013e26:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013e29:	83 c4 10             	add    esp,0x10
c0013e2c:	89 f7                	mov    edi,esi
c0013e2e:	66 90                	xchg   ax,ax
c0013e30:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e36:	85 c0                	test   eax,eax
c0013e38:	0f 84 b6 00 00 00    	je     c0013ef4 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013e3e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013e41:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013e45:	31 c9                	xor    ecx,ecx
c0013e47:	eb 17                	jmp    c0013e60 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013e49:	8d 76 00             	lea    esi,[esi+0x0]
c0013e4c:	41                   	inc    ecx
c0013e4d:	83 f9 10             	cmp    ecx,0x10
c0013e50:	0f 84 9e 00 00 00    	je     c0013ef4 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013e56:	66 90                	xchg   ax,ax
c0013e58:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e5e:	66 90                	xchg   ax,ax
c0013e60:	31 d2                	xor    edx,edx
c0013e62:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013e69:	d3 fa                	sar    edx,cl
c0013e6b:	83 e2 01             	and    edx,0x1
c0013e6e:	74 dc                	je     c0013e4c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e70:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013e73:	01 d2                	add    edx,edx
c0013e75:	01 ca                	add    edx,ecx
c0013e77:	8d 14 92             	lea    edx,[edx+edx*4]
c0013e7a:	01 d0                	add    eax,edx
c0013e7c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013e82:	83 fd 07             	cmp    ebp,0x7
c0013e85:	75 c5                	jne    c0013e4c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e87:	05 40 02 00 00       	add    eax,0x240
c0013e8c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013e8f:	83 fd ff             	cmp    ebp,0xffffffff
c0013e92:	0f 8c f0 00 00 00    	jl     c0013f88 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013e98:	0f 84 ae 01 00 00    	je     c001404c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013e9e:	85 ed                	test   ebp,ebp
c0013ea0:	0f 84 92 01 00 00    	je     c0014038 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013ea6:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013ea8:	75 a2                	jne    c0013e4c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013eaa:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013eb0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013eb4:	01 d0                	add    eax,edx
c0013eb6:	66 90                	xchg   ax,ax
c0013eb8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013ebc:	83 ec 0c             	sub    esp,0xc
c0013ebf:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013ec5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ec8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013ece:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013ed5:	50                   	push   eax
c0013ed6:	e8 1d fe ff ff       	call   c0013cf8 <unblockTask(ThreadControlBlock*)>
c0013edb:	83 c4 10             	add    esp,0x10
c0013ede:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ee1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013ee5:	89 f7                	mov    edi,esi
c0013ee7:	41                   	inc    ecx
c0013ee8:	83 f9 10             	cmp    ecx,0x10
c0013eeb:	0f 85 67 ff ff ff    	jne    c0013e58 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013ef1:	8d 76 00             	lea    esi,[esi+0x0]
c0013ef4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013efa:	85 c0                	test   eax,eax
c0013efc:	74 62                	je     c0013f60 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013efe:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013f04:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013f0a:	74 54                	je     c0013f60 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013f0c:	83 ec 0c             	sub    esp,0xc
c0013f0f:	68 84 61 02 c0       	push   0xc0026184
c0013f14:	e8 43 90 00 00       	call   c001cf5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f19:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0013f20:	89 c7                	mov    edi,eax
c0013f22:	e8 19 90 00 00       	call   c001cf40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013f27:	83 c4 10             	add    esp,0x10
c0013f2a:	84 c0                	test   al,al
c0013f2c:	0f 84 ce 00 00 00    	je     c0014000 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013f32:	66 90                	xchg   ax,ax
c0013f34:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f37:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013f3d:	85 d2                	test   edx,edx
c0013f3f:	74 0f                	je     c0013f50 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013f41:	83 ec 0c             	sub    esp,0xc
c0013f44:	8b 02                	mov    eax,DWORD PTR [edx]
c0013f46:	52                   	push   edx
c0013f47:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f4a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f4d:	83 c4 10             	add    esp,0x10
c0013f50:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013f5a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0013f60:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013f66:	85 db                	test   ebx,ebx
c0013f68:	74 16                	je     c0013f80 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013f6a:	83 ec 0c             	sub    esp,0xc
c0013f6d:	53                   	push   ebx
c0013f6e:	e8 3d 59 ff ff       	call   c00098b0 <VAS::~VAS()>
c0013f73:	58                   	pop    eax
c0013f74:	5a                   	pop    edx
c0013f75:	6a 14                	push   0x14
c0013f77:	53                   	push   ebx
c0013f78:	e8 9b 65 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c0013f7d:	83 c4 10             	add    esp,0x10
c0013f80:	83 c4 1c             	add    esp,0x1c
c0013f83:	5b                   	pop    ebx
c0013f84:	5e                   	pop    esi
c0013f85:	5f                   	pop    edi
c0013f86:	5d                   	pop    ebp
c0013f87:	c3                   	ret    
c0013f88:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f8c:	83 ec 0c             	sub    esp,0xc
c0013f8f:	68 1c f4 01 c0       	push   0xc001f41c
c0013f94:	e8 7e c3 ff ff       	call   c0010317 <KePanic(char const*)>
c0013f99:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f9c:	83 c4 10             	add    esp,0x10
c0013f9f:	89 f7                	mov    edi,esi
c0013fa1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013fa5:	e9 a2 fe ff ff       	jmp    c0013e4c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013faa:	66 90                	xchg   ax,ax
c0013fac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013fb2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013fb8:	75 1e                	jne    c0013fd8 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013fba:	83 ec 0c             	sub    esp,0xc
c0013fbd:	68 84 f4 01 c0       	push   0xc001f484
c0013fc2:	e8 47 66 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0013fc7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013fce:	e8 5d fa ff ff       	call   c0013a30 <blockTask(TaskState)>
c0013fd3:	83 c4 10             	add    esp,0x10
c0013fd6:	66 90                	xchg   ax,ax
c0013fd8:	83 ec 08             	sub    esp,0x8
c0013fdb:	56                   	push   esi
c0013fdc:	68 84 61 02 c0       	push   0xc0026184
c0013fe1:	e8 36 90 00 00       	call   c001d01c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013fe6:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0013fed:	e8 6a 8f 00 00       	call   c001cf5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ff2:	83 c4 10             	add    esp,0x10
c0013ff5:	39 f8                	cmp    eax,edi
c0013ff7:	0f 84 37 ff ff ff    	je     c0013f34 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013ffd:	8d 76 00             	lea    esi,[esi+0x0]
c0014000:	83 ec 0c             	sub    esp,0xc
c0014003:	68 84 61 02 c0       	push   0xc0026184
c0014008:	e8 4f 8f 00 00       	call   c001cf5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001400d:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0014014:	89 c6                	mov    esi,eax
c0014016:	e8 49 8f 00 00       	call   c001cf64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001401b:	83 c4 10             	add    esp,0x10
c001401e:	39 f3                	cmp    ebx,esi
c0014020:	74 b6                	je     c0013fd8 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014022:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0014025:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014028:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001402e:	75 a8                	jne    c0013fd8 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014030:	e9 77 ff ff ff       	jmp    c0013fac <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0014035:	8d 76 00             	lea    esi,[esi+0x0]
c0014038:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001403c:	83 ec 0c             	sub    esp,0xc
c001403f:	68 50 f4 01 c0       	push   0xc001f450
c0014044:	e9 4b ff ff ff       	jmp    c0013f94 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014049:	8d 76 00             	lea    esi,[esi+0x0]
c001404c:	8b 36                	mov    esi,DWORD PTR [esi]
c001404e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014052:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0014055:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014058:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001405e:	01 d7                	add    edi,edx
c0014060:	89 f8                	mov    eax,edi
c0014062:	e9 51 fe ff ff       	jmp    c0013eb8 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0014067:	90                   	nop

c0014068 <cleanerTaskFunction(void*)>:
c0014068:	53                   	push   ebx
c0014069:	83 ec 08             	sub    esp,0x8
c001406c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014071:	48                   	dec    eax
c0014072:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0014077:	75 03                	jne    c001407c <cleanerTaskFunction(void*)+0x14>
c0014079:	fb                   	sti    
c001407a:	66 90                	xchg   ax,ax
c001407c:	fa                   	cli    
c001407d:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014082:	80 3d 4c 61 02 c0 00 	cmp    BYTE PTR ds:0xc002614c,0x0
c0014089:	8d 50 01             	lea    edx,[eax+0x1]
c001408c:	89 15 68 61 02 c0    	mov    DWORD PTR ds:0xc0026168,edx
c0014092:	0f 84 ac 00 00 00    	je     c0014144 <cleanerTaskFunction(void*)+0xdc>
c0014098:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001409d:	85 c0                	test   eax,eax
c001409f:	75 03                	jne    c00140a4 <cleanerTaskFunction(void*)+0x3c>
c00140a1:	fb                   	sti    
c00140a2:	66 90                	xchg   ax,ax
c00140a4:	c6 05 4c 61 02 c0 00 	mov    BYTE PTR ds:0xc002614c,0x0
c00140ab:	fa                   	cli    
c00140ac:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00140b2:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c00140b8:	fa                   	cli    
c00140b9:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00140bf:	eb 2b                	jmp    c00140ec <cleanerTaskFunction(void*)+0x84>
c00140c1:	8d 76 00             	lea    esi,[esi+0x0]
c00140c4:	83 ec 0c             	sub    esp,0xc
c00140c7:	68 6c 61 02 c0       	push   0xc002616c
c00140cc:	e8 8b 8e 00 00       	call   c001cf5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140d1:	c7 04 24 6c 61 02 c0 	mov    DWORD PTR [esp],0xc002616c
c00140d8:	89 c3                	mov    ebx,eax
c00140da:	e8 85 8e 00 00       	call   c001cf64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00140df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00140e2:	e8 b5 fc ff ff       	call   c0013d9c <cleanupTerminatedTask(ThreadControlBlock*)>
c00140e7:	83 c4 10             	add    esp,0x10
c00140ea:	66 90                	xchg   ax,ax
c00140ec:	83 ec 0c             	sub    esp,0xc
c00140ef:	68 6c 61 02 c0       	push   0xc002616c
c00140f4:	e8 47 8e 00 00       	call   c001cf40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00140f9:	83 c4 10             	add    esp,0x10
c00140fc:	84 c0                	test   al,al
c00140fe:	74 c4                	je     c00140c4 <cleanerTaskFunction(void*)+0x5c>
c0014100:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014105:	48                   	dec    eax
c0014106:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001410b:	75 03                	jne    c0014110 <cleanerTaskFunction(void*)+0xa8>
c001410d:	fb                   	sti    
c001410e:	66 90                	xchg   ax,ax
c0014110:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0014115:	48                   	dec    eax
c0014116:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c001411b:	0f 85 4b ff ff ff    	jne    c001406c <cleanerTaskFunction(void*)+0x4>
c0014121:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c0014126:	85 c0                	test   eax,eax
c0014128:	0f 84 3e ff ff ff    	je     c001406c <cleanerTaskFunction(void*)+0x4>
c001412e:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0014138:	e8 f7 f6 ff ff       	call   c0013834 <schedule()>
c001413d:	e9 2a ff ff ff       	jmp    c001406c <cleanerTaskFunction(void*)+0x4>
c0014142:	66 90                	xchg   ax,ax
c0014144:	83 ec 0c             	sub    esp,0xc
c0014147:	6a 02                	push   0x2
c0014149:	e8 ba f8 ff ff       	call   c0013a08 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001414e:	83 c4 10             	add    esp,0x10
c0014151:	e9 4e ff ff ff       	jmp    c00140a4 <cleanerTaskFunction(void*)+0x3c>
c0014156:	66 90                	xchg   ax,ax

c0014158 <terminateTask(int)>:
c0014158:	83 ec 14             	sub    esp,0x14
c001415b:	fa                   	cli    
c001415c:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0014162:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c0014168:	fa                   	cli    
c0014169:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001416f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014173:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014178:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001417b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014180:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0014183:	50                   	push   eax
c0014184:	68 6c 61 02 c0       	push   0xc002616c
c0014189:	e8 8e 8e 00 00       	call   c001d01c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001418e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014193:	83 c4 10             	add    esp,0x10
c0014196:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001419d:	a1 48 61 02 c0       	mov    eax,ds:0xc0026148
c00141a2:	85 c0                	test   eax,eax
c00141a4:	74 5e                	je     c0014204 <terminateTask(int)+0xac>
c00141a6:	83 ec 0c             	sub    esp,0xc
c00141a9:	c6 05 4c 61 02 c0 01 	mov    BYTE PTR ds:0xc002614c,0x1
c00141b0:	50                   	push   eax
c00141b1:	e8 42 fb ff ff       	call   c0013cf8 <unblockTask(ThreadControlBlock*)>
c00141b6:	83 c4 10             	add    esp,0x10
c00141b9:	8d 76 00             	lea    esi,[esi+0x0]
c00141bc:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00141c1:	48                   	dec    eax
c00141c2:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00141c7:	75 03                	jne    c00141cc <terminateTask(int)+0x74>
c00141c9:	fb                   	sti    
c00141ca:	66 90                	xchg   ax,ax
c00141cc:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c00141d1:	48                   	dec    eax
c00141d2:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c00141d7:	75 0b                	jne    c00141e4 <terminateTask(int)+0x8c>
c00141d9:	83 3d 60 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026160,0x0
c00141e0:	75 36                	jne    c0014218 <terminateTask(int)+0xc0>
c00141e2:	66 90                	xchg   ax,ax
c00141e4:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00141e9:	48                   	dec    eax
c00141ea:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00141ef:	75 03                	jne    c00141f4 <terminateTask(int)+0x9c>
c00141f1:	fb                   	sti    
c00141f2:	66 90                	xchg   ax,ax
c00141f4:	fa                   	cli    
c00141f5:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00141fb:	90                   	nop
c00141fc:	e8 33 f6 ff ff       	call   c0013834 <schedule()>
c0014201:	eb e1                	jmp    c00141e4 <terminateTask(int)+0x8c>
c0014203:	90                   	nop
c0014204:	83 ec 0c             	sub    esp,0xc
c0014207:	68 80 f3 01 c0       	push   0xc001f380
c001420c:	e8 fd 63 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014211:	83 c4 10             	add    esp,0x10
c0014214:	eb a6                	jmp    c00141bc <terminateTask(int)+0x64>
c0014216:	66 90                	xchg   ax,ax
c0014218:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0014222:	eb d8                	jmp    c00141fc <terminateTask(int)+0xa4>

c0014224 <Thr::terminateFromIRQ(int)>:
c0014224:	83 ec 18             	sub    esp,0x18
c0014227:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001422b:	50                   	push   eax
c001422c:	e8 27 ff ff ff       	call   c0014158 <terminateTask(int)>
c0014231:	90                   	nop
c0014232:	66 90                	xchg   ax,ax

c0014234 <Semaphore::release()>:
c0014234:	83 ec 0c             	sub    esp,0xc
c0014237:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001423b:	fa                   	cli    
c001423c:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0014241:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0014247:	8d 48 01             	lea    ecx,[eax+0x1]
c001424a:	89 0d 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,ecx
c0014250:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0014253:	85 c9                	test   ecx,ecx
c0014255:	74 41                	je     c0014298 <Semaphore::release()+0x64>
c0014257:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001425a:	83 ec 0c             	sub    esp,0xc
c001425d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014260:	51                   	push   ecx
c0014261:	e8 92 fa ff ff       	call   c0013cf8 <unblockTask(ThreadControlBlock*)>
c0014266:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c001426b:	83 c4 10             	add    esp,0x10
c001426e:	48                   	dec    eax
c001426f:	90                   	nop
c0014270:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0014275:	85 c0                	test   eax,eax
c0014277:	75 0b                	jne    c0014284 <Semaphore::release()+0x50>
c0014279:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c001427e:	85 c0                	test   eax,eax
c0014280:	75 1e                	jne    c00142a0 <Semaphore::release()+0x6c>
c0014282:	66 90                	xchg   ax,ax
c0014284:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014289:	48                   	dec    eax
c001428a:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001428f:	75 03                	jne    c0014294 <Semaphore::release()+0x60>
c0014291:	fb                   	sti    
c0014292:	66 90                	xchg   ax,ax
c0014294:	83 c4 0c             	add    esp,0xc
c0014297:	c3                   	ret    
c0014298:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001429b:	eb d3                	jmp    c0014270 <Semaphore::release()+0x3c>
c001429d:	8d 76 00             	lea    esi,[esi+0x0]
c00142a0:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c00142aa:	e8 85 f5 ff ff       	call   c0013834 <schedule()>
c00142af:	eb d3                	jmp    c0014284 <Semaphore::release()+0x50>
c00142b1:	8d 76 00             	lea    esi,[esi+0x0]

c00142b4 <__static_initialization_and_destruction_0(int, int)>:
c00142b4:	83 ec 0c             	sub    esp,0xc
c00142b7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00142bc:	0f 85 8e 00 00 00    	jne    c0014350 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00142c2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00142ca:	0f 85 80 00 00 00    	jne    c0014350 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00142d0:	83 ec 0c             	sub    esp,0xc
c00142d3:	68 84 61 02 c0       	push   0xc0026184
c00142d8:	e8 eb 8f 00 00       	call   c001d2c8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00142dd:	83 c4 10             	add    esp,0x10
c00142e0:	83 ec 04             	sub    esp,0x4
c00142e3:	68 90 ff 01 c0       	push   0xc001ff90
c00142e8:	68 84 61 02 c0       	push   0xc0026184
c00142ed:	68 78 d2 01 c0       	push   0xc001d278
c00142f2:	e8 d1 61 ff ff       	call   c000a4c8 <__cxa_atexit>
c00142f7:	83 c4 10             	add    esp,0x10
c00142fa:	83 ec 0c             	sub    esp,0xc
c00142fd:	68 78 61 02 c0       	push   0xc0026178
c0014302:	e8 c1 8f 00 00       	call   c001d2c8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014307:	83 c4 10             	add    esp,0x10
c001430a:	83 ec 04             	sub    esp,0x4
c001430d:	68 90 ff 01 c0       	push   0xc001ff90
c0014312:	68 78 61 02 c0       	push   0xc0026178
c0014317:	68 78 d2 01 c0       	push   0xc001d278
c001431c:	e8 a7 61 ff ff       	call   c000a4c8 <__cxa_atexit>
c0014321:	83 c4 10             	add    esp,0x10
c0014324:	83 ec 0c             	sub    esp,0xc
c0014327:	68 6c 61 02 c0       	push   0xc002616c
c001432c:	e8 97 8f 00 00       	call   c001d2c8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014331:	83 c4 10             	add    esp,0x10
c0014334:	83 ec 04             	sub    esp,0x4
c0014337:	68 90 ff 01 c0       	push   0xc001ff90
c001433c:	68 6c 61 02 c0       	push   0xc002616c
c0014341:	68 78 d2 01 c0       	push   0xc001d278
c0014346:	e8 7d 61 ff ff       	call   c000a4c8 <__cxa_atexit>
c001434b:	83 c4 10             	add    esp,0x10
c001434e:	66 90                	xchg   ax,ax
c0014350:	90                   	nop
c0014351:	83 c4 0c             	add    esp,0xc
c0014354:	c3                   	ret    
c0014355:	8d 76 00             	lea    esi,[esi+0x0]

c0014358 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0014358:	83 ec 0c             	sub    esp,0xc
c001435b:	83 ec 08             	sub    esp,0x8
c001435e:	68 ff ff 00 00       	push   0xffff
c0014363:	6a 01                	push   0x1
c0014365:	e8 4a ff ff ff       	call   c00142b4 <__static_initialization_and_destruction_0(int, int)>
c001436a:	83 c4 10             	add    esp,0x10
c001436d:	83 c4 0c             	add    esp,0xc
c0014370:	c3                   	ret    

c0014371 <Vm::inbv(unsigned short)>:
c0014371:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014375:	66 81 fa fe fe       	cmp    dx,0xfefe
c001437a:	75 06                	jne    c0014382 <Vm::inbv(unsigned short)+0x11>
c001437c:	a0 cc 61 02 c0       	mov    al,ds:0xc00261cc
c0014381:	c3                   	ret    
c0014382:	ec                   	in     al,dx
c0014383:	c3                   	ret    

c0014384 <Vm::outbv(unsigned short, unsigned char)>:
c0014384:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014388:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001438c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014391:	75 25                	jne    c00143b8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0014393:	8b 0d cc 61 02 c0    	mov    ecx,DWORD PTR ds:0xc00261cc
c0014399:	8d 51 01             	lea    edx,[ecx+0x1]
c001439c:	88 81 e0 61 02 c0    	mov    BYTE PTR [ecx-0x3ffd9e20],al
c00143a2:	89 15 cc 61 02 c0    	mov    DWORD PTR ds:0xc00261cc,edx
c00143a8:	83 fa 20             	cmp    edx,0x20
c00143ab:	75 0c                	jne    c00143b9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00143ad:	c7 05 cc 61 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00261cc,0x1f
c00143b7:	c3                   	ret    
c00143b8:	ee                   	out    dx,al
c00143b9:	c3                   	ret    

c00143ba <Vm::realToLinear(unsigned short, unsigned short)>:
c00143ba:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00143bf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00143c4:	c1 e0 04             	shl    eax,0x4
c00143c7:	01 d0                	add    eax,edx
c00143c9:	c3                   	ret    

c00143ca <Vm::getSegment(unsigned int)>:
c00143ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143ce:	c1 e8 10             	shr    eax,0x10
c00143d1:	c3                   	ret    

c00143d2 <Vm::getOffset(unsigned int)>:
c00143d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143d6:	c3                   	ret    

c00143d7 <Vm::mainloop2()>:
c00143d7:	83 ec 18             	sub    esp,0x18
c00143da:	fa                   	cli    
c00143db:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00143e1:	6a 02                	push   0x2
c00143e3:	c6 05 c5 61 02 c0 01 	mov    BYTE PTR ds:0xc00261c5,0x1
c00143ea:	e8 19 f6 ff ff       	call   c0013a08 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00143ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143f4:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00143f8:	52                   	push   edx
c00143f9:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00143fd:	52                   	push   edx
c00143fe:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0014402:	52                   	push   edx
c0014403:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0014407:	50                   	push   eax
c0014408:	e8 02 be fe ff       	call   c000020f <goToVM86>
c001440d:	83 c4 2c             	add    esp,0x2c
c0014410:	c3                   	ret    

c0014411 <Vm::mainVm8086Loop(void*)>:
c0014411:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014416:	48                   	dec    eax
c0014417:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001441c:	75 01                	jne    c001441f <Vm::mainVm8086Loop(void*)+0xe>
c001441e:	fb                   	sti    
c001441f:	eb b6                	jmp    c00143d7 <Vm::mainloop2()>

c0014421 <Vm::mainloop3(unsigned long)>:
c0014421:	83 ec 18             	sub    esp,0x18
c0014424:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014428:	fa                   	cli    
c0014429:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001442f:	6a 02                	push   0x2
c0014431:	c6 05 c4 61 02 c0 01 	mov    BYTE PTR ds:0xc00261c4,0x1
c0014438:	a3 c0 61 02 c0       	mov    ds:0xc00261c0,eax
c001443d:	e8 c6 f5 ff ff       	call   c0013a08 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014442:	83 c4 1c             	add    esp,0x1c
c0014445:	eb 90                	jmp    c00143d7 <Vm::mainloop2()>

c0014447 <Vm::initialise8086()>:
c0014447:	83 ec 0c             	sub    esp,0xc
c001444a:	68 80 00 00 00       	push   0x80
c001444f:	6a 00                	push   0x0
c0014451:	68 11 44 01 c0       	push   0xc0014411
c0014456:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c001445c:	e8 b3 f1 ff ff       	call   c0013614 <Process::createThread(void (*)(void*), void*, int)>
c0014461:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0014468:	a3 c8 61 02 c0       	mov    ds:0xc00261c8,eax
c001446d:	68 00 01 00 00       	push   0x100
c0014472:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0014477:	6a 00                	push   0x0
c0014479:	6a 00                	push   0x0
c001447b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014481:	e8 88 58 ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014486:	83 c4 2c             	add    esp,0x2c
c0014489:	c3                   	ret    

c001448a <Vm::finish8086()>:
c001448a:	53                   	push   ebx
c001448b:	83 ec 08             	sub    esp,0x8
c001448e:	fa                   	cli    
c001448f:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0014495:	80 3d c4 61 02 c0 00 	cmp    BYTE PTR ds:0xc00261c4,0x0
c001449c:	75 15                	jne    c00144b3 <Vm::finish8086()+0x29>
c001449e:	e8 91 f3 ff ff       	call   c0013834 <schedule()>
c00144a3:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00144a8:	48                   	dec    eax
c00144a9:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00144ae:	75 de                	jne    c001448e <Vm::finish8086()+0x4>
c00144b0:	fb                   	sti    
c00144b1:	eb db                	jmp    c001448e <Vm::finish8086()+0x4>
c00144b3:	83 ec 0c             	sub    esp,0xc
c00144b6:	8b 1d c0 61 02 c0    	mov    ebx,DWORD PTR ds:0xc00261c0
c00144bc:	ff 35 c8 61 02 c0    	push   DWORD PTR ds:0xc00261c8
c00144c2:	c6 05 c4 61 02 c0 00 	mov    BYTE PTR ds:0xc00261c4,0x0
c00144c9:	e8 2a f8 ff ff       	call   c0013cf8 <unblockTask(ThreadControlBlock*)>
c00144ce:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00144d3:	83 c4 10             	add    esp,0x10
c00144d6:	8d 50 ff             	lea    edx,[eax-0x1]
c00144d9:	89 15 68 61 02 c0    	mov    DWORD PTR ds:0xc0026168,edx
c00144df:	85 d2                	test   edx,edx
c00144e1:	75 01                	jne    c00144e4 <Vm::finish8086()+0x5a>
c00144e3:	fb                   	sti    
c00144e4:	89 d8                	mov    eax,ebx
c00144e6:	83 c4 08             	add    esp,0x8
c00144e9:	5b                   	pop    ebx
c00144ea:	c3                   	ret    

c00144eb <Vm::getOutput8086(unsigned char*)>:
c00144eb:	57                   	push   edi
c00144ec:	8b 0d cc 61 02 c0    	mov    ecx,DWORD PTR ds:0xc00261cc
c00144f2:	56                   	push   esi
c00144f3:	be e0 61 02 c0       	mov    esi,0xc00261e0
c00144f8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00144fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00144fe:	a1 cc 61 02 c0       	mov    eax,ds:0xc00261cc
c0014503:	5e                   	pop    esi
c0014504:	c7 05 cc 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261cc,0x0
c001450e:	5f                   	pop    edi
c001450f:	c3                   	ret    

c0014510 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014510:	55                   	push   ebp
c0014511:	57                   	push   edi
c0014512:	56                   	push   esi
c0014513:	53                   	push   ebx
c0014514:	83 ec 0c             	sub    esp,0xc
c0014517:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001451b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001451f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0014523:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0014527:	fa                   	cli    
c0014528:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001452e:	80 3d c5 61 02 c0 00 	cmp    BYTE PTR ds:0xc00261c5,0x0
c0014535:	75 15                	jne    c001454c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0014537:	e8 f8 f2 ff ff       	call   c0013834 <schedule()>
c001453c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014541:	48                   	dec    eax
c0014542:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0014547:	75 de                	jne    c0014527 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014549:	fb                   	sti    
c001454a:	eb db                	jmp    c0014527 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001454c:	a1 c8 61 02 c0       	mov    eax,ds:0xc00261c8
c0014551:	c7 05 cc 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261cc,0x0
c001455b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001455f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0014563:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0014567:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001456b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001456f:	0f b7 ff             	movzx  edi,di
c0014572:	0f b7 f6             	movzx  esi,si
c0014575:	50                   	push   eax
c0014576:	6a 20                	push   0x20
c0014578:	6a 00                	push   0x0
c001457a:	68 e0 61 02 c0       	push   0xc00261e0
c001457f:	e8 4c bf fe ff       	call   c00004d0 <memset>
c0014584:	5a                   	pop    edx
c0014585:	59                   	pop    ecx
c0014586:	57                   	push   edi
c0014587:	56                   	push   esi
c0014588:	e8 2d fe ff ff       	call   c00143ba <Vm::realToLinear(unsigned short, unsigned short)>
c001458d:	83 c4 10             	add    esp,0x10
c0014590:	89 c7                	mov    edi,eax
c0014592:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014596:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001459a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001459c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00145a1:	c6 05 c5 61 02 c0 00 	mov    BYTE PTR ds:0xc00261c5,0x0
c00145a8:	48                   	dec    eax
c00145a9:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00145ae:	75 01                	jne    c00145b1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00145b0:	fb                   	sti    
c00145b1:	83 ec 0c             	sub    esp,0xc
c00145b4:	ff 35 c8 61 02 c0    	push   DWORD PTR ds:0xc00261c8
c00145ba:	e8 39 f7 ff ff       	call   c0013cf8 <unblockTask(ThreadControlBlock*)>
c00145bf:	83 c4 1c             	add    esp,0x1c
c00145c2:	b0 01                	mov    al,0x1
c00145c4:	5b                   	pop    ebx
c00145c5:	5e                   	pop    esi
c00145c6:	5f                   	pop    edi
c00145c7:	5d                   	pop    ebp
c00145c8:	c3                   	ret    

c00145c9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00145c9:	55                   	push   ebp
c00145ca:	57                   	push   edi
c00145cb:	56                   	push   esi
c00145cc:	53                   	push   ebx
c00145cd:	83 ec 2c             	sub    esp,0x2c
c00145d0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00145d4:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00145d8:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00145dc:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00145e0:	fa                   	cli    
c00145e1:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00145e7:	0f b6 35 c5 61 02 c0 	movzx  esi,BYTE PTR ds:0xc00261c5
c00145ee:	89 f0                	mov    eax,esi
c00145f0:	84 c0                	test   al,al
c00145f2:	75 1d                	jne    c0014611 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00145f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00145f8:	e8 37 f2 ff ff       	call   c0013834 <schedule()>
c00145fd:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014602:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014606:	48                   	dec    eax
c0014607:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001460c:	75 d2                	jne    c00145e0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001460e:	fb                   	sti    
c001460f:	eb cf                	jmp    c00145e0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014611:	a1 c8 61 02 c0       	mov    eax,ds:0xc00261c8
c0014616:	c7 05 cc 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261cc,0x0
c0014620:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014624:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014628:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c001462c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014630:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014634:	50                   	push   eax
c0014635:	6a 20                	push   0x20
c0014637:	6a 00                	push   0x0
c0014639:	68 e0 61 02 c0       	push   0xc00261e0
c001463e:	e8 8d be fe ff       	call   c00004d0 <memset>
c0014643:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001464a:	e8 26 32 ff ff       	call   c0007875 <malloc>
c001464f:	83 c4 0c             	add    esp,0xc
c0014652:	89 c3                	mov    ebx,eax
c0014654:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c001465a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001465e:	50                   	push   eax
c001465f:	e8 20 65 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0014664:	83 c4 10             	add    esp,0x10
c0014667:	85 db                	test   ebx,ebx
c0014669:	75 0a                	jne    c0014675 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001466b:	83 ec 0c             	sub    esp,0xc
c001466e:	68 ac f4 01 c0       	push   0xc001f4ac
c0014673:	eb 3e                	jmp    c00146b3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014675:	50                   	push   eax
c0014676:	8d 44 24 17          	lea    eax,[esp+0x17]
c001467a:	50                   	push   eax
c001467b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001467f:	50                   	push   eax
c0014680:	53                   	push   ebx
c0014681:	e8 6a 68 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0014686:	83 c4 10             	add    esp,0x10
c0014689:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001468e:	74 0a                	je     c001469a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014690:	83 ec 0c             	sub    esp,0xc
c0014693:	68 c0 f4 01 c0       	push   0xc001f4c0
c0014698:	eb 19                	jmp    c00146b3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001469a:	51                   	push   ecx
c001469b:	51                   	push   ecx
c001469c:	6a 01                	push   0x1
c001469e:	53                   	push   ebx
c001469f:	e8 a0 65 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c00146a4:	83 c4 10             	add    esp,0x10
c00146a7:	85 c0                	test   eax,eax
c00146a9:	74 24                	je     c00146cf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00146ab:	83 ec 0c             	sub    esp,0xc
c00146ae:	68 d9 f4 01 c0       	push   0xc001f4d9
c00146b3:	e8 5f bc ff ff       	call   c0010317 <KePanic(char const*)>
c00146b8:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00146bd:	83 c4 10             	add    esp,0x10
c00146c0:	48                   	dec    eax
c00146c1:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00146c6:	85 c0                	test   eax,eax
c00146c8:	75 01                	jne    c00146cb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00146ca:	fb                   	sti    
c00146cb:	31 f6                	xor    esi,esi
c00146cd:	eb 58                	jmp    c0014727 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00146cf:	0f b7 ed             	movzx  ebp,bp
c00146d2:	50                   	push   eax
c00146d3:	0f b7 ff             	movzx  edi,di
c00146d6:	50                   	push   eax
c00146d7:	55                   	push   ebp
c00146d8:	57                   	push   edi
c00146d9:	e8 dc fc ff ff       	call   c00143ba <Vm::realToLinear(unsigned short, unsigned short)>
c00146de:	5a                   	pop    edx
c00146df:	8b 13                	mov    edx,DWORD PTR [ebx]
c00146e1:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00146e5:	51                   	push   ecx
c00146e6:	50                   	push   eax
c00146e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00146eb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00146ef:	53                   	push   ebx
c00146f0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00146f3:	83 c4 14             	add    esp,0x14
c00146f6:	53                   	push   ebx
c00146f7:	e8 a6 65 ff ff       	call   c000aca2 <File::close()>
c00146fc:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014701:	83 c4 10             	add    esp,0x10
c0014704:	48                   	dec    eax
c0014705:	c6 05 c5 61 02 c0 00 	mov    BYTE PTR ds:0xc00261c5,0x0
c001470c:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0014711:	85 c0                	test   eax,eax
c0014713:	75 01                	jne    c0014716 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014715:	fb                   	sti    
c0014716:	83 ec 0c             	sub    esp,0xc
c0014719:	ff 35 c8 61 02 c0    	push   DWORD PTR ds:0xc00261c8
c001471f:	e8 d4 f5 ff ff       	call   c0013cf8 <unblockTask(ThreadControlBlock*)>
c0014724:	83 c4 10             	add    esp,0x10
c0014727:	83 c4 2c             	add    esp,0x2c
c001472a:	89 f0                	mov    eax,esi
c001472c:	5b                   	pop    ebx
c001472d:	5e                   	pop    esi
c001472e:	5f                   	pop    edi
c001472f:	5d                   	pop    ebp
c0014730:	c3                   	ret    

c0014731 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014731:	57                   	push   edi
c0014732:	56                   	push   esi
c0014733:	53                   	push   ebx
c0014734:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014738:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001473c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014740:	83 e8 06             	sub    eax,0x6
c0014743:	0f b7 c0             	movzx  eax,ax
c0014746:	50                   	push   eax
c0014747:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001474c:	50                   	push   eax
c001474d:	e8 68 fc ff ff       	call   c00143ba <Vm::realToLinear(unsigned short, unsigned short)>
c0014752:	5a                   	pop    edx
c0014753:	5e                   	pop    esi
c0014754:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0014757:	8d 56 fa             	lea    edx,[esi-0x6]
c001475a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014760:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0014763:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0014766:	83 c2 02             	add    edx,0x2
c0014769:	66 89 10             	mov    WORD PTR [eax],dx
c001476c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001476f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0014773:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0014776:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001477a:	89 d6                	mov    esi,edx
c001477c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0014782:	66 81 e6 ff fd       	and    si,0xfdff
c0014787:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001478b:	74 07                	je     c0014794 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001478d:	89 d6                	mov    esi,edx
c001478f:	66 81 ce 00 02       	or     si,0x200
c0014794:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014798:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001479d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00147a1:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00147a9:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00147ac:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00147b4:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00147b7:	5b                   	pop    ebx
c00147b8:	5e                   	pop    esi
c00147b9:	5f                   	pop    edi
c00147ba:	c3                   	ret    

c00147bb <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00147bb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147c0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147c5:	c1 e0 04             	shl    eax,0x4
c00147c8:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00147cb:	c3                   	ret    

c00147cc <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00147cc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147d1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147d6:	c1 e0 04             	shl    eax,0x4
c00147d9:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00147dd:	c3                   	ret    

c00147de <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00147de:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147e3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147e8:	c1 e0 04             	shl    eax,0x4
c00147eb:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00147ee:	c3                   	ret    

c00147ef <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00147ef:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147f4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147f9:	c1 e0 04             	shl    eax,0x4
c00147fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014800:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014803:	c3                   	ret    

c0014804 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014804:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014809:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001480e:	c1 e0 04             	shl    eax,0x4
c0014811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014815:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014819:	c3                   	ret    

c001481a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001481a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001481f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014824:	c1 e0 04             	shl    eax,0x4
c0014827:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001482b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001482e:	c3                   	ret    

c001482f <Vm::faultHandler(regs*)>:
c001482f:	55                   	push   ebp
c0014830:	57                   	push   edi
c0014831:	56                   	push   esi
c0014832:	53                   	push   ebx
c0014833:	83 ec 1c             	sub    esp,0x1c
c0014836:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001483a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001483d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014841:	0f b7 f8             	movzx  edi,ax
c0014844:	52                   	push   edx
c0014845:	0f b7 c0             	movzx  eax,ax
c0014848:	50                   	push   eax
c0014849:	e8 6c fb ff ff       	call   c00143ba <Vm::realToLinear(unsigned short, unsigned short)>
c001484e:	5a                   	pop    edx
c001484f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0014852:	59                   	pop    ecx
c0014853:	89 c1                	mov    ecx,eax
c0014855:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014858:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001485c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014861:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014865:	0f b7 c5             	movzx  eax,bp
c0014868:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001486c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014870:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014874:	e8 41 fb ff ff       	call   c00143ba <Vm::realToLinear(unsigned short, unsigned short)>
c0014879:	5e                   	pop    esi
c001487a:	be 06 00 00 00       	mov    esi,0x6
c001487f:	5a                   	pop    edx
c0014880:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014885:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001488a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001488d:	80 fa 9d             	cmp    dl,0x9d
c0014890:	0f 84 2c 02 00 00    	je     c0014ac2 <Vm::faultHandler(regs*)+0x293>
c0014896:	0f 87 91 00 00 00    	ja     c001492d <Vm::faultHandler(regs*)+0xfe>
c001489c:	80 fa 66             	cmp    dl,0x66
c001489f:	0f 84 98 01 00 00    	je     c0014a3d <Vm::faultHandler(regs*)+0x20e>
c00148a5:	77 47                	ja     c00148ee <Vm::faultHandler(regs*)+0xbf>
c00148a7:	80 fa 36             	cmp    dl,0x36
c00148aa:	0f 84 80 01 00 00    	je     c0014a30 <Vm::faultHandler(regs*)+0x201>
c00148b0:	77 1a                	ja     c00148cc <Vm::faultHandler(regs*)+0x9d>
c00148b2:	80 fa 26             	cmp    dl,0x26
c00148b5:	0f 84 4e 01 00 00    	je     c0014a09 <Vm::faultHandler(regs*)+0x1da>
c00148bb:	80 fa 2e             	cmp    dl,0x2e
c00148be:	0f 85 e2 05 00 00    	jne    c0014ea6 <Vm::faultHandler(regs*)+0x677>
c00148c4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00148c7:	31 f6                	xor    esi,esi
c00148c9:	41                   	inc    ecx
c00148ca:	eb be                	jmp    c001488a <Vm::faultHandler(regs*)+0x5b>
c00148cc:	80 fa 64             	cmp    dl,0x64
c00148cf:	0f 84 41 01 00 00    	je     c0014a16 <Vm::faultHandler(regs*)+0x1e7>
c00148d5:	0f 87 48 01 00 00    	ja     c0014a23 <Vm::faultHandler(regs*)+0x1f4>
c00148db:	80 fa 3e             	cmp    dl,0x3e
c00148de:	0f 85 c2 05 00 00    	jne    c0014ea6 <Vm::faultHandler(regs*)+0x677>
c00148e4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00148e7:	be 01 00 00 00       	mov    esi,0x1
c00148ec:	eb db                	jmp    c00148c9 <Vm::faultHandler(regs*)+0x9a>
c00148ee:	80 fa 6d             	cmp    dl,0x6d
c00148f1:	0f 84 ec 02 00 00    	je     c0014be3 <Vm::faultHandler(regs*)+0x3b4>
c00148f7:	77 17                	ja     c0014910 <Vm::faultHandler(regs*)+0xe1>
c00148f9:	80 fa 67             	cmp    dl,0x67
c00148fc:	0f 84 48 01 00 00    	je     c0014a4a <Vm::faultHandler(regs*)+0x21b>
c0014902:	80 fa 6c             	cmp    dl,0x6c
c0014905:	0f 84 69 02 00 00    	je     c0014b74 <Vm::faultHandler(regs*)+0x345>
c001490b:	e9 96 05 00 00       	jmp    c0014ea6 <Vm::faultHandler(regs*)+0x677>
c0014910:	80 fa 6f             	cmp    dl,0x6f
c0014913:	0f 84 f4 03 00 00    	je     c0014d0d <Vm::faultHandler(regs*)+0x4de>
c0014919:	0f 82 59 03 00 00    	jb     c0014c78 <Vm::faultHandler(regs*)+0x449>
c001491f:	80 fa 9c             	cmp    dl,0x9c
c0014922:	0f 84 2f 01 00 00    	je     c0014a57 <Vm::faultHandler(regs*)+0x228>
c0014928:	e9 79 05 00 00       	jmp    c0014ea6 <Vm::faultHandler(regs*)+0x677>
c001492d:	80 fa ec             	cmp    dl,0xec
c0014930:	0f 84 14 05 00 00    	je     c0014e4a <Vm::faultHandler(regs*)+0x61b>
c0014936:	77 7b                	ja     c00149b3 <Vm::faultHandler(regs*)+0x184>
c0014938:	80 fa e4             	cmp    dl,0xe4
c001493b:	0f 84 93 04 00 00    	je     c0014dd4 <Vm::faultHandler(regs*)+0x5a5>
c0014941:	77 53                	ja     c0014996 <Vm::faultHandler(regs*)+0x167>
c0014943:	80 fa cd             	cmp    dl,0xcd
c0014946:	0f 84 d9 01 00 00    	je     c0014b25 <Vm::faultHandler(regs*)+0x2f6>
c001494c:	80 fa cf             	cmp    dl,0xcf
c001494f:	0f 85 51 05 00 00    	jne    c0014ea6 <Vm::faultHandler(regs*)+0x677>
c0014955:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014958:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001495b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001495f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014962:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014966:	81 ca 00 02 02 00    	or     edx,0x20200
c001496c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001496f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014973:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014979:	66 c1 e8 09          	shr    ax,0x9
c001497d:	83 e0 01             	and    eax,0x1
c0014980:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014983:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014986:	83 c0 06             	add    eax,0x6
c0014989:	25 ff ff 00 00       	and    eax,0xffff
c001498e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014991:	e9 0c 05 00 00       	jmp    c0014ea2 <Vm::faultHandler(regs*)+0x673>
c0014996:	80 fa e6             	cmp    dl,0xe6
c0014999:	0f 84 7f 04 00 00    	je     c0014e1e <Vm::faultHandler(regs*)+0x5ef>
c001499f:	0f 82 4b 04 00 00    	jb     c0014df0 <Vm::faultHandler(regs*)+0x5c1>
c00149a5:	80 fa e7             	cmp    dl,0xe7
c00149a8:	0f 84 87 04 00 00    	je     c0014e35 <Vm::faultHandler(regs*)+0x606>
c00149ae:	e9 f3 04 00 00       	jmp    c0014ea6 <Vm::faultHandler(regs*)+0x677>
c00149b3:	80 fa ef             	cmp    dl,0xef
c00149b6:	0f 84 d1 04 00 00    	je     c0014e8d <Vm::faultHandler(regs*)+0x65e>
c00149bc:	77 28                	ja     c00149e6 <Vm::faultHandler(regs*)+0x1b7>
c00149be:	80 fa ed             	cmp    dl,0xed
c00149c1:	0f 84 9f 04 00 00    	je     c0014e66 <Vm::faultHandler(regs*)+0x637>
c00149c7:	80 fa ee             	cmp    dl,0xee
c00149ca:	0f 85 d6 04 00 00    	jne    c0014ea6 <Vm::faultHandler(regs*)+0x677>
c00149d0:	50                   	push   eax
c00149d1:	50                   	push   eax
c00149d2:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00149d6:	50                   	push   eax
c00149d7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00149db:	50                   	push   eax
c00149dc:	e8 a3 f9 ff ff       	call   c0014384 <Vm::outbv(unsigned short, unsigned char)>
c00149e1:	e9 9f 04 00 00       	jmp    c0014e85 <Vm::faultHandler(regs*)+0x656>
c00149e6:	80 fa fa             	cmp    dl,0xfa
c00149e9:	0f 84 69 01 00 00    	je     c0014b58 <Vm::faultHandler(regs*)+0x329>
c00149ef:	80 fa fb             	cmp    dl,0xfb
c00149f2:	0f 84 6e 01 00 00    	je     c0014b66 <Vm::faultHandler(regs*)+0x337>
c00149f8:	80 fa f3             	cmp    dl,0xf3
c00149fb:	0f 85 a5 04 00 00    	jne    c0014ea6 <Vm::faultHandler(regs*)+0x677>
c0014a01:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a04:	e9 c0 fe ff ff       	jmp    c00148c9 <Vm::faultHandler(regs*)+0x9a>
c0014a09:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a0c:	be 02 00 00 00       	mov    esi,0x2
c0014a11:	e9 b3 fe ff ff       	jmp    c00148c9 <Vm::faultHandler(regs*)+0x9a>
c0014a16:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a19:	be 03 00 00 00       	mov    esi,0x3
c0014a1e:	e9 a6 fe ff ff       	jmp    c00148c9 <Vm::faultHandler(regs*)+0x9a>
c0014a23:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a26:	be 04 00 00 00       	mov    esi,0x4
c0014a2b:	e9 99 fe ff ff       	jmp    c00148c9 <Vm::faultHandler(regs*)+0x9a>
c0014a30:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a33:	be 05 00 00 00       	mov    esi,0x5
c0014a38:	e9 8c fe ff ff       	jmp    c00148c9 <Vm::faultHandler(regs*)+0x9a>
c0014a3d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a40:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014a45:	e9 7f fe ff ff       	jmp    c00148c9 <Vm::faultHandler(regs*)+0x9a>
c0014a4a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a4d:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014a52:	e9 72 fe ff ff       	jmp    c00148c9 <Vm::faultHandler(regs*)+0x9a>
c0014a57:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014a5a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014a5e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a63:	74 30                	je     c0014a95 <Vm::faultHandler(regs*)+0x266>
c0014a65:	83 e9 04             	sub    ecx,0x4
c0014a68:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014a6e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014a74:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014a77:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014a7a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a80:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a84:	0f 84 15 04 00 00    	je     c0014e9f <Vm::faultHandler(regs*)+0x670>
c0014a8a:	80 ce 02             	or     dh,0x2
c0014a8d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014a90:	e9 0a 04 00 00       	jmp    c0014e9f <Vm::faultHandler(regs*)+0x670>
c0014a95:	83 e9 02             	sub    ecx,0x2
c0014a98:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014a9e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014aa1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014aa5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014aab:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014aaf:	74 05                	je     c0014ab6 <Vm::faultHandler(regs*)+0x287>
c0014ab1:	80 ce 02             	or     dh,0x2
c0014ab4:	eb 03                	jmp    c0014ab9 <Vm::faultHandler(regs*)+0x28a>
c0014ab6:	80 e6 fd             	and    dh,0xfd
c0014ab9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014abd:	e9 dd 03 00 00       	jmp    c0014e9f <Vm::faultHandler(regs*)+0x670>
c0014ac2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014ac7:	74 2a                	je     c0014af3 <Vm::faultHandler(regs*)+0x2c4>
c0014ac9:	8b 10                	mov    edx,DWORD PTR [eax]
c0014acb:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014ad1:	81 ca 00 02 02 00    	or     edx,0x20200
c0014ad7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014ada:	8b 00                	mov    eax,DWORD PTR [eax]
c0014adc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014ae2:	c1 e8 09             	shr    eax,0x9
c0014ae5:	83 e0 01             	and    eax,0x1
c0014ae8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014aeb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014aee:	83 c0 04             	add    eax,0x4
c0014af1:	eb 25                	jmp    c0014b18 <Vm::faultHandler(regs*)+0x2e9>
c0014af3:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014af6:	81 ca 00 02 02 00    	or     edx,0x20200
c0014afc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014aff:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014b02:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014b08:	66 c1 e8 09          	shr    ax,0x9
c0014b0c:	83 e0 01             	and    eax,0x1
c0014b0f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014b12:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014b15:	83 c0 02             	add    eax,0x2
c0014b18:	25 ff ff 00 00       	and    eax,0xffff
c0014b1d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014b20:	e9 7a 03 00 00       	jmp    c0014e9f <Vm::faultHandler(regs*)+0x670>
c0014b25:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b29:	3c ee                	cmp    al,0xee
c0014b2b:	75 10                	jne    c0014b3d <Vm::faultHandler(regs*)+0x30e>
c0014b2d:	83 ec 0c             	sub    esp,0xc
c0014b30:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014b33:	e8 e9 f8 ff ff       	call   c0014421 <Vm::mainloop3(unsigned long)>
c0014b38:	e9 4b 03 00 00       	jmp    c0014e88 <Vm::faultHandler(regs*)+0x659>
c0014b3d:	83 ec 0c             	sub    esp,0xc
c0014b40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b48:	51                   	push   ecx
c0014b49:	50                   	push   eax
c0014b4a:	53                   	push   ebx
c0014b4b:	e8 e1 fb ff ff       	call   c0014731 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014b50:	83 c4 20             	add    esp,0x20
c0014b53:	e9 4a 03 00 00       	jmp    c0014ea2 <Vm::faultHandler(regs*)+0x673>
c0014b58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b5d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014b61:	e9 39 03 00 00       	jmp    c0014e9f <Vm::faultHandler(regs*)+0x670>
c0014b66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b6b:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014b6f:	e9 2b 03 00 00       	jmp    c0014e9f <Vm::faultHandler(regs*)+0x670>
c0014b74:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014b77:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014b7c:	74 2b                	je     c0014ba9 <Vm::faultHandler(regs*)+0x37a>
c0014b7e:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014b85:	76 22                	jbe    c0014ba9 <Vm::faultHandler(regs*)+0x37a>
c0014b87:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014b8b:	50                   	push   eax
c0014b8c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b90:	50                   	push   eax
c0014b91:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b95:	50                   	push   eax
c0014b96:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b9a:	50                   	push   eax
c0014b9b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b9f:	50                   	push   eax
c0014ba0:	6a 6c                	push   0x6c
c0014ba2:	6a 6c                	push   0x6c
c0014ba4:	e9 b9 01 00 00       	jmp    c0014d62 <Vm::faultHandler(regs*)+0x533>
c0014ba9:	83 ec 0c             	sub    esp,0xc
c0014bac:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014bb0:	0f b7 f6             	movzx  esi,si
c0014bb3:	50                   	push   eax
c0014bb4:	e8 b8 f7 ff ff       	call   c0014371 <Vm::inbv(unsigned short)>
c0014bb9:	83 c4 0c             	add    esp,0xc
c0014bbc:	0f b6 c0             	movzx  eax,al
c0014bbf:	50                   	push   eax
c0014bc0:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014bc4:	50                   	push   eax
c0014bc5:	56                   	push   esi
c0014bc6:	e8 24 fc ff ff       	call   c00147ef <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014bcb:	83 c4 10             	add    esp,0x10
c0014bce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bd1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014bd5:	74 03                	je     c0014bda <Vm::faultHandler(regs*)+0x3ab>
c0014bd7:	48                   	dec    eax
c0014bd8:	eb 01                	jmp    c0014bdb <Vm::faultHandler(regs*)+0x3ac>
c0014bda:	40                   	inc    eax
c0014bdb:	0f b7 c0             	movzx  eax,ax
c0014bde:	e9 8d 00 00 00       	jmp    c0014c70 <Vm::faultHandler(regs*)+0x441>
c0014be3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014be6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014be9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014bee:	74 29                	je     c0014c19 <Vm::faultHandler(regs*)+0x3ea>
c0014bf0:	3d ff ff 00 00       	cmp    eax,0xffff
c0014bf5:	76 22                	jbe    c0014c19 <Vm::faultHandler(regs*)+0x3ea>
c0014bf7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014bfb:	50                   	push   eax
c0014bfc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c00:	50                   	push   eax
c0014c01:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c05:	50                   	push   eax
c0014c06:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c0a:	50                   	push   eax
c0014c0b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c0f:	50                   	push   eax
c0014c10:	6a 6d                	push   0x6d
c0014c12:	6a 6d                	push   0x6d
c0014c14:	e9 49 01 00 00       	jmp    c0014d62 <Vm::faultHandler(regs*)+0x533>
c0014c19:	0f b7 c8             	movzx  ecx,ax
c0014c1c:	0f b7 f6             	movzx  esi,si
c0014c1f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014c22:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014c27:	74 20                	je     c0014c49 <Vm::faultHandler(regs*)+0x41a>
c0014c29:	ed                   	in     eax,dx
c0014c2a:	55                   	push   ebp
c0014c2b:	50                   	push   eax
c0014c2c:	51                   	push   ecx
c0014c2d:	56                   	push   esi
c0014c2e:	e8 e7 fb ff ff       	call   c001481a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014c33:	83 c4 10             	add    esp,0x10
c0014c36:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c39:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c3d:	74 05                	je     c0014c44 <Vm::faultHandler(regs*)+0x415>
c0014c3f:	83 e8 04             	sub    eax,0x4
c0014c42:	eb 27                	jmp    c0014c6b <Vm::faultHandler(regs*)+0x43c>
c0014c44:	83 c0 04             	add    eax,0x4
c0014c47:	eb 22                	jmp    c0014c6b <Vm::faultHandler(regs*)+0x43c>
c0014c49:	66 ed                	in     ax,dx
c0014c4b:	0f b7 c0             	movzx  eax,ax
c0014c4e:	57                   	push   edi
c0014c4f:	50                   	push   eax
c0014c50:	51                   	push   ecx
c0014c51:	56                   	push   esi
c0014c52:	e8 ad fb ff ff       	call   c0014804 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014c57:	83 c4 10             	add    esp,0x10
c0014c5a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c5d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c61:	74 05                	je     c0014c68 <Vm::faultHandler(regs*)+0x439>
c0014c63:	83 e8 02             	sub    eax,0x2
c0014c66:	eb 03                	jmp    c0014c6b <Vm::faultHandler(regs*)+0x43c>
c0014c68:	83 c0 02             	add    eax,0x2
c0014c6b:	25 ff ff 00 00       	and    eax,0xffff
c0014c70:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014c73:	e9 27 02 00 00       	jmp    c0014e9f <Vm::faultHandler(regs*)+0x670>
c0014c78:	8d 46 ff             	lea    eax,[esi-0x1]
c0014c7b:	3c 05                	cmp    al,0x5
c0014c7d:	77 24                	ja     c0014ca3 <Vm::faultHandler(regs*)+0x474>
c0014c7f:	0f b6 c0             	movzx  eax,al
c0014c82:	ff 24 85 4c f5 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0ab4]
c0014c89:	0f b7 fd             	movzx  edi,bp
c0014c8c:	eb 15                	jmp    c0014ca3 <Vm::faultHandler(regs*)+0x474>
c0014c8e:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014c92:	eb 0f                	jmp    c0014ca3 <Vm::faultHandler(regs*)+0x474>
c0014c94:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014c98:	eb 09                	jmp    c0014ca3 <Vm::faultHandler(regs*)+0x474>
c0014c9a:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014c9e:	eb 03                	jmp    c0014ca3 <Vm::faultHandler(regs*)+0x474>
c0014ca0:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014ca3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014ca6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014cab:	74 29                	je     c0014cd6 <Vm::faultHandler(regs*)+0x4a7>
c0014cad:	3d ff ff 00 00       	cmp    eax,0xffff
c0014cb2:	76 22                	jbe    c0014cd6 <Vm::faultHandler(regs*)+0x4a7>
c0014cb4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014cb8:	50                   	push   eax
c0014cb9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014cbd:	50                   	push   eax
c0014cbe:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014cc2:	50                   	push   eax
c0014cc3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014cc7:	50                   	push   eax
c0014cc8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ccc:	50                   	push   eax
c0014ccd:	6a 6e                	push   0x6e
c0014ccf:	6a 6e                	push   0x6e
c0014cd1:	e9 8c 00 00 00       	jmp    c0014d62 <Vm::faultHandler(regs*)+0x533>
c0014cd6:	0f b7 c0             	movzx  eax,ax
c0014cd9:	52                   	push   edx
c0014cda:	52                   	push   edx
c0014cdb:	50                   	push   eax
c0014cdc:	57                   	push   edi
c0014cdd:	e8 d9 fa ff ff       	call   c00147bb <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014ce2:	59                   	pop    ecx
c0014ce3:	0f b6 c0             	movzx  eax,al
c0014ce6:	5e                   	pop    esi
c0014ce7:	50                   	push   eax
c0014ce8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014cec:	50                   	push   eax
c0014ced:	e8 92 f6 ff ff       	call   c0014384 <Vm::outbv(unsigned short, unsigned char)>
c0014cf2:	83 c4 10             	add    esp,0x10
c0014cf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014cf8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014cfc:	74 03                	je     c0014d01 <Vm::faultHandler(regs*)+0x4d2>
c0014cfe:	48                   	dec    eax
c0014cff:	eb 01                	jmp    c0014d02 <Vm::faultHandler(regs*)+0x4d3>
c0014d01:	40                   	inc    eax
c0014d02:	0f b7 c0             	movzx  eax,ax
c0014d05:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014d08:	e9 92 01 00 00       	jmp    c0014e9f <Vm::faultHandler(regs*)+0x670>
c0014d0d:	8d 46 ff             	lea    eax,[esi-0x1]
c0014d10:	3c 05                	cmp    al,0x5
c0014d12:	77 1f                	ja     c0014d33 <Vm::faultHandler(regs*)+0x504>
c0014d14:	0f b6 c0             	movzx  eax,al
c0014d17:	ff 24 85 64 f5 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0a9c]
c0014d1e:	89 ef                	mov    edi,ebp
c0014d20:	eb 11                	jmp    c0014d33 <Vm::faultHandler(regs*)+0x504>
c0014d22:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014d25:	eb 0c                	jmp    c0014d33 <Vm::faultHandler(regs*)+0x504>
c0014d27:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014d2a:	eb 07                	jmp    c0014d33 <Vm::faultHandler(regs*)+0x504>
c0014d2c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014d2f:	eb 02                	jmp    c0014d33 <Vm::faultHandler(regs*)+0x504>
c0014d31:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014d33:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014d36:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014d3b:	74 37                	je     c0014d74 <Vm::faultHandler(regs*)+0x545>
c0014d3d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014d43:	76 2f                	jbe    c0014d74 <Vm::faultHandler(regs*)+0x545>
c0014d45:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014d49:	50                   	push   eax
c0014d4a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014d4e:	50                   	push   eax
c0014d4f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014d53:	50                   	push   eax
c0014d54:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014d58:	50                   	push   eax
c0014d59:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d5d:	50                   	push   eax
c0014d5e:	6a 6f                	push   0x6f
c0014d60:	6a 6f                	push   0x6f
c0014d62:	68 f2 f4 01 c0       	push   0xc001f4f2
c0014d67:	e8 a2 58 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014d6c:	83 c4 20             	add    esp,0x20
c0014d6f:	e9 86 01 00 00       	jmp    c0014efa <Vm::faultHandler(regs*)+0x6cb>
c0014d74:	0f b7 d7             	movzx  edx,di
c0014d77:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014d7a:	0f b7 c6             	movzx  eax,si
c0014d7d:	81 e1 00 04 00 00    	and    ecx,0x400
c0014d83:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014d86:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d8b:	74 1d                	je     c0014daa <Vm::faultHandler(regs*)+0x57b>
c0014d8d:	55                   	push   ebp
c0014d8e:	55                   	push   ebp
c0014d8f:	50                   	push   eax
c0014d90:	52                   	push   edx
c0014d91:	e8 48 fa ff ff       	call   c00147de <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014d96:	83 c4 10             	add    esp,0x10
c0014d99:	89 fa                	mov    edx,edi
c0014d9b:	ef                   	out    dx,eax
c0014d9c:	85 c9                	test   ecx,ecx
c0014d9e:	74 05                	je     c0014da5 <Vm::faultHandler(regs*)+0x576>
c0014da0:	83 ee 04             	sub    esi,0x4
c0014da3:	eb 21                	jmp    c0014dc6 <Vm::faultHandler(regs*)+0x597>
c0014da5:	83 c6 04             	add    esi,0x4
c0014da8:	eb 1c                	jmp    c0014dc6 <Vm::faultHandler(regs*)+0x597>
c0014daa:	55                   	push   ebp
c0014dab:	55                   	push   ebp
c0014dac:	50                   	push   eax
c0014dad:	52                   	push   edx
c0014dae:	e8 19 fa ff ff       	call   c00147cc <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014db3:	83 c4 10             	add    esp,0x10
c0014db6:	89 fa                	mov    edx,edi
c0014db8:	66 ef                	out    dx,ax
c0014dba:	85 c9                	test   ecx,ecx
c0014dbc:	74 05                	je     c0014dc3 <Vm::faultHandler(regs*)+0x594>
c0014dbe:	83 ee 02             	sub    esi,0x2
c0014dc1:	eb 03                	jmp    c0014dc6 <Vm::faultHandler(regs*)+0x597>
c0014dc3:	83 c6 02             	add    esi,0x2
c0014dc6:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014dcc:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014dcf:	e9 cb 00 00 00       	jmp    c0014e9f <Vm::faultHandler(regs*)+0x670>
c0014dd4:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014ddb:	83 ec 0c             	sub    esp,0xc
c0014dde:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014de2:	50                   	push   eax
c0014de3:	e8 89 f5 ff ff       	call   c0014371 <Vm::inbv(unsigned short)>
c0014de8:	0f b6 c0             	movzx  eax,al
c0014deb:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014dee:	eb 3f                	jmp    c0014e2f <Vm::faultHandler(regs*)+0x600>
c0014df0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014df5:	74 07                	je     c0014dfe <Vm::faultHandler(regs*)+0x5cf>
c0014df7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014dfb:	ed                   	in     eax,dx
c0014dfc:	eb 14                	jmp    c0014e12 <Vm::faultHandler(regs*)+0x5e3>
c0014dfe:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014e01:	66 31 f6             	xor    si,si
c0014e04:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014e07:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014e0b:	66 ed                	in     ax,dx
c0014e0d:	0f b7 c0             	movzx  eax,ax
c0014e10:	09 f0                	or     eax,esi
c0014e12:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014e15:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014e19:	e9 84 00 00 00       	jmp    c0014ea2 <Vm::faultHandler(regs*)+0x673>
c0014e1e:	52                   	push   edx
c0014e1f:	52                   	push   edx
c0014e20:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014e24:	50                   	push   eax
c0014e25:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e29:	50                   	push   eax
c0014e2a:	e8 55 f5 ff ff       	call   c0014384 <Vm::outbv(unsigned short, unsigned char)>
c0014e2f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014e33:	eb 53                	jmp    c0014e88 <Vm::faultHandler(regs*)+0x659>
c0014e35:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014e38:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014e3c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e41:	74 03                	je     c0014e46 <Vm::faultHandler(regs*)+0x617>
c0014e43:	ef                   	out    dx,eax
c0014e44:	eb cf                	jmp    c0014e15 <Vm::faultHandler(regs*)+0x5e6>
c0014e46:	66 ef                	out    dx,ax
c0014e48:	eb cb                	jmp    c0014e15 <Vm::faultHandler(regs*)+0x5e6>
c0014e4a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014e51:	83 ec 0c             	sub    esp,0xc
c0014e54:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014e58:	50                   	push   eax
c0014e59:	e8 13 f5 ff ff       	call   c0014371 <Vm::inbv(unsigned short)>
c0014e5e:	0f b6 c0             	movzx  eax,al
c0014e61:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014e64:	eb 1f                	jmp    c0014e85 <Vm::faultHandler(regs*)+0x656>
c0014e66:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e69:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e6e:	74 03                	je     c0014e73 <Vm::faultHandler(regs*)+0x644>
c0014e70:	ed                   	in     eax,dx
c0014e71:	eb 0d                	jmp    c0014e80 <Vm::faultHandler(regs*)+0x651>
c0014e73:	66 ed                	in     ax,dx
c0014e75:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014e78:	0f b7 c0             	movzx  eax,ax
c0014e7b:	66 31 d2             	xor    dx,dx
c0014e7e:	09 d0                	or     eax,edx
c0014e80:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014e83:	eb 1a                	jmp    c0014e9f <Vm::faultHandler(regs*)+0x670>
c0014e85:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e88:	83 c4 10             	add    esp,0x10
c0014e8b:	eb 15                	jmp    c0014ea2 <Vm::faultHandler(regs*)+0x673>
c0014e8d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014e90:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e93:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e98:	74 03                	je     c0014e9d <Vm::faultHandler(regs*)+0x66e>
c0014e9a:	ef                   	out    dx,eax
c0014e9b:	eb 02                	jmp    c0014e9f <Vm::faultHandler(regs*)+0x670>
c0014e9d:	66 ef                	out    dx,ax
c0014e9f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014ea2:	b0 01                	mov    al,0x1
c0014ea4:	eb 56                	jmp    c0014efc <Vm::faultHandler(regs*)+0x6cd>
c0014ea6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014eaa:	50                   	push   eax
c0014eab:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014eaf:	50                   	push   eax
c0014eb0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014eb4:	50                   	push   eax
c0014eb5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014eb9:	50                   	push   eax
c0014eba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ebe:	50                   	push   eax
c0014ebf:	52                   	push   edx
c0014ec0:	52                   	push   edx
c0014ec1:	68 1f f5 01 c0       	push   0xc001f51f
c0014ec6:	e8 43 57 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014ecb:	83 c4 20             	add    esp,0x20
c0014ece:	83 ec 0c             	sub    esp,0xc
c0014ed1:	6a 60                	push   0x60
c0014ed3:	e8 99 f4 ff ff       	call   c0014371 <Vm::inbv(unsigned short)>
c0014ed8:	83 c4 10             	add    esp,0x10
c0014edb:	3c 1c                	cmp    al,0x1c
c0014edd:	74 04                	je     c0014ee3 <Vm::faultHandler(regs*)+0x6b4>
c0014edf:	3c 5a                	cmp    al,0x5a
c0014ee1:	75 eb                	jne    c0014ece <Vm::faultHandler(regs*)+0x69f>
c0014ee3:	3c 5a                	cmp    al,0x5a
c0014ee5:	74 04                	je     c0014eeb <Vm::faultHandler(regs*)+0x6bc>
c0014ee7:	3c 1c                	cmp    al,0x1c
c0014ee9:	75 0f                	jne    c0014efa <Vm::faultHandler(regs*)+0x6cb>
c0014eeb:	83 ec 0c             	sub    esp,0xc
c0014eee:	6a 60                	push   0x60
c0014ef0:	e8 7c f4 ff ff       	call   c0014371 <Vm::inbv(unsigned short)>
c0014ef5:	83 c4 10             	add    esp,0x10
c0014ef8:	eb e9                	jmp    c0014ee3 <Vm::faultHandler(regs*)+0x6b4>
c0014efa:	31 c0                	xor    eax,eax
c0014efc:	83 c4 1c             	add    esp,0x1c
c0014eff:	5b                   	pop    ebx
c0014f00:	5e                   	pop    esi
c0014f01:	5f                   	pop    edi
c0014f02:	5d                   	pop    ebp
c0014f03:	c3                   	ret    

c0014f04 <noCopro(unsigned long)>:
c0014f04:	c3                   	ret    

c0014f05 <nmiHandler(regs*, void*)>:
c0014f05:	83 ec 0c             	sub    esp,0xc
c0014f08:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0014f0d:	83 ec 0c             	sub    esp,0xc
c0014f10:	50                   	push   eax
c0014f11:	e8 7e 21 ff ff       	call   c0007094 <Computer::handleNMI()>
c0014f16:	83 c4 10             	add    esp,0x10
c0014f19:	90                   	nop
c0014f1a:	83 c4 0c             	add    esp,0xc
c0014f1d:	c3                   	ret    

c0014f1e <doubleFault(regs*, void*)>:
c0014f1e:	55                   	push   ebp
c0014f1f:	89 e5                	mov    ebp,esp
c0014f21:	83 ec 08             	sub    esp,0x8
c0014f24:	83 ec 0c             	sub    esp,0xc
c0014f27:	68 7c f5 01 c0       	push   0xc001f57c
c0014f2c:	e8 e6 b3 ff ff       	call   c0010317 <KePanic(char const*)>
c0014f31:	83 c4 10             	add    esp,0x10
c0014f34:	90                   	nop
c0014f35:	c9                   	leave  
c0014f36:	c3                   	ret    

c0014f37 <displayDebugInfo(regs*)>:
c0014f37:	83 ec 1c             	sub    esp,0x1c
c0014f3a:	0f 20 c0             	mov    eax,cr0
c0014f3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f41:	0f 20 d0             	mov    eax,cr2
c0014f44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014f48:	0f 20 d8             	mov    eax,cr3
c0014f4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f4f:	0f 20 e0             	mov    eax,cr4
c0014f52:	89 04 24             	mov    DWORD PTR [esp],eax
c0014f55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f59:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014f5c:	83 ec 08             	sub    esp,0x8
c0014f5f:	50                   	push   eax
c0014f60:	68 98 f5 01 c0       	push   0xc001f598
c0014f65:	e8 a4 56 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014f6a:	83 c4 10             	add    esp,0x10
c0014f6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f71:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f74:	83 ec 08             	sub    esp,0x8
c0014f77:	50                   	push   eax
c0014f78:	68 89 f5 01 c0       	push   0xc001f589
c0014f7d:	e8 8c 56 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014f82:	83 c4 10             	add    esp,0x10
c0014f85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f89:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f8c:	83 ec 08             	sub    esp,0x8
c0014f8f:	50                   	push   eax
c0014f90:	68 94 f5 01 c0       	push   0xc001f594
c0014f95:	e8 74 56 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014f9a:	83 c4 10             	add    esp,0x10
c0014f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fa1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fa4:	83 ec 08             	sub    esp,0x8
c0014fa7:	50                   	push   eax
c0014fa8:	68 a3 f5 01 c0       	push   0xc001f5a3
c0014fad:	e8 5c 56 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014fb2:	83 c4 10             	add    esp,0x10
c0014fb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fb9:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014fbc:	83 ec 08             	sub    esp,0x8
c0014fbf:	50                   	push   eax
c0014fc0:	68 ae f5 01 c0       	push   0xc001f5ae
c0014fc5:	e8 44 56 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014fca:	83 c4 10             	add    esp,0x10
c0014fcd:	83 ec 08             	sub    esp,0x8
c0014fd0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014fd4:	68 b9 f5 01 c0       	push   0xc001f5b9
c0014fd9:	e8 30 56 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014fde:	83 c4 10             	add    esp,0x10
c0014fe1:	83 ec 08             	sub    esp,0x8
c0014fe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014fe8:	68 c4 f5 01 c0       	push   0xc001f5c4
c0014fed:	e8 1c 56 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014ff2:	83 c4 10             	add    esp,0x10
c0014ff5:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0014ffa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015000:	83 ec 0c             	sub    esp,0xc
c0015003:	50                   	push   eax
c0015004:	e8 aa 34 ff ff       	call   c00084b3 <setActiveTerminal(VgaText*)>
c0015009:	83 c4 10             	add    esp,0x10
c001500c:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015011:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015017:	83 ec 08             	sub    esp,0x8
c001501a:	68 cf f5 01 c0       	push   0xc001f5cf
c001501f:	50                   	push   eax
c0015020:	e8 cd 37 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c0015025:	83 c4 10             	add    esp,0x10
c0015028:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001502d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015033:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015038:	8b 12                	mov    edx,DWORD PTR [edx]
c001503a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001503d:	83 c2 0c             	add    edx,0xc
c0015040:	83 ec 08             	sub    esp,0x8
c0015043:	52                   	push   edx
c0015044:	50                   	push   eax
c0015045:	e8 a8 37 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c001504a:	83 c4 10             	add    esp,0x10
c001504d:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015052:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015058:	83 ec 08             	sub    esp,0x8
c001505b:	68 d8 f5 01 c0       	push   0xc001f5d8
c0015060:	50                   	push   eax
c0015061:	e8 8c 37 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c0015066:	83 c4 10             	add    esp,0x10
c0015069:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001506e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015074:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015078:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001507b:	83 ec 08             	sub    esp,0x8
c001507e:	52                   	push   edx
c001507f:	50                   	push   eax
c0015080:	e8 27 37 ff ff       	call   c00087ac <VgaText::putx(unsigned int)>
c0015085:	83 c4 10             	add    esp,0x10
c0015088:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001508d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015093:	83 ec 08             	sub    esp,0x8
c0015096:	68 e0 f5 01 c0       	push   0xc001f5e0
c001509b:	50                   	push   eax
c001509c:	e8 51 37 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c00150a1:	83 c4 10             	add    esp,0x10
c00150a4:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00150a9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150af:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150b3:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00150b6:	83 ec 08             	sub    esp,0x8
c00150b9:	52                   	push   edx
c00150ba:	50                   	push   eax
c00150bb:	e8 ec 36 ff ff       	call   c00087ac <VgaText::putx(unsigned int)>
c00150c0:	83 c4 10             	add    esp,0x10
c00150c3:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00150c8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150ce:	83 ec 08             	sub    esp,0x8
c00150d1:	68 e8 f5 01 c0       	push   0xc001f5e8
c00150d6:	50                   	push   eax
c00150d7:	e8 16 37 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c00150dc:	83 c4 10             	add    esp,0x10
c00150df:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00150e4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150ea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150ee:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00150f1:	83 ec 08             	sub    esp,0x8
c00150f4:	52                   	push   edx
c00150f5:	50                   	push   eax
c00150f6:	e8 b1 36 ff ff       	call   c00087ac <VgaText::putx(unsigned int)>
c00150fb:	83 c4 10             	add    esp,0x10
c00150fe:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015103:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015109:	83 ec 08             	sub    esp,0x8
c001510c:	68 f0 f5 01 c0       	push   0xc001f5f0
c0015111:	50                   	push   eax
c0015112:	e8 db 36 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c0015117:	83 c4 10             	add    esp,0x10
c001511a:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001511f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015125:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015129:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001512c:	83 ec 08             	sub    esp,0x8
c001512f:	52                   	push   edx
c0015130:	50                   	push   eax
c0015131:	e8 76 36 ff ff       	call   c00087ac <VgaText::putx(unsigned int)>
c0015136:	83 c4 10             	add    esp,0x10
c0015139:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001513e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015144:	83 ec 08             	sub    esp,0x8
c0015147:	68 f8 f5 01 c0       	push   0xc001f5f8
c001514c:	50                   	push   eax
c001514d:	e8 a0 36 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c0015152:	83 c4 10             	add    esp,0x10
c0015155:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001515a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015160:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015164:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0015167:	83 ec 08             	sub    esp,0x8
c001516a:	52                   	push   edx
c001516b:	50                   	push   eax
c001516c:	e8 3b 36 ff ff       	call   c00087ac <VgaText::putx(unsigned int)>
c0015171:	83 c4 10             	add    esp,0x10
c0015174:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015179:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001517f:	83 ec 08             	sub    esp,0x8
c0015182:	68 00 f6 01 c0       	push   0xc001f600
c0015187:	50                   	push   eax
c0015188:	e8 65 36 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c001518d:	83 c4 10             	add    esp,0x10
c0015190:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015195:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001519b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001519f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00151a2:	83 ec 08             	sub    esp,0x8
c00151a5:	52                   	push   edx
c00151a6:	50                   	push   eax
c00151a7:	e8 00 36 ff ff       	call   c00087ac <VgaText::putx(unsigned int)>
c00151ac:	83 c4 10             	add    esp,0x10
c00151af:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00151b4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151ba:	83 ec 08             	sub    esp,0x8
c00151bd:	68 08 f6 01 c0       	push   0xc001f608
c00151c2:	50                   	push   eax
c00151c3:	e8 2a 36 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c00151c8:	83 c4 10             	add    esp,0x10
c00151cb:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00151d0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151d6:	83 ec 08             	sub    esp,0x8
c00151d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00151dd:	50                   	push   eax
c00151de:	e8 c9 35 ff ff       	call   c00087ac <VgaText::putx(unsigned int)>
c00151e3:	83 c4 10             	add    esp,0x10
c00151e6:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00151eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151f1:	83 ec 08             	sub    esp,0x8
c00151f4:	68 11 f6 01 c0       	push   0xc001f611
c00151f9:	50                   	push   eax
c00151fa:	e8 f3 35 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c00151ff:	83 c4 10             	add    esp,0x10
c0015202:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015207:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001520d:	83 ec 08             	sub    esp,0x8
c0015210:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015214:	50                   	push   eax
c0015215:	e8 92 35 ff ff       	call   c00087ac <VgaText::putx(unsigned int)>
c001521a:	83 c4 10             	add    esp,0x10
c001521d:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015222:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015228:	83 ec 08             	sub    esp,0x8
c001522b:	68 19 f6 01 c0       	push   0xc001f619
c0015230:	50                   	push   eax
c0015231:	e8 bc 35 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c0015236:	83 c4 10             	add    esp,0x10
c0015239:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001523e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015244:	83 ec 08             	sub    esp,0x8
c0015247:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001524b:	50                   	push   eax
c001524c:	e8 5b 35 ff ff       	call   c00087ac <VgaText::putx(unsigned int)>
c0015251:	83 c4 10             	add    esp,0x10
c0015254:	fa                   	cli    
c0015255:	f4                   	hlt    
c0015256:	eb fe                	jmp    c0015256 <displayDebugInfo(regs*)+0x31f>

c0015258 <HalSystemIdle()>:
c0015258:	56                   	push   esi
c0015259:	53                   	push   ebx
c001525a:	83 ec 14             	sub    esp,0x14
c001525d:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0015262:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015268:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c001526e:	83 e0 04             	and    eax,0x4
c0015271:	84 c0                	test   al,al
c0015273:	0f 95 c0             	setne  al
c0015276:	84 c0                	test   al,al
c0015278:	74 4c                	je     c00152c6 <HalSystemIdle()+0x6e>
c001527a:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001527f:	83 ec 08             	sub    esp,0x8
c0015282:	68 e1 00 00 00       	push   0xe1
c0015287:	50                   	push   eax
c0015288:	e8 1f 1c ff ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c001528d:	83 c4 10             	add    esp,0x10
c0015290:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015294:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015298:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001529d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00152a1:	83 e2 02             	and    edx,0x2
c00152a4:	89 d3                	mov    ebx,edx
c00152a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00152aa:	83 e2 00             	and    edx,0x0
c00152ad:	89 d6                	mov    esi,edx
c00152af:	56                   	push   esi
c00152b0:	53                   	push   ebx
c00152b1:	68 e1 00 00 00       	push   0xe1
c00152b6:	50                   	push   eax
c00152b7:	e8 1c 1c ff ff       	call   c0006ed8 <Computer::wrmsr(unsigned int, unsigned long long)>
c00152bc:	83 c4 10             	add    esp,0x10
c00152bf:	e8 d0 ae fe ff       	call   c0000194 <doTPAUSE>
c00152c4:	eb 01                	jmp    c00152c7 <HalSystemIdle()+0x6f>
c00152c6:	f4                   	hlt    
c00152c7:	90                   	nop
c00152c8:	83 c4 14             	add    esp,0x14
c00152cb:	5b                   	pop    ebx
c00152cc:	5e                   	pop    esi
c00152cd:	c3                   	ret    

c00152ce <displayProgramFault(char const*)>:
c00152ce:	83 ec 0c             	sub    esp,0xc
c00152d1:	83 ec 0c             	sub    esp,0xc
c00152d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152d8:	e8 31 53 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00152dd:	83 c4 10             	add    esp,0x10
c00152e0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00152e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152ea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152f0:	85 c0                	test   eax,eax
c00152f2:	74 21                	je     c0015315 <displayProgramFault(char const*)+0x47>
c00152f4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00152f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00152fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152fe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015304:	6a 04                	push   0x4
c0015306:	6a 0f                	push   0xf
c0015308:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001530c:	50                   	push   eax
c001530d:	e8 52 35 ff ff       	call   c0008864 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015312:	83 c4 10             	add    esp,0x10
c0015315:	90                   	nop
c0015316:	83 c4 0c             	add    esp,0xc
c0015319:	c3                   	ret    

c001531a <gpFault(regs*, void*)>:
c001531a:	83 ec 1c             	sub    esp,0x1c
c001531d:	c7 05 10 62 02 c0 2f 48 01 c0 	mov    DWORD PTR ds:0xc0026210,0xc001482f
c0015327:	a1 10 62 02 c0       	mov    eax,ds:0xc0026210
c001532c:	85 c0                	test   eax,eax
c001532e:	74 1c                	je     c001534c <gpFault(regs*, void*)+0x32>
c0015330:	a1 10 62 02 c0       	mov    eax,ds:0xc0026210
c0015335:	83 ec 0c             	sub    esp,0xc
c0015338:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001533c:	ff d0                	call   eax
c001533e:	83 c4 10             	add    esp,0x10
c0015341:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015345:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001534a:	75 2e                	jne    c001537a <gpFault(regs*, void*)+0x60>
c001534c:	83 ec 0c             	sub    esp,0xc
c001534f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015353:	e8 df fb ff ff       	call   c0014f37 <displayDebugInfo(regs*)>
c0015358:	83 c4 10             	add    esp,0x10
c001535b:	83 ec 0c             	sub    esp,0xc
c001535e:	68 21 f6 01 c0       	push   0xc001f621
c0015363:	e8 66 ff ff ff       	call   c00152ce <displayProgramFault(char const*)>
c0015368:	83 c4 10             	add    esp,0x10
c001536b:	83 ec 0c             	sub    esp,0xc
c001536e:	6a 00                	push   0x0
c0015370:	e8 af ee ff ff       	call   c0014224 <Thr::terminateFromIRQ(int)>
c0015375:	83 c4 10             	add    esp,0x10
c0015378:	eb 01                	jmp    c001537b <gpFault(regs*, void*)+0x61>
c001537a:	90                   	nop
c001537b:	83 c4 1c             	add    esp,0x1c
c001537e:	c3                   	ret    

c001537f <pgFault(regs*, void*)>:
c001537f:	83 ec 1c             	sub    esp,0x1c
c0015382:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015386:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015389:	0f 20 d0             	mov    eax,cr2
c001538c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015390:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015394:	83 ec 04             	sub    esp,0x4
c0015397:	52                   	push   edx
c0015398:	50                   	push   eax
c0015399:	68 00 f7 01 c0       	push   0xc001f700
c001539e:	e8 6b 52 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00153a3:	83 c4 10             	add    esp,0x10
c00153a6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00153ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153b0:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00153b6:	0f 20 d2             	mov    edx,cr2
c00153b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00153bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00153c1:	83 ec 08             	sub    esp,0x8
c00153c4:	52                   	push   edx
c00153c5:	50                   	push   eax
c00153c6:	e8 39 4e ff ff       	call   c000a204 <VAS::tryLoadBackOffDisk(unsigned long)>
c00153cb:	83 c4 10             	add    esp,0x10
c00153ce:	84 c0                	test   al,al
c00153d0:	75 2e                	jne    c0015400 <pgFault(regs*, void*)+0x81>
c00153d2:	83 ec 0c             	sub    esp,0xc
c00153d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00153d9:	e8 59 fb ff ff       	call   c0014f37 <displayDebugInfo(regs*)>
c00153de:	83 c4 10             	add    esp,0x10
c00153e1:	83 ec 0c             	sub    esp,0xc
c00153e4:	68 3a f6 01 c0       	push   0xc001f63a
c00153e9:	e8 e0 fe ff ff       	call   c00152ce <displayProgramFault(char const*)>
c00153ee:	83 c4 10             	add    esp,0x10
c00153f1:	83 ec 0c             	sub    esp,0xc
c00153f4:	6a 00                	push   0x0
c00153f6:	e8 29 ee ff ff       	call   c0014224 <Thr::terminateFromIRQ(int)>
c00153fb:	83 c4 10             	add    esp,0x10
c00153fe:	eb 01                	jmp    c0015401 <pgFault(regs*, void*)+0x82>
c0015400:	90                   	nop
c0015401:	83 c4 1c             	add    esp,0x1c
c0015404:	c3                   	ret    

c0015405 <otherISRHandler(regs*, void*)>:
c0015405:	83 ec 0c             	sub    esp,0xc
c0015408:	83 ec 0c             	sub    esp,0xc
c001540b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001540f:	e8 23 fb ff ff       	call   c0014f37 <displayDebugInfo(regs*)>
c0015414:	83 c4 10             	add    esp,0x10
c0015417:	83 ec 0c             	sub    esp,0xc
c001541a:	68 28 f7 01 c0       	push   0xc001f728
c001541f:	e8 aa fe ff ff       	call   c00152ce <displayProgramFault(char const*)>
c0015424:	83 c4 10             	add    esp,0x10
c0015427:	83 ec 0c             	sub    esp,0xc
c001542a:	6a 00                	push   0x0
c001542c:	e8 f3 ed ff ff       	call   c0014224 <Thr::terminateFromIRQ(int)>
c0015431:	83 c4 10             	add    esp,0x10
c0015434:	90                   	nop
c0015435:	83 c4 0c             	add    esp,0xc
c0015438:	c3                   	ret    

c0015439 <opcodeFault(regs*, void*)>:
c0015439:	55                   	push   ebp
c001543a:	89 e5                	mov    ebp,esp
c001543c:	83 ec 08             	sub    esp,0x8
c001543f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015442:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015445:	83 ec 08             	sub    esp,0x8
c0015448:	50                   	push   eax
c0015449:	68 45 f6 01 c0       	push   0xc001f645
c001544e:	e8 bb 51 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0015453:	83 c4 10             	add    esp,0x10
c0015456:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001545b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015461:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0015467:	84 c0                	test   al,al
c0015469:	74 21                	je     c001548c <opcodeFault(regs*, void*)+0x53>
c001546b:	83 ec 0c             	sub    esp,0xc
c001546e:	68 50 f7 01 c0       	push   0xc001f750
c0015473:	e8 96 51 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0015478:	83 c4 10             	add    esp,0x10
c001547b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015481:	8d 50 19             	lea    edx,[eax+0x19]
c0015484:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015487:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001548a:	eb 2b                	jmp    c00154b7 <opcodeFault(regs*, void*)+0x7e>
c001548c:	83 ec 0c             	sub    esp,0xc
c001548f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015492:	e8 a0 fa ff ff       	call   c0014f37 <displayDebugInfo(regs*)>
c0015497:	83 c4 10             	add    esp,0x10
c001549a:	83 ec 0c             	sub    esp,0xc
c001549d:	68 53 f6 01 c0       	push   0xc001f653
c00154a2:	e8 27 fe ff ff       	call   c00152ce <displayProgramFault(char const*)>
c00154a7:	83 c4 10             	add    esp,0x10
c00154aa:	83 ec 0c             	sub    esp,0xc
c00154ad:	6a 00                	push   0x0
c00154af:	e8 70 ed ff ff       	call   c0014224 <Thr::terminateFromIRQ(int)>
c00154b4:	83 c4 10             	add    esp,0x10
c00154b7:	c9                   	leave  
c00154b8:	c3                   	ret    

c00154b9 <i386SaveCoprocessor(void*)>:
c00154b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154bd:	83 c0 3f             	add    eax,0x3f
c00154c0:	83 e0 c0             	and    eax,0xffffffc0
c00154c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154c7:	ff 25 0c 62 02 c0    	jmp    DWORD PTR ds:0xc002620c

c00154cd <i386LoadCoprocessor(void*)>:
c00154cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154d1:	83 c0 3f             	add    eax,0x3f
c00154d4:	83 e0 c0             	and    eax,0xffffffc0
c00154d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154db:	ff 25 08 62 02 c0    	jmp    DWORD PTR ds:0xc0026208

c00154e1 <x87EmulHandler(regs*, void*)>:
c00154e1:	53                   	push   ebx
c00154e2:	83 ec 08             	sub    esp,0x8
c00154e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154ea:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00154ee:	74 10                	je     c0015500 <x87EmulHandler(regs*, void*)+0x1f>
c00154f0:	83 ec 0c             	sub    esp,0xc
c00154f3:	68 60 f6 01 c0       	push   0xc001f660
c00154f8:	e8 1a ae ff ff       	call   c0010317 <KePanic(char const*)>
c00154fd:	83 c4 10             	add    esp,0x10
c0015500:	0f 20 c0             	mov    eax,cr0
c0015503:	a8 08                	test   al,0x8
c0015505:	74 59                	je     c0015560 <x87EmulHandler(regs*, void*)+0x7f>
c0015507:	0f 06                	clts   
c0015509:	a1 04 62 02 c0       	mov    eax,ds:0xc0026204
c001550e:	85 c0                	test   eax,eax
c0015510:	74 0e                	je     c0015520 <x87EmulHandler(regs*, void*)+0x3f>
c0015512:	83 ec 0c             	sub    esp,0xc
c0015515:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015518:	e8 9c ff ff ff       	call   c00154b9 <i386SaveCoprocessor(void*)>
c001551d:	83 c4 10             	add    esp,0x10
c0015520:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0015526:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001552a:	75 12                	jne    c001553e <x87EmulHandler(regs*, void*)+0x5d>
c001552c:	83 ec 0c             	sub    esp,0xc
c001552f:	68 40 02 00 00       	push   0x240
c0015534:	e8 3c 23 ff ff       	call   c0007875 <malloc>
c0015539:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001553c:	eb 10                	jmp    c001554e <x87EmulHandler(regs*, void*)+0x6d>
c001553e:	83 ec 0c             	sub    esp,0xc
c0015541:	a1 04 62 02 c0       	mov    eax,ds:0xc0026204
c0015546:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015549:	e8 7f ff ff ff       	call   c00154cd <i386LoadCoprocessor(void*)>
c001554e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015553:	83 c4 10             	add    esp,0x10
c0015556:	a3 04 62 02 c0       	mov    ds:0xc0026204,eax
c001555b:	83 c4 08             	add    esp,0x8
c001555e:	5b                   	pop    ebx
c001555f:	c3                   	ret    
c0015560:	83 ec 0c             	sub    esp,0xc
c0015563:	68 74 f6 01 c0       	push   0xc001f674
c0015568:	e8 a1 50 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001556d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015575:	83 c4 18             	add    esp,0x18
c0015578:	5b                   	pop    ebx
c0015579:	e9 a6 ec ff ff       	jmp    c0014224 <Thr::terminateFromIRQ(int)>

c001557e <HalInitialiseCoprocessor()>:
c001557e:	83 ec 10             	sub    esp,0x10
c0015581:	c7 05 04 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026204,0x0
c001558b:	6a 00                	push   0x0
c001558d:	68 e1 54 01 c0       	push   0xc00154e1
c0015592:	6a 07                	push   0x7
c0015594:	e8 e7 69 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015599:	e8 72 6d 00 00       	call   c001c310 <avxDetect>
c001559e:	83 c4 10             	add    esp,0x10
c00155a1:	85 c0                	test   eax,eax
c00155a3:	74 1c                	je     c00155c1 <HalInitialiseCoprocessor()+0x43>
c00155a5:	c7 05 0c 62 02 c0 3a c3 01 c0 	mov    DWORD PTR ds:0xc002620c,0xc001c33a
c00155af:	c7 05 08 62 02 c0 4b c3 01 c0 	mov    DWORD PTR ds:0xc0026208,0xc001c34b
c00155b9:	83 c4 0c             	add    esp,0xc
c00155bc:	e9 9b 6d 00 00       	jmp    c001c35c <avxInit>
c00155c1:	e8 2a 70 00 00       	call   c001c5f0 <absolutelyNoChanceInHell>
c00155c6:	85 c0                	test   eax,eax
c00155c8:	74 1c                	je     c00155e6 <HalInitialiseCoprocessor()+0x68>
c00155ca:	c7 05 0c 62 02 c0 08 c6 01 c0 	mov    DWORD PTR ds:0xc002620c,0xc001c608
c00155d4:	c7 05 08 62 02 c0 10 c6 01 c0 	mov    DWORD PTR ds:0xc0026208,0xc001c610
c00155de:	83 c4 0c             	add    esp,0xc
c00155e1:	e9 32 70 00 00       	jmp    c001c618 <sseInit>
c00155e6:	e8 4b 70 00 00       	call   c001c636 <x87Detect>
c00155eb:	85 c0                	test   eax,eax
c00155ed:	74 1c                	je     c001560b <HalInitialiseCoprocessor()+0x8d>
c00155ef:	c7 05 0c 62 02 c0 51 c6 01 c0 	mov    DWORD PTR ds:0xc002620c,0xc001c651
c00155f9:	c7 05 08 62 02 c0 58 c6 01 c0 	mov    DWORD PTR ds:0xc0026208,0xc001c658
c0015603:	83 c4 0c             	add    esp,0xc
c0015606:	e9 54 70 00 00       	jmp    c001c65f <x87Init>
c001560b:	c7 05 0c 62 02 c0 04 4f 01 c0 	mov    DWORD PTR ds:0xc002620c,0xc0014f04
c0015615:	c7 05 08 62 02 c0 04 4f 01 c0 	mov    DWORD PTR ds:0xc0026208,0xc0014f04
c001561f:	0f 20 c0             	mov    eax,cr0
c0015622:	83 c8 04             	or     eax,0x4
c0015625:	0f 22 c0             	mov    cr0,eax
c0015628:	83 c4 0c             	add    esp,0xc
c001562b:	c3                   	ret    

c001562c <HalPanic(char const*)>:
c001562c:	53                   	push   ebx
c001562d:	83 ec 10             	sub    esp,0x10
c0015630:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015634:	fa                   	cli    
c0015635:	53                   	push   ebx
c0015636:	68 8a f6 01 c0       	push   0xc001f68a
c001563b:	e8 ce 4f ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0015640:	83 c4 0c             	add    esp,0xc
c0015643:	6a 01                	push   0x1
c0015645:	6a 0f                	push   0xf
c0015647:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c001564d:	e8 b4 2c ff ff       	call   c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015652:	58                   	pop    eax
c0015653:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015659:	e8 a0 2e ff ff       	call   c00084fe <VgaText::clearScreen()>
c001565e:	5a                   	pop    edx
c001565f:	59                   	pop    ecx
c0015660:	68 a4 e0 01 c0       	push   0xc001e0a4
c0015665:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c001566b:	e8 ce 2c ff ff       	call   c000833e <VgaText::setTitle(char*)>
c0015670:	83 c4 0c             	add    esp,0xc
c0015673:	6a 01                	push   0x1
c0015675:	6a 0f                	push   0xf
c0015677:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c001567d:	e8 84 2c ff ff       	call   c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015682:	58                   	pop    eax
c0015683:	5a                   	pop    edx
c0015684:	68 a3 f6 01 c0       	push   0xc001f6a3
c0015689:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c001568f:	e8 5e 31 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c0015694:	83 c4 0c             	add    esp,0xc
c0015697:	6a 0f                	push   0xf
c0015699:	6a 01                	push   0x1
c001569b:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00156a1:	e8 60 2c ff ff       	call   c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00156a6:	59                   	pop    ecx
c00156a7:	58                   	pop    eax
c00156a8:	68 ac f6 01 c0       	push   0xc001f6ac
c00156ad:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00156b3:	e8 3a 31 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c00156b8:	83 c4 0c             	add    esp,0xc
c00156bb:	6a 01                	push   0x1
c00156bd:	6a 0f                	push   0xf
c00156bf:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00156c5:	e8 3c 2c ff ff       	call   c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00156ca:	58                   	pop    eax
c00156cb:	5a                   	pop    edx
c00156cc:	68 f0 f6 01 c0       	push   0xc001f6f0
c00156d1:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00156d7:	e8 16 31 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c00156dc:	59                   	pop    ecx
c00156dd:	58                   	pop    eax
c00156de:	68 b9 f6 01 c0       	push   0xc001f6b9
c00156e3:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00156e9:	e8 04 31 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c00156ee:	58                   	pop    eax
c00156ef:	5a                   	pop    edx
c00156f0:	68 f3 f6 01 c0       	push   0xc001f6f3
c00156f5:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00156fb:	e8 f2 30 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c0015700:	59                   	pop    ecx
c0015701:	58                   	pop    eax
c0015702:	53                   	push   ebx
c0015703:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015709:	e8 e4 30 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c001570e:	58                   	pop    eax
c001570f:	5a                   	pop    edx
c0015710:	68 f0 f6 01 c0       	push   0xc001f6f0
c0015715:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c001571b:	e8 d2 30 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c0015720:	83 c4 10             	add    esp,0x10
c0015723:	eb fe                	jmp    c0015723 <HalPanic(char const*)+0xf7>

c0015725 <HalQueryPerformanceCounter()>:
c0015725:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001572a:	31 d2                	xor    edx,edx
c001572c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015732:	31 c0                	xor    eax,eax
c0015734:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001573b:	74 02                	je     c001573f <HalQueryPerformanceCounter()+0x1a>
c001573d:	0f 31                	rdtsc  
c001573f:	c3                   	ret    

c0015740 <HalInitialise()>:
c0015740:	53                   	push   ebx
c0015741:	83 ec 08             	sub    esp,0x8
c0015744:	e8 6a 6a ff ff       	call   c000c1b3 <setupINTS()>
c0015749:	80 3d 80 57 02 c0 00 	cmp    BYTE PTR ds:0xc0025780,0x0
c0015750:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0015755:	75 07                	jne    c001575e <HalInitialise()+0x1e>
c0015757:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c001575e:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0015765:	c6 05 00 62 02 c0 00 	mov    BYTE PTR ds:0xc0026200,0x0
c001576c:	e8 a7 02 00 00       	call   c0015a18 <picOpen()>
c0015771:	80 3d 00 62 02 c0 00 	cmp    BYTE PTR ds:0xc0026200,0x0
c0015778:	74 0a                	je     c0015784 <HalInitialise()+0x44>
c001577a:	e8 e1 01 00 00       	call   c0015960 <picDisable()>
c001577f:	e8 08 65 00 00       	call   c001bc8c <apicOpen()>
c0015784:	bb 0f 00 00 00       	mov    ebx,0xf
c0015789:	50                   	push   eax
c001578a:	6a 00                	push   0x0
c001578c:	68 05 54 01 c0       	push   0xc0015405
c0015791:	6a 00                	push   0x0
c0015793:	e8 e8 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015798:	83 c4 0c             	add    esp,0xc
c001579b:	6a 00                	push   0x0
c001579d:	68 05 54 01 c0       	push   0xc0015405
c00157a2:	6a 01                	push   0x1
c00157a4:	e8 d7 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157a9:	83 c4 0c             	add    esp,0xc
c00157ac:	6a 00                	push   0x0
c00157ae:	68 05 4f 01 c0       	push   0xc0014f05
c00157b3:	6a 02                	push   0x2
c00157b5:	e8 c6 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157ba:	83 c4 0c             	add    esp,0xc
c00157bd:	6a 00                	push   0x0
c00157bf:	68 05 54 01 c0       	push   0xc0015405
c00157c4:	6a 03                	push   0x3
c00157c6:	e8 b5 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157cb:	83 c4 0c             	add    esp,0xc
c00157ce:	6a 00                	push   0x0
c00157d0:	68 05 54 01 c0       	push   0xc0015405
c00157d5:	6a 04                	push   0x4
c00157d7:	e8 a4 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157dc:	83 c4 0c             	add    esp,0xc
c00157df:	6a 00                	push   0x0
c00157e1:	68 05 54 01 c0       	push   0xc0015405
c00157e6:	6a 05                	push   0x5
c00157e8:	e8 93 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157ed:	83 c4 0c             	add    esp,0xc
c00157f0:	6a 00                	push   0x0
c00157f2:	68 39 54 01 c0       	push   0xc0015439
c00157f7:	6a 06                	push   0x6
c00157f9:	e8 82 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157fe:	83 c4 0c             	add    esp,0xc
c0015801:	6a 00                	push   0x0
c0015803:	68 1e 4f 01 c0       	push   0xc0014f1e
c0015808:	6a 08                	push   0x8
c001580a:	e8 71 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001580f:	83 c4 0c             	add    esp,0xc
c0015812:	6a 00                	push   0x0
c0015814:	68 05 54 01 c0       	push   0xc0015405
c0015819:	6a 09                	push   0x9
c001581b:	e8 60 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015820:	83 c4 0c             	add    esp,0xc
c0015823:	6a 00                	push   0x0
c0015825:	68 05 54 01 c0       	push   0xc0015405
c001582a:	6a 0a                	push   0xa
c001582c:	e8 4f 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015831:	83 c4 0c             	add    esp,0xc
c0015834:	6a 00                	push   0x0
c0015836:	68 05 54 01 c0       	push   0xc0015405
c001583b:	6a 0b                	push   0xb
c001583d:	e8 3e 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015842:	83 c4 0c             	add    esp,0xc
c0015845:	6a 00                	push   0x0
c0015847:	68 1a 53 01 c0       	push   0xc001531a
c001584c:	6a 0d                	push   0xd
c001584e:	e8 2d 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015853:	83 c4 0c             	add    esp,0xc
c0015856:	6a 00                	push   0x0
c0015858:	68 7f 53 01 c0       	push   0xc001537f
c001585d:	6a 0e                	push   0xe
c001585f:	e8 1c 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015864:	83 c4 10             	add    esp,0x10
c0015867:	50                   	push   eax
c0015868:	6a 00                	push   0x0
c001586a:	68 05 54 01 c0       	push   0xc0015405
c001586f:	53                   	push   ebx
c0015870:	43                   	inc    ebx
c0015871:	e8 0a 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015876:	83 c4 10             	add    esp,0x10
c0015879:	83 fb 1e             	cmp    ebx,0x1e
c001587c:	75 e9                	jne    c0015867 <HalInitialise()+0x127>
c001587e:	50                   	push   eax
c001587f:	6a 00                	push   0x0
c0015881:	68 b2 14 01 c0       	push   0xc00114b2
c0015886:	6a 60                	push   0x60
c0015888:	e8 f3 66 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001588d:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0015892:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001589c:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00158a3:	e8 cd 1f ff ff       	call   c0007875 <malloc>
c00158a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00158ab:	89 c3                	mov    ebx,eax
c00158ad:	e8 2e 09 00 00       	call   c00161e0 <RTC::RTC()>
c00158b2:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00158bc:	5a                   	pop    edx
c00158bd:	59                   	pop    ecx
c00158be:	53                   	push   ebx
c00158bf:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00158c5:	e8 82 61 ff ff       	call   c000ba4c <Device::addChild(Device*)>
c00158ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00158cc:	6a 00                	push   0x0
c00158ce:	6a 00                	push   0x0
c00158d0:	6a 00                	push   0x0
c00158d2:	53                   	push   ebx
c00158d3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00158d6:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00158db:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00158e1:	83 c4 28             	add    esp,0x28
c00158e4:	5b                   	pop    ebx
c00158e5:	c3                   	ret    

c00158e6 <HalMakeBeep(int)>:
c00158e6:	53                   	push   ebx
c00158e7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00158eb:	85 db                	test   ebx,ebx
c00158ed:	75 07                	jne    c00158f6 <HalMakeBeep(int)+0x10>
c00158ef:	e4 61                	in     al,0x61
c00158f1:	83 e0 fc             	and    eax,0xfffffffc
c00158f4:	eb 26                	jmp    c001591c <HalMakeBeep(int)+0x36>
c00158f6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00158fb:	99                   	cdq    
c00158fc:	f7 fb                	idiv   ebx
c00158fe:	89 c1                	mov    ecx,eax
c0015900:	b0 b6                	mov    al,0xb6
c0015902:	e6 43                	out    0x43,al
c0015904:	88 c8                	mov    al,cl
c0015906:	e6 42                	out    0x42,al
c0015908:	89 c8                	mov    eax,ecx
c001590a:	c1 e8 08             	shr    eax,0x8
c001590d:	e6 42                	out    0x42,al
c001590f:	e4 61                	in     al,0x61
c0015911:	88 c2                	mov    dl,al
c0015913:	83 ca 03             	or     edx,0x3
c0015916:	38 c2                	cmp    dl,al
c0015918:	74 04                	je     c001591e <HalMakeBeep(int)+0x38>
c001591a:	88 d0                	mov    al,dl
c001591c:	e6 61                	out    0x61,al
c001591e:	5b                   	pop    ebx
c001591f:	c3                   	ret    

c0015920 <HalGetRand()>:
c0015920:	31 c0                	xor    eax,eax
c0015922:	c3                   	ret    

c0015923 <HalEndOfInterrupt(int)>:
c0015923:	80 3d 00 62 02 c0 00 	cmp    BYTE PTR ds:0xc0026200,0x0
c001592a:	74 23                	je     c001594f <HalEndOfInterrupt(int)+0x2c>
c001592c:	83 ec 14             	sub    esp,0x14
c001592f:	6a 1b                	push   0x1b
c0015931:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015937:	e8 70 15 ff ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c001593c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015941:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001594b:	83 c4 1c             	add    esp,0x1c
c001594e:	c3                   	ret    
c001594f:	e9 54 02 00 00       	jmp    c0015ba8 <picEOI(int)>

c0015954 <HalRestart()>:
c0015954:	c3                   	ret    

c0015955 <HalShutdown()>:
c0015955:	c3                   	ret    

c0015956 <HalSleep()>:
c0015956:	c3                   	ret    
c0015957:	90                   	nop

c0015958 <picIoWait()>:
c0015958:	eb 00                	jmp    c001595a <picIoWait()+0x2>
c001595a:	eb 00                	jmp    c001595c <picIoWait()+0x4>
c001595c:	90                   	nop
c001595d:	c3                   	ret    
c001595e:	66 90                	xchg   ax,ax

c0015960 <picDisable()>:
c0015960:	83 ec 10             	sub    esp,0x10
c0015963:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001596a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001596f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015973:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015978:	ee                   	out    dx,al
c0015979:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015980:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015985:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015989:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001598e:	ee                   	out    dx,al
c001598f:	90                   	nop
c0015990:	83 c4 10             	add    esp,0x10
c0015993:	c3                   	ret    

c0015994 <picGetIRQReg(int)>:
c0015994:	83 ec 10             	sub    esp,0x10
c0015997:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001599b:	25 ff 00 00 00       	and    eax,0xff
c00159a0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00159a7:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00159ab:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00159af:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00159b4:	ee                   	out    dx,al
c00159b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00159b9:	25 ff 00 00 00       	and    eax,0xff
c00159be:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00159c5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00159c9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00159cd:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00159d2:	ee                   	out    dx,al
c00159d3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00159da:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00159df:	89 c2                	mov    edx,eax
c00159e1:	ec                   	in     al,dx
c00159e2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00159e6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00159ea:	25 ff 00 00 00       	and    eax,0xff
c00159ef:	c1 e0 08             	shl    eax,0x8
c00159f2:	89 c1                	mov    ecx,eax
c00159f4:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00159fb:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015a00:	89 c2                	mov    edx,eax
c0015a02:	ec                   	in     al,dx
c0015a03:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015a07:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015a0b:	25 ff 00 00 00       	and    eax,0xff
c0015a10:	09 c8                	or     eax,ecx
c0015a12:	83 c4 10             	add    esp,0x10
c0015a15:	c3                   	ret    
c0015a16:	66 90                	xchg   ax,ax

c0015a18 <picOpen()>:
c0015a18:	83 ec 50             	sub    esp,0x50
c0015a1b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015a22:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015a27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015a2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015a2f:	ee                   	out    dx,al
c0015a30:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015a37:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015a3c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015a40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015a44:	ee                   	out    dx,al
c0015a45:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015a4d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015a55:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015a5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015a60:	89 c2                	mov    edx,eax
c0015a62:	ec                   	in     al,dx
c0015a63:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015a67:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015a6b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015a6f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015a76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a7a:	89 c2                	mov    edx,eax
c0015a7c:	ec                   	in     al,dx
c0015a7d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015a81:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015a85:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015a89:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015a90:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015a95:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015a99:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a9d:	ee                   	out    dx,al
c0015a9e:	e8 b5 fe ff ff       	call   c0015958 <picIoWait()>
c0015aa3:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015aaa:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015aaf:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015ab3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015ab7:	ee                   	out    dx,al
c0015ab8:	e8 9b fe ff ff       	call   c0015958 <picIoWait()>
c0015abd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015ac1:	25 ff 00 00 00       	and    eax,0xff
c0015ac6:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015acd:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015ad1:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015ad5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ad9:	ee                   	out    dx,al
c0015ada:	e8 79 fe ff ff       	call   c0015958 <picIoWait()>
c0015adf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015ae3:	25 ff 00 00 00       	and    eax,0xff
c0015ae8:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015aef:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015af3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015af7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015afb:	ee                   	out    dx,al
c0015afc:	e8 57 fe ff ff       	call   c0015958 <picIoWait()>
c0015b01:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015b08:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015b0d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015b11:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015b15:	ee                   	out    dx,al
c0015b16:	e8 3d fe ff ff       	call   c0015958 <picIoWait()>
c0015b1b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015b22:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015b27:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015b2b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015b2f:	ee                   	out    dx,al
c0015b30:	e8 23 fe ff ff       	call   c0015958 <picIoWait()>
c0015b35:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015b3c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015b41:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015b45:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015b49:	ee                   	out    dx,al
c0015b4a:	e8 09 fe ff ff       	call   c0015958 <picIoWait()>
c0015b4f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015b56:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015b5b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015b5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015b63:	ee                   	out    dx,al
c0015b64:	e8 ef fd ff ff       	call   c0015958 <picIoWait()>
c0015b69:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015b6d:	25 ff 00 00 00       	and    eax,0xff
c0015b72:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015b79:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015b7d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015b81:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015b85:	ee                   	out    dx,al
c0015b86:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015b8a:	25 ff 00 00 00       	and    eax,0xff
c0015b8f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015b96:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015b9a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015b9e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015ba2:	ee                   	out    dx,al
c0015ba3:	90                   	nop
c0015ba4:	83 c4 50             	add    esp,0x50
c0015ba7:	c3                   	ret    

c0015ba8 <picEOI(int)>:
c0015ba8:	83 ec 10             	sub    esp,0x10
c0015bab:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015bb0:	75 22                	jne    c0015bd4 <picEOI(int)+0x2c>
c0015bb2:	6a 0b                	push   0xb
c0015bb4:	e8 db fd ff ff       	call   c0015994 <picGetIRQReg(int)>
c0015bb9:	83 c4 04             	add    esp,0x4
c0015bbc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015bc1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015bc6:	25 ff ff 00 00       	and    eax,0xffff
c0015bcb:	25 80 00 00 00       	and    eax,0x80
c0015bd0:	74 72                	je     c0015c44 <picEOI(int)+0x9c>
c0015bd2:	66 90                	xchg   ax,ax
c0015bd4:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015bd9:	75 31                	jne    c0015c0c <picEOI(int)+0x64>
c0015bdb:	6a 0b                	push   0xb
c0015bdd:	e8 b2 fd ff ff       	call   c0015994 <picGetIRQReg(int)>
c0015be2:	83 c4 04             	add    esp,0x4
c0015be5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015bea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015bee:	66 85 c0             	test   ax,ax
c0015bf1:	78 19                	js     c0015c0c <picEOI(int)+0x64>
c0015bf3:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015bfa:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015bff:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015c03:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015c08:	ee                   	out    dx,al
c0015c09:	eb 3d                	jmp    c0015c48 <picEOI(int)+0xa0>
c0015c0b:	90                   	nop
c0015c0c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015c11:	7e 19                	jle    c0015c2c <picEOI(int)+0x84>
c0015c13:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015c1a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015c1f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015c23:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015c28:	ee                   	out    dx,al
c0015c29:	8d 76 00             	lea    esi,[esi+0x0]
c0015c2c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015c33:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015c38:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015c3c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015c41:	ee                   	out    dx,al
c0015c42:	eb 04                	jmp    c0015c48 <picEOI(int)+0xa0>
c0015c44:	90                   	nop
c0015c45:	8d 76 00             	lea    esi,[esi+0x0]
c0015c48:	83 c4 10             	add    esp,0x10
c0015c4b:	c3                   	ret    

c0015c4c <RTC::open(int, int, void*)>:
c0015c4c:	31 c0                	xor    eax,eax
c0015c4e:	c3                   	ret    
c0015c4f:	90                   	nop

c0015c50 <RTC::close(int, int, void*)>:
c0015c50:	31 c0                	xor    eax,eax
c0015c52:	c3                   	ret    
c0015c53:	90                   	nop

c0015c54 <RTC::timeInSecondsUTC()>:
c0015c54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c58:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015c5e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015c64:	c3                   	ret    
c0015c65:	90                   	nop

c0015c66 <RTC::timeInDatetimeUTC()>:
c0015c66:	53                   	push   ebx
c0015c67:	83 ec 14             	sub    esp,0x14
c0015c6a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015c6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c72:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c74:	50                   	push   eax
c0015c75:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015c78:	83 c4 0c             	add    esp,0xc
c0015c7b:	52                   	push   edx
c0015c7c:	50                   	push   eax
c0015c7d:	53                   	push   ebx
c0015c7e:	e8 3d 5b ff ff       	call   c000b7c0 <secondsToDatetime(unsigned long long)>
c0015c83:	89 d8                	mov    eax,ebx
c0015c85:	83 c4 14             	add    esp,0x14
c0015c88:	5b                   	pop    ebx
c0015c89:	c2 04 00             	ret    0x4

c0015c8c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015c8c:	56                   	push   esi
c0015c8d:	53                   	push   ebx
c0015c8e:	83 ec 14             	sub    esp,0x14
c0015c91:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015c95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c97:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015c9e:	52                   	push   edx
c0015c9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ca3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ca7:	50                   	push   eax
c0015ca8:	e8 13 5b ff ff       	call   c000b7c0 <secondsToDatetime(unsigned long long)>
c0015cad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015cb1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015cb5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015cb9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015cbd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015cc1:	89 f0                	mov    eax,esi
c0015cc3:	83 c4 20             	add    esp,0x20
c0015cc6:	5b                   	pop    ebx
c0015cc7:	5e                   	pop    esi
c0015cc8:	ff e0                	jmp    eax

c0015cca <RTC::~RTC()>:
c0015cca:	83 ec 0c             	sub    esp,0xc
c0015ccd:	ba 90 f7 01 c0       	mov    edx,0xc001f790
c0015cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cd6:	89 10                	mov    DWORD PTR [eax],edx
c0015cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cdc:	83 ec 0c             	sub    esp,0xc
c0015cdf:	50                   	push   eax
c0015ce0:	e8 5f 58 ff ff       	call   c000b544 <Clock::~Clock()>
c0015ce5:	83 c4 10             	add    esp,0x10
c0015ce8:	90                   	nop
c0015ce9:	83 c4 0c             	add    esp,0xc
c0015cec:	c3                   	ret    
c0015ced:	90                   	nop

c0015cee <RTC::~RTC()>:
c0015cee:	83 ec 0c             	sub    esp,0xc
c0015cf1:	83 ec 0c             	sub    esp,0xc
c0015cf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cf8:	e8 cd ff ff ff       	call   c0015cca <RTC::~RTC()>
c0015cfd:	83 c4 10             	add    esp,0x10
c0015d00:	83 ec 08             	sub    esp,0x8
c0015d03:	68 60 01 00 00       	push   0x160
c0015d08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d0c:	e8 07 48 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c0015d11:	83 c4 10             	add    esp,0x10
c0015d14:	83 c4 0c             	add    esp,0xc
c0015d17:	c3                   	ret    

c0015d18 <RTC::get_update_in_progress_flag()>:
c0015d18:	83 ec 14             	sub    esp,0x14
c0015d1b:	6a 0a                	push   0xa
c0015d1d:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d23:	e8 38 12 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015d28:	83 c4 1c             	add    esp,0x1c
c0015d2b:	c0 e8 07             	shr    al,0x7
c0015d2e:	c3                   	ret    
c0015d2f:	90                   	nop

c0015d30 <RTC::completeRTCRefresh()>:
c0015d30:	55                   	push   ebp
c0015d31:	57                   	push   edi
c0015d32:	56                   	push   esi
c0015d33:	53                   	push   ebx
c0015d34:	83 ec 2c             	sub    esp,0x2c
c0015d37:	8b 1d 8c 54 02 c0    	mov    ebx,DWORD PTR ds:0xc002548c
c0015d3d:	83 ec 0c             	sub    esp,0xc
c0015d40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015d44:	e8 cf ff ff ff       	call   c0015d18 <RTC::get_update_in_progress_flag()>
c0015d49:	83 c4 10             	add    esp,0x10
c0015d4c:	84 c0                	test   al,al
c0015d4e:	74 0e                	je     c0015d5e <RTC::completeRTCRefresh()+0x2e>
c0015d50:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015d56:	3b 05 8c 54 02 c0    	cmp    eax,DWORD PTR ds:0xc002548c
c0015d5c:	73 df                	jae    c0015d3d <RTC::completeRTCRefresh()+0xd>
c0015d5e:	55                   	push   ebp
c0015d5f:	55                   	push   ebp
c0015d60:	6a 00                	push   0x0
c0015d62:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d68:	e8 f3 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015d6d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015d71:	58                   	pop    eax
c0015d72:	5a                   	pop    edx
c0015d73:	6a 02                	push   0x2
c0015d75:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d7b:	e8 e0 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015d80:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015d84:	59                   	pop    ecx
c0015d85:	5b                   	pop    ebx
c0015d86:	6a 04                	push   0x4
c0015d88:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d8e:	e8 cd 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015d93:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015d97:	5e                   	pop    esi
c0015d98:	5f                   	pop    edi
c0015d99:	6a 07                	push   0x7
c0015d9b:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015da1:	e8 ba 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015da6:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015daa:	5d                   	pop    ebp
c0015dab:	58                   	pop    eax
c0015dac:	6a 08                	push   0x8
c0015dae:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015db4:	e8 a7 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015db9:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015dbd:	58                   	pop    eax
c0015dbe:	5a                   	pop    edx
c0015dbf:	6a 09                	push   0x9
c0015dc1:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015dc7:	e8 94 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015dcc:	83 c4 10             	add    esp,0x10
c0015dcf:	0f b6 e8             	movzx  ebp,al
c0015dd2:	8b 1d 8c 54 02 c0    	mov    ebx,DWORD PTR ds:0xc002548c
c0015dd8:	83 ec 0c             	sub    esp,0xc
c0015ddb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015ddf:	e8 34 ff ff ff       	call   c0015d18 <RTC::get_update_in_progress_flag()>
c0015de4:	83 c4 10             	add    esp,0x10
c0015de7:	84 c0                	test   al,al
c0015de9:	74 0e                	je     c0015df9 <RTC::completeRTCRefresh()+0xc9>
c0015deb:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015df1:	3b 05 8c 54 02 c0    	cmp    eax,DWORD PTR ds:0xc002548c
c0015df7:	73 df                	jae    c0015dd8 <RTC::completeRTCRefresh()+0xa8>
c0015df9:	50                   	push   eax
c0015dfa:	50                   	push   eax
c0015dfb:	6a 00                	push   0x0
c0015dfd:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015e03:	e8 58 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015e08:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015e0c:	58                   	pop    eax
c0015e0d:	5a                   	pop    edx
c0015e0e:	6a 02                	push   0x2
c0015e10:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015e16:	e8 45 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015e1b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015e1f:	59                   	pop    ecx
c0015e20:	5b                   	pop    ebx
c0015e21:	6a 04                	push   0x4
c0015e23:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015e29:	e8 32 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015e2e:	5e                   	pop    esi
c0015e2f:	88 c3                	mov    bl,al
c0015e31:	5f                   	pop    edi
c0015e32:	6a 07                	push   0x7
c0015e34:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015e3a:	e8 21 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015e3f:	89 c6                	mov    esi,eax
c0015e41:	58                   	pop    eax
c0015e42:	5a                   	pop    edx
c0015e43:	6a 08                	push   0x8
c0015e45:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015e4b:	e8 10 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015e50:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015e54:	59                   	pop    ecx
c0015e55:	5f                   	pop    edi
c0015e56:	6a 09                	push   0x9
c0015e58:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015e5e:	e8 fd 10 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015e63:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015e67:	0f b6 f8             	movzx  edi,al
c0015e6a:	83 c4 10             	add    esp,0x10
c0015e6d:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015e71:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015e75:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015e79:	89 f1                	mov    ecx,esi
c0015e7b:	0f 94 c0             	sete   al
c0015e7e:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015e82:	0f 94 c2             	sete   dl
c0015e85:	21 d0                	and    eax,edx
c0015e87:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015e8b:	0f 94 c2             	sete   dl
c0015e8e:	21 c2                	and    edx,eax
c0015e90:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015e94:	0f 94 c0             	sete   al
c0015e97:	21 d0                	and    eax,edx
c0015e99:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015e9d:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015ea1:	0f 94 c1             	sete   cl
c0015ea4:	84 c8                	test   al,cl
c0015ea6:	75 29                	jne    c0015ed1 <RTC::completeRTCRefresh()+0x1a1>
c0015ea8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015eac:	89 fd                	mov    ebp,edi
c0015eae:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015eb2:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015eb6:	89 f0                	mov    eax,esi
c0015eb8:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015ebc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015ec0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015ec4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015ec8:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015ecc:	e9 01 ff ff ff       	jmp    c0015dd2 <RTC::completeRTCRefresh()+0xa2>
c0015ed1:	39 fd                	cmp    ebp,edi
c0015ed3:	75 d3                	jne    c0015ea8 <RTC::completeRTCRefresh()+0x178>
c0015ed5:	55                   	push   ebp
c0015ed6:	55                   	push   ebp
c0015ed7:	6a 0b                	push   0xb
c0015ed9:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015edf:	e8 7c 10 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015ee4:	83 c4 10             	add    esp,0x10
c0015ee7:	89 c5                	mov    ebp,eax
c0015ee9:	a8 04                	test   al,0x4
c0015eeb:	75 78                	jne    c0015f65 <RTC::completeRTCRefresh()+0x235>
c0015eed:	b1 0a                	mov    cl,0xa
c0015eef:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015ef3:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015ef7:	83 e2 0f             	and    edx,0xf
c0015efa:	c0 e8 04             	shr    al,0x4
c0015efd:	c1 ef 04             	shr    edi,0x4
c0015f00:	f6 e1                	mul    cl
c0015f02:	6b ff 0a             	imul   edi,edi,0xa
c0015f05:	01 d0                	add    eax,edx
c0015f07:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f0b:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015f0f:	83 e2 0f             	and    edx,0xf
c0015f12:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015f16:	c0 e8 04             	shr    al,0x4
c0015f19:	f6 e1                	mul    cl
c0015f1b:	01 d0                	add    eax,edx
c0015f1d:	88 da                	mov    dl,bl
c0015f1f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015f23:	83 e2 0f             	and    edx,0xf
c0015f26:	88 d8                	mov    al,bl
c0015f28:	83 e3 80             	and    ebx,0xffffff80
c0015f2b:	c0 e8 04             	shr    al,0x4
c0015f2e:	83 e0 07             	and    eax,0x7
c0015f31:	f6 e1                	mul    cl
c0015f33:	01 d0                	add    eax,edx
c0015f35:	89 f2                	mov    edx,esi
c0015f37:	09 c3                	or     ebx,eax
c0015f39:	83 e2 0f             	and    edx,0xf
c0015f3c:	89 f0                	mov    eax,esi
c0015f3e:	c0 e8 04             	shr    al,0x4
c0015f41:	f6 e1                	mul    cl
c0015f43:	8d 34 02             	lea    esi,[edx+eax*1]
c0015f46:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015f4a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015f4e:	83 e2 0f             	and    edx,0xf
c0015f51:	c0 e8 04             	shr    al,0x4
c0015f54:	f6 e1                	mul    cl
c0015f56:	01 d0                	add    eax,edx
c0015f58:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015f5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f60:	83 e0 0f             	and    eax,0xf
c0015f63:	01 c7                	add    edi,eax
c0015f65:	83 e5 02             	and    ebp,0x2
c0015f68:	75 14                	jne    c0015f7e <RTC::completeRTCRefresh()+0x24e>
c0015f6a:	84 db                	test   bl,bl
c0015f6c:	79 10                	jns    c0015f7e <RTC::completeRTCRefresh()+0x24e>
c0015f6e:	83 e3 7f             	and    ebx,0x7f
c0015f71:	b9 18 00 00 00       	mov    ecx,0x18
c0015f76:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015f79:	99                   	cdq    
c0015f7a:	f7 f9                	idiv   ecx
c0015f7c:	88 d3                	mov    bl,dl
c0015f7e:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015f84:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015f8a:	77 06                	ja     c0015f92 <RTC::completeRTCRefresh()+0x262>
c0015f8c:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015f92:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015f97:	31 d2                	xor    edx,edx
c0015f99:	c1 e1 10             	shl    ecx,0x10
c0015f9c:	89 d7                	mov    edi,edx
c0015f9e:	c1 e5 10             	shl    ebp,0x10
c0015fa1:	31 c0                	xor    eax,eax
c0015fa3:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015fa9:	09 cf                	or     edi,ecx
c0015fab:	89 fa                	mov    edx,edi
c0015fad:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015fb1:	88 da                	mov    dl,bl
c0015fb3:	89 f3                	mov    ebx,esi
c0015fb5:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015fb9:	88 d8                	mov    al,bl
c0015fbb:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015fbf:	0f b7 c8             	movzx  ecx,ax
c0015fc2:	09 e9                	or     ecx,ebp
c0015fc4:	89 c8                	mov    eax,ecx
c0015fc6:	51                   	push   ecx
c0015fc7:	51                   	push   ecx
c0015fc8:	52                   	push   edx
c0015fc9:	50                   	push   eax
c0015fca:	e8 64 56 ff ff       	call   c000b633 <datetimeToSeconds(datetime_t)>
c0015fcf:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015fd3:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015fd9:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015fdf:	83 c4 3c             	add    esp,0x3c
c0015fe2:	5b                   	pop    ebx
c0015fe3:	5e                   	pop    esi
c0015fe4:	5f                   	pop    edi
c0015fe5:	5d                   	pop    ebp
c0015fe6:	c3                   	ret    
c0015fe7:	90                   	nop

c0015fe8 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015fe8:	55                   	push   ebp
c0015fe9:	57                   	push   edi
c0015fea:	56                   	push   esi
c0015feb:	53                   	push   ebx
c0015fec:	83 ec 30             	sub    esp,0x30
c0015fef:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015ff3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015ff7:	6a 00                	push   0x0
c0015ff9:	6a 00                	push   0x0
c0015ffb:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0016001:	e8 70 10 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016006:	83 c4 0c             	add    esp,0xc
c0016009:	6a 00                	push   0x0
c001600b:	6a 02                	push   0x2
c001600d:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0016013:	e8 5e 10 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016018:	31 d2                	xor    edx,edx
c001601a:	89 f9                	mov    ecx,edi
c001601c:	89 f8                	mov    eax,edi
c001601e:	c1 e9 10             	shr    ecx,0x10
c0016021:	0f b6 c4             	movzx  eax,ah
c0016024:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0016028:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001602c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016030:	b9 64 00 00 00       	mov    ecx,0x64
c0016035:	89 f0                	mov    eax,esi
c0016037:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001603b:	89 f0                	mov    eax,esi
c001603d:	0f b6 c4             	movzx  eax,ah
c0016040:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016044:	89 f0                	mov    eax,esi
c0016046:	c1 e8 10             	shr    eax,0x10
c0016049:	66 f7 f1             	div    cx
c001604c:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016051:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0016056:	59                   	pop    ecx
c0016057:	5b                   	pop    ebx
c0016058:	89 fb                	mov    ebx,edi
c001605a:	6a 0b                	push   0xb
c001605c:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0016062:	e8 f9 0e ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016067:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001606b:	83 c4 10             	add    esp,0x10
c001606e:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0016073:	75 74                	jne    c00160e9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0016075:	b2 0a                	mov    dl,0xa
c0016077:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001607b:	0f b6 c1             	movzx  eax,cl
c001607e:	f6 f2                	div    dl
c0016080:	88 c3                	mov    bl,al
c0016082:	88 e0                	mov    al,ah
c0016084:	c1 e3 04             	shl    ebx,0x4
c0016087:	09 c3                	or     ebx,eax
c0016089:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001608e:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0016092:	f6 f2                	div    dl
c0016094:	88 c1                	mov    cl,al
c0016096:	88 e0                	mov    al,ah
c0016098:	c1 e1 04             	shl    ecx,0x4
c001609b:	09 c1                	or     ecx,eax
c001609d:	89 f8                	mov    eax,edi
c001609f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00160a3:	0f b6 c0             	movzx  eax,al
c00160a6:	f6 f2                	div    dl
c00160a8:	88 c3                	mov    bl,al
c00160aa:	88 e0                	mov    al,ah
c00160ac:	c1 e3 04             	shl    ebx,0x4
c00160af:	09 c3                	or     ebx,eax
c00160b1:	89 f0                	mov    eax,esi
c00160b3:	0f b6 c0             	movzx  eax,al
c00160b6:	f6 f2                	div    dl
c00160b8:	88 c1                	mov    cl,al
c00160ba:	88 e0                	mov    al,ah
c00160bc:	c1 e1 04             	shl    ecx,0x4
c00160bf:	09 c1                	or     ecx,eax
c00160c1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00160c6:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c00160ca:	f6 f2                	div    dl
c00160cc:	88 c1                	mov    cl,al
c00160ce:	88 e0                	mov    al,ah
c00160d0:	c1 e1 04             	shl    ecx,0x4
c00160d3:	09 c1                	or     ecx,eax
c00160d5:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c00160da:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00160de:	f6 f2                	div    dl
c00160e0:	89 c5                	mov    ebp,eax
c00160e2:	88 e0                	mov    al,ah
c00160e4:	c1 e5 04             	shl    ebp,0x4
c00160e7:	09 c5                	or     ebp,eax
c00160e9:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00160ee:	75 17                	jne    c0016107 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00160f0:	80 fb 0b             	cmp    bl,0xb
c00160f3:	76 0c                	jbe    c0016101 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00160f5:	80 eb 0c             	sub    bl,0xc
c00160f8:	75 02                	jne    c00160fc <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00160fa:	b3 0c                	mov    bl,0xc
c00160fc:	83 cb 80             	or     ebx,0xffffff80
c00160ff:	eb 06                	jmp    c0016107 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016101:	84 db                	test   bl,bl
c0016103:	75 02                	jne    c0016107 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016105:	b3 0c                	mov    bl,0xc
c0016107:	0f b6 db             	movzx  ebx,bl
c001610a:	50                   	push   eax
c001610b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016110:	50                   	push   eax
c0016111:	6a 00                	push   0x0
c0016113:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0016119:	e8 58 0f ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c001611e:	83 c4 0c             	add    esp,0xc
c0016121:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016126:	50                   	push   eax
c0016127:	6a 02                	push   0x2
c0016129:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c001612f:	e8 42 0f ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016134:	83 c4 0c             	add    esp,0xc
c0016137:	53                   	push   ebx
c0016138:	6a 04                	push   0x4
c001613a:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0016140:	e8 31 0f ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016145:	83 c4 0c             	add    esp,0xc
c0016148:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001614d:	50                   	push   eax
c001614e:	6a 07                	push   0x7
c0016150:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0016156:	e8 1b 0f ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c001615b:	83 c4 0c             	add    esp,0xc
c001615e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0016163:	50                   	push   eax
c0016164:	6a 08                	push   0x8
c0016166:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c001616c:	e8 05 0f ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016171:	83 c4 0c             	add    esp,0xc
c0016174:	89 e8                	mov    eax,ebp
c0016176:	0f b6 e8             	movzx  ebp,al
c0016179:	55                   	push   ebp
c001617a:	6a 09                	push   0x9
c001617c:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0016182:	e8 ef 0e ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016187:	5a                   	pop    edx
c0016188:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001618c:	e8 9f fb ff ff       	call   c0015d30 <RTC::completeRTCRefresh()>
c0016191:	83 c4 3c             	add    esp,0x3c
c0016194:	b0 01                	mov    al,0x1
c0016196:	5b                   	pop    ebx
c0016197:	5e                   	pop    esi
c0016198:	5f                   	pop    edi
c0016199:	5d                   	pop    ebp
c001619a:	c3                   	ret    

c001619b <rtcIRQHandler(regs*, void*)>:
c001619b:	53                   	push   ebx
c001619c:	83 ec 10             	sub    esp,0x10
c001619f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00161a3:	6a 0c                	push   0xc
c00161a5:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00161ab:	e8 b0 0d ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c00161b0:	83 c4 10             	add    esp,0x10
c00161b3:	84 c0                	test   al,al
c00161b5:	79 24                	jns    c00161db <rtcIRQHandler(regs*, void*)+0x40>
c00161b7:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00161be:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00161c5:	66 ff 05 14 62 02 c0 	inc    WORD PTR ds:0xc0026214
c00161cc:	75 0d                	jne    c00161db <rtcIRQHandler(regs*, void*)+0x40>
c00161ce:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00161d2:	83 c4 08             	add    esp,0x8
c00161d5:	5b                   	pop    ebx
c00161d6:	e9 55 fb ff ff       	jmp    c0015d30 <RTC::completeRTCRefresh()>
c00161db:	83 c4 08             	add    esp,0x8
c00161de:	5b                   	pop    ebx
c00161df:	c3                   	ret    

c00161e0 <RTC::RTC()>:
c00161e0:	83 ec 1c             	sub    esp,0x1c
c00161e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161e7:	83 ec 08             	sub    esp,0x8
c00161ea:	68 73 f7 01 c0       	push   0xc001f773
c00161ef:	50                   	push   eax
c00161f0:	e8 19 53 ff ff       	call   c000b50e <Clock::Clock(char const*)>
c00161f5:	83 c4 10             	add    esp,0x10
c00161f8:	ba 90 f7 01 c0       	mov    edx,0xc001f790
c00161fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016201:	89 10                	mov    DWORD PTR [eax],edx
c0016203:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016207:	83 ec 0c             	sub    esp,0xc
c001620a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001620e:	6a 01                	push   0x1
c0016210:	68 9b 61 01 c0       	push   0xc001619b
c0016215:	6a 08                	push   0x8
c0016217:	50                   	push   eax
c0016218:	e8 db 57 ff ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001621d:	83 c4 20             	add    esp,0x20
c0016220:	89 c2                	mov    edx,eax
c0016222:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016226:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001622c:	fa                   	cli    
c001622d:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0016232:	40                   	inc    eax
c0016233:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0016238:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001623d:	83 ec 08             	sub    esp,0x8
c0016240:	6a 0b                	push   0xb
c0016242:	50                   	push   eax
c0016243:	e8 18 0d ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016248:	83 c4 10             	add    esp,0x10
c001624b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001624f:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0016254:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0016258:	83 ca 10             	or     edx,0x10
c001625b:	81 e2 ff 00 00 00    	and    edx,0xff
c0016261:	83 ec 04             	sub    esp,0x4
c0016264:	52                   	push   edx
c0016265:	6a 0b                	push   0xb
c0016267:	50                   	push   eax
c0016268:	e8 09 0e ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c001626d:	83 c4 10             	add    esp,0x10
c0016270:	83 ec 0c             	sub    esp,0xc
c0016273:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016277:	e8 b4 fa ff ff       	call   c0015d30 <RTC::completeRTCRefresh()>
c001627c:	83 c4 10             	add    esp,0x10
c001627f:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0016284:	48                   	dec    eax
c0016285:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001628a:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001628f:	85 c0                	test   eax,eax
c0016291:	75 01                	jne    c0016294 <RTC::RTC()+0xb4>
c0016293:	fb                   	sti    
c0016294:	90                   	nop
c0016295:	83 c4 1c             	add    esp,0x1c
c0016298:	c3                   	ret    
c0016299:	66 90                	xchg   ax,ax
c001629b:	90                   	nop

c001629c <HalConsoleScroll(int, int)>:
c001629c:	83 ec 10             	sub    esp,0x10
c001629f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00162a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00162af:	90                   	nop
c00162b0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00162b5:	0f 8f e1 00 00 00    	jg     c001639c <HalConsoleScroll(int, int)+0x100>
c00162bb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00162c3:	90                   	nop
c00162c4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00162cc:	0f 8f be 00 00 00    	jg     c0016390 <HalConsoleScroll(int, int)+0xf4>
c00162d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162d6:	89 d0                	mov    eax,edx
c00162d8:	c1 e0 02             	shl    eax,0x2
c00162db:	01 d0                	add    eax,edx
c00162dd:	c1 e0 05             	shl    eax,0x5
c00162e0:	89 c2                	mov    edx,eax
c00162e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162e6:	01 d0                	add    eax,edx
c00162e8:	89 c2                	mov    edx,eax
c00162ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162ee:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00162f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162f5:	89 d0                	mov    eax,edx
c00162f7:	c1 e0 02             	shl    eax,0x2
c00162fa:	01 d0                	add    eax,edx
c00162fc:	c1 e0 05             	shl    eax,0x5
c00162ff:	89 c2                	mov    edx,eax
c0016301:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016305:	01 d0                	add    eax,edx
c0016307:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001630d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016311:	01 c2                	add    edx,eax
c0016313:	8a 01                	mov    al,BYTE PTR [ecx]
c0016315:	88 02                	mov    BYTE PTR [edx],al
c0016317:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001631c:	75 66                	jne    c0016384 <HalConsoleScroll(int, int)+0xe8>
c001631e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016322:	83 e0 01             	and    eax,0x1
c0016325:	74 39                	je     c0016360 <HalConsoleScroll(int, int)+0xc4>
c0016327:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001632b:	83 e0 0f             	and    eax,0xf
c001632e:	88 c2                	mov    dl,al
c0016330:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016334:	c1 e0 04             	shl    eax,0x4
c0016337:	88 d1                	mov    cl,dl
c0016339:	09 c1                	or     ecx,eax
c001633b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001633f:	89 d0                	mov    eax,edx
c0016341:	c1 e0 02             	shl    eax,0x2
c0016344:	01 d0                	add    eax,edx
c0016346:	c1 e0 05             	shl    eax,0x5
c0016349:	89 c2                	mov    edx,eax
c001634b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001634f:	01 d0                	add    eax,edx
c0016351:	89 c2                	mov    edx,eax
c0016353:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016357:	01 d0                	add    eax,edx
c0016359:	88 ca                	mov    dl,cl
c001635b:	88 10                	mov    BYTE PTR [eax],dl
c001635d:	eb 25                	jmp    c0016384 <HalConsoleScroll(int, int)+0xe8>
c001635f:	90                   	nop
c0016360:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016364:	89 d0                	mov    eax,edx
c0016366:	c1 e0 02             	shl    eax,0x2
c0016369:	01 d0                	add    eax,edx
c001636b:	c1 e0 05             	shl    eax,0x5
c001636e:	89 c2                	mov    edx,eax
c0016370:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016374:	01 d0                	add    eax,edx
c0016376:	89 c2                	mov    edx,eax
c0016378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001637c:	01 d0                	add    eax,edx
c001637e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016381:	8d 76 00             	lea    esi,[esi+0x0]
c0016384:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016388:	e9 37 ff ff ff       	jmp    c00162c4 <HalConsoleScroll(int, int)+0x28>
c001638d:	8d 76 00             	lea    esi,[esi+0x0]
c0016390:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016394:	e9 17 ff ff ff       	jmp    c00162b0 <HalConsoleScroll(int, int)+0x14>
c0016399:	8d 76 00             	lea    esi,[esi+0x0]
c001639c:	90                   	nop
c001639d:	83 c4 10             	add    esp,0x10
c00163a0:	c3                   	ret    
c00163a1:	8d 76 00             	lea    esi,[esi+0x0]

c00163a4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00163a4:	83 ec 14             	sub    esp,0x14
c00163a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163ab:	88 04 24             	mov    BYTE PTR [esp],al
c00163ae:	8a 04 24             	mov    al,BYTE PTR [esp]
c00163b1:	25 ff 00 00 00       	and    eax,0xff
c00163b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163ba:	89 d1                	mov    ecx,edx
c00163bc:	83 e1 0f             	and    ecx,0xf
c00163bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00163c3:	c1 e2 04             	shl    edx,0x4
c00163c6:	81 e2 ff 00 00 00    	and    edx,0xff
c00163cc:	09 ca                	or     edx,ecx
c00163ce:	c1 e2 08             	shl    edx,0x8
c00163d1:	09 d0                	or     eax,edx
c00163d3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00163d8:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00163e0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00163e4:	89 d0                	mov    eax,edx
c00163e6:	c1 e0 02             	shl    eax,0x2
c00163e9:	01 d0                	add    eax,edx
c00163eb:	c1 e0 04             	shl    eax,0x4
c00163ee:	89 c2                	mov    edx,eax
c00163f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00163f4:	01 d0                	add    eax,edx
c00163f6:	01 c0                	add    eax,eax
c00163f8:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00163fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016400:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016405:	66 89 02             	mov    WORD PTR [edx],ax
c0016408:	90                   	nop
c0016409:	83 c4 14             	add    esp,0x14
c001640c:	c3                   	ret    
c001640d:	8d 76 00             	lea    esi,[esi+0x0]

c0016410 <HalConsoleCursorUpdate(int, int)>:
c0016410:	83 ec 20             	sub    esp,0x20
c0016413:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016417:	89 c2                	mov    edx,eax
c0016419:	89 d0                	mov    eax,edx
c001641b:	c1 e0 02             	shl    eax,0x2
c001641e:	01 d0                	add    eax,edx
c0016420:	c1 e0 04             	shl    eax,0x4
c0016423:	89 c2                	mov    edx,eax
c0016425:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016429:	01 d0                	add    eax,edx
c001642b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016430:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0016437:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001643c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016440:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016444:	ee                   	out    dx,al
c0016445:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001644a:	25 ff 00 00 00       	and    eax,0xff
c001644f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0016456:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001645a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001645e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016462:	ee                   	out    dx,al
c0016463:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001646a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001646f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016473:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016477:	ee                   	out    dx,al
c0016478:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001647d:	66 c1 e8 08          	shr    ax,0x8
c0016481:	25 ff 00 00 00       	and    eax,0xff
c0016486:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001648d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016491:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016495:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016499:	ee                   	out    dx,al
c001649a:	90                   	nop
c001649b:	83 c4 20             	add    esp,0x20
c001649e:	c3                   	ret    
c001649f:	90                   	nop

c00164a0 <FAT::getName()>:
c00164a0:	b8 c4 f7 01 c0       	mov    eax,0xc001f7c4
c00164a5:	c3                   	ret    
c00164a6:	66 90                	xchg   ax,ax

c00164a8 <FAT::tell(void*, unsigned long long*)>:
c00164a8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00164ad:	75 09                	jne    c00164b8 <FAT::tell(void*, unsigned long long*)+0x10>
c00164af:	b8 04 00 00 00       	mov    eax,0x4
c00164b4:	c3                   	ret    
c00164b5:	8d 76 00             	lea    esi,[esi+0x0]
c00164b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00164bd:	75 09                	jne    c00164c8 <FAT::tell(void*, unsigned long long*)+0x20>
c00164bf:	b8 04 00 00 00       	mov    eax,0x4
c00164c4:	c3                   	ret    
c00164c5:	8d 76 00             	lea    esi,[esi+0x0]
c00164c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164cc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00164cf:	ba 00 00 00 00       	mov    edx,0x0
c00164d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164d8:	89 01                	mov    DWORD PTR [ecx],eax
c00164da:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00164dd:	b8 00 00 00 00       	mov    eax,0x0
c00164e2:	c3                   	ret    
c00164e3:	90                   	nop

c00164e4 <FAT::stat(void*, unsigned long long*)>:
c00164e4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00164e9:	75 09                	jne    c00164f4 <FAT::stat(void*, unsigned long long*)+0x10>
c00164eb:	b8 04 00 00 00       	mov    eax,0x4
c00164f0:	c3                   	ret    
c00164f1:	8d 76 00             	lea    esi,[esi+0x0]
c00164f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00164f9:	75 09                	jne    c0016504 <FAT::stat(void*, unsigned long long*)+0x20>
c00164fb:	b8 04 00 00 00       	mov    eax,0x4
c0016500:	c3                   	ret    
c0016501:	8d 76 00             	lea    esi,[esi+0x0]
c0016504:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016508:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001650b:	ba 00 00 00 00       	mov    edx,0x0
c0016510:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016514:	89 01                	mov    DWORD PTR [ecx],eax
c0016516:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016519:	b8 00 00 00 00       	mov    eax,0x0
c001651e:	c3                   	ret    
c001651f:	90                   	nop

c0016520 <FAT::~FAT()>:
c0016520:	83 ec 0c             	sub    esp,0xc
c0016523:	ba 10 f8 01 c0       	mov    edx,0xc001f810
c0016528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001652c:	89 10                	mov    DWORD PTR [eax],edx
c001652e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016532:	83 ec 0c             	sub    esp,0xc
c0016535:	50                   	push   eax
c0016536:	e8 19 44 ff ff       	call   c000a954 <Filesystem::~Filesystem()>
c001653b:	83 c4 10             	add    esp,0x10
c001653e:	90                   	nop
c001653f:	83 c4 0c             	add    esp,0xc
c0016542:	c3                   	ret    
c0016543:	90                   	nop

c0016544 <FAT::~FAT()>:
c0016544:	83 ec 0c             	sub    esp,0xc
c0016547:	83 ec 0c             	sub    esp,0xc
c001654a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001654e:	e8 cd ff ff ff       	call   c0016520 <FAT::~FAT()>
c0016553:	83 c4 10             	add    esp,0x10
c0016556:	83 ec 08             	sub    esp,0x8
c0016559:	6a 08                	push   0x8
c001655b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001655f:	e8 b4 3f ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c0016564:	83 c4 10             	add    esp,0x10
c0016567:	83 c4 0c             	add    esp,0xc
c001656a:	c3                   	ret    
c001656b:	90                   	nop

c001656c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001656c:	83 ec 1c             	sub    esp,0x1c
c001656f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0016576:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001657b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001657f:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c0016586:	83 f8 ff             	cmp    eax,0xffffffff
c0016589:	75 35                	jne    c00165c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001658b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001658f:	88 c2                	mov    dl,al
c0016591:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016596:	01 d0                	add    eax,edx
c0016598:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001659c:	8b 15 20 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026220
c00165a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165a6:	89 14 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],edx
c00165ad:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c00165b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165b6:	89 14 85 c0 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d40],edx
c00165bd:	eb 19                	jmp    c00165d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00165bf:	90                   	nop
c00165c0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00165c4:	88 c2                	mov    dl,al
c00165c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165ca:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c00165d1:	01 d0                	add    eax,edx
c00165d3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00165d7:	90                   	nop
c00165d8:	83 ec 04             	sub    esp,0x4
c00165db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00165df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00165e3:	8d 44 24 15          	lea    eax,[esp+0x15]
c00165e7:	50                   	push   eax
c00165e8:	e8 67 e8 fe ff       	call   c0004e54 <f_getlabel>
c00165ed:	83 c4 10             	add    esp,0x10
c00165f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165f9:	75 09                	jne    c0016604 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00165fb:	b8 00 00 00 00       	mov    eax,0x0
c0016600:	eb 0a                	jmp    c001660c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0016602:	66 90                	xchg   ax,ax
c0016604:	b8 01 00 00 00       	mov    eax,0x1
c0016609:	8d 76 00             	lea    esi,[esi+0x0]
c001660c:	83 c4 1c             	add    esp,0x1c
c001660f:	c3                   	ret    

c0016610 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016610:	57                   	push   edi
c0016611:	83 ec 58             	sub    esp,0x58
c0016614:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001661c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016620:	b8 00 00 00 00       	mov    eax,0x0
c0016625:	b9 0f 00 00 00       	mov    ecx,0xf
c001662a:	fc                   	cld    
c001662b:	89 d7                	mov    edi,edx
c001662d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001662f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016633:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c001663a:	83 f8 ff             	cmp    eax,0xffffffff
c001663d:	75 35                	jne    c0016674 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001663f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016643:	88 c2                	mov    dl,al
c0016645:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c001664a:	01 d0                	add    eax,edx
c001664c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016650:	8b 15 20 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026220
c0016656:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001665a:	89 14 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],edx
c0016661:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016666:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001666a:	89 14 85 c0 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d40],edx
c0016671:	eb 19                	jmp    c001668c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0016673:	90                   	nop
c0016674:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016678:	88 c2                	mov    dl,al
c001667a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001667e:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c0016685:	01 d0                	add    eax,edx
c0016687:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001668b:	90                   	nop
c001668c:	83 ec 08             	sub    esp,0x8
c001668f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0016693:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016697:	50                   	push   eax
c0016698:	e8 23 a1 fe ff       	call   c00007c0 <strcat>
c001669d:	83 c4 10             	add    esp,0x10
c00166a0:	83 ec 0c             	sub    esp,0xc
c00166a3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00166a7:	50                   	push   eax
c00166a8:	e8 f8 e8 fe ff       	call   c0004fa5 <f_setlabel>
c00166ad:	83 c4 10             	add    esp,0x10
c00166b0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00166b4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00166b9:	75 09                	jne    c00166c4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00166bb:	b8 00 00 00 00       	mov    eax,0x0
c00166c0:	eb 0a                	jmp    c00166cc <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00166c2:	66 90                	xchg   ax,ax
c00166c4:	b8 01 00 00 00       	mov    eax,0x1
c00166c9:	8d 76 00             	lea    esi,[esi+0x0]
c00166cc:	83 c4 58             	add    esp,0x58
c00166cf:	5f                   	pop    edi
c00166d0:	c3                   	ret    
c00166d1:	90                   	nop
c00166d2:	66 90                	xchg   ax,ax

c00166d4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00166d4:	83 ec 2c             	sub    esp,0x2c
c00166d7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00166df:	83 ec 08             	sub    esp,0x8
c00166e2:	68 e8 f7 01 c0       	push   0xc001f7e8
c00166e7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166eb:	e8 f0 9f fe ff       	call   c00006e0 <strcmp>
c00166f0:	83 c4 10             	add    esp,0x10
c00166f3:	85 c0                	test   eax,eax
c00166f5:	0f 94 c0             	sete   al
c00166f8:	84 c0                	test   al,al
c00166fa:	74 10                	je     c001670c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00166fc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016704:	e9 b3 00 00 00       	jmp    c00167bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016709:	8d 76 00             	lea    esi,[esi+0x0]
c001670c:	83 ec 08             	sub    esp,0x8
c001670f:	68 da f7 01 c0       	push   0xc001f7da
c0016714:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016718:	e8 c3 9f fe ff       	call   c00006e0 <strcmp>
c001671d:	83 c4 10             	add    esp,0x10
c0016720:	85 c0                	test   eax,eax
c0016722:	0f 94 c0             	sete   al
c0016725:	84 c0                	test   al,al
c0016727:	74 0f                	je     c0016738 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016729:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016731:	e9 86 00 00 00       	jmp    c00167bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016736:	66 90                	xchg   ax,ax
c0016738:	83 ec 08             	sub    esp,0x8
c001673b:	68 e0 f7 01 c0       	push   0xc001f7e0
c0016740:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016744:	e8 97 9f fe ff       	call   c00006e0 <strcmp>
c0016749:	83 c4 10             	add    esp,0x10
c001674c:	85 c0                	test   eax,eax
c001674e:	0f 94 c0             	sete   al
c0016751:	84 c0                	test   al,al
c0016753:	74 0b                	je     c0016760 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0016755:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001675d:	eb 5d                	jmp    c00167bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001675f:	90                   	nop
c0016760:	83 ec 08             	sub    esp,0x8
c0016763:	68 5c d7 01 c0       	push   0xc001d75c
c0016768:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001676c:	e8 6f 9f fe ff       	call   c00006e0 <strcmp>
c0016771:	83 c4 10             	add    esp,0x10
c0016774:	85 c0                	test   eax,eax
c0016776:	0f 94 c0             	sete   al
c0016779:	84 c0                	test   al,al
c001677b:	74 0b                	je     c0016788 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001677d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0016785:	eb 35                	jmp    c00167bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016787:	90                   	nop
c0016788:	83 ec 08             	sub    esp,0x8
c001678b:	68 e6 f7 01 c0       	push   0xc001f7e6
c0016790:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016794:	e8 47 9f fe ff       	call   c00006e0 <strcmp>
c0016799:	83 c4 10             	add    esp,0x10
c001679c:	85 c0                	test   eax,eax
c001679e:	0f 94 c0             	sete   al
c00167a1:	84 c0                	test   al,al
c00167a3:	74 0b                	je     c00167b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00167a5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00167ad:	eb 0d                	jmp    c00167bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167af:	90                   	nop
c00167b0:	b8 08 00 00 00       	mov    eax,0x8
c00167b5:	e9 ea 00 00 00       	jmp    c00168a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00167ba:	66 90                	xchg   ax,ax
c00167bc:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00167c3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00167c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00167cc:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c00167d3:	83 f8 ff             	cmp    eax,0xffffffff
c00167d6:	75 34                	jne    c001680c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00167d8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00167dc:	88 c2                	mov    dl,al
c00167de:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c00167e3:	01 d0                	add    eax,edx
c00167e5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00167e9:	8b 15 20 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026220
c00167ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00167f3:	89 14 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],edx
c00167fa:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c00167ff:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016803:	89 14 85 c0 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d40],edx
c001680a:	eb 18                	jmp    c0016824 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001680c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016810:	88 c2                	mov    dl,al
c0016812:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016816:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c001681d:	01 d0                	add    eax,edx
c001681f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016823:	90                   	nop
c0016824:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016828:	88 04 24             	mov    BYTE PTR [esp],al
c001682b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001682f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016833:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001683b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016840:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016848:	83 ec 0c             	sub    esp,0xc
c001684b:	68 00 20 00 00       	push   0x2000
c0016850:	e8 20 10 ff ff       	call   c0007875 <malloc>
c0016855:	83 c4 10             	add    esp,0x10
c0016858:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001685c:	68 00 20 00 00       	push   0x2000
c0016861:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016865:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016869:	50                   	push   eax
c001686a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001686e:	50                   	push   eax
c001686f:	e8 21 ea fe ff       	call   c0005295 <f_mkfs>
c0016874:	83 c4 10             	add    esp,0x10
c0016877:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001687b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016880:	75 0a                	jne    c001688c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0016882:	b8 00 00 00 00       	mov    eax,0x0
c0016887:	eb 1b                	jmp    c00168a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016889:	8d 76 00             	lea    esi,[esi+0x0]
c001688c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016891:	75 09                	jne    c001689c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0016893:	b8 09 00 00 00       	mov    eax,0x9
c0016898:	eb 0a                	jmp    c00168a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001689a:	66 90                	xchg   ax,ax
c001689c:	b8 01 00 00 00       	mov    eax,0x1
c00168a1:	8d 76 00             	lea    esi,[esi+0x0]
c00168a4:	83 c4 2c             	add    esp,0x2c
c00168a7:	c3                   	ret    

c00168a8 <FAT::tryMount(LogicalDisk*, int)>:
c00168a8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00168ae:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c00168b3:	83 f8 14             	cmp    eax,0x14
c00168b6:	75 18                	jne    c00168d0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00168b8:	83 ec 0c             	sub    esp,0xc
c00168bb:	68 ec f7 01 c0       	push   0xc001f7ec
c00168c0:	e8 52 9a ff ff       	call   c0010317 <KePanic(char const*)>
c00168c5:	83 c4 10             	add    esp,0x10
c00168c8:	b0 00                	mov    al,0x0
c00168ca:	e9 e9 01 00 00       	jmp    c0016ab8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00168cf:	90                   	nop
c00168d0:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00168d7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00168dd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00168e3:	3d 00 02 00 00       	cmp    eax,0x200
c00168e8:	74 0a                	je     c00168f4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00168ea:	b0 00                	mov    al,0x0
c00168ec:	e9 c7 01 00 00       	jmp    c0016ab8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00168f1:	8d 76 00             	lea    esi,[esi+0x0]
c00168f4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00168fc:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016903:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c001690a:	83 f8 ff             	cmp    eax,0xffffffff
c001690d:	74 09                	je     c0016918 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001690f:	b0 01                	mov    al,0x1
c0016911:	e9 a2 01 00 00       	jmp    c0016ab8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016916:	66 90                	xchg   ax,ax
c0016918:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016922:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001692a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016931:	88 c2                	mov    dl,al
c0016933:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016938:	01 d0                	add    eax,edx
c001693a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016941:	8b 15 20 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026220
c0016947:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001694e:	89 14 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],edx
c0016955:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c001695a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016961:	89 14 85 c0 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d40],edx
c0016968:	83 ec 0c             	sub    esp,0xc
c001696b:	68 34 02 00 00       	push   0x234
c0016970:	e8 00 0f ff ff       	call   c0007875 <malloc>
c0016975:	83 c4 10             	add    esp,0x10
c0016978:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001697f:	83 ec 04             	sub    esp,0x4
c0016982:	6a 00                	push   0x0
c0016984:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001698b:	50                   	push   eax
c001698c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016993:	e8 23 d1 fe ff       	call   c0003abb <f_mount>
c0016998:	83 c4 10             	add    esp,0x10
c001699b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00169a2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00169aa:	74 1c                	je     c00169c8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00169ac:	83 ec 0c             	sub    esp,0xc
c00169af:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00169b6:	e8 da 0e ff ff       	call   c0007895 <rfree>
c00169bb:	83 c4 10             	add    esp,0x10
c00169be:	b0 00                	mov    al,0x0
c00169c0:	e9 f3 00 00 00       	jmp    c0016ab8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169c5:	8d 76 00             	lea    esi,[esi+0x0]
c00169c8:	83 ec 04             	sub    esp,0x4
c00169cb:	68 00 01 00 00       	push   0x100
c00169d0:	6a 00                	push   0x0
c00169d2:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00169d9:	50                   	push   eax
c00169da:	e8 f1 9a fe ff       	call   c00004d0 <memset>
c00169df:	83 c4 10             	add    esp,0x10
c00169e2:	83 ec 08             	sub    esp,0x8
c00169e5:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00169ec:	50                   	push   eax
c00169ed:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00169f4:	50                   	push   eax
c00169f5:	e8 c6 9d fe ff       	call   c00007c0 <strcat>
c00169fa:	83 c4 10             	add    esp,0x10
c00169fd:	83 ec 08             	sub    esp,0x8
c0016a00:	68 fa f7 01 c0       	push   0xc001f7fa
c0016a05:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016a0c:	50                   	push   eax
c0016a0d:	e8 ae 9d fe ff       	call   c00007c0 <strcat>
c0016a12:	83 c4 10             	add    esp,0x10
c0016a15:	83 ec 04             	sub    esp,0x4
c0016a18:	6a 01                	push   0x1
c0016a1a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016a21:	50                   	push   eax
c0016a22:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016a26:	50                   	push   eax
c0016a27:	e8 f1 d0 fe ff       	call   c0003b1d <f_open>
c0016a2c:	83 c4 10             	add    esp,0x10
c0016a2f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016a36:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016a3d:	85 c0                	test   eax,eax
c0016a3f:	74 0b                	je     c0016a4c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016a41:	78 31                	js     c0016a74 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016a43:	83 e8 04             	sub    eax,0x4
c0016a46:	83 f8 01             	cmp    eax,0x1
c0016a49:	77 29                	ja     c0016a74 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016a4b:	90                   	nop
c0016a4c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016a54:	83 ec 0c             	sub    esp,0xc
c0016a57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016a5b:	50                   	push   eax
c0016a5c:	e8 6f d8 fe ff       	call   c00042d0 <f_close>
c0016a61:	83 c4 10             	add    esp,0x10
c0016a64:	90                   	nop
c0016a65:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016a6d:	74 41                	je     c0016ab0 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016a6f:	eb 33                	jmp    c0016aa4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016a71:	8d 76 00             	lea    esi,[esi+0x0]
c0016a74:	83 ec 0c             	sub    esp,0xc
c0016a77:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a7e:	e8 12 0e ff ff       	call   c0007895 <rfree>
c0016a83:	83 c4 10             	add    esp,0x10
c0016a86:	83 ec 04             	sub    esp,0x4
c0016a89:	6a 00                	push   0x0
c0016a8b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a92:	50                   	push   eax
c0016a93:	6a 00                	push   0x0
c0016a95:	e8 21 d0 fe ff       	call   c0003abb <f_mount>
c0016a9a:	83 c4 10             	add    esp,0x10
c0016a9d:	b0 00                	mov    al,0x0
c0016a9f:	eb 17                	jmp    c0016ab8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0016aa4:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016aa9:	40                   	inc    eax
c0016aaa:	a3 20 62 02 c0       	mov    ds:0xc0026220,eax
c0016aaf:	90                   	nop
c0016ab0:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016ab7:	90                   	nop
c0016ab8:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016abe:	c3                   	ret    
c0016abf:	90                   	nop

c0016ac0 <FAT::allocateSwapfile(char const*, int)>:
c0016ac0:	55                   	push   ebp
c0016ac1:	57                   	push   edi
c0016ac2:	56                   	push   esi
c0016ac3:	53                   	push   ebx
c0016ac4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016aca:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016ad5:	83 ec 0c             	sub    esp,0xc
c0016ad8:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016adf:	e8 91 0d ff ff       	call   c0007875 <malloc>
c0016ae4:	83 c4 10             	add    esp,0x10
c0016ae7:	89 c7                	mov    edi,eax
c0016ae9:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0016aee:	83 ec 04             	sub    esp,0x4
c0016af1:	50                   	push   eax
c0016af2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016af9:	57                   	push   edi
c0016afa:	e8 85 40 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0016aff:	83 c4 10             	add    esp,0x10
c0016b02:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016b09:	83 ec 04             	sub    esp,0x4
c0016b0c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016b10:	50                   	push   eax
c0016b11:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016b15:	50                   	push   eax
c0016b16:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b1d:	e8 ce 43 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0016b22:	83 c4 10             	add    esp,0x10
c0016b25:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016b2c:	c1 e0 14             	shl    eax,0x14
c0016b2f:	89 c7                	mov    edi,eax
c0016b31:	89 c5                	mov    ebp,eax
c0016b33:	c1 fd 1f             	sar    ebp,0x1f
c0016b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b3e:	89 f9                	mov    ecx,edi
c0016b40:	31 c1                	xor    ecx,eax
c0016b42:	89 cb                	mov    ebx,ecx
c0016b44:	89 e9                	mov    ecx,ebp
c0016b46:	31 d1                	xor    ecx,edx
c0016b48:	89 ce                	mov    esi,ecx
c0016b4a:	89 f0                	mov    eax,esi
c0016b4c:	09 d8                	or     eax,ebx
c0016b4e:	0f 84 9c 00 00 00    	je     c0016bf0 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016b54:	83 ec 0c             	sub    esp,0xc
c0016b57:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b5e:	e8 59 42 ff ff       	call   c000adbc <File::unlink()>
c0016b63:	83 c4 10             	add    esp,0x10
c0016b66:	83 ec 08             	sub    esp,0x8
c0016b69:	6a 12                	push   0x12
c0016b6b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b72:	e8 cd 40 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c0016b77:	83 c4 10             	add    esp,0x10
c0016b7a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b81:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016b87:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016b8e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016b95:	c1 e0 14             	shl    eax,0x14
c0016b98:	83 ec 04             	sub    esp,0x4
c0016b9b:	6a 01                	push   0x1
c0016b9d:	50                   	push   eax
c0016b9e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016ba5:	e8 8b e5 fe ff       	call   c0005135 <f_expand>
c0016baa:	83 c4 10             	add    esp,0x10
c0016bad:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bb6:	83 c0 10             	add    eax,0x10
c0016bb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bbb:	83 ec 0c             	sub    esp,0xc
c0016bbe:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016bc2:	52                   	push   edx
c0016bc3:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016bc7:	52                   	push   edx
c0016bc8:	6a 00                	push   0x0
c0016bca:	68 00 04 00 00       	push   0x400
c0016bcf:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016bd6:	ff d0                	call   eax
c0016bd8:	83 c4 20             	add    esp,0x20
c0016bdb:	83 ec 0c             	sub    esp,0xc
c0016bde:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016be5:	e8 b8 40 ff ff       	call   c000aca2 <File::close()>
c0016bea:	83 c4 10             	add    esp,0x10
c0016bed:	8d 76 00             	lea    esi,[esi+0x0]
c0016bf0:	83 ec 08             	sub    esp,0x8
c0016bf3:	6a 01                	push   0x1
c0016bf5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bfc:	e8 43 40 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c0016c01:	83 c4 10             	add    esp,0x10
c0016c04:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c0d:	83 c0 0c             	add    eax,0xc
c0016c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c12:	83 ec 0c             	sub    esp,0xc
c0016c15:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016c19:	52                   	push   edx
c0016c1a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016c1e:	52                   	push   edx
c0016c1f:	6a 00                	push   0x0
c0016c21:	6a 04                	push   0x4
c0016c23:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016c2a:	ff d0                	call   eax
c0016c2c:	83 c4 20             	add    esp,0x20
c0016c2f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c36:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c3c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c43:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016c4a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016c4d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016c54:	83 ec 0c             	sub    esp,0xc
c0016c57:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c5e:	e8 3f 40 ff ff       	call   c000aca2 <File::close()>
c0016c63:	83 c4 10             	add    esp,0x10
c0016c66:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016c6d:	ba 00 00 00 00       	mov    edx,0x0
c0016c72:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016c78:	5b                   	pop    ebx
c0016c79:	5e                   	pop    esi
c0016c7a:	5f                   	pop    edi
c0016c7b:	5d                   	pop    ebp
c0016c7c:	c3                   	ret    
c0016c7d:	90                   	nop
c0016c7e:	66 90                	xchg   ax,ax

c0016c80 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016c80:	57                   	push   edi
c0016c81:	56                   	push   esi
c0016c82:	53                   	push   ebx
c0016c83:	81 ec 50 02 00 00    	sub    esp,0x250
c0016c89:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016c91:	74 0d                	je     c0016ca0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016c93:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016c9b:	75 0f                	jne    c0016cac <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0016ca0:	b8 04 00 00 00       	mov    eax,0x4
c0016ca5:	e9 36 01 00 00       	jmp    c0016de0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016caa:	66 90                	xchg   ax,ax
c0016cac:	83 ec 08             	sub    esp,0x8
c0016caf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016cb6:	50                   	push   eax
c0016cb7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016cbe:	e8 d0 d8 fe ff       	call   c0004593 <f_readdir>
c0016cc3:	83 c4 10             	add    esp,0x10
c0016cc6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016ccd:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016cd4:	83 ec 0c             	sub    esp,0xc
c0016cd7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016cde:	83 c0 16             	add    eax,0x16
c0016ce1:	50                   	push   eax
c0016ce2:	e8 59 98 fe ff       	call   c0000540 <strlen>
c0016ce7:	83 c4 10             	add    esp,0x10
c0016cea:	ba 00 00 00 00       	mov    edx,0x0
c0016cef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cf3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016cf7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016cfe:	25 ff 00 00 00       	and    eax,0xff
c0016d03:	83 e0 10             	and    eax,0x10
c0016d06:	74 08                	je     c0016d10 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016d08:	b8 02 00 00 00       	mov    eax,0x2
c0016d0d:	eb 09                	jmp    c0016d18 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016d0f:	90                   	nop
c0016d10:	b8 01 00 00 00       	mov    eax,0x1
c0016d15:	8d 76 00             	lea    esi,[esi+0x0]
c0016d18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d1c:	83 ec 08             	sub    esp,0x8
c0016d1f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016d26:	83 c0 16             	add    eax,0x16
c0016d29:	50                   	push   eax
c0016d2a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016d2e:	83 c0 10             	add    eax,0x10
c0016d31:	50                   	push   eax
c0016d32:	e8 c9 98 fe ff       	call   c0000600 <strcpy>
c0016d37:	83 c4 10             	add    esp,0x10
c0016d3a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016d41:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016d48:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d4c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016d53:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016d5a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016d61:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016d68:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016d6f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016d76:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016d7d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016d84:	89 c6                	mov    esi,eax
c0016d86:	89 d7                	mov    edi,edx
c0016d88:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d8a:	89 c8                	mov    eax,ecx
c0016d8c:	89 fa                	mov    edx,edi
c0016d8e:	89 f3                	mov    ebx,esi
c0016d90:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016d97:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016d9e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016da5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016dac:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016db2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016db9:	84 c0                	test   al,al
c0016dbb:	75 07                	jne    c0016dc4 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016dbd:	b8 07 00 00 00       	mov    eax,0x7
c0016dc2:	eb 1c                	jmp    c0016de0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016dc4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016dcb:	85 c0                	test   eax,eax
c0016dcd:	75 09                	jne    c0016dd8 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016dcf:	b8 00 00 00 00       	mov    eax,0x0
c0016dd4:	eb 0a                	jmp    c0016de0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016dd6:	66 90                	xchg   ax,ax
c0016dd8:	b8 01 00 00 00       	mov    eax,0x1
c0016ddd:	8d 76 00             	lea    esi,[esi+0x0]
c0016de0:	81 c4 50 02 00 00    	add    esp,0x250
c0016de6:	5b                   	pop    ebx
c0016de7:	5e                   	pop    esi
c0016de8:	5f                   	pop    edi
c0016de9:	c3                   	ret    
c0016dea:	66 90                	xchg   ax,ax

c0016dec <FAT::read(void*, unsigned long, void*, int*)>:
c0016dec:	83 ec 1c             	sub    esp,0x1c
c0016def:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016df4:	74 0a                	je     c0016e00 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016df6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016dfb:	75 0b                	jne    c0016e08 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0016e00:	b8 04 00 00 00       	mov    eax,0x4
c0016e05:	eb 41                	jmp    c0016e48 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016e07:	90                   	nop
c0016e08:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e0c:	50                   	push   eax
c0016e0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e15:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e19:	e8 ca cf fe ff       	call   c0003de8 <f_read>
c0016e1e:	83 c4 10             	add    esp,0x10
c0016e21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e29:	89 c2                	mov    edx,eax
c0016e2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e2f:	89 10                	mov    DWORD PTR [eax],edx
c0016e31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e35:	85 c0                	test   eax,eax
c0016e37:	75 07                	jne    c0016e40 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016e39:	b8 00 00 00 00       	mov    eax,0x0
c0016e3e:	eb 08                	jmp    c0016e48 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016e40:	b8 01 00 00 00       	mov    eax,0x1
c0016e45:	8d 76 00             	lea    esi,[esi+0x0]
c0016e48:	83 c4 1c             	add    esp,0x1c
c0016e4b:	c3                   	ret    

c0016e4c <FAT::write(void*, unsigned long, void*, int*)>:
c0016e4c:	83 ec 1c             	sub    esp,0x1c
c0016e4f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e54:	74 0a                	je     c0016e60 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016e56:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016e5b:	75 0b                	jne    c0016e68 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e60:	b8 04 00 00 00       	mov    eax,0x4
c0016e65:	eb 41                	jmp    c0016ea8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016e67:	90                   	nop
c0016e68:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e6c:	50                   	push   eax
c0016e6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e79:	e8 69 d1 fe ff       	call   c0003fe7 <f_write>
c0016e7e:	83 c4 10             	add    esp,0x10
c0016e81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e89:	89 c2                	mov    edx,eax
c0016e8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e8f:	89 10                	mov    DWORD PTR [eax],edx
c0016e91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e95:	85 c0                	test   eax,eax
c0016e97:	75 07                	jne    c0016ea0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016e99:	b8 00 00 00 00       	mov    eax,0x0
c0016e9e:	eb 08                	jmp    c0016ea8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016ea0:	b8 01 00 00 00       	mov    eax,0x1
c0016ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ea8:	83 c4 1c             	add    esp,0x1c
c0016eab:	c3                   	ret    

c0016eac <FAT::close(void*)>:
c0016eac:	83 ec 1c             	sub    esp,0x1c
c0016eaf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016eb4:	75 0a                	jne    c0016ec0 <FAT::close(void*)+0x14>
c0016eb6:	b8 04 00 00 00       	mov    eax,0x4
c0016ebb:	eb 3f                	jmp    c0016efc <FAT::close(void*)+0x50>
c0016ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ec0:	83 ec 0c             	sub    esp,0xc
c0016ec3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ec7:	e8 04 d4 fe ff       	call   c00042d0 <f_close>
c0016ecc:	83 c4 10             	add    esp,0x10
c0016ecf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ed3:	83 ec 0c             	sub    esp,0xc
c0016ed6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016eda:	e8 a6 09 ff ff       	call   c0007885 <free>
c0016edf:	83 c4 10             	add    esp,0x10
c0016ee2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ee6:	85 c0                	test   eax,eax
c0016ee8:	75 0a                	jne    c0016ef4 <FAT::close(void*)+0x48>
c0016eea:	b8 00 00 00 00       	mov    eax,0x0
c0016eef:	eb 0b                	jmp    c0016efc <FAT::close(void*)+0x50>
c0016ef1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ef4:	b8 01 00 00 00       	mov    eax,0x1
c0016ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0016efc:	83 c4 1c             	add    esp,0x1c
c0016eff:	c3                   	ret    

c0016f00 <FAT::closeDir(void*)>:
c0016f00:	83 ec 1c             	sub    esp,0x1c
c0016f03:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f08:	75 0a                	jne    c0016f14 <FAT::closeDir(void*)+0x14>
c0016f0a:	b8 04 00 00 00       	mov    eax,0x4
c0016f0f:	eb 3f                	jmp    c0016f50 <FAT::closeDir(void*)+0x50>
c0016f11:	8d 76 00             	lea    esi,[esi+0x0]
c0016f14:	83 ec 0c             	sub    esp,0xc
c0016f17:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f1b:	e8 51 d6 fe ff       	call   c0004571 <f_closedir>
c0016f20:	83 c4 10             	add    esp,0x10
c0016f23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f27:	83 ec 0c             	sub    esp,0xc
c0016f2a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f2e:	e8 52 09 ff ff       	call   c0007885 <free>
c0016f33:	83 c4 10             	add    esp,0x10
c0016f36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f3a:	85 c0                	test   eax,eax
c0016f3c:	75 0a                	jne    c0016f48 <FAT::closeDir(void*)+0x48>
c0016f3e:	b8 00 00 00 00       	mov    eax,0x0
c0016f43:	eb 0b                	jmp    c0016f50 <FAT::closeDir(void*)+0x50>
c0016f45:	8d 76 00             	lea    esi,[esi+0x0]
c0016f48:	b8 01 00 00 00       	mov    eax,0x1
c0016f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f50:	83 c4 1c             	add    esp,0x1c
c0016f53:	c3                   	ret    

c0016f54 <FAT::seek(void*, unsigned long long)>:
c0016f54:	83 ec 2c             	sub    esp,0x2c
c0016f57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f5f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f67:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016f6c:	75 0a                	jne    c0016f78 <FAT::seek(void*, unsigned long long)+0x24>
c0016f6e:	b8 04 00 00 00       	mov    eax,0x4
c0016f73:	eb 33                	jmp    c0016fa8 <FAT::seek(void*, unsigned long long)+0x54>
c0016f75:	8d 76 00             	lea    esi,[esi+0x0]
c0016f78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f7c:	83 ec 08             	sub    esp,0x8
c0016f7f:	50                   	push   eax
c0016f80:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f84:	e8 76 d3 fe ff       	call   c00042ff <f_lseek>
c0016f89:	83 c4 10             	add    esp,0x10
c0016f8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016f94:	85 c0                	test   eax,eax
c0016f96:	75 08                	jne    c0016fa0 <FAT::seek(void*, unsigned long long)+0x4c>
c0016f98:	b8 00 00 00 00       	mov    eax,0x0
c0016f9d:	eb 09                	jmp    c0016fa8 <FAT::seek(void*, unsigned long long)+0x54>
c0016f9f:	90                   	nop
c0016fa0:	b8 01 00 00 00       	mov    eax,0x1
c0016fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0016fa8:	83 c4 2c             	add    esp,0x2c
c0016fab:	c3                   	ret    

c0016fac <fatWrapperReadDisk>:
c0016fac:	53                   	push   ebx
c0016fad:	83 ec 18             	sub    esp,0x18
c0016fb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016fb8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016fbc:	25 ff 00 00 00       	and    eax,0xff
c0016fc1:	8b 0c 85 20 54 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdabe0]
c0016fc8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016fcc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016fd0:	ba 00 00 00 00       	mov    edx,0x0
c0016fd5:	83 ec 0c             	sub    esp,0xc
c0016fd8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fdc:	53                   	push   ebx
c0016fdd:	52                   	push   edx
c0016fde:	50                   	push   eax
c0016fdf:	51                   	push   ecx
c0016fe0:	e8 3f 5d ff ff       	call   c000cd24 <LogicalDisk::read(unsigned long long, int, void*)>
c0016fe5:	83 c4 20             	add    esp,0x20
c0016fe8:	83 c4 18             	add    esp,0x18
c0016feb:	5b                   	pop    ebx
c0016fec:	c3                   	ret    
c0016fed:	8d 76 00             	lea    esi,[esi+0x0]

c0016ff0 <fatWrapperWriteDisk>:
c0016ff0:	53                   	push   ebx
c0016ff1:	83 ec 18             	sub    esp,0x18
c0016ff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016ffc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017000:	25 ff 00 00 00       	and    eax,0xff
c0017005:	8b 0c 85 20 54 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdabe0]
c001700c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017010:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017014:	ba 00 00 00 00       	mov    edx,0x0
c0017019:	83 ec 0c             	sub    esp,0xc
c001701c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017020:	53                   	push   ebx
c0017021:	52                   	push   edx
c0017022:	50                   	push   eax
c0017023:	51                   	push   ecx
c0017024:	e8 67 5d ff ff       	call   c000cd90 <LogicalDisk::write(unsigned long long, int, void*)>
c0017029:	83 c4 20             	add    esp,0x20
c001702c:	83 c4 18             	add    esp,0x18
c001702f:	5b                   	pop    ebx
c0017030:	c3                   	ret    
c0017031:	8d 76 00             	lea    esi,[esi+0x0]

c0017034 <fatWrapperIoctl>:
c0017034:	53                   	push   ebx
c0017035:	83 ec 28             	sub    esp,0x28
c0017038:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001703c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017040:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017044:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017048:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001704d:	75 35                	jne    c0017084 <fatWrapperIoctl+0x50>
c001704f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017053:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017057:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001705b:	25 ff 00 00 00       	and    eax,0xff
c0017060:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c0017067:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001706d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017073:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017077:	66 89 02             	mov    WORD PTR [edx],ax
c001707a:	b8 00 00 00 00       	mov    eax,0x0
c001707f:	e9 c4 00 00 00       	jmp    c0017148 <fatWrapperIoctl+0x114>
c0017084:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017089:	75 75                	jne    c0017100 <fatWrapperIoctl+0xcc>
c001708b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001708f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017093:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017097:	25 ff 00 00 00       	and    eax,0xff
c001709c:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c00170a3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00170a9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00170af:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00170b5:	89 c8                	mov    eax,ecx
c00170b7:	89 da                	mov    edx,ebx
c00170b9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00170bd:	c1 e0 0a             	shl    eax,0xa
c00170c0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00170c4:	81 e1 ff 00 00 00    	and    ecx,0xff
c00170ca:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c00170d1:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00170d7:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00170dd:	89 cb                	mov    ebx,ecx
c00170df:	c1 fb 1f             	sar    ebx,0x1f
c00170e2:	53                   	push   ebx
c00170e3:	51                   	push   ecx
c00170e4:	52                   	push   edx
c00170e5:	50                   	push   eax
c00170e6:	e8 85 58 00 00       	call   c001c970 <__udivdi3>
c00170eb:	83 c4 10             	add    esp,0x10
c00170ee:	89 c2                	mov    edx,eax
c00170f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00170f4:	89 10                	mov    DWORD PTR [eax],edx
c00170f6:	b8 00 00 00 00       	mov    eax,0x0
c00170fb:	eb 4b                	jmp    c0017148 <fatWrapperIoctl+0x114>
c00170fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017100:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0017105:	75 09                	jne    c0017110 <fatWrapperIoctl+0xdc>
c0017107:	b8 00 00 00 00       	mov    eax,0x0
c001710c:	eb 3a                	jmp    c0017148 <fatWrapperIoctl+0x114>
c001710e:	66 90                	xchg   ax,ax
c0017110:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0017115:	75 19                	jne    c0017130 <fatWrapperIoctl+0xfc>
c0017117:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001711b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001711f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017123:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017129:	b8 00 00 00 00       	mov    eax,0x0
c001712e:	eb 18                	jmp    c0017148 <fatWrapperIoctl+0x114>
c0017130:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0017135:	75 09                	jne    c0017140 <fatWrapperIoctl+0x10c>
c0017137:	b8 00 00 00 00       	mov    eax,0x0
c001713c:	eb 0a                	jmp    c0017148 <fatWrapperIoctl+0x114>
c001713e:	66 90                	xchg   ax,ax
c0017140:	b8 04 00 00 00       	mov    eax,0x4
c0017145:	8d 76 00             	lea    esi,[esi+0x0]
c0017148:	83 c4 28             	add    esp,0x28
c001714b:	5b                   	pop    ebx
c001714c:	c3                   	ret    
c001714d:	90                   	nop
c001714e:	66 90                	xchg   ax,ax

c0017150 <FAT::FAT()>:
c0017150:	83 ec 1c             	sub    esp,0x1c
c0017153:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017157:	83 ec 0c             	sub    esp,0xc
c001715a:	50                   	push   eax
c001715b:	e8 d0 37 ff ff       	call   c000a930 <Filesystem::Filesystem()>
c0017160:	83 c4 10             	add    esp,0x10
c0017163:	ba 10 f8 01 c0       	mov    edx,0xc001f810
c0017168:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001716c:	89 10                	mov    DWORD PTR [eax],edx
c001716e:	c7 05 20 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026220,0x0
c0017178:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017180:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0017185:	7f 15                	jg     c001719c <FAT::FAT()+0x4c>
c0017187:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001718b:	c7 04 85 40 62 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd9dc0],0xffffffff
c0017196:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001719a:	eb e4                	jmp    c0017180 <FAT::FAT()+0x30>
c001719c:	90                   	nop
c001719d:	83 c4 1c             	add    esp,0x1c
c00171a0:	c3                   	ret    
c00171a1:	90                   	nop
c00171a2:	66 90                	xchg   ax,ax

c00171a4 <FAT::fixFilepath(char*)>:
c00171a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171a8:	8a 00                	mov    al,BYTE PTR [eax]
c00171aa:	3c 40                	cmp    al,0x40
c00171ac:	7e 2e                	jle    c00171dc <FAT::fixFilepath(char*)+0x38>
c00171ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171b2:	8a 00                	mov    al,BYTE PTR [eax]
c00171b4:	83 e8 41             	sub    eax,0x41
c00171b7:	88 c2                	mov    dl,al
c00171b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171bd:	88 10                	mov    BYTE PTR [eax],dl
c00171bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171c3:	8a 00                	mov    al,BYTE PTR [eax]
c00171c5:	0f be c0             	movsx  eax,al
c00171c8:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c00171cf:	83 c0 30             	add    eax,0x30
c00171d2:	88 c2                	mov    dl,al
c00171d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171d8:	88 10                	mov    BYTE PTR [eax],dl
c00171da:	66 90                	xchg   ax,ax
c00171dc:	90                   	nop
c00171dd:	c3                   	ret    
c00171de:	66 90                	xchg   ax,ax

c00171e0 <FAT::open(char const*, void**, FileOpenMode)>:
c00171e0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00171e6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00171ee:	74 0c                	je     c00171fc <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00171f0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00171f8:	75 0e                	jne    c0017208 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00171fa:	66 90                	xchg   ax,ax
c00171fc:	b8 04 00 00 00       	mov    eax,0x4
c0017201:	e9 0a 01 00 00       	jmp    c0017310 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017206:	66 90                	xchg   ax,ax
c0017208:	83 ec 08             	sub    esp,0x8
c001720b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017212:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017216:	50                   	push   eax
c0017217:	e8 e4 93 fe ff       	call   c0000600 <strcpy>
c001721c:	83 c4 10             	add    esp,0x10
c001721f:	83 ec 08             	sub    esp,0x8
c0017222:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017226:	50                   	push   eax
c0017227:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001722e:	e8 71 ff ff ff       	call   c00171a4 <FAT::fixFilepath(char*)>
c0017233:	83 c4 10             	add    esp,0x10
c0017236:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001723e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017245:	83 e0 01             	and    eax,0x1
c0017248:	74 0a                	je     c0017254 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001724a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0017252:	66 90                	xchg   ax,ax
c0017254:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001725b:	83 e0 04             	and    eax,0x4
c001725e:	74 10                	je     c0017270 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017260:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017268:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017270:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017277:	83 e0 02             	and    eax,0x2
c001727a:	74 08                	je     c0017284 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001727c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017284:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001728b:	83 e0 08             	and    eax,0x8
c001728e:	74 08                	je     c0017298 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017290:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0017298:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001729f:	83 e0 10             	and    eax,0x10
c00172a2:	74 08                	je     c00172ac <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00172a4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00172ac:	83 ec 0c             	sub    esp,0xc
c00172af:	68 28 02 00 00       	push   0x228
c00172b4:	e8 bc 05 ff ff       	call   c0007875 <malloc>
c00172b9:	83 c4 10             	add    esp,0x10
c00172bc:	89 c2                	mov    edx,eax
c00172be:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00172c5:	89 10                	mov    DWORD PTR [eax],edx
c00172c7:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00172ce:	31 d2                	xor    edx,edx
c00172d0:	88 c2                	mov    dl,al
c00172d2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00172d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00172db:	83 ec 04             	sub    esp,0x4
c00172de:	52                   	push   edx
c00172df:	8d 54 24 10          	lea    edx,[esp+0x10]
c00172e3:	52                   	push   edx
c00172e4:	50                   	push   eax
c00172e5:	e8 33 c8 fe ff       	call   c0003b1d <f_open>
c00172ea:	83 c4 10             	add    esp,0x10
c00172ed:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00172f4:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00172fc:	74 0a                	je     c0017308 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00172fe:	b8 01 00 00 00       	mov    eax,0x1
c0017303:	eb 0b                	jmp    c0017310 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017305:	8d 76 00             	lea    esi,[esi+0x0]
c0017308:	b8 00 00 00 00       	mov    eax,0x0
c001730d:	8d 76 00             	lea    esi,[esi+0x0]
c0017310:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017316:	c3                   	ret    
c0017317:	90                   	nop

c0017318 <FAT::openDir(char const*, void**)>:
c0017318:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001731e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017326:	74 0c                	je     c0017334 <FAT::openDir(char const*, void**)+0x1c>
c0017328:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017330:	75 0e                	jne    c0017340 <FAT::openDir(char const*, void**)+0x28>
c0017332:	66 90                	xchg   ax,ax
c0017334:	b8 04 00 00 00       	mov    eax,0x4
c0017339:	e9 82 00 00 00       	jmp    c00173c0 <FAT::openDir(char const*, void**)+0xa8>
c001733e:	66 90                	xchg   ax,ax
c0017340:	83 ec 08             	sub    esp,0x8
c0017343:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001734a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001734e:	50                   	push   eax
c001734f:	e8 ac 92 fe ff       	call   c0000600 <strcpy>
c0017354:	83 c4 10             	add    esp,0x10
c0017357:	83 ec 08             	sub    esp,0x8
c001735a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001735e:	50                   	push   eax
c001735f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017366:	e8 39 fe ff ff       	call   c00171a4 <FAT::fixFilepath(char*)>
c001736b:	83 c4 10             	add    esp,0x10
c001736e:	83 ec 0c             	sub    esp,0xc
c0017371:	6a 30                	push   0x30
c0017373:	e8 fd 04 ff ff       	call   c0007875 <malloc>
c0017378:	83 c4 10             	add    esp,0x10
c001737b:	89 c2                	mov    edx,eax
c001737d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017384:	89 10                	mov    DWORD PTR [eax],edx
c0017386:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001738d:	8b 00                	mov    eax,DWORD PTR [eax]
c001738f:	83 ec 08             	sub    esp,0x8
c0017392:	8d 54 24 14          	lea    edx,[esp+0x14]
c0017396:	52                   	push   edx
c0017397:	50                   	push   eax
c0017398:	e8 09 d1 fe ff       	call   c00044a6 <f_opendir>
c001739d:	83 c4 10             	add    esp,0x10
c00173a0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00173a7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00173af:	74 07                	je     c00173b8 <FAT::openDir(char const*, void**)+0xa0>
c00173b1:	b8 01 00 00 00       	mov    eax,0x1
c00173b6:	eb 08                	jmp    c00173c0 <FAT::openDir(char const*, void**)+0xa8>
c00173b8:	b8 00 00 00 00       	mov    eax,0x0
c00173bd:	8d 76 00             	lea    esi,[esi+0x0]
c00173c0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00173c6:	c3                   	ret    
c00173c7:	90                   	nop

c00173c8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00173c8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00173ce:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00173d6:	75 0c                	jne    c00173e4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00173d8:	b8 04 00 00 00       	mov    eax,0x4
c00173dd:	e9 d6 00 00 00       	jmp    c00174b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173e2:	66 90                	xchg   ax,ax
c00173e4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00173ec:	75 0a                	jne    c00173f8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00173ee:	b8 04 00 00 00       	mov    eax,0x4
c00173f3:	e9 c0 00 00 00       	jmp    c00174b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173f8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0017400:	75 0a                	jne    c001740c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0017402:	b8 04 00 00 00       	mov    eax,0x4
c0017407:	e9 ac 00 00 00       	jmp    c00174b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001740c:	83 ec 08             	sub    esp,0x8
c001740f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017416:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001741d:	50                   	push   eax
c001741e:	e8 dd 91 fe ff       	call   c0000600 <strcpy>
c0017423:	83 c4 10             	add    esp,0x10
c0017426:	83 ec 08             	sub    esp,0x8
c0017429:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017430:	50                   	push   eax
c0017431:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017438:	e8 67 fd ff ff       	call   c00171a4 <FAT::fixFilepath(char*)>
c001743d:	83 c4 10             	add    esp,0x10
c0017440:	83 ec 08             	sub    esp,0x8
c0017443:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017447:	50                   	push   eax
c0017448:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001744f:	50                   	push   eax
c0017450:	e8 d0 d1 fe ff       	call   c0004625 <f_stat>
c0017455:	83 c4 10             	add    esp,0x10
c0017458:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001745f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017466:	85 c0                	test   eax,eax
c0017468:	74 0a                	je     c0017474 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001746a:	83 f8 04             	cmp    eax,0x4
c001746d:	74 39                	je     c00174a8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001746f:	eb 3f                	jmp    c00174b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017471:	8d 76 00             	lea    esi,[esi+0x0]
c0017474:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017478:	25 ff 00 00 00       	and    eax,0xff
c001747d:	83 e0 10             	and    eax,0x10
c0017480:	0f 95 c2             	setne  dl
c0017483:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001748a:	88 10                	mov    BYTE PTR [eax],dl
c001748c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017490:	ba 00 00 00 00       	mov    edx,0x0
c0017495:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001749c:	89 01                	mov    DWORD PTR [ecx],eax
c001749e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00174a1:	b8 00 00 00 00       	mov    eax,0x0
c00174a6:	eb 10                	jmp    c00174b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174a8:	b8 02 00 00 00       	mov    eax,0x2
c00174ad:	eb 09                	jmp    c00174b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174af:	90                   	nop
c00174b0:	b8 01 00 00 00       	mov    eax,0x1
c00174b5:	8d 76 00             	lea    esi,[esi+0x0]
c00174b8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00174be:	c3                   	ret    
c00174bf:	90                   	nop

c00174c0 <FAT::unlink(char const*)>:
c00174c0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00174c6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00174ce:	75 08                	jne    c00174d8 <FAT::unlink(char const*)+0x18>
c00174d0:	b8 04 00 00 00       	mov    eax,0x4
c00174d5:	eb 61                	jmp    c0017538 <FAT::unlink(char const*)+0x78>
c00174d7:	90                   	nop
c00174d8:	83 ec 08             	sub    esp,0x8
c00174db:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00174e2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00174e6:	50                   	push   eax
c00174e7:	e8 14 91 fe ff       	call   c0000600 <strcpy>
c00174ec:	83 c4 10             	add    esp,0x10
c00174ef:	83 ec 08             	sub    esp,0x8
c00174f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00174f6:	50                   	push   eax
c00174f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00174fe:	e8 a1 fc ff ff       	call   c00171a4 <FAT::fixFilepath(char*)>
c0017503:	83 c4 10             	add    esp,0x10
c0017506:	83 ec 0c             	sub    esp,0xc
c0017509:	8d 44 24 18          	lea    eax,[esp+0x18]
c001750d:	50                   	push   eax
c001750e:	e8 77 d3 fe ff       	call   c000488a <f_unlink>
c0017513:	83 c4 10             	add    esp,0x10
c0017516:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001751d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017524:	85 c0                	test   eax,eax
c0017526:	75 08                	jne    c0017530 <FAT::unlink(char const*)+0x70>
c0017528:	b8 00 00 00 00       	mov    eax,0x0
c001752d:	eb 09                	jmp    c0017538 <FAT::unlink(char const*)+0x78>
c001752f:	90                   	nop
c0017530:	b8 01 00 00 00       	mov    eax,0x1
c0017535:	8d 76 00             	lea    esi,[esi+0x0]
c0017538:	81 c4 1c 01 00 00    	add    esp,0x11c
c001753e:	c3                   	ret    
c001753f:	90                   	nop

c0017540 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017540:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017546:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001754d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0017554:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017558:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001755c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0017564:	75 0a                	jne    c0017570 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0017566:	b8 04 00 00 00       	mov    eax,0x4
c001756b:	e9 54 01 00 00       	jmp    c00176c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017570:	83 ec 08             	sub    esp,0x8
c0017573:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001757a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001757e:	50                   	push   eax
c001757f:	e8 7c 90 fe ff       	call   c0000600 <strcpy>
c0017584:	83 c4 10             	add    esp,0x10
c0017587:	83 ec 08             	sub    esp,0x8
c001758a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001758e:	50                   	push   eax
c001758f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017596:	e8 09 fc ff ff       	call   c00171a4 <FAT::fixFilepath(char*)>
c001759b:	83 c4 10             	add    esp,0x10
c001759e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00175a6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00175ae:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00175b2:	25 ff 00 00 00       	and    eax,0xff
c00175b7:	83 e0 01             	and    eax,0x1
c00175ba:	74 08                	je     c00175c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00175bc:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00175c4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00175c8:	25 ff 00 00 00       	and    eax,0xff
c00175cd:	83 e0 02             	and    eax,0x2
c00175d0:	74 0a                	je     c00175dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00175d2:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00175da:	66 90                	xchg   ax,ax
c00175dc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00175e0:	25 ff 00 00 00       	and    eax,0xff
c00175e5:	83 e0 04             	and    eax,0x4
c00175e8:	74 0a                	je     c00175f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00175ea:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00175f2:	66 90                	xchg   ax,ax
c00175f4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00175f8:	25 ff 00 00 00       	and    eax,0xff
c00175fd:	83 e0 08             	and    eax,0x8
c0017600:	74 0a                	je     c001760c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c0017602:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001760a:	66 90                	xchg   ax,ax
c001760c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017610:	25 ff 00 00 00       	and    eax,0xff
c0017615:	83 e0 01             	and    eax,0x1
c0017618:	74 0a                	je     c0017624 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001761a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0017622:	66 90                	xchg   ax,ax
c0017624:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017628:	25 ff 00 00 00       	and    eax,0xff
c001762d:	83 e0 02             	and    eax,0x2
c0017630:	74 0a                	je     c001763c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0017632:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001763a:	66 90                	xchg   ax,ax
c001763c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017640:	25 ff 00 00 00       	and    eax,0xff
c0017645:	83 e0 04             	and    eax,0x4
c0017648:	74 0a                	je     c0017654 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c001764a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0017652:	66 90                	xchg   ax,ax
c0017654:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017658:	25 ff 00 00 00       	and    eax,0xff
c001765d:	83 e0 08             	and    eax,0x8
c0017660:	74 0a                	je     c001766c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0017662:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001766a:	66 90                	xchg   ax,ax
c001766c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017673:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001767a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017681:	31 d2                	xor    edx,edx
c0017683:	88 c2                	mov    dl,al
c0017685:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001768c:	25 ff 00 00 00       	and    eax,0xff
c0017691:	83 ec 04             	sub    esp,0x4
c0017694:	52                   	push   edx
c0017695:	50                   	push   eax
c0017696:	8d 44 24 24          	lea    eax,[esp+0x24]
c001769a:	50                   	push   eax
c001769b:	e8 5d d6 fe ff       	call   c0004cfd <f_chmod>
c00176a0:	83 c4 10             	add    esp,0x10
c00176a3:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00176aa:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00176b1:	85 c0                	test   eax,eax
c00176b3:	75 07                	jne    c00176bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00176b5:	b8 00 00 00 00       	mov    eax,0x0
c00176ba:	eb 08                	jmp    c00176c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00176bc:	b8 01 00 00 00       	mov    eax,0x1
c00176c1:	8d 76 00             	lea    esi,[esi+0x0]
c00176c4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00176ca:	c3                   	ret    
c00176cb:	90                   	nop

c00176cc <FAT::rename(char const*, char const*)>:
c00176cc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00176d2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00176da:	74 0c                	je     c00176e8 <FAT::rename(char const*, char const*)+0x1c>
c00176dc:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00176e4:	75 0e                	jne    c00176f4 <FAT::rename(char const*, char const*)+0x28>
c00176e6:	66 90                	xchg   ax,ax
c00176e8:	b8 04 00 00 00       	mov    eax,0x4
c00176ed:	e9 9e 00 00 00       	jmp    c0017790 <FAT::rename(char const*, char const*)+0xc4>
c00176f2:	66 90                	xchg   ax,ax
c00176f4:	83 ec 08             	sub    esp,0x8
c00176f7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00176fe:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017705:	50                   	push   eax
c0017706:	e8 f5 8e fe ff       	call   c0000600 <strcpy>
c001770b:	83 c4 10             	add    esp,0x10
c001770e:	83 ec 08             	sub    esp,0x8
c0017711:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017718:	50                   	push   eax
c0017719:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017720:	e8 7f fa ff ff       	call   c00171a4 <FAT::fixFilepath(char*)>
c0017725:	83 c4 10             	add    esp,0x10
c0017728:	83 ec 08             	sub    esp,0x8
c001772b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0017732:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017736:	50                   	push   eax
c0017737:	e8 c4 8e fe ff       	call   c0000600 <strcpy>
c001773c:	83 c4 10             	add    esp,0x10
c001773f:	83 ec 08             	sub    esp,0x8
c0017742:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017746:	50                   	push   eax
c0017747:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001774e:	e8 51 fa ff ff       	call   c00171a4 <FAT::fixFilepath(char*)>
c0017753:	83 c4 10             	add    esp,0x10
c0017756:	83 ec 08             	sub    esp,0x8
c0017759:	8d 44 24 14          	lea    eax,[esp+0x14]
c001775d:	50                   	push   eax
c001775e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017765:	50                   	push   eax
c0017766:	e8 dc d3 fe ff       	call   c0004b47 <f_rename>
c001776b:	83 c4 10             	add    esp,0x10
c001776e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017775:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001777c:	85 c0                	test   eax,eax
c001777e:	75 08                	jne    c0017788 <FAT::rename(char const*, char const*)+0xbc>
c0017780:	b8 00 00 00 00       	mov    eax,0x0
c0017785:	eb 09                	jmp    c0017790 <FAT::rename(char const*, char const*)+0xc4>
c0017787:	90                   	nop
c0017788:	b8 01 00 00 00       	mov    eax,0x1
c001778d:	8d 76 00             	lea    esi,[esi+0x0]
c0017790:	81 c4 1c 02 00 00    	add    esp,0x21c
c0017796:	c3                   	ret    
c0017797:	90                   	nop

c0017798 <FAT::mkdir(char const*)>:
c0017798:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001779e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00177a6:	75 08                	jne    c00177b0 <FAT::mkdir(char const*)+0x18>
c00177a8:	b8 04 00 00 00       	mov    eax,0x4
c00177ad:	eb 61                	jmp    c0017810 <FAT::mkdir(char const*)+0x78>
c00177af:	90                   	nop
c00177b0:	83 ec 08             	sub    esp,0x8
c00177b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00177ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177be:	50                   	push   eax
c00177bf:	e8 3c 8e fe ff       	call   c0000600 <strcpy>
c00177c4:	83 c4 10             	add    esp,0x10
c00177c7:	83 ec 08             	sub    esp,0x8
c00177ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c00177ce:	50                   	push   eax
c00177cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00177d6:	e8 c9 f9 ff ff       	call   c00171a4 <FAT::fixFilepath(char*)>
c00177db:	83 c4 10             	add    esp,0x10
c00177de:	83 ec 0c             	sub    esp,0xc
c00177e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177e5:	50                   	push   eax
c00177e6:	e8 c1 d1 fe ff       	call   c00049ac <f_mkdir>
c00177eb:	83 c4 10             	add    esp,0x10
c00177ee:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00177f5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00177fc:	85 c0                	test   eax,eax
c00177fe:	75 08                	jne    c0017808 <FAT::mkdir(char const*)+0x70>
c0017800:	b8 00 00 00 00       	mov    eax,0x0
c0017805:	eb 09                	jmp    c0017810 <FAT::mkdir(char const*)+0x78>
c0017807:	90                   	nop
c0017808:	b8 01 00 00 00       	mov    eax,0x1
c001780d:	8d 76 00             	lea    esi,[esi+0x0]
c0017810:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017816:	c3                   	ret    
c0017817:	90                   	nop

c0017818 <FAT::exists(char const*)>:
c0017818:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001781e:	83 ec 08             	sub    esp,0x8
c0017821:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017828:	8d 44 24 10          	lea    eax,[esp+0x10]
c001782c:	50                   	push   eax
c001782d:	e8 ce 8d fe ff       	call   c0000600 <strcpy>
c0017832:	83 c4 10             	add    esp,0x10
c0017835:	83 ec 08             	sub    esp,0x8
c0017838:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001783c:	50                   	push   eax
c001783d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017844:	e8 5b f9 ff ff       	call   c00171a4 <FAT::fixFilepath(char*)>
c0017849:	83 c4 10             	add    esp,0x10
c001784c:	83 ec 08             	sub    esp,0x8
c001784f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0017856:	50                   	push   eax
c0017857:	8d 44 24 10          	lea    eax,[esp+0x10]
c001785b:	50                   	push   eax
c001785c:	e8 c4 cd fe ff       	call   c0004625 <f_stat>
c0017861:	83 c4 10             	add    esp,0x10
c0017864:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001786b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017872:	85 c0                	test   eax,eax
c0017874:	75 06                	jne    c001787c <FAT::exists(char const*)+0x64>
c0017876:	b0 01                	mov    al,0x1
c0017878:	eb 06                	jmp    c0017880 <FAT::exists(char const*)+0x68>
c001787a:	66 90                	xchg   ax,ax
c001787c:	b0 00                	mov    al,0x0
c001787e:	66 90                	xchg   ax,ax
c0017880:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017886:	c3                   	ret    
c0017887:	90                   	nop

c0017888 <isoReadDiscSectorHelper>:
c0017888:	83 ec 2c             	sub    esp,0x2c
c001788b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001788f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017893:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017898:	83 e8 41             	sub    eax,0x41
c001789b:	8b 0c 85 20 54 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdabe0]
c00178a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178a6:	ba 00 00 00 00       	mov    edx,0x0
c00178ab:	83 ec 0c             	sub    esp,0xc
c00178ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00178b2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00178b6:	52                   	push   edx
c00178b7:	50                   	push   eax
c00178b8:	51                   	push   ecx
c00178b9:	e8 66 54 ff ff       	call   c000cd24 <LogicalDisk::read(unsigned long long, int, void*)>
c00178be:	83 c4 20             	add    esp,0x20
c00178c1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00178c5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00178ca:	74 0c                	je     c00178d8 <isoReadDiscSectorHelper+0x50>
c00178cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178d0:	c1 e0 0b             	shl    eax,0xb
c00178d3:	eb 0b                	jmp    c00178e0 <isoReadDiscSectorHelper+0x58>
c00178d5:	8d 76 00             	lea    esi,[esi+0x0]
c00178d8:	b8 00 00 00 00       	mov    eax,0x0
c00178dd:	8d 76 00             	lea    esi,[esi+0x0]
c00178e0:	83 c4 2c             	add    esp,0x2c
c00178e3:	c3                   	ret    

c00178e4 <iso_kprintf>:
c00178e4:	83 ec 0c             	sub    esp,0xc
c00178e7:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c00178ec:	83 ec 08             	sub    esp,0x8
c00178ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178f3:	50                   	push   eax
c00178f4:	e8 f9 0e ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c00178f9:	83 c4 10             	add    esp,0x10
c00178fc:	90                   	nop
c00178fd:	83 c4 0c             	add    esp,0xc
c0017900:	c3                   	ret    
c0017901:	8d 76 00             	lea    esi,[esi+0x0]

c0017904 <iso_kprintfd>:
c0017904:	83 ec 0c             	sub    esp,0xc
c0017907:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c001790c:	83 ec 08             	sub    esp,0x8
c001790f:	68 70 f8 01 c0       	push   0xc001f870
c0017914:	50                   	push   eax
c0017915:	e8 d8 0e ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c001791a:	83 c4 10             	add    esp,0x10
c001791d:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c0017922:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017926:	83 ec 08             	sub    esp,0x8
c0017929:	52                   	push   edx
c001792a:	50                   	push   eax
c001792b:	e8 7c 0e ff ff       	call   c00087ac <VgaText::putx(unsigned int)>
c0017930:	83 c4 10             	add    esp,0x10
c0017933:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c0017938:	83 ec 08             	sub    esp,0x8
c001793b:	68 f1 f6 01 c0       	push   0xc001f6f1
c0017940:	50                   	push   eax
c0017941:	e8 ac 0e ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c0017946:	83 c4 10             	add    esp,0x10
c0017949:	90                   	nop
c001794a:	83 c4 0c             	add    esp,0xc
c001794d:	c3                   	ret    

c001794e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001794e:	b8 08 00 00 00       	mov    eax,0x8
c0017953:	c3                   	ret    

c0017954 <ISO9660::getName()>:
c0017954:	b8 73 f8 01 c0       	mov    eax,0xc001f873
c0017959:	c3                   	ret    

c001795a <ISO9660::closeDir(void*)>:
c001795a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001795e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017960:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0017963:	90                   	nop

c0017964 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0017964:	b8 01 00 00 00       	mov    eax,0x1
c0017969:	c3                   	ret    

c001796a <ISO9660::unlink(char const*)>:
c001796a:	b8 01 00 00 00       	mov    eax,0x1
c001796f:	c3                   	ret    

c0017970 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017970:	b8 03 00 00 00       	mov    eax,0x3
c0017975:	c3                   	ret    

c0017976 <ISO9660::rename(char const*, char const*)>:
c0017976:	b8 01 00 00 00       	mov    eax,0x1
c001797b:	c3                   	ret    

c001797c <ISO9660::mkdir(char const*)>:
c001797c:	b8 01 00 00 00       	mov    eax,0x1
c0017981:	c3                   	ret    

c0017982 <ISO9660::~ISO9660()>:
c0017982:	83 ec 0c             	sub    esp,0xc
c0017985:	ba 48 f9 01 c0       	mov    edx,0xc001f948
c001798a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001798e:	89 10                	mov    DWORD PTR [eax],edx
c0017990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017994:	83 ec 0c             	sub    esp,0xc
c0017997:	50                   	push   eax
c0017998:	e8 b7 2f ff ff       	call   c000a954 <Filesystem::~Filesystem()>
c001799d:	83 c4 10             	add    esp,0x10
c00179a0:	90                   	nop
c00179a1:	83 c4 0c             	add    esp,0xc
c00179a4:	c3                   	ret    
c00179a5:	90                   	nop

c00179a6 <ISO9660::~ISO9660()>:
c00179a6:	83 ec 0c             	sub    esp,0xc
c00179a9:	83 ec 0c             	sub    esp,0xc
c00179ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179b0:	e8 cd ff ff ff       	call   c0017982 <ISO9660::~ISO9660()>
c00179b5:	83 c4 10             	add    esp,0x10
c00179b8:	83 ec 08             	sub    esp,0x8
c00179bb:	6a 08                	push   0x8
c00179bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179c1:	e8 52 2b ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c00179c6:	83 c4 10             	add    esp,0x10
c00179c9:	83 c4 0c             	add    esp,0xc
c00179cc:	c3                   	ret    
c00179cd:	90                   	nop

c00179ce <ISO9660::exists(char const*)>:
c00179ce:	83 ec 18             	sub    esp,0x18
c00179d1:	68 8e f8 01 c0       	push   0xc001f88e
c00179d6:	e8 3c 89 ff ff       	call   c0010317 <KePanic(char const*)>
c00179db:	31 c0                	xor    eax,eax
c00179dd:	83 c4 1c             	add    esp,0x1c
c00179e0:	c3                   	ret    
c00179e1:	90                   	nop

c00179e2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00179e2:	56                   	push   esi
c00179e3:	53                   	push   ebx
c00179e4:	50                   	push   eax
c00179e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00179e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00179ed:	85 f6                	test   esi,esi
c00179ef:	0f 84 88 00 00 00    	je     c0017a7d <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c00179f5:	85 db                	test   ebx,ebx
c00179f7:	0f 84 80 00 00 00    	je     c0017a7d <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c00179fd:	b9 03 00 00 00       	mov    ecx,0x3
c0017a02:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017a07:	75 79                	jne    c0017a82 <ISO9660::open(char const*, void**, FileOpenMode)+0xa0>
c0017a09:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0017a0c:	3a 05 20 63 02 c0    	cmp    al,BYTE PTR ds:0xc0026320
c0017a12:	74 34                	je     c0017a48 <ISO9660::open(char const*, void**, FileOpenMode)+0x66>
c0017a14:	83 ec 0c             	sub    esp,0xc
c0017a17:	50                   	push   eax
c0017a18:	e8 3e ee fe ff       	call   c000685b <init_percd>
c0017a1d:	83 c4 10             	add    esp,0x10
c0017a20:	b9 0b 00 00 00       	mov    ecx,0xb
c0017a25:	40                   	inc    eax
c0017a26:	74 5a                	je     c0017a82 <ISO9660::open(char const*, void**, FileOpenMode)+0xa0>
c0017a28:	80 3d 20 63 02 c0 00 	cmp    BYTE PTR ds:0xc0026320,0x0
c0017a2f:	74 10                	je     c0017a41 <ISO9660::open(char const*, void**, FileOpenMode)+0x5f>
c0017a31:	83 ec 0c             	sub    esp,0xc
c0017a34:	68 ac f8 01 c0       	push   0xc001f8ac
c0017a39:	e8 d9 88 ff ff       	call   c0010317 <KePanic(char const*)>
c0017a3e:	83 c4 10             	add    esp,0x10
c0017a41:	8a 06                	mov    al,BYTE PTR [esi]
c0017a43:	a2 20 63 02 c0       	mov    ds:0xc0026320,al
c0017a48:	83 ec 0c             	sub    esp,0xc
c0017a4b:	0f be 05 20 63 02 c0 	movsx  eax,BYTE PTR ds:0xc0026320
c0017a52:	83 c6 03             	add    esi,0x3
c0017a55:	50                   	push   eax
c0017a56:	e8 00 ee fe ff       	call   c000685b <init_percd>
c0017a5b:	59                   	pop    ecx
c0017a5c:	58                   	pop    eax
c0017a5d:	6a 00                	push   0x0
c0017a5f:	56                   	push   esi
c0017a60:	e8 be e8 fe ff       	call   c0006323 <iso_open>
c0017a65:	83 c4 10             	add    esp,0x10
c0017a68:	b9 01 00 00 00       	mov    ecx,0x1
c0017a6d:	83 f8 ff             	cmp    eax,0xffffffff
c0017a70:	74 10                	je     c0017a82 <ISO9660::open(char const*, void**, FileOpenMode)+0xa0>
c0017a72:	8d 50 32             	lea    edx,[eax+0x32]
c0017a75:	31 c9                	xor    ecx,ecx
c0017a77:	01 d2                	add    edx,edx
c0017a79:	89 13                	mov    DWORD PTR [ebx],edx
c0017a7b:	eb 05                	jmp    c0017a82 <ISO9660::open(char const*, void**, FileOpenMode)+0xa0>
c0017a7d:	b9 04 00 00 00       	mov    ecx,0x4
c0017a82:	5a                   	pop    edx
c0017a83:	89 c8                	mov    eax,ecx
c0017a85:	5b                   	pop    ebx
c0017a86:	5e                   	pop    esi
c0017a87:	c3                   	ret    

c0017a88 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017a88:	53                   	push   ebx
c0017a89:	83 ec 08             	sub    esp,0x8
c0017a8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a90:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017a94:	85 c0                	test   eax,eax
c0017a96:	74 2d                	je     c0017ac5 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0017a98:	85 db                	test   ebx,ebx
c0017a9a:	74 29                	je     c0017ac5 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0017a9c:	b9 02 00 00 00       	mov    ecx,0x2
c0017aa1:	52                   	push   edx
c0017aa2:	99                   	cdq    
c0017aa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017aa7:	f7 f9                	idiv   ecx
c0017aa9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017aad:	83 e8 32             	sub    eax,0x32
c0017ab0:	50                   	push   eax
c0017ab1:	e8 15 e9 fe ff       	call   c00063cb <iso_read>
c0017ab6:	83 c4 10             	add    esp,0x10
c0017ab9:	89 03                	mov    DWORD PTR [ebx],eax
c0017abb:	09 d0                	or     eax,edx
c0017abd:	0f 94 c0             	sete   al
c0017ac0:	0f b6 c0             	movzx  eax,al
c0017ac3:	eb 05                	jmp    c0017aca <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0017ac5:	b8 04 00 00 00       	mov    eax,0x4
c0017aca:	83 c4 08             	add    esp,0x8
c0017acd:	5b                   	pop    ebx
c0017ace:	c3                   	ret    
c0017acf:	90                   	nop

c0017ad0 <ISO9660::seek(void*, unsigned long long)>:
c0017ad0:	57                   	push   edi
c0017ad1:	56                   	push   esi
c0017ad2:	b8 04 00 00 00       	mov    eax,0x4
c0017ad7:	51                   	push   ecx
c0017ad8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017adc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017ae0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017ae4:	85 d2                	test   edx,edx
c0017ae6:	74 26                	je     c0017b0e <ISO9660::seek(void*, unsigned long long)+0x3e>
c0017ae8:	6a 00                	push   0x0
c0017aea:	b9 02 00 00 00       	mov    ecx,0x2
c0017aef:	57                   	push   edi
c0017af0:	89 d0                	mov    eax,edx
c0017af2:	56                   	push   esi
c0017af3:	99                   	cdq    
c0017af4:	f7 f9                	idiv   ecx
c0017af6:	83 e8 32             	sub    eax,0x32
c0017af9:	50                   	push   eax
c0017afa:	e8 e2 e9 fe ff       	call   c00064e1 <iso_seek>
c0017aff:	83 c4 10             	add    esp,0x10
c0017b02:	31 f0                	xor    eax,esi
c0017b04:	31 fa                	xor    edx,edi
c0017b06:	09 d0                	or     eax,edx
c0017b08:	0f 95 c0             	setne  al
c0017b0b:	0f b6 c0             	movzx  eax,al
c0017b0e:	5a                   	pop    edx
c0017b0f:	5e                   	pop    esi
c0017b10:	5f                   	pop    edi
c0017b11:	c3                   	ret    

c0017b12 <ISO9660::tell(void*, unsigned long long*)>:
c0017b12:	53                   	push   ebx
c0017b13:	83 ec 08             	sub    esp,0x8
c0017b16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b1a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b1e:	85 c0                	test   eax,eax
c0017b20:	74 24                	je     c0017b46 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0017b22:	85 db                	test   ebx,ebx
c0017b24:	74 20                	je     c0017b46 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0017b26:	83 ec 0c             	sub    esp,0xc
c0017b29:	b9 02 00 00 00       	mov    ecx,0x2
c0017b2e:	99                   	cdq    
c0017b2f:	f7 f9                	idiv   ecx
c0017b31:	83 e8 32             	sub    eax,0x32
c0017b34:	50                   	push   eax
c0017b35:	e8 2b ea fe ff       	call   c0006565 <iso_tell>
c0017b3a:	83 c4 10             	add    esp,0x10
c0017b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0017b3f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017b42:	31 c0                	xor    eax,eax
c0017b44:	eb 05                	jmp    c0017b4b <ISO9660::tell(void*, unsigned long long*)+0x39>
c0017b46:	b8 04 00 00 00       	mov    eax,0x4
c0017b4b:	83 c4 08             	add    esp,0x8
c0017b4e:	5b                   	pop    ebx
c0017b4f:	c3                   	ret    

c0017b50 <ISO9660::openDir(char const*, void**)>:
c0017b50:	57                   	push   edi
c0017b51:	56                   	push   esi
c0017b52:	53                   	push   ebx
c0017b53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017b57:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017b5b:	85 ff                	test   edi,edi
c0017b5d:	0f 84 b0 00 00 00    	je     c0017c13 <ISO9660::openDir(char const*, void**)+0xc3>
c0017b63:	85 f6                	test   esi,esi
c0017b65:	0f 84 a8 00 00 00    	je     c0017c13 <ISO9660::openDir(char const*, void**)+0xc3>
c0017b6b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0017b6e:	3a 05 20 63 02 c0    	cmp    al,BYTE PTR ds:0xc0026320
c0017b74:	74 38                	je     c0017bae <ISO9660::openDir(char const*, void**)+0x5e>
c0017b76:	83 ec 0c             	sub    esp,0xc
c0017b79:	50                   	push   eax
c0017b7a:	e8 dc ec fe ff       	call   c000685b <init_percd>
c0017b7f:	83 c4 10             	add    esp,0x10
c0017b82:	ba 0b 00 00 00       	mov    edx,0xb
c0017b87:	40                   	inc    eax
c0017b88:	0f 84 8a 00 00 00    	je     c0017c18 <ISO9660::openDir(char const*, void**)+0xc8>
c0017b8e:	80 3d 20 63 02 c0 00 	cmp    BYTE PTR ds:0xc0026320,0x0
c0017b95:	74 10                	je     c0017ba7 <ISO9660::openDir(char const*, void**)+0x57>
c0017b97:	83 ec 0c             	sub    esp,0xc
c0017b9a:	68 ac f8 01 c0       	push   0xc001f8ac
c0017b9f:	e8 73 87 ff ff       	call   c0010317 <KePanic(char const*)>
c0017ba4:	83 c4 10             	add    esp,0x10
c0017ba7:	8a 07                	mov    al,BYTE PTR [edi]
c0017ba9:	a2 20 63 02 c0       	mov    ds:0xc0026320,al
c0017bae:	83 ec 0c             	sub    esp,0xc
c0017bb1:	0f be 05 20 63 02 c0 	movsx  eax,BYTE PTR ds:0xc0026320
c0017bb8:	50                   	push   eax
c0017bb9:	e8 9d ec fe ff       	call   c000685b <init_percd>
c0017bbe:	c7 04 24 bc f8 01 c0 	mov    DWORD PTR [esp],0xc001f8bc
c0017bc5:	e8 44 2a ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0017bca:	59                   	pop    ecx
c0017bcb:	8d 47 03             	lea    eax,[edi+0x3]
c0017bce:	5b                   	pop    ebx
c0017bcf:	6a 01                	push   0x1
c0017bd1:	50                   	push   eax
c0017bd2:	e8 4c e7 fe ff       	call   c0006323 <iso_open>
c0017bd7:	83 c4 10             	add    esp,0x10
c0017bda:	89 c3                	mov    ebx,eax
c0017bdc:	83 f8 ff             	cmp    eax,0xffffffff
c0017bdf:	75 17                	jne    c0017bf8 <ISO9660::openDir(char const*, void**)+0xa8>
c0017be1:	52                   	push   edx
c0017be2:	52                   	push   edx
c0017be3:	57                   	push   edi
c0017be4:	68 c7 f8 01 c0       	push   0xc001f8c7
c0017be9:	e8 20 2a ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0017bee:	83 c4 10             	add    esp,0x10
c0017bf1:	ba 01 00 00 00       	mov    edx,0x1
c0017bf6:	eb 20                	jmp    c0017c18 <ISO9660::openDir(char const*, void**)+0xc8>
c0017bf8:	01 db                	add    ebx,ebx
c0017bfa:	50                   	push   eax
c0017bfb:	83 c3 65             	add    ebx,0x65
c0017bfe:	50                   	push   eax
c0017bff:	57                   	push   edi
c0017c00:	68 dd f8 01 c0       	push   0xc001f8dd
c0017c05:	e8 04 2a ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0017c0a:	89 1e                	mov    DWORD PTR [esi],ebx
c0017c0c:	83 c4 10             	add    esp,0x10
c0017c0f:	31 d2                	xor    edx,edx
c0017c11:	eb 05                	jmp    c0017c18 <ISO9660::openDir(char const*, void**)+0xc8>
c0017c13:	ba 04 00 00 00       	mov    edx,0x4
c0017c18:	5b                   	pop    ebx
c0017c19:	89 d0                	mov    eax,edx
c0017c1b:	5e                   	pop    esi
c0017c1c:	5f                   	pop    edi
c0017c1d:	c3                   	ret    

c0017c1e <ISO9660::stat(void*, unsigned long long*)>:
c0017c1e:	53                   	push   ebx
c0017c1f:	83 ec 14             	sub    esp,0x14
c0017c22:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017c26:	68 f3 f8 01 c0       	push   0xc001f8f3
c0017c2b:	e8 de 29 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0017c30:	83 c4 10             	add    esp,0x10
c0017c33:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017c38:	74 2c                	je     c0017c66 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0017c3a:	85 db                	test   ebx,ebx
c0017c3c:	74 28                	je     c0017c66 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0017c3e:	83 ec 0c             	sub    esp,0xc
c0017c41:	b9 02 00 00 00       	mov    ecx,0x2
c0017c46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c4a:	99                   	cdq    
c0017c4b:	f7 f9                	idiv   ecx
c0017c4d:	83 e8 32             	sub    eax,0x32
c0017c50:	50                   	push   eax
c0017c51:	e8 40 e9 fe ff       	call   c0006596 <iso_total>
c0017c56:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017c5d:	89 03                	mov    DWORD PTR [ebx],eax
c0017c5f:	83 c4 10             	add    esp,0x10
c0017c62:	31 c0                	xor    eax,eax
c0017c64:	eb 05                	jmp    c0017c6b <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0017c66:	b8 04 00 00 00       	mov    eax,0x4
c0017c6b:	83 c4 08             	add    esp,0x8
c0017c6e:	5b                   	pop    ebx
c0017c6f:	c3                   	ret    

c0017c70 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017c70:	55                   	push   ebp
c0017c71:	57                   	push   edi
c0017c72:	56                   	push   esi
c0017c73:	53                   	push   ebx
c0017c74:	83 ec 18             	sub    esp,0x18
c0017c77:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0017c7b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017c7f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017c83:	68 fb f8 01 c0       	push   0xc001f8fb
c0017c88:	e8 81 29 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0017c8d:	83 c4 10             	add    esp,0x10
c0017c90:	85 f6                	test   esi,esi
c0017c92:	0f 94 c2             	sete   dl
c0017c95:	85 ff                	test   edi,edi
c0017c97:	0f 94 c0             	sete   al
c0017c9a:	08 c2                	or     dl,al
c0017c9c:	0f 85 88 00 00 00    	jne    c0017d2a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xba>
c0017ca2:	85 db                	test   ebx,ebx
c0017ca4:	0f 84 80 00 00 00    	je     c0017d2a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xba>
c0017caa:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017cad:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017cb3:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017cba:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017cbd:	3a 05 20 63 02 c0    	cmp    al,BYTE PTR ds:0xc0026320
c0017cc3:	74 34                	je     c0017cf9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x89>
c0017cc5:	83 ec 0c             	sub    esp,0xc
c0017cc8:	50                   	push   eax
c0017cc9:	e8 8d eb fe ff       	call   c000685b <init_percd>
c0017cce:	83 c4 10             	add    esp,0x10
c0017cd1:	ba 0b 00 00 00       	mov    edx,0xb
c0017cd6:	40                   	inc    eax
c0017cd7:	74 77                	je     c0017d50 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017cd9:	80 3d 20 63 02 c0 00 	cmp    BYTE PTR ds:0xc0026320,0x0
c0017ce0:	74 10                	je     c0017cf2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x82>
c0017ce2:	83 ec 0c             	sub    esp,0xc
c0017ce5:	68 ac f8 01 c0       	push   0xc001f8ac
c0017cea:	e8 28 86 ff ff       	call   c0010317 <KePanic(char const*)>
c0017cef:	83 c4 10             	add    esp,0x10
c0017cf2:	8a 03                	mov    al,BYTE PTR [ebx]
c0017cf4:	a2 20 63 02 c0       	mov    ds:0xc0026320,al
c0017cf9:	83 c3 03             	add    ebx,0x3
c0017cfc:	52                   	push   edx
c0017cfd:	52                   	push   edx
c0017cfe:	6a 00                	push   0x0
c0017d00:	53                   	push   ebx
c0017d01:	e8 1d e6 fe ff       	call   c0006323 <iso_open>
c0017d06:	83 c4 10             	add    esp,0x10
c0017d09:	89 c5                	mov    ebp,eax
c0017d0b:	83 f8 ff             	cmp    eax,0xffffffff
c0017d0e:	75 21                	jne    c0017d31 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc1>
c0017d10:	50                   	push   eax
c0017d11:	50                   	push   eax
c0017d12:	6a 01                	push   0x1
c0017d14:	53                   	push   ebx
c0017d15:	e8 09 e6 fe ff       	call   c0006323 <iso_open>
c0017d1a:	83 c4 10             	add    esp,0x10
c0017d1d:	ba 02 00 00 00       	mov    edx,0x2
c0017d22:	40                   	inc    eax
c0017d23:	74 2b                	je     c0017d50 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017d25:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017d28:	eb 24                	jmp    c0017d4e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xde>
c0017d2a:	ba 04 00 00 00       	mov    edx,0x4
c0017d2f:	eb 1f                	jmp    c0017d50 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017d31:	83 ec 0c             	sub    esp,0xc
c0017d34:	50                   	push   eax
c0017d35:	e8 5c e8 fe ff       	call   c0006596 <iso_total>
c0017d3a:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017d41:	89 06                	mov    DWORD PTR [esi],eax
c0017d43:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d46:	e8 62 e6 fe ff       	call   c00063ad <iso_close>
c0017d4b:	83 c4 10             	add    esp,0x10
c0017d4e:	31 d2                	xor    edx,edx
c0017d50:	83 c4 0c             	add    esp,0xc
c0017d53:	89 d0                	mov    eax,edx
c0017d55:	5b                   	pop    ebx
c0017d56:	5e                   	pop    esi
c0017d57:	5f                   	pop    edi
c0017d58:	5d                   	pop    ebp
c0017d59:	c3                   	ret    

c0017d5a <ISO9660::close(void*)>:
c0017d5a:	83 ec 0c             	sub    esp,0xc
c0017d5d:	b8 04 00 00 00       	mov    eax,0x4
c0017d62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d66:	85 d2                	test   edx,edx
c0017d68:	74 1b                	je     c0017d85 <ISO9660::close(void*)+0x2b>
c0017d6a:	83 ec 0c             	sub    esp,0xc
c0017d6d:	b9 02 00 00 00       	mov    ecx,0x2
c0017d72:	89 d0                	mov    eax,edx
c0017d74:	99                   	cdq    
c0017d75:	f7 f9                	idiv   ecx
c0017d77:	83 e8 32             	sub    eax,0x32
c0017d7a:	50                   	push   eax
c0017d7b:	e8 2d e6 fe ff       	call   c00063ad <iso_close>
c0017d80:	83 c4 10             	add    esp,0x10
c0017d83:	31 c0                	xor    eax,eax
c0017d85:	83 c4 0c             	add    esp,0xc
c0017d88:	c3                   	ret    
c0017d89:	90                   	nop

c0017d8a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017d8a:	55                   	push   ebp
c0017d8b:	57                   	push   edi
c0017d8c:	56                   	push   esi
c0017d8d:	53                   	push   ebx
c0017d8e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017d94:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c0017d9b:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017da2:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c0017da9:	85 db                	test   ebx,ebx
c0017dab:	0f 84 ce 00 00 00    	je     c0017e7f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xf5>
c0017db1:	85 ed                	test   ebp,ebp
c0017db3:	0f 84 c6 00 00 00    	je     c0017e7f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xf5>
c0017db9:	83 ec 0c             	sub    esp,0xc
c0017dbc:	68 03 f9 01 c0       	push   0xc001f903
c0017dc1:	e8 48 28 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0017dc6:	b9 02 00 00 00       	mov    ecx,0x2
c0017dcb:	89 d8                	mov    eax,ebx
c0017dcd:	99                   	cdq    
c0017dce:	f7 f9                	idiv   ecx
c0017dd0:	83 e8 32             	sub    eax,0x32
c0017dd3:	89 04 24             	mov    DWORD PTR [esp],eax
c0017dd6:	e8 0c e8 fe ff       	call   c00065e7 <iso_readdir>
c0017ddb:	83 c4 10             	add    esp,0x10
c0017dde:	89 c6                	mov    esi,eax
c0017de0:	85 c0                	test   eax,eax
c0017de2:	75 27                	jne    c0017e0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x81>
c0017de4:	83 ec 0c             	sub    esp,0xc
c0017de7:	68 0e f9 01 c0       	push   0xc001f90e
c0017dec:	e8 1d 28 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0017df1:	83 c4 0c             	add    esp,0xc
c0017df4:	68 10 01 00 00       	push   0x110
c0017df9:	6a 00                	push   0x0
c0017dfb:	57                   	push   edi
c0017dfc:	e8 cf 86 fe ff       	call   c00004d0 <memset>
c0017e01:	83 c4 10             	add    esp,0x10
c0017e04:	b8 01 00 00 00       	mov    eax,0x1
c0017e09:	eb 79                	jmp    c0017e84 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xfa>
c0017e0b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017e11:	8d 58 08             	lea    ebx,[eax+0x8]
c0017e14:	83 ec 0c             	sub    esp,0xc
c0017e17:	53                   	push   ebx
c0017e18:	e8 23 87 fe ff       	call   c0000540 <strlen>
c0017e1d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e25:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017e29:	83 c4 10             	add    esp,0x10
c0017e2c:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017e30:	75 0a                	jne    c0017e3c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xb2>
c0017e32:	b8 02 00 00 00       	mov    eax,0x2
c0017e37:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017e3a:	74 05                	je     c0017e41 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xb7>
c0017e3c:	b8 01 00 00 00       	mov    eax,0x1
c0017e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e45:	50                   	push   eax
c0017e46:	50                   	push   eax
c0017e47:	53                   	push   ebx
c0017e48:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017e4c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017e50:	50                   	push   eax
c0017e51:	e8 aa 87 fe ff       	call   c0000600 <strcpy>
c0017e56:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017e5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e5f:	83 c4 0c             	add    esp,0xc
c0017e62:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c0017e69:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e6d:	53                   	push   ebx
c0017e6e:	68 21 f9 01 c0       	push   0xc001f921
c0017e73:	e8 96 27 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0017e78:	83 c4 10             	add    esp,0x10
c0017e7b:	31 c0                	xor    eax,eax
c0017e7d:	eb 05                	jmp    c0017e84 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xfa>
c0017e7f:	b8 04 00 00 00       	mov    eax,0x4
c0017e84:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017e8a:	5b                   	pop    ebx
c0017e8b:	5e                   	pop    esi
c0017e8c:	5f                   	pop    edi
c0017e8d:	5d                   	pop    ebp
c0017e8e:	c3                   	ret    

c0017e8f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017e8f:	57                   	push   edi
c0017e90:	56                   	push   esi
c0017e91:	53                   	push   ebx
c0017e92:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e96:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017e9a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017e9e:	39 35 24 63 02 c0    	cmp    DWORD PTR ds:0xc0026324,esi
c0017ea4:	75 08                	jne    c0017eae <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017ea6:	38 1d 30 03 02 c0    	cmp    BYTE PTR ds:0xc0020330,bl
c0017eac:	74 4a                	je     c0017ef8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017eae:	83 ec 0c             	sub    esp,0xc
c0017eb1:	31 d2                	xor    edx,edx
c0017eb3:	68 40 63 02 c0       	push   0xc0026340
c0017eb8:	0f be c3             	movsx  eax,bl
c0017ebb:	6a 01                	push   0x1
c0017ebd:	52                   	push   edx
c0017ebe:	56                   	push   esi
c0017ebf:	ff 34 85 1c 53 02 c0 	push   DWORD PTR [eax*4-0x3ffdace4]
c0017ec6:	e8 59 4e ff ff       	call   c000cd24 <LogicalDisk::read(unsigned long long, int, void*)>
c0017ecb:	83 c4 20             	add    esp,0x20
c0017ece:	85 c0                	test   eax,eax
c0017ed0:	75 0e                	jne    c0017ee0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017ed2:	89 35 24 63 02 c0    	mov    DWORD PTR ds:0xc0026324,esi
c0017ed8:	88 1d 30 03 02 c0    	mov    BYTE PTR ds:0xc0020330,bl
c0017ede:	eb 18                	jmp    c0017ef8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017ee0:	50                   	push   eax
c0017ee1:	68 00 08 00 00       	push   0x800
c0017ee6:	6a 00                	push   0x0
c0017ee8:	57                   	push   edi
c0017ee9:	e8 e2 85 fe ff       	call   c00004d0 <memset>
c0017eee:	83 c4 10             	add    esp,0x10
c0017ef1:	b8 01 00 00 00       	mov    eax,0x1
c0017ef6:	eb 0e                	jmp    c0017f06 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017ef8:	be 40 63 02 c0       	mov    esi,0xc0026340
c0017efd:	b9 00 08 00 00       	mov    ecx,0x800
c0017f02:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017f04:	31 c0                	xor    eax,eax
c0017f06:	5b                   	pop    ebx
c0017f07:	5e                   	pop    esi
c0017f08:	5f                   	pop    edi
c0017f09:	c3                   	ret    

c0017f0a <ISO9660::tryMount(LogicalDisk*, int)>:
c0017f0a:	53                   	push   ebx
c0017f0b:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017f11:	c7 05 24 63 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0026324,0xdeadbeef
c0017f1b:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017f22:	8d 58 41             	lea    ebx,[eax+0x41]
c0017f25:	0f be db             	movsx  ebx,bl
c0017f28:	53                   	push   ebx
c0017f29:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017f2d:	50                   	push   eax
c0017f2e:	6a 10                	push   0x10
c0017f30:	e8 5a ff ff ff       	call   c0017e8f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017f35:	83 c4 10             	add    esp,0x10
c0017f38:	31 d2                	xor    edx,edx
c0017f3a:	85 c0                	test   eax,eax
c0017f3c:	75 33                	jne    c0017f71 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f3e:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017f43:	75 2c                	jne    c0017f71 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f45:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017f4a:	75 25                	jne    c0017f71 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f4c:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017f51:	75 1e                	jne    c0017f71 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f53:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017f58:	75 17                	jne    c0017f71 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f5a:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017f5f:	75 10                	jne    c0017f71 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f61:	83 ec 0c             	sub    esp,0xc
c0017f64:	53                   	push   ebx
c0017f65:	e8 f1 e8 fe ff       	call   c000685b <init_percd>
c0017f6a:	83 c4 10             	add    esp,0x10
c0017f6d:	40                   	inc    eax
c0017f6e:	0f 95 c2             	setne  dl
c0017f71:	88 d0                	mov    al,dl
c0017f73:	81 c4 08 08 00 00    	add    esp,0x808
c0017f79:	5b                   	pop    ebx
c0017f7a:	c3                   	ret    
c0017f7b:	90                   	nop

c0017f7c <ISO9660::ISO9660()>:
c0017f7c:	83 ec 0c             	sub    esp,0xc
c0017f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f83:	83 ec 0c             	sub    esp,0xc
c0017f86:	50                   	push   eax
c0017f87:	e8 a4 29 ff ff       	call   c000a930 <Filesystem::Filesystem()>
c0017f8c:	83 c4 10             	add    esp,0x10
c0017f8f:	ba 48 f9 01 c0       	mov    edx,0xc001f948
c0017f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f98:	89 10                	mov    DWORD PTR [eax],edx
c0017f9a:	e8 ce e9 fe ff       	call   c000696d <fs_iso9660_init>
c0017f9f:	90                   	nop
c0017fa0:	83 c4 0c             	add    esp,0xc
c0017fa3:	c3                   	ret    

c0017fa4 <SoundCard::beginPlayback()>:
c0017fa4:	c7 44 24 04 a8 f9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f9a8
c0017fac:	e9 66 83 ff ff       	jmp    c0010317 <KePanic(char const*)>
c0017fb1:	90                   	nop

c0017fb2 <SoundCard::stopPlayback()>:
c0017fb2:	c7 44 24 04 a8 f9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f9a8
c0017fba:	e9 58 83 ff ff       	jmp    c0010317 <KePanic(char const*)>
c0017fbf:	90                   	nop

c0017fc0 <SoundCard::SoundCard(char const*)>:
c0017fc0:	83 ec 1c             	sub    esp,0x1c
c0017fc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fc7:	83 ec 08             	sub    esp,0x8
c0017fca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017fce:	50                   	push   eax
c0017fcf:	e8 10 3c ff ff       	call   c000bbe4 <Device::Device(char const*)>
c0017fd4:	83 c4 10             	add    esp,0x10
c0017fd7:	ba f4 f9 01 c0       	mov    edx,0xc001f9f4
c0017fdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fe0:	89 10                	mov    DWORD PTR [eax],edx
c0017fe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fe6:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017fed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ff1:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fff:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0018009:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001800d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0018017:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001801b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0018025:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001802d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0018032:	7f 19                	jg     c001804d <SoundCard::SoundCard(char const*)+0x8d>
c0018034:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018038:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001803c:	83 c2 54             	add    edx,0x54
c001803f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0018047:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001804b:	eb e0                	jmp    c001802d <SoundCard::SoundCard(char const*)+0x6d>
c001804d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018051:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0018058:	90                   	nop
c0018059:	83 c4 1c             	add    esp,0x1c
c001805c:	c3                   	ret    
c001805d:	90                   	nop

c001805e <SoundCard::~SoundCard()>:
c001805e:	83 ec 0c             	sub    esp,0xc
c0018061:	ba f4 f9 01 c0       	mov    edx,0xc001f9f4
c0018066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001806a:	89 10                	mov    DWORD PTR [eax],edx
c001806c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018070:	83 ec 0c             	sub    esp,0xc
c0018073:	50                   	push   eax
c0018074:	e8 d5 38 ff ff       	call   c000b94e <Device::~Device()>
c0018079:	83 c4 10             	add    esp,0x10
c001807c:	90                   	nop
c001807d:	83 c4 0c             	add    esp,0xc
c0018080:	c3                   	ret    
c0018081:	90                   	nop

c0018082 <SoundCard::~SoundCard()>:
c0018082:	83 ec 0c             	sub    esp,0xc
c0018085:	83 ec 0c             	sub    esp,0xc
c0018088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001808c:	e8 cd ff ff ff       	call   c001805e <SoundCard::~SoundCard()>
c0018091:	83 c4 10             	add    esp,0x10
c0018094:	83 ec 08             	sub    esp,0x8
c0018097:	68 e8 01 00 00       	push   0x1e8
c001809c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180a0:	e8 73 24 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c00180a5:	83 c4 10             	add    esp,0x10
c00180a8:	83 c4 0c             	add    esp,0xc
c00180ab:	c3                   	ret    

c00180ac <SoundCard::configureRates(int, int, int)>:
c00180ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00180b0:	31 c0                	xor    eax,eax
c00180b2:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c00180b9:	75 20                	jne    c00180db <SoundCard::configureRates(int, int, int)+0x2f>
c00180bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180bf:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c00180c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180c9:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c00180cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180d3:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c00180d9:	b0 01                	mov    al,0x1
c00180db:	c3                   	ret    

c00180dc <SoundCard::getSamples16(int, short*)>:
c00180dc:	55                   	push   ebp
c00180dd:	57                   	push   edi
c00180de:	31 ff                	xor    edi,edi
c00180e0:	56                   	push   esi
c00180e1:	53                   	push   ebx
c00180e2:	31 db                	xor    ebx,ebx
c00180e4:	83 ec 10             	sub    esp,0x10
c00180e7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00180eb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00180ef:	8d 04 36             	lea    eax,[esi+esi*1]
c00180f2:	50                   	push   eax
c00180f3:	6a 00                	push   0x0
c00180f5:	55                   	push   ebp
c00180f6:	e8 d5 83 fe ff       	call   c00004d0 <memset>
c00180fb:	83 c4 10             	add    esp,0x10
c00180fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018102:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0018109:	85 c0                	test   eax,eax
c001810b:	74 1b                	je     c0018128 <SoundCard::getSamples16(int, short*)+0x4c>
c001810d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018111:	75 15                	jne    c0018128 <SoundCard::getSamples16(int, short*)+0x4c>
c0018113:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018117:	55                   	push   ebp
c0018118:	56                   	push   esi
c0018119:	50                   	push   eax
c001811a:	e8 ed 02 00 00       	call   c001840c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001811f:	83 c4 10             	add    esp,0x10
c0018122:	39 c7                	cmp    edi,eax
c0018124:	7d 02                	jge    c0018128 <SoundCard::getSamples16(int, short*)+0x4c>
c0018126:	89 c7                	mov    edi,eax
c0018128:	43                   	inc    ebx
c0018129:	83 fb 20             	cmp    ebx,0x20
c001812c:	75 d0                	jne    c00180fe <SoundCard::getSamples16(int, short*)+0x22>
c001812e:	83 c4 0c             	add    esp,0xc
c0018131:	89 f8                	mov    eax,edi
c0018133:	5b                   	pop    ebx
c0018134:	5e                   	pop    esi
c0018135:	5f                   	pop    edi
c0018136:	5d                   	pop    ebp
c0018137:	c3                   	ret    

c0018138 <SoundCard::getSamples32(int, int*)>:
c0018138:	55                   	push   ebp
c0018139:	57                   	push   edi
c001813a:	31 ff                	xor    edi,edi
c001813c:	56                   	push   esi
c001813d:	31 f6                	xor    esi,esi
c001813f:	53                   	push   ebx
c0018140:	83 ec 10             	sub    esp,0x10
c0018143:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018147:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001814b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001814f:	c1 e0 02             	shl    eax,0x2
c0018152:	50                   	push   eax
c0018153:	6a 00                	push   0x0
c0018155:	55                   	push   ebp
c0018156:	e8 75 83 fe ff       	call   c00004d0 <memset>
c001815b:	83 c4 10             	add    esp,0x10
c001815e:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0018165:	85 c0                	test   eax,eax
c0018167:	74 1b                	je     c0018184 <SoundCard::getSamples32(int, int*)+0x4c>
c0018169:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001816d:	75 15                	jne    c0018184 <SoundCard::getSamples32(int, int*)+0x4c>
c001816f:	53                   	push   ebx
c0018170:	55                   	push   ebp
c0018171:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018175:	50                   	push   eax
c0018176:	e8 55 03 00 00       	call   c00184d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001817b:	83 c4 10             	add    esp,0x10
c001817e:	39 c6                	cmp    esi,eax
c0018180:	7d 02                	jge    c0018184 <SoundCard::getSamples32(int, int*)+0x4c>
c0018182:	89 c6                	mov    esi,eax
c0018184:	47                   	inc    edi
c0018185:	83 ff 20             	cmp    edi,0x20
c0018188:	75 d4                	jne    c001815e <SoundCard::getSamples32(int, int*)+0x26>
c001818a:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0018190:	85 f6                	test   esi,esi
c0018192:	75 0f                	jne    c00181a3 <SoundCard::getSamples32(int, int*)+0x6b>
c0018194:	84 c0                	test   al,al
c0018196:	74 1b                	je     c00181b3 <SoundCard::getSamples32(int, int*)+0x7b>
c0018198:	83 ec 0c             	sub    esp,0xc
c001819b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001819d:	53                   	push   ebx
c001819e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00181a1:	eb 0d                	jmp    c00181b0 <SoundCard::getSamples32(int, int*)+0x78>
c00181a3:	84 c0                	test   al,al
c00181a5:	75 0c                	jne    c00181b3 <SoundCard::getSamples32(int, int*)+0x7b>
c00181a7:	83 ec 0c             	sub    esp,0xc
c00181aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00181ac:	53                   	push   ebx
c00181ad:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00181b0:	83 c4 10             	add    esp,0x10
c00181b3:	83 c4 0c             	add    esp,0xc
c00181b6:	89 f0                	mov    eax,esi
c00181b8:	5b                   	pop    ebx
c00181b9:	5e                   	pop    esi
c00181ba:	5f                   	pop    edi
c00181bb:	5d                   	pop    ebp
c00181bc:	c3                   	ret    
c00181bd:	90                   	nop

c00181be <SoundCard::addChannel(SoundPort*)>:
c00181be:	83 ec 0c             	sub    esp,0xc
c00181c1:	31 c0                	xor    eax,eax
c00181c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00181c7:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00181cf:	74 1b                	je     c00181ec <SoundCard::addChannel(SoundPort*)+0x2e>
c00181d1:	40                   	inc    eax
c00181d2:	83 f8 20             	cmp    eax,0x20
c00181d5:	75 f0                	jne    c00181c7 <SoundCard::addChannel(SoundPort*)+0x9>
c00181d7:	83 ec 0c             	sub    esp,0xc
c00181da:	68 cd f9 01 c0       	push   0xc001f9cd
c00181df:	e8 33 81 ff ff       	call   c0010317 <KePanic(char const*)>
c00181e4:	83 c4 10             	add    esp,0x10
c00181e7:	83 c8 ff             	or     eax,0xffffffff
c00181ea:	eb 0b                	jmp    c00181f7 <SoundCard::addChannel(SoundPort*)+0x39>
c00181ec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00181f0:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00181f7:	83 c4 0c             	add    esp,0xc
c00181fa:	c3                   	ret    
c00181fb:	90                   	nop

c00181fc <SoundCard::removeChannel(int)>:
c00181fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018200:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018204:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001820f:	c3                   	ret    

c0018210 <SoundPort::SoundPort(int, int, int, int)>:
c0018210:	83 ec 0c             	sub    esp,0xc
c0018213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018217:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001821e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018222:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001822e:	89 10                	mov    DWORD PTR [eax],edx
c0018230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018234:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018238:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001823b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001823f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018243:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0018246:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001824b:	75 13                	jne    c0018260 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001824d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018251:	8b 00                	mov    eax,DWORD PTR [eax]
c0018253:	05 a0 0f 00 00       	add    eax,0xfa0
c0018258:	01 c0                	add    eax,eax
c001825a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001825e:	66 90                	xchg   ax,ax
c0018260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018264:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018268:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001826b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001826f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0018276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001827a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001827d:	c1 e0 02             	shl    eax,0x2
c0018280:	83 ec 0c             	sub    esp,0xc
c0018283:	50                   	push   eax
c0018284:	e8 ec f5 fe ff       	call   c0007875 <malloc>
c0018289:	83 c4 10             	add    esp,0x10
c001828c:	89 c2                	mov    edx,eax
c001828e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018292:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018295:	90                   	nop
c0018296:	83 c4 0c             	add    esp,0xc
c0018299:	c3                   	ret    
c001829a:	66 90                	xchg   ax,ax

c001829c <SoundPort::~SoundPort()>:
c001829c:	83 ec 0c             	sub    esp,0xc
c001829f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182a3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00182a6:	85 c0                	test   eax,eax
c00182a8:	74 1e                	je     c00182c8 <SoundPort::~SoundPort()+0x2c>
c00182aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ae:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00182b1:	83 ec 0c             	sub    esp,0xc
c00182b4:	50                   	push   eax
c00182b5:	e8 cb f5 fe ff       	call   c0007885 <free>
c00182ba:	83 c4 10             	add    esp,0x10
c00182bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182c1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00182c8:	90                   	nop
c00182c9:	83 c4 0c             	add    esp,0xc
c00182cc:	c3                   	ret    
c00182cd:	90                   	nop
c00182ce:	66 90                	xchg   ax,ax

c00182d0 <SoundPort::unpause()>:
c00182d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182d4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00182d8:	c3                   	ret    
c00182d9:	90                   	nop
c00182da:	66 90                	xchg   ax,ax

c00182dc <SoundPort::pause()>:
c00182dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182e0:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00182e4:	c3                   	ret    
c00182e5:	90                   	nop
c00182e6:	66 90                	xchg   ax,ax

c00182e8 <SoundPort::getBufferUsed()>:
c00182e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182ec:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00182ef:	c3                   	ret    

c00182f0 <SoundPort::getBufferSize()>:
c00182f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182f4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00182f7:	c3                   	ret    

c00182f8 <SoundPort::buffer16(short*, int)>:
c00182f8:	55                   	push   ebp
c00182f9:	57                   	push   edi
c00182fa:	56                   	push   esi
c00182fb:	53                   	push   ebx
c00182fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018300:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0018304:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0018307:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001830a:	74 68                	je     c0018374 <SoundPort::buffer16(short*, int)+0x7c>
c001830c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018310:	85 c9                	test   ecx,ecx
c0018312:	7e 60                	jle    c0018374 <SoundPort::buffer16(short*, int)+0x7c>
c0018314:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0018318:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001831b:	c1 e1 0f             	shl    ecx,0xf
c001831e:	8d 70 01             	lea    esi,[eax+0x1]
c0018321:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018324:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0018327:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001832a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001832d:	74 4d                	je     c001837c <SoundPort::buffer16(short*, int)+0x84>
c001832f:	31 f6                	xor    esi,esi
c0018331:	eb 21                	jmp    c0018354 <SoundPort::buffer16(short*, int)+0x5c>
c0018333:	90                   	nop
c0018334:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0018339:	8d 79 01             	lea    edi,[ecx+0x1]
c001833c:	c1 e3 0f             	shl    ebx,0xf
c001833f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0018342:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0018345:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0018348:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001834b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001834e:	74 1c                	je     c001836c <SoundPort::buffer16(short*, int)+0x74>
c0018350:	89 c6                	mov    esi,eax
c0018352:	66 90                	xchg   ax,ax
c0018354:	8d 46 01             	lea    eax,[esi+0x1]
c0018357:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001835b:	75 d7                	jne    c0018334 <SoundPort::buffer16(short*, int)+0x3c>
c001835d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018361:	8d 76 00             	lea    esi,[esi+0x0]
c0018364:	5b                   	pop    ebx
c0018365:	5e                   	pop    esi
c0018366:	5f                   	pop    edi
c0018367:	5d                   	pop    ebp
c0018368:	c3                   	ret    
c0018369:	8d 76 00             	lea    esi,[esi+0x0]
c001836c:	5b                   	pop    ebx
c001836d:	8d 46 02             	lea    eax,[esi+0x2]
c0018370:	5e                   	pop    esi
c0018371:	5f                   	pop    edi
c0018372:	5d                   	pop    ebp
c0018373:	c3                   	ret    
c0018374:	5b                   	pop    ebx
c0018375:	31 c0                	xor    eax,eax
c0018377:	5e                   	pop    esi
c0018378:	5f                   	pop    edi
c0018379:	5d                   	pop    ebp
c001837a:	c3                   	ret    
c001837b:	90                   	nop
c001837c:	b8 01 00 00 00       	mov    eax,0x1
c0018381:	eb e1                	jmp    c0018364 <SoundPort::buffer16(short*, int)+0x6c>
c0018383:	90                   	nop

c0018384 <SoundPort::buffer32(int*, int)>:
c0018384:	55                   	push   ebp
c0018385:	57                   	push   edi
c0018386:	56                   	push   esi
c0018387:	53                   	push   ebx
c0018388:	51                   	push   ecx
c0018389:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001838d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018391:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018394:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018398:	89 04 24             	mov    DWORD PTR [esp],eax
c001839b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001839e:	74 5c                	je     c00183fc <SoundPort::buffer32(int*, int)+0x78>
c00183a0:	85 c0                	test   eax,eax
c00183a2:	7e 58                	jle    c00183fc <SoundPort::buffer32(int*, int)+0x78>
c00183a4:	8d 71 01             	lea    esi,[ecx+0x1]
c00183a7:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00183aa:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00183ad:	8b 37                	mov    esi,DWORD PTR [edi]
c00183af:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c00183b2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00183b5:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00183b8:	74 4a                	je     c0018404 <SoundPort::buffer32(int*, int)+0x80>
c00183ba:	31 f6                	xor    esi,esi
c00183bc:	eb 1e                	jmp    c00183dc <SoundPort::buffer32(int*, int)+0x58>
c00183be:	66 90                	xchg   ax,ax
c00183c0:	8d 69 01             	lea    ebp,[ecx+0x1]
c00183c3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00183c6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00183c9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00183cc:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00183d0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00183d3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00183d6:	74 18                	je     c00183f0 <SoundPort::buffer32(int*, int)+0x6c>
c00183d8:	89 de                	mov    esi,ebx
c00183da:	66 90                	xchg   ax,ax
c00183dc:	8d 5e 01             	lea    ebx,[esi+0x1]
c00183df:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c00183e2:	75 dc                	jne    c00183c0 <SoundPort::buffer32(int*, int)+0x3c>
c00183e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00183e7:	90                   	nop
c00183e8:	5a                   	pop    edx
c00183e9:	5b                   	pop    ebx
c00183ea:	5e                   	pop    esi
c00183eb:	5f                   	pop    edi
c00183ec:	5d                   	pop    ebp
c00183ed:	c3                   	ret    
c00183ee:	66 90                	xchg   ax,ax
c00183f0:	5a                   	pop    edx
c00183f1:	8d 46 02             	lea    eax,[esi+0x2]
c00183f4:	5b                   	pop    ebx
c00183f5:	5e                   	pop    esi
c00183f6:	5f                   	pop    edi
c00183f7:	5d                   	pop    ebp
c00183f8:	c3                   	ret    
c00183f9:	8d 76 00             	lea    esi,[esi+0x0]
c00183fc:	5a                   	pop    edx
c00183fd:	31 c0                	xor    eax,eax
c00183ff:	5b                   	pop    ebx
c0018400:	5e                   	pop    esi
c0018401:	5f                   	pop    edi
c0018402:	5d                   	pop    ebp
c0018403:	c3                   	ret    
c0018404:	b8 01 00 00 00       	mov    eax,0x1
c0018409:	eb dd                	jmp    c00183e8 <SoundPort::buffer32(int*, int)+0x64>
c001840b:	90                   	nop

c001840c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001840c:	57                   	push   edi
c001840d:	56                   	push   esi
c001840e:	53                   	push   ebx
c001840f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018413:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0018417:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001841d:	39 03                	cmp    DWORD PTR [ebx],eax
c001841f:	74 13                	je     c0018434 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0018421:	83 ec 0c             	sub    esp,0xc
c0018424:	68 20 fa 01 c0       	push   0xc001fa20
c0018429:	e8 e9 7e ff ff       	call   c0010317 <KePanic(char const*)>
c001842e:	83 c4 10             	add    esp,0x10
c0018431:	8d 76 00             	lea    esi,[esi+0x0]
c0018434:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001843a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001843d:	74 11                	je     c0018450 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001843f:	83 ec 0c             	sub    esp,0xc
c0018442:	68 5f fa 01 c0       	push   0xc001fa5f
c0018447:	e8 cb 7e ff ff       	call   c0010317 <KePanic(char const*)>
c001844c:	83 c4 10             	add    esp,0x10
c001844f:	90                   	nop
c0018450:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0018456:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0018459:	74 11                	je     c001846c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001845b:	83 ec 0c             	sub    esp,0xc
c001845e:	68 5f fa 01 c0       	push   0xc001fa5f
c0018463:	e8 af 7e ff ff       	call   c0010317 <KePanic(char const*)>
c0018468:	83 c4 10             	add    esp,0x10
c001846b:	90                   	nop
c001846c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001846f:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0018473:	7e 07                	jle    c001847c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018475:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018479:	8d 76 00             	lea    esi,[esi+0x0]
c001847c:	85 f6                	test   esi,esi
c001847e:	7e 2c                	jle    c00184ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018480:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018484:	8d 3c 36             	lea    edi,[esi+esi*1]
c0018487:	31 c9                	xor    ecx,ecx
c0018489:	01 d7                	add    edi,edx
c001848b:	90                   	nop
c001848c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001848f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0018492:	85 c0                	test   eax,eax
c0018494:	79 06                	jns    c001849c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0018496:	05 ff 7f 00 00       	add    eax,0x7fff
c001849b:	90                   	nop
c001849c:	c1 f8 0f             	sar    eax,0xf
c001849f:	83 c1 04             	add    ecx,0x4
c00184a2:	66 01 02             	add    WORD PTR [edx],ax
c00184a5:	83 c2 02             	add    edx,0x2
c00184a8:	39 d7                	cmp    edi,edx
c00184aa:	75 e0                	jne    c001848c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c00184ac:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00184af:	50                   	push   eax
c00184b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00184b3:	29 f0                	sub    eax,esi
c00184b5:	c1 e0 02             	shl    eax,0x2
c00184b8:	50                   	push   eax
c00184b9:	8d 04 b2             	lea    eax,[edx+esi*4]
c00184bc:	50                   	push   eax
c00184bd:	52                   	push   edx
c00184be:	e8 1d 7f fe ff       	call   c00003e0 <memmove>
c00184c3:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c00184c6:	83 c4 10             	add    esp,0x10
c00184c9:	89 f0                	mov    eax,esi
c00184cb:	5b                   	pop    ebx
c00184cc:	5e                   	pop    esi
c00184cd:	5f                   	pop    edi
c00184ce:	c3                   	ret    
c00184cf:	90                   	nop

c00184d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00184d0:	57                   	push   edi
c00184d1:	56                   	push   esi
c00184d2:	53                   	push   ebx
c00184d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00184d7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00184db:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00184df:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c00184e5:	39 06                	cmp    DWORD PTR [esi],eax
c00184e7:	74 13                	je     c00184fc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c00184e9:	83 ec 0c             	sub    esp,0xc
c00184ec:	68 40 fa 01 c0       	push   0xc001fa40
c00184f1:	e8 21 7e ff ff       	call   c0010317 <KePanic(char const*)>
c00184f6:	83 c4 10             	add    esp,0x10
c00184f9:	8d 76 00             	lea    esi,[esi+0x0]
c00184fc:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0018502:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0018505:	74 11                	je     c0018518 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0018507:	83 ec 0c             	sub    esp,0xc
c001850a:	68 7b fa 01 c0       	push   0xc001fa7b
c001850f:	e8 03 7e ff ff       	call   c0010317 <KePanic(char const*)>
c0018514:	83 c4 10             	add    esp,0x10
c0018517:	90                   	nop
c0018518:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001851e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0018521:	74 11                	je     c0018534 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0018523:	83 ec 0c             	sub    esp,0xc
c0018526:	68 7b fa 01 c0       	push   0xc001fa7b
c001852b:	e8 e7 7d ff ff       	call   c0010317 <KePanic(char const*)>
c0018530:	83 c4 10             	add    esp,0x10
c0018533:	90                   	nop
c0018534:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018537:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001853b:	7e 07                	jle    c0018544 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001853d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018541:	8d 76 00             	lea    esi,[esi+0x0]
c0018544:	85 ff                	test   edi,edi
c0018546:	7e 1c                	jle    c0018564 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0018548:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001854f:	31 c0                	xor    eax,eax
c0018551:	8d 76 00             	lea    esi,[esi+0x0]
c0018554:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018557:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001855a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001855d:	83 c0 04             	add    eax,0x4
c0018560:	39 c1                	cmp    ecx,eax
c0018562:	75 f0                	jne    c0018554 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0018564:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018567:	50                   	push   eax
c0018568:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001856b:	29 f8                	sub    eax,edi
c001856d:	c1 e0 02             	shl    eax,0x2
c0018570:	50                   	push   eax
c0018571:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018574:	50                   	push   eax
c0018575:	52                   	push   edx
c0018576:	e8 65 7e fe ff       	call   c00003e0 <memmove>
c001857b:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001857e:	83 c4 10             	add    esp,0x10
c0018581:	89 f8                	mov    eax,edi
c0018583:	5b                   	pop    ebx
c0018584:	5e                   	pop    esi
c0018585:	5f                   	pop    edi
c0018586:	c3                   	ret    
c0018587:	90                   	nop

c0018588 <PCI::open(int, int, void*)>:
c0018588:	83 ec 18             	sub    esp,0x18
c001858b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001858f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018593:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018599:	8b 10                	mov    edx,DWORD PTR [eax]
c001859b:	50                   	push   eax
c001859c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001859f:	31 c0                	xor    eax,eax
c00185a1:	83 c4 1c             	add    esp,0x1c
c00185a4:	c3                   	ret    
c00185a5:	90                   	nop

c00185a6 <PCI::close(int, int, void*)>:
c00185a6:	31 c0                	xor    eax,eax
c00185a8:	c3                   	ret    
c00185a9:	90                   	nop

c00185aa <PCI::PCI()>:
c00185aa:	83 ec 0c             	sub    esp,0xc
c00185ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185b1:	83 ec 08             	sub    esp,0x8
c00185b4:	68 97 fa 01 c0       	push   0xc001fa97
c00185b9:	50                   	push   eax
c00185ba:	e8 e1 2d ff ff       	call   c000b3a0 <Bus::Bus(char const*)>
c00185bf:	83 c4 10             	add    esp,0x10
c00185c2:	ba 40 fb 01 c0       	mov    edx,0xc001fb40
c00185c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185cb:	89 10                	mov    DWORD PTR [eax],edx
c00185cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185d1:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00185db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185df:	a3 40 6b 02 c0       	mov    ds:0xc0026b40,eax
c00185e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185e8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185ee:	31 d2                	xor    edx,edx
c00185f0:	88 c2                	mov    dl,al
c00185f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185f6:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00185fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018601:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018607:	31 d2                	xor    edx,edx
c0018609:	88 c2                	mov    dl,al
c001860b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001860f:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018618:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001861e:	8d 50 01             	lea    edx,[eax+0x1]
c0018621:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018625:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001862b:	31 d2                	xor    edx,edx
c001862d:	88 c2                	mov    dl,al
c001862f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018633:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0018637:	83 c9 c0             	or     ecx,0xffffffc0
c001863a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001863e:	90                   	nop
c001863f:	83 c4 0c             	add    esp,0xc
c0018642:	c3                   	ret    
c0018643:	90                   	nop

c0018644 <PCI::readBAR8(unsigned int, int)>:
c0018644:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001864c:	f6 c2 01             	test   dl,0x1
c001864f:	74 07                	je     c0018658 <PCI::readBAR8(unsigned int, int)+0x14>
c0018651:	83 e2 fc             	and    edx,0xfffffffc
c0018654:	01 c2                	add    edx,eax
c0018656:	ec                   	in     al,dx
c0018657:	c3                   	ret    
c0018658:	83 e2 f0             	and    edx,0xfffffff0
c001865b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001865e:	c3                   	ret    
c001865f:	90                   	nop

c0018660 <PCI::readBAR16(unsigned int, int)>:
c0018660:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018664:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018668:	f6 c2 01             	test   dl,0x1
c001866b:	74 08                	je     c0018675 <PCI::readBAR16(unsigned int, int)+0x15>
c001866d:	83 e2 fc             	and    edx,0xfffffffc
c0018670:	01 c2                	add    edx,eax
c0018672:	66 ed                	in     ax,dx
c0018674:	c3                   	ret    
c0018675:	83 e2 f0             	and    edx,0xfffffff0
c0018678:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001867c:	c3                   	ret    
c001867d:	90                   	nop

c001867e <PCI::readBAR32(unsigned int, int)>:
c001867e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018682:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018686:	f6 c2 01             	test   dl,0x1
c0018689:	74 07                	je     c0018692 <PCI::readBAR32(unsigned int, int)+0x14>
c001868b:	83 e2 fc             	and    edx,0xfffffffc
c001868e:	01 c2                	add    edx,eax
c0018690:	ed                   	in     eax,dx
c0018691:	c3                   	ret    
c0018692:	83 e2 f0             	and    edx,0xfffffff0
c0018695:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018698:	c3                   	ret    
c0018699:	90                   	nop

c001869a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001869a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001869e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186a6:	f6 c2 01             	test   dl,0x1
c00186a9:	74 07                	je     c00186b2 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00186ab:	83 e2 fc             	and    edx,0xfffffffc
c00186ae:	01 ca                	add    edx,ecx
c00186b0:	ee                   	out    dx,al
c00186b1:	c3                   	ret    
c00186b2:	83 e2 f0             	and    edx,0xfffffff0
c00186b5:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00186b8:	c3                   	ret    
c00186b9:	90                   	nop

c00186ba <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00186ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186c6:	f6 c2 01             	test   dl,0x1
c00186c9:	74 08                	je     c00186d3 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00186cb:	83 e2 fc             	and    edx,0xfffffffc
c00186ce:	01 ca                	add    edx,ecx
c00186d0:	66 ef                	out    dx,ax
c00186d2:	c3                   	ret    
c00186d3:	83 e2 f0             	and    edx,0xfffffff0
c00186d6:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00186da:	c3                   	ret    
c00186db:	90                   	nop

c00186dc <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00186dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186e8:	f6 c2 01             	test   dl,0x1
c00186eb:	74 07                	je     c00186f4 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00186ed:	83 e2 fc             	and    edx,0xfffffffc
c00186f0:	01 ca                	add    edx,ecx
c00186f2:	ef                   	out    dx,eax
c00186f3:	c3                   	ret    
c00186f4:	83 e2 f0             	and    edx,0xfffffff0
c00186f7:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00186fa:	c3                   	ret    
c00186fb:	90                   	nop

c00186fc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00186fc:	55                   	push   ebp
c00186fd:	57                   	push   edi
c00186fe:	56                   	push   esi
c00186ff:	53                   	push   ebx
c0018700:	83 ec 0c             	sub    esp,0xc
c0018703:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018707:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001870b:	89 f0                	mov    eax,esi
c001870d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018711:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018715:	3c 07                	cmp    al,0x7
c0018717:	76 10                	jbe    c0018729 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0018719:	83 ec 0c             	sub    esp,0xc
c001871c:	68 9f fa 01 c0       	push   0xc001fa9f
c0018721:	e8 f1 7b ff ff       	call   c0010317 <KePanic(char const*)>
c0018726:	83 c4 10             	add    esp,0x10
c0018729:	80 fb 0f             	cmp    bl,0xf
c001872c:	76 10                	jbe    c001873e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001872e:	83 ec 0c             	sub    esp,0xc
c0018731:	68 cf fa 01 c0       	push   0xc001facf
c0018736:	e8 dc 7b ff ff       	call   c0010317 <KePanic(char const*)>
c001873b:	83 c4 10             	add    esp,0x10
c001873e:	8d 04 36             	lea    eax,[esi+esi*1]
c0018741:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018746:	83 c8 f0             	or     eax,0xfffffff0
c0018749:	ee                   	out    dx,al
c001874a:	ba fa 0c 00 00       	mov    edx,0xcfa
c001874f:	89 e8                	mov    eax,ebp
c0018751:	ee                   	out    dx,al
c0018752:	83 c4 0c             	add    esp,0xc
c0018755:	89 d8                	mov    eax,ebx
c0018757:	66 81 e7 fc 00       	and    di,0xfc
c001875c:	5b                   	pop    ebx
c001875d:	c1 e0 08             	shl    eax,0x8
c0018760:	5e                   	pop    esi
c0018761:	09 f8                	or     eax,edi
c0018763:	5f                   	pop    edi
c0018764:	66 0d 00 c0          	or     ax,0xc000
c0018768:	5d                   	pop    ebp
c0018769:	c3                   	ret    

c001876a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001876a:	57                   	push   edi
c001876b:	56                   	push   esi
c001876c:	53                   	push   ebx
c001876d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018771:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018775:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001877b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001877f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018783:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018787:	83 ff 01             	cmp    edi,0x1
c001878a:	75 3e                	jne    c00187ca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001878c:	89 de                	mov    esi,ebx
c001878e:	0f b6 c0             	movzx  eax,al
c0018791:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018797:	c1 e0 10             	shl    eax,0x10
c001879a:	0f b6 c9             	movzx  ecx,cl
c001879d:	09 f0                	or     eax,esi
c001879f:	c1 e1 08             	shl    ecx,0x8
c00187a2:	0f b6 d2             	movzx  edx,dl
c00187a5:	09 c8                	or     eax,ecx
c00187a7:	c1 e2 0b             	shl    edx,0xb
c00187aa:	09 d0                	or     eax,edx
c00187ac:	ba f8 0c 00 00       	mov    edx,0xcf8
c00187b1:	0d 00 00 00 80       	or     eax,0x80000000
c00187b6:	ef                   	out    dx,eax
c00187b7:	ba fc 0c 00 00       	mov    edx,0xcfc
c00187bc:	ed                   	in     eax,dx
c00187bd:	83 e3 02             	and    ebx,0x2
c00187c0:	0f b6 cb             	movzx  ecx,bl
c00187c3:	c1 e1 03             	shl    ecx,0x3
c00187c6:	d3 e8                	shr    eax,cl
c00187c8:	eb 43                	jmp    c001880d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00187ca:	83 ff 02             	cmp    edi,0x2
c00187cd:	75 2c                	jne    c00187fb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00187cf:	83 ec 0c             	sub    esp,0xc
c00187d2:	0f b6 c9             	movzx  ecx,cl
c00187d5:	0f b6 d2             	movzx  edx,dl
c00187d8:	0f b6 fb             	movzx  edi,bl
c00187db:	0f b6 c0             	movzx  eax,al
c00187de:	57                   	push   edi
c00187df:	51                   	push   ecx
c00187e0:	52                   	push   edx
c00187e1:	50                   	push   eax
c00187e2:	56                   	push   esi
c00187e3:	e8 14 ff ff ff       	call   c00186fc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187e8:	89 c2                	mov    edx,eax
c00187ea:	ed                   	in     eax,dx
c00187eb:	83 e3 02             	and    ebx,0x2
c00187ee:	83 c4 20             	add    esp,0x20
c00187f1:	0f b6 cb             	movzx  ecx,bl
c00187f4:	c1 e1 03             	shl    ecx,0x3
c00187f7:	d3 e8                	shr    eax,cl
c00187f9:	eb 12                	jmp    c001880d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00187fb:	83 ec 0c             	sub    esp,0xc
c00187fe:	68 ff fa 01 c0       	push   0xc001faff
c0018803:	e8 0f 7b ff ff       	call   c0010317 <KePanic(char const*)>
c0018808:	83 c4 10             	add    esp,0x10
c001880b:	31 c0                	xor    eax,eax
c001880d:	5b                   	pop    ebx
c001880e:	5e                   	pop    esi
c001880f:	5f                   	pop    edi
c0018810:	c3                   	ret    
c0018811:	90                   	nop

c0018812 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0018812:	83 ec 18             	sub    esp,0x18
c0018815:	6a 00                	push   0x0
c0018817:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001881c:	50                   	push   eax
c001881d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018822:	50                   	push   eax
c0018823:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018828:	50                   	push   eax
c0018829:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001882d:	e8 38 ff ff ff       	call   c001876a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018832:	83 c4 2c             	add    esp,0x2c
c0018835:	c3                   	ret    

c0018836 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0018836:	83 ec 18             	sub    esp,0x18
c0018839:	6a 0e                	push   0xe
c001883b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018840:	50                   	push   eax
c0018841:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018846:	50                   	push   eax
c0018847:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001884c:	50                   	push   eax
c001884d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018851:	e8 14 ff ff ff       	call   c001876a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018856:	83 c4 2c             	add    esp,0x2c
c0018859:	0f b6 c0             	movzx  eax,al
c001885c:	c3                   	ret    
c001885d:	90                   	nop

c001885e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001885e:	55                   	push   ebp
c001885f:	57                   	push   edi
c0018860:	56                   	push   esi
c0018861:	53                   	push   ebx
c0018862:	83 ec 18             	sub    esp,0x18
c0018865:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001886a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001886f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018874:	6a 0a                	push   0xa
c0018876:	56                   	push   esi
c0018877:	55                   	push   ebp
c0018878:	57                   	push   edi
c0018879:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001887d:	e8 e8 fe ff ff       	call   c001876a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018882:	83 c4 14             	add    esp,0x14
c0018885:	89 c3                	mov    ebx,eax
c0018887:	6a 0a                	push   0xa
c0018889:	0f b6 db             	movzx  ebx,bl
c001888c:	56                   	push   esi
c001888d:	55                   	push   ebp
c001888e:	57                   	push   edi
c001888f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018893:	e8 d2 fe ff ff       	call   c001876a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018898:	83 c4 2c             	add    esp,0x2c
c001889b:	25 00 ff 00 00       	and    eax,0xff00
c00188a0:	09 d8                	or     eax,ebx
c00188a2:	5b                   	pop    ebx
c00188a3:	5e                   	pop    esi
c00188a4:	5f                   	pop    edi
c00188a5:	5d                   	pop    ebp
c00188a6:	c3                   	ret    
c00188a7:	90                   	nop

c00188a8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00188a8:	83 ec 18             	sub    esp,0x18
c00188ab:	6a 08                	push   0x8
c00188ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188b2:	50                   	push   eax
c00188b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188b8:	50                   	push   eax
c00188b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188be:	50                   	push   eax
c00188bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188c3:	e8 a2 fe ff ff       	call   c001876a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188c8:	83 c4 2c             	add    esp,0x2c
c00188cb:	0f b6 c4             	movzx  eax,ah
c00188ce:	c3                   	ret    
c00188cf:	90                   	nop

c00188d0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00188d0:	83 ec 18             	sub    esp,0x18
c00188d3:	6a 08                	push   0x8
c00188d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188da:	50                   	push   eax
c00188db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188e0:	50                   	push   eax
c00188e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188e6:	50                   	push   eax
c00188e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188eb:	e8 7a fe ff ff       	call   c001876a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188f0:	83 c4 2c             	add    esp,0x2c
c00188f3:	c3                   	ret    

c00188f4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00188f4:	83 ec 18             	sub    esp,0x18
c00188f7:	6a 3c                	push   0x3c
c00188f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188fe:	50                   	push   eax
c00188ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018904:	50                   	push   eax
c0018905:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001890a:	50                   	push   eax
c001890b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001890f:	e8 56 fe ff ff       	call   c001876a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018914:	83 c4 2c             	add    esp,0x2c
c0018917:	c3                   	ret    

c0018918 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018918:	83 ec 18             	sub    esp,0x18
c001891b:	6a 18                	push   0x18
c001891d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018922:	50                   	push   eax
c0018923:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018928:	50                   	push   eax
c0018929:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001892e:	50                   	push   eax
c001892f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018933:	e8 32 fe ff ff       	call   c001876a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018938:	83 c4 2c             	add    esp,0x2c
c001893b:	0f b6 c4             	movzx  eax,ah
c001893e:	c3                   	ret    
c001893f:	90                   	nop

c0018940 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018940:	55                   	push   ebp
c0018941:	57                   	push   edi
c0018942:	56                   	push   esi
c0018943:	53                   	push   ebx
c0018944:	83 ec 28             	sub    esp,0x28
c0018947:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001894b:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018950:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018955:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001895a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018961:	8d 43 12             	lea    eax,[ebx+0x12]
c0018964:	83 c3 10             	add    ebx,0x10
c0018967:	0f b6 c0             	movzx  eax,al
c001896a:	0f b6 db             	movzx  ebx,bl
c001896d:	50                   	push   eax
c001896e:	51                   	push   ecx
c001896f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018973:	57                   	push   edi
c0018974:	55                   	push   ebp
c0018975:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018979:	e8 ec fd ff ff       	call   c001876a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001897e:	83 c4 14             	add    esp,0x14
c0018981:	89 c6                	mov    esi,eax
c0018983:	53                   	push   ebx
c0018984:	c1 e6 10             	shl    esi,0x10
c0018987:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001898b:	51                   	push   ecx
c001898c:	57                   	push   edi
c001898d:	55                   	push   ebp
c001898e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018992:	e8 d3 fd ff ff       	call   c001876a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018997:	83 c4 3c             	add    esp,0x3c
c001899a:	0f b7 c0             	movzx  eax,ax
c001899d:	5b                   	pop    ebx
c001899e:	09 f0                	or     eax,esi
c00189a0:	5e                   	pop    esi
c00189a1:	5f                   	pop    edi
c00189a2:	5d                   	pop    ebp
c00189a3:	c3                   	ret    

c00189a4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00189a4:	55                   	push   ebp
c00189a5:	57                   	push   edi
c00189a6:	56                   	push   esi
c00189a7:	53                   	push   ebx
c00189a8:	83 ec 0c             	sub    esp,0xc
c00189ab:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00189af:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00189b3:	89 f5                	mov    ebp,esi
c00189b5:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00189bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189bf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00189c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00189cb:	83 f9 01             	cmp    ecx,0x1
c00189ce:	75 5d                	jne    c0018a2d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00189d0:	0f b6 c8             	movzx  ecx,al
c00189d3:	0f b6 d2             	movzx  edx,dl
c00189d6:	c1 e1 10             	shl    ecx,0x10
c00189d9:	c1 e2 0b             	shl    edx,0xb
c00189dc:	89 f0                	mov    eax,esi
c00189de:	25 fc 00 00 00       	and    eax,0xfc
c00189e3:	09 c1                	or     ecx,eax
c00189e5:	89 e8                	mov    eax,ebp
c00189e7:	0f b6 c0             	movzx  eax,al
c00189ea:	c1 e0 08             	shl    eax,0x8
c00189ed:	09 c1                	or     ecx,eax
c00189ef:	09 d1                	or     ecx,edx
c00189f1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00189f6:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00189fc:	89 c8                	mov    eax,ecx
c00189fe:	ef                   	out    dx,eax
c00189ff:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018a04:	ed                   	in     eax,dx
c0018a05:	0f b7 db             	movzx  ebx,bx
c0018a08:	83 e6 02             	and    esi,0x2
c0018a0b:	74 0a                	je     c0018a17 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018a0d:	0f b7 d0             	movzx  edx,ax
c0018a10:	c1 e3 10             	shl    ebx,0x10
c0018a13:	09 d3                	or     ebx,edx
c0018a15:	eb 05                	jmp    c0018a1c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0018a17:	66 31 c0             	xor    ax,ax
c0018a1a:	09 c3                	or     ebx,eax
c0018a1c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018a21:	89 c8                	mov    eax,ecx
c0018a23:	ef                   	out    dx,eax
c0018a24:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018a29:	89 d8                	mov    eax,ebx
c0018a2b:	eb 41                	jmp    c0018a6e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018a2d:	83 f9 02             	cmp    ecx,0x2
c0018a30:	75 45                	jne    c0018a77 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018a32:	83 ec 0c             	sub    esp,0xc
c0018a35:	0f b6 d2             	movzx  edx,dl
c0018a38:	89 f1                	mov    ecx,esi
c0018a3a:	0f b6 c0             	movzx  eax,al
c0018a3d:	0f b6 f1             	movzx  esi,cl
c0018a40:	89 e9                	mov    ecx,ebp
c0018a42:	56                   	push   esi
c0018a43:	0f b6 c9             	movzx  ecx,cl
c0018a46:	51                   	push   ecx
c0018a47:	52                   	push   edx
c0018a48:	50                   	push   eax
c0018a49:	57                   	push   edi
c0018a4a:	e8 ad fc ff ff       	call   c00186fc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a4f:	89 c2                	mov    edx,eax
c0018a51:	ed                   	in     eax,dx
c0018a52:	83 c4 20             	add    esp,0x20
c0018a55:	0f b7 db             	movzx  ebx,bx
c0018a58:	f6 c2 02             	test   dl,0x2
c0018a5b:	74 0c                	je     c0018a69 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018a5d:	0f b7 c8             	movzx  ecx,ax
c0018a60:	89 d8                	mov    eax,ebx
c0018a62:	c1 e0 10             	shl    eax,0x10
c0018a65:	09 c8                	or     eax,ecx
c0018a67:	eb 05                	jmp    c0018a6e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018a69:	66 31 c0             	xor    ax,ax
c0018a6c:	09 d8                	or     eax,ebx
c0018a6e:	ef                   	out    dx,eax
c0018a6f:	83 c4 0c             	add    esp,0xc
c0018a72:	5b                   	pop    ebx
c0018a73:	5e                   	pop    esi
c0018a74:	5f                   	pop    edi
c0018a75:	5d                   	pop    ebp
c0018a76:	c3                   	ret    
c0018a77:	c7 44 24 20 ff fa 01 c0 	mov    DWORD PTR [esp+0x20],0xc001faff
c0018a7f:	83 c4 0c             	add    esp,0xc
c0018a82:	5b                   	pop    ebx
c0018a83:	5e                   	pop    esi
c0018a84:	5f                   	pop    edi
c0018a85:	5d                   	pop    ebp
c0018a86:	e9 8c 78 ff ff       	jmp    c0010317 <KePanic(char const*)>
c0018a8b:	90                   	nop

c0018a8c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018a8c:	55                   	push   ebp
c0018a8d:	57                   	push   edi
c0018a8e:	56                   	push   esi
c0018a8f:	53                   	push   ebx
c0018a90:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018a96:	80 3d 4c 6b 02 c0 00 	cmp    BYTE PTR ds:0xc0026b4c,0x0
c0018a9d:	0f 85 84 00 00 00    	jne    c0018b27 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018aa3:	83 ec 0c             	sub    esp,0xc
c0018aa6:	68 14 01 00 00       	push   0x114
c0018aab:	e8 c5 ed fe ff       	call   c0007875 <malloc>
c0018ab0:	83 c4 0c             	add    esp,0xc
c0018ab3:	89 c3                	mov    ebx,eax
c0018ab5:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c0018abb:	68 05 fb 01 c0       	push   0xc001fb05
c0018ac0:	50                   	push   eax
c0018ac1:	e8 be 20 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0018ac6:	5a                   	pop    edx
c0018ac7:	59                   	pop    ecx
c0018ac8:	6a 01                	push   0x1
c0018aca:	53                   	push   ebx
c0018acb:	e8 74 21 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c0018ad0:	83 c4 0c             	add    esp,0xc
c0018ad3:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018ad7:	50                   	push   eax
c0018ad8:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018adc:	50                   	push   eax
c0018add:	53                   	push   ebx
c0018ade:	e8 0d 24 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0018ae3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ae7:	40                   	inc    eax
c0018ae8:	89 04 24             	mov    DWORD PTR [esp],eax
c0018aeb:	e8 85 ed fe ff       	call   c0007875 <malloc>
c0018af0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018af4:	a3 48 6b 02 c0       	mov    ds:0xc0026b48,eax
c0018af9:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018afd:	5e                   	pop    esi
c0018afe:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018b00:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018b04:	51                   	push   ecx
c0018b05:	50                   	push   eax
c0018b06:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018b0a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018b0e:	53                   	push   ebx
c0018b0f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018b12:	83 c4 14             	add    esp,0x14
c0018b15:	53                   	push   ebx
c0018b16:	e8 87 21 ff ff       	call   c000aca2 <File::close()>
c0018b1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b1f:	83 c4 10             	add    esp,0x10
c0018b22:	a3 44 6b 02 c0       	mov    ds:0xc0026b44,eax
c0018b27:	a1 44 6b 02 c0       	mov    eax,ds:0xc0026b44
c0018b2c:	8b 15 48 6b 02 c0    	mov    edx,DWORD PTR ds:0xc0026b48
c0018b32:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b35:	31 ff                	xor    edi,edi
c0018b37:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018b3f:	31 f6                	xor    esi,esi
c0018b41:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018b46:	31 db                	xor    ebx,ebx
c0018b48:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018b50:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018b55:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018b5c:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018b60:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018b67:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018b6b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018b6e:	0f 8e 6b 01 00 00    	jle    c0018cdf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018b74:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018b77:	d4 40                	aam    0x40
c0018b79:	d5 39                	aad    0x39
c0018b7b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b7f:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018b83:	d4 40                	aam    0x40
c0018b85:	d5 39                	aad    0x39
c0018b87:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018b8b:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018b8f:	d4 40                	aam    0x40
c0018b91:	d5 39                	aad    0x39
c0018b93:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018b97:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018b9b:	d4 40                	aam    0x40
c0018b9d:	d5 39                	aad    0x39
c0018b9f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018ba3:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018ba7:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018bab:	3c 56                	cmp    al,0x56
c0018bad:	74 45                	je     c0018bf4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018baf:	d4 40                	aam    0x40
c0018bb1:	d5 39                	aad    0x39
c0018bb3:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018bb6:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018bba:	0f b6 c9             	movzx  ecx,cl
c0018bbd:	c1 e1 04             	shl    ecx,0x4
c0018bc0:	d4 40                	aam    0x40
c0018bc2:	d5 39                	aad    0x39
c0018bc4:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018bc7:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018bcb:	0f b6 db             	movzx  ebx,bl
c0018bce:	09 cb                	or     ebx,ecx
c0018bd0:	c1 e3 04             	shl    ebx,0x4
c0018bd3:	d4 40                	aam    0x40
c0018bd5:	d5 39                	aad    0x39
c0018bd7:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018bda:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018bde:	0f b6 c9             	movzx  ecx,cl
c0018be1:	09 cb                	or     ebx,ecx
c0018be3:	c1 e3 04             	shl    ebx,0x4
c0018be6:	89 d9                	mov    ecx,ebx
c0018be8:	d4 40                	aam    0x40
c0018bea:	d5 39                	aad    0x39
c0018bec:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018bef:	0f b6 db             	movzx  ebx,bl
c0018bf2:	09 cb                	or     ebx,ecx
c0018bf4:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018bf8:	80 f9 44             	cmp    cl,0x44
c0018bfb:	74 47                	je     c0018c44 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018bfd:	88 c8                	mov    al,cl
c0018bff:	d4 40                	aam    0x40
c0018c01:	d5 39                	aad    0x39
c0018c03:	83 e8 30             	sub    eax,0x30
c0018c06:	0f b6 e8             	movzx  ebp,al
c0018c09:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018c0d:	c1 e5 04             	shl    ebp,0x4
c0018c10:	d4 40                	aam    0x40
c0018c12:	d5 39                	aad    0x39
c0018c14:	83 e8 30             	sub    eax,0x30
c0018c17:	0f b6 f0             	movzx  esi,al
c0018c1a:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018c1e:	09 ee                	or     esi,ebp
c0018c20:	c1 e6 04             	shl    esi,0x4
c0018c23:	d4 40                	aam    0x40
c0018c25:	d5 39                	aad    0x39
c0018c27:	83 e8 30             	sub    eax,0x30
c0018c2a:	0f b6 e8             	movzx  ebp,al
c0018c2d:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018c31:	09 ee                	or     esi,ebp
c0018c33:	c1 e6 04             	shl    esi,0x4
c0018c36:	89 f5                	mov    ebp,esi
c0018c38:	d4 40                	aam    0x40
c0018c3a:	d5 39                	aad    0x39
c0018c3c:	83 e8 30             	sub    eax,0x30
c0018c3f:	0f b6 f0             	movzx  esi,al
c0018c42:	09 ee                	or     esi,ebp
c0018c44:	83 c7 10             	add    edi,0x10
c0018c47:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018c4b:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018c4e:	3c 0a                	cmp    al,0xa
c0018c50:	74 09                	je     c0018c5b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018c52:	45                   	inc    ebp
c0018c53:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018c56:	75 16                	jne    c0018c6e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018c58:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018c5b:	3c 0a                	cmp    al,0xa
c0018c5d:	0f 94 c0             	sete   al
c0018c60:	0f b6 c0             	movzx  eax,al
c0018c63:	01 c7                	add    edi,eax
c0018c65:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018c6a:	75 0c                	jne    c0018c78 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018c6c:	eb 15                	jmp    c0018c83 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018c6e:	47                   	inc    edi
c0018c6f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018c72:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018c76:	eb d3                	jmp    c0018c4b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018c78:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018c7d:	0f 85 e8 fe ff ff    	jne    c0018b6b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c83:	80 f9 44             	cmp    cl,0x44
c0018c86:	74 0b                	je     c0018c93 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018c88:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018c8d:	0f 85 d8 fe ff ff    	jne    c0018b6b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c93:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018c97:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c9b:	c1 e1 04             	shl    ecx,0x4
c0018c9e:	83 e8 30             	sub    eax,0x30
c0018ca1:	09 c8                	or     eax,ecx
c0018ca3:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018ca7:	0f 85 be fe ff ff    	jne    c0018b6b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018cad:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018cb1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018cb5:	c1 e1 04             	shl    ecx,0x4
c0018cb8:	83 e8 30             	sub    eax,0x30
c0018cbb:	09 c8                	or     eax,ecx
c0018cbd:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018cc1:	0f 85 a4 fe ff ff    	jne    c0018b6b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018cc7:	50                   	push   eax
c0018cc8:	50                   	push   eax
c0018cc9:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ccd:	50                   	push   eax
c0018cce:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018cd5:	e8 26 79 fe ff       	call   c0000600 <strcpy>
c0018cda:	83 c4 10             	add    esp,0x10
c0018cdd:	eb 15                	jmp    c0018cf4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018cdf:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018ce6:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018cf1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018cf4:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018cfb:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018d01:	5b                   	pop    ebx
c0018d02:	5e                   	pop    esi
c0018d03:	5f                   	pop    edi
c0018d04:	5d                   	pop    ebp
c0018d05:	c3                   	ret    

c0018d06 <PCI::checkBus(unsigned char)>:
c0018d06:	56                   	push   esi
c0018d07:	53                   	push   ebx
c0018d08:	31 f6                	xor    esi,esi
c0018d0a:	51                   	push   ecx
c0018d0b:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018d0f:	0f b6 c3             	movzx  eax,bl
c0018d12:	52                   	push   edx
c0018d13:	56                   	push   esi
c0018d14:	46                   	inc    esi
c0018d15:	50                   	push   eax
c0018d16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018d1a:	e8 f3 02 00 00       	call   c0019012 <PCI::checkDevice(unsigned char, unsigned char)>
c0018d1f:	83 c4 10             	add    esp,0x10
c0018d22:	83 fe 20             	cmp    esi,0x20
c0018d25:	75 e8                	jne    c0018d0f <PCI::checkBus(unsigned char)+0x9>
c0018d27:	58                   	pop    eax
c0018d28:	5b                   	pop    ebx
c0018d29:	5e                   	pop    esi
c0018d2a:	c3                   	ret    
c0018d2b:	90                   	nop

c0018d2c <PCI::foundDevice(PCIDeviceInfo)>:
c0018d2c:	55                   	push   ebp
c0018d2d:	57                   	push   edi
c0018d2e:	56                   	push   esi
c0018d2f:	53                   	push   ebx
c0018d30:	83 ec 1c             	sub    esp,0x1c
c0018d33:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018d37:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018d3d:	0f 84 52 01 00 00    	je     c0018e95 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d43:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018d47:	66 81 f9 06 04       	cmp    cx,0x406
c0018d4c:	75 2c                	jne    c0018d7a <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018d4e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018d53:	50                   	push   eax
c0018d54:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018d59:	50                   	push   eax
c0018d5a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018d5f:	50                   	push   eax
c0018d60:	56                   	push   esi
c0018d61:	e8 b2 fb ff ff       	call   c0018918 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018d66:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018d6a:	0f b6 c0             	movzx  eax,al
c0018d6d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018d71:	83 c4 2c             	add    esp,0x2c
c0018d74:	5b                   	pop    ebx
c0018d75:	5e                   	pop    esi
c0018d76:	5f                   	pop    edi
c0018d77:	5d                   	pop    ebp
c0018d78:	eb 8c                	jmp    c0018d06 <PCI::checkBus(unsigned char)>
c0018d7a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018d7e:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018d84:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018d88:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018d8c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018d90:	88 d3                	mov    bl,dl
c0018d92:	85 c0                	test   eax,eax
c0018d94:	74 33                	je     c0018dc9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018d96:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018d99:	85 d2                	test   edx,edx
c0018d9b:	74 28                	je     c0018dc5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d9d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018da3:	31 ef                	xor    edi,ebp
c0018da5:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018dab:	75 18                	jne    c0018dc5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018dad:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018db1:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018db7:	75 0c                	jne    c0018dc5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018db9:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018dbf:	0f 84 d0 00 00 00    	je     c0018e95 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018dc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0018dc7:	eb c9                	jmp    c0018d92 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018dc9:	66 81 f9 01 06       	cmp    cx,0x601
c0018dce:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018dd2:	75 19                	jne    c0018ded <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018dd4:	83 ec 0c             	sub    esp,0xc
c0018dd7:	68 64 01 00 00       	push   0x164
c0018ddc:	e8 94 ea fe ff       	call   c0007875 <malloc>
c0018de1:	89 c5                	mov    ebp,eax
c0018de3:	89 04 24             	mov    DWORD PTR [esp],eax
c0018de6:	e8 47 0e 00 00       	call   c0019c32 <SATABus::SATABus()>
c0018deb:	eb 1e                	jmp    c0018e0b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018ded:	66 81 f9 01 01       	cmp    cx,0x101
c0018df2:	75 60                	jne    c0018e54 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018df4:	83 ec 0c             	sub    esp,0xc
c0018df7:	68 70 02 00 00       	push   0x270
c0018dfc:	e8 74 ea fe ff       	call   c0007875 <malloc>
c0018e01:	89 c5                	mov    ebp,eax
c0018e03:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e06:	e8 cb 02 00 00       	call   c00190d6 <IDE::IDE()>
c0018e0b:	58                   	pop    eax
c0018e0c:	5a                   	pop    edx
c0018e0d:	55                   	push   ebp
c0018e0e:	56                   	push   esi
c0018e0f:	e8 38 2c ff ff       	call   c000ba4c <Device::addChild(Device*)>
c0018e14:	83 ec 1c             	sub    esp,0x1c
c0018e17:	b9 09 00 00 00       	mov    ecx,0x9
c0018e1c:	fc                   	cld    
c0018e1d:	89 e7                	mov    edi,esp
c0018e1f:	89 de                	mov    esi,ebx
c0018e21:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e23:	55                   	push   ebp
c0018e24:	e8 69 2b ff ff       	call   c000b992 <Device::preOpenPCI(PCIDeviceInfo)>
c0018e29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018e2c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018e30:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018e38:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018e40:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018e48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018e4b:	83 c4 4c             	add    esp,0x4c
c0018e4e:	5b                   	pop    ebx
c0018e4f:	5e                   	pop    esi
c0018e50:	5f                   	pop    edi
c0018e51:	5d                   	pop    ebp
c0018e52:	ff e0                	jmp    eax
c0018e54:	83 ec 0c             	sub    esp,0xc
c0018e57:	68 58 01 00 00       	push   0x158
c0018e5c:	e8 14 ea fe ff       	call   c0007875 <malloc>
c0018e61:	89 c5                	mov    ebp,eax
c0018e63:	58                   	pop    eax
c0018e64:	5a                   	pop    edx
c0018e65:	68 1e fb 01 c0       	push   0xc001fb1e
c0018e6a:	55                   	push   ebp
c0018e6b:	e8 7a 2e ff ff       	call   c000bcea <DriverlessDevice::DriverlessDevice(char const*)>
c0018e70:	59                   	pop    ecx
c0018e71:	5f                   	pop    edi
c0018e72:	55                   	push   ebp
c0018e73:	56                   	push   esi
c0018e74:	e8 d3 2b ff ff       	call   c000ba4c <Device::addChild(Device*)>
c0018e79:	b9 09 00 00 00       	mov    ecx,0x9
c0018e7e:	fc                   	cld    
c0018e7f:	89 df                	mov    edi,ebx
c0018e81:	89 de                	mov    esi,ebx
c0018e83:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e85:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018e89:	83 c4 2c             	add    esp,0x2c
c0018e8c:	5b                   	pop    ebx
c0018e8d:	5e                   	pop    esi
c0018e8e:	5f                   	pop    edi
c0018e8f:	5d                   	pop    ebp
c0018e90:	e9 fd 2a ff ff       	jmp    c000b992 <Device::preOpenPCI(PCIDeviceInfo)>
c0018e95:	83 c4 1c             	add    esp,0x1c
c0018e98:	5b                   	pop    ebx
c0018e99:	5e                   	pop    esi
c0018e9a:	5f                   	pop    edi
c0018e9b:	5d                   	pop    ebp
c0018e9c:	c3                   	ret    
c0018e9d:	90                   	nop

c0018e9e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018e9e:	55                   	push   ebp
c0018e9f:	57                   	push   edi
c0018ea0:	56                   	push   esi
c0018ea1:	53                   	push   ebx
c0018ea2:	83 ec 68             	sub    esp,0x68
c0018ea5:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018ea9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018eb4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018ebb:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018ec0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018ec4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018ecb:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018ed0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018ed4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018ed9:	6a 0c                	push   0xc
c0018edb:	57                   	push   edi
c0018edc:	53                   	push   ebx
c0018edd:	56                   	push   esi
c0018ede:	55                   	push   ebp
c0018edf:	e8 86 f8 ff ff       	call   c001876a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ee4:	83 c4 20             	add    esp,0x20
c0018ee7:	57                   	push   edi
c0018ee8:	53                   	push   ebx
c0018ee9:	56                   	push   esi
c0018eea:	55                   	push   ebp
c0018eeb:	e8 6e f9 ff ff       	call   c001885e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018ef0:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018ef5:	57                   	push   edi
c0018ef6:	53                   	push   ebx
c0018ef7:	56                   	push   esi
c0018ef8:	55                   	push   ebp
c0018ef9:	e8 f6 f9 ff ff       	call   c00188f4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018efe:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018f02:	83 c4 14             	add    esp,0x14
c0018f05:	6a 3c                	push   0x3c
c0018f07:	57                   	push   edi
c0018f08:	53                   	push   ebx
c0018f09:	56                   	push   esi
c0018f0a:	55                   	push   ebp
c0018f0b:	e8 5a f8 ff ff       	call   c001876a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f10:	0f b6 c4             	movzx  eax,ah
c0018f13:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018f17:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018f1b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018f1f:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0018f24:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018f2a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018f30:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018f34:	83 c4 20             	add    esp,0x20
c0018f37:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f3c:	74 30                	je     c0018f6e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018f3e:	31 c0                	xor    eax,eax
c0018f40:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018f44:	7e 28                	jle    c0018f6e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018f46:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018f4e:	39 cb                	cmp    ebx,ecx
c0018f50:	75 19                	jne    c0018f6b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f52:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018f5a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018f5e:	75 0b                	jne    c0018f6b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f60:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018f67:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018f6b:	40                   	inc    eax
c0018f6c:	eb d2                	jmp    c0018f40 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018f6e:	31 d2                	xor    edx,edx
c0018f70:	83 ec 0c             	sub    esp,0xc
c0018f73:	57                   	push   edi
c0018f74:	53                   	push   ebx
c0018f75:	56                   	push   esi
c0018f76:	52                   	push   edx
c0018f77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018f7b:	55                   	push   ebp
c0018f7c:	e8 bf f9 ff ff       	call   c0018940 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f81:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f85:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018f89:	42                   	inc    edx
c0018f8a:	83 c4 20             	add    esp,0x20
c0018f8d:	83 fa 06             	cmp    edx,0x6
c0018f90:	75 de                	jne    c0018f70 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018f92:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f97:	83 ec 0c             	sub    esp,0xc
c0018f9a:	86 e0                	xchg   al,ah
c0018f9c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018fa1:	6a 02                	push   0x2
c0018fa3:	57                   	push   edi
c0018fa4:	53                   	push   ebx
c0018fa5:	56                   	push   esi
c0018fa6:	55                   	push   ebp
c0018fa7:	e8 be f7 ff ff       	call   c001876a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018fac:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018fb1:	83 c4 20             	add    esp,0x20
c0018fb4:	57                   	push   edi
c0018fb5:	53                   	push   ebx
c0018fb6:	56                   	push   esi
c0018fb7:	55                   	push   ebp
c0018fb8:	e8 eb f8 ff ff       	call   c00188a8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018fbd:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018fc1:	57                   	push   edi
c0018fc2:	53                   	push   ebx
c0018fc3:	56                   	push   esi
c0018fc4:	55                   	push   ebp
c0018fc5:	e8 48 f8 ff ff       	call   c0018812 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fca:	b9 09 00 00 00       	mov    ecx,0x9
c0018fcf:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018fd4:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018fd8:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018fdc:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018fe0:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018fe4:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018fe8:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018fec:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018ff0:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018ff4:	83 ec 0c             	sub    esp,0xc
c0018ff7:	fc                   	cld    
c0018ff8:	89 e7                	mov    edi,esp
c0018ffa:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018ffe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0019000:	55                   	push   ebp
c0019001:	e8 26 fd ff ff       	call   c0018d2c <PCI::foundDevice(PCIDeviceInfo)>
c0019006:	81 c4 8c 00 00 00    	add    esp,0x8c
c001900c:	5b                   	pop    ebx
c001900d:	5e                   	pop    esi
c001900e:	5f                   	pop    edi
c001900f:	5d                   	pop    ebp
c0019010:	c3                   	ret    
c0019011:	90                   	nop

c0019012 <PCI::checkDevice(unsigned char, unsigned char)>:
c0019012:	55                   	push   ebp
c0019013:	57                   	push   edi
c0019014:	56                   	push   esi
c0019015:	53                   	push   ebx
c0019016:	83 ec 0c             	sub    esp,0xc
c0019019:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001901d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0019022:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0019027:	6a 00                	push   0x0
c0019029:	56                   	push   esi
c001902a:	57                   	push   edi
c001902b:	55                   	push   ebp
c001902c:	e8 e1 f7 ff ff       	call   c0018812 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019031:	6a 00                	push   0x0
c0019033:	56                   	push   esi
c0019034:	57                   	push   edi
c0019035:	55                   	push   ebp
c0019036:	e8 63 fe ff ff       	call   c0018e9e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001903b:	83 c4 20             	add    esp,0x20
c001903e:	6a 00                	push   0x0
c0019040:	56                   	push   esi
c0019041:	57                   	push   edi
c0019042:	55                   	push   ebp
c0019043:	e8 ee f7 ff ff       	call   c0018836 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019048:	83 c4 10             	add    esp,0x10
c001904b:	84 c0                	test   al,al
c001904d:	79 27                	jns    c0019076 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001904f:	bb 01 00 00 00       	mov    ebx,0x1
c0019054:	53                   	push   ebx
c0019055:	56                   	push   esi
c0019056:	57                   	push   edi
c0019057:	55                   	push   ebp
c0019058:	e8 b5 f7 ff ff       	call   c0018812 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001905d:	83 c4 10             	add    esp,0x10
c0019060:	66 40                	inc    ax
c0019062:	74 0c                	je     c0019070 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0019064:	53                   	push   ebx
c0019065:	56                   	push   esi
c0019066:	57                   	push   edi
c0019067:	55                   	push   ebp
c0019068:	e8 31 fe ff ff       	call   c0018e9e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001906d:	83 c4 10             	add    esp,0x10
c0019070:	43                   	inc    ebx
c0019071:	83 fb 08             	cmp    ebx,0x8
c0019074:	75 de                	jne    c0019054 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0019076:	83 c4 0c             	add    esp,0xc
c0019079:	5b                   	pop    ebx
c001907a:	5e                   	pop    esi
c001907b:	5f                   	pop    edi
c001907c:	5d                   	pop    ebp
c001907d:	c3                   	ret    

c001907e <PCI::detect()>:
c001907e:	56                   	push   esi
c001907f:	53                   	push   ebx
c0019080:	53                   	push   ebx
c0019081:	31 db                	xor    ebx,ebx
c0019083:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019087:	6a 00                	push   0x0
c0019089:	6a 00                	push   0x0
c001908b:	6a 00                	push   0x0
c001908d:	56                   	push   esi
c001908e:	e8 a3 f7 ff ff       	call   c0018836 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019093:	83 c4 10             	add    esp,0x10
c0019096:	a8 80                	test   al,0x80
c0019098:	75 21                	jne    c00190bb <PCI::detect()+0x3d>
c001909a:	51                   	push   ecx
c001909b:	51                   	push   ecx
c001909c:	6a 00                	push   0x0
c001909e:	56                   	push   esi
c001909f:	e8 62 fc ff ff       	call   c0018d06 <PCI::checkBus(unsigned char)>
c00190a4:	83 c4 10             	add    esp,0x10
c00190a7:	eb 24                	jmp    c00190cd <PCI::detect()+0x4f>
c00190a9:	52                   	push   edx
c00190aa:	52                   	push   edx
c00190ab:	53                   	push   ebx
c00190ac:	43                   	inc    ebx
c00190ad:	56                   	push   esi
c00190ae:	e8 53 fc ff ff       	call   c0018d06 <PCI::checkBus(unsigned char)>
c00190b3:	83 c4 10             	add    esp,0x10
c00190b6:	83 fb 08             	cmp    ebx,0x8
c00190b9:	74 12                	je     c00190cd <PCI::detect()+0x4f>
c00190bb:	53                   	push   ebx
c00190bc:	6a 00                	push   0x0
c00190be:	6a 00                	push   0x0
c00190c0:	56                   	push   esi
c00190c1:	e8 4c f7 ff ff       	call   c0018812 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00190c6:	83 c4 10             	add    esp,0x10
c00190c9:	66 40                	inc    ax
c00190cb:	74 dc                	je     c00190a9 <PCI::detect()+0x2b>
c00190cd:	58                   	pop    eax
c00190ce:	5b                   	pop    ebx
c00190cf:	5e                   	pop    esi
c00190d0:	c3                   	ret    
c00190d1:	90                   	nop

c00190d2 <IDE::close(int, int, void*)>:
c00190d2:	83 c8 ff             	or     eax,0xffffffff
c00190d5:	c3                   	ret    

c00190d6 <IDE::IDE()>:
c00190d6:	83 ec 0c             	sub    esp,0xc
c00190d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190dd:	83 ec 08             	sub    esp,0x8
c00190e0:	68 64 fb 01 c0       	push   0xc001fb64
c00190e5:	50                   	push   eax
c00190e6:	e8 a5 2c ff ff       	call   c000bd90 <HardDiskController::HardDiskController(char const*)>
c00190eb:	83 c4 10             	add    esp,0x10
c00190ee:	ba f4 fb 01 c0       	mov    edx,0xc001fbf4
c00190f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190f7:	89 10                	mov    DWORD PTR [eax],edx
c00190f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190fd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0019104:	90                   	nop
c0019105:	83 c4 0c             	add    esp,0xc
c0019108:	c3                   	ret    
c0019109:	90                   	nop

c001910a <IDE::prepareInterrupt(unsigned char)>:
c001910a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001910f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019113:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001911b:	c3                   	ret    

c001911c <selectDrive(unsigned char, unsigned char)>:
c001911c:	c3                   	ret    
c001911d:	90                   	nop

c001911e <IDE::getBase(unsigned char)>:
c001911e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0019123:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019127:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001912f:	c3                   	ret    

c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0019130:	55                   	push   ebp
c0019131:	57                   	push   edi
c0019132:	56                   	push   esi
c0019133:	53                   	push   ebx
c0019134:	83 ec 1c             	sub    esp,0x1c
c0019137:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001913b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001913f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0019142:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019146:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001914a:	80 f9 03             	cmp    cl,0x3
c001914d:	77 51                	ja     c00191a0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001914f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019153:	0f b6 f2             	movzx  esi,dl
c0019156:	0f b6 db             	movzx  ebx,bl
c0019159:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001915c:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0019160:	83 ca 80             	or     edx,0xffffff80
c0019163:	0f b6 d2             	movzx  edx,dl
c0019166:	52                   	push   edx
c0019167:	6a 0c                	push   0xc
c0019169:	56                   	push   esi
c001916a:	57                   	push   edi
c001916b:	e8 c0 ff ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019170:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0019175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019179:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001917d:	ee                   	out    dx,al
c001917e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0019183:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0019187:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001918b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001918f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019197:	83 c4 2c             	add    esp,0x2c
c001919a:	5b                   	pop    ebx
c001919b:	5e                   	pop    esi
c001919c:	5f                   	pop    edi
c001919d:	5d                   	pop    ebp
c001919e:	eb 90                	jmp    c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191a0:	80 fb 07             	cmp    bl,0x7
c00191a3:	77 12                	ja     c00191b7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00191a5:	0f b6 d2             	movzx  edx,dl
c00191a8:	0f b6 db             	movzx  ebx,bl
c00191ab:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00191b3:	89 da                	mov    edx,ebx
c00191b5:	eb 2f                	jmp    c00191e6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00191b7:	80 fb 0d             	cmp    bl,0xd
c00191ba:	77 13                	ja     c00191cf <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00191bc:	0f b6 d2             	movzx  edx,dl
c00191bf:	0f b6 db             	movzx  ebx,bl
c00191c2:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00191c9:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00191cd:	eb 17                	jmp    c00191e6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00191cf:	80 fb 15             	cmp    bl,0x15
c00191d2:	77 13                	ja     c00191e7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00191d4:	0f b6 d2             	movzx  edx,dl
c00191d7:	0f b6 db             	movzx  ebx,bl
c00191da:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00191e2:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00191e6:	ee                   	out    dx,al
c00191e7:	83 c4 1c             	add    esp,0x1c
c00191ea:	5b                   	pop    ebx
c00191eb:	5e                   	pop    esi
c00191ec:	5f                   	pop    edi
c00191ed:	5d                   	pop    ebp
c00191ee:	c3                   	ret    
c00191ef:	90                   	nop

c00191f0 <IDE::read(unsigned char, unsigned char)>:
c00191f0:	55                   	push   ebp
c00191f1:	57                   	push   edi
c00191f2:	56                   	push   esi
c00191f3:	53                   	push   ebx
c00191f4:	83 ec 1c             	sub    esp,0x1c
c00191f7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00191fb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00191ff:	8d 43 f8             	lea    eax,[ebx-0x8]
c0019202:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019206:	3c 03                	cmp    al,0x3
c0019208:	77 43                	ja     c001924d <IDE::read(unsigned char, unsigned char)+0x5d>
c001920a:	0f b6 f2             	movzx  esi,dl
c001920d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019210:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0019214:	83 c8 80             	or     eax,0xffffff80
c0019217:	0f b6 c0             	movzx  eax,al
c001921a:	50                   	push   eax
c001921b:	6a 0c                	push   0xc
c001921d:	56                   	push   esi
c001921e:	57                   	push   edi
c001921f:	e8 0c ff ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019224:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0019229:	0f b6 c3             	movzx  eax,bl
c001922c:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0019230:	ec                   	in     al,dx
c0019231:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019235:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001923a:	52                   	push   edx
c001923b:	6a 0c                	push   0xc
c001923d:	56                   	push   esi
c001923e:	57                   	push   edi
c001923f:	e8 ec fe ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019244:	83 c4 20             	add    esp,0x20
c0019247:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001924b:	eb 49                	jmp    c0019296 <IDE::read(unsigned char, unsigned char)+0xa6>
c001924d:	80 fb 07             	cmp    bl,0x7
c0019250:	77 12                	ja     c0019264 <IDE::read(unsigned char, unsigned char)+0x74>
c0019252:	0f b6 d2             	movzx  edx,dl
c0019255:	0f b6 c3             	movzx  eax,bl
c0019258:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0019260:	89 c2                	mov    edx,eax
c0019262:	eb 31                	jmp    c0019295 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019264:	80 fb 0d             	cmp    bl,0xd
c0019267:	77 13                	ja     c001927c <IDE::read(unsigned char, unsigned char)+0x8c>
c0019269:	0f b6 d2             	movzx  edx,dl
c001926c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0019273:	0f b6 d3             	movzx  edx,bl
c0019276:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001927a:	eb 19                	jmp    c0019295 <IDE::read(unsigned char, unsigned char)+0xa5>
c001927c:	31 c0                	xor    eax,eax
c001927e:	80 fb 15             	cmp    bl,0x15
c0019281:	77 13                	ja     c0019296 <IDE::read(unsigned char, unsigned char)+0xa6>
c0019283:	0f b6 d2             	movzx  edx,dl
c0019286:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001928e:	0f b6 d3             	movzx  edx,bl
c0019291:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019295:	ec                   	in     al,dx
c0019296:	83 c4 1c             	add    esp,0x1c
c0019299:	5b                   	pop    ebx
c001929a:	5e                   	pop    esi
c001929b:	5f                   	pop    edi
c001929c:	5d                   	pop    ebp
c001929d:	c3                   	ret    

c001929e <IDE::waitInterrupt(unsigned char)>:
c001929e:	57                   	push   edi
c001929f:	56                   	push   esi
c00192a0:	31 f6                	xor    esi,esi
c00192a2:	53                   	push   ebx
c00192a3:	83 ec 10             	sub    esp,0x10
c00192a6:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00192aa:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00192ae:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00192b2:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00192b7:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c00192be:	84 db                	test   bl,bl
c00192c0:	75 33                	jne    c00192f5 <IDE::waitInterrupt(unsigned char)+0x57>
c00192c2:	52                   	push   edx
c00192c3:	6a 0c                	push   0xc
c00192c5:	50                   	push   eax
c00192c6:	57                   	push   edi
c00192c7:	e8 24 ff ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c00192cc:	83 c4 10             	add    esp,0x10
c00192cf:	a8 01                	test   al,0x1
c00192d1:	75 2a                	jne    c00192fd <IDE::waitInterrupt(unsigned char)+0x5f>
c00192d3:	f7 c6 04 00 00 00    	test   esi,0x4
c00192d9:	75 12                	jne    c00192ed <IDE::waitInterrupt(unsigned char)+0x4f>
c00192db:	83 fe 32             	cmp    esi,0x32
c00192de:	7e 0d                	jle    c00192ed <IDE::waitInterrupt(unsigned char)+0x4f>
c00192e0:	83 ec 0c             	sub    esp,0xc
c00192e3:	6a 64                	push   0x64
c00192e5:	e8 4a a8 ff ff       	call   c0013b34 <milliTenthSleep(unsigned int)>
c00192ea:	83 c4 10             	add    esp,0x10
c00192ed:	83 fe 3c             	cmp    esi,0x3c
c00192f0:	74 0b                	je     c00192fd <IDE::waitInterrupt(unsigned char)+0x5f>
c00192f2:	46                   	inc    esi
c00192f3:	eb bd                	jmp    c00192b2 <IDE::waitInterrupt(unsigned char)+0x14>
c00192f5:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c00192fd:	83 c4 10             	add    esp,0x10
c0019300:	88 d8                	mov    al,bl
c0019302:	5b                   	pop    ebx
c0019303:	5e                   	pop    esi
c0019304:	5f                   	pop    edi
c0019305:	c3                   	ret    

c0019306 <ideChannel0IRQHandler(regs*, void*)>:
c0019306:	83 ec 10             	sub    esp,0x10
c0019309:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001930d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0019314:	6a 07                	push   0x7
c0019316:	6a 00                	push   0x0
c0019318:	50                   	push   eax
c0019319:	e8 d2 fe ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c001931e:	83 c4 1c             	add    esp,0x1c
c0019321:	c3                   	ret    

c0019322 <ideChannel1IRQHandler(regs*, void*)>:
c0019322:	83 ec 10             	sub    esp,0x10
c0019325:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019329:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0019330:	6a 07                	push   0x7
c0019332:	6a 01                	push   0x1
c0019334:	50                   	push   eax
c0019335:	e8 b6 fe ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c001933a:	83 c4 1c             	add    esp,0x1c
c001933d:	c3                   	ret    

c001933e <IDE::enableIRQs(unsigned char, bool)>:
c001933e:	57                   	push   edi
c001933f:	56                   	push   esi
c0019340:	be 04 00 00 00       	mov    esi,0x4
c0019345:	53                   	push   ebx
c0019346:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001934b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001934f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0019354:	0f 94 c0             	sete   al
c0019357:	01 c0                	add    eax,eax
c0019359:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0019360:	0f b6 c0             	movzx  eax,al
c0019363:	50                   	push   eax
c0019364:	6a 0c                	push   0xc
c0019366:	57                   	push   edi
c0019367:	53                   	push   ebx
c0019368:	e8 c3 fd ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001936d:	83 c4 10             	add    esp,0x10
c0019370:	50                   	push   eax
c0019371:	6a 0c                	push   0xc
c0019373:	57                   	push   edi
c0019374:	53                   	push   ebx
c0019375:	e8 76 fe ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c001937a:	83 c4 10             	add    esp,0x10
c001937d:	4e                   	dec    esi
c001937e:	75 f0                	jne    c0019370 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0019380:	5b                   	pop    ebx
c0019381:	5e                   	pop    esi
c0019382:	5f                   	pop    edi
c0019383:	c3                   	ret    

c0019384 <IDE::open(int, int, void*)>:
c0019384:	55                   	push   ebp
c0019385:	57                   	push   edi
c0019386:	56                   	push   esi
c0019387:	53                   	push   ebx
c0019388:	83 ec 1c             	sub    esp,0x1c
c001938b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001938f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019398:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00193a1:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00193a8:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00193af:	0f 85 b0 02 00 00    	jne    c0019665 <IDE::open(int, int, void*)+0x2e1>
c00193b5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00193bb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00193bf:	83 e0 7f             	and    eax,0x7f
c00193c2:	3c 05                	cmp    al,0x5
c00193c4:	74 04                	je     c00193ca <IDE::open(int, int, void*)+0x46>
c00193c6:	3c 0f                	cmp    al,0xf
c00193c8:	75 32                	jne    c00193fc <IDE::open(int, int, void*)+0x78>
c00193ca:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00193d0:	83 e0 fc             	and    eax,0xfffffffc
c00193d3:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00193da:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00193e0:	83 e0 fc             	and    eax,0xfffffffc
c00193e3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00193ea:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00193f0:	83 e0 fc             	and    eax,0xfffffffc
c00193f3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00193fa:	eb 14                	jmp    c0019410 <IDE::open(int, int, void*)+0x8c>
c00193fc:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0019406:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019410:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0019417:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001941e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019422:	89 c6                	mov    esi,eax
c0019424:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019429:	c1 e6 10             	shl    esi,0x10
c001942c:	89 e8                	mov    eax,ebp
c001942e:	89 fa                	mov    edx,edi
c0019430:	c1 e0 0b             	shl    eax,0xb
c0019433:	09 f0                	or     eax,esi
c0019435:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001943c:	c1 e6 08             	shl    esi,0x8
c001943f:	09 c6                	or     esi,eax
c0019441:	89 f0                	mov    eax,esi
c0019443:	0d 08 00 00 80       	or     eax,0x80000008
c0019448:	ef                   	out    dx,eax
c0019449:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001944e:	89 ca                	mov    edx,ecx
c0019450:	ed                   	in     eax,dx
c0019451:	c1 e8 10             	shr    eax,0x10
c0019454:	3d ff ff 00 00       	cmp    eax,0xffff
c0019459:	0f 84 f5 00 00 00    	je     c0019554 <IDE::open(int, int, void*)+0x1d0>
c001945f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0019465:	89 fa                	mov    edx,edi
c0019467:	89 f0                	mov    eax,esi
c0019469:	ef                   	out    dx,eax
c001946a:	b0 fe                	mov    al,0xfe
c001946c:	89 ca                	mov    edx,ecx
c001946e:	ee                   	out    dx,al
c001946f:	89 f0                	mov    eax,esi
c0019471:	89 fa                	mov    edx,edi
c0019473:	ef                   	out    dx,eax
c0019474:	89 ca                	mov    edx,ecx
c0019476:	ed                   	in     eax,dx
c0019477:	3c fe                	cmp    al,0xfe
c0019479:	0f 85 a9 00 00 00    	jne    c0019528 <IDE::open(int, int, void*)+0x1a4>
c001947f:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c0019485:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001948c:	74 33                	je     c00194c1 <IDE::open(int, int, void*)+0x13d>
c001948e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019494:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019498:	40                   	inc    eax
c0019499:	83 ec 0c             	sub    esp,0xc
c001949c:	0f b6 c0             	movzx  eax,al
c001949f:	50                   	push   eax
c00194a0:	55                   	push   ebp
c00194a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194a5:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c00194ab:	51                   	push   ecx
c00194ac:	e8 7f 53 ff ff       	call   c000e830 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00194b1:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00194b6:	83 c4 1c             	add    esp,0x1c
c00194b9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00194bf:	eb 0a                	jmp    c00194cb <IDE::open(int, int, void*)+0x147>
c00194c1:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00194cb:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00194d2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00194d9:	c1 e1 10             	shl    ecx,0x10
c00194dc:	c1 e0 08             	shl    eax,0x8
c00194df:	bf f8 0c 00 00       	mov    edi,0xcf8
c00194e4:	09 c1                	or     ecx,eax
c00194e6:	89 fa                	mov    edx,edi
c00194e8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00194ef:	c1 e0 0b             	shl    eax,0xb
c00194f2:	09 c1                	or     ecx,eax
c00194f4:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00194fa:	89 c8                	mov    eax,ecx
c00194fc:	ef                   	out    dx,eax
c00194fd:	be fc 0c 00 00       	mov    esi,0xcfc
c0019502:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0019508:	89 f2                	mov    edx,esi
c001950a:	ee                   	out    dx,al
c001950b:	89 c8                	mov    eax,ecx
c001950d:	89 fa                	mov    edx,edi
c001950f:	ef                   	out    dx,eax
c0019510:	89 f2                	mov    edx,esi
c0019512:	ed                   	in     eax,dx
c0019513:	0f b6 c0             	movzx  eax,al
c0019516:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001951c:	74 46                	je     c0019564 <IDE::open(int, int, void*)+0x1e0>
c001951e:	83 ec 0c             	sub    esp,0xc
c0019521:	68 7c fb 01 c0       	push   0xc001fb7c
c0019526:	eb 34                	jmp    c001955c <IDE::open(int, int, void*)+0x1d8>
c0019528:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0019531:	75 17                	jne    c001954a <IDE::open(int, int, void*)+0x1c6>
c0019533:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0019538:	74 07                	je     c0019541 <IDE::open(int, int, void*)+0x1bd>
c001953a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001953f:	75 09                	jne    c001954a <IDE::open(int, int, void*)+0x1c6>
c0019541:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019548:	eb 1a                	jmp    c0019564 <IDE::open(int, int, void*)+0x1e0>
c001954a:	83 ec 0c             	sub    esp,0xc
c001954d:	68 84 fb 01 c0       	push   0xc001fb84
c0019552:	eb 08                	jmp    c001955c <IDE::open(int, int, void*)+0x1d8>
c0019554:	83 ec 0c             	sub    esp,0xc
c0019557:	68 b5 fb 01 c0       	push   0xc001fbb5
c001955c:	e8 b6 6d ff ff       	call   c0010317 <KePanic(char const*)>
c0019561:	83 c4 10             	add    esp,0x10
c0019564:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001956b:	79 1a                	jns    c0019587 <IDE::open(int, int, void*)+0x203>
c001956d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0019573:	83 e0 fc             	and    eax,0xfffffffc
c0019576:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001957d:	83 c0 08             	add    eax,0x8
c0019580:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0019587:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001958d:	89 c2                	mov    edx,eax
c001958f:	83 e2 0f             	and    edx,0xf
c0019592:	66 83 fa 08          	cmp    dx,0x8
c0019596:	75 0a                	jne    c00195a2 <IDE::open(int, int, void*)+0x21e>
c0019598:	83 e8 02             	sub    eax,0x2
c001959b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195a2:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00195a8:	89 c2                	mov    edx,eax
c00195aa:	83 e2 0f             	and    edx,0xf
c00195ad:	66 83 fa 08          	cmp    dx,0x8
c00195b1:	75 0a                	jne    c00195bd <IDE::open(int, int, void*)+0x239>
c00195b3:	83 e8 02             	sub    eax,0x2
c00195b6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00195bd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00195c4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00195cb:	89 d0                	mov    eax,edx
c00195cd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195d0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195d4:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00195d8:	8d 4a 01             	lea    ecx,[edx+0x1]
c00195db:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195e0:	0f b6 c9             	movzx  ecx,cl
c00195e3:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00195ea:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00195ed:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00195f1:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00195f5:	8d 50 02             	lea    edx,[eax+0x2]
c00195f8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00195fd:	0f b6 d2             	movzx  edx,dl
c0019600:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0019606:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019609:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001960d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019611:	8d 48 03             	lea    ecx,[eax+0x3]
c0019614:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019619:	0f b6 c9             	movzx  ecx,cl
c001961c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0019622:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019625:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019629:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001962d:	8d 50 04             	lea    edx,[eax+0x4]
c0019630:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0019636:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001963b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0019642:	66 85 f6             	test   si,si
c0019645:	74 5b                	je     c00196a2 <IDE::open(int, int, void*)+0x31e>
c0019647:	0f b6 d2             	movzx  edx,dl
c001964a:	83 c0 05             	add    eax,0x5
c001964d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019650:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019654:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0019658:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001965e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019663:	eb 3d                	jmp    c00196a2 <IDE::open(int, int, void*)+0x31e>
c0019665:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001966b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019672:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019679:	66 05 06 02          	add    ax,0x206
c001967d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019684:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001968b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019692:	66 05 06 02          	add    ax,0x206
c0019696:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001969d:	e9 e5 fe ff ff       	jmp    c0019587 <IDE::open(int, int, void*)+0x203>
c00196a2:	50                   	push   eax
c00196a3:	50                   	push   eax
c00196a4:	6a 00                	push   0x0
c00196a6:	53                   	push   ebx
c00196a7:	e8 5e fa ff ff       	call   c001910a <IDE::prepareInterrupt(unsigned char)>
c00196ac:	5a                   	pop    edx
c00196ad:	59                   	pop    ecx
c00196ae:	6a 01                	push   0x1
c00196b0:	53                   	push   ebx
c00196b1:	e8 54 fa ff ff       	call   c001910a <IDE::prepareInterrupt(unsigned char)>
c00196b6:	83 c4 0c             	add    esp,0xc
c00196b9:	6a 00                	push   0x0
c00196bb:	6a 00                	push   0x0
c00196bd:	53                   	push   ebx
c00196be:	e8 7b fc ff ff       	call   c001933e <IDE::enableIRQs(unsigned char, bool)>
c00196c3:	83 c4 0c             	add    esp,0xc
c00196c6:	6a 00                	push   0x0
c00196c8:	6a 01                	push   0x1
c00196ca:	53                   	push   ebx
c00196cb:	e8 6e fc ff ff       	call   c001933e <IDE::enableIRQs(unsigned char, bool)>
c00196d0:	83 c4 10             	add    esp,0x10
c00196d3:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00196da:	74 34                	je     c0019710 <IDE::open(int, int, void*)+0x38c>
c00196dc:	83 ec 0c             	sub    esp,0xc
c00196df:	53                   	push   ebx
c00196e0:	6a 01                	push   0x1
c00196e2:	68 06 93 01 c0       	push   0xc0019306
c00196e7:	6a 0e                	push   0xe
c00196e9:	53                   	push   ebx
c00196ea:	e8 09 23 ff ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196ef:	83 c4 14             	add    esp,0x14
c00196f2:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00196f8:	53                   	push   ebx
c00196f9:	6a 01                	push   0x1
c00196fb:	68 22 93 01 c0       	push   0xc0019322
c0019700:	6a 0f                	push   0xf
c0019702:	53                   	push   ebx
c0019703:	e8 f0 22 ff ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019708:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001970e:	eb 38                	jmp    c0019748 <IDE::open(int, int, void*)+0x3c4>
c0019710:	83 ec 0c             	sub    esp,0xc
c0019713:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001971d:	53                   	push   ebx
c001971e:	6a 00                	push   0x0
c0019720:	68 06 93 01 c0       	push   0xc0019306
c0019725:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001972b:	53                   	push   ebx
c001972c:	e8 c7 22 ff ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019731:	83 c4 14             	add    esp,0x14
c0019734:	53                   	push   ebx
c0019735:	6a 00                	push   0x0
c0019737:	68 22 93 01 c0       	push   0xc0019322
c001973c:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0019742:	53                   	push   ebx
c0019743:	e8 b0 22 ff ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019748:	8b 03                	mov    eax,DWORD PTR [ebx]
c001974a:	83 c4 20             	add    esp,0x20
c001974d:	83 ec 0c             	sub    esp,0xc
c0019750:	53                   	push   ebx
c0019751:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019754:	83 c4 0c             	add    esp,0xc
c0019757:	6a 07                	push   0x7
c0019759:	6a 00                	push   0x0
c001975b:	53                   	push   ebx
c001975c:	e8 8f fa ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c0019761:	83 c4 0c             	add    esp,0xc
c0019764:	6a 07                	push   0x7
c0019766:	6a 01                	push   0x1
c0019768:	53                   	push   ebx
c0019769:	e8 82 fa ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c001976e:	83 c4 0c             	add    esp,0xc
c0019771:	6a 01                	push   0x1
c0019773:	6a 00                	push   0x0
c0019775:	53                   	push   ebx
c0019776:	e8 c3 fb ff ff       	call   c001933e <IDE::enableIRQs(unsigned char, bool)>
c001977b:	83 c4 0c             	add    esp,0xc
c001977e:	6a 01                	push   0x1
c0019780:	6a 01                	push   0x1
c0019782:	53                   	push   ebx
c0019783:	e8 b6 fb ff ff       	call   c001933e <IDE::enableIRQs(unsigned char, bool)>
c0019788:	83 c4 2c             	add    esp,0x2c
c001978b:	31 c0                	xor    eax,eax
c001978d:	5b                   	pop    ebx
c001978e:	5e                   	pop    esi
c001978f:	5f                   	pop    edi
c0019790:	5d                   	pop    ebp
c0019791:	c3                   	ret    

c0019792 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019792:	55                   	push   ebp
c0019793:	57                   	push   edi
c0019794:	56                   	push   esi
c0019795:	53                   	push   ebx
c0019796:	83 ec 1c             	sub    esp,0x1c
c0019799:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001979d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00197a1:	8d 50 f8             	lea    edx,[eax-0x8]
c00197a4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00197a8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00197ac:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00197b0:	80 fa 03             	cmp    dl,0x3
c00197b3:	77 5d                	ja     c0019812 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00197b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00197b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00197bd:	0f b6 db             	movzx  ebx,bl
c00197c0:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00197c3:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00197c7:	83 ca 80             	or     edx,0xffffff80
c00197ca:	0f b6 d2             	movzx  edx,dl
c00197cd:	52                   	push   edx
c00197ce:	6a 0c                	push   0xc
c00197d0:	53                   	push   ebx
c00197d1:	56                   	push   esi
c00197d2:	e8 59 f9 ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197d7:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00197dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00197e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00197e4:	0f b6 c0             	movzx  eax,al
c00197e7:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00197eb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00197ed:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00197f2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00197f6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00197fa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00197fe:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019806:	83 c4 2c             	add    esp,0x2c
c0019809:	5b                   	pop    ebx
c001980a:	5e                   	pop    esi
c001980b:	5f                   	pop    edi
c001980c:	5d                   	pop    ebp
c001980d:	e9 1e f9 ff ff       	jmp    c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019812:	3c 07                	cmp    al,0x7
c0019814:	77 10                	ja     c0019826 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0019816:	0f b6 db             	movzx  ebx,bl
c0019819:	0f b6 d0             	movzx  edx,al
c001981c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019824:	eb 2d                	jmp    c0019853 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019826:	3c 0d                	cmp    al,0xd
c0019828:	77 13                	ja     c001983d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001982a:	0f b6 db             	movzx  ebx,bl
c001982d:	0f b6 c0             	movzx  eax,al
c0019830:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0019837:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001983b:	eb 16                	jmp    c0019853 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001983d:	3c 15                	cmp    al,0x15
c001983f:	77 14                	ja     c0019855 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019841:	0f b6 db             	movzx  ebx,bl
c0019844:	0f b6 c0             	movzx  eax,al
c0019847:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001984f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0019853:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019855:	83 c4 1c             	add    esp,0x1c
c0019858:	5b                   	pop    ebx
c0019859:	5e                   	pop    esi
c001985a:	5f                   	pop    edi
c001985b:	5d                   	pop    ebp
c001985c:	c3                   	ret    
c001985d:	90                   	nop

c001985e <IDE::detect()>:
c001985e:	55                   	push   ebp
c001985f:	57                   	push   edi
c0019860:	56                   	push   esi
c0019861:	53                   	push   ebx
c0019862:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019868:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001986f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0019876:	0f 85 97 02 00 00    	jne    c0019b13 <IDE::detect()+0x2b5>
c001987c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019883:	31 f6                	xor    esi,esi
c0019885:	31 ed                	xor    ebp,ebp
c0019887:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001988f:	89 e8                	mov    eax,ebp
c0019891:	c1 e0 06             	shl    eax,0x6
c0019894:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001989c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00198a0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00198a4:	c1 e0 04             	shl    eax,0x4
c00198a7:	83 c8 a0             	or     eax,0xffffffa0
c00198aa:	0f b6 c0             	movzx  eax,al
c00198ad:	50                   	push   eax
c00198ae:	6a 06                	push   0x6
c00198b0:	56                   	push   esi
c00198b1:	53                   	push   ebx
c00198b2:	e8 79 f8 ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00198b7:	83 c4 0c             	add    esp,0xc
c00198ba:	6a 0c                	push   0xc
c00198bc:	56                   	push   esi
c00198bd:	53                   	push   ebx
c00198be:	e8 2d f9 ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c00198c3:	83 c4 0c             	add    esp,0xc
c00198c6:	6a 0c                	push   0xc
c00198c8:	56                   	push   esi
c00198c9:	53                   	push   ebx
c00198ca:	e8 21 f9 ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c00198cf:	83 c4 0c             	add    esp,0xc
c00198d2:	6a 0c                	push   0xc
c00198d4:	56                   	push   esi
c00198d5:	53                   	push   ebx
c00198d6:	e8 15 f9 ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c00198db:	83 c4 0c             	add    esp,0xc
c00198de:	6a 0c                	push   0xc
c00198e0:	56                   	push   esi
c00198e1:	53                   	push   ebx
c00198e2:	e8 09 f9 ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c00198e7:	68 ec 00 00 00       	push   0xec
c00198ec:	6a 07                	push   0x7
c00198ee:	56                   	push   esi
c00198ef:	53                   	push   ebx
c00198f0:	e8 3b f8 ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00198f5:	83 c4 1c             	add    esp,0x1c
c00198f8:	6a 0c                	push   0xc
c00198fa:	56                   	push   esi
c00198fb:	53                   	push   ebx
c00198fc:	e8 ef f8 ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c0019901:	83 c4 0c             	add    esp,0xc
c0019904:	6a 0c                	push   0xc
c0019906:	56                   	push   esi
c0019907:	53                   	push   ebx
c0019908:	e8 e3 f8 ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c001990d:	83 c4 0c             	add    esp,0xc
c0019910:	6a 0c                	push   0xc
c0019912:	56                   	push   esi
c0019913:	53                   	push   ebx
c0019914:	e8 d7 f8 ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c0019919:	83 c4 0c             	add    esp,0xc
c001991c:	6a 0c                	push   0xc
c001991e:	56                   	push   esi
c001991f:	53                   	push   ebx
c0019920:	e8 cb f8 ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c0019925:	83 c4 0c             	add    esp,0xc
c0019928:	6a 0c                	push   0xc
c001992a:	56                   	push   esi
c001992b:	53                   	push   ebx
c001992c:	e8 bf f8 ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c0019931:	83 c4 10             	add    esp,0x10
c0019934:	84 c0                	test   al,al
c0019936:	0f 84 5f 01 00 00    	je     c0019a9b <IDE::detect()+0x23d>
c001993c:	31 ff                	xor    edi,edi
c001993e:	50                   	push   eax
c001993f:	6a 0c                	push   0xc
c0019941:	56                   	push   esi
c0019942:	53                   	push   ebx
c0019943:	e8 a8 f8 ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c0019948:	83 c4 10             	add    esp,0x10
c001994b:	a8 01                	test   al,0x1
c001994d:	0f 85 69 01 00 00    	jne    c0019abc <IDE::detect()+0x25e>
c0019953:	84 c0                	test   al,al
c0019955:	78 04                	js     c001995b <IDE::detect()+0xfd>
c0019957:	a8 08                	test   al,0x8
c0019959:	75 23                	jne    c001997e <IDE::detect()+0x120>
c001995b:	47                   	inc    edi
c001995c:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019962:	7e da                	jle    c001993e <IDE::detect()+0xe0>
c0019964:	83 ec 0c             	sub    esp,0xc
c0019967:	6a 32                	push   0x32
c0019969:	e8 c6 a1 ff ff       	call   c0013b34 <milliTenthSleep(unsigned int)>
c001996e:	83 c4 10             	add    esp,0x10
c0019971:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0019977:	75 c5                	jne    c001993e <IDE::detect()+0xe0>
c0019979:	e9 3e 01 00 00       	jmp    c0019abc <IDE::detect()+0x25e>
c001997e:	31 c9                	xor    ecx,ecx
c0019980:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019984:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019988:	83 ec 0c             	sub    esp,0xc
c001998b:	68 80 00 00 00       	push   0x80
c0019990:	57                   	push   edi
c0019991:	6a 00                	push   0x0
c0019993:	56                   	push   esi
c0019994:	53                   	push   ebx
c0019995:	e8 f8 fd ff ff       	call   c0019792 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001999a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001999f:	89 e8                	mov    eax,ebp
c00199a1:	89 d1                	mov    ecx,edx
c00199a3:	c1 e0 06             	shl    eax,0x6
c00199a6:	01 d8                	add    eax,ebx
c00199a8:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00199af:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00199b6:	89 f2                	mov    edx,esi
c00199b8:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00199be:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00199c2:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00199c8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00199cc:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00199d3:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00199db:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00199e2:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00199ea:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00199f0:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00199f7:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00199fd:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019a01:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019a05:	83 c4 20             	add    esp,0x20
c0019a08:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0019a0b:	83 c0 02             	add    eax,0x2
c0019a0e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019a14:	83 c7 02             	add    edi,0x2
c0019a17:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0019a1a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019a20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019a24:	75 e2                	jne    c0019a08 <IDE::detect()+0x1aa>
c0019a26:	89 e8                	mov    eax,ebp
c0019a28:	c1 e0 06             	shl    eax,0x6
c0019a2b:	01 d8                	add    eax,ebx
c0019a2d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019a33:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0019a3a:	66 c1 ea 09          	shr    dx,0x9
c0019a3e:	83 e2 01             	and    edx,0x1
c0019a41:	84 c9                	test   cl,cl
c0019a43:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0019a49:	75 22                	jne    c0019a6d <IDE::detect()+0x20f>
c0019a4b:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019a52:	74 46                	je     c0019a9a <IDE::detect()+0x23c>
c0019a54:	83 ec 0c             	sub    esp,0xc
c0019a57:	68 7c 01 00 00       	push   0x17c
c0019a5c:	e8 14 de fe ff       	call   c0007875 <malloc>
c0019a61:	89 c7                	mov    edi,eax
c0019a63:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a66:	e8 11 05 00 00       	call   c0019f7c <ATA::ATA()>
c0019a6b:	eb 17                	jmp    c0019a84 <IDE::detect()+0x226>
c0019a6d:	83 ec 0c             	sub    esp,0xc
c0019a70:	68 84 01 00 00       	push   0x184
c0019a75:	e8 fb dd fe ff       	call   c0007875 <malloc>
c0019a7a:	89 c7                	mov    edi,eax
c0019a7c:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a7f:	e8 1e 0e 00 00       	call   c001a8a2 <ATAPI::ATAPI()>
c0019a84:	5a                   	pop    edx
c0019a85:	59                   	pop    ecx
c0019a86:	57                   	push   edi
c0019a87:	53                   	push   ebx
c0019a88:	e8 bf 1f ff ff       	call   c000ba4c <Device::addChild(Device*)>
c0019a8d:	8b 07                	mov    eax,DWORD PTR [edi]
c0019a8f:	53                   	push   ebx
c0019a90:	55                   	push   ebp
c0019a91:	6a 00                	push   0x0
c0019a93:	57                   	push   edi
c0019a94:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a97:	83 c4 20             	add    esp,0x20
c0019a9a:	45                   	inc    ebp
c0019a9b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019aa0:	74 0d                	je     c0019aaf <IDE::detect()+0x251>
c0019aa2:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019aaa:	e9 e0 fd ff ff       	jmp    c001988f <IDE::detect()+0x31>
c0019aaf:	4e                   	dec    esi
c0019ab0:	74 61                	je     c0019b13 <IDE::detect()+0x2b5>
c0019ab2:	be 01 00 00 00       	mov    esi,0x1
c0019ab7:	e9 cb fd ff ff       	jmp    c0019887 <IDE::detect()+0x29>
c0019abc:	50                   	push   eax
c0019abd:	6a 04                	push   0x4
c0019abf:	56                   	push   esi
c0019ac0:	53                   	push   ebx
c0019ac1:	e8 2a f7 ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c0019ac6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019aca:	83 c4 0c             	add    esp,0xc
c0019acd:	6a 05                	push   0x5
c0019acf:	56                   	push   esi
c0019ad0:	53                   	push   ebx
c0019ad1:	e8 1a f7 ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c0019ad6:	83 c4 10             	add    esp,0x10
c0019ad9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019add:	80 fa 14             	cmp    dl,0x14
c0019ae0:	75 04                	jne    c0019ae6 <IDE::detect()+0x288>
c0019ae2:	3c eb                	cmp    al,0xeb
c0019ae4:	eb 07                	jmp    c0019aed <IDE::detect()+0x28f>
c0019ae6:	3c 96                	cmp    al,0x96
c0019ae8:	75 b1                	jne    c0019a9b <IDE::detect()+0x23d>
c0019aea:	80 fa 69             	cmp    dl,0x69
c0019aed:	75 ac                	jne    c0019a9b <IDE::detect()+0x23d>
c0019aef:	68 a1 00 00 00       	push   0xa1
c0019af4:	6a 07                	push   0x7
c0019af6:	56                   	push   esi
c0019af7:	53                   	push   ebx
c0019af8:	e8 33 f6 ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019afd:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019b04:	e8 2b a0 ff ff       	call   c0013b34 <milliTenthSleep(unsigned int)>
c0019b09:	83 c4 10             	add    esp,0x10
c0019b0c:	b1 01                	mov    cl,0x1
c0019b0e:	e9 6d fe ff ff       	jmp    c0019980 <IDE::detect()+0x122>
c0019b13:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019b19:	5b                   	pop    ebx
c0019b1a:	5e                   	pop    esi
c0019b1b:	5f                   	pop    edi
c0019b1c:	5d                   	pop    ebp
c0019b1d:	c3                   	ret    

c0019b1e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019b1e:	55                   	push   ebp
c0019b1f:	57                   	push   edi
c0019b20:	56                   	push   esi
c0019b21:	53                   	push   ebx
c0019b22:	83 ec 1c             	sub    esp,0x1c
c0019b25:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019b29:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019b2d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019b31:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019b35:	88 c3                	mov    bl,al
c0019b37:	84 c0                	test   al,al
c0019b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b3d:	0f 84 81 00 00 00    	je     c0019bc4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b43:	83 ec 0c             	sub    esp,0xc
c0019b46:	68 df fb 01 c0       	push   0xc001fbdf
c0019b4b:	e8 be 0a ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0019b50:	83 c4 10             	add    esp,0x10
c0019b53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b57:	3c 01                	cmp    al,0x1
c0019b59:	74 63                	je     c0019bbe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019b5b:	3c 02                	cmp    al,0x2
c0019b5d:	75 53                	jne    c0019bb2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019b5f:	01 f6                	add    esi,esi
c0019b61:	09 ee                	or     esi,ebp
c0019b63:	50                   	push   eax
c0019b64:	89 f0                	mov    eax,esi
c0019b66:	6a 01                	push   0x1
c0019b68:	0f b6 f0             	movzx  esi,al
c0019b6b:	c1 e6 06             	shl    esi,0x6
c0019b6e:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019b76:	50                   	push   eax
c0019b77:	57                   	push   edi
c0019b78:	e8 73 f6 ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c0019b7d:	83 c4 10             	add    esp,0x10
c0019b80:	a8 01                	test   al,0x1
c0019b82:	74 02                	je     c0019b86 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019b84:	b3 07                	mov    bl,0x7
c0019b86:	a8 02                	test   al,0x2
c0019b88:	74 02                	je     c0019b8c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019b8a:	b3 03                	mov    bl,0x3
c0019b8c:	a8 04                	test   al,0x4
c0019b8e:	74 02                	je     c0019b92 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019b90:	b3 14                	mov    bl,0x14
c0019b92:	a8 08                	test   al,0x8
c0019b94:	74 02                	je     c0019b98 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019b96:	b3 03                	mov    bl,0x3
c0019b98:	a8 10                	test   al,0x10
c0019b9a:	74 02                	je     c0019b9e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019b9c:	b3 15                	mov    bl,0x15
c0019b9e:	a8 20                	test   al,0x20
c0019ba0:	74 02                	je     c0019ba4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019ba2:	b3 03                	mov    bl,0x3
c0019ba4:	a8 40                	test   al,0x40
c0019ba6:	74 02                	je     c0019baa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019ba8:	b3 16                	mov    bl,0x16
c0019baa:	84 c0                	test   al,al
c0019bac:	79 16                	jns    c0019bc4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bae:	b3 0d                	mov    bl,0xd
c0019bb0:	eb 12                	jmp    c0019bc4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bb2:	3c 03                	cmp    al,0x3
c0019bb4:	74 0c                	je     c0019bc2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019bb6:	3c 04                	cmp    al,0x4
c0019bb8:	75 0a                	jne    c0019bc4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bba:	b3 08                	mov    bl,0x8
c0019bbc:	eb 06                	jmp    c0019bc4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bbe:	b3 13                	mov    bl,0x13
c0019bc0:	eb 02                	jmp    c0019bc4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bc2:	b3 17                	mov    bl,0x17
c0019bc4:	83 c4 1c             	add    esp,0x1c
c0019bc7:	88 d8                	mov    al,bl
c0019bc9:	5b                   	pop    ebx
c0019bca:	5e                   	pop    esi
c0019bcb:	5f                   	pop    edi
c0019bcc:	5d                   	pop    ebp
c0019bcd:	c3                   	ret    

c0019bce <IDE::polling(unsigned char, unsigned int)>:
c0019bce:	55                   	push   ebp
c0019bcf:	bd 04 00 00 00       	mov    ebp,0x4
c0019bd4:	57                   	push   edi
c0019bd5:	56                   	push   esi
c0019bd6:	53                   	push   ebx
c0019bd7:	83 ec 0c             	sub    esp,0xc
c0019bda:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019bde:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019be2:	0f b6 f3             	movzx  esi,bl
c0019be5:	52                   	push   edx
c0019be6:	6a 0c                	push   0xc
c0019be8:	56                   	push   esi
c0019be9:	57                   	push   edi
c0019bea:	e8 01 f6 ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c0019bef:	83 c4 10             	add    esp,0x10
c0019bf2:	4d                   	dec    ebp
c0019bf3:	75 ed                	jne    c0019be2 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019bf5:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019bfa:	50                   	push   eax
c0019bfb:	6a 0c                	push   0xc
c0019bfd:	56                   	push   esi
c0019bfe:	57                   	push   edi
c0019bff:	e8 ec f5 ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c0019c04:	83 c4 10             	add    esp,0x10
c0019c07:	a8 01                	test   al,0x1
c0019c09:	75 17                	jne    c0019c22 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019c0b:	a8 20                	test   al,0x20
c0019c0d:	75 0f                	jne    c0019c1e <IDE::polling(unsigned char, unsigned int)+0x50>
c0019c0f:	4b                   	dec    ebx
c0019c10:	74 10                	je     c0019c22 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019c12:	84 c0                	test   al,al
c0019c14:	78 e4                	js     c0019bfa <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019c16:	a8 08                	test   al,0x8
c0019c18:	74 e0                	je     c0019bfa <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019c1a:	31 c0                	xor    eax,eax
c0019c1c:	eb 06                	jmp    c0019c24 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019c1e:	b0 01                	mov    al,0x1
c0019c20:	eb 02                	jmp    c0019c24 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019c22:	b0 02                	mov    al,0x2
c0019c24:	83 c4 0c             	add    esp,0xc
c0019c27:	5b                   	pop    ebx
c0019c28:	5e                   	pop    esi
c0019c29:	5f                   	pop    edi
c0019c2a:	5d                   	pop    ebp
c0019c2b:	c3                   	ret    

c0019c2c <SATABus::close(int, int, void*)>:
c0019c2c:	31 c0                	xor    eax,eax
c0019c2e:	c3                   	ret    
c0019c2f:	90                   	nop

c0019c30 <SATABus::detect()>:
c0019c30:	c3                   	ret    
c0019c31:	90                   	nop

c0019c32 <SATABus::SATABus()>:
c0019c32:	83 ec 0c             	sub    esp,0xc
c0019c35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c39:	83 ec 08             	sub    esp,0x8
c0019c3c:	68 18 fc 01 c0       	push   0xc001fc18
c0019c41:	50                   	push   eax
c0019c42:	e8 49 21 ff ff       	call   c000bd90 <HardDiskController::HardDiskController(char const*)>
c0019c47:	83 c4 10             	add    esp,0x10
c0019c4a:	ba 44 fc 01 c0       	mov    edx,0xc001fc44
c0019c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c53:	89 10                	mov    DWORD PTR [eax],edx
c0019c55:	83 ec 0c             	sub    esp,0xc
c0019c58:	6a 50                	push   0x50
c0019c5a:	e8 b0 df fe ff       	call   c0007c0f <Phys::allocateContiguousPages(int)>
c0019c5f:	83 c4 10             	add    esp,0x10
c0019c62:	89 c2                	mov    edx,eax
c0019c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c68:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019c6e:	83 ec 0c             	sub    esp,0xc
c0019c71:	6a 50                	push   0x50
c0019c73:	e8 d9 f6 fe ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c0019c78:	83 c4 10             	add    esp,0x10
c0019c7b:	89 c2                	mov    edx,eax
c0019c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c81:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019c87:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c0019c8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c90:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019c96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c9a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019ca0:	83 ec 0c             	sub    esp,0xc
c0019ca3:	6a 03                	push   0x3
c0019ca5:	6a 50                	push   0x50
c0019ca7:	51                   	push   ecx
c0019ca8:	52                   	push   edx
c0019ca9:	50                   	push   eax
c0019caa:	e8 5f 00 ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019caf:	83 c4 20             	add    esp,0x20
c0019cb2:	90                   	nop
c0019cb3:	83 c4 0c             	add    esp,0xc
c0019cb6:	c3                   	ret    
c0019cb7:	90                   	nop

c0019cb8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019cb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cbc:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019cbf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019cc2:	09 c2                	or     edx,eax
c0019cc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cc8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019cce:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019cd0:	31 c0                	xor    eax,eax
c0019cd2:	c1 e9 08             	shr    ecx,0x8
c0019cd5:	83 e1 0f             	and    ecx,0xf
c0019cd8:	39 c8                	cmp    eax,ecx
c0019cda:	74 0a                	je     c0019ce6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019cdc:	f6 c2 01             	test   dl,0x1
c0019cdf:	74 08                	je     c0019ce9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019ce1:	d1 ea                	shr    edx,1
c0019ce3:	40                   	inc    eax
c0019ce4:	eb f2                	jmp    c0019cd8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019ce6:	83 c8 ff             	or     eax,0xffffffff
c0019ce9:	c3                   	ret    

c0019cea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019cea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019cee:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019cf1:	89 c2                	mov    edx,eax
c0019cf3:	c1 ea 08             	shr    edx,0x8
c0019cf6:	83 e2 0f             	and    edx,0xf
c0019cf9:	fe ca                	dec    dl
c0019cfb:	75 31                	jne    c0019d2e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019cfd:	83 e0 0f             	and    eax,0xf
c0019d00:	3c 03                	cmp    al,0x3
c0019d02:	75 2a                	jne    c0019d2e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019d04:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019d07:	b8 02 00 00 00       	mov    eax,0x2
c0019d0c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019d12:	74 1c                	je     c0019d30 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019d14:	b8 04 00 00 00       	mov    eax,0x4
c0019d19:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019d1f:	74 0f                	je     c0019d30 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019d21:	31 c0                	xor    eax,eax
c0019d23:	83 fa 03             	cmp    edx,0x3
c0019d26:	0f 94 c0             	sete   al
c0019d29:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019d2d:	c3                   	ret    
c0019d2e:	31 c0                	xor    eax,eax
c0019d30:	c3                   	ret    
c0019d31:	90                   	nop

c0019d32 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019d32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d36:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d39:	0f ba e2 0f          	bt     edx,0xf
c0019d3d:	72 f7                	jb     c0019d36 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019d3f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d42:	83 ca 10             	or     edx,0x10
c0019d45:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d48:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d4b:	83 ca 01             	or     edx,0x1
c0019d4e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d51:	c3                   	ret    

c0019d52 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019d52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d56:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d59:	83 e2 fe             	and    edx,0xfffffffe
c0019d5c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d5f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d62:	83 e2 ef             	and    edx,0xffffffef
c0019d65:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d6b:	0f ba e2 0e          	bt     edx,0xe
c0019d6f:	72 f7                	jb     c0019d68 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d71:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d74:	0f ba e2 0f          	bt     edx,0xf
c0019d78:	72 ee                	jb     c0019d68 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d7a:	c3                   	ret    
c0019d7b:	90                   	nop

c0019d7c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019d7c:	55                   	push   ebp
c0019d7d:	57                   	push   edi
c0019d7e:	56                   	push   esi
c0019d7f:	53                   	push   ebx
c0019d80:	83 ec 1c             	sub    esp,0x1c
c0019d83:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019d87:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019d8b:	53                   	push   ebx
c0019d8c:	56                   	push   esi
c0019d8d:	e8 c0 ff ff ff       	call   c0019d52 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019d92:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019d96:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d9c:	83 ec 0c             	sub    esp,0xc
c0019d9f:	c1 e5 0a             	shl    ebp,0xa
c0019da2:	01 e8                	add    eax,ebp
c0019da4:	89 03                	mov    DWORD PTR [ebx],eax
c0019da6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019da8:	68 00 04 00 00       	push   0x400
c0019dad:	6a 00                	push   0x0
c0019daf:	50                   	push   eax
c0019db0:	e8 1b 67 fe ff       	call   c00004d0 <memset>
c0019db5:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019dbb:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019dbf:	01 e8                	add    eax,ebp
c0019dc1:	83 c4 1c             	add    esp,0x1c
c0019dc4:	89 03                	mov    DWORD PTR [ebx],eax
c0019dc6:	c1 e2 08             	shl    edx,0x8
c0019dc9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019dd0:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019dd6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019ddc:	01 f8                	add    eax,edi
c0019dde:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019de1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019de4:	68 00 01 00 00       	push   0x100
c0019de9:	6a 00                	push   0x0
c0019deb:	50                   	push   eax
c0019dec:	e8 df 66 fe ff       	call   c00004d0 <memset>
c0019df1:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019df7:	01 fa                	add    edx,edi
c0019df9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019dfd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019e00:	c1 e7 0d             	shl    edi,0xd
c0019e03:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019e0a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019e10:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019e16:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e1a:	31 ff                	xor    edi,edi
c0019e1c:	83 c4 10             	add    esp,0x10
c0019e1f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019e25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e29:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019e2f:	83 c5 20             	add    ebp,0x20
c0019e32:	01 f8                	add    eax,edi
c0019e34:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019e37:	52                   	push   edx
c0019e38:	68 00 01 00 00       	push   0x100
c0019e3d:	6a 00                	push   0x0
c0019e3f:	50                   	push   eax
c0019e40:	e8 8b 66 fe ff       	call   c00004d0 <memset>
c0019e45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e49:	83 c4 10             	add    esp,0x10
c0019e4c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019e52:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019e59:	01 f8                	add    eax,edi
c0019e5b:	81 c7 00 01 00 00    	add    edi,0x100
c0019e61:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019e64:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019e6a:	75 b3                	jne    c0019e1f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019e6c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e73:	50                   	push   eax
c0019e74:	50                   	push   eax
c0019e75:	53                   	push   ebx
c0019e76:	56                   	push   esi
c0019e77:	e8 b6 fe ff ff       	call   c0019d32 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019e7c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e83:	83 c4 2c             	add    esp,0x2c
c0019e86:	5b                   	pop    ebx
c0019e87:	5e                   	pop    esi
c0019e88:	5f                   	pop    edi
c0019e89:	5d                   	pop    ebp
c0019e8a:	c3                   	ret    
c0019e8b:	90                   	nop

c0019e8c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019e8c:	55                   	push   ebp
c0019e8d:	57                   	push   edi
c0019e8e:	56                   	push   esi
c0019e8f:	53                   	push   ebx
c0019e90:	31 db                	xor    ebx,ebx
c0019e92:	83 ec 0c             	sub    esp,0xc
c0019e95:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e99:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e9d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019ea0:	f7 c7 01 00 00 00    	test   edi,0x1
c0019ea6:	74 7a                	je     c0019f22 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019ea8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019eac:	89 d8                	mov    eax,ebx
c0019eae:	c1 e0 07             	shl    eax,0x7
c0019eb1:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019eb8:	55                   	push   ebp
c0019eb9:	56                   	push   esi
c0019eba:	e8 2b fe ff ff       	call   c0019cea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019ebf:	5a                   	pop    edx
c0019ec0:	83 f8 01             	cmp    eax,0x1
c0019ec3:	59                   	pop    ecx
c0019ec4:	75 21                	jne    c0019ee7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019ec6:	50                   	push   eax
c0019ec7:	53                   	push   ebx
c0019ec8:	55                   	push   ebp
c0019ec9:	56                   	push   esi
c0019eca:	e8 ad fe ff ff       	call   c0019d7c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019ecf:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019ed6:	e8 9a d9 fe ff       	call   c0007875 <malloc>
c0019edb:	89 c5                	mov    ebp,eax
c0019edd:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ee0:	e8 71 10 00 00       	call   c001af56 <SATA::SATA()>
c0019ee5:	eb 24                	jmp    c0019f0b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019ee7:	83 f8 04             	cmp    eax,0x4
c0019eea:	75 36                	jne    c0019f22 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019eec:	51                   	push   ecx
c0019eed:	53                   	push   ebx
c0019eee:	55                   	push   ebp
c0019eef:	56                   	push   esi
c0019ef0:	e8 87 fe ff ff       	call   c0019d7c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019ef5:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019efc:	e8 74 d9 fe ff       	call   c0007875 <malloc>
c0019f01:	89 c5                	mov    ebp,eax
c0019f03:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f06:	e8 a5 17 00 00       	call   c001b6b0 <SATAPI::SATAPI()>
c0019f0b:	58                   	pop    eax
c0019f0c:	5a                   	pop    edx
c0019f0d:	55                   	push   ebp
c0019f0e:	56                   	push   esi
c0019f0f:	e8 38 1b ff ff       	call   c000ba4c <Device::addChild(Device*)>
c0019f14:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f17:	56                   	push   esi
c0019f18:	6a 00                	push   0x0
c0019f1a:	53                   	push   ebx
c0019f1b:	55                   	push   ebp
c0019f1c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019f1f:	83 c4 20             	add    esp,0x20
c0019f22:	d1 ef                	shr    edi,1
c0019f24:	43                   	inc    ebx
c0019f25:	83 fb 20             	cmp    ebx,0x20
c0019f28:	0f 85 72 ff ff ff    	jne    c0019ea0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019f2e:	83 c4 0c             	add    esp,0xc
c0019f31:	5b                   	pop    ebx
c0019f32:	5e                   	pop    esi
c0019f33:	5f                   	pop    edi
c0019f34:	5d                   	pop    ebp
c0019f35:	c3                   	ret    

c0019f36 <SATABus::open(int, int, void*)>:
c0019f36:	83 ec 14             	sub    esp,0x14
c0019f39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f3d:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019f43:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019f49:	52                   	push   edx
c0019f4a:	50                   	push   eax
c0019f4b:	e8 3c ff ff ff       	call   c0019e8c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019f50:	31 c0                	xor    eax,eax
c0019f52:	83 c4 1c             	add    esp,0x1c
c0019f55:	c3                   	ret    

c0019f56 <ATA::close(int, int, void*)>:
c0019f56:	83 ec 0c             	sub    esp,0xc
c0019f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f5d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019f63:	85 c0                	test   eax,eax
c0019f65:	74 0c                	je     c0019f73 <ATA::close(int, int, void*)+0x1d>
c0019f67:	83 ec 0c             	sub    esp,0xc
c0019f6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f6c:	50                   	push   eax
c0019f6d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019f70:	83 c4 10             	add    esp,0x10
c0019f73:	31 c0                	xor    eax,eax
c0019f75:	83 c4 0c             	add    esp,0xc
c0019f78:	c3                   	ret    
c0019f79:	90                   	nop

c0019f7a <ATA::powerSaving(PowerSavingLevel)>:
c0019f7a:	c3                   	ret    
c0019f7b:	90                   	nop

c0019f7c <ATA::ATA()>:
c0019f7c:	83 ec 0c             	sub    esp,0xc
c0019f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f83:	83 ec 04             	sub    esp,0x4
c0019f86:	68 00 02 00 00       	push   0x200
c0019f8b:	68 11 fd 01 c0       	push   0xc001fd11
c0019f90:	50                   	push   eax
c0019f91:	e8 84 1e ff ff       	call   c000be1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f96:	83 c4 10             	add    esp,0x10
c0019f99:	ba 84 fc 01 c0       	mov    edx,0xc001fc84
c0019f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fa2:	89 10                	mov    DWORD PTR [eax],edx
c0019fa4:	90                   	nop
c0019fa5:	83 c4 0c             	add    esp,0xc
c0019fa8:	c3                   	ret    
c0019fa9:	90                   	nop

c0019faa <ATA::flush(bool)>:
c0019faa:	53                   	push   ebx
c0019fab:	83 ec 08             	sub    esp,0x8
c0019fae:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019fb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019fb7:	19 c0                	sbb    eax,eax
c0019fb9:	83 e0 fd             	and    eax,0xfffffffd
c0019fbc:	05 ea 00 00 00       	add    eax,0xea
c0019fc1:	50                   	push   eax
c0019fc2:	6a 07                	push   0x7
c0019fc4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fcb:	50                   	push   eax
c0019fcc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fd2:	e8 59 f1 ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019fd7:	83 c4 0c             	add    esp,0xc
c0019fda:	6a 00                	push   0x0
c0019fdc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fe3:	50                   	push   eax
c0019fe4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fea:	e8 df fb ff ff       	call   c0019bce <IDE::polling(unsigned char, unsigned int)>
c0019fef:	83 c4 18             	add    esp,0x18
c0019ff2:	5b                   	pop    ebx
c0019ff3:	c3                   	ret    

c0019ff4 <ATA::readyForCommand()>:
c0019ff4:	56                   	push   esi
c0019ff5:	53                   	push   ebx
c0019ff6:	53                   	push   ebx
c0019ff7:	31 db                	xor    ebx,ebx
c0019ff9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ffd:	51                   	push   ecx
c0019ffe:	6a 0c                	push   0xc
c001a000:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a007:	50                   	push   eax
c001a008:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a00e:	e8 dd f1 ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c001a013:	83 c4 10             	add    esp,0x10
c001a016:	a8 88                	test   al,0x88
c001a018:	74 1f                	je     c001a039 <ATA::readyForCommand()+0x45>
c001a01a:	43                   	inc    ebx
c001a01b:	83 fb 63             	cmp    ebx,0x63
c001a01e:	7e dd                	jle    c0019ffd <ATA::readyForCommand()+0x9>
c001a020:	83 ec 0c             	sub    esp,0xc
c001a023:	6a 0a                	push   0xa
c001a025:	e8 0a 9b ff ff       	call   c0013b34 <milliTenthSleep(unsigned int)>
c001a02a:	83 c4 10             	add    esp,0x10
c001a02d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001a033:	75 c8                	jne    c0019ffd <ATA::readyForCommand()+0x9>
c001a035:	31 c0                	xor    eax,eax
c001a037:	eb 02                	jmp    c001a03b <ATA::readyForCommand()+0x47>
c001a039:	b0 01                	mov    al,0x1
c001a03b:	5a                   	pop    edx
c001a03c:	5b                   	pop    ebx
c001a03d:	5e                   	pop    esi
c001a03e:	c3                   	ret    
c001a03f:	90                   	nop

c001a040 <ATA::access(unsigned long long, int, void*, bool)>:
c001a040:	55                   	push   ebp
c001a041:	57                   	push   edi
c001a042:	56                   	push   esi
c001a043:	53                   	push   ebx
c001a044:	83 ec 2c             	sub    esp,0x2c
c001a047:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a04b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a04f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a053:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a057:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001a05b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a05f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a063:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001a069:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a06d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a073:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a077:	c1 e0 06             	shl    eax,0x6
c001a07a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001a082:	74 5d                	je     c001a0e1 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001a084:	89 fa                	mov    edx,edi
c001a086:	89 f0                	mov    eax,esi
c001a088:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001a08c:	c1 ea 1c             	shr    edx,0x1c
c001a08f:	89 d1                	mov    ecx,edx
c001a091:	09 c1                	or     ecx,eax
c001a093:	74 25                	je     c001a0ba <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001a095:	31 ed                	xor    ebp,ebp
c001a097:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a09e:	89 fa                	mov    edx,edi
c001a0a0:	89 f0                	mov    eax,esi
c001a0a2:	0f ad d0             	shrd   eax,edx,cl
c001a0a5:	d3 ea                	shr    edx,cl
c001a0a7:	f6 c1 20             	test   cl,0x20
c001a0aa:	74 02                	je     c001a0ae <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a0ac:	89 d0                	mov    eax,edx
c001a0ae:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a0b2:	45                   	inc    ebp
c001a0b3:	83 fd 06             	cmp    ebp,0x6
c001a0b6:	75 df                	jne    c001a097 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a0b8:	eb 76                	jmp    c001a130 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a0ba:	89 f0                	mov    eax,esi
c001a0bc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a0c1:	89 fa                	mov    edx,edi
c001a0c3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a0ca:	0f ac d0 10          	shrd   eax,edx,0x10
c001a0ce:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a0d3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a0d7:	c1 ee 18             	shr    esi,0x18
c001a0da:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a0df:	eb 56                	jmp    c001a137 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a0e1:	6a 00                	push   0x0
c001a0e3:	6a 3f                	push   0x3f
c001a0e5:	57                   	push   edi
c001a0e6:	56                   	push   esi
c001a0e7:	e8 84 29 00 00       	call   c001ca70 <__umoddi3>
c001a0ec:	83 c4 10             	add    esp,0x10
c001a0ef:	40                   	inc    eax
c001a0f0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a0f4:	6a 00                	push   0x0
c001a0f6:	68 f0 03 00 00       	push   0x3f0
c001a0fb:	57                   	push   edi
c001a0fc:	56                   	push   esi
c001a0fd:	e8 6e 28 00 00       	call   c001c970 <__udivdi3>
c001a102:	83 c4 10             	add    esp,0x10
c001a105:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a10a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a111:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a116:	6a 00                	push   0x0
c001a118:	6a 3f                	push   0x3f
c001a11a:	57                   	push   edi
c001a11b:	56                   	push   esi
c001a11c:	e8 4f 28 00 00       	call   c001c970 <__udivdi3>
c001a121:	83 c4 10             	add    esp,0x10
c001a124:	89 c6                	mov    esi,eax
c001a126:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a12b:	83 e6 0f             	and    esi,0xf
c001a12e:	eb 07                	jmp    c001a137 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a130:	31 f6                	xor    esi,esi
c001a132:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a137:	bf 01 00 00 00       	mov    edi,0x1
c001a13c:	50                   	push   eax
c001a13d:	6a 00                	push   0x0
c001a13f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a146:	50                   	push   eax
c001a147:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a14b:	e8 ee f1 ff ff       	call   c001933e <IDE::enableIRQs(unsigned char, bool)>
c001a150:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a153:	e8 9c fe ff ff       	call   c0019ff4 <ATA::readyForCommand()>
c001a158:	83 c4 10             	add    esp,0x10
c001a15b:	84 c0                	test   al,al
c001a15d:	0f 84 4e 02 00 00    	je     c001a3b1 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a163:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a169:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a16f:	c1 e0 04             	shl    eax,0x4
c001a172:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a179:	09 c6                	or     esi,eax
c001a17b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a180:	75 05                	jne    c001a187 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a182:	83 ce a0             	or     esi,0xffffffa0
c001a185:	eb 03                	jmp    c001a18a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a187:	83 ce e0             	or     esi,0xffffffe0
c001a18a:	89 f0                	mov    eax,esi
c001a18c:	0f b6 f0             	movzx  esi,al
c001a18f:	56                   	push   esi
c001a190:	6a 06                	push   0x6
c001a192:	51                   	push   ecx
c001a193:	52                   	push   edx
c001a194:	e8 97 ef ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a199:	83 c4 10             	add    esp,0x10
c001a19c:	6a 00                	push   0x0
c001a19e:	6a 01                	push   0x1
c001a1a0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1a7:	50                   	push   eax
c001a1a8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1ae:	e8 7d ef ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1b3:	83 c4 10             	add    esp,0x10
c001a1b6:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a1bb:	75 6e                	jne    c001a22b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a1bd:	6a 00                	push   0x0
c001a1bf:	6a 08                	push   0x8
c001a1c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1c8:	50                   	push   eax
c001a1c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1cf:	e8 5c ef ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1d4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a1d9:	50                   	push   eax
c001a1da:	6a 09                	push   0x9
c001a1dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1e3:	50                   	push   eax
c001a1e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1ea:	e8 41 ef ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1ef:	83 c4 20             	add    esp,0x20
c001a1f2:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a1f7:	50                   	push   eax
c001a1f8:	6a 0a                	push   0xa
c001a1fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a201:	50                   	push   eax
c001a202:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a208:	e8 23 ef ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a20d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a212:	50                   	push   eax
c001a213:	6a 0b                	push   0xb
c001a215:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a21c:	50                   	push   eax
c001a21d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a223:	e8 08 ef ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a228:	83 c4 20             	add    esp,0x20
c001a22b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a230:	50                   	push   eax
c001a231:	6a 02                	push   0x2
c001a233:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a23a:	50                   	push   eax
c001a23b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a241:	e8 ea ee ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a246:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a24b:	50                   	push   eax
c001a24c:	6a 03                	push   0x3
c001a24e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a255:	50                   	push   eax
c001a256:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a25c:	e8 cf ee ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a261:	83 c4 20             	add    esp,0x20
c001a264:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a269:	50                   	push   eax
c001a26a:	6a 04                	push   0x4
c001a26c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a273:	50                   	push   eax
c001a274:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a27a:	e8 b1 ee ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a27f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a284:	50                   	push   eax
c001a285:	6a 05                	push   0x5
c001a287:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a28e:	50                   	push   eax
c001a28f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a295:	e8 96 ee ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a29a:	83 c4 20             	add    esp,0x20
c001a29d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a2a2:	0f 94 c0             	sete   al
c001a2a5:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a2aa:	74 09                	je     c001a2b5 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a2ac:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a2b3:	eb 07                	jmp    c001a2bc <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a2b5:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a2bc:	0f b6 c0             	movzx  eax,al
c001a2bf:	50                   	push   eax
c001a2c0:	6a 07                	push   0x7
c001a2c2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2c9:	50                   	push   eax
c001a2ca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2d0:	e8 5b ee ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a2d5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a2d9:	83 c4 10             	add    esp,0x10
c001a2dc:	85 f6                	test   esi,esi
c001a2de:	0f 84 ae 00 00 00    	je     c001a392 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a2e4:	50                   	push   eax
c001a2e5:	6a 01                	push   0x1
c001a2e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2ee:	50                   	push   eax
c001a2ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2f5:	e8 d4 f8 ff ff       	call   c0019bce <IDE::polling(unsigned char, unsigned int)>
c001a2fa:	83 c4 10             	add    esp,0x10
c001a2fd:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a303:	84 c0                	test   al,al
c001a305:	74 20                	je     c001a327 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a307:	0f b6 f8             	movzx  edi,al
c001a30a:	0f b6 d2             	movzx  edx,dl
c001a30d:	57                   	push   edi
c001a30e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a315:	50                   	push   eax
c001a316:	52                   	push   edx
c001a317:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a31d:	e8 fc f7 ff ff       	call   c0019b1e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a322:	e9 87 00 00 00       	jmp    c001a3ae <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a327:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a32c:	74 33                	je     c001a361 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a32e:	31 ed                	xor    ebp,ebp
c001a330:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a334:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a338:	50                   	push   eax
c001a339:	50                   	push   eax
c001a33a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a341:	50                   	push   eax
c001a342:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a348:	e8 d1 ed ff ff       	call   c001911e <IDE::getBase(unsigned char)>
c001a34d:	89 c2                	mov    edx,eax
c001a34f:	89 f8                	mov    eax,edi
c001a351:	66 ef                	out    dx,ax
c001a353:	45                   	inc    ebp
c001a354:	83 c4 10             	add    esp,0x10
c001a357:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a35d:	75 d1                	jne    c001a330 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a35f:	eb 23                	jmp    c001a384 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a361:	0f b6 d2             	movzx  edx,dl
c001a364:	51                   	push   ecx
c001a365:	51                   	push   ecx
c001a366:	52                   	push   edx
c001a367:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a36d:	e8 ac ed ff ff       	call   c001911e <IDE::getBase(unsigned char)>
c001a372:	b9 00 01 00 00       	mov    ecx,0x100
c001a377:	89 c2                	mov    edx,eax
c001a379:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a37d:	fc                   	cld    
c001a37e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a381:	83 c4 10             	add    esp,0x10
c001a384:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a38c:	4e                   	dec    esi
c001a38d:	e9 4a ff ff ff       	jmp    c001a2dc <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a392:	31 ff                	xor    edi,edi
c001a394:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a399:	74 16                	je     c001a3b1 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a39b:	50                   	push   eax
c001a39c:	50                   	push   eax
c001a39d:	31 c0                	xor    eax,eax
c001a39f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a3a4:	0f 94 c0             	sete   al
c001a3a7:	50                   	push   eax
c001a3a8:	53                   	push   ebx
c001a3a9:	e8 fc fb ff ff       	call   c0019faa <ATA::flush(bool)>
c001a3ae:	83 c4 10             	add    esp,0x10
c001a3b1:	83 c4 2c             	add    esp,0x2c
c001a3b4:	89 f8                	mov    eax,edi
c001a3b6:	5b                   	pop    ebx
c001a3b7:	5e                   	pop    esi
c001a3b8:	5f                   	pop    edi
c001a3b9:	5d                   	pop    ebp
c001a3ba:	c3                   	ret    
c001a3bb:	90                   	nop

c001a3bc <ATA::detectCHS()>:
c001a3bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a3c0:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a3c6:	c1 e0 06             	shl    eax,0x6
c001a3c9:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a3cf:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a3d9:	c7 44 24 04 68 fc 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fc68
c001a3e1:	e9 31 5f ff ff       	jmp    c0010317 <KePanic(char const*)>

c001a3e6 <ATA::open(int, int, void*)>:
c001a3e6:	53                   	push   ebx
c001a3e7:	83 ec 08             	sub    esp,0x8
c001a3ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a3f6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a3fc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a402:	c1 e0 06             	shl    eax,0x6
c001a405:	01 d0                	add    eax,edx
c001a407:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a40e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a414:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a41b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a425:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a42b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a432:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a439:	75 0c                	jne    c001a447 <ATA::open(int, int, void*)+0x61>
c001a43b:	83 ec 0c             	sub    esp,0xc
c001a43e:	53                   	push   ebx
c001a43f:	e8 78 ff ff ff       	call   c001a3bc <ATA::detectCHS()>
c001a444:	83 c4 10             	add    esp,0x10
c001a447:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a44d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a453:	c1 e0 06             	shl    eax,0x6
c001a456:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a45d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a467:	d1 e8                	shr    eax,1
c001a469:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a46f:	6a 04                	push   0x4
c001a471:	6a 0c                	push   0xc
c001a473:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a47a:	50                   	push   eax
c001a47b:	52                   	push   edx
c001a47c:	e8 af ec ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a481:	90                   	nop
c001a482:	90                   	nop
c001a483:	6a 00                	push   0x0
c001a485:	6a 0c                	push   0xc
c001a487:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a48e:	50                   	push   eax
c001a48f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a495:	e8 96 ec ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a49a:	83 c4 14             	add    esp,0x14
c001a49d:	53                   	push   ebx
c001a49e:	e8 df 19 ff ff       	call   c000be82 <PhysicalDisk::startCache()>
c001a4a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4a6:	e8 7f 2a ff ff       	call   c000cf2a <createPartitionsForDisk(PhysicalDisk*)>
c001a4ab:	31 c0                	xor    eax,eax
c001a4ad:	83 c4 18             	add    esp,0x18
c001a4b0:	5b                   	pop    ebx
c001a4b1:	c3                   	ret    

c001a4b2 <combineCharAndColour(char, unsigned char)>:
c001a4b2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a4b7:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001a4bd:	c1 e0 08             	shl    eax,0x8
c001a4c0:	09 d0                	or     eax,edx
c001a4c2:	c3                   	ret    

c001a4c3 <combineColours(unsigned char, unsigned char)>:
c001a4c3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a4c8:	c1 e0 04             	shl    eax,0x4
c001a4cb:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001a4cf:	c3                   	ret    

c001a4d0 <ATA::read(unsigned long long, int, void*)>:
c001a4d0:	55                   	push   ebp
c001a4d1:	57                   	push   edi
c001a4d2:	56                   	push   esi
c001a4d3:	be 04 00 00 00       	mov    esi,0x4
c001a4d8:	53                   	push   ebx
c001a4d9:	83 ec 0c             	sub    esp,0xc
c001a4dc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a4e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a4e4:	8d 7b ff             	lea    edi,[ebx-0x1]
c001a4e7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a4eb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001a4ef:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a4f5:	0f 87 a1 01 00 00    	ja     c001a69c <ATA::read(unsigned long long, int, void*)+0x1cc>
c001a4fb:	be 06 00 00 00       	mov    esi,0x6
c001a500:	85 c9                	test   ecx,ecx
c001a502:	0f 84 94 01 00 00    	je     c001a69c <ATA::read(unsigned long long, int, void*)+0x1cc>
c001a508:	55                   	push   ebp
c001a509:	55                   	push   ebp
c001a50a:	6a 00                	push   0x0
c001a50c:	51                   	push   ecx
c001a50d:	53                   	push   ebx
c001a50e:	52                   	push   edx
c001a50f:	50                   	push   eax
c001a510:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a514:	e8 27 fb ff ff       	call   c001a040 <ATA::access(unsigned long long, int, void*, bool)>
c001a519:	83 c4 20             	add    esp,0x20
c001a51c:	89 c6                	mov    esi,eax
c001a51e:	85 c0                	test   eax,eax
c001a520:	0f 85 71 01 00 00    	jne    c001a697 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001a526:	03 1d 54 6b 02 c0    	add    ebx,DWORD PTR ds:0xc0026b54
c001a52c:	89 da                	mov    edx,ebx
c001a52e:	50                   	push   eax
c001a52f:	bd 10 27 00 00       	mov    ebp,0x2710
c001a534:	50                   	push   eax
c001a535:	89 1d 54 6b 02 c0    	mov    DWORD PTR ds:0xc0026b54,ebx
c001a53b:	6a 0f                	push   0xf
c001a53d:	6a 00                	push   0x0
c001a53f:	e8 7f ff ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001a544:	59                   	pop    ecx
c001a545:	b9 0a 00 00 00       	mov    ecx,0xa
c001a54a:	5b                   	pop    ebx
c001a54b:	0f b6 d8             	movzx  ebx,al
c001a54e:	89 d0                	mov    eax,edx
c001a550:	53                   	push   ebx
c001a551:	99                   	cdq    
c001a552:	f7 fd                	idiv   ebp
c001a554:	99                   	cdq    
c001a555:	f7 f9                	idiv   ecx
c001a557:	83 c2 30             	add    edx,0x30
c001a55a:	0f b6 d2             	movzx  edx,dl
c001a55d:	52                   	push   edx
c001a55e:	e8 4f ff ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001a563:	5f                   	pop    edi
c001a564:	bf e8 03 00 00       	mov    edi,0x3e8
c001a569:	5a                   	pop    edx
c001a56a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001a570:	53                   	push   ebx
c001a571:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a576:	99                   	cdq    
c001a577:	f7 ff                	idiv   edi
c001a579:	99                   	cdq    
c001a57a:	f7 f9                	idiv   ecx
c001a57c:	8d 42 30             	lea    eax,[edx+0x30]
c001a57f:	0f b6 c0             	movzx  eax,al
c001a582:	50                   	push   eax
c001a583:	e8 2a ff ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001a588:	5f                   	pop    edi
c001a589:	bf 64 00 00 00       	mov    edi,0x64
c001a58e:	5a                   	pop    edx
c001a58f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001a595:	53                   	push   ebx
c001a596:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a59b:	99                   	cdq    
c001a59c:	f7 ff                	idiv   edi
c001a59e:	99                   	cdq    
c001a59f:	f7 f9                	idiv   ecx
c001a5a1:	8d 42 30             	lea    eax,[edx+0x30]
c001a5a4:	0f b6 c0             	movzx  eax,al
c001a5a7:	50                   	push   eax
c001a5a8:	e8 05 ff ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001a5ad:	5a                   	pop    edx
c001a5ae:	5a                   	pop    edx
c001a5af:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001a5b5:	53                   	push   ebx
c001a5b6:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a5bb:	99                   	cdq    
c001a5bc:	f7 f9                	idiv   ecx
c001a5be:	99                   	cdq    
c001a5bf:	f7 f9                	idiv   ecx
c001a5c1:	8d 42 30             	lea    eax,[edx+0x30]
c001a5c4:	0f b6 c0             	movzx  eax,al
c001a5c7:	50                   	push   eax
c001a5c8:	e8 e5 fe ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001a5cd:	5a                   	pop    edx
c001a5ce:	5a                   	pop    edx
c001a5cf:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001a5d5:	53                   	push   ebx
c001a5d6:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a5db:	99                   	cdq    
c001a5dc:	f7 f9                	idiv   ecx
c001a5de:	83 c2 30             	add    edx,0x30
c001a5e1:	0f b6 d2             	movzx  edx,dl
c001a5e4:	52                   	push   edx
c001a5e5:	e8 c8 fe ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001a5ea:	5a                   	pop    edx
c001a5eb:	5a                   	pop    edx
c001a5ec:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001a5f2:	53                   	push   ebx
c001a5f3:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a5f8:	99                   	cdq    
c001a5f9:	f7 fd                	idiv   ebp
c001a5fb:	99                   	cdq    
c001a5fc:	f7 f9                	idiv   ecx
c001a5fe:	8d 42 30             	lea    eax,[edx+0x30]
c001a601:	0f b6 c0             	movzx  eax,al
c001a604:	50                   	push   eax
c001a605:	e8 a8 fe ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001a60a:	5d                   	pop    ebp
c001a60b:	bd e8 03 00 00       	mov    ebp,0x3e8
c001a610:	5a                   	pop    edx
c001a611:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001a617:	53                   	push   ebx
c001a618:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a61d:	99                   	cdq    
c001a61e:	f7 fd                	idiv   ebp
c001a620:	99                   	cdq    
c001a621:	f7 f9                	idiv   ecx
c001a623:	8d 42 30             	lea    eax,[edx+0x30]
c001a626:	0f b6 c0             	movzx  eax,al
c001a629:	50                   	push   eax
c001a62a:	e8 83 fe ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001a62f:	5d                   	pop    ebp
c001a630:	5a                   	pop    edx
c001a631:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001a637:	53                   	push   ebx
c001a638:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a63d:	99                   	cdq    
c001a63e:	f7 ff                	idiv   edi
c001a640:	99                   	cdq    
c001a641:	f7 f9                	idiv   ecx
c001a643:	8d 42 30             	lea    eax,[edx+0x30]
c001a646:	0f b6 c0             	movzx  eax,al
c001a649:	50                   	push   eax
c001a64a:	e8 63 fe ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001a64f:	5f                   	pop    edi
c001a650:	5d                   	pop    ebp
c001a651:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001a657:	53                   	push   ebx
c001a658:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a65d:	99                   	cdq    
c001a65e:	f7 f9                	idiv   ecx
c001a660:	99                   	cdq    
c001a661:	f7 f9                	idiv   ecx
c001a663:	8d 42 30             	lea    eax,[edx+0x30]
c001a666:	0f b6 c0             	movzx  eax,al
c001a669:	50                   	push   eax
c001a66a:	e8 43 fe ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001a66f:	5a                   	pop    edx
c001a670:	5f                   	pop    edi
c001a671:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001a677:	53                   	push   ebx
c001a678:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a67d:	99                   	cdq    
c001a67e:	f7 f9                	idiv   ecx
c001a680:	83 c2 30             	add    edx,0x30
c001a683:	0f b6 d2             	movzx  edx,dl
c001a686:	52                   	push   edx
c001a687:	e8 26 fe ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001a68c:	83 c4 10             	add    esp,0x10
c001a68f:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001a695:	eb 05                	jmp    c001a69c <ATA::read(unsigned long long, int, void*)+0x1cc>
c001a697:	be 01 00 00 00       	mov    esi,0x1
c001a69c:	83 c4 0c             	add    esp,0xc
c001a69f:	89 f0                	mov    eax,esi
c001a6a1:	5b                   	pop    ebx
c001a6a2:	5e                   	pop    esi
c001a6a3:	5f                   	pop    edi
c001a6a4:	5d                   	pop    ebp
c001a6a5:	c3                   	ret    

c001a6a6 <ATA::write(unsigned long long, int, void*)>:
c001a6a6:	55                   	push   ebp
c001a6a7:	57                   	push   edi
c001a6a8:	56                   	push   esi
c001a6a9:	be 04 00 00 00       	mov    esi,0x4
c001a6ae:	53                   	push   ebx
c001a6af:	83 ec 0c             	sub    esp,0xc
c001a6b2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a6b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a6ba:	8d 7b ff             	lea    edi,[ebx-0x1]
c001a6bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a6c1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001a6c5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a6cb:	0f 87 9c 01 00 00    	ja     c001a86d <ATA::write(unsigned long long, int, void*)+0x1c7>
c001a6d1:	be 06 00 00 00       	mov    esi,0x6
c001a6d6:	85 c9                	test   ecx,ecx
c001a6d8:	0f 84 8f 01 00 00    	je     c001a86d <ATA::write(unsigned long long, int, void*)+0x1c7>
c001a6de:	55                   	push   ebp
c001a6df:	55                   	push   ebp
c001a6e0:	6a 01                	push   0x1
c001a6e2:	51                   	push   ecx
c001a6e3:	53                   	push   ebx
c001a6e4:	52                   	push   edx
c001a6e5:	50                   	push   eax
c001a6e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a6ea:	e8 51 f9 ff ff       	call   c001a040 <ATA::access(unsigned long long, int, void*, bool)>
c001a6ef:	83 c4 20             	add    esp,0x20
c001a6f2:	89 c6                	mov    esi,eax
c001a6f4:	85 c0                	test   eax,eax
c001a6f6:	0f 85 6c 01 00 00    	jne    c001a868 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001a6fc:	01 1d 50 6b 02 c0    	add    DWORD PTR ds:0xc0026b50,ebx
c001a702:	bd 10 27 00 00       	mov    ebp,0x2710
c001a707:	50                   	push   eax
c001a708:	50                   	push   eax
c001a709:	6a 0f                	push   0xf
c001a70b:	6a 00                	push   0x0
c001a70d:	e8 b1 fd ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001a712:	5a                   	pop    edx
c001a713:	0f b6 d8             	movzx  ebx,al
c001a716:	59                   	pop    ecx
c001a717:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a71c:	53                   	push   ebx
c001a71d:	b9 0a 00 00 00       	mov    ecx,0xa
c001a722:	99                   	cdq    
c001a723:	f7 fd                	idiv   ebp
c001a725:	99                   	cdq    
c001a726:	f7 f9                	idiv   ecx
c001a728:	8d 42 30             	lea    eax,[edx+0x30]
c001a72b:	0f b6 c0             	movzx  eax,al
c001a72e:	50                   	push   eax
c001a72f:	e8 7e fd ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001a734:	5f                   	pop    edi
c001a735:	bf e8 03 00 00       	mov    edi,0x3e8
c001a73a:	5a                   	pop    edx
c001a73b:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001a741:	53                   	push   ebx
c001a742:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a747:	99                   	cdq    
c001a748:	f7 ff                	idiv   edi
c001a74a:	99                   	cdq    
c001a74b:	f7 f9                	idiv   ecx
c001a74d:	8d 42 30             	lea    eax,[edx+0x30]
c001a750:	0f b6 c0             	movzx  eax,al
c001a753:	50                   	push   eax
c001a754:	e8 59 fd ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001a759:	5f                   	pop    edi
c001a75a:	bf 64 00 00 00       	mov    edi,0x64
c001a75f:	5a                   	pop    edx
c001a760:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001a766:	53                   	push   ebx
c001a767:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a76c:	99                   	cdq    
c001a76d:	f7 ff                	idiv   edi
c001a76f:	99                   	cdq    
c001a770:	f7 f9                	idiv   ecx
c001a772:	8d 42 30             	lea    eax,[edx+0x30]
c001a775:	0f b6 c0             	movzx  eax,al
c001a778:	50                   	push   eax
c001a779:	e8 34 fd ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001a77e:	5a                   	pop    edx
c001a77f:	5a                   	pop    edx
c001a780:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001a786:	53                   	push   ebx
c001a787:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a78c:	99                   	cdq    
c001a78d:	f7 f9                	idiv   ecx
c001a78f:	99                   	cdq    
c001a790:	f7 f9                	idiv   ecx
c001a792:	8d 42 30             	lea    eax,[edx+0x30]
c001a795:	0f b6 c0             	movzx  eax,al
c001a798:	50                   	push   eax
c001a799:	e8 14 fd ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001a79e:	5a                   	pop    edx
c001a79f:	5a                   	pop    edx
c001a7a0:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001a7a6:	53                   	push   ebx
c001a7a7:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a7ac:	99                   	cdq    
c001a7ad:	f7 f9                	idiv   ecx
c001a7af:	8d 42 30             	lea    eax,[edx+0x30]
c001a7b2:	0f b6 c0             	movzx  eax,al
c001a7b5:	50                   	push   eax
c001a7b6:	e8 f7 fc ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001a7bb:	5a                   	pop    edx
c001a7bc:	5a                   	pop    edx
c001a7bd:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001a7c3:	53                   	push   ebx
c001a7c4:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a7c9:	99                   	cdq    
c001a7ca:	f7 fd                	idiv   ebp
c001a7cc:	99                   	cdq    
c001a7cd:	f7 f9                	idiv   ecx
c001a7cf:	8d 42 30             	lea    eax,[edx+0x30]
c001a7d2:	0f b6 c0             	movzx  eax,al
c001a7d5:	50                   	push   eax
c001a7d6:	e8 d7 fc ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001a7db:	5d                   	pop    ebp
c001a7dc:	bd e8 03 00 00       	mov    ebp,0x3e8
c001a7e1:	5a                   	pop    edx
c001a7e2:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001a7e8:	53                   	push   ebx
c001a7e9:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a7ee:	99                   	cdq    
c001a7ef:	f7 fd                	idiv   ebp
c001a7f1:	99                   	cdq    
c001a7f2:	f7 f9                	idiv   ecx
c001a7f4:	8d 42 30             	lea    eax,[edx+0x30]
c001a7f7:	0f b6 c0             	movzx  eax,al
c001a7fa:	50                   	push   eax
c001a7fb:	e8 b2 fc ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001a800:	5d                   	pop    ebp
c001a801:	5a                   	pop    edx
c001a802:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001a808:	53                   	push   ebx
c001a809:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a80e:	99                   	cdq    
c001a80f:	f7 ff                	idiv   edi
c001a811:	99                   	cdq    
c001a812:	f7 f9                	idiv   ecx
c001a814:	8d 42 30             	lea    eax,[edx+0x30]
c001a817:	0f b6 c0             	movzx  eax,al
c001a81a:	50                   	push   eax
c001a81b:	e8 92 fc ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001a820:	5f                   	pop    edi
c001a821:	5d                   	pop    ebp
c001a822:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001a828:	53                   	push   ebx
c001a829:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a82e:	99                   	cdq    
c001a82f:	f7 f9                	idiv   ecx
c001a831:	99                   	cdq    
c001a832:	f7 f9                	idiv   ecx
c001a834:	8d 42 30             	lea    eax,[edx+0x30]
c001a837:	0f b6 c0             	movzx  eax,al
c001a83a:	50                   	push   eax
c001a83b:	e8 72 fc ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001a840:	5a                   	pop    edx
c001a841:	5f                   	pop    edi
c001a842:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001a848:	53                   	push   ebx
c001a849:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a84e:	99                   	cdq    
c001a84f:	f7 f9                	idiv   ecx
c001a851:	83 c2 30             	add    edx,0x30
c001a854:	0f b6 d2             	movzx  edx,dl
c001a857:	52                   	push   edx
c001a858:	e8 55 fc ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001a85d:	83 c4 10             	add    esp,0x10
c001a860:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001a866:	eb 05                	jmp    c001a86d <ATA::write(unsigned long long, int, void*)+0x1c7>
c001a868:	be 01 00 00 00       	mov    esi,0x1
c001a86d:	83 c4 0c             	add    esp,0xc
c001a870:	89 f0                	mov    eax,esi
c001a872:	5b                   	pop    ebx
c001a873:	5e                   	pop    esi
c001a874:	5f                   	pop    edi
c001a875:	5d                   	pop    ebp
c001a876:	c3                   	ret    
c001a877:	90                   	nop

c001a878 <ATAPI::write(unsigned long long, int, void*)>:
c001a878:	b8 03 00 00 00       	mov    eax,0x3
c001a87d:	c3                   	ret    

c001a87e <ATAPI::close(int, int, void*)>:
c001a87e:	83 ec 0c             	sub    esp,0xc
c001a881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a885:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a88b:	85 c0                	test   eax,eax
c001a88d:	74 0c                	je     c001a89b <ATAPI::close(int, int, void*)+0x1d>
c001a88f:	83 ec 0c             	sub    esp,0xc
c001a892:	8b 10                	mov    edx,DWORD PTR [eax]
c001a894:	50                   	push   eax
c001a895:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a898:	83 c4 10             	add    esp,0x10
c001a89b:	31 c0                	xor    eax,eax
c001a89d:	83 c4 0c             	add    esp,0xc
c001a8a0:	c3                   	ret    
c001a8a1:	90                   	nop

c001a8a2 <ATAPI::ATAPI()>:
c001a8a2:	83 ec 0c             	sub    esp,0xc
c001a8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8a9:	83 ec 04             	sub    esp,0x4
c001a8ac:	68 00 08 00 00       	push   0x800
c001a8b1:	68 b1 fd 01 c0       	push   0xc001fdb1
c001a8b6:	50                   	push   eax
c001a8b7:	e8 5e 15 ff ff       	call   c000be1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a8bc:	83 c4 10             	add    esp,0x10
c001a8bf:	ba cc fc 01 c0       	mov    edx,0xc001fccc
c001a8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8c8:	89 10                	mov    DWORD PTR [eax],edx
c001a8ca:	90                   	nop
c001a8cb:	83 c4 0c             	add    esp,0xc
c001a8ce:	c3                   	ret    
c001a8cf:	90                   	nop

c001a8d0 <ATAPI::readyForCommand()>:
c001a8d0:	56                   	push   esi
c001a8d1:	53                   	push   ebx
c001a8d2:	53                   	push   ebx
c001a8d3:	31 db                	xor    ebx,ebx
c001a8d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a8d9:	51                   	push   ecx
c001a8da:	6a 0c                	push   0xc
c001a8dc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a8e3:	50                   	push   eax
c001a8e4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a8ea:	e8 01 e9 ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c001a8ef:	83 c4 10             	add    esp,0x10
c001a8f2:	a8 88                	test   al,0x88
c001a8f4:	74 25                	je     c001a91b <ATAPI::readyForCommand()+0x4b>
c001a8f6:	43                   	inc    ebx
c001a8f7:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a8fd:	7e da                	jle    c001a8d9 <ATAPI::readyForCommand()+0x9>
c001a8ff:	83 ec 0c             	sub    esp,0xc
c001a902:	68 5e 01 00 00       	push   0x15e
c001a907:	e8 28 92 ff ff       	call   c0013b34 <milliTenthSleep(unsigned int)>
c001a90c:	83 c4 10             	add    esp,0x10
c001a90f:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a915:	75 c2                	jne    c001a8d9 <ATAPI::readyForCommand()+0x9>
c001a917:	31 c0                	xor    eax,eax
c001a919:	eb 02                	jmp    c001a91d <ATAPI::readyForCommand()+0x4d>
c001a91b:	b0 01                	mov    al,0x1
c001a91d:	5a                   	pop    edx
c001a91e:	5b                   	pop    ebx
c001a91f:	5e                   	pop    esi
c001a920:	c3                   	ret    
c001a921:	90                   	nop

c001a922 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a922:	55                   	push   ebp
c001a923:	57                   	push   edi
c001a924:	56                   	push   esi
c001a925:	53                   	push   ebx
c001a926:	83 ec 20             	sub    esp,0x20
c001a929:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a92d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a931:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a935:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a939:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a93d:	6a 01                	push   0x1
c001a93f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a946:	50                   	push   eax
c001a947:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a94d:	e8 ec e9 ff ff       	call   c001933e <IDE::enableIRQs(unsigned char, bool)>
c001a952:	5e                   	pop    esi
c001a953:	58                   	pop    eax
c001a954:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a95b:	50                   	push   eax
c001a95c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a962:	e8 a3 e7 ff ff       	call   c001910a <IDE::prepareInterrupt(unsigned char)>
c001a967:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a96a:	e8 61 ff ff ff       	call   c001a8d0 <ATAPI::readyForCommand()>
c001a96f:	83 c4 10             	add    esp,0x10
c001a972:	84 c0                	test   al,al
c001a974:	75 0a                	jne    c001a980 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a976:	bb 01 00 00 00       	mov    ebx,0x1
c001a97b:	e9 57 02 00 00       	jmp    c001abd7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a980:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a986:	c1 e0 04             	shl    eax,0x4
c001a989:	0f b6 c0             	movzx  eax,al
c001a98c:	50                   	push   eax
c001a98d:	6a 06                	push   0x6
c001a98f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a996:	50                   	push   eax
c001a997:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a99d:	e8 8e e7 ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9a2:	6a 00                	push   0x0
c001a9a4:	6a 01                	push   0x1
c001a9a6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a9ad:	50                   	push   eax
c001a9ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a9b4:	e8 77 e7 ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9b9:	83 c4 20             	add    esp,0x20
c001a9bc:	0f b6 c3             	movzx  eax,bl
c001a9bf:	0f b6 df             	movzx  ebx,bh
c001a9c2:	50                   	push   eax
c001a9c3:	6a 04                	push   0x4
c001a9c5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a9cc:	50                   	push   eax
c001a9cd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a9d3:	e8 58 e7 ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9d8:	53                   	push   ebx
c001a9d9:	6a 05                	push   0x5
c001a9db:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a9e2:	50                   	push   eax
c001a9e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a9e9:	e8 42 e7 ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9ee:	83 c4 20             	add    esp,0x20
c001a9f1:	68 a0 00 00 00       	push   0xa0
c001a9f6:	6a 07                	push   0x7
c001a9f8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a9ff:	50                   	push   eax
c001aa00:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa06:	e8 25 e7 ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa0b:	83 c4 0c             	add    esp,0xc
c001aa0e:	6a 01                	push   0x1
c001aa10:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aa17:	50                   	push   eax
c001aa18:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa1e:	e8 ab f1 ff ff       	call   c0019bce <IDE::polling(unsigned char, unsigned int)>
c001aa23:	83 c4 10             	add    esp,0x10
c001aa26:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001aa2c:	84 c0                	test   al,al
c001aa2e:	74 23                	je     c001aa53 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001aa30:	0f b6 d8             	movzx  ebx,al
c001aa33:	0f b6 d2             	movzx  edx,dl
c001aa36:	53                   	push   ebx
c001aa37:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001aa3e:	50                   	push   eax
c001aa3f:	52                   	push   edx
c001aa40:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa46:	e8 d3 f0 ff ff       	call   c0019b1e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001aa4b:	83 c4 10             	add    esp,0x10
c001aa4e:	e9 84 01 00 00       	jmp    c001abd7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001aa53:	0f b6 d2             	movzx  edx,dl
c001aa56:	53                   	push   ebx
c001aa57:	53                   	push   ebx
c001aa58:	52                   	push   edx
c001aa59:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa5f:	e8 ba e6 ff ff       	call   c001911e <IDE::getBase(unsigned char)>
c001aa64:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001aa68:	b9 06 00 00 00       	mov    ecx,0x6
c001aa6d:	89 c2                	mov    edx,eax
c001aa6f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001aa72:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001aa76:	83 c4 10             	add    esp,0x10
c001aa79:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001aa7f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001aa86:	85 db                	test   ebx,ebx
c001aa88:	0f 84 ec 00 00 00    	je     c001ab7a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001aa8e:	51                   	push   ecx
c001aa8f:	51                   	push   ecx
c001aa90:	52                   	push   edx
c001aa91:	50                   	push   eax
c001aa92:	e8 07 e8 ff ff       	call   c001929e <IDE::waitInterrupt(unsigned char)>
c001aa97:	83 c4 10             	add    esp,0x10
c001aa9a:	84 c0                	test   al,al
c001aa9c:	0f 84 d4 fe ff ff    	je     c001a976 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001aaa2:	56                   	push   esi
c001aaa3:	56                   	push   esi
c001aaa4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aaab:	50                   	push   eax
c001aaac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aab2:	e8 53 e6 ff ff       	call   c001910a <IDE::prepareInterrupt(unsigned char)>
c001aab7:	83 c4 0c             	add    esp,0xc
c001aaba:	6a 04                	push   0x4
c001aabc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aac3:	50                   	push   eax
c001aac4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aaca:	e8 21 e7 ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c001aacf:	83 c4 0c             	add    esp,0xc
c001aad2:	89 c6                	mov    esi,eax
c001aad4:	6a 05                	push   0x5
c001aad6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aadd:	50                   	push   eax
c001aade:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aae4:	e8 07 e7 ff ff       	call   c00191f0 <IDE::read(unsigned char, unsigned char)>
c001aae9:	89 f1                	mov    ecx,esi
c001aaeb:	0f b6 c0             	movzx  eax,al
c001aaee:	0f b6 f1             	movzx  esi,cl
c001aaf1:	c1 e0 08             	shl    eax,0x8
c001aaf4:	09 c6                	or     esi,eax
c001aaf6:	d1 fe                	sar    esi,1
c001aaf8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001aafc:	83 c4 10             	add    esp,0x10
c001aaff:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ab04:	74 41                	je     c001ab47 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ab06:	31 c9                	xor    ecx,ecx
c001ab08:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ab0e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ab15:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ab19:	75 0a                	jne    c001ab25 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ab1b:	01 c9                	add    ecx,ecx
c001ab1d:	01 cd                	add    ebp,ecx
c001ab1f:	4b                   	dec    ebx
c001ab20:	e9 54 ff ff ff       	jmp    c001aa79 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ab25:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ab2a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ab2e:	51                   	push   ecx
c001ab2f:	51                   	push   ecx
c001ab30:	52                   	push   edx
c001ab31:	50                   	push   eax
c001ab32:	e8 e7 e5 ff ff       	call   c001911e <IDE::getBase(unsigned char)>
c001ab37:	89 c2                	mov    edx,eax
c001ab39:	89 f0                	mov    eax,esi
c001ab3b:	66 ef                	out    dx,ax
c001ab3d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ab41:	83 c4 10             	add    esp,0x10
c001ab44:	41                   	inc    ecx
c001ab45:	eb c1                	jmp    c001ab08 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001ab47:	31 f6                	xor    esi,esi
c001ab49:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ab4f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ab56:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001ab5a:	75 06                	jne    c001ab62 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001ab5c:	01 f6                	add    esi,esi
c001ab5e:	01 f5                	add    ebp,esi
c001ab60:	eb bd                	jmp    c001ab1f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001ab62:	51                   	push   ecx
c001ab63:	51                   	push   ecx
c001ab64:	52                   	push   edx
c001ab65:	50                   	push   eax
c001ab66:	e8 b3 e5 ff ff       	call   c001911e <IDE::getBase(unsigned char)>
c001ab6b:	89 c2                	mov    edx,eax
c001ab6d:	66 ed                	in     ax,dx
c001ab6f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001ab74:	83 c4 10             	add    esp,0x10
c001ab77:	46                   	inc    esi
c001ab78:	eb cf                	jmp    c001ab49 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001ab7a:	51                   	push   ecx
c001ab7b:	51                   	push   ecx
c001ab7c:	52                   	push   edx
c001ab7d:	50                   	push   eax
c001ab7e:	e8 1b e7 ff ff       	call   c001929e <IDE::waitInterrupt(unsigned char)>
c001ab83:	83 c4 10             	add    esp,0x10
c001ab86:	84 c0                	test   al,al
c001ab88:	0f 84 e8 fd ff ff    	je     c001a976 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ab8e:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ab93:	52                   	push   edx
c001ab94:	52                   	push   edx
c001ab95:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ab9c:	50                   	push   eax
c001ab9d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aba3:	e8 62 e5 ff ff       	call   c001910a <IDE::prepareInterrupt(unsigned char)>
c001aba8:	83 c4 10             	add    esp,0x10
c001abab:	50                   	push   eax
c001abac:	50                   	push   eax
c001abad:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001abb4:	50                   	push   eax
c001abb5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001abbb:	e8 5e e5 ff ff       	call   c001911e <IDE::getBase(unsigned char)>
c001abc0:	8d 50 07             	lea    edx,[eax+0x7]
c001abc3:	ec                   	in     al,dx
c001abc4:	83 c4 10             	add    esp,0x10
c001abc7:	a8 88                	test   al,0x88
c001abc9:	74 0a                	je     c001abd5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001abcb:	4b                   	dec    ebx
c001abcc:	75 dd                	jne    c001abab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001abce:	bb 02 00 00 00       	mov    ebx,0x2
c001abd3:	eb 02                	jmp    c001abd7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001abd5:	31 db                	xor    ebx,ebx
c001abd7:	83 c4 1c             	add    esp,0x1c
c001abda:	89 d8                	mov    eax,ebx
c001abdc:	5b                   	pop    ebx
c001abdd:	5e                   	pop    esi
c001abde:	5f                   	pop    edi
c001abdf:	5d                   	pop    ebp
c001abe0:	c3                   	ret    
c001abe1:	90                   	nop

c001abe2 <ATAPI::diskRemoved()>:
c001abe2:	53                   	push   ebx
c001abe3:	83 ec 14             	sub    esp,0x14
c001abe6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001abea:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001abf1:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001abf7:	e8 ae 20 ff ff       	call   c000ccaa <LogicalDisk::unmount()>
c001abfc:	58                   	pop    eax
c001abfd:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ac03:	e8 f0 29 ff ff       	call   c000d5f8 <VCache::writeWriteBuffer()>
c001ac08:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001ac0e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ac12:	83 c4 18             	add    esp,0x18
c001ac15:	5b                   	pop    ebx
c001ac16:	e9 cd 29 ff ff       	jmp    c000d5e8 <VCache::invalidateReadBuffer()>
c001ac1b:	90                   	nop

c001ac1c <ATAPI::eject()>:
c001ac1c:	57                   	push   edi
c001ac1d:	b9 03 00 00 00       	mov    ecx,0x3
c001ac22:	53                   	push   ebx
c001ac23:	83 ec 14             	sub    esp,0x14
c001ac26:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ac2a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ac2e:	fc                   	cld    
c001ac2f:	31 c0                	xor    eax,eax
c001ac31:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ac33:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ac38:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ac3d:	50                   	push   eax
c001ac3e:	50                   	push   eax
c001ac3f:	6a 00                	push   0x0
c001ac41:	6a 00                	push   0x0
c001ac43:	6a 00                	push   0x0
c001ac45:	6a 02                	push   0x2
c001ac47:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ac4b:	50                   	push   eax
c001ac4c:	53                   	push   ebx
c001ac4d:	e8 d0 fc ff ff       	call   c001a922 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ac52:	83 c4 14             	add    esp,0x14
c001ac55:	53                   	push   ebx
c001ac56:	e8 87 ff ff ff       	call   c001abe2 <ATAPI::diskRemoved()>
c001ac5b:	83 c4 24             	add    esp,0x24
c001ac5e:	31 c0                	xor    eax,eax
c001ac60:	5b                   	pop    ebx
c001ac61:	5f                   	pop    edi
c001ac62:	c3                   	ret    
c001ac63:	90                   	nop

c001ac64 <ATAPI::diskInserted()>:
c001ac64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac68:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001ac6f:	c3                   	ret    

c001ac70 <ATAPI::detectMedia()>:
c001ac70:	56                   	push   esi
c001ac71:	53                   	push   ebx
c001ac72:	83 ec 28             	sub    esp,0x28
c001ac75:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ac79:	6a 0c                	push   0xc
c001ac7b:	6a 00                	push   0x0
c001ac7d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ac81:	56                   	push   esi
c001ac82:	e8 49 58 fe ff       	call   c00004d0 <memset>
c001ac87:	58                   	pop    eax
c001ac88:	5a                   	pop    edx
c001ac89:	6a 00                	push   0x0
c001ac8b:	6a 00                	push   0x0
c001ac8d:	6a 00                	push   0x0
c001ac8f:	6a 00                	push   0x0
c001ac91:	56                   	push   esi
c001ac92:	53                   	push   ebx
c001ac93:	e8 8a fc ff ff       	call   c001a922 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ac98:	83 c4 1c             	add    esp,0x1c
c001ac9b:	6a 0c                	push   0xc
c001ac9d:	6a 00                	push   0x0
c001ac9f:	56                   	push   esi
c001aca0:	e8 2b 58 fe ff       	call   c00004d0 <memset>
c001aca5:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001acaa:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001acaf:	59                   	pop    ecx
c001acb0:	58                   	pop    eax
c001acb1:	6a 01                	push   0x1
c001acb3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001acb7:	50                   	push   eax
c001acb8:	6a 00                	push   0x0
c001acba:	6a 12                	push   0x12
c001acbc:	56                   	push   esi
c001acbd:	53                   	push   ebx
c001acbe:	e8 5f fc ff ff       	call   c001a922 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001acc3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001acc7:	83 c4 20             	add    esp,0x20
c001acca:	83 e0 7f             	and    eax,0x7f
c001accd:	3c 70                	cmp    al,0x70
c001accf:	74 15                	je     c001ace6 <ATAPI::detectMedia()+0x76>
c001acd1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001acd8:	75 0c                	jne    c001ace6 <ATAPI::detectMedia()+0x76>
c001acda:	83 ec 0c             	sub    esp,0xc
c001acdd:	53                   	push   ebx
c001acde:	e8 81 ff ff ff       	call   c001ac64 <ATAPI::diskInserted()>
c001ace3:	83 c4 10             	add    esp,0x10
c001ace6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001acea:	83 e0 0f             	and    eax,0xf
c001aced:	3c 02                	cmp    al,0x2
c001acef:	75 1b                	jne    c001ad0c <ATAPI::detectMedia()+0x9c>
c001acf1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001acf6:	75 2d                	jne    c001ad25 <ATAPI::detectMedia()+0xb5>
c001acf8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001acff:	74 24                	je     c001ad25 <ATAPI::detectMedia()+0xb5>
c001ad01:	83 ec 0c             	sub    esp,0xc
c001ad04:	53                   	push   ebx
c001ad05:	e8 d8 fe ff ff       	call   c001abe2 <ATAPI::diskRemoved()>
c001ad0a:	eb 16                	jmp    c001ad22 <ATAPI::detectMedia()+0xb2>
c001ad0c:	84 c0                	test   al,al
c001ad0e:	75 15                	jne    c001ad25 <ATAPI::detectMedia()+0xb5>
c001ad10:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ad17:	75 0c                	jne    c001ad25 <ATAPI::detectMedia()+0xb5>
c001ad19:	83 ec 0c             	sub    esp,0xc
c001ad1c:	53                   	push   ebx
c001ad1d:	e8 42 ff ff ff       	call   c001ac64 <ATAPI::diskInserted()>
c001ad22:	83 c4 10             	add    esp,0x10
c001ad25:	83 c4 24             	add    esp,0x24
c001ad28:	5b                   	pop    ebx
c001ad29:	5e                   	pop    esi
c001ad2a:	c3                   	ret    
c001ad2b:	90                   	nop

c001ad2c <ATAPI::open(int, int, void*)>:
c001ad2c:	56                   	push   esi
c001ad2d:	53                   	push   ebx
c001ad2e:	50                   	push   eax
c001ad2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad37:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad3b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ad41:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ad47:	c1 e0 06             	shl    eax,0x6
c001ad4a:	01 d0                	add    eax,edx
c001ad4c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001ad53:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001ad59:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001ad60:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ad6a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ad70:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ad77:	6a 04                	push   0x4
c001ad79:	6a 0c                	push   0xc
c001ad7b:	51                   	push   ecx
c001ad7c:	52                   	push   edx
c001ad7d:	e8 ae e3 ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad82:	90                   	nop
c001ad83:	90                   	nop
c001ad84:	6a 00                	push   0x0
c001ad86:	6a 0c                	push   0xc
c001ad88:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ad8f:	50                   	push   eax
c001ad90:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ad96:	e8 95 e3 ff ff       	call   c0019130 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad9b:	83 c4 14             	add    esp,0x14
c001ad9e:	68 74 01 00 00       	push   0x174
c001ada3:	e8 cd ca fe ff       	call   c0007875 <malloc>
c001ada8:	83 c4 0c             	add    esp,0xc
c001adab:	89 c6                	mov    esi,eax
c001adad:	6a 00                	push   0x0
c001adaf:	68 ff ff ff 7f       	push   0x7fffffff
c001adb4:	6a 00                	push   0x0
c001adb6:	6a 00                	push   0x0
c001adb8:	53                   	push   ebx
c001adb9:	68 4e fe 01 c0       	push   0xc001fe4e
c001adbe:	50                   	push   eax
c001adbf:	e8 32 1d ff ff       	call   c000caf6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001adc4:	83 c4 14             	add    esp,0x14
c001adc7:	56                   	push   esi
c001adc8:	e8 df 1d ff ff       	call   c000cbac <LogicalDisk::assignDriveLetter()>
c001adcd:	5a                   	pop    edx
c001adce:	0f be c0             	movsx  eax,al
c001add1:	59                   	pop    ecx
c001add2:	50                   	push   eax
c001add3:	68 b4 fc 01 c0       	push   0xc001fcb4
c001add8:	e8 31 f8 fe ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001addd:	58                   	pop    eax
c001adde:	5a                   	pop    edx
c001addf:	56                   	push   esi
c001ade0:	53                   	push   ebx
c001ade1:	e8 66 0c ff ff       	call   c000ba4c <Device::addChild(Device*)>
c001ade6:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001adec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001adef:	e8 8e 10 ff ff       	call   c000be82 <PhysicalDisk::startCache()>
c001adf4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001adfb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001adfe:	e8 6d fe ff ff       	call   c001ac70 <ATAPI::detectMedia()>
c001ae03:	83 c4 14             	add    esp,0x14
c001ae06:	31 c0                	xor    eax,eax
c001ae08:	5b                   	pop    ebx
c001ae09:	5e                   	pop    esi
c001ae0a:	c3                   	ret    
c001ae0b:	90                   	nop

c001ae0c <ATAPI::read(unsigned long long, int, void*)>:
c001ae0c:	55                   	push   ebp
c001ae0d:	57                   	push   edi
c001ae0e:	56                   	push   esi
c001ae0f:	53                   	push   ebx
c001ae10:	83 ec 1c             	sub    esp,0x1c
c001ae13:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ae17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ae1b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ae1f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ae26:	74 3c                	je     c001ae64 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001ae28:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ae2c:	b9 03 00 00 00       	mov    ecx,0x3
c001ae31:	fc                   	cld    
c001ae32:	31 c0                	xor    eax,eax
c001ae34:	0f ce                	bswap  esi
c001ae36:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ae38:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ae3d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001ae41:	89 e8                	mov    eax,ebp
c001ae43:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ae47:	50                   	push   eax
c001ae48:	50                   	push   eax
c001ae49:	55                   	push   ebp
c001ae4a:	c1 e5 0b             	shl    ebp,0xb
c001ae4d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ae51:	6a 00                	push   0x0
c001ae53:	55                   	push   ebp
c001ae54:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ae58:	50                   	push   eax
c001ae59:	53                   	push   ebx
c001ae5a:	e8 c3 fa ff ff       	call   c001a922 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ae5f:	83 c4 20             	add    esp,0x20
c001ae62:	eb 1a                	jmp    c001ae7e <ATAPI::read(unsigned long long, int, void*)+0x72>
c001ae64:	83 ec 0c             	sub    esp,0xc
c001ae67:	53                   	push   ebx
c001ae68:	e8 03 fe ff ff       	call   c001ac70 <ATAPI::detectMedia()>
c001ae6d:	83 c4 10             	add    esp,0x10
c001ae70:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ae77:	75 af                	jne    c001ae28 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ae79:	b8 02 00 00 00       	mov    eax,0x2
c001ae7e:	83 c4 1c             	add    esp,0x1c
c001ae81:	5b                   	pop    ebx
c001ae82:	5e                   	pop    esi
c001ae83:	5f                   	pop    edi
c001ae84:	5d                   	pop    ebp
c001ae85:	c3                   	ret    

c001ae86 <SATA::close(int, int, void*)>:
c001ae86:	83 ec 0c             	sub    esp,0xc
c001ae89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae8d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ae93:	85 c0                	test   eax,eax
c001ae95:	74 0c                	je     c001aea3 <SATA::close(int, int, void*)+0x1d>
c001ae97:	83 ec 0c             	sub    esp,0xc
c001ae9a:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae9c:	50                   	push   eax
c001ae9d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aea0:	83 c4 10             	add    esp,0x10
c001aea3:	31 c0                	xor    eax,eax
c001aea5:	83 c4 0c             	add    esp,0xc
c001aea8:	c3                   	ret    
c001aea9:	90                   	nop

c001aeaa <SATA::powerSaving(PowerSavingLevel)>:
c001aeaa:	c3                   	ret    
c001aeab:	90                   	nop

c001aeac <SATA::open(int, int, void*)>:
c001aeac:	56                   	push   esi
c001aead:	53                   	push   ebx
c001aeae:	50                   	push   eax
c001aeaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aeb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aeb7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001aec1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001aec7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001aed1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aed5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001aedf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001aee5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001aeec:	e8 60 cc fe ff       	call   c0007b51 <Phys::allocatePage()>
c001aef1:	89 c6                	mov    esi,eax
c001aef3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aef9:	81 c6 00 10 00 00    	add    esi,0x1000
c001aeff:	e8 4d cc fe ff       	call   c0007b51 <Phys::allocatePage()>
c001af04:	39 c6                	cmp    esi,eax
c001af06:	74 10                	je     c001af18 <SATA::open(int, int, void*)+0x6c>
c001af08:	83 ec 0c             	sub    esp,0xc
c001af0b:	68 fc fc 01 c0       	push   0xc001fcfc
c001af10:	e8 02 54 ff ff       	call   c0010317 <KePanic(char const*)>
c001af15:	83 c4 10             	add    esp,0x10
c001af18:	83 ec 0c             	sub    esp,0xc
c001af1b:	6a 02                	push   0x2
c001af1d:	e8 2f e4 fe ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c001af22:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001af28:	6a 03                	push   0x3
c001af2a:	50                   	push   eax
c001af2b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001af31:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c001af37:	e8 d8 ea fe ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c001af3c:	83 c4 14             	add    esp,0x14
c001af3f:	53                   	push   ebx
c001af40:	e8 3d 0f ff ff       	call   c000be82 <PhysicalDisk::startCache()>
c001af45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af48:	e8 dd 1f ff ff       	call   c000cf2a <createPartitionsForDisk(PhysicalDisk*)>
c001af4d:	83 c4 14             	add    esp,0x14
c001af50:	31 c0                	xor    eax,eax
c001af52:	5b                   	pop    ebx
c001af53:	5e                   	pop    esi
c001af54:	c3                   	ret    
c001af55:	90                   	nop

c001af56 <SATA::SATA()>:
c001af56:	83 ec 0c             	sub    esp,0xc
c001af59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af5d:	83 ec 04             	sub    esp,0x4
c001af60:	68 00 02 00 00       	push   0x200
c001af65:	68 10 fd 01 c0       	push   0xc001fd10
c001af6a:	50                   	push   eax
c001af6b:	e8 aa 0e ff ff       	call   c000be1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001af70:	83 c4 10             	add    esp,0x10
c001af73:	ba 80 fd 01 c0       	mov    edx,0xc001fd80
c001af78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af7c:	89 10                	mov    DWORD PTR [eax],edx
c001af7e:	90                   	nop
c001af7f:	83 c4 0c             	add    esp,0xc
c001af82:	c3                   	ret    
c001af83:	90                   	nop

c001af84 <SATA::access(unsigned long long, int, void*, bool)>:
c001af84:	55                   	push   ebp
c001af85:	57                   	push   edi
c001af86:	56                   	push   esi
c001af87:	53                   	push   ebx
c001af88:	83 ec 2c             	sub    esp,0x2c
c001af8b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001af8f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001af93:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001af97:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001af9b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001af9f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001afa4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001afa8:	7e 10                	jle    c001afba <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001afaa:	83 ec 0c             	sub    esp,0xc
c001afad:	68 20 fd 01 c0       	push   0xc001fd20
c001afb2:	e8 60 53 ff ff       	call   c0010317 <KePanic(char const*)>
c001afb7:	83 c4 10             	add    esp,0x10
c001afba:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001afc0:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001afc6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001afcc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001afd0:	89 d0                	mov    eax,edx
c001afd2:	c1 e0 07             	shl    eax,0x7
c001afd5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001afd9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001afe3:	51                   	push   ecx
c001afe4:	8d 42 02             	lea    eax,[edx+0x2]
c001afe7:	51                   	push   ecx
c001afe8:	c1 e0 07             	shl    eax,0x7
c001afeb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001afef:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001aff3:	50                   	push   eax
c001aff4:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001affa:	e8 b9 ec ff ff       	call   c0019cb8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001afff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b003:	83 c4 10             	add    esp,0x10
c001b006:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b00b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b00f:	0f 84 4f 01 00 00    	je     c001b164 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001b015:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b019:	c1 e0 09             	shl    eax,0x9
c001b01c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001b021:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b025:	74 0e                	je     c001b035 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001b027:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001b02d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001b031:	89 c1                	mov    ecx,eax
c001b033:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b035:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001b039:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001b03f:	8d 42 02             	lea    eax,[edx+0x2]
c001b042:	c1 e0 07             	shl    eax,0x7
c001b045:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001b049:	8b 00                	mov    eax,DWORD PTR [eax]
c001b04b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b051:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b057:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b05b:	c1 e1 05             	shl    ecx,0x5
c001b05e:	01 c8                	add    eax,ecx
c001b060:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001b064:	83 e1 01             	and    ecx,0x1
c001b067:	89 ce                	mov    esi,ecx
c001b069:	8a 08                	mov    cl,BYTE PTR [eax]
c001b06b:	c1 e6 06             	shl    esi,0x6
c001b06e:	83 e1 bf             	and    ecx,0xffffffbf
c001b071:	09 f1                	or     ecx,esi
c001b073:	88 08                	mov    BYTE PTR [eax],cl
c001b075:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b077:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001b07d:	81 c9 05 00 01 00    	or     ecx,0x10005
c001b083:	89 08                	mov    DWORD PTR [eax],ecx
c001b085:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001b08b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001b091:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001b097:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001b09a:	50                   	push   eax
c001b09b:	68 90 00 00 00       	push   0x90
c001b0a0:	6a 00                	push   0x0
c001b0a2:	56                   	push   esi
c001b0a3:	e8 28 54 fe ff       	call   c00004d0 <memset>
c001b0a8:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001b0ae:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001b0b2:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001b0b8:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001b0bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b0c0:	83 c4 10             	add    esp,0x10
c001b0c3:	48                   	dec    eax
c001b0c4:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b0c9:	89 c1                	mov    ecx,eax
c001b0cb:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001b0d1:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b0d6:	09 c8                	or     eax,ecx
c001b0d8:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001b0de:	66 8b 06             	mov    ax,WORD PTR [esi]
c001b0e1:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001b0e8:	66 25 00 7f          	and    ax,0x7f00
c001b0ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b0f0:	66 0d 27 80          	or     ax,0x8027
c001b0f4:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001b0f9:	66 89 06             	mov    WORD PTR [esi],ax
c001b0fc:	19 c0                	sbb    eax,eax
c001b0fe:	83 e0 f0             	and    eax,0xfffffff0
c001b101:	83 c0 35             	add    eax,0x35
c001b104:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001b107:	89 e8                	mov    eax,ebp
c001b109:	c1 e8 10             	shr    eax,0x10
c001b10c:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001b10f:	89 e8                	mov    eax,ebp
c001b111:	c1 e8 18             	shr    eax,0x18
c001b114:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001b117:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b11b:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001b11e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b122:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001b125:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b129:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001b12d:	89 d6                	mov    esi,edx
c001b12f:	31 c0                	xor    eax,eax
c001b131:	c1 e6 07             	shl    esi,0x7
c001b134:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001b138:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001b13e:	80 e1 88             	and    cl,0x88
c001b141:	74 0a                	je     c001b14d <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001b143:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b148:	74 0a                	je     c001b154 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001b14a:	40                   	inc    eax
c001b14b:	eb eb                	jmp    c001b138 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001b14d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b152:	75 17                	jne    c001b16b <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001b154:	83 ec 0c             	sub    esp,0xc
c001b157:	68 59 fd 01 c0       	push   0xc001fd59
c001b15c:	e8 ad f4 fe ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001b161:	83 c4 10             	add    esp,0x10
c001b164:	b8 01 00 00 00       	mov    eax,0x1
c001b169:	eb 5d                	jmp    c001b1c8 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001b16b:	b8 01 00 00 00       	mov    eax,0x1
c001b170:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b174:	c1 e2 07             	shl    edx,0x7
c001b177:	d3 e0                	shl    eax,cl
c001b179:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001b17d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001b183:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001b189:	85 c8                	test   eax,ecx
c001b18b:	74 16                	je     c001b1a3 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001b18d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001b193:	0f ba e1 1e          	bt     ecx,0x1e
c001b197:	73 ea                	jae    c001b183 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001b199:	83 ec 0c             	sub    esp,0xc
c001b19c:	68 67 fd 01 c0       	push   0xc001fd67
c001b1a1:	eb b9                	jmp    c001b15c <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001b1a3:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001b1a9:	0f ba e0 1e          	bt     eax,0x1e
c001b1ad:	72 b5                	jb     c001b164 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001b1af:	31 c0                	xor    eax,eax
c001b1b1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001b1b6:	75 10                	jne    c001b1c8 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001b1b8:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001b1be:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b1c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b1c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1c8:	83 c4 2c             	add    esp,0x2c
c001b1cb:	5b                   	pop    ebx
c001b1cc:	5e                   	pop    esi
c001b1cd:	5f                   	pop    edi
c001b1ce:	5d                   	pop    ebp
c001b1cf:	c3                   	ret    

c001b1d0 <SATA::read(unsigned long long, int, void*)>:
c001b1d0:	55                   	push   ebp
c001b1d1:	57                   	push   edi
c001b1d2:	56                   	push   esi
c001b1d3:	be 04 00 00 00       	mov    esi,0x4
c001b1d8:	53                   	push   ebx
c001b1d9:	83 ec 0c             	sub    esp,0xc
c001b1dc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b1e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b1e4:	8d 7b ff             	lea    edi,[ebx-0x1]
c001b1e7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b1eb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b1ef:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b1f5:	0f 87 1a 02 00 00    	ja     c001b415 <SATA::read(unsigned long long, int, void*)+0x245>
c001b1fb:	be 06 00 00 00       	mov    esi,0x6
c001b200:	85 c9                	test   ecx,ecx
c001b202:	0f 84 0d 02 00 00    	je     c001b415 <SATA::read(unsigned long long, int, void*)+0x245>
c001b208:	56                   	push   esi
c001b209:	56                   	push   esi
c001b20a:	6a 00                	push   0x0
c001b20c:	51                   	push   ecx
c001b20d:	53                   	push   ebx
c001b20e:	52                   	push   edx
c001b20f:	50                   	push   eax
c001b210:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b214:	e8 6b fd ff ff       	call   c001af84 <SATA::access(unsigned long long, int, void*, bool)>
c001b219:	83 c4 20             	add    esp,0x20
c001b21c:	89 c6                	mov    esi,eax
c001b21e:	85 c0                	test   eax,eax
c001b220:	0f 85 ea 01 00 00    	jne    c001b410 <SATA::read(unsigned long long, int, void*)+0x240>
c001b226:	01 1d 54 6b 02 c0    	add    DWORD PTR ds:0xc0026b54,ebx
c001b22c:	bb 0a 00 00 00       	mov    ebx,0xa
c001b231:	50                   	push   eax
c001b232:	50                   	push   eax
c001b233:	6a 0f                	push   0xf
c001b235:	6a 00                	push   0x0
c001b237:	e8 87 f2 ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001b23c:	5a                   	pop    edx
c001b23d:	0f b6 c0             	movzx  eax,al
c001b240:	59                   	pop    ecx
c001b241:	b9 10 27 00 00       	mov    ecx,0x2710
c001b246:	50                   	push   eax
c001b247:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b24c:	99                   	cdq    
c001b24d:	f7 f9                	idiv   ecx
c001b24f:	99                   	cdq    
c001b250:	f7 fb                	idiv   ebx
c001b252:	8d 42 30             	lea    eax,[edx+0x30]
c001b255:	0f b6 c0             	movzx  eax,al
c001b258:	50                   	push   eax
c001b259:	e8 54 f2 ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001b25e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b264:	5f                   	pop    edi
c001b265:	5d                   	pop    ebp
c001b266:	bd e8 03 00 00       	mov    ebp,0x3e8
c001b26b:	6a 0f                	push   0xf
c001b26d:	6a 00                	push   0x0
c001b26f:	e8 4f f2 ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001b274:	5a                   	pop    edx
c001b275:	0f b6 c0             	movzx  eax,al
c001b278:	59                   	pop    ecx
c001b279:	50                   	push   eax
c001b27a:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b27f:	99                   	cdq    
c001b280:	f7 fd                	idiv   ebp
c001b282:	99                   	cdq    
c001b283:	f7 fb                	idiv   ebx
c001b285:	8d 42 30             	lea    eax,[edx+0x30]
c001b288:	0f b6 c0             	movzx  eax,al
c001b28b:	50                   	push   eax
c001b28c:	e8 21 f2 ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001b291:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b297:	5f                   	pop    edi
c001b298:	bf 64 00 00 00       	mov    edi,0x64
c001b29d:	58                   	pop    eax
c001b29e:	6a 0f                	push   0xf
c001b2a0:	6a 00                	push   0x0
c001b2a2:	e8 1c f2 ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001b2a7:	5a                   	pop    edx
c001b2a8:	0f b6 c0             	movzx  eax,al
c001b2ab:	59                   	pop    ecx
c001b2ac:	50                   	push   eax
c001b2ad:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b2b2:	99                   	cdq    
c001b2b3:	f7 ff                	idiv   edi
c001b2b5:	99                   	cdq    
c001b2b6:	f7 fb                	idiv   ebx
c001b2b8:	8d 42 30             	lea    eax,[edx+0x30]
c001b2bb:	0f b6 c0             	movzx  eax,al
c001b2be:	50                   	push   eax
c001b2bf:	e8 ee f1 ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001b2c4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b2ca:	58                   	pop    eax
c001b2cb:	5a                   	pop    edx
c001b2cc:	6a 0f                	push   0xf
c001b2ce:	6a 00                	push   0x0
c001b2d0:	e8 ee f1 ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001b2d5:	59                   	pop    ecx
c001b2d6:	0f b6 c0             	movzx  eax,al
c001b2d9:	5a                   	pop    edx
c001b2da:	50                   	push   eax
c001b2db:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b2e0:	99                   	cdq    
c001b2e1:	f7 fb                	idiv   ebx
c001b2e3:	99                   	cdq    
c001b2e4:	f7 fb                	idiv   ebx
c001b2e6:	8d 42 30             	lea    eax,[edx+0x30]
c001b2e9:	0f b6 c0             	movzx  eax,al
c001b2ec:	50                   	push   eax
c001b2ed:	e8 c0 f1 ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001b2f2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b2f8:	59                   	pop    ecx
c001b2f9:	58                   	pop    eax
c001b2fa:	6a 0f                	push   0xf
c001b2fc:	6a 00                	push   0x0
c001b2fe:	e8 c0 f1 ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001b303:	5a                   	pop    edx
c001b304:	0f b6 c0             	movzx  eax,al
c001b307:	59                   	pop    ecx
c001b308:	50                   	push   eax
c001b309:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b30e:	99                   	cdq    
c001b30f:	f7 fb                	idiv   ebx
c001b311:	8d 42 30             	lea    eax,[edx+0x30]
c001b314:	0f b6 c0             	movzx  eax,al
c001b317:	50                   	push   eax
c001b318:	e8 95 f1 ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001b31d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b323:	58                   	pop    eax
c001b324:	5a                   	pop    edx
c001b325:	6a 0f                	push   0xf
c001b327:	6a 00                	push   0x0
c001b329:	e8 95 f1 ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001b32e:	59                   	pop    ecx
c001b32f:	0f b6 c0             	movzx  eax,al
c001b332:	5a                   	pop    edx
c001b333:	b9 10 27 00 00       	mov    ecx,0x2710
c001b338:	50                   	push   eax
c001b339:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b33e:	99                   	cdq    
c001b33f:	f7 f9                	idiv   ecx
c001b341:	99                   	cdq    
c001b342:	f7 fb                	idiv   ebx
c001b344:	8d 42 30             	lea    eax,[edx+0x30]
c001b347:	0f b6 c0             	movzx  eax,al
c001b34a:	50                   	push   eax
c001b34b:	e8 62 f1 ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001b350:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b356:	59                   	pop    ecx
c001b357:	58                   	pop    eax
c001b358:	6a 0f                	push   0xf
c001b35a:	6a 00                	push   0x0
c001b35c:	e8 62 f1 ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001b361:	5a                   	pop    edx
c001b362:	0f b6 c0             	movzx  eax,al
c001b365:	59                   	pop    ecx
c001b366:	50                   	push   eax
c001b367:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b36c:	99                   	cdq    
c001b36d:	f7 fd                	idiv   ebp
c001b36f:	99                   	cdq    
c001b370:	f7 fb                	idiv   ebx
c001b372:	8d 42 30             	lea    eax,[edx+0x30]
c001b375:	0f b6 c0             	movzx  eax,al
c001b378:	50                   	push   eax
c001b379:	e8 34 f1 ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001b37e:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b384:	5d                   	pop    ebp
c001b385:	58                   	pop    eax
c001b386:	6a 0f                	push   0xf
c001b388:	6a 00                	push   0x0
c001b38a:	e8 34 f1 ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001b38f:	5a                   	pop    edx
c001b390:	0f b6 c0             	movzx  eax,al
c001b393:	59                   	pop    ecx
c001b394:	50                   	push   eax
c001b395:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b39a:	99                   	cdq    
c001b39b:	f7 ff                	idiv   edi
c001b39d:	99                   	cdq    
c001b39e:	f7 fb                	idiv   ebx
c001b3a0:	8d 42 30             	lea    eax,[edx+0x30]
c001b3a3:	0f b6 c0             	movzx  eax,al
c001b3a6:	50                   	push   eax
c001b3a7:	e8 06 f1 ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001b3ac:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001b3b2:	5f                   	pop    edi
c001b3b3:	5d                   	pop    ebp
c001b3b4:	6a 0f                	push   0xf
c001b3b6:	6a 00                	push   0x0
c001b3b8:	e8 06 f1 ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001b3bd:	5a                   	pop    edx
c001b3be:	0f b6 c0             	movzx  eax,al
c001b3c1:	59                   	pop    ecx
c001b3c2:	50                   	push   eax
c001b3c3:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b3c8:	99                   	cdq    
c001b3c9:	f7 fb                	idiv   ebx
c001b3cb:	99                   	cdq    
c001b3cc:	f7 fb                	idiv   ebx
c001b3ce:	8d 42 30             	lea    eax,[edx+0x30]
c001b3d1:	0f b6 c0             	movzx  eax,al
c001b3d4:	50                   	push   eax
c001b3d5:	e8 d8 f0 ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001b3da:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001b3e0:	5f                   	pop    edi
c001b3e1:	5d                   	pop    ebp
c001b3e2:	6a 0f                	push   0xf
c001b3e4:	6a 00                	push   0x0
c001b3e6:	e8 d8 f0 ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001b3eb:	5a                   	pop    edx
c001b3ec:	0f b6 c0             	movzx  eax,al
c001b3ef:	59                   	pop    ecx
c001b3f0:	50                   	push   eax
c001b3f1:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b3f6:	99                   	cdq    
c001b3f7:	f7 fb                	idiv   ebx
c001b3f9:	83 c2 30             	add    edx,0x30
c001b3fc:	0f b6 d2             	movzx  edx,dl
c001b3ff:	52                   	push   edx
c001b400:	e8 ad f0 ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001b405:	83 c4 10             	add    esp,0x10
c001b408:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001b40e:	eb 05                	jmp    c001b415 <SATA::read(unsigned long long, int, void*)+0x245>
c001b410:	be 01 00 00 00       	mov    esi,0x1
c001b415:	83 c4 0c             	add    esp,0xc
c001b418:	89 f0                	mov    eax,esi
c001b41a:	5b                   	pop    ebx
c001b41b:	5e                   	pop    esi
c001b41c:	5f                   	pop    edi
c001b41d:	5d                   	pop    ebp
c001b41e:	c3                   	ret    
c001b41f:	90                   	nop

c001b420 <SATA::write(unsigned long long, int, void*)>:
c001b420:	55                   	push   ebp
c001b421:	b8 04 00 00 00       	mov    eax,0x4
c001b426:	57                   	push   edi
c001b427:	56                   	push   esi
c001b428:	53                   	push   ebx
c001b429:	83 ec 1c             	sub    esp,0x1c
c001b42c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001b430:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b434:	8d 75 ff             	lea    esi,[ebp-0x1]
c001b437:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b43b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001b43f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001b445:	0f 87 32 02 00 00    	ja     c001b67d <SATA::write(unsigned long long, int, void*)+0x25d>
c001b44b:	b8 06 00 00 00       	mov    eax,0x6
c001b450:	85 ff                	test   edi,edi
c001b452:	0f 84 25 02 00 00    	je     c001b67d <SATA::write(unsigned long long, int, void*)+0x25d>
c001b458:	89 ee                	mov    esi,ebp
c001b45a:	c1 e6 09             	shl    esi,0x9
c001b45d:	01 fe                	add    esi,edi
c001b45f:	89 c8                	mov    eax,ecx
c001b461:	89 da                	mov    edx,ebx
c001b463:	83 c0 01             	add    eax,0x1
c001b466:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b46a:	83 d2 00             	adc    edx,0x0
c001b46d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b471:	50                   	push   eax
c001b472:	50                   	push   eax
c001b473:	6a 01                	push   0x1
c001b475:	57                   	push   edi
c001b476:	81 c7 00 02 00 00    	add    edi,0x200
c001b47c:	6a 01                	push   0x1
c001b47e:	53                   	push   ebx
c001b47f:	51                   	push   ecx
c001b480:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b484:	e8 fb fa ff ff       	call   c001af84 <SATA::access(unsigned long long, int, void*, bool)>
c001b489:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001b48d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b491:	83 c4 20             	add    esp,0x20
c001b494:	39 f7                	cmp    edi,esi
c001b496:	75 c7                	jne    c001b45f <SATA::write(unsigned long long, int, void*)+0x3f>
c001b498:	bb 0a 00 00 00       	mov    ebx,0xa
c001b49d:	01 2d 50 6b 02 c0    	add    DWORD PTR ds:0xc0026b50,ebp
c001b4a3:	bd 10 27 00 00       	mov    ebp,0x2710
c001b4a8:	50                   	push   eax
c001b4a9:	50                   	push   eax
c001b4aa:	6a 0f                	push   0xf
c001b4ac:	6a 00                	push   0x0
c001b4ae:	e8 10 f0 ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001b4b3:	5a                   	pop    edx
c001b4b4:	0f b6 c0             	movzx  eax,al
c001b4b7:	59                   	pop    ecx
c001b4b8:	50                   	push   eax
c001b4b9:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b4be:	99                   	cdq    
c001b4bf:	f7 fd                	idiv   ebp
c001b4c1:	99                   	cdq    
c001b4c2:	f7 fb                	idiv   ebx
c001b4c4:	8d 42 30             	lea    eax,[edx+0x30]
c001b4c7:	0f b6 c0             	movzx  eax,al
c001b4ca:	50                   	push   eax
c001b4cb:	e8 e2 ef ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001b4d0:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b4d6:	5e                   	pop    esi
c001b4d7:	5f                   	pop    edi
c001b4d8:	bf e8 03 00 00       	mov    edi,0x3e8
c001b4dd:	6a 0f                	push   0xf
c001b4df:	6a 00                	push   0x0
c001b4e1:	e8 dd ef ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001b4e6:	5a                   	pop    edx
c001b4e7:	0f b6 c0             	movzx  eax,al
c001b4ea:	59                   	pop    ecx
c001b4eb:	50                   	push   eax
c001b4ec:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b4f1:	99                   	cdq    
c001b4f2:	f7 ff                	idiv   edi
c001b4f4:	99                   	cdq    
c001b4f5:	f7 fb                	idiv   ebx
c001b4f7:	8d 42 30             	lea    eax,[edx+0x30]
c001b4fa:	0f b6 c0             	movzx  eax,al
c001b4fd:	50                   	push   eax
c001b4fe:	e8 af ef ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001b503:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b509:	5e                   	pop    esi
c001b50a:	be 64 00 00 00       	mov    esi,0x64
c001b50f:	58                   	pop    eax
c001b510:	6a 0f                	push   0xf
c001b512:	6a 00                	push   0x0
c001b514:	e8 aa ef ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001b519:	5a                   	pop    edx
c001b51a:	0f b6 c0             	movzx  eax,al
c001b51d:	59                   	pop    ecx
c001b51e:	50                   	push   eax
c001b51f:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b524:	99                   	cdq    
c001b525:	f7 fe                	idiv   esi
c001b527:	99                   	cdq    
c001b528:	f7 fb                	idiv   ebx
c001b52a:	8d 42 30             	lea    eax,[edx+0x30]
c001b52d:	0f b6 c0             	movzx  eax,al
c001b530:	50                   	push   eax
c001b531:	e8 7c ef ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001b536:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b53c:	58                   	pop    eax
c001b53d:	5a                   	pop    edx
c001b53e:	6a 0f                	push   0xf
c001b540:	6a 00                	push   0x0
c001b542:	e8 7c ef ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001b547:	59                   	pop    ecx
c001b548:	0f b6 c0             	movzx  eax,al
c001b54b:	5a                   	pop    edx
c001b54c:	50                   	push   eax
c001b54d:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b552:	99                   	cdq    
c001b553:	f7 fb                	idiv   ebx
c001b555:	99                   	cdq    
c001b556:	f7 fb                	idiv   ebx
c001b558:	8d 42 30             	lea    eax,[edx+0x30]
c001b55b:	0f b6 c0             	movzx  eax,al
c001b55e:	50                   	push   eax
c001b55f:	e8 4e ef ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001b564:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b56a:	59                   	pop    ecx
c001b56b:	58                   	pop    eax
c001b56c:	6a 0f                	push   0xf
c001b56e:	6a 00                	push   0x0
c001b570:	e8 4e ef ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001b575:	5a                   	pop    edx
c001b576:	0f b6 c0             	movzx  eax,al
c001b579:	59                   	pop    ecx
c001b57a:	50                   	push   eax
c001b57b:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b580:	99                   	cdq    
c001b581:	f7 fb                	idiv   ebx
c001b583:	83 c2 30             	add    edx,0x30
c001b586:	0f b6 d2             	movzx  edx,dl
c001b589:	52                   	push   edx
c001b58a:	e8 23 ef ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001b58f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b595:	58                   	pop    eax
c001b596:	5a                   	pop    edx
c001b597:	6a 0f                	push   0xf
c001b599:	6a 00                	push   0x0
c001b59b:	e8 23 ef ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001b5a0:	59                   	pop    ecx
c001b5a1:	0f b6 c0             	movzx  eax,al
c001b5a4:	5a                   	pop    edx
c001b5a5:	50                   	push   eax
c001b5a6:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b5ab:	99                   	cdq    
c001b5ac:	f7 fd                	idiv   ebp
c001b5ae:	99                   	cdq    
c001b5af:	f7 fb                	idiv   ebx
c001b5b1:	8d 42 30             	lea    eax,[edx+0x30]
c001b5b4:	0f b6 c0             	movzx  eax,al
c001b5b7:	50                   	push   eax
c001b5b8:	e8 f5 ee ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001b5bd:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b5c3:	59                   	pop    ecx
c001b5c4:	5d                   	pop    ebp
c001b5c5:	6a 0f                	push   0xf
c001b5c7:	6a 00                	push   0x0
c001b5c9:	e8 f5 ee ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001b5ce:	5a                   	pop    edx
c001b5cf:	0f b6 c0             	movzx  eax,al
c001b5d2:	59                   	pop    ecx
c001b5d3:	50                   	push   eax
c001b5d4:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b5d9:	99                   	cdq    
c001b5da:	f7 ff                	idiv   edi
c001b5dc:	99                   	cdq    
c001b5dd:	f7 fb                	idiv   ebx
c001b5df:	8d 42 30             	lea    eax,[edx+0x30]
c001b5e2:	0f b6 c0             	movzx  eax,al
c001b5e5:	50                   	push   eax
c001b5e6:	e8 c7 ee ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001b5eb:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b5f1:	5f                   	pop    edi
c001b5f2:	5d                   	pop    ebp
c001b5f3:	6a 0f                	push   0xf
c001b5f5:	6a 00                	push   0x0
c001b5f7:	e8 c7 ee ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001b5fc:	5a                   	pop    edx
c001b5fd:	0f b6 c0             	movzx  eax,al
c001b600:	59                   	pop    ecx
c001b601:	50                   	push   eax
c001b602:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b607:	99                   	cdq    
c001b608:	f7 fe                	idiv   esi
c001b60a:	99                   	cdq    
c001b60b:	f7 fb                	idiv   ebx
c001b60d:	8d 42 30             	lea    eax,[edx+0x30]
c001b610:	0f b6 c0             	movzx  eax,al
c001b613:	50                   	push   eax
c001b614:	e8 99 ee ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001b619:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001b61f:	5e                   	pop    esi
c001b620:	5f                   	pop    edi
c001b621:	6a 0f                	push   0xf
c001b623:	6a 00                	push   0x0
c001b625:	e8 99 ee ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001b62a:	5d                   	pop    ebp
c001b62b:	0f b6 c0             	movzx  eax,al
c001b62e:	5a                   	pop    edx
c001b62f:	50                   	push   eax
c001b630:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b635:	99                   	cdq    
c001b636:	f7 fb                	idiv   ebx
c001b638:	99                   	cdq    
c001b639:	f7 fb                	idiv   ebx
c001b63b:	8d 42 30             	lea    eax,[edx+0x30]
c001b63e:	0f b6 c0             	movzx  eax,al
c001b641:	50                   	push   eax
c001b642:	e8 6b ee ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001b647:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001b64d:	59                   	pop    ecx
c001b64e:	5e                   	pop    esi
c001b64f:	6a 0f                	push   0xf
c001b651:	6a 00                	push   0x0
c001b653:	e8 6b ee ff ff       	call   c001a4c3 <combineColours(unsigned char, unsigned char)>
c001b658:	5f                   	pop    edi
c001b659:	0f b6 c0             	movzx  eax,al
c001b65c:	5d                   	pop    ebp
c001b65d:	50                   	push   eax
c001b65e:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b663:	99                   	cdq    
c001b664:	f7 fb                	idiv   ebx
c001b666:	83 c2 30             	add    edx,0x30
c001b669:	0f b6 d2             	movzx  edx,dl
c001b66c:	52                   	push   edx
c001b66d:	e8 40 ee ff ff       	call   c001a4b2 <combineCharAndColour(char, unsigned char)>
c001b672:	83 c4 10             	add    esp,0x10
c001b675:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001b67b:	31 c0                	xor    eax,eax
c001b67d:	83 c4 1c             	add    esp,0x1c
c001b680:	5b                   	pop    ebx
c001b681:	5e                   	pop    esi
c001b682:	5f                   	pop    edi
c001b683:	5d                   	pop    ebp
c001b684:	c3                   	ret    
c001b685:	90                   	nop

c001b686 <SATAPI::write(unsigned long long, int, void*)>:
c001b686:	b8 03 00 00 00       	mov    eax,0x3
c001b68b:	c3                   	ret    

c001b68c <SATAPI::close(int, int, void*)>:
c001b68c:	83 ec 0c             	sub    esp,0xc
c001b68f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b693:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b699:	85 c0                	test   eax,eax
c001b69b:	74 0c                	je     c001b6a9 <SATAPI::close(int, int, void*)+0x1d>
c001b69d:	83 ec 0c             	sub    esp,0xc
c001b6a0:	8b 10                	mov    edx,DWORD PTR [eax]
c001b6a2:	50                   	push   eax
c001b6a3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b6a6:	83 c4 10             	add    esp,0x10
c001b6a9:	31 c0                	xor    eax,eax
c001b6ab:	83 c4 0c             	add    esp,0xc
c001b6ae:	c3                   	ret    
c001b6af:	90                   	nop

c001b6b0 <SATAPI::SATAPI()>:
c001b6b0:	83 ec 0c             	sub    esp,0xc
c001b6b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6b7:	83 ec 04             	sub    esp,0x4
c001b6ba:	68 00 08 00 00       	push   0x800
c001b6bf:	68 b0 fd 01 c0       	push   0xc001fdb0
c001b6c4:	50                   	push   eax
c001b6c5:	e8 50 07 ff ff       	call   c000be1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b6ca:	83 c4 10             	add    esp,0x10
c001b6cd:	ba 90 fe 01 c0       	mov    edx,0xc001fe90
c001b6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6d6:	89 10                	mov    DWORD PTR [eax],edx
c001b6d8:	90                   	nop
c001b6d9:	83 c4 0c             	add    esp,0xc
c001b6dc:	c3                   	ret    
c001b6dd:	90                   	nop

c001b6de <SATAPI::diskRemoved()>:
c001b6de:	c3                   	ret    
c001b6df:	90                   	nop

c001b6e0 <SATAPI::diskInserted()>:
c001b6e0:	83 ec 18             	sub    esp,0x18
c001b6e3:	68 bc fd 01 c0       	push   0xc001fdbc
c001b6e8:	e8 21 ef fe ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001b6ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6f1:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001b6f8:	83 c4 1c             	add    esp,0x1c
c001b6fb:	c3                   	ret    

c001b6fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001b6fc:	55                   	push   ebp
c001b6fd:	57                   	push   edi
c001b6fe:	56                   	push   esi
c001b6ff:	53                   	push   ebx
c001b700:	83 ec 34             	sub    esp,0x34
c001b703:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b707:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b70b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b70f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b713:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001b717:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001b71d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b723:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b727:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001b72d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b731:	83 c0 02             	add    eax,0x2
c001b734:	c1 e0 07             	shl    eax,0x7
c001b737:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001b73b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b73f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b743:	c1 e0 07             	shl    eax,0x7
c001b746:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001b74a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b74e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b758:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b75c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b762:	e8 51 e5 ff ff       	call   c0019cb8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b767:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b76b:	83 c4 10             	add    esp,0x10
c001b76e:	b8 01 00 00 00       	mov    eax,0x1
c001b773:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b778:	0f 84 49 02 00 00    	je     c001b9c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001b77e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b788:	8b 00                	mov    eax,DWORD PTR [eax]
c001b78a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b790:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b796:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b79a:	c1 e1 05             	shl    ecx,0x5
c001b79d:	01 c8                	add    eax,ecx
c001b79f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b7a1:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b7a7:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b7ad:	89 08                	mov    DWORD PTR [eax],ecx
c001b7af:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b7b5:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b7bb:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b7c1:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b7c4:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b7c7:	50                   	push   eax
c001b7c8:	68 90 00 00 00       	push   0x90
c001b7cd:	6a 00                	push   0x0
c001b7cf:	53                   	push   ebx
c001b7d0:	e8 fb 4c fe ff       	call   c00004d0 <memset>
c001b7d5:	b9 0c 00 00 00       	mov    ecx,0xc
c001b7da:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b7de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b7e0:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b7e6:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b7ea:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b7f0:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b7f4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b7f8:	48                   	dec    eax
c001b7f9:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b7fe:	89 c1                	mov    ecx,eax
c001b800:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b806:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b80b:	09 c8                	or     eax,ecx
c001b80d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b813:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b816:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b81d:	66 25 00 7f          	and    ax,0x7f00
c001b821:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b825:	66 0d 27 80          	or     ax,0x8027
c001b829:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b82d:	66 89 03             	mov    WORD PTR [ebx],ax
c001b830:	89 d0                	mov    eax,edx
c001b832:	c1 ea 18             	shr    edx,0x18
c001b835:	c1 e8 10             	shr    eax,0x10
c001b838:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b83b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b83e:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b842:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b845:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b849:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b84c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b850:	83 c4 10             	add    esp,0x10
c001b853:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b857:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b85b:	31 c0                	xor    eax,eax
c001b85d:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b863:	80 e1 88             	and    cl,0x88
c001b866:	74 0a                	je     c001b872 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x176>
c001b868:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b86d:	74 0a                	je     c001b879 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17d>
c001b86f:	40                   	inc    eax
c001b870:	eb eb                	jmp    c001b85d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x161>
c001b872:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b877:	75 43                	jne    c001b8bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001b879:	83 ec 0c             	sub    esp,0xc
c001b87c:	68 d4 fd 01 c0       	push   0xc001fdd4
c001b881:	e8 88 ed fe ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001b886:	58                   	pop    eax
c001b887:	5a                   	pop    edx
c001b888:	68 e9 fd 01 c0       	push   0xc001fde9
c001b88d:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c001b893:	e8 5a cf fe ff       	call   c00087f2 <VgaText::puts(char const*)>
c001b898:	59                   	pop    ecx
c001b899:	5b                   	pop    ebx
c001b89a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b89e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b8a4:	e8 a9 e4 ff ff       	call   c0019d52 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b8a9:	5e                   	pop    esi
c001b8aa:	5f                   	pop    edi
c001b8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b8af:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b8b5:	e8 78 e4 ff ff       	call   c0019d32 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b8ba:	eb 48                	jmp    c001b904 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x208>
c001b8bc:	be 01 00 00 00       	mov    esi,0x1
c001b8c1:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b8c5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b8c9:	d3 e6                	shl    esi,cl
c001b8cb:	c1 e7 07             	shl    edi,0x7
c001b8ce:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b8d4:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b8d9:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b8dd:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b8e3:	85 c6                	test   esi,eax
c001b8e5:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b8eb:	0f 84 a3 00 00 00    	je     c001b994 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x298>
c001b8f1:	0f ba e0 1e          	bt     eax,0x1e
c001b8f5:	73 1a                	jae    c001b911 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001b8f7:	83 ec 0c             	sub    esp,0xc
c001b8fa:	68 fb fd 01 c0       	push   0xc001fdfb
c001b8ff:	e8 0a ed fe ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001b904:	83 c4 10             	add    esp,0x10
c001b907:	b8 01 00 00 00       	mov    eax,0x1
c001b90c:	e9 b6 00 00 00       	jmp    c001b9c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001b911:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b917:	83 f8 0d             	cmp    eax,0xd
c001b91a:	77 0a                	ja     c001b926 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x22a>
c001b91c:	83 ec 0c             	sub    esp,0xc
c001b91f:	68 c8 00 00 00       	push   0xc8
c001b924:	eb 28                	jmp    c001b94e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001b926:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b92c:	83 f8 0d             	cmp    eax,0xd
c001b92f:	77 0a                	ja     c001b93b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23f>
c001b931:	83 ec 0c             	sub    esp,0xc
c001b934:	68 58 02 00 00       	push   0x258
c001b939:	eb 13                	jmp    c001b94e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001b93b:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b941:	83 f8 06             	cmp    eax,0x6
c001b944:	77 10                	ja     c001b956 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001b946:	83 ec 0c             	sub    esp,0xc
c001b949:	68 dc 05 00 00       	push   0x5dc
c001b94e:	e8 e1 81 ff ff       	call   c0013b34 <milliTenthSleep(unsigned int)>
c001b953:	83 c4 10             	add    esp,0x10
c001b956:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b95a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b95d:	75 06                	jne    c001b965 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x269>
c001b95f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b963:	74 15                	je     c001b97a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001b965:	83 fb 06             	cmp    ebx,0x6
c001b968:	77 10                	ja     c001b97a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001b96a:	83 ec 0c             	sub    esp,0xc
c001b96d:	68 c4 09 00 00       	push   0x9c4
c001b972:	e8 bd 81 ff ff       	call   c0013b34 <milliTenthSleep(unsigned int)>
c001b977:	83 c4 10             	add    esp,0x10
c001b97a:	43                   	inc    ebx
c001b97b:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b981:	0f 85 56 ff ff ff    	jne    c001b8dd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e1>
c001b987:	83 ec 0c             	sub    esp,0xc
c001b98a:	68 0e fe 01 c0       	push   0xc001fe0e
c001b98f:	e9 6b ff ff ff       	jmp    c001b8ff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001b994:	0f ba e0 1e          	bt     eax,0x1e
c001b998:	73 0d                	jae    c001b9a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ab>
c001b99a:	83 ec 0c             	sub    esp,0xc
c001b99d:	68 22 fe 01 c0       	push   0xc001fe22
c001b9a2:	e9 58 ff ff ff       	jmp    c001b8ff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001b9a7:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b9ac:	74 17                	je     c001b9c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001b9ae:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b9b3:	74 10                	je     c001b9c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001b9b5:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b9bb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b9bf:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b9c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b9c5:	31 c0                	xor    eax,eax
c001b9c7:	83 c4 2c             	add    esp,0x2c
c001b9ca:	5b                   	pop    ebx
c001b9cb:	5e                   	pop    esi
c001b9cc:	5f                   	pop    edi
c001b9cd:	5d                   	pop    ebp
c001b9ce:	c3                   	ret    
c001b9cf:	90                   	nop

c001b9d0 <SATAPI::eject()>:
c001b9d0:	57                   	push   edi
c001b9d1:	b9 03 00 00 00       	mov    ecx,0x3
c001b9d6:	83 ec 18             	sub    esp,0x18
c001b9d9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b9dd:	fc                   	cld    
c001b9de:	31 c0                	xor    eax,eax
c001b9e0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b9e2:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b9e7:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b9ec:	50                   	push   eax
c001b9ed:	6a 00                	push   0x0
c001b9ef:	6a 00                	push   0x0
c001b9f1:	6a 00                	push   0x0
c001b9f3:	6a 00                	push   0x0
c001b9f5:	6a 02                	push   0x2
c001b9f7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b9fb:	50                   	push   eax
c001b9fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ba00:	e8 f7 fc ff ff       	call   c001b6fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ba05:	31 c0                	xor    eax,eax
c001ba07:	83 c4 38             	add    esp,0x38
c001ba0a:	5f                   	pop    edi
c001ba0b:	c3                   	ret    

c001ba0c <SATAPI::detectMedia()>:
c001ba0c:	53                   	push   ebx
c001ba0d:	83 ec 14             	sub    esp,0x14
c001ba10:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ba14:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ba1a:	e8 d9 1b ff ff       	call   c000d5f8 <VCache::writeWriteBuffer()>
c001ba1f:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001ba25:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ba29:	83 c4 18             	add    esp,0x18
c001ba2c:	5b                   	pop    ebx
c001ba2d:	e9 b6 1b ff ff       	jmp    c000d5e8 <VCache::invalidateReadBuffer()>

c001ba32 <SATAPI::open(int, int, void*)>:
c001ba32:	56                   	push   esi
c001ba33:	53                   	push   ebx
c001ba34:	51                   	push   ecx
c001ba35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ba3d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ba47:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ba4d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ba57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba5b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ba65:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ba6b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ba72:	e8 da c0 fe ff       	call   c0007b51 <Phys::allocatePage()>
c001ba77:	89 c6                	mov    esi,eax
c001ba79:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ba7f:	81 c6 00 10 00 00    	add    esi,0x1000
c001ba85:	e8 c7 c0 fe ff       	call   c0007b51 <Phys::allocatePage()>
c001ba8a:	39 c6                	cmp    esi,eax
c001ba8c:	74 10                	je     c001ba9e <SATAPI::open(int, int, void*)+0x6c>
c001ba8e:	83 ec 0c             	sub    esp,0xc
c001ba91:	68 37 fe 01 c0       	push   0xc001fe37
c001ba96:	e8 7c 48 ff ff       	call   c0010317 <KePanic(char const*)>
c001ba9b:	83 c4 10             	add    esp,0x10
c001ba9e:	83 ec 0c             	sub    esp,0xc
c001baa1:	6a 02                	push   0x2
c001baa3:	e8 a9 d8 fe ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c001baa8:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001baae:	6a 03                	push   0x3
c001bab0:	50                   	push   eax
c001bab1:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001bab7:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c001babd:	e8 52 df fe ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c001bac2:	83 c4 14             	add    esp,0x14
c001bac5:	68 74 01 00 00       	push   0x174
c001baca:	e8 a6 bd fe ff       	call   c0007875 <malloc>
c001bacf:	83 c4 0c             	add    esp,0xc
c001bad2:	89 c6                	mov    esi,eax
c001bad4:	6a 00                	push   0x0
c001bad6:	68 ff ff ff 7f       	push   0x7fffffff
c001badb:	6a 00                	push   0x0
c001badd:	6a 00                	push   0x0
c001badf:	53                   	push   ebx
c001bae0:	68 4d fe 01 c0       	push   0xc001fe4d
c001bae5:	50                   	push   eax
c001bae6:	e8 0b 10 ff ff       	call   c000caf6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001baeb:	83 c4 14             	add    esp,0x14
c001baee:	56                   	push   esi
c001baef:	e8 b8 10 ff ff       	call   c000cbac <LogicalDisk::assignDriveLetter()>
c001baf4:	5a                   	pop    edx
c001baf5:	0f be c0             	movsx  eax,al
c001baf8:	59                   	pop    ecx
c001baf9:	50                   	push   eax
c001bafa:	68 b4 fc 01 c0       	push   0xc001fcb4
c001baff:	e8 0a eb fe ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001bb04:	58                   	pop    eax
c001bb05:	5a                   	pop    edx
c001bb06:	56                   	push   esi
c001bb07:	53                   	push   ebx
c001bb08:	e8 3f ff fe ff       	call   c000ba4c <Device::addChild(Device*)>
c001bb0d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001bb13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb16:	e8 67 03 ff ff       	call   c000be82 <PhysicalDisk::startCache()>
c001bb1b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001bb22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb25:	e8 e2 fe ff ff       	call   c001ba0c <SATAPI::detectMedia()>
c001bb2a:	83 c4 14             	add    esp,0x14
c001bb2d:	31 c0                	xor    eax,eax
c001bb2f:	5b                   	pop    ebx
c001bb30:	5e                   	pop    esi
c001bb31:	c3                   	ret    

c001bb32 <SATAPI::read(unsigned long long, int, void*)>:
c001bb32:	57                   	push   edi
c001bb33:	56                   	push   esi
c001bb34:	53                   	push   ebx
c001bb35:	83 ec 30             	sub    esp,0x30
c001bb38:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001bb3c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001bb40:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001bb44:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bb48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bb50:	83 fe 04             	cmp    esi,0x4
c001bb53:	7e 10                	jle    c001bb65 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001bb55:	83 ec 0c             	sub    esp,0xc
c001bb58:	68 5b fe 01 c0       	push   0xc001fe5b
c001bb5d:	e8 b5 47 ff ff       	call   c0010317 <KePanic(char const*)>
c001bb62:	83 c4 10             	add    esp,0x10
c001bb65:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001bb6b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bb71:	51                   	push   ecx
c001bb72:	50                   	push   eax
c001bb73:	83 c0 02             	add    eax,0x2
c001bb76:	c1 e0 07             	shl    eax,0x7
c001bb79:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001bb7f:	50                   	push   eax
c001bb80:	52                   	push   edx
c001bb81:	e8 f6 e1 ff ff       	call   c0019d7c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001bb86:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001bb8a:	b9 03 00 00 00       	mov    ecx,0x3
c001bb8f:	fc                   	cld    
c001bb90:	31 c0                	xor    eax,eax
c001bb92:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bb94:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001bb99:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001bb9e:	83 c4 0c             	add    esp,0xc
c001bba1:	6a 00                	push   0x0
c001bba3:	6a 00                	push   0x0
c001bba5:	6a 00                	push   0x0
c001bba7:	6a 00                	push   0x0
c001bba9:	6a 02                	push   0x2
c001bbab:	8d 44 24 30          	lea    eax,[esp+0x30]
c001bbaf:	50                   	push   eax
c001bbb0:	53                   	push   ebx
c001bbb1:	e8 46 fb ff ff       	call   c001b6fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001bbb6:	83 c4 20             	add    esp,0x20
c001bbb9:	85 c0                	test   eax,eax
c001bbbb:	75 44                	jne    c001bc01 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001bbbd:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001bbc1:	b9 03 00 00 00       	mov    ecx,0x3
c001bbc6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bbc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbcc:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001bbd1:	0f c8                	bswap  eax
c001bbd3:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001bbd7:	89 f0                	mov    eax,esi
c001bbd9:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001bbdd:	50                   	push   eax
c001bbde:	56                   	push   esi
c001bbdf:	c1 e6 0b             	shl    esi,0xb
c001bbe2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001bbe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bbea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bbee:	56                   	push   esi
c001bbef:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001bbf3:	50                   	push   eax
c001bbf4:	53                   	push   ebx
c001bbf5:	e8 02 fb ff ff       	call   c001b6fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001bbfa:	83 c4 20             	add    esp,0x20
c001bbfd:	85 c0                	test   eax,eax
c001bbff:	74 14                	je     c001bc15 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001bc01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bc05:	83 ec 0c             	sub    esp,0xc
c001bc08:	53                   	push   ebx
c001bc09:	e8 fe fd ff ff       	call   c001ba0c <SATAPI::detectMedia()>
c001bc0e:	83 c4 10             	add    esp,0x10
c001bc11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc15:	83 c4 30             	add    esp,0x30
c001bc18:	5b                   	pop    ebx
c001bc19:	5e                   	pop    esi
c001bc1a:	5f                   	pop    edi
c001bc1b:	c3                   	ret    

c001bc1c <IOAPIC::close(int, int, void*)>:
c001bc1c:	b8 00 00 00 00       	mov    eax,0x0
c001bc21:	c3                   	ret    

c001bc22 <apicGetBase()>:
c001bc22:	55                   	push   ebp
c001bc23:	89 e5                	mov    ebp,esp
c001bc25:	83 ec 18             	sub    esp,0x18
c001bc28:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001bc2d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001bc33:	83 e0 08             	and    eax,0x8
c001bc36:	84 c0                	test   al,al
c001bc38:	75 07                	jne    c001bc41 <apicGetBase()+0x1f>
c001bc3a:	b8 00 00 00 00       	mov    eax,0x0
c001bc3f:	eb 21                	jmp    c001bc62 <apicGetBase()+0x40>
c001bc41:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001bc46:	83 ec 08             	sub    esp,0x8
c001bc49:	6a 1b                	push   0x1b
c001bc4b:	50                   	push   eax
c001bc4c:	e8 5b b2 fe ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c001bc51:	83 c4 10             	add    esp,0x10
c001bc54:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bc57:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001bc5a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bc5d:	25 00 00 ff ff       	and    eax,0xffff0000
c001bc62:	c9                   	leave  
c001bc63:	c3                   	ret    

c001bc64 <IOAPIC::IOAPIC()>:
c001bc64:	83 ec 0c             	sub    esp,0xc
c001bc67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc6b:	83 ec 08             	sub    esp,0x8
c001bc6e:	68 c0 fe 01 c0       	push   0xc001fec0
c001bc73:	50                   	push   eax
c001bc74:	e8 6b ff fe ff       	call   c000bbe4 <Device::Device(char const*)>
c001bc79:	83 c4 10             	add    esp,0x10
c001bc7c:	ba d0 fe 01 c0       	mov    edx,0xc001fed0
c001bc81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc85:	89 10                	mov    DWORD PTR [eax],edx
c001bc87:	90                   	nop
c001bc88:	83 c4 0c             	add    esp,0xc
c001bc8b:	c3                   	ret    

c001bc8c <apicOpen()>:
c001bc8c:	55                   	push   ebp
c001bc8d:	89 e5                	mov    ebp,esp
c001bc8f:	53                   	push   ebx
c001bc90:	83 ec 34             	sub    esp,0x34
c001bc93:	a0 a0 6b 02 c0       	mov    al,ds:0xc0026ba0
c001bc98:	83 f0 01             	xor    eax,0x1
c001bc9b:	84 c0                	test   al,al
c001bc9d:	0f 84 9d 00 00 00    	je     c001bd40 <apicOpen()+0xb4>
c001bca3:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bca7:	a0 80 57 02 c0       	mov    al,ds:0xc0025780
c001bcac:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001bcaf:	0f 83 84 00 00 00    	jae    c001bd39 <apicOpen()+0xad>
c001bcb5:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001bcbc:	83 ec 0c             	sub    esp,0xc
c001bcbf:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001bcc2:	e8 ae bb fe ff       	call   c0007875 <malloc>
c001bcc7:	83 c4 10             	add    esp,0x10
c001bcca:	89 c3                	mov    ebx,eax
c001bccc:	83 ec 0c             	sub    esp,0xc
c001bccf:	53                   	push   ebx
c001bcd0:	e8 8f ff ff ff       	call   c001bc64 <IOAPIC::IOAPIC()>
c001bcd5:	83 c4 10             	add    esp,0x10
c001bcd8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001bcdb:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001bcde:	25 ff 00 00 00       	and    eax,0xff
c001bce3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001bce6:	89 14 85 80 6b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9480],edx
c001bced:	a1 60 6b 02 c0       	mov    eax,ds:0xc0026b60
c001bcf2:	40                   	inc    eax
c001bcf3:	a3 60 6b 02 c0       	mov    ds:0xc0026b60,eax
c001bcf8:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001bcfd:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001bd03:	83 ec 08             	sub    esp,0x8
c001bd06:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001bd09:	50                   	push   eax
c001bd0a:	e8 3d fd fe ff       	call   c000ba4c <Device::addChild(Device*)>
c001bd0f:	83 c4 10             	add    esp,0x10
c001bd12:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001bd15:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd17:	83 c0 08             	add    eax,0x8
c001bd1a:	8b 10                	mov    edx,DWORD PTR [eax]
c001bd1c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001bd1f:	25 ff 00 00 00       	and    eax,0xff
c001bd24:	6a 00                	push   0x0
c001bd26:	6a 00                	push   0x0
c001bd28:	50                   	push   eax
c001bd29:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001bd2c:	ff d2                	call   edx
c001bd2e:	83 c4 10             	add    esp,0x10
c001bd31:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001bd34:	e9 6e ff ff ff       	jmp    c001bca7 <apicOpen()+0x1b>
c001bd39:	c6 05 a0 6b 02 c0 01 	mov    BYTE PTR ds:0xc0026ba0,0x1
c001bd40:	e8 dd fe ff ff       	call   c001bc22 <apicGetBase()>
c001bd45:	05 f0 00 00 00       	add    eax,0xf0
c001bd4a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bd4d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001bd50:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd52:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001bd55:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001bd5c:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001bd63:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001bd66:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001bd69:	89 10                	mov    DWORD PTR [eax],edx
c001bd6b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001bd72:	a1 d0 56 02 c0       	mov    eax,ds:0xc00256d0
c001bd77:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001bd7a:	7d 70                	jge    c001bdec <apicOpen()+0x160>
c001bd7c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bd7f:	8b 04 85 e0 56 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda920]
c001bd86:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001bd89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bd8c:	8b 04 85 e0 56 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda920]
c001bd93:	c1 e8 08             	shr    eax,0x8
c001bd96:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001bd9a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bd9d:	8b 04 85 e0 56 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda920]
c001bda4:	c1 e8 18             	shr    eax,0x18
c001bda7:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001bdaa:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001bdae:	75 37                	jne    c001bde7 <apicOpen()+0x15b>
c001bdb0:	e8 6d fe ff ff       	call   c001bc22 <apicGetBase()>
c001bdb5:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001bdb9:	75 07                	jne    c001bdc2 <apicOpen()+0x136>
c001bdbb:	ba 60 03 00 00       	mov    edx,0x360
c001bdc0:	eb 05                	jmp    c001bdc7 <apicOpen()+0x13b>
c001bdc2:	ba 50 03 00 00       	mov    edx,0x350
c001bdc7:	01 d0                	add    eax,edx
c001bdc9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001bdcc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001bdcf:	8b 00                	mov    eax,DWORD PTR [eax]
c001bdd1:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001bdd4:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001bddb:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001bddf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001bde2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001bde5:	89 10                	mov    DWORD PTR [eax],edx
c001bde7:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001bdea:	eb 86                	jmp    c001bd72 <apicOpen()+0xe6>
c001bdec:	90                   	nop
c001bded:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001bdf0:	c9                   	leave  
c001bdf1:	c3                   	ret    

c001bdf2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001bdf2:	55                   	push   ebp
c001bdf3:	89 e5                	mov    ebp,esp
c001bdf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdf8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001bdfe:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001be01:	72 1d                	jb     c001be20 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001be03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be06:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001be0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be0f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001be15:	01 d0                	add    eax,edx
c001be17:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001be1a:	73 04                	jae    c001be20 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001be1c:	b0 01                	mov    al,0x1
c001be1e:	eb 02                	jmp    c001be22 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001be20:	b0 00                	mov    al,0x0
c001be22:	5d                   	pop    ebp
c001be23:	c3                   	ret    

c001be24 <IOAPIC::read(int)>:
c001be24:	55                   	push   ebp
c001be25:	89 e5                	mov    ebp,esp
c001be27:	83 ec 10             	sub    esp,0x10
c001be2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be2d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001be33:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001be36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001be39:	31 d2                	xor    edx,edx
c001be3b:	88 c2                	mov    dl,al
c001be3d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001be40:	89 10                	mov    DWORD PTR [eax],edx
c001be42:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001be45:	83 c0 10             	add    eax,0x10
c001be48:	8b 00                	mov    eax,DWORD PTR [eax]
c001be4a:	c9                   	leave  
c001be4b:	c3                   	ret    

c001be4c <IOAPIC::open(int, int, void*)>:
c001be4c:	55                   	push   ebp
c001be4d:	89 e5                	mov    ebp,esp
c001be4f:	57                   	push   edi
c001be50:	56                   	push   esi
c001be51:	53                   	push   ebx
c001be52:	83 ec 04             	sub    esp,0x4
c001be55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be58:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001be5b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001be61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be64:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001be6a:	8b 14 85 c0 57 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda840]
c001be71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be74:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001be7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be7d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001be83:	8b 14 85 40 58 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda7c0]
c001be8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be8d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001be93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be96:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001be9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be9f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001bea5:	89 c6                	mov    esi,eax
c001bea7:	81 e6 ff 00 00 00    	and    esi,0xff
c001bead:	89 d0                	mov    eax,edx
c001beaf:	ba 00 00 00 00       	mov    edx,0x0
c001beb4:	89 c7                	mov    edi,eax
c001beb6:	83 e7 ff             	and    edi,0xffffffff
c001beb9:	89 f9                	mov    ecx,edi
c001bebb:	89 d0                	mov    eax,edx
c001bebd:	25 ff 00 00 00       	and    eax,0xff
c001bec2:	89 c3                	mov    ebx,eax
c001bec4:	89 c8                	mov    eax,ecx
c001bec6:	89 da                	mov    edx,ebx
c001bec8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001becb:	8d 5e 08             	lea    ebx,[esi+0x8]
c001bece:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001bed2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001bed6:	83 e0 00             	and    eax,0x0
c001bed9:	09 d0                	or     eax,edx
c001bedb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001bedf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bee2:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001bee8:	8d 50 01             	lea    edx,[eax+0x1]
c001beeb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001beee:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001bef4:	31 d2                	xor    edx,edx
c001bef6:	88 c2                	mov    dl,al
c001bef8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001befb:	83 c2 08             	add    edx,0x8
c001befe:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001bf02:	81 e1 ff 00 00 00    	and    ecx,0xff
c001bf08:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001bf0e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001bf12:	6a 01                	push   0x1
c001bf14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bf17:	e8 08 ff ff ff       	call   c001be24 <IOAPIC::read(int)>
c001bf1c:	83 c4 08             	add    esp,0x8
c001bf1f:	c1 f8 10             	sar    eax,0x10
c001bf22:	25 ff 00 00 00       	and    eax,0xff
c001bf27:	8d 50 01             	lea    edx,[eax+0x1]
c001bf2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf2d:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001bf33:	b8 00 00 00 00       	mov    eax,0x0
c001bf38:	8d 65 f4             	lea    esp,[ebp-0xc]
c001bf3b:	5b                   	pop    ebx
c001bf3c:	5e                   	pop    esi
c001bf3d:	5f                   	pop    edi
c001bf3e:	5d                   	pop    ebp
c001bf3f:	c3                   	ret    

c001bf40 <IOAPIC::write(int, int)>:
c001bf40:	55                   	push   ebp
c001bf41:	89 e5                	mov    ebp,esp
c001bf43:	83 ec 10             	sub    esp,0x10
c001bf46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf49:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bf4f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001bf52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bf55:	31 d2                	xor    edx,edx
c001bf57:	88 c2                	mov    dl,al
c001bf59:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bf5c:	89 10                	mov    DWORD PTR [eax],edx
c001bf5e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bf61:	8d 50 10             	lea    edx,[eax+0x10]
c001bf64:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bf67:	89 02                	mov    DWORD PTR [edx],eax
c001bf69:	90                   	nop
c001bf6a:	c9                   	leave  
c001bf6b:	c3                   	ret    

c001bf6c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001bf6c:	55                   	push   ebp
c001bf6d:	89 e5                	mov    ebp,esp
c001bf6f:	53                   	push   ebx
c001bf70:	83 ec 2c             	sub    esp,0x2c
c001bf73:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bf76:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001bf79:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001bf7c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001bf7f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bf82:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bf85:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001bf88:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001bf8b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001bf8e:	88 d8                	mov    al,bl
c001bf90:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001bf93:	88 c8                	mov    al,cl
c001bf95:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001bf98:	88 d0                	mov    al,dl
c001bf9a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001bf9d:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001bfa0:	25 ff 00 00 00       	and    eax,0xff
c001bfa5:	83 c0 08             	add    eax,0x8
c001bfa8:	01 c0                	add    eax,eax
c001bfaa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bfad:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001bfb0:	25 ff 00 00 00       	and    eax,0xff
c001bfb5:	83 c0 08             	add    eax,0x8
c001bfb8:	01 c0                	add    eax,eax
c001bfba:	40                   	inc    eax
c001bfbb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001bfbe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001bfc1:	50                   	push   eax
c001bfc2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bfc5:	e8 5a fe ff ff       	call   c001be24 <IOAPIC::read(int)>
c001bfca:	83 c4 08             	add    esp,0x8
c001bfcd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bfd0:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001bfd7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001bfda:	c1 e0 18             	shl    eax,0x18
c001bfdd:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001bfe0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001bfe3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001bfe6:	52                   	push   edx
c001bfe7:	50                   	push   eax
c001bfe8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bfeb:	e8 50 ff ff ff       	call   c001bf40 <IOAPIC::write(int, int)>
c001bff0:	83 c4 0c             	add    esp,0xc
c001bff3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bff6:	50                   	push   eax
c001bff7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bffa:	e8 25 fe ff ff       	call   c001be24 <IOAPIC::read(int)>
c001bfff:	83 c4 08             	add    esp,0x8
c001c002:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001c005:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001c00c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001c013:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001c01a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001c01e:	74 09                	je     c001c029 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001c020:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001c027:	eb 07                	jmp    c001c030 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001c029:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001c030:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001c034:	74 09                	je     c001c03f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001c036:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001c03d:	eb 07                	jmp    c001c046 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001c03f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001c046:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001c04d:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001c050:	25 ff 00 00 00       	and    eax,0xff
c001c055:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001c058:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001c05b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001c05e:	52                   	push   edx
c001c05f:	50                   	push   eax
c001c060:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001c063:	e8 d8 fe ff ff       	call   c001bf40 <IOAPIC::write(int, int)>
c001c068:	83 c4 0c             	add    esp,0xc
c001c06b:	90                   	nop
c001c06c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001c06f:	c9                   	leave  
c001c070:	c3                   	ret    
c001c071:	66 90                	xchg   ax,ax
c001c073:	90                   	nop

c001c074 <APICTimer::close(int, int, void*)>:
c001c074:	b8 00 00 00 00       	mov    eax,0x0
c001c079:	c3                   	ret    
c001c07a:	66 90                	xchg   ax,ax

c001c07c <apicTimerHandler(regs*, void*)>:
c001c07c:	83 ec 0c             	sub    esp,0xc
c001c07f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c083:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c085:	b8 10 27 00 00       	mov    eax,0x2710
c001c08a:	ba 00 00 00 00       	mov    edx,0x0
c001c08f:	f7 f1                	div    ecx
c001c091:	83 ec 0c             	sub    esp,0xc
c001c094:	50                   	push   eax
c001c095:	e8 76 12 ff ff       	call   c000d310 <timerHandler(unsigned int)>
c001c09a:	83 c4 10             	add    esp,0x10
c001c09d:	90                   	nop
c001c09e:	83 c4 0c             	add    esp,0xc
c001c0a1:	c3                   	ret    
c001c0a2:	66 90                	xchg   ax,ax

c001c0a4 <APICTimer::open(int, int, void*)>:
c001c0a4:	83 ec 0c             	sub    esp,0xc
c001c0a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001c0ad:	83 c0 24             	add    eax,0x24
c001c0b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c0b2:	83 ec 08             	sub    esp,0x8
c001c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0bd:	ff d0                	call   eax
c001c0bf:	83 c4 10             	add    esp,0x10
c001c0c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0c6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c0ca:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c0d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c0d8:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001c0de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c0e2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c0e8:	83 ec 0c             	sub    esp,0xc
c001c0eb:	51                   	push   ecx
c001c0ec:	6a 01                	push   0x1
c001c0ee:	68 7c c0 01 c0       	push   0xc001c07c
c001c0f3:	52                   	push   edx
c001c0f4:	50                   	push   eax
c001c0f5:	e8 fe f8 fe ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c0fa:	83 c4 20             	add    esp,0x20
c001c0fd:	89 c2                	mov    edx,eax
c001c0ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c103:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001c109:	b8 00 00 00 00       	mov    eax,0x0
c001c10e:	83 c4 0c             	add    esp,0xc
c001c111:	c3                   	ret    
c001c112:	66 90                	xchg   ax,ax

c001c114 <APICTimer::write(int)>:
c001c114:	83 ec 0c             	sub    esp,0xc
c001c117:	83 ec 0c             	sub    esp,0xc
c001c11a:	68 f4 fe 01 c0       	push   0xc001fef4
c001c11f:	e8 f3 41 ff ff       	call   c0010317 <KePanic(char const*)>
c001c124:	83 c4 10             	add    esp,0x10
c001c127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c12b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c12f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c135:	90                   	nop
c001c136:	83 c4 0c             	add    esp,0xc
c001c139:	c3                   	ret    
c001c13a:	66 90                	xchg   ax,ax

c001c13c <APICTimer::APICTimer()>:
c001c13c:	83 ec 0c             	sub    esp,0xc
c001c13f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c143:	83 ec 08             	sub    esp,0x8
c001c146:	68 04 ff 01 c0       	push   0xc001ff04
c001c14b:	50                   	push   eax
c001c14c:	e8 f3 10 ff ff       	call   c000d244 <Timer::Timer(char const*)>
c001c151:	83 c4 10             	add    esp,0x10
c001c154:	ba 18 ff 01 c0       	mov    edx,0xc001ff18
c001c159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c15d:	89 10                	mov    DWORD PTR [eax],edx
c001c15f:	90                   	nop
c001c160:	83 c4 0c             	add    esp,0xc
c001c163:	c3                   	ret    

c001c164 <PIT::write(int)>:
c001c164:	83 ec 10             	sub    esp,0x10
c001c167:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c16b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c16f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c175:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c179:	a3 a4 6b 02 c0       	mov    ds:0xc0026ba4,eax
c001c17e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001c183:	99                   	cdq    
c001c184:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001c188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c18c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001c193:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001c198:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001c19c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001c1a1:	ee                   	out    dx,al
c001c1a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1a6:	25 ff 00 00 00       	and    eax,0xff
c001c1ab:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001c1b2:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001c1b6:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001c1ba:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001c1bf:	ee                   	out    dx,al
c001c1c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1c4:	c1 f8 08             	sar    eax,0x8
c001c1c7:	25 ff 00 00 00       	and    eax,0xff
c001c1cc:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001c1d3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001c1d7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001c1db:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001c1e0:	ee                   	out    dx,al
c001c1e1:	90                   	nop
c001c1e2:	83 c4 10             	add    esp,0x10
c001c1e5:	c3                   	ret    
c001c1e6:	66 90                	xchg   ax,ax

c001c1e8 <pitHandler(regs*, void*)>:
c001c1e8:	83 ec 0c             	sub    esp,0xc
c001c1eb:	8b 0d a4 6b 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ba4
c001c1f1:	b8 10 27 00 00       	mov    eax,0x2710
c001c1f6:	99                   	cdq    
c001c1f7:	f7 f9                	idiv   ecx
c001c1f9:	83 ec 0c             	sub    esp,0xc
c001c1fc:	50                   	push   eax
c001c1fd:	e8 0e 11 ff ff       	call   c000d310 <timerHandler(unsigned int)>
c001c202:	83 c4 10             	add    esp,0x10
c001c205:	90                   	nop
c001c206:	83 c4 0c             	add    esp,0xc
c001c209:	c3                   	ret    
c001c20a:	66 90                	xchg   ax,ax

c001c20c <PIT::open(int, int, void*)>:
c001c20c:	83 ec 0c             	sub    esp,0xc
c001c20f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c213:	8b 00                	mov    eax,DWORD PTR [eax]
c001c215:	83 c0 24             	add    eax,0x24
c001c218:	8b 00                	mov    eax,DWORD PTR [eax]
c001c21a:	83 ec 08             	sub    esp,0x8
c001c21d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c221:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c225:	ff d0                	call   eax
c001c227:	83 c4 10             	add    esp,0x10
c001c22a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c22e:	83 ec 0c             	sub    esp,0xc
c001c231:	6a 00                	push   0x0
c001c233:	6a 01                	push   0x1
c001c235:	68 e8 c1 01 c0       	push   0xc001c1e8
c001c23a:	6a 00                	push   0x0
c001c23c:	50                   	push   eax
c001c23d:	e8 b6 f7 fe ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c242:	83 c4 20             	add    esp,0x20
c001c245:	89 c2                	mov    edx,eax
c001c247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c24b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001c251:	b8 00 00 00 00       	mov    eax,0x0
c001c256:	83 c4 0c             	add    esp,0xc
c001c259:	c3                   	ret    
c001c25a:	66 90                	xchg   ax,ax

c001c25c <PIT::close(int, int, void*)>:
c001c25c:	83 ec 0c             	sub    esp,0xc
c001c25f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c263:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001c26d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c271:	6a 01                	push   0x1
c001c273:	68 e8 c1 01 c0       	push   0xc001c1e8
c001c278:	6a 00                	push   0x0
c001c27a:	50                   	push   eax
c001c27b:	e8 ae f7 fe ff       	call   c000ba2e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001c280:	83 c4 10             	add    esp,0x10
c001c283:	b8 00 00 00 00       	mov    eax,0x0
c001c288:	83 c4 0c             	add    esp,0xc
c001c28b:	c3                   	ret    

c001c28c <PIT::PIT()>:
c001c28c:	83 ec 0c             	sub    esp,0xc
c001c28f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c293:	83 ec 08             	sub    esp,0x8
c001c296:	68 40 ff 01 c0       	push   0xc001ff40
c001c29b:	50                   	push   eax
c001c29c:	e8 a3 0f ff ff       	call   c000d244 <Timer::Timer(char const*)>
c001c2a1:	83 c4 10             	add    esp,0x10
c001c2a4:	ba 68 ff 01 c0       	mov    edx,0xc001ff68
c001c2a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2ad:	89 10                	mov    DWORD PTR [eax],edx
c001c2af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2b3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c2b9:	31 d2                	xor    edx,edx
c001c2bb:	88 c2                	mov    dl,al
c001c2bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2c1:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001c2c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2cc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c2d2:	31 d2                	xor    edx,edx
c001c2d4:	88 c2                	mov    dl,al
c001c2d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2da:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001c2df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c2e9:	8d 50 01             	lea    edx,[eax+0x1]
c001c2ec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c2f0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c2f6:	31 d2                	xor    edx,edx
c001c2f8:	88 c2                	mov    dl,al
c001c2fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2fe:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c302:	83 e1 3f             	and    ecx,0x3f
c001c305:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c309:	90                   	nop
c001c30a:	83 c4 0c             	add    esp,0xc
c001c30d:	c3                   	ret    
c001c30e:	66 90                	xchg   ax,ax

c001c310 <avxDetect>:
c001c310:	b8 01 00 00 00       	mov    eax,0x1
c001c315:	0f a2                	cpuid  
c001c317:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001c31d:	74 15                	je     c001c334 <avxDetect.noAVX>
c001c31f:	b8 01 00 00 00       	mov    eax,0x1
c001c324:	0f a2                	cpuid  
c001c326:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001c32c:	74 06                	je     c001c334 <avxDetect.noAVX>
c001c32e:	b8 01 00 00 00       	mov    eax,0x1
c001c333:	c3                   	ret    

c001c334 <avxDetect.noAVX>:
c001c334:	b8 00 00 00 00       	mov    eax,0x0
c001c339:	c3                   	ret    

c001c33a <avxSave>:
c001c33a:	53                   	push   ebx
c001c33b:	52                   	push   edx
c001c33c:	31 c0                	xor    eax,eax
c001c33e:	48                   	dec    eax
c001c33f:	89 c2                	mov    edx,eax
c001c341:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c345:	0f ae 23             	xsave  [ebx]
c001c348:	5a                   	pop    edx
c001c349:	5b                   	pop    ebx
c001c34a:	c3                   	ret    

c001c34b <avxLoad>:
c001c34b:	53                   	push   ebx
c001c34c:	52                   	push   edx
c001c34d:	31 c0                	xor    eax,eax
c001c34f:	48                   	dec    eax
c001c350:	89 c2                	mov    edx,eax
c001c352:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c356:	0f ae 2b             	xrstor [ebx]
c001c359:	5a                   	pop    edx
c001c35a:	5b                   	pop    ebx
c001c35b:	c3                   	ret    

c001c35c <avxInit>:
c001c35c:	e8 b7 02 00 00       	call   c001c618 <sseInit>
c001c361:	50                   	push   eax
c001c362:	51                   	push   ecx
c001c363:	0f 20 e0             	mov    eax,cr4
c001c366:	0d 00 00 04 00       	or     eax,0x40000
c001c36b:	0f 22 e0             	mov    cr4,eax
c001c36e:	31 c9                	xor    ecx,ecx
c001c370:	0f 01 d0             	xgetbv 
c001c373:	0d 07 00 00 00       	or     eax,0x7
c001c378:	0f 01 d1             	xsetbv 
c001c37b:	59                   	pop    ecx
c001c37c:	58                   	pop    eax
c001c37d:	c3                   	ret    

c001c37e <avxClose>:
c001c37e:	c3                   	ret    

c001c37f <wouldSheSayYes>:
c001c37f:	c3                   	ret    
c001c380:	49                   	dec    ecx
c001c381:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001c385:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001c389:	75 20                	jne    c001c3ab <isr0+0xb>
c001c38b:	4e                   	dec    esi
c001c38c:	79 61                	jns    c001c3ef <isr7+0x3>
c001c38e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001c393:	66 90                	xchg   ax,ax
c001c395:	66 90                	xchg   ax,ax
c001c397:	66 90                	xchg   ax,ax
c001c399:	66 90                	xchg   ax,ax
c001c39b:	66 90                	xchg   ax,ax
c001c39d:	66 90                	xchg   ax,ax
c001c39f:	90                   	nop

c001c3a0 <isr0>:
c001c3a0:	fa                   	cli    
c001c3a1:	68 00 00 00 00       	push   0x0
c001c3a6:	68 00 00 00 00       	push   0x0
c001c3ab:	e9 44 01 00 00       	jmp    c001c4f4 <int_common_stub>

c001c3b0 <isr1>:
c001c3b0:	fa                   	cli    
c001c3b1:	6a 00                	push   0x0
c001c3b3:	6a 01                	push   0x1
c001c3b5:	e9 3a 01 00 00       	jmp    c001c4f4 <int_common_stub>

c001c3ba <isr2>:
c001c3ba:	fa                   	cli    
c001c3bb:	6a 00                	push   0x0
c001c3bd:	6a 02                	push   0x2
c001c3bf:	e9 30 01 00 00       	jmp    c001c4f4 <int_common_stub>

c001c3c4 <isr3>:
c001c3c4:	fa                   	cli    
c001c3c5:	6a 00                	push   0x0
c001c3c7:	6a 03                	push   0x3
c001c3c9:	e9 26 01 00 00       	jmp    c001c4f4 <int_common_stub>

c001c3ce <isr4>:
c001c3ce:	fa                   	cli    
c001c3cf:	6a 00                	push   0x0
c001c3d1:	6a 04                	push   0x4
c001c3d3:	e9 1c 01 00 00       	jmp    c001c4f4 <int_common_stub>

c001c3d8 <isr5>:
c001c3d8:	fa                   	cli    
c001c3d9:	6a 00                	push   0x0
c001c3db:	6a 05                	push   0x5
c001c3dd:	e9 12 01 00 00       	jmp    c001c4f4 <int_common_stub>

c001c3e2 <isr6>:
c001c3e2:	fa                   	cli    
c001c3e3:	6a 00                	push   0x0
c001c3e5:	6a 06                	push   0x6
c001c3e7:	e9 08 01 00 00       	jmp    c001c4f4 <int_common_stub>

c001c3ec <isr7>:
c001c3ec:	fa                   	cli    
c001c3ed:	6a 00                	push   0x0
c001c3ef:	6a 07                	push   0x7
c001c3f1:	e9 fe 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c3f6 <isr8>:
c001c3f6:	fa                   	cli    
c001c3f7:	6a 08                	push   0x8
c001c3f9:	e9 f6 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c3fe <isr9>:
c001c3fe:	fa                   	cli    
c001c3ff:	6a 00                	push   0x0
c001c401:	6a 09                	push   0x9
c001c403:	e9 ec 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c408 <isr10>:
c001c408:	fa                   	cli    
c001c409:	6a 0a                	push   0xa
c001c40b:	e9 e4 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c410 <isr11>:
c001c410:	fa                   	cli    
c001c411:	6a 0b                	push   0xb
c001c413:	e9 dc 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c418 <isr12>:
c001c418:	fa                   	cli    
c001c419:	6a 0c                	push   0xc
c001c41b:	e9 d4 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c420 <isr13>:
c001c420:	fa                   	cli    
c001c421:	6a 0d                	push   0xd
c001c423:	e9 cc 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c428 <isr14>:
c001c428:	fa                   	cli    
c001c429:	6a 0e                	push   0xe
c001c42b:	e9 c4 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c430 <isr15>:
c001c430:	fa                   	cli    
c001c431:	6a 00                	push   0x0
c001c433:	6a 0f                	push   0xf
c001c435:	e9 ba 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c43a <isr16>:
c001c43a:	fa                   	cli    
c001c43b:	6a 00                	push   0x0
c001c43d:	6a 10                	push   0x10
c001c43f:	e9 b0 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c444 <isr17>:
c001c444:	fa                   	cli    
c001c445:	6a 00                	push   0x0
c001c447:	6a 11                	push   0x11
c001c449:	e9 a6 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c44e <isr18>:
c001c44e:	fa                   	cli    
c001c44f:	6a 00                	push   0x0
c001c451:	6a 12                	push   0x12
c001c453:	e9 9c 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c458 <irq3>:
c001c458:	fa                   	cli    
c001c459:	6a 00                	push   0x0
c001c45b:	6a 23                	push   0x23
c001c45d:	e9 92 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c462 <irq4>:
c001c462:	fa                   	cli    
c001c463:	6a 00                	push   0x0
c001c465:	6a 24                	push   0x24
c001c467:	e9 88 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c46c <irq5>:
c001c46c:	fa                   	cli    
c001c46d:	6a 00                	push   0x0
c001c46f:	6a 25                	push   0x25
c001c471:	e9 7e 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c476 <irq6>:
c001c476:	fa                   	cli    
c001c477:	6a 00                	push   0x0
c001c479:	6a 26                	push   0x26
c001c47b:	e9 74 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c480 <irq7>:
c001c480:	fa                   	cli    
c001c481:	6a 00                	push   0x0
c001c483:	6a 27                	push   0x27
c001c485:	e9 6a 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c48a <irq8>:
c001c48a:	fa                   	cli    
c001c48b:	6a 00                	push   0x0
c001c48d:	6a 28                	push   0x28
c001c48f:	e9 60 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c494 <irq9>:
c001c494:	fa                   	cli    
c001c495:	6a 00                	push   0x0
c001c497:	6a 29                	push   0x29
c001c499:	e9 56 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c49e <irq10>:
c001c49e:	fa                   	cli    
c001c49f:	6a 00                	push   0x0
c001c4a1:	6a 2a                	push   0x2a
c001c4a3:	e9 4c 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c4a8 <irq11>:
c001c4a8:	fa                   	cli    
c001c4a9:	6a 00                	push   0x0
c001c4ab:	6a 2b                	push   0x2b
c001c4ad:	e9 42 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c4b2 <irq12>:
c001c4b2:	fa                   	cli    
c001c4b3:	6a 00                	push   0x0
c001c4b5:	6a 2c                	push   0x2c
c001c4b7:	e9 38 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c4bc <irq13>:
c001c4bc:	fa                   	cli    
c001c4bd:	6a 00                	push   0x0
c001c4bf:	6a 2d                	push   0x2d
c001c4c1:	e9 2e 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c4c6 <irq14>:
c001c4c6:	fa                   	cli    
c001c4c7:	6a 00                	push   0x0
c001c4c9:	6a 2e                	push   0x2e
c001c4cb:	e9 24 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c4d0 <irq15>:
c001c4d0:	fa                   	cli    
c001c4d1:	6a 00                	push   0x0
c001c4d3:	6a 2f                	push   0x2f
c001c4d5:	e9 1a 00 00 00       	jmp    c001c4f4 <int_common_stub>

c001c4da <irq1>:
c001c4da:	fa                   	cli    
c001c4db:	6a 00                	push   0x0
c001c4dd:	6a 21                	push   0x21
c001c4df:	eb 13                	jmp    c001c4f4 <int_common_stub>

c001c4e1 <irq2>:
c001c4e1:	fa                   	cli    
c001c4e2:	6a 00                	push   0x0
c001c4e4:	6a 22                	push   0x22
c001c4e6:	eb 0c                	jmp    c001c4f4 <int_common_stub>

c001c4e8 <isr96>:
c001c4e8:	6a 00                	push   0x0
c001c4ea:	6a 60                	push   0x60
c001c4ec:	fb                   	sti    
c001c4ed:	eb 37                	jmp    c001c526 <syscall_common_stub>

c001c4ef <irq0>:
c001c4ef:	fa                   	cli    
c001c4f0:	6a 00                	push   0x0
c001c4f2:	6a 20                	push   0x20

c001c4f4 <int_common_stub>:
c001c4f4:	60                   	pusha  
c001c4f5:	1e                   	push   ds
c001c4f6:	06                   	push   es
c001c4f7:	0f a0                	push   fs
c001c4f9:	0f a8                	push   gs
c001c4fb:	66 b8 10 00          	mov    ax,0x10
c001c4ff:	66 8e d8             	mov    ds,ax
c001c502:	66 8e c0             	mov    es,ax
c001c505:	66 8e e0             	mov    fs,ax
c001c508:	66 8e e8             	mov    gs,ax
c001c50b:	54                   	push   esp
c001c50c:	fc                   	cld    
c001c50d:	e8 e6 f9 fe ff       	call   c000bef8 <int_handler>
c001c512:	81 c4 04 00 00 00    	add    esp,0x4
c001c518:	0f a9                	pop    gs
c001c51a:	0f a1                	pop    fs
c001c51c:	07                   	pop    es
c001c51d:	1f                   	pop    ds
c001c51e:	61                   	popa   
c001c51f:	81 c4 08 00 00 00    	add    esp,0x8
c001c525:	cf                   	iret   

c001c526 <syscall_common_stub>:
c001c526:	60                   	pusha  
c001c527:	1e                   	push   ds
c001c528:	06                   	push   es
c001c529:	0f a0                	push   fs
c001c52b:	0f a8                	push   gs
c001c52d:	66 b8 10 00          	mov    ax,0x10
c001c531:	66 8e d8             	mov    ds,ax
c001c534:	66 8e c0             	mov    es,ax
c001c537:	66 8e e0             	mov    fs,ax
c001c53a:	66 8e e8             	mov    gs,ax
c001c53d:	54                   	push   esp
c001c53e:	fc                   	cld    
c001c53f:	e8 b4 f9 fe ff       	call   c000bef8 <int_handler>
c001c544:	81 c4 04 00 00 00    	add    esp,0x4
c001c54a:	0f a9                	pop    gs
c001c54c:	0f a1                	pop    fs
c001c54e:	07                   	pop    es
c001c54f:	1f                   	pop    ds
c001c550:	e8 16 43 ff ff       	call   c001086b <KiCheckSignalZ>
c001c555:	3d 00 00 00 00       	cmp    eax,0x0
c001c55a:	74 1d                	je     c001c579 <syscall_common_stub.skipSignals>
c001c55c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c560:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c564:	89 e3                	mov    ebx,esp
c001c566:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001c569:	51                   	push   ecx
c001c56a:	68 81 c5 01 c0       	push   0xc001c581
c001c56f:	89 dc                	mov    esp,ebx
c001c571:	61                   	popa   
c001c572:	81 c4 08 00 00 00    	add    esp,0x8
c001c578:	cf                   	iret   

c001c579 <syscall_common_stub.skipSignals>:
c001c579:	61                   	popa   
c001c57a:	81 c4 08 00 00 00    	add    esp,0x8
c001c580:	cf                   	iret   

c001c581 <irq16>:
c001c581:	fa                   	cli    
c001c582:	6a 00                	push   0x0
c001c584:	6a 30                	push   0x30
c001c586:	e9 69 ff ff ff       	jmp    c001c4f4 <int_common_stub>

c001c58b <irq17>:
c001c58b:	fa                   	cli    
c001c58c:	6a 00                	push   0x0
c001c58e:	6a 31                	push   0x31
c001c590:	e9 5f ff ff ff       	jmp    c001c4f4 <int_common_stub>

c001c595 <irq18>:
c001c595:	fa                   	cli    
c001c596:	6a 00                	push   0x0
c001c598:	6a 32                	push   0x32
c001c59a:	e9 55 ff ff ff       	jmp    c001c4f4 <int_common_stub>

c001c59f <irq19>:
c001c59f:	fa                   	cli    
c001c5a0:	6a 00                	push   0x0
c001c5a2:	6a 33                	push   0x33
c001c5a4:	e9 4b ff ff ff       	jmp    c001c4f4 <int_common_stub>

c001c5a9 <irq20>:
c001c5a9:	fa                   	cli    
c001c5aa:	6a 00                	push   0x0
c001c5ac:	6a 34                	push   0x34
c001c5ae:	e9 41 ff ff ff       	jmp    c001c4f4 <int_common_stub>

c001c5b3 <irq21>:
c001c5b3:	fa                   	cli    
c001c5b4:	6a 00                	push   0x0
c001c5b6:	6a 35                	push   0x35
c001c5b8:	e9 37 ff ff ff       	jmp    c001c4f4 <int_common_stub>

c001c5bd <irq22>:
c001c5bd:	fa                   	cli    
c001c5be:	6a 00                	push   0x0
c001c5c0:	6a 36                	push   0x36
c001c5c2:	e9 2d ff ff ff       	jmp    c001c4f4 <int_common_stub>

c001c5c7 <irq23>:
c001c5c7:	fa                   	cli    
c001c5c8:	6a 00                	push   0x0
c001c5ca:	6a 37                	push   0x37
c001c5cc:	e9 23 ff ff ff       	jmp    c001c4f4 <int_common_stub>
c001c5d1:	66 90                	xchg   ax,ax
c001c5d3:	66 90                	xchg   ax,ax
c001c5d5:	66 90                	xchg   ax,ax
c001c5d7:	66 90                	xchg   ax,ax
c001c5d9:	66 90                	xchg   ax,ax
c001c5db:	66 90                	xchg   ax,ax
c001c5dd:	66 90                	xchg   ax,ax
c001c5df:	90                   	nop

c001c5e0 <i386GetRDRAND>:
c001c5e0:	b9 64 00 00 00       	mov    ecx,0x64

c001c5e5 <retry>:
c001c5e5:	0f c7 f0             	rdrand eax
c001c5e8:	72 05                	jb     c001c5ef <retry.done>
c001c5ea:	e2 f9                	loop   c001c5e5 <retry>

c001c5ec <retry.fail>:
c001c5ec:	31 c0                	xor    eax,eax
c001c5ee:	c3                   	ret    

c001c5ef <retry.done>:
c001c5ef:	c3                   	ret    

c001c5f0 <absolutelyNoChanceInHell>:
c001c5f0:	b8 01 00 00 00       	mov    eax,0x1
c001c5f5:	0f a2                	cpuid  
c001c5f7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001c5fd:	74 06                	je     c001c605 <sseDetect.noSSE>
c001c5ff:	b8 01 00 00 00       	mov    eax,0x1
c001c604:	c3                   	ret    

c001c605 <sseDetect.noSSE>:
c001c605:	31 c0                	xor    eax,eax
c001c607:	c3                   	ret    

c001c608 <sseSave>:
c001c608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c60c:	0f ae 00             	fxsave [eax]
c001c60f:	c3                   	ret    

c001c610 <sseLoad>:
c001c610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c614:	0f ae 08             	fxrstor [eax]
c001c617:	c3                   	ret    

c001c618 <sseInit>:
c001c618:	e8 42 00 00 00       	call   c001c65f <x87Init>
c001c61d:	0f 20 e0             	mov    eax,cr4
c001c620:	66 0d 00 06          	or     ax,0x600
c001c624:	0f 22 e0             	mov    cr4,eax
c001c627:	c3                   	ret    

c001c628 <sseClose>:
c001c628:	c3                   	ret    
c001c629:	66 90                	xchg   ax,ax
c001c62b:	66 90                	xchg   ax,ax
c001c62d:	66 90                	xchg   ax,ax
c001c62f:	90                   	nop

c001c630 <value_37F>:
c001c630:	7f 03                	jg     c001c635 <value_37A+0x1>

c001c632 <value_37E>:
c001c632:	7e 03                	jle    c001c637 <x87Detect+0x1>

c001c634 <value_37A>:
c001c634:	7a 03                	jp     c001c639 <x87Detect+0x3>

c001c636 <x87Detect>:
c001c636:	b8 01 00 00 00       	mov    eax,0x1
c001c63b:	0f a2                	cpuid  
c001c63d:	f7 c2 01 00 00 00    	test   edx,0x1
c001c643:	74 06                	je     c001c64b <x87Detect.nox87>
c001c645:	b8 01 00 00 00       	mov    eax,0x1
c001c64a:	c3                   	ret    

c001c64b <x87Detect.nox87>:
c001c64b:	b8 00 00 00 00       	mov    eax,0x0
c001c650:	c3                   	ret    

c001c651 <x87Save>:
c001c651:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c655:	dd 30                	fnsave [eax]
c001c657:	c3                   	ret    

c001c658 <x87Load>:
c001c658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c65c:	dd 20                	frstor [eax]
c001c65e:	c3                   	ret    

c001c65f <x87Init>:
c001c65f:	0f 20 c0             	mov    eax,cr0
c001c662:	66 25 fb ff          	and    ax,0xfffb
c001c666:	66 0d 22 00          	or     ax,0x22
c001c66a:	0f 22 c0             	mov    cr0,eax
c001c66d:	db e3                	fninit 
c001c66f:	0f 06                	clts   
c001c671:	d9 2d 34 c6 01 c0    	fldcw  WORD PTR ds:0xc001c634
c001c677:	c3                   	ret    

c001c678 <x87Close>:
c001c678:	c3                   	ret    
c001c679:	66 90                	xchg   ax,ax
c001c67b:	90                   	nop

c001c67c <__do_global_ctors_aux>:
c001c67c:	a1 2c d6 01 c0       	mov    eax,ds:0xc001d62c
c001c681:	83 f8 ff             	cmp    eax,0xffffffff
c001c684:	74 1a                	je     c001c6a0 <__do_global_ctors_aux+0x24>
c001c686:	55                   	push   ebp
c001c687:	89 e5                	mov    ebp,esp
c001c689:	53                   	push   ebx
c001c68a:	52                   	push   edx
c001c68b:	bb 2c d6 01 c0       	mov    ebx,0xc001d62c
c001c690:	ff d0                	call   eax
c001c692:	83 eb 04             	sub    ebx,0x4
c001c695:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c697:	83 f8 ff             	cmp    eax,0xffffffff
c001c69a:	75 f4                	jne    c001c690 <__do_global_ctors_aux+0x14>
c001c69c:	58                   	pop    eax
c001c69d:	5b                   	pop    ebx
c001c69e:	5d                   	pop    ebp
c001c69f:	c3                   	ret    
c001c6a0:	c3                   	ret    
c001c6a1:	66 90                	xchg   ax,ax
c001c6a3:	90                   	nop

c001c6a4 <__divdi3>:
c001c6a4:	55                   	push   ebp
c001c6a5:	57                   	push   edi
c001c6a6:	56                   	push   esi
c001c6a7:	53                   	push   ebx
c001c6a8:	83 ec 1c             	sub    esp,0x1c
c001c6ab:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c6af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c6b3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c6b6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c6ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c6be:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c6c2:	85 db                	test   ebx,ebx
c001c6c4:	0f 88 8e 00 00 00    	js     c001c758 <__divdi3+0xb4>
c001c6ca:	89 dd                	mov    ebp,ebx
c001c6cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c6d4:	89 d3                	mov    ebx,edx
c001c6d6:	85 d2                	test   edx,edx
c001c6d8:	79 0d                	jns    c001c6e7 <__divdi3+0x43>
c001c6da:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001c6de:	f7 d8                	neg    eax
c001c6e0:	83 d2 00             	adc    edx,0x0
c001c6e3:	f7 da                	neg    edx
c001c6e5:	89 d3                	mov    ebx,edx
c001c6e7:	89 c7                	mov    edi,eax
c001c6e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c6ec:	85 db                	test   ebx,ebx
c001c6ee:	75 48                	jne    c001c738 <__divdi3+0x94>
c001c6f0:	39 ef                	cmp    edi,ebp
c001c6f2:	76 24                	jbe    c001c718 <__divdi3+0x74>
c001c6f4:	89 ea                	mov    edx,ebp
c001c6f6:	f7 f7                	div    edi
c001c6f8:	89 c1                	mov    ecx,eax
c001c6fa:	31 f6                	xor    esi,esi
c001c6fc:	89 c8                	mov    eax,ecx
c001c6fe:	89 f2                	mov    edx,esi
c001c700:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c704:	85 c9                	test   ecx,ecx
c001c706:	74 07                	je     c001c70f <__divdi3+0x6b>
c001c708:	f7 d8                	neg    eax
c001c70a:	83 d2 00             	adc    edx,0x0
c001c70d:	f7 da                	neg    edx
c001c70f:	83 c4 1c             	add    esp,0x1c
c001c712:	5b                   	pop    ebx
c001c713:	5e                   	pop    esi
c001c714:	5f                   	pop    edi
c001c715:	5d                   	pop    ebp
c001c716:	c3                   	ret    
c001c717:	90                   	nop
c001c718:	85 ff                	test   edi,edi
c001c71a:	75 0b                	jne    c001c727 <__divdi3+0x83>
c001c71c:	b8 01 00 00 00       	mov    eax,0x1
c001c721:	31 d2                	xor    edx,edx
c001c723:	f7 f3                	div    ebx
c001c725:	89 c7                	mov    edi,eax
c001c727:	31 d2                	xor    edx,edx
c001c729:	89 e8                	mov    eax,ebp
c001c72b:	f7 f7                	div    edi
c001c72d:	89 c6                	mov    esi,eax
c001c72f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c732:	f7 f7                	div    edi
c001c734:	89 c1                	mov    ecx,eax
c001c736:	eb c4                	jmp    c001c6fc <__divdi3+0x58>
c001c738:	39 eb                	cmp    ebx,ebp
c001c73a:	77 3c                	ja     c001c778 <__divdi3+0xd4>
c001c73c:	0f bd f3             	bsr    esi,ebx
c001c73f:	83 f6 1f             	xor    esi,0x1f
c001c742:	75 40                	jne    c001c784 <__divdi3+0xe0>
c001c744:	39 eb                	cmp    ebx,ebp
c001c746:	72 09                	jb     c001c751 <__divdi3+0xad>
c001c748:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001c74b:	0f 87 97 00 00 00    	ja     c001c7e8 <__divdi3+0x144>
c001c751:	b9 01 00 00 00       	mov    ecx,0x1
c001c756:	eb a4                	jmp    c001c6fc <__divdi3+0x58>
c001c758:	f7 d9                	neg    ecx
c001c75a:	83 d3 00             	adc    ebx,0x0
c001c75d:	f7 db                	neg    ebx
c001c75f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c762:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c766:	89 dd                	mov    ebp,ebx
c001c768:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001c770:	e9 5f ff ff ff       	jmp    c001c6d4 <__divdi3+0x30>
c001c775:	8d 76 00             	lea    esi,[esi+0x0]
c001c778:	31 f6                	xor    esi,esi
c001c77a:	31 c9                	xor    ecx,ecx
c001c77c:	e9 7b ff ff ff       	jmp    c001c6fc <__divdi3+0x58>
c001c781:	8d 76 00             	lea    esi,[esi+0x0]
c001c784:	b8 20 00 00 00       	mov    eax,0x20
c001c789:	29 f0                	sub    eax,esi
c001c78b:	89 f1                	mov    ecx,esi
c001c78d:	d3 e3                	shl    ebx,cl
c001c78f:	89 fa                	mov    edx,edi
c001c791:	88 c1                	mov    cl,al
c001c793:	d3 ea                	shr    edx,cl
c001c795:	09 da                	or     edx,ebx
c001c797:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c79b:	89 f1                	mov    ecx,esi
c001c79d:	d3 e7                	shl    edi,cl
c001c79f:	89 eb                	mov    ebx,ebp
c001c7a1:	88 c1                	mov    cl,al
c001c7a3:	d3 eb                	shr    ebx,cl
c001c7a5:	89 f1                	mov    ecx,esi
c001c7a7:	d3 e5                	shl    ebp,cl
c001c7a9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c7ac:	88 c1                	mov    cl,al
c001c7ae:	d3 ea                	shr    edx,cl
c001c7b0:	09 d5                	or     ebp,edx
c001c7b2:	89 e8                	mov    eax,ebp
c001c7b4:	89 da                	mov    edx,ebx
c001c7b6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c7ba:	89 d3                	mov    ebx,edx
c001c7bc:	89 c5                	mov    ebp,eax
c001c7be:	f7 e7                	mul    edi
c001c7c0:	39 d3                	cmp    ebx,edx
c001c7c2:	72 18                	jb     c001c7dc <__divdi3+0x138>
c001c7c4:	74 0a                	je     c001c7d0 <__divdi3+0x12c>
c001c7c6:	89 e9                	mov    ecx,ebp
c001c7c8:	31 f6                	xor    esi,esi
c001c7ca:	e9 2d ff ff ff       	jmp    c001c6fc <__divdi3+0x58>
c001c7cf:	90                   	nop
c001c7d0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c7d3:	89 f1                	mov    ecx,esi
c001c7d5:	d3 e7                	shl    edi,cl
c001c7d7:	39 c7                	cmp    edi,eax
c001c7d9:	73 eb                	jae    c001c7c6 <__divdi3+0x122>
c001c7db:	90                   	nop
c001c7dc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c7df:	31 f6                	xor    esi,esi
c001c7e1:	e9 16 ff ff ff       	jmp    c001c6fc <__divdi3+0x58>
c001c7e6:	66 90                	xchg   ax,ax
c001c7e8:	31 c9                	xor    ecx,ecx
c001c7ea:	e9 0d ff ff ff       	jmp    c001c6fc <__divdi3+0x58>
c001c7ef:	90                   	nop

c001c7f0 <__moddi3>:
c001c7f0:	55                   	push   ebp
c001c7f1:	57                   	push   edi
c001c7f2:	56                   	push   esi
c001c7f3:	53                   	push   ebx
c001c7f4:	83 ec 2c             	sub    esp,0x2c
c001c7f7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c7fb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c7ff:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c803:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c807:	85 db                	test   ebx,ebx
c001c809:	0f 88 85 00 00 00    	js     c001c894 <__moddi3+0xa4>
c001c80f:	89 de                	mov    esi,ebx
c001c811:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c819:	89 d7                	mov    edi,edx
c001c81b:	85 d2                	test   edx,edx
c001c81d:	79 09                	jns    c001c828 <__moddi3+0x38>
c001c81f:	f7 d8                	neg    eax
c001c821:	83 d2 00             	adc    edx,0x0
c001c824:	f7 da                	neg    edx
c001c826:	89 d7                	mov    edi,edx
c001c828:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c82c:	89 cd                	mov    ebp,ecx
c001c82e:	85 ff                	test   edi,edi
c001c830:	75 52                	jne    c001c884 <__moddi3+0x94>
c001c832:	89 c3                	mov    ebx,eax
c001c834:	39 f0                	cmp    eax,esi
c001c836:	76 24                	jbe    c001c85c <__moddi3+0x6c>
c001c838:	89 c8                	mov    eax,ecx
c001c83a:	89 f2                	mov    edx,esi
c001c83c:	f7 f3                	div    ebx
c001c83e:	89 d6                	mov    esi,edx
c001c840:	89 f0                	mov    eax,esi
c001c842:	31 d2                	xor    edx,edx
c001c844:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c848:	85 c9                	test   ecx,ecx
c001c84a:	74 07                	je     c001c853 <__moddi3+0x63>
c001c84c:	f7 d8                	neg    eax
c001c84e:	83 d2 00             	adc    edx,0x0
c001c851:	f7 da                	neg    edx
c001c853:	83 c4 2c             	add    esp,0x2c
c001c856:	5b                   	pop    ebx
c001c857:	5e                   	pop    esi
c001c858:	5f                   	pop    edi
c001c859:	5d                   	pop    ebp
c001c85a:	c3                   	ret    
c001c85b:	90                   	nop
c001c85c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c860:	85 db                	test   ebx,ebx
c001c862:	75 0d                	jne    c001c871 <__moddi3+0x81>
c001c864:	b8 01 00 00 00       	mov    eax,0x1
c001c869:	31 d2                	xor    edx,edx
c001c86b:	f7 f7                	div    edi
c001c86d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c871:	89 f0                	mov    eax,esi
c001c873:	31 d2                	xor    edx,edx
c001c875:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c879:	f7 f7                	div    edi
c001c87b:	89 e8                	mov    eax,ebp
c001c87d:	f7 f7                	div    edi
c001c87f:	89 d6                	mov    esi,edx
c001c881:	eb bd                	jmp    c001c840 <__moddi3+0x50>
c001c883:	90                   	nop
c001c884:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c888:	39 f7                	cmp    edi,esi
c001c88a:	76 20                	jbe    c001c8ac <__moddi3+0xbc>
c001c88c:	89 c8                	mov    eax,ecx
c001c88e:	89 f2                	mov    edx,esi
c001c890:	eb b2                	jmp    c001c844 <__moddi3+0x54>
c001c892:	66 90                	xchg   ax,ax
c001c894:	f7 d9                	neg    ecx
c001c896:	83 d3 00             	adc    ebx,0x0
c001c899:	f7 db                	neg    ebx
c001c89b:	89 de                	mov    esi,ebx
c001c89d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c8a5:	e9 6f ff ff ff       	jmp    c001c819 <__moddi3+0x29>
c001c8aa:	66 90                	xchg   ax,ax
c001c8ac:	0f bd c7             	bsr    eax,edi
c001c8af:	83 f0 1f             	xor    eax,0x1f
c001c8b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c8b6:	75 24                	jne    c001c8dc <__moddi3+0xec>
c001c8b8:	39 f7                	cmp    edi,esi
c001c8ba:	72 06                	jb     c001c8c2 <__moddi3+0xd2>
c001c8bc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c8c0:	77 0c                	ja     c001c8ce <__moddi3+0xde>
c001c8c2:	89 e9                	mov    ecx,ebp
c001c8c4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c8c8:	19 fe                	sbb    esi,edi
c001c8ca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c8ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c8d2:	89 f2                	mov    edx,esi
c001c8d4:	e9 6b ff ff ff       	jmp    c001c844 <__moddi3+0x54>
c001c8d9:	8d 76 00             	lea    esi,[esi+0x0]
c001c8dc:	b8 20 00 00 00       	mov    eax,0x20
c001c8e1:	89 c2                	mov    edx,eax
c001c8e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c8e7:	29 da                	sub    edx,ebx
c001c8e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c8ed:	88 d9                	mov    cl,bl
c001c8ef:	d3 e7                	shl    edi,cl
c001c8f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8f5:	88 d1                	mov    cl,dl
c001c8f7:	d3 e8                	shr    eax,cl
c001c8f9:	09 c7                	or     edi,eax
c001c8fb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c8ff:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c903:	89 d8                	mov    eax,ebx
c001c905:	88 d9                	mov    cl,bl
c001c907:	d3 e7                	shl    edi,cl
c001c909:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c90d:	89 f3                	mov    ebx,esi
c001c90f:	88 d1                	mov    cl,dl
c001c911:	d3 eb                	shr    ebx,cl
c001c913:	89 c7                	mov    edi,eax
c001c915:	88 c1                	mov    cl,al
c001c917:	d3 e6                	shl    esi,cl
c001c919:	89 e8                	mov    eax,ebp
c001c91b:	88 d1                	mov    cl,dl
c001c91d:	d3 e8                	shr    eax,cl
c001c91f:	09 f0                	or     eax,esi
c001c921:	89 f9                	mov    ecx,edi
c001c923:	d3 e5                	shl    ebp,cl
c001c925:	89 da                	mov    edx,ebx
c001c927:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c92b:	89 d3                	mov    ebx,edx
c001c92d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c931:	89 c6                	mov    esi,eax
c001c933:	89 d1                	mov    ecx,edx
c001c935:	39 d3                	cmp    ebx,edx
c001c937:	72 27                	jb     c001c960 <__moddi3+0x170>
c001c939:	74 21                	je     c001c95c <__moddi3+0x16c>
c001c93b:	29 f5                	sub    ebp,esi
c001c93d:	19 cb                	sbb    ebx,ecx
c001c93f:	89 de                	mov    esi,ebx
c001c941:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c945:	d3 e6                	shl    esi,cl
c001c947:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c94b:	89 f9                	mov    ecx,edi
c001c94d:	d3 ed                	shr    ebp,cl
c001c94f:	09 ee                	or     esi,ebp
c001c951:	89 f0                	mov    eax,esi
c001c953:	d3 eb                	shr    ebx,cl
c001c955:	89 da                	mov    edx,ebx
c001c957:	e9 e8 fe ff ff       	jmp    c001c844 <__moddi3+0x54>
c001c95c:	39 c5                	cmp    ebp,eax
c001c95e:	73 db                	jae    c001c93b <__moddi3+0x14b>
c001c960:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c964:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c968:	89 d1                	mov    ecx,edx
c001c96a:	89 c6                	mov    esi,eax
c001c96c:	eb cd                	jmp    c001c93b <__moddi3+0x14b>
c001c96e:	66 90                	xchg   ax,ax

c001c970 <__udivdi3>:
c001c970:	55                   	push   ebp
c001c971:	57                   	push   edi
c001c972:	56                   	push   esi
c001c973:	53                   	push   ebx
c001c974:	83 ec 1c             	sub    esp,0x1c
c001c977:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c97b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c97f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c983:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c987:	85 d2                	test   edx,edx
c001c989:	75 41                	jne    c001c9cc <__udivdi3+0x5c>
c001c98b:	39 f7                	cmp    edi,esi
c001c98d:	76 15                	jbe    c001c9a4 <__udivdi3+0x34>
c001c98f:	89 e8                	mov    eax,ebp
c001c991:	89 f2                	mov    edx,esi
c001c993:	f7 f7                	div    edi
c001c995:	31 db                	xor    ebx,ebx
c001c997:	89 da                	mov    edx,ebx
c001c999:	83 c4 1c             	add    esp,0x1c
c001c99c:	5b                   	pop    ebx
c001c99d:	5e                   	pop    esi
c001c99e:	5f                   	pop    edi
c001c99f:	5d                   	pop    ebp
c001c9a0:	c3                   	ret    
c001c9a1:	8d 76 00             	lea    esi,[esi+0x0]
c001c9a4:	89 f9                	mov    ecx,edi
c001c9a6:	85 ff                	test   edi,edi
c001c9a8:	75 0b                	jne    c001c9b5 <__udivdi3+0x45>
c001c9aa:	b8 01 00 00 00       	mov    eax,0x1
c001c9af:	31 d2                	xor    edx,edx
c001c9b1:	f7 f7                	div    edi
c001c9b3:	89 c1                	mov    ecx,eax
c001c9b5:	31 d2                	xor    edx,edx
c001c9b7:	89 f0                	mov    eax,esi
c001c9b9:	f7 f1                	div    ecx
c001c9bb:	89 c3                	mov    ebx,eax
c001c9bd:	89 e8                	mov    eax,ebp
c001c9bf:	f7 f1                	div    ecx
c001c9c1:	89 da                	mov    edx,ebx
c001c9c3:	83 c4 1c             	add    esp,0x1c
c001c9c6:	5b                   	pop    ebx
c001c9c7:	5e                   	pop    esi
c001c9c8:	5f                   	pop    edi
c001c9c9:	5d                   	pop    ebp
c001c9ca:	c3                   	ret    
c001c9cb:	90                   	nop
c001c9cc:	39 f2                	cmp    edx,esi
c001c9ce:	77 1c                	ja     c001c9ec <__udivdi3+0x7c>
c001c9d0:	0f bd da             	bsr    ebx,edx
c001c9d3:	83 f3 1f             	xor    ebx,0x1f
c001c9d6:	75 24                	jne    c001c9fc <__udivdi3+0x8c>
c001c9d8:	39 f2                	cmp    edx,esi
c001c9da:	72 08                	jb     c001c9e4 <__udivdi3+0x74>
c001c9dc:	39 ef                	cmp    edi,ebp
c001c9de:	0f 87 84 00 00 00    	ja     c001ca68 <__udivdi3+0xf8>
c001c9e4:	b8 01 00 00 00       	mov    eax,0x1
c001c9e9:	eb ac                	jmp    c001c997 <__udivdi3+0x27>
c001c9eb:	90                   	nop
c001c9ec:	31 db                	xor    ebx,ebx
c001c9ee:	31 c0                	xor    eax,eax
c001c9f0:	89 da                	mov    edx,ebx
c001c9f2:	83 c4 1c             	add    esp,0x1c
c001c9f5:	5b                   	pop    ebx
c001c9f6:	5e                   	pop    esi
c001c9f7:	5f                   	pop    edi
c001c9f8:	5d                   	pop    ebp
c001c9f9:	c3                   	ret    
c001c9fa:	66 90                	xchg   ax,ax
c001c9fc:	b8 20 00 00 00       	mov    eax,0x20
c001ca01:	29 d8                	sub    eax,ebx
c001ca03:	88 d9                	mov    cl,bl
c001ca05:	d3 e2                	shl    edx,cl
c001ca07:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ca0b:	89 fa                	mov    edx,edi
c001ca0d:	88 c1                	mov    cl,al
c001ca0f:	d3 ea                	shr    edx,cl
c001ca11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ca15:	09 d1                	or     ecx,edx
c001ca17:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ca1b:	88 d9                	mov    cl,bl
c001ca1d:	d3 e7                	shl    edi,cl
c001ca1f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ca23:	89 f7                	mov    edi,esi
c001ca25:	88 c1                	mov    cl,al
c001ca27:	d3 ef                	shr    edi,cl
c001ca29:	88 d9                	mov    cl,bl
c001ca2b:	d3 e6                	shl    esi,cl
c001ca2d:	89 ea                	mov    edx,ebp
c001ca2f:	88 c1                	mov    cl,al
c001ca31:	d3 ea                	shr    edx,cl
c001ca33:	09 d6                	or     esi,edx
c001ca35:	89 f0                	mov    eax,esi
c001ca37:	89 fa                	mov    edx,edi
c001ca39:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001ca3d:	89 d7                	mov    edi,edx
c001ca3f:	89 c6                	mov    esi,eax
c001ca41:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ca45:	39 d7                	cmp    edi,edx
c001ca47:	72 13                	jb     c001ca5c <__udivdi3+0xec>
c001ca49:	74 09                	je     c001ca54 <__udivdi3+0xe4>
c001ca4b:	89 f0                	mov    eax,esi
c001ca4d:	31 db                	xor    ebx,ebx
c001ca4f:	e9 43 ff ff ff       	jmp    c001c997 <__udivdi3+0x27>
c001ca54:	88 d9                	mov    cl,bl
c001ca56:	d3 e5                	shl    ebp,cl
c001ca58:	39 c5                	cmp    ebp,eax
c001ca5a:	73 ef                	jae    c001ca4b <__udivdi3+0xdb>
c001ca5c:	8d 46 ff             	lea    eax,[esi-0x1]
c001ca5f:	31 db                	xor    ebx,ebx
c001ca61:	e9 31 ff ff ff       	jmp    c001c997 <__udivdi3+0x27>
c001ca66:	66 90                	xchg   ax,ax
c001ca68:	31 c0                	xor    eax,eax
c001ca6a:	e9 28 ff ff ff       	jmp    c001c997 <__udivdi3+0x27>
c001ca6f:	90                   	nop

c001ca70 <__umoddi3>:
c001ca70:	55                   	push   ebp
c001ca71:	57                   	push   edi
c001ca72:	56                   	push   esi
c001ca73:	53                   	push   ebx
c001ca74:	83 ec 1c             	sub    esp,0x1c
c001ca77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ca7b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ca7f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001ca83:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ca87:	89 da                	mov    edx,ebx
c001ca89:	85 c0                	test   eax,eax
c001ca8b:	75 37                	jne    c001cac4 <__umoddi3+0x54>
c001ca8d:	39 df                	cmp    edi,ebx
c001ca8f:	76 13                	jbe    c001caa4 <__umoddi3+0x34>
c001ca91:	89 f0                	mov    eax,esi
c001ca93:	f7 f7                	div    edi
c001ca95:	89 d0                	mov    eax,edx
c001ca97:	31 d2                	xor    edx,edx
c001ca99:	83 c4 1c             	add    esp,0x1c
c001ca9c:	5b                   	pop    ebx
c001ca9d:	5e                   	pop    esi
c001ca9e:	5f                   	pop    edi
c001ca9f:	5d                   	pop    ebp
c001caa0:	c3                   	ret    
c001caa1:	8d 76 00             	lea    esi,[esi+0x0]
c001caa4:	89 fd                	mov    ebp,edi
c001caa6:	85 ff                	test   edi,edi
c001caa8:	75 0b                	jne    c001cab5 <__umoddi3+0x45>
c001caaa:	b8 01 00 00 00       	mov    eax,0x1
c001caaf:	31 d2                	xor    edx,edx
c001cab1:	f7 f7                	div    edi
c001cab3:	89 c5                	mov    ebp,eax
c001cab5:	89 d8                	mov    eax,ebx
c001cab7:	31 d2                	xor    edx,edx
c001cab9:	f7 f5                	div    ebp
c001cabb:	89 f0                	mov    eax,esi
c001cabd:	f7 f5                	div    ebp
c001cabf:	89 d0                	mov    eax,edx
c001cac1:	eb d4                	jmp    c001ca97 <__umoddi3+0x27>
c001cac3:	90                   	nop
c001cac4:	89 f1                	mov    ecx,esi
c001cac6:	39 d8                	cmp    eax,ebx
c001cac8:	76 0a                	jbe    c001cad4 <__umoddi3+0x64>
c001caca:	89 f0                	mov    eax,esi
c001cacc:	83 c4 1c             	add    esp,0x1c
c001cacf:	5b                   	pop    ebx
c001cad0:	5e                   	pop    esi
c001cad1:	5f                   	pop    edi
c001cad2:	5d                   	pop    ebp
c001cad3:	c3                   	ret    
c001cad4:	0f bd e8             	bsr    ebp,eax
c001cad7:	83 f5 1f             	xor    ebp,0x1f
c001cada:	75 1c                	jne    c001caf8 <__umoddi3+0x88>
c001cadc:	39 d8                	cmp    eax,ebx
c001cade:	72 04                	jb     c001cae4 <__umoddi3+0x74>
c001cae0:	39 f7                	cmp    edi,esi
c001cae2:	77 08                	ja     c001caec <__umoddi3+0x7c>
c001cae4:	89 da                	mov    edx,ebx
c001cae6:	29 fe                	sub    esi,edi
c001cae8:	19 c2                	sbb    edx,eax
c001caea:	89 f1                	mov    ecx,esi
c001caec:	89 c8                	mov    eax,ecx
c001caee:	83 c4 1c             	add    esp,0x1c
c001caf1:	5b                   	pop    ebx
c001caf2:	5e                   	pop    esi
c001caf3:	5f                   	pop    edi
c001caf4:	5d                   	pop    ebp
c001caf5:	c3                   	ret    
c001caf6:	66 90                	xchg   ax,ax
c001caf8:	ba 20 00 00 00       	mov    edx,0x20
c001cafd:	29 ea                	sub    edx,ebp
c001caff:	89 e9                	mov    ecx,ebp
c001cb01:	d3 e0                	shl    eax,cl
c001cb03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb07:	89 f8                	mov    eax,edi
c001cb09:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001cb0d:	88 d1                	mov    cl,dl
c001cb0f:	d3 e8                	shr    eax,cl
c001cb11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cb15:	09 c1                	or     ecx,eax
c001cb17:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cb1b:	89 e9                	mov    ecx,ebp
c001cb1d:	d3 e7                	shl    edi,cl
c001cb1f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001cb23:	89 d8                	mov    eax,ebx
c001cb25:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb29:	88 d1                	mov    cl,dl
c001cb2b:	d3 e8                	shr    eax,cl
c001cb2d:	89 c7                	mov    edi,eax
c001cb2f:	89 e9                	mov    ecx,ebp
c001cb31:	d3 e3                	shl    ebx,cl
c001cb33:	89 f0                	mov    eax,esi
c001cb35:	88 d1                	mov    cl,dl
c001cb37:	d3 e8                	shr    eax,cl
c001cb39:	09 d8                	or     eax,ebx
c001cb3b:	89 e9                	mov    ecx,ebp
c001cb3d:	d3 e6                	shl    esi,cl
c001cb3f:	89 f3                	mov    ebx,esi
c001cb41:	89 fa                	mov    edx,edi
c001cb43:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001cb47:	89 d1                	mov    ecx,edx
c001cb49:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001cb4d:	89 c6                	mov    esi,eax
c001cb4f:	89 d7                	mov    edi,edx
c001cb51:	39 d1                	cmp    ecx,edx
c001cb53:	72 27                	jb     c001cb7c <__umoddi3+0x10c>
c001cb55:	74 21                	je     c001cb78 <__umoddi3+0x108>
c001cb57:	89 ca                	mov    edx,ecx
c001cb59:	29 f3                	sub    ebx,esi
c001cb5b:	19 fa                	sbb    edx,edi
c001cb5d:	89 d0                	mov    eax,edx
c001cb5f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001cb63:	d3 e0                	shl    eax,cl
c001cb65:	89 e9                	mov    ecx,ebp
c001cb67:	d3 eb                	shr    ebx,cl
c001cb69:	09 d8                	or     eax,ebx
c001cb6b:	d3 ea                	shr    edx,cl
c001cb6d:	83 c4 1c             	add    esp,0x1c
c001cb70:	5b                   	pop    ebx
c001cb71:	5e                   	pop    esi
c001cb72:	5f                   	pop    edi
c001cb73:	5d                   	pop    ebp
c001cb74:	c3                   	ret    
c001cb75:	8d 76 00             	lea    esi,[esi+0x0]
c001cb78:	39 c3                	cmp    ebx,eax
c001cb7a:	73 db                	jae    c001cb57 <__umoddi3+0xe7>
c001cb7c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001cb80:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001cb84:	89 d7                	mov    edi,edx
c001cb86:	89 c6                	mov    esi,eax
c001cb88:	eb cd                	jmp    c001cb57 <__umoddi3+0xe7>

Disassembly of section .init:

c001cb8a <_init>:
c001cb8a:	55                   	push   ebp
c001cb8b:	89 e5                	mov    ebp,esp
c001cb8d:	e8 62 35 fe ff       	call   c00000f4 <frame_dummy>
c001cb92:	e8 e5 fa ff ff       	call   c001c67c <__do_global_ctors_aux>
c001cb97:	5d                   	pop    ebp
c001cb98:	c3                   	ret    

Disassembly of section .fini:

c001cb99 <_fini>:
c001cb99:	55                   	push   ebp
c001cb9a:	89 e5                	mov    ebp,esp
c001cb9c:	e8 e3 34 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001cba1:	5d                   	pop    ebp
c001cba2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001cba4 <Computer::~Computer()>:
c001cba4:	83 ec 0c             	sub    esp,0xc
c001cba7:	ba b4 de 01 c0       	mov    edx,0xc001deb4
c001cbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb0:	89 10                	mov    DWORD PTR [eax],edx
c001cbb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb6:	83 ec 0c             	sub    esp,0xc
c001cbb9:	50                   	push   eax
c001cbba:	e8 8f ed fe ff       	call   c000b94e <Device::~Device()>
c001cbbf:	83 c4 10             	add    esp,0x10
c001cbc2:	90                   	nop
c001cbc3:	83 c4 0c             	add    esp,0xc
c001cbc6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001cbc8 <Computer::~Computer()>:
c001cbc8:	83 ec 0c             	sub    esp,0xc
c001cbcb:	83 ec 0c             	sub    esp,0xc
c001cbce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd2:	e8 cd ff ff ff       	call   c001cba4 <Computer::~Computer()>
c001cbd7:	83 c4 10             	add    esp,0x10
c001cbda:	83 ec 08             	sub    esp,0x8
c001cbdd:	68 70 01 00 00       	push   0x170
c001cbe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbe6:	e8 2d d9 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001cbeb:	83 c4 10             	add    esp,0x10
c001cbee:	83 c4 0c             	add    esp,0xc
c001cbf1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001cbf2 <idleCommon()>:
c001cbf2:	83 ec 0c             	sub    esp,0xc
c001cbf5:	fa                   	cli    
c001cbf6:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001cbfc:	e8 33 6c ff ff       	call   c0013834 <schedule()>
c001cc01:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001cc06:	48                   	dec    eax
c001cc07:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001cc0c:	75 01                	jne    c001cc0f <idleCommon()+0x1d>
c001cc0e:	fb                   	sti    
c001cc0f:	83 c4 0c             	add    esp,0xc
c001cc12:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001cc14 <LinkedList<UnixFile>::~LinkedList()>:
c001cc14:	90                   	nop
c001cc15:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001cc16 <LinkedList<UnixFile>::LinkedList()>:
c001cc16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc1a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cc20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cc2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc2f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cc36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc3a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cc40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc44:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cc4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc4f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cc56:	90                   	nop
c001cc57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001cc58 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001cc58:	83 ec 0c             	sub    esp,0xc
c001cc5b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001cc60:	75 10                	jne    c001cc72 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001cc62:	83 ec 0c             	sub    esp,0xc
c001cc65:	68 c8 e0 01 c0       	push   0xc001e0c8
c001cc6a:	e8 a8 36 ff ff       	call   c0010317 <KePanic(char const*)>
c001cc6f:	83 c4 10             	add    esp,0x10
c001cc72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc76:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc78:	85 c0                	test   eax,eax
c001cc7a:	74 34                	je     c001ccb0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001cc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc83:	85 c0                	test   eax,eax
c001cc85:	74 29                	je     c001ccb0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001cc87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc92:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cc95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc9d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cca4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cca7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ccae:	eb 65                	jmp    c001cd15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ccb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ccb6:	85 c0                	test   eax,eax
c001ccb8:	75 4b                	jne    c001cd05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ccba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ccc1:	85 c0                	test   eax,eax
c001ccc3:	75 40                	jne    c001cd05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ccc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccc9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cccd:	89 10                	mov    DWORD PTR [eax],edx
c001cccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ccd7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ccda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cce1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ccef:	85 c0                	test   eax,eax
c001ccf1:	74 22                	je     c001cd15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ccf3:	83 ec 0c             	sub    esp,0xc
c001ccf6:	68 ea e0 01 c0       	push   0xc001e0ea
c001ccfb:	e8 17 36 ff ff       	call   c0010317 <KePanic(char const*)>
c001cd00:	83 c4 10             	add    esp,0x10
c001cd03:	eb 10                	jmp    c001cd15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001cd05:	83 ec 0c             	sub    esp,0xc
c001cd08:	68 f4 e0 01 c0       	push   0xc001e0f4
c001cd0d:	e8 05 36 ff ff       	call   c0010317 <KePanic(char const*)>
c001cd12:	83 c4 10             	add    esp,0x10
c001cd15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd19:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd1c:	8d 50 01             	lea    edx,[eax+0x1]
c001cd1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd23:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cd26:	90                   	nop
c001cd27:	83 c4 0c             	add    esp,0xc
c001cd2a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001cd2c <LinkedList<UnixFile>::getFirstElement()>:
c001cd2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd30:	8b 00                	mov    eax,DWORD PTR [eax]
c001cd32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001cd34 <LinkedList<UnixFile>::removeFirst()>:
c001cd34:	83 ec 0c             	sub    esp,0xc
c001cd37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001cd3d:	85 c0                	test   eax,eax
c001cd3f:	75 12                	jne    c001cd53 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001cd41:	83 ec 0c             	sub    esp,0xc
c001cd44:	68 00 e1 01 c0       	push   0xc001e100
c001cd49:	e8 c9 35 ff ff       	call   c0010317 <KePanic(char const*)>
c001cd4e:	83 c4 10             	add    esp,0x10
c001cd51:	eb 7e                	jmp    c001cdd1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001cd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cd5a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd5d:	85 c0                	test   eax,eax
c001cd5f:	74 10                	je     c001cd71 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001cd61:	83 ec 0c             	sub    esp,0xc
c001cd64:	68 4b e1 01 c0       	push   0xc001e14b
c001cd69:	e8 a9 35 ff ff       	call   c0010317 <KePanic(char const*)>
c001cd6e:	83 c4 10             	add    esp,0x10
c001cd71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd75:	8b 00                	mov    eax,DWORD PTR [eax]
c001cd77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd7a:	85 c0                	test   eax,eax
c001cd7c:	75 33                	jne    c001cdb1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001cd7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cd88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cd93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd9a:	83 f8 01             	cmp    eax,0x1
c001cd9d:	74 21                	je     c001cdc0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001cd9f:	83 ec 0c             	sub    esp,0xc
c001cda2:	68 24 e1 01 c0       	push   0xc001e124
c001cda7:	e8 6b 35 ff ff       	call   c0010317 <KePanic(char const*)>
c001cdac:	83 c4 10             	add    esp,0x10
c001cdaf:	eb 0f                	jmp    c001cdc0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001cdb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdb5:	8b 00                	mov    eax,DWORD PTR [eax]
c001cdb7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001cdba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdbe:	89 10                	mov    DWORD PTR [eax],edx
c001cdc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cdc7:	8d 50 ff             	lea    edx,[eax-0x1]
c001cdca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cdd1:	83 c4 0c             	add    esp,0xc
c001cdd4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001cdd6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001cdd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cdda:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cddd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001cdde <DriverlessDevice::~DriverlessDevice()>:
c001cdde:	ba 9c e7 01 c0       	mov    edx,0xc001e79c
c001cde3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cde7:	89 10                	mov    DWORD PTR [eax],edx
c001cde9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cded:	50                   	push   eax
c001cdee:	e8 5b eb fe ff       	call   c000b94e <Device::~Device()>
c001cdf3:	83 c4 04             	add    esp,0x4
c001cdf6:	90                   	nop
c001cdf7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001cdf8 <DriverlessDevice::~DriverlessDevice()>:
c001cdf8:	83 ec 0c             	sub    esp,0xc
c001cdfb:	83 ec 0c             	sub    esp,0xc
c001cdfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce02:	e8 d7 ff ff ff       	call   c001cdde <DriverlessDevice::~DriverlessDevice()>
c001ce07:	83 c4 10             	add    esp,0x10
c001ce0a:	83 ec 08             	sub    esp,0x8
c001ce0d:	68 58 01 00 00       	push   0x158
c001ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce16:	e8 fd d6 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001ce1b:	83 c4 10             	add    esp,0x10
c001ce1e:	83 c4 0c             	add    esp,0xc
c001ce21:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ce22 <LinkedList<Device>::addElement(Device*)>:
c001ce22:	83 ec 0c             	sub    esp,0xc
c001ce25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ce2a:	75 10                	jne    c001ce3c <LinkedList<Device>::addElement(Device*)+0x1a>
c001ce2c:	83 ec 0c             	sub    esp,0xc
c001ce2f:	68 c8 e0 01 c0       	push   0xc001e0c8
c001ce34:	e8 de 34 ff ff       	call   c0010317 <KePanic(char const*)>
c001ce39:	83 c4 10             	add    esp,0x10
c001ce3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ce42:	85 c0                	test   eax,eax
c001ce44:	74 3a                	je     c001ce80 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ce46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ce4d:	85 c0                	test   eax,eax
c001ce4f:	74 2f                	je     c001ce80 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ce51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ce58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce5c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ce62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce6a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ce6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ce74:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ce7e:	eb 68                	jmp    c001cee8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ce80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce84:	8b 00                	mov    eax,DWORD PTR [eax]
c001ce86:	85 c0                	test   eax,eax
c001ce88:	75 4e                	jne    c001ced8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ce8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ce91:	85 c0                	test   eax,eax
c001ce93:	75 43                	jne    c001ced8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ce95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce9d:	89 10                	mov    DWORD PTR [eax],edx
c001ce9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cea3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cea7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ceaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ceb1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001cebb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cebf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cec2:	85 c0                	test   eax,eax
c001cec4:	74 22                	je     c001cee8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001cec6:	83 ec 0c             	sub    esp,0xc
c001cec9:	68 ea e0 01 c0       	push   0xc001e0ea
c001cece:	e8 44 34 ff ff       	call   c0010317 <KePanic(char const*)>
c001ced3:	83 c4 10             	add    esp,0x10
c001ced6:	eb 10                	jmp    c001cee8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ced8:	83 ec 0c             	sub    esp,0xc
c001cedb:	68 f4 e0 01 c0       	push   0xc001e0f4
c001cee0:	e8 32 34 ff ff       	call   c0010317 <KePanic(char const*)>
c001cee5:	83 c4 10             	add    esp,0x10
c001cee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ceef:	8d 50 01             	lea    edx,[eax+0x1]
c001cef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cef6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cef9:	90                   	nop
c001cefa:	83 c4 0c             	add    esp,0xc
c001cefd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001cefe <LinkedList<Device>::LinkedList()>:
c001cefe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cf08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cf13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cf1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cf28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cf33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cf3e:	90                   	nop
c001cf3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001cf40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001cf40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf44:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf46:	85 c0                	test   eax,eax
c001cf48:	75 0e                	jne    c001cf58 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001cf4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cf51:	85 c0                	test   eax,eax
c001cf53:	75 03                	jne    c001cf58 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001cf55:	b0 01                	mov    al,0x1
c001cf57:	c3                   	ret    
c001cf58:	b0 00                	mov    al,0x0
c001cf5a:	90                   	nop
c001cf5b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001cf5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001cf5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf60:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf62:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001cf64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001cf64:	83 ec 0c             	sub    esp,0xc
c001cf67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf6d:	85 c0                	test   eax,eax
c001cf6f:	75 17                	jne    c001cf88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001cf71:	83 ec 0c             	sub    esp,0xc
c001cf74:	68 00 e1 01 c0       	push   0xc001e100
c001cf79:	e8 99 33 ff ff       	call   c0010317 <KePanic(char const*)>
c001cf7e:	83 c4 10             	add    esp,0x10
c001cf81:	e9 92 00 00 00       	jmp    c001d018 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001cf86:	66 90                	xchg   ax,ax
c001cf88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cf8f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cf92:	85 c0                	test   eax,eax
c001cf94:	0f 95 c0             	setne  al
c001cf97:	84 c0                	test   al,al
c001cf99:	74 11                	je     c001cfac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001cf9b:	83 ec 0c             	sub    esp,0xc
c001cf9e:	68 4b e1 01 c0       	push   0xc001e14b
c001cfa3:	e8 6f 33 ff ff       	call   c0010317 <KePanic(char const*)>
c001cfa8:	83 c4 10             	add    esp,0x10
c001cfab:	90                   	nop
c001cfac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cfb2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cfb5:	85 c0                	test   eax,eax
c001cfb7:	0f 94 c0             	sete   al
c001cfba:	84 c0                	test   al,al
c001cfbc:	74 36                	je     c001cff4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001cfbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfc2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cfc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cfd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfd7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cfda:	83 f8 01             	cmp    eax,0x1
c001cfdd:	74 25                	je     c001d004 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001cfdf:	83 ec 0c             	sub    esp,0xc
c001cfe2:	68 24 e1 01 c0       	push   0xc001e124
c001cfe7:	e8 2b 33 ff ff       	call   c0010317 <KePanic(char const*)>
c001cfec:	83 c4 10             	add    esp,0x10
c001cfef:	eb 13                	jmp    c001d004 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001cff1:	8d 76 00             	lea    esi,[esi+0x0]
c001cff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cff8:	8b 00                	mov    eax,DWORD PTR [eax]
c001cffa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001cffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d001:	89 10                	mov    DWORD PTR [eax],edx
c001d003:	90                   	nop
c001d004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d008:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d00b:	8d 50 ff             	lea    edx,[eax-0x1]
c001d00e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d012:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d015:	8d 76 00             	lea    esi,[esi+0x0]
c001d018:	83 c4 0c             	add    esp,0xc
c001d01b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001d01c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001d01c:	83 ec 0c             	sub    esp,0xc
c001d01f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001d024:	75 12                	jne    c001d038 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001d026:	83 ec 0c             	sub    esp,0xc
c001d029:	68 c8 e0 01 c0       	push   0xc001e0c8
c001d02e:	e8 e4 32 ff ff       	call   c0010317 <KePanic(char const*)>
c001d033:	83 c4 10             	add    esp,0x10
c001d036:	66 90                	xchg   ax,ax
c001d038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d03c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d03e:	85 c0                	test   eax,eax
c001d040:	74 36                	je     c001d078 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001d042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d046:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d049:	85 c0                	test   eax,eax
c001d04b:	74 2b                	je     c001d078 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001d04d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d051:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d054:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d058:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001d05b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d05f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d063:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d06a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d06d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d074:	eb 6a                	jmp    c001d0e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001d076:	66 90                	xchg   ax,ax
c001d078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d07c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d07e:	85 c0                	test   eax,eax
c001d080:	75 4e                	jne    c001d0d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001d082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d086:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d089:	85 c0                	test   eax,eax
c001d08b:	75 43                	jne    c001d0d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001d08d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d091:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d095:	89 10                	mov    DWORD PTR [eax],edx
c001d097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d09b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d09f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d0a9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d0b7:	85 c0                	test   eax,eax
c001d0b9:	74 25                	je     c001d0e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001d0bb:	83 ec 0c             	sub    esp,0xc
c001d0be:	68 ea e0 01 c0       	push   0xc001e0ea
c001d0c3:	e8 4f 32 ff ff       	call   c0010317 <KePanic(char const*)>
c001d0c8:	83 c4 10             	add    esp,0x10
c001d0cb:	eb 13                	jmp    c001d0e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001d0cd:	8d 76 00             	lea    esi,[esi+0x0]
c001d0d0:	83 ec 0c             	sub    esp,0xc
c001d0d3:	68 f4 e0 01 c0       	push   0xc001e0f4
c001d0d8:	e8 3a 32 ff ff       	call   c0010317 <KePanic(char const*)>
c001d0dd:	83 c4 10             	add    esp,0x10
c001d0e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d0e7:	8d 50 01             	lea    edx,[eax+0x1]
c001d0ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d0f1:	90                   	nop
c001d0f2:	83 c4 0c             	add    esp,0xc
c001d0f5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001d0f8 <ACPI::~ACPI()>:
c001d0f8:	83 ec 0c             	sub    esp,0xc
c001d0fb:	ba 04 ed 01 c0       	mov    edx,0xc001ed04
c001d100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d104:	89 10                	mov    DWORD PTR [eax],edx
c001d106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d10a:	83 ec 0c             	sub    esp,0xc
c001d10d:	50                   	push   eax
c001d10e:	e8 3b e8 fe ff       	call   c000b94e <Device::~Device()>
c001d113:	83 c4 10             	add    esp,0x10
c001d116:	90                   	nop
c001d117:	83 c4 0c             	add    esp,0xc
c001d11a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001d11c <ACPI::~ACPI()>:
c001d11c:	83 ec 0c             	sub    esp,0xc
c001d11f:	83 ec 0c             	sub    esp,0xc
c001d122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d126:	e8 cd ff ff ff       	call   c001d0f8 <ACPI::~ACPI()>
c001d12b:	83 c4 10             	add    esp,0x10
c001d12e:	83 ec 08             	sub    esp,0x8
c001d131:	68 64 12 00 00       	push   0x1264
c001d136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d13a:	e8 d9 d3 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d13f:	83 c4 10             	add    esp,0x10
c001d142:	83 c4 0c             	add    esp,0xc
c001d145:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001d148 <LinkedList<Device>::~LinkedList()>:
c001d148:	90                   	nop
c001d149:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001d14c <LinkedList<Device>::isEmpty()>:
c001d14c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d150:	8b 00                	mov    eax,DWORD PTR [eax]
c001d152:	85 c0                	test   eax,eax
c001d154:	75 0e                	jne    c001d164 <LinkedList<Device>::isEmpty()+0x18>
c001d156:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d15a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d15d:	85 c0                	test   eax,eax
c001d15f:	75 03                	jne    c001d164 <LinkedList<Device>::isEmpty()+0x18>
c001d161:	b0 01                	mov    al,0x1
c001d163:	c3                   	ret    
c001d164:	b0 00                	mov    al,0x0
c001d166:	90                   	nop
c001d167:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001d168 <LinkedList<Device>::getFirstElement()>:
c001d168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d16c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d16e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001d170 <LinkedList<Device>::removeFirst()>:
c001d170:	83 ec 0c             	sub    esp,0xc
c001d173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d177:	8b 00                	mov    eax,DWORD PTR [eax]
c001d179:	85 c0                	test   eax,eax
c001d17b:	75 17                	jne    c001d194 <LinkedList<Device>::removeFirst()+0x24>
c001d17d:	83 ec 0c             	sub    esp,0xc
c001d180:	68 00 e1 01 c0       	push   0xc001e100
c001d185:	e8 8d 31 ff ff       	call   c0010317 <KePanic(char const*)>
c001d18a:	83 c4 10             	add    esp,0x10
c001d18d:	e9 92 00 00 00       	jmp    c001d224 <LinkedList<Device>::removeFirst()+0xb4>
c001d192:	66 90                	xchg   ax,ax
c001d194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d198:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d19b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001d1a1:	85 c0                	test   eax,eax
c001d1a3:	74 13                	je     c001d1b8 <LinkedList<Device>::removeFirst()+0x48>
c001d1a5:	83 ec 0c             	sub    esp,0xc
c001d1a8:	68 4b e1 01 c0       	push   0xc001e14b
c001d1ad:	e8 65 31 ff ff       	call   c0010317 <KePanic(char const*)>
c001d1b2:	83 c4 10             	add    esp,0x10
c001d1b5:	8d 76 00             	lea    esi,[esi+0x0]
c001d1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1be:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001d1c4:	85 c0                	test   eax,eax
c001d1c6:	75 34                	jne    c001d1fc <LinkedList<Device>::removeFirst()+0x8c>
c001d1c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d1dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d1e4:	83 f8 01             	cmp    eax,0x1
c001d1e7:	74 27                	je     c001d210 <LinkedList<Device>::removeFirst()+0xa0>
c001d1e9:	83 ec 0c             	sub    esp,0xc
c001d1ec:	68 24 e1 01 c0       	push   0xc001e124
c001d1f1:	e8 21 31 ff ff       	call   c0010317 <KePanic(char const*)>
c001d1f6:	83 c4 10             	add    esp,0x10
c001d1f9:	eb 15                	jmp    c001d210 <LinkedList<Device>::removeFirst()+0xa0>
c001d1fb:	90                   	nop
c001d1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d200:	8b 00                	mov    eax,DWORD PTR [eax]
c001d202:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001d208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d20c:	89 10                	mov    DWORD PTR [eax],edx
c001d20e:	66 90                	xchg   ax,ax
c001d210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d214:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d217:	8d 50 ff             	lea    edx,[eax-0x1]
c001d21a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d21e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d221:	8d 76 00             	lea    esi,[esi+0x0]
c001d224:	83 c4 0c             	add    esp,0xc
c001d227:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001d228 <CPU::~CPU()>:
c001d228:	83 ec 0c             	sub    esp,0xc
c001d22b:	ba a0 ee 01 c0       	mov    edx,0xc001eea0
c001d230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d234:	89 10                	mov    DWORD PTR [eax],edx
c001d236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d23a:	83 ec 0c             	sub    esp,0xc
c001d23d:	50                   	push   eax
c001d23e:	e8 0b e7 fe ff       	call   c000b94e <Device::~Device()>
c001d243:	83 c4 10             	add    esp,0x10
c001d246:	90                   	nop
c001d247:	83 c4 0c             	add    esp,0xc
c001d24a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001d24c <CPU::~CPU()>:
c001d24c:	83 ec 0c             	sub    esp,0xc
c001d24f:	83 ec 0c             	sub    esp,0xc
c001d252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d256:	e8 cd ff ff ff       	call   c001d228 <CPU::~CPU()>
c001d25b:	83 c4 10             	add    esp,0x10
c001d25e:	83 ec 08             	sub    esp,0x8
c001d261:	68 94 11 00 00       	push   0x1194
c001d266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d26a:	e8 a9 d2 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d26f:	83 c4 10             	add    esp,0x10
c001d272:	83 c4 0c             	add    esp,0xc
c001d275:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001d278 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001d278:	90                   	nop
c001d279:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001d27c <ThreadControlBlock::ThreadControlBlock()>:
c001d27c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d280:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d287:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d28b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001d292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d296:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001d29d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2a1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001d2a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2ac:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001d2b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2b7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001d2bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2bf:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001d2c3:	90                   	nop
c001d2c4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001d2c8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001d2c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d2d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d2dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2e1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d2e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d2f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2f6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d2fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d301:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d308:	90                   	nop
c001d309:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001d30c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001d30c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d310:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001d313:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001d314 <PCI::~PCI()>:
c001d314:	83 ec 0c             	sub    esp,0xc
c001d317:	ba 40 fb 01 c0       	mov    edx,0xc001fb40
c001d31c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d320:	89 10                	mov    DWORD PTR [eax],edx
c001d322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d326:	83 ec 0c             	sub    esp,0xc
c001d329:	50                   	push   eax
c001d32a:	e8 a9 e0 fe ff       	call   c000b3d8 <Bus::~Bus()>
c001d32f:	83 c4 10             	add    esp,0x10
c001d332:	90                   	nop
c001d333:	83 c4 0c             	add    esp,0xc
c001d336:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001d338 <PCI::~PCI()>:
c001d338:	83 ec 0c             	sub    esp,0xc
c001d33b:	83 ec 0c             	sub    esp,0xc
c001d33e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d342:	e8 cd ff ff ff       	call   c001d314 <PCI::~PCI()>
c001d347:	83 c4 10             	add    esp,0x10
c001d34a:	83 ec 08             	sub    esp,0x8
c001d34d:	68 5c 01 00 00       	push   0x15c
c001d352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d356:	e8 bd d1 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d35b:	83 c4 10             	add    esp,0x10
c001d35e:	83 c4 0c             	add    esp,0xc
c001d361:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001d362 <IDE::~IDE()>:
c001d362:	83 ec 0c             	sub    esp,0xc
c001d365:	ba f4 fb 01 c0       	mov    edx,0xc001fbf4
c001d36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d36e:	89 10                	mov    DWORD PTR [eax],edx
c001d370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d374:	83 ec 0c             	sub    esp,0xc
c001d377:	50                   	push   eax
c001d378:	e8 4b ea fe ff       	call   c000bdc8 <HardDiskController::~HardDiskController()>
c001d37d:	83 c4 10             	add    esp,0x10
c001d380:	90                   	nop
c001d381:	83 c4 0c             	add    esp,0xc
c001d384:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001d386 <IDE::~IDE()>:
c001d386:	83 ec 0c             	sub    esp,0xc
c001d389:	83 ec 0c             	sub    esp,0xc
c001d38c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d390:	e8 cd ff ff ff       	call   c001d362 <IDE::~IDE()>
c001d395:	83 c4 10             	add    esp,0x10
c001d398:	83 ec 08             	sub    esp,0x8
c001d39b:	68 70 02 00 00       	push   0x270
c001d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3a4:	e8 6f d1 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d3a9:	83 c4 10             	add    esp,0x10
c001d3ac:	83 c4 0c             	add    esp,0xc
c001d3af:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001d3b0 <SATABus::~SATABus()>:
c001d3b0:	83 ec 0c             	sub    esp,0xc
c001d3b3:	ba 44 fc 01 c0       	mov    edx,0xc001fc44
c001d3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3bc:	89 10                	mov    DWORD PTR [eax],edx
c001d3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3c2:	83 ec 0c             	sub    esp,0xc
c001d3c5:	50                   	push   eax
c001d3c6:	e8 fd e9 fe ff       	call   c000bdc8 <HardDiskController::~HardDiskController()>
c001d3cb:	83 c4 10             	add    esp,0x10
c001d3ce:	90                   	nop
c001d3cf:	83 c4 0c             	add    esp,0xc
c001d3d2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001d3d4 <SATABus::~SATABus()>:
c001d3d4:	83 ec 0c             	sub    esp,0xc
c001d3d7:	83 ec 0c             	sub    esp,0xc
c001d3da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3de:	e8 cd ff ff ff       	call   c001d3b0 <SATABus::~SATABus()>
c001d3e3:	83 c4 10             	add    esp,0x10
c001d3e6:	83 ec 08             	sub    esp,0x8
c001d3e9:	68 64 01 00 00       	push   0x164
c001d3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3f2:	e8 21 d1 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d3f7:	83 c4 10             	add    esp,0x10
c001d3fa:	83 c4 0c             	add    esp,0xc
c001d3fd:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001d3fe <ATA::~ATA()>:
c001d3fe:	83 ec 0c             	sub    esp,0xc
c001d401:	ba 84 fc 01 c0       	mov    edx,0xc001fc84
c001d406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d40a:	89 10                	mov    DWORD PTR [eax],edx
c001d40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d410:	83 ec 0c             	sub    esp,0xc
c001d413:	50                   	push   eax
c001d414:	e8 91 ea fe ff       	call   c000beaa <PhysicalDisk::~PhysicalDisk()>
c001d419:	83 c4 10             	add    esp,0x10
c001d41c:	90                   	nop
c001d41d:	83 c4 0c             	add    esp,0xc
c001d420:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001d422 <ATA::~ATA()>:
c001d422:	83 ec 0c             	sub    esp,0xc
c001d425:	83 ec 0c             	sub    esp,0xc
c001d428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d42c:	e8 cd ff ff ff       	call   c001d3fe <ATA::~ATA()>
c001d431:	83 c4 10             	add    esp,0x10
c001d434:	83 ec 08             	sub    esp,0x8
c001d437:	68 7c 01 00 00       	push   0x17c
c001d43c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d440:	e8 d3 d0 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d445:	83 c4 10             	add    esp,0x10
c001d448:	83 c4 0c             	add    esp,0xc
c001d44b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001d44c <ATAPI::~ATAPI()>:
c001d44c:	83 ec 0c             	sub    esp,0xc
c001d44f:	ba cc fc 01 c0       	mov    edx,0xc001fccc
c001d454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d458:	89 10                	mov    DWORD PTR [eax],edx
c001d45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d45e:	83 ec 0c             	sub    esp,0xc
c001d461:	50                   	push   eax
c001d462:	e8 43 ea fe ff       	call   c000beaa <PhysicalDisk::~PhysicalDisk()>
c001d467:	83 c4 10             	add    esp,0x10
c001d46a:	90                   	nop
c001d46b:	83 c4 0c             	add    esp,0xc
c001d46e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001d470 <ATAPI::~ATAPI()>:
c001d470:	83 ec 0c             	sub    esp,0xc
c001d473:	83 ec 0c             	sub    esp,0xc
c001d476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d47a:	e8 cd ff ff ff       	call   c001d44c <ATAPI::~ATAPI()>
c001d47f:	83 c4 10             	add    esp,0x10
c001d482:	83 ec 08             	sub    esp,0x8
c001d485:	68 84 01 00 00       	push   0x184
c001d48a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d48e:	e8 85 d0 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d493:	83 c4 10             	add    esp,0x10
c001d496:	83 c4 0c             	add    esp,0xc
c001d499:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001d49a <SATA::~SATA()>:
c001d49a:	83 ec 0c             	sub    esp,0xc
c001d49d:	ba 80 fd 01 c0       	mov    edx,0xc001fd80
c001d4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4a6:	89 10                	mov    DWORD PTR [eax],edx
c001d4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4ac:	83 ec 0c             	sub    esp,0xc
c001d4af:	50                   	push   eax
c001d4b0:	e8 f5 e9 fe ff       	call   c000beaa <PhysicalDisk::~PhysicalDisk()>
c001d4b5:	83 c4 10             	add    esp,0x10
c001d4b8:	90                   	nop
c001d4b9:	83 c4 0c             	add    esp,0xc
c001d4bc:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001d4be <SATA::~SATA()>:
c001d4be:	83 ec 0c             	sub    esp,0xc
c001d4c1:	83 ec 0c             	sub    esp,0xc
c001d4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4c8:	e8 cd ff ff ff       	call   c001d49a <SATA::~SATA()>
c001d4cd:	83 c4 10             	add    esp,0x10
c001d4d0:	83 ec 08             	sub    esp,0x8
c001d4d3:	68 7c 01 00 00       	push   0x17c
c001d4d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4dc:	e8 37 d0 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d4e1:	83 c4 10             	add    esp,0x10
c001d4e4:	83 c4 0c             	add    esp,0xc
c001d4e7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001d4e8 <SATAPI::~SATAPI()>:
c001d4e8:	83 ec 0c             	sub    esp,0xc
c001d4eb:	ba 90 fe 01 c0       	mov    edx,0xc001fe90
c001d4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4f4:	89 10                	mov    DWORD PTR [eax],edx
c001d4f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4fa:	83 ec 0c             	sub    esp,0xc
c001d4fd:	50                   	push   eax
c001d4fe:	e8 a7 e9 fe ff       	call   c000beaa <PhysicalDisk::~PhysicalDisk()>
c001d503:	83 c4 10             	add    esp,0x10
c001d506:	90                   	nop
c001d507:	83 c4 0c             	add    esp,0xc
c001d50a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001d50c <SATAPI::~SATAPI()>:
c001d50c:	83 ec 0c             	sub    esp,0xc
c001d50f:	83 ec 0c             	sub    esp,0xc
c001d512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d516:	e8 cd ff ff ff       	call   c001d4e8 <SATAPI::~SATAPI()>
c001d51b:	83 c4 10             	add    esp,0x10
c001d51e:	83 ec 08             	sub    esp,0x8
c001d521:	68 84 01 00 00       	push   0x184
c001d526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d52a:	e8 e9 cf fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d52f:	83 c4 10             	add    esp,0x10
c001d532:	83 c4 0c             	add    esp,0xc
c001d535:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001d536 <IOAPIC::~IOAPIC()>:
c001d536:	83 ec 0c             	sub    esp,0xc
c001d539:	ba d0 fe 01 c0       	mov    edx,0xc001fed0
c001d53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d542:	89 10                	mov    DWORD PTR [eax],edx
c001d544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d548:	83 ec 0c             	sub    esp,0xc
c001d54b:	50                   	push   eax
c001d54c:	e8 fd e3 fe ff       	call   c000b94e <Device::~Device()>
c001d551:	83 c4 10             	add    esp,0x10
c001d554:	90                   	nop
c001d555:	83 c4 0c             	add    esp,0xc
c001d558:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001d55a <IOAPIC::~IOAPIC()>:
c001d55a:	83 ec 0c             	sub    esp,0xc
c001d55d:	83 ec 0c             	sub    esp,0xc
c001d560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d564:	e8 cd ff ff ff       	call   c001d536 <IOAPIC::~IOAPIC()>
c001d569:	83 c4 10             	add    esp,0x10
c001d56c:	83 ec 08             	sub    esp,0x8
c001d56f:	68 68 01 00 00       	push   0x168
c001d574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d578:	e8 9b cf fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d57d:	83 c4 10             	add    esp,0x10
c001d580:	83 c4 0c             	add    esp,0xc
c001d583:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001d584 <APICTimer::~APICTimer()>:
c001d584:	83 ec 0c             	sub    esp,0xc
c001d587:	ba 18 ff 01 c0       	mov    edx,0xc001ff18
c001d58c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d590:	89 10                	mov    DWORD PTR [eax],edx
c001d592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d596:	83 ec 0c             	sub    esp,0xc
c001d599:	50                   	push   eax
c001d59a:	e8 dd fc fe ff       	call   c000d27c <Timer::~Timer()>
c001d59f:	83 c4 10             	add    esp,0x10
c001d5a2:	90                   	nop
c001d5a3:	83 c4 0c             	add    esp,0xc
c001d5a6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001d5a8 <APICTimer::~APICTimer()>:
c001d5a8:	83 ec 0c             	sub    esp,0xc
c001d5ab:	83 ec 0c             	sub    esp,0xc
c001d5ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5b2:	e8 cd ff ff ff       	call   c001d584 <APICTimer::~APICTimer()>
c001d5b7:	83 c4 10             	add    esp,0x10
c001d5ba:	83 ec 08             	sub    esp,0x8
c001d5bd:	68 60 01 00 00       	push   0x160
c001d5c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5c6:	e8 4d cf fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d5cb:	83 c4 10             	add    esp,0x10
c001d5ce:	83 c4 0c             	add    esp,0xc
c001d5d1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001d5d4 <PIT::~PIT()>:
c001d5d4:	83 ec 0c             	sub    esp,0xc
c001d5d7:	ba 68 ff 01 c0       	mov    edx,0xc001ff68
c001d5dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e0:	89 10                	mov    DWORD PTR [eax],edx
c001d5e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e6:	83 ec 0c             	sub    esp,0xc
c001d5e9:	50                   	push   eax
c001d5ea:	e8 8d fc fe ff       	call   c000d27c <Timer::~Timer()>
c001d5ef:	83 c4 10             	add    esp,0x10
c001d5f2:	90                   	nop
c001d5f3:	83 c4 0c             	add    esp,0xc
c001d5f6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001d5f8 <PIT::~PIT()>:
c001d5f8:	83 ec 0c             	sub    esp,0xc
c001d5fb:	83 ec 0c             	sub    esp,0xc
c001d5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d602:	e8 cd ff ff ff       	call   c001d5d4 <PIT::~PIT()>
c001d607:	83 c4 10             	add    esp,0x10
c001d60a:	83 ec 08             	sub    esp,0x8
c001d60d:	68 5c 01 00 00       	push   0x15c
c001d612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d616:	e8 fd ce fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d61b:	83 c4 10             	add    esp,0x10
c001d61e:	83 c4 0c             	add    esp,0xc
c001d621:	c3                   	ret    

Disassembly of section userkernel:

c0021000 <KiDefaultSignalHandlerAbort(int)>:
c0021000:	57                   	push   edi
c0021001:	b9 07 00 00 00       	mov    ecx,0x7
c0021006:	56                   	push   esi
c0021007:	be 91 ef 01 c0       	mov    esi,0xc001ef91
c002100c:	83 ec 24             	sub    esp,0x24
c002100f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021013:	fc                   	cld    
c0021014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002101a:	50                   	push   eax
c002101b:	6a 00                	push   0x0
c002101d:	6a 38                	push   0x38
c002101f:	6a 01                	push   0x1
c0021021:	e8 2c 00 00 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0021026:	83 c4 34             	add    esp,0x34
c0021029:	5e                   	pop    esi
c002102a:	5f                   	pop    edi
c002102b:	c3                   	ret    

c002102c <KiDefaultSignalHandlerTerminate(int)>:
c002102c:	57                   	push   edi
c002102d:	b9 08 00 00 00       	mov    ecx,0x8
c0021032:	56                   	push   esi
c0021033:	be ad ef 01 c0       	mov    esi,0xc001efad
c0021038:	83 ec 24             	sub    esp,0x24
c002103b:	89 e7                	mov    edi,esp
c002103d:	fc                   	cld    
c002103e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021040:	54                   	push   esp
c0021041:	6a 00                	push   0x0
c0021043:	6a 37                	push   0x37
c0021045:	6a 01                	push   0x1
c0021047:	e8 06 00 00 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002104c:	83 c4 34             	add    esp,0x34
c002104f:	5e                   	pop    esi
c0021050:	5f                   	pop    edi
c0021051:	c3                   	ret    

c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0021052:	53                   	push   ebx
c0021053:	83 ec 10             	sub    esp,0x10
c0021056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002105a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002105e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021066:	cd 60                	int    0x60
c0021068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002106c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021078:	83 c4 10             	add    esp,0x10
c002107b:	5b                   	pop    ebx
c002107c:	c3                   	ret    

Disassembly of section align_previous:

c0022000 <DO_NOT_DELETE()>:
c0022000:	c3                   	ret    
