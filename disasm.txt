
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 55 7b 00 00       	call   c0007b75 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 68 28 02 c0       	mov    eax,0xc0022868
c0000025:	3d 68 28 02 c0       	cmp    eax,0xc0022868
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 68 28 02 c0       	push   0xc0022868
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 68 28 02 c0       	mov    eax,0xc0022868
c0000051:	2d 68 28 02 c0       	sub    eax,0xc0022868
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 68 28 02 c0       	push   0xc0022868
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 7c f6 01 c0       	mov    ebx,0xc001f67c
c0000097:	81 eb 78 f6 01 c0    	sub    ebx,0xc001f678
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 78 f6 01 c0       	mov    esi,0xc001f678
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 68 28 02 c0       	push   0xc0022868
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 68 28 02 c0       	push   0xc0022868
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 db 4c 01 00       	call   c0014f88 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 17 a5 00 00       	call   c000a7dc <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 b9 4c 01 00       	call   c0014f88 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 c2 51 01 00       	call   c00154b0 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 19 58 01 00       	call   c0015b10 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 a1 0a 01 00       	jmp    c0010e20 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 1e                	je     c00003b0 <memcmp+0x30>
c0000392:	0f b6 08             	movzx  ecx,BYTE PTR [eax]
c0000395:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000398:	38 cb                	cmp    bl,cl
c000039a:	75 24                	jne    c00003c0 <memcmp+0x40>
c000039c:	01 c6                	add    esi,eax
c000039e:	eb 0a                	jmp    c00003aa <memcmp+0x2a>
c00003a0:	0f b6 08             	movzx  ecx,BYTE PTR [eax]
c00003a3:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a6:	38 d9                	cmp    cl,bl
c00003a8:	75 16                	jne    c00003c0 <memcmp+0x40>
c00003aa:	40                   	inc    eax
c00003ab:	42                   	inc    edx
c00003ac:	39 f0                	cmp    eax,esi
c00003ae:	75 f0                	jne    c00003a0 <memcmp+0x20>
c00003b0:	5b                   	pop    ebx
c00003b1:	31 c0                	xor    eax,eax
c00003b3:	5e                   	pop    esi
c00003b4:	c3                   	ret    
c00003b5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00003b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	83 ec 2c             	sub    esp,0x2c
c00003d3:	89 6c 24 28          	mov    DWORD PTR [esp+0x28],ebp
c00003d7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00003db:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00003df:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00003e3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00003e7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00003eb:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c00003ef:	39 cd                	cmp    ebp,ecx
c00003f1:	0f 83 49 01 00 00    	jae    c0000540 <memmove+0x170>
c00003f7:	85 d2                	test   edx,edx
c00003f9:	0f 84 23 01 00 00    	je     c0000522 <memmove+0x152>
c00003ff:	8d 5d 10             	lea    ebx,[ebp+0x10]
c0000402:	39 d9                	cmp    ecx,ebx
c0000404:	0f 93 44 24 0f       	setae  BYTE PTR [esp+0xf]
c0000409:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000040e:	8d 59 10             	lea    ebx,[ecx+0x10]
c0000411:	39 dd                	cmp    ebp,ebx
c0000413:	0f 93 c3             	setae  bl
c0000416:	08 d8                	or     al,bl
c0000418:	0f 84 42 01 00 00    	je     c0000560 <memmove+0x190>
c000041e:	8d 5a ff             	lea    ebx,[edx-0x1]
c0000421:	83 fb 0e             	cmp    ebx,0xe
c0000424:	0f 86 36 01 00 00    	jbe    c0000560 <memmove+0x190>
c000042a:	89 d7                	mov    edi,edx
c000042c:	89 cb                	mov    ebx,ecx
c000042e:	83 e7 f0             	and    edi,0xfffffff0
c0000431:	89 ee                	mov    esi,ebp
c0000433:	01 cf                	add    edi,ecx
c0000435:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000439:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000440:	f3 0f 6f 03          	movdqu xmm0,XMMWORD PTR [ebx]
c0000444:	83 c3 10             	add    ebx,0x10
c0000447:	f3 0f 7f 06          	movdqu XMMWORD PTR [esi],xmm0
c000044b:	83 c6 10             	add    esi,0x10
c000044e:	39 fb                	cmp    ebx,edi
c0000450:	75 ee                	jne    c0000440 <memmove+0x70>
c0000452:	89 d7                	mov    edi,edx
c0000454:	89 d6                	mov    esi,edx
c0000456:	83 e7 f0             	and    edi,0xfffffff0
c0000459:	29 fe                	sub    esi,edi
c000045b:	01 f9                	add    ecx,edi
c000045d:	8d 5c 3d 00          	lea    ebx,[ebp+edi*1+0x0]
c0000461:	39 fa                	cmp    edx,edi
c0000463:	0f 84 b9 00 00 00    	je     c0000522 <memmove+0x152>
c0000469:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
c000046c:	83 fe 01             	cmp    esi,0x1
c000046f:	88 03                	mov    BYTE PTR [ebx],al
c0000471:	0f 84 ab 00 00 00    	je     c0000522 <memmove+0x152>
c0000477:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000047b:	83 fe 02             	cmp    esi,0x2
c000047e:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0000481:	0f 84 9b 00 00 00    	je     c0000522 <memmove+0x152>
c0000487:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c000048b:	83 fe 03             	cmp    esi,0x3
c000048e:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0000491:	0f 84 8b 00 00 00    	je     c0000522 <memmove+0x152>
c0000497:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c000049b:	83 fe 04             	cmp    esi,0x4
c000049e:	88 43 03             	mov    BYTE PTR [ebx+0x3],al
c00004a1:	74 7f                	je     c0000522 <memmove+0x152>
c00004a3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00004a7:	83 fe 05             	cmp    esi,0x5
c00004aa:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00004ad:	74 73                	je     c0000522 <memmove+0x152>
c00004af:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00004b3:	83 fe 06             	cmp    esi,0x6
c00004b6:	88 43 05             	mov    BYTE PTR [ebx+0x5],al
c00004b9:	74 67                	je     c0000522 <memmove+0x152>
c00004bb:	0f b6 41 06          	movzx  eax,BYTE PTR [ecx+0x6]
c00004bf:	83 fe 07             	cmp    esi,0x7
c00004c2:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00004c5:	74 5b                	je     c0000522 <memmove+0x152>
c00004c7:	0f b6 41 07          	movzx  eax,BYTE PTR [ecx+0x7]
c00004cb:	83 fe 08             	cmp    esi,0x8
c00004ce:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00004d1:	74 4f                	je     c0000522 <memmove+0x152>
c00004d3:	0f b6 41 08          	movzx  eax,BYTE PTR [ecx+0x8]
c00004d7:	83 fe 09             	cmp    esi,0x9
c00004da:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00004dd:	74 43                	je     c0000522 <memmove+0x152>
c00004df:	0f b6 41 09          	movzx  eax,BYTE PTR [ecx+0x9]
c00004e3:	83 fe 0a             	cmp    esi,0xa
c00004e6:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00004e9:	74 37                	je     c0000522 <memmove+0x152>
c00004eb:	0f b6 41 0a          	movzx  eax,BYTE PTR [ecx+0xa]
c00004ef:	83 fe 0b             	cmp    esi,0xb
c00004f2:	88 43 0a             	mov    BYTE PTR [ebx+0xa],al
c00004f5:	74 2b                	je     c0000522 <memmove+0x152>
c00004f7:	0f b6 41 0b          	movzx  eax,BYTE PTR [ecx+0xb]
c00004fb:	83 fe 0c             	cmp    esi,0xc
c00004fe:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0000501:	74 1f                	je     c0000522 <memmove+0x152>
c0000503:	0f b6 41 0c          	movzx  eax,BYTE PTR [ecx+0xc]
c0000507:	83 fe 0d             	cmp    esi,0xd
c000050a:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c000050d:	74 13                	je     c0000522 <memmove+0x152>
c000050f:	0f b6 41 0d          	movzx  eax,BYTE PTR [ecx+0xd]
c0000513:	83 fe 0e             	cmp    esi,0xe
c0000516:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0000519:	74 07                	je     c0000522 <memmove+0x152>
c000051b:	0f b6 41 0e          	movzx  eax,BYTE PTR [ecx+0xe]
c000051f:	88 43 0e             	mov    BYTE PTR [ebx+0xe],al
c0000522:	89 e8                	mov    eax,ebp
c0000524:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0000528:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000052c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0000530:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
c0000534:	83 c4 2c             	add    esp,0x2c
c0000537:	c3                   	ret    
c0000538:	90                   	nop
c0000539:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000540:	76 e0                	jbe    c0000522 <memmove+0x152>
c0000542:	85 d2                	test   edx,edx
c0000544:	74 dc                	je     c0000522 <memmove+0x152>
c0000546:	8d 59 ff             	lea    ebx,[ecx-0x1]
c0000549:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0000554:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000557:	4a                   	dec    edx
c0000558:	75 f6                	jne    c0000550 <memmove+0x180>
c000055a:	eb c6                	jmp    c0000522 <memmove+0x152>
c000055c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000560:	01 ca                	add    edx,ecx
c0000562:	89 eb                	mov    ebx,ebp
c0000564:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000056a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000570:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
c0000573:	41                   	inc    ecx
c0000574:	43                   	inc    ebx
c0000575:	88 43 ff             	mov    BYTE PTR [ebx-0x1],al
c0000578:	39 d1                	cmp    ecx,edx
c000057a:	75 f4                	jne    c0000570 <memmove+0x1a0>
c000057c:	eb a4                	jmp    c0000522 <memmove+0x152>
c000057e:	66 90                	xchg   ax,ax

c0000580 <memset>:
c0000580:	83 ec 0c             	sub    esp,0xc
c0000583:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0000587:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000058b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000058e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000592:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000596:	85 d2                	test   edx,edx
c0000598:	74 1b                	je     c00005b5 <memset+0x35>
c000059a:	83 fa 08             	cmp    edx,0x8
c000059d:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00005a2:	89 f7                	mov    edi,esi
c00005a4:	73 2a                	jae    c00005d0 <memset+0x50>
c00005a6:	83 e2 07             	and    edx,0x7
c00005a9:	74 0a                	je     c00005b5 <memset+0x35>
c00005ab:	31 c0                	xor    eax,eax
c00005ad:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c00005b0:	40                   	inc    eax
c00005b1:	39 d0                	cmp    eax,edx
c00005b3:	72 f8                	jb     c00005ad <memset+0x2d>
c00005b5:	89 f0                	mov    eax,esi
c00005b7:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00005ba:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00005be:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00005c2:	83 c4 0c             	add    esp,0xc
c00005c5:	c3                   	ret    
c00005c6:	8d 76 00             	lea    esi,[esi+0x0]
c00005c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00005d0:	0f b6 c3             	movzx  eax,bl
c00005d3:	69 c0 01 01 01 01    	imul   eax,eax,0x1010101
c00005d9:	f7 c6 01 00 00 00    	test   esi,0x1
c00005df:	75 1d                	jne    c00005fe <memset+0x7e>
c00005e1:	f7 c7 02 00 00 00    	test   edi,0x2
c00005e7:	75 1d                	jne    c0000606 <memset+0x86>
c00005e9:	f7 c7 04 00 00 00    	test   edi,0x4
c00005ef:	75 20                	jne    c0000611 <memset+0x91>
c00005f1:	89 d1                	mov    ecx,edx
c00005f3:	c1 e9 02             	shr    ecx,0x2
c00005f6:	fc                   	cld    
c00005f7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00005f9:	83 e2 03             	and    edx,0x3
c00005fc:	eb a8                	jmp    c00005a6 <memset+0x26>
c00005fe:	88 06                	mov    BYTE PTR [esi],al
c0000600:	8d 7e 01             	lea    edi,[esi+0x1]
c0000603:	4a                   	dec    edx
c0000604:	eb db                	jmp    c00005e1 <memset+0x61>
c0000606:	66 89 07             	mov    WORD PTR [edi],ax
c0000609:	83 ea 02             	sub    edx,0x2
c000060c:	83 c7 02             	add    edi,0x2
c000060f:	eb d8                	jmp    c00005e9 <memset+0x69>
c0000611:	89 07                	mov    DWORD PTR [edi],eax
c0000613:	83 ea 04             	sub    edx,0x4
c0000616:	83 c7 04             	add    edi,0x4
c0000619:	eb d6                	jmp    c00005f1 <memset+0x71>
c000061b:	90                   	nop
c000061c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000620 <strlen>:
c0000620:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000624:	31 c0                	xor    eax,eax
c0000626:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000629:	74 15                	je     c0000640 <strlen+0x20>
c000062b:	90                   	nop
c000062c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000630:	40                   	inc    eax
c0000631:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000635:	75 f9                	jne    c0000630 <strlen+0x10>
c0000637:	c3                   	ret    
c0000638:	90                   	nop
c0000639:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000640:	c3                   	ret    
c0000641:	eb 0d                	jmp    c0000650 <strpbrk>
c0000643:	90                   	nop
c0000644:	90                   	nop
c0000645:	90                   	nop
c0000646:	90                   	nop
c0000647:	90                   	nop
c0000648:	90                   	nop
c0000649:	90                   	nop
c000064a:	90                   	nop
c000064b:	90                   	nop
c000064c:	90                   	nop
c000064d:	90                   	nop
c000064e:	90                   	nop
c000064f:	90                   	nop

c0000650 <strpbrk>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000657:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000065b:	0f b6 1e             	movzx  ebx,BYTE PTR [esi]
c000065e:	84 db                	test   bl,bl
c0000660:	74 32                	je     c0000694 <strpbrk+0x44>
c0000662:	0f b6 07             	movzx  eax,BYTE PTR [edi]
c0000665:	84 c0                	test   al,al
c0000667:	74 23                	je     c000068c <strpbrk+0x3c>
c0000669:	38 d8                	cmp    al,bl
c000066b:	74 29                	je     c0000696 <strpbrk+0x46>
c000066d:	89 fa                	mov    edx,edi
c000066f:	90                   	nop
c0000670:	eb 12                	jmp    c0000684 <strpbrk+0x34>
c0000672:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000680:	38 d9                	cmp    cl,bl
c0000682:	74 12                	je     c0000696 <strpbrk+0x46>
c0000684:	42                   	inc    edx
c0000685:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0000688:	84 c9                	test   cl,cl
c000068a:	75 f4                	jne    c0000680 <strpbrk+0x30>
c000068c:	46                   	inc    esi
c000068d:	0f b6 1e             	movzx  ebx,BYTE PTR [esi]
c0000690:	84 db                	test   bl,bl
c0000692:	75 d1                	jne    c0000665 <strpbrk+0x15>
c0000694:	31 f6                	xor    esi,esi
c0000696:	5b                   	pop    ebx
c0000697:	89 f0                	mov    eax,esi
c0000699:	5e                   	pop    esi
c000069a:	5f                   	pop    edi
c000069b:	c3                   	ret    
c000069c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c00006a0 <strtok>:
c00006a0:	56                   	push   esi
c00006a1:	53                   	push   ebx
c00006a2:	83 ec 08             	sub    esp,0x8
c00006a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00006a9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00006ad:	85 db                	test   ebx,ebx
c00006af:	75 13                	jne    c00006c4 <strtok+0x24>
c00006b1:	eb 4d                	jmp    c0000700 <strtok+0x60>
c00006b3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006c0:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c3:	43                   	inc    ebx
c00006c4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00006c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00006cb:	e8 80 ff ff ff       	call   c0000650 <strpbrk>
c00006d0:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c00006d5:	39 d8                	cmp    eax,ebx
c00006d7:	74 e7                	je     c00006c0 <strtok+0x20>
c00006d9:	85 c0                	test   eax,eax
c00006db:	74 2d                	je     c000070a <strtok+0x6a>
c00006dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00006e0:	8d 50 01             	lea    edx,[eax+0x1]
c00006e3:	89 d8                	mov    eax,ebx
c00006e5:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c00006eb:	83 c4 08             	add    esp,0x8
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	c3                   	ret    
c00006f1:	eb 0d                	jmp    c0000700 <strtok+0x60>
c00006f3:	90                   	nop
c00006f4:	90                   	nop
c00006f5:	90                   	nop
c00006f6:	90                   	nop
c00006f7:	90                   	nop
c00006f8:	90                   	nop
c00006f9:	90                   	nop
c00006fa:	90                   	nop
c00006fb:	90                   	nop
c00006fc:	90                   	nop
c00006fd:	90                   	nop
c00006fe:	90                   	nop
c00006ff:	90                   	nop
c0000700:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000706:	85 db                	test   ebx,ebx
c0000708:	75 ba                	jne    c00006c4 <strtok+0x24>
c000070a:	83 c4 08             	add    esp,0x8
c000070d:	31 c0                	xor    eax,eax
c000070f:	5b                   	pop    ebx
c0000710:	5e                   	pop    esi
c0000711:	c3                   	ret    
c0000712:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000719:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000720 <strcpy>:
c0000720:	53                   	push   ebx
c0000721:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000725:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000729:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000072c:	89 c3                	mov    ebx,eax
c000072e:	84 d2                	test   dl,dl
c0000730:	74 19                	je     c000074b <strcpy+0x2b>
c0000732:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000739:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000740:	88 13                	mov    BYTE PTR [ebx],dl
c0000742:	41                   	inc    ecx
c0000743:	43                   	inc    ebx
c0000744:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000747:	84 d2                	test   dl,dl
c0000749:	75 f5                	jne    c0000740 <strcpy+0x20>
c000074b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000074e:	5b                   	pop    ebx
c000074f:	c3                   	ret    

c0000750 <strncpy>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000757:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000075b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075f:	85 db                	test   ebx,ebx
c0000761:	74 3f                	je     c00007a2 <strncpy+0x52>
c0000763:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0000766:	8d 43 ff             	lea    eax,[ebx-0x1]
c0000769:	8d 7a 01             	lea    edi,[edx+0x1]
c000076c:	88 0a                	mov    BYTE PTR [edx],cl
c000076e:	84 c9                	test   cl,cl
c0000770:	74 3e                	je     c00007b0 <strncpy+0x60>
c0000772:	85 c0                	test   eax,eax
c0000774:	74 2c                	je     c00007a2 <strncpy+0x52>
c0000776:	0f b6 4e 01          	movzx  ecx,BYTE PTR [esi+0x1]
c000077a:	8d 43 fe             	lea    eax,[ebx-0x2]
c000077d:	8d 7a 02             	lea    edi,[edx+0x2]
c0000780:	8d 5e 02             	lea    ebx,[esi+0x2]
c0000783:	88 4a 01             	mov    BYTE PTR [edx+0x1],cl
c0000786:	84 c9                	test   cl,cl
c0000788:	75 14                	jne    c000079e <strncpy+0x4e>
c000078a:	eb 24                	jmp    c00007b0 <strncpy+0x60>
c000078c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000790:	43                   	inc    ebx
c0000791:	0f b6 4b ff          	movzx  ecx,BYTE PTR [ebx-0x1]
c0000795:	47                   	inc    edi
c0000796:	48                   	dec    eax
c0000797:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c000079a:	84 c9                	test   cl,cl
c000079c:	74 12                	je     c00007b0 <strncpy+0x60>
c000079e:	85 c0                	test   eax,eax
c00007a0:	75 ee                	jne    c0000790 <strncpy+0x40>
c00007a2:	5b                   	pop    ebx
c00007a3:	89 d0                	mov    eax,edx
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	85 c0                	test   eax,eax
c00007b2:	74 ee                	je     c00007a2 <strncpy+0x52>
c00007b4:	83 f8 08             	cmp    eax,0x8
c00007b7:	89 c3                	mov    ebx,eax
c00007b9:	73 35                	jae    c00007f0 <strncpy+0xa0>
c00007bb:	f6 c3 04             	test   bl,0x4
c00007be:	74 09                	je     c00007c9 <strncpy+0x79>
c00007c0:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00007c6:	83 c7 04             	add    edi,0x4
c00007c9:	f6 c3 02             	test   bl,0x2
c00007cc:	74 08                	je     c00007d6 <strncpy+0x86>
c00007ce:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00007d3:	83 c7 02             	add    edi,0x2
c00007d6:	f6 c3 01             	test   bl,0x1
c00007d9:	74 c7                	je     c00007a2 <strncpy+0x52>
c00007db:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00007de:	89 d0                	mov    eax,edx
c00007e0:	5b                   	pop    ebx
c00007e1:	5e                   	pop    esi
c00007e2:	5f                   	pop    edi
c00007e3:	c3                   	ret    
c00007e4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00007ea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00007f0:	f7 c7 01 00 00 00    	test   edi,0x1
c00007f6:	75 1f                	jne    c0000817 <strncpy+0xc7>
c00007f8:	f7 c7 02 00 00 00    	test   edi,0x2
c00007fe:	75 2c                	jne    c000082c <strncpy+0xdc>
c0000800:	f7 c7 04 00 00 00    	test   edi,0x4
c0000806:	75 16                	jne    c000081e <strncpy+0xce>
c0000808:	89 d9                	mov    ecx,ebx
c000080a:	c1 e9 02             	shr    ecx,0x2
c000080d:	fc                   	cld    
c000080e:	31 c0                	xor    eax,eax
c0000810:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000812:	83 e3 03             	and    ebx,0x3
c0000815:	eb a4                	jmp    c00007bb <strncpy+0x6b>
c0000817:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000081a:	4b                   	dec    ebx
c000081b:	47                   	inc    edi
c000081c:	eb da                	jmp    c00007f8 <strncpy+0xa8>
c000081e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000824:	83 eb 04             	sub    ebx,0x4
c0000827:	83 c7 04             	add    edi,0x4
c000082a:	eb dc                	jmp    c0000808 <strncpy+0xb8>
c000082c:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000831:	83 eb 02             	sub    ebx,0x2
c0000834:	83 c7 02             	add    edi,0x2
c0000837:	eb c7                	jmp    c0000800 <strncpy+0xb0>
c0000839:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c0000840 <strcmp>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000846:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000084a:	0f b6 16             	movzx  edx,BYTE PTR [esi]
c000084d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000850:	38 d1                	cmp    cl,dl
c0000852:	75 1d                	jne    c0000871 <strcmp+0x31>
c0000854:	84 c9                	test   cl,cl
c0000856:	74 28                	je     c0000880 <strcmp+0x40>
c0000858:	b8 01 00 00 00       	mov    eax,0x1
c000085d:	eb 06                	jmp    c0000865 <strcmp+0x25>
c000085f:	90                   	nop
c0000860:	40                   	inc    eax
c0000861:	84 d2                	test   dl,dl
c0000863:	74 1b                	je     c0000880 <strcmp+0x40>
c0000865:	0f b6 14 06          	movzx  edx,BYTE PTR [esi+eax*1]
c0000869:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c000086d:	38 ca                	cmp    dl,cl
c000086f:	74 ef                	je     c0000860 <strcmp+0x20>
c0000871:	5b                   	pop    ebx
c0000872:	0f b6 c2             	movzx  eax,dl
c0000875:	29 c8                	sub    eax,ecx
c0000877:	5e                   	pop    esi
c0000878:	c3                   	ret    
c0000879:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000880:	5b                   	pop    ebx
c0000881:	31 c0                	xor    eax,eax
c0000883:	5e                   	pop    esi
c0000884:	c3                   	ret    
c0000885:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000889:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000890 <strchr>:
c0000890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000894:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0000897:	84 d2                	test   dl,dl
c0000899:	74 21                	je     c00008bc <strchr+0x2c>
c000089b:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00008a0:	38 ca                	cmp    dl,cl
c00008a2:	75 10                	jne    c00008b4 <strchr+0x24>
c00008a4:	eb 19                	jmp    c00008bf <strchr+0x2f>
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008b0:	38 ca                	cmp    dl,cl
c00008b2:	74 0a                	je     c00008be <strchr+0x2e>
c00008b4:	40                   	inc    eax
c00008b5:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00008b8:	84 d2                	test   dl,dl
c00008ba:	75 f4                	jne    c00008b0 <strchr+0x20>
c00008bc:	31 c0                	xor    eax,eax
c00008be:	c3                   	ret    
c00008bf:	90                   	nop
c00008c0:	c3                   	ret    
c00008c1:	eb 0d                	jmp    c00008d0 <strncmp>
c00008c3:	90                   	nop
c00008c4:	90                   	nop
c00008c5:	90                   	nop
c00008c6:	90                   	nop
c00008c7:	90                   	nop
c00008c8:	90                   	nop
c00008c9:	90                   	nop
c00008ca:	90                   	nop
c00008cb:	90                   	nop
c00008cc:	90                   	nop
c00008cd:	90                   	nop
c00008ce:	90                   	nop
c00008cf:	90                   	nop

c00008d0 <strncmp>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00008d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00008db:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00008df:	85 ff                	test   edi,edi
c00008e1:	74 31                	je     c0000914 <strncmp+0x44>
c00008e3:	0f b6 16             	movzx  edx,BYTE PTR [esi]
c00008e6:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008e9:	38 d1                	cmp    cl,dl
c00008eb:	75 33                	jne    c0000920 <strncmp+0x50>
c00008ed:	8d 46 01             	lea    eax,[esi+0x1]
c00008f0:	84 c9                	test   cl,cl
c00008f2:	74 20                	je     c0000914 <strncmp+0x44>
c00008f4:	01 fe                	add    esi,edi
c00008f6:	eb 17                	jmp    c000090f <strncmp+0x3f>
c00008f8:	90                   	nop
c00008f9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000900:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0000903:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000906:	38 ca                	cmp    dl,cl
c0000908:	75 16                	jne    c0000920 <strncmp+0x50>
c000090a:	40                   	inc    eax
c000090b:	84 d2                	test   dl,dl
c000090d:	74 05                	je     c0000914 <strncmp+0x44>
c000090f:	43                   	inc    ebx
c0000910:	39 c6                	cmp    esi,eax
c0000912:	75 ec                	jne    c0000900 <strncmp+0x30>
c0000914:	5b                   	pop    ebx
c0000915:	31 c0                	xor    eax,eax
c0000917:	5e                   	pop    esi
c0000918:	5f                   	pop    edi
c0000919:	c3                   	ret    
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	5b                   	pop    ebx
c0000921:	0f b6 c2             	movzx  eax,dl
c0000924:	29 c8                	sub    eax,ecx
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c0000930 <strcat>:
c0000930:	56                   	push   esi
c0000931:	53                   	push   ebx
c0000932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000936:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000093a:	89 c3                	mov    ebx,eax
c000093c:	eb 04                	jmp    c0000942 <strcat+0x12>
c000093e:	66 90                	xchg   ax,ax
c0000940:	89 d3                	mov    ebx,edx
c0000942:	8d 53 01             	lea    edx,[ebx+0x1]
c0000945:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000949:	75 f5                	jne    c0000940 <strcat+0x10>
c000094b:	31 d2                	xor    edx,edx
c000094d:	8d 76 00             	lea    esi,[esi+0x0]
c0000950:	0f b6 0c 16          	movzx  ecx,BYTE PTR [esi+edx*1]
c0000954:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000957:	42                   	inc    edx
c0000958:	84 c9                	test   cl,cl
c000095a:	75 f4                	jne    c0000950 <strcat+0x20>
c000095c:	5b                   	pop    ebx
c000095d:	5e                   	pop    esi
c000095e:	c3                   	ret    
c000095f:	90                   	nop

c0000960 <strncat>:
c0000960:	56                   	push   esi
c0000961:	53                   	push   ebx
c0000962:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000096a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000096e:	85 f6                	test   esi,esi
c0000970:	74 2f                	je     c00009a1 <strncat+0x41>
c0000972:	89 c2                	mov    edx,eax
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000980:	42                   	inc    edx
c0000981:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000985:	75 f9                	jne    c0000980 <strncat+0x20>
c0000987:	01 ce                	add    esi,ecx
c0000989:	eb 0a                	jmp    c0000995 <strncat+0x35>
c000098b:	90                   	nop
c000098c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000990:	39 f1                	cmp    ecx,esi
c0000992:	74 1c                	je     c00009b0 <strncat+0x50>
c0000994:	42                   	inc    edx
c0000995:	41                   	inc    ecx
c0000996:	0f b6 59 ff          	movzx  ebx,BYTE PTR [ecx-0x1]
c000099a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000099d:	84 db                	test   bl,bl
c000099f:	75 ef                	jne    c0000990 <strncat+0x30>
c00009a1:	5b                   	pop    ebx
c00009a2:	5e                   	pop    esi
c00009a3:	c3                   	ret    
c00009a4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009aa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	8d 76 00             	lea    esi,[esi+0x0]
c00009b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00009c0 <strstr>:
c00009c0:	57                   	push   edi
c00009c1:	56                   	push   esi
c00009c2:	53                   	push   ebx
c00009c3:	83 ec 0c             	sub    esp,0xc
c00009c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00009ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c00009d1:	e8 4a fc ff ff       	call   c0000620 <strlen>
c00009d6:	85 c0                	test   eax,eax
c00009d8:	89 c6                	mov    esi,eax
c00009da:	75 19                	jne    c00009f5 <strstr+0x35>
c00009dc:	eb 32                	jmp    c0000a10 <strstr+0x50>
c00009de:	66 90                	xchg   ax,ax
c00009e0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00009e4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00009e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00009eb:	e8 90 f9 ff ff       	call   c0000380 <memcmp>
c00009f0:	85 c0                	test   eax,eax
c00009f2:	74 1c                	je     c0000a10 <strstr+0x50>
c00009f4:	43                   	inc    ebx
c00009f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00009f8:	e8 23 fc ff ff       	call   c0000620 <strlen>
c00009fd:	39 f0                	cmp    eax,esi
c00009ff:	73 df                	jae    c00009e0 <strstr+0x20>
c0000a01:	83 c4 0c             	add    esp,0xc
c0000a04:	31 c0                	xor    eax,eax
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	c3                   	ret    
c0000a0a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000a10:	83 c4 0c             	add    esp,0xc
c0000a13:	89 d8                	mov    eax,ebx
c0000a15:	5b                   	pop    ebx
c0000a16:	5e                   	pop    esi
c0000a17:	5f                   	pop    edi
c0000a18:	c3                   	ret    
c0000a19:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c0000a20 <toupper>:
c0000a20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a24:	0f b6 d0             	movzx  edx,al
c0000a27:	f6 82 80 f6 01 c0 02 	test   BYTE PTR [edx-0x3ffe0980],0x2
c0000a2e:	74 03                	je     c0000a33 <toupper+0x13>
c0000a30:	83 e8 20             	sub    eax,0x20
c0000a33:	c3                   	ret    
c0000a34:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000a3a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000a40 <tolower>:
c0000a40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a44:	0f b6 d0             	movzx  edx,al
c0000a47:	f6 82 80 f6 01 c0 01 	test   BYTE PTR [edx-0x3ffe0980],0x1
c0000a4e:	74 03                	je     c0000a53 <tolower+0x13>
c0000a50:	83 c0 20             	add    eax,0x20
c0000a53:	c3                   	ret    
c0000a54:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000a5a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000a60 <simple_strtoul>:
c0000a60:	55                   	push   ebp
c0000a61:	57                   	push   edi
c0000a62:	56                   	push   esi
c0000a63:	53                   	push   ebx
c0000a64:	83 ec 0c             	sub    esp,0xc
c0000a67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a6b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0000a6f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0000a73:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0000a76:	89 c2                	mov    edx,eax
c0000a78:	0f b6 80 80 f6 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0980]
c0000a7f:	c0 e8 03             	shr    al,0x3
c0000a82:	24 01                	and    al,0x1
c0000a84:	74 1e                	je     c0000aa4 <simple_strtoul+0x44>
c0000a86:	8d 76 00             	lea    esi,[esi+0x0]
c0000a89:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
c0000a94:	89 c2                	mov    edx,eax
c0000a96:	0f b6 80 80 f6 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0980]
c0000a9d:	c0 e8 03             	shr    al,0x3
c0000aa0:	24 01                	and    al,0x1
c0000aa2:	75 ec                	jne    c0000a90 <simple_strtoul+0x30>
c0000aa4:	80 fa 09             	cmp    dl,0x9
c0000aa7:	74 e7                	je     c0000a90 <simple_strtoul+0x30>
c0000aa9:	80 fa 2d             	cmp    dl,0x2d
c0000aac:	0f 84 3e 01 00 00    	je     c0000bf0 <simple_strtoul+0x190>
c0000ab2:	31 c0                	xor    eax,eax
c0000ab4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ab8:	31 c0                	xor    eax,eax
c0000aba:	80 fa 2b             	cmp    dl,0x2b
c0000abd:	0f 94 c0             	sete   al
c0000ac0:	01 c1                	add    ecx,eax
c0000ac2:	85 ff                	test   edi,edi
c0000ac4:	0f 85 c6 00 00 00    	jne    c0000b90 <simple_strtoul+0x130>
c0000aca:	0f be 19             	movsx  ebx,BYTE PTR [ecx]
c0000acd:	bf 0a 00 00 00       	mov    edi,0xa
c0000ad2:	80 fb 30             	cmp    bl,0x30
c0000ad5:	0f 84 70 01 00 00    	je     c0000c4b <simple_strtoul+0x1eb>
c0000adb:	84 db                	test   bl,bl
c0000add:	0f 84 3d 01 00 00    	je     c0000c20 <simple_strtoul+0x1c0>
c0000ae3:	31 c0                	xor    eax,eax
c0000ae5:	31 ed                	xor    ebp,ebp
c0000ae7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000aeb:	31 f6                	xor    esi,esi
c0000aed:	eb 2e                	jmp    c0000b1d <simple_strtoul+0xbd>
c0000aef:	90                   	nop
c0000af0:	8d 58 d0             	lea    ebx,[eax-0x30]
c0000af3:	39 fb                	cmp    ebx,edi
c0000af5:	73 59                	jae    c0000b50 <simple_strtoul+0xf0>
c0000af7:	89 d8                	mov    eax,ebx
c0000af9:	31 d2                	xor    edx,edx
c0000afb:	f7 d0                	not    eax
c0000afd:	f7 f7                	div    edi
c0000aff:	39 f0                	cmp    eax,esi
c0000b01:	0f 82 d9 00 00 00    	jb     c0000be0 <simple_strtoul+0x180>
c0000b07:	0f af f7             	imul   esi,edi
c0000b0a:	01 de                	add    esi,ebx
c0000b0c:	bb 01 00 00 00       	mov    ebx,0x1
c0000b11:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0000b15:	41                   	inc    ecx
c0000b16:	0f be 19             	movsx  ebx,BYTE PTR [ecx]
c0000b19:	84 db                	test   bl,bl
c0000b1b:	74 33                	je     c0000b50 <simple_strtoul+0xf0>
c0000b1d:	0f b6 c3             	movzx  eax,bl
c0000b20:	f6 80 80 f6 01 c0 04 	test   BYTE PTR [eax-0x3ffe0980],0x4
c0000b27:	75 c7                	jne    c0000af0 <simple_strtoul+0x90>
c0000b29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b2c:	e8 ef fe ff ff       	call   c0000a20 <toupper>
c0000b31:	0f b6 d0             	movzx  edx,al
c0000b34:	f6 82 80 f6 01 c0 01 	test   BYTE PTR [edx-0x3ffe0980],0x1
c0000b3b:	74 13                	je     c0000b50 <simple_strtoul+0xf0>
c0000b3d:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b40:	39 fb                	cmp    ebx,edi
c0000b42:	72 b3                	jb     c0000af7 <simple_strtoul+0x97>
c0000b44:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000b4a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000b50:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0000b54:	85 d2                	test   edx,edx
c0000b56:	74 12                	je     c0000b6a <simple_strtoul+0x10a>
c0000b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000b5c:	09 f0                	or     eax,esi
c0000b5e:	0f 84 9c 00 00 00    	je     c0000c00 <simple_strtoul+0x1a0>
c0000b64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000b68:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6a:	4d                   	dec    ebp
c0000b6b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000b70:	0f 44 f0             	cmove  esi,eax
c0000b73:	83 7c 24 08 01       	cmp    DWORD PTR [esp+0x8],0x1
c0000b78:	75 02                	jne    c0000b7c <simple_strtoul+0x11c>
c0000b7a:	f7 de                	neg    esi
c0000b7c:	83 c4 0c             	add    esp,0xc
c0000b7f:	89 f0                	mov    eax,esi
c0000b81:	5b                   	pop    ebx
c0000b82:	5e                   	pop    esi
c0000b83:	5f                   	pop    edi
c0000b84:	5d                   	pop    ebp
c0000b85:	c3                   	ret    
c0000b86:	8d 76 00             	lea    esi,[esi+0x0]
c0000b89:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b90:	8d 47 fe             	lea    eax,[edi-0x2]
c0000b93:	83 f8 22             	cmp    eax,0x22
c0000b96:	0f 87 84 00 00 00    	ja     c0000c20 <simple_strtoul+0x1c0>
c0000b9c:	83 ff 08             	cmp    edi,0x8
c0000b9f:	0f be 19             	movsx  ebx,BYTE PTR [ecx]
c0000ba2:	0f 84 c6 00 00 00    	je     c0000c6e <simple_strtoul+0x20e>
c0000ba8:	83 ff 10             	cmp    edi,0x10
c0000bab:	0f 85 2a ff ff ff    	jne    c0000adb <simple_strtoul+0x7b>
c0000bb1:	80 fb 30             	cmp    bl,0x30
c0000bb4:	bf 10 00 00 00       	mov    edi,0x10
c0000bb9:	0f 85 1c ff ff ff    	jne    c0000adb <simple_strtoul+0x7b>
c0000bbf:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0000bc6:	89 c3                	mov    ebx,eax
c0000bc8:	e8 73 fe ff ff       	call   c0000a40 <tolower>
c0000bcd:	83 f8 78             	cmp    eax,0x78
c0000bd0:	0f 84 c1 00 00 00    	je     c0000c97 <simple_strtoul+0x237>
c0000bd6:	41                   	inc    ecx
c0000bd7:	e9 ff fe ff ff       	jmp    c0000adb <simple_strtoul+0x7b>
c0000bdc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000be0:	bd 01 00 00 00       	mov    ebp,0x1
c0000be5:	31 f6                	xor    esi,esi
c0000be7:	e9 29 ff ff ff       	jmp    c0000b15 <simple_strtoul+0xb5>
c0000bec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000bf0:	b8 01 00 00 00       	mov    eax,0x1
c0000bf5:	41                   	inc    ecx
c0000bf6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000bfa:	e9 c3 fe ff ff       	jmp    c0000ac2 <simple_strtoul+0x62>
c0000bff:	90                   	nop
c0000c00:	85 c9                	test   ecx,ecx
c0000c02:	74 39                	je     c0000c3d <simple_strtoul+0x1dd>
c0000c04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c08:	31 f6                	xor    esi,esi
c0000c0a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000c0e:	89 38                	mov    DWORD PTR [eax],edi
c0000c10:	e9 55 ff ff ff       	jmp    c0000b6a <simple_strtoul+0x10a>
c0000c15:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000c19:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000c20:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c24:	85 c0                	test   eax,eax
c0000c26:	74 1c                	je     c0000c44 <simple_strtoul+0x1e4>
c0000c28:	85 c9                	test   ecx,ecx
c0000c2a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c2e:	74 5a                	je     c0000c8a <simple_strtoul+0x22a>
c0000c30:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000c34:	31 f6                	xor    esi,esi
c0000c36:	89 38                	mov    DWORD PTR [eax],edi
c0000c38:	e9 36 ff ff ff       	jmp    c0000b73 <simple_strtoul+0x113>
c0000c3d:	31 f6                	xor    esi,esi
c0000c3f:	e9 20 ff ff ff       	jmp    c0000b64 <simple_strtoul+0x104>
c0000c44:	31 f6                	xor    esi,esi
c0000c46:	e9 28 ff ff ff       	jmp    c0000b73 <simple_strtoul+0x113>
c0000c4b:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000c4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0000c52:	89 c3                	mov    ebx,eax
c0000c54:	e8 e7 fd ff ff       	call   c0000a40 <tolower>
c0000c59:	83 f8 78             	cmp    eax,0x78
c0000c5c:	74 20                	je     c0000c7e <simple_strtoul+0x21e>
c0000c5e:	41                   	inc    ecx
c0000c5f:	80 fb 30             	cmp    bl,0x30
c0000c62:	74 13                	je     c0000c77 <simple_strtoul+0x217>
c0000c64:	bf 08 00 00 00       	mov    edi,0x8
c0000c69:	e9 6d fe ff ff       	jmp    c0000adb <simple_strtoul+0x7b>
c0000c6e:	80 fb 30             	cmp    bl,0x30
c0000c71:	0f 85 64 fe ff ff    	jne    c0000adb <simple_strtoul+0x7b>
c0000c77:	0f be 59 01          	movsx  ebx,BYTE PTR [ecx+0x1]
c0000c7b:	41                   	inc    ecx
c0000c7c:	eb e6                	jmp    c0000c64 <simple_strtoul+0x204>
c0000c7e:	0f be 59 02          	movsx  ebx,BYTE PTR [ecx+0x2]
c0000c82:	83 c1 02             	add    ecx,0x2
c0000c85:	e9 27 ff ff ff       	jmp    c0000bb1 <simple_strtoul+0x151>
c0000c8a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000c90:	31 f6                	xor    esi,esi
c0000c92:	e9 dc fe ff ff       	jmp    c0000b73 <simple_strtoul+0x113>
c0000c97:	0f be 59 02          	movsx  ebx,BYTE PTR [ecx+0x2]
c0000c9b:	83 c1 02             	add    ecx,0x2
c0000c9e:	e9 38 fe ff ff       	jmp    c0000adb <simple_strtoul+0x7b>

c0000ca3 <largebin_index>:
c0000ca3:	89 c2                	mov    edx,eax
c0000ca5:	c1 ea 08             	shr    edx,0x8
c0000ca8:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000cae:	77 10                	ja     c0000cc0 <largebin_index+0x1d>
c0000cb0:	0f bd d2             	bsr    edx,edx
c0000cb3:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000cb6:	d3 e8                	shr    eax,cl
c0000cb8:	83 e0 03             	and    eax,0x3
c0000cbb:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000cbf:	c3                   	ret    
c0000cc0:	b8 5f 00 00 00       	mov    eax,0x5f
c0000cc5:	c3                   	ret    

c0000cc6 <malloc_init_state>:
c0000cc6:	8d 50 34             	lea    edx,[eax+0x34]
c0000cc9:	53                   	push   ebx
c0000cca:	89 d1                	mov    ecx,edx
c0000ccc:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000cd2:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000cd5:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000cd8:	83 c2 08             	add    edx,0x8
c0000cdb:	39 da                	cmp    edx,ebx
c0000cdd:	75 f3                	jne    c0000cd2 <malloc_init_state+0xc>
c0000cdf:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ce9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ceb:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cf5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cff:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000d09:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000d10:	83 e2 03             	and    edx,0x3
c0000d13:	5b                   	pop    ebx
c0000d14:	83 ca 48             	or     edx,0x48
c0000d17:	89 10                	mov    DWORD PTR [eax],edx
c0000d19:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000d1c:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000d26:	c3                   	ret    

c0000d27 <malloc_consolidate>:
c0000d27:	8b 10                	mov    edx,DWORD PTR [eax]
c0000d29:	85 d2                	test   edx,edx
c0000d2b:	0f 84 d8 00 00 00    	je     c0000e09 <malloc_consolidate+0xe2>
c0000d31:	55                   	push   ebp
c0000d32:	83 e2 fd             	and    edx,0xfffffffd
c0000d35:	57                   	push   edi
c0000d36:	89 c5                	mov    ebp,eax
c0000d38:	56                   	push   esi
c0000d39:	53                   	push   ebx
c0000d3a:	8d 78 34             	lea    edi,[eax+0x34]
c0000d3d:	83 ec 10             	sub    esp,0x10
c0000d40:	89 10                	mov    DWORD PTR [eax],edx
c0000d42:	c1 ea 03             	shr    edx,0x3
c0000d45:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000d49:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d4d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d51:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d54:	85 d2                	test   edx,edx
c0000d56:	0f 84 98 00 00 00    	je     c0000df4 <malloc_consolidate+0xcd>
c0000d5c:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d63:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d66:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d6d:	89 f9                	mov    ecx,edi
c0000d6f:	83 e1 fe             	and    ecx,0xfffffffe
c0000d72:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d75:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d78:	83 e3 fc             	and    ebx,0xfffffffc
c0000d7b:	83 e7 01             	and    edi,0x1
c0000d7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d81:	75 14                	jne    c0000d97 <malloc_consolidate+0x70>
c0000d83:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d85:	29 fa                	sub    edx,edi
c0000d87:	01 f9                	add    ecx,edi
c0000d89:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d8c:	89 fb                	mov    ebx,edi
c0000d8e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d91:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d94:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d97:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d9a:	74 40                	je     c0000ddc <malloc_consolidate+0xb5>
c0000d9c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d9f:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000da2:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000da6:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000da9:	83 e7 01             	and    edi,0x1
c0000dac:	75 0e                	jne    c0000dbc <malloc_consolidate+0x95>
c0000dae:	01 d9                	add    ecx,ebx
c0000db0:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000db3:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000db6:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000db9:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000dbc:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000dbf:	89 ce                	mov    esi,ecx
c0000dc1:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000dc4:	83 ce 01             	or     esi,0x1
c0000dc7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000dca:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000dcd:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000dd1:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000dd4:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000dd7:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000dda:	eb 0c                	jmp    c0000de8 <malloc_consolidate+0xc1>
c0000ddc:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000ddf:	83 c9 01             	or     ecx,0x1
c0000de2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000de5:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000de8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000dec:	85 d2                	test   edx,edx
c0000dee:	0f 85 6f ff ff ff    	jne    c0000d63 <malloc_consolidate+0x3c>
c0000df4:	83 c5 04             	add    ebp,0x4
c0000df7:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000dfb:	0f 85 50 ff ff ff    	jne    c0000d51 <malloc_consolidate+0x2a>
c0000e01:	83 c4 10             	add    esp,0x10
c0000e04:	5b                   	pop    ebx
c0000e05:	5e                   	pop    esi
c0000e06:	5f                   	pop    edi
c0000e07:	5d                   	pop    ebp
c0000e08:	c3                   	ret    
c0000e09:	e9 b8 fe ff ff       	jmp    c0000cc6 <malloc_init_state>

c0000e0e <dlfree>:
c0000e0e:	57                   	push   edi
c0000e0f:	56                   	push   esi
c0000e10:	53                   	push   ebx
c0000e11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000e15:	85 db                	test   ebx,ebx
c0000e17:	0f 84 e2 00 00 00    	je     c0000eff <dlfree+0xf1>
c0000e1d:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000e20:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000e23:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000e29:	89 f0                	mov    eax,esi
c0000e2b:	83 e0 fc             	and    eax,0xfffffffc
c0000e2e:	39 c1                	cmp    ecx,eax
c0000e30:	72 24                	jb     c0000e56 <dlfree+0x48>
c0000e32:	c1 e8 03             	shr    eax,0x3
c0000e35:	83 c9 03             	or     ecx,0x3
c0000e38:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000e3e:	83 e8 02             	sub    eax,0x2
c0000e41:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000e48:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e4a:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000e51:	e9 a9 00 00 00       	jmp    c0000eff <dlfree+0xf1>
c0000e56:	83 e6 02             	and    esi,0x2
c0000e59:	0f 85 a0 00 00 00    	jne    c0000eff <dlfree+0xf1>
c0000e5f:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e62:	83 c9 01             	or     ecx,0x1
c0000e65:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000e6b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e6e:	83 e1 fc             	and    ecx,0xfffffffc
c0000e71:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e75:	75 13                	jne    c0000e8a <dlfree+0x7c>
c0000e77:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e7a:	29 da                	sub    edx,ebx
c0000e7c:	01 d8                	add    eax,ebx
c0000e7e:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e81:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e84:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e87:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e8a:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000e90:	74 40                	je     c0000ed2 <dlfree+0xc4>
c0000e92:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e96:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e99:	f6 c3 01             	test   bl,0x1
c0000e9c:	75 0e                	jne    c0000eac <dlfree+0x9e>
c0000e9e:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000ea1:	01 c8                	add    eax,ecx
c0000ea3:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000ea6:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000ea9:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000eac:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000eb2:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000eb9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000ebc:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000ec2:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ec5:	89 c1                	mov    ecx,eax
c0000ec7:	83 c9 01             	or     ecx,0x1
c0000eca:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ecd:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000ed0:	eb 10                	jmp    c0000ee2 <dlfree+0xd4>
c0000ed2:	01 c8                	add    eax,ecx
c0000ed4:	89 c1                	mov    ecx,eax
c0000ed6:	83 c9 01             	or     ecx,0x1
c0000ed9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000edc:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000ee2:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000ee7:	76 16                	jbe    c0000eff <dlfree+0xf1>
c0000ee9:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000ef0:	74 0d                	je     c0000eff <dlfree+0xf1>
c0000ef2:	5b                   	pop    ebx
c0000ef3:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000ef8:	5e                   	pop    esi
c0000ef9:	5f                   	pop    edi
c0000efa:	e9 28 fe ff ff       	jmp    c0000d27 <malloc_consolidate>
c0000eff:	5b                   	pop    ebx
c0000f00:	5e                   	pop    esi
c0000f01:	5f                   	pop    edi
c0000f02:	c3                   	ret    

c0000f03 <sYSMALLOc>:
c0000f03:	55                   	push   ebp
c0000f04:	57                   	push   edi
c0000f05:	56                   	push   esi
c0000f06:	53                   	push   ebx
c0000f07:	89 d3                	mov    ebx,edx
c0000f09:	83 ec 2c             	sub    esp,0x2c
c0000f0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000f10:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000f16:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000f19:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000f1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f20:	74 1f                	je     c0000f41 <sYSMALLOc+0x3e>
c0000f22:	89 d0                	mov    eax,edx
c0000f24:	e8 fe fd ff ff       	call   c0000d27 <malloc_consolidate>
c0000f29:	83 ec 0c             	sub    esp,0xc
c0000f2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000f30:	83 e8 07             	sub    eax,0x7
c0000f33:	50                   	push   eax
c0000f34:	e8 33 02 00 00       	call   c000116c <dlmalloc>
c0000f39:	83 c4 10             	add    esp,0x10
c0000f3c:	e9 23 02 00 00       	jmp    c0001164 <sYSMALLOc+0x261>
c0000f41:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f48:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000f4e:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000f51:	83 c0 10             	add    eax,0x10
c0000f54:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f58:	01 c2                	add    edx,eax
c0000f5a:	83 e5 fc             	and    ebp,0xfffffffc
c0000f5d:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f64:	74 02                	je     c0000f68 <sYSMALLOc+0x65>
c0000f66:	29 ea                	sub    edx,ebp
c0000f68:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000f6c:	f7 d9                	neg    ecx
c0000f6e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000f72:	21 ca                	and    edx,ecx
c0000f74:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000f78:	7f 07                	jg     c0000f81 <sYSMALLOc+0x7e>
c0000f7a:	31 c0                	xor    eax,eax
c0000f7c:	e9 e3 01 00 00       	jmp    c0001164 <sYSMALLOc+0x261>
c0000f81:	83 ec 0c             	sub    esp,0xc
c0000f84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f88:	e8 25 6a 00 00       	call   c00079b2 <sbrk>
c0000f8d:	83 c4 10             	add    esp,0x10
c0000f90:	83 f8 ff             	cmp    eax,0xffffffff
c0000f93:	89 c6                	mov    esi,eax
c0000f95:	74 e3                	je     c0000f7a <sYSMALLOc+0x77>
c0000f97:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f9b:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f9e:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000fa4:	39 c2                	cmp    edx,eax
c0000fa6:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000fac:	75 11                	jne    c0000fbf <sYSMALLOc+0xbc>
c0000fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb2:	01 e8                	add    eax,ebp
c0000fb4:	83 c8 01             	or     eax,0x1
c0000fb7:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000fba:	e9 93 00 00 00       	jmp    c0001052 <sYSMALLOc+0x14f>
c0000fbf:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000fc5:	a8 01                	test   al,0x1
c0000fc7:	0f 84 73 01 00 00    	je     c0001140 <sYSMALLOc+0x23d>
c0000fcd:	85 ed                	test   ebp,ebp
c0000fcf:	74 12                	je     c0000fe3 <sYSMALLOc+0xe0>
c0000fd1:	39 f2                	cmp    edx,esi
c0000fd3:	76 0e                	jbe    c0000fe3 <sYSMALLOc+0xe0>
c0000fd5:	83 e0 fe             	and    eax,0xfffffffe
c0000fd8:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000fde:	e9 5d 01 00 00       	jmp    c0001140 <sYSMALLOc+0x23d>
c0000fe3:	85 ed                	test   ebp,ebp
c0000fe5:	74 0c                	je     c0000ff3 <sYSMALLOc+0xf0>
c0000fe7:	89 f0                	mov    eax,esi
c0000fe9:	29 d0                	sub    eax,edx
c0000feb:	01 c1                	add    ecx,eax
c0000fed:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000ff3:	89 f2                	mov    edx,esi
c0000ff5:	83 e2 07             	and    edx,0x7
c0000ff8:	0f 84 b1 00 00 00    	je     c00010af <sYSMALLOc+0x1ac>
c0000ffe:	b8 08 00 00 00       	mov    eax,0x8
c0001003:	29 d0                	sub    eax,edx
c0001005:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001008:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000100c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001010:	01 e8                	add    eax,ebp
c0001012:	83 ec 0c             	sub    esp,0xc
c0001015:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001018:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000101c:	01 f2                	add    edx,esi
c000101e:	29 d0                	sub    eax,edx
c0001020:	01 d1                	add    ecx,edx
c0001022:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0001026:	01 c1                	add    ecx,eax
c0001028:	51                   	push   ecx
c0001029:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000102d:	e8 80 69 00 00       	call   c00079b2 <sbrk>
c0001032:	83 c4 10             	add    esp,0x10
c0001035:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0001039:	83 f8 ff             	cmp    eax,0xffffffff
c000103c:	75 7c                	jne    c00010ba <sYSMALLOc+0x1b7>
c000103e:	83 ec 0c             	sub    esp,0xc
c0001041:	6a 00                	push   0x0
c0001043:	e8 6a 69 00 00       	call   c00079b2 <sbrk>
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	31 c9                	xor    ecx,ecx
c000104d:	83 f8 ff             	cmp    eax,0xffffffff
c0001050:	75 7e                	jne    c00010d0 <sYSMALLOc+0x1cd>
c0001052:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001058:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000105e:	73 06                	jae    c0001066 <sYSMALLOc+0x163>
c0001060:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001066:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106c:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001072:	73 06                	jae    c000107a <sYSMALLOc+0x177>
c0001074:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000107d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001080:	83 e2 fc             	and    edx,0xfffffffc
c0001083:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0001087:	0f 87 ed fe ff ff    	ja     c0000f7a <sYSMALLOc+0x77>
c000108d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001091:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001094:	29 fa                	sub    edx,edi
c0001096:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001099:	89 fb                	mov    ebx,edi
c000109b:	83 ca 01             	or     edx,0x1
c000109e:	83 cb 01             	or     ebx,0x1
c00010a1:	83 c0 08             	add    eax,0x8
c00010a4:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010aa:	e9 b5 00 00 00       	jmp    c0001164 <sYSMALLOc+0x261>
c00010af:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010b3:	31 c0                	xor    eax,eax
c00010b5:	e9 52 ff ff ff       	jmp    c000100c <sYSMALLOc+0x109>
c00010ba:	39 c6                	cmp    esi,eax
c00010bc:	76 12                	jbe    c00010d0 <sYSMALLOc+0x1cd>
c00010be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00010c2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c00010c9:	01 f0                	add    eax,esi
c00010cb:	e9 7b ff ff ff       	jmp    c000104b <sYSMALLOc+0x148>
c00010d0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00010d4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00010d7:	29 f0                	sub    eax,esi
c00010d9:	01 c8                	add    eax,ecx
c00010db:	83 c8 01             	or     eax,0x1
c00010de:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c00010e1:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c00010e7:	85 ed                	test   ebp,ebp
c00010e9:	0f 84 63 ff ff ff    	je     c0001052 <sYSMALLOc+0x14f>
c00010ef:	8d 45 f4             	lea    eax,[ebp-0xc]
c00010f2:	83 e0 f8             	and    eax,0xfffffff8
c00010f5:	89 c2                	mov    edx,eax
c00010f7:	83 ca 01             	or     edx,0x1
c00010fa:	83 f8 0f             	cmp    eax,0xf
c00010fd:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001100:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001108:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001110:	0f 86 3c ff ff ff    	jbe    c0001052 <sYSMALLOc+0x14f>
c0001116:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000111c:	83 ec 0c             	sub    esp,0xc
c000111f:	83 c7 08             	add    edi,0x8
c0001122:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000112c:	57                   	push   edi
c000112d:	e8 dc fc ff ff       	call   c0000e0e <dlfree>
c0001132:	83 c4 10             	add    esp,0x10
c0001135:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000113b:	e9 12 ff ff ff       	jmp    c0001052 <sYSMALLOc+0x14f>
c0001140:	83 ec 0c             	sub    esp,0xc
c0001143:	6a 00                	push   0x0
c0001145:	e8 68 68 00 00       	call   c00079b2 <sbrk>
c000114a:	89 c2                	mov    edx,eax
c000114c:	29 f2                	sub    edx,esi
c000114e:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001152:	83 c4 10             	add    esp,0x10
c0001155:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000115b:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000115f:	e9 e7 fe ff ff       	jmp    c000104b <sYSMALLOc+0x148>
c0001164:	83 c4 2c             	add    esp,0x2c
c0001167:	5b                   	pop    ebx
c0001168:	5e                   	pop    esi
c0001169:	5f                   	pop    edi
c000116a:	5d                   	pop    ebp
c000116b:	c3                   	ret    

c000116c <dlmalloc>:
c000116c:	55                   	push   ebp
c000116d:	57                   	push   edi
c000116e:	56                   	push   esi
c000116f:	53                   	push   ebx
c0001170:	83 ec 1c             	sub    esp,0x1c
c0001173:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001177:	83 f8 df             	cmp    eax,0xffffffdf
c000117a:	0f 87 70 03 00 00    	ja     c00014f0 <dlmalloc+0x384>
c0001180:	83 c0 0b             	add    eax,0xb
c0001183:	be 10 00 00 00       	mov    esi,0x10
c0001188:	83 f8 0f             	cmp    eax,0xf
c000118b:	76 05                	jbe    c0001192 <dlmalloc+0x26>
c000118d:	83 e0 f8             	and    eax,0xfffffff8
c0001190:	89 c6                	mov    esi,eax
c0001192:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c0001198:	f7 c7 01 00 00 00    	test   edi,0x1
c000119e:	75 17                	jne    c00011b7 <dlmalloc+0x4b>
c00011a0:	85 ff                	test   edi,edi
c00011a2:	0f 85 05 03 00 00    	jne    c00014ad <dlmalloc+0x341>
c00011a8:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00011ad:	e8 75 fb ff ff       	call   c0000d27 <malloc_consolidate>
c00011b2:	e9 f6 02 00 00       	jmp    c00014ad <dlmalloc+0x341>
c00011b7:	39 f7                	cmp    edi,esi
c00011b9:	72 1f                	jb     c00011da <dlmalloc+0x6e>
c00011bb:	89 f2                	mov    edx,esi
c00011bd:	c1 ea 03             	shr    edx,0x3
c00011c0:	83 ea 02             	sub    edx,0x2
c00011c3:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c00011ca:	85 c0                	test   eax,eax
c00011cc:	74 0c                	je     c00011da <dlmalloc+0x6e>
c00011ce:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00011d1:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c00011d8:	eb 30                	jmp    c000120a <dlmalloc+0x9e>
c00011da:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e0:	89 f0                	mov    eax,esi
c00011e2:	77 2e                	ja     c0001212 <dlmalloc+0xa6>
c00011e4:	c1 e8 03             	shr    eax,0x3
c00011e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011eb:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c00011f2:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011f5:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011f8:	39 c3                	cmp    ebx,eax
c00011fa:	74 2e                	je     c000122a <dlmalloc+0xbe>
c00011fc:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011ff:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001204:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001207:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000120a:	83 c0 08             	add    eax,0x8
c000120d:	e9 e0 02 00 00       	jmp    c00014f2 <dlmalloc+0x386>
c0001212:	e8 8c fa ff ff       	call   c0000ca3 <largebin_index>
c0001217:	83 e7 02             	and    edi,0x2
c000121a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000121e:	74 0a                	je     c000122a <dlmalloc+0xbe>
c0001220:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001225:	e8 fd fa ff ff       	call   c0000d27 <malloc_consolidate>
c000122a:	8d 46 10             	lea    eax,[esi+0x10]
c000122d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001231:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c0001237:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c000123d:	0f 84 13 01 00 00    	je     c0001356 <dlmalloc+0x1ea>
c0001243:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001246:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001249:	83 e7 fc             	and    edi,0xfffffffc
c000124c:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001252:	77 4c                	ja     c00012a0 <dlmalloc+0x134>
c0001254:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c0001259:	75 45                	jne    c00012a0 <dlmalloc+0x134>
c000125b:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c0001261:	75 3d                	jne    c00012a0 <dlmalloc+0x134>
c0001263:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001267:	73 37                	jae    c00012a0 <dlmalloc+0x134>
c0001269:	8d 04 33             	lea    eax,[ebx+esi*1]
c000126c:	89 fa                	mov    edx,edi
c000126e:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c0001273:	29 f2                	sub    edx,esi
c0001275:	83 ce 01             	or     esi,0x1
c0001278:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c000127d:	89 d1                	mov    ecx,edx
c000127f:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c0001284:	83 c9 01             	or     ecx,0x1
c0001287:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c000128e:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c0001295:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001298:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000129b:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000129e:	eb 15                	jmp    c00012b5 <dlmalloc+0x149>
c00012a0:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00012a5:	39 fe                	cmp    esi,edi
c00012a7:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00012ae:	75 0d                	jne    c00012bd <dlmalloc+0x151>
c00012b0:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00012b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00012b8:	e9 35 02 00 00       	jmp    c00014f2 <dlmalloc+0x386>
c00012bd:	81 ff ff 00 00 00    	cmp    edi,0xff
c00012c3:	89 f8                	mov    eax,edi
c00012c5:	77 19                	ja     c00012e0 <dlmalloc+0x174>
c00012c7:	c1 e8 03             	shr    eax,0x3
c00012ca:	8d 14 00             	lea    edx,[eax+eax*1]
c00012cd:	83 c2 0d             	add    edx,0xd
c00012d0:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c00012d7:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c00012de:	eb 46                	jmp    c0001326 <dlmalloc+0x1ba>
c00012e0:	e8 be f9 ff ff       	call   c0000ca3 <largebin_index>
c00012e5:	8d 14 00             	lea    edx,[eax+eax*1]
c00012e8:	83 c2 0d             	add    edx,0xd
c00012eb:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c00012f2:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c00012f9:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012fc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001300:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001304:	89 d5                	mov    ebp,edx
c0001306:	74 1e                	je     c0001326 <dlmalloc+0x1ba>
c0001308:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000130b:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000130e:	77 12                	ja     c0001322 <dlmalloc+0x1b6>
c0001310:	83 cf 01             	or     edi,0x1
c0001313:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001316:	76 05                	jbe    c000131d <dlmalloc+0x1b1>
c0001318:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000131b:	eb f6                	jmp    c0001313 <dlmalloc+0x1a7>
c000131d:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001320:	eb 04                	jmp    c0001326 <dlmalloc+0x1ba>
c0001322:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001326:	89 c7                	mov    edi,eax
c0001328:	88 c1                	mov    cl,al
c000132a:	c1 ff 05             	sar    edi,0x5
c000132d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001331:	bf 01 00 00 00       	mov    edi,0x1
c0001336:	d3 e7                	shl    edi,cl
c0001338:	89 f8                	mov    eax,edi
c000133a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000133e:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c0001345:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001348:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000134b:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000134e:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001351:	e9 db fe ff ff       	jmp    c0001231 <dlmalloc+0xc5>
c0001356:	81 fe ff 00 00 00    	cmp    esi,0xff
c000135c:	76 78                	jbe    c00013d6 <dlmalloc+0x26a>
c000135e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001362:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c0001369:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000136f:	39 ca                	cmp    edx,ecx
c0001371:	74 63                	je     c00013d6 <dlmalloc+0x26a>
c0001373:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001376:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001379:	83 e3 fc             	and    ebx,0xfffffffc
c000137c:	39 de                	cmp    esi,ebx
c000137e:	77 52                	ja     c00013d2 <dlmalloc+0x266>
c0001380:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001383:	89 df                	mov    edi,ebx
c0001385:	01 d3                	add    ebx,edx
c0001387:	29 f7                	sub    edi,esi
c0001389:	83 ff 0f             	cmp    edi,0xf
c000138c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000138f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001392:	8d 42 08             	lea    eax,[edx+0x8]
c0001395:	77 09                	ja     c00013a0 <dlmalloc+0x234>
c0001397:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000139b:	e9 52 01 00 00       	jmp    c00014f2 <dlmalloc+0x386>
c00013a0:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00013a3:	83 ce 01             	or     esi,0x1
c00013a6:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c00013ac:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c00013b2:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c00013b9:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c00013c0:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00013c3:	89 fa                	mov    edx,edi
c00013c5:	83 ca 01             	or     edx,0x1
c00013c8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00013cb:	89 3b                	mov    DWORD PTR [ebx],edi
c00013cd:	e9 20 01 00 00       	jmp    c00014f2 <dlmalloc+0x386>
c00013d2:	89 c2                	mov    edx,eax
c00013d4:	eb 99                	jmp    c000136f <dlmalloc+0x203>
c00013d6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00013da:	b8 01 00 00 00       	mov    eax,0x1
c00013df:	41                   	inc    ecx
c00013e0:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c00013e7:	89 cb                	mov    ebx,ecx
c00013e9:	c1 eb 05             	shr    ebx,0x5
c00013ec:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c00013f3:	d3 e0                	shl    eax,cl
c00013f5:	39 f8                	cmp    eax,edi
c00013f7:	77 04                	ja     c00013fd <dlmalloc+0x291>
c00013f9:	85 c0                	test   eax,eax
c00013fb:	75 26                	jne    c0001423 <dlmalloc+0x2b7>
c00013fd:	43                   	inc    ebx
c00013fe:	83 fb 02             	cmp    ebx,0x2
c0001401:	0f 87 a6 00 00 00    	ja     c00014ad <dlmalloc+0x341>
c0001407:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000140e:	85 ff                	test   edi,edi
c0001410:	74 eb                	je     c00013fd <dlmalloc+0x291>
c0001412:	89 d8                	mov    eax,ebx
c0001414:	c1 e0 06             	shl    eax,0x6
c0001417:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c000141e:	b8 01 00 00 00       	mov    eax,0x1
c0001423:	85 f8                	test   eax,edi
c0001425:	75 07                	jne    c000142e <dlmalloc+0x2c2>
c0001427:	83 c2 08             	add    edx,0x8
c000142a:	01 c0                	add    eax,eax
c000142c:	eb f5                	jmp    c0001423 <dlmalloc+0x2b7>
c000142e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001431:	39 ca                	cmp    edx,ecx
c0001433:	75 14                	jne    c0001449 <dlmalloc+0x2dd>
c0001435:	89 c1                	mov    ecx,eax
c0001437:	83 c2 08             	add    edx,0x8
c000143a:	f7 d1                	not    ecx
c000143c:	01 c0                	add    eax,eax
c000143e:	21 cf                	and    edi,ecx
c0001440:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c0001447:	eb ac                	jmp    c00013f5 <dlmalloc+0x289>
c0001449:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000144c:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000144f:	83 e0 fc             	and    eax,0xfffffffc
c0001452:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001455:	89 c3                	mov    ebx,eax
c0001457:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000145a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000145d:	29 f3                	sub    ebx,esi
c000145f:	8d 41 08             	lea    eax,[ecx+0x8]
c0001462:	83 fb 0f             	cmp    ebx,0xf
c0001465:	77 09                	ja     c0001470 <dlmalloc+0x304>
c0001467:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000146b:	e9 82 00 00 00       	jmp    c00014f2 <dlmalloc+0x386>
c0001470:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001473:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001479:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c000147f:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c0001485:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c000148c:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c0001493:	77 06                	ja     c000149b <dlmalloc+0x32f>
c0001495:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c000149b:	83 ce 01             	or     esi,0x1
c000149e:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00014a1:	89 d9                	mov    ecx,ebx
c00014a3:	83 c9 01             	or     ecx,0x1
c00014a6:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00014a9:	89 1a                	mov    DWORD PTR [edx],ebx
c00014ab:	eb 45                	jmp    c00014f2 <dlmalloc+0x386>
c00014ad:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c00014b2:	8d 4e 10             	lea    ecx,[esi+0x10]
c00014b5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00014b8:	83 e2 fc             	and    edx,0xfffffffc
c00014bb:	39 d1                	cmp    ecx,edx
c00014bd:	77 1e                	ja     c00014dd <dlmalloc+0x371>
c00014bf:	89 f3                	mov    ebx,esi
c00014c1:	29 f2                	sub    edx,esi
c00014c3:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00014c6:	83 cb 01             	or     ebx,0x1
c00014c9:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c00014cf:	83 ca 01             	or     edx,0x1
c00014d2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014d8:	e9 2d fd ff ff       	jmp    c000120a <dlmalloc+0x9e>
c00014dd:	83 c4 1c             	add    esp,0x1c
c00014e0:	89 f0                	mov    eax,esi
c00014e2:	5b                   	pop    ebx
c00014e3:	ba 00 41 02 c0       	mov    edx,0xc0024100
c00014e8:	5e                   	pop    esi
c00014e9:	5f                   	pop    edi
c00014ea:	5d                   	pop    ebp
c00014eb:	e9 13 fa ff ff       	jmp    c0000f03 <sYSMALLOc>
c00014f0:	31 c0                	xor    eax,eax
c00014f2:	83 c4 1c             	add    esp,0x1c
c00014f5:	5b                   	pop    ebx
c00014f6:	5e                   	pop    esi
c00014f7:	5f                   	pop    edi
c00014f8:	5d                   	pop    ebp
c00014f9:	c3                   	ret    

c00014fa <iALLOc>:
c00014fa:	55                   	push   ebp
c00014fb:	89 c5                	mov    ebp,eax
c00014fd:	57                   	push   edi
c00014fe:	56                   	push   esi
c00014ff:	53                   	push   ebx
c0001500:	83 ec 2c             	sub    esp,0x2c
c0001503:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001507:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000150b:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001512:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001516:	75 12                	jne    c000152a <iALLOc+0x30>
c0001518:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000151c:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001521:	e8 01 f8 ff ff       	call   c0000d27 <malloc_consolidate>
c0001526:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000152a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000152f:	74 12                	je     c0001543 <iALLOc+0x49>
c0001531:	85 ed                	test   ebp,ebp
c0001533:	0f 84 64 01 00 00    	je     c000169d <iALLOc+0x1a3>
c0001539:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001541:	eb 33                	jmp    c0001576 <iALLOc+0x7c>
c0001543:	85 ed                	test   ebp,ebp
c0001545:	75 14                	jne    c000155b <iALLOc+0x61>
c0001547:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000154f:	83 c4 2c             	add    esp,0x2c
c0001552:	5b                   	pop    ebx
c0001553:	5e                   	pop    esi
c0001554:	5f                   	pop    edi
c0001555:	5d                   	pop    ebp
c0001556:	e9 11 fc ff ff       	jmp    c000116c <dlmalloc>
c000155b:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001563:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000156a:	83 f8 0f             	cmp    eax,0xf
c000156d:	76 07                	jbe    c0001576 <iALLOc+0x7c>
c000156f:	83 e0 f8             	and    eax,0xfffffff8
c0001572:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001576:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000157b:	75 09                	jne    c0001586 <iALLOc+0x8c>
c000157d:	89 d0                	mov    eax,edx
c000157f:	31 f6                	xor    esi,esi
c0001581:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001584:	eb 3b                	jmp    c00015c1 <iALLOc+0xc7>
c0001586:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000158e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001590:	83 c0 0b             	add    eax,0xb
c0001593:	83 f8 0f             	cmp    eax,0xf
c0001596:	76 07                	jbe    c000159f <iALLOc+0xa5>
c0001598:	83 e0 f8             	and    eax,0xfffffff8
c000159b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000159f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00015a3:	0f af f5             	imul   esi,ebp
c00015a6:	eb 25                	jmp    c00015cd <iALLOc+0xd3>
c00015a8:	8b 18                	mov    ebx,DWORD PTR [eax]
c00015aa:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00015ad:	bb 10 00 00 00       	mov    ebx,0x10
c00015b2:	83 f9 0f             	cmp    ecx,0xf
c00015b5:	76 05                	jbe    c00015bc <iALLOc+0xc2>
c00015b7:	83 e1 f8             	and    ecx,0xfffffff8
c00015ba:	89 cb                	mov    ebx,ecx
c00015bc:	01 de                	add    esi,ebx
c00015be:	83 c0 04             	add    eax,0x4
c00015c1:	39 c7                	cmp    edi,eax
c00015c3:	75 e3                	jne    c00015a8 <iALLOc+0xae>
c00015c5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00015cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00015d1:	83 ec 0c             	sub    esp,0xc
c00015d4:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c00015da:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c00015e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00015e8:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00015ec:	50                   	push   eax
c00015ed:	e8 7a fb ff ff       	call   c000116c <dlmalloc>
c00015f2:	83 c4 10             	add    esp,0x10
c00015f5:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c00015fb:	85 c0                	test   eax,eax
c00015fd:	0f 84 92 00 00 00    	je     c0001695 <iALLOc+0x19b>
c0001603:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001606:	8d 78 f8             	lea    edi,[eax-0x8]
c0001609:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000160d:	83 e3 fc             	and    ebx,0xfffffffc
c0001610:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001615:	74 1e                	je     c0001635 <iALLOc+0x13b>
c0001617:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000161b:	89 d9                	mov    ecx,ebx
c000161d:	52                   	push   edx
c000161e:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001622:	83 e9 04             	sub    ecx,0x4
c0001625:	51                   	push   ecx
c0001626:	6a 00                	push   0x0
c0001628:	50                   	push   eax
c0001629:	e8 52 ef ff ff       	call   c0000580 <memset>
c000162e:	83 c4 10             	add    esp,0x10
c0001631:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001635:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000163a:	75 14                	jne    c0001650 <iALLOc+0x156>
c000163c:	8d 04 37             	lea    eax,[edi+esi*1]
c000163f:	29 f3                	sub    ebx,esi
c0001641:	8d 48 08             	lea    ecx,[eax+0x8]
c0001644:	83 cb 01             	or     ebx,0x1
c0001647:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000164a:	89 f3                	mov    ebx,esi
c000164c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001650:	31 c0                	xor    eax,eax
c0001652:	4d                   	dec    ebp
c0001653:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001657:	8d 4f 08             	lea    ecx,[edi+0x8]
c000165a:	39 c5                	cmp    ebp,eax
c000165c:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000165f:	74 2c                	je     c000168d <iALLOc+0x193>
c0001661:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001665:	85 c9                	test   ecx,ecx
c0001667:	75 15                	jne    c000167e <iALLOc+0x184>
c0001669:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000166c:	8d 71 0b             	lea    esi,[ecx+0xb]
c000166f:	b9 10 00 00 00       	mov    ecx,0x10
c0001674:	83 fe 0f             	cmp    esi,0xf
c0001677:	76 05                	jbe    c000167e <iALLOc+0x184>
c0001679:	83 e6 f8             	and    esi,0xfffffff8
c000167c:	89 f1                	mov    ecx,esi
c000167e:	89 ce                	mov    esi,ecx
c0001680:	29 cb                	sub    ebx,ecx
c0001682:	83 ce 01             	or     esi,0x1
c0001685:	40                   	inc    eax
c0001686:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001689:	01 cf                	add    edi,ecx
c000168b:	eb c6                	jmp    c0001653 <iALLOc+0x159>
c000168d:	83 cb 01             	or     ebx,0x1
c0001690:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001693:	eb 08                	jmp    c000169d <iALLOc+0x1a3>
c0001695:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000169d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a1:	83 c4 2c             	add    esp,0x2c
c00016a4:	5b                   	pop    ebx
c00016a5:	5e                   	pop    esi
c00016a6:	5f                   	pop    edi
c00016a7:	5d                   	pop    ebp
c00016a8:	c3                   	ret    

c00016a9 <dlrealloc>:
c00016a9:	55                   	push   ebp
c00016aa:	57                   	push   edi
c00016ab:	56                   	push   esi
c00016ac:	53                   	push   ebx
c00016ad:	83 ec 1c             	sub    esp,0x1c
c00016b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00016b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00016b8:	85 db                	test   ebx,ebx
c00016ba:	75 10                	jne    c00016cc <dlrealloc+0x23>
c00016bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00016c0:	83 c4 1c             	add    esp,0x1c
c00016c3:	5b                   	pop    ebx
c00016c4:	5e                   	pop    esi
c00016c5:	5f                   	pop    edi
c00016c6:	5d                   	pop    ebp
c00016c7:	e9 a0 fa ff ff       	jmp    c000116c <dlmalloc>
c00016cc:	83 f8 df             	cmp    eax,0xffffffdf
c00016cf:	76 07                	jbe    c00016d8 <dlrealloc+0x2f>
c00016d1:	31 db                	xor    ebx,ebx
c00016d3:	e9 6b 01 00 00       	jmp    c0001843 <dlrealloc+0x19a>
c00016d8:	83 c0 0b             	add    eax,0xb
c00016db:	bd 10 00 00 00       	mov    ebp,0x10
c00016e0:	83 f8 0f             	cmp    eax,0xf
c00016e3:	76 05                	jbe    c00016ea <dlrealloc+0x41>
c00016e5:	83 e0 f8             	and    eax,0xfffffff8
c00016e8:	89 c5                	mov    ebp,eax
c00016ea:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016ed:	8d 7b f8             	lea    edi,[ebx-0x8]
c00016f0:	89 ce                	mov    esi,ecx
c00016f2:	83 e6 fc             	and    esi,0xfffffffc
c00016f5:	f6 c1 02             	test   cl,0x2
c00016f8:	75 d7                	jne    c00016d1 <dlrealloc+0x28>
c00016fa:	39 f5                	cmp    ebp,esi
c00016fc:	0f 86 04 01 00 00    	jbe    c0001806 <dlrealloc+0x15d>
c0001702:	8d 14 37             	lea    edx,[edi+esi*1]
c0001705:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c000170b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000170e:	75 33                	jne    c0001743 <dlrealloc+0x9a>
c0001710:	83 e0 fc             	and    eax,0xfffffffc
c0001713:	01 f0                	add    eax,esi
c0001715:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001719:	8d 45 10             	lea    eax,[ebp+0x10]
c000171c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001720:	77 49                	ja     c000176b <dlrealloc+0xc2>
c0001722:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001726:	83 e1 01             	and    ecx,0x1
c0001729:	01 ef                	add    edi,ebp
c000172b:	09 e9                	or     ecx,ebp
c000172d:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c0001730:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c0001736:	29 e8                	sub    eax,ebp
c0001738:	83 c8 01             	or     eax,0x1
c000173b:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000173e:	e9 00 01 00 00       	jmp    c0001843 <dlrealloc+0x19a>
c0001743:	89 c1                	mov    ecx,eax
c0001745:	83 e1 fe             	and    ecx,0xfffffffe
c0001748:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000174d:	75 1c                	jne    c000176b <dlrealloc+0xc2>
c000174f:	83 e0 fc             	and    eax,0xfffffffc
c0001752:	01 f0                	add    eax,esi
c0001754:	39 c5                	cmp    ebp,eax
c0001756:	77 13                	ja     c000176b <dlrealloc+0xc2>
c0001758:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000175b:	89 c6                	mov    esi,eax
c000175d:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0001760:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001763:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001766:	e9 9b 00 00 00       	jmp    c0001806 <dlrealloc+0x15d>
c000176b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000176f:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001772:	83 ec 0c             	sub    esp,0xc
c0001775:	50                   	push   eax
c0001776:	e8 f1 f9 ff ff       	call   c000116c <dlmalloc>
c000177b:	83 c4 10             	add    esp,0x10
c000177e:	85 c0                	test   eax,eax
c0001780:	0f 84 4b ff ff ff    	je     c00016d1 <dlrealloc+0x28>
c0001786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000178a:	8d 48 f8             	lea    ecx,[eax-0x8]
c000178d:	39 ca                	cmp    edx,ecx
c000178f:	75 0a                	jne    c000179b <dlrealloc+0xf2>
c0001791:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001794:	83 e0 fc             	and    eax,0xfffffffc
c0001797:	01 c6                	add    esi,eax
c0001799:	eb 6b                	jmp    c0001806 <dlrealloc+0x15d>
c000179b:	8d 4e fc             	lea    ecx,[esi-0x4]
c000179e:	83 f9 27             	cmp    ecx,0x27
c00017a1:	76 08                	jbe    c00017ab <dlrealloc+0x102>
c00017a3:	89 de                	mov    esi,ebx
c00017a5:	89 c7                	mov    edi,eax
c00017a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00017a9:	eb 43                	jmp    c00017ee <dlrealloc+0x145>
c00017ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00017ad:	83 f9 13             	cmp    ecx,0x13
c00017b0:	89 10                	mov    DWORD PTR [eax],edx
c00017b2:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00017b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00017b8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00017bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00017be:	76 2e                	jbe    c00017ee <dlrealloc+0x145>
c00017c0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00017c3:	83 f9 1b             	cmp    ecx,0x1b
c00017c6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00017c9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00017cc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00017cf:	76 1d                	jbe    c00017ee <dlrealloc+0x145>
c00017d1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00017d4:	83 f9 23             	cmp    ecx,0x23
c00017d7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00017da:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00017dd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00017e0:	76 0c                	jbe    c00017ee <dlrealloc+0x145>
c00017e2:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00017e5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00017e8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00017eb:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00017ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f2:	83 ec 0c             	sub    esp,0xc
c00017f5:	53                   	push   ebx
c00017f6:	e8 13 f6 ff ff       	call   c0000e0e <dlfree>
c00017fb:	83 c4 10             	add    esp,0x10
c00017fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001802:	89 c3                	mov    ebx,eax
c0001804:	eb 3d                	jmp    c0001843 <dlrealloc+0x19a>
c0001806:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001809:	8d 04 37             	lea    eax,[edi+esi*1]
c000180c:	89 f2                	mov    edx,esi
c000180e:	29 ea                	sub    edx,ebp
c0001810:	83 e1 01             	and    ecx,0x1
c0001813:	83 fa 0f             	cmp    edx,0xf
c0001816:	77 0b                	ja     c0001823 <dlrealloc+0x17a>
c0001818:	09 ce                	or     esi,ecx
c000181a:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000181d:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001821:	eb 20                	jmp    c0001843 <dlrealloc+0x19a>
c0001823:	01 ef                	add    edi,ebp
c0001825:	83 ca 01             	or     edx,0x1
c0001828:	09 cd                	or     ebp,ecx
c000182a:	83 ec 0c             	sub    esp,0xc
c000182d:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c0001830:	83 c7 08             	add    edi,0x8
c0001833:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001836:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000183a:	57                   	push   edi
c000183b:	e8 ce f5 ff ff       	call   c0000e0e <dlfree>
c0001840:	83 c4 10             	add    esp,0x10
c0001843:	83 c4 1c             	add    esp,0x1c
c0001846:	89 d8                	mov    eax,ebx
c0001848:	5b                   	pop    ebx
c0001849:	5e                   	pop    esi
c000184a:	5f                   	pop    edi
c000184b:	5d                   	pop    ebp
c000184c:	c3                   	ret    

c000184d <dlmemalign>:
c000184d:	55                   	push   ebp
c000184e:	57                   	push   edi
c000184f:	56                   	push   esi
c0001850:	53                   	push   ebx
c0001851:	83 ec 0c             	sub    esp,0xc
c0001854:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001858:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000185c:	83 fa 08             	cmp    edx,0x8
c000185f:	77 10                	ja     c0001871 <dlmemalign+0x24>
c0001861:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001865:	83 c4 0c             	add    esp,0xc
c0001868:	5b                   	pop    ebx
c0001869:	5e                   	pop    esi
c000186a:	5f                   	pop    edi
c000186b:	5d                   	pop    ebp
c000186c:	e9 fb f8 ff ff       	jmp    c000116c <dlmalloc>
c0001871:	83 fa 0f             	cmp    edx,0xf
c0001874:	bf 10 00 00 00       	mov    edi,0x10
c0001879:	76 13                	jbe    c000188e <dlmemalign+0x41>
c000187b:	8d 4a ff             	lea    ecx,[edx-0x1]
c000187e:	85 d1                	test   ecx,edx
c0001880:	75 04                	jne    c0001886 <dlmemalign+0x39>
c0001882:	89 d7                	mov    edi,edx
c0001884:	eb 08                	jmp    c000188e <dlmemalign+0x41>
c0001886:	39 d7                	cmp    edi,edx
c0001888:	73 04                	jae    c000188e <dlmemalign+0x41>
c000188a:	01 ff                	add    edi,edi
c000188c:	eb f8                	jmp    c0001886 <dlmemalign+0x39>
c000188e:	83 f8 df             	cmp    eax,0xffffffdf
c0001891:	76 07                	jbe    c000189a <dlmemalign+0x4d>
c0001893:	31 c0                	xor    eax,eax
c0001895:	e9 ce 00 00 00       	jmp    c0001968 <dlmemalign+0x11b>
c000189a:	83 c0 0b             	add    eax,0xb
c000189d:	bd 10 00 00 00       	mov    ebp,0x10
c00018a2:	83 f8 0f             	cmp    eax,0xf
c00018a5:	76 05                	jbe    c00018ac <dlmemalign+0x5f>
c00018a7:	83 e0 f8             	and    eax,0xfffffff8
c00018aa:	89 c5                	mov    ebp,eax
c00018ac:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00018b0:	83 ec 0c             	sub    esp,0xc
c00018b3:	50                   	push   eax
c00018b4:	e8 b3 f8 ff ff       	call   c000116c <dlmalloc>
c00018b9:	83 c4 10             	add    esp,0x10
c00018bc:	85 c0                	test   eax,eax
c00018be:	89 c1                	mov    ecx,eax
c00018c0:	74 d1                	je     c0001893 <dlmemalign+0x46>
c00018c2:	8d 70 f8             	lea    esi,[eax-0x8]
c00018c5:	31 d2                	xor    edx,edx
c00018c7:	f7 f7                	div    edi
c00018c9:	85 d2                	test   edx,edx
c00018cb:	74 62                	je     c000192f <dlmemalign+0xe2>
c00018cd:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00018d1:	89 f8                	mov    eax,edi
c00018d3:	f7 d8                	neg    eax
c00018d5:	21 c3                	and    ebx,eax
c00018d7:	83 eb 08             	sub    ebx,0x8
c00018da:	89 d8                	mov    eax,ebx
c00018dc:	29 f0                	sub    eax,esi
c00018de:	83 f8 0f             	cmp    eax,0xf
c00018e1:	77 02                	ja     c00018e5 <dlmemalign+0x98>
c00018e3:	01 fb                	add    ebx,edi
c00018e5:	89 d8                	mov    eax,ebx
c00018e7:	29 f0                	sub    eax,esi
c00018e9:	89 c6                	mov    esi,eax
c00018eb:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018ee:	89 c2                	mov    edx,eax
c00018f0:	83 e2 fc             	and    edx,0xfffffffc
c00018f3:	29 f2                	sub    edx,esi
c00018f5:	a8 02                	test   al,0x2
c00018f7:	74 10                	je     c0001909 <dlmemalign+0xbc>
c00018f9:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018fc:	83 ca 02             	or     edx,0x2
c00018ff:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001902:	8d 43 08             	lea    eax,[ebx+0x8]
c0001905:	89 33                	mov    DWORD PTR [ebx],esi
c0001907:	eb 5f                	jmp    c0001968 <dlmemalign+0x11b>
c0001909:	89 d0                	mov    eax,edx
c000190b:	83 ec 0c             	sub    esp,0xc
c000190e:	83 c8 01             	or     eax,0x1
c0001911:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001914:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001919:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000191c:	83 e0 01             	and    eax,0x1
c000191f:	09 f0                	or     eax,esi
c0001921:	89 de                	mov    esi,ebx
c0001923:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001926:	51                   	push   ecx
c0001927:	e8 e2 f4 ff ff       	call   c0000e0e <dlfree>
c000192c:	83 c4 10             	add    esp,0x10
c000192f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001932:	a8 02                	test   al,0x2
c0001934:	75 2f                	jne    c0001965 <dlmemalign+0x118>
c0001936:	8d 55 10             	lea    edx,[ebp+0x10]
c0001939:	83 e0 fc             	and    eax,0xfffffffc
c000193c:	39 c2                	cmp    edx,eax
c000193e:	73 25                	jae    c0001965 <dlmemalign+0x118>
c0001940:	29 e8                	sub    eax,ebp
c0001942:	83 ec 0c             	sub    esp,0xc
c0001945:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001948:	83 c8 01             	or     eax,0x1
c000194b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000194e:	83 c2 08             	add    edx,0x8
c0001951:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001954:	83 e0 01             	and    eax,0x1
c0001957:	09 c5                	or     ebp,eax
c0001959:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000195c:	52                   	push   edx
c000195d:	e8 ac f4 ff ff       	call   c0000e0e <dlfree>
c0001962:	83 c4 10             	add    esp,0x10
c0001965:	8d 46 08             	lea    eax,[esi+0x8]
c0001968:	83 c4 0c             	add    esp,0xc
c000196b:	5b                   	pop    ebx
c000196c:	5e                   	pop    esi
c000196d:	5f                   	pop    edi
c000196e:	5d                   	pop    ebp
c000196f:	c3                   	ret    

c0001970 <dlcalloc>:
c0001970:	53                   	push   ebx
c0001971:	83 ec 14             	sub    esp,0x14
c0001974:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001978:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000197d:	50                   	push   eax
c000197e:	e8 e9 f7 ff ff       	call   c000116c <dlmalloc>
c0001983:	83 c4 10             	add    esp,0x10
c0001986:	85 c0                	test   eax,eax
c0001988:	89 c3                	mov    ebx,eax
c000198a:	74 77                	je     c0001a03 <dlcalloc+0x93>
c000198c:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000198f:	89 d0                	mov    eax,edx
c0001991:	83 e0 fc             	and    eax,0xfffffffc
c0001994:	f6 c2 02             	test   dl,0x2
c0001997:	75 5a                	jne    c00019f3 <dlcalloc+0x83>
c0001999:	83 e8 04             	sub    eax,0x4
c000199c:	83 f8 27             	cmp    eax,0x27
c000199f:	76 03                	jbe    c00019a4 <dlcalloc+0x34>
c00019a1:	51                   	push   ecx
c00019a2:	eb 53                	jmp    c00019f7 <dlcalloc+0x87>
c00019a4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00019aa:	83 f8 13             	cmp    eax,0x13
c00019ad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00019b4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00019bb:	76 46                	jbe    c0001a03 <dlcalloc+0x93>
c00019bd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00019c4:	83 f8 1b             	cmp    eax,0x1b
c00019c7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00019ce:	76 33                	jbe    c0001a03 <dlcalloc+0x93>
c00019d0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00019d7:	83 f8 23             	cmp    eax,0x23
c00019da:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019e1:	76 20                	jbe    c0001a03 <dlcalloc+0x93>
c00019e3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019ea:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019f1:	eb 10                	jmp    c0001a03 <dlcalloc+0x93>
c00019f3:	52                   	push   edx
c00019f4:	83 e8 08             	sub    eax,0x8
c00019f7:	50                   	push   eax
c00019f8:	6a 00                	push   0x0
c00019fa:	53                   	push   ebx
c00019fb:	e8 80 eb ff ff       	call   c0000580 <memset>
c0001a00:	83 c4 10             	add    esp,0x10
c0001a03:	83 c4 08             	add    esp,0x8
c0001a06:	89 d8                	mov    eax,ebx
c0001a08:	5b                   	pop    ebx
c0001a09:	c3                   	ret    

c0001a0a <dlcfree>:
c0001a0a:	e9 ff f3 ff ff       	jmp    c0000e0e <dlfree>

c0001a0f <dlindependent_calloc>:
c0001a0f:	83 ec 28             	sub    esp,0x28
c0001a12:	b9 03 00 00 00       	mov    ecx,0x3
c0001a17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001a1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001a23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a27:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001a2b:	e8 ca fa ff ff       	call   c00014fa <iALLOc>
c0001a30:	83 c4 2c             	add    esp,0x2c
c0001a33:	c3                   	ret    

c0001a34 <dlindependent_comalloc>:
c0001a34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a38:	31 c9                	xor    ecx,ecx
c0001a3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a3e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a46:	e9 af fa ff ff       	jmp    c00014fa <iALLOc>

c0001a4b <dlvalloc>:
c0001a4b:	83 ec 0c             	sub    esp,0xc
c0001a4e:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001a55:	75 0a                	jne    c0001a61 <dlvalloc+0x16>
c0001a57:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a5c:	e8 c6 f2 ff ff       	call   c0000d27 <malloc_consolidate>
c0001a61:	50                   	push   eax
c0001a62:	50                   	push   eax
c0001a63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a67:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c0001a6d:	e8 db fd ff ff       	call   c000184d <dlmemalign>
c0001a72:	83 c4 1c             	add    esp,0x1c
c0001a75:	c3                   	ret    

c0001a76 <dlpvalloc>:
c0001a76:	83 ec 0c             	sub    esp,0xc
c0001a79:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001a80:	75 0a                	jne    c0001a8c <dlpvalloc+0x16>
c0001a82:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a87:	e8 9b f2 ff ff       	call   c0000d27 <malloc_consolidate>
c0001a8c:	52                   	push   edx
c0001a8d:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c0001a92:	52                   	push   edx
c0001a93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a97:	89 c1                	mov    ecx,eax
c0001a99:	f7 d9                	neg    ecx
c0001a9b:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a9f:	21 ca                	and    edx,ecx
c0001aa1:	52                   	push   edx
c0001aa2:	50                   	push   eax
c0001aa3:	e8 a5 fd ff ff       	call   c000184d <dlmemalign>
c0001aa8:	83 c4 1c             	add    esp,0x1c
c0001aab:	c3                   	ret    

c0001aac <dlmalloc_trim>:
c0001aac:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001ab1:	e8 71 f2 ff ff       	call   c0000d27 <malloc_consolidate>
c0001ab6:	31 c0                	xor    eax,eax
c0001ab8:	c3                   	ret    

c0001ab9 <dlmalloc_usable_size>:
c0001ab9:	53                   	push   ebx
c0001aba:	31 c0                	xor    eax,eax
c0001abc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001ac0:	85 c9                	test   ecx,ecx
c0001ac2:	74 24                	je     c0001ae8 <dlmalloc_usable_size+0x2f>
c0001ac4:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ac7:	f6 c2 02             	test   dl,0x2
c0001aca:	74 08                	je     c0001ad4 <dlmalloc_usable_size+0x1b>
c0001acc:	83 e2 fc             	and    edx,0xfffffffc
c0001acf:	8d 42 f8             	lea    eax,[edx-0x8]
c0001ad2:	eb 14                	jmp    c0001ae8 <dlmalloc_usable_size+0x2f>
c0001ad4:	89 d3                	mov    ebx,edx
c0001ad6:	31 c0                	xor    eax,eax
c0001ad8:	83 e3 fe             	and    ebx,0xfffffffe
c0001adb:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001ae0:	74 06                	je     c0001ae8 <dlmalloc_usable_size+0x2f>
c0001ae2:	83 e2 fc             	and    edx,0xfffffffc
c0001ae5:	8d 42 fc             	lea    eax,[edx-0x4]
c0001ae8:	5b                   	pop    ebx
c0001ae9:	c3                   	ret    

c0001aea <dlmallinfo>:
c0001aea:	55                   	push   ebp
c0001aeb:	57                   	push   edi
c0001aec:	56                   	push   esi
c0001aed:	53                   	push   ebx
c0001aee:	83 ec 08             	sub    esp,0x8
c0001af1:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001af8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001afc:	75 0a                	jne    c0001b08 <dlmallinfo+0x1e>
c0001afe:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b03:	e8 1f f2 ff ff       	call   c0000d27 <malloc_consolidate>
c0001b08:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001b0d:	31 ed                	xor    ebp,ebp
c0001b0f:	31 c9                	xor    ecx,ecx
c0001b11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001b14:	83 e0 fc             	and    eax,0xfffffffc
c0001b17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b1b:	31 c0                	xor    eax,eax
c0001b1d:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001b24:	85 d2                	test   edx,edx
c0001b26:	74 0e                	je     c0001b36 <dlmallinfo+0x4c>
c0001b28:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001b2b:	45                   	inc    ebp
c0001b2c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001b2f:	83 e6 fc             	and    esi,0xfffffffc
c0001b32:	01 f1                	add    ecx,esi
c0001b34:	eb ee                	jmp    c0001b24 <dlmallinfo+0x3a>
c0001b36:	40                   	inc    eax
c0001b37:	83 f8 0a             	cmp    eax,0xa
c0001b3a:	75 e1                	jne    c0001b1d <dlmallinfo+0x33>
c0001b3c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b47:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b4a:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001b4f:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b52:	39 f0                	cmp    eax,esi
c0001b54:	74 10                	je     c0001b66 <dlmallinfo+0x7c>
c0001b56:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b59:	ff 04 24             	inc    DWORD PTR [esp]
c0001b5c:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b5f:	83 e7 fc             	and    edi,0xfffffffc
c0001b62:	01 fa                	add    edx,edi
c0001b64:	eb ec                	jmp    c0001b52 <dlmallinfo+0x68>
c0001b66:	83 c0 08             	add    eax,0x8
c0001b69:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001b6e:	75 df                	jne    c0001b4f <dlmallinfo+0x65>
c0001b70:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001b76:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b79:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001b7e:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b81:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b84:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b87:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b8a:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001b90:	89 03                	mov    DWORD PTR [ebx],eax
c0001b92:	29 d0                	sub    eax,edx
c0001b94:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b9b:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b9e:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001ba1:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001ba7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001baa:	89 d8                	mov    eax,ebx
c0001bac:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001baf:	83 c4 08             	add    esp,0x8
c0001bb2:	5b                   	pop    ebx
c0001bb3:	5e                   	pop    esi
c0001bb4:	5f                   	pop    edi
c0001bb5:	5d                   	pop    ebp
c0001bb6:	c2 04 00             	ret    0x4

c0001bb9 <dlmalloc_stats>:
c0001bb9:	83 ec 30             	sub    esp,0x30
c0001bbc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001bc0:	50                   	push   eax
c0001bc1:	e8 24 ff ff ff       	call   c0001aea <dlmallinfo>
c0001bc6:	83 c4 30             	add    esp,0x30
c0001bc9:	c3                   	ret    

c0001bca <dlmallopt>:
c0001bca:	56                   	push   esi
c0001bcb:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001bd0:	53                   	push   ebx
c0001bd1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001bd5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001bd9:	e8 49 f1 ff ff       	call   c0000d27 <malloc_consolidate>
c0001bde:	8d 46 04             	lea    eax,[esi+0x4]
c0001be1:	83 f8 05             	cmp    eax,0x5
c0001be4:	77 67                	ja     c0001c4d <dlmallopt+0x83>
c0001be6:	ff 24 85 84 f7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe087c]
c0001bed:	83 fb 50             	cmp    ebx,0x50
c0001bf0:	77 5b                	ja     c0001c4d <dlmallopt+0x83>
c0001bf2:	85 db                	test   ebx,ebx
c0001bf4:	ba 08 00 00 00       	mov    edx,0x8
c0001bf9:	74 12                	je     c0001c0d <dlmallopt+0x43>
c0001bfb:	83 c3 0b             	add    ebx,0xb
c0001bfe:	ba 10 00 00 00       	mov    edx,0x10
c0001c03:	83 fb 0f             	cmp    ebx,0xf
c0001c06:	76 05                	jbe    c0001c0d <dlmallopt+0x43>
c0001c08:	89 da                	mov    edx,ebx
c0001c0a:	83 e2 f8             	and    edx,0xfffffff8
c0001c0d:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001c12:	83 e0 03             	and    eax,0x3
c0001c15:	09 d0                	or     eax,edx
c0001c17:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001c1c:	eb 31                	jmp    c0001c4f <dlmallopt+0x85>
c0001c1e:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001c24:	eb 06                	jmp    c0001c2c <dlmallopt+0x62>
c0001c26:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001c2c:	be 01 00 00 00       	mov    esi,0x1
c0001c31:	eb 1c                	jmp    c0001c4f <dlmallopt+0x85>
c0001c33:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001c39:	eb f1                	jmp    c0001c2c <dlmallopt+0x62>
c0001c3b:	31 f6                	xor    esi,esi
c0001c3d:	85 db                	test   ebx,ebx
c0001c3f:	75 0e                	jne    c0001c4f <dlmallopt+0x85>
c0001c41:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001c4b:	eb df                	jmp    c0001c2c <dlmallopt+0x62>
c0001c4d:	31 f6                	xor    esi,esi
c0001c4f:	5b                   	pop    ebx
c0001c50:	89 f0                	mov    eax,esi
c0001c52:	5e                   	pop    esi
c0001c53:	c3                   	ret    

c0001c54 <isblank>:
c0001c54:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c59:	74 09                	je     c0001c64 <isblank+0x10>
c0001c5b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c60:	75 0a                	jne    c0001c6c <isblank+0x18>
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 01 00 00 00       	mov    eax,0x1
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax
c0001c6c:	b8 00 00 00 00       	mov    eax,0x0
c0001c71:	c3                   	ret    
c0001c72:	66 90                	xchg   ax,ax

c0001c74 <iscntrl>:
c0001c74:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001c79:	7e 09                	jle    c0001c84 <iscntrl+0x10>
c0001c7b:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001c80:	75 0a                	jne    c0001c8c <iscntrl+0x18>
c0001c82:	66 90                	xchg   ax,ax
c0001c84:	b8 01 00 00 00       	mov    eax,0x1
c0001c89:	c3                   	ret    
c0001c8a:	66 90                	xchg   ax,ax
c0001c8c:	b8 00 00 00 00       	mov    eax,0x0
c0001c91:	c3                   	ret    
c0001c92:	66 90                	xchg   ax,ax

c0001c94 <isdigit>:
c0001c94:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c99:	7e 0d                	jle    c0001ca8 <isdigit+0x14>
c0001c9b:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001ca0:	7f 06                	jg     c0001ca8 <isdigit+0x14>
c0001ca2:	b8 01 00 00 00       	mov    eax,0x1
c0001ca7:	c3                   	ret    
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <islower>:
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 0d                	jle    c0001cc4 <islower+0x14>
c0001cb7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001cbc:	7f 06                	jg     c0001cc4 <islower+0x14>
c0001cbe:	b8 01 00 00 00       	mov    eax,0x1
c0001cc3:	c3                   	ret    
c0001cc4:	b8 00 00 00 00       	mov    eax,0x0
c0001cc9:	c3                   	ret    
c0001cca:	66 90                	xchg   ax,ax

c0001ccc <isspace>:
c0001ccc:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001cd1:	7c 19                	jl     c0001cec <isspace+0x20>
c0001cd3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001cd8:	7e 0a                	jle    c0001ce4 <isspace+0x18>
c0001cda:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001cdf:	75 0b                	jne    c0001cec <isspace+0x20>
c0001ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0001ce4:	b8 01 00 00 00       	mov    eax,0x1
c0001ce9:	c3                   	ret    
c0001cea:	66 90                	xchg   ax,ax
c0001cec:	b8 00 00 00 00       	mov    eax,0x0
c0001cf1:	c3                   	ret    
c0001cf2:	66 90                	xchg   ax,ax

c0001cf4 <isupper>:
c0001cf4:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cf9:	7e 0d                	jle    c0001d08 <isupper+0x14>
c0001cfb:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001d00:	7f 06                	jg     c0001d08 <isupper+0x14>
c0001d02:	b8 01 00 00 00       	mov    eax,0x1
c0001d07:	c3                   	ret    
c0001d08:	b8 00 00 00 00       	mov    eax,0x0
c0001d0d:	c3                   	ret    
c0001d0e:	66 90                	xchg   ax,ax

c0001d10 <isalpha>:
c0001d10:	83 ec 04             	sub    esp,0x4
c0001d13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	e8 d5 ff ff ff       	call   c0001cf4 <isupper>
c0001d1f:	85 c0                	test   eax,eax
c0001d21:	75 11                	jne    c0001d34 <isalpha+0x24>
c0001d23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d27:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d2a:	e8 81 ff ff ff       	call   c0001cb0 <islower>
c0001d2f:	85 c0                	test   eax,eax
c0001d31:	74 09                	je     c0001d3c <isalpha+0x2c>
c0001d33:	90                   	nop
c0001d34:	b8 01 00 00 00       	mov    eax,0x1
c0001d39:	eb 09                	jmp    c0001d44 <isalpha+0x34>
c0001d3b:	90                   	nop
c0001d3c:	b8 00 00 00 00       	mov    eax,0x0
c0001d41:	8d 76 00             	lea    esi,[esi+0x0]
c0001d44:	83 c4 04             	add    esp,0x4
c0001d47:	c3                   	ret    

c0001d48 <isalnum>:
c0001d48:	83 ec 04             	sub    esp,0x4
c0001d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d52:	e8 b9 ff ff ff       	call   c0001d10 <isalpha>
c0001d57:	85 c0                	test   eax,eax
c0001d59:	75 11                	jne    c0001d6c <isalnum+0x24>
c0001d5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d62:	e8 2d ff ff ff       	call   c0001c94 <isdigit>
c0001d67:	85 c0                	test   eax,eax
c0001d69:	74 09                	je     c0001d74 <isalnum+0x2c>
c0001d6b:	90                   	nop
c0001d6c:	b8 01 00 00 00       	mov    eax,0x1
c0001d71:	eb 09                	jmp    c0001d7c <isalnum+0x34>
c0001d73:	90                   	nop
c0001d74:	b8 00 00 00 00       	mov    eax,0x0
c0001d79:	8d 76 00             	lea    esi,[esi+0x0]
c0001d7c:	83 c4 04             	add    esp,0x4
c0001d7f:	c3                   	ret    

c0001d80 <ispunct>:
c0001d80:	83 ec 04             	sub    esp,0x4
c0001d83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d87:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d8a:	e8 b9 ff ff ff       	call   c0001d48 <isalnum>
c0001d8f:	85 c0                	test   eax,eax
c0001d91:	75 29                	jne    c0001dbc <ispunct+0x3c>
c0001d93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d97:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d9a:	e8 2d ff ff ff       	call   c0001ccc <isspace>
c0001d9f:	85 c0                	test   eax,eax
c0001da1:	75 19                	jne    c0001dbc <ispunct+0x3c>
c0001da3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001da7:	89 04 24             	mov    DWORD PTR [esp],eax
c0001daa:	e8 c5 fe ff ff       	call   c0001c74 <iscntrl>
c0001daf:	85 c0                	test   eax,eax
c0001db1:	75 09                	jne    c0001dbc <ispunct+0x3c>
c0001db3:	b8 01 00 00 00       	mov    eax,0x1
c0001db8:	eb 0a                	jmp    c0001dc4 <ispunct+0x44>
c0001dba:	66 90                	xchg   ax,ax
c0001dbc:	b8 00 00 00 00       	mov    eax,0x0
c0001dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0001dc4:	83 c4 04             	add    esp,0x4
c0001dc7:	c3                   	ret    

c0001dc8 <isgraph>:
c0001dc8:	83 ec 04             	sub    esp,0x4
c0001dcb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001dcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd2:	e8 71 ff ff ff       	call   c0001d48 <isalnum>
c0001dd7:	85 c0                	test   eax,eax
c0001dd9:	75 11                	jne    c0001dec <isgraph+0x24>
c0001ddb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001ddf:	89 04 24             	mov    DWORD PTR [esp],eax
c0001de2:	e8 99 ff ff ff       	call   c0001d80 <ispunct>
c0001de7:	85 c0                	test   eax,eax
c0001de9:	74 09                	je     c0001df4 <isgraph+0x2c>
c0001deb:	90                   	nop
c0001dec:	b8 01 00 00 00       	mov    eax,0x1
c0001df1:	eb 09                	jmp    c0001dfc <isgraph+0x34>
c0001df3:	90                   	nop
c0001df4:	b8 00 00 00 00       	mov    eax,0x0
c0001df9:	8d 76 00             	lea    esi,[esi+0x0]
c0001dfc:	83 c4 04             	add    esp,0x4
c0001dff:	c3                   	ret    

c0001e00 <isprint>:
c0001e00:	83 ec 04             	sub    esp,0x4
c0001e03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001e07:	89 04 24             	mov    DWORD PTR [esp],eax
c0001e0a:	e8 b9 ff ff ff       	call   c0001dc8 <isgraph>
c0001e0f:	85 c0                	test   eax,eax
c0001e11:	75 09                	jne    c0001e1c <isprint+0x1c>
c0001e13:	83 7c 24 08 20       	cmp    DWORD PTR [esp+0x8],0x20
c0001e18:	75 0a                	jne    c0001e24 <isprint+0x24>
c0001e1a:	66 90                	xchg   ax,ax
c0001e1c:	b8 01 00 00 00       	mov    eax,0x1
c0001e21:	eb 09                	jmp    c0001e2c <isprint+0x2c>
c0001e23:	90                   	nop
c0001e24:	b8 00 00 00 00       	mov    eax,0x0
c0001e29:	8d 76 00             	lea    esi,[esi+0x0]
c0001e2c:	83 c4 04             	add    esp,0x4
c0001e2f:	c3                   	ret    

c0001e30 <isxdigit>:
c0001e30:	83 ec 04             	sub    esp,0x4
c0001e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001e37:	89 04 24             	mov    DWORD PTR [esp],eax
c0001e3a:	e8 55 fe ff ff       	call   c0001c94 <isdigit>
c0001e3f:	85 c0                	test   eax,eax
c0001e41:	75 21                	jne    c0001e64 <isxdigit+0x34>
c0001e43:	83 7c 24 08 40       	cmp    DWORD PTR [esp+0x8],0x40
c0001e48:	7e 0a                	jle    c0001e54 <isxdigit+0x24>
c0001e4a:	83 7c 24 08 46       	cmp    DWORD PTR [esp+0x8],0x46
c0001e4f:	7e 13                	jle    c0001e64 <isxdigit+0x34>
c0001e51:	8d 76 00             	lea    esi,[esi+0x0]
c0001e54:	83 7c 24 08 60       	cmp    DWORD PTR [esp+0x8],0x60
c0001e59:	7e 11                	jle    c0001e6c <isxdigit+0x3c>
c0001e5b:	83 7c 24 08 66       	cmp    DWORD PTR [esp+0x8],0x66
c0001e60:	7f 0a                	jg     c0001e6c <isxdigit+0x3c>
c0001e62:	66 90                	xchg   ax,ax
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	eb 09                	jmp    c0001e74 <isxdigit+0x44>
c0001e6b:	90                   	nop
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	8d 76 00             	lea    esi,[esi+0x0]
c0001e74:	83 c4 04             	add    esp,0x4
c0001e77:	c3                   	ret    

c0001e78 <disk_status>:
c0001e78:	31 c0                	xor    eax,eax
c0001e7a:	c3                   	ret    

c0001e7b <disk_initialize>:
c0001e7b:	31 c0                	xor    eax,eax
c0001e7d:	c3                   	ret    

c0001e7e <disk_read>:
c0001e7e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001e83:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001e8b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e8f:	e9 50 70 01 00       	jmp    c0018ee4 <fatWrapperReadDisk>

c0001e94 <disk_write>:
c0001e94:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001e99:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001ea1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ea5:	e9 7a 70 01 00       	jmp    c0018f24 <fatWrapperWriteDisk>

c0001eaa <disk_ioctl>:
c0001eaa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001eaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001eb3:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001eb8:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001ec0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ec4:	e9 9b 70 01 00       	jmp    c0018f64 <fatWrapperIoctl>

c0001ec9 <ld_word>:
c0001ec9:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ecd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ed0:	c1 e2 08             	shl    edx,0x8
c0001ed3:	09 d0                	or     eax,edx
c0001ed5:	c3                   	ret    

c0001ed6 <ld_dword>:
c0001ed6:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001eda:	89 d1                	mov    ecx,edx
c0001edc:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ee0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ee3:	c1 e1 08             	shl    ecx,0x8
c0001ee6:	09 ca                	or     edx,ecx
c0001ee8:	c1 e2 08             	shl    edx,0x8
c0001eeb:	09 d0                	or     eax,edx
c0001eed:	c3                   	ret    

c0001eee <st_word>:
c0001eee:	66 89 10             	mov    WORD PTR [eax],dx
c0001ef1:	c3                   	ret    

c0001ef2 <st_dword>:
c0001ef2:	89 10                	mov    DWORD PTR [eax],edx
c0001ef4:	c3                   	ret    

c0001ef5 <mem_cpy>:
c0001ef5:	85 c9                	test   ecx,ecx
c0001ef7:	74 10                	je     c0001f09 <mem_cpy+0x14>
c0001ef9:	57                   	push   edi
c0001efa:	01 c1                	add    ecx,eax
c0001efc:	56                   	push   esi
c0001efd:	89 c7                	mov    edi,eax
c0001eff:	89 d6                	mov    esi,edx
c0001f01:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001f02:	39 f9                	cmp    ecx,edi
c0001f04:	75 fb                	jne    c0001f01 <mem_cpy+0xc>
c0001f06:	5e                   	pop    esi
c0001f07:	5f                   	pop    edi
c0001f08:	c3                   	ret    
c0001f09:	c3                   	ret    

c0001f0a <mem_set>:
c0001f0a:	01 c1                	add    ecx,eax
c0001f0c:	88 10                	mov    BYTE PTR [eax],dl
c0001f0e:	40                   	inc    eax
c0001f0f:	39 c8                	cmp    eax,ecx
c0001f11:	75 f9                	jne    c0001f0c <mem_set+0x2>
c0001f13:	c3                   	ret    

c0001f14 <mem_cmp>:
c0001f14:	57                   	push   edi
c0001f15:	56                   	push   esi
c0001f16:	89 c6                	mov    esi,eax
c0001f18:	53                   	push   ebx
c0001f19:	46                   	inc    esi
c0001f1a:	42                   	inc    edx
c0001f1b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001f1f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001f23:	29 fb                	sub    ebx,edi
c0001f25:	89 cf                	mov    edi,ecx
c0001f27:	29 f7                	sub    edi,esi
c0001f29:	01 c7                	add    edi,eax
c0001f2b:	74 04                	je     c0001f31 <mem_cmp+0x1d>
c0001f2d:	85 db                	test   ebx,ebx
c0001f2f:	74 e8                	je     c0001f19 <mem_cmp+0x5>
c0001f31:	89 d8                	mov    eax,ebx
c0001f33:	5b                   	pop    ebx
c0001f34:	5e                   	pop    esi
c0001f35:	5f                   	pop    edi
c0001f36:	c3                   	ret    

c0001f37 <chk_chr>:
c0001f37:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001f3a:	84 c9                	test   cl,cl
c0001f3c:	74 07                	je     c0001f45 <chk_chr+0xe>
c0001f3e:	39 d1                	cmp    ecx,edx
c0001f40:	74 03                	je     c0001f45 <chk_chr+0xe>
c0001f42:	40                   	inc    eax
c0001f43:	eb f2                	jmp    c0001f37 <chk_chr>
c0001f45:	89 c8                	mov    eax,ecx
c0001f47:	c3                   	ret    

c0001f48 <dbc_1st>:
c0001f48:	31 c0                	xor    eax,eax
c0001f4a:	c3                   	ret    

c0001f4b <dbc_2nd>:
c0001f4b:	31 c0                	xor    eax,eax
c0001f4d:	c3                   	ret    

c0001f4e <tchar2uni>:
c0001f4e:	57                   	push   edi
c0001f4f:	56                   	push   esi
c0001f50:	89 c6                	mov    esi,eax
c0001f52:	53                   	push   ebx
c0001f53:	51                   	push   ecx
c0001f54:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001f56:	8a 13                	mov    dl,BYTE PTR [ebx]
c0001f58:	8d 4b 01             	lea    ecx,[ebx+0x1]
c0001f5b:	84 d2                	test   dl,dl
c0001f5d:	78 0a                	js     c0001f69 <tchar2uni+0x1b>
c0001f5f:	0f b6 c2             	movzx  eax,dl
c0001f62:	89 cf                	mov    edi,ecx
c0001f64:	e9 a3 00 00 00       	jmp    c000200c <tchar2uni+0xbe>
c0001f69:	88 d0                	mov    al,dl
c0001f6b:	24 e0                	and    al,0xe0
c0001f6d:	3c c0                	cmp    al,0xc0
c0001f6f:	75 0d                	jne    c0001f7e <tchar2uni+0x30>
c0001f71:	80 e2 1f             	and    dl,0x1f
c0001f74:	0f b6 c2             	movzx  eax,dl
c0001f77:	ba 01 00 00 00       	mov    edx,0x1
c0001f7c:	eb 32                	jmp    c0001fb0 <tchar2uni+0x62>
c0001f7e:	88 d0                	mov    al,dl
c0001f80:	24 f0                	and    al,0xf0
c0001f82:	3c e0                	cmp    al,0xe0
c0001f84:	75 0d                	jne    c0001f93 <tchar2uni+0x45>
c0001f86:	80 e2 0f             	and    dl,0xf
c0001f89:	0f b6 c2             	movzx  eax,dl
c0001f8c:	ba 02 00 00 00       	mov    edx,0x2
c0001f91:	eb 1d                	jmp    c0001fb0 <tchar2uni+0x62>
c0001f93:	88 d0                	mov    al,dl
c0001f95:	24 f8                	and    al,0xf8
c0001f97:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0001f9b:	83 c8 ff             	or     eax,0xffffffff
c0001f9e:	80 7c 24 03 f0       	cmp    BYTE PTR [esp+0x3],0xf0
c0001fa3:	75 6e                	jne    c0002013 <tchar2uni+0xc5>
c0001fa5:	80 e2 07             	and    dl,0x7
c0001fa8:	0f b6 c2             	movzx  eax,dl
c0001fab:	ba 03 00 00 00       	mov    edx,0x3
c0001fb0:	8d 7c 13 01          	lea    edi,[ebx+edx*1+0x1]
c0001fb4:	41                   	inc    ecx
c0001fb5:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0001fb8:	88 da                	mov    dl,bl
c0001fba:	80 e2 c0             	and    dl,0xc0
c0001fbd:	80 fa 80             	cmp    dl,0x80
c0001fc0:	75 4e                	jne    c0002010 <tchar2uni+0xc2>
c0001fc2:	c1 e0 06             	shl    eax,0x6
c0001fc5:	80 e3 3f             	and    bl,0x3f
c0001fc8:	0f b6 db             	movzx  ebx,bl
c0001fcb:	09 d8                	or     eax,ebx
c0001fcd:	39 f9                	cmp    ecx,edi
c0001fcf:	75 e3                	jne    c0001fb4 <tchar2uni+0x66>
c0001fd1:	8d 90 00 28 ff ff    	lea    edx,[eax-0xd800]
c0001fd7:	81 fa ff 07 00 00    	cmp    edx,0x7ff
c0001fdd:	76 31                	jbe    c0002010 <tchar2uni+0xc2>
c0001fdf:	8d 50 80             	lea    edx,[eax-0x80]
c0001fe2:	81 fa 7f ff 10 00    	cmp    edx,0x10ff7f
c0001fe8:	77 26                	ja     c0002010 <tchar2uni+0xc2>
c0001fea:	3d ff ff 00 00       	cmp    eax,0xffff
c0001fef:	76 1b                	jbe    c000200c <tchar2uni+0xbe>
c0001ff1:	8d 88 00 00 ff ff    	lea    ecx,[eax-0x10000]
c0001ff7:	25 ff 03 00 00       	and    eax,0x3ff
c0001ffc:	c1 e1 06             	shl    ecx,0x6
c0001fff:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002005:	09 c8                	or     eax,ecx
c0002007:	0d 00 dc 00 d8       	or     eax,0xd800dc00
c000200c:	89 3e                	mov    DWORD PTR [esi],edi
c000200e:	eb 03                	jmp    c0002013 <tchar2uni+0xc5>
c0002010:	83 c8 ff             	or     eax,0xffffffff
c0002013:	5a                   	pop    edx
c0002014:	5b                   	pop    ebx
c0002015:	5e                   	pop    esi
c0002016:	5f                   	pop    edi
c0002017:	c3                   	ret    

c0002018 <put_utf>:
c0002018:	53                   	push   ebx
c0002019:	89 d3                	mov    ebx,edx
c000201b:	31 d2                	xor    edx,edx
c000201d:	83 f8 7f             	cmp    eax,0x7f
c0002020:	77 11                	ja     c0002033 <put_utf+0x1b>
c0002022:	85 c9                	test   ecx,ecx
c0002024:	0f 84 da 00 00 00    	je     c0002104 <put_utf+0xec>
c000202a:	88 03                	mov    BYTE PTR [ebx],al
c000202c:	b2 01                	mov    dl,0x1
c000202e:	e9 d1 00 00 00       	jmp    c0002104 <put_utf+0xec>
c0002033:	3d ff 07 00 00       	cmp    eax,0x7ff
c0002038:	77 21                	ja     c000205b <put_utf+0x43>
c000203a:	83 f9 01             	cmp    ecx,0x1
c000203d:	0f 86 c1 00 00 00    	jbe    c0002104 <put_utf+0xec>
c0002043:	89 c2                	mov    edx,eax
c0002045:	24 3f                	and    al,0x3f
c0002047:	c1 ea 06             	shr    edx,0x6
c000204a:	0c 80                	or     al,0x80
c000204c:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000204f:	80 ca c0             	or     dl,0xc0
c0002052:	88 13                	mov    BYTE PTR [ebx],dl
c0002054:	b2 02                	mov    dl,0x2
c0002056:	e9 a9 00 00 00       	jmp    c0002104 <put_utf+0xec>
c000205b:	3d ff ff 00 00       	cmp    eax,0xffff
c0002060:	77 3e                	ja     c00020a0 <put_utf+0x88>
c0002062:	83 f9 02             	cmp    ecx,0x2
c0002065:	0f 86 99 00 00 00    	jbe    c0002104 <put_utf+0xec>
c000206b:	8d 88 00 28 ff ff    	lea    ecx,[eax-0xd800]
c0002071:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002077:	0f 86 87 00 00 00    	jbe    c0002104 <put_utf+0xec>
c000207d:	89 c2                	mov    edx,eax
c000207f:	c1 ea 0c             	shr    edx,0xc
c0002082:	80 ca e0             	or     dl,0xe0
c0002085:	88 13                	mov    BYTE PTR [ebx],dl
c0002087:	89 c2                	mov    edx,eax
c0002089:	24 3f                	and    al,0x3f
c000208b:	c1 ea 06             	shr    edx,0x6
c000208e:	0c 80                	or     al,0x80
c0002090:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0002093:	80 e2 3f             	and    dl,0x3f
c0002096:	80 ca 80             	or     dl,0x80
c0002099:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
c000209c:	b2 03                	mov    dl,0x3
c000209e:	eb 64                	jmp    c0002104 <put_utf+0xec>
c00020a0:	83 f9 03             	cmp    ecx,0x3
c00020a3:	76 5f                	jbe    c0002104 <put_utf+0xec>
c00020a5:	89 c2                	mov    edx,eax
c00020a7:	0f b7 c0             	movzx  eax,ax
c00020aa:	66 31 d2             	xor    dx,dx
c00020ad:	2d 00 dc 00 00       	sub    eax,0xdc00
c00020b2:	81 c2 00 00 00 28    	add    edx,0x28000000
c00020b8:	c1 ea 06             	shr    edx,0x6
c00020bb:	81 fa ff ff 0f 00    	cmp    edx,0xfffff
c00020c1:	77 3f                	ja     c0002102 <put_utf+0xea>
c00020c3:	3d ff 03 00 00       	cmp    eax,0x3ff
c00020c8:	77 38                	ja     c0002102 <put_utf+0xea>
c00020ca:	09 d0                	or     eax,edx
c00020cc:	05 00 00 01 00       	add    eax,0x10000
c00020d1:	89 c2                	mov    edx,eax
c00020d3:	c1 ea 12             	shr    edx,0x12
c00020d6:	80 ca f0             	or     dl,0xf0
c00020d9:	88 13                	mov    BYTE PTR [ebx],dl
c00020db:	89 c2                	mov    edx,eax
c00020dd:	c1 ea 0c             	shr    edx,0xc
c00020e0:	80 e2 3f             	and    dl,0x3f
c00020e3:	80 ca 80             	or     dl,0x80
c00020e6:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
c00020e9:	89 c2                	mov    edx,eax
c00020eb:	24 3f                	and    al,0x3f
c00020ed:	c1 ea 06             	shr    edx,0x6
c00020f0:	0c 80                	or     al,0x80
c00020f2:	88 43 03             	mov    BYTE PTR [ebx+0x3],al
c00020f5:	80 e2 3f             	and    dl,0x3f
c00020f8:	80 ca 80             	or     dl,0x80
c00020fb:	88 53 02             	mov    BYTE PTR [ebx+0x2],dl
c00020fe:	b2 04                	mov    dl,0x4
c0002100:	eb 02                	jmp    c0002104 <put_utf+0xec>
c0002102:	31 d2                	xor    edx,edx
c0002104:	5b                   	pop    ebx
c0002105:	88 d0                	mov    al,dl
c0002107:	c3                   	ret    

c0002108 <clst2sect>:
c0002108:	8d 4a fe             	lea    ecx,[edx-0x2]
c000210b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000210e:	83 ea 02             	sub    edx,0x2
c0002111:	39 ca                	cmp    edx,ecx
c0002113:	76 0d                	jbe    c0002122 <clst2sect+0x1a>
c0002115:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002119:	0f af d1             	imul   edx,ecx
c000211c:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000211f:	89 d0                	mov    eax,edx
c0002121:	c3                   	ret    
c0002122:	31 c0                	xor    eax,eax
c0002124:	c3                   	ret    

c0002125 <pick_lfn>:
c0002125:	55                   	push   ebp
c0002126:	57                   	push   edi
c0002127:	89 d7                	mov    edi,edx
c0002129:	56                   	push   esi
c000212a:	53                   	push   ebx
c000212b:	89 c3                	mov    ebx,eax
c000212d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002130:	e8 94 fd ff ff       	call   c0001ec9 <ld_word>
c0002135:	66 85 c0             	test   ax,ax
c0002138:	74 04                	je     c000213e <pick_lfn+0x19>
c000213a:	31 c0                	xor    eax,eax
c000213c:	eb 65                	jmp    c00021a3 <pick_lfn+0x7e>
c000213e:	0f b6 0f             	movzx  ecx,BYTE PTR [edi]
c0002141:	be 01 00 00 00       	mov    esi,0x1
c0002146:	31 ed                	xor    ebp,ebp
c0002148:	83 e1 bf             	and    ecx,0xffffffbf
c000214b:	49                   	dec    ecx
c000214c:	6b c9 0d             	imul   ecx,ecx,0xd
c000214f:	0f b6 85 e0 f8 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0720]
c0002156:	01 f8                	add    eax,edi
c0002158:	e8 6c fd ff ff       	call   c0001ec9 <ld_word>
c000215d:	85 f6                	test   esi,esi
c000215f:	0f b7 d0             	movzx  edx,ax
c0002162:	74 11                	je     c0002175 <pick_lfn+0x50>
c0002164:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000216a:	77 ce                	ja     c000213a <pick_lfn+0x15>
c000216c:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0002170:	89 d6                	mov    esi,edx
c0002172:	41                   	inc    ecx
c0002173:	eb 08                	jmp    c000217d <pick_lfn+0x58>
c0002175:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000217b:	75 bd                	jne    c000213a <pick_lfn+0x15>
c000217d:	45                   	inc    ebp
c000217e:	83 fd 0d             	cmp    ebp,0xd
c0002181:	75 cc                	jne    c000214f <pick_lfn+0x2a>
c0002183:	8a 07                	mov    al,BYTE PTR [edi]
c0002185:	c0 e8 06             	shr    al,0x6
c0002188:	24 01                	and    al,0x1
c000218a:	74 12                	je     c000219e <pick_lfn+0x79>
c000218c:	85 f6                	test   esi,esi
c000218e:	74 0e                	je     c000219e <pick_lfn+0x79>
c0002190:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002196:	77 a2                	ja     c000213a <pick_lfn+0x15>
c0002198:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c000219e:	b8 01 00 00 00       	mov    eax,0x1
c00021a3:	5b                   	pop    ebx
c00021a4:	5e                   	pop    esi
c00021a5:	5f                   	pop    edi
c00021a6:	5d                   	pop    ebp
c00021a7:	c3                   	ret    

c00021a8 <put_lfn>:
c00021a8:	55                   	push   ebp
c00021a9:	31 ed                	xor    ebp,ebp
c00021ab:	57                   	push   edi
c00021ac:	89 d7                	mov    edi,edx
c00021ae:	56                   	push   esi
c00021af:	31 f6                	xor    esi,esi
c00021b1:	53                   	push   ebx
c00021b2:	53                   	push   ebx
c00021b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00021b6:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00021ba:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00021c0:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00021c3:	8d 42 1a             	lea    eax,[edx+0x1a]
c00021c6:	31 d2                	xor    edx,edx
c00021c8:	e8 21 fd ff ff       	call   c0001eee <st_word>
c00021cd:	0f b6 d9             	movzx  ebx,cl
c00021d0:	4b                   	dec    ebx
c00021d1:	6b db 0d             	imul   ebx,ebx,0xd
c00021d4:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00021da:	74 08                	je     c00021e4 <put_lfn+0x3c>
c00021dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00021df:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00021e3:	43                   	inc    ebx
c00021e4:	0f b6 85 e0 f8 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0720]
c00021eb:	89 f2                	mov    edx,esi
c00021ed:	01 f8                	add    eax,edi
c00021ef:	e8 fa fc ff ff       	call   c0001eee <st_word>
c00021f4:	85 f6                	test   esi,esi
c00021f6:	75 05                	jne    c00021fd <put_lfn+0x55>
c00021f8:	be ff ff 00 00       	mov    esi,0xffff
c00021fd:	45                   	inc    ebp
c00021fe:	83 fd 0d             	cmp    ebp,0xd
c0002201:	75 d1                	jne    c00021d4 <put_lfn+0x2c>
c0002203:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002209:	74 0a                	je     c0002215 <put_lfn+0x6d>
c000220b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000220e:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002213:	75 03                	jne    c0002218 <put_lfn+0x70>
c0002215:	80 c9 40             	or     cl,0x40
c0002218:	88 0f                	mov    BYTE PTR [edi],cl
c000221a:	58                   	pop    eax
c000221b:	5b                   	pop    ebx
c000221c:	5e                   	pop    esi
c000221d:	5f                   	pop    edi
c000221e:	5d                   	pop    ebp
c000221f:	c3                   	ret    

c0002220 <gen_numname>:
c0002220:	57                   	push   edi
c0002221:	89 cf                	mov    edi,ecx
c0002223:	56                   	push   esi
c0002224:	b9 0b 00 00 00       	mov    ecx,0xb
c0002229:	53                   	push   ebx
c000222a:	89 c6                	mov    esi,eax
c000222c:	83 ec 10             	sub    esp,0x10
c000222f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002233:	e8 bd fc ff ff       	call   c0001ef5 <mem_cpy>
c0002238:	83 fb 05             	cmp    ebx,0x5
c000223b:	76 2b                	jbe    c0002268 <gen_numname+0x48>
c000223d:	0f b7 07             	movzx  eax,WORD PTR [edi]
c0002240:	85 c0                	test   eax,eax
c0002242:	74 24                	je     c0002268 <gen_numname+0x48>
c0002244:	83 c7 02             	add    edi,0x2
c0002247:	ba 10 00 00 00       	mov    edx,0x10
c000224c:	89 c1                	mov    ecx,eax
c000224e:	01 db                	add    ebx,ebx
c0002250:	d1 e8                	shr    eax,1
c0002252:	83 e1 01             	and    ecx,0x1
c0002255:	01 cb                	add    ebx,ecx
c0002257:	0f ba e3 10          	bt     ebx,0x10
c000225b:	73 06                	jae    c0002263 <gen_numname+0x43>
c000225d:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002263:	4a                   	dec    edx
c0002264:	75 e6                	jne    c000224c <gen_numname+0x2c>
c0002266:	eb d5                	jmp    c000223d <gen_numname+0x1d>
c0002268:	bf 07 00 00 00       	mov    edi,0x7
c000226d:	88 da                	mov    dl,bl
c000226f:	80 e2 0f             	and    dl,0xf
c0002272:	88 d0                	mov    al,dl
c0002274:	04 30                	add    al,0x30
c0002276:	3c 39                	cmp    al,0x39
c0002278:	76 04                	jbe    c000227e <gen_numname+0x5e>
c000227a:	88 d0                	mov    al,dl
c000227c:	04 37                	add    al,0x37
c000227e:	8d 4f ff             	lea    ecx,[edi-0x1]
c0002281:	88 44 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],al
c0002285:	89 d8                	mov    eax,ebx
c0002287:	c1 e8 04             	shr    eax,0x4
c000228a:	83 fb 0f             	cmp    ebx,0xf
c000228d:	76 06                	jbe    c0002295 <gen_numname+0x75>
c000228f:	89 cf                	mov    edi,ecx
c0002291:	89 c3                	mov    ebx,eax
c0002293:	eb d8                	jmp    c000226d <gen_numname+0x4d>
c0002295:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000229a:	31 d2                	xor    edx,edx
c000229c:	83 ef 02             	sub    edi,0x2
c000229f:	8d 04 16             	lea    eax,[esi+edx*1]
c00022a2:	39 ca                	cmp    edx,ecx
c00022a4:	73 18                	jae    c00022be <gen_numname+0x9e>
c00022a6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00022a9:	3c 20                	cmp    al,0x20
c00022ab:	74 11                	je     c00022be <gen_numname+0x9e>
c00022ad:	e8 96 fc ff ff       	call   c0001f48 <dbc_1st>
c00022b2:	85 c0                	test   eax,eax
c00022b4:	74 05                	je     c00022bb <gen_numname+0x9b>
c00022b6:	39 d7                	cmp    edi,edx
c00022b8:	74 04                	je     c00022be <gen_numname+0x9e>
c00022ba:	42                   	inc    edx
c00022bb:	42                   	inc    edx
c00022bc:	eb e1                	jmp    c000229f <gen_numname+0x7f>
c00022be:	83 f9 07             	cmp    ecx,0x7
c00022c1:	b0 20                	mov    al,0x20
c00022c3:	77 05                	ja     c00022ca <gen_numname+0xaa>
c00022c5:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00022c9:	41                   	inc    ecx
c00022ca:	42                   	inc    edx
c00022cb:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00022cf:	83 fa 07             	cmp    edx,0x7
c00022d2:	76 ea                	jbe    c00022be <gen_numname+0x9e>
c00022d4:	83 c4 10             	add    esp,0x10
c00022d7:	5b                   	pop    ebx
c00022d8:	5e                   	pop    esi
c00022d9:	5f                   	pop    edi
c00022da:	c3                   	ret    

c00022db <sum_sfn>:
c00022db:	31 c9                	xor    ecx,ecx
c00022dd:	31 d2                	xor    edx,edx
c00022df:	d0 ca                	ror    dl,1
c00022e1:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00022e4:	41                   	inc    ecx
c00022e5:	83 f9 0b             	cmp    ecx,0xb
c00022e8:	75 f5                	jne    c00022df <sum_sfn+0x4>
c00022ea:	88 d0                	mov    al,dl
c00022ec:	c3                   	ret    

c00022ed <get_ldnumber>:
c00022ed:	57                   	push   edi
c00022ee:	56                   	push   esi
c00022ef:	83 ce ff             	or     esi,0xffffffff
c00022f2:	53                   	push   ebx
c00022f3:	8b 10                	mov    edx,DWORD PTR [eax]
c00022f5:	85 d2                	test   edx,edx
c00022f7:	74 33                	je     c000232c <get_ldnumber+0x3f>
c00022f9:	89 c7                	mov    edi,eax
c00022fb:	89 d1                	mov    ecx,edx
c00022fd:	41                   	inc    ecx
c00022fe:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0002301:	80 fb 1f             	cmp    bl,0x1f
c0002304:	76 05                	jbe    c000230b <get_ldnumber+0x1e>
c0002306:	80 fb 3a             	cmp    bl,0x3a
c0002309:	75 f2                	jne    c00022fd <get_ldnumber+0x10>
c000230b:	31 f6                	xor    esi,esi
c000230d:	80 fb 3a             	cmp    bl,0x3a
c0002310:	75 1a                	jne    c000232c <get_ldnumber+0x3f>
c0002312:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0002315:	83 ce ff             	or     esi,0xffffffff
c0002318:	88 d8                	mov    al,bl
c000231a:	2c 30                	sub    al,0x30
c000231c:	3c 09                	cmp    al,0x9
c000231e:	77 0c                	ja     c000232c <get_ldnumber+0x3f>
c0002320:	83 c2 02             	add    edx,0x2
c0002323:	39 d1                	cmp    ecx,edx
c0002325:	75 05                	jne    c000232c <get_ldnumber+0x3f>
c0002327:	89 0f                	mov    DWORD PTR [edi],ecx
c0002329:	8d 73 d0             	lea    esi,[ebx-0x30]
c000232c:	5b                   	pop    ebx
c000232d:	89 f0                	mov    eax,esi
c000232f:	5e                   	pop    esi
c0002330:	5f                   	pop    edi
c0002331:	c3                   	ret    

c0002332 <validate>:
c0002332:	56                   	push   esi
c0002333:	85 c0                	test   eax,eax
c0002335:	53                   	push   ebx
c0002336:	89 d6                	mov    esi,edx
c0002338:	51                   	push   ecx
c0002339:	75 09                	jne    c0002344 <validate+0x12>
c000233b:	b8 09 00 00 00       	mov    eax,0x9
c0002340:	31 d2                	xor    edx,edx
c0002342:	eb 30                	jmp    c0002374 <validate+0x42>
c0002344:	89 c3                	mov    ebx,eax
c0002346:	8b 00                	mov    eax,DWORD PTR [eax]
c0002348:	85 c0                	test   eax,eax
c000234a:	74 ef                	je     c000233b <validate+0x9>
c000234c:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000234f:	74 ea                	je     c000233b <validate+0x9>
c0002351:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0002354:	66 39 48 06          	cmp    WORD PTR [eax+0x6],cx
c0002358:	75 e1                	jne    c000233b <validate+0x9>
c000235a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235e:	83 ec 0c             	sub    esp,0xc
c0002361:	50                   	push   eax
c0002362:	e8 11 fb ff ff       	call   c0001e78 <disk_status>
c0002367:	83 c4 10             	add    esp,0x10
c000236a:	24 01                	and    al,0x1
c000236c:	84 c0                	test   al,al
c000236e:	75 cb                	jne    c000233b <validate+0x9>
c0002370:	8b 13                	mov    edx,DWORD PTR [ebx]
c0002372:	31 c0                	xor    eax,eax
c0002374:	89 16                	mov    DWORD PTR [esi],edx
c0002376:	5a                   	pop    edx
c0002377:	5b                   	pop    ebx
c0002378:	5e                   	pop    esi
c0002379:	c3                   	ret    

c000237a <sync_window>:
c000237a:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000237e:	74 58                	je     c00023d8 <sync_window+0x5e>
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	51                   	push   ecx
c0002385:	6a 01                	push   0x1
c0002387:	ff 70 30             	push   DWORD PTR [eax+0x30]
c000238a:	8d 70 34             	lea    esi,[eax+0x34]
c000238d:	56                   	push   esi
c000238e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002392:	50                   	push   eax
c0002393:	e8 fc fa ff ff       	call   c0001e94 <disk_write>
c0002398:	83 c4 10             	add    esp,0x10
c000239b:	ba 01 00 00 00       	mov    edx,0x1
c00023a0:	85 c0                	test   eax,eax
c00023a2:	75 2e                	jne    c00023d2 <sync_window+0x58>
c00023a4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023a8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00023ab:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00023ae:	89 c1                	mov    ecx,eax
c00023b0:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00023b3:	39 d1                	cmp    ecx,edx
c00023b5:	73 19                	jae    c00023d0 <sync_window+0x56>
c00023b7:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023bb:	75 13                	jne    c00023d0 <sync_window+0x56>
c00023bd:	6a 01                	push   0x1
c00023bf:	01 d0                	add    eax,edx
c00023c1:	50                   	push   eax
c00023c2:	56                   	push   esi
c00023c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023c7:	50                   	push   eax
c00023c8:	e8 c7 fa ff ff       	call   c0001e94 <disk_write>
c00023cd:	83 c4 10             	add    esp,0x10
c00023d0:	31 d2                	xor    edx,edx
c00023d2:	89 d0                	mov    eax,edx
c00023d4:	5a                   	pop    edx
c00023d5:	5b                   	pop    ebx
c00023d6:	5e                   	pop    esi
c00023d7:	c3                   	ret    
c00023d8:	31 d2                	xor    edx,edx
c00023da:	89 d0                	mov    eax,edx
c00023dc:	c3                   	ret    

c00023dd <move_window>:
c00023dd:	57                   	push   edi
c00023de:	56                   	push   esi
c00023df:	53                   	push   ebx
c00023e0:	31 db                	xor    ebx,ebx
c00023e2:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c00023e5:	74 38                	je     c000241f <move_window+0x42>
c00023e7:	89 c6                	mov    esi,eax
c00023e9:	89 d7                	mov    edi,edx
c00023eb:	e8 8a ff ff ff       	call   c000237a <sync_window>
c00023f0:	85 c0                	test   eax,eax
c00023f2:	89 c3                	mov    ebx,eax
c00023f4:	75 29                	jne    c000241f <move_window+0x42>
c00023f6:	6a 01                	push   0x1
c00023f8:	57                   	push   edi
c00023f9:	8d 46 34             	lea    eax,[esi+0x34]
c00023fc:	50                   	push   eax
c00023fd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002401:	50                   	push   eax
c0002402:	e8 77 fa ff ff       	call   c0001e7e <disk_read>
c0002407:	83 c4 10             	add    esp,0x10
c000240a:	ba 01 00 00 00       	mov    edx,0x1
c000240f:	85 c0                	test   eax,eax
c0002411:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0002416:	0f 45 f8             	cmovne edi,eax
c0002419:	0f 45 da             	cmovne ebx,edx
c000241c:	89 7e 30             	mov    DWORD PTR [esi+0x30],edi
c000241f:	89 d8                	mov    eax,ebx
c0002421:	5b                   	pop    ebx
c0002422:	5e                   	pop    esi
c0002423:	5f                   	pop    edi
c0002424:	c3                   	ret    

c0002425 <check_fs>:
c0002425:	53                   	push   ebx
c0002426:	89 c3                	mov    ebx,eax
c0002428:	83 ec 08             	sub    esp,0x8
c000242b:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000242f:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002436:	e8 a2 ff ff ff       	call   c00023dd <move_window>
c000243b:	ba 04 00 00 00       	mov    edx,0x4
c0002440:	85 c0                	test   eax,eax
c0002442:	75 6a                	jne    c00024ae <check_fs+0x89>
c0002444:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000244a:	e8 7a fa ff ff       	call   c0001ec9 <ld_word>
c000244f:	ba 03 00 00 00       	mov    edx,0x3
c0002454:	66 3d 55 aa          	cmp    ax,0xaa55
c0002458:	75 54                	jne    c00024ae <check_fs+0x89>
c000245a:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c000245d:	88 c2                	mov    dl,al
c000245f:	80 c2 18             	add    dl,0x18
c0002462:	80 fa 01             	cmp    dl,0x1
c0002465:	76 09                	jbe    c0002470 <check_fs+0x4b>
c0002467:	3c eb                	cmp    al,0xeb
c0002469:	ba 02 00 00 00       	mov    edx,0x2
c000246e:	75 3e                	jne    c00024ae <check_fs+0x89>
c0002470:	ba 64 1b 02 c0       	mov    edx,0xc0021b64
c0002475:	b9 03 00 00 00       	mov    ecx,0x3
c000247a:	8d 43 6a             	lea    eax,[ebx+0x6a]
c000247d:	e8 92 fa ff ff       	call   c0001f14 <mem_cmp>
c0002482:	31 d2                	xor    edx,edx
c0002484:	85 c0                	test   eax,eax
c0002486:	74 26                	je     c00024ae <check_fs+0x89>
c0002488:	ba 9c f7 01 c0       	mov    edx,0xc001f79c
c000248d:	b9 05 00 00 00       	mov    ecx,0x5
c0002492:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002498:	e8 77 fa ff ff       	call   c0001f14 <mem_cmp>
c000249d:	31 d2                	xor    edx,edx
c000249f:	85 c0                	test   eax,eax
c00024a1:	74 0b                	je     c00024ae <check_fs+0x89>
c00024a3:	31 d2                	xor    edx,edx
c00024a5:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00024a9:	0f 95 c2             	setne  dl
c00024ac:	01 d2                	add    edx,edx
c00024ae:	83 c4 08             	add    esp,0x8
c00024b1:	89 d0                	mov    eax,edx
c00024b3:	5b                   	pop    ebx
c00024b4:	c3                   	ret    

c00024b5 <find_volume>:
c00024b5:	55                   	push   ebp
c00024b6:	57                   	push   edi
c00024b7:	89 c7                	mov    edi,eax
c00024b9:	56                   	push   esi
c00024ba:	89 d6                	mov    esi,edx
c00024bc:	53                   	push   ebx
c00024bd:	31 d2                	xor    edx,edx
c00024bf:	83 ec 2c             	sub    esp,0x2c
c00024c2:	e8 5e ff ff ff       	call   c0002425 <check_fs>
c00024c7:	85 f6                	test   esi,esi
c00024c9:	0f 94 c3             	sete   bl
c00024cc:	83 f8 02             	cmp    eax,0x2
c00024cf:	74 06                	je     c00024d7 <find_volume+0x22>
c00024d1:	77 5f                	ja     c0002532 <find_volume+0x7d>
c00024d3:	84 db                	test   bl,bl
c00024d5:	75 5b                	jne    c0002532 <find_volume+0x7d>
c00024d7:	8d 87 3a 02 00 00    	lea    eax,[edi+0x23a]
c00024dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024e1:	8d af fa 01 00 00    	lea    ebp,[edi+0x1fa]
c00024e7:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c00024eb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00024ef:	89 e8                	mov    eax,ebp
c00024f1:	83 c5 10             	add    ebp,0x10
c00024f4:	e8 dd f9 ff ff       	call   c0001ed6 <ld_dword>
c00024f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024fd:	83 c1 04             	add    ecx,0x4
c0002500:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0002503:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002507:	75 e2                	jne    c00024eb <find_volume+0x36>
c0002509:	83 fe 01             	cmp    esi,0x1
c000250c:	83 d6 ff             	adc    esi,0xffffffff
c000250f:	8b 54 b4 10          	mov    edx,DWORD PTR [esp+esi*4+0x10]
c0002513:	b8 03 00 00 00       	mov    eax,0x3
c0002518:	85 d2                	test   edx,edx
c000251a:	74 07                	je     c0002523 <find_volume+0x6e>
c000251c:	89 f8                	mov    eax,edi
c000251e:	e8 02 ff ff ff       	call   c0002425 <check_fs>
c0002523:	83 f8 01             	cmp    eax,0x1
c0002526:	76 0a                	jbe    c0002532 <find_volume+0x7d>
c0002528:	84 db                	test   bl,bl
c000252a:	74 06                	je     c0002532 <find_volume+0x7d>
c000252c:	46                   	inc    esi
c000252d:	83 fe 03             	cmp    esi,0x3
c0002530:	76 dd                	jbe    c000250f <find_volume+0x5a>
c0002532:	83 c4 2c             	add    esp,0x2c
c0002535:	5b                   	pop    ebx
c0002536:	5e                   	pop    esi
c0002537:	5f                   	pop    edi
c0002538:	5d                   	pop    ebp
c0002539:	c3                   	ret    

c000253a <mount_volume>:
c000253a:	55                   	push   ebp
c000253b:	89 d5                	mov    ebp,edx
c000253d:	57                   	push   edi
c000253e:	bf 0b 00 00 00       	mov    edi,0xb
c0002543:	56                   	push   esi
c0002544:	53                   	push   ebx
c0002545:	88 cb                	mov    bl,cl
c0002547:	83 ec 2c             	sub    esp,0x2c
c000254a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002550:	e8 98 fd ff ff       	call   c00022ed <get_ldnumber>
c0002555:	85 c0                	test   eax,eax
c0002557:	0f 88 d0 02 00 00    	js     c000282d <mount_volume+0x2f3>
c000255d:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c0002564:	89 c1                	mov    ecx,eax
c0002566:	bf 0c 00 00 00       	mov    edi,0xc
c000256b:	85 f6                	test   esi,esi
c000256d:	0f 84 ba 02 00 00    	je     c000282d <mount_volume+0x2f3>
c0002573:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002576:	80 e3 fe             	and    bl,0xfe
c0002579:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000257c:	74 3d                	je     c00025bb <mount_volume+0x81>
c000257e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002582:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002586:	83 ec 0c             	sub    esp,0xc
c0002589:	50                   	push   eax
c000258a:	e8 e9 f8 ff ff       	call   c0001e78 <disk_status>
c000258f:	83 c4 10             	add    esp,0x10
c0002592:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002596:	88 c2                	mov    dl,al
c0002598:	24 01                	and    al,0x1
c000259a:	84 c0                	test   al,al
c000259c:	75 1d                	jne    c00025bb <mount_volume+0x81>
c000259e:	31 ff                	xor    edi,edi
c00025a0:	84 db                	test   bl,bl
c00025a2:	0f 84 85 02 00 00    	je     c000282d <mount_volume+0x2f3>
c00025a8:	80 e2 04             	and    dl,0x4
c00025ab:	0f 84 7c 02 00 00    	je     c000282d <mount_volume+0x2f3>
c00025b1:	bf 0a 00 00 00       	mov    edi,0xa
c00025b6:	e9 72 02 00 00       	jmp    c000282d <mount_volume+0x2f3>
c00025bb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00025be:	83 ec 0c             	sub    esp,0xc
c00025c1:	0f b6 c9             	movzx  ecx,cl
c00025c4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00025c7:	bf 03 00 00 00       	mov    edi,0x3
c00025cc:	51                   	push   ecx
c00025cd:	e8 a9 f8 ff ff       	call   c0001e7b <disk_initialize>
c00025d2:	83 c4 10             	add    esp,0x10
c00025d5:	88 c1                	mov    cl,al
c00025d7:	80 e1 01             	and    cl,0x1
c00025da:	84 c9                	test   cl,cl
c00025dc:	0f 85 4b 02 00 00    	jne    c000282d <mount_volume+0x2f3>
c00025e2:	84 db                	test   bl,bl
c00025e4:	74 04                	je     c00025ea <mount_volume+0xb0>
c00025e6:	24 04                	and    al,0x4
c00025e8:	75 c7                	jne    c00025b1 <mount_volume+0x77>
c00025ea:	31 d2                	xor    edx,edx
c00025ec:	89 f0                	mov    eax,esi
c00025ee:	e8 c2 fe ff ff       	call   c00024b5 <find_volume>
c00025f3:	bf 01 00 00 00       	mov    edi,0x1
c00025f8:	83 f8 04             	cmp    eax,0x4
c00025fb:	0f 84 2c 02 00 00    	je     c000282d <mount_volume+0x2f3>
c0002601:	83 f8 01             	cmp    eax,0x1
c0002604:	76 0a                	jbe    c0002610 <mount_volume+0xd6>
c0002606:	bf 0d 00 00 00       	mov    edi,0xd
c000260b:	e9 1d 02 00 00       	jmp    c000282d <mount_volume+0x2f3>
c0002610:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002613:	e8 b1 f8 ff ff       	call   c0001ec9 <ld_word>
c0002618:	66 3d 00 02          	cmp    ax,0x200
c000261c:	75 e8                	jne    c0002606 <mount_volume+0xcc>
c000261e:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002621:	e8 a3 f8 ff ff       	call   c0001ec9 <ld_word>
c0002626:	0f b7 e8             	movzx  ebp,ax
c0002629:	85 ed                	test   ebp,ebp
c000262b:	75 0a                	jne    c0002637 <mount_volume+0xfd>
c000262d:	8d 46 58             	lea    eax,[esi+0x58]
c0002630:	e8 a1 f8 ff ff       	call   c0001ed6 <ld_dword>
c0002635:	89 c5                	mov    ebp,eax
c0002637:	89 6e 1c             	mov    DWORD PTR [esi+0x1c],ebp
c000263a:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000263d:	0f b6 5e 44          	movzx  ebx,BYTE PTR [esi+0x44]
c0002641:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002645:	88 5e 02             	mov    BYTE PTR [esi+0x2],bl
c0002648:	88 d8                	mov    al,bl
c000264a:	fe c8                	dec    al
c000264c:	3c 01                	cmp    al,0x1
c000264e:	77 b6                	ja     c0002606 <mount_volume+0xcc>
c0002650:	0f b6 56 41          	movzx  edx,BYTE PTR [esi+0x41]
c0002654:	66 89 56 0a          	mov    WORD PTR [esi+0xa],dx
c0002658:	66 85 d2             	test   dx,dx
c000265b:	74 a9                	je     c0002606 <mount_volume+0xcc>
c000265d:	0f b6 fa             	movzx  edi,dl
c0002660:	8d 47 ff             	lea    eax,[edi-0x1]
c0002663:	85 f8                	test   eax,edi
c0002665:	75 9f                	jne    c0002606 <mount_volume+0xcc>
c0002667:	8d 46 45             	lea    eax,[esi+0x45]
c000266a:	e8 5a f8 ff ff       	call   c0001ec9 <ld_word>
c000266f:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002673:	0f b7 d0             	movzx  edx,ax
c0002676:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000267a:	f6 c2 0f             	test   dl,0xf
c000267d:	75 87                	jne    c0002606 <mount_volume+0xcc>
c000267f:	8d 46 47             	lea    eax,[esi+0x47]
c0002682:	e8 42 f8 ff ff       	call   c0001ec9 <ld_word>
c0002687:	0f b7 d0             	movzx  edx,ax
c000268a:	85 d2                	test   edx,edx
c000268c:	75 0a                	jne    c0002698 <mount_volume+0x15e>
c000268e:	8d 46 54             	lea    eax,[esi+0x54]
c0002691:	e8 40 f8 ff ff       	call   c0001ed6 <ld_dword>
c0002696:	89 c2                	mov    edx,eax
c0002698:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000269c:	8d 46 42             	lea    eax,[esi+0x42]
c000269f:	e8 25 f8 ff ff       	call   c0001ec9 <ld_word>
c00026a4:	0f b7 c0             	movzx  eax,ax
c00026a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00026ab:	85 c0                	test   eax,eax
c00026ad:	0f 84 53 ff ff ff    	je     c0002606 <mount_volume+0xcc>
c00026b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026b7:	0f af dd             	imul   ebx,ebp
c00026ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00026be:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00026c2:	c1 e9 04             	shr    ecx,0x4
c00026c5:	01 d9                	add    ecx,ebx
c00026c7:	01 c1                	add    ecx,eax
c00026c9:	39 ca                	cmp    edx,ecx
c00026cb:	0f 82 35 ff ff ff    	jb     c0002606 <mount_volume+0xcc>
c00026d1:	89 d3                	mov    ebx,edx
c00026d3:	31 d2                	xor    edx,edx
c00026d5:	29 cb                	sub    ebx,ecx
c00026d7:	89 d8                	mov    eax,ebx
c00026d9:	f7 f7                	div    edi
c00026db:	39 fb                	cmp    ebx,edi
c00026dd:	0f 82 23 ff ff ff    	jb     c0002606 <mount_volume+0xcc>
c00026e3:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026e8:	0f 87 18 ff ff ff    	ja     c0002606 <mount_volume+0xcc>
c00026ee:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026f3:	0f 86 25 01 00 00    	jbe    c000281e <mount_volume+0x2e4>
c00026f9:	bb 03 00 00 00       	mov    ebx,0x3
c00026fe:	8d 78 02             	lea    edi,[eax+0x2]
c0002701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002705:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0002709:	89 7e 18             	mov    DWORD PTR [esi+0x18],edi
c000270c:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000270f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002713:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002717:	83 fb 03             	cmp    ebx,0x3
c000271a:	89 4e 2c             	mov    DWORD PTR [esi+0x2c],ecx
c000271d:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002720:	75 27                	jne    c0002749 <mount_volume+0x20f>
c0002722:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002725:	e8 9f f7 ff ff       	call   c0001ec9 <ld_word>
c000272a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000272e:	0f b7 c0             	movzx  eax,ax
c0002731:	09 c1                	or     ecx,eax
c0002733:	0f 85 cd fe ff ff    	jne    c0002606 <mount_volume+0xcc>
c0002739:	8d 46 60             	lea    eax,[esi+0x60]
c000273c:	e8 95 f7 ff ff       	call   c0001ed6 <ld_dword>
c0002741:	c1 e7 02             	shl    edi,0x2
c0002744:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002747:	eb 25                	jmp    c000276e <mount_volume+0x234>
c0002749:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000274e:	0f 84 b2 fe ff ff    	je     c0002606 <mount_volume+0xcc>
c0002754:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002758:	8d 14 7f             	lea    edx,[edi+edi*2]
c000275b:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000275e:	83 e7 01             	and    edi,0x1
c0002761:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002764:	d1 ea                	shr    edx,1
c0002766:	01 d7                	add    edi,edx
c0002768:	83 fb 02             	cmp    ebx,0x2
c000276b:	0f 44 f9             	cmove  edi,ecx
c000276e:	81 c7 ff 01 00 00    	add    edi,0x1ff
c0002774:	c1 ef 09             	shr    edi,0x9
c0002777:	39 ef                	cmp    edi,ebp
c0002779:	0f 87 87 fe ff ff    	ja     c0002606 <mount_volume+0xcc>
c000277f:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002786:	83 fb 03             	cmp    ebx,0x3
c0002789:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002790:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002794:	75 6e                	jne    c0002804 <mount_volume+0x2ca>
c0002796:	8d 46 64             	lea    eax,[esi+0x64]
c0002799:	e8 2b f7 ff ff       	call   c0001ec9 <ld_word>
c000279e:	66 48                	dec    ax
c00027a0:	75 62                	jne    c0002804 <mount_volume+0x2ca>
c00027a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00027a6:	89 f0                	mov    eax,esi
c00027a8:	42                   	inc    edx
c00027a9:	e8 2f fc ff ff       	call   c00023dd <move_window>
c00027ae:	85 c0                	test   eax,eax
c00027b0:	75 52                	jne    c0002804 <mount_volume+0x2ca>
c00027b2:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00027b6:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00027bc:	e8 08 f7 ff ff       	call   c0001ec9 <ld_word>
c00027c1:	66 3d 55 aa          	cmp    ax,0xaa55
c00027c5:	75 3d                	jne    c0002804 <mount_volume+0x2ca>
c00027c7:	8d 46 34             	lea    eax,[esi+0x34]
c00027ca:	e8 07 f7 ff ff       	call   c0001ed6 <ld_dword>
c00027cf:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027d4:	75 2e                	jne    c0002804 <mount_volume+0x2ca>
c00027d6:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c00027dc:	e8 f5 f6 ff ff       	call   c0001ed6 <ld_dword>
c00027e1:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027e6:	75 1c                	jne    c0002804 <mount_volume+0x2ca>
c00027e8:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c00027ee:	e8 e3 f6 ff ff       	call   c0001ed6 <ld_dword>
c00027f3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00027f6:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c00027fc:	e8 d5 f6 ff ff       	call   c0001ed6 <ld_dword>
c0002801:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002804:	88 1e                	mov    BYTE PTR [esi],bl
c0002806:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c000280c:	31 ff                	xor    edi,edi
c000280e:	40                   	inc    eax
c000280f:	0f b7 c0             	movzx  eax,ax
c0002812:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c0002818:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000281c:	eb 0f                	jmp    c000282d <mount_volume+0x2f3>
c000281e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002823:	19 db                	sbb    ebx,ebx
c0002825:	83 c3 02             	add    ebx,0x2
c0002828:	e9 d1 fe ff ff       	jmp    c00026fe <mount_volume+0x1c4>
c000282d:	83 c4 2c             	add    esp,0x2c
c0002830:	89 f8                	mov    eax,edi
c0002832:	5b                   	pop    ebx
c0002833:	5e                   	pop    esi
c0002834:	5f                   	pop    edi
c0002835:	5d                   	pop    ebp
c0002836:	c3                   	ret    

c0002837 <put_fat>:
c0002837:	55                   	push   ebp
c0002838:	bd 02 00 00 00       	mov    ebp,0x2
c000283d:	57                   	push   edi
c000283e:	56                   	push   esi
c000283f:	53                   	push   ebx
c0002840:	83 ec 1c             	sub    esp,0x1c
c0002843:	83 fa 01             	cmp    edx,0x1
c0002846:	0f 86 35 01 00 00    	jbe    c0002981 <put_fat+0x14a>
c000284c:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000284f:	0f 86 2c 01 00 00    	jbe    c0002981 <put_fat+0x14a>
c0002855:	89 c7                	mov    edi,eax
c0002857:	8a 00                	mov    al,BYTE PTR [eax]
c0002859:	89 cb                	mov    ebx,ecx
c000285b:	89 d6                	mov    esi,edx
c000285d:	3c 02                	cmp    al,0x2
c000285f:	0f 84 b0 00 00 00    	je     c0002915 <put_fat+0xde>
c0002865:	3c 03                	cmp    al,0x3
c0002867:	0f 84 d5 00 00 00    	je     c0002942 <put_fat+0x10b>
c000286d:	fe c8                	dec    al
c000286f:	0f 85 0c 01 00 00    	jne    c0002981 <put_fat+0x14a>
c0002875:	89 d1                	mov    ecx,edx
c0002877:	89 f8                	mov    eax,edi
c0002879:	d1 e9                	shr    ecx,1
c000287b:	01 d1                	add    ecx,edx
c000287d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002881:	89 ca                	mov    edx,ecx
c0002883:	c1 ea 09             	shr    edx,0x9
c0002886:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002889:	e8 4f fb ff ff       	call   c00023dd <move_window>
c000288e:	85 c0                	test   eax,eax
c0002890:	89 c5                	mov    ebp,eax
c0002892:	0f 85 e9 00 00 00    	jne    c0002981 <put_fat+0x14a>
c0002898:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000289c:	8d 47 34             	lea    eax,[edi+0x34]
c000289f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00028a3:	8d 41 01             	lea    eax,[ecx+0x1]
c00028a6:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00028ac:	03 4c 24 04          	add    ecx,DWORD PTR [esp+0x4]
c00028b0:	83 e6 01             	and    esi,0x1
c00028b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00028b7:	88 d8                	mov    al,bl
c00028b9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00028bd:	74 0b                	je     c00028ca <put_fat+0x93>
c00028bf:	8a 01                	mov    al,BYTE PTR [ecx]
c00028c1:	89 da                	mov    edx,ebx
c00028c3:	c1 e2 04             	shl    edx,0x4
c00028c6:	24 0f                	and    al,0xf
c00028c8:	08 d0                	or     al,dl
c00028ca:	88 01                	mov    BYTE PTR [ecx],al
c00028cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028d0:	89 f8                	mov    eax,edi
c00028d2:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c00028d6:	c1 ea 09             	shr    edx,0x9
c00028d9:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00028dc:	e8 fc fa ff ff       	call   c00023dd <move_window>
c00028e1:	85 c0                	test   eax,eax
c00028e3:	89 c5                	mov    ebp,eax
c00028e5:	0f 85 96 00 00 00    	jne    c0002981 <put_fat+0x14a>
c00028eb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028ef:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00028f5:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c00028f9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00028fe:	74 05                	je     c0002905 <put_fat+0xce>
c0002900:	c1 eb 04             	shr    ebx,0x4
c0002903:	eb 0c                	jmp    c0002911 <put_fat+0xda>
c0002905:	8a 06                	mov    al,BYTE PTR [esi]
c0002907:	c1 eb 08             	shr    ebx,0x8
c000290a:	80 e3 0f             	and    bl,0xf
c000290d:	24 f0                	and    al,0xf0
c000290f:	08 c3                	or     bl,al
c0002911:	88 1e                	mov    BYTE PTR [esi],bl
c0002913:	eb 27                	jmp    c000293c <put_fat+0x105>
c0002915:	c1 ea 08             	shr    edx,0x8
c0002918:	89 f8                	mov    eax,edi
c000291a:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000291d:	e8 bb fa ff ff       	call   c00023dd <move_window>
c0002922:	85 c0                	test   eax,eax
c0002924:	89 c5                	mov    ebp,eax
c0002926:	75 59                	jne    c0002981 <put_fat+0x14a>
c0002928:	01 f6                	add    esi,esi
c000292a:	0f b7 d3             	movzx  edx,bx
c000292d:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002933:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0002937:	e8 b2 f5 ff ff       	call   c0001eee <st_word>
c000293c:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002940:	eb 3f                	jmp    c0002981 <put_fat+0x14a>
c0002942:	c1 ea 07             	shr    edx,0x7
c0002945:	89 f8                	mov    eax,edi
c0002947:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000294a:	e8 8e fa ff ff       	call   c00023dd <move_window>
c000294f:	85 c0                	test   eax,eax
c0002951:	89 c5                	mov    ebp,eax
c0002953:	75 2c                	jne    c0002981 <put_fat+0x14a>
c0002955:	c1 e6 02             	shl    esi,0x2
c0002958:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000295e:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002964:	8d 74 37 34          	lea    esi,[edi+esi*1+0x34]
c0002968:	89 f0                	mov    eax,esi
c000296a:	e8 67 f5 ff ff       	call   c0001ed6 <ld_dword>
c000296f:	25 00 00 00 f0       	and    eax,0xf0000000
c0002974:	09 d8                	or     eax,ebx
c0002976:	89 c2                	mov    edx,eax
c0002978:	89 f0                	mov    eax,esi
c000297a:	e8 73 f5 ff ff       	call   c0001ef2 <st_dword>
c000297f:	eb bb                	jmp    c000293c <put_fat+0x105>
c0002981:	83 c4 1c             	add    esp,0x1c
c0002984:	89 e8                	mov    eax,ebp
c0002986:	5b                   	pop    ebx
c0002987:	5e                   	pop    esi
c0002988:	5f                   	pop    edi
c0002989:	5d                   	pop    ebp
c000298a:	c3                   	ret    

c000298b <dir_clear>:
c000298b:	55                   	push   ebp
c000298c:	57                   	push   edi
c000298d:	56                   	push   esi
c000298e:	89 c6                	mov    esi,eax
c0002990:	53                   	push   ebx
c0002991:	83 ec 1c             	sub    esp,0x1c
c0002994:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002998:	e8 dd f9 ff ff       	call   c000237a <sync_window>
c000299d:	85 c0                	test   eax,eax
c000299f:	0f 85 c1 00 00 00    	jne    c0002a66 <dir_clear+0xdb>
c00029a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029a9:	89 f0                	mov    eax,esi
c00029ab:	e8 58 f7 ff ff       	call   c0002108 <clst2sect>
c00029b0:	31 d2                	xor    edx,edx
c00029b2:	b9 00 02 00 00       	mov    ecx,0x200
c00029b7:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c00029ba:	89 c5                	mov    ebp,eax
c00029bc:	8d 46 34             	lea    eax,[esi+0x34]
c00029bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029c3:	e8 42 f5 ff ff       	call   c0001f0a <mem_set>
c00029c8:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00029cc:	b8 00 80 00 00       	mov    eax,0x8000
c00029d1:	c1 e3 09             	shl    ebx,0x9
c00029d4:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00029da:	0f 47 d8             	cmova  ebx,eax
c00029dd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00029e3:	76 16                	jbe    c00029fb <dir_clear+0x70>
c00029e5:	83 ec 0c             	sub    esp,0xc
c00029e8:	53                   	push   ebx
c00029e9:	e8 12 32 00 00       	call   c0005c00 <ff_memalloc>
c00029ee:	83 c4 10             	add    esp,0x10
c00029f1:	85 c0                	test   eax,eax
c00029f3:	89 c7                	mov    edi,eax
c00029f5:	75 76                	jne    c0002a6d <dir_clear+0xe2>
c00029f7:	d1 eb                	shr    ebx,1
c00029f9:	eb e2                	jmp    c00029dd <dir_clear+0x52>
c00029fb:	31 db                	xor    ebx,ebx
c00029fd:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a01:	39 d8                	cmp    eax,ebx
c0002a03:	76 53                	jbe    c0002a58 <dir_clear+0xcd>
c0002a05:	6a 01                	push   0x1
c0002a07:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002a0a:	50                   	push   eax
c0002a0b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002a0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002a13:	50                   	push   eax
c0002a14:	e8 7b f4 ff ff       	call   c0001e94 <disk_write>
c0002a19:	83 c4 10             	add    esp,0x10
c0002a1c:	85 c0                	test   eax,eax
c0002a1e:	75 38                	jne    c0002a58 <dir_clear+0xcd>
c0002a20:	43                   	inc    ebx
c0002a21:	eb da                	jmp    c00029fd <dir_clear+0x72>
c0002a23:	52                   	push   edx
c0002a24:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002a27:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002a2b:	50                   	push   eax
c0002a2c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002a30:	57                   	push   edi
c0002a31:	50                   	push   eax
c0002a32:	e8 5d f4 ff ff       	call   c0001e94 <disk_write>
c0002a37:	83 c4 10             	add    esp,0x10
c0002a3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a3e:	85 c0                	test   eax,eax
c0002a40:	75 0a                	jne    c0002a4c <dir_clear+0xc1>
c0002a42:	01 d3                	add    ebx,edx
c0002a44:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a48:	39 d8                	cmp    eax,ebx
c0002a4a:	77 d7                	ja     c0002a23 <dir_clear+0x98>
c0002a4c:	83 ec 0c             	sub    esp,0xc
c0002a4f:	57                   	push   edi
c0002a50:	e8 bf 31 00 00       	call   c0005c14 <ff_memfree>
c0002a55:	83 c4 10             	add    esp,0x10
c0002a58:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a5c:	39 d8                	cmp    eax,ebx
c0002a5e:	0f 95 c0             	setne  al
c0002a61:	0f b6 c0             	movzx  eax,al
c0002a64:	eb 19                	jmp    c0002a7f <dir_clear+0xf4>
c0002a66:	b8 01 00 00 00       	mov    eax,0x1
c0002a6b:	eb 12                	jmp    c0002a7f <dir_clear+0xf4>
c0002a6d:	89 d9                	mov    ecx,ebx
c0002a6f:	31 d2                	xor    edx,edx
c0002a71:	e8 94 f4 ff ff       	call   c0001f0a <mem_set>
c0002a76:	89 da                	mov    edx,ebx
c0002a78:	31 db                	xor    ebx,ebx
c0002a7a:	c1 ea 09             	shr    edx,0x9
c0002a7d:	eb c5                	jmp    c0002a44 <dir_clear+0xb9>
c0002a7f:	83 c4 1c             	add    esp,0x1c
c0002a82:	5b                   	pop    ebx
c0002a83:	5e                   	pop    esi
c0002a84:	5f                   	pop    edi
c0002a85:	5d                   	pop    ebp
c0002a86:	c3                   	ret    

c0002a87 <create_name>:
c0002a87:	55                   	push   ebp
c0002a88:	89 d1                	mov    ecx,edx
c0002a8a:	57                   	push   edi
c0002a8b:	89 c7                	mov    edi,eax
c0002a8d:	56                   	push   esi
c0002a8e:	31 f6                	xor    esi,esi
c0002a90:	53                   	push   ebx
c0002a91:	83 ec 3c             	sub    esp,0x3c
c0002a94:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a96:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a9a:	8b 07                	mov    eax,DWORD PTR [edi]
c0002a9c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002aa3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002aa7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002aab:	e8 9e f4 ff ff       	call   c0001f4e <tchar2uni>
c0002ab0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002ab4:	83 f8 ff             	cmp    eax,0xffffffff
c0002ab7:	75 0a                	jne    c0002ac3 <create_name+0x3c>
c0002ab9:	b8 06 00 00 00       	mov    eax,0x6
c0002abe:	e9 8c 02 00 00       	jmp    c0002d4f <create_name+0x2c8>
c0002ac3:	3d ff ff 00 00       	cmp    eax,0xffff
c0002ac8:	76 0e                	jbe    c0002ad8 <create_name+0x51>
c0002aca:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0002ace:	89 c2                	mov    edx,eax
c0002ad0:	c1 ea 10             	shr    edx,0x10
c0002ad3:	66 89 14 73          	mov    WORD PTR [ebx+esi*2],dx
c0002ad7:	46                   	inc    esi
c0002ad8:	0f b7 e8             	movzx  ebp,ax
c0002adb:	83 fd 1f             	cmp    ebp,0x1f
c0002ade:	76 3a                	jbe    c0002b1a <create_name+0x93>
c0002ae0:	83 fd 2f             	cmp    ebp,0x2f
c0002ae3:	74 35                	je     c0002b1a <create_name+0x93>
c0002ae5:	83 fd 5c             	cmp    ebp,0x5c
c0002ae8:	74 3e                	je     c0002b28 <create_name+0xa1>
c0002aea:	83 fd 7f             	cmp    ebp,0x7f
c0002aed:	77 18                	ja     c0002b07 <create_name+0x80>
c0002aef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002af3:	89 ea                	mov    edx,ebp
c0002af5:	b8 a2 f7 01 c0       	mov    eax,0xc001f7a2
c0002afa:	e8 38 f4 ff ff       	call   c0001f37 <chk_chr>
c0002aff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002b03:	85 c0                	test   eax,eax
c0002b05:	75 b2                	jne    c0002ab9 <create_name+0x32>
c0002b07:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002b0d:	77 aa                	ja     c0002ab9 <create_name+0x32>
c0002b0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b13:	66 89 2c 70          	mov    WORD PTR [eax+esi*2],bp
c0002b17:	46                   	inc    esi
c0002b18:	eb 89                	jmp    c0002aa3 <create_name+0x1c>
c0002b1a:	83 fd 1f             	cmp    ebp,0x1f
c0002b1d:	b3 04                	mov    bl,0x4
c0002b1f:	76 19                	jbe    c0002b3a <create_name+0xb3>
c0002b21:	eb 05                	jmp    c0002b28 <create_name+0xa1>
c0002b23:	40                   	inc    eax
c0002b24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002b28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0002b2e:	80 fa 2f             	cmp    dl,0x2f
c0002b31:	74 f0                	je     c0002b23 <create_name+0x9c>
c0002b33:	80 fa 5c             	cmp    dl,0x5c
c0002b36:	74 eb                	je     c0002b23 <create_name+0x9c>
c0002b38:	31 db                	xor    ebx,ebx
c0002b3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b3e:	89 01                	mov    DWORD PTR [ecx],eax
c0002b40:	85 f6                	test   esi,esi
c0002b42:	74 16                	je     c0002b5a <create_name+0xd3>
c0002b44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b48:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002b4d:	83 f8 20             	cmp    eax,0x20
c0002b50:	74 05                	je     c0002b57 <create_name+0xd0>
c0002b52:	83 f8 2e             	cmp    eax,0x2e
c0002b55:	75 03                	jne    c0002b5a <create_name+0xd3>
c0002b57:	4e                   	dec    esi
c0002b58:	eb e6                	jmp    c0002b40 <create_name+0xb9>
c0002b5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b5e:	85 f6                	test   esi,esi
c0002b60:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002b66:	0f 84 4d ff ff ff    	je     c0002ab9 <create_name+0x32>
c0002b6c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002b74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002b78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b7c:	0f b7 04 50          	movzx  eax,WORD PTR [eax+edx*2]
c0002b80:	42                   	inc    edx
c0002b81:	83 f8 20             	cmp    eax,0x20
c0002b84:	75 06                	jne    c0002b8c <create_name+0x105>
c0002b86:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b8a:	eb e8                	jmp    c0002b74 <create_name+0xed>
c0002b8c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0002b91:	75 05                	jne    c0002b98 <create_name+0x111>
c0002b93:	83 f8 2e             	cmp    eax,0x2e
c0002b96:	75 08                	jne    c0002ba0 <create_name+0x119>
c0002b98:	80 cb 03             	or     bl,0x3
c0002b9b:	eb 03                	jmp    c0002ba0 <create_name+0x119>
c0002b9d:	4e                   	dec    esi
c0002b9e:	74 0c                	je     c0002bac <create_name+0x125>
c0002ba0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002ba4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002baa:	75 f1                	jne    c0002b9d <create_name+0x116>
c0002bac:	8d 47 20             	lea    eax,[edi+0x20]
c0002baf:	b9 0b 00 00 00       	mov    ecx,0xb
c0002bb4:	ba 20 00 00 00       	mov    edx,0x20
c0002bb9:	31 ed                	xor    ebp,ebp
c0002bbb:	e8 4a f3 ff ff       	call   c0001f0a <mem_set>
c0002bc0:	c7 44 24 1c 08 00 00 00 	mov    DWORD PTR [esp+0x1c],0x8
c0002bc8:	c6 44 24 0c 00       	mov    BYTE PTR [esp+0xc],0x0
c0002bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002bd5:	40                   	inc    eax
c0002bd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002bda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002bde:	0f b7 0c 50          	movzx  ecx,WORD PTR [eax+edx*2]
c0002be2:	85 c9                	test   ecx,ecx
c0002be4:	0f 84 15 01 00 00    	je     c0002cff <create_name+0x278>
c0002bea:	83 f9 20             	cmp    ecx,0x20
c0002bed:	74 0b                	je     c0002bfa <create_name+0x173>
c0002bef:	83 f9 2e             	cmp    ecx,0x2e
c0002bf2:	75 13                	jne    c0002c07 <create_name+0x180>
c0002bf4:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002bf8:	74 0d                	je     c0002c07 <create_name+0x180>
c0002bfa:	80 cb 03             	or     bl,0x3
c0002bfd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002c05:	eb c6                	jmp    c0002bcd <create_name+0x146>
c0002c07:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c0002c0b:	73 06                	jae    c0002c13 <create_name+0x18c>
c0002c0d:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002c11:	75 3a                	jne    c0002c4d <create_name+0x1c6>
c0002c13:	83 7c 24 1c 0b       	cmp    DWORD PTR [esp+0x1c],0xb
c0002c18:	75 08                	jne    c0002c22 <create_name+0x19b>
c0002c1a:	80 cb 03             	or     bl,0x3
c0002c1d:	e9 dd 00 00 00       	jmp    c0002cff <create_name+0x278>
c0002c22:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002c26:	74 0d                	je     c0002c35 <create_name+0x1ae>
c0002c28:	80 cb 03             	or     bl,0x3
c0002c2b:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002c2f:	0f 87 ca 00 00 00    	ja     c0002cff <create_name+0x278>
c0002c35:	c0 64 24 0c 02       	shl    BYTE PTR [esp+0xc],0x2
c0002c3a:	bd 08 00 00 00       	mov    ebp,0x8
c0002c3f:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0002c43:	c7 44 24 1c 0b 00 00 00 	mov    DWORD PTR [esp+0x1c],0xb
c0002c4b:	eb b0                	jmp    c0002bfd <create_name+0x176>
c0002c4d:	83 f9 7f             	cmp    ecx,0x7f
c0002c50:	76 5d                	jbe    c0002caf <create_name+0x228>
c0002c52:	88 da                	mov    dl,bl
c0002c54:	80 ca 02             	or     dl,0x2
c0002c57:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c0002c5b:	50                   	push   eax
c0002c5c:	50                   	push   eax
c0002c5d:	68 b5 01 00 00       	push   0x1b5
c0002c62:	51                   	push   ecx
c0002c63:	e8 c0 2f 00 00       	call   c0005c28 <ff_uni2oem>
c0002c68:	83 c4 10             	add    esp,0x10
c0002c6b:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0002c6f:	0f b7 c8             	movzx  ecx,ax
c0002c72:	f6 c1 80             	test   cl,0x80
c0002c75:	74 0c                	je     c0002c83 <create_name+0x1fc>
c0002c77:	83 e1 7f             	and    ecx,0x7f
c0002c7a:	0f b6 89 60 f8 01 c0 	movzx  ecx,BYTE PTR [ecx-0x3ffe07a0]
c0002c81:	eb 26                	jmp    c0002ca9 <create_name+0x222>
c0002c83:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002c89:	76 1e                	jbe    c0002ca9 <create_name+0x222>
c0002c8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002c8f:	48                   	dec    eax
c0002c90:	39 e8                	cmp    eax,ebp
c0002c92:	77 0c                	ja     c0002ca0 <create_name+0x219>
c0002c94:	80 cb 03             	or     bl,0x3
c0002c97:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0002c9b:	e9 5d ff ff ff       	jmp    c0002bfd <create_name+0x176>
c0002ca0:	88 6c 2f 20          	mov    BYTE PTR [edi+ebp*1+0x20],ch
c0002ca4:	88 d3                	mov    bl,dl
c0002ca6:	45                   	inc    ebp
c0002ca7:	eb 4c                	jmp    c0002cf5 <create_name+0x26e>
c0002ca9:	85 c9                	test   ecx,ecx
c0002cab:	88 d3                	mov    bl,dl
c0002cad:	74 18                	je     c0002cc7 <create_name+0x240>
c0002caf:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002cb3:	89 ca                	mov    edx,ecx
c0002cb5:	b8 ab f7 01 c0       	mov    eax,0xc001f7ab
c0002cba:	e8 78 f2 ff ff       	call   c0001f37 <chk_chr>
c0002cbf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002cc3:	85 c0                	test   eax,eax
c0002cc5:	74 0a                	je     c0002cd1 <create_name+0x24a>
c0002cc7:	80 cb 03             	or     bl,0x3
c0002cca:	b9 5f 00 00 00       	mov    ecx,0x5f
c0002ccf:	eb 24                	jmp    c0002cf5 <create_name+0x26e>
c0002cd1:	8d 41 bf             	lea    eax,[ecx-0x41]
c0002cd4:	66 83 f8 19          	cmp    ax,0x19
c0002cd8:	77 07                	ja     c0002ce1 <create_name+0x25a>
c0002cda:	80 4c 24 0c 02       	or     BYTE PTR [esp+0xc],0x2
c0002cdf:	eb 14                	jmp    c0002cf5 <create_name+0x26e>
c0002ce1:	8d 41 9f             	lea    eax,[ecx-0x61]
c0002ce4:	66 83 f8 19          	cmp    ax,0x19
c0002ce8:	77 0b                	ja     c0002cf5 <create_name+0x26e>
c0002cea:	80 4c 24 0c 01       	or     BYTE PTR [esp+0xc],0x1
c0002cef:	83 e9 20             	sub    ecx,0x20
c0002cf2:	0f b7 c9             	movzx  ecx,cx
c0002cf5:	88 4c 2f 20          	mov    BYTE PTR [edi+ebp*1+0x20],cl
c0002cf9:	45                   	inc    ebp
c0002cfa:	e9 fe fe ff ff       	jmp    c0002bfd <create_name+0x176>
c0002cff:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002d03:	75 04                	jne    c0002d09 <create_name+0x282>
c0002d05:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002d09:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0002d0e:	75 05                	jne    c0002d15 <create_name+0x28e>
c0002d10:	c0 64 24 0c 02       	shl    BYTE PTR [esp+0xc],0x2
c0002d15:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002d19:	24 0c                	and    al,0xc
c0002d1b:	3c 0c                	cmp    al,0xc
c0002d1d:	74 0a                	je     c0002d29 <create_name+0x2a2>
c0002d1f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002d23:	24 03                	and    al,0x3
c0002d25:	3c 03                	cmp    al,0x3
c0002d27:	75 05                	jne    c0002d2e <create_name+0x2a7>
c0002d29:	80 cb 02             	or     bl,0x2
c0002d2c:	eb 1c                	jmp    c0002d4a <create_name+0x2c3>
c0002d2e:	88 d8                	mov    al,bl
c0002d30:	24 02                	and    al,0x2
c0002d32:	75 16                	jne    c0002d4a <create_name+0x2c3>
c0002d34:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002d38:	24 01                	and    al,0x1
c0002d3a:	74 03                	je     c0002d3f <create_name+0x2b8>
c0002d3c:	80 cb 10             	or     bl,0x10
c0002d3f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002d43:	24 04                	and    al,0x4
c0002d45:	74 03                	je     c0002d4a <create_name+0x2c3>
c0002d47:	80 cb 08             	or     bl,0x8
c0002d4a:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002d4d:	31 c0                	xor    eax,eax
c0002d4f:	83 c4 3c             	add    esp,0x3c
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	5f                   	pop    edi
c0002d55:	5d                   	pop    ebp
c0002d56:	c3                   	ret    

c0002d57 <cmp_lfn>:
c0002d57:	55                   	push   ebp
c0002d58:	57                   	push   edi
c0002d59:	89 d7                	mov    edi,edx
c0002d5b:	56                   	push   esi
c0002d5c:	53                   	push   ebx
c0002d5d:	83 ec 1c             	sub    esp,0x1c
c0002d60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d64:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002d67:	e8 5d f1 ff ff       	call   c0001ec9 <ld_word>
c0002d6c:	66 85 c0             	test   ax,ax
c0002d6f:	74 07                	je     c0002d78 <cmp_lfn+0x21>
c0002d71:	31 c0                	xor    eax,eax
c0002d73:	e9 a0 00 00 00       	jmp    c0002e18 <cmp_lfn+0xc1>
c0002d78:	0f b6 1f             	movzx  ebx,BYTE PTR [edi]
c0002d7b:	bd 01 00 00 00       	mov    ebp,0x1
c0002d80:	31 c9                	xor    ecx,ecx
c0002d82:	83 e3 3f             	and    ebx,0x3f
c0002d85:	4b                   	dec    ebx
c0002d86:	6b db 0d             	imul   ebx,ebx,0xd
c0002d89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d8d:	0f b6 81 e0 f8 01 c0 	movzx  eax,BYTE PTR [ecx-0x3ffe0720]
c0002d94:	01 f8                	add    eax,edi
c0002d96:	e8 2e f1 ff ff       	call   c0001ec9 <ld_word>
c0002d9b:	85 ed                	test   ebp,ebp
c0002d9d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002da1:	0f b7 f0             	movzx  esi,ax
c0002da4:	74 41                	je     c0002de7 <cmp_lfn+0x90>
c0002da6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002daa:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002db0:	77 bf                	ja     c0002d71 <cmp_lfn+0x1a>
c0002db2:	83 ec 0c             	sub    esp,0xc
c0002db5:	56                   	push   esi
c0002db6:	e8 81 2f 00 00       	call   c0005d3c <ff_wtoupper>
c0002dbb:	89 c5                	mov    ebp,eax
c0002dbd:	8d 43 01             	lea    eax,[ebx+0x1]
c0002dc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002dc4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002dc8:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002dcc:	89 04 24             	mov    DWORD PTR [esp],eax
c0002dcf:	e8 68 2f 00 00       	call   c0005d3c <ff_wtoupper>
c0002dd4:	83 c4 10             	add    esp,0x10
c0002dd7:	39 c5                	cmp    ebp,eax
c0002dd9:	75 96                	jne    c0002d71 <cmp_lfn+0x1a>
c0002ddb:	89 f5                	mov    ebp,esi
c0002ddd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002de1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002de5:	eb 08                	jmp    c0002def <cmp_lfn+0x98>
c0002de7:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002ded:	75 82                	jne    c0002d71 <cmp_lfn+0x1a>
c0002def:	41                   	inc    ecx
c0002df0:	83 f9 0d             	cmp    ecx,0xd
c0002df3:	75 94                	jne    c0002d89 <cmp_lfn+0x32>
c0002df5:	8a 07                	mov    al,BYTE PTR [edi]
c0002df7:	c0 e8 06             	shr    al,0x6
c0002dfa:	24 01                	and    al,0x1
c0002dfc:	74 15                	je     c0002e13 <cmp_lfn+0xbc>
c0002dfe:	85 ed                	test   ebp,ebp
c0002e00:	74 11                	je     c0002e13 <cmp_lfn+0xbc>
c0002e02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e06:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002e0b:	0f 94 c0             	sete   al
c0002e0e:	0f b6 c0             	movzx  eax,al
c0002e11:	eb 05                	jmp    c0002e18 <cmp_lfn+0xc1>
c0002e13:	b8 01 00 00 00       	mov    eax,0x1
c0002e18:	83 c4 1c             	add    esp,0x1c
c0002e1b:	5b                   	pop    ebx
c0002e1c:	5e                   	pop    esi
c0002e1d:	5f                   	pop    edi
c0002e1e:	5d                   	pop    ebp
c0002e1f:	c3                   	ret    

c0002e20 <sync_fs>:
c0002e20:	56                   	push   esi
c0002e21:	53                   	push   ebx
c0002e22:	53                   	push   ebx
c0002e23:	89 c3                	mov    ebx,eax
c0002e25:	e8 50 f5 ff ff       	call   c000237a <sync_window>
c0002e2a:	85 c0                	test   eax,eax
c0002e2c:	0f 85 9a 00 00 00    	jne    c0002ecc <sync_fs+0xac>
c0002e32:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002e35:	75 7b                	jne    c0002eb2 <sync_fs+0x92>
c0002e37:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002e3b:	75 75                	jne    c0002eb2 <sync_fs+0x92>
c0002e3d:	8d 73 34             	lea    esi,[ebx+0x34]
c0002e40:	b9 00 02 00 00       	mov    ecx,0x200
c0002e45:	31 d2                	xor    edx,edx
c0002e47:	89 f0                	mov    eax,esi
c0002e49:	e8 bc f0 ff ff       	call   c0001f0a <mem_set>
c0002e4e:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002e54:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002e59:	e8 90 f0 ff ff       	call   c0001eee <st_word>
c0002e5e:	ba 52 52 61 41       	mov    edx,0x41615252
c0002e63:	89 f0                	mov    eax,esi
c0002e65:	e8 88 f0 ff ff       	call   c0001ef2 <st_dword>
c0002e6a:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002e70:	ba 72 72 41 61       	mov    edx,0x61417272
c0002e75:	e8 78 f0 ff ff       	call   c0001ef2 <st_dword>
c0002e7a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e7d:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e83:	e8 6a f0 ff ff       	call   c0001ef2 <st_dword>
c0002e88:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e8b:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e91:	e8 5c f0 ff ff       	call   c0001ef2 <st_dword>
c0002e96:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e99:	6a 01                	push   0x1
c0002e9b:	40                   	inc    eax
c0002e9c:	50                   	push   eax
c0002e9d:	56                   	push   esi
c0002e9e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ea1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ea5:	50                   	push   eax
c0002ea6:	e8 e9 ef ff ff       	call   c0001e94 <disk_write>
c0002eab:	83 c4 10             	add    esp,0x10
c0002eae:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002eb2:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002eb6:	51                   	push   ecx
c0002eb7:	6a 00                	push   0x0
c0002eb9:	6a 00                	push   0x0
c0002ebb:	50                   	push   eax
c0002ebc:	e8 e9 ef ff ff       	call   c0001eaa <disk_ioctl>
c0002ec1:	83 c4 10             	add    esp,0x10
c0002ec4:	85 c0                	test   eax,eax
c0002ec6:	0f 95 c0             	setne  al
c0002ec9:	0f b6 c0             	movzx  eax,al
c0002ecc:	5a                   	pop    edx
c0002ecd:	5b                   	pop    ebx
c0002ece:	5e                   	pop    esi
c0002ecf:	c3                   	ret    

c0002ed0 <create_partition>:
c0002ed0:	55                   	push   ebp
c0002ed1:	0f b6 c0             	movzx  eax,al
c0002ed4:	57                   	push   edi
c0002ed5:	56                   	push   esi
c0002ed6:	53                   	push   ebx
c0002ed7:	83 ec 40             	sub    esp,0x40
c0002eda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002ede:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002ee2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ee6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002eea:	50                   	push   eax
c0002eeb:	6a 01                	push   0x1
c0002eed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002ef1:	e8 b4 ef ff ff       	call   c0001eaa <disk_ioctl>
c0002ef6:	83 c4 10             	add    esp,0x10
c0002ef9:	85 c0                	test   eax,eax
c0002efb:	0f 85 66 01 00 00    	jne    c0003067 <create_partition+0x197>
c0002f01:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002f05:	b9 05 00 00 00       	mov    ecx,0x5
c0002f0a:	b3 08                	mov    bl,0x8
c0002f0c:	31 d2                	xor    edx,edx
c0002f0e:	0f b6 f3             	movzx  esi,bl
c0002f11:	89 e8                	mov    eax,ebp
c0002f13:	f7 f6                	div    esi
c0002f15:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002f1a:	76 07                	jbe    c0002f23 <create_partition+0x53>
c0002f1c:	00 db                	add    bl,bl
c0002f1e:	49                   	dec    ecx
c0002f1f:	75 eb                	jne    c0002f0c <create_partition+0x3c>
c0002f21:	b3 ff                	mov    bl,0xff
c0002f23:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002f27:	b9 00 02 00 00       	mov    ecx,0x200
c0002f2c:	31 d2                	xor    edx,edx
c0002f2e:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f33:	e8 d2 ef ff ff       	call   c0001f0a <mem_set>
c0002f38:	b9 64 00 00 00       	mov    ecx,0x64
c0002f3d:	89 e8                	mov    eax,ebp
c0002f3f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002f47:	31 d2                	xor    edx,edx
c0002f49:	f7 f1                	div    ecx
c0002f4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f4f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002f53:	8d b0 c6 01 00 00    	lea    esi,[eax+0x1c6]
c0002f59:	0f b6 c3             	movzx  eax,bl
c0002f5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002f60:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0002f65:	0f 96 c2             	setbe  dl
c0002f68:	85 ff                	test   edi,edi
c0002f6a:	0f 95 c0             	setne  al
c0002f6d:	84 c2                	test   dl,al
c0002f6f:	0f 84 c1 00 00 00    	je     c0003036 <create_partition+0x166>
c0002f75:	39 ef                	cmp    edi,ebp
c0002f77:	0f 83 b9 00 00 00    	jae    c0003036 <create_partition+0x166>
c0002f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002f81:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0002f85:	8b 0c 98             	mov    ecx,DWORD PTR [eax+ebx*4]
c0002f88:	83 f9 64             	cmp    ecx,0x64
c0002f8b:	77 0b                	ja     c0002f98 <create_partition+0xc8>
c0002f8d:	74 07                	je     c0002f96 <create_partition+0xc6>
c0002f8f:	0f af 4c 24 18       	imul   ecx,DWORD PTR [esp+0x18]
c0002f94:	eb 02                	jmp    c0002f98 <create_partition+0xc8>
c0002f96:	89 e9                	mov    ecx,ebp
c0002f98:	89 fa                	mov    edx,edi
c0002f9a:	31 c0                	xor    eax,eax
c0002f9c:	01 ca                	add    edx,ecx
c0002f9e:	73 05                	jae    c0002fa5 <create_partition+0xd5>
c0002fa0:	b8 01 00 00 00       	mov    eax,0x1
c0002fa5:	39 ea                	cmp    edx,ebp
c0002fa7:	77 04                	ja     c0002fad <create_partition+0xdd>
c0002fa9:	85 c0                	test   eax,eax
c0002fab:	74 06                	je     c0002fb3 <create_partition+0xe3>
c0002fad:	89 e9                	mov    ecx,ebp
c0002faf:	29 f9                	sub    ecx,edi
c0002fb1:	eb 04                	jmp    c0002fb7 <create_partition+0xe7>
c0002fb3:	85 c9                	test   ecx,ecx
c0002fb5:	74 7f                	je     c0003036 <create_partition+0x166>
c0002fb7:	89 fa                	mov    edx,edi
c0002fb9:	89 f0                	mov    eax,esi
c0002fbb:	e8 32 ef ff ff       	call   c0001ef2 <st_dword>
c0002fc0:	8d 46 04             	lea    eax,[esi+0x4]
c0002fc3:	bb 3f 00 00 00       	mov    ebx,0x3f
c0002fc8:	83 c6 10             	add    esi,0x10
c0002fcb:	89 ca                	mov    edx,ecx
c0002fcd:	e8 20 ef ff ff       	call   c0001ef2 <st_dword>
c0002fd2:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0002fd6:	31 d2                	xor    edx,edx
c0002fd8:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002fdc:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0002fdf:	89 f8                	mov    eax,edi
c0002fe1:	f7 f3                	div    ebx
c0002fe3:	01 cf                	add    edi,ecx
c0002fe5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002fe9:	31 d2                	xor    edx,edx
c0002feb:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0002fef:	8a 5c 24 1c          	mov    bl,BYTE PTR [esp+0x1c]
c0002ff3:	fe c3                	inc    bl
c0002ff5:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0002ff8:	89 c2                	mov    edx,eax
c0002ffa:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0002ffd:	c1 ea 02             	shr    edx,0x2
c0003000:	8d 47 ff             	lea    eax,[edi-0x1]
c0003003:	80 e2 c0             	and    dl,0xc0
c0003006:	08 da                	or     dl,bl
c0003008:	bb 3f 00 00 00       	mov    ebx,0x3f
c000300d:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0003010:	31 d2                	xor    edx,edx
c0003012:	f7 f3                	div    ebx
c0003014:	89 d1                	mov    ecx,edx
c0003016:	31 d2                	xor    edx,edx
c0003018:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c000301c:	fe c1                	inc    cl
c000301e:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0003021:	89 c3                	mov    ebx,eax
c0003023:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0003026:	c1 eb 02             	shr    ebx,0x2
c0003029:	80 e3 c0             	and    bl,0xc0
c000302c:	08 d9                	or     cl,bl
c000302e:	88 4e ee             	mov    BYTE PTR [esi-0x12],cl
c0003031:	e9 2a ff ff ff       	jmp    c0002f60 <create_partition+0x90>
c0003036:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000303a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000303f:	05 fe 01 00 00       	add    eax,0x1fe
c0003044:	e8 a5 ee ff ff       	call   c0001eee <st_word>
c0003049:	6a 01                	push   0x1
c000304b:	6a 00                	push   0x0
c000304d:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0003051:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003055:	e8 3a ee ff ff       	call   c0001e94 <disk_write>
c000305a:	83 c4 10             	add    esp,0x10
c000305d:	85 c0                	test   eax,eax
c000305f:	0f 95 c0             	setne  al
c0003062:	0f b6 c0             	movzx  eax,al
c0003065:	eb 05                	jmp    c000306c <create_partition+0x19c>
c0003067:	b8 01 00 00 00       	mov    eax,0x1
c000306c:	83 c4 3c             	add    esp,0x3c
c000306f:	5b                   	pop    ebx
c0003070:	5e                   	pop    esi
c0003071:	5f                   	pop    edi
c0003072:	5d                   	pop    ebp
c0003073:	c3                   	ret    

c0003074 <get_fileinfo>:
c0003074:	55                   	push   ebp
c0003075:	57                   	push   edi
c0003076:	56                   	push   esi
c0003077:	53                   	push   ebx
c0003078:	83 ec 1c             	sub    esp,0x1c
c000307b:	8b 30                	mov    esi,DWORD PTR [eax]
c000307d:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0003081:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003085:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003089:	0f 84 bc 01 00 00    	je     c000324b <get_fileinfo+0x1d7>
c000308f:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0003093:	89 d3                	mov    ebx,edx
c0003095:	89 c6                	mov    esi,eax
c0003097:	74 6c                	je     c0003105 <get_fileinfo+0x91>
c0003099:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030a1:	31 ed                	xor    ebp,ebp
c00030a3:	31 ff                	xor    edi,edi
c00030a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00030a9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00030ad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00030b0:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00030b4:	85 c0                	test   eax,eax
c00030b6:	74 3e                	je     c00030f6 <get_fileinfo+0x82>
c00030b8:	85 ed                	test   ebp,ebp
c00030ba:	75 0d                	jne    c00030c9 <get_fileinfo+0x55>
c00030bc:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00030c2:	66 81 fa ff 07       	cmp    dx,0x7ff
c00030c7:	76 22                	jbe    c00030eb <get_fileinfo+0x77>
c00030c9:	89 ea                	mov    edx,ebp
c00030cb:	b9 ff 00 00 00       	mov    ecx,0xff
c00030d0:	c1 e2 10             	shl    edx,0x10
c00030d3:	29 f9                	sub    ecx,edi
c00030d5:	09 d0                	or     eax,edx
c00030d7:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c00030db:	e8 38 ef ff ff       	call   c0002018 <put_utf>
c00030e0:	84 c0                	test   al,al
c00030e2:	74 10                	je     c00030f4 <get_fileinfo+0x80>
c00030e4:	0f b6 c0             	movzx  eax,al
c00030e7:	01 c7                	add    edi,eax
c00030e9:	31 c0                	xor    eax,eax
c00030eb:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c00030f0:	89 c5                	mov    ebp,eax
c00030f2:	eb b1                	jmp    c00030a5 <get_fileinfo+0x31>
c00030f4:	31 ff                	xor    edi,edi
c00030f6:	85 ed                	test   ebp,ebp
c00030f8:	b8 00 00 00 00       	mov    eax,0x0
c00030fd:	0f 45 f8             	cmovne edi,eax
c0003100:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003105:	31 ff                	xor    edi,edi
c0003107:	31 c9                	xor    ecx,ecx
c0003109:	83 f9 0a             	cmp    ecx,0xa
c000310c:	0f 87 a1 00 00 00    	ja     c00031b3 <get_fileinfo+0x13f>
c0003112:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003115:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003118:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c000311c:	83 fa 20             	cmp    edx,0x20
c000311f:	0f 84 87 00 00 00    	je     c00031ac <get_fileinfo+0x138>
c0003125:	83 fa 05             	cmp    edx,0x5
c0003128:	75 05                	jne    c000312f <get_fileinfo+0xbb>
c000312a:	ba e5 00 00 00       	mov    edx,0xe5
c000312f:	83 fd 09             	cmp    ebp,0x9
c0003132:	75 0b                	jne    c000313f <get_fileinfo+0xcb>
c0003134:	83 ff 0b             	cmp    edi,0xb
c0003137:	77 06                	ja     c000313f <get_fileinfo+0xcb>
c0003139:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000313e:	47                   	inc    edi
c000313f:	89 d0                	mov    eax,edx
c0003141:	e8 02 ee ff ff       	call   c0001f48 <dbc_1st>
c0003146:	85 c0                	test   eax,eax
c0003148:	74 2e                	je     c0003178 <get_fileinfo+0x104>
c000314a:	83 fd 08             	cmp    ebp,0x8
c000314d:	74 29                	je     c0003178 <get_fileinfo+0x104>
c000314f:	83 fd 0b             	cmp    ebp,0xb
c0003152:	74 24                	je     c0003178 <get_fileinfo+0x104>
c0003154:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003157:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000315b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000315f:	e8 e7 ed ff ff       	call   c0001f4b <dbc_2nd>
c0003164:	85 c0                	test   eax,eax
c0003166:	74 10                	je     c0003178 <get_fileinfo+0x104>
c0003168:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000316d:	c1 e2 08             	shl    edx,0x8
c0003170:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003173:	09 d0                	or     eax,edx
c0003175:	0f b7 d0             	movzx  edx,ax
c0003178:	50                   	push   eax
c0003179:	50                   	push   eax
c000317a:	68 b5 01 00 00       	push   0x1b5
c000317f:	52                   	push   edx
c0003180:	e8 3f 2b 00 00       	call   c0005cc4 <ff_oem2uni>
c0003185:	83 c4 10             	add    esp,0x10
c0003188:	0f b7 c0             	movzx  eax,ax
c000318b:	85 c0                	test   eax,eax
c000318d:	75 04                	jne    c0003193 <get_fileinfo+0x11f>
c000318f:	31 ff                	xor    edi,edi
c0003191:	eb 20                	jmp    c00031b3 <get_fileinfo+0x13f>
c0003193:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003197:	b9 0c 00 00 00       	mov    ecx,0xc
c000319c:	29 f9                	sub    ecx,edi
c000319e:	e8 75 ee ff ff       	call   c0002018 <put_utf>
c00031a3:	84 c0                	test   al,al
c00031a5:	74 e8                	je     c000318f <get_fileinfo+0x11b>
c00031a7:	0f b6 c0             	movzx  eax,al
c00031aa:	01 c7                	add    edi,eax
c00031ac:	89 e9                	mov    ecx,ebp
c00031ae:	e9 56 ff ff ff       	jmp    c0003109 <get_fileinfo+0x95>
c00031b3:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c00031b8:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c00031bc:	75 59                	jne    c0003217 <get_fileinfo+0x1a3>
c00031be:	85 ff                	test   edi,edi
c00031c0:	75 0b                	jne    c00031cd <get_fileinfo+0x159>
c00031c2:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c00031c6:	b9 01 00 00 00       	mov    ecx,0x1
c00031cb:	eb 38                	jmp    c0003205 <get_fileinfo+0x191>
c00031cd:	b2 08                	mov    dl,0x8
c00031cf:	31 c9                	xor    ecx,ecx
c00031d1:	66 0f be 44 0b 09    	movsx  ax,BYTE PTR [ebx+ecx*1+0x9]
c00031d7:	84 c0                	test   al,al
c00031d9:	74 2a                	je     c0003205 <get_fileinfo+0x191>
c00031db:	0f b7 c0             	movzx  eax,ax
c00031de:	83 f8 2e             	cmp    eax,0x2e
c00031e1:	74 19                	je     c00031fc <get_fileinfo+0x188>
c00031e3:	8d 78 bf             	lea    edi,[eax-0x41]
c00031e6:	66 83 ff 19          	cmp    di,0x19
c00031ea:	77 12                	ja     c00031fe <get_fileinfo+0x18a>
c00031ec:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c00031ef:	84 57 0c             	test   BYTE PTR [edi+0xc],dl
c00031f2:	74 0a                	je     c00031fe <get_fileinfo+0x18a>
c00031f4:	83 c0 20             	add    eax,0x20
c00031f7:	0f b7 c0             	movzx  eax,ax
c00031fa:	eb 02                	jmp    c00031fe <get_fileinfo+0x18a>
c00031fc:	b2 10                	mov    dl,0x10
c00031fe:	88 44 0b 16          	mov    BYTE PTR [ebx+ecx*1+0x16],al
c0003202:	41                   	inc    ecx
c0003203:	eb cc                	jmp    c00031d1 <get_fileinfo+0x15d>
c0003205:	c6 44 0b 16 00       	mov    BYTE PTR [ebx+ecx*1+0x16],0x0
c000320a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000320d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003211:	75 04                	jne    c0003217 <get_fileinfo+0x1a3>
c0003213:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003217:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000321a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000321d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003220:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003223:	83 c0 1c             	add    eax,0x1c
c0003226:	e8 ab ec ff ff       	call   c0001ed6 <ld_dword>
c000322b:	89 03                	mov    DWORD PTR [ebx],eax
c000322d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003230:	83 c0 16             	add    eax,0x16
c0003233:	e8 91 ec ff ff       	call   c0001ec9 <ld_word>
c0003238:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c000323c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000323f:	83 c0 18             	add    eax,0x18
c0003242:	e8 82 ec ff ff       	call   c0001ec9 <ld_word>
c0003247:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000324b:	83 c4 1c             	add    esp,0x1c
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	5f                   	pop    edi
c0003251:	5d                   	pop    ebp
c0003252:	c3                   	ret    

c0003253 <ld_clust.isra.0>:
c0003253:	56                   	push   esi
c0003254:	88 c1                	mov    cl,al
c0003256:	53                   	push   ebx
c0003257:	89 d6                	mov    esi,edx
c0003259:	8d 42 1a             	lea    eax,[edx+0x1a]
c000325c:	e8 68 ec ff ff       	call   c0001ec9 <ld_word>
c0003261:	80 f9 03             	cmp    cl,0x3
c0003264:	0f b7 d8             	movzx  ebx,ax
c0003267:	75 0d                	jne    c0003276 <ld_clust.isra.0+0x23>
c0003269:	8d 46 14             	lea    eax,[esi+0x14]
c000326c:	e8 58 ec ff ff       	call   c0001ec9 <ld_word>
c0003271:	c1 e0 10             	shl    eax,0x10
c0003274:	09 c3                	or     ebx,eax
c0003276:	89 d8                	mov    eax,ebx
c0003278:	5b                   	pop    ebx
c0003279:	5e                   	pop    esi
c000327a:	c3                   	ret    

c000327b <st_clust.isra.1>:
c000327b:	56                   	push   esi
c000327c:	89 c6                	mov    esi,eax
c000327e:	53                   	push   ebx
c000327f:	89 d3                	mov    ebx,edx
c0003281:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003284:	0f b7 d1             	movzx  edx,cx
c0003287:	e8 62 ec ff ff       	call   c0001eee <st_word>
c000328c:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000328f:	75 0f                	jne    c00032a0 <st_clust.isra.1+0x25>
c0003291:	8d 43 14             	lea    eax,[ebx+0x14]
c0003294:	5b                   	pop    ebx
c0003295:	c1 e9 10             	shr    ecx,0x10
c0003298:	89 ca                	mov    edx,ecx
c000329a:	5e                   	pop    esi
c000329b:	e9 4e ec ff ff       	jmp    c0001eee <st_word>
c00032a0:	5b                   	pop    ebx
c00032a1:	5e                   	pop    esi
c00032a2:	c3                   	ret    

c00032a3 <get_fat.isra.2>:
c00032a3:	83 fa 01             	cmp    edx,0x1
c00032a6:	b9 01 00 00 00       	mov    ecx,0x1
c00032ab:	0f 86 f1 00 00 00    	jbe    c00033a2 <get_fat.isra.2+0xff>
c00032b1:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c00032b4:	0f 83 e8 00 00 00    	jae    c00033a2 <get_fat.isra.2+0xff>
c00032ba:	55                   	push   ebp
c00032bb:	57                   	push   edi
c00032bc:	89 c7                	mov    edi,eax
c00032be:	56                   	push   esi
c00032bf:	89 d6                	mov    esi,edx
c00032c1:	53                   	push   ebx
c00032c2:	83 ec 0c             	sub    esp,0xc
c00032c5:	8a 00                	mov    al,BYTE PTR [eax]
c00032c7:	3c 02                	cmp    al,0x2
c00032c9:	74 78                	je     c0003343 <get_fat.isra.2+0xa0>
c00032cb:	3c 03                	cmp    al,0x3
c00032cd:	0f 84 97 00 00 00    	je     c000336a <get_fat.isra.2+0xc7>
c00032d3:	fe c8                	dec    al
c00032d5:	0f 85 bd 00 00 00    	jne    c0003398 <get_fat.isra.2+0xf5>
c00032db:	89 d3                	mov    ebx,edx
c00032dd:	89 f8                	mov    eax,edi
c00032df:	d1 eb                	shr    ebx,1
c00032e1:	01 d3                	add    ebx,edx
c00032e3:	89 da                	mov    edx,ebx
c00032e5:	c1 ea 09             	shr    edx,0x9
c00032e8:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032eb:	e8 ed f0 ff ff       	call   c00023dd <move_window>
c00032f0:	85 c0                	test   eax,eax
c00032f2:	74 08                	je     c00032fc <get_fat.isra.2+0x59>
c00032f4:	83 c9 ff             	or     ecx,0xffffffff
c00032f7:	e9 9c 00 00 00       	jmp    c0003398 <get_fat.isra.2+0xf5>
c00032fc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00032ff:	89 f8                	mov    eax,edi
c0003301:	89 ea                	mov    edx,ebp
c0003303:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003309:	c1 ea 09             	shr    edx,0x9
c000330c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003310:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003313:	e8 c5 f0 ff ff       	call   c00023dd <move_window>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 d8                	jne    c00032f4 <get_fat.isra.2+0x51>
c000331c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003322:	0f b6 c3             	movzx  eax,bl
c0003325:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000332a:	c1 e3 08             	shl    ebx,0x8
c000332d:	09 c3                	or     ebx,eax
c000332f:	89 d9                	mov    ecx,ebx
c0003331:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003337:	83 e6 01             	and    esi,0x1
c000333a:	74 5c                	je     c0003398 <get_fat.isra.2+0xf5>
c000333c:	89 d9                	mov    ecx,ebx
c000333e:	c1 e9 04             	shr    ecx,0x4
c0003341:	eb 55                	jmp    c0003398 <get_fat.isra.2+0xf5>
c0003343:	c1 ea 08             	shr    edx,0x8
c0003346:	89 f8                	mov    eax,edi
c0003348:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000334b:	e8 8d f0 ff ff       	call   c00023dd <move_window>
c0003350:	85 c0                	test   eax,eax
c0003352:	75 a0                	jne    c00032f4 <get_fat.isra.2+0x51>
c0003354:	01 f6                	add    esi,esi
c0003356:	81 e6 fe 01 00 00    	and    esi,0x1fe
c000335c:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0003360:	e8 64 eb ff ff       	call   c0001ec9 <ld_word>
c0003365:	0f b7 c8             	movzx  ecx,ax
c0003368:	eb 2e                	jmp    c0003398 <get_fat.isra.2+0xf5>
c000336a:	c1 ea 07             	shr    edx,0x7
c000336d:	89 f8                	mov    eax,edi
c000336f:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003372:	e8 66 f0 ff ff       	call   c00023dd <move_window>
c0003377:	85 c0                	test   eax,eax
c0003379:	0f 85 75 ff ff ff    	jne    c00032f4 <get_fat.isra.2+0x51>
c000337f:	c1 e6 02             	shl    esi,0x2
c0003382:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003388:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000338c:	e8 45 eb ff ff       	call   c0001ed6 <ld_dword>
c0003391:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003396:	89 c1                	mov    ecx,eax
c0003398:	83 c4 0c             	add    esp,0xc
c000339b:	89 c8                	mov    eax,ecx
c000339d:	5b                   	pop    ebx
c000339e:	5e                   	pop    esi
c000339f:	5f                   	pop    edi
c00033a0:	5d                   	pop    ebp
c00033a1:	c3                   	ret    
c00033a2:	89 c8                	mov    eax,ecx
c00033a4:	c3                   	ret    

c00033a5 <dir_sdi>:
c00033a5:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c00033ab:	0f 87 b6 00 00 00    	ja     c0003467 <dir_sdi+0xc2>
c00033b1:	55                   	push   ebp
c00033b2:	57                   	push   edi
c00033b3:	56                   	push   esi
c00033b4:	53                   	push   ebx
c00033b5:	89 d3                	mov    ebx,edx
c00033b7:	83 ec 1c             	sub    esp,0x1c
c00033ba:	f6 c2 1f             	test   dl,0x1f
c00033bd:	74 0a                	je     c00033c9 <dir_sdi+0x24>
c00033bf:	b8 02 00 00 00       	mov    eax,0x2
c00033c4:	e9 96 00 00 00       	jmp    c000345f <dir_sdi+0xba>
c00033c9:	89 c6                	mov    esi,eax
c00033cb:	8b 28                	mov    ebp,DWORD PTR [eax]
c00033cd:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c00033d0:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c00033d3:	85 ff                	test   edi,edi
c00033d5:	75 21                	jne    c00033f8 <dir_sdi+0x53>
c00033d7:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c00033db:	76 07                	jbe    c00033e4 <dir_sdi+0x3f>
c00033dd:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033e0:	85 c0                	test   eax,eax
c00033e2:	75 12                	jne    c00033f6 <dir_sdi+0x51>
c00033e4:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00033e8:	89 da                	mov    edx,ebx
c00033ea:	c1 ea 05             	shr    edx,0x5
c00033ed:	39 c2                	cmp    edx,eax
c00033ef:	73 ce                	jae    c00033bf <dir_sdi+0x1a>
c00033f1:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033f4:	eb 3c                	jmp    c0003432 <dir_sdi+0x8d>
c00033f6:	89 c7                	mov    edi,eax
c00033f8:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033fc:	c1 e1 09             	shl    ecx,0x9
c00033ff:	39 cb                	cmp    ebx,ecx
c0003401:	72 26                	jb     c0003429 <dir_sdi+0x84>
c0003403:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003407:	8b 06                	mov    eax,DWORD PTR [esi]
c0003409:	89 fa                	mov    edx,edi
c000340b:	e8 93 fe ff ff       	call   c00032a3 <get_fat.isra.2>
c0003410:	83 f8 ff             	cmp    eax,0xffffffff
c0003413:	89 c7                	mov    edi,eax
c0003415:	74 43                	je     c000345a <dir_sdi+0xb5>
c0003417:	83 f8 01             	cmp    eax,0x1
c000341a:	76 a3                	jbe    c00033bf <dir_sdi+0x1a>
c000341c:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c000341f:	76 9e                	jbe    c00033bf <dir_sdi+0x1a>
c0003421:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003425:	29 cb                	sub    ebx,ecx
c0003427:	eb d6                	jmp    c00033ff <dir_sdi+0x5a>
c0003429:	89 fa                	mov    edx,edi
c000342b:	89 e8                	mov    eax,ebp
c000342d:	e8 d6 ec ff ff       	call   c0002108 <clst2sect>
c0003432:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003435:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c0003438:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c000343b:	85 d2                	test   edx,edx
c000343d:	74 80                	je     c00033bf <dir_sdi+0x1a>
c000343f:	89 d8                	mov    eax,ebx
c0003441:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003447:	c1 e8 09             	shr    eax,0x9
c000344a:	01 d0                	add    eax,edx
c000344c:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344f:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003453:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003456:	31 c0                	xor    eax,eax
c0003458:	eb 05                	jmp    c000345f <dir_sdi+0xba>
c000345a:	b8 01 00 00 00       	mov    eax,0x1
c000345f:	83 c4 1c             	add    esp,0x1c
c0003462:	5b                   	pop    ebx
c0003463:	5e                   	pop    esi
c0003464:	5f                   	pop    edi
c0003465:	5d                   	pop    ebp
c0003466:	c3                   	ret    
c0003467:	b8 02 00 00 00       	mov    eax,0x2
c000346c:	c3                   	ret    

c000346d <create_chain>:
c000346d:	55                   	push   ebp
c000346e:	89 c5                	mov    ebp,eax
c0003470:	57                   	push   edi
c0003471:	89 d7                	mov    edi,edx
c0003473:	56                   	push   esi
c0003474:	53                   	push   ebx
c0003475:	83 ec 1c             	sub    esp,0x1c
c0003478:	85 d2                	test   edx,edx
c000347a:	8b 18                	mov    ebx,DWORD PTR [eax]
c000347c:	75 0e                	jne    c000348c <create_chain+0x1f>
c000347e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003481:	85 c9                	test   ecx,ecx
c0003483:	74 32                	je     c00034b7 <create_chain+0x4a>
c0003485:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003488:	77 32                	ja     c00034bc <create_chain+0x4f>
c000348a:	eb 2b                	jmp    c00034b7 <create_chain+0x4a>
c000348c:	89 d8                	mov    eax,ebx
c000348e:	e8 10 fe ff ff       	call   c00032a3 <get_fat.isra.2>
c0003493:	83 f8 01             	cmp    eax,0x1
c0003496:	77 0a                	ja     c00034a2 <create_chain+0x35>
c0003498:	b8 01 00 00 00       	mov    eax,0x1
c000349d:	e9 f8 00 00 00       	jmp    c000359a <create_chain+0x12d>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 ec 00 00 00    	je     c0003597 <create_chain+0x12a>
c00034ab:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034ae:	89 f9                	mov    ecx,edi
c00034b0:	76 0a                	jbe    c00034bc <create_chain+0x4f>
c00034b2:	e9 e3 00 00 00       	jmp    c000359a <create_chain+0x12d>
c00034b7:	b9 01 00 00 00       	mov    ecx,0x1
c00034bc:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00034c0:	75 07                	jne    c00034c9 <create_chain+0x5c>
c00034c2:	31 c0                	xor    eax,eax
c00034c4:	e9 d1 00 00 00       	jmp    c000359a <create_chain+0x12d>
c00034c9:	39 f9                	cmp    ecx,edi
c00034cb:	75 49                	jne    c0003516 <create_chain+0xa9>
c00034cd:	8d 71 01             	lea    esi,[ecx+0x1]
c00034d0:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034d3:	77 05                	ja     c00034da <create_chain+0x6d>
c00034d5:	be 02 00 00 00       	mov    esi,0x2
c00034da:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e1:	89 f2                	mov    edx,esi
c00034e3:	e8 bb fd ff ff       	call   c00032a3 <get_fat.isra.2>
c00034e8:	83 f8 01             	cmp    eax,0x1
c00034eb:	0f 84 a9 00 00 00    	je     c000359a <create_chain+0x12d>
c00034f1:	83 f8 ff             	cmp    eax,0xffffffff
c00034f4:	0f 84 a0 00 00 00    	je     c000359a <create_chain+0x12d>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003500:	74 10                	je     c0003512 <create_chain+0xa5>
c0003502:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003505:	83 f8 01             	cmp    eax,0x1
c0003508:	76 0c                	jbe    c0003516 <create_chain+0xa9>
c000350a:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000350d:	0f 47 c8             	cmova  ecx,eax
c0003510:	eb 04                	jmp    c0003516 <create_chain+0xa9>
c0003512:	85 f6                	test   esi,esi
c0003514:	75 3b                	jne    c0003551 <create_chain+0xe4>
c0003516:	89 ce                	mov    esi,ecx
c0003518:	46                   	inc    esi
c0003519:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c000351c:	77 0a                	ja     c0003528 <create_chain+0xbb>
c000351e:	83 f9 01             	cmp    ecx,0x1
c0003521:	76 9f                	jbe    c00034c2 <create_chain+0x55>
c0003523:	be 02 00 00 00       	mov    esi,0x2
c0003528:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000352c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000352f:	89 f2                	mov    edx,esi
c0003531:	e8 6d fd ff ff       	call   c00032a3 <get_fat.isra.2>
c0003536:	85 c0                	test   eax,eax
c0003538:	74 17                	je     c0003551 <create_chain+0xe4>
c000353a:	83 f8 01             	cmp    eax,0x1
c000353d:	74 5b                	je     c000359a <create_chain+0x12d>
c000353f:	83 f8 ff             	cmp    eax,0xffffffff
c0003542:	74 56                	je     c000359a <create_chain+0x12d>
c0003544:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003548:	39 ce                	cmp    esi,ecx
c000354a:	75 cc                	jne    c0003518 <create_chain+0xab>
c000354c:	e9 71 ff ff ff       	jmp    c00034c2 <create_chain+0x55>
c0003551:	83 c9 ff             	or     ecx,0xffffffff
c0003554:	89 f2                	mov    edx,esi
c0003556:	89 d8                	mov    eax,ebx
c0003558:	e8 da f2 ff ff       	call   c0002837 <put_fat>
c000355d:	85 c0                	test   eax,eax
c000355f:	75 0f                	jne    c0003570 <create_chain+0x103>
c0003561:	85 ff                	test   edi,edi
c0003563:	74 0b                	je     c0003570 <create_chain+0x103>
c0003565:	89 f1                	mov    ecx,esi
c0003567:	89 fa                	mov    edx,edi
c0003569:	89 d8                	mov    eax,ebx
c000356b:	e8 c7 f2 ff ff       	call   c0002837 <put_fat>
c0003570:	85 c0                	test   eax,eax
c0003572:	75 1c                	jne    c0003590 <create_chain+0x123>
c0003574:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003577:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000357a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357d:	8d 57 fe             	lea    edx,[edi-0x2]
c0003580:	39 d0                	cmp    eax,edx
c0003582:	77 04                	ja     c0003588 <create_chain+0x11b>
c0003584:	48                   	dec    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000358c:	89 f0                	mov    eax,esi
c000358e:	eb 0a                	jmp    c000359a <create_chain+0x12d>
c0003590:	48                   	dec    eax
c0003591:	0f 85 01 ff ff ff    	jne    c0003498 <create_chain+0x2b>
c0003597:	83 c8 ff             	or     eax,0xffffffff
c000359a:	83 c4 1c             	add    esp,0x1c
c000359d:	5b                   	pop    ebx
c000359e:	5e                   	pop    esi
c000359f:	5f                   	pop    edi
c00035a0:	5d                   	pop    ebp
c00035a1:	c3                   	ret    

c00035a2 <remove_chain>:
c00035a2:	55                   	push   ebp
c00035a3:	57                   	push   edi
c00035a4:	56                   	push   esi
c00035a5:	89 d6                	mov    esi,edx
c00035a7:	53                   	push   ebx
c00035a8:	83 ec 0c             	sub    esp,0xc
c00035ab:	83 fa 01             	cmp    edx,0x1
c00035ae:	8b 18                	mov    ebx,DWORD PTR [eax]
c00035b0:	76 65                	jbe    c0003617 <remove_chain+0x75>
c00035b2:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c00035b5:	76 60                	jbe    c0003617 <remove_chain+0x75>
c00035b7:	85 c9                	test   ecx,ecx
c00035b9:	89 c5                	mov    ebp,eax
c00035bb:	89 ca                	mov    edx,ecx
c00035bd:	74 0e                	je     c00035cd <remove_chain+0x2b>
c00035bf:	83 c9 ff             	or     ecx,0xffffffff
c00035c2:	89 d8                	mov    eax,ebx
c00035c4:	e8 6e f2 ff ff       	call   c0002837 <put_fat>
c00035c9:	85 c0                	test   eax,eax
c00035cb:	75 56                	jne    c0003623 <remove_chain+0x81>
c00035cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00035d0:	89 f2                	mov    edx,esi
c00035d2:	e8 cc fc ff ff       	call   c00032a3 <get_fat.isra.2>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	89 c7                	mov    edi,eax
c00035db:	75 04                	jne    c00035e1 <remove_chain+0x3f>
c00035dd:	31 c0                	xor    eax,eax
c00035df:	eb 42                	jmp    c0003623 <remove_chain+0x81>
c00035e1:	83 f8 01             	cmp    eax,0x1
c00035e4:	74 31                	je     c0003617 <remove_chain+0x75>
c00035e6:	83 f8 ff             	cmp    eax,0xffffffff
c00035e9:	74 33                	je     c000361e <remove_chain+0x7c>
c00035eb:	31 c9                	xor    ecx,ecx
c00035ed:	89 f2                	mov    edx,esi
c00035ef:	89 d8                	mov    eax,ebx
c00035f1:	e8 41 f2 ff ff       	call   c0002837 <put_fat>
c00035f6:	85 c0                	test   eax,eax
c00035f8:	75 29                	jne    c0003623 <remove_chain+0x81>
c00035fa:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035fd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003600:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003603:	39 c8                	cmp    eax,ecx
c0003605:	73 08                	jae    c000360f <remove_chain+0x6d>
c0003607:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000360b:	40                   	inc    eax
c000360c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000360f:	39 fa                	cmp    edx,edi
c0003611:	89 fe                	mov    esi,edi
c0003613:	77 b8                	ja     c00035cd <remove_chain+0x2b>
c0003615:	eb c6                	jmp    c00035dd <remove_chain+0x3b>
c0003617:	b8 02 00 00 00       	mov    eax,0x2
c000361c:	eb 05                	jmp    c0003623 <remove_chain+0x81>
c000361e:	b8 01 00 00 00       	mov    eax,0x1
c0003623:	83 c4 0c             	add    esp,0xc
c0003626:	5b                   	pop    ebx
c0003627:	5e                   	pop    esi
c0003628:	5f                   	pop    edi
c0003629:	5d                   	pop    ebp
c000362a:	c3                   	ret    

c000362b <dir_next>:
c000362b:	55                   	push   ebp
c000362c:	57                   	push   edi
c000362d:	56                   	push   esi
c000362e:	53                   	push   ebx
c000362f:	83 ec 1c             	sub    esp,0x1c
c0003632:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003635:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003637:	83 c7 20             	add    edi,0x20
c000363a:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c0003640:	76 07                	jbe    c0003649 <dir_next+0x1e>
c0003642:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003649:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	85 f6                	test   esi,esi
c0003653:	0f 84 cd 00 00 00    	je     c0003726 <dir_next+0xfb>
c0003659:	89 c3                	mov    ebx,eax
c000365b:	89 f8                	mov    eax,edi
c000365d:	25 ff 01 00 00       	and    eax,0x1ff
c0003662:	89 d1                	mov    ecx,edx
c0003664:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003668:	0f 85 a8 00 00 00    	jne    c0003716 <dir_next+0xeb>
c000366e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003671:	46                   	inc    esi
c0003672:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003675:	85 d2                	test   edx,edx
c0003677:	75 22                	jne    c000369b <dir_next+0x70>
c0003679:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000367d:	89 fa                	mov    edx,edi
c000367f:	c1 ea 05             	shr    edx,0x5
c0003682:	39 c2                	cmp    edx,eax
c0003684:	0f 82 8c 00 00 00    	jb     c0003716 <dir_next+0xeb>
c000368a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003691:	b9 04 00 00 00       	mov    ecx,0x4
c0003696:	e9 8b 00 00 00       	jmp    c0003726 <dir_next+0xfb>
c000369b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000369f:	89 fe                	mov    esi,edi
c00036a1:	c1 ee 09             	shr    esi,0x9
c00036a4:	48                   	dec    eax
c00036a5:	85 f0                	test   eax,esi
c00036a7:	75 6d                	jne    c0003716 <dir_next+0xeb>
c00036a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036ad:	89 e8                	mov    eax,ebp
c00036af:	e8 ef fb ff ff       	call   c00032a3 <get_fat.isra.2>
c00036b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036b8:	83 f8 01             	cmp    eax,0x1
c00036bb:	89 c6                	mov    esi,eax
c00036bd:	77 07                	ja     c00036c6 <dir_next+0x9b>
c00036bf:	b9 02 00 00 00       	mov    ecx,0x2
c00036c4:	eb 60                	jmp    c0003726 <dir_next+0xfb>
c00036c6:	83 f8 ff             	cmp    eax,0xffffffff
c00036c9:	75 07                	jne    c00036d2 <dir_next+0xa7>
c00036cb:	b9 01 00 00 00       	mov    ecx,0x1
c00036d0:	eb 54                	jmp    c0003726 <dir_next+0xfb>
c00036d2:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00036d5:	77 30                	ja     c0003707 <dir_next+0xdc>
c00036d7:	85 c9                	test   ecx,ecx
c00036d9:	74 af                	je     c000368a <dir_next+0x5f>
c00036db:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00036de:	89 d8                	mov    eax,ebx
c00036e0:	e8 88 fd ff ff       	call   c000346d <create_chain>
c00036e5:	b9 07 00 00 00       	mov    ecx,0x7
c00036ea:	85 c0                	test   eax,eax
c00036ec:	89 c6                	mov    esi,eax
c00036ee:	74 36                	je     c0003726 <dir_next+0xfb>
c00036f0:	83 f8 01             	cmp    eax,0x1
c00036f3:	74 ca                	je     c00036bf <dir_next+0x94>
c00036f5:	83 f8 ff             	cmp    eax,0xffffffff
c00036f8:	74 d1                	je     c00036cb <dir_next+0xa0>
c00036fa:	89 c2                	mov    edx,eax
c00036fc:	89 e8                	mov    eax,ebp
c00036fe:	e8 88 f2 ff ff       	call   c000298b <dir_clear>
c0003703:	85 c0                	test   eax,eax
c0003705:	75 c4                	jne    c00036cb <dir_next+0xa0>
c0003707:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000370a:	89 f2                	mov    edx,esi
c000370c:	89 e8                	mov    eax,ebp
c000370e:	e8 f5 e9 ff ff       	call   c0002108 <clst2sect>
c0003713:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003716:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003719:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000371d:	31 c9                	xor    ecx,ecx
c000371f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003723:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003726:	83 c4 1c             	add    esp,0x1c
c0003729:	89 c8                	mov    eax,ecx
c000372b:	5b                   	pop    ebx
c000372c:	5e                   	pop    esi
c000372d:	5f                   	pop    edi
c000372e:	5d                   	pop    ebp
c000372f:	c3                   	ret    

c0003730 <dir_alloc>:
c0003730:	55                   	push   ebp
c0003731:	89 c5                	mov    ebp,eax
c0003733:	57                   	push   edi
c0003734:	89 d7                	mov    edi,edx
c0003736:	56                   	push   esi
c0003737:	31 d2                	xor    edx,edx
c0003739:	53                   	push   ebx
c000373a:	83 ec 0c             	sub    esp,0xc
c000373d:	8b 30                	mov    esi,DWORD PTR [eax]
c000373f:	e8 61 fc ff ff       	call   c00033a5 <dir_sdi>
c0003744:	85 c0                	test   eax,eax
c0003746:	75 37                	jne    c000377f <dir_alloc+0x4f>
c0003748:	31 db                	xor    ebx,ebx
c000374a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000374d:	89 f0                	mov    eax,esi
c000374f:	e8 89 ec ff ff       	call   c00023dd <move_window>
c0003754:	85 c0                	test   eax,eax
c0003756:	75 27                	jne    c000377f <dir_alloc+0x4f>
c0003758:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c000375b:	8a 12                	mov    dl,BYTE PTR [edx]
c000375d:	80 fa e5             	cmp    dl,0xe5
c0003760:	74 04                	je     c0003766 <dir_alloc+0x36>
c0003762:	84 d2                	test   dl,dl
c0003764:	75 07                	jne    c000376d <dir_alloc+0x3d>
c0003766:	43                   	inc    ebx
c0003767:	39 fb                	cmp    ebx,edi
c0003769:	75 04                	jne    c000376f <dir_alloc+0x3f>
c000376b:	eb 1c                	jmp    c0003789 <dir_alloc+0x59>
c000376d:	31 db                	xor    ebx,ebx
c000376f:	ba 01 00 00 00       	mov    edx,0x1
c0003774:	89 e8                	mov    eax,ebp
c0003776:	e8 b0 fe ff ff       	call   c000362b <dir_next>
c000377b:	85 c0                	test   eax,eax
c000377d:	74 cb                	je     c000374a <dir_alloc+0x1a>
c000377f:	83 f8 04             	cmp    eax,0x4
c0003782:	75 05                	jne    c0003789 <dir_alloc+0x59>
c0003784:	b8 07 00 00 00       	mov    eax,0x7
c0003789:	83 c4 0c             	add    esp,0xc
c000378c:	5b                   	pop    ebx
c000378d:	5e                   	pop    esi
c000378e:	5f                   	pop    edi
c000378f:	5d                   	pop    ebp
c0003790:	c3                   	ret    

c0003791 <dir_read>:
c0003791:	55                   	push   ebp
c0003792:	57                   	push   edi
c0003793:	56                   	push   esi
c0003794:	be 04 00 00 00       	mov    esi,0x4
c0003799:	53                   	push   ebx
c000379a:	89 c3                	mov    ebx,eax
c000379c:	83 ec 1c             	sub    esp,0x1c
c000379f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00037a3:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a5:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037aa:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00037af:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037b2:	85 d2                	test   edx,edx
c00037b4:	0f 84 d8 00 00 00    	je     c0003892 <dir_read+0x101>
c00037ba:	89 e8                	mov    eax,ebp
c00037bc:	e8 1c ec ff ff       	call   c00023dd <move_window>
c00037c1:	85 c0                	test   eax,eax
c00037c3:	89 c6                	mov    esi,eax
c00037c5:	0f 85 d2 00 00 00    	jne    c000389d <dir_read+0x10c>
c00037cb:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00037ce:	8a 0f                	mov    cl,BYTE PTR [edi]
c00037d0:	84 c9                	test   cl,cl
c00037d2:	0f 84 c0 00 00 00    	je     c0003898 <dir_read+0x107>
c00037d8:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c00037db:	24 3f                	and    al,0x3f
c00037dd:	80 f9 e5             	cmp    cl,0xe5
c00037e0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037e3:	0f 84 8f 00 00 00    	je     c0003878 <dir_read+0xe7>
c00037e9:	80 f9 2e             	cmp    cl,0x2e
c00037ec:	0f 84 86 00 00 00    	je     c0003878 <dir_read+0xe7>
c00037f2:	0f b6 d0             	movzx  edx,al
c00037f5:	83 e2 df             	and    edx,0xffffffdf
c00037f8:	83 fa 08             	cmp    edx,0x8
c00037fb:	0f 94 c2             	sete   dl
c00037fe:	0f b6 d2             	movzx  edx,dl
c0003801:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0003805:	75 71                	jne    c0003878 <dir_read+0xe7>
c0003807:	3c 0f                	cmp    al,0xf
c0003809:	75 4c                	jne    c0003857 <dir_read+0xc6>
c000380b:	88 c8                	mov    al,cl
c000380d:	24 40                	and    al,0x40
c000380f:	74 12                	je     c0003823 <dir_read+0x92>
c0003811:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003814:	80 e1 bf             	and    cl,0xbf
c0003817:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000381b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000381e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003821:	eb 06                	jmp    c0003829 <dir_read+0x98>
c0003823:	38 4c 24 0d          	cmp    BYTE PTR [esp+0xd],cl
c0003827:	75 4f                	jne    c0003878 <dir_read+0xe7>
c0003829:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c000382e:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0003832:	38 47 0d             	cmp    BYTE PTR [edi+0xd],al
c0003835:	75 46                	jne    c000387d <dir_read+0xec>
c0003837:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000383b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000383e:	89 fa                	mov    edx,edi
c0003840:	e8 e0 e8 ff ff       	call   c0002125 <pick_lfn>
c0003845:	85 c0                	test   eax,eax
c0003847:	74 34                	je     c000387d <dir_read+0xec>
c0003849:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000384d:	88 c8                	mov    al,cl
c000384f:	fe c8                	dec    al
c0003851:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0003855:	eb 26                	jmp    c000387d <dir_read+0xec>
c0003857:	80 7c 24 0d 00       	cmp    BYTE PTR [esp+0xd],0x0
c000385c:	75 11                	jne    c000386f <dir_read+0xde>
c000385e:	89 f8                	mov    eax,edi
c0003860:	e8 76 ea ff ff       	call   c00022db <sum_sfn>
c0003865:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003869:	75 04                	jne    c000386f <dir_read+0xde>
c000386b:	31 f6                	xor    esi,esi
c000386d:	eb 35                	jmp    c00038a4 <dir_read+0x113>
c000386f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003876:	eb 2c                	jmp    c00038a4 <dir_read+0x113>
c0003878:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c000387d:	31 d2                	xor    edx,edx
c000387f:	89 d8                	mov    eax,ebx
c0003881:	e8 a5 fd ff ff       	call   c000362b <dir_next>
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	0f 84 1f ff ff ff    	je     c00037af <dir_read+0x1e>
c0003890:	eb 0b                	jmp    c000389d <dir_read+0x10c>
c0003892:	85 f6                	test   esi,esi
c0003894:	74 d5                	je     c000386b <dir_read+0xda>
c0003896:	eb 05                	jmp    c000389d <dir_read+0x10c>
c0003898:	be 04 00 00 00       	mov    esi,0x4
c000389d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a4:	83 c4 1c             	add    esp,0x1c
c00038a7:	89 f0                	mov    eax,esi
c00038a9:	5b                   	pop    ebx
c00038aa:	5e                   	pop    esi
c00038ab:	5f                   	pop    edi
c00038ac:	5d                   	pop    ebp
c00038ad:	c3                   	ret    

c00038ae <dir_remove>:
c00038ae:	57                   	push   edi
c00038af:	56                   	push   esi
c00038b0:	53                   	push   ebx
c00038b1:	89 c3                	mov    ebx,eax
c00038b3:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00038b6:	8b 30                	mov    esi,DWORD PTR [eax]
c00038b8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00038bb:	83 fa ff             	cmp    edx,0xffffffff
c00038be:	74 09                	je     c00038c9 <dir_remove+0x1b>
c00038c0:	e8 e0 fa ff ff       	call   c00033a5 <dir_sdi>
c00038c5:	85 c0                	test   eax,eax
c00038c7:	75 34                	jne    c00038fd <dir_remove+0x4f>
c00038c9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038cc:	89 f0                	mov    eax,esi
c00038ce:	e8 0a eb ff ff       	call   c00023dd <move_window>
c00038d3:	85 c0                	test   eax,eax
c00038d5:	75 1c                	jne    c00038f3 <dir_remove+0x45>
c00038d7:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038da:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038dd:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038e1:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038e4:	73 17                	jae    c00038fd <dir_remove+0x4f>
c00038e6:	31 d2                	xor    edx,edx
c00038e8:	89 d8                	mov    eax,ebx
c00038ea:	e8 3c fd ff ff       	call   c000362b <dir_next>
c00038ef:	85 c0                	test   eax,eax
c00038f1:	74 d6                	je     c00038c9 <dir_remove+0x1b>
c00038f3:	83 f8 04             	cmp    eax,0x4
c00038f6:	75 05                	jne    c00038fd <dir_remove+0x4f>
c00038f8:	b8 02 00 00 00       	mov    eax,0x2
c00038fd:	5b                   	pop    ebx
c00038fe:	5e                   	pop    esi
c00038ff:	5f                   	pop    edi
c0003900:	c3                   	ret    

c0003901 <dir_find>:
c0003901:	55                   	push   ebp
c0003902:	31 d2                	xor    edx,edx
c0003904:	57                   	push   edi
c0003905:	56                   	push   esi
c0003906:	53                   	push   ebx
c0003907:	89 c3                	mov    ebx,eax
c0003909:	83 ec 1c             	sub    esp,0x1c
c000390c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000390e:	e8 92 fa ff ff       	call   c00033a5 <dir_sdi>
c0003913:	85 c0                	test   eax,eax
c0003915:	89 c6                	mov    esi,eax
c0003917:	0f 85 03 01 00 00    	jne    c0003a20 <dir_find+0x11f>
c000391d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003924:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c0003929:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c000392e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003931:	89 e8                	mov    eax,ebp
c0003933:	e8 a5 ea ff ff       	call   c00023dd <move_window>
c0003938:	85 c0                	test   eax,eax
c000393a:	89 c6                	mov    esi,eax
c000393c:	0f 85 de 00 00 00    	jne    c0003a20 <dir_find+0x11f>
c0003942:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003945:	8a 0f                	mov    cl,BYTE PTR [edi]
c0003947:	84 c9                	test   cl,cl
c0003949:	0f 84 cc 00 00 00    	je     c0003a1b <dir_find+0x11a>
c000394f:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003952:	88 c2                	mov    dl,al
c0003954:	80 e2 3f             	and    dl,0x3f
c0003957:	80 f9 e5             	cmp    cl,0xe5
c000395a:	88 53 06             	mov    BYTE PTR [ebx+0x6],dl
c000395d:	0f 84 97 00 00 00    	je     c00039fa <dir_find+0xf9>
c0003963:	24 08                	and    al,0x8
c0003965:	74 0b                	je     c0003972 <dir_find+0x71>
c0003967:	80 fa 0f             	cmp    dl,0xf
c000396a:	0f 85 8a 00 00 00    	jne    c00039fa <dir_find+0xf9>
c0003970:	eb 05                	jmp    c0003977 <dir_find+0x76>
c0003972:	80 fa 0f             	cmp    dl,0xf
c0003975:	75 56                	jne    c00039cd <dir_find+0xcc>
c0003977:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000397b:	0f 85 85 00 00 00    	jne    c0003a06 <dir_find+0x105>
c0003981:	88 c8                	mov    al,cl
c0003983:	24 40                	and    al,0x40
c0003985:	74 12                	je     c0003999 <dir_find+0x98>
c0003987:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000398a:	80 e1 bf             	and    cl,0xbf
c000398d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0003991:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003994:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003997:	eb 06                	jmp    c000399f <dir_find+0x9e>
c0003999:	38 4c 24 0d          	cmp    BYTE PTR [esp+0xd],cl
c000399d:	75 62                	jne    c0003a01 <dir_find+0x100>
c000399f:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00039a4:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00039a8:	38 47 0d             	cmp    BYTE PTR [edi+0xd],al
c00039ab:	75 59                	jne    c0003a06 <dir_find+0x105>
c00039ad:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00039b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039b4:	89 fa                	mov    edx,edi
c00039b6:	e8 9c f3 ff ff       	call   c0002d57 <cmp_lfn>
c00039bb:	85 c0                	test   eax,eax
c00039bd:	74 47                	je     c0003a06 <dir_find+0x105>
c00039bf:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00039c3:	88 c8                	mov    al,cl
c00039c5:	fe c8                	dec    al
c00039c7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00039cb:	eb 39                	jmp    c0003a06 <dir_find+0x105>
c00039cd:	80 7c 24 0d 00       	cmp    BYTE PTR [esp+0xd],0x0
c00039d2:	75 0d                	jne    c00039e1 <dir_find+0xe0>
c00039d4:	89 f8                	mov    eax,edi
c00039d6:	e8 00 e9 ff ff       	call   c00022db <sum_sfn>
c00039db:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c00039df:	74 3f                	je     c0003a20 <dir_find+0x11f>
c00039e1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039e5:	75 13                	jne    c00039fa <dir_find+0xf9>
c00039e7:	8d 53 20             	lea    edx,[ebx+0x20]
c00039ea:	b9 0b 00 00 00       	mov    ecx,0xb
c00039ef:	89 f8                	mov    eax,edi
c00039f1:	e8 1e e5 ff ff       	call   c0001f14 <mem_cmp>
c00039f6:	85 c0                	test   eax,eax
c00039f8:	74 26                	je     c0003a20 <dir_find+0x11f>
c00039fa:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a01:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0003a06:	31 d2                	xor    edx,edx
c0003a08:	89 d8                	mov    eax,ebx
c0003a0a:	e8 1c fc ff ff       	call   c000362b <dir_next>
c0003a0f:	85 c0                	test   eax,eax
c0003a11:	89 c6                	mov    esi,eax
c0003a13:	0f 84 15 ff ff ff    	je     c000392e <dir_find+0x2d>
c0003a19:	eb 05                	jmp    c0003a20 <dir_find+0x11f>
c0003a1b:	be 04 00 00 00       	mov    esi,0x4
c0003a20:	83 c4 1c             	add    esp,0x1c
c0003a23:	89 f0                	mov    eax,esi
c0003a25:	5b                   	pop    ebx
c0003a26:	5e                   	pop    esi
c0003a27:	5f                   	pop    edi
c0003a28:	5d                   	pop    ebp
c0003a29:	c3                   	ret    

c0003a2a <follow_path>:
c0003a2a:	56                   	push   esi
c0003a2b:	53                   	push   ebx
c0003a2c:	89 c3                	mov    ebx,eax
c0003a2e:	83 ec 14             	sub    esp,0x14
c0003a31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a35:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a3b:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a3d:	80 fa 2f             	cmp    dl,0x2f
c0003a40:	75 07                	jne    c0003a49 <follow_path+0x1f>
c0003a42:	40                   	inc    eax
c0003a43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a47:	eb ee                	jmp    c0003a37 <follow_path+0xd>
c0003a49:	80 fa 5c             	cmp    dl,0x5c
c0003a4c:	74 f4                	je     c0003a42 <follow_path+0x18>
c0003a4e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a55:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a58:	77 3e                	ja     c0003a98 <follow_path+0x6e>
c0003a5a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a5e:	31 d2                	xor    edx,edx
c0003a60:	89 d8                	mov    eax,ebx
c0003a62:	e8 3e f9 ff ff       	call   c00033a5 <dir_sdi>
c0003a67:	eb 57                	jmp    c0003ac0 <follow_path+0x96>
c0003a69:	89 d8                	mov    eax,ebx
c0003a6b:	e8 91 fe ff ff       	call   c0003901 <dir_find>
c0003a70:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a73:	85 c0                	test   eax,eax
c0003a75:	75 32                	jne    c0003aa9 <follow_path+0x7f>
c0003a77:	80 e2 04             	and    dl,0x4
c0003a7a:	75 44                	jne    c0003ac0 <follow_path+0x96>
c0003a7c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a80:	74 39                	je     c0003abb <follow_path+0x91>
c0003a82:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a85:	25 ff 01 00 00       	and    eax,0x1ff
c0003a8a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a8e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a90:	e8 be f7 ff ff       	call   c0003253 <ld_clust.isra.0>
c0003a95:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a98:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 e4 ef ff ff       	call   c0002a87 <create_name>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 c2                	je     c0003a69 <follow_path+0x3f>
c0003aa7:	eb 17                	jmp    c0003ac0 <follow_path+0x96>
c0003aa9:	83 f8 04             	cmp    eax,0x4
c0003aac:	75 12                	jne    c0003ac0 <follow_path+0x96>
c0003aae:	80 e2 04             	and    dl,0x4
c0003ab1:	ba 05 00 00 00       	mov    edx,0x5
c0003ab6:	0f 44 c2             	cmove  eax,edx
c0003ab9:	eb 05                	jmp    c0003ac0 <follow_path+0x96>
c0003abb:	b8 05 00 00 00       	mov    eax,0x5
c0003ac0:	83 c4 14             	add    esp,0x14
c0003ac3:	5b                   	pop    ebx
c0003ac4:	5e                   	pop    esi
c0003ac5:	c3                   	ret    

c0003ac6 <dir_register>:
c0003ac6:	55                   	push   ebp
c0003ac7:	57                   	push   edi
c0003ac8:	56                   	push   esi
c0003ac9:	be 06 00 00 00       	mov    esi,0x6
c0003ace:	53                   	push   ebx
c0003acf:	83 ec 2c             	sub    esp,0x2c
c0003ad2:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003ad6:	0f 85 65 01 00 00    	jne    c0003c41 <dir_register+0x17b>
c0003adc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ae4:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ae6:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003ae9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003aed:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003af2:	74 06                	je     c0003afa <dir_register+0x34>
c0003af4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003af8:	eb ef                	jmp    c0003ae9 <dir_register+0x23>
c0003afa:	89 c3                	mov    ebx,eax
c0003afc:	b9 0c 00 00 00       	mov    ecx,0xc
c0003b01:	8d 40 20             	lea    eax,[eax+0x20]
c0003b04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003b08:	89 c2                	mov    edx,eax
c0003b0a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b0e:	e8 e2 e3 ff ff       	call   c0001ef5 <mem_cpy>
c0003b13:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b18:	74 48                	je     c0003b62 <dir_register+0x9c>
c0003b1a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b1e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b23:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b26:	55                   	push   ebp
c0003b27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b2b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b2f:	e8 ec e6 ff ff       	call   c0002220 <gen_numname>
c0003b34:	58                   	pop    eax
c0003b35:	89 d8                	mov    eax,ebx
c0003b37:	e8 c5 fd ff ff       	call   c0003901 <dir_find>
c0003b3c:	85 c0                	test   eax,eax
c0003b3e:	89 c6                	mov    esi,eax
c0003b40:	75 10                	jne    c0003b52 <dir_register+0x8c>
c0003b42:	45                   	inc    ebp
c0003b43:	83 fd 64             	cmp    ebp,0x64
c0003b46:	75 db                	jne    c0003b23 <dir_register+0x5d>
c0003b48:	be 07 00 00 00       	mov    esi,0x7
c0003b4d:	e9 ef 00 00 00       	jmp    c0003c41 <dir_register+0x17b>
c0003b52:	83 f8 04             	cmp    eax,0x4
c0003b55:	0f 85 e6 00 00 00    	jne    c0003c41 <dir_register+0x17b>
c0003b5b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b5f:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b62:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b67:	bd 01 00 00 00       	mov    ebp,0x1
c0003b6c:	74 13                	je     c0003b81 <dir_register+0xbb>
c0003b6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b72:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b77:	31 d2                	xor    edx,edx
c0003b79:	83 c0 0c             	add    eax,0xc
c0003b7c:	f7 f1                	div    ecx
c0003b7e:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b81:	89 ea                	mov    edx,ebp
c0003b83:	89 d8                	mov    eax,ebx
c0003b85:	e8 a6 fb ff ff       	call   c0003730 <dir_alloc>
c0003b8a:	85 c0                	test   eax,eax
c0003b8c:	89 c6                	mov    esi,eax
c0003b8e:	0f 85 ad 00 00 00    	jne    c0003c41 <dir_register+0x17b>
c0003b94:	4d                   	dec    ebp
c0003b95:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b99:	74 67                	je     c0003c02 <dir_register+0x13c>
c0003b9b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	c1 e0 05             	shl    eax,0x5
c0003ba3:	29 c2                	sub    edx,eax
c0003ba5:	89 d8                	mov    eax,ebx
c0003ba7:	e8 f9 f7 ff ff       	call   c00033a5 <dir_sdi>
c0003bac:	85 c0                	test   eax,eax
c0003bae:	89 c6                	mov    esi,eax
c0003bb0:	0f 85 8b 00 00 00    	jne    c0003c41 <dir_register+0x17b>
c0003bb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bba:	e8 1c e7 ff ff       	call   c00022db <sum_sfn>
c0003bbf:	0f b6 e8             	movzx  ebp,al
c0003bc2:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bc5:	89 f8                	mov    eax,edi
c0003bc7:	e8 11 e8 ff ff       	call   c00023dd <move_window>
c0003bcc:	85 c0                	test   eax,eax
c0003bce:	89 c6                	mov    esi,eax
c0003bd0:	75 6f                	jne    c0003c41 <dir_register+0x17b>
c0003bd2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003bd7:	83 ec 0c             	sub    esp,0xc
c0003bda:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bdd:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003be0:	55                   	push   ebp
c0003be1:	e8 c2 e5 ff ff       	call   c00021a8 <put_lfn>
c0003be6:	31 d2                	xor    edx,edx
c0003be8:	89 d8                	mov    eax,ebx
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	e8 38 fa ff ff       	call   c000362b <dir_next>
c0003bf3:	83 c4 10             	add    esp,0x10
c0003bf6:	85 c0                	test   eax,eax
c0003bf8:	89 c6                	mov    esi,eax
c0003bfa:	75 45                	jne    c0003c41 <dir_register+0x17b>
c0003bfc:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003c00:	75 c0                	jne    c0003bc2 <dir_register+0xfc>
c0003c02:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003c05:	89 f8                	mov    eax,edi
c0003c07:	e8 d1 e7 ff ff       	call   c00023dd <move_window>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	89 c6                	mov    esi,eax
c0003c10:	75 2f                	jne    c0003c41 <dir_register+0x17b>
c0003c12:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c15:	b9 20 00 00 00       	mov    ecx,0x20
c0003c1a:	31 d2                	xor    edx,edx
c0003c1c:	e8 e9 e2 ff ff       	call   c0001f0a <mem_set>
c0003c21:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c24:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c2d:	e8 c3 e2 ff ff       	call   c0001ef5 <mem_cpy>
c0003c32:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c35:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c38:	24 18                	and    al,0x18
c0003c3a:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c3d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c41:	83 c4 2c             	add    esp,0x2c
c0003c44:	89 f0                	mov    eax,esi
c0003c46:	5b                   	pop    ebx
c0003c47:	5e                   	pop    esi
c0003c48:	5f                   	pop    edi
c0003c49:	5d                   	pop    ebp
c0003c4a:	c3                   	ret    

c0003c4b <f_mount>:
c0003c4b:	53                   	push   ebx
c0003c4c:	83 ec 18             	sub    esp,0x18
c0003c4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c53:	8a 5c 24 28          	mov    bl,BYTE PTR [esp+0x28]
c0003c57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c5b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c5f:	e8 89 e6 ff ff       	call   c00022ed <get_ldnumber>
c0003c64:	89 c2                	mov    edx,eax
c0003c66:	b8 0b 00 00 00       	mov    eax,0xb
c0003c6b:	85 d2                	test   edx,edx
c0003c6d:	78 39                	js     c0003ca8 <f_mount+0x5d>
c0003c6f:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c76:	85 c0                	test   eax,eax
c0003c78:	74 03                	je     c0003c7d <f_mount+0x32>
c0003c7a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c81:	85 c0                	test   eax,eax
c0003c83:	74 03                	je     c0003c88 <f_mount+0x3d>
c0003c85:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c8c:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c93:	31 c0                	xor    eax,eax
c0003c95:	84 db                	test   bl,bl
c0003c97:	74 0f                	je     c0003ca8 <f_mount+0x5d>
c0003c99:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c9d:	31 c9                	xor    ecx,ecx
c0003c9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003ca3:	e8 92 e8 ff ff       	call   c000253a <mount_volume>
c0003ca8:	83 c4 18             	add    esp,0x18
c0003cab:	5b                   	pop    ebx
c0003cac:	c3                   	ret    

c0003cad <f_open>:
c0003cad:	55                   	push   ebp
c0003cae:	b8 09 00 00 00       	mov    eax,0x9
c0003cb3:	57                   	push   edi
c0003cb4:	56                   	push   esi
c0003cb5:	53                   	push   ebx
c0003cb6:	83 ec 5c             	sub    esp,0x5c
c0003cb9:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0003cbd:	8a 5c 24 78          	mov    bl,BYTE PTR [esp+0x78]
c0003cc1:	85 f6                	test   esi,esi
c0003cc3:	0f 84 a6 02 00 00    	je     c0003f6f <f_open+0x2c2>
c0003cc9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ccd:	88 d8                	mov    al,bl
c0003ccf:	24 3f                	and    al,0x3f
c0003cd1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003cd5:	0f b6 c8             	movzx  ecx,al
c0003cd8:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cdc:	e8 59 e8 ff ff       	call   c000253a <mount_volume>
c0003ce1:	85 c0                	test   eax,eax
c0003ce3:	0f 85 80 02 00 00    	jne    c0003f69 <f_open+0x2bc>
c0003ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ced:	83 ec 0c             	sub    esp,0xc
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	68 00 02 00 00       	push   0x200
c0003cf9:	e8 02 1f 00 00       	call   c0005c00 <ff_memalloc>
c0003cfe:	83 c4 10             	add    esp,0x10
c0003d01:	89 c7                	mov    edi,eax
c0003d03:	b8 11 00 00 00       	mov    eax,0x11
c0003d08:	85 ff                	test   edi,edi
c0003d0a:	0f 84 5f 02 00 00    	je     c0003f6f <f_open+0x2c2>
c0003d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d14:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d18:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0003d1b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1f:	e8 06 fd ff ff       	call   c0003a2a <follow_path>
c0003d24:	85 c0                	test   eax,eax
c0003d26:	75 0d                	jne    c0003d35 <f_open+0x88>
c0003d28:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003d2d:	ba 06 00 00 00       	mov    edx,0x6
c0003d32:	0f 48 c2             	cmovs  eax,edx
c0003d35:	f6 c3 1c             	test   bl,0x1c
c0003d38:	0f 84 d2 00 00 00    	je     c0003e10 <f_open+0x163>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xb6>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 06 02 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 72 fd ff ff       	call   c0003ac6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 f5 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003d5c:	80 4c 24 0c 08       	or     BYTE PTR [esp+0xc],0x8
c0003d61:	eb 29                	jmp    c0003d8c <f_open+0xdf>
c0003d63:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003d68:	b8 07 00 00 00       	mov    eax,0x7
c0003d6d:	0f 85 de 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003d73:	88 da                	mov    dl,bl
c0003d75:	b8 08 00 00 00       	mov    eax,0x8
c0003d7a:	80 e2 04             	and    dl,0x4
c0003d7d:	0f 85 ce 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003d83:	80 e3 08             	and    bl,0x8
c0003d86:	0f 84 b3 00 00 00    	je     c0003e3f <f_open+0x192>
c0003d8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d90:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d94:	8a 00                	mov    al,BYTE PTR [eax]
c0003d96:	89 ea                	mov    edx,ebp
c0003d98:	e8 b6 f4 ff ff       	call   c0003253 <ld_clust.isra.0>
c0003d9d:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da2:	89 c3                	mov    ebx,eax
c0003da4:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003da7:	e8 46 e1 ff ff       	call   c0001ef2 <st_dword>
c0003dac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db0:	31 c9                	xor    ecx,ecx
c0003db2:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dbe:	e8 b8 f4 ff ff       	call   c000327b <st_clust.isra.1>
c0003dc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dc7:	31 d2                	xor    edx,edx
c0003dc9:	83 c0 1c             	add    eax,0x1c
c0003dcc:	e8 21 e1 ff ff       	call   c0001ef2 <st_dword>
c0003dd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd5:	85 db                	test   ebx,ebx
c0003dd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003ddb:	74 62                	je     c0003e3f <f_open+0x192>
c0003ddd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de1:	31 c9                	xor    ecx,ecx
c0003de3:	89 da                	mov    edx,ebx
c0003de5:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003de8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003dec:	e8 b1 f7 ff ff       	call   c00035a2 <remove_chain>
c0003df1:	85 c0                	test   eax,eax
c0003df3:	0f 85 58 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003df9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dfd:	89 ea                	mov    edx,ebp
c0003dff:	4b                   	dec    ebx
c0003e00:	e8 d8 e5 ff ff       	call   c00023dd <move_window>
c0003e05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e09:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	eb 29                	jmp    c0003e39 <f_open+0x18c>
c0003e10:	85 c0                	test   eax,eax
c0003e12:	0f 85 39 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003e18:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1c:	b8 04 00 00 00       	mov    eax,0x4
c0003e21:	88 d1                	mov    cl,dl
c0003e23:	80 e1 10             	and    cl,0x10
c0003e26:	0f 85 25 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003e2c:	80 e3 02             	and    bl,0x2
c0003e2f:	74 0e                	je     c0003e3f <f_open+0x192>
c0003e31:	80 e2 01             	and    dl,0x1
c0003e34:	b8 07 00 00 00       	mov    eax,0x7
c0003e39:	0f 85 12 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003e3f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0003e43:	24 08                	and    al,0x8
c0003e45:	74 05                	je     c0003e4c <f_open+0x19f>
c0003e47:	80 4c 24 0c 40       	or     BYTE PTR [esp+0xc],0x40
c0003e4c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e50:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0003e54:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e57:	89 5e 24             	mov    DWORD PTR [esi+0x24],ebx
c0003e5a:	89 da                	mov    edx,ebx
c0003e5c:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0003e5f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e62:	e8 ec f3 ff ff       	call   c0003253 <ld_clust.isra.0>
c0003e67:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0003e6a:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0003e6d:	e8 64 e0 ff ff       	call   c0001ed6 <ld_dword>
c0003e72:	8d 5e 28             	lea    ebx,[esi+0x28]
c0003e75:	31 d2                	xor    edx,edx
c0003e77:	89 2e                	mov    DWORD PTR [esi],ebp
c0003e79:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7e:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0003e81:	0f b7 45 06          	movzx  eax,WORD PTR [ebp+0x6]
c0003e85:	c6 46 11 00          	mov    BYTE PTR [esi+0x11],0x0
c0003e89:	c7 46 1c 00 00 00 00 	mov    DWORD PTR [esi+0x1c],0x0
c0003e90:	c7 46 14 00 00 00 00 	mov    DWORD PTR [esi+0x14],0x0
c0003e97:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0003e9b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0003e9f:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c0003ea2:	89 d8                	mov    eax,ebx
c0003ea4:	e8 61 e0 ff ff       	call   c0001f0a <mem_set>
c0003ea9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0003ead:	24 20                	and    al,0x20
c0003eaf:	75 07                	jne    c0003eb8 <f_open+0x20b>
c0003eb1:	31 c0                	xor    eax,eax
c0003eb3:	e9 99 00 00 00       	jmp    c0003f51 <f_open+0x2a4>
c0003eb8:	8b 6e 0c             	mov    ebp,DWORD PTR [esi+0xc]
c0003ebb:	85 ed                	test   ebp,ebp
c0003ebd:	74 f2                	je     c0003eb1 <f_open+0x204>
c0003ebf:	89 6e 14             	mov    DWORD PTR [esi+0x14],ebp
c0003ec2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec6:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0003ec9:	0f b7 48 0a          	movzx  ecx,WORD PTR [eax+0xa]
c0003ecd:	31 c0                	xor    eax,eax
c0003ecf:	c1 e1 09             	shl    ecx,0x9
c0003ed2:	85 c0                	test   eax,eax
c0003ed4:	75 2b                	jne    c0003f01 <f_open+0x254>
c0003ed6:	39 cd                	cmp    ebp,ecx
c0003ed8:	76 27                	jbe    c0003f01 <f_open+0x254>
c0003eda:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003ede:	8b 06                	mov    eax,DWORD PTR [esi]
c0003ee0:	e8 be f3 ff ff       	call   c00032a3 <get_fat.isra.2>
c0003ee5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ee9:	89 c2                	mov    edx,eax
c0003eeb:	b8 02 00 00 00       	mov    eax,0x2
c0003ef0:	83 fa 01             	cmp    edx,0x1
c0003ef3:	76 08                	jbe    c0003efd <f_open+0x250>
c0003ef5:	31 c0                	xor    eax,eax
c0003ef7:	83 fa ff             	cmp    edx,0xffffffff
c0003efa:	0f 94 c0             	sete   al
c0003efd:	29 cd                	sub    ebp,ecx
c0003eff:	eb d1                	jmp    c0003ed2 <f_open+0x225>
c0003f01:	89 56 18             	mov    DWORD PTR [esi+0x18],edx
c0003f04:	85 c0                	test   eax,eax
c0003f06:	75 49                	jne    c0003f51 <f_open+0x2a4>
c0003f08:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003f0e:	74 a1                	je     c0003eb1 <f_open+0x204>
c0003f10:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003f14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003f18:	89 c8                	mov    eax,ecx
c0003f1a:	e8 e9 e1 ff ff       	call   c0002108 <clst2sect>
c0003f1f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003f23:	89 c2                	mov    edx,eax
c0003f25:	b8 02 00 00 00       	mov    eax,0x2
c0003f2a:	85 d2                	test   edx,edx
c0003f2c:	74 23                	je     c0003f51 <f_open+0x2a4>
c0003f2e:	c1 ed 09             	shr    ebp,0x9
c0003f31:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003f35:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003f38:	6a 01                	push   0x1
c0003f3a:	50                   	push   eax
c0003f3b:	53                   	push   ebx
c0003f3c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f40:	50                   	push   eax
c0003f41:	e8 38 df ff ff       	call   c0001e7e <disk_read>
c0003f46:	83 c4 10             	add    esp,0x10
c0003f49:	85 c0                	test   eax,eax
c0003f4b:	0f 95 c0             	setne  al
c0003f4e:	0f b6 c0             	movzx  eax,al
c0003f51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f55:	83 ec 0c             	sub    esp,0xc
c0003f58:	57                   	push   edi
c0003f59:	e8 b6 1c 00 00       	call   c0005c14 <ff_memfree>
c0003f5e:	83 c4 10             	add    esp,0x10
c0003f61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f65:	85 c0                	test   eax,eax
c0003f67:	74 06                	je     c0003f6f <f_open+0x2c2>
c0003f69:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0003f6f:	83 c4 5c             	add    esp,0x5c
c0003f72:	5b                   	pop    ebx
c0003f73:	5e                   	pop    esi
c0003f74:	5f                   	pop    edi
c0003f75:	5d                   	pop    ebp
c0003f76:	c3                   	ret    

c0003f77 <f_read>:
c0003f77:	55                   	push   ebp
c0003f78:	57                   	push   edi
c0003f79:	56                   	push   esi
c0003f7a:	53                   	push   ebx
c0003f7b:	83 ec 2c             	sub    esp,0x2c
c0003f7e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f86:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f8a:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f8e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f94:	89 d8                	mov    eax,ebx
c0003f96:	e8 97 e3 ff ff       	call   c0002332 <validate>
c0003f9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9f:	85 c0                	test   eax,eax
c0003fa1:	0f 85 a0 01 00 00    	jne    c0004147 <f_read+0x1d0>
c0003fa7:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003fab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003faf:	85 c0                	test   eax,eax
c0003fb1:	0f 85 90 01 00 00    	jne    c0004147 <f_read+0x1d0>
c0003fb7:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fbb:	0f 84 7e 01 00 00    	je     c000413f <f_read+0x1c8>
c0003fc1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fc4:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fc7:	39 f8                	cmp    eax,edi
c0003fc9:	0f 46 f8             	cmovbe edi,eax
c0003fcc:	85 ff                	test   edi,edi
c0003fce:	0f 84 73 01 00 00    	je     c0004147 <f_read+0x1d0>
c0003fd4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fd7:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fdc:	0f 85 26 01 00 00    	jne    c0004108 <f_read+0x191>
c0003fe2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fe6:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fea:	89 c2                	mov    edx,eax
c0003fec:	c1 ea 09             	shr    edx,0x9
c0003fef:	4d                   	dec    ebp
c0003ff0:	21 d5                	and    ebp,edx
c0003ff2:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003ff6:	75 42                	jne    c000403a <f_read+0xc3>
c0003ff8:	85 c0                	test   eax,eax
c0003ffa:	75 05                	jne    c0004001 <f_read+0x8a>
c0003ffc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003fff:	eb 0a                	jmp    c000400b <f_read+0x94>
c0004001:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004004:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004006:	e8 98 f2 ff ff       	call   c00032a3 <get_fat.isra.2>
c000400b:	83 f8 01             	cmp    eax,0x1
c000400e:	77 11                	ja     c0004021 <f_read+0xaa>
c0004010:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004014:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c000401c:	e9 26 01 00 00       	jmp    c0004147 <f_read+0x1d0>
c0004021:	83 f8 ff             	cmp    eax,0xffffffff
c0004024:	75 11                	jne    c0004037 <f_read+0xc0>
c0004026:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000402a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0004032:	e9 10 01 00 00       	jmp    c0004147 <f_read+0x1d0>
c0004037:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000403a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000403e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004041:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004045:	89 c8                	mov    eax,ecx
c0004047:	e8 bc e0 ff ff       	call   c0002108 <clst2sect>
c000404c:	85 c0                	test   eax,eax
c000404e:	74 c0                	je     c0004010 <f_read+0x99>
c0004050:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004054:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c000405a:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000405d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004061:	76 58                	jbe    c00040bb <f_read+0x144>
c0004063:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004067:	89 fe                	mov    esi,edi
c0004069:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000406d:	c1 ee 09             	shr    esi,0x9
c0004070:	01 f2                	add    edx,esi
c0004072:	39 c2                	cmp    edx,eax
c0004074:	76 06                	jbe    c000407c <f_read+0x105>
c0004076:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000407a:	89 c6                	mov    esi,eax
c000407c:	56                   	push   esi
c000407d:	55                   	push   ebp
c000407e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004082:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004086:	50                   	push   eax
c0004087:	e8 f2 dd ff ff       	call   c0001e7e <disk_read>
c000408c:	83 c4 10             	add    esp,0x10
c000408f:	85 c0                	test   eax,eax
c0004091:	75 93                	jne    c0004026 <f_read+0xaf>
c0004093:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004097:	79 1d                	jns    c00040b6 <f_read+0x13f>
c0004099:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000409c:	29 e8                	sub    eax,ebp
c000409e:	39 f0                	cmp    eax,esi
c00040a0:	73 14                	jae    c00040b6 <f_read+0x13f>
c00040a2:	c1 e0 09             	shl    eax,0x9
c00040a5:	b9 00 02 00 00       	mov    ecx,0x200
c00040aa:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00040ae:	8d 53 28             	lea    edx,[ebx+0x28]
c00040b1:	e8 3f de ff ff       	call   c0001ef5 <mem_cpy>
c00040b6:	c1 e6 09             	shl    esi,0x9
c00040b9:	eb 70                	jmp    c000412b <f_read+0x1b4>
c00040bb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040be:	39 e8                	cmp    eax,ebp
c00040c0:	74 43                	je     c0004105 <f_read+0x18e>
c00040c2:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c00040c6:	8d 73 28             	lea    esi,[ebx+0x28]
c00040c9:	79 1d                	jns    c00040e8 <f_read+0x171>
c00040cb:	6a 01                	push   0x1
c00040cd:	50                   	push   eax
c00040ce:	56                   	push   esi
c00040cf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040d3:	50                   	push   eax
c00040d4:	e8 bb dd ff ff       	call   c0001e94 <disk_write>
c00040d9:	83 c4 10             	add    esp,0x10
c00040dc:	85 c0                	test   eax,eax
c00040de:	0f 85 42 ff ff ff    	jne    c0004026 <f_read+0xaf>
c00040e4:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040e8:	6a 01                	push   0x1
c00040ea:	55                   	push   ebp
c00040eb:	56                   	push   esi
c00040ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040f4:	50                   	push   eax
c00040f5:	e8 84 dd ff ff       	call   c0001e7e <disk_read>
c00040fa:	83 c4 10             	add    esp,0x10
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 21 ff ff ff    	jne    c0004026 <f_read+0xaf>
c0004105:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004108:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000410b:	be 00 02 00 00       	mov    esi,0x200
c0004110:	25 ff 01 00 00       	and    eax,0x1ff
c0004115:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0004119:	29 c6                	sub    esi,eax
c000411b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000411f:	39 f7                	cmp    edi,esi
c0004121:	0f 46 f7             	cmovbe esi,edi
c0004124:	89 f1                	mov    ecx,esi
c0004126:	e8 ca dd ff ff       	call   c0001ef5 <mem_cpy>
c000412b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000412f:	29 f7                	sub    edi,esi
c0004131:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004135:	01 30                	add    DWORD PTR [eax],esi
c0004137:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000413a:	e9 8d fe ff ff       	jmp    c0003fcc <f_read+0x55>
c000413f:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004147:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000414b:	83 c4 2c             	add    esp,0x2c
c000414e:	5b                   	pop    ebx
c000414f:	5e                   	pop    esi
c0004150:	5f                   	pop    edi
c0004151:	5d                   	pop    ebp
c0004152:	c3                   	ret    

c0004153 <f_write>:
c0004153:	55                   	push   ebp
c0004154:	57                   	push   edi
c0004155:	56                   	push   esi
c0004156:	53                   	push   ebx
c0004157:	83 ec 2c             	sub    esp,0x2c
c000415a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000415e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004162:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004166:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000416c:	89 d8                	mov    eax,ebx
c000416e:	e8 bf e1 ff ff       	call   c0002332 <validate>
c0004173:	85 c0                	test   eax,eax
c0004175:	89 c7                	mov    edi,eax
c0004177:	0f 85 ff 01 00 00    	jne    c000437c <f_write+0x229>
c000417d:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004181:	85 ff                	test   edi,edi
c0004183:	0f 85 f3 01 00 00    	jne    c000437c <f_write+0x229>
c0004189:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000418d:	0f 84 e4 01 00 00    	je     c0004377 <f_write+0x224>
c0004193:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004196:	89 c1                	mov    ecx,eax
c0004198:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000419c:	0f 83 e8 00 00 00    	jae    c000428a <f_write+0x137>
c00041a2:	f7 d0                	not    eax
c00041a4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00041a8:	e9 dd 00 00 00       	jmp    c000428a <f_write+0x137>
c00041ad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041b0:	a9 ff 01 00 00       	test   eax,0x1ff
c00041b5:	0f 85 8c 01 00 00    	jne    c0004347 <f_write+0x1f4>
c00041bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041bf:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041c3:	89 c2                	mov    edx,eax
c00041c5:	c1 ea 09             	shr    edx,0x9
c00041c8:	4d                   	dec    ebp
c00041c9:	21 d5                	and    ebp,edx
c00041cb:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041cf:	0f 84 c2 00 00 00    	je     c0004297 <f_write+0x144>
c00041d5:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c00041d9:	0f 88 19 01 00 00    	js     c00042f8 <f_write+0x1a5>
c00041df:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041e3:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041ea:	89 c8                	mov    eax,ecx
c00041ec:	e8 17 df ff ff       	call   c0002108 <clst2sect>
c00041f1:	85 c0                	test   eax,eax
c00041f3:	0f 84 c9 00 00 00    	je     c00042c2 <f_write+0x16f>
c00041f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041fd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0004205:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004208:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000420c:	0f 86 0d 01 00 00    	jbe    c000431f <f_write+0x1cc>
c0004212:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004216:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000421a:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000421e:	c1 ee 09             	shr    esi,0x9
c0004221:	01 f2                	add    edx,esi
c0004223:	39 c2                	cmp    edx,eax
c0004225:	76 06                	jbe    c000422d <f_write+0xda>
c0004227:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000422b:	89 c6                	mov    esi,eax
c000422d:	56                   	push   esi
c000422e:	55                   	push   ebp
c000422f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004233:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004237:	50                   	push   eax
c0004238:	e8 57 dc ff ff       	call   c0001e94 <disk_write>
c000423d:	83 c4 10             	add    esp,0x10
c0004240:	85 c0                	test   eax,eax
c0004242:	0f 85 8d 00 00 00    	jne    c00042d5 <f_write+0x182>
c0004248:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000424b:	29 ea                	sub    edx,ebp
c000424d:	39 f2                	cmp    edx,esi
c000424f:	73 18                	jae    c0004269 <f_write+0x116>
c0004251:	c1 e2 09             	shl    edx,0x9
c0004254:	b9 00 02 00 00       	mov    ecx,0x200
c0004259:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000425d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004260:	e8 90 dc ff ff       	call   c0001ef5 <mem_cpy>
c0004265:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004269:	c1 e6 09             	shl    esi,0x9
c000426c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004270:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004274:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004278:	01 30                	add    DWORD PTR [eax],esi
c000427a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000427d:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004280:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004283:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c0004287:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000428a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000428f:	0f 85 18 ff ff ff    	jne    c00041ad <f_write+0x5a>
c0004295:	eb 1d                	jmp    c00042b4 <f_write+0x161>
c0004297:	85 c0                	test   eax,eax
c0004299:	75 0b                	jne    c00042a6 <f_write+0x153>
c000429b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000429e:	31 d2                	xor    edx,edx
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 19                	jne    c00042bd <f_write+0x16a>
c00042a4:	eb 03                	jmp    c00042a9 <f_write+0x156>
c00042a6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042a9:	89 d8                	mov    eax,ebx
c00042ab:	e8 bd f1 ff ff       	call   c000346d <create_chain>
c00042b0:	85 c0                	test   eax,eax
c00042b2:	75 09                	jne    c00042bd <f_write+0x16a>
c00042b4:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c00042b8:	e9 bf 00 00 00       	jmp    c000437c <f_write+0x229>
c00042bd:	83 f8 01             	cmp    eax,0x1
c00042c0:	75 0e                	jne    c00042d0 <f_write+0x17d>
c00042c2:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c6:	bf 02 00 00 00       	mov    edi,0x2
c00042cb:	e9 ac 00 00 00       	jmp    c000437c <f_write+0x229>
c00042d0:	83 f8 ff             	cmp    eax,0xffffffff
c00042d3:	75 0e                	jne    c00042e3 <f_write+0x190>
c00042d5:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d9:	bf 01 00 00 00       	mov    edi,0x1
c00042de:	e9 99 00 00 00       	jmp    c000437c <f_write+0x229>
c00042e3:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042ea:	0f 85 e5 fe ff ff    	jne    c00041d5 <f_write+0x82>
c00042f0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042f3:	e9 dd fe ff ff       	jmp    c00041d5 <f_write+0x82>
c00042f8:	6a 01                	push   0x1
c00042fa:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042fd:	8d 43 28             	lea    eax,[ebx+0x28]
c0004300:	50                   	push   eax
c0004301:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004305:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004309:	50                   	push   eax
c000430a:	e8 85 db ff ff       	call   c0001e94 <disk_write>
c000430f:	83 c4 10             	add    esp,0x10
c0004312:	85 c0                	test   eax,eax
c0004314:	75 bf                	jne    c00042d5 <f_write+0x182>
c0004316:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000431a:	e9 c0 fe ff ff       	jmp    c00041df <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x1f1>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x1f1>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 41 db ff ff       	call   c0001e7e <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 91                	jne    c00042d5 <f_write+0x182>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 87 db ff ff       	call   c0001ef5 <mem_cpy>
c000436e:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004372:	e9 f5 fe ff ff       	jmp    c000426c <f_write+0x119>
c0004377:	bf 07 00 00 00       	mov    edi,0x7
c000437c:	83 c4 2c             	add    esp,0x2c
c000437f:	89 f8                	mov    eax,edi
c0004381:	5b                   	pop    ebx
c0004382:	5e                   	pop    esi
c0004383:	5f                   	pop    edi
c0004384:	5d                   	pop    ebp
c0004385:	c3                   	ret    

c0004386 <f_sync>:
c0004386:	56                   	push   esi
c0004387:	53                   	push   ebx
c0004388:	83 ec 14             	sub    esp,0x14
c000438b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000438f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 98 df ff ff       	call   c0002332 <validate>
c000439a:	85 c0                	test   eax,eax
c000439c:	0f 85 95 00 00 00    	jne    c0004437 <f_sync+0xb1>
c00043a2:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043a5:	88 d1                	mov    cl,dl
c00043a7:	80 e1 40             	and    cl,0x40
c00043aa:	0f 84 87 00 00 00    	je     c0004437 <f_sync+0xb1>
c00043b0:	84 d2                	test   dl,dl
c00043b2:	79 29                	jns    c00043dd <f_sync+0x57>
c00043b4:	6a 01                	push   0x1
c00043b6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043b9:	8d 43 28             	lea    eax,[ebx+0x28]
c00043bc:	50                   	push   eax
c00043bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c5:	50                   	push   eax
c00043c6:	e8 c9 da ff ff       	call   c0001e94 <disk_write>
c00043cb:	83 c4 10             	add    esp,0x10
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	b8 01 00 00 00       	mov    eax,0x1
c00043d5:	85 d2                	test   edx,edx
c00043d7:	75 5e                	jne    c0004437 <f_sync+0xb1>
c00043d9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00043dd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043e4:	e8 f4 df ff ff       	call   c00023dd <move_window>
c00043e9:	85 c0                	test   eax,eax
c00043eb:	75 4a                	jne    c0004437 <f_sync+0xb1>
c00043ed:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00043f4:	89 f2                	mov    edx,esi
c00043f6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043fb:	e8 7b ee ff ff       	call   c000327b <st_clust.isra.1>
c0004400:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004403:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004406:	e8 e7 da ff ff       	call   c0001ef2 <st_dword>
c000440b:	8d 46 16             	lea    eax,[esi+0x16]
c000440e:	ba 00 00 21 50       	mov    edx,0x50210000
c0004413:	e8 da da ff ff       	call   c0001ef2 <st_dword>
c0004418:	8d 46 12             	lea    eax,[esi+0x12]
c000441b:	31 d2                	xor    edx,edx
c000441d:	e8 cc da ff ff       	call   c0001eee <st_word>
c0004422:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004426:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000442a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000442e:	e8 ed e9 ff ff       	call   c0002e20 <sync_fs>
c0004433:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c0004437:	83 c4 14             	add    esp,0x14
c000443a:	5b                   	pop    ebx
c000443b:	5e                   	pop    esi
c000443c:	c3                   	ret    

c000443d <f_close>:
c000443d:	53                   	push   ebx
c000443e:	83 ec 24             	sub    esp,0x24
c0004441:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004445:	53                   	push   ebx
c0004446:	e8 3b ff ff ff       	call   c0004386 <f_sync>
c000444b:	83 c4 10             	add    esp,0x10
c000444e:	85 c0                	test   eax,eax
c0004450:	75 15                	jne    c0004467 <f_close+0x2a>
c0004452:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004456:	89 d8                	mov    eax,ebx
c0004458:	e8 d5 de ff ff       	call   c0002332 <validate>
c000445d:	85 c0                	test   eax,eax
c000445f:	75 06                	jne    c0004467 <f_close+0x2a>
c0004461:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004467:	83 c4 18             	add    esp,0x18
c000446a:	5b                   	pop    ebx
c000446b:	c3                   	ret    

c000446c <f_lseek>:
c000446c:	55                   	push   ebp
c000446d:	57                   	push   edi
c000446e:	56                   	push   esi
c000446f:	53                   	push   ebx
c0004470:	83 ec 2c             	sub    esp,0x2c
c0004473:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004477:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000447b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 ac de ff ff       	call   c0002332 <validate>
c0004486:	85 c0                	test   eax,eax
c0004488:	89 c5                	mov    ebp,eax
c000448a:	0f 85 78 01 00 00    	jne    c0004608 <f_lseek+0x19c>
c0004490:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004494:	85 ed                	test   ebp,ebp
c0004496:	0f 85 6c 01 00 00    	jne    c0004608 <f_lseek+0x19c>
c000449c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000449f:	39 f0                	cmp    eax,esi
c00044a1:	73 07                	jae    c00044aa <f_lseek+0x3e>
c00044a3:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044a7:	0f 44 f0             	cmove  esi,eax
c00044aa:	85 f6                	test   esi,esi
c00044ac:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044af:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044b6:	75 07                	jne    c00044bf <f_lseek+0x53>
c00044b8:	31 f6                	xor    esi,esi
c00044ba:	e9 e2 00 00 00       	jmp    c00045a1 <f_lseek+0x135>
c00044bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044c3:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044c7:	c1 e7 09             	shl    edi,0x9
c00044ca:	85 c9                	test   ecx,ecx
c00044cc:	74 28                	je     c00044f6 <f_lseek+0x8a>
c00044ce:	31 d2                	xor    edx,edx
c00044d0:	49                   	dec    ecx
c00044d1:	8d 46 ff             	lea    eax,[esi-0x1]
c00044d4:	f7 f7                	div    edi
c00044d6:	31 d2                	xor    edx,edx
c00044d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044dc:	89 c8                	mov    eax,ecx
c00044de:	f7 f7                	div    edi
c00044e0:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044e4:	72 10                	jb     c00044f6 <f_lseek+0x8a>
c00044e6:	89 f8                	mov    eax,edi
c00044e8:	f7 d8                	neg    eax
c00044ea:	21 c1                	and    ecx,eax
c00044ec:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044ef:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044f2:	29 ce                	sub    esi,ecx
c00044f4:	eb 3c                	jmp    c0004532 <f_lseek+0xc6>
c00044f6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044f9:	85 c0                	test   eax,eax
c00044fb:	75 32                	jne    c000452f <f_lseek+0xc3>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 67 ef ff ff       	call   c000346d <create_chain>
c0004506:	83 f8 01             	cmp    eax,0x1
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xad>
c000450b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000450f:	bd 02 00 00 00       	mov    ebp,0x2
c0004514:	e9 ef 00 00 00       	jmp    c0004608 <f_lseek+0x19c>
c0004519:	83 f8 ff             	cmp    eax,0xffffffff
c000451c:	75 0e                	jne    c000452c <f_lseek+0xc0>
c000451e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004522:	bd 01 00 00 00       	mov    ebp,0x1
c0004527:	e9 dc 00 00 00       	jmp    c0004608 <f_lseek+0x19c>
c000452c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004532:	85 c0                	test   eax,eax
c0004534:	74 82                	je     c00044b8 <f_lseek+0x4c>
c0004536:	39 fe                	cmp    esi,edi
c0004538:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000453b:	76 3d                	jbe    c000457a <f_lseek+0x10e>
c000453d:	01 fa                	add    edx,edi
c000453f:	29 fe                	sub    esi,edi
c0004541:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004545:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004548:	89 c2                	mov    edx,eax
c000454a:	74 0d                	je     c0004559 <f_lseek+0xed>
c000454c:	89 d8                	mov    eax,ebx
c000454e:	e8 1a ef ff ff       	call   c000346d <create_chain>
c0004553:	85 c0                	test   eax,eax
c0004555:	75 09                	jne    c0004560 <f_lseek+0xf4>
c0004557:	eb 1f                	jmp    c0004578 <f_lseek+0x10c>
c0004559:	8b 03                	mov    eax,DWORD PTR [ebx]
c000455b:	e8 43 ed ff ff       	call   c00032a3 <get_fat.isra.2>
c0004560:	83 f8 ff             	cmp    eax,0xffffffff
c0004563:	74 b9                	je     c000451e <f_lseek+0xb2>
c0004565:	83 f8 01             	cmp    eax,0x1
c0004568:	76 a1                	jbe    c000450b <f_lseek+0x9f>
c000456a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000456e:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004571:	76 98                	jbe    c000450b <f_lseek+0x9f>
c0004573:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004576:	eb be                	jmp    c0004536 <f_lseek+0xca>
c0004578:	31 f6                	xor    esi,esi
c000457a:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000457d:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004583:	0f 84 2f ff ff ff    	je     c00044b8 <f_lseek+0x4c>
c0004589:	89 c2                	mov    edx,eax
c000458b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000458f:	e8 74 db ff ff       	call   c0002108 <clst2sect>
c0004594:	85 c0                	test   eax,eax
c0004596:	0f 84 6f ff ff ff    	je     c000450b <f_lseek+0x9f>
c000459c:	c1 ee 09             	shr    esi,0x9
c000459f:	01 c6                	add    esi,eax
c00045a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045a4:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045a7:	76 07                	jbe    c00045b0 <f_lseek+0x144>
c00045a9:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c00045ad:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045b0:	a9 ff 01 00 00       	test   eax,0x1ff
c00045b5:	74 51                	je     c0004608 <f_lseek+0x19c>
c00045b7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ba:	39 f0                	cmp    eax,esi
c00045bc:	74 4a                	je     c0004608 <f_lseek+0x19c>
c00045be:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c00045c2:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045c5:	79 21                	jns    c00045e8 <f_lseek+0x17c>
c00045c7:	6a 01                	push   0x1
c00045c9:	50                   	push   eax
c00045ca:	57                   	push   edi
c00045cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045cf:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045d3:	50                   	push   eax
c00045d4:	e8 bb d8 ff ff       	call   c0001e94 <disk_write>
c00045d9:	83 c4 10             	add    esp,0x10
c00045dc:	85 c0                	test   eax,eax
c00045de:	0f 85 3a ff ff ff    	jne    c000451e <f_lseek+0xb2>
c00045e4:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00045e8:	6a 01                	push   0x1
c00045ea:	56                   	push   esi
c00045eb:	57                   	push   edi
c00045ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045f4:	50                   	push   eax
c00045f5:	e8 84 d8 ff ff       	call   c0001e7e <disk_read>
c00045fa:	83 c4 10             	add    esp,0x10
c00045fd:	85 c0                	test   eax,eax
c00045ff:	0f 85 19 ff ff ff    	jne    c000451e <f_lseek+0xb2>
c0004605:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004608:	83 c4 2c             	add    esp,0x2c
c000460b:	89 e8                	mov    eax,ebp
c000460d:	5b                   	pop    ebx
c000460e:	5e                   	pop    esi
c000460f:	5f                   	pop    edi
c0004610:	5d                   	pop    ebp
c0004611:	c3                   	ret    

c0004612 <f_opendir>:
c0004612:	56                   	push   esi
c0004613:	b8 09 00 00 00       	mov    eax,0x9
c0004618:	53                   	push   ebx
c0004619:	83 ec 24             	sub    esp,0x24
c000461c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004620:	85 db                	test   ebx,ebx
c0004622:	0f 84 af 00 00 00    	je     c00046d7 <f_opendir+0xc5>
c0004628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000462c:	31 c9                	xor    ecx,ecx
c000462e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004632:	e8 03 df ff ff       	call   c000253a <mount_volume>
c0004637:	85 c0                	test   eax,eax
c0004639:	0f 85 92 00 00 00    	jne    c00046d1 <f_opendir+0xbf>
c000463f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004643:	83 ec 0c             	sub    esp,0xc
c0004646:	89 03                	mov    DWORD PTR [ebx],eax
c0004648:	68 00 02 00 00       	push   0x200
c000464d:	e8 ae 15 00 00       	call   c0005c00 <ff_memalloc>
c0004652:	83 c4 10             	add    esp,0x10
c0004655:	89 c6                	mov    esi,eax
c0004657:	b8 11 00 00 00       	mov    eax,0x11
c000465c:	85 f6                	test   esi,esi
c000465e:	74 77                	je     c00046d7 <f_opendir+0xc5>
c0004660:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004664:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004668:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000466b:	89 d8                	mov    eax,ebx
c000466d:	e8 b8 f3 ff ff       	call   c0003a2a <follow_path>
c0004672:	85 c0                	test   eax,eax
c0004674:	75 37                	jne    c00046ad <f_opendir+0x9b>
c0004676:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000467a:	78 1c                	js     c0004698 <f_opendir+0x86>
c000467c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004680:	b8 05 00 00 00       	mov    eax,0x5
c0004685:	74 26                	je     c00046ad <f_opendir+0x9b>
c0004687:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000468b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000468e:	8a 00                	mov    al,BYTE PTR [eax]
c0004690:	e8 be eb ff ff       	call   c0003253 <ld_clust.isra.0>
c0004695:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004698:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000469c:	31 d2                	xor    edx,edx
c000469e:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
c00046a2:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046a6:	89 d8                	mov    eax,ebx
c00046a8:	e8 f8 ec ff ff       	call   c00033a5 <dir_sdi>
c00046ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b1:	83 ec 0c             	sub    esp,0xc
c00046b4:	56                   	push   esi
c00046b5:	e8 5a 15 00 00       	call   c0005c14 <ff_memfree>
c00046ba:	83 c4 10             	add    esp,0x10
c00046bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046c1:	83 f8 04             	cmp    eax,0x4
c00046c4:	74 06                	je     c00046cc <f_opendir+0xba>
c00046c6:	85 c0                	test   eax,eax
c00046c8:	74 0d                	je     c00046d7 <f_opendir+0xc5>
c00046ca:	eb 05                	jmp    c00046d1 <f_opendir+0xbf>
c00046cc:	b8 05 00 00 00       	mov    eax,0x5
c00046d1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046d7:	83 c4 24             	add    esp,0x24
c00046da:	5b                   	pop    ebx
c00046db:	5e                   	pop    esi
c00046dc:	c3                   	ret    

c00046dd <f_closedir>:
c00046dd:	53                   	push   ebx
c00046de:	83 ec 18             	sub    esp,0x18
c00046e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e9:	89 d8                	mov    eax,ebx
c00046eb:	e8 42 dc ff ff       	call   c0002332 <validate>
c00046f0:	85 c0                	test   eax,eax
c00046f2:	75 06                	jne    c00046fa <f_closedir+0x1d>
c00046f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046fa:	83 c4 18             	add    esp,0x18
c00046fd:	5b                   	pop    ebx
c00046fe:	c3                   	ret    

c00046ff <f_readdir>:
c00046ff:	57                   	push   edi
c0004700:	56                   	push   esi
c0004701:	53                   	push   ebx
c0004702:	83 ec 20             	sub    esp,0x20
c0004705:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004709:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000470d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004711:	89 d8                	mov    eax,ebx
c0004713:	e8 1a dc ff ff       	call   c0002332 <validate>
c0004718:	85 c0                	test   eax,eax
c000471a:	75 6e                	jne    c000478a <f_readdir+0x8b>
c000471c:	85 ff                	test   edi,edi
c000471e:	75 0b                	jne    c000472b <f_readdir+0x2c>
c0004720:	31 d2                	xor    edx,edx
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 7c ec ff ff       	call   c00033a5 <dir_sdi>
c0004729:	eb 5f                	jmp    c000478a <f_readdir+0x8b>
c000472b:	83 ec 0c             	sub    esp,0xc
c000472e:	68 00 02 00 00       	push   0x200
c0004733:	e8 c8 14 00 00       	call   c0005c00 <ff_memalloc>
c0004738:	83 c4 10             	add    esp,0x10
c000473b:	89 c6                	mov    esi,eax
c000473d:	b8 11 00 00 00       	mov    eax,0x11
c0004742:	85 f6                	test   esi,esi
c0004744:	74 44                	je     c000478a <f_readdir+0x8b>
c0004746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000474a:	31 d2                	xor    edx,edx
c000474c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000474f:	89 d8                	mov    eax,ebx
c0004751:	e8 3b f0 ff ff       	call   c0003791 <dir_read>
c0004756:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000475b:	75 19                	jne    c0004776 <f_readdir+0x77>
c000475d:	89 fa                	mov    edx,edi
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 0e e9 ff ff       	call   c0003074 <get_fileinfo>
c0004766:	31 d2                	xor    edx,edx
c0004768:	89 d8                	mov    eax,ebx
c000476a:	e8 bc ee ff ff       	call   c000362b <dir_next>
c000476f:	83 f8 04             	cmp    eax,0x4
c0004772:	75 02                	jne    c0004776 <f_readdir+0x77>
c0004774:	31 c0                	xor    eax,eax
c0004776:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000477a:	83 ec 0c             	sub    esp,0xc
c000477d:	56                   	push   esi
c000477e:	e8 91 14 00 00       	call   c0005c14 <ff_memfree>
c0004783:	83 c4 10             	add    esp,0x10
c0004786:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000478a:	83 c4 20             	add    esp,0x20
c000478d:	5b                   	pop    ebx
c000478e:	5e                   	pop    esi
c000478f:	5f                   	pop    edi
c0004790:	c3                   	ret    

c0004791 <f_stat>:
c0004791:	57                   	push   edi
c0004792:	31 c9                	xor    ecx,ecx
c0004794:	56                   	push   esi
c0004795:	53                   	push   ebx
c0004796:	83 ec 30             	sub    esp,0x30
c0004799:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479d:	89 e2                	mov    edx,esp
c000479f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047a3:	e8 92 dd ff ff       	call   c000253a <mount_volume>
c00047a8:	85 c0                	test   eax,eax
c00047aa:	89 c3                	mov    ebx,eax
c00047ac:	75 59                	jne    c0004807 <f_stat+0x76>
c00047ae:	83 ec 0c             	sub    esp,0xc
c00047b1:	bb 11 00 00 00       	mov    ebx,0x11
c00047b6:	68 00 02 00 00       	push   0x200
c00047bb:	e8 40 14 00 00       	call   c0005c00 <ff_memalloc>
c00047c0:	83 c4 10             	add    esp,0x10
c00047c3:	85 c0                	test   eax,eax
c00047c5:	89 c6                	mov    esi,eax
c00047c7:	74 3e                	je     c0004807 <f_stat+0x76>
c00047c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047cc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047d0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047d3:	89 e0                	mov    eax,esp
c00047d5:	e8 50 f2 ff ff       	call   c0003a2a <follow_path>
c00047da:	85 c0                	test   eax,eax
c00047dc:	89 c3                	mov    ebx,eax
c00047de:	75 1b                	jne    c00047fb <f_stat+0x6a>
c00047e0:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c00047e5:	78 0f                	js     c00047f6 <f_stat+0x65>
c00047e7:	85 ff                	test   edi,edi
c00047e9:	74 10                	je     c00047fb <f_stat+0x6a>
c00047eb:	89 fa                	mov    edx,edi
c00047ed:	89 e0                	mov    eax,esp
c00047ef:	e8 80 e8 ff ff       	call   c0003074 <get_fileinfo>
c00047f4:	eb 05                	jmp    c00047fb <f_stat+0x6a>
c00047f6:	bb 06 00 00 00       	mov    ebx,0x6
c00047fb:	83 ec 0c             	sub    esp,0xc
c00047fe:	56                   	push   esi
c00047ff:	e8 10 14 00 00       	call   c0005c14 <ff_memfree>
c0004804:	83 c4 10             	add    esp,0x10
c0004807:	83 c4 30             	add    esp,0x30
c000480a:	89 d8                	mov    eax,ebx
c000480c:	5b                   	pop    ebx
c000480d:	5e                   	pop    esi
c000480e:	5f                   	pop    edi
c000480f:	c3                   	ret    

c0004810 <f_getfree>:
c0004810:	55                   	push   ebp
c0004811:	31 c9                	xor    ecx,ecx
c0004813:	57                   	push   edi
c0004814:	56                   	push   esi
c0004815:	53                   	push   ebx
c0004816:	83 ec 2c             	sub    esp,0x2c
c0004819:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000481d:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004821:	e8 14 dd ff ff       	call   c000253a <mount_volume>
c0004826:	85 c0                	test   eax,eax
c0004828:	89 c6                	mov    esi,eax
c000482a:	0f 85 da 00 00 00    	jne    c000490a <f_getfree+0xfa>
c0004830:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004834:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004838:	89 18                	mov    DWORD PTR [eax],ebx
c000483a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000483d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004840:	8d 57 fe             	lea    edx,[edi-0x2]
c0004843:	39 d0                	cmp    eax,edx
c0004845:	77 0b                	ja     c0004852 <f_getfree+0x42>
c0004847:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000484b:	89 01                	mov    DWORD PTR [ecx],eax
c000484d:	e9 b8 00 00 00       	jmp    c000490a <f_getfree+0xfa>
c0004852:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004855:	75 29                	jne    c0004880 <f_getfree+0x70>
c0004857:	bf 02 00 00 00       	mov    edi,0x2
c000485c:	31 ed                	xor    ebp,ebp
c000485e:	89 fa                	mov    edx,edi
c0004860:	89 d8                	mov    eax,ebx
c0004862:	e8 3c ea ff ff       	call   c00032a3 <get_fat.isra.2>
c0004867:	83 f8 ff             	cmp    eax,0xffffffff
c000486a:	74 7d                	je     c00048e9 <f_getfree+0xd9>
c000486c:	83 f8 01             	cmp    eax,0x1
c000486f:	74 7f                	je     c00048f0 <f_getfree+0xe0>
c0004871:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004875:	83 d5 00             	adc    ebp,0x0
c0004878:	47                   	inc    edi
c0004879:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c000487c:	77 e0                	ja     c000485e <f_getfree+0x4e>
c000487e:	eb 79                	jmp    c00048f9 <f_getfree+0xe9>
c0004880:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004883:	31 ed                	xor    ebp,ebp
c0004885:	31 db                	xor    ebx,ebx
c0004887:	85 db                	test   ebx,ebx
c0004889:	75 18                	jne    c00048a3 <f_getfree+0x93>
c000488b:	8d 42 01             	lea    eax,[edx+0x1]
c000488e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004892:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004896:	e8 42 db ff ff       	call   c00023dd <move_window>
c000489b:	85 c0                	test   eax,eax
c000489d:	75 58                	jne    c00048f7 <f_getfree+0xe7>
c000489f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048ab:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048ae:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048b2:	75 13                	jne    c00048c7 <f_getfree+0xb7>
c00048b4:	e8 10 d6 ff ff       	call   c0001ec9 <ld_word>
c00048b9:	0f b7 c0             	movzx  eax,ax
c00048bc:	83 f8 01             	cmp    eax,0x1
c00048bf:	83 d5 00             	adc    ebp,0x0
c00048c2:	83 c3 02             	add    ebx,0x2
c00048c5:	eb 13                	jmp    c00048da <f_getfree+0xca>
c00048c7:	e8 0a d6 ff ff       	call   c0001ed6 <ld_dword>
c00048cc:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048d1:	83 f8 01             	cmp    eax,0x1
c00048d4:	83 d5 00             	adc    ebp,0x0
c00048d7:	83 c3 04             	add    ebx,0x4
c00048da:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048e0:	4f                   	dec    edi
c00048e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048e5:	75 a0                	jne    c0004887 <f_getfree+0x77>
c00048e7:	eb 10                	jmp    c00048f9 <f_getfree+0xe9>
c00048e9:	be 01 00 00 00       	mov    esi,0x1
c00048ee:	eb 09                	jmp    c00048f9 <f_getfree+0xe9>
c00048f0:	be 02 00 00 00       	mov    esi,0x2
c00048f5:	eb 02                	jmp    c00048f9 <f_getfree+0xe9>
c00048f7:	89 c6                	mov    esi,eax
c00048f9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048fd:	89 28                	mov    DWORD PTR [eax],ebp
c00048ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004903:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0004907:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c000490a:	83 c4 2c             	add    esp,0x2c
c000490d:	89 f0                	mov    eax,esi
c000490f:	5b                   	pop    ebx
c0004910:	5e                   	pop    esi
c0004911:	5f                   	pop    edi
c0004912:	5d                   	pop    ebp
c0004913:	c3                   	ret    

c0004914 <f_truncate>:
c0004914:	56                   	push   esi
c0004915:	53                   	push   ebx
c0004916:	83 ec 14             	sub    esp,0x14
c0004919:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000491d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004921:	89 d8                	mov    eax,ebx
c0004923:	e8 0a da ff ff       	call   c0002332 <validate>
c0004928:	85 c0                	test   eax,eax
c000492a:	89 c6                	mov    esi,eax
c000492c:	0f 85 be 00 00 00    	jne    c00049f0 <f_truncate+0xdc>
c0004932:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004936:	85 f6                	test   esi,esi
c0004938:	0f 85 b2 00 00 00    	jne    c00049f0 <f_truncate+0xdc>
c000493e:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004942:	0f 84 a3 00 00 00    	je     c00049eb <f_truncate+0xd7>
c0004948:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000494b:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494e:	0f 83 9c 00 00 00    	jae    c00049f0 <f_truncate+0xdc>
c0004954:	85 c0                	test   eax,eax
c0004956:	75 15                	jne    c000496d <f_truncate+0x59>
c0004958:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000495b:	31 c9                	xor    ecx,ecx
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 3e ec ff ff       	call   c00035a2 <remove_chain>
c0004964:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000496b:	eb 35                	jmp    c00049a2 <f_truncate+0x8e>
c000496d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004970:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004972:	e8 2c e9 ff ff       	call   c00032a3 <get_fat.isra.2>
c0004977:	89 c2                	mov    edx,eax
c0004979:	b8 01 00 00 00       	mov    eax,0x1
c000497e:	83 fa ff             	cmp    edx,0xffffffff
c0004981:	74 1f                	je     c00049a2 <f_truncate+0x8e>
c0004983:	83 fa 01             	cmp    edx,0x1
c0004986:	b8 02 00 00 00       	mov    eax,0x2
c000498b:	74 15                	je     c00049a2 <f_truncate+0x8e>
c000498d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004991:	31 c0                	xor    eax,eax
c0004993:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004996:	76 0a                	jbe    c00049a2 <f_truncate+0x8e>
c0004998:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000499b:	89 d8                	mov    eax,ebx
c000499d:	e8 00 ec ff ff       	call   c00035a2 <remove_chain>
c00049a2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a8:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049ab:	80 ca 40             	or     dl,0x40
c00049ae:	85 c0                	test   eax,eax
c00049b0:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049b3:	75 2f                	jne    c00049e4 <f_truncate+0xd0>
c00049b5:	84 d2                	test   dl,dl
c00049b7:	79 37                	jns    c00049f0 <f_truncate+0xdc>
c00049b9:	6a 01                	push   0x1
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	8d 43 28             	lea    eax,[ebx+0x28]
c00049c1:	50                   	push   eax
c00049c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ca:	50                   	push   eax
c00049cb:	e8 c4 d4 ff ff       	call   c0001e94 <disk_write>
c00049d0:	83 c4 10             	add    esp,0x10
c00049d3:	85 c0                	test   eax,eax
c00049d5:	75 08                	jne    c00049df <f_truncate+0xcb>
c00049d7:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00049db:	31 f6                	xor    esi,esi
c00049dd:	eb 11                	jmp    c00049f0 <f_truncate+0xdc>
c00049df:	b8 01 00 00 00       	mov    eax,0x1
c00049e4:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e7:	89 c6                	mov    esi,eax
c00049e9:	eb 05                	jmp    c00049f0 <f_truncate+0xdc>
c00049eb:	be 07 00 00 00       	mov    esi,0x7
c00049f0:	83 c4 14             	add    esp,0x14
c00049f3:	89 f0                	mov    eax,esi
c00049f5:	5b                   	pop    ebx
c00049f6:	5e                   	pop    esi
c00049f7:	c3                   	ret    

c00049f8 <f_unlink>:
c00049f8:	55                   	push   ebp
c00049f9:	b9 02 00 00 00       	mov    ecx,0x2
c00049fe:	57                   	push   edi
c00049ff:	56                   	push   esi
c0004a00:	53                   	push   ebx
c0004a01:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a07:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0b:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a12:	e8 23 db ff ff       	call   c000253a <mount_volume>
c0004a17:	85 c0                	test   eax,eax
c0004a19:	0f 85 ec 00 00 00    	jne    c0004b0b <f_unlink+0x113>
c0004a1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a23:	83 ec 0c             	sub    esp,0xc
c0004a26:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2a:	68 00 02 00 00       	push   0x200
c0004a2f:	e8 cc 11 00 00       	call   c0005c00 <ff_memalloc>
c0004a34:	83 c4 10             	add    esp,0x10
c0004a37:	89 c6                	mov    esi,eax
c0004a39:	b8 11 00 00 00       	mov    eax,0x11
c0004a3e:	85 f6                	test   esi,esi
c0004a40:	0f 84 c5 00 00 00    	je     c0004b0b <f_unlink+0x113>
c0004a46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4a:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a51:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004a54:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a58:	e8 cd ef ff ff       	call   c0003a2a <follow_path>
c0004a5d:	85 c0                	test   eax,eax
c0004a5f:	0f 85 92 00 00 00    	jne    c0004af7 <f_unlink+0xff>
c0004a65:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004a6a:	b8 06 00 00 00       	mov    eax,0x6
c0004a6f:	0f 88 82 00 00 00    	js     c0004af7 <f_unlink+0xff>
c0004a75:	8a 5c 24 26          	mov    bl,BYTE PTR [esp+0x26]
c0004a79:	88 d8                	mov    al,bl
c0004a7b:	24 01                	and    al,0x1
c0004a7d:	74 07                	je     c0004a86 <f_unlink+0x8e>
c0004a7f:	b8 07 00 00 00       	mov    eax,0x7
c0004a84:	eb 71                	jmp    c0004af7 <f_unlink+0xff>
c0004a86:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004a8a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a8e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004a91:	e8 bd e7 ff ff       	call   c0003253 <ld_clust.isra.0>
c0004a96:	80 e3 10             	and    bl,0x10
c0004a99:	89 c7                	mov    edi,eax
c0004a9b:	75 20                	jne    c0004abd <f_unlink+0xc5>
c0004a9d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa1:	e8 08 ee ff ff       	call   c00038ae <dir_remove>
c0004aa6:	85 c0                	test   eax,eax
c0004aa8:	75 40                	jne    c0004aea <f_unlink+0xf2>
c0004aaa:	85 ff                	test   edi,edi
c0004aac:	74 3c                	je     c0004aea <f_unlink+0xf2>
c0004aae:	31 c9                	xor    ecx,ecx
c0004ab0:	89 fa                	mov    edx,edi
c0004ab2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ab6:	e8 e7 ea ff ff       	call   c00035a2 <remove_chain>
c0004abb:	eb 2d                	jmp    c0004aea <f_unlink+0xf2>
c0004abd:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ac1:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ac5:	31 d2                	xor    edx,edx
c0004ac7:	89 6c 24 50          	mov    DWORD PTR [esp+0x50],ebp
c0004acb:	e8 d5 e8 ff ff       	call   c00033a5 <dir_sdi>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 23                	jne    c0004af7 <f_unlink+0xff>
c0004ad4:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ad8:	31 d2                	xor    edx,edx
c0004ada:	e8 b2 ec ff ff       	call   c0003791 <dir_read>
c0004adf:	85 c0                	test   eax,eax
c0004ae1:	74 9c                	je     c0004a7f <f_unlink+0x87>
c0004ae3:	83 f8 04             	cmp    eax,0x4
c0004ae6:	75 0f                	jne    c0004af7 <f_unlink+0xff>
c0004ae8:	eb b3                	jmp    c0004a9d <f_unlink+0xa5>
c0004aea:	85 c0                	test   eax,eax
c0004aec:	75 09                	jne    c0004af7 <f_unlink+0xff>
c0004aee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004af2:	e8 29 e3 ff ff       	call   c0002e20 <sync_fs>
c0004af7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004afb:	83 ec 0c             	sub    esp,0xc
c0004afe:	56                   	push   esi
c0004aff:	e8 10 11 00 00       	call   c0005c14 <ff_memfree>
c0004b04:	83 c4 10             	add    esp,0x10
c0004b07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b0b:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b11:	5b                   	pop    ebx
c0004b12:	5e                   	pop    esi
c0004b13:	5f                   	pop    edi
c0004b14:	5d                   	pop    ebp
c0004b15:	c3                   	ret    

c0004b16 <f_mkdir>:
c0004b16:	57                   	push   edi
c0004b17:	b9 02 00 00 00       	mov    ecx,0x2
c0004b1c:	56                   	push   esi
c0004b1d:	53                   	push   ebx
c0004b1e:	83 ec 50             	sub    esp,0x50
c0004b21:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b25:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b29:	e8 0c da ff ff       	call   c000253a <mount_volume>
c0004b2e:	85 c0                	test   eax,eax
c0004b30:	89 c3                	mov    ebx,eax
c0004b32:	0f 85 70 01 00 00    	jne    c0004ca8 <f_mkdir+0x192>
c0004b38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b3c:	83 ec 0c             	sub    esp,0xc
c0004b3f:	bb 11 00 00 00       	mov    ebx,0x11
c0004b44:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b48:	68 00 02 00 00       	push   0x200
c0004b4d:	e8 ae 10 00 00       	call   c0005c00 <ff_memalloc>
c0004b52:	83 c4 10             	add    esp,0x10
c0004b55:	85 c0                	test   eax,eax
c0004b57:	89 c7                	mov    edi,eax
c0004b59:	0f 84 49 01 00 00    	je     c0004ca8 <f_mkdir+0x192>
c0004b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b63:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b67:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b6a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b6e:	e8 b7 ee ff ff       	call   c0003a2a <follow_path>
c0004b73:	85 c0                	test   eax,eax
c0004b75:	89 c3                	mov    ebx,eax
c0004b77:	74 3e                	je     c0004bb7 <f_mkdir+0xa1>
c0004b79:	83 f8 04             	cmp    eax,0x4
c0004b7c:	75 3e                	jne    c0004bbc <f_mkdir+0xa6>
c0004b7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b82:	31 d2                	xor    edx,edx
c0004b84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b88:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b8c:	e8 dc e8 ff ff       	call   c000346d <create_chain>
c0004b91:	85 c0                	test   eax,eax
c0004b93:	89 c6                	mov    esi,eax
c0004b95:	74 0c                	je     c0004ba3 <f_mkdir+0x8d>
c0004b97:	83 f8 01             	cmp    eax,0x1
c0004b9a:	bb 02 00 00 00       	mov    ebx,0x2
c0004b9f:	74 07                	je     c0004ba8 <f_mkdir+0x92>
c0004ba1:	eb 2a                	jmp    c0004bcd <f_mkdir+0xb7>
c0004ba3:	bb 07 00 00 00       	mov    ebx,0x7
c0004ba8:	31 c9                	xor    ecx,ecx
c0004baa:	89 f2                	mov    edx,esi
c0004bac:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb0:	e8 ed e9 ff ff       	call   c00035a2 <remove_chain>
c0004bb5:	eb 05                	jmp    c0004bbc <f_mkdir+0xa6>
c0004bb7:	bb 08 00 00 00       	mov    ebx,0x8
c0004bbc:	83 ec 0c             	sub    esp,0xc
c0004bbf:	57                   	push   edi
c0004bc0:	e8 4f 10 00 00       	call   c0005c14 <ff_memfree>
c0004bc5:	83 c4 10             	add    esp,0x10
c0004bc8:	e9 db 00 00 00       	jmp    c0004ca8 <f_mkdir+0x192>
c0004bcd:	83 f8 ff             	cmp    eax,0xffffffff
c0004bd0:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd5:	74 d1                	je     c0004ba8 <f_mkdir+0x92>
c0004bd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bdb:	89 f2                	mov    edx,esi
c0004bdd:	e8 a9 dd ff ff       	call   c000298b <dir_clear>
c0004be2:	85 c0                	test   eax,eax
c0004be4:	89 c3                	mov    ebx,eax
c0004be6:	75 c0                	jne    c0004ba8 <f_mkdir+0x92>
c0004be8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bec:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf1:	ba 20 00 00 00       	mov    edx,0x20
c0004bf6:	83 c0 34             	add    eax,0x34
c0004bf9:	e8 0c d3 ff ff       	call   c0001f0a <mem_set>
c0004bfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c07:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c0b:	83 c0 4a             	add    eax,0x4a
c0004c0e:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c12:	e8 db d2 ff ff       	call   c0001ef2 <st_dword>
c0004c17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c1b:	89 f1                	mov    ecx,esi
c0004c1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004c20:	e8 56 e6 ff ff       	call   c000327b <st_clust.isra.1>
c0004c25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c29:	b9 20 00 00 00       	mov    ecx,0x20
c0004c2e:	8d 50 34             	lea    edx,[eax+0x34]
c0004c31:	83 c0 54             	add    eax,0x54
c0004c34:	e8 bc d2 ff ff       	call   c0001ef5 <mem_cpy>
c0004c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c3d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c41:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c45:	8d 50 54             	lea    edx,[eax+0x54]
c0004c48:	e8 2e e6 ff ff       	call   c000327b <st_clust.isra.1>
c0004c4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c51:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c55:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c59:	e8 68 ee ff ff       	call   c0003ac6 <dir_register>
c0004c5e:	85 c0                	test   eax,eax
c0004c60:	89 c3                	mov    ebx,eax
c0004c62:	0f 85 40 ff ff ff    	jne    c0004ba8 <f_mkdir+0x92>
c0004c68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c6c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c71:	83 c0 16             	add    eax,0x16
c0004c74:	e8 79 d2 ff ff       	call   c0001ef2 <st_dword>
c0004c79:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7d:	89 f1                	mov    ecx,esi
c0004c7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c83:	e8 f3 e5 ff ff       	call   c000327b <st_clust.isra.1>
c0004c88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c8c:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c94:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9c:	e8 7f e1 ff ff       	call   c0002e20 <sync_fs>
c0004ca1:	89 c3                	mov    ebx,eax
c0004ca3:	e9 14 ff ff ff       	jmp    c0004bbc <f_mkdir+0xa6>
c0004ca8:	83 c4 50             	add    esp,0x50
c0004cab:	89 d8                	mov    eax,ebx
c0004cad:	5b                   	pop    ebx
c0004cae:	5e                   	pop    esi
c0004caf:	5f                   	pop    edi
c0004cb0:	c3                   	ret    

c0004cb1 <f_rename>:
c0004cb1:	57                   	push   edi
c0004cb2:	56                   	push   esi
c0004cb3:	53                   	push   ebx
c0004cb4:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cba:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc1:	e8 27 d6 ff ff       	call   c00022ed <get_ldnumber>
c0004cc6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cca:	b9 02 00 00 00       	mov    ecx,0x2
c0004ccf:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cd6:	e8 5f d8 ff ff       	call   c000253a <mount_volume>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	0f 85 7c 01 00 00    	jne    c0004e5f <f_rename+0x1ae>
c0004ce3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ce7:	83 ec 0c             	sub    esp,0xc
c0004cea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cee:	68 00 02 00 00       	push   0x200
c0004cf3:	e8 08 0f 00 00       	call   c0005c00 <ff_memalloc>
c0004cf8:	83 c4 10             	add    esp,0x10
c0004cfb:	89 c6                	mov    esi,eax
c0004cfd:	b8 11 00 00 00       	mov    eax,0x11
c0004d02:	85 f6                	test   esi,esi
c0004d04:	0f 84 55 01 00 00    	je     c0004e5f <f_rename+0x1ae>
c0004d0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d0e:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d15:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d18:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d1c:	e8 09 ed ff ff       	call   c0003a2a <follow_path>
c0004d21:	85 c0                	test   eax,eax
c0004d23:	0f 85 22 01 00 00    	jne    c0004e4b <f_rename+0x19a>
c0004d29:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004d2e:	b8 06 00 00 00       	mov    eax,0x6
c0004d33:	0f 85 12 01 00 00    	jne    c0004e4b <f_rename+0x19a>
c0004d39:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d3d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	e8 aa d1 ff ff       	call   c0001ef5 <mem_cpy>
c0004d4b:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d4f:	b9 30 00 00 00       	mov    ecx,0x30
c0004d54:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d58:	e8 98 d1 ff ff       	call   c0001ef5 <mem_cpy>
c0004d5d:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d64:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d68:	e8 bd ec ff ff       	call   c0003a2a <follow_path>
c0004d6d:	85 c0                	test   eax,eax
c0004d6f:	75 20                	jne    c0004d91 <f_rename+0xe0>
c0004d71:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d75:	b8 08 00 00 00       	mov    eax,0x8
c0004d7a:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d7e:	0f 85 c7 00 00 00    	jne    c0004e4b <f_rename+0x19a>
c0004d84:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d88:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d8f:	eb 03                	jmp    c0004d94 <f_rename+0xe3>
c0004d91:	83 f8 04             	cmp    eax,0x4
c0004d94:	0f 85 b1 00 00 00    	jne    c0004e4b <f_rename+0x19a>
c0004d9a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d9e:	e8 23 ed ff ff       	call   c0003ac6 <dir_register>
c0004da3:	85 c0                	test   eax,eax
c0004da5:	0f 85 a0 00 00 00    	jne    c0004e4b <f_rename+0x19a>
c0004dab:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004db2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004db6:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbb:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dbe:	e8 32 d1 ff ff       	call   c0001ef5 <mem_cpy>
c0004dc3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dc7:	88 c2                	mov    dl,al
c0004dc9:	80 e2 10             	and    dl,0x10
c0004dcc:	75 02                	jne    c0004dd0 <f_rename+0x11f>
c0004dce:	0c 20                	or     al,0x20
c0004dd0:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ddb:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004ddf:	74 54                	je     c0004e35 <f_rename+0x184>
c0004de1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004de5:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004de9:	74 4a                	je     c0004e35 <f_rename+0x184>
c0004deb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004def:	89 da                	mov    edx,ebx
c0004df1:	8a 07                	mov    al,BYTE PTR [edi]
c0004df3:	e8 5b e4 ff ff       	call   c0003253 <ld_clust.isra.0>
c0004df8:	89 c2                	mov    edx,eax
c0004dfa:	89 f8                	mov    eax,edi
c0004dfc:	e8 07 d3 ff ff       	call   c0002108 <clst2sect>
c0004e01:	89 c2                	mov    edx,eax
c0004e03:	b8 02 00 00 00       	mov    eax,0x2
c0004e08:	85 d2                	test   edx,edx
c0004e0a:	74 3f                	je     c0004e4b <f_rename+0x19a>
c0004e0c:	89 f8                	mov    eax,edi
c0004e0e:	e8 ca d5 ff ff       	call   c00023dd <move_window>
c0004e13:	85 c0                	test   eax,eax
c0004e15:	75 34                	jne    c0004e4b <f_rename+0x19a>
c0004e17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e1b:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e1f:	75 14                	jne    c0004e35 <f_rename+0x184>
c0004e21:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e25:	8d 50 54             	lea    edx,[eax+0x54]
c0004e28:	e8 4e e4 ff ff       	call   c000327b <st_clust.isra.1>
c0004e2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e31:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e35:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e39:	e8 70 ea ff ff       	call   c00038ae <dir_remove>
c0004e3e:	85 c0                	test   eax,eax
c0004e40:	75 09                	jne    c0004e4b <f_rename+0x19a>
c0004e42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e46:	e8 d5 df ff ff       	call   c0002e20 <sync_fs>
c0004e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4f:	83 ec 0c             	sub    esp,0xc
c0004e52:	56                   	push   esi
c0004e53:	e8 bc 0d 00 00       	call   c0005c14 <ff_memfree>
c0004e58:	83 c4 10             	add    esp,0x10
c0004e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e65:	5b                   	pop    ebx
c0004e66:	5e                   	pop    esi
c0004e67:	5f                   	pop    edi
c0004e68:	c3                   	ret    

c0004e69 <f_chmod>:
c0004e69:	56                   	push   esi
c0004e6a:	b9 02 00 00 00       	mov    ecx,0x2
c0004e6f:	53                   	push   ebx
c0004e70:	83 ec 54             	sub    esp,0x54
c0004e73:	8a 44 24 68          	mov    al,BYTE PTR [esp+0x68]
c0004e77:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e7b:	8a 5c 24 64          	mov    bl,BYTE PTR [esp+0x64]
c0004e7f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0004e83:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e87:	e8 ae d6 ff ff       	call   c000253a <mount_volume>
c0004e8c:	85 c0                	test   eax,eax
c0004e8e:	0f 85 81 00 00 00    	jne    c0004f15 <f_chmod+0xac>
c0004e94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e98:	83 ec 0c             	sub    esp,0xc
c0004e9b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004e9f:	68 00 02 00 00       	push   0x200
c0004ea4:	e8 57 0d 00 00       	call   c0005c00 <ff_memalloc>
c0004ea9:	83 c4 10             	add    esp,0x10
c0004eac:	89 c6                	mov    esi,eax
c0004eae:	b8 11 00 00 00       	mov    eax,0x11
c0004eb3:	85 f6                	test   esi,esi
c0004eb5:	74 5e                	je     c0004f15 <f_chmod+0xac>
c0004eb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebb:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ebf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec6:	e8 5f eb ff ff       	call   c0003a2a <follow_path>
c0004ecb:	85 c0                	test   eax,eax
c0004ecd:	75 32                	jne    c0004f01 <f_chmod+0x98>
c0004ecf:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004ed4:	b8 06 00 00 00       	mov    eax,0x6
c0004ed9:	75 26                	jne    c0004f01 <f_chmod+0x98>
c0004edb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004edf:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0004ee2:	30 c3                	xor    bl,al
c0004ee4:	22 5c 24 0c          	and    bl,BYTE PTR [esp+0xc]
c0004ee8:	80 e3 27             	and    bl,0x27
c0004eeb:	30 c3                	xor    bl,al
c0004eed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef1:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0004ef4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ef8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efc:	e8 1f df ff ff       	call   c0002e20 <sync_fs>
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	83 ec 0c             	sub    esp,0xc
c0004f08:	56                   	push   esi
c0004f09:	e8 06 0d 00 00       	call   c0005c14 <ff_memfree>
c0004f0e:	83 c4 10             	add    esp,0x10
c0004f11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f15:	83 c4 54             	add    esp,0x54
c0004f18:	5b                   	pop    ebx
c0004f19:	5e                   	pop    esi
c0004f1a:	c3                   	ret    

c0004f1b <f_utime>:
c0004f1b:	56                   	push   esi
c0004f1c:	b9 02 00 00 00       	mov    ecx,0x2
c0004f21:	53                   	push   ebx
c0004f22:	83 ec 54             	sub    esp,0x54
c0004f25:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f31:	e8 04 d6 ff ff       	call   c000253a <mount_volume>
c0004f36:	85 c0                	test   eax,eax
c0004f38:	0f 85 85 00 00 00    	jne    c0004fc3 <f_utime+0xa8>
c0004f3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f42:	83 ec 0c             	sub    esp,0xc
c0004f45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f49:	68 00 02 00 00       	push   0x200
c0004f4e:	e8 ad 0c 00 00       	call   c0005c00 <ff_memalloc>
c0004f53:	83 c4 10             	add    esp,0x10
c0004f56:	89 c3                	mov    ebx,eax
c0004f58:	b8 11 00 00 00       	mov    eax,0x11
c0004f5d:	85 db                	test   ebx,ebx
c0004f5f:	74 62                	je     c0004fc3 <f_utime+0xa8>
c0004f61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f65:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f69:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f6c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f70:	e8 b5 ea ff ff       	call   c0003a2a <follow_path>
c0004f75:	85 c0                	test   eax,eax
c0004f77:	75 36                	jne    c0004faf <f_utime+0x94>
c0004f79:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004f7e:	b8 06 00 00 00       	mov    eax,0x6
c0004f83:	75 2a                	jne    c0004faf <f_utime+0x94>
c0004f85:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f89:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8d:	c1 e2 10             	shl    edx,0x10
c0004f90:	09 c2                	or     edx,eax
c0004f92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f96:	83 c0 16             	add    eax,0x16
c0004f99:	e8 54 cf ff ff       	call   c0001ef2 <st_dword>
c0004f9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fa6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004faa:	e8 71 de ff ff       	call   c0002e20 <sync_fs>
c0004faf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb3:	83 ec 0c             	sub    esp,0xc
c0004fb6:	53                   	push   ebx
c0004fb7:	e8 58 0c 00 00       	call   c0005c14 <ff_memfree>
c0004fbc:	83 c4 10             	add    esp,0x10
c0004fbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc3:	83 c4 54             	add    esp,0x54
c0004fc6:	5b                   	pop    ebx
c0004fc7:	5e                   	pop    esi
c0004fc8:	c3                   	ret    

c0004fc9 <f_getlabel>:
c0004fc9:	55                   	push   ebp
c0004fca:	31 c9                	xor    ecx,ecx
c0004fcc:	57                   	push   edi
c0004fcd:	56                   	push   esi
c0004fce:	53                   	push   ebx
c0004fcf:	83 ec 5c             	sub    esp,0x5c
c0004fd2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fd6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fda:	e8 5b d5 ff ff       	call   c000253a <mount_volume>
c0004fdf:	85 c0                	test   eax,eax
c0004fe1:	89 c3                	mov    ebx,eax
c0004fe3:	0f 85 de 00 00 00    	jne    c00050c7 <f_getlabel+0xfe>
c0004fe9:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004fee:	0f 84 d3 00 00 00    	je     c00050c7 <f_getlabel+0xfe>
c0004ff4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004ffc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005000:	31 d2                	xor    edx,edx
c0005002:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005006:	8d 44 24 20          	lea    eax,[esp+0x20]
c000500a:	e8 96 e3 ff ff       	call   c00033a5 <dir_sdi>
c000500f:	85 c0                	test   eax,eax
c0005011:	89 c3                	mov    ebx,eax
c0005013:	0f 85 a0 00 00 00    	jne    c00050b9 <f_getlabel+0xf0>
c0005019:	8d 44 24 20          	lea    eax,[esp+0x20]
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	e8 6a e7 ff ff       	call   c0003791 <dir_read>
c0005027:	85 c0                	test   eax,eax
c0005029:	89 c3                	mov    ebx,eax
c000502b:	0f 85 88 00 00 00    	jne    c00050b9 <f_getlabel+0xf0>
c0005031:	31 f6                	xor    esi,esi
c0005033:	31 c9                	xor    ecx,ecx
c0005035:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005039:	8d 79 01             	lea    edi,[ecx+0x1]
c000503c:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005041:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005045:	89 c2                	mov    edx,eax
c0005047:	e8 fc ce ff ff       	call   c0001f48 <dbc_1st>
c000504c:	85 c0                	test   eax,eax
c000504e:	74 16                	je     c0005066 <f_getlabel+0x9d>
c0005050:	83 ff 0b             	cmp    edi,0xb
c0005053:	74 11                	je     c0005066 <f_getlabel+0x9d>
c0005055:	0f b6 44 3d 00       	movzx  eax,BYTE PTR [ebp+edi*1+0x0]
c000505a:	c1 e2 08             	shl    edx,0x8
c000505d:	8d 79 02             	lea    edi,[ecx+0x2]
c0005060:	09 d0                	or     eax,edx
c0005062:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005066:	50                   	push   eax
c0005067:	50                   	push   eax
c0005068:	68 b5 01 00 00       	push   0x1b5
c000506d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005071:	e8 4e 0c 00 00       	call   c0005cc4 <ff_oem2uni>
c0005076:	83 c4 10             	add    esp,0x10
c0005079:	0f b7 c0             	movzx  eax,ax
c000507c:	85 c0                	test   eax,eax
c000507e:	74 22                	je     c00050a2 <f_getlabel+0xd9>
c0005080:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005084:	b9 04 00 00 00       	mov    ecx,0x4
c0005089:	01 f2                	add    edx,esi
c000508b:	e8 88 cf ff ff       	call   c0002018 <put_utf>
c0005090:	84 c0                	test   al,al
c0005092:	74 0e                	je     c00050a2 <f_getlabel+0xd9>
c0005094:	0f b6 c0             	movzx  eax,al
c0005097:	01 c6                	add    esi,eax
c0005099:	83 ff 0b             	cmp    edi,0xb
c000509c:	74 06                	je     c00050a4 <f_getlabel+0xdb>
c000509e:	89 f9                	mov    ecx,edi
c00050a0:	eb 93                	jmp    c0005035 <f_getlabel+0x6c>
c00050a2:	31 f6                	xor    esi,esi
c00050a4:	03 74 24 74          	add    esi,DWORD PTR [esp+0x74]
c00050a8:	39 74 24 74          	cmp    DWORD PTR [esp+0x74],esi
c00050ac:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050af:	74 16                	je     c00050c7 <f_getlabel+0xfe>
c00050b1:	4e                   	dec    esi
c00050b2:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050b5:	74 f1                	je     c00050a8 <f_getlabel+0xdf>
c00050b7:	eb 0e                	jmp    c00050c7 <f_getlabel+0xfe>
c00050b9:	83 fb 04             	cmp    ebx,0x4
c00050bc:	75 09                	jne    c00050c7 <f_getlabel+0xfe>
c00050be:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c2:	31 db                	xor    ebx,ebx
c00050c4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050c7:	85 db                	test   ebx,ebx
c00050c9:	75 48                	jne    c0005113 <f_getlabel+0x14a>
c00050cb:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050d0:	74 41                	je     c0005113 <f_getlabel+0x14a>
c00050d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d6:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d9:	e8 ff d2 ff ff       	call   c00023dd <move_window>
c00050de:	85 c0                	test   eax,eax
c00050e0:	89 c3                	mov    ebx,eax
c00050e2:	75 2f                	jne    c0005113 <f_getlabel+0x14a>
c00050e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e8:	b8 43 00 00 00       	mov    eax,0x43
c00050ed:	8a 0a                	mov    cl,BYTE PTR [edx]
c00050ef:	80 f9 03             	cmp    cl,0x3
c00050f2:	74 10                	je     c0005104 <f_getlabel+0x13b>
c00050f4:	80 f9 04             	cmp    cl,0x4
c00050f7:	b8 64 00 00 00       	mov    eax,0x64
c00050fc:	b9 27 00 00 00       	mov    ecx,0x27
c0005101:	0f 45 c1             	cmovne eax,ecx
c0005104:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005108:	e8 c9 cd ff ff       	call   c0001ed6 <ld_dword>
c000510d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005111:	89 07                	mov    DWORD PTR [edi],eax
c0005113:	83 c4 5c             	add    esp,0x5c
c0005116:	89 d8                	mov    eax,ebx
c0005118:	5b                   	pop    ebx
c0005119:	5e                   	pop    esi
c000511a:	5f                   	pop    edi
c000511b:	5d                   	pop    ebp
c000511c:	c3                   	ret    

c000511d <f_setlabel>:
c000511d:	56                   	push   esi
c000511e:	b9 02 00 00 00       	mov    ecx,0x2
c0005123:	53                   	push   ebx
c0005124:	83 ec 64             	sub    esp,0x64
c0005127:	8d 54 24 14          	lea    edx,[esp+0x14]
c000512b:	8d 44 24 70          	lea    eax,[esp+0x70]
c000512f:	e8 06 d4 ff ff       	call   c000253a <mount_volume>
c0005134:	85 c0                	test   eax,eax
c0005136:	89 c6                	mov    esi,eax
c0005138:	0f 85 67 01 00 00    	jne    c00052a5 <f_setlabel+0x188>
c000513e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005143:	ba 20 00 00 00       	mov    edx,0x20
c0005148:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c000514c:	31 db                	xor    ebx,ebx
c000514e:	e8 b7 cd ff ff       	call   c0001f0a <mem_set>
c0005153:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0005157:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515a:	76 63                	jbe    c00051bf <f_setlabel+0xa2>
c000515c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005160:	e8 e9 cd ff ff       	call   c0001f4e <tchar2uni>
c0005165:	3d ff ff 00 00       	cmp    eax,0xffff
c000516a:	76 0a                	jbe    c0005176 <f_setlabel+0x59>
c000516c:	be 06 00 00 00       	mov    esi,0x6
c0005171:	e9 2f 01 00 00       	jmp    c00052a5 <f_setlabel+0x188>
c0005176:	83 ec 0c             	sub    esp,0xc
c0005179:	50                   	push   eax
c000517a:	e8 bd 0b 00 00       	call   c0005d3c <ff_wtoupper>
c000517f:	5a                   	pop    edx
c0005180:	59                   	pop    ecx
c0005181:	68 b5 01 00 00       	push   0x1b5
c0005186:	50                   	push   eax
c0005187:	e8 9c 0a 00 00       	call   c0005c28 <ff_uni2oem>
c000518c:	83 c4 10             	add    esp,0x10
c000518f:	0f b7 c8             	movzx  ecx,ax
c0005192:	85 c9                	test   ecx,ecx
c0005194:	74 d6                	je     c000516c <f_setlabel+0x4f>
c0005196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000519a:	89 ca                	mov    edx,ecx
c000519c:	b8 30 f8 01 c0       	mov    eax,0xc001f830
c00051a1:	e8 91 cd ff ff       	call   c0001f37 <chk_chr>
c00051a6:	85 c0                	test   eax,eax
c00051a8:	75 c2                	jne    c000516c <f_setlabel+0x4f>
c00051aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051ae:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00051b4:	0f 87 c9 00 00 00    	ja     c0005283 <f_setlabel+0x166>
c00051ba:	e9 dc 00 00 00       	jmp    c000529b <f_setlabel+0x17e>
c00051bf:	80 7c 24 1a e5       	cmp    BYTE PTR [esp+0x1a],0xe5
c00051c4:	74 a6                	je     c000516c <f_setlabel+0x4f>
c00051c6:	85 db                	test   ebx,ebx
c00051c8:	74 0e                	je     c00051d8 <f_setlabel+0xbb>
c00051ca:	80 7c 1c 19 20       	cmp    BYTE PTR [esp+ebx*1+0x19],0x20
c00051cf:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051d2:	75 04                	jne    c00051d8 <f_setlabel+0xbb>
c00051d4:	89 c3                	mov    ebx,eax
c00051d6:	eb ee                	jmp    c00051c6 <f_setlabel+0xa9>
c00051d8:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00051e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00051e4:	31 d2                	xor    edx,edx
c00051e6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00051ea:	8d 44 24 30          	lea    eax,[esp+0x30]
c00051ee:	e8 b2 e1 ff ff       	call   c00033a5 <dir_sdi>
c00051f3:	85 c0                	test   eax,eax
c00051f5:	89 c6                	mov    esi,eax
c00051f7:	0f 85 a8 00 00 00    	jne    c00052a5 <f_setlabel+0x188>
c00051fd:	8d 44 24 30          	lea    eax,[esp+0x30]
c0005201:	ba 01 00 00 00       	mov    edx,0x1
c0005206:	e8 86 e5 ff ff       	call   c0003791 <dir_read>
c000520b:	85 c0                	test   eax,eax
c000520d:	75 18                	jne    c0005227 <f_setlabel+0x10a>
c000520f:	85 db                	test   ebx,ebx
c0005211:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005215:	74 0b                	je     c0005222 <f_setlabel+0x105>
c0005217:	8d 54 24 1a          	lea    edx,[esp+0x1a]
c000521b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005220:	eb 47                	jmp    c0005269 <f_setlabel+0x14c>
c0005222:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005225:	eb 47                	jmp    c000526e <f_setlabel+0x151>
c0005227:	83 f8 04             	cmp    eax,0x4
c000522a:	75 53                	jne    c000527f <f_setlabel+0x162>
c000522c:	85 db                	test   ebx,ebx
c000522e:	74 75                	je     c00052a5 <f_setlabel+0x188>
c0005230:	8d 44 24 30          	lea    eax,[esp+0x30]
c0005234:	ba 01 00 00 00       	mov    edx,0x1
c0005239:	e8 f2 e4 ff ff       	call   c0003730 <dir_alloc>
c000523e:	85 c0                	test   eax,eax
c0005240:	89 c6                	mov    esi,eax
c0005242:	75 61                	jne    c00052a5 <f_setlabel+0x188>
c0005244:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005248:	b9 20 00 00 00       	mov    ecx,0x20
c000524d:	31 d2                	xor    edx,edx
c000524f:	e8 b6 cc ff ff       	call   c0001f0a <mem_set>
c0005254:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005258:	b9 0b 00 00 00       	mov    ecx,0xb
c000525d:	8d 54 24 1a          	lea    edx,[esp+0x1a]
c0005261:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005265:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005269:	e8 87 cc ff ff       	call   c0001ef5 <mem_cpy>
c000526e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005272:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005276:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000527a:	e8 a1 db ff ff       	call   c0002e20 <sync_fs>
c000527f:	89 c6                	mov    esi,eax
c0005281:	eb 22                	jmp    c00052a5 <f_setlabel+0x188>
c0005283:	83 fb 09             	cmp    ebx,0x9
c0005286:	0f 87 e0 fe ff ff    	ja     c000516c <f_setlabel+0x4f>
c000528c:	88 6c 1c 1a          	mov    BYTE PTR [esp+ebx*1+0x1a],ch
c0005290:	43                   	inc    ebx
c0005291:	88 4c 1c 1a          	mov    BYTE PTR [esp+ebx*1+0x1a],cl
c0005295:	43                   	inc    ebx
c0005296:	e9 b8 fe ff ff       	jmp    c0005153 <f_setlabel+0x36>
c000529b:	83 fb 0a             	cmp    ebx,0xa
c000529e:	76 f1                	jbe    c0005291 <f_setlabel+0x174>
c00052a0:	e9 c7 fe ff ff       	jmp    c000516c <f_setlabel+0x4f>
c00052a5:	83 c4 64             	add    esp,0x64
c00052a8:	89 f0                	mov    eax,esi
c00052aa:	5b                   	pop    ebx
c00052ab:	5e                   	pop    esi
c00052ac:	c3                   	ret    

c00052ad <f_expand>:
c00052ad:	55                   	push   ebp
c00052ae:	57                   	push   edi
c00052af:	56                   	push   esi
c00052b0:	53                   	push   ebx
c00052b1:	83 ec 2c             	sub    esp,0x2c
c00052b4:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00052b8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052bc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052c0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00052c4:	89 d8                	mov    eax,ebx
c00052c6:	e8 67 d0 ff ff       	call   c0002332 <validate>
c00052cb:	85 c0                	test   eax,eax
c00052cd:	89 c6                	mov    esi,eax
c00052cf:	0f 85 2c 01 00 00    	jne    c0005401 <f_expand+0x154>
c00052d5:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052d9:	85 f6                	test   esi,esi
c00052db:	0f 85 20 01 00 00    	jne    c0005401 <f_expand+0x154>
c00052e1:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e6:	75 0a                	jne    c00052f2 <f_expand+0x45>
c00052e8:	be 07 00 00 00       	mov    esi,0x7
c00052ed:	e9 0f 01 00 00       	jmp    c0005401 <f_expand+0x154>
c00052f2:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f6:	75 f0                	jne    c00052e8 <f_expand+0x3b>
c00052f8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052fc:	74 ea                	je     c00052e8 <f_expand+0x3b>
c00052fe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005302:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005306:	c1 e7 09             	shl    edi,0x9
c0005309:	8d 47 ff             	lea    eax,[edi-0x1]
c000530c:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005310:	0f 95 c0             	setne  al
c0005313:	31 d2                	xor    edx,edx
c0005315:	0f b6 e8             	movzx  ebp,al
c0005318:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000531c:	f7 f7                	div    edi
c000531e:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c0005321:	01 e8                	add    eax,ebp
c0005323:	83 ff 01             	cmp    edi,0x1
c0005326:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532a:	76 05                	jbe    c0005331 <f_expand+0x84>
c000532c:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000532f:	77 05                	ja     c0005336 <f_expand+0x89>
c0005331:	bf 02 00 00 00       	mov    edi,0x2
c0005336:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005339:	89 fd                	mov    ebp,edi
c000533b:	31 c9                	xor    ecx,ecx
c000533d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005341:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005343:	89 ea                	mov    edx,ebp
c0005345:	45                   	inc    ebp
c0005346:	e8 58 df ff ff       	call   c00032a3 <get_fat.isra.2>
c000534b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000534f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005353:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005356:	77 05                	ja     c000535d <f_expand+0xb0>
c0005358:	bd 02 00 00 00       	mov    ebp,0x2
c000535d:	83 f8 01             	cmp    eax,0x1
c0005360:	74 20                	je     c0005382 <f_expand+0xd5>
c0005362:	83 f8 ff             	cmp    eax,0xffffffff
c0005365:	74 22                	je     c0005389 <f_expand+0xdc>
c0005367:	85 c0                	test   eax,eax
c0005369:	75 09                	jne    c0005374 <f_expand+0xc7>
c000536b:	41                   	inc    ecx
c000536c:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005370:	75 07                	jne    c0005379 <f_expand+0xcc>
c0005372:	eb 1c                	jmp    c0005390 <f_expand+0xe3>
c0005374:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005377:	31 c9                	xor    ecx,ecx
c0005379:	39 fd                	cmp    ebp,edi
c000537b:	75 c0                	jne    c000533d <f_expand+0x90>
c000537d:	e9 66 ff ff ff       	jmp    c00052e8 <f_expand+0x3b>
c0005382:	be 02 00 00 00       	mov    esi,0x2
c0005387:	eb 78                	jmp    c0005401 <f_expand+0x154>
c0005389:	be 01 00 00 00       	mov    esi,0x1
c000538e:	eb 71                	jmp    c0005401 <f_expand+0x154>
c0005390:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0005395:	74 2b                	je     c00053c2 <f_expand+0x115>
c0005397:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000539a:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000539e:	85 ed                	test   ebp,ebp
c00053a0:	74 24                	je     c00053c6 <f_expand+0x119>
c00053a2:	83 c9 ff             	or     ecx,0xffffffff
c00053a5:	83 fd 01             	cmp    ebp,0x1
c00053a8:	74 03                	je     c00053ad <f_expand+0x100>
c00053aa:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053b1:	89 fa                	mov    edx,edi
c00053b3:	e8 7f d4 ff ff       	call   c0002837 <put_fat>
c00053b8:	85 c0                	test   eax,eax
c00053ba:	75 43                	jne    c00053ff <f_expand+0x152>
c00053bc:	89 f8                	mov    eax,edi
c00053be:	4d                   	dec    ebp
c00053bf:	47                   	inc    edi
c00053c0:	eb dc                	jmp    c000539e <f_expand+0xf1>
c00053c2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053c5:	48                   	dec    eax
c00053c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053ca:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00053cf:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053d2:	74 2d                	je     c0005401 <f_expand+0x154>
c00053d4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053d7:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c00053db:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053de:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053e8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053eb:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053ee:	39 c8                	cmp    eax,ecx
c00053f0:	77 0f                	ja     c0005401 <f_expand+0x154>
c00053f2:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00053f6:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00053fa:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00053fd:	eb 02                	jmp    c0005401 <f_expand+0x154>
c00053ff:	89 c6                	mov    esi,eax
c0005401:	83 c4 2c             	add    esp,0x2c
c0005404:	89 f0                	mov    eax,esi
c0005406:	5b                   	pop    ebx
c0005407:	5e                   	pop    esi
c0005408:	5f                   	pop    edi
c0005409:	5d                   	pop    ebp
c000540a:	c3                   	ret    

c000540b <f_mkfs>:
c000540b:	55                   	push   ebp
c000540c:	57                   	push   edi
c000540d:	56                   	push   esi
c000540e:	53                   	push   ebx
c000540f:	bb 0b 00 00 00       	mov    ebx,0xb
c0005414:	83 ec 4c             	sub    esp,0x4c
c0005417:	8d 44 24 60          	lea    eax,[esp+0x60]
c000541b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000541f:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c0005423:	e8 c5 ce ff ff       	call   c00022ed <get_ldnumber>
c0005428:	85 c0                	test   eax,eax
c000542a:	0f 88 c6 07 00 00    	js     c0005bf6 <f_mkfs+0x7eb>
c0005430:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005437:	85 d2                	test   edx,edx
c0005439:	74 03                	je     c000543e <f_mkfs+0x33>
c000543b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000543e:	85 f6                	test   esi,esi
c0005440:	75 05                	jne    c0005447 <f_mkfs+0x3c>
c0005442:	be 20 f8 01 c0       	mov    esi,0xc001f820
c0005447:	0f b6 c0             	movzx  eax,al
c000544a:	83 ec 0c             	sub    esp,0xc
c000544d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005451:	bb 03 00 00 00       	mov    ebx,0x3
c0005456:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000545a:	e8 1c ca ff ff       	call   c0001e7b <disk_initialize>
c000545f:	83 c4 10             	add    esp,0x10
c0005462:	88 c2                	mov    dl,al
c0005464:	80 e2 01             	and    dl,0x1
c0005467:	84 d2                	test   dl,dl
c0005469:	0f 85 87 07 00 00    	jne    c0005bf6 <f_mkfs+0x7eb>
c000546f:	24 04                	and    al,0x4
c0005471:	bb 0a 00 00 00       	mov    ebx,0xa
c0005476:	0f 85 7a 07 00 00    	jne    c0005bf6 <f_mkfs+0x7eb>
c000547c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000547f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005483:	85 c0                	test   eax,eax
c0005485:	75 20                	jne    c00054a7 <f_mkfs+0x9c>
c0005487:	51                   	push   ecx
c0005488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000548c:	50                   	push   eax
c000548d:	6a 03                	push   0x3
c000548f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005493:	e8 12 ca ff ff       	call   c0001eaa <disk_ioctl>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	85 c0                	test   eax,eax
c000549d:	74 08                	je     c00054a7 <f_mkfs+0x9c>
c000549f:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c00054a7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00054ab:	8d 42 ff             	lea    eax,[edx-0x1]
c00054ae:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054b3:	77 04                	ja     c00054b9 <f_mkfs+0xae>
c00054b5:	85 c2                	test   edx,eax
c00054b7:	74 08                	je     c00054c1 <f_mkfs+0xb6>
c00054b9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c00054c1:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00054c4:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00054c8:	fe c8                	dec    al
c00054ca:	3c 01                	cmp    al,0x1
c00054cc:	76 05                	jbe    c00054d3 <f_mkfs+0xc8>
c00054ce:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c00054d3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00054d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054da:	48                   	dec    eax
c00054db:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e0:	77 15                	ja     c00054f7 <f_mkfs+0xec>
c00054e2:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c00054e7:	b8 00 02 00 00       	mov    eax,0x200
c00054ec:	0f 44 44 24 0c       	cmove  eax,DWORD PTR [esp+0xc]
c00054f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054f5:	eb 08                	jmp    c00054ff <f_mkfs+0xf4>
c00054f7:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c00054ff:	8b 7e 0c             	mov    edi,DWORD PTR [esi+0xc]
c0005502:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005508:	77 0f                	ja     c0005519 <f_mkfs+0x10e>
c000550a:	8d 47 ff             	lea    eax,[edi-0x1]
c000550d:	85 f8                	test   eax,edi
c000550f:	b8 00 00 00 00       	mov    eax,0x0
c0005514:	0f 45 f8             	cmovne edi,eax
c0005517:	eb 02                	jmp    c000551b <f_mkfs+0x110>
c0005519:	31 ff                	xor    edi,edi
c000551b:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005523:	77 0a                	ja     c000552f <f_mkfs+0x124>
c0005525:	bb 11 00 00 00       	mov    ebx,0x11
c000552a:	e9 c7 06 00 00       	jmp    c0005bf6 <f_mkfs+0x7eb>
c000552f:	85 ed                	test   ebp,ebp
c0005531:	8a 1e                	mov    bl,BYTE PTR [esi]
c0005533:	89 ee                	mov    esi,ebp
c0005535:	75 1b                	jne    c0005552 <f_mkfs+0x147>
c0005537:	83 ec 0c             	sub    esp,0xc
c000553a:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000553e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005543:	50                   	push   eax
c0005544:	e8 b7 06 00 00       	call   c0005c00 <ff_memalloc>
c0005549:	83 c4 10             	add    esp,0x10
c000554c:	85 c0                	test   eax,eax
c000554e:	89 c6                	mov    esi,eax
c0005550:	74 d3                	je     c0005525 <f_mkfs+0x11a>
c0005552:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c000555a:	52                   	push   edx
c000555b:	8d 44 24 38          	lea    eax,[esp+0x38]
c000555f:	50                   	push   eax
c0005560:	6a 01                	push   0x1
c0005562:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005566:	e8 3f c9 ff ff       	call   c0001eaa <disk_ioctl>
c000556b:	83 c4 10             	add    esp,0x10
c000556e:	85 c0                	test   eax,eax
c0005570:	0f 85 27 06 00 00    	jne    c0005b9d <f_mkfs+0x792>
c0005576:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557e:	88 d8                	mov    al,bl
c0005580:	24 08                	and    al,0x8
c0005582:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005586:	75 18                	jne    c00055a0 <f_mkfs+0x195>
c0005588:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000558c:	83 f8 3f             	cmp    eax,0x3f
c000558f:	76 0f                	jbe    c00055a0 <f_mkfs+0x195>
c0005591:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005599:	83 e8 3f             	sub    eax,0x3f
c000559c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00055a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00055a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00055a8:	83 f8 7f             	cmp    eax,0x7f
c00055ab:	0f 86 61 02 00 00    	jbe    c0005812 <f_mkfs+0x407>
c00055b1:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055b7:	b9 80 00 00 00       	mov    ecx,0x80
c00055bc:	77 05                	ja     c00055c3 <f_mkfs+0x1b8>
c00055be:	c1 ef 09             	shr    edi,0x9
c00055c1:	89 f9                	mov    ecx,edi
c00055c3:	88 d8                	mov    al,bl
c00055c5:	24 01                	and    al,0x1
c00055c7:	80 e3 02             	and    bl,0x2
c00055ca:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c00055ce:	74 0a                	je     c00055da <f_mkfs+0x1cf>
c00055d0:	84 c0                	test   al,al
c00055d2:	0f 84 58 01 00 00    	je     c0005730 <f_mkfs+0x325>
c00055d8:	eb 3b                	jmp    c0005615 <f_mkfs+0x20a>
c00055da:	84 c0                	test   al,al
c00055dc:	bb 13 00 00 00       	mov    ebx,0x13
c00055e1:	75 32                	jne    c0005615 <f_mkfs+0x20a>
c00055e3:	e9 cc 05 00 00       	jmp    c0005bb4 <f_mkfs+0x7a9>
c00055e8:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00055ed:	0f 85 18 02 00 00    	jne    c000580b <f_mkfs+0x400>
c00055f3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00055f8:	0f 86 ee 01 00 00    	jbe    c00057ec <f_mkfs+0x3e1>
c00055fe:	85 c9                	test   ecx,ecx
c0005600:	0f 85 c0 05 00 00    	jne    c0005bc6 <f_mkfs+0x7bb>
c0005606:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000560a:	01 c9                	add    ecx,ecx
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 c1 05 00 00    	ja     c0005bd6 <f_mkfs+0x7cb>
c0005615:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0005619:	85 c9                	test   ecx,ecx
c000561b:	75 1f                	jne    c000563c <f_mkfs+0x231>
c000561d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0005625:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0005629:	b8 00 f8 01 c0       	mov    eax,0xc001f800
c000562e:	c1 eb 0c             	shr    ebx,0xc
c0005631:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005634:	85 d2                	test   edx,edx
c0005636:	0f 85 62 01 00 00    	jne    c000579e <f_mkfs+0x393>
c000563c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005640:	31 d2                	xor    edx,edx
c0005642:	f7 74 24 04          	div    DWORD PTR [esp+0x4]
c0005646:	3d f5 0f 00 00       	cmp    eax,0xff5
c000564b:	0f 86 65 01 00 00    	jbe    c00057b6 <f_mkfs+0x3ab>
c0005651:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c0005656:	83 c0 02             	add    eax,0x2
c0005659:	01 c0                	add    eax,eax
c000565b:	05 ff 01 00 00       	add    eax,0x1ff
c0005660:	bf 01 00 00 00       	mov    edi,0x1
c0005665:	c1 e8 09             	shr    eax,0x9
c0005668:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000566c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005670:	c1 e0 05             	shl    eax,0x5
c0005673:	c1 e8 09             	shr    eax,0x9
c0005676:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000567a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000567f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005687:	01 f8                	add    eax,edi
c0005689:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000568d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005691:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005696:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c000569a:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c000569e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00056a6:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00056aa:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c00056ae:	f7 d8                	neg    eax
c00056b0:	21 c3                	and    ebx,eax
c00056b2:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c00056b6:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056bb:	0f 85 08 01 00 00    	jne    c00057c9 <f_mkfs+0x3be>
c00056c1:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c00056c5:	01 df                	add    edi,ebx
c00056c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00056cb:	c1 e0 04             	shl    eax,0x4
c00056ce:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d2:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00056d6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00056da:	0f 82 32 01 00 00    	jb     c0005812 <f_mkfs+0x407>
c00056e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056e4:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056e8:	29 f8                	sub    eax,edi
c00056ea:	89 c2                	mov    edx,eax
c00056ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056f0:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c00056f5:	29 c2                	sub    edx,eax
c00056f7:	89 d0                	mov    eax,edx
c00056f9:	31 d2                	xor    edx,edx
c00056fb:	f7 74 24 04          	div    DWORD PTR [esp+0x4]
c00056ff:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005704:	89 c3                	mov    ebx,eax
c0005706:	0f 85 dc fe ff ff    	jne    c00055e8 <f_mkfs+0x1dd>
c000570c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005711:	0f 87 0a 01 00 00    	ja     c0005821 <f_mkfs+0x416>
c0005717:	85 c9                	test   ecx,ecx
c0005719:	0f 85 f3 00 00 00    	jne    c0005812 <f_mkfs+0x407>
c000571f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0005724:	0f 86 e8 00 00 00    	jbe    c0005812 <f_mkfs+0x407>
c000572a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000572e:	d1 e9                	shr    ecx,1
c0005730:	85 c9                	test   ecx,ecx
c0005732:	89 cb                	mov    ebx,ecx
c0005734:	75 25                	jne    c000575b <f_mkfs+0x350>
c0005736:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000573a:	b8 10 f8 01 c0       	mov    eax,0xc001f810
c000573f:	b9 01 00 00 00       	mov    ecx,0x1
c0005744:	c1 eb 11             	shr    ebx,0x11
c0005747:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000574a:	85 d2                	test   edx,edx
c000574c:	74 0b                	je     c0005759 <f_mkfs+0x34e>
c000574e:	83 c0 02             	add    eax,0x2
c0005751:	39 da                	cmp    edx,ebx
c0005753:	77 04                	ja     c0005759 <f_mkfs+0x34e>
c0005755:	01 c9                	add    ecx,ecx
c0005757:	eb ee                	jmp    c0005747 <f_mkfs+0x33c>
c0005759:	31 db                	xor    ebx,ebx
c000575b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000575f:	31 d2                	xor    edx,edx
c0005761:	f7 f1                	div    ecx
c0005763:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000576a:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576f:	c1 ea 09             	shr    edx,0x9
c0005772:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005777:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000577b:	0f 87 91 00 00 00    	ja     c0005812 <f_mkfs+0x407>
c0005781:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0005785:	bf 20 00 00 00       	mov    edi,0x20
c000578a:	89 d9                	mov    ecx,ebx
c000578c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005794:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c0005799:	e9 dc fe ff ff       	jmp    c000567a <f_mkfs+0x26f>
c000579e:	83 c0 02             	add    eax,0x2
c00057a1:	39 da                	cmp    edx,ebx
c00057a3:	0f 87 93 fe ff ff    	ja     c000563c <f_mkfs+0x231>
c00057a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00057ad:	01 54 24 04          	add    DWORD PTR [esp+0x4],edx
c00057b1:	e9 7b fe ff ff       	jmp    c0005631 <f_mkfs+0x226>
c00057b6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00057bb:	8d 04 40             	lea    eax,[eax+eax*2]
c00057be:	40                   	inc    eax
c00057bf:	d1 e8                	shr    eax,1
c00057c1:	83 c0 03             	add    eax,0x3
c00057c4:	e9 92 fe ff ff       	jmp    c000565b <f_mkfs+0x250>
c00057c9:	31 d2                	xor    edx,edx
c00057cb:	89 d8                	mov    eax,ebx
c00057cd:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c00057d1:	85 d2                	test   edx,edx
c00057d3:	74 06                	je     c00057db <f_mkfs+0x3d0>
c00057d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00057d9:	4b                   	dec    ebx
c00057da:	47                   	inc    edi
c00057db:	89 d8                	mov    eax,ebx
c00057dd:	31 d2                	xor    edx,edx
c00057df:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c00057e3:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00057e7:	e9 db fe ff ff       	jmp    c00056c7 <f_mkfs+0x2bc>
c00057ec:	3d f5 0f 00 00       	cmp    eax,0xff5
c00057f1:	77 2e                	ja     c0005821 <f_mkfs+0x416>
c00057f3:	85 c9                	test   ecx,ecx
c00057f5:	75 1b                	jne    c0005812 <f_mkfs+0x407>
c00057f7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00057fb:	01 c9                	add    ecx,ecx
c00057fd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005803:	0f 86 0c fe ff ff    	jbe    c0005615 <f_mkfs+0x20a>
c0005809:	eb 07                	jmp    c0005812 <f_mkfs+0x407>
c000580b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005810:	76 0a                	jbe    c000581c <f_mkfs+0x411>
c0005812:	bb 0e 00 00 00       	mov    ebx,0xe
c0005817:	e9 98 03 00 00       	jmp    c0005bb4 <f_mkfs+0x7a9>
c000581c:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005821:	31 d2                	xor    edx,edx
c0005823:	b9 00 02 00 00       	mov    ecx,0x200
c0005828:	89 f0                	mov    eax,esi
c000582a:	e8 db c6 ff ff       	call   c0001f0a <mem_set>
c000582f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005834:	ba b2 f7 01 c0       	mov    edx,0xc001f7b2
c0005839:	89 f0                	mov    eax,esi
c000583b:	e8 b5 c6 ff ff       	call   c0001ef5 <mem_cpy>
c0005840:	8d 46 0b             	lea    eax,[esi+0xb]
c0005843:	ba 00 02 00 00       	mov    edx,0x200
c0005848:	e8 a1 c6 ff ff       	call   c0001eee <st_word>
c000584d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0005851:	0f b7 d7             	movzx  edx,di
c0005854:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c0005857:	8d 46 0e             	lea    eax,[esi+0xe]
c000585a:	e8 8f c6 ff ff       	call   c0001eee <st_word>
c000585f:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0005863:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005868:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c000586b:	b8 00 00 00 00       	mov    eax,0x0
c0005870:	0f 45 44 24 0c       	cmovne eax,DWORD PTR [esp+0xc]
c0005875:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005879:	8d 46 11             	lea    eax,[esi+0x11]
c000587c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005880:	e8 69 c6 ff ff       	call   c0001eee <st_word>
c0005885:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005889:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000588f:	77 0a                	ja     c000589b <f_mkfs+0x490>
c0005891:	8d 46 13             	lea    eax,[esi+0x13]
c0005894:	e8 55 c6 ff ff       	call   c0001eee <st_word>
c0005899:	eb 08                	jmp    c00058a3 <f_mkfs+0x498>
c000589b:	8d 46 20             	lea    eax,[esi+0x20]
c000589e:	e8 4f c6 ff ff       	call   c0001ef2 <st_dword>
c00058a3:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c00058a7:	8d 46 18             	lea    eax,[esi+0x18]
c00058aa:	ba 3f 00 00 00       	mov    edx,0x3f
c00058af:	e8 3a c6 ff ff       	call   c0001eee <st_word>
c00058b4:	8d 46 1a             	lea    eax,[esi+0x1a]
c00058b7:	ba ff 00 00 00       	mov    edx,0xff
c00058bc:	e8 2d c6 ff ff       	call   c0001eee <st_word>
c00058c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058c5:	8d 46 1c             	lea    eax,[esi+0x1c]
c00058c8:	e8 25 c6 ff ff       	call   c0001ef2 <st_dword>
c00058cd:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058d2:	75 57                	jne    c000592b <f_mkfs+0x520>
c00058d4:	8d 46 43             	lea    eax,[esi+0x43]
c00058d7:	ba 00 00 21 50       	mov    edx,0x50210000
c00058dc:	e8 11 c6 ff ff       	call   c0001ef2 <st_dword>
c00058e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00058e5:	8d 46 24             	lea    eax,[esi+0x24]
c00058e8:	e8 05 c6 ff ff       	call   c0001ef2 <st_dword>
c00058ed:	8d 46 2c             	lea    eax,[esi+0x2c]
c00058f0:	ba 02 00 00 00       	mov    edx,0x2
c00058f5:	e8 f8 c5 ff ff       	call   c0001ef2 <st_dword>
c00058fa:	8d 46 30             	lea    eax,[esi+0x30]
c00058fd:	ba 01 00 00 00       	mov    edx,0x1
c0005902:	e8 e7 c5 ff ff       	call   c0001eee <st_word>
c0005907:	8d 46 32             	lea    eax,[esi+0x32]
c000590a:	ba 06 00 00 00       	mov    edx,0x6
c000590f:	e8 da c5 ff ff       	call   c0001eee <st_word>
c0005914:	8d 46 47             	lea    eax,[esi+0x47]
c0005917:	b9 13 00 00 00       	mov    ecx,0x13
c000591c:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005920:	ba be f7 01 c0       	mov    edx,0xc001f7be
c0005925:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005929:	eb 2f                	jmp    c000595a <f_mkfs+0x54f>
c000592b:	8d 46 27             	lea    eax,[esi+0x27]
c000592e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005933:	e8 ba c5 ff ff       	call   c0001ef2 <st_dword>
c0005938:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000593d:	8d 46 16             	lea    eax,[esi+0x16]
c0005940:	e8 a9 c5 ff ff       	call   c0001eee <st_word>
c0005945:	8d 46 2b             	lea    eax,[esi+0x2b]
c0005948:	b9 13 00 00 00       	mov    ecx,0x13
c000594d:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c0005951:	ba d2 f7 01 c0       	mov    edx,0xc001f7d2
c0005956:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c000595a:	e8 96 c5 ff ff       	call   c0001ef5 <mem_cpy>
c000595f:	8d be fe 01 00 00    	lea    edi,[esi+0x1fe]
c0005965:	ba 55 aa 00 00       	mov    edx,0xaa55
c000596a:	89 f8                	mov    eax,edi
c000596c:	e8 7d c5 ff ff       	call   c0001eee <st_word>
c0005971:	6a 01                	push   0x1
c0005973:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005977:	56                   	push   esi
c0005978:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000597c:	e8 13 c5 ff ff       	call   c0001e94 <disk_write>
c0005981:	83 c4 10             	add    esp,0x10
c0005984:	85 c0                	test   eax,eax
c0005986:	0f 85 11 02 00 00    	jne    c0005b9d <f_mkfs+0x792>
c000598c:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005991:	0f 85 94 00 00 00    	jne    c0005a2b <f_mkfs+0x620>
c0005997:	6a 01                	push   0x1
c0005999:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599d:	83 c0 06             	add    eax,0x6
c00059a0:	50                   	push   eax
c00059a1:	56                   	push   esi
c00059a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00059a6:	e8 e9 c4 ff ff       	call   c0001e94 <disk_write>
c00059ab:	b9 00 02 00 00       	mov    ecx,0x200
c00059b0:	31 d2                	xor    edx,edx
c00059b2:	89 f0                	mov    eax,esi
c00059b4:	e8 51 c5 ff ff       	call   c0001f0a <mem_set>
c00059b9:	ba 52 52 61 41       	mov    edx,0x41615252
c00059be:	89 f0                	mov    eax,esi
c00059c0:	e8 2d c5 ff ff       	call   c0001ef2 <st_dword>
c00059c5:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c00059cb:	ba 72 72 41 61       	mov    edx,0x61417272
c00059d0:	e8 1d c5 ff ff       	call   c0001ef2 <st_dword>
c00059d5:	8d 53 ff             	lea    edx,[ebx-0x1]
c00059d8:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c00059de:	e8 0f c5 ff ff       	call   c0001ef2 <st_dword>
c00059e3:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c00059e9:	ba 02 00 00 00       	mov    edx,0x2
c00059ee:	e8 ff c4 ff ff       	call   c0001ef2 <st_dword>
c00059f3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f8:	89 f8                	mov    eax,edi
c00059fa:	e8 ef c4 ff ff       	call   c0001eee <st_word>
c00059ff:	6a 01                	push   0x1
c0005a01:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a05:	83 c0 07             	add    eax,0x7
c0005a08:	50                   	push   eax
c0005a09:	56                   	push   esi
c0005a0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005a0e:	e8 81 c4 ff ff       	call   c0001e94 <disk_write>
c0005a13:	83 c4 20             	add    esp,0x20
c0005a16:	6a 01                	push   0x1
c0005a18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1c:	40                   	inc    eax
c0005a1d:	50                   	push   eax
c0005a1e:	56                   	push   esi
c0005a1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005a23:	e8 6c c4 ff ff       	call   c0001e94 <disk_write>
c0005a28:	83 c4 10             	add    esp,0x10
c0005a2b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005a2f:	31 d2                	xor    edx,edx
c0005a31:	89 f0                	mov    eax,esi
c0005a33:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c0005a37:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3d:	e8 c8 c4 ff ff       	call   c0001f0a <mem_set>
c0005a42:	c1 ef 09             	shr    edi,0x9
c0005a45:	ba f8 ff ff 00       	mov    edx,0xfffff8
c0005a4a:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c0005a4f:	b8 f8 ff ff ff       	mov    eax,0xfffffff8
c0005a54:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005a5c:	0f 44 c2             	cmove  eax,edx
c0005a5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a63:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005a68:	75 21                	jne    c0005a8b <f_mkfs+0x680>
c0005a6a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a6f:	89 f0                	mov    eax,esi
c0005a71:	e8 7c c4 ff ff       	call   c0001ef2 <st_dword>
c0005a76:	8d 46 04             	lea    eax,[esi+0x4]
c0005a79:	83 ca ff             	or     edx,0xffffffff
c0005a7c:	e8 71 c4 ff ff       	call   c0001ef2 <st_dword>
c0005a81:	8d 46 08             	lea    eax,[esi+0x8]
c0005a84:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005a89:	eb 06                	jmp    c0005a91 <f_mkfs+0x686>
c0005a8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005a8f:	89 f0                	mov    eax,esi
c0005a91:	e8 5c c4 ff ff       	call   c0001ef2 <st_dword>
c0005a96:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0005a9a:	39 fb                	cmp    ebx,edi
c0005a9c:	89 f8                	mov    eax,edi
c0005a9e:	0f 46 c3             	cmovbe eax,ebx
c0005aa1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005aa5:	50                   	push   eax
c0005aa6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005aaa:	56                   	push   esi
c0005aab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005aaf:	e8 e0 c3 ff ff       	call   c0001e94 <disk_write>
c0005ab4:	83 c4 10             	add    esp,0x10
c0005ab7:	85 c0                	test   eax,eax
c0005ab9:	0f 85 de 00 00 00    	jne    c0005b9d <f_mkfs+0x792>
c0005abf:	b9 00 02 00 00       	mov    ecx,0x200
c0005ac4:	31 d2                	xor    edx,edx
c0005ac6:	89 f0                	mov    eax,esi
c0005ac8:	e8 3d c4 ff ff       	call   c0001f0a <mem_set>
c0005acd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ad1:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0005ad5:	29 cb                	sub    ebx,ecx
c0005ad7:	75 c1                	jne    c0005a9a <f_mkfs+0x68f>
c0005ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005add:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c0005ae5:	40                   	inc    eax
c0005ae6:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005aea:	0f 87 73 ff ff ff    	ja     c0005a63 <f_mkfs+0x658>
c0005af0:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005af5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005af9:	0f 44 44 24 04       	cmove  eax,DWORD PTR [esp+0x4]
c0005afe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b02:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0005b06:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005b0a:	0f 47 df             	cmova  ebx,edi
c0005b0d:	53                   	push   ebx
c0005b0e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005b12:	56                   	push   esi
c0005b13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b17:	e8 78 c3 ff ff       	call   c0001e94 <disk_write>
c0005b1c:	83 c4 10             	add    esp,0x10
c0005b1f:	85 c0                	test   eax,eax
c0005b21:	75 7a                	jne    c0005b9d <f_mkfs+0x792>
c0005b23:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005b27:	29 5c 24 04          	sub    DWORD PTR [esp+0x4],ebx
c0005b2b:	75 d5                	jne    c0005b02 <f_mkfs+0x6f7>
c0005b2d:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005b32:	b1 0c                	mov    cl,0xc
c0005b34:	74 1c                	je     c0005b52 <f_mkfs+0x747>
c0005b36:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c0005b3e:	b1 06                	mov    cl,0x6
c0005b40:	77 10                	ja     c0005b52 <f_mkfs+0x747>
c0005b42:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c0005b47:	0f 94 c1             	sete   cl
c0005b4a:	fe c9                	dec    cl
c0005b4c:	80 e1 fd             	and    cl,0xfd
c0005b4f:	80 c1 04             	add    cl,0x4
c0005b52:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c0005b57:	75 2d                	jne    c0005b86 <f_mkfs+0x77b>
c0005b59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005b5d:	83 ec 0c             	sub    esp,0xc
c0005b60:	0f b6 c9             	movzx  ecx,cl
c0005b63:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0005b6b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005b6f:	56                   	push   esi
c0005b70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005b74:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005b78:	e8 53 d3 ff ff       	call   c0002ed0 <create_partition>
c0005b7d:	83 c4 10             	add    esp,0x10
c0005b80:	85 c0                	test   eax,eax
c0005b82:	89 c3                	mov    ebx,eax
c0005b84:	75 2e                	jne    c0005bb4 <f_mkfs+0x7a9>
c0005b86:	50                   	push   eax
c0005b87:	31 db                	xor    ebx,ebx
c0005b89:	6a 00                	push   0x0
c0005b8b:	6a 00                	push   0x0
c0005b8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b91:	e8 14 c3 ff ff       	call   c0001eaa <disk_ioctl>
c0005b96:	83 c4 10             	add    esp,0x10
c0005b99:	85 c0                	test   eax,eax
c0005b9b:	74 17                	je     c0005bb4 <f_mkfs+0x7a9>
c0005b9d:	85 ed                	test   ebp,ebp
c0005b9f:	75 0c                	jne    c0005bad <f_mkfs+0x7a2>
c0005ba1:	83 ec 0c             	sub    esp,0xc
c0005ba4:	56                   	push   esi
c0005ba5:	e8 6a 00 00 00       	call   c0005c14 <ff_memfree>
c0005baa:	83 c4 10             	add    esp,0x10
c0005bad:	bb 01 00 00 00       	mov    ebx,0x1
c0005bb2:	eb 42                	jmp    c0005bf6 <f_mkfs+0x7eb>
c0005bb4:	85 ed                	test   ebp,ebp
c0005bb6:	75 3e                	jne    c0005bf6 <f_mkfs+0x7eb>
c0005bb8:	83 ec 0c             	sub    esp,0xc
c0005bbb:	56                   	push   esi
c0005bbc:	e8 53 00 00 00       	call   c0005c14 <ff_memfree>
c0005bc1:	83 c4 10             	add    esp,0x10
c0005bc4:	eb 30                	jmp    c0005bf6 <f_mkfs+0x7eb>
c0005bc6:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005bcb:	0f 85 5f fb ff ff    	jne    c0005730 <f_mkfs+0x325>
c0005bd1:	e9 3c fc ff ff       	jmp    c0005812 <f_mkfs+0x407>
c0005bd6:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005bdb:	0f 85 55 fb ff ff    	jne    c0005736 <f_mkfs+0x32b>
c0005be1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0005be5:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005beb:	0f 86 4b fa ff ff    	jbe    c000563c <f_mkfs+0x231>
c0005bf1:	e9 1c fc ff ff       	jmp    c0005812 <f_mkfs+0x407>
c0005bf6:	83 c4 4c             	add    esp,0x4c
c0005bf9:	89 d8                	mov    eax,ebx
c0005bfb:	5b                   	pop    ebx
c0005bfc:	5e                   	pop    esi
c0005bfd:	5f                   	pop    edi
c0005bfe:	5d                   	pop    ebp
c0005bff:	c3                   	ret    

c0005c00 <ff_memalloc>:
c0005c00:	83 ec 1c             	sub    esp,0x1c
c0005c03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005c07:	89 04 24             	mov    DWORD PTR [esp],eax
c0005c0a:	e8 ed 1e 00 00       	call   c0007afc <malloc>
c0005c0f:	83 c4 1c             	add    esp,0x1c
c0005c12:	c3                   	ret    
c0005c13:	90                   	nop

c0005c14 <ff_memfree>:
c0005c14:	83 ec 1c             	sub    esp,0x1c
c0005c17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005c1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0005c1e:	e8 ec 1e 00 00       	call   c0007b0f <free>
c0005c23:	90                   	nop
c0005c24:	83 c4 1c             	add    esp,0x1c
c0005c27:	c3                   	ret    

c0005c28 <ff_uni2oem>:
c0005c28:	83 ec 14             	sub    esp,0x14
c0005c2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c2f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c33:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c3a:	c7 44 24 0c 00 fc 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fc00
c0005c42:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c47:	77 0b                	ja     c0005c54 <ff_uni2oem+0x2c>
c0005c49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c4d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c52:	eb 64                	jmp    c0005cb8 <ff_uni2oem+0x90>
c0005c54:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c5c:	77 5a                	ja     c0005cb8 <ff_uni2oem+0x90>
c0005c5e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c62:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c67:	75 4f                	jne    c0005cb8 <ff_uni2oem+0x90>
c0005c69:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c70:	eb 0e                	jmp    c0005c80 <ff_uni2oem+0x58>
c0005c72:	66 90                	xchg   ax,ax
c0005c74:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005c79:	40                   	inc    eax
c0005c7a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7f:	90                   	nop
c0005c80:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005c85:	83 f8 7f             	cmp    eax,0x7f
c0005c88:	77 1a                	ja     c0005ca4 <ff_uni2oem+0x7c>
c0005c8a:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005c8f:	8d 14 00             	lea    edx,[eax+eax*1]
c0005c92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c96:	01 d0                	add    eax,edx
c0005c98:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005c9b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005c9f:	75 d3                	jne    c0005c74 <ff_uni2oem+0x4c>
c0005ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0005ca4:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ca9:	83 e8 80             	sub    eax,0xffffff80
c0005cac:	0f b7 c0             	movzx  eax,ax
c0005caf:	0f b6 c0             	movzx  eax,al
c0005cb2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cb7:	90                   	nop
c0005cb8:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbd:	83 c4 14             	add    esp,0x14
c0005cc0:	c3                   	ret    
c0005cc1:	8d 76 00             	lea    esi,[esi+0x0]

c0005cc4 <ff_oem2uni>:
c0005cc4:	83 ec 18             	sub    esp,0x18
c0005cc7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005ccb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ccf:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005cd4:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005cd8:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005cdf:	c7 44 24 10 00 fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fc00
c0005ce7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005cec:	83 f8 7f             	cmp    eax,0x7f
c0005cef:	77 0b                	ja     c0005cfc <ff_oem2uni+0x38>
c0005cf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005cf5:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005cfa:	eb 34                	jmp    c0005d30 <ff_oem2uni+0x6c>
c0005cfc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d00:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d05:	75 29                	jne    c0005d30 <ff_oem2uni+0x6c>
c0005d07:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d0c:	3d ff 00 00 00       	cmp    eax,0xff
c0005d11:	77 1d                	ja     c0005d30 <ff_oem2uni+0x6c>
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d1d:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d24:	01 d0                	add    eax,edx
c0005d26:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005d29:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d2e:	66 90                	xchg   ax,ax
c0005d30:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0005d35:	83 c4 18             	add    esp,0x18
c0005d38:	c3                   	ret    
c0005d39:	8d 76 00             	lea    esi,[esi+0x0]

c0005d3c <ff_wtoupper>:
c0005d3c:	83 ec 10             	sub    esp,0x10
c0005d3f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d47:	0f 87 af 01 00 00    	ja     c0005efc <ff_wtoupper+0x1c0>
c0005d4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d51:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d56:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d5b:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d60:	77 0a                	ja     c0005d6c <ff_wtoupper+0x30>
c0005d62:	b8 00 fa 01 c0       	mov    eax,0xc001fa00
c0005d67:	eb 0b                	jmp    c0005d74 <ff_wtoupper+0x38>
c0005d69:	8d 76 00             	lea    esi,[esi+0x0]
c0005d6c:	b8 40 f9 01 c0       	mov    eax,0xc001f940
c0005d71:	8d 76 00             	lea    esi,[esi+0x0]
c0005d74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005d78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d7c:	8d 50 02             	lea    edx,[eax+0x2]
c0005d7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d83:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005d86:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005d8b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005d90:	85 c0                	test   eax,eax
c0005d92:	0f 84 58 01 00 00    	je     c0005ef0 <ff_wtoupper+0x1b4>
c0005d98:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005d9d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005da2:	39 c2                	cmp    edx,eax
c0005da4:	0f 82 46 01 00 00    	jb     c0005ef0 <ff_wtoupper+0x1b4>
c0005daa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dae:	8d 50 02             	lea    edx,[eax+0x2]
c0005db1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005db5:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005db8:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005dbd:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dc2:	c1 e8 08             	shr    eax,0x8
c0005dc5:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005dca:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dcf:	0f b6 c0             	movzx  eax,al
c0005dd2:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005dd7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ddc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005de1:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005de6:	01 ca                	add    edx,ecx
c0005de8:	39 d0                	cmp    eax,edx
c0005dea:	0f 8d dc 00 00 00    	jge    c0005ecc <ff_wtoupper+0x190>
c0005df0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005df5:	83 f8 08             	cmp    eax,0x8
c0005df8:	0f 87 ee 00 00 00    	ja     c0005eec <ff_wtoupper+0x1b0>
c0005dfe:	8b 04 85 00 f9 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0700]
c0005e05:	ff e0                	jmp    eax
c0005e07:	90                   	nop
c0005e08:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e0d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e12:	29 c2                	sub    edx,eax
c0005e14:	89 d0                	mov    eax,edx
c0005e16:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e1d:	01 d0                	add    eax,edx
c0005e1f:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005e22:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e27:	e9 9c 00 00 00       	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e2c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e35:	89 d1                	mov    ecx,edx
c0005e37:	29 c1                	sub    ecx,eax
c0005e39:	89 c8                	mov    eax,ecx
c0005e3b:	0f b7 c0             	movzx  eax,ax
c0005e3e:	83 e0 01             	and    eax,0x1
c0005e41:	0f b7 c0             	movzx  eax,ax
c0005e44:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e49:	89 d1                	mov    ecx,edx
c0005e4b:	29 c1                	sub    ecx,eax
c0005e4d:	89 c8                	mov    eax,ecx
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	eb 72                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e56:	66 90                	xchg   ax,ax
c0005e58:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e5d:	83 e8 10             	sub    eax,0x10
c0005e60:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e65:	eb 61                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e67:	90                   	nop
c0005e68:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e6d:	83 e8 20             	sub    eax,0x20
c0005e70:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e75:	eb 51                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e77:	90                   	nop
c0005e78:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e7d:	83 e8 30             	sub    eax,0x30
c0005e80:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e85:	eb 41                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e87:	90                   	nop
c0005e88:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e8d:	83 e8 1a             	sub    eax,0x1a
c0005e90:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e95:	eb 31                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e97:	90                   	nop
c0005e98:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e9d:	83 c0 08             	add    eax,0x8
c0005ea0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea5:	eb 21                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005ea7:	90                   	nop
c0005ea8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ead:	83 e8 50             	sub    eax,0x50
c0005eb0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb5:	eb 11                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005eb7:	90                   	nop
c0005eb8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ebd:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005ec2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec7:	90                   	nop
c0005ec8:	eb 22                	jmp    c0005eec <ff_wtoupper+0x1b0>
c0005eca:	66 90                	xchg   ax,ax
c0005ecc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ed1:	85 c0                	test   eax,eax
c0005ed3:	0f 85 9f fe ff ff    	jne    c0005d78 <ff_wtoupper+0x3c>
c0005ed9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ede:	01 c0                	add    eax,eax
c0005ee0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005ee4:	e9 8f fe ff ff       	jmp    c0005d78 <ff_wtoupper+0x3c>
c0005ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0005eec:	90                   	nop
c0005eed:	8d 76 00             	lea    esi,[esi+0x0]
c0005ef0:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ef5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0005efc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f00:	83 c4 10             	add    esp,0x10
c0005f03:	c3                   	ret    

c0005f04 <utf2ucs>:
c0005f04:	56                   	push   esi
c0005f05:	31 c9                	xor    ecx,ecx
c0005f07:	53                   	push   ebx
c0005f08:	89 c6                	mov    esi,eax
c0005f0a:	0f be 1c 0a          	movsx  ebx,BYTE PTR [edx+ecx*1]
c0005f0e:	88 5c 4e 01          	mov    BYTE PTR [esi+ecx*2+0x1],bl
c0005f12:	89 d8                	mov    eax,ebx
c0005f14:	c1 f8 08             	sar    eax,0x8
c0005f17:	88 04 4e             	mov    BYTE PTR [esi+ecx*2],al
c0005f1a:	41                   	inc    ecx
c0005f1b:	85 db                	test   ebx,ebx
c0005f1d:	75 eb                	jne    c0005f0a <utf2ucs+0x6>
c0005f1f:	5b                   	pop    ebx
c0005f20:	5e                   	pop    esi
c0005f21:	c3                   	ret    

c0005f22 <ucs2utfn>:
c0005f22:	57                   	push   edi
c0005f23:	83 e1 fe             	and    ecx,0xfffffffe
c0005f26:	56                   	push   esi
c0005f27:	89 d6                	mov    esi,edx
c0005f29:	53                   	push   ebx
c0005f2a:	8d 3c 0a             	lea    edi,[edx+ecx*1]
c0005f2d:	39 f7                	cmp    edi,esi
c0005f2f:	74 5a                	je     c0005f8b <ucs2utfn+0x69>
c0005f31:	0f be 1e             	movsx  ebx,BYTE PTR [esi]
c0005f34:	83 c6 02             	add    esi,0x2
c0005f37:	0f be 56 ff          	movsx  edx,BYTE PTR [esi-0x1]
c0005f3b:	c1 e3 08             	shl    ebx,0x8
c0005f3e:	09 d3                	or     ebx,edx
c0005f40:	83 fb 3b             	cmp    ebx,0x3b
c0005f43:	74 46                	je     c0005f8b <ucs2utfn+0x69>
c0005f45:	83 fb 7f             	cmp    ebx,0x7f
c0005f48:	88 da                	mov    dl,bl
c0005f4a:	7f 05                	jg     c0005f51 <ucs2utfn+0x2f>
c0005f4c:	88 18                	mov    BYTE PTR [eax],bl
c0005f4e:	40                   	inc    eax
c0005f4f:	eb dc                	jmp    c0005f2d <ucs2utfn+0xb>
c0005f51:	80 e2 3f             	and    dl,0x3f
c0005f54:	89 d9                	mov    ecx,ebx
c0005f56:	c1 f9 06             	sar    ecx,0x6
c0005f59:	80 ca 80             	or     dl,0x80
c0005f5c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f62:	7f 0e                	jg     c0005f72 <ucs2utfn+0x50>
c0005f64:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0005f67:	80 c9 c0             	or     cl,0xc0
c0005f6a:	83 c0 02             	add    eax,0x2
c0005f6d:	88 48 fe             	mov    BYTE PTR [eax-0x2],cl
c0005f70:	eb bb                	jmp    c0005f2d <ucs2utfn+0xb>
c0005f72:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
c0005f75:	c1 fb 0c             	sar    ebx,0xc
c0005f78:	80 e1 3f             	and    cl,0x3f
c0005f7b:	80 cb e0             	or     bl,0xe0
c0005f7e:	80 c9 80             	or     cl,0x80
c0005f81:	88 18                	mov    BYTE PTR [eax],bl
c0005f83:	83 c0 03             	add    eax,0x3
c0005f86:	88 48 fe             	mov    BYTE PTR [eax-0x2],cl
c0005f89:	eb a2                	jmp    c0005f2d <ucs2utfn+0xb>
c0005f8b:	5b                   	pop    ebx
c0005f8c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f8f:	5e                   	pop    esi
c0005f90:	5f                   	pop    edi
c0005f91:	c3                   	ret    

c0005f92 <isjoliet>:
c0005f92:	31 d2                	xor    edx,edx
c0005f94:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005f97:	75 22                	jne    c0005fbb <isjoliet+0x29>
c0005f99:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005f9d:	75 1c                	jne    c0005fbb <isjoliet+0x29>
c0005f9f:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005fa2:	ba 02 00 00 00       	mov    edx,0x2
c0005fa7:	3c 43                	cmp    al,0x43
c0005fa9:	74 10                	je     c0005fbb <isjoliet+0x29>
c0005fab:	3c 45                	cmp    al,0x45
c0005fad:	ba 03 00 00 00       	mov    edx,0x3
c0005fb2:	74 07                	je     c0005fbb <isjoliet+0x29>
c0005fb4:	31 d2                	xor    edx,edx
c0005fb6:	3c 40                	cmp    al,0x40
c0005fb8:	0f 94 c2             	sete   dl
c0005fbb:	89 d0                	mov    eax,edx
c0005fbd:	c3                   	ret    

c0005fbe <htohl_32>:
c0005fbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0005fc0:	c3                   	ret    

c0005fc1 <iso_733>:
c0005fc1:	eb fb                	jmp    c0005fbe <htohl_32>

c0005fc3 <bgrad_cache>:
c0005fc3:	83 fa 0e             	cmp    edx,0xe
c0005fc6:	77 16                	ja     c0005fde <bgrad_cache+0x1b>
c0005fc8:	53                   	push   ebx
c0005fc9:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005fcc:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005fd0:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005fd3:	42                   	inc    edx
c0005fd4:	83 fa 0f             	cmp    edx,0xf
c0005fd7:	75 f3                	jne    c0005fcc <bgrad_cache+0x9>
c0005fd9:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005fdc:	5b                   	pop    ebx
c0005fdd:	c3                   	ret    
c0005fde:	c3                   	ret    

c0005fdf <ucscompare>:
c0005fdf:	55                   	push   ebp
c0005fe0:	57                   	push   edi
c0005fe1:	89 c7                	mov    edi,eax
c0005fe3:	56                   	push   esi
c0005fe4:	89 d6                	mov    esi,edx
c0005fe6:	53                   	push   ebx
c0005fe7:	31 d2                	xor    edx,edx
c0005fe9:	83 ec 1c             	sub    esp,0x1c
c0005fec:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005ff0:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005ff5:	c1 e3 08             	shl    ebx,0x8
c0005ff8:	09 c3                	or     ebx,eax
c0005ffa:	39 ca                	cmp    edx,ecx
c0005ffc:	7d 42                	jge    c0006040 <ucscompare+0x61>
c0005ffe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006002:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006006:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000600a:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000600f:	c1 e0 08             	shl    eax,0x8
c0006012:	09 e8                	or     eax,ebp
c0006014:	83 f8 3b             	cmp    eax,0x3b
c0006017:	74 27                	je     c0006040 <ucscompare+0x61>
c0006019:	83 ec 0c             	sub    esp,0xc
c000601c:	50                   	push   eax
c000601d:	e8 1e aa ff ff       	call   c0000a40 <tolower>
c0006022:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006025:	89 c5                	mov    ebp,eax
c0006027:	e8 14 aa ff ff       	call   c0000a40 <tolower>
c000602c:	83 c4 10             	add    esp,0x10
c000602f:	39 c5                	cmp    ebp,eax
c0006031:	75 21                	jne    c0006054 <ucscompare+0x75>
c0006033:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006037:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000603b:	83 c2 02             	add    edx,0x2
c000603e:	eb ac                	jmp    c0005fec <ucscompare+0xd>
c0006040:	83 fb 2f             	cmp    ebx,0x2f
c0006043:	0f 95 c0             	setne  al
c0006046:	85 db                	test   ebx,ebx
c0006048:	0f 95 c2             	setne  dl
c000604b:	20 d0                	and    al,dl
c000604d:	0f b6 c0             	movzx  eax,al
c0006050:	f7 d8                	neg    eax
c0006052:	eb 03                	jmp    c0006057 <ucscompare+0x78>
c0006054:	83 c8 ff             	or     eax,0xffffffff
c0006057:	83 c4 1c             	add    esp,0x1c
c000605a:	5b                   	pop    ebx
c000605b:	5e                   	pop    esi
c000605c:	5f                   	pop    edi
c000605d:	5d                   	pop    ebp
c000605e:	c3                   	ret    

c000605f <fncompare>:
c000605f:	55                   	push   ebp
c0006060:	31 ed                	xor    ebp,ebp
c0006062:	57                   	push   edi
c0006063:	89 c7                	mov    edi,eax
c0006065:	56                   	push   esi
c0006066:	89 d6                	mov    esi,edx
c0006068:	53                   	push   ebx
c0006069:	89 cb                	mov    ebx,ecx
c000606b:	83 ec 1c             	sub    esp,0x1c
c000606e:	39 f5                	cmp    ebp,esi
c0006070:	7d 3f                	jge    c00060b1 <fncompare+0x52>
c0006072:	0f be 04 2f          	movsx  eax,BYTE PTR [edi+ebp*1]
c0006076:	3c 3b                	cmp    al,0x3b
c0006078:	74 37                	je     c00060b1 <fncompare+0x52>
c000607a:	3c 2e                	cmp    al,0x2e
c000607c:	75 0e                	jne    c000608c <fncompare+0x2d>
c000607e:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006081:	39 e9                	cmp    ecx,ebp
c0006083:	74 2c                	je     c00060b1 <fncompare+0x52>
c0006085:	80 7c 2f 01 3b       	cmp    BYTE PTR [edi+ebp*1+0x1],0x3b
c000608a:	74 25                	je     c00060b1 <fncompare+0x52>
c000608c:	83 ec 0c             	sub    esp,0xc
c000608f:	50                   	push   eax
c0006090:	e8 ab a9 ff ff       	call   c0000a40 <tolower>
c0006095:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0006099:	0f be 04 2b          	movsx  eax,BYTE PTR [ebx+ebp*1]
c000609d:	89 04 24             	mov    DWORD PTR [esp],eax
c00060a0:	e8 9b a9 ff ff       	call   c0000a40 <tolower>
c00060a5:	83 c4 10             	add    esp,0x10
c00060a8:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00060ac:	75 1a                	jne    c00060c8 <fncompare+0x69>
c00060ae:	45                   	inc    ebp
c00060af:	eb bd                	jmp    c000606e <fncompare+0xf>
c00060b1:	8a 14 2b             	mov    dl,BYTE PTR [ebx+ebp*1]
c00060b4:	80 fa 2f             	cmp    dl,0x2f
c00060b7:	0f 95 c0             	setne  al
c00060ba:	84 d2                	test   dl,dl
c00060bc:	0f 95 c2             	setne  dl
c00060bf:	20 d0                	and    al,dl
c00060c1:	0f b6 c0             	movzx  eax,al
c00060c4:	f7 d8                	neg    eax
c00060c6:	eb 03                	jmp    c00060cb <fncompare+0x6c>
c00060c8:	83 c8 ff             	or     eax,0xffffffff
c00060cb:	83 c4 1c             	add    esp,0x1c
c00060ce:	5b                   	pop    ebx
c00060cf:	5e                   	pop    esi
c00060d0:	5f                   	pop    edi
c00060d1:	5d                   	pop    ebp
c00060d2:	c3                   	ret    

c00060d3 <bclear_cache>:
c00060d3:	83 ec 18             	sub    esp,0x18
c00060d6:	68 00 fd 01 c0       	push   0xc001fd00
c00060db:	e8 00 37 01 00       	call   c00197e0 <iso_kprintf>
c00060e0:	83 c4 10             	add    esp,0x10
c00060e3:	31 c0                	xor    eax,eax
c00060e5:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c00060ec:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c00060f2:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c00060f9:	40                   	inc    eax
c00060fa:	83 f8 10             	cmp    eax,0x10
c00060fd:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006103:	75 e0                	jne    c00060e5 <bclear_cache+0x12>
c0006105:	83 c4 0c             	add    esp,0xc
c0006108:	c3                   	ret    

c0006109 <bclear>:
c0006109:	eb c8                	jmp    c00060d3 <bclear_cache>

c000610b <iso_break_all>:
c000610b:	83 ec 18             	sub    esp,0x18
c000610e:	68 0e fd 01 c0       	push   0xc001fd0e
c0006113:	e8 c8 36 01 00       	call   c00197e0 <iso_kprintf>
c0006118:	83 c4 10             	add    esp,0x10
c000611b:	31 c0                	xor    eax,eax
c000611d:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006127:	05 94 00 00 00       	add    eax,0x94
c000612c:	3d 40 09 00 00       	cmp    eax,0x940
c0006131:	75 ea                	jne    c000611d <iso_break_all+0x12>
c0006133:	83 c4 0c             	add    esp,0xc
c0006136:	c3                   	ret    

c0006137 <isoReadDiscSector>:
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c0006141:	50                   	push   eax
c0006142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000614a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000614e:	e8 2d 36 01 00       	call   c0019780 <isoReadDiscSectorHelper>
c0006153:	83 c4 1c             	add    esp,0x1c
c0006156:	c3                   	ret    

c0006157 <bread_cache>:
c0006157:	55                   	push   ebp
c0006158:	57                   	push   edi
c0006159:	89 d7                	mov    edi,edx
c000615b:	56                   	push   esi
c000615c:	ba 0f 00 00 00       	mov    edx,0xf
c0006161:	53                   	push   ebx
c0006162:	89 c6                	mov    esi,eax
c0006164:	83 ec 0c             	sub    esp,0xc
c0006167:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000616a:	39 38                	cmp    DWORD PTR [eax],edi
c000616c:	74 3c                	je     c00061aa <bread_cache+0x53>
c000616e:	4a                   	dec    edx
c000616f:	83 fa ff             	cmp    edx,0xffffffff
c0006172:	75 f3                	jne    c0006167 <bread_cache+0x10>
c0006174:	31 db                	xor    ebx,ebx
c0006176:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0006179:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c000617c:	74 08                	je     c0006186 <bread_cache+0x2f>
c000617e:	43                   	inc    ebx
c000617f:	83 fb 10             	cmp    ebx,0x10
c0006182:	75 f2                	jne    c0006176 <bread_cache+0x1f>
c0006184:	31 db                	xor    ebx,ebx
c0006186:	50                   	push   eax
c0006187:	6a 01                	push   0x1
c0006189:	57                   	push   edi
c000618a:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c000618d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006190:	83 c0 04             	add    eax,0x4
c0006193:	50                   	push   eax
c0006194:	e8 9e ff ff ff       	call   c0006137 <isoReadDiscSector>
c0006199:	83 c4 10             	add    esp,0x10
c000619c:	83 c9 ff             	or     ecx,0xffffffff
c000619f:	85 c0                	test   eax,eax
c00061a1:	78 13                	js     c00061b6 <bread_cache+0x5f>
c00061a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061a6:	89 da                	mov    edx,ebx
c00061a8:	89 38                	mov    DWORD PTR [eax],edi
c00061aa:	89 f0                	mov    eax,esi
c00061ac:	e8 12 fe ff ff       	call   c0005fc3 <bgrad_cache>
c00061b1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061b6:	83 c4 0c             	add    esp,0xc
c00061b9:	89 c8                	mov    eax,ecx
c00061bb:	5b                   	pop    ebx
c00061bc:	5e                   	pop    esi
c00061bd:	5f                   	pop    edi
c00061be:	5d                   	pop    ebp
c00061bf:	c3                   	ret    

c00061c0 <biread>:
c00061c0:	89 c2                	mov    edx,eax
c00061c2:	b8 80 40 02 c0       	mov    eax,0xc0024080
c00061c7:	eb 8e                	jmp    c0006157 <bread_cache>

c00061c9 <bdread>:
c00061c9:	89 c2                	mov    edx,eax
c00061cb:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00061d0:	eb 85                	jmp    c0006157 <bread_cache>

c00061d2 <strnicmp>:
c00061d2:	55                   	push   ebp
c00061d3:	57                   	push   edi
c00061d4:	56                   	push   esi
c00061d5:	31 f6                	xor    esi,esi
c00061d7:	53                   	push   ebx
c00061d8:	83 ec 0c             	sub    esp,0xc
c00061db:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00061df:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c00061e3:	74 42                	je     c0006227 <strnicmp+0x55>
c00061e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00061e9:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c00061ed:	84 c0                	test   al,al
c00061ef:	74 36                	je     c0006227 <strnicmp+0x55>
c00061f1:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c00061f4:	84 d2                	test   dl,dl
c00061f6:	74 2f                	je     c0006227 <strnicmp+0x55>
c00061f8:	8d 6e 01             	lea    ebp,[esi+0x1]
c00061fb:	38 d0                	cmp    al,dl
c00061fd:	75 04                	jne    c0006203 <strnicmp+0x31>
c00061ff:	89 ee                	mov    esi,ebp
c0006201:	eb dc                	jmp    c00061df <strnicmp+0xd>
c0006203:	83 ec 0c             	sub    esp,0xc
c0006206:	50                   	push   eax
c0006207:	e8 34 a8 ff ff       	call   c0000a40 <tolower>
c000620c:	89 c7                	mov    edi,eax
c000620e:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c0006212:	89 ee                	mov    esi,ebp
c0006214:	89 04 24             	mov    DWORD PTR [esp],eax
c0006217:	e8 24 a8 ff ff       	call   c0000a40 <tolower>
c000621c:	83 c4 10             	add    esp,0x10
c000621f:	29 c7                	sub    edi,eax
c0006221:	89 f8                	mov    eax,edi
c0006223:	74 ba                	je     c00061df <strnicmp+0xd>
c0006225:	eb 02                	jmp    c0006229 <strnicmp+0x57>
c0006227:	31 c0                	xor    eax,eax
c0006229:	83 c4 0c             	add    esp,0xc
c000622c:	5b                   	pop    ebx
c000622d:	5e                   	pop    esi
c000622e:	5f                   	pop    edi
c000622f:	5d                   	pop    ebp
c0006230:	c3                   	ret    

c0006231 <find_object>:
c0006231:	55                   	push   ebp
c0006232:	89 c5                	mov    ebp,eax
c0006234:	57                   	push   edi
c0006235:	56                   	push   esi
c0006236:	53                   	push   ebx
c0006237:	89 d3                	mov    ebx,edx
c0006239:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000623f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006243:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000624a:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006251:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006255:	74 0b                	je     c0006262 <find_object+0x31>
c0006257:	8d 44 24 20          	lea    eax,[esp+0x20]
c000625b:	89 ea                	mov    edx,ebp
c000625d:	e8 a2 fc ff ff       	call   c0005f04 <utf2ucs>
c0006262:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006265:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006269:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000626e:	7e 11                	jle    c0006281 <find_object+0x50>
c0006270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006274:	e8 47 ff ff ff       	call   c00061c0 <biread>
c0006279:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000627d:	85 c0                	test   eax,eax
c000627f:	79 07                	jns    c0006288 <find_object+0x57>
c0006281:	31 db                	xor    ebx,ebx
c0006283:	e9 4c 01 00 00       	jmp    c00063d4 <find_object+0x1a3>
c0006288:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006290:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006294:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006298:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c000629f:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062a3:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00062a5:	84 c9                	test   cl,cl
c00062a7:	75 0e                	jne    c00062b7 <find_object+0x86>
c00062a9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ad:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062b5:	eb b2                	jmp    c0006269 <find_object+0x38>
c00062b7:	8b 15 b4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb4
c00062bd:	0f b6 7b 20          	movzx  edi,BYTE PTR [ebx+0x20]
c00062c1:	85 d2                	test   edx,edx
c00062c3:	89 f8                	mov    eax,edi
c00062c5:	74 33                	je     c00062fa <find_object+0xc9>
c00062c7:	8d 43 21             	lea    eax,[ebx+0x21]
c00062ca:	89 f9                	mov    ecx,edi
c00062cc:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062d0:	e8 0a fd ff ff       	call   c0005fdf <ucscompare>
c00062d5:	85 c0                	test   eax,eax
c00062d7:	0f 84 c9 00 00 00    	je     c00063a6 <find_object+0x175>
c00062dd:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c00062e0:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c00062e4:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c00062ec:	7f bb                	jg     c00062a9 <find_object+0x78>
c00062ee:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00062f2:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00062f6:	7f 98                	jg     c0006290 <find_object+0x5f>
c00062f8:	eb af                	jmp    c00062a9 <find_object+0x78>
c00062fa:	0f b6 f1             	movzx  esi,cl
c00062fd:	29 fe                	sub    esi,edi
c00062ff:	24 01                	and    al,0x1
c0006301:	8d 7c 3b 21          	lea    edi,[ebx+edi*1+0x21]
c0006305:	74 05                	je     c000630c <find_object+0xdb>
c0006307:	83 ee 21             	sub    esi,0x21
c000630a:	eb 5b                	jmp    c0006367 <find_object+0x136>
c000630c:	47                   	inc    edi
c000630d:	83 ee 22             	sub    esi,0x22
c0006310:	eb 55                	jmp    c0006367 <find_object+0x136>
c0006312:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006315:	fe c8                	dec    al
c0006317:	3c 01                	cmp    al,0x1
c0006319:	77 51                	ja     c000636c <find_object+0x13b>
c000631b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000631f:	50                   	push   eax
c0006320:	6a 02                	push   0x2
c0006322:	68 1d fd 01 c0       	push   0xc001fd1d
c0006327:	57                   	push   edi
c0006328:	e8 a3 a5 ff ff       	call   c00008d0 <strncmp>
c000632d:	83 c4 10             	add    esp,0x10
c0006330:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006334:	85 c0                	test   eax,eax
c0006336:	75 27                	jne    c000635f <find_object+0x12e>
c0006338:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000633c:	50                   	push   eax
c000633d:	8d 47 05             	lea    eax,[edi+0x5]
c0006340:	83 ea 05             	sub    edx,0x5
c0006343:	52                   	push   edx
c0006344:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006348:	50                   	push   eax
c0006349:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000634d:	50                   	push   eax
c000634e:	e8 fd a3 ff ff       	call   c0000750 <strncpy>
c0006353:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0006357:	c6 44 14 30 00       	mov    BYTE PTR [esp+edx*1+0x30],0x0
c000635c:	83 c4 10             	add    esp,0x10
c000635f:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006363:	29 c6                	sub    esi,eax
c0006365:	01 c7                	add    edi,eax
c0006367:	83 fe 03             	cmp    esi,0x3
c000636a:	7f a6                	jg     c0006312 <find_object+0xe1>
c000636c:	85 d2                	test   edx,edx
c000636e:	7e 40                	jle    c00063b0 <find_object+0x17f>
c0006370:	51                   	push   ecx
c0006371:	51                   	push   ecx
c0006372:	6a 2f                	push   0x2f
c0006374:	55                   	push   ebp
c0006375:	e8 16 a5 ff ff       	call   c0000890 <strchr>
c000637a:	83 c4 10             	add    esp,0x10
c000637d:	85 c0                	test   eax,eax
c000637f:	74 04                	je     c0006385 <find_object+0x154>
c0006381:	29 e8                	sub    eax,ebp
c0006383:	eb 0c                	jmp    c0006391 <find_object+0x160>
c0006385:	83 ec 0c             	sub    esp,0xc
c0006388:	55                   	push   ebp
c0006389:	e8 92 a2 ff ff       	call   c0000620 <strlen>
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	52                   	push   edx
c0006392:	50                   	push   eax
c0006393:	55                   	push   ebp
c0006394:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006398:	50                   	push   eax
c0006399:	e8 34 fe ff ff       	call   c00061d2 <strnicmp>
c000639e:	83 c4 10             	add    esp,0x10
c00063a1:	e9 2f ff ff ff       	jmp    c00062d5 <find_object+0xa4>
c00063a6:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063aa:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063ae:	eb 1e                	jmp    c00063ce <find_object+0x19d>
c00063b0:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063b4:	8d 43 21             	lea    eax,[ebx+0x21]
c00063b7:	89 e9                	mov    ecx,ebp
c00063b9:	e8 a1 fc ff ff       	call   c000605f <fncompare>
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 17 ff ff ff    	jne    c00062dd <find_object+0xac>
c00063c6:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063ca:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00063ce:	0f 85 09 ff ff ff    	jne    c00062dd <find_object+0xac>
c00063d4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00063da:	89 d8                	mov    eax,ebx
c00063dc:	5b                   	pop    ebx
c00063dd:	5e                   	pop    esi
c00063de:	5f                   	pop    edi
c00063df:	5d                   	pop    ebp
c00063e0:	c3                   	ret    

c00063e1 <find_object_path>:
c00063e1:	55                   	push   ebp
c00063e2:	57                   	push   edi
c00063e3:	89 d7                	mov    edi,edx
c00063e5:	56                   	push   esi
c00063e6:	89 c6                	mov    esi,eax
c00063e8:	53                   	push   ebx
c00063e9:	89 cb                	mov    ebx,ecx
c00063eb:	83 ec 0c             	sub    esp,0xc
c00063ee:	50                   	push   eax
c00063ef:	50                   	push   eax
c00063f0:	6a 2f                	push   0x2f
c00063f2:	56                   	push   esi
c00063f3:	e8 98 a4 ff ff       	call   c0000890 <strchr>
c00063f8:	83 c4 10             	add    esp,0x10
c00063fb:	85 c0                	test   eax,eax
c00063fd:	89 c5                	mov    ebp,eax
c00063ff:	74 3a                	je     c000643b <find_object_path+0x5a>
c0006401:	39 ee                	cmp    esi,ebp
c0006403:	74 31                	je     c0006436 <find_object_path+0x55>
c0006405:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006408:	e8 b4 fb ff ff       	call   c0005fc1 <iso_733>
c000640d:	89 c2                	mov    edx,eax
c000640f:	8d 43 02             	lea    eax,[ebx+0x2]
c0006412:	e8 aa fb ff ff       	call   c0005fc1 <iso_733>
c0006417:	83 ec 0c             	sub    esp,0xc
c000641a:	52                   	push   edx
c000641b:	89 c1                	mov    ecx,eax
c000641d:	ba 01 00 00 00       	mov    edx,0x1
c0006422:	89 f0                	mov    eax,esi
c0006424:	e8 08 fe ff ff       	call   c0006231 <find_object>
c0006429:	83 c4 10             	add    esp,0x10
c000642c:	85 c0                	test   eax,eax
c000642e:	89 c3                	mov    ebx,eax
c0006430:	75 04                	jne    c0006436 <find_object_path+0x55>
c0006432:	31 db                	xor    ebx,ebx
c0006434:	eb 36                	jmp    c000646c <find_object_path+0x8b>
c0006436:	8d 75 01             	lea    esi,[ebp+0x1]
c0006439:	eb b3                	jmp    c00063ee <find_object_path+0xd>
c000643b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000643e:	74 28                	je     c0006468 <find_object_path+0x87>
c0006440:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006443:	e8 79 fb ff ff       	call   c0005fc1 <iso_733>
c0006448:	89 c2                	mov    edx,eax
c000644a:	8d 43 02             	lea    eax,[ebx+0x2]
c000644d:	e8 6f fb ff ff       	call   c0005fc1 <iso_733>
c0006452:	83 ec 0c             	sub    esp,0xc
c0006455:	52                   	push   edx
c0006456:	89 c1                	mov    ecx,eax
c0006458:	89 fa                	mov    edx,edi
c000645a:	89 f0                	mov    eax,esi
c000645c:	e8 d0 fd ff ff       	call   c0006231 <find_object>
c0006461:	83 c4 10             	add    esp,0x10
c0006464:	89 c3                	mov    ebx,eax
c0006466:	eb 04                	jmp    c000646c <find_object_path+0x8b>
c0006468:	85 ff                	test   edi,edi
c000646a:	74 c6                	je     c0006432 <find_object_path+0x51>
c000646c:	83 c4 0c             	add    esp,0xc
c000646f:	89 d8                	mov    eax,ebx
c0006471:	5b                   	pop    ebx
c0006472:	5e                   	pop    esi
c0006473:	5f                   	pop    edi
c0006474:	5d                   	pop    ebp
c0006475:	c3                   	ret    

c0006476 <stricmp>:
c0006476:	57                   	push   edi
c0006477:	56                   	push   esi
c0006478:	31 f6                	xor    esi,esi
c000647a:	53                   	push   ebx
c000647b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c0006486:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000648a:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c000648e:	46                   	inc    esi
c000648f:	50                   	push   eax
c0006490:	e8 8b a5 ff ff       	call   c0000a20 <toupper>
c0006495:	89 04 24             	mov    DWORD PTR [esp],eax
c0006498:	e8 a3 a5 ff ff       	call   c0000a40 <tolower>
c000649d:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064a0:	89 c3                	mov    ebx,eax
c00064a2:	e8 79 a5 ff ff       	call   c0000a20 <toupper>
c00064a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00064aa:	e8 91 a5 ff ff       	call   c0000a40 <tolower>
c00064af:	83 c4 10             	add    esp,0x10
c00064b2:	39 c3                	cmp    ebx,eax
c00064b4:	75 04                	jne    c00064ba <stricmp+0x44>
c00064b6:	85 db                	test   ebx,ebx
c00064b8:	75 c1                	jne    c000647b <stricmp+0x5>
c00064ba:	29 c3                	sub    ebx,eax
c00064bc:	89 d8                	mov    eax,ebx
c00064be:	5b                   	pop    ebx
c00064bf:	5e                   	pop    esi
c00064c0:	5f                   	pop    edi
c00064c1:	c3                   	ret    

c00064c2 <iso_open>:
c00064c2:	57                   	push   edi
c00064c3:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c00064c8:	56                   	push   esi
c00064c9:	53                   	push   ebx
c00064ca:	31 db                	xor    ebx,ebx
c00064cc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00064d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064d5:	0f 95 c3             	setne  bl
c00064d8:	89 da                	mov    edx,ebx
c00064da:	e8 02 ff ff ff       	call   c00063e1 <find_object_path>
c00064df:	83 ca ff             	or     edx,0xffffffff
c00064e2:	85 c0                	test   eax,eax
c00064e4:	74 5e                	je     c0006544 <iso_open+0x82>
c00064e6:	89 c1                	mov    ecx,eax
c00064e8:	31 d2                	xor    edx,edx
c00064ea:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c00064f0:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c00064f7:	75 42                	jne    c000653b <iso_open+0x79>
c00064f9:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c0006503:	8d 41 02             	lea    eax,[ecx+0x2]
c0006506:	e8 b6 fa ff ff       	call   c0005fc1 <iso_733>
c000650b:	89 9f 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],ebx
c0006511:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c000651b:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c0006521:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006524:	e8 98 fa ff ff       	call   c0005fc1 <iso_733>
c0006529:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c0006533:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c0006539:	eb 09                	jmp    c0006544 <iso_open+0x82>
c000653b:	42                   	inc    edx
c000653c:	83 fa 10             	cmp    edx,0x10
c000653f:	75 a9                	jne    c00064ea <iso_open+0x28>
c0006541:	83 ca ff             	or     edx,0xffffffff
c0006544:	5b                   	pop    ebx
c0006545:	89 d0                	mov    eax,edx
c0006547:	5e                   	pop    esi
c0006548:	5f                   	pop    edi
c0006549:	c3                   	ret    

c000654a <iso_close>:
c000654a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000654e:	83 f8 0f             	cmp    eax,0xf
c0006551:	7f 10                	jg     c0006563 <iso_close+0x19>
c0006553:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006559:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c0006563:	e9 6b fb ff ff       	jmp    c00060d3 <bclear_cache>

c0006568 <iso_read>:
c0006568:	55                   	push   ebp
c0006569:	57                   	push   edi
c000656a:	56                   	push   esi
c000656b:	53                   	push   ebx
c000656c:	83 ec 1c             	sub    esp,0x1c
c000656f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0006573:	83 fd 0f             	cmp    ebp,0xf
c0006576:	7e 0a                	jle    c0006582 <iso_read+0x1a>
c0006578:	83 c8 ff             	or     eax,0xffffffff
c000657b:	89 c2                	mov    edx,eax
c000657d:	e9 f4 00 00 00       	jmp    c0006676 <iso_read+0x10e>
c0006582:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c0006588:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c000658f:	74 e7                	je     c0006578 <iso_read+0x10>
c0006591:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c0006597:	85 d2                	test   edx,edx
c0006599:	75 dd                	jne    c0006578 <iso_read+0x10>
c000659b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065a0:	0f 84 cd 00 00 00    	je     c0006673 <iso_read+0x10b>
c00065a6:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00065ac:	8b 9d 4c 45 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdbab4]
c00065b2:	29 c3                	sub    ebx,eax
c00065b4:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c00065b8:	89 d9                	mov    ecx,ebx
c00065ba:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c00065bf:	85 c9                	test   ecx,ecx
c00065c1:	0f 84 ac 00 00 00    	je     c0006673 <iso_read+0x10b>
c00065c7:	89 c6                	mov    esi,eax
c00065c9:	bb 00 08 00 00       	mov    ebx,0x800
c00065ce:	c1 e8 0b             	shr    eax,0xb
c00065d1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00065d7:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c00065dd:	29 f3                	sub    ebx,esi
c00065df:	81 fb 00 08 00 00    	cmp    ebx,0x800
c00065e5:	75 3f                	jne    c0006626 <iso_read+0xbe>
c00065e7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00065ed:	7e 37                	jle    c0006626 <iso_read+0xbe>
c00065ef:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c00065f5:	be 20 00 00 00       	mov    esi,0x20
c00065fa:	7f 05                	jg     c0006601 <iso_read+0x99>
c00065fc:	89 ce                	mov    esi,ecx
c00065fe:	c1 fe 0b             	sar    esi,0xb
c0006601:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006605:	89 f3                	mov    ebx,esi
c0006607:	52                   	push   edx
c0006608:	56                   	push   esi
c0006609:	50                   	push   eax
c000660a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000660e:	c1 e3 0b             	shl    ebx,0xb
c0006611:	e8 21 fb ff ff       	call   c0006137 <isoReadDiscSector>
c0006616:	83 c4 10             	add    esp,0x10
c0006619:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000661d:	85 c0                	test   eax,eax
c000661f:	7f 3d                	jg     c000665e <iso_read+0xf6>
c0006621:	e9 52 ff ff ff       	jmp    c0006578 <iso_read+0x10>
c0006626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000662a:	39 d9                	cmp    ecx,ebx
c000662c:	0f 4e d9             	cmovle ebx,ecx
c000662f:	e8 95 fb ff ff       	call   c00061c9 <bdread>
c0006634:	85 c0                	test   eax,eax
c0006636:	0f 88 3c ff ff ff    	js     c0006578 <iso_read+0x10>
c000663c:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006643:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c0006649:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000664d:	25 ff 07 00 00       	and    eax,0x7ff
c0006652:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006656:	89 d9                	mov    ecx,ebx
c0006658:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000665a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000665e:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006662:	01 da                	add    edx,ebx
c0006664:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c000666a:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c000666e:	e9 28 ff ff ff       	jmp    c000659b <iso_read+0x33>
c0006673:	89 d0                	mov    eax,edx
c0006675:	99                   	cdq    
c0006676:	83 c4 1c             	add    esp,0x1c
c0006679:	5b                   	pop    ebx
c000667a:	5e                   	pop    esi
c000667b:	5f                   	pop    edi
c000667c:	5d                   	pop    ebp
c000667d:	c3                   	ret    

c000667e <iso_seek>:
c000667e:	55                   	push   ebp
c000667f:	83 c8 ff             	or     eax,0xffffffff
c0006682:	57                   	push   edi
c0006683:	89 c2                	mov    edx,eax
c0006685:	56                   	push   esi
c0006686:	53                   	push   ebx
c0006687:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000668b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000668f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006693:	83 fe 0f             	cmp    esi,0xf
c0006696:	7f 65                	jg     c00066fd <iso_seek+0x7f>
c0006698:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c000669e:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00066a5:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c00066ab:	74 50                	je     c00066fd <iso_seek+0x7f>
c00066ad:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00066b4:	75 47                	jne    c00066fd <iso_seek+0x7f>
c00066b6:	83 fb 01             	cmp    ebx,0x1
c00066b9:	74 0e                	je     c00066c9 <iso_seek+0x4b>
c00066bb:	83 fb 02             	cmp    ebx,0x2
c00066be:	74 0e                	je     c00066ce <iso_seek+0x50>
c00066c0:	85 db                	test   ebx,ebx
c00066c2:	75 39                	jne    c00066fd <iso_seek+0x7f>
c00066c4:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00066c7:	eb 0d                	jmp    c00066d6 <iso_seek+0x58>
c00066c9:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c00066cc:	eb 08                	jmp    c00066d6 <iso_seek+0x58>
c00066ce:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c00066d1:	01 f8                	add    eax,edi
c00066d3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00066d6:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c00066dc:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c00066e2:	05 40 45 02 c0       	add    eax,0xc0024540
c00066e7:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c00066ea:	76 03                	jbe    c00066ef <iso_seek+0x71>
c00066ec:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00066ef:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c00066f5:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c00066fb:	31 d2                	xor    edx,edx
c00066fd:	5b                   	pop    ebx
c00066fe:	5e                   	pop    esi
c00066ff:	5f                   	pop    edi
c0006700:	5d                   	pop    ebp
c0006701:	c3                   	ret    

c0006702 <iso_tell>:
c0006702:	53                   	push   ebx
c0006703:	83 c8 ff             	or     eax,0xffffffff
c0006706:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000670a:	89 c2                	mov    edx,eax
c000670c:	83 f9 0f             	cmp    ecx,0xf
c000670f:	7f 20                	jg     c0006731 <iso_tell+0x2f>
c0006711:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006717:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c000671e:	74 11                	je     c0006731 <iso_tell+0x2f>
c0006720:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006727:	75 08                	jne    c0006731 <iso_tell+0x2f>
c0006729:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c000672f:	31 d2                	xor    edx,edx
c0006731:	5b                   	pop    ebx
c0006732:	c3                   	ret    

c0006733 <iso_total>:
c0006733:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006737:	83 c8 ff             	or     eax,0xffffffff
c000673a:	83 fa 0f             	cmp    edx,0xf
c000673d:	7f 1e                	jg     c000675d <iso_total+0x2a>
c000673f:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006745:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c000674c:	74 0f                	je     c000675d <iso_total+0x2a>
c000674e:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c0006755:	75 06                	jne    c000675d <iso_total+0x2a>
c0006757:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c000675d:	c3                   	ret    

c000675e <fn_postprocess>:
c000675e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006762:	89 d0                	mov    eax,edx
c0006764:	8a 08                	mov    cl,BYTE PTR [eax]
c0006766:	84 c9                	test   cl,cl
c0006768:	74 08                	je     c0006772 <fn_postprocess+0x14>
c000676a:	80 f9 3b             	cmp    cl,0x3b
c000676d:	74 03                	je     c0006772 <fn_postprocess+0x14>
c000676f:	40                   	inc    eax
c0006770:	eb f2                	jmp    c0006764 <fn_postprocess+0x6>
c0006772:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006775:	39 d0                	cmp    eax,edx
c0006777:	76 0a                	jbe    c0006783 <fn_postprocess+0x25>
c0006779:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c000677d:	75 04                	jne    c0006783 <fn_postprocess+0x25>
c000677f:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c0006783:	c3                   	ret    

c0006784 <iso_readdir>:
c0006784:	55                   	push   ebp
c0006785:	57                   	push   edi
c0006786:	56                   	push   esi
c0006787:	53                   	push   ebx
c0006788:	83 ec 1c             	sub    esp,0x1c
c000678b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000678f:	83 fb 0f             	cmp    ebx,0xf
c0006792:	7f 28                	jg     c00067bc <iso_readdir+0x38>
c0006794:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000679a:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c00067a1:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c00067a7:	74 13                	je     c00067bc <iso_readdir+0x38>
c00067a9:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067ad:	74 0d                	je     c00067bc <iso_readdir+0x38>
c00067af:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00067b6:	0f 84 b1 00 00 00    	je     c000686d <iso_readdir+0xe9>
c00067bc:	83 ec 0c             	sub    esp,0xc
c00067bf:	68 20 fd 01 c0       	push   0xc001fd20
c00067c4:	e8 17 30 01 00       	call   c00197e0 <iso_kprintf>
c00067c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00067cc:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00067d2:	e8 25 30 01 00       	call   c00197fc <iso_kprintfd>
c00067d7:	c7 04 24 25 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd25
c00067de:	e8 fd 2f 01 00       	call   c00197e0 <iso_kprintf>
c00067e3:	58                   	pop    eax
c00067e4:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c00067ea:	e8 0d 30 01 00       	call   c00197fc <iso_kprintfd>
c00067ef:	c7 04 24 2b fd 01 c0 	mov    DWORD PTR [esp],0xc001fd2b
c00067f6:	e8 e5 2f 01 00       	call   c00197e0 <iso_kprintf>
c00067fb:	58                   	pop    eax
c00067fc:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c0006802:	e8 f5 2f 01 00       	call   c00197fc <iso_kprintfd>
c0006807:	c7 04 24 31 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd31
c000680e:	e8 cd 2f 01 00       	call   c00197e0 <iso_kprintf>
c0006813:	58                   	pop    eax
c0006814:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c000681a:	e8 dd 2f 01 00       	call   c00197fc <iso_kprintfd>
c000681f:	83 c4 10             	add    esp,0x10
c0006822:	eb 42                	jmp    c0006866 <iso_readdir+0xe2>
c0006824:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006827:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000682e:	89 d1                	mov    ecx,edx
c0006830:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006836:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c000683a:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000683d:	75 35                	jne    c0006874 <iso_readdir+0xf0>
c000683f:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006845:	81 c2 00 08 00 00    	add    edx,0x800
c000684b:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000684e:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006851:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006854:	73 1e                	jae    c0006874 <iso_readdir+0xf0>
c0006856:	8b 07                	mov    eax,DWORD PTR [edi]
c0006858:	c1 ea 0b             	shr    edx,0xb
c000685b:	01 d0                	add    eax,edx
c000685d:	e8 5e f9 ff ff       	call   c00061c0 <biread>
c0006862:	85 c0                	test   eax,eax
c0006864:	79 be                	jns    c0006824 <iso_readdir+0xa0>
c0006866:	31 c0                	xor    eax,eax
c0006868:	e9 6d 01 00 00       	jmp    c00069da <iso_readdir+0x256>
c000686d:	31 f6                	xor    esi,esi
c000686f:	83 c8 ff             	or     eax,0xffffffff
c0006872:	eb da                	jmp    c000684e <iso_readdir+0xca>
c0006874:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c000687a:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c0006880:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c0006886:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006889:	73 db                	jae    c0006866 <iso_readdir+0xe2>
c000688b:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c000688f:	75 34                	jne    c00068c5 <iso_readdir+0x141>
c0006891:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006895:	75 2e                	jne    c00068c5 <iso_readdir+0x141>
c0006897:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c000689a:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c00068a1:	01 f9                	add    ecx,edi
c00068a3:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068a6:	89 c8                	mov    eax,ecx
c00068a8:	25 ff 07 00 00       	and    eax,0x7ff
c00068ad:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c00068b2:	01 c8                	add    eax,ecx
c00068b4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00068b7:	25 ff 07 00 00       	and    eax,0x7ff
c00068bc:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c00068c0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068c3:	74 a1                	je     c0006866 <iso_readdir+0xe2>
c00068c5:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c00068cb:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c00068cf:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c00068d6:	8d 56 21             	lea    edx,[esi+0x21]
c00068d9:	8d af 58 45 02 c0    	lea    ebp,[edi-0x3ffdbaa8]
c00068df:	74 0c                	je     c00068ed <iso_readdir+0x169>
c00068e1:	89 e8                	mov    eax,ebp
c00068e3:	e8 3a f6 ff ff       	call   c0005f22 <ucs2utfn>
c00068e8:	e9 b4 00 00 00       	jmp    c00069a1 <iso_readdir+0x21d>
c00068ed:	50                   	push   eax
c00068ee:	51                   	push   ecx
c00068ef:	52                   	push   edx
c00068f0:	55                   	push   ebp
c00068f1:	e8 5a 9e ff ff       	call   c0000750 <strncpy>
c00068f6:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c00068fa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00068fd:	c6 84 07 58 45 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdbaa8],0x0
c0006905:	e8 54 fe ff ff       	call   c000675e <fn_postprocess>
c000690a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c000690e:	83 c4 10             	add    esp,0x10
c0006911:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006914:	89 d1                	mov    ecx,edx
c0006916:	80 e1 01             	and    cl,0x1
c0006919:	29 d0                	sub    eax,edx
c000691b:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000691f:	84 c9                	test   cl,cl
c0006921:	74 05                	je     c0006928 <iso_readdir+0x1a4>
c0006923:	83 e8 21             	sub    eax,0x21
c0006926:	eb 04                	jmp    c000692c <iso_readdir+0x1a8>
c0006928:	42                   	inc    edx
c0006929:	83 e8 22             	sub    eax,0x22
c000692c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006930:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006936:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000693a:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000693f:	7e 60                	jle    c00069a1 <iso_readdir+0x21d>
c0006941:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006944:	fe c8                	dec    al
c0006946:	3c 01                	cmp    al,0x1
c0006948:	77 57                	ja     c00069a1 <iso_readdir+0x21d>
c000694a:	51                   	push   ecx
c000694b:	6a 02                	push   0x2
c000694d:	68 1d fd 01 c0       	push   0xc001fd1d
c0006952:	52                   	push   edx
c0006953:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006957:	e8 74 9f ff ff       	call   c00008d0 <strncmp>
c000695c:	83 c4 10             	add    esp,0x10
c000695f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006963:	85 c0                	test   eax,eax
c0006965:	75 2e                	jne    c0006995 <iso_readdir+0x211>
c0006967:	50                   	push   eax
c0006968:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000696c:	83 e8 05             	sub    eax,0x5
c000696f:	50                   	push   eax
c0006970:	8d 42 05             	lea    eax,[edx+0x5]
c0006973:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006977:	50                   	push   eax
c0006978:	55                   	push   ebp
c0006979:	e8 d2 9d ff ff       	call   c0000750 <strncpy>
c000697e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006982:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006986:	83 c4 10             	add    esp,0x10
c0006989:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000698d:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c0006995:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006999:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c000699d:	01 c2                	add    edx,eax
c000699f:	eb 99                	jmp    c000693a <iso_readdir+0x1b6>
c00069a1:	83 c8 ff             	or     eax,0xffffffff
c00069a4:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069a8:	89 c2                	mov    edx,eax
c00069aa:	75 0a                	jne    c00069b6 <iso_readdir+0x232>
c00069ac:	8d 46 0a             	lea    eax,[esi+0xa]
c00069af:	e8 0d f6 ff ff       	call   c0005fc1 <iso_733>
c00069b4:	31 d2                	xor    edx,edx
c00069b6:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00069bc:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c00069c2:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c00069c8:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c00069ce:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c00069d1:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c00069d4:	8d 87 50 45 02 c0    	lea    eax,[edi-0x3ffdbab0]
c00069da:	83 c4 1c             	add    esp,0x1c
c00069dd:	5b                   	pop    ebx
c00069de:	5e                   	pop    esi
c00069df:	5f                   	pop    edi
c00069e0:	5d                   	pop    ebp
c00069e1:	c3                   	ret    

c00069e2 <iso_reset>:
c00069e2:	83 ec 18             	sub    esp,0x18
c00069e5:	68 3a fd 01 c0       	push   0xc001fd3a
c00069ea:	e8 f1 2d 01 00       	call   c00197e0 <iso_kprintf>
c00069ef:	e8 17 f7 ff ff       	call   c000610b <iso_break_all>
c00069f4:	e8 10 f7 ff ff       	call   c0006109 <bclear>
c00069f9:	31 c0                	xor    eax,eax
c00069fb:	83 c4 1c             	add    esp,0x1c
c00069fe:	c3                   	ret    

c00069ff <init_percd>:
c00069ff:	57                   	push   edi
c0006a00:	56                   	push   esi
c0006a01:	53                   	push   ebx
c0006a02:	bb 01 00 00 00       	mov    ebx,0x1
c0006a07:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a0b:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a10:	e8 cd ff ff ff       	call   c00069e2 <iso_reset>
c0006a15:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a1f:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a24:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a28:	e8 93 f7 ff ff       	call   c00061c0 <biread>
c0006a2d:	85 c0                	test   eax,eax
c0006a2f:	89 c6                	mov    esi,eax
c0006a31:	0f 88 ba 00 00 00    	js     c0006af1 <init_percd+0xf2>
c0006a37:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006a3e:	52                   	push   edx
c0006a3f:	6a 06                	push   0x6
c0006a41:	68 45 fd 01 c0       	push   0xc001fd45
c0006a46:	83 c0 04             	add    eax,0x4
c0006a49:	50                   	push   eax
c0006a4a:	e8 31 99 ff ff       	call   c0000380 <memcmp>
c0006a4f:	83 c4 10             	add    esp,0x10
c0006a52:	85 c0                	test   eax,eax
c0006a54:	74 08                	je     c0006a5e <init_percd+0x5f>
c0006a56:	43                   	inc    ebx
c0006a57:	83 fb 04             	cmp    ebx,0x4
c0006a5a:	75 c3                	jne    c0006a1f <init_percd+0x20>
c0006a5c:	eb 1a                	jmp    c0006a78 <init_percd+0x79>
c0006a5e:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006a65:	83 c0 5c             	add    eax,0x5c
c0006a68:	e8 25 f5 ff ff       	call   c0005f92 <isjoliet>
c0006a6d:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006a72:	85 c0                	test   eax,eax
c0006a74:	74 e0                	je     c0006a56 <init_percd+0x57>
c0006a76:	eb 3e                	jmp    c0006ab6 <init_percd+0xb7>
c0006a78:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006a7f:	75 35                	jne    c0006ab6 <init_percd+0xb7>
c0006a81:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a86:	83 c0 10             	add    eax,0x10
c0006a89:	e8 32 f7 ff ff       	call   c00061c0 <biread>
c0006a8e:	85 c0                	test   eax,eax
c0006a90:	89 c6                	mov    esi,eax
c0006a92:	78 5f                	js     c0006af3 <init_percd+0xf4>
c0006a94:	50                   	push   eax
c0006a95:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006a9c:	83 cb ff             	or     ebx,0xffffffff
c0006a9f:	6a 06                	push   0x6
c0006aa1:	68 4c fd 01 c0       	push   0xc001fd4c
c0006aa6:	83 c0 04             	add    eax,0x4
c0006aa9:	50                   	push   eax
c0006aaa:	e8 d1 98 ff ff       	call   c0000380 <memcmp>
c0006aaf:	83 c4 10             	add    esp,0x10
c0006ab2:	85 c0                	test   eax,eax
c0006ab4:	75 3d                	jne    c0006af3 <init_percd+0xf4>
c0006ab6:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006abd:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006ac2:	b9 22 00 00 00       	mov    ecx,0x22
c0006ac7:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006acd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006acf:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006ad4:	31 db                	xor    ebx,ebx
c0006ad6:	e8 e6 f4 ff ff       	call   c0005fc1 <iso_733>
c0006adb:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006ae0:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006ae5:	e8 d7 f4 ff ff       	call   c0005fc1 <iso_733>
c0006aea:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006aef:	eb 02                	jmp    c0006af3 <init_percd+0xf4>
c0006af1:	89 c3                	mov    ebx,eax
c0006af3:	89 d8                	mov    eax,ebx
c0006af5:	5b                   	pop    ebx
c0006af6:	5e                   	pop    esi
c0006af7:	5f                   	pop    edi
c0006af8:	c3                   	ret    

c0006af9 <iso_ioctl>:
c0006af9:	83 ec 18             	sub    esp,0x18
c0006afc:	68 53 fd 01 c0       	push   0xc001fd53
c0006b01:	e8 da 2c 01 00       	call   c00197e0 <iso_kprintf>
c0006b06:	e8 d7 fe ff ff       	call   c00069e2 <iso_reset>
c0006b0b:	31 c0                	xor    eax,eax
c0006b0d:	83 c4 1c             	add    esp,0x1c
c0006b10:	c3                   	ret    

c0006b11 <fs_iso9660_init>:
c0006b11:	53                   	push   ebx
c0006b12:	31 db                	xor    ebx,ebx
c0006b14:	83 ec 14             	sub    esp,0x14
c0006b17:	68 5e fd 01 c0       	push   0xc001fd5e
c0006b1c:	e8 bf 2c 01 00       	call   c00197e0 <iso_kprintf>
c0006b21:	83 c4 0c             	add    esp,0xc
c0006b24:	68 40 09 00 00       	push   0x940
c0006b29:	6a 00                	push   0x0
c0006b2b:	68 40 45 02 c0       	push   0xc0024540
c0006b30:	e8 4b 9a ff ff       	call   c0000580 <memset>
c0006b35:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006b3f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b46:	e8 b1 0f 00 00       	call   c0007afc <malloc>
c0006b4b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b52:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006b57:	e8 a0 0f 00 00       	call   c0007afc <malloc>
c0006b5c:	83 c4 10             	add    esp,0x10
c0006b5f:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006b64:	83 ec 0c             	sub    esp,0xc
c0006b67:	68 04 08 00 00       	push   0x804
c0006b6c:	e8 8b 0f 00 00       	call   c0007afc <malloc>
c0006b71:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006b78:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006b7e:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006b85:	e8 72 0f 00 00       	call   c0007afc <malloc>
c0006b8a:	83 c4 10             	add    esp,0x10
c0006b8d:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006b94:	43                   	inc    ebx
c0006b95:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006b9b:	83 fb 10             	cmp    ebx,0x10
c0006b9e:	75 c4                	jne    c0006b64 <fs_iso9660_init+0x53>
c0006ba0:	83 c4 08             	add    esp,0x8
c0006ba3:	31 c0                	xor    eax,eax
c0006ba5:	5b                   	pop    ebx
c0006ba6:	c3                   	ret    

c0006ba7 <fs_iso9660_shutdown>:
c0006ba7:	53                   	push   ebx
c0006ba8:	31 db                	xor    ebx,ebx
c0006baa:	83 ec 08             	sub    esp,0x8
c0006bad:	83 ec 0c             	sub    esp,0xc
c0006bb0:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006bb7:	e8 53 0f 00 00       	call   c0007b0f <free>
c0006bbc:	58                   	pop    eax
c0006bbd:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006bc4:	43                   	inc    ebx
c0006bc5:	e8 45 0f 00 00       	call   c0007b0f <free>
c0006bca:	83 c4 10             	add    esp,0x10
c0006bcd:	83 fb 10             	cmp    ebx,0x10
c0006bd0:	75 db                	jne    c0006bad <fs_iso9660_shutdown+0x6>
c0006bd2:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006bd7:	85 c0                	test   eax,eax
c0006bd9:	74 0c                	je     c0006be7 <fs_iso9660_shutdown+0x40>
c0006bdb:	83 ec 0c             	sub    esp,0xc
c0006bde:	50                   	push   eax
c0006bdf:	e8 2b 0f 00 00       	call   c0007b0f <free>
c0006be4:	83 c4 10             	add    esp,0x10
c0006be7:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006bec:	85 c0                	test   eax,eax
c0006bee:	74 0c                	je     c0006bfc <fs_iso9660_shutdown+0x55>
c0006bf0:	83 ec 0c             	sub    esp,0xc
c0006bf3:	50                   	push   eax
c0006bf4:	e8 16 0f 00 00       	call   c0007b0f <free>
c0006bf9:	83 c4 10             	add    esp,0x10
c0006bfc:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c06:	31 c0                	xor    eax,eax
c0006c08:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c12:	83 c4 08             	add    esp,0x8
c0006c15:	5b                   	pop    ebx
c0006c16:	c3                   	ret    
c0006c17:	90                   	nop

c0006c18 <Computer::close(int, int, void*)>:
c0006c18:	83 ec 1c             	sub    esp,0x1c
c0006c1b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0006c1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006c23:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c27:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006c2b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0006c2f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0006c33:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c39:	89 04 24             	mov    DWORD PTR [esp],eax
c0006c3c:	e8 c7 59 00 00       	call   c000c608 <Device::closeAll()>
c0006c41:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c47:	b9 0f 27 00 00       	mov    ecx,0x270f
c0006c4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c50:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c52:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0006c56:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006c5a:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0006c5e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c62:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0006c66:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c6a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006c6d:	83 c4 1c             	add    esp,0x1c
c0006c70:	ff e0                	jmp    eax

c0006c72 <Krnl::firstTask()>:
c0006c72:	53                   	push   ebx
c0006c73:	83 ec 28             	sub    esp,0x28
c0006c76:	fb                   	sti    
c0006c77:	c7 04 24 6f fd 01 c0 	mov    DWORD PTR [esp],0xc001fd6f
c0006c7e:	e8 3e 9b 00 00       	call   c00107c1 <KeSetBootMessage(char const*)>
c0006c83:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006c8a:	e8 6d 0e 00 00       	call   c0007afc <malloc>
c0006c8f:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006c95:	b9 01 00 00 00       	mov    ecx,0x1
c0006c9a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006c9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006ca2:	ba 88 fd 01 c0       	mov    edx,0xc001fd88
c0006ca7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006cab:	89 c3                	mov    ebx,eax
c0006cad:	31 c0                	xor    eax,eax
c0006caf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006cb6:	e8 35 e6 00 00       	call   c00152f0 <Process::Process(bool, char const*, Process*, char**)>
c0006cbb:	b8 ff 00 00 00       	mov    eax,0xff
c0006cc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006cc4:	31 c0                	xor    eax,eax
c0006cc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006cca:	b8 31 75 00 c0       	mov    eax,0xc0007531
c0006ccf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006cd2:	31 db                	xor    ebx,ebx
c0006cd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006cd8:	e8 2b e8 00 00       	call   c0015508 <Process::createThread(void (*)(void*), void*, int)>
c0006cdd:	b8 7a 00 00 00       	mov    eax,0x7a
c0006ce2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce6:	31 c0                	xor    eax,eax
c0006ce8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006cec:	b8 34 5f 01 c0       	mov    eax,0xc0015f34
c0006cf1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006cf5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006cfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0006cfd:	e8 06 e8 00 00       	call   c0015508 <Process::createThread(void (*)(void*), void*, int)>
c0006d02:	b2 01                	mov    dl,0x1
c0006d04:	88 15 bd 4e 02 c0    	mov    BYTE PTR ds:0xc0024ebd,dl
c0006d0a:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d0f:	e8 db a2 00 00       	call   c0010fef <KeInitRand()>
c0006d14:	c7 04 24 84 fe 01 c0 	mov    DWORD PTR [esp],0xc001fe84
c0006d1b:	e8 a1 9a 00 00       	call   c00107c1 <KeSetBootMessage(char const*)>
c0006d20:	e8 cc f5 00 00       	call   c00162f1 <Vm::initialise8086()>
c0006d25:	e8 fd 40 00 00       	call   c000ae27 <Fs::initVFS()>
c0006d2a:	c7 04 24 95 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd95
c0006d31:	e8 8b 9a 00 00       	call   c00107c1 <KeSetBootMessage(char const*)>
c0006d36:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d3b:	31 c9                	xor    ecx,ecx
c0006d3d:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d43:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d45:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006d49:	31 c9                	xor    ecx,ecx
c0006d4b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006d4f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006d53:	bb 3a 00 00 00       	mov    ebx,0x3a
c0006d58:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d5b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d5e:	c7 04 24 84 fe 01 c0 	mov    DWORD PTR [esp],0xc001fe84
c0006d65:	e8 57 9a 00 00       	call   c00107c1 <KeSetBootMessage(char const*)>
c0006d6a:	e8 29 9f 00 00       	call   c0010c98 <Krnl::loadSystemEnv()>
c0006d6f:	e8 86 a1 00 00       	call   c0010efa <Krnl::setupPowerManager()>
c0006d74:	b8 af fd 01 c0       	mov    eax,0xc001fdaf
c0006d79:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006d7d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006d81:	c7 04 24 b8 fd 01 c0 	mov    DWORD PTR [esp],0xc001fdb8
c0006d88:	e8 43 c8 00 00       	call   c00135d0 <Reg::readIntWithDefault(char*, char*, int)>
c0006d8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d90:	e8 9b 4b 00 00       	call   c000b930 <User::loadClockSettings(int)>
c0006d95:	c7 04 24 a8 fe 01 c0 	mov    DWORD PTR [esp],0xc001fea8
c0006d9c:	e8 20 9a 00 00       	call   c00107c1 <KeSetBootMessage(char const*)>
c0006da1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006da6:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006dac:	89 04 24             	mov    DWORD PTR [esp],eax
c0006daf:	e8 52 58 00 00       	call   c000c606 <Device::loadDriversForAll()>
c0006db4:	c7 04 24 c0 fd 01 c0 	mov    DWORD PTR [esp],0xc001fdc0
c0006dbb:	e8 01 9a 00 00       	call   c00107c1 <KeSetBootMessage(char const*)>
c0006dc0:	b8 01 00 00 00       	mov    eax,0x1
c0006dc5:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006dcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006dcf:	c7 04 24 d1 fd 01 c0 	mov    DWORD PTR [esp],0xc001fdd1
c0006dd6:	e8 03 df 00 00       	call   c0014cde <Thr::loadDLL(char const*, bool)>
c0006ddb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0006ddf:	89 04 24             	mov    DWORD PTR [esp],eax
c0006de2:	e8 33 e1 00 00       	call   c0014f1a <Thr::executeDLL(unsigned long, void*)>
c0006de7:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0006dee:	e8 49 eb 00 00       	call   c001593c <blockTask(TaskState)>
c0006df3:	eb f2                	jmp    c0006de7 <Krnl::firstTask()+0x175>
c0006df5:	90                   	nop

c0006df6 <Computer::Computer()>:
c0006df6:	83 ec 1c             	sub    esp,0x1c
c0006df9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006dfd:	c7 44 24 04 ed fd 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fded
c0006e05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006e08:	e8 75 58 00 00       	call   c000c682 <Device::Device(char const*)>
c0006e0d:	ba f4 fe 01 c0       	mov    edx,0xc001fef4
c0006e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e16:	89 10                	mov    DWORD PTR [eax],edx
c0006e18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e1c:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e2a:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e38:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c0006e3f:	80 ca 04             	or     dl,0x4
c0006e42:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e4c:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0006e53:	0f b6 d0             	movzx  edx,al
c0006e56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e5a:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e65:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0006e6c:	0f b6 d0             	movzx  edx,al
c0006e6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e73:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e7c:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0006e83:	88 c1                	mov    cl,al
c0006e85:	fe c1                	inc    cl
c0006e87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006e8b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e91:	0f b6 d0             	movzx  edx,al
c0006e94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e98:	0f b6 4c 90 07       	movzx  ecx,BYTE PTR [eax+edx*4+0x7]
c0006e9d:	80 e1 3f             	and    cl,0x3f
c0006ea0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006ea4:	90                   	nop
c0006ea5:	83 c4 1c             	add    esp,0x1c
c0006ea8:	c3                   	ret    
c0006ea9:	90                   	nop

c0006eaa <Computer::setBootMessage(char const*)>:
c0006eaa:	c3                   	ret    
c0006eab:	90                   	nop

c0006eac <Computer::detectFeatures()>:
c0006eac:	55                   	push   ebp
c0006ead:	57                   	push   edi
c0006eae:	56                   	push   esi
c0006eaf:	53                   	push   ebx
c0006eb0:	83 ec 3c             	sub    esp,0x3c
c0006eb3:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0006eb7:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006ec1:	e8 33 93 ff ff       	call   c00001f9 <detectCPUID>
c0006ec6:	85 c0                	test   eax,eax
c0006ec8:	0f 95 c0             	setne  al
c0006ecb:	00 c0                	add    al,al
c0006ecd:	88 c2                	mov    dl,al
c0006ecf:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006ed6:	24 fd                	and    al,0xfd
c0006ed8:	08 d0                	or     al,dl
c0006eda:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ee0:	24 02                	and    al,0x2
c0006ee2:	75 48                	jne    c0006f2c <Computer::detectFeatures()+0x80>
c0006ee4:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006eeb:	74 07                	je     c0006ef4 <Computer::detectFeatures()+0x48>
c0006eed:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006ef4:	e8 1d 78 01 00       	call   c001e716 <x87Detect>
c0006ef9:	24 01                	and    al,0x1
c0006efb:	c0 e0 04             	shl    al,0x4
c0006efe:	88 c2                	mov    dl,al
c0006f00:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006f07:	24 ef                	and    al,0xef
c0006f09:	08 d0                	or     al,dl
c0006f0b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f11:	88 c2                	mov    dl,al
c0006f13:	80 e2 10             	and    dl,0x10
c0006f16:	0f 85 34 01 00 00    	jne    c0007050 <Computer::detectFeatures()+0x1a4>
c0006f1c:	84 c0                	test   al,al
c0006f1e:	0f 88 4f 01 00 00    	js     c0007073 <Computer::detectFeatures()+0x1c7>
c0006f24:	83 c4 3c             	add    esp,0x3c
c0006f27:	5b                   	pop    ebx
c0006f28:	5e                   	pop    esi
c0006f29:	5f                   	pop    edi
c0006f2a:	5d                   	pop    ebp
c0006f2b:	c3                   	ret    
c0006f2c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0006f33:	e8 d6 8d 00 00       	call   c000fd0e <CPU::cpuidCheckEDX(unsigned int)>
c0006f38:	24 01                	and    al,0x1
c0006f3a:	c0 e0 03             	shl    al,0x3
c0006f3d:	88 c2                	mov    dl,al
c0006f3f:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006f46:	24 f7                	and    al,0xf7
c0006f48:	08 d0                	or     al,dl
c0006f4a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f50:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f57:	e8 b2 8d 00 00       	call   c000fd0e <CPU::cpuidCheckEDX(unsigned int)>
c0006f5c:	24 01                	and    al,0x1
c0006f5e:	88 c2                	mov    dl,al
c0006f60:	0f b6 83 6d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16d]
c0006f67:	24 fe                	and    al,0xfe
c0006f69:	08 d0                	or     al,dl
c0006f6b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f71:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f78:	e8 91 8d 00 00       	call   c000fd0e <CPU::cpuidCheckEDX(unsigned int)>
c0006f7d:	c0 e0 07             	shl    al,0x7
c0006f80:	88 c2                	mov    dl,al
c0006f82:	0f b6 83 6d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16d]
c0006f89:	24 7f                	and    al,0x7f
c0006f8b:	08 d0                	or     al,dl
c0006f8d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f93:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f9a:	e8 6f 8d 00 00       	call   c000fd0e <CPU::cpuidCheckEDX(unsigned int)>
c0006f9f:	24 01                	and    al,0x1
c0006fa1:	c0 e0 05             	shl    al,0x5
c0006fa4:	88 c2                	mov    dl,al
c0006fa6:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006fad:	24 df                	and    al,0xdf
c0006faf:	08 d0                	or     al,dl
c0006fb1:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fbb:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc1:	0f 84 d1 00 00 00    	je     c0007098 <Computer::detectFeatures()+0x1ec>
c0006fc7:	24 fe                	and    al,0xfe
c0006fc9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fcf:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006fd6:	88 c2                	mov    dl,al
c0006fd8:	80 e2 09             	and    dl,0x9
c0006fdb:	fe ca                	dec    dl
c0006fdd:	75 08                	jne    c0006fe7 <Computer::detectFeatures()+0x13b>
c0006fdf:	24 fe                	and    al,0xfe
c0006fe1:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006feb:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0006fef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ff3:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0006ff7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0006ffb:	8d 74 24 20          	lea    esi,[esp+0x20]
c0006fff:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007003:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007007:	c7 04 24 00 00 00 80 	mov    DWORD PTR [esp],0x80000000
c000700e:	e8 77 8c 00 00       	call   c000fc8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007013:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0007017:	81 7c 24 20 00 00 00 80 	cmp    DWORD PTR [esp+0x20],0x80000000
c000701f:	0f 86 bf fe ff ff    	jbe    c0006ee4 <Computer::detectFeatures()+0x38>
c0007025:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007029:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000702d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007031:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007035:	c7 04 24 01 00 00 80 	mov    DWORD PTR [esp],0x80000001
c000703c:	e8 49 8c 00 00       	call   c000fc8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007041:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c000704b:	e9 94 fe ff ff       	jmp    c0006ee4 <Computer::detectFeatures()+0x38>
c0007050:	e8 7b 76 01 00       	call   c001e6d0 <absolutelyNoChanceInHell>
c0007055:	88 c2                	mov    dl,al
c0007057:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c000705e:	c0 e2 07             	shl    dl,0x7
c0007061:	24 7f                	and    al,0x7f
c0007063:	08 d0                	or     al,dl
c0007065:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000706b:	84 c0                	test   al,al
c000706d:	0f 89 b1 fe ff ff    	jns    c0006f24 <Computer::detectFeatures()+0x78>
c0007073:	e8 c8 72 01 00       	call   c001e340 <avxDetect>
c0007078:	24 01                	and    al,0x1
c000707a:	c0 e0 05             	shl    al,0x5
c000707d:	88 c2                	mov    dl,al
c000707f:	0f b6 83 6d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16d]
c0007086:	24 df                	and    al,0xdf
c0007088:	08 d0                	or     al,dl
c000708a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007090:	83 c4 3c             	add    esp,0x3c
c0007093:	5b                   	pop    ebx
c0007094:	5e                   	pop    esi
c0007095:	5f                   	pop    edi
c0007096:	5d                   	pop    ebp
c0007097:	c3                   	ret    
c0007098:	c7 04 24 00 02 00 00 	mov    DWORD PTR [esp],0x200
c000709f:	e8 6a 8c 00 00       	call   c000fd0e <CPU::cpuidCheckEDX(unsigned int)>
c00070a4:	24 01                	and    al,0x1
c00070a6:	88 c2                	mov    dl,al
c00070a8:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c00070af:	24 fe                	and    al,0xfe
c00070b1:	08 d0                	or     al,dl
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 11 ff ff ff       	jmp    c0006fcf <Computer::detectFeatures()+0x123>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 1c             	sub    esp,0x1c
c00070c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 1c             	add    esp,0x1c
c00070d9:	c3                   	ret    
c00070da:	c7 04 24 f6 fd 01 c0 	mov    DWORD PTR [esp],0xc001fdf6
c00070e1:	e8 4f 9d 00 00       	call   c0010e35 <KePanic(char const*)>
c00070e6:	eb e8                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070e8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070e8:	83 ec 1c             	sub    esp,0x1c
c00070eb:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00070ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00070f7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00070fb:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00070ff:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007106:	74 16                	je     c000711e <Computer::wrmsr(unsigned int, unsigned long long)+0x36>
c0007108:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000710c:	89 f0                	mov    eax,esi
c000710e:	89 fa                	mov    edx,edi
c0007110:	0f 30                	wrmsr  
c0007112:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007116:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000711a:	83 c4 1c             	add    esp,0x1c
c000711d:	c3                   	ret    
c000711e:	c7 04 24 fc fd 01 c0 	mov    DWORD PTR [esp],0xc001fdfc
c0007125:	e8 0b 9d 00 00       	call   c0010e35 <KePanic(char const*)>
c000712a:	eb dc                	jmp    c0007108 <Computer::wrmsr(unsigned int, unsigned long long)+0x20>

c000712c <Computer::shutdown()>:
c000712c:	83 ec 1c             	sub    esp,0x1c
c000712f:	31 c9                	xor    ecx,ecx
c0007131:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007135:	8b 10                	mov    edx,DWORD PTR [eax]
c0007137:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000713b:	31 c9                	xor    ecx,ecx
c000713d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007141:	31 c9                	xor    ecx,ecx
c0007143:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007147:	89 04 24             	mov    DWORD PTR [esp],eax
c000714a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000714d:	83 c4 1c             	add    esp,0x1c
c0007150:	c3                   	ret    
c0007151:	90                   	nop

c0007152 <Computer::restart()>:
c0007152:	83 ec 1c             	sub    esp,0x1c
c0007155:	31 c9                	xor    ecx,ecx
c0007157:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000715b:	8b 10                	mov    edx,DWORD PTR [eax]
c000715d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007161:	31 c9                	xor    ecx,ecx
c0007163:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007167:	b9 01 00 00 00       	mov    ecx,0x1
c000716c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007170:	89 04 24             	mov    DWORD PTR [esp],eax
c0007173:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007176:	83 c4 1c             	add    esp,0x1c
c0007179:	c3                   	ret    

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 27 86 00 00       	jmp    c000f7b4 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	0f b6 80 58 01 00 00 	movzx  eax,BYTE PTR [eax+0x158]
c0007199:	c3                   	ret    

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00071a3:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00071aa:	19 c0                	sbb    eax,eax
c00071ac:	24 80                	and    al,0x80
c00071ae:	08 d0                	or     al,dl
c00071b0:	e6 70                	out    0x70,al
c00071b2:	e4 71                	in     al,0x71
c00071b4:	c3                   	ret    
c00071b5:	90                   	nop

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071ba:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00071bf:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c5:	b8 10 00 00 00       	mov    eax,0x10
c00071ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00071ce:	eb ca                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071d0 <Computer::open(int, int, void*)>:
c00071d0:	56                   	push   esi
c00071d1:	53                   	push   ebx
c00071d2:	83 ec 14             	sub    esp,0x14
c00071d5:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071dc:	c7 04 24 02 fe 01 c0 	mov    DWORD PTR [esp],0xc001fe02
c00071e3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00071e7:	0f 94 05 a0 23 02 c0 	sete   BYTE PTR ds:0xc00223a0
c00071ee:	e8 ce 95 00 00       	call   c00107c1 <KeSetBootMessage(char const*)>
c00071f3:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071fa:	e8 fd 08 00 00       	call   c0007afc <malloc>
c00071ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0007202:	89 c6                	mov    esi,eax
c0007204:	e8 4f 81 00 00       	call   c000f358 <ACPI::ACPI()>
c0007209:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007213:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007216:	e8 cf 52 00 00       	call   c000c4ea <Device::addChild(Device*)>
c000721b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000721e:	e8 89 fc ff ff       	call   c0006eac <Computer::detectFeatures()>
c0007223:	b8 01 00 00 00       	mov    eax,0x1
c0007228:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000722c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000722f:	e8 82 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007234:	c7 04 24 1a fe 01 c0 	mov    DWORD PTR [esp],0xc001fe1a
c000723b:	e8 81 95 00 00       	call   c00107c1 <KeSetBootMessage(char const*)>
c0007240:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007247:	e8 b0 08 00 00       	call   c0007afc <malloc>
c000724c:	89 04 24             	mov    DWORD PTR [esp],eax
c000724f:	89 c6                	mov    esi,eax
c0007251:	e8 70 8b 00 00       	call   c000fdc6 <CPU::CPU()>
c0007256:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000725c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007260:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007263:	e8 82 52 00 00       	call   c000c4ea <Device::addChild(Device*)>
c0007268:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000726e:	31 db                	xor    ebx,ebx
c0007270:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007274:	8b 10                	mov    edx,DWORD PTR [eax]
c0007276:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000727a:	31 c9                	xor    ecx,ecx
c000727c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007280:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0007284:	89 04 24             	mov    DWORD PTR [esp],eax
c0007287:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000728a:	c7 04 24 c8 fe 01 c0 	mov    DWORD PTR [esp],0xc001fec8
c0007291:	e8 2b 95 00 00       	call   c00107c1 <KeSetBootMessage(char const*)>
c0007296:	e8 7c 01 01 00       	call   c0017417 <HalInitialiseCoprocessor()>
c000729b:	c7 04 24 34 fe 01 c0 	mov    DWORD PTR [esp],0xc001fe34
c00072a2:	e8 1a 95 00 00       	call   c00107c1 <KeSetBootMessage(char const*)>
c00072a7:	c7 04 24 72 6c 00 c0 	mov    DWORD PTR [esp],0xc0006c72
c00072ae:	e8 85 e3 00 00       	call   c0015638 <setupMultitasking(void (*)())>
c00072b3:	83 c4 14             	add    esp,0x14
c00072b6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00072bb:	5b                   	pop    ebx
c00072bc:	5e                   	pop    esi
c00072bd:	c3                   	ret    

c00072be <Computer::disableNMI()>:
c00072be:	83 ec 08             	sub    esp,0x8
c00072c1:	31 c0                	xor    eax,eax
c00072c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00072ce:	e8 e3 fe ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072d3:	83 c4 08             	add    esp,0x8
c00072d6:	c3                   	ret    
c00072d7:	90                   	nop

c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072dc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00072e1:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00072e8:	19 c0                	sbb    eax,eax
c00072ea:	24 80                	and    al,0x80
c00072ec:	08 d0                	or     al,dl
c00072ee:	e6 70                	out    0x70,al
c00072f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072f4:	e6 71                	out    0x71,al
c00072f6:	c3                   	ret    
c00072f7:	90                   	nop

c00072f8 <Computer::handleNMI()>:
c00072f8:	83 ec 2c             	sub    esp,0x2c
c00072fb:	e4 92                	in     al,0x92
c00072fd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0007301:	e4 61                	in     al,0x61
c0007303:	c7 04 24 4f fe 01 c0 	mov    DWORD PTR [esp],0xc001fe4f
c000730a:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000730e:	e8 63 37 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0007313:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0007318:	24 10                	and    al,0x10
c000731a:	75 14                	jne    c0007330 <Computer::handleNMI()+0x38>
c000731c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0007321:	24 40                	and    al,0x40
c0007323:	75 20                	jne    c0007345 <Computer::handleNMI()+0x4d>
c0007325:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000732a:	78 2c                	js     c0007358 <Computer::handleNMI()+0x60>
c000732c:	83 c4 2c             	add    esp,0x2c
c000732f:	c3                   	ret    
c0007330:	c7 04 24 60 fe 01 c0 	mov    DWORD PTR [esp],0xc001fe60
c0007337:	e8 f9 9a 00 00       	call   c0010e35 <KePanic(char const*)>
c000733c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0007341:	24 40                	and    al,0x40
c0007343:	74 e0                	je     c0007325 <Computer::handleNMI()+0x2d>
c0007345:	c7 04 24 6d fe 01 c0 	mov    DWORD PTR [esp],0xc001fe6d
c000734c:	e8 e4 9a 00 00       	call   c0010e35 <KePanic(char const*)>
c0007351:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0007356:	79 d4                	jns    c000732c <Computer::handleNMI()+0x34>
c0007358:	b8 77 fe 01 c0       	mov    eax,0xc001fe77
c000735d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007361:	83 c4 2c             	add    esp,0x2c
c0007364:	e9 cc 9a 00 00       	jmp    c0010e35 <KePanic(char const*)>
c0007369:	90                   	nop

c000736a <GDTEntry::setBase(unsigned int)>:
c000736a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000736e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007372:	89 c1                	mov    ecx,eax
c0007374:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007378:	c1 e9 10             	shr    ecx,0x10
c000737b:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000737e:	c1 e8 18             	shr    eax,0x18
c0007381:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007384:	c3                   	ret    
c0007385:	90                   	nop

c0007386 <GDTEntry::setLimit(unsigned int)>:
c0007386:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000738a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000738e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007391:	66 89 01             	mov    WORD PTR [ecx],ax
c0007394:	c1 e8 10             	shr    eax,0x10
c0007397:	24 0f                	and    al,0xf
c0007399:	80 e2 f0             	and    dl,0xf0
c000739c:	08 d0                	or     al,dl
c000739e:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00073a1:	c3                   	ret    

c00073a2 <GDT::GDT()>:
c00073a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073b6:	90                   	nop
c00073b7:	c3                   	ret    

c00073b8 <GDT::addEntry(GDTEntry)>:
c00073b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073bc:	f3 0f 7e 44 24 08    	movq   xmm0,QWORD PTR [esp+0x8]
c00073c2:	8b 02                	mov    eax,DWORD PTR [edx]
c00073c4:	8d 48 01             	lea    ecx,[eax+0x1]
c00073c7:	66 0f d6 44 c2 04    	movq   QWORD PTR [edx+eax*8+0x4],xmm0
c00073cd:	89 0a                	mov    DWORD PTR [edx],ecx
c00073cf:	c1 e0 03             	shl    eax,0x3
c00073d2:	c3                   	ret    
c00073d3:	90                   	nop

c00073d4 <GDT::getNumberOfEntries()>:
c00073d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073da:	c3                   	ret    
c00073db:	90                   	nop

c00073dc <GDT::flush()>:
c00073dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073e0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073e2:	83 c0 04             	add    eax,0x4
c00073e5:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c00073ea:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073f1:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c00073f8:	e9 5d 8f ff ff       	jmp    c000035a <loadGDT>
c00073fd:	90                   	nop

c00073fe <GDT::setup()>:
c00073fe:	57                   	push   edi
c00073ff:	56                   	push   esi
c0007400:	53                   	push   ebx
c0007401:	83 ec 30             	sub    esp,0x30
c0007404:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007408:	6a 00                	push   0x0
c000740a:	8d 74 24 14          	lea    esi,[esp+0x14]
c000740e:	56                   	push   esi
c000740f:	e8 56 ff ff ff       	call   c000736a <GDTEntry::setBase(unsigned int)>
c0007414:	6a 00                	push   0x0
c0007416:	56                   	push   esi
c0007417:	e8 6a ff ff ff       	call   c0007386 <GDTEntry::setLimit(unsigned int)>
c000741c:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007424:	6a 00                	push   0x0
c0007426:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000742a:	56                   	push   esi
c000742b:	e8 3a ff ff ff       	call   c000736a <GDTEntry::setBase(unsigned int)>
c0007430:	68 ff ff ff 00       	push   0xffffff
c0007435:	56                   	push   esi
c0007436:	e8 4b ff ff ff       	call   c0007386 <GDTEntry::setLimit(unsigned int)>
c000743b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000743f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007443:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007448:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000744c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007451:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007455:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007459:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000745d:	89 f8                	mov    eax,edi
c000745f:	89 fa                	mov    edx,edi
c0007461:	80 e4 f7             	and    ah,0xf7
c0007464:	80 ce 60             	or     dh,0x60
c0007467:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000746b:	89 c7                	mov    edi,eax
c000746d:	80 cc 60             	or     ah,0x60
c0007470:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007474:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007478:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007480:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007484:	83 c4 20             	add    esp,0x20
c0007487:	6a 00                	push   0x0
c0007489:	8d 44 24 24          	lea    eax,[esp+0x24]
c000748d:	50                   	push   eax
c000748e:	e8 d7 fe ff ff       	call   c000736a <GDTEntry::setBase(unsigned int)>
c0007493:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007497:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000749b:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c00074a0:	6a 00                	push   0x0
c00074a2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00074a6:	50                   	push   eax
c00074a7:	e8 be fe ff ff       	call   c000736a <GDTEntry::setBase(unsigned int)>
c00074ac:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c00074b1:	83 c4 0c             	add    esp,0xc
c00074b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074bc:	53                   	push   ebx
c00074bd:	e8 f6 fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c00074c2:	83 c4 0c             	add    esp,0xc
c00074c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074c9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074cd:	53                   	push   ebx
c00074ce:	e8 e5 fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c00074d3:	83 c4 0c             	add    esp,0xc
c00074d6:	57                   	push   edi
c00074d7:	56                   	push   esi
c00074d8:	53                   	push   ebx
c00074d9:	e8 da fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c00074de:	83 c4 0c             	add    esp,0xc
c00074e1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074e5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074e9:	53                   	push   ebx
c00074ea:	e8 c9 fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c00074ef:	83 c4 0c             	add    esp,0xc
c00074f2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074fa:	53                   	push   ebx
c00074fb:	e8 b8 fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c0007500:	83 c4 0c             	add    esp,0xc
c0007503:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007507:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000750b:	53                   	push   ebx
c000750c:	e8 a7 fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c0007511:	83 c4 0c             	add    esp,0xc
c0007514:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007518:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000751c:	53                   	push   ebx
c000751d:	e8 96 fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c0007522:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007525:	e8 b2 fe ff ff       	call   c00073dc <GDT::flush()>
c000752a:	83 c4 40             	add    esp,0x40
c000752d:	5b                   	pop    ebx
c000752e:	5e                   	pop    esi
c000752f:	5f                   	pop    edi
c0007530:	c3                   	ret    

c0007531 <idleFunction(void*)>:
c0007531:	83 ec 0c             	sub    esp,0xc
c0007534:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007539:	48                   	dec    eax
c000753a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000753f:	75 01                	jne    c0007542 <idleFunction(void*)+0x11>
c0007541:	fb                   	sti    
c0007542:	e8 c4 fb 00 00       	call   c001710b <HalSystemIdle()>
c0007547:	e8 7f 77 01 00       	call   c001eccb <idleCommon()>
c000754c:	eb f4                	jmp    c0007542 <idleFunction(void*)+0x11>
c000754e:	66 90                	xchg   ax,ax

c0007550 <IDTEntry::IDTEntry(bool)>:
c0007550:	83 ec 04             	sub    esp,0x4
c0007553:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007557:	88 04 24             	mov    BYTE PTR [esp],al
c000755a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000755e:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007568:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000756c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007570:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0007574:	80 e2 f0             	and    dl,0xf0
c0007577:	80 ca 0e             	or     dl,0xe
c000757a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000757d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007581:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0007585:	80 e2 ef             	and    dl,0xef
c0007588:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000758b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000758f:	74 07                	je     c0007598 <IDTEntry::IDTEntry(bool)+0x48>
c0007591:	b2 03                	mov    dl,0x3
c0007593:	eb 07                	jmp    c000759c <IDTEntry::IDTEntry(bool)+0x4c>
c0007595:	8d 76 00             	lea    esi,[esi+0x0]
c0007598:	b2 00                	mov    dl,0x0
c000759a:	66 90                	xchg   ax,ax
c000759c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075a0:	80 e2 03             	and    dl,0x3
c00075a3:	88 d1                	mov    cl,dl
c00075a5:	c0 e1 05             	shl    cl,0x5
c00075a8:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00075ac:	80 e2 9f             	and    dl,0x9f
c00075af:	08 ca                	or     dl,cl
c00075b1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075b8:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00075bc:	80 ca 80             	or     dl,0x80
c00075bf:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075c2:	90                   	nop
c00075c3:	83 c4 04             	add    esp,0x4
c00075c6:	c3                   	ret    
c00075c7:	90                   	nop

c00075c8 <IDTEntry::setOffset(unsigned int)>:
c00075c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075d0:	66 89 02             	mov    WORD PTR [edx],ax
c00075d3:	c1 e8 10             	shr    eax,0x10
c00075d6:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075da:	c3                   	ret    
c00075db:	90                   	nop

c00075dc <IDT::IDT()>:
c00075dc:	90                   	nop
c00075dd:	c3                   	ret    

c00075de <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075e2:	83 c0 30             	add    eax,0x30
c00075e5:	c3                   	ret    

c00075e6 <IDT::addEntry(IDTEntry, int)>:
c00075e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075ea:	f3 0f 7e 44 24 08    	movq   xmm0,QWORD PTR [esp+0x8]
c00075f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00075f4:	66 0f d6 04 d0       	movq   QWORD PTR [eax+edx*8],xmm0
c00075f9:	c3                   	ret    

c00075fa <IDT::addEntry(int, void (*)(), bool)>:
c00075fa:	53                   	push   ebx
c00075fb:	83 ec 10             	sub    esp,0x10
c00075fe:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007603:	50                   	push   eax
c0007604:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0007608:	53                   	push   ebx
c0007609:	e8 42 ff ff ff       	call   c0007550 <IDTEntry::IDTEntry(bool)>
c000760e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007612:	53                   	push   ebx
c0007613:	e8 b0 ff ff ff       	call   c00075c8 <IDTEntry::setOffset(unsigned int)>
c0007618:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000761c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007620:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007624:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007628:	e8 b9 ff ff ff       	call   c00075e6 <IDT::addEntry(IDTEntry, int)>
c000762d:	83 c4 30             	add    esp,0x30
c0007630:	5b                   	pop    ebx
c0007631:	c3                   	ret    

c0007632 <IDT::flush()>:
c0007632:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c000763b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000763f:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c0007644:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c000764b:	c3                   	ret    

c000764c <IDT::setup()>:
c000764c:	57                   	push   edi
c000764d:	56                   	push   esi
c000764e:	53                   	push   ebx
c000764f:	83 ec 10             	sub    esp,0x10
c0007652:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007656:	6a 00                	push   0x0
c0007658:	68 d0 e3 01 c0       	push   0xc001e3d0
c000765d:	6a 00                	push   0x0
c000765f:	53                   	push   ebx
c0007660:	e8 95 ff ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007665:	6a 00                	push   0x0
c0007667:	68 e0 e3 01 c0       	push   0xc001e3e0
c000766c:	6a 01                	push   0x1
c000766e:	53                   	push   ebx
c000766f:	e8 86 ff ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007674:	83 c4 20             	add    esp,0x20
c0007677:	6a 00                	push   0x0
c0007679:	68 ea e3 01 c0       	push   0xc001e3ea
c000767e:	6a 02                	push   0x2
c0007680:	53                   	push   ebx
c0007681:	e8 74 ff ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007686:	6a 00                	push   0x0
c0007688:	68 f4 e3 01 c0       	push   0xc001e3f4
c000768d:	6a 03                	push   0x3
c000768f:	53                   	push   ebx
c0007690:	e8 65 ff ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007695:	83 c4 20             	add    esp,0x20
c0007698:	6a 00                	push   0x0
c000769a:	68 fe e3 01 c0       	push   0xc001e3fe
c000769f:	6a 04                	push   0x4
c00076a1:	53                   	push   ebx
c00076a2:	e8 53 ff ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00076a7:	6a 00                	push   0x0
c00076a9:	68 08 e4 01 c0       	push   0xc001e408
c00076ae:	6a 05                	push   0x5
c00076b0:	53                   	push   ebx
c00076b1:	e8 44 ff ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00076b6:	83 c4 20             	add    esp,0x20
c00076b9:	6a 00                	push   0x0
c00076bb:	68 12 e4 01 c0       	push   0xc001e412
c00076c0:	6a 06                	push   0x6
c00076c2:	53                   	push   ebx
c00076c3:	e8 32 ff ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00076c8:	6a 00                	push   0x0
c00076ca:	68 1c e4 01 c0       	push   0xc001e41c
c00076cf:	6a 07                	push   0x7
c00076d1:	53                   	push   ebx
c00076d2:	e8 23 ff ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00076d7:	83 c4 20             	add    esp,0x20
c00076da:	6a 00                	push   0x0
c00076dc:	68 26 e4 01 c0       	push   0xc001e426
c00076e1:	6a 08                	push   0x8
c00076e3:	53                   	push   ebx
c00076e4:	e8 11 ff ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00076e9:	6a 00                	push   0x0
c00076eb:	68 2e e4 01 c0       	push   0xc001e42e
c00076f0:	6a 09                	push   0x9
c00076f2:	53                   	push   ebx
c00076f3:	e8 02 ff ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00076f8:	83 c4 20             	add    esp,0x20
c00076fb:	6a 00                	push   0x0
c00076fd:	68 38 e4 01 c0       	push   0xc001e438
c0007702:	6a 0a                	push   0xa
c0007704:	53                   	push   ebx
c0007705:	e8 f0 fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c000770a:	6a 00                	push   0x0
c000770c:	68 40 e4 01 c0       	push   0xc001e440
c0007711:	6a 0b                	push   0xb
c0007713:	53                   	push   ebx
c0007714:	e8 e1 fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007719:	83 c4 20             	add    esp,0x20
c000771c:	6a 00                	push   0x0
c000771e:	68 48 e4 01 c0       	push   0xc001e448
c0007723:	6a 0c                	push   0xc
c0007725:	53                   	push   ebx
c0007726:	e8 cf fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c000772b:	6a 00                	push   0x0
c000772d:	68 50 e4 01 c0       	push   0xc001e450
c0007732:	6a 0d                	push   0xd
c0007734:	53                   	push   ebx
c0007735:	e8 c0 fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c000773a:	83 c4 20             	add    esp,0x20
c000773d:	6a 00                	push   0x0
c000773f:	68 6a e4 01 c0       	push   0xc001e46a
c0007744:	6a 0e                	push   0xe
c0007746:	53                   	push   ebx
c0007747:	e8 ae fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c000774c:	6a 00                	push   0x0
c000774e:	68 72 e4 01 c0       	push   0xc001e472
c0007753:	6a 0f                	push   0xf
c0007755:	53                   	push   ebx
c0007756:	e8 9f fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c000775b:	83 c4 20             	add    esp,0x20
c000775e:	6a 00                	push   0x0
c0007760:	68 7c e4 01 c0       	push   0xc001e47c
c0007765:	6a 10                	push   0x10
c0007767:	53                   	push   ebx
c0007768:	e8 8d fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c000776d:	6a 00                	push   0x0
c000776f:	68 86 e4 01 c0       	push   0xc001e486
c0007774:	6a 11                	push   0x11
c0007776:	53                   	push   ebx
c0007777:	e8 7e fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c000777c:	83 c4 20             	add    esp,0x20
c000777f:	6a 00                	push   0x0
c0007781:	68 90 e4 01 c0       	push   0xc001e490
c0007786:	6a 12                	push   0x12
c0007788:	53                   	push   ebx
c0007789:	e8 6c fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c000778e:	6a 01                	push   0x1
c0007790:	68 2a e5 01 c0       	push   0xc001e52a
c0007795:	6a 60                	push   0x60
c0007797:	53                   	push   ebx
c0007798:	e8 5d fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c000779d:	83 c4 20             	add    esp,0x20
c00077a0:	6a 00                	push   0x0
c00077a2:	68 31 e5 01 c0       	push   0xc001e531
c00077a7:	6a 20                	push   0x20
c00077a9:	53                   	push   ebx
c00077aa:	e8 4b fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00077af:	6a 00                	push   0x0
c00077b1:	68 1c e5 01 c0       	push   0xc001e51c
c00077b6:	6a 21                	push   0x21
c00077b8:	53                   	push   ebx
c00077b9:	e8 3c fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00077be:	83 c4 20             	add    esp,0x20
c00077c1:	6a 00                	push   0x0
c00077c3:	68 23 e5 01 c0       	push   0xc001e523
c00077c8:	6a 22                	push   0x22
c00077ca:	53                   	push   ebx
c00077cb:	e8 2a fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00077d0:	6a 00                	push   0x0
c00077d2:	68 9a e4 01 c0       	push   0xc001e49a
c00077d7:	6a 23                	push   0x23
c00077d9:	53                   	push   ebx
c00077da:	e8 1b fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00077df:	83 c4 20             	add    esp,0x20
c00077e2:	6a 00                	push   0x0
c00077e4:	68 a4 e4 01 c0       	push   0xc001e4a4
c00077e9:	6a 24                	push   0x24
c00077eb:	53                   	push   ebx
c00077ec:	e8 09 fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00077f1:	6a 00                	push   0x0
c00077f3:	68 ae e4 01 c0       	push   0xc001e4ae
c00077f8:	6a 25                	push   0x25
c00077fa:	53                   	push   ebx
c00077fb:	e8 fa fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007800:	83 c4 20             	add    esp,0x20
c0007803:	6a 00                	push   0x0
c0007805:	68 b8 e4 01 c0       	push   0xc001e4b8
c000780a:	6a 26                	push   0x26
c000780c:	53                   	push   ebx
c000780d:	e8 e8 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007812:	6a 00                	push   0x0
c0007814:	68 c2 e4 01 c0       	push   0xc001e4c2
c0007819:	6a 27                	push   0x27
c000781b:	53                   	push   ebx
c000781c:	e8 d9 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007821:	83 c4 20             	add    esp,0x20
c0007824:	6a 00                	push   0x0
c0007826:	68 cc e4 01 c0       	push   0xc001e4cc
c000782b:	6a 28                	push   0x28
c000782d:	53                   	push   ebx
c000782e:	e8 c7 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007833:	6a 00                	push   0x0
c0007835:	68 d6 e4 01 c0       	push   0xc001e4d6
c000783a:	6a 29                	push   0x29
c000783c:	53                   	push   ebx
c000783d:	e8 b8 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007842:	83 c4 20             	add    esp,0x20
c0007845:	6a 00                	push   0x0
c0007847:	68 e0 e4 01 c0       	push   0xc001e4e0
c000784c:	6a 2a                	push   0x2a
c000784e:	53                   	push   ebx
c000784f:	e8 a6 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007854:	6a 00                	push   0x0
c0007856:	68 ea e4 01 c0       	push   0xc001e4ea
c000785b:	6a 2b                	push   0x2b
c000785d:	53                   	push   ebx
c000785e:	e8 97 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007863:	83 c4 20             	add    esp,0x20
c0007866:	6a 00                	push   0x0
c0007868:	68 f4 e4 01 c0       	push   0xc001e4f4
c000786d:	6a 2c                	push   0x2c
c000786f:	53                   	push   ebx
c0007870:	e8 85 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007875:	6a 00                	push   0x0
c0007877:	68 fe e4 01 c0       	push   0xc001e4fe
c000787c:	6a 2d                	push   0x2d
c000787e:	53                   	push   ebx
c000787f:	e8 76 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007884:	83 c4 20             	add    esp,0x20
c0007887:	6a 00                	push   0x0
c0007889:	68 08 e5 01 c0       	push   0xc001e508
c000788e:	6a 2e                	push   0x2e
c0007890:	53                   	push   ebx
c0007891:	e8 64 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007896:	6a 00                	push   0x0
c0007898:	68 12 e5 01 c0       	push   0xc001e512
c000789d:	6a 2f                	push   0x2f
c000789f:	53                   	push   ebx
c00078a0:	e8 55 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00078a5:	83 c4 20             	add    esp,0x20
c00078a8:	6a 00                	push   0x0
c00078aa:	68 6c e6 01 c0       	push   0xc001e66c
c00078af:	6a 30                	push   0x30
c00078b1:	53                   	push   ebx
c00078b2:	e8 43 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00078b7:	6a 00                	push   0x0
c00078b9:	68 76 e6 01 c0       	push   0xc001e676
c00078be:	6a 31                	push   0x31
c00078c0:	53                   	push   ebx
c00078c1:	e8 34 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00078c6:	83 c4 20             	add    esp,0x20
c00078c9:	6a 00                	push   0x0
c00078cb:	68 80 e6 01 c0       	push   0xc001e680
c00078d0:	6a 32                	push   0x32
c00078d2:	53                   	push   ebx
c00078d3:	e8 22 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00078d8:	6a 00                	push   0x0
c00078da:	68 8a e6 01 c0       	push   0xc001e68a
c00078df:	6a 33                	push   0x33
c00078e1:	53                   	push   ebx
c00078e2:	e8 13 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00078e7:	83 c4 20             	add    esp,0x20
c00078ea:	6a 00                	push   0x0
c00078ec:	68 94 e6 01 c0       	push   0xc001e694
c00078f1:	6a 34                	push   0x34
c00078f3:	53                   	push   ebx
c00078f4:	e8 01 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00078f9:	6a 00                	push   0x0
c00078fb:	68 9e e6 01 c0       	push   0xc001e69e
c0007900:	6a 35                	push   0x35
c0007902:	53                   	push   ebx
c0007903:	e8 f2 fc ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007908:	83 c4 20             	add    esp,0x20
c000790b:	6a 00                	push   0x0
c000790d:	68 a8 e6 01 c0       	push   0xc001e6a8
c0007912:	6a 36                	push   0x36
c0007914:	53                   	push   ebx
c0007915:	e8 e0 fc ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c000791a:	6a 00                	push   0x0
c000791c:	68 b2 e6 01 c0       	push   0xc001e6b2
c0007921:	6a 37                	push   0x37
c0007923:	53                   	push   ebx
c0007924:	e8 d1 fc ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007929:	83 c4 1c             	add    esp,0x1c
c000792c:	6a 03                	push   0x3
c000792e:	6a 02                	push   0x2
c0007930:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007936:	e8 3b 25 00 00       	call   c0009e76 <VAS::allocatePages(int, int)>
c000793b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007942:	89 c6                	mov    esi,eax
c0007944:	e8 b3 01 00 00       	call   c0007afc <malloc>
c0007949:	81 c6 00 20 00 00    	add    esi,0x2000
c000794f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007952:	89 c7                	mov    edi,eax
c0007954:	e8 1f 16 00 00       	call   c0008f78 <TSS::TSS()>
c0007959:	83 c4 0c             	add    esp,0xc
c000795c:	68 26 e4 01 c0       	push   0xc001e426
c0007961:	56                   	push   esi
c0007962:	57                   	push   edi
c0007963:	e8 58 16 00 00       	call   c0008fc0 <TSS::setup(unsigned long, unsigned long)>
c0007968:	89 c6                	mov    esi,eax
c000796a:	58                   	pop    eax
c000796b:	5a                   	pop    edx
c000796c:	6a 00                	push   0x0
c000796e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007972:	50                   	push   eax
c0007973:	e8 d8 fb ff ff       	call   c0007550 <IDTEntry::IDTEntry(bool)>
c0007978:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000797c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007981:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007988:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000798c:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007992:	80 ce 05             	or     dh,0x5
c0007995:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007999:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000799c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079a0:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00079a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00079a6:	e8 87 fc ff ff       	call   c0007632 <IDT::flush()>
c00079ab:	83 c4 20             	add    esp,0x20
c00079ae:	5b                   	pop    ebx
c00079af:	5e                   	pop    esi
c00079b0:	5f                   	pop    edi
c00079b1:	c3                   	ret    

c00079b2 <sbrk>:
c00079b2:	55                   	push   ebp
c00079b3:	57                   	push   edi
c00079b4:	56                   	push   esi
c00079b5:	53                   	push   ebx
c00079b6:	83 ec 2c             	sub    esp,0x2c
c00079b9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00079bd:	85 c0                	test   eax,eax
c00079bf:	74 6c                	je     c0007a2d <sbrk+0x7b>
c00079c1:	78 71                	js     c0007a34 <sbrk+0x82>
c00079c3:	8b 15 8c 23 02 c0    	mov    edx,DWORD PTR ds:0xc002238c
c00079c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079cd:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079d3:	05 ff 0f 00 00       	add    eax,0xfff
c00079d8:	0f 49 e8             	cmovns ebp,eax
c00079db:	c1 fd 0c             	sar    ebp,0xc
c00079de:	bb 00 00 00 00       	mov    ebx,0x0
c00079e3:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c00079e9:	8b 3d 8c 23 02 c0    	mov    edi,DWORD PTR ds:0xc002238c
c00079ef:	e8 18 04 00 00       	call   c0007e0c <Phys::allocatePage()>
c00079f4:	c7 44 24 0c 01 04 00 00 	mov    DWORD PTR [esp+0xc],0x401
c00079fc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007a00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007a04:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a07:	e8 36 23 00 00       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007a0c:	81 05 8c 23 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002238c,0x1000
c0007a16:	43                   	inc    ebx
c0007a17:	39 dd                	cmp    ebp,ebx
c0007a19:	75 c8                	jne    c00079e3 <sbrk+0x31>
c0007a1b:	0f 20 d8             	mov    eax,cr3
c0007a1e:	0f 22 d8             	mov    cr3,eax
c0007a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007a25:	83 c4 2c             	add    esp,0x2c
c0007a28:	5b                   	pop    ebx
c0007a29:	5e                   	pop    esi
c0007a2a:	5f                   	pop    edi
c0007a2b:	5d                   	pop    ebp
c0007a2c:	c3                   	ret    
c0007a2d:	a1 8c 23 02 c0       	mov    eax,ds:0xc002238c
c0007a32:	eb f1                	jmp    c0007a25 <sbrk+0x73>
c0007a34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007a38:	c7 04 24 18 ff 01 c0 	mov    DWORD PTR [esp],0xc001ff18
c0007a3f:	e8 32 30 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0007a44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a49:	eb da                	jmp    c0007a25 <sbrk+0x73>

c0007a4b <mmap>:
c0007a4b:	83 ec 1c             	sub    esp,0x1c
c0007a4e:	c7 04 24 48 ff 01 c0 	mov    DWORD PTR [esp],0xc001ff48
c0007a55:	e8 db 93 00 00       	call   c0010e35 <KePanic(char const*)>
c0007a5a:	b8 00 00 00 00       	mov    eax,0x0
c0007a5f:	83 c4 1c             	add    esp,0x1c
c0007a62:	c3                   	ret    

c0007a63 <munmap>:
c0007a63:	83 ec 1c             	sub    esp,0x1c
c0007a66:	c7 04 24 4d ff 01 c0 	mov    DWORD PTR [esp],0xc001ff4d
c0007a6d:	e8 c3 93 00 00       	call   c0010e35 <KePanic(char const*)>
c0007a72:	b8 00 00 00 00       	mov    eax,0x0
c0007a77:	83 c4 1c             	add    esp,0x1c
c0007a7a:	c3                   	ret    

c0007a7b <liballoc_lock()>:
c0007a7b:	fa                   	cli    
c0007a7c:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0007a82:	b8 00 00 00 00       	mov    eax,0x0
c0007a87:	c3                   	ret    

c0007a88 <liballoc_unlock()>:
c0007a88:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a8d:	48                   	dec    eax
c0007a8e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a93:	75 01                	jne    c0007a96 <liballoc_unlock()+0xe>
c0007a95:	fb                   	sti    
c0007a96:	b8 00 00 00 00       	mov    eax,0x0
c0007a9b:	c3                   	ret    

c0007a9c <liballoc_alloc(int)>:
c0007a9c:	83 ec 1c             	sub    esp,0x1c
c0007a9f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007aa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007aab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007aaf:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0007ab4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ab7:	e8 ba 23 00 00       	call   c0009e76 <VAS::allocatePages(int, int)>
c0007abc:	83 c4 1c             	add    esp,0x1c
c0007abf:	c3                   	ret    

c0007ac0 <liballoc_free(void*, int)>:
c0007ac0:	83 ec 1c             	sub    esp,0x1c
c0007ac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ac7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007acb:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0007ad0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ad3:	e8 76 1f 00 00       	call   c0009a4e <VAS::freeAllocatedPages(unsigned long)>
c0007ad8:	b8 00 00 00 00       	mov    eax,0x0
c0007add:	83 c4 1c             	add    esp,0x1c
c0007ae0:	c3                   	ret    

c0007ae1 <realloc>:
c0007ae1:	83 ec 1c             	sub    esp,0x1c
c0007ae4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007ae8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007aec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007af0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007af3:	e8 b1 9b ff ff       	call   c00016a9 <dlrealloc>
c0007af8:	83 c4 1c             	add    esp,0x1c
c0007afb:	c3                   	ret    

c0007afc <malloc>:
c0007afc:	83 ec 1c             	sub    esp,0x1c
c0007aff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b03:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b06:	e8 61 96 ff ff       	call   c000116c <dlmalloc>
c0007b0b:	83 c4 1c             	add    esp,0x1c
c0007b0e:	c3                   	ret    

c0007b0f <free>:
c0007b0f:	83 ec 1c             	sub    esp,0x1c
c0007b12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b16:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b19:	e8 f0 92 ff ff       	call   c0000e0e <dlfree>
c0007b1e:	83 c4 1c             	add    esp,0x1c
c0007b21:	c3                   	ret    

c0007b22 <rfree>:
c0007b22:	83 ec 1c             	sub    esp,0x1c
c0007b25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b29:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b2c:	e8 dd 92 ff ff       	call   c0000e0e <dlfree>
c0007b31:	83 c4 1c             	add    esp,0x1c
c0007b34:	c3                   	ret    

c0007b35 <calloc>:
c0007b35:	83 ec 1c             	sub    esp,0x1c
c0007b38:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0007b3c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0007b40:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0007b44:	0f af 5c 24 20       	imul   ebx,DWORD PTR [esp+0x20]
c0007b49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b4c:	e8 ab ff ff ff       	call   c0007afc <malloc>
c0007b51:	89 c6                	mov    esi,eax
c0007b53:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007b57:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0007b5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b62:	e8 19 8a ff ff       	call   c0000580 <memset>
c0007b67:	89 f0                	mov    eax,esi
c0007b69:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007b6d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007b71:	83 c4 1c             	add    esp,0x1c
c0007b74:	c3                   	ret    

c0007b75 <KeEntryPoint>:
c0007b75:	56                   	push   esi
c0007b76:	be f9 03 00 00       	mov    esi,0x3f9
c0007b7b:	53                   	push   ebx
c0007b7c:	89 f2                	mov    edx,esi
c0007b7e:	83 ec 34             	sub    esp,0x34
c0007b81:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b86:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007b8b:	31 c0                	xor    eax,eax
c0007b8d:	ee                   	out    dx,al
c0007b8e:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b93:	b0 80                	mov    al,0x80
c0007b95:	89 da                	mov    edx,ebx
c0007b97:	ee                   	out    dx,al
c0007b98:	b1 03                	mov    cl,0x3
c0007b9a:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b9f:	88 c8                	mov    al,cl
c0007ba1:	ee                   	out    dx,al
c0007ba2:	31 c0                	xor    eax,eax
c0007ba4:	89 f2                	mov    edx,esi
c0007ba6:	ee                   	out    dx,al
c0007ba7:	88 c8                	mov    al,cl
c0007ba9:	89 da                	mov    edx,ebx
c0007bab:	ee                   	out    dx,al
c0007bac:	b0 c7                	mov    al,0xc7
c0007bae:	ba fa 03 00 00       	mov    edx,0x3fa
c0007bb3:	ee                   	out    dx,al
c0007bb4:	b0 0b                	mov    al,0xb
c0007bb6:	ba fc 03 00 00       	mov    edx,0x3fc
c0007bbb:	ee                   	out    dx,al
c0007bbc:	c7 04 24 54 ff 01 c0 	mov    DWORD PTR [esp],0xc001ff54
c0007bc3:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0007bc7:	e8 aa 2e 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0007bcc:	e8 82 8b 00 00       	call   c0010753 <KeDisplaySplashScreen()>
c0007bd1:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007bd6:	05 ff 0f 00 00       	add    eax,0xfff
c0007bdb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007be0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007be3:	e8 82 03 00 00       	call   c0007f6a <Phys::physicalMemorySetup(unsigned int)>
c0007be8:	e8 fb 1b 00 00       	call   c00097e8 <Virt::virtualMemorySetup()>
c0007bed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bf0:	e8 ed 1e 00 00       	call   c0009ae2 <VAS::VAS()>
c0007bf5:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007bfb:	e8 6a 70 01 00       	call   c001ec6a <_init>
c0007c00:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007c07:	e8 f0 fe ff ff       	call   c0007afc <malloc>
c0007c0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c0f:	89 c6                	mov    esi,eax
c0007c11:	e8 e0 f1 ff ff       	call   c0006df6 <Computer::Computer()>
c0007c16:	31 d2                	xor    edx,edx
c0007c18:	31 c9                	xor    ecx,ecx
c0007c1a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0007c1e:	31 c0                	xor    eax,eax
c0007c20:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007c24:	89 34 24             	mov    DWORD PTR [esp],esi
c0007c27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c2b:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007c31:	e8 9a f5 ff ff       	call   c00071d0 <Computer::open(int, int, void*)>
c0007c36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007c39:	e8 9a 1f 00 00       	call   c0009bd8 <VAS::~VAS()>
c0007c3e:	83 c4 34             	add    esp,0x34
c0007c41:	5b                   	pop    ebx
c0007c42:	5e                   	pop    esi
c0007c43:	c3                   	ret    
c0007c44:	66 90                	xchg   ax,ax
c0007c46:	66 90                	xchg   ax,ax
c0007c48:	66 90                	xchg   ax,ax
c0007c4a:	66 90                	xchg   ax,ax
c0007c4c:	66 90                	xchg   ax,ax
c0007c4e:	66 90                	xchg   ax,ax

c0007c50 <Phys::allocateDMA(unsigned long)>:
c0007c50:	55                   	push   ebp
c0007c51:	31 ed                	xor    ebp,ebp
c0007c53:	57                   	push   edi
c0007c54:	56                   	push   esi
c0007c55:	31 f6                	xor    esi,esi
c0007c57:	53                   	push   ebx
c0007c58:	31 db                	xor    ebx,ebx
c0007c5a:	83 ec 2c             	sub    esp,0x2c
c0007c5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c61:	05 ff 0f 00 00       	add    eax,0xfff
c0007c66:	c1 e8 0c             	shr    eax,0xc
c0007c69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c6d:	31 c0                	xor    eax,eax
c0007c6f:	eb 19                	jmp    c0007c8a <Phys::allocateDMA(unsigned long)+0x3a>
c0007c71:	8d 78 01             	lea    edi,[eax+0x1]
c0007c74:	85 c0                	test   eax,eax
c0007c76:	0f 44 eb             	cmove  ebp,ebx
c0007c79:	0f 44 f3             	cmove  esi,ebx
c0007c7c:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0007c80:	74 2f                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0x61>
c0007c82:	89 f8                	mov    eax,edi
c0007c84:	43                   	inc    ebx
c0007c85:	83 fb 0f             	cmp    ebx,0xf
c0007c88:	7f 11                	jg     c0007c9b <Phys::allocateDMA(unsigned long)+0x4b>
c0007c8a:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007c91:	74 de                	je     c0007c71 <Phys::allocateDMA(unsigned long)+0x21>
c0007c93:	31 c0                	xor    eax,eax
c0007c95:	43                   	inc    ebx
c0007c96:	83 fb 0f             	cmp    ebx,0xf
c0007c99:	7e ef                	jle    c0007c8a <Phys::allocateDMA(unsigned long)+0x3a>
c0007c9b:	c7 04 24 6c ff 01 c0 	mov    DWORD PTR [esp],0xc001ff6c
c0007ca2:	e8 8e 91 00 00       	call   c0010e35 <KePanic(char const*)>
c0007ca7:	31 c0                	xor    eax,eax
c0007ca9:	83 c4 2c             	add    esp,0x2c
c0007cac:	5b                   	pop    ebx
c0007cad:	5e                   	pop    esi
c0007cae:	5f                   	pop    edi
c0007caf:	5d                   	pop    ebp
c0007cb0:	c3                   	ret    
c0007cb1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007cb5:	89 f2                	mov    edx,esi
c0007cb7:	c1 fa 04             	sar    edx,0x4
c0007cba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007cbe:	01 f1                	add    ecx,esi
c0007cc0:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007cc3:	49                   	dec    ecx
c0007cc4:	0f 48 ca             	cmovs  ecx,edx
c0007cc7:	c1 f9 04             	sar    ecx,0x4
c0007cca:	39 4c 24 1c          	cmp    DWORD PTR [esp+0x1c],ecx
c0007cce:	74 06                	je     c0007cd6 <Phys::allocateDMA(unsigned long)+0x86>
c0007cd0:	89 eb                	mov    ebx,ebp
c0007cd2:	31 c0                	xor    eax,eax
c0007cd4:	eb bf                	jmp    c0007c95 <Phys::allocateDMA(unsigned long)+0x45>
c0007cd6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007cda:	85 d2                	test   edx,edx
c0007cdc:	74 15                	je     c0007cf3 <Phys::allocateDMA(unsigned long)+0xa3>
c0007cde:	8d 96 ec 4e 02 c0    	lea    edx,[esi-0x3ffdb114]
c0007ce4:	8d 84 06 ed 4e 02 c0 	lea    eax,[esi+eax*1-0x3ffdb113]
c0007ceb:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007cee:	42                   	inc    edx
c0007cef:	39 d0                	cmp    eax,edx
c0007cf1:	75 f8                	jne    c0007ceb <Phys::allocateDMA(unsigned long)+0x9b>
c0007cf3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007cf7:	01 05 e4 4e 02 c0    	add    DWORD PTR ds:0xc0024ee4,eax
c0007cfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007d01:	85 c0                	test   eax,eax
c0007d03:	74 13                	je     c0007d18 <Phys::allocateDMA(unsigned long)+0xc8>
c0007d05:	c7 04 24 6c ff 01 c0 	mov    DWORD PTR [esp],0xc001ff6c
c0007d0c:	e8 24 91 00 00       	call   c0010e35 <KePanic(char const*)>
c0007d11:	89 f8                	mov    eax,edi
c0007d13:	e9 6c ff ff ff       	jmp    c0007c84 <Phys::allocateDMA(unsigned long)+0x34>
c0007d18:	c1 e6 0c             	shl    esi,0xc
c0007d1b:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007d21:	eb 86                	jmp    c0007ca9 <Phys::allocateDMA(unsigned long)+0x59>

c0007d23 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007d23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007d27:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007d2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d31:	c1 ea 0c             	shr    edx,0xc
c0007d34:	29 15 e4 4e 02 c0    	sub    DWORD PTR ds:0xc0024ee4,edx
c0007d3a:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d3f:	c1 e8 0c             	shr    eax,0xc
c0007d42:	85 d2                	test   edx,edx
c0007d44:	74 0f                	je     c0007d55 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007d46:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007d4b:	01 c2                	add    edx,eax
c0007d4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d50:	40                   	inc    eax
c0007d51:	39 d0                	cmp    eax,edx
c0007d53:	75 f8                	jne    c0007d4d <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007d55:	c3                   	ret    

c0007d56 <Phys::setPageState(unsigned long, bool)>:
c0007d56:	53                   	push   ebx
c0007d57:	8b 1d 90 23 02 c0    	mov    ebx,DWORD PTR ds:0xc0022390
c0007d5d:	ba 01 00 00 00       	mov    edx,0x1
c0007d62:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007d66:	89 c8                	mov    eax,ecx
c0007d68:	83 e1 07             	and    ecx,0x7
c0007d6b:	c1 e8 03             	shr    eax,0x3
c0007d6e:	d3 e2                	shl    edx,cl
c0007d70:	01 c3                	add    ebx,eax
c0007d72:	f6 d2                	not    dl
c0007d74:	20 13                	and    BYTE PTR [ebx],dl
c0007d76:	8b 15 90 23 02 c0    	mov    edx,DWORD PTR ds:0xc0022390
c0007d7c:	01 d0                	add    eax,edx
c0007d7e:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0007d83:	d3 e2                	shl    edx,cl
c0007d85:	08 10                	or     BYTE PTR [eax],dl
c0007d87:	5b                   	pop    ebx
c0007d88:	c3                   	ret    

c0007d89 <Phys::getPageState(unsigned long)>:
c0007d89:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d8d:	8b 15 90 23 02 c0    	mov    edx,DWORD PTR ds:0xc0022390
c0007d93:	89 c8                	mov    eax,ecx
c0007d95:	83 e1 07             	and    ecx,0x7
c0007d98:	c1 e8 03             	shr    eax,0x3
c0007d9b:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d9f:	d3 f8                	sar    eax,cl
c0007da1:	24 01                	and    al,0x1
c0007da3:	c3                   	ret    

c0007da4 <Phys::freePage(unsigned long)>:
c0007da4:	53                   	push   ebx
c0007da5:	83 ec 18             	sub    esp,0x18
c0007da8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007dac:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007db2:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007db8:	76 3c                	jbe    c0007df6 <Phys::freePage(unsigned long)+0x52>
c0007dba:	c1 e8 0c             	shr    eax,0xc
c0007dbd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dc0:	89 c3                	mov    ebx,eax
c0007dc2:	e8 c2 ff ff ff       	call   c0007d89 <Phys::getPageState(unsigned long)>
c0007dc7:	84 c0                	test   al,al
c0007dc9:	74 19                	je     c0007de4 <Phys::freePage(unsigned long)+0x40>
c0007dcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007dce:	31 c0                	xor    eax,eax
c0007dd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007dd4:	ff 0d e4 4e 02 c0    	dec    DWORD PTR ds:0xc0024ee4
c0007dda:	e8 77 ff ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0007ddf:	83 c4 18             	add    esp,0x18
c0007de2:	5b                   	pop    ebx
c0007de3:	c3                   	ret    
c0007de4:	ba 11 00 02 c0       	mov    edx,0xc0020011
c0007de9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007ded:	83 c4 18             	add    esp,0x18
c0007df0:	5b                   	pop    ebx
c0007df1:	e9 3f 90 00 00       	jmp    c0010e35 <KePanic(char const*)>
c0007df6:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df9:	b9 00 10 00 00       	mov    ecx,0x1000
c0007dfe:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007e02:	e8 1c ff ff ff       	call   c0007d23 <Phys::freeDMA(unsigned long, unsigned long)>
c0007e07:	83 c4 18             	add    esp,0x18
c0007e0a:	5b                   	pop    ebx
c0007e0b:	c3                   	ret    

c0007e0c <Phys::allocatePage()>:
c0007e0c:	56                   	push   esi
c0007e0d:	53                   	push   ebx
c0007e0e:	83 ec 24             	sub    esp,0x24
c0007e11:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007e17:	89 f3                	mov    ebx,esi
c0007e19:	eb 0a                	jmp    c0007e25 <Phys::allocatePage()+0x19>
c0007e1b:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007e21:	39 de                	cmp    esi,ebx
c0007e23:	74 23                	je     c0007e48 <Phys::allocatePage()+0x3c>
c0007e25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007e28:	e8 5c ff ff ff       	call   c0007d89 <Phys::getPageState(unsigned long)>
c0007e2d:	84 c0                	test   al,al
c0007e2f:	74 56                	je     c0007e87 <Phys::allocatePage()+0x7b>
c0007e31:	43                   	inc    ebx
c0007e32:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e38:	75 e1                	jne    c0007e1b <Phys::allocatePage()+0xf>
c0007e3a:	31 db                	xor    ebx,ebx
c0007e3c:	31 c9                	xor    ecx,ecx
c0007e3e:	89 0d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ecx
c0007e44:	39 de                	cmp    esi,ebx
c0007e46:	75 dd                	jne    c0007e25 <Phys::allocatePage()+0x19>
c0007e48:	80 35 fc 4e 02 c0 01 	xor    BYTE PTR ds:0xc0024efc,0x1
c0007e4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e57:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e5d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e60:	e8 8f 28 00 00       	call   c000a6f4 <VAS::scanForEviction()>
c0007e65:	85 c0                	test   eax,eax
c0007e67:	75 43                	jne    c0007eac <Phys::allocatePage()+0xa0>
c0007e69:	c7 04 24 94 ff 01 c0 	mov    DWORD PTR [esp],0xc001ff94
c0007e70:	e8 c0 8f 00 00       	call   c0010e35 <KePanic(char const*)>
c0007e75:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007e7e:	e8 06 ff ff ff       	call   c0007d89 <Phys::getPageState(unsigned long)>
c0007e83:	84 c0                	test   al,al
c0007e85:	75 aa                	jne    c0007e31 <Phys::allocatePage()+0x25>
c0007e87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007e8a:	be 01 00 00 00       	mov    esi,0x1
c0007e8f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007e93:	e8 be fe ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0007e98:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e9d:	ff 05 e4 4e 02 c0    	inc    DWORD PTR ds:0xc0024ee4
c0007ea3:	c1 e0 0c             	shl    eax,0xc
c0007ea6:	83 c4 24             	add    esp,0x24
c0007ea9:	5b                   	pop    ebx
c0007eaa:	5e                   	pop    esi
c0007eab:	c3                   	ret    
c0007eac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007eb0:	ba 01 00 00 00       	mov    edx,0x1
c0007eb5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007eb9:	89 c2                	mov    edx,eax
c0007ebb:	c1 ea 0c             	shr    edx,0xc
c0007ebe:	89 14 24             	mov    DWORD PTR [esp],edx
c0007ec1:	e8 90 fe ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0007ec6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007eca:	eb da                	jmp    c0007ea6 <Phys::allocatePage()+0x9a>

c0007ecc <Phys::allocateContiguousPages(int)>:
c0007ecc:	57                   	push   edi
c0007ecd:	56                   	push   esi
c0007ece:	53                   	push   ebx
c0007ecf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007ed3:	fa                   	cli    
c0007ed4:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0007eda:	31 db                	xor    ebx,ebx
c0007edc:	85 db                	test   ebx,ebx
c0007ede:	75 11                	jne    c0007ef1 <Phys::allocateContiguousPages(int)+0x25>
c0007ee0:	e8 27 ff ff ff       	call   c0007e0c <Phys::allocatePage()>
c0007ee5:	83 fe 01             	cmp    esi,0x1
c0007ee8:	89 c7                	mov    edi,eax
c0007eea:	74 21                	je     c0007f0d <Phys::allocateContiguousPages(int)+0x41>
c0007eec:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef1:	e8 16 ff ff ff       	call   c0007e0c <Phys::allocatePage()>
c0007ef6:	89 da                	mov    edx,ebx
c0007ef8:	c1 e2 0c             	shl    edx,0xc
c0007efb:	01 fa                	add    edx,edi
c0007efd:	39 c2                	cmp    edx,eax
c0007eff:	74 20                	je     c0007f21 <Phys::allocateContiguousPages(int)+0x55>
c0007f01:	83 fe 01             	cmp    esi,0x1
c0007f04:	bb 01 00 00 00       	mov    ebx,0x1
c0007f09:	89 c7                	mov    edi,eax
c0007f0b:	75 e4                	jne    c0007ef1 <Phys::allocateContiguousPages(int)+0x25>
c0007f0d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007f12:	48                   	dec    eax
c0007f13:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007f18:	75 01                	jne    c0007f1b <Phys::allocateContiguousPages(int)+0x4f>
c0007f1a:	fb                   	sti    
c0007f1b:	5b                   	pop    ebx
c0007f1c:	89 f8                	mov    eax,edi
c0007f1e:	5e                   	pop    esi
c0007f1f:	5f                   	pop    edi
c0007f20:	c3                   	ret    
c0007f21:	43                   	inc    ebx
c0007f22:	39 f3                	cmp    ebx,esi
c0007f24:	75 b6                	jne    c0007edc <Phys::allocateContiguousPages(int)+0x10>
c0007f26:	eb e5                	jmp    c0007f0d <Phys::allocateContiguousPages(int)+0x41>

c0007f28 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f28:	56                   	push   esi
c0007f29:	53                   	push   ebx
c0007f2a:	83 ec 08             	sub    esp,0x8
c0007f2d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0007f31:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007f37:	73 06                	jae    c0007f3f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x17>
c0007f39:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007f3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007f43:	c1 eb 0c             	shr    ebx,0xc
c0007f46:	c1 e8 0c             	shr    eax,0xc
c0007f49:	39 d8                	cmp    eax,ebx
c0007f4b:	73 17                	jae    c0007f64 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x3c>
c0007f4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f50:	8d 70 01             	lea    esi,[eax+0x1]
c0007f53:	31 d2                	xor    edx,edx
c0007f55:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f59:	e8 f8 fd ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0007f5e:	39 f3                	cmp    ebx,esi
c0007f60:	89 f0                	mov    eax,esi
c0007f62:	75 e9                	jne    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x25>
c0007f64:	83 c4 08             	add    esp,0x8
c0007f67:	5b                   	pop    ebx
c0007f68:	5e                   	pop    esi
c0007f69:	c3                   	ret    

c0007f6a <Phys::physicalMemorySetup(unsigned int)>:
c0007f6a:	55                   	push   ebp
c0007f6b:	b8 10 00 00 00       	mov    eax,0x10
c0007f70:	57                   	push   edi
c0007f71:	56                   	push   esi
c0007f72:	53                   	push   ebx
c0007f73:	31 db                	xor    ebx,ebx
c0007f75:	83 ec 4c             	sub    esp,0x4c
c0007f78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f7c:	31 c0                	xor    eax,eax
c0007f7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007f82:	c7 04 24 ec 4e 02 c0 	mov    DWORD PTR [esp],0xc0024eec
c0007f89:	e8 f2 85 ff ff       	call   c0000580 <memset>
c0007f8e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f92:	c7 04 24 27 00 02 c0 	mov    DWORD PTR [esp],0xc0020027
c0007f99:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f9e:	05 00 10 00 00       	add    eax,0x1000
c0007fa3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007fa7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007fab:	e8 c6 2a 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0007fb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007fb3:	b8 01 00 00 00       	mov    eax,0x1
c0007fb8:	43                   	inc    ebx
c0007fb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007fbd:	e8 94 fd ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0007fc2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fc8:	75 e6                	jne    c0007fb0 <Phys::physicalMemorySetup(unsigned int)+0x46>
c0007fca:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007fd1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007fd5:	85 c0                	test   eax,eax
c0007fd7:	0f 84 41 01 00 00    	je     c000811e <Phys::physicalMemorySetup(unsigned int)+0x1b4>
c0007fdd:	31 c0                	xor    eax,eax
c0007fdf:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fe4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007fe8:	eb 68                	jmp    c0008052 <Phys::physicalMemorySetup(unsigned int)+0xe8>
c0007fea:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007fee:	89 c1                	mov    ecx,eax
c0007ff0:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0007ff4:	0f 83 c9 00 00 00    	jae    c00080c3 <Phys::physicalMemorySetup(unsigned int)+0x159>
c0007ffa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007ffe:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008003:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008007:	39 f2                	cmp    edx,esi
c0008009:	19 f8                	sbb    eax,edi
c000800b:	73 07                	jae    c0008014 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c000800d:	be 00 00 0a 00       	mov    esi,0xa0000
c0008012:	31 ff                	xor    edi,edi
c0008014:	89 f2                	mov    edx,esi
c0008016:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000801b:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0008021:	89 f9                	mov    ecx,edi
c0008023:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0008027:	83 d1 ff             	adc    ecx,0xffffffff
c000802a:	39 d0                	cmp    eax,edx
c000802c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0008030:	b8 00 00 00 00       	mov    eax,0x0
c0008035:	19 c8                	sbb    eax,ecx
c0008037:	0f 82 a7 01 00 00    	jb     c00081e4 <Phys::physicalMemorySetup(unsigned int)+0x27a>
c000803d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0008041:	83 c3 18             	add    ebx,0x18
c0008044:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008048:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c000804c:	0f 84 d8 00 00 00    	je     c000812a <Phys::physicalMemorySetup(unsigned int)+0x1c0>
c0008052:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008054:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008057:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000805a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805d:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0008061:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008064:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008068:	01 f0                	add    eax,esi
c000806a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000806e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0008072:	11 fa                	adc    edx,edi
c0008074:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0008078:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000807c:	c7 04 24 c4 ff 01 c0 	mov    DWORD PTR [esp],0xc001ffc4
c0008083:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008087:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000808b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000808f:	e8 e2 29 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0008094:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008098:	09 fa                	or     edx,edi
c000809a:	89 d0                	mov    eax,edx
c000809c:	31 d2                	xor    edx,edx
c000809e:	09 d0                	or     eax,edx
c00080a0:	0f 85 84 00 00 00    	jne    c000812a <Phys::physicalMemorySetup(unsigned int)+0x1c0>
c00080a6:	83 fd 01             	cmp    ebp,0x1
c00080a9:	75 11                	jne    c00080bc <Phys::physicalMemorySetup(unsigned int)+0x152>
c00080ab:	ba 00 00 08 00       	mov    edx,0x80000
c00080b0:	89 c1                	mov    ecx,eax
c00080b2:	39 f2                	cmp    edx,esi
c00080b4:	19 f9                	sbb    ecx,edi
c00080b6:	0f 83 2e ff ff ff    	jae    c0007fea <Phys::physicalMemorySetup(unsigned int)+0x80>
c00080bc:	4d                   	dec    ebp
c00080bd:	0f 85 7a ff ff ff    	jne    c000803d <Phys::physicalMemorySetup(unsigned int)+0xd3>
c00080c3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00080c7:	31 d2                	xor    edx,edx
c00080c9:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c00080cd:	89 c8                	mov    eax,ecx
c00080cf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00080d3:	19 d1                	sbb    ecx,edx
c00080d5:	0f 82 62 ff ff ff    	jb     c000803d <Phys::physicalMemorySetup(unsigned int)+0xd3>
c00080db:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080e0:	3b 4c 24 28          	cmp    ecx,DWORD PTR [esp+0x28]
c00080e4:	b9 00 00 00 00       	mov    ecx,0x0
c00080e9:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ed:	0f 83 4a ff ff ff    	jae    c000803d <Phys::physicalMemorySetup(unsigned int)+0xd3>
c00080f3:	39 c6                	cmp    esi,eax
c00080f5:	19 d7                	sbb    edi,edx
c00080f7:	0f 83 f4 00 00 00    	jae    c00081f1 <Phys::physicalMemorySetup(unsigned int)+0x287>
c00080fd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008101:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0008105:	29 c7                	sub    edi,eax
c0008107:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000810b:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000810f:	19 d5                	sbb    ebp,edx
c0008111:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c0008115:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008119:	e9 d3 00 00 00       	jmp    c00081f1 <Phys::physicalMemorySetup(unsigned int)+0x287>
c000811e:	c7 04 24 3f 00 02 c0 	mov    DWORD PTR [esp],0xc002003f
c0008125:	e8 0b 8d 00 00       	call   c0010e35 <KePanic(char const*)>
c000812a:	c7 04 24 06 00 00 00 	mov    DWORD PTR [esp],0x6
c0008131:	31 db                	xor    ebx,ebx
c0008133:	31 f6                	xor    esi,esi
c0008135:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0008139:	bb 60 00 00 00       	mov    ebx,0x60
c000813e:	e8 13 fc ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0008143:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008147:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c000814e:	e8 03 fc ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0008153:	83 05 e8 4e 02 c0 02 	add    DWORD PTR ds:0xc0024ee8,0x2
c000815a:	31 c9                	xor    ecx,ecx
c000815c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000815f:	43                   	inc    ebx
c0008160:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0008164:	e8 ed fb ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0008169:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000816f:	75 e9                	jne    c000815a <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008171:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008176:	bb 40 01 00 00       	mov    ebx,0x140
c000817b:	83 c0 20             	add    eax,0x20
c000817e:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008183:	eb 22                	jmp    c00081a7 <Phys::physicalMemorySetup(unsigned int)+0x23d>
c0008185:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008188:	31 d2                	xor    edx,edx
c000818a:	43                   	inc    ebx
c000818b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000818f:	e8 c2 fb ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0008194:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008199:	40                   	inc    eax
c000819a:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081a0:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081a5:	74 07                	je     c00081ae <Phys::physicalMemorySetup(unsigned int)+0x244>
c00081a7:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ac:	7e d7                	jle    c0008185 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00081ae:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081b3:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081b8:	7f 22                	jg     c00081dc <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00081bd:	31 c0                	xor    eax,eax
c00081bf:	43                   	inc    ebx
c00081c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00081c4:	e8 8d fb ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c00081c9:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00081ce:	40                   	inc    eax
c00081cf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081d5:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081da:	75 d7                	jne    c00081b3 <Phys::physicalMemorySetup(unsigned int)+0x249>
c00081dc:	83 c4 4c             	add    esp,0x4c
c00081df:	5b                   	pop    ebx
c00081e0:	5e                   	pop    esi
c00081e1:	5f                   	pop    edi
c00081e2:	5d                   	pop    ebp
c00081e3:	c3                   	ret    
c00081e4:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c00081e8:	b8 00 00 08 00       	mov    eax,0x80000
c00081ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00081f1:	c7 04 24 e8 ff 01 c0 	mov    DWORD PTR [esp],0xc001ffe8
c00081f8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00081fc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008200:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008204:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008208:	e8 69 28 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000820d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0008211:	89 34 24             	mov    DWORD PTR [esp],esi
c0008214:	e8 0f fd ff ff       	call   c0007f28 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008219:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000821d:	c7 04 24 4d 00 02 c0 	mov    DWORD PTR [esp],0xc002004d
c0008224:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008228:	8b 2d e8 4e 02 c0    	mov    ebp,DWORD PTR ds:0xc0024ee8
c000822e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008232:	01 e8                	add    eax,ebp
c0008234:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008238:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000823f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008243:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008248:	e8 29 28 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000824d:	e9 eb fd ff ff       	jmp    c000803d <Phys::physicalMemorySetup(unsigned int)+0xd3>

c0008252 <Pipe::isAtty()>:
c0008252:	31 c0                	xor    eax,eax
c0008254:	c3                   	ret    
c0008255:	90                   	nop

c0008256 <Pipe::~Pipe()>:
c0008256:	83 ec 1c             	sub    esp,0x1c
c0008259:	ba ac 00 02 c0       	mov    edx,0xc00200ac
c000825e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008262:	89 10                	mov    DWORD PTR [eax],edx
c0008264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008268:	89 04 24             	mov    DWORD PTR [esp],eax
c000826b:	e8 54 11 00 00       	call   c00093c4 <UnixFile::~UnixFile()>
c0008270:	90                   	nop
c0008271:	83 c4 1c             	add    esp,0x1c
c0008274:	c3                   	ret    
c0008275:	90                   	nop

c0008276 <Pipe::~Pipe()>:
c0008276:	83 ec 1c             	sub    esp,0x1c
c0008279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000827d:	89 04 24             	mov    DWORD PTR [esp],eax
c0008280:	e8 d1 ff ff ff       	call   c0008256 <Pipe::~Pipe()>
c0008285:	c7 44 24 04 20 00 00 00 	mov    DWORD PTR [esp+0x4],0x20
c000828d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008291:	89 04 24             	mov    DWORD PTR [esp],eax
c0008294:	e8 c3 26 00 00       	call   c000a95c <operator delete(void*, unsigned long)>
c0008299:	83 c4 1c             	add    esp,0x1c
c000829c:	c3                   	ret    
c000829d:	90                   	nop

c000829e <Pipe::write(unsigned long long, void*, int*)>:
c000829e:	55                   	push   ebp
c000829f:	57                   	push   edi
c00082a0:	56                   	push   esi
c00082a1:	53                   	push   ebx
c00082a2:	83 ec 1c             	sub    esp,0x1c
c00082a5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00082a9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00082ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00082b1:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00082b4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082b8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00082be:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082c2:	89 d8                	mov    eax,ebx
c00082c4:	89 d6                	mov    esi,edx
c00082c6:	89 d7                	mov    edi,edx
c00082c8:	c1 ff 1f             	sar    edi,0x1f
c00082cb:	03 34 24             	add    esi,DWORD PTR [esp]
c00082ce:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082d2:	c1 f8 1f             	sar    eax,0x1f
c00082d5:	39 f3                	cmp    ebx,esi
c00082d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082df:	19 f8                	sbb    eax,edi
c00082e1:	b8 01 00 00 00       	mov    eax,0x1
c00082e6:	72 72                	jb     c000835a <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082e8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082eb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082ef:	01 d0                	add    eax,edx
c00082f1:	99                   	cdq    
c00082f2:	f7 fb                	idiv   ebx
c00082f4:	89 d8                	mov    eax,ebx
c00082f6:	29 d0                	sub    eax,edx
c00082f8:	89 d6                	mov    esi,edx
c00082fa:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082fd:	89 c3                	mov    ebx,eax
c00082ff:	c1 fb 1f             	sar    ebx,0x1f
c0008302:	39 c2                	cmp    edx,eax
c0008304:	19 df                	sbb    edi,ebx
c0008306:	bb 00 00 00 00       	mov    ebx,0x0
c000830b:	72 04                	jb     c0008311 <Pipe::write(unsigned long long, void*, int*)+0x73>
c000830d:	89 d3                	mov    ebx,edx
c000830f:	29 c3                	sub    ebx,eax
c0008311:	89 d0                	mov    eax,edx
c0008313:	29 d8                	sub    eax,ebx
c0008315:	74 0d                	je     c0008324 <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008317:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831a:	89 c1                	mov    ecx,eax
c000831c:	01 f7                	add    edi,esi
c000831e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008322:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008324:	85 db                	test   ebx,ebx
c0008326:	74 0d                	je     c0008335 <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008328:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000832c:	89 d9                	mov    ecx,ebx
c000832e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008331:	89 c6                	mov    esi,eax
c0008333:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008335:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008338:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000833d:	75 10                	jne    c000834f <Pipe::write(unsigned long long, void*, int*)+0xb1>
c000833f:	83 ec 0c             	sub    esp,0xc
c0008342:	68 69 00 02 c0       	push   0xc0020069
c0008347:	e8 e9 8a 00 00       	call   c0010e35 <KePanic(char const*)>
c000834c:	83 c4 10             	add    esp,0x10
c000834f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008353:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008356:	89 08                	mov    DWORD PTR [eax],ecx
c0008358:	31 c0                	xor    eax,eax
c000835a:	83 c4 1c             	add    esp,0x1c
c000835d:	5b                   	pop    ebx
c000835e:	5e                   	pop    esi
c000835f:	5f                   	pop    edi
c0008360:	5d                   	pop    ebp
c0008361:	c3                   	ret    

c0008362 <Pipe::read(unsigned long long, void*, int*)>:
c0008362:	55                   	push   ebp
c0008363:	57                   	push   edi
c0008364:	56                   	push   esi
c0008365:	53                   	push   ebx
c0008366:	83 ec 1c             	sub    esp,0x1c
c0008369:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000836d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008371:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008375:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008378:	89 c8                	mov    eax,ecx
c000837a:	99                   	cdq    
c000837b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000837f:	74 24                	je     c00083a5 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008381:	39 f9                	cmp    ecx,edi
c0008383:	89 d1                	mov    ecx,edx
c0008385:	19 f1                	sbb    ecx,esi
c0008387:	73 1c                	jae    c00083a5 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008389:	fa                   	cli    
c000838a:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0008390:	e8 cb d3 00 00       	call   c0015760 <schedule()>
c0008395:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000839a:	48                   	dec    eax
c000839b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00083a0:	75 d3                	jne    c0008375 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00083a2:	fb                   	sti    
c00083a3:	eb d0                	jmp    c0008375 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00083a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00083a9:	39 f8                	cmp    eax,edi
c00083ab:	89 d1                	mov    ecx,edx
c00083ad:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00083b1:	19 f1                	sbb    ecx,esi
c00083b3:	73 08                	jae    c00083bd <Pipe::read(unsigned long long, void*, int*)+0x5b>
c00083b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083bd:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083c0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083c3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083c7:	29 f7                	sub    edi,esi
c00083c9:	89 f8                	mov    eax,edi
c00083cb:	99                   	cdq    
c00083cc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083d0:	89 d0                	mov    eax,edx
c00083d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083d6:	19 c2                	sbb    edx,eax
c00083d8:	89 f8                	mov    eax,edi
c00083da:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083df:	89 ea                	mov    edx,ebp
c00083e1:	29 c2                	sub    edx,eax
c00083e3:	85 c0                	test   eax,eax
c00083e5:	74 0b                	je     c00083f2 <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083e7:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083ea:	89 c1                	mov    ecx,eax
c00083ec:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083f2:	85 d2                	test   edx,edx
c00083f4:	74 0d                	je     c0008403 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083f6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083fa:	89 d1                	mov    ecx,edx
c00083fc:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ff:	89 c7                	mov    edi,eax
c0008401:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008403:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008406:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008409:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000840c:	99                   	cdq    
c000840d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0008411:	89 f7                	mov    edi,esi
c0008413:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008417:	c1 ff 1f             	sar    edi,0x1f
c000841a:	57                   	push   edi
c000841b:	56                   	push   esi
c000841c:	52                   	push   edx
c000841d:	50                   	push   eax
c000841e:	e8 2d 67 01 00       	call   c001eb50 <__umoddi3>
c0008423:	83 c4 10             	add    esp,0x10
c0008426:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000842b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000842e:	75 10                	jne    c0008440 <Pipe::read(unsigned long long, void*, int*)+0xde>
c0008430:	83 ec 0c             	sub    esp,0xc
c0008433:	68 86 00 02 c0       	push   0xc0020086
c0008438:	e8 f8 89 00 00       	call   c0010e35 <KePanic(char const*)>
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008444:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008448:	89 10                	mov    DWORD PTR [eax],edx
c000844a:	83 c4 1c             	add    esp,0x1c
c000844d:	31 c0                	xor    eax,eax
c000844f:	5b                   	pop    ebx
c0008450:	5e                   	pop    esi
c0008451:	5f                   	pop    edi
c0008452:	5d                   	pop    ebp
c0008453:	c3                   	ret    

c0008454 <Pipe::Pipe(int)>:
c0008454:	83 ec 1c             	sub    esp,0x1c
c0008457:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000845b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008463:	89 04 24             	mov    DWORD PTR [esp],eax
c0008466:	e8 93 0d 00 00       	call   c00091fe <UnixFile::UnixFile(int)>
c000846b:	ba ac 00 02 c0       	mov    edx,0xc00200ac
c0008470:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008474:	89 10                	mov    DWORD PTR [eax],edx
c0008476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000847a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000847e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008481:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008485:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000848c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008490:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008497:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000849b:	89 04 24             	mov    DWORD PTR [esp],eax
c000849e:	e8 59 f6 ff ff       	call   c0007afc <malloc>
c00084a3:	89 c2                	mov    edx,eax
c00084a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084a9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00084ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084b0:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084b4:	90                   	nop
c00084b5:	83 c4 1c             	add    esp,0x1c
c00084b8:	c3                   	ret    
c00084b9:	90                   	nop

c00084ba <VgaText::isAtty()>:
c00084ba:	b0 01                	mov    al,0x1
c00084bc:	c3                   	ret    
c00084bd:	90                   	nop

c00084be <VgaText::~VgaText()>:
c00084be:	83 ec 1c             	sub    esp,0x1c
c00084c1:	ba f4 00 02 c0       	mov    edx,0xc00200f4
c00084c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084ca:	89 10                	mov    DWORD PTR [eax],edx
c00084cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00084d3:	e8 ec 0e 00 00       	call   c00093c4 <UnixFile::~UnixFile()>
c00084d8:	90                   	nop
c00084d9:	83 c4 1c             	add    esp,0x1c
c00084dc:	c3                   	ret    
c00084dd:	90                   	nop

c00084de <VgaText::~VgaText()>:
c00084de:	83 ec 1c             	sub    esp,0x1c
c00084e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00084e8:	e8 d1 ff ff ff       	call   c00084be <VgaText::~VgaText()>
c00084ed:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00084f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00084fc:	e8 5b 24 00 00       	call   c000a95c <operator delete(void*, unsigned long)>
c0008501:	83 c4 1c             	add    esp,0x1c
c0008504:	c3                   	ret    
c0008505:	90                   	nop

c0008506 <VgaText::read(unsigned long long, void*, int*)>:
c0008506:	83 ec 10             	sub    esp,0x10
c0008509:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000850d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008515:	e8 ff 4d 00 00       	call   c000d319 <readKeyboard(VgaText*, char*, unsigned long)>
c000851a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000851e:	89 02                	mov    DWORD PTR [edx],eax
c0008520:	31 c0                	xor    eax,eax
c0008522:	83 c4 1c             	add    esp,0x1c
c0008525:	c3                   	ret    

c0008526 <setTerminalScrollLock(bool)>:
c0008526:	c3                   	ret    

c0008527 <doTerminalCycle()>:
c0008527:	c3                   	ret    

c0008528 <addToTerminalCycle(VgaText*)>:
c0008528:	c3                   	ret    

c0008529 <scrollTerminalScrollLock(int)>:
c0008529:	c3                   	ret    

c000852a <VgaText::updateTitle()>:
c000852a:	c3                   	ret    
c000852b:	90                   	nop

c000852c <VgaText::load()>:
c000852c:	c3                   	ret    
c000852d:	90                   	nop

c000852e <VgaText::updateCursor()>:
c000852e:	83 ec 14             	sub    esp,0x14
c0008531:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008535:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008538:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000853b:	e8 c0 fd 00 00       	call   c0018300 <HalConsoleCursorUpdate(int, int)>
c0008540:	83 c4 1c             	add    esp,0x1c
c0008543:	c3                   	ret    

c0008544 <VgaText::doANSI_SGR(int)>:
c0008544:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000854c:	85 d2                	test   edx,edx
c000854e:	75 0b                	jne    c000855b <VgaText::doANSI_SGR(int)+0x17>
c0008550:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008553:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008556:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008559:	eb 59                	jmp    c00085b4 <VgaText::doANSI_SGR(int)+0x70>
c000855b:	83 fa 07             	cmp    edx,0x7
c000855e:	75 0b                	jne    c000856b <VgaText::doANSI_SGR(int)+0x27>
c0008560:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008563:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008566:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008569:	eb 49                	jmp    c00085b4 <VgaText::doANSI_SGR(int)+0x70>
c000856b:	83 fa 1b             	cmp    edx,0x1b
c000856e:	74 e0                	je     c0008550 <VgaText::doANSI_SGR(int)+0xc>
c0008570:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008573:	83 f9 07             	cmp    ecx,0x7
c0008576:	77 09                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x3d>
c0008578:	8b 14 8d c0 23 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffddc40]
c000857f:	eb 20                	jmp    c00085a1 <VgaText::doANSI_SGR(int)+0x5d>
c0008581:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 09                	ja     c0008592 <VgaText::doANSI_SGR(int)+0x4e>
c0008589:	8b 14 8d c0 23 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffddc40]
c0008590:	eb 22                	jmp    c00085b4 <VgaText::doANSI_SGR(int)+0x70>
c0008592:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008595:	83 f9 07             	cmp    ecx,0x7
c0008598:	77 0b                	ja     c00085a5 <VgaText::doANSI_SGR(int)+0x61>
c000859a:	8b 14 95 78 22 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddd88]
c00085a1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085a4:	c3                   	ret    
c00085a5:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00085a8:	83 f9 07             	cmp    ecx,0x7
c00085ab:	77 0a                	ja     c00085b7 <VgaText::doANSI_SGR(int)+0x73>
c00085ad:	8b 14 95 50 22 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdddb0]
c00085b4:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b7:	c3                   	ret    

c00085b8 <VgaText::setDefaultBgColour(VgaColour)>:
c00085b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085c3:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085c6:	c3                   	ret    
c00085c7:	90                   	nop

c00085c8 <VgaText::setDefaultFgColour(VgaColour)>:
c00085c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085d0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085d3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085d6:	c3                   	ret    
c00085d7:	90                   	nop

c00085d8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085d8:	53                   	push   ebx
c00085d9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085e5:	51                   	push   ecx
c00085e6:	e8 cd ff ff ff       	call   c00085b8 <VgaText::setDefaultBgColour(VgaColour)>
c00085eb:	58                   	pop    eax
c00085ec:	5a                   	pop    edx
c00085ed:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085f5:	5b                   	pop    ebx
c00085f6:	eb d0                	jmp    c00085c8 <VgaText::setDefaultFgColour(VgaColour)>

c00085f8 <VgaText::setTitleTextColour(VgaColour)>:
c00085f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008600:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008603:	c3                   	ret    

c0008604 <VgaText::setTitleColour(VgaColour)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000860c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000860f:	c3                   	ret    

c0008610 <VgaText::setTitle(char*)>:
c0008610:	c3                   	ret    
c0008611:	90                   	nop

c0008612 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008612:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008616:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000861b:	24 0f                	and    al,0xf
c000861d:	c1 e2 04             	shl    edx,0x4
c0008620:	08 d0                	or     al,dl
c0008622:	c3                   	ret    
c0008623:	90                   	nop

c0008624 <VgaText::scrollScreen()>:
c0008624:	55                   	push   ebp
c0008625:	57                   	push   edi
c0008626:	56                   	push   esi
c0008627:	be 01 00 00 00       	mov    esi,0x1
c000862c:	53                   	push   ebx
c000862d:	83 ec 0c             	sub    esp,0xc
c0008630:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008634:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008637:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000863d:	31 ff                	xor    edi,edi
c000863f:	01 e9                	add    ecx,ebp
c0008641:	8a 01                	mov    al,BYTE PTR [ecx]
c0008643:	83 fe 18             	cmp    esi,0x18
c0008646:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000864c:	75 20                	jne    c000866e <VgaText::scrollScreen()+0x4a>
c000864e:	f7 c7 01 00 00 00    	test   edi,0x1
c0008654:	74 15                	je     c000866b <VgaText::scrollScreen()+0x47>
c0008656:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000865a:	50                   	push   eax
c000865b:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000865f:	50                   	push   eax
c0008660:	e8 ad ff ff ff       	call   c0008612 <VgaText::combineColours(unsigned char, unsigned char)>
c0008665:	5a                   	pop    edx
c0008666:	5a                   	pop    edx
c0008667:	88 01                	mov    BYTE PTR [ecx],al
c0008669:	eb 03                	jmp    c000866e <VgaText::scrollScreen()+0x4a>
c000866b:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000866e:	47                   	inc    edi
c000866f:	41                   	inc    ecx
c0008670:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008676:	75 c9                	jne    c0008641 <VgaText::scrollScreen()+0x1d>
c0008678:	46                   	inc    esi
c0008679:	83 fe 19             	cmp    esi,0x19
c000867c:	75 b9                	jne    c0008637 <VgaText::scrollScreen()+0x13>
c000867e:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008684:	75 1f                	jne    c00086a5 <VgaText::scrollScreen()+0x81>
c0008686:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000868a:	74 05                	je     c0008691 <VgaText::scrollScreen()+0x6d>
c000868c:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000868f:	eb 14                	jmp    c00086a5 <VgaText::scrollScreen()+0x81>
c0008691:	50                   	push   eax
c0008692:	50                   	push   eax
c0008693:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008697:	50                   	push   eax
c0008698:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000869c:	50                   	push   eax
c000869d:	e8 ea fa 00 00       	call   c001818c <HalConsoleScroll(int, int)>
c00086a2:	83 c4 10             	add    esp,0x10
c00086a5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00086a9:	83 c4 0c             	add    esp,0xc
c00086ac:	5b                   	pop    ebx
c00086ad:	5e                   	pop    esi
c00086ae:	5f                   	pop    edi
c00086af:	5d                   	pop    ebp
c00086b0:	e9 79 fe ff ff       	jmp    c000852e <VgaText::updateCursor()>
c00086b5:	90                   	nop

c00086b6 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086c0:	c1 e0 08             	shl    eax,0x8
c00086c3:	09 d0                	or     eax,edx
c00086c5:	c3                   	ret    

c00086c6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086c6:	55                   	push   ebp
c00086c7:	57                   	push   edi
c00086c8:	56                   	push   esi
c00086c9:	53                   	push   ebx
c00086ca:	83 ec 1c             	sub    esp,0x1c
c00086cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086d1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086d5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086d9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086e1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086e5:	0f b6 c3             	movzx  eax,bl
c00086e8:	50                   	push   eax
c00086e9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ee:	50                   	push   eax
c00086ef:	e8 1e ff ff ff       	call   c0008612 <VgaText::combineColours(unsigned char, unsigned char)>
c00086f4:	5a                   	pop    edx
c00086f5:	59                   	pop    ecx
c00086f6:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086fb:	0f b6 c0             	movzx  eax,al
c00086fe:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008702:	50                   	push   eax
c0008703:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008707:	e8 aa ff ff ff       	call   c00086b6 <VgaText::combineCharAndColour(char, unsigned char)>
c000870c:	5a                   	pop    edx
c000870d:	6b d7 50             	imul   edx,edi,0x50
c0008710:	59                   	pop    ecx
c0008711:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008714:	01 f2                	add    edx,esi
c0008716:	0f b7 d2             	movzx  edx,dx
c0008719:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000871d:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c0008723:	75 28                	jne    c000874d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008725:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008729:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000872d:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008731:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008735:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000873d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008741:	83 c4 1c             	add    esp,0x1c
c0008744:	5b                   	pop    ebx
c0008745:	5e                   	pop    esi
c0008746:	5f                   	pop    edi
c0008747:	5d                   	pop    ebp
c0008748:	e9 47 fb 00 00       	jmp    c0018294 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000874d:	83 c4 1c             	add    esp,0x1c
c0008750:	5b                   	pop    ebx
c0008751:	5e                   	pop    esi
c0008752:	5f                   	pop    edi
c0008753:	5d                   	pop    ebp
c0008754:	c3                   	ret    
c0008755:	90                   	nop

c0008756 <VgaText::getCursorX()>:
c0008756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000875d:	c3                   	ret    

c000875e <VgaText::getCursorY()>:
c000875e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008762:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008765:	c3                   	ret    

c0008766 <VgaText::setCursor(int, int)>:
c0008766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000876a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000876e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008771:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008775:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008778:	e9 b1 fd ff ff       	jmp    c000852e <VgaText::updateCursor()>

c000877d <setActiveTerminal(VgaText*)>:
c000877d:	53                   	push   ebx
c000877e:	83 ec 08             	sub    esp,0x8
c0008781:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008785:	85 db                	test   ebx,ebx
c0008787:	75 11                	jne    c000879a <setActiveTerminal(VgaText*)+0x1d>
c0008789:	c7 44 24 10 c0 00 02 c0 	mov    DWORD PTR [esp+0x10],0xc00200c0
c0008791:	83 c4 08             	add    esp,0x8
c0008794:	5b                   	pop    ebx
c0008795:	e9 9b 86 00 00       	jmp    c0010e35 <KePanic(char const*)>
c000879a:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000879f:	85 c0                	test   eax,eax
c00087a1:	74 0c                	je     c00087af <setActiveTerminal(VgaText*)+0x32>
c00087a3:	83 ec 0c             	sub    esp,0xc
c00087a6:	50                   	push   eax
c00087a7:	e8 82 fd ff ff       	call   c000852e <VgaText::updateCursor()>
c00087ac:	83 c4 10             	add    esp,0x10
c00087af:	50                   	push   eax
c00087b0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087b3:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c00087b9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087bc:	53                   	push   ebx
c00087bd:	e8 a4 ff ff ff       	call   c0008766 <VgaText::setCursor(int, int)>
c00087c2:	83 c4 18             	add    esp,0x18
c00087c5:	5b                   	pop    ebx
c00087c6:	c3                   	ret    
c00087c7:	90                   	nop

c00087c8 <VgaText::clearScreen()>:
c00087c8:	57                   	push   edi
c00087c9:	56                   	push   esi
c00087ca:	31 f6                	xor    esi,esi
c00087cc:	53                   	push   ebx
c00087cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087d1:	52                   	push   edx
c00087d2:	6a 00                	push   0x0
c00087d4:	6a 00                	push   0x0
c00087d6:	53                   	push   ebx
c00087d7:	e8 8a ff ff ff       	call   c0008766 <VgaText::setCursor(int, int)>
c00087dc:	83 c4 10             	add    esp,0x10
c00087df:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087e6:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087e9:	7e 20                	jle    c000880b <VgaText::clearScreen()+0x43>
c00087eb:	31 ff                	xor    edi,edi
c00087ed:	50                   	push   eax
c00087ee:	50                   	push   eax
c00087ef:	56                   	push   esi
c00087f0:	57                   	push   edi
c00087f1:	47                   	inc    edi
c00087f2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087f5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087f8:	6a 20                	push   0x20
c00087fa:	53                   	push   ebx
c00087fb:	e8 c6 fe ff ff       	call   c00086c6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008800:	83 c4 20             	add    esp,0x20
c0008803:	83 ff 50             	cmp    edi,0x50
c0008806:	75 e5                	jne    c00087ed <VgaText::clearScreen()+0x25>
c0008808:	46                   	inc    esi
c0008809:	eb db                	jmp    c00087e6 <VgaText::clearScreen()+0x1e>
c000880b:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008812:	5b                   	pop    ebx
c0008813:	5e                   	pop    esi
c0008814:	5f                   	pop    edi
c0008815:	c3                   	ret    

c0008816 <VgaText::setCursorX(int)>:
c0008816:	83 ec 10             	sub    esp,0x10
c0008819:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000881d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008824:	50                   	push   eax
c0008825:	e8 3c ff ff ff       	call   c0008766 <VgaText::setCursor(int, int)>
c000882a:	83 c4 1c             	add    esp,0x1c
c000882d:	c3                   	ret    

c000882e <VgaText::setCursorY(int)>:
c000882e:	83 ec 10             	sub    esp,0x10
c0008831:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008835:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008839:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000883c:	50                   	push   eax
c000883d:	e8 24 ff ff ff       	call   c0008766 <VgaText::setCursor(int, int)>
c0008842:	83 c4 1c             	add    esp,0x1c
c0008845:	c3                   	ret    

c0008846 <VgaText::incrementCursor(bool)>:
c0008846:	53                   	push   ebx
c0008847:	83 ec 18             	sub    esp,0x18
c000884a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000884e:	8a 54 24 24          	mov    dl,BYTE PTR [esp+0x24]
c0008852:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008855:	40                   	inc    eax
c0008856:	83 f8 50             	cmp    eax,0x50
c0008859:	74 05                	je     c0008860 <VgaText::incrementCursor(bool)+0x1a>
c000885b:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000885e:	eb 2c                	jmp    c000888c <VgaText::incrementCursor(bool)+0x46>
c0008860:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008867:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000886a:	8d 48 01             	lea    ecx,[eax+0x1]
c000886d:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008870:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008873:	75 17                	jne    c000888c <VgaText::incrementCursor(bool)+0x46>
c0008875:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0008879:	83 ec 0c             	sub    esp,0xc
c000887c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000887f:	53                   	push   ebx
c0008880:	e8 9f fd ff ff       	call   c0008624 <VgaText::scrollScreen()>
c0008885:	83 c4 10             	add    esp,0x10
c0008888:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000888c:	84 d2                	test   dl,dl
c000888e:	74 0d                	je     c000889d <VgaText::incrementCursor(bool)+0x57>
c0008890:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008894:	83 c4 18             	add    esp,0x18
c0008897:	5b                   	pop    ebx
c0008898:	e9 91 fc ff ff       	jmp    c000852e <VgaText::updateCursor()>
c000889d:	83 c4 18             	add    esp,0x18
c00088a0:	5b                   	pop    ebx
c00088a1:	c3                   	ret    

c00088a2 <VgaText::decrementCursor(bool)>:
c00088a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088a6:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00088aa:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088ad:	85 c0                	test   eax,eax
c00088af:	74 04                	je     c00088b5 <VgaText::decrementCursor(bool)+0x13>
c00088b1:	48                   	dec    eax
c00088b2:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00088b5:	84 c9                	test   cl,cl
c00088b7:	74 09                	je     c00088c2 <VgaText::decrementCursor(bool)+0x20>
c00088b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088bd:	e9 6c fc ff ff       	jmp    c000852e <VgaText::updateCursor()>
c00088c2:	c3                   	ret    
c00088c3:	90                   	nop

c00088c4 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088c4:	53                   	push   ebx
c00088c5:	83 ec 08             	sub    esp,0x8
c00088c8:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088d1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088d5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088d9:	3c 07                	cmp    al,0x7
c00088db:	75 21                	jne    c00088fe <VgaText::putchar(char, VgaColour, VgaColour)+0x3a>
c00088dd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088e5:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088ed:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088f5:	83 c4 08             	add    esp,0x8
c00088f8:	5b                   	pop    ebx
c00088f9:	e9 ca 2f 00 00       	jmp    c000b8c8 <Krnl::beep(int, int, bool)>
c00088fe:	3c 0d                	cmp    al,0xd
c0008900:	75 09                	jne    c000890b <VgaText::putchar(char, VgaColour, VgaColour)+0x47>
c0008902:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008909:	eb 2c                	jmp    c0008937 <VgaText::putchar(char, VgaColour, VgaColour)+0x73>
c000890b:	3c 0a                	cmp    al,0xa
c000890d:	75 31                	jne    c0008940 <VgaText::putchar(char, VgaColour, VgaColour)+0x7c>
c000890f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008916:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008919:	8d 50 01             	lea    edx,[eax+0x1]
c000891c:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000891f:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008922:	75 0f                	jne    c0008933 <VgaText::putchar(char, VgaColour, VgaColour)+0x6f>
c0008924:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008927:	83 ec 0c             	sub    esp,0xc
c000892a:	53                   	push   ebx
c000892b:	e8 f4 fc ff ff       	call   c0008624 <VgaText::scrollScreen()>
c0008930:	83 c4 10             	add    esp,0x10
c0008933:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008937:	83 c4 08             	add    esp,0x8
c000893a:	5b                   	pop    ebx
c000893b:	e9 ee fb ff ff       	jmp    c000852e <VgaText::updateCursor()>
c0008940:	3c 08                	cmp    al,0x8
c0008942:	75 25                	jne    c0008969 <VgaText::putchar(char, VgaColour, VgaColour)+0xa5>
c0008944:	50                   	push   eax
c0008945:	50                   	push   eax
c0008946:	6a 01                	push   0x1
c0008948:	53                   	push   ebx
c0008949:	e8 54 ff ff ff       	call   c00088a2 <VgaText::decrementCursor(bool)>
c000894e:	5a                   	pop    edx
c000894f:	59                   	pop    ecx
c0008950:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008953:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008956:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008959:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000895c:	6a 20                	push   0x20
c000895e:	53                   	push   ebx
c000895f:	e8 62 fd ff ff       	call   c00086c6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008964:	83 c4 28             	add    esp,0x28
c0008967:	5b                   	pop    ebx
c0008968:	c3                   	ret    
c0008969:	83 ec 08             	sub    esp,0x8
c000896c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000896f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008972:	51                   	push   ecx
c0008973:	52                   	push   edx
c0008974:	50                   	push   eax
c0008975:	53                   	push   ebx
c0008976:	e8 4b fd ff ff       	call   c00086c6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000897b:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000897f:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008987:	83 c4 28             	add    esp,0x28
c000898a:	5b                   	pop    ebx
c000898b:	e9 b6 fe ff ff       	jmp    c0008846 <VgaText::incrementCursor(bool)>

c0008990 <VgaText::putchar(char)>:
c0008990:	56                   	push   esi
c0008991:	53                   	push   ebx
c0008992:	83 ec 14             	sub    esp,0x14
c0008995:	0f be 44 24 24       	movsx  eax,BYTE PTR [esp+0x24]
c000899a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000899e:	3c 5b                	cmp    al,0x5b
c00089a0:	75 18                	jne    c00089ba <VgaText::putchar(char)+0x2a>
c00089a2:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00089a6:	74 1f                	je     c00089c7 <VgaText::putchar(char)+0x37>
c00089a8:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00089ae:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089b5:	e9 bc 00 00 00       	jmp    c0008a76 <VgaText::putchar(char)+0xe6>
c00089ba:	3c 1b                	cmp    al,0x1b
c00089bc:	75 09                	jne    c00089c7 <VgaText::putchar(char)+0x37>
c00089be:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089c2:	e9 af 00 00 00       	jmp    c0008a76 <VgaText::putchar(char)+0xe6>
c00089c7:	8a 53 41             	mov    dl,BYTE PTR [ebx+0x41]
c00089ca:	84 d2                	test   dl,dl
c00089cc:	0f 84 94 00 00 00    	je     c0008a66 <VgaText::putchar(char)+0xd6>
c00089d2:	88 c1                	mov    cl,al
c00089d4:	80 e9 40             	sub    cl,0x40
c00089d7:	80 f9 3e             	cmp    cl,0x3e
c00089da:	77 76                	ja     c0008a52 <VgaText::putchar(char)+0xc2>
c00089dc:	3c 6d                	cmp    al,0x6d
c00089de:	75 47                	jne    c0008a27 <VgaText::putchar(char)+0x97>
c00089e0:	31 f6                	xor    esi,esi
c00089e2:	31 c9                	xor    ecx,ecx
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089e9:	7e 2d                	jle    c0008a18 <VgaText::putchar(char)+0x88>
c00089eb:	0f be 4c 33 42       	movsx  ecx,BYTE PTR [ebx+esi*1+0x42]
c00089f0:	80 f9 3b             	cmp    cl,0x3b
c00089f3:	75 17                	jne    c0008a0c <VgaText::putchar(char)+0x7c>
c00089f5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00089f9:	50                   	push   eax
c00089fa:	53                   	push   ebx
c00089fb:	e8 44 fb ff ff       	call   c0008544 <VgaText::doANSI_SGR(int)>
c0008a00:	59                   	pop    ecx
c0008a01:	31 c9                	xor    ecx,ecx
c0008a03:	58                   	pop    eax
c0008a04:	31 c0                	xor    eax,eax
c0008a06:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008a0a:	eb 09                	jmp    c0008a15 <VgaText::putchar(char)+0x85>
c0008a0c:	6b c0 0a             	imul   eax,eax,0xa
c0008a0f:	8d 44 08 d0          	lea    eax,[eax+ecx*1-0x30]
c0008a13:	88 d1                	mov    cl,dl
c0008a15:	46                   	inc    esi
c0008a16:	eb ce                	jmp    c00089e6 <VgaText::putchar(char)+0x56>
c0008a18:	84 c9                	test   cl,cl
c0008a1a:	74 2e                	je     c0008a4a <VgaText::putchar(char)+0xba>
c0008a1c:	50                   	push   eax
c0008a1d:	53                   	push   ebx
c0008a1e:	e8 21 fb ff ff       	call   c0008544 <VgaText::doANSI_SGR(int)>
c0008a23:	58                   	pop    eax
c0008a24:	5a                   	pop    edx
c0008a25:	eb 23                	jmp    c0008a4a <VgaText::putchar(char)+0xba>
c0008a27:	3c 4a                	cmp    al,0x4a
c0008a29:	75 1f                	jne    c0008a4a <VgaText::putchar(char)+0xba>
c0008a2b:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a2f:	75 19                	jne    c0008a4a <VgaText::putchar(char)+0xba>
c0008a31:	83 ec 0c             	sub    esp,0xc
c0008a34:	53                   	push   ebx
c0008a35:	e8 8e fd ff ff       	call   c00087c8 <VgaText::clearScreen()>
c0008a3a:	83 c4 0c             	add    esp,0xc
c0008a3d:	6a 00                	push   0x0
c0008a3f:	6a 00                	push   0x0
c0008a41:	53                   	push   ebx
c0008a42:	e8 1f fd ff ff       	call   c0008766 <VgaText::setCursor(int, int)>
c0008a47:	83 c4 10             	add    esp,0x10
c0008a4a:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a50:	eb 24                	jmp    c0008a76 <VgaText::putchar(char)+0xe6>
c0008a52:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008a55:	83 fa 0e             	cmp    edx,0xe
c0008a58:	7f 1c                	jg     c0008a76 <VgaText::putchar(char)+0xe6>
c0008a5a:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008a5d:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a60:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008a64:	eb 10                	jmp    c0008a76 <VgaText::putchar(char)+0xe6>
c0008a66:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a69:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a6c:	50                   	push   eax
c0008a6d:	53                   	push   ebx
c0008a6e:	e8 51 fe ff ff       	call   c00088c4 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a73:	83 c4 10             	add    esp,0x10
c0008a76:	83 c4 14             	add    esp,0x14
c0008a79:	5b                   	pop    ebx
c0008a7a:	5e                   	pop    esi
c0008a7b:	c3                   	ret    

c0008a7c <VgaText::putx(unsigned int)>:
c0008a7c:	57                   	push   edi
c0008a7d:	b9 11 00 00 00       	mov    ecx,0x11
c0008a82:	56                   	push   esi
c0008a83:	be ce 00 02 c0       	mov    esi,0xc00200ce
c0008a88:	53                   	push   ebx
c0008a89:	83 ec 20             	sub    esp,0x20
c0008a8c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a90:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a94:	fc                   	cld    
c0008a95:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a97:	be 08 00 00 00       	mov    esi,0x8
c0008a9c:	50                   	push   eax
c0008a9d:	50                   	push   eax
c0008a9e:	89 d8                	mov    eax,ebx
c0008aa0:	c1 e8 1c             	shr    eax,0x1c
c0008aa3:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008aa8:	c1 e3 04             	shl    ebx,0x4
c0008aab:	50                   	push   eax
c0008aac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008ab0:	e8 db fe ff ff       	call   c0008990 <VgaText::putchar(char)>
c0008ab5:	83 c4 10             	add    esp,0x10
c0008ab8:	4e                   	dec    esi
c0008ab9:	75 e1                	jne    c0008a9c <VgaText::putx(unsigned int)+0x20>
c0008abb:	83 c4 20             	add    esp,0x20
c0008abe:	5b                   	pop    ebx
c0008abf:	5e                   	pop    esi
c0008ac0:	5f                   	pop    edi
c0008ac1:	c3                   	ret    

c0008ac2 <VgaText::puts(char const*)>:
c0008ac2:	53                   	push   ebx
c0008ac3:	83 ec 08             	sub    esp,0x8
c0008ac6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aca:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008acd:	84 c0                	test   al,al
c0008acf:	74 12                	je     c0008ae3 <VgaText::puts(char const*)+0x21>
c0008ad1:	51                   	push   ecx
c0008ad2:	43                   	inc    ebx
c0008ad3:	51                   	push   ecx
c0008ad4:	50                   	push   eax
c0008ad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ad9:	e8 b2 fe ff ff       	call   c0008990 <VgaText::putchar(char)>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	eb e7                	jmp    c0008aca <VgaText::puts(char const*)+0x8>
c0008ae3:	83 c4 08             	add    esp,0x8
c0008ae6:	5b                   	pop    ebx
c0008ae7:	c3                   	ret    

c0008ae8 <VgaText::write(unsigned long long, void*, int*)>:
c0008ae8:	55                   	push   ebp
c0008ae9:	57                   	push   edi
c0008aea:	56                   	push   esi
c0008aeb:	53                   	push   ebx
c0008aec:	83 ec 0c             	sub    esp,0xc
c0008aef:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008af3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008af7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008afb:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008b02:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008b05:	39 eb                	cmp    ebx,ebp
c0008b07:	74 13                	je     c0008b1c <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008b09:	50                   	push   eax
c0008b0a:	43                   	inc    ebx
c0008b0b:	50                   	push   eax
c0008b0c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008b10:	50                   	push   eax
c0008b11:	56                   	push   esi
c0008b12:	e8 79 fe ff ff       	call   c0008990 <VgaText::putchar(char)>
c0008b17:	83 c4 10             	add    esp,0x10
c0008b1a:	eb e9                	jmp    c0008b05 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b1c:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b27:	89 38                	mov    DWORD PTR [eax],edi
c0008b29:	83 c4 0c             	add    esp,0xc
c0008b2c:	31 c0                	xor    eax,eax
c0008b2e:	5b                   	pop    ebx
c0008b2f:	5e                   	pop    esi
c0008b30:	5f                   	pop    edi
c0008b31:	5d                   	pop    ebp
c0008b32:	c3                   	ret    
c0008b33:	90                   	nop

c0008b34 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b34:	55                   	push   ebp
c0008b35:	57                   	push   edi
c0008b36:	56                   	push   esi
c0008b37:	53                   	push   ebx
c0008b38:	83 ec 0c             	sub    esp,0xc
c0008b3b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b3f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b44:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b4b:	50                   	push   eax
c0008b4c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b51:	50                   	push   eax
c0008b52:	e8 bb fa ff ff       	call   c0008612 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b57:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b5b:	5a                   	pop    edx
c0008b5c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b5f:	59                   	pop    ecx
c0008b60:	0f b6 e8             	movzx  ebp,al
c0008b63:	0f b7 f6             	movzx  esi,si
c0008b66:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b6a:	01 f6                	add    esi,esi
c0008b6c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b6f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b72:	84 c0                	test   al,al
c0008b74:	0f 84 ec 00 00 00    	je     c0008c66 <VgaText::puts(char const*, VgaColour, VgaColour)+0x132>
c0008b7a:	3c 0d                	cmp    al,0xd
c0008b7c:	75 0c                	jne    c0008b8a <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008b7e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b85:	e9 d6 00 00 00       	jmp    c0008c60 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008b8a:	3c 0a                	cmp    al,0xa
c0008b8c:	75 44                	jne    c0008bd2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c0008b8e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b95:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b98:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b9b:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b9e:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008ba1:	75 0f                	jne    c0008bb2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008ba3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008ba6:	83 ec 0c             	sub    esp,0xc
c0008ba9:	53                   	push   ebx
c0008baa:	e8 75 fa ff ff       	call   c0008624 <VgaText::scrollScreen()>
c0008baf:	83 c4 10             	add    esp,0x10
c0008bb2:	83 ec 0c             	sub    esp,0xc
c0008bb5:	53                   	push   ebx
c0008bb6:	e8 73 f9 ff ff       	call   c000852e <VgaText::updateCursor()>
c0008bbb:	83 c4 10             	add    esp,0x10
c0008bbe:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bc2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bc5:	0f b7 f6             	movzx  esi,si
c0008bc8:	01 f6                	add    esi,esi
c0008bca:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bcd:	e9 8e 00 00 00       	jmp    c0008c60 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008bd2:	3c 08                	cmp    al,0x8
c0008bd4:	75 34                	jne    c0008c0a <VgaText::puts(char const*, VgaColour, VgaColour)+0xd6>
c0008bd6:	51                   	push   ecx
c0008bd7:	51                   	push   ecx
c0008bd8:	6a 01                	push   0x1
c0008bda:	53                   	push   ebx
c0008bdb:	e8 c2 fc ff ff       	call   c00088a2 <VgaText::decrementCursor(bool)>
c0008be0:	5e                   	pop    esi
c0008be1:	58                   	pop    eax
c0008be2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008be5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008be8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008beb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bee:	6a 20                	push   0x20
c0008bf0:	53                   	push   ebx
c0008bf1:	e8 d0 fa ff ff       	call   c00086c6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bf6:	83 c4 20             	add    esp,0x20
c0008bf9:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bfd:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008c00:	0f b7 f6             	movzx  esi,si
c0008c03:	01 f6                	add    esi,esi
c0008c05:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c08:	eb 56                	jmp    c0008c60 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008c0a:	52                   	push   edx
c0008c0b:	52                   	push   edx
c0008c0c:	55                   	push   ebp
c0008c0d:	50                   	push   eax
c0008c0e:	e8 a3 fa ff ff       	call   c00086b6 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c13:	83 c4 10             	add    esp,0x10
c0008c16:	66 89 06             	mov    WORD PTR [esi],ax
c0008c19:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008c1f:	75 1d                	jne    c0008c3e <VgaText::puts(char const*, VgaColour, VgaColour)+0x10a>
c0008c21:	83 ec 0c             	sub    esp,0xc
c0008c24:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c27:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c2a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c2e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c32:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c35:	50                   	push   eax
c0008c36:	e8 59 f6 00 00       	call   c0018294 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c3b:	83 c4 20             	add    esp,0x20
c0008c3e:	50                   	push   eax
c0008c3f:	83 c6 02             	add    esi,0x2
c0008c42:	50                   	push   eax
c0008c43:	6a 00                	push   0x0
c0008c45:	53                   	push   ebx
c0008c46:	e8 fb fb ff ff       	call   c0008846 <VgaText::incrementCursor(bool)>
c0008c4b:	83 c4 10             	add    esp,0x10
c0008c4e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c52:	75 0c                	jne    c0008c60 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008c54:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c58:	0f b7 f6             	movzx  esi,si
c0008c5b:	01 f6                	add    esi,esi
c0008c5d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c60:	47                   	inc    edi
c0008c61:	e9 09 ff ff ff       	jmp    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c66:	83 ec 0c             	sub    esp,0xc
c0008c69:	53                   	push   ebx
c0008c6a:	e8 bf f8 ff ff       	call   c000852e <VgaText::updateCursor()>
c0008c6f:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c76:	83 c4 1c             	add    esp,0x1c
c0008c79:	5b                   	pop    ebx
c0008c7a:	5e                   	pop    esi
c0008c7b:	5f                   	pop    edi
c0008c7c:	5d                   	pop    ebp
c0008c7d:	c3                   	ret    

c0008c7e <VgaText::VgaText(char const*)>:
c0008c7e:	56                   	push   esi
c0008c7f:	53                   	push   ebx
c0008c80:	83 ec 14             	sub    esp,0x14
c0008c83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c87:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008c8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c92:	e8 67 05 00 00       	call   c00091fe <UnixFile::UnixFile(int)>
c0008c97:	ba f4 00 02 c0       	mov    edx,0xc00200f4
c0008c9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ca0:	89 10                	mov    DWORD PTR [eax],edx
c0008ca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ca6:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008cad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cb1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008cb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cbc:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cc4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ccc:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ce2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ce9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ced:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cf8:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cff:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008d06:	e8 15 09 00 00       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c0008d0b:	89 c2                	mov    edx,eax
c0008d0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d11:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d14:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008d1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d1e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d21:	89 c6                	mov    esi,eax
c0008d23:	e8 e4 f0 ff ff       	call   c0007e0c <Phys::allocatePage()>
c0008d28:	c7 44 24 0c 05 0c 00 00 	mov    DWORD PTR [esp+0xc],0xc05
c0008d30:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0008d34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d3b:	e8 02 10 00 00       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d44:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d47:	c7 44 24 08 a0 0f 00 00 	mov    DWORD PTR [esp+0x8],0xfa0
c0008d4f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008d57:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d5a:	e8 21 78 ff ff       	call   c0000580 <memset>
c0008d5f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0008d67:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0008d6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d73:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d76:	e8 5d f8 ff ff       	call   c00085d8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d7b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0008d83:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008d8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d92:	e8 cf f9 ff ff       	call   c0008766 <VgaText::setCursor(int, int)>
c0008d97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d9e:	e8 25 fa ff ff       	call   c00087c8 <VgaText::clearScreen()>
c0008da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da7:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008dab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008daf:	05 82 00 00 00       	add    eax,0x82
c0008db4:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0008dbc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008dc4:	89 04 24             	mov    DWORD PTR [esp],eax
c0008dc7:	e8 b4 77 ff ff       	call   c0000580 <memset>
c0008dcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dd0:	05 02 01 00 00       	add    eax,0x102
c0008dd5:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0008ddd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008de5:	89 04 24             	mov    DWORD PTR [esp],eax
c0008de8:	e8 93 77 ff ff       	call   c0000580 <memset>
c0008ded:	90                   	nop
c0008dee:	83 c4 14             	add    esp,0x14
c0008df1:	5b                   	pop    ebx
c0008df2:	5e                   	pop    esi
c0008df3:	c3                   	ret    

c0008df4 <VgaText::receiveKey(unsigned char)>:
c0008df4:	55                   	push   ebp
c0008df5:	57                   	push   edi
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 1c             	sub    esp,0x1c
c0008dfb:	8a 5c 24 34          	mov    bl,BYTE PTR [esp+0x34]
c0008dff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008e03:	84 db                	test   bl,bl
c0008e05:	0f 84 3f 01 00 00    	je     c0008f4a <VgaText::receiveKey(unsigned char)+0x156>
c0008e0b:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0008e11:	80 fb 08             	cmp    bl,0x8
c0008e14:	75 68                	jne    c0008e7e <VgaText::receiveKey(unsigned char)+0x8a>
c0008e16:	83 ec 0c             	sub    esp,0xc
c0008e19:	57                   	push   edi
c0008e1a:	e8 01 78 ff ff       	call   c0000620 <strlen>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	85 c0                	test   eax,eax
c0008e24:	0f 84 e6 00 00 00    	je     c0008f10 <VgaText::receiveKey(unsigned char)+0x11c>
c0008e2a:	50                   	push   eax
c0008e2b:	50                   	push   eax
c0008e2c:	6a 08                	push   0x8
c0008e2e:	56                   	push   esi
c0008e2f:	e8 5c fb ff ff       	call   c0008990 <VgaText::putchar(char)>
c0008e34:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008e37:	e8 e4 77 ff ff       	call   c0000620 <strlen>
c0008e3c:	83 c4 10             	add    esp,0x10
c0008e3f:	8a 84 06 81 00 00 00 	mov    al,BYTE PTR [esi+eax*1+0x81]
c0008e46:	3c 1f                	cmp    al,0x1f
c0008e48:	7f 1e                	jg     c0008e68 <VgaText::receiveKey(unsigned char)+0x74>
c0008e4a:	88 c2                	mov    dl,al
c0008e4c:	80 ea 08             	sub    dl,0x8
c0008e4f:	80 fa 02             	cmp    dl,0x2
c0008e52:	76 14                	jbe    c0008e68 <VgaText::receiveKey(unsigned char)+0x74>
c0008e54:	3c 0d                	cmp    al,0xd
c0008e56:	74 10                	je     c0008e68 <VgaText::receiveKey(unsigned char)+0x74>
c0008e58:	55                   	push   ebp
c0008e59:	55                   	push   ebp
c0008e5a:	68 df 00 02 c0       	push   0xc00200df
c0008e5f:	56                   	push   esi
c0008e60:	e8 5d fc ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0008e65:	83 c4 10             	add    esp,0x10
c0008e68:	83 ec 0c             	sub    esp,0xc
c0008e6b:	57                   	push   edi
c0008e6c:	e8 af 77 ff ff       	call   c0000620 <strlen>
c0008e71:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0008e79:	e9 8f 00 00 00       	jmp    c0008f0d <VgaText::receiveKey(unsigned char)+0x119>
c0008e7e:	8d 86 02 01 00 00    	lea    eax,[esi+0x102]
c0008e84:	83 ec 0c             	sub    esp,0xc
c0008e87:	50                   	push   eax
c0008e88:	e8 93 77 ff ff       	call   c0000620 <strlen>
c0008e8d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008e90:	89 c5                	mov    ebp,eax
c0008e92:	e8 89 77 ff ff       	call   c0000620 <strlen>
c0008e97:	83 c4 10             	add    esp,0x10
c0008e9a:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008e9e:	3d 80 00 00 00       	cmp    eax,0x80
c0008ea3:	0f 87 a1 00 00 00    	ja     c0008f4a <VgaText::receiveKey(unsigned char)+0x156>
c0008ea9:	88 d8                	mov    al,bl
c0008eab:	fe c8                	dec    al
c0008ead:	3c 1e                	cmp    al,0x1e
c0008eaf:	77 37                	ja     c0008ee8 <VgaText::receiveKey(unsigned char)+0xf4>
c0008eb1:	88 d8                	mov    al,bl
c0008eb3:	2c 09                	sub    al,0x9
c0008eb5:	3c 01                	cmp    al,0x1
c0008eb7:	76 2f                	jbe    c0008ee8 <VgaText::receiveKey(unsigned char)+0xf4>
c0008eb9:	80 fb 0d             	cmp    bl,0xd
c0008ebc:	74 2a                	je     c0008ee8 <VgaText::receiveKey(unsigned char)+0xf4>
c0008ebe:	ff 76 34             	push   DWORD PTR [esi+0x34]
c0008ec1:	ff 76 30             	push   DWORD PTR [esi+0x30]
c0008ec4:	68 e5 00 02 c0       	push   0xc00200e5
c0008ec9:	56                   	push   esi
c0008eca:	e8 65 fc ff ff       	call   c0008b34 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ecf:	88 d8                	mov    al,bl
c0008ed1:	ff 76 34             	push   DWORD PTR [esi+0x34]
c0008ed4:	04 40                	add    al,0x40
c0008ed6:	0f b6 c0             	movzx  eax,al
c0008ed9:	ff 76 30             	push   DWORD PTR [esi+0x30]
c0008edc:	50                   	push   eax
c0008edd:	56                   	push   esi
c0008ede:	e8 e1 f9 ff ff       	call   c00088c4 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ee3:	83 c4 20             	add    esp,0x20
c0008ee6:	eb 0f                	jmp    c0008ef7 <VgaText::receiveKey(unsigned char)+0x103>
c0008ee8:	51                   	push   ecx
c0008ee9:	0f be c3             	movsx  eax,bl
c0008eec:	51                   	push   ecx
c0008eed:	50                   	push   eax
c0008eee:	56                   	push   esi
c0008eef:	e8 9c fa ff ff       	call   c0008990 <VgaText::putchar(char)>
c0008ef4:	83 c4 10             	add    esp,0x10
c0008ef7:	88 5c 24 0e          	mov    BYTE PTR [esp+0xe],bl
c0008efb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008f00:	52                   	push   edx
c0008f01:	52                   	push   edx
c0008f02:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008f06:	50                   	push   eax
c0008f07:	57                   	push   edi
c0008f08:	e8 23 7a ff ff       	call   c0000930 <strcat>
c0008f0d:	83 c4 10             	add    esp,0x10
c0008f10:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0008f17:	75 0f                	jne    c0008f28 <VgaText::receiveKey(unsigned char)+0x134>
c0008f19:	80 fb 1c             	cmp    bl,0x1c
c0008f1c:	77 2c                	ja     c0008f4a <VgaText::receiveKey(unsigned char)+0x156>
c0008f1e:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f23:	0f a3 d8             	bt     eax,ebx
c0008f26:	73 22                	jae    c0008f4a <VgaText::receiveKey(unsigned char)+0x156>
c0008f28:	50                   	push   eax
c0008f29:	81 c6 02 01 00 00    	add    esi,0x102
c0008f2f:	50                   	push   eax
c0008f30:	57                   	push   edi
c0008f31:	56                   	push   esi
c0008f32:	e8 f9 79 ff ff       	call   c0000930 <strcat>
c0008f37:	83 c4 0c             	add    esp,0xc
c0008f3a:	68 80 00 00 00       	push   0x80
c0008f3f:	6a 00                	push   0x0
c0008f41:	57                   	push   edi
c0008f42:	e8 39 76 ff ff       	call   c0000580 <memset>
c0008f47:	83 c4 10             	add    esp,0x10
c0008f4a:	83 c4 1c             	add    esp,0x1c
c0008f4d:	5b                   	pop    ebx
c0008f4e:	5e                   	pop    esi
c0008f4f:	5f                   	pop    edi
c0008f50:	5d                   	pop    ebp
c0008f51:	c3                   	ret    

c0008f52 <VgaText::doUpdate()>:
c0008f52:	c3                   	ret    

c0008f53 <newTerminal(char*)>:
c0008f53:	83 ec 28             	sub    esp,0x28
c0008f56:	68 84 01 00 00       	push   0x184
c0008f5b:	e8 9c eb ff ff       	call   c0007afc <malloc>
c0008f60:	5a                   	pop    edx
c0008f61:	59                   	pop    ecx
c0008f62:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008f66:	50                   	push   eax
c0008f67:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f6b:	e8 0e fd ff ff       	call   c0008c7e <VgaText::VgaText(char const*)>
c0008f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f74:	83 c4 2c             	add    esp,0x2c
c0008f77:	c3                   	ret    

c0008f78 <TSS::TSS()>:
c0008f78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f83:	90                   	nop
c0008f84:	c3                   	ret    
c0008f85:	90                   	nop
c0008f86:	66 90                	xchg   ax,ax

c0008f88 <TSS::setESP(unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f94:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f97:	90                   	nop
c0008f98:	5d                   	pop    ebp
c0008f99:	c3                   	ret    
c0008f9a:	66 90                	xchg   ax,ax

c0008f9c <TSS::flush()>:
c0008f9c:	55                   	push   ebp
c0008f9d:	89 e5                	mov    ebp,esp
c0008f9f:	83 ec 10             	sub    esp,0x10
c0008fa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa5:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fa7:	98                   	cwde   
c0008fa8:	83 c8 03             	or     eax,0x3
c0008fab:	98                   	cwde   
c0008fac:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008fb0:	0f b7 55 fe          	movzx  edx,WORD PTR [ebp-0x2]
c0008fb4:	66 89 d0             	mov    ax,dx
c0008fb7:	0f 00 d8             	ltr    ax
c0008fba:	90                   	nop
c0008fbb:	c9                   	leave  
c0008fbc:	c3                   	ret    
c0008fbd:	90                   	nop
c0008fbe:	66 90                	xchg   ax,ax

c0008fc0 <TSS::setup(unsigned long, unsigned long)>:
c0008fc0:	55                   	push   ebp
c0008fc1:	89 e5                	mov    ebp,esp
c0008fc3:	83 ec 28             	sub    esp,0x28
c0008fc6:	c7 04 24 68 00 00 00 	mov    DWORD PTR [esp],0x68
c0008fcd:	e8 2a eb ff ff       	call   c0007afc <malloc>
c0008fd2:	89 c2                	mov    edx,eax
c0008fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fdd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe0:	c7 44 24 08 68 00 00 00 	mov    DWORD PTR [esp+0x8],0x68
c0008fe8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008ff0:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ff3:	e8 88 75 ff ff       	call   c0000580 <memset>
c0008ff8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ffb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffe:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0009004:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009007:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900a:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0009010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009013:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009016:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009019:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000901c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009022:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0009028:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000902b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902e:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0009034:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009037:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903a:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009040:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009043:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009046:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000904c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009052:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000905e:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009064:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009067:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000906a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000906d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009070:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009073:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009076:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009079:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000907c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000907f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009082:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000908c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000908f:	0f 20 da             	mov    edx,cr3
c0009092:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009095:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009098:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000909b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000909e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00090a5:	8d 45 ec             	lea    eax,[ebp-0x14]
c00090a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00090ab:	e8 ba e2 ff ff       	call   c000736a <GDTEntry::setBase(unsigned int)>
c00090b0:	c7 44 24 04 68 00 00 00 	mov    DWORD PTR [esp+0x4],0x68
c00090b8:	8d 45 ec             	lea    eax,[ebp-0x14]
c00090bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00090be:	e8 c3 e2 ff ff       	call   c0007386 <GDTEntry::setLimit(unsigned int)>
c00090c3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00090c7:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
c00090cb:	24 0f                	and    al,0xf
c00090cd:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090d0:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
c00090d4:	0c 40                	or     al,0x40
c00090d6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090d9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090e4:	8d 88 78 01 00 00    	lea    ecx,[eax+0x178]
c00090ea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00090ed:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00090f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00090f4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090f8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00090fb:	e8 b8 e2 ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c0009100:	89 c2                	mov    edx,eax
c0009102:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009105:	89 10                	mov    DWORD PTR [eax],edx
c0009107:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000910c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009112:	05 78 01 00 00       	add    eax,0x178
c0009117:	89 04 24             	mov    DWORD PTR [esp],eax
c000911a:	e8 bd e2 ff ff       	call   c00073dc <GDT::flush()>
c000911f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009122:	8b 00                	mov    eax,DWORD PTR [eax]
c0009124:	c9                   	leave  
c0009125:	c3                   	ret    

c0009126 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0009126:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000912a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000912e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009131:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009136:	75 08                	jne    c0009140 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009138:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000913e:	eb 38                	jmp    c0009178 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009140:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009145:	75 17                	jne    c000915e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009147:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000914c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000914f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009155:	8b 10                	mov    edx,DWORD PTR [eax]
c0009157:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000915b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000915e:	89 c1                	mov    ecx,eax
c0009160:	83 e1 fd             	and    ecx,0xfffffffd
c0009163:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009169:	74 cd                	je     c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000916b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009170:	83 e0 ef             	and    eax,0xffffffef
c0009173:	83 f8 08             	cmp    eax,0x8
c0009176:	76 c0                	jbe    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009178:	31 c0                	xor    eax,eax
c000917a:	c3                   	ret    
c000917b:	90                   	nop

c000917c <ReservedFilename::isAtty()>:
c000917c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009180:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009183:	31 c0                	xor    eax,eax
c0009185:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000918b:	74 09                	je     c0009196 <ReservedFilename::isAtty()+0x1a>
c000918d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009193:	0f 94 c0             	sete   al
c0009196:	c3                   	ret    
c0009197:	90                   	nop

c0009198 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000919c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00091a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00091a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00091ac:	75 08                	jne    c00091b6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00091ae:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00091b4:	eb 3d                	jmp    c00091f3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091b6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00091bb:	75 17                	jne    c00091d4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00091bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00091c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00091c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00091cb:	8b 10                	mov    edx,DWORD PTR [eax]
c00091cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00091d1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00091d4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00091d9:	75 04                	jne    c00091df <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00091db:	89 0a                	mov    DWORD PTR [edx],ecx
c00091dd:	eb 14                	jmp    c00091f3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091df:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091e4:	74 c8                	je     c00091ae <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091e6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091eb:	83 e0 ef             	and    eax,0xffffffef
c00091ee:	83 f8 08             	cmp    eax,0x8
c00091f1:	76 bb                	jbe    c00091ae <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091f3:	31 c0                	xor    eax,eax
c00091f5:	c3                   	ret    

c00091f6 <UnixFile::getFileDescriptor()>:
c00091f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091fd:	c3                   	ret    

c00091fe <UnixFile::UnixFile(int)>:
c00091fe:	53                   	push   ebx
c00091ff:	83 ec 38             	sub    esp,0x38
c0009202:	ba bc 01 02 c0       	mov    edx,0xc00201bc
c0009207:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000920b:	89 10                	mov    DWORD PTR [eax],edx
c000920d:	81 7c 24 44 ff fe ff 0f 	cmp    DWORD PTR [esp+0x44],0xffffeff
c0009215:	0f 8f 70 01 00 00    	jg     c000938b <UnixFile::UnixFile(int)+0x18d>
c000921b:	a1 00 24 02 c0       	mov    eax,ds:0xc0022400
c0009220:	8d 50 01             	lea    edx,[eax+0x1]
c0009223:	89 15 00 24 02 c0    	mov    DWORD PTR ds:0xc0022400,edx
c0009229:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000922d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009230:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009234:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009238:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c000923f:	e8 ec 5a 01 00       	call   c001ed30 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009244:	0f b6 05 94 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024f94
c000924b:	34 01                	xor    al,0x1
c000924d:	0f 84 39 01 00 00    	je     c000938c <UnixFile::UnixFile(int)+0x18e>
c0009253:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c000925a:	c7 44 24 1c 0c 00 00 00 	mov    DWORD PTR [esp+0x1c],0xc
c0009262:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009266:	89 04 24             	mov    DWORD PTR [esp],eax
c0009269:	e8 8e e8 ff ff       	call   c0007afc <malloc>
c000926e:	89 c3                	mov    ebx,eax
c0009270:	c7 44 24 04 03 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff03
c0009278:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000927b:	e8 12 01 00 00       	call   c0009392 <ReservedFilename::ReservedFilename(int)>
c0009280:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c0009286:	c7 44 24 20 0c 00 00 00 	mov    DWORD PTR [esp+0x20],0xc
c000928e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009292:	89 04 24             	mov    DWORD PTR [esp],eax
c0009295:	e8 62 e8 ff ff       	call   c0007afc <malloc>
c000929a:	89 c3                	mov    ebx,eax
c000929c:	c7 44 24 04 01 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff01
c00092a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00092a7:	e8 e6 00 00 00       	call   c0009392 <ReservedFilename::ReservedFilename(int)>
c00092ac:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c00092b2:	c7 44 24 24 0c 00 00 00 	mov    DWORD PTR [esp+0x24],0xc
c00092ba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00092be:	89 04 24             	mov    DWORD PTR [esp],eax
c00092c1:	e8 36 e8 ff ff       	call   c0007afc <malloc>
c00092c6:	89 c3                	mov    ebx,eax
c00092c8:	c7 44 24 04 00 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff00
c00092d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00092d3:	e8 ba 00 00 00       	call   c0009392 <ReservedFilename::ReservedFilename(int)>
c00092d8:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c00092de:	c7 44 24 28 0c 00 00 00 	mov    DWORD PTR [esp+0x28],0xc
c00092e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00092ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00092ed:	e8 0a e8 ff ff       	call   c0007afc <malloc>
c00092f2:	89 c3                	mov    ebx,eax
c00092f4:	c7 44 24 04 02 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff02
c00092fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00092ff:	e8 8e 00 00 00       	call   c0009392 <ReservedFilename::ReservedFilename(int)>
c0009304:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c000930a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009312:	83 7c 24 2c 08       	cmp    DWORD PTR [esp+0x2c],0x8
c0009317:	7f 73                	jg     c000938c <UnixFile::UnixFile(int)+0x18e>
c0009319:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009321:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009325:	89 04 24             	mov    DWORD PTR [esp],eax
c0009328:	e8 cf e7 ff ff       	call   c0007afc <malloc>
c000932d:	89 c3                	mov    ebx,eax
c000932f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009333:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009338:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000933c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000933f:	e8 4e 00 00 00       	call   c0009392 <ReservedFilename::ReservedFilename(int)>
c0009344:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009348:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c000934f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0009357:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000935b:	89 04 24             	mov    DWORD PTR [esp],eax
c000935e:	e8 99 e7 ff ff       	call   c0007afc <malloc>
c0009363:	89 c3                	mov    ebx,eax
c0009365:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009369:	05 20 ff ff 0f       	add    eax,0xfffff20
c000936e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009372:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009375:	e8 18 00 00 00       	call   c0009392 <ReservedFilename::ReservedFilename(int)>
c000937a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000937e:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c0009385:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009389:	eb 87                	jmp    c0009312 <UnixFile::UnixFile(int)+0x114>
c000938b:	90                   	nop
c000938c:	83 c4 38             	add    esp,0x38
c000938f:	5b                   	pop    ebx
c0009390:	c3                   	ret    
c0009391:	90                   	nop

c0009392 <ReservedFilename::ReservedFilename(int)>:
c0009392:	83 ec 1c             	sub    esp,0x1c
c0009395:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009399:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000939d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00093a4:	e8 55 fe ff ff       	call   c00091fe <UnixFile::UnixFile(int)>
c00093a9:	ba d8 01 02 c0       	mov    edx,0xc00201d8
c00093ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b2:	89 10                	mov    DWORD PTR [eax],edx
c00093b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00093bc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00093bf:	90                   	nop
c00093c0:	83 c4 1c             	add    esp,0x1c
c00093c3:	c3                   	ret    

c00093c4 <UnixFile::~UnixFile()>:
c00093c4:	83 ec 2c             	sub    esp,0x2c
c00093c7:	ba bc 01 02 c0       	mov    edx,0xc00201bc
c00093cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093d0:	89 10                	mov    DWORD PTR [eax],edx
c00093d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093d9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093de:	7f 67                	jg     c0009447 <UnixFile::~UnixFile()+0x83>
c00093e0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00093e8:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c00093ef:	e8 04 5a 01 00       	call   c001edf8 <LinkedList<UnixFile>::getFirstElement()>
c00093f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093f8:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c00093ff:	e8 fc 59 01 00       	call   c001ee00 <LinkedList<UnixFile>::removeFirst()>
c0009404:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009408:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c000940c:	74 3c                	je     c000944a <UnixFile::~UnixFile()+0x86>
c000940e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009412:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009416:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c000941d:	e8 0e 59 01 00       	call   c001ed30 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009422:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009426:	8d 50 01             	lea    edx,[eax+0x1]
c0009429:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000942d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009432:	0f 94 c0             	sete   al
c0009435:	84 c0                	test   al,al
c0009437:	74 af                	je     c00093e8 <UnixFile::~UnixFile()+0x24>
c0009439:	c7 04 24 94 01 02 c0 	mov    DWORD PTR [esp],0xc0020194
c0009440:	e8 f0 79 00 00       	call   c0010e35 <KePanic(char const*)>
c0009445:	eb a1                	jmp    c00093e8 <UnixFile::~UnixFile()+0x24>
c0009447:	90                   	nop
c0009448:	eb 01                	jmp    c000944b <UnixFile::~UnixFile()+0x87>
c000944a:	90                   	nop
c000944b:	90                   	nop
c000944c:	83 c4 2c             	add    esp,0x2c
c000944f:	c3                   	ret    

c0009450 <UnixFile::~UnixFile()>:
c0009450:	83 ec 1c             	sub    esp,0x1c
c0009453:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009457:	89 04 24             	mov    DWORD PTR [esp],eax
c000945a:	e8 65 ff ff ff       	call   c00093c4 <UnixFile::~UnixFile()>
c000945f:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009467:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000946b:	89 04 24             	mov    DWORD PTR [esp],eax
c000946e:	e8 e9 14 00 00       	call   c000a95c <operator delete(void*, unsigned long)>
c0009473:	83 c4 1c             	add    esp,0x1c
c0009476:	c3                   	ret    
c0009477:	90                   	nop

c0009478 <ReservedFilename::~ReservedFilename()>:
c0009478:	83 ec 1c             	sub    esp,0x1c
c000947b:	ba d8 01 02 c0       	mov    edx,0xc00201d8
c0009480:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009484:	89 10                	mov    DWORD PTR [eax],edx
c0009486:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000948a:	89 04 24             	mov    DWORD PTR [esp],eax
c000948d:	e8 32 ff ff ff       	call   c00093c4 <UnixFile::~UnixFile()>
c0009492:	90                   	nop
c0009493:	83 c4 1c             	add    esp,0x1c
c0009496:	c3                   	ret    
c0009497:	90                   	nop

c0009498 <ReservedFilename::~ReservedFilename()>:
c0009498:	83 ec 1c             	sub    esp,0x1c
c000949b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000949f:	89 04 24             	mov    DWORD PTR [esp],eax
c00094a2:	e8 d1 ff ff ff       	call   c0009478 <ReservedFilename::~ReservedFilename()>
c00094a7:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00094af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00094b6:	e8 a1 14 00 00       	call   c000a95c <operator delete(void*, unsigned long)>
c00094bb:	83 c4 1c             	add    esp,0x1c
c00094be:	c3                   	ret    

c00094bf <getFromFileDescriptor(int)>:
c00094bf:	53                   	push   ebx
c00094c0:	83 ec 08             	sub    esp,0x8
c00094c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094c7:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094cd:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094d3:	7f 2c                	jg     c0009501 <getFromFileDescriptor(int)+0x42>
c00094d5:	83 ec 0c             	sub    esp,0xc
c00094d8:	68 98 4f 02 c0       	push   0xc0024f98
c00094dd:	e8 16 59 01 00       	call   c001edf8 <LinkedList<UnixFile>::getFirstElement()>
c00094e2:	83 c4 10             	add    esp,0x10
c00094e5:	85 c0                	test   eax,eax
c00094e7:	75 04                	jne    c00094ed <getFromFileDescriptor(int)+0x2e>
c00094e9:	31 c0                	xor    eax,eax
c00094eb:	eb 6e                	jmp    c000955b <getFromFileDescriptor(int)+0x9c>
c00094ed:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094f0:	74 69                	je     c000955b <getFromFileDescriptor(int)+0x9c>
c00094f2:	52                   	push   edx
c00094f3:	52                   	push   edx
c00094f4:	50                   	push   eax
c00094f5:	68 98 4f 02 c0       	push   0xc0024f98
c00094fa:	e8 97 59 01 00       	call   c001ee96 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094ff:	eb e1                	jmp    c00094e2 <getFromFileDescriptor(int)+0x23>
c0009501:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009507:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c000950c:	74 4d                	je     c000955b <getFromFileDescriptor(int)+0x9c>
c000950e:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009514:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c0009519:	74 40                	je     c000955b <getFromFileDescriptor(int)+0x9c>
c000951b:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009521:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c0009526:	74 33                	je     c000955b <getFromFileDescriptor(int)+0x9c>
c0009528:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000952e:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c0009533:	74 26                	je     c000955b <getFromFileDescriptor(int)+0x9c>
c0009535:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000953b:	83 f8 08             	cmp    eax,0x8
c000953e:	77 09                	ja     c0009549 <getFromFileDescriptor(int)+0x8a>
c0009540:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c0009547:	eb 12                	jmp    c000955b <getFromFileDescriptor(int)+0x9c>
c0009549:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000954f:	83 fb 08             	cmp    ebx,0x8
c0009552:	77 95                	ja     c00094e9 <getFromFileDescriptor(int)+0x2a>
c0009554:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c000955b:	83 c4 08             	add    esp,0x8
c000955e:	5b                   	pop    ebx
c000955f:	c3                   	ret    

c0009560 <__static_initialization_and_destruction_0(int, int)>:
c0009560:	83 ec 1c             	sub    esp,0x1c
c0009563:	83 7c 24 20 01       	cmp    DWORD PTR [esp+0x20],0x1
c0009568:	75 32                	jne    c000959c <__static_initialization_and_destruction_0(int, int)+0x3c>
c000956a:	81 7c 24 24 ff ff 00 00 	cmp    DWORD PTR [esp+0x24],0xffff
c0009572:	75 28                	jne    c000959c <__static_initialization_and_destruction_0(int, int)+0x3c>
c0009574:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c000957b:	e8 6e 57 01 00       	call   c001ecee <LinkedList<UnixFile>::LinkedList()>
c0009580:	c7 44 24 08 88 23 02 c0 	mov    DWORD PTR [esp+0x8],0xc0022388
c0009588:	c7 44 24 04 98 4f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024f98
c0009590:	c7 04 24 ec ec 01 c0 	mov    DWORD PTR [esp],0xc001ecec
c0009597:	e8 70 13 00 00       	call   c000a90c <__cxa_atexit>
c000959c:	90                   	nop
c000959d:	83 c4 1c             	add    esp,0x1c
c00095a0:	c3                   	ret    

c00095a1 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00095a1:	83 ec 1c             	sub    esp,0x1c
c00095a4:	c7 44 24 04 ff ff 00 00 	mov    DWORD PTR [esp+0x4],0xffff
c00095ac:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00095b3:	e8 a8 ff ff ff       	call   c0009560 <__static_initialization_and_destruction_0(int, int)>
c00095b8:	83 c4 1c             	add    esp,0x1c
c00095bb:	c3                   	ret    
c00095bc:	66 90                	xchg   ax,ax
c00095be:	66 90                	xchg   ax,ax

c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095c0:	53                   	push   ebx
c00095c1:	8b 15 08 24 02 c0    	mov    edx,DWORD PTR ds:0xc0022408
c00095c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095cb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00095d0:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095d6:	89 d8                	mov    eax,ebx
c00095d8:	d1 e8                	shr    eax,1
c00095da:	01 d0                	add    eax,edx
c00095dc:	f6 c3 01             	test   bl,0x1
c00095df:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00095e2:	75 09                	jne    c00095ed <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2d>
c00095e4:	80 e2 f0             	and    dl,0xf0
c00095e7:	08 d1                	or     cl,dl
c00095e9:	88 08                	mov    BYTE PTR [eax],cl
c00095eb:	5b                   	pop    ebx
c00095ec:	c3                   	ret    
c00095ed:	c0 e1 04             	shl    cl,0x4
c00095f0:	80 e2 0f             	and    dl,0xf
c00095f3:	08 ca                	or     dl,cl
c00095f5:	88 10                	mov    BYTE PTR [eax],dl
c00095f7:	5b                   	pop    ebx
c00095f8:	c3                   	ret    

c00095f9 <Virt::getPageState(unsigned long)>:
c00095f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095fd:	8b 0d 08 24 02 c0    	mov    ecx,DWORD PTR ds:0xc0022408
c0009603:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009609:	89 d0                	mov    eax,edx
c000960b:	d1 e8                	shr    eax,1
c000960d:	0f b6 0c 01          	movzx  ecx,BYTE PTR [ecx+eax*1]
c0009611:	88 c8                	mov    al,cl
c0009613:	c0 e8 04             	shr    al,0x4
c0009616:	f6 c2 01             	test   dl,0x1
c0009619:	75 04                	jne    c000961f <Virt::getPageState(unsigned long)+0x26>
c000961b:	88 c8                	mov    al,cl
c000961d:	24 0f                	and    al,0xf
c000961f:	c3                   	ret    

c0009620 <Virt::allocateKernelVirtualPages(int)>:
c0009620:	55                   	push   ebp
c0009621:	57                   	push   edi
c0009622:	31 ff                	xor    edi,edi
c0009624:	56                   	push   esi
c0009625:	31 f6                	xor    esi,esi
c0009627:	53                   	push   ebx
c0009628:	31 db                	xor    ebx,ebx
c000962a:	83 ec 1c             	sub    esp,0x1c
c000962d:	8b 2d 04 24 02 c0    	mov    ebp,DWORD PTR ds:0xc0022404
c0009633:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009636:	e8 be ff ff ff       	call   c00095f9 <Virt::getPageState(unsigned long)>
c000963b:	84 c0                	test   al,al
c000963d:	75 36                	jne    c0009675 <Virt::allocateKernelVirtualPages(int)+0x55>
c000963f:	85 f6                	test   esi,esi
c0009641:	0f 44 fd             	cmove  edi,ebp
c0009644:	46                   	inc    esi
c0009645:	3b 74 24 30          	cmp    esi,DWORD PTR [esp+0x30]
c0009649:	74 51                	je     c000969c <Virt::allocateKernelVirtualPages(int)+0x7c>
c000964b:	45                   	inc    ebp
c000964c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009652:	76 2c                	jbe    c0009680 <Virt::allocateKernelVirtualPages(int)+0x60>
c0009654:	b8 00 80 0c 00       	mov    eax,0xc8000
c0009659:	84 db                	test   bl,bl
c000965b:	a3 04 24 02 c0       	mov    ds:0xc0022404,eax
c0009660:	75 26                	jne    c0009688 <Virt::allocateKernelVirtualPages(int)+0x68>
c0009662:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0009667:	b3 01                	mov    bl,0x1
c0009669:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000966c:	e8 88 ff ff ff       	call   c00095f9 <Virt::getPageState(unsigned long)>
c0009671:	84 c0                	test   al,al
c0009673:	74 ca                	je     c000963f <Virt::allocateKernelVirtualPages(int)+0x1f>
c0009675:	45                   	inc    ebp
c0009676:	31 f6                	xor    esi,esi
c0009678:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000967e:	77 d4                	ja     c0009654 <Virt::allocateKernelVirtualPages(int)+0x34>
c0009680:	89 2d 04 24 02 c0    	mov    DWORD PTR ds:0xc0022404,ebp
c0009686:	eb ab                	jmp    c0009633 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009688:	c7 04 24 ec 01 02 c0 	mov    DWORD PTR [esp],0xc00201ec
c000968f:	e8 a1 77 00 00       	call   c0010e35 <KePanic(char const*)>
c0009694:	8b 2d 04 24 02 c0    	mov    ebp,DWORD PTR ds:0xc0022404
c000969a:	eb 97                	jmp    c0009633 <Virt::allocateKernelVirtualPages(int)+0x13>
c000969c:	89 3d 04 24 02 c0    	mov    DWORD PTR ds:0xc0022404,edi
c00096a2:	4e                   	dec    esi
c00096a3:	74 74                	je     c0009719 <Virt::allocateKernelVirtualPages(int)+0xf9>
c00096a5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00096a9:	85 d2                	test   edx,edx
c00096ab:	74 4b                	je     c00096f8 <Virt::allocateKernelVirtualPages(int)+0xd8>
c00096ad:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00096b1:	89 f8                	mov    eax,edi
c00096b3:	31 db                	xor    ebx,ebx
c00096b5:	8d 71 ff             	lea    esi,[ecx-0x1]
c00096b8:	eb 19                	jmp    c00096d3 <Virt::allocateKernelVirtualPages(int)+0xb3>
c00096ba:	c6 44 24 04 01       	mov    BYTE PTR [esp+0x4],0x1
c00096bf:	43                   	inc    ebx
c00096c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00096c3:	e8 f8 fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c8:	3b 5c 24 30          	cmp    ebx,DWORD PTR [esp+0x30]
c00096cc:	74 2a                	je     c00096f8 <Virt::allocateKernelVirtualPages(int)+0xd8>
c00096ce:	a1 04 24 02 c0       	mov    eax,ds:0xc0022404
c00096d3:	8d 50 01             	lea    edx,[eax+0x1]
c00096d6:	85 db                	test   ebx,ebx
c00096d8:	89 15 04 24 02 c0    	mov    DWORD PTR ds:0xc0022404,edx
c00096de:	74 25                	je     c0009705 <Virt::allocateKernelVirtualPages(int)+0xe5>
c00096e0:	39 de                	cmp    esi,ebx
c00096e2:	75 d6                	jne    c00096ba <Virt::allocateKernelVirtualPages(int)+0x9a>
c00096e4:	c6 44 24 04 03       	mov    BYTE PTR [esp+0x4],0x3
c00096e9:	43                   	inc    ebx
c00096ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00096ed:	e8 ce fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096f2:	3b 5c 24 30          	cmp    ebx,DWORD PTR [esp+0x30]
c00096f6:	75 d6                	jne    c00096ce <Virt::allocateKernelVirtualPages(int)+0xae>
c00096f8:	83 c4 1c             	add    esp,0x1c
c00096fb:	89 f8                	mov    eax,edi
c00096fd:	5b                   	pop    ebx
c00096fe:	c1 e0 0c             	shl    eax,0xc
c0009701:	5e                   	pop    esi
c0009702:	5f                   	pop    edi
c0009703:	5d                   	pop    ebp
c0009704:	c3                   	ret    
c0009705:	c6 44 24 04 02       	mov    BYTE PTR [esp+0x4],0x2
c000970a:	bb 01 00 00 00       	mov    ebx,0x1
c000970f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009712:	e8 a9 fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009717:	eb b5                	jmp    c00096ce <Virt::allocateKernelVirtualPages(int)+0xae>
c0009719:	89 3c 24             	mov    DWORD PTR [esp],edi
c000971c:	8d 47 01             	lea    eax,[edi+0x1]
c000971f:	c6 44 24 04 04       	mov    BYTE PTR [esp+0x4],0x4
c0009724:	a3 04 24 02 c0       	mov    ds:0xc0022404,eax
c0009729:	e8 92 fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000972e:	83 c4 1c             	add    esp,0x1c
c0009731:	89 f8                	mov    eax,edi
c0009733:	5b                   	pop    ebx
c0009734:	c1 e0 0c             	shl    eax,0xc
c0009737:	5e                   	pop    esi
c0009738:	5f                   	pop    edi
c0009739:	5d                   	pop    ebp
c000973a:	c3                   	ret    

c000973b <Virt::freeSwapfilePage(unsigned long)>:
c000973b:	53                   	push   ebx
c000973c:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c0009742:	b8 01 00 00 00       	mov    eax,0x1
c0009747:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000974b:	d3 e0                	shl    eax,cl
c000974d:	89 cb                	mov    ebx,ecx
c000974f:	c1 eb 05             	shr    ebx,0x5
c0009752:	f7 d0                	not    eax
c0009754:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0009757:	5b                   	pop    ebx
c0009758:	c3                   	ret    

c0009759 <Virt::swapIDToSector(unsigned long)>:
c0009759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000975d:	8b 15 0c 24 02 c0    	mov    edx,DWORD PTR ds:0xc002240c
c0009763:	8b 0d 14 24 02 c0    	mov    ecx,DWORD PTR ds:0xc0022414
c0009769:	0f af c2             	imul   eax,edx
c000976c:	01 c8                	add    eax,ecx
c000976e:	c3                   	ret    

c000976f <Virt::allocateSwapfilePage()>:
c000976f:	55                   	push   ebp
c0009770:	31 d2                	xor    edx,edx
c0009772:	57                   	push   edi
c0009773:	56                   	push   esi
c0009774:	53                   	push   ebx
c0009775:	83 ec 1c             	sub    esp,0x1c
c0009778:	8b 1d 10 24 02 c0    	mov    ebx,DWORD PTR ds:0xc0022410
c000977e:	8b 0d 0c 24 02 c0    	mov    ecx,DWORD PTR ds:0xc002240c
c0009784:	89 d8                	mov    eax,ebx
c0009786:	f7 f1                	div    ecx
c0009788:	39 cb                	cmp    ebx,ecx
c000978a:	72 2d                	jb     c00097b9 <Virt::allocateSwapfilePage()+0x4a>
c000978c:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c0009792:	8b 16                	mov    edx,DWORD PTR [esi]
c0009794:	f6 c2 01             	test   dl,0x1
c0009797:	74 38                	je     c00097d1 <Virt::allocateSwapfilePage()+0x62>
c0009799:	31 c9                	xor    ecx,ecx
c000979b:	bf 01 00 00 00       	mov    edi,0x1
c00097a0:	eb 12                	jmp    c00097b4 <Virt::allocateSwapfilePage()+0x45>
c00097a2:	89 ca                	mov    edx,ecx
c00097a4:	89 fd                	mov    ebp,edi
c00097a6:	c1 ea 05             	shr    edx,0x5
c00097a9:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ac:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ae:	d3 e5                	shl    ebp,cl
c00097b0:	85 ea                	test   edx,ebp
c00097b2:	74 26                	je     c00097da <Virt::allocateSwapfilePage()+0x6b>
c00097b4:	41                   	inc    ecx
c00097b5:	39 c8                	cmp    eax,ecx
c00097b7:	77 e9                	ja     c00097a2 <Virt::allocateSwapfilePage()+0x33>
c00097b9:	c7 04 24 53 03 02 c0 	mov    DWORD PTR [esp],0xc0020353
c00097c0:	e8 70 76 00 00       	call   c0010e35 <KePanic(char const*)>
c00097c5:	83 c4 1c             	add    esp,0x1c
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	5b                   	pop    ebx
c00097cb:	89 c8                	mov    eax,ecx
c00097cd:	5e                   	pop    esi
c00097ce:	5f                   	pop    edi
c00097cf:	5d                   	pop    ebp
c00097d0:	c3                   	ret    
c00097d1:	89 f3                	mov    ebx,esi
c00097d3:	bd 01 00 00 00       	mov    ebp,0x1
c00097d8:	31 c9                	xor    ecx,ecx
c00097da:	09 ea                	or     edx,ebp
c00097dc:	89 c8                	mov    eax,ecx
c00097de:	89 13                	mov    DWORD PTR [ebx],edx
c00097e0:	83 c4 1c             	add    esp,0x1c
c00097e3:	5b                   	pop    ebx
c00097e4:	5e                   	pop    esi
c00097e5:	5f                   	pop    edi
c00097e6:	5d                   	pop    ebp
c00097e7:	c3                   	ret    

c00097e8 <Virt::virtualMemorySetup()>:
c00097e8:	53                   	push   ebx
c00097e9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097ee:	83 ec 08             	sub    esp,0x8
c00097f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00097f4:	43                   	inc    ebx
c00097f5:	c6 44 24 04 0f       	mov    BYTE PTR [esp+0x4],0xf
c00097fa:	e8 c1 fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097ff:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009805:	75 ea                	jne    c00097f1 <Virt::virtualMemorySetup()+0x9>
c0009807:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000980f:	43                   	inc    ebx
c0009810:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c0009815:	e8 a6 fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000981a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009820:	75 ea                	jne    c000980c <Virt::virtualMemorySetup()+0x24>
c0009822:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009827:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000982a:	43                   	inc    ebx
c000982b:	c6 44 24 04 0f       	mov    BYTE PTR [esp+0x4],0xf
c0009830:	e8 8b fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009835:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000983b:	75 ea                	jne    c0009827 <Virt::virtualMemorySetup()+0x3f>
c000983d:	83 c4 08             	add    esp,0x8
c0009840:	5b                   	pop    ebx
c0009841:	c3                   	ret    

c0009842 <Virt::setupPageSwapping(int)>:
c0009842:	53                   	push   ebx
c0009843:	b9 6a 03 02 c0       	mov    ecx,0xc002036a
c0009848:	83 ec 18             	sub    esp,0x18
c000984b:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c0009850:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009854:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000985a:	8b 10                	mov    edx,DWORD PTR [eax]
c000985c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009860:	c1 e3 0b             	shl    ebx,0xb
c0009863:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009867:	89 04 24             	mov    DWORD PTR [esp],eax
c000986a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000986d:	b2 43                	mov    dl,0x43
c000986f:	b9 08 00 00 00       	mov    ecx,0x8
c0009874:	89 1d 10 24 02 c0    	mov    DWORD PTR ds:0xc0022410,ebx
c000987a:	c1 eb 08             	shr    ebx,0x8
c000987d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009880:	31 db                	xor    ebx,ebx
c0009882:	88 15 18 24 02 c0    	mov    BYTE PTR ds:0xc0022418,dl
c0009888:	89 0d 0c 24 02 c0    	mov    DWORD PTR ds:0xc002240c,ecx
c000988e:	a3 14 24 02 c0       	mov    ds:0xc0022414,eax
c0009893:	e8 64 e2 ff ff       	call   c0007afc <malloc>
c0009898:	31 d2                	xor    edx,edx
c000989a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000989e:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c00098a3:	89 c1                	mov    ecx,eax
c00098a5:	a1 10 24 02 c0       	mov    eax,ds:0xc0022410
c00098aa:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00098ad:	f7 35 0c 24 02 c0    	div    DWORD PTR ds:0xc002240c
c00098b3:	c1 e8 05             	shr    eax,0x5
c00098b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098ba:	e8 c1 6c ff ff       	call   c0000580 <memset>
c00098bf:	83 c4 18             	add    esp,0x18
c00098c2:	5b                   	pop    ebx
c00098c3:	c3                   	ret    

c00098c4 <VAS::VAS(VAS*)>:
c00098c4:	83 ec 1c             	sub    esp,0x1c
c00098c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098d6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098dd:	c7 04 24 0c 02 02 c0 	mov    DWORD PTR [esp],0xc002020c
c00098e4:	e8 4c 75 00 00       	call   c0010e35 <KePanic(char const*)>
c00098e9:	90                   	nop
c00098ea:	83 c4 1c             	add    esp,0x1c
c00098ed:	c3                   	ret    

c00098ee <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f2:	89 c2                	mov    edx,eax
c00098f4:	c1 ea 16             	shr    edx,0x16
c00098f7:	c1 e8 0a             	shr    eax,0xa
c00098fa:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00098ff:	19 c9                	sbb    ecx,ecx
c0009901:	25 fc 0f 00 00       	and    eax,0xffc
c0009906:	c1 e2 0c             	shl    edx,0xc
c0009909:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000990f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009916:	01 d0                	add    eax,edx
c0009918:	c3                   	ret    
c0009919:	90                   	nop

c000991a <VAS::getPageTableEntry(unsigned long)>:
c000991a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000991e:	89 ca                	mov    edx,ecx
c0009920:	c1 ea 16             	shr    edx,0x16
c0009923:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009929:	c1 e9 0a             	shr    ecx,0xa
c000992c:	c1 e0 0c             	shl    eax,0xc
c000992f:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009935:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009938:	c3                   	ret    

c0009939 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009939:	57                   	push   edi
c000993a:	56                   	push   esi
c000993b:	53                   	push   ebx
c000993c:	b3 01                	mov    bl,0x1
c000993e:	83 ec 20             	sub    esp,0x20
c0009941:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009945:	c1 ee 0c             	shr    esi,0xc
c0009948:	eb 3f                	jmp    c0009989 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000994a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000994e:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0009953:	89 04 24             	mov    DWORD PTR [esp],eax
c0009956:	e8 bf ff ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000995b:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c0009960:	8b 00                	mov    eax,DWORD PTR [eax]
c0009962:	f6 c4 04             	test   ah,0x4
c0009965:	75 60                	jne    c00099c7 <Virt::freeKernelVirtualPages(unsigned long)+0x8e>
c0009967:	80 fa 04             	cmp    dl,0x4
c000996a:	74 76                	je     c00099e2 <Virt::freeKernelVirtualPages(unsigned long)+0xa9>
c000996c:	80 fa 02             	cmp    dl,0x2
c000996f:	0f 84 85 00 00 00    	je     c00099fa <Virt::freeKernelVirtualPages(unsigned long)+0xc1>
c0009975:	80 fa 03             	cmp    dl,0x3
c0009978:	0f 84 a3 00 00 00    	je     c0009a21 <Virt::freeKernelVirtualPages(unsigned long)+0xe8>
c000997e:	fe ca                	dec    dl
c0009980:	0f 84 89 00 00 00    	je     c0009a0f <Virt::freeKernelVirtualPages(unsigned long)+0xd6>
c0009986:	46                   	inc    esi
c0009987:	31 db                	xor    ebx,ebx
c0009989:	89 34 24             	mov    DWORD PTR [esp],esi
c000998c:	89 f7                	mov    edi,esi
c000998e:	e8 66 fc ff ff       	call   c00095f9 <Virt::getPageState(unsigned long)>
c0009993:	c1 e7 0c             	shl    edi,0xc
c0009996:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000999a:	84 c0                	test   al,al
c000999c:	75 ac                	jne    c000994a <Virt::freeKernelVirtualPages(unsigned long)+0x11>
c000999e:	c7 04 24 81 03 02 c0 	mov    DWORD PTR [esp],0xc0020381
c00099a5:	e8 8b 74 00 00       	call   c0010e35 <KePanic(char const*)>
c00099aa:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c00099af:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00099b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00099b6:	e8 5f ff ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c00099bb:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c00099c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00099c2:	f6 c4 04             	test   ah,0x4
c00099c5:	74 bf                	je     c0009986 <Virt::freeKernelVirtualPages(unsigned long)+0x4d>
c00099c7:	88 54 24 1f          	mov    BYTE PTR [esp+0x1f],dl
c00099cb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00099d3:	e8 cc e3 ff ff       	call   c0007da4 <Phys::freePage(unsigned long)>
c00099d8:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c00099dd:	80 fa 04             	cmp    dl,0x4
c00099e0:	75 8a                	jne    c000996c <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c00099e2:	84 db                	test   bl,bl
c00099e4:	75 3f                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xec>
c00099e6:	ba 30 02 02 c0       	mov    edx,0xc0020230
c00099eb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00099ef:	83 c4 20             	add    esp,0x20
c00099f2:	5b                   	pop    ebx
c00099f3:	5e                   	pop    esi
c00099f4:	5f                   	pop    edi
c00099f5:	e9 3b 74 00 00       	jmp    c0010e35 <KePanic(char const*)>
c00099fa:	84 db                	test   bl,bl
c00099fc:	75 11                	jne    c0009a0f <Virt::freeKernelVirtualPages(unsigned long)+0xd6>
c00099fe:	c7 04 24 9d 03 02 c0 	mov    DWORD PTR [esp],0xc002039d
c0009a05:	e8 2b 74 00 00       	call   c0010e35 <KePanic(char const*)>
c0009a0a:	e9 77 ff ff ff       	jmp    c0009986 <Virt::freeKernelVirtualPages(unsigned long)+0x4d>
c0009a0f:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c0009a14:	89 34 24             	mov    DWORD PTR [esp],esi
c0009a17:	e8 a4 fb ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a1c:	e9 65 ff ff ff       	jmp    c0009986 <Virt::freeKernelVirtualPages(unsigned long)+0x4d>
c0009a21:	84 db                	test   bl,bl
c0009a23:	75 14                	jne    c0009a39 <Virt::freeKernelVirtualPages(unsigned long)+0x100>
c0009a25:	89 34 24             	mov    DWORD PTR [esp],esi
c0009a28:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c0009a2d:	e8 8e fb ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a32:	83 c4 20             	add    esp,0x20
c0009a35:	5b                   	pop    ebx
c0009a36:	5e                   	pop    esi
c0009a37:	5f                   	pop    edi
c0009a38:	c3                   	ret    
c0009a39:	b8 b9 03 02 c0       	mov    eax,0xc00203b9
c0009a3e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a42:	83 c4 20             	add    esp,0x20
c0009a45:	5b                   	pop    ebx
c0009a46:	5e                   	pop    esi
c0009a47:	5f                   	pop    edi
c0009a48:	e9 e8 73 00 00       	jmp    c0010e35 <KePanic(char const*)>
c0009a4d:	90                   	nop

c0009a4e <VAS::freeAllocatedPages(unsigned long)>:
c0009a4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a56:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a5a:	74 09                	je     c0009a65 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a5c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a60:	e9 d4 fe ff ff       	jmp    c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a65:	b8 54 02 02 c0       	mov    eax,0xc0020254
c0009a6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a6e:	e9 03 10 00 00       	jmp    c000aa76 <Dbg::kprintf(char const*, ...)>
c0009a73:	90                   	nop

c0009a74 <VAS::virtualToPhysical(unsigned long)>:
c0009a74:	83 ec 08             	sub    esp,0x8
c0009a77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009a7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a83:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a86:	e8 8f fe ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0009a8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a8d:	83 c4 08             	add    esp,0x8
c0009a90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a95:	c3                   	ret    

c0009a96 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009a96:	55                   	push   ebp
c0009a97:	57                   	push   edi
c0009a98:	56                   	push   esi
c0009a99:	53                   	push   ebx
c0009a9a:	83 ec 08             	sub    esp,0x8
c0009a9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009aa1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009aa5:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0009aa9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0009aad:	89 c3                	mov    ebx,eax
c0009aaf:	c1 e3 0c             	shl    ebx,0xc
c0009ab2:	01 f3                	add    ebx,esi
c0009ab4:	85 c0                	test   eax,eax
c0009ab6:	7e 22                	jle    c0009ada <VAS::reflagRange(unsigned long, int, int, int)+0x44>
c0009ab8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0009abc:	81 c6 00 10 00 00    	add    esi,0x1000
c0009ac2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009ac5:	e8 50 fe ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0009aca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009ace:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad0:	21 f9                	and    ecx,edi
c0009ad2:	09 d1                	or     ecx,edx
c0009ad4:	39 f3                	cmp    ebx,esi
c0009ad6:	89 08                	mov    DWORD PTR [eax],ecx
c0009ad8:	75 de                	jne    c0009ab8 <VAS::reflagRange(unsigned long, int, int, int)+0x22>
c0009ada:	83 c4 08             	add    esp,0x8
c0009add:	5b                   	pop    ebx
c0009ade:	5e                   	pop    esi
c0009adf:	5f                   	pop    edi
c0009ae0:	5d                   	pop    ebp
c0009ae1:	c3                   	ret    

c0009ae2 <VAS::VAS()>:
c0009ae2:	83 ec 14             	sub    esp,0x14
c0009ae5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ae9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009af4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009aff:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009b04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b08:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b10:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b17:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b1e:	ba 8d 30 02 c0       	mov    edx,0xc002308d
c0009b23:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b28:	29 c2                	sub    edx,eax
c0009b2a:	89 d0                	mov    eax,edx
c0009b2c:	05 ff 0f 00 00       	add    eax,0xfff
c0009b31:	c1 e8 0c             	shr    eax,0xc
c0009b34:	89 c2                	mov    edx,eax
c0009b36:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b3b:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
c0009b43:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0009b4b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b57:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b5a:	e8 37 ff ff ff       	call   c0009a96 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b5f:	90                   	nop
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b64:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b69:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b6f:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b76:	75 01                	jne    c0009b79 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b78:	c3                   	ret    
c0009b79:	83 ec 14             	sub    esp,0x14
c0009b7c:	b8 80 00 00 00       	mov    eax,0x80
c0009b81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b89:	ba ff ff ff ff       	mov    edx,0xffffffff
c0009b8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009b96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ba2:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ba5:	e8 ec fe ff ff       	call   c0009a96 <VAS::reflagRange(unsigned long, int, int, int)>
c0009baa:	83 c4 14             	add    esp,0x14
c0009bad:	c3                   	ret    

c0009bae <VAS::mapOtherVASIn(bool, VAS*)>:
c0009bae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bb2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009bb7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009bba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bbe:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009bc1:	19 c0                	sbb    eax,eax
c0009bc3:	83 ca 03             	or     edx,0x3
c0009bc6:	83 e0 fc             	and    eax,0xfffffffc
c0009bc9:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bd0:	0f 20 d8             	mov    eax,cr3
c0009bd3:	0f 22 d8             	mov    cr3,eax
c0009bd6:	c3                   	ret    
c0009bd7:	90                   	nop

c0009bd8 <VAS::~VAS()>:
c0009bd8:	83 ec 3c             	sub    esp,0x3c
c0009bdb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009be3:	fa                   	cli    
c0009be4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009be9:	40                   	inc    eax
c0009bea:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009bef:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bf9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bff:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0009c03:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009c07:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0009c0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c12:	e8 97 ff ff ff       	call   c0009bae <VAS::mapOtherVASIn(bool, VAS*)>
c0009c17:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009c1f:	81 7c 24 28 ff 02 00 00 	cmp    DWORD PTR [esp+0x28],0x2ff
c0009c27:	0f 8f d8 00 00 00    	jg     c0009d05 <VAS::~VAS()+0x12d>
c0009c2d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009c31:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c34:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009c38:	c1 e2 02             	shl    edx,0x2
c0009c3b:	01 d0                	add    eax,edx
c0009c3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c3f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009c43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c47:	83 e0 01             	and    eax,0x1
c0009c4a:	0f 84 ac 00 00 00    	je     c0009cfc <VAS::~VAS()+0x124>
c0009c50:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009c58:	81 7c 24 24 ff 03 00 00 	cmp    DWORD PTR [esp+0x24],0x3ff
c0009c60:	7f 7a                	jg     c0009cdc <VAS::~VAS()+0x104>
c0009c62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009c66:	c1 e0 0a             	shl    eax,0xa
c0009c69:	89 c2                	mov    edx,eax
c0009c6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009c6f:	01 d0                	add    eax,edx
c0009c71:	c1 e0 0c             	shl    eax,0xc
c0009c74:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c78:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c7f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c82:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c88:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c8c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009c90:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0009c98:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c9b:	e8 4e fc ff ff       	call   c00098ee <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009ca0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ca4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ca8:	8b 00                	mov    eax,DWORD PTR [eax]
c0009caa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009cae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009cb2:	25 01 04 00 00       	and    eax,0x401
c0009cb7:	3d 01 04 00 00       	cmp    eax,0x401
c0009cbc:	75 15                	jne    c0009cd3 <VAS::~VAS()+0xfb>
c0009cbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009cc2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cc7:	89 04 24             	mov    DWORD PTR [esp],eax
c0009cca:	e8 d5 e0 ff ff       	call   c0007da4 <Phys::freePage(unsigned long)>
c0009ccf:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009cd3:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0009cd7:	e9 7c ff ff ff       	jmp    c0009c58 <VAS::~VAS()+0x80>
c0009cdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ce0:	25 00 04 00 00       	and    eax,0x400
c0009ce5:	74 15                	je     c0009cfc <VAS::~VAS()+0x124>
c0009ce7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ceb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cf0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009cf3:	e8 ac e0 ff ff       	call   c0007da4 <Phys::freePage(unsigned long)>
c0009cf8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009cfc:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0009d00:	e9 1a ff ff ff       	jmp    c0009c1f <VAS::~VAS()+0x47>
c0009d05:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d09:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009d0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d0f:	e8 25 fc ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009d14:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d18:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009d1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d1e:	e8 81 e0 ff ff       	call   c0007da4 <Phys::freePage(unsigned long)>
c0009d23:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009d27:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009d2c:	48                   	dec    eax
c0009d2d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009d32:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009d37:	85 c0                	test   eax,eax
c0009d39:	75 01                	jne    c0009d3c <VAS::~VAS()+0x164>
c0009d3b:	fb                   	sti    
c0009d3c:	90                   	nop
c0009d3d:	83 c4 3c             	add    esp,0x3c
c0009d40:	c3                   	ret    
c0009d41:	90                   	nop

c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d42:	83 ec 4c             	sub    esp,0x4c
c0009d45:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0009d49:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0009d4d:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c0009d51:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009d55:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c0009d59:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0009d5d:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0009d61:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d67:	77 0b                	ja     c0009d74 <VAS::mapPage(unsigned long, unsigned long, int)+0x32>
c0009d69:	0f 20 d8             	mov    eax,cr3
c0009d6c:	0f 20 d8             	mov    eax,cr3
c0009d6f:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d72:	75 4f                	jne    c0009dc3 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d74:	89 d8                	mov    eax,ebx
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	75 5b                	jne    c0009dda <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009d7f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d82:	89 de                	mov    esi,ebx
c0009d84:	c1 ee 16             	shr    esi,0x16
c0009d87:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d8e:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d92:	74 54                	je     c0009de8 <VAS::mapPage(unsigned long, unsigned long, int)+0xa6>
c0009d94:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0009d98:	c1 eb 0a             	shr    ebx,0xa
c0009d9b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009da1:	c1 e6 0c             	shl    esi,0xc
c0009da4:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009daa:	09 c7                	or     edi,eax
c0009dac:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009daf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009db3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0009db7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0009dbb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0009dbf:	83 c4 4c             	add    esp,0x4c
c0009dc2:	c3                   	ret    
c0009dc3:	c7 04 24 78 02 02 c0 	mov    DWORD PTR [esp],0xc0020278
c0009dca:	e8 a7 0c 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0009dcf:	89 d8                	mov    eax,ebx
c0009dd1:	09 f8                	or     eax,edi
c0009dd3:	a9 ff 0f 00 00       	test   eax,0xfff
c0009dd8:	74 a5                	je     c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x3d>
c0009dda:	c7 04 24 e0 02 02 c0 	mov    DWORD PTR [esp],0xc00202e0
c0009de1:	e8 4f 70 00 00       	call   c0010e35 <KePanic(char const*)>
c0009de6:	eb 97                	jmp    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x3d>
c0009de8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009dec:	e8 1b e0 ff ff       	call   c0007e0c <Phys::allocatePage()>
c0009df1:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009df7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0009dfe:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	e8 15 f8 ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c0009e0b:	b9 01 00 00 00       	mov    ecx,0x1
c0009e10:	ba 03 00 00 00       	mov    edx,0x3
c0009e15:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009e19:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009e1d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009e21:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e28:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009e2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e30:	e8 4d 02 00 00       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e35:	89 c1                	mov    ecx,eax
c0009e37:	b8 00 10 00 00       	mov    eax,0x1000
c0009e3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e40:	31 c0                	xor    eax,eax
c0009e42:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e45:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e49:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009e4d:	e8 2e 67 ff ff       	call   c0000580 <memset>
c0009e52:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009e56:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e59:	e8 db fa ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009e62:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009e65:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009e69:	0d 07 04 00 00       	or     eax,0x407
c0009e6e:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e71:	e9 1e ff ff ff       	jmp    c0009d94 <VAS::mapPage(unsigned long, unsigned long, int)+0x52>

c0009e76 <VAS::allocatePages(int, int)>:
c0009e76:	55                   	push   ebp
c0009e77:	57                   	push   edi
c0009e78:	56                   	push   esi
c0009e79:	53                   	push   ebx
c0009e7a:	83 ec 2c             	sub    esp,0x2c
c0009e7d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009e82:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0009e86:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e8c:	0f b6 80 8d 11 00 00 	movzx  eax,BYTE PTR [eax+0x118d]
c0009e93:	24 01                	and    al,0x1
c0009e95:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009e99:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0009e9d:	0f 85 ce 00 00 00    	jne    c0009f71 <VAS::allocatePages(int, int)+0xfb>
c0009ea3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009ea6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eaa:	85 c0                	test   eax,eax
c0009eac:	0f 84 a7 00 00 00    	je     c0009f59 <VAS::allocatePages(int, int)+0xe3>
c0009eb2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0009eb6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009eba:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0009ebe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009ec2:	c1 e6 0c             	shl    esi,0xc
c0009ec5:	01 de                	add    esi,ebx
c0009ec7:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009eca:	81 cd 00 04 00 00    	or     ebp,0x400
c0009ed0:	85 c0                	test   eax,eax
c0009ed2:	7e 2d                	jle    c0009f01 <VAS::allocatePages(int, int)+0x8b>
c0009ed4:	e8 33 df ff ff       	call   c0007e0c <Phys::allocatePage()>
c0009ed9:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009edd:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009ee1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009ee4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009ee8:	e8 55 fe ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eed:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009ef2:	74 03                	je     c0009ef7 <VAS::allocatePages(int, int)+0x81>
c0009ef4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ef7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009efd:	39 de                	cmp    esi,ebx
c0009eff:	75 d3                	jne    c0009ed4 <VAS::allocatePages(int, int)+0x5e>
c0009f01:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009f06:	75 12                	jne    c0009f1a <VAS::allocatePages(int, int)+0xa4>
c0009f08:	0f 20 d8             	mov    eax,cr3
c0009f0b:	0f 22 d8             	mov    cr3,eax
c0009f0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f12:	83 c4 2c             	add    esp,0x2c
c0009f15:	5b                   	pop    ebx
c0009f16:	5e                   	pop    esi
c0009f17:	5f                   	pop    edi
c0009f18:	5d                   	pop    ebp
c0009f19:	c3                   	ret    
c0009f1a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009f1e:	c1 ee 0a             	shr    esi,0xa
c0009f21:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009f27:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009f2d:	c1 eb 0a             	shr    ebx,0xa
c0009f30:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f36:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009f3c:	39 c3                	cmp    ebx,eax
c0009f3e:	77 ce                	ja     c0009f0e <VAS::allocatePages(int, int)+0x98>
c0009f40:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f43:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f49:	39 d8                	cmp    eax,ebx
c0009f4b:	73 f3                	jae    c0009f40 <VAS::allocatePages(int, int)+0xca>
c0009f4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f51:	83 c4 2c             	add    esp,0x2c
c0009f54:	5b                   	pop    ebx
c0009f55:	5e                   	pop    esi
c0009f56:	5f                   	pop    edi
c0009f57:	5d                   	pop    ebp
c0009f58:	c3                   	ret    
c0009f59:	c7 04 24 04 03 02 c0 	mov    DWORD PTR [esp],0xc0020304
c0009f60:	e8 d0 6e 00 00       	call   c0010e35 <KePanic(char const*)>
c0009f65:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009f68:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009f6c:	e9 41 ff ff ff       	jmp    c0009eb2 <VAS::allocatePages(int, int)+0x3c>
c0009f71:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009f75:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f78:	e8 a3 f6 ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c0009f7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009f81:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009f86:	0f 87 a3 00 00 00    	ja     c000a02f <VAS::allocatePages(int, int)+0x1b9>
c0009f8c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009f90:	85 d2                	test   edx,edx
c0009f92:	7e 44                	jle    c0009fd8 <VAS::allocatePages(int, int)+0x162>
c0009f94:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0009f98:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0009f9c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009fa0:	c1 e5 0c             	shl    ebp,0xc
c0009fa3:	81 ce 00 04 00 00    	or     esi,0x400
c0009fa9:	01 dd                	add    ebp,ebx
c0009fab:	e8 5c de ff ff       	call   c0007e0c <Phys::allocatePage()>
c0009fb0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0009fb4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009fb8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009fbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009fbf:	e8 7e fd ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009fc4:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009fc9:	74 03                	je     c0009fce <VAS::allocatePages(int, int)+0x158>
c0009fcb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009fce:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009fd4:	39 dd                	cmp    ebp,ebx
c0009fd6:	75 d3                	jne    c0009fab <VAS::allocatePages(int, int)+0x135>
c0009fd8:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009fdd:	0f 84 25 ff ff ff    	je     c0009f08 <VAS::allocatePages(int, int)+0x92>
c0009fe3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009fe7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009feb:	c1 e0 0c             	shl    eax,0xc
c0009fee:	01 d0                	add    eax,edx
c0009ff0:	89 d3                	mov    ebx,edx
c0009ff2:	c1 eb 0a             	shr    ebx,0xa
c0009ff5:	c1 e8 0a             	shr    eax,0xa
c0009ff8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ffe:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a003:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a009:	2d 00 00 40 00       	sub    eax,0x400000
c000a00e:	39 c3                	cmp    ebx,eax
c000a010:	0f 87 f8 fe ff ff    	ja     c0009f0e <VAS::allocatePages(int, int)+0x98>
c000a016:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a019:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a01f:	39 d8                	cmp    eax,ebx
c000a021:	73 f3                	jae    c000a016 <VAS::allocatePages(int, int)+0x1a0>
c000a023:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a027:	83 c4 2c             	add    esp,0x2c
c000a02a:	5b                   	pop    ebx
c000a02b:	5e                   	pop    esi
c000a02c:	5f                   	pop    edi
c000a02d:	5d                   	pop    ebp
c000a02e:	c3                   	ret    
c000a02f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a034:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a03a:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000a041:	0f 84 45 ff ff ff    	je     c0009f8c <VAS::allocatePages(int, int)+0x116>
c000a047:	81 4c 24 48 00 01 00 00 	or     DWORD PTR [esp+0x48],0x100
c000a04f:	e9 38 ff ff ff       	jmp    c0009f8c <VAS::allocatePages(int, int)+0x116>

c000a054 <VAS::setCPUSpecific(unsigned long)>:
c000a054:	83 ec 1c             	sub    esp,0x1c
c000a057:	b8 05 00 00 00       	mov    eax,0x5
c000a05c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a060:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a064:	ba 00 00 40 c2       	mov    edx,0xc2400000
c000a069:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a06d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a075:	89 04 24             	mov    DWORD PTR [esp],eax
c000a078:	e8 c5 fc ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a07d:	83 c4 1c             	add    esp,0x1c
c000a080:	c3                   	ret    
c000a081:	90                   	nop

c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a082:	55                   	push   ebp
c000a083:	57                   	push   edi
c000a084:	56                   	push   esi
c000a085:	53                   	push   ebx
c000a086:	83 ec 2c             	sub    esp,0x2c
c000a089:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a08e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000a092:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000a096:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000a09a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0a0:	0f b6 80 8d 11 00 00 	movzx  eax,BYTE PTR [eax+0x118d]
c000a0a7:	24 01                	and    al,0x1
c000a0a9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000a0ad:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000a0b1:	85 c0                	test   eax,eax
c000a0b3:	7e 41                	jle    c000a0f6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x74>
c000a0b5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000a0b9:	89 f3                	mov    ebx,esi
c000a0bb:	c1 e0 0c             	shl    eax,0xc
c000a0be:	01 f0                	add    eax,esi
c000a0c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a0c4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000a0c8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000a0cc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a0d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a0d3:	29 f0                	sub    eax,esi
c000a0d5:	01 d8                	add    eax,ebx
c000a0d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a0db:	e8 62 fc ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a0e0:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c000a0e5:	74 03                	je     c000a0ea <VAS::mapRange(unsigned long, unsigned long, int, int)+0x68>
c000a0e7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0ea:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0f0:	39 5c 24 1c          	cmp    DWORD PTR [esp+0x1c],ebx
c000a0f4:	75 ce                	jne    c000a0c4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a0f6:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c000a0fb:	75 10                	jne    c000a10d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x8b>
c000a0fd:	0f 20 d8             	mov    eax,cr3
c000a100:	0f 22 d8             	mov    cr3,eax
c000a103:	83 c4 2c             	add    esp,0x2c
c000a106:	89 f0                	mov    eax,esi
c000a108:	5b                   	pop    ebx
c000a109:	5e                   	pop    esi
c000a10a:	5f                   	pop    edi
c000a10b:	5d                   	pop    ebp
c000a10c:	c3                   	ret    
c000a10d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000a111:	89 f3                	mov    ebx,esi
c000a113:	c1 eb 0a             	shr    ebx,0xa
c000a116:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a11c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a122:	c1 e0 0c             	shl    eax,0xc
c000a125:	01 f0                	add    eax,esi
c000a127:	c1 e8 0a             	shr    eax,0xa
c000a12a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a12f:	2d 00 00 40 00       	sub    eax,0x400000
c000a134:	39 c3                	cmp    ebx,eax
c000a136:	77 cb                	ja     c000a103 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x81>
c000a138:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a13b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a141:	39 d8                	cmp    eax,ebx
c000a143:	73 f3                	jae    c000a138 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xb6>
c000a145:	83 c4 2c             	add    esp,0x2c
c000a148:	89 f0                	mov    eax,esi
c000a14a:	5b                   	pop    ebx
c000a14b:	5e                   	pop    esi
c000a14c:	5f                   	pop    edi
c000a14d:	5d                   	pop    ebp
c000a14e:	c3                   	ret    
c000a14f:	90                   	nop

c000a150 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a150:	83 ec 4c             	sub    esp,0x4c
c000a153:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c000a157:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000a15b:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000a15f:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a163:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000a167:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000a16b:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000a16f:	0f b6 54 24 54       	movzx  edx,BYTE PTR [esp+0x54]
c000a174:	09 d8                	or     eax,ebx
c000a176:	a9 ff 0f 00 00       	test   eax,0xfff
c000a17b:	75 52                	jne    c000a1cf <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x7f>
c000a17d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a180:	89 de                	mov    esi,ebx
c000a182:	c1 ee 16             	shr    esi,0x16
c000a185:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c000a18c:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c000a190:	74 54                	je     c000a1e6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x96>
c000a192:	c1 eb 0a             	shr    ebx,0xa
c000a195:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000a199:	80 fa 01             	cmp    dl,0x1
c000a19c:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000a1a0:	19 c0                	sbb    eax,eax
c000a1a2:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a1a8:	c1 e6 0c             	shl    esi,0xc
c000a1ab:	25 00 00 c0 ff       	and    eax,0xffc00000
c000a1b0:	01 f3                	add    ebx,esi
c000a1b2:	09 ca                	or     edx,ecx
c000a1b4:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c000a1bb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a1bf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000a1c3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000a1c7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c000a1cb:	83 c4 4c             	add    esp,0x4c
c000a1ce:	c3                   	ret    
c000a1cf:	c7 04 24 30 03 02 c0 	mov    DWORD PTR [esp],0xc0020330
c000a1d6:	88 54 24 24          	mov    BYTE PTR [esp+0x24],dl
c000a1da:	e8 56 6c 00 00       	call   c0010e35 <KePanic(char const*)>
c000a1df:	0f b6 54 24 24       	movzx  edx,BYTE PTR [esp+0x24]
c000a1e4:	eb 97                	jmp    c000a17d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x2d>
c000a1e6:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000a1ea:	e8 1d dc ff ff       	call   c0007e0c <Phys::allocatePage()>
c000a1ef:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a1f5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000a1fc:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a200:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a204:	e8 17 f4 ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c000a209:	b9 01 00 00 00       	mov    ecx,0x1
c000a20e:	ba 03 00 00 00       	mov    edx,0x3
c000a213:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a217:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a21b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a21f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a222:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a226:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a22a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a22e:	e8 4f fe ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a233:	89 c1                	mov    ecx,eax
c000a235:	b8 00 10 00 00       	mov    eax,0x1000
c000a23a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a23e:	31 c0                	xor    eax,eax
c000a240:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a243:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a247:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a24b:	e8 30 63 ff ff       	call   c0000580 <memset>
c000a250:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a254:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a257:	e8 dd f6 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000a25c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a260:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a263:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c000a268:	81 c9 07 04 00 00    	or     ecx,0x407
c000a26e:	89 0c 38             	mov    DWORD PTR [eax+edi*1],ecx
c000a271:	e9 1c ff ff ff       	jmp    c000a192 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x42>

c000a276 <VAS::VAS(bool)>:
c000a276:	53                   	push   ebx
c000a277:	83 ec 48             	sub    esp,0x48
c000a27a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000a27e:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c000a282:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a286:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a28d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a291:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a298:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a29c:	0f b6 54 24 2c       	movzx  edx,BYTE PTR [esp+0x2c]
c000a2a1:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a2a4:	e8 63 db ff ff       	call   c0007e0c <Phys::allocatePage()>
c000a2a9:	89 c2                	mov    edx,eax
c000a2ab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a2af:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a2b2:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a2b8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000a2bf:	e8 5c f3 ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c000a2c4:	89 c2                	mov    edx,eax
c000a2c6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a2ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2cd:	c7 44 24 10 03 00 00 00 	mov    DWORD PTR [esp+0x10],0x3
c000a2d5:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000a2dd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a2e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a2e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a2e8:	e8 95 fd ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a2ed:	89 c2                	mov    edx,eax
c000a2ef:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a2f3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a2f6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000a2fe:	81 7c 24 3c ff 03 00 00 	cmp    DWORD PTR [esp+0x3c],0x3ff
c000a306:	7f 1c                	jg     c000a324 <VAS::VAS(bool)+0xae>
c000a308:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a30c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a30f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a313:	c1 e2 02             	shl    edx,0x2
c000a316:	01 d0                	add    eax,edx
c000a318:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a31e:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c000a322:	eb da                	jmp    c000a2fe <VAS::VAS(bool)+0x88>
c000a324:	c7 44 24 38 00 03 00 00 	mov    DWORD PTR [esp+0x38],0x300
c000a32c:	81 7c 24 38 ff 03 00 00 	cmp    DWORD PTR [esp+0x38],0x3ff
c000a334:	7f 75                	jg     c000a3ab <VAS::VAS(bool)+0x135>
c000a336:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a33a:	2d 00 02 00 00       	sub    eax,0x200
c000a33f:	c1 e0 0c             	shl    eax,0xc
c000a342:	83 c8 05             	or     eax,0x5
c000a345:	89 c2                	mov    edx,eax
c000a347:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a34c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a352:	0f b6 80 8c 11 00 00 	movzx  eax,BYTE PTR [eax+0x118c]
c000a359:	24 10                	and    al,0x10
c000a35b:	74 07                	je     c000a364 <VAS::VAS(bool)+0xee>
c000a35d:	b8 00 01 00 00       	mov    eax,0x100
c000a362:	eb 05                	jmp    c000a369 <VAS::VAS(bool)+0xf3>
c000a364:	b8 00 00 00 00       	mov    eax,0x0
c000a369:	09 d0                	or     eax,edx
c000a36b:	89 c1                	mov    ecx,eax
c000a36d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a371:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a374:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a378:	c1 e2 02             	shl    edx,0x2
c000a37b:	01 d0                	add    eax,edx
c000a37d:	89 ca                	mov    edx,ecx
c000a37f:	89 10                	mov    DWORD PTR [eax],edx
c000a381:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a385:	2d 40 03 00 00       	sub    eax,0x340
c000a38a:	83 f8 7f             	cmp    eax,0x7f
c000a38d:	77 16                	ja     c000a3a5 <VAS::VAS(bool)+0x12f>
c000a38f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a393:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a396:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a39a:	c1 e2 02             	shl    edx,0x2
c000a39d:	01 d0                	add    eax,edx
c000a39f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a3a5:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000a3a9:	eb 81                	jmp    c000a32c <VAS::VAS(bool)+0xb6>
c000a3ab:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3b6:	0f b6 80 8c 11 00 00 	movzx  eax,BYTE PTR [eax+0x118c]
c000a3bd:	24 10                	and    al,0x10
c000a3bf:	74 07                	je     c000a3c8 <VAS::VAS(bool)+0x152>
c000a3c1:	b8 03 41 00 00       	mov    eax,0x4103
c000a3c6:	eb 05                	jmp    c000a3cd <VAS::VAS(bool)+0x157>
c000a3c8:	b8 03 40 00 00       	mov    eax,0x4003
c000a3cd:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c000a3d1:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a3d4:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a3da:	89 02                	mov    DWORD PTR [edx],eax
c000a3dc:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3e7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a3ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a3f1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a3f5:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3f8:	e8 57 fc ff ff       	call   c000a054 <VAS::setCPUSpecific(unsigned long)>
c000a3fd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a401:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a404:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a409:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a40f:	0f b6 80 8c 11 00 00 	movzx  eax,BYTE PTR [eax+0x118c]
c000a416:	24 10                	and    al,0x10
c000a418:	74 07                	je     c000a421 <VAS::VAS(bool)+0x1ab>
c000a41a:	b8 00 01 00 00       	mov    eax,0x100
c000a41f:	eb 05                	jmp    c000a426 <VAS::VAS(bool)+0x1b0>
c000a421:	b8 00 00 00 00       	mov    eax,0x0
c000a426:	09 c2                	or     edx,eax
c000a428:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a42c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a42f:	05 fc 0f 00 00       	add    eax,0xffc
c000a434:	83 ca 03             	or     edx,0x3
c000a437:	89 10                	mov    DWORD PTR [eax],edx
c000a439:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a43e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a444:	89 04 24             	mov    DWORD PTR [esp],eax
c000a447:	e8 30 23 00 00       	call   c000c77c <Device::getName()>
c000a44c:	c7 44 24 04 d3 03 02 c0 	mov    DWORD PTR [esp+0x4],0xc00203d3
c000a454:	89 04 24             	mov    DWORD PTR [esp],eax
c000a457:	e8 e4 63 ff ff       	call   c0000840 <strcmp>
c000a45c:	85 c0                	test   eax,eax
c000a45e:	0f 94 c0             	sete   al
c000a461:	84 c0                	test   al,al
c000a463:	0f 84 8b 00 00 00    	je     c000a4f4 <VAS::VAS(bool)+0x27e>
c000a469:	fa                   	cli    
c000a46a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a46f:	40                   	inc    eax
c000a470:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a475:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a47a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a480:	05 7c 09 00 00       	add    eax,0x97c
c000a485:	89 04 24             	mov    DWORD PTR [esp],eax
c000a488:	e8 51 d1 ff ff       	call   c00075de <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a48d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a492:	89 c3                	mov    ebx,eax
c000a494:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a499:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a49f:	05 7c 09 00 00       	add    eax,0x97c
c000a4a4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a4a7:	e8 32 d1 ff ff       	call   c00075de <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a4ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a4b0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a4b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a4b7:	e8 5e f4 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a4bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a4be:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a4c3:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c000a4cb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a4cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a4d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a4d7:	89 04 24             	mov    DWORD PTR [esp],eax
c000a4da:	e8 63 f8 ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a4df:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a4e4:	48                   	dec    eax
c000a4e5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a4ea:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a4ef:	85 c0                	test   eax,eax
c000a4f1:	75 01                	jne    c000a4f4 <VAS::VAS(bool)+0x27e>
c000a4f3:	fb                   	sti    
c000a4f4:	90                   	nop
c000a4f5:	83 c4 48             	add    esp,0x48
c000a4f8:	5b                   	pop    ebx
c000a4f9:	c3                   	ret    

c000a4fa <VAS::evict(unsigned long)>:
c000a4fa:	55                   	push   ebp
c000a4fb:	57                   	push   edi
c000a4fc:	56                   	push   esi
c000a4fd:	53                   	push   ebx
c000a4fe:	83 ec 3c             	sub    esp,0x3c
c000a501:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a505:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c000a509:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a50d:	e8 5d f2 ff ff       	call   c000976f <Virt::allocateSwapfilePage()>
c000a512:	8b 1d 0c 24 02 c0    	mov    ebx,DWORD PTR ds:0xc002240c
c000a518:	85 db                	test   ebx,ebx
c000a51a:	89 c7                	mov    edi,eax
c000a51c:	7e 4a                	jle    c000a568 <VAS::evict(unsigned long)+0x6e>
c000a51e:	89 ee                	mov    esi,ebp
c000a520:	31 db                	xor    ebx,ebx
c000a522:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a525:	e8 2f f2 ff ff       	call   c0009759 <Virt::swapIDToSector(unsigned long)>
c000a52a:	31 c9                	xor    ecx,ecx
c000a52c:	ba 01 00 00 00       	mov    edx,0x1
c000a531:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000a535:	81 c6 00 02 00 00    	add    esi,0x200
c000a53b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a53f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a543:	01 d8                	add    eax,ebx
c000a545:	43                   	inc    ebx
c000a546:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a54a:	0f be 05 18 24 02 c0 	movsx  eax,BYTE PTR ds:0xc0022418
c000a551:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a558:	89 04 24             	mov    DWORD PTR [esp],eax
c000a55b:	e8 32 33 00 00       	call   c000d892 <LogicalDisk::write(unsigned long long, int, void*)>
c000a560:	39 1d 0c 24 02 c0    	cmp    DWORD PTR ds:0xc002240c,ebx
c000a566:	7f ba                	jg     c000a522 <VAS::evict(unsigned long)+0x28>
c000a568:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000a56c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a570:	c1 e7 0b             	shl    edi,0xb
c000a573:	89 04 24             	mov    DWORD PTR [esp],eax
c000a576:	e8 9f f3 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a57b:	8b 10                	mov    edx,DWORD PTR [eax]
c000a57d:	89 d1                	mov    ecx,edx
c000a57f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a585:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a58b:	09 cf                	or     edi,ecx
c000a58d:	89 38                	mov    DWORD PTR [eax],edi
c000a58f:	89 14 24             	mov    DWORD PTR [esp],edx
c000a592:	ff 05 a8 4f 02 c0    	inc    DWORD PTR ds:0xc0024fa8
c000a598:	e8 07 d8 ff ff       	call   c0007da4 <Phys::freePage(unsigned long)>
c000a59d:	0f 20 d8             	mov    eax,cr3
c000a5a0:	0f 22 d8             	mov    cr3,eax
c000a5a3:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a5a8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a5ac:	8d 50 01             	lea    edx,[eax+0x1]
c000a5af:	b8 e1 03 02 c0       	mov    eax,0xc00203e1
c000a5b4:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a5ba:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5be:	83 c4 3c             	add    esp,0x3c
c000a5c1:	5b                   	pop    ebx
c000a5c2:	5e                   	pop    esi
c000a5c3:	5f                   	pop    edi
c000a5c4:	5d                   	pop    ebp
c000a5c5:	e9 ac 04 00 00       	jmp    c000aa76 <Dbg::kprintf(char const*, ...)>

c000a5ca <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a5ca:	83 ec 4c             	sub    esp,0x4c
c000a5cd:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c000a5d1:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000a5d5:	c7 04 24 f2 03 02 c0 	mov    DWORD PTR [esp],0xc00203f2
c000a5dc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000a5e0:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000a5e4:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a5e8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a5ee:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000a5f2:	e8 7f 04 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a5f7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a5fb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a5ff:	89 04 24             	mov    DWORD PTR [esp],eax
c000a602:	e8 13 f3 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a607:	85 c0                	test   eax,eax
c000a609:	89 c6                	mov    esi,eax
c000a60b:	0f 95 c2             	setne  dl
c000a60e:	85 db                	test   ebx,ebx
c000a610:	0f 95 c0             	setne  al
c000a613:	20 c2                	and    dl,al
c000a615:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000a619:	75 19                	jne    c000a634 <VAS::tryLoadBackOffDisk(unsigned long)+0x6a>
c000a61b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000a620:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a624:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000a628:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000a62c:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c000a630:	83 c4 4c             	add    esp,0x4c
c000a633:	c3                   	ret    
c000a634:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000a636:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a63c:	74 07                	je     c000a645 <VAS::tryLoadBackOffDisk(unsigned long)+0x7b>
c000a63e:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000a643:	eb d6                	jmp    c000a61b <VAS::tryLoadBackOffDisk(unsigned long)+0x51>
c000a645:	e8 c2 d7 ff ff       	call   c0007e0c <Phys::allocatePage()>
c000a64a:	8b 16                	mov    edx,DWORD PTR [esi]
c000a64c:	c1 ed 0b             	shr    ebp,0xb
c000a64f:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a655:	09 c2                	or     edx,eax
c000a657:	81 ca 01 08 00 00    	or     edx,0x801
c000a65d:	89 16                	mov    DWORD PTR [esi],edx
c000a65f:	8b 35 0c 24 02 c0    	mov    esi,DWORD PTR ds:0xc002240c
c000a665:	85 f6                	test   esi,esi
c000a667:	7e 4a                	jle    c000a6b3 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c000a669:	89 df                	mov    edi,ebx
c000a66b:	31 f6                	xor    esi,esi
c000a66d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a670:	e8 e4 f0 ff ff       	call   c0009759 <Virt::swapIDToSector(unsigned long)>
c000a675:	31 c9                	xor    ecx,ecx
c000a677:	ba 01 00 00 00       	mov    edx,0x1
c000a67c:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c000a680:	81 c7 00 02 00 00    	add    edi,0x200
c000a686:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a68a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a68e:	01 f0                	add    eax,esi
c000a690:	46                   	inc    esi
c000a691:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a695:	0f be 05 18 24 02 c0 	movsx  eax,BYTE PTR ds:0xc0022418
c000a69c:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a6a3:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6a6:	e8 7b 31 00 00       	call   c000d826 <LogicalDisk::read(unsigned long long, int, void*)>
c000a6ab:	39 35 0c 24 02 c0    	cmp    DWORD PTR ds:0xc002240c,esi
c000a6b1:	7f ba                	jg     c000a66d <VAS::tryLoadBackOffDisk(unsigned long)+0xa3>
c000a6b3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a6b7:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a6bc:	c7 04 24 05 04 02 c0 	mov    DWORD PTR [esp],0xc0020405
c000a6c3:	48                   	dec    eax
c000a6c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6c8:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a6cd:	e8 a4 03 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a6d2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a6d5:	e8 61 f0 ff ff       	call   c000973b <Virt::freeSwapfilePage(unsigned long)>
c000a6da:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a6df:	48                   	dec    eax
c000a6e0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a6e5:	75 01                	jne    c000a6e8 <VAS::tryLoadBackOffDisk(unsigned long)+0x11e>
c000a6e7:	fb                   	sti    
c000a6e8:	0f 20 d8             	mov    eax,cr3
c000a6eb:	0f 22 d8             	mov    cr3,eax
c000a6ee:	e9 28 ff ff ff       	jmp    c000a61b <VAS::tryLoadBackOffDisk(unsigned long)+0x51>
c000a6f3:	90                   	nop

c000a6f4 <VAS::scanForEviction()>:
c000a6f4:	57                   	push   edi
c000a6f5:	31 ff                	xor    edi,edi
c000a6f7:	56                   	push   esi
c000a6f8:	53                   	push   ebx
c000a6f9:	83 ec 20             	sub    esp,0x20
c000a6fc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000a700:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a703:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a709:	75 0e                	jne    c000a719 <VAS::scanForEviction()+0x25>
c000a70b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a70e:	89 da                	mov    edx,ebx
c000a710:	c1 ea 16             	shr    edx,0x16
c000a713:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a717:	74 51                	je     c000a76a <VAS::scanForEviction()+0x76>
c000a719:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a71d:	89 34 24             	mov    DWORD PTR [esp],esi
c000a720:	e8 f5 f1 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a725:	8b 10                	mov    edx,DWORD PTR [eax]
c000a727:	89 d1                	mov    ecx,edx
c000a729:	81 e1 01 08 00 00    	and    ecx,0x801
c000a72f:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a735:	74 3e                	je     c000a775 <VAS::scanForEviction()+0x81>
c000a737:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a73d:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a743:	76 2b                	jbe    c000a770 <VAS::scanForEviction()+0x7c>
c000a745:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a74c:	47                   	inc    edi
c000a74d:	83 ff 03             	cmp    edi,0x3
c000a750:	74 32                	je     c000a784 <VAS::scanForEviction()+0x90>
c000a752:	31 db                	xor    ebx,ebx
c000a754:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a75a:	75 bd                	jne    c000a719 <VAS::scanForEviction()+0x25>
c000a75c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a75f:	89 da                	mov    edx,ebx
c000a761:	c1 ea 16             	shr    edx,0x16
c000a764:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a768:	75 af                	jne    c000a719 <VAS::scanForEviction()+0x25>
c000a76a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a770:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a773:	eb 8e                	jmp    c000a703 <VAS::scanForEviction()+0xf>
c000a775:	f6 c2 20             	test   dl,0x20
c000a778:	74 13                	je     c000a78d <VAS::scanForEviction()+0x99>
c000a77a:	83 e2 df             	and    edx,0xffffffdf
c000a77d:	89 10                	mov    DWORD PTR [eax],edx
c000a77f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a782:	eb b3                	jmp    c000a737 <VAS::scanForEviction()+0x43>
c000a784:	83 c4 20             	add    esp,0x20
c000a787:	31 c0                	xor    eax,eax
c000a789:	5b                   	pop    ebx
c000a78a:	5e                   	pop    esi
c000a78b:	5f                   	pop    edi
c000a78c:	c3                   	ret    
c000a78d:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a791:	89 d0                	mov    eax,edx
c000a793:	c7 04 24 1a 04 02 c0 	mov    DWORD PTR [esp],0xc002041a
c000a79a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a79f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a7a3:	e8 ce 02 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a7a8:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000a7ab:	89 34 24             	mov    DWORD PTR [esp],esi
c000a7ae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a7b2:	e8 43 fd ff ff       	call   c000a4fa <VAS::evict(unsigned long)>
c000a7b7:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000a7ba:	c7 04 24 2e 04 02 c0 	mov    DWORD PTR [esp],0xc002042e
c000a7c1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a7c5:	e8 ac 02 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a7ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7ce:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a7d5:	83 c4 20             	add    esp,0x20
c000a7d8:	5b                   	pop    ebx
c000a7d9:	5e                   	pop    esi
c000a7da:	5f                   	pop    edi
c000a7db:	c3                   	ret    

c000a7dc <mapVASFirstTime>:
c000a7dc:	55                   	push   ebp
c000a7dd:	57                   	push   edi
c000a7de:	56                   	push   esi
c000a7df:	53                   	push   ebx
c000a7e0:	83 ec 2c             	sub    esp,0x2c
c000a7e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a7e8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a7eb:	4a                   	dec    edx
c000a7ec:	0f 84 06 01 00 00    	je     c000a8f8 <mapVASFirstTime+0x11c>
c000a7f2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a7f5:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a7fa:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a7ff:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a802:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a808:	c1 e5 15             	shl    ebp,0x15
c000a80b:	29 eb                	sub    ebx,ebp
c000a80d:	29 ef                	sub    edi,ebp
c000a80f:	e8 f8 d5 ff ff       	call   c0007e0c <Phys::allocatePage()>
c000a814:	b9 03 04 00 00       	mov    ecx,0x403
c000a819:	ba 01 00 00 00       	mov    edx,0x1
c000a81e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a822:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a828:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000a82c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a830:	89 34 24             	mov    DWORD PTR [esp],esi
c000a833:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a837:	e8 46 f8 ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a83c:	39 fb                	cmp    ebx,edi
c000a83e:	75 cf                	jne    c000a80f <mapVASFirstTime+0x33>
c000a840:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a845:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a84a:	29 eb                	sub    ebx,ebp
c000a84c:	29 ef                	sub    edi,ebp
c000a84e:	e8 b9 d5 ff ff       	call   c0007e0c <Phys::allocatePage()>
c000a853:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a857:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a85b:	89 34 24             	mov    DWORD PTR [esp],esi
c000a85e:	19 d2                	sbb    edx,edx
c000a860:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a866:	83 e2 04             	and    edx,0x4
c000a869:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a86d:	81 c2 03 04 00 00    	add    edx,0x403
c000a873:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a877:	ba 01 00 00 00       	mov    edx,0x1
c000a87c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a880:	e8 fd f7 ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a885:	39 df                	cmp    edi,ebx
c000a887:	75 c5                	jne    c000a84e <mapVASFirstTime+0x72>
c000a889:	bb 8c 40 02 c0       	mov    ebx,0xc002408c
c000a88e:	ba ff ff ff ff       	mov    edx,0xffffffff
c000a893:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a899:	b9 00 30 02 c0       	mov    ecx,0xc0023000
c000a89e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8a2:	c1 eb 0c             	shr    ebx,0xc
c000a8a5:	b8 04 00 00 00       	mov    eax,0x4
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	bf ff ff ff ff       	mov    edi,0xffffffff
c000a8b3:	bd 00 30 02 c0       	mov    ebp,0xc0023000
c000a8b8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a8bc:	89 34 24             	mov    DWORD PTR [esp],esi
c000a8bf:	be 04 00 00 00       	mov    esi,0x4
c000a8c4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a8c8:	e8 c9 f1 ff ff       	call   c0009a96 <VAS::reflagRange(unsigned long, int, int, int)>
c000a8cd:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a8d2:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000a8d6:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a8da:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a8de:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000a8e2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8e5:	e8 ac f1 ff ff       	call   c0009a96 <VAS::reflagRange(unsigned long, int, int, int)>
c000a8ea:	0f 20 d8             	mov    eax,cr3
c000a8ed:	0f 22 d8             	mov    cr3,eax
c000a8f0:	83 c4 2c             	add    esp,0x2c
c000a8f3:	5b                   	pop    ebx
c000a8f4:	5e                   	pop    esi
c000a8f5:	5f                   	pop    edi
c000a8f6:	5d                   	pop    ebp
c000a8f7:	c3                   	ret    
c000a8f8:	c7 04 24 41 04 02 c0 	mov    DWORD PTR [esp],0xc0020441
c000a8ff:	e8 72 01 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a904:	83 c4 2c             	add    esp,0x2c
c000a907:	5b                   	pop    ebx
c000a908:	5e                   	pop    esi
c000a909:	5f                   	pop    edi
c000a90a:	5d                   	pop    ebp
c000a90b:	c3                   	ret    

c000a90c <__cxa_atexit>:
c000a90c:	31 c0                	xor    eax,eax
c000a90e:	c3                   	ret    

c000a90f <__cxa_finalize>:
c000a90f:	c3                   	ret    

c000a910 <__stack_chk_fail>:
c000a910:	55                   	push   ebp
c000a911:	89 e5                	mov    ebp,esp
c000a913:	83 ec 10             	sub    esp,0x10
c000a916:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a919:	68 5a 04 02 c0       	push   0xc002045a
c000a91e:	e8 53 01 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a923:	58                   	pop    eax
c000a924:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a927:	5a                   	pop    edx
c000a928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a92b:	68 5a 04 02 c0       	push   0xc002045a
c000a930:	e8 41 01 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a935:	c7 04 24 62 04 02 c0 	mov    DWORD PTR [esp],0xc0020462
c000a93c:	e8 f4 64 00 00       	call   c0010e35 <KePanic(char const*)>
c000a941:	83 c4 10             	add    esp,0x10
c000a944:	c9                   	leave  
c000a945:	c3                   	ret    

c000a946 <__cxa_pure_virtual>:
c000a946:	83 ec 18             	sub    esp,0x18
c000a949:	68 7a 04 02 c0       	push   0xc002047a
c000a94e:	e8 e2 64 00 00       	call   c0010e35 <KePanic(char const*)>
c000a953:	83 c4 1c             	add    esp,0x1c
c000a956:	c3                   	ret    

c000a957 <operator new[](unsigned long)>:
c000a957:	e9 a0 d1 ff ff       	jmp    c0007afc <malloc>

c000a95c <operator delete(void*, unsigned long)>:
c000a95c:	e9 c1 d1 ff ff       	jmp    c0007b22 <rfree>

c000a961 <operator delete[](void*)>:
c000a961:	e9 bc d1 ff ff       	jmp    c0007b22 <rfree>

c000a966 <operator delete[](void*, unsigned long)>:
c000a966:	e9 b7 d1 ff ff       	jmp    c0007b22 <rfree>

c000a96b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a96b:	55                   	push   ebp
c000a96c:	b8 30 31 32 33       	mov    eax,0x33323130
c000a971:	57                   	push   edi
c000a972:	ba 34 35 36 37       	mov    edx,0x37363534
c000a977:	56                   	push   esi
c000a978:	bf 43 44 45 46       	mov    edi,0x46454443
c000a97d:	53                   	push   ebx
c000a97e:	bb 38 39 41 42       	mov    ebx,0x42413938
c000a983:	83 ec 20             	sub    esp,0x20
c000a986:	89 5c 24 17          	mov    DWORD PTR [esp+0x17],ebx
c000a98a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a98e:	89 7c 24 1b          	mov    DWORD PTR [esp+0x1b],edi
c000a992:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a996:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a99a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a99e:	89 54 24 13          	mov    DWORD PTR [esp+0x13],edx
c000a9a2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a9a7:	89 f7                	mov    edi,esi
c000a9a9:	89 eb                	mov    ebx,ebp
c000a9ab:	eb 02                	jmp    c000a9af <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x44>
c000a9ad:	89 c7                	mov    edi,eax
c000a9af:	31 d2                	xor    edx,edx
c000a9b1:	89 f8                	mov    eax,edi
c000a9b3:	f7 f1                	div    ecx
c000a9b5:	43                   	inc    ebx
c000a9b6:	39 cf                	cmp    edi,ecx
c000a9b8:	73 f3                	jae    c000a9ad <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000a9ba:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a9bd:	eb 02                	jmp    c000a9c1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x56>
c000a9bf:	89 c6                	mov    esi,eax
c000a9c1:	31 d2                	xor    edx,edx
c000a9c3:	89 f0                	mov    eax,esi
c000a9c5:	f7 f1                	div    ecx
c000a9c7:	4b                   	dec    ebx
c000a9c8:	39 ce                	cmp    esi,ecx
c000a9ca:	0f b6 54 14 0f       	movzx  edx,BYTE PTR [esp+edx*1+0xf]
c000a9cf:	88 13                	mov    BYTE PTR [ebx],dl
c000a9d1:	73 ec                	jae    c000a9bf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a9d3:	83 c4 20             	add    esp,0x20
c000a9d6:	89 e8                	mov    eax,ebp
c000a9d8:	5b                   	pop    ebx
c000a9d9:	5e                   	pop    esi
c000a9da:	5f                   	pop    edi
c000a9db:	5d                   	pop    ebp
c000a9dc:	c3                   	ret    

c000a9dd <Dbg::logc(char)>:
c000a9dd:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a9e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e8:	75 12                	jne    c000a9fc <Dbg::logc(char)+0x1f>
c000a9ea:	ba fd 03 00 00       	mov    edx,0x3fd
c000a9ef:	ec                   	in     al,dx
c000a9f0:	24 20                	and    al,0x20
c000a9f2:	74 fb                	je     c000a9ef <Dbg::logc(char)+0x12>
c000a9f4:	ba f8 03 00 00       	mov    edx,0x3f8
c000a9f9:	88 c8                	mov    al,cl
c000a9fb:	ee                   	out    dx,al
c000a9fc:	c3                   	ret    

c000a9fd <Dbg::logs(char*)>:
c000a9fd:	53                   	push   ebx
c000a9fe:	83 ec 04             	sub    esp,0x4
c000aa01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aa05:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000aa08:	84 c0                	test   al,al
c000aa0a:	74 10                	je     c000aa1c <Dbg::logs(char*)+0x1f>
c000aa0c:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa0f:	43                   	inc    ebx
c000aa10:	e8 c8 ff ff ff       	call   c000a9dd <Dbg::logc(char)>
c000aa15:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000aa18:	84 c0                	test   al,al
c000aa1a:	75 f0                	jne    c000aa0c <Dbg::logs(char*)+0xf>
c000aa1c:	58                   	pop    eax
c000aa1d:	5b                   	pop    ebx
c000aa1e:	c3                   	ret    

c000aa1f <Dbg::logWriteInt(unsigned int)>:
c000aa1f:	83 ec 1c             	sub    esp,0x1c
c000aa22:	b8 0a 00 00 00       	mov    eax,0xa
c000aa27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa2b:	8d 44 24 10          	lea    eax,[esp+0x10]
c000aa2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa37:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa3a:	e8 2c ff ff ff       	call   c000a96b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000aa3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa42:	e8 b6 ff ff ff       	call   c000a9fd <Dbg::logs(char*)>
c000aa47:	83 c4 1c             	add    esp,0x1c
c000aa4a:	c3                   	ret    

c000aa4b <Dbg::logWriteIntBase(unsigned int, int)>:
c000aa4b:	83 ec 1c             	sub    esp,0x1c
c000aa4e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa56:	8d 44 24 10          	lea    eax,[esp+0x10]
c000aa5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa62:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa65:	e8 01 ff ff ff       	call   c000a96b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000aa6a:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa6d:	e8 8b ff ff ff       	call   c000a9fd <Dbg::logs(char*)>
c000aa72:	83 c4 1c             	add    esp,0x1c
c000aa75:	c3                   	ret    

c000aa76 <Dbg::kprintf(char const*, ...)>:
c000aa76:	55                   	push   ebp
c000aa77:	57                   	push   edi
c000aa78:	56                   	push   esi
c000aa79:	53                   	push   ebx
c000aa7a:	83 ec 14             	sub    esp,0x14
c000aa7d:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000aa84:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000aa88:	74 08                	je     c000aa92 <Dbg::kprintf(char const*, ...)+0x1c>
c000aa8a:	83 c4 14             	add    esp,0x14
c000aa8d:	5b                   	pop    ebx
c000aa8e:	5e                   	pop    esi
c000aa8f:	5f                   	pop    edi
c000aa90:	5d                   	pop    ebp
c000aa91:	c3                   	ret    
c000aa92:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000aa96:	31 db                	xor    ebx,ebx
c000aa98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000aa9f:	84 c0                	test   al,al
c000aaa1:	74 e7                	je     c000aa8a <Dbg::kprintf(char const*, ...)+0x14>
c000aaa3:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000aaa6:	3c 25                	cmp    al,0x25
c000aaa8:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000aaab:	75 46                	jne    c000aaf3 <Dbg::kprintf(char const*, ...)+0x7d>
c000aaad:	0f b6 07             	movzx  eax,BYTE PTR [edi]
c000aab0:	83 c3 02             	add    ebx,0x2
c000aab3:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000aab6:	2c 25                	sub    al,0x25
c000aab8:	3c 53                	cmp    al,0x53
c000aaba:	0f 87 e8 00 00 00    	ja     c000aba8 <Dbg::kprintf(char const*, ...)+0x132>
c000aac0:	0f b6 c0             	movzx  eax,al
c000aac3:	ff 24 85 90 04 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfb70]
c000aaca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000aace:	89 c8                	mov    eax,ecx
c000aad0:	83 c1 04             	add    ecx,0x4
c000aad3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000aad7:	8b 00                	mov    eax,DWORD PTR [eax]
c000aad9:	89 04 24             	mov    DWORD PTR [esp],eax
c000aadc:	e8 3e ff ff ff       	call   c000aa1f <Dbg::logWriteInt(unsigned int)>
c000aae1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aae5:	84 c0                	test   al,al
c000aae7:	74 a1                	je     c000aa8a <Dbg::kprintf(char const*, ...)+0x14>
c000aae9:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000aaec:	3c 25                	cmp    al,0x25
c000aaee:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000aaf1:	74 ba                	je     c000aaad <Dbg::kprintf(char const*, ...)+0x37>
c000aaf3:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf6:	89 eb                	mov    ebx,ebp
c000aaf8:	89 fd                	mov    ebp,edi
c000aafa:	e8 de fe ff ff       	call   c000a9dd <Dbg::logc(char)>
c000aaff:	eb e0                	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab01:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ab05:	89 c8                	mov    eax,ecx
c000ab07:	83 c1 04             	add    ecx,0x4
c000ab0a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ab0e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab10:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab13:	e8 e5 fe ff ff       	call   c000a9fd <Dbg::logs(char*)>
c000ab18:	eb c7                	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab1e:	89 d0                	mov    eax,edx
c000ab20:	83 c2 04             	add    edx,0x4
c000ab23:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab27:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab29:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2c:	e8 ee fe ff ff       	call   c000aa1f <Dbg::logWriteInt(unsigned int)>
c000ab31:	eb ae                	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab37:	89 d0                	mov    eax,edx
c000ab39:	83 c2 04             	add    edx,0x4
c000ab3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab40:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000ab43:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab46:	e8 92 fe ff ff       	call   c000a9dd <Dbg::logc(char)>
c000ab4b:	eb 94                	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ab51:	89 c8                	mov    eax,ecx
c000ab53:	83 c1 04             	add    ecx,0x4
c000ab56:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ab5a:	b9 10 00 00 00       	mov    ecx,0x10
c000ab5f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ab63:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab65:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab68:	e8 de fe ff ff       	call   c000aa4b <Dbg::logWriteIntBase(unsigned int, int)>
c000ab6d:	e9 6f ff ff ff       	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab76:	89 d0                	mov    eax,edx
c000ab78:	83 c2 08             	add    edx,0x8
c000ab7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab7f:	ba 10 00 00 00       	mov    edx,0x10
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab8a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab8d:	e8 b9 fe ff ff       	call   c000aa4b <Dbg::logWriteIntBase(unsigned int, int)>
c000ab92:	e9 4a ff ff ff       	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab97:	c7 04 24 25 00 00 00 	mov    DWORD PTR [esp],0x25
c000ab9e:	e8 3a fe ff ff       	call   c000a9dd <Dbg::logc(char)>
c000aba3:	e9 39 ff ff ff       	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000aba8:	c7 04 24 25 00 00 00 	mov    DWORD PTR [esp],0x25
c000abaf:	e8 29 fe ff ff       	call   c000a9dd <Dbg::logc(char)>
c000abb4:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000abb7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abba:	e8 1e fe ff ff       	call   c000a9dd <Dbg::logc(char)>
c000abbf:	e9 1d ff ff ff       	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>

c000abc4 <File::read(unsigned long long, void*, int*)>:
c000abc4:	53                   	push   ebx
c000abc5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abc9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000abcd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000abd4:	3c 19                	cmp    al,0x19
c000abd6:	77 35                	ja     c000ac0d <File::read(unsigned long long, void*, int*)+0x49>
c000abd8:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000abdf:	85 c0                	test   eax,eax
c000abe1:	74 2a                	je     c000ac0d <File::read(unsigned long long, void*, int*)+0x49>
c000abe3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000abe9:	85 c0                	test   eax,eax
c000abeb:	74 20                	je     c000ac0d <File::read(unsigned long long, void*, int*)+0x49>
c000abed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000abf1:	74 21                	je     c000ac14 <File::read(unsigned long long, void*, int*)+0x50>
c000abf3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000abf5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abf9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000abff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac03:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac07:	5b                   	pop    ebx
c000ac08:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ac0b:	ff e0                	jmp    eax
c000ac0d:	b8 0b 00 00 00       	mov    eax,0xb
c000ac12:	eb 05                	jmp    c000ac19 <File::read(unsigned long long, void*, int*)+0x55>
c000ac14:	b8 05 00 00 00       	mov    eax,0x5
c000ac19:	5b                   	pop    ebx
c000ac1a:	c3                   	ret    
c000ac1b:	90                   	nop

c000ac1c <File::write(unsigned long long, void*, int*)>:
c000ac1c:	53                   	push   ebx
c000ac1d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac21:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ac25:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ac2c:	3c 19                	cmp    al,0x19
c000ac2e:	77 35                	ja     c000ac65 <File::write(unsigned long long, void*, int*)+0x49>
c000ac30:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ac37:	85 c0                	test   eax,eax
c000ac39:	74 2a                	je     c000ac65 <File::write(unsigned long long, void*, int*)+0x49>
c000ac3b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac41:	85 c0                	test   eax,eax
c000ac43:	74 20                	je     c000ac65 <File::write(unsigned long long, void*, int*)+0x49>
c000ac45:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ac49:	74 21                	je     c000ac6c <File::write(unsigned long long, void*, int*)+0x50>
c000ac4b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ac4d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ac51:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ac57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac5b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac5f:	5b                   	pop    ebx
c000ac60:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ac63:	ff e0                	jmp    eax
c000ac65:	b8 0b 00 00 00       	mov    eax,0xb
c000ac6a:	eb 05                	jmp    c000ac71 <File::write(unsigned long long, void*, int*)+0x55>
c000ac6c:	b8 05 00 00 00       	mov    eax,0x5
c000ac71:	5b                   	pop    ebx
c000ac72:	c3                   	ret    
c000ac73:	90                   	nop

c000ac74 <Directory::read(unsigned long long, void*, int*)>:
c000ac74:	53                   	push   ebx
c000ac75:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac79:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ac7d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ac84:	3c 19                	cmp    al,0x19
c000ac86:	77 35                	ja     c000acbd <Directory::read(unsigned long long, void*, int*)+0x49>
c000ac88:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ac8f:	85 c0                	test   eax,eax
c000ac91:	74 2a                	je     c000acbd <Directory::read(unsigned long long, void*, int*)+0x49>
c000ac93:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac99:	85 c0                	test   eax,eax
c000ac9b:	74 20                	je     c000acbd <Directory::read(unsigned long long, void*, int*)+0x49>
c000ac9d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aca1:	74 21                	je     c000acc4 <Directory::read(unsigned long long, void*, int*)+0x50>
c000aca3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aca5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aca9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000acaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acb7:	5b                   	pop    ebx
c000acb8:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000acbb:	ff e0                	jmp    eax
c000acbd:	b8 0b 00 00 00       	mov    eax,0xb
c000acc2:	eb 05                	jmp    c000acc9 <Directory::read(unsigned long long, void*, int*)+0x55>
c000acc4:	b8 05 00 00 00       	mov    eax,0x5
c000acc9:	5b                   	pop    ebx
c000acca:	c3                   	ret    
c000accb:	90                   	nop

c000accc <Directory::write(unsigned long long, void*, int*)>:
c000accc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acd0:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000acd7:	b8 0b 00 00 00       	mov    eax,0xb
c000acdc:	80 fa 19             	cmp    dl,0x19
c000acdf:	77 18                	ja     c000acf9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ace1:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000ace8:	85 d2                	test   edx,edx
c000acea:	74 0d                	je     c000acf9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000acec:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000acf3:	19 c0                	sbb    eax,eax
c000acf5:	83 e0 0a             	and    eax,0xa
c000acf8:	40                   	inc    eax
c000acf9:	c3                   	ret    

c000acfa <File::isAtty()>:
c000acfa:	31 c0                	xor    eax,eax
c000acfc:	c3                   	ret    
c000acfd:	90                   	nop

c000acfe <Directory::isAtty()>:
c000acfe:	31 c0                	xor    eax,eax
c000ad00:	c3                   	ret    
c000ad01:	90                   	nop

c000ad02 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ad02:	b8 0a 00 00 00       	mov    eax,0xa
c000ad07:	c3                   	ret    

c000ad08 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ad08:	b8 0a 00 00 00       	mov    eax,0xa
c000ad0d:	c3                   	ret    

c000ad0e <Filesystem::allocateSwapfile(char const*, int)>:
c000ad0e:	31 c0                	xor    eax,eax
c000ad10:	31 d2                	xor    edx,edx
c000ad12:	c3                   	ret    
c000ad13:	90                   	nop

c000ad14 <File::~File()>:
c000ad14:	83 ec 1c             	sub    esp,0x1c
c000ad17:	ba 50 06 02 c0       	mov    edx,0xc0020650
c000ad1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad20:	89 10                	mov    DWORD PTR [eax],edx
c000ad22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad26:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad29:	e8 96 e6 ff ff       	call   c00093c4 <UnixFile::~UnixFile()>
c000ad2e:	90                   	nop
c000ad2f:	83 c4 1c             	add    esp,0x1c
c000ad32:	c3                   	ret    
c000ad33:	90                   	nop

c000ad34 <File::~File()>:
c000ad34:	83 ec 1c             	sub    esp,0x1c
c000ad37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad3b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad3e:	e8 d1 ff ff ff       	call   c000ad14 <File::~File()>
c000ad43:	c7 44 24 04 14 01 00 00 	mov    DWORD PTR [esp+0x4],0x114
c000ad4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad52:	e8 05 fc ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000ad57:	83 c4 1c             	add    esp,0x1c
c000ad5a:	c3                   	ret    
c000ad5b:	90                   	nop

c000ad5c <Directory::~Directory()>:
c000ad5c:	83 ec 1c             	sub    esp,0x1c
c000ad5f:	ba 6c 06 02 c0       	mov    edx,0xc002066c
c000ad64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad68:	89 10                	mov    DWORD PTR [eax],edx
c000ad6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad6e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad71:	e8 4e e6 ff ff       	call   c00093c4 <UnixFile::~UnixFile()>
c000ad76:	90                   	nop
c000ad77:	83 c4 1c             	add    esp,0x1c
c000ad7a:	c3                   	ret    
c000ad7b:	90                   	nop

c000ad7c <Directory::~Directory()>:
c000ad7c:	83 ec 1c             	sub    esp,0x1c
c000ad7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad83:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad86:	e8 d1 ff ff ff       	call   c000ad5c <Directory::~Directory()>
c000ad8b:	c7 44 24 04 14 01 00 00 	mov    DWORD PTR [esp+0x4],0x114
c000ad93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad97:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad9a:	e8 bd fb ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000ad9f:	83 c4 1c             	add    esp,0x1c
c000ada2:	c3                   	ret    
c000ada3:	90                   	nop

c000ada4 <Filesystem::Filesystem()>:
c000ada4:	ba e8 05 02 c0       	mov    edx,0xc00205e8
c000ada9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000adad:	89 10                	mov    DWORD PTR [eax],edx
c000adaf:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000adb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000adb9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000adbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000adc0:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000adc5:	90                   	nop
c000adc6:	c3                   	ret    
c000adc7:	90                   	nop

c000adc8 <Filesystem::~Filesystem()>:
c000adc8:	ba e8 05 02 c0       	mov    edx,0xc00205e8
c000adcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000add1:	89 10                	mov    DWORD PTR [eax],edx
c000add3:	90                   	nop
c000add4:	c3                   	ret    
c000add5:	90                   	nop

c000add6 <Filesystem::~Filesystem()>:
c000add6:	83 ec 1c             	sub    esp,0x1c
c000add9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000addd:	89 04 24             	mov    DWORD PTR [esp],eax
c000ade0:	e8 e3 ff ff ff       	call   c000adc8 <Filesystem::~Filesystem()>
c000ade5:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c000aded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000adf1:	89 04 24             	mov    DWORD PTR [esp],eax
c000adf4:	e8 63 fb ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000adf9:	83 c4 1c             	add    esp,0x1c
c000adfc:	c3                   	ret    

c000adfd <Fs::getcwd(Process*, char*, int)>:
c000adfd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ae01:	31 c0                	xor    eax,eax
c000ae03:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ae07:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ae0a:	7d 15                	jge    c000ae21 <Fs::getcwd(Process*, char*, int)+0x24>
c000ae0c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ae10:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ae17:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ae1a:	84 c9                	test   cl,cl
c000ae1c:	74 06                	je     c000ae24 <Fs::getcwd(Process*, char*, int)+0x27>
c000ae1e:	40                   	inc    eax
c000ae1f:	eb e2                	jmp    c000ae03 <Fs::getcwd(Process*, char*, int)+0x6>
c000ae21:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ae24:	31 c0                	xor    eax,eax
c000ae26:	c3                   	ret    

c000ae27 <Fs::initVFS()>:
c000ae27:	83 ec 18             	sub    esp,0x18
c000ae2a:	6a 08                	push   0x8
c000ae2c:	e8 cb cc ff ff       	call   c0007afc <malloc>
c000ae31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae34:	e8 47 e2 00 00       	call   c0019080 <FAT::FAT()>
c000ae39:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ae40:	e8 b7 cc ff ff       	call   c0007afc <malloc>
c000ae45:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae48:	e8 97 f0 00 00       	call   c0019ee4 <ISO9660::ISO9660()>
c000ae4d:	83 c4 1c             	add    esp,0x1c
c000ae50:	c3                   	ret    

c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ae51:	55                   	push   ebp
c000ae52:	57                   	push   edi
c000ae53:	56                   	push   esi
c000ae54:	53                   	push   ebx
c000ae55:	81 ec 10 04 00 00    	sub    esp,0x410
c000ae5b:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ae62:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ae69:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ae70:	68 00 04 00 00       	push   0x400
c000ae75:	6a 00                	push   0x0
c000ae77:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ae7b:	56                   	push   esi
c000ae7c:	e8 ff 56 ff ff       	call   c0000580 <memset>
c000ae81:	83 c4 10             	add    esp,0x10
c000ae84:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ae88:	75 0b                	jne    c000ae95 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ae8a:	50                   	push   eax
c000ae8b:	50                   	push   eax
c000ae8c:	57                   	push   edi
c000ae8d:	56                   	push   esi
c000ae8e:	e8 8d 58 ff ff       	call   c0000720 <strcpy>
c000ae93:	eb 40                	jmp    c000aed5 <Fs::standardiseFiles(char*, char const*, char const*)+0x84>
c000ae95:	8a 07                	mov    al,BYTE PTR [edi]
c000ae97:	3c 2f                	cmp    al,0x2f
c000ae99:	74 04                	je     c000ae9f <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000ae9b:	3c 5c                	cmp    al,0x5c
c000ae9d:	75 17                	jne    c000aeb6 <Fs::standardiseFiles(char*, char const*, char const*)+0x65>
c000ae9f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aea2:	3c 60                	cmp    al,0x60
c000aea4:	7e 02                	jle    c000aea8 <Fs::standardiseFiles(char*, char const*, char const*)+0x57>
c000aea6:	2c 20                	sub    al,0x20
c000aea8:	88 04 24             	mov    BYTE PTR [esp],al
c000aeab:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aeb2:	50                   	push   eax
c000aeb3:	50                   	push   eax
c000aeb4:	eb 18                	jmp    c000aece <Fs::standardiseFiles(char*, char const*, char const*)+0x7d>
c000aeb6:	50                   	push   eax
c000aeb7:	50                   	push   eax
c000aeb8:	55                   	push   ebp
c000aeb9:	56                   	push   esi
c000aeba:	e8 61 58 ff ff       	call   c0000720 <strcpy>
c000aebf:	5a                   	pop    edx
c000aec0:	59                   	pop    ecx
c000aec1:	68 bb 16 02 c0       	push   0xc00216bb
c000aec6:	56                   	push   esi
c000aec7:	e8 64 5a ff ff       	call   c0000930 <strcat>
c000aecc:	5d                   	pop    ebp
c000aecd:	58                   	pop    eax
c000aece:	57                   	push   edi
c000aecf:	56                   	push   esi
c000aed0:	e8 5b 5a ff ff       	call   c0000930 <strcat>
c000aed5:	83 c4 10             	add    esp,0x10
c000aed8:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aedb:	3c 60                	cmp    al,0x60
c000aedd:	7e 02                	jle    c000aee1 <Fs::standardiseFiles(char*, char const*, char const*)+0x90>
c000aedf:	2c 20                	sub    al,0x20
c000aee1:	88 04 24             	mov    BYTE PTR [esp],al
c000aee4:	bf 03 00 00 00       	mov    edi,0x3
c000aee9:	88 03                	mov    BYTE PTR [ebx],al
c000aeeb:	b8 03 00 00 00       	mov    eax,0x3
c000aef0:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aef7:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aefd:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000af01:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000af04:	84 d2                	test   dl,dl
c000af06:	0f 84 91 00 00 00    	je     c000af9d <Fs::standardiseFiles(char*, char const*, char const*)+0x14c>
c000af0c:	8d 4f 01             	lea    ecx,[edi+0x1]
c000af0f:	80 fa 2f             	cmp    dl,0x2f
c000af12:	74 05                	je     c000af19 <Fs::standardiseFiles(char*, char const*, char const*)+0xc8>
c000af14:	80 fa 5c             	cmp    dl,0x5c
c000af17:	75 12                	jne    c000af2b <Fs::standardiseFiles(char*, char const*, char const*)+0xda>
c000af19:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000af1e:	89 c5                	mov    ebp,eax
c000af20:	74 09                	je     c000af2b <Fs::standardiseFiles(char*, char const*, char const*)+0xda>
c000af22:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000af26:	40                   	inc    eax
c000af27:	89 cf                	mov    edi,ecx
c000af29:	eb d6                	jmp    c000af01 <Fs::standardiseFiles(char*, char const*, char const*)+0xb0>
c000af2b:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000af30:	75 5b                	jne    c000af8d <Fs::standardiseFiles(char*, char const*, char const*)+0x13c>
c000af32:	80 fa 2e             	cmp    dl,0x2e
c000af35:	75 56                	jne    c000af8d <Fs::standardiseFiles(char*, char const*, char const*)+0x13c>
c000af37:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000af3b:	74 19                	je     c000af56 <Fs::standardiseFiles(char*, char const*, char const*)+0x105>
c000af3d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000af42:	74 53                	je     c000af97 <Fs::standardiseFiles(char*, char const*, char const*)+0x146>
c000af44:	89 f9                	mov    ecx,edi
c000af46:	41                   	inc    ecx
c000af47:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000af4a:	80 fa 2f             	cmp    dl,0x2f
c000af4d:	74 f7                	je     c000af46 <Fs::standardiseFiles(char*, char const*, char const*)+0xf5>
c000af4f:	80 fa 5c             	cmp    dl,0x5c
c000af52:	74 f2                	je     c000af46 <Fs::standardiseFiles(char*, char const*, char const*)+0xf5>
c000af54:	eb d1                	jmp    c000af27 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af56:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000af5b:	74 3a                	je     c000af97 <Fs::standardiseFiles(char*, char const*, char const*)+0x146>
c000af5d:	83 f8 03             	cmp    eax,0x3
c000af60:	74 c5                	je     c000af27 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af62:	41                   	inc    ecx
c000af63:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000af66:	80 fa 2f             	cmp    dl,0x2f
c000af69:	74 f7                	je     c000af62 <Fs::standardiseFiles(char*, char const*, char const*)+0x111>
c000af6b:	80 fa 5c             	cmp    dl,0x5c
c000af6e:	74 f2                	je     c000af62 <Fs::standardiseFiles(char*, char const*, char const*)+0x111>
c000af70:	48                   	dec    eax
c000af71:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000af75:	75 06                	jne    c000af7d <Fs::standardiseFiles(char*, char const*, char const*)+0x12c>
c000af77:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000af7b:	eb f3                	jmp    c000af70 <Fs::standardiseFiles(char*, char const*, char const*)+0x11f>
c000af7d:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000af81:	74 07                	je     c000af8a <Fs::standardiseFiles(char*, char const*, char const*)+0x139>
c000af83:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000af87:	48                   	dec    eax
c000af88:	eb f3                	jmp    c000af7d <Fs::standardiseFiles(char*, char const*, char const*)+0x12c>
c000af8a:	40                   	inc    eax
c000af8b:	eb 9a                	jmp    c000af27 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af8d:	80 fa 2f             	cmp    dl,0x2f
c000af90:	74 95                	je     c000af27 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af92:	80 fa 5c             	cmp    dl,0x5c
c000af95:	74 90                	je     c000af27 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af97:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000af9a:	40                   	inc    eax
c000af9b:	eb 8a                	jmp    c000af27 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af9d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000afa1:	83 ec 0c             	sub    esp,0xc
c000afa4:	53                   	push   ebx
c000afa5:	e8 76 56 ff ff       	call   c0000620 <strlen>
c000afaa:	83 c4 10             	add    esp,0x10
c000afad:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000afb2:	75 26                	jne    c000afda <Fs::standardiseFiles(char*, char const*, char const*)+0x189>
c000afb4:	83 ec 0c             	sub    esp,0xc
c000afb7:	53                   	push   ebx
c000afb8:	e8 63 56 ff ff       	call   c0000620 <strlen>
c000afbd:	83 c4 10             	add    esp,0x10
c000afc0:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000afc5:	74 26                	je     c000afed <Fs::standardiseFiles(char*, char const*, char const*)+0x19c>
c000afc7:	83 ec 0c             	sub    esp,0xc
c000afca:	53                   	push   ebx
c000afcb:	e8 50 56 ff ff       	call   c0000620 <strlen>
c000afd0:	83 c4 10             	add    esp,0x10
c000afd3:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000afd8:	eb c7                	jmp    c000afa1 <Fs::standardiseFiles(char*, char const*, char const*)+0x150>
c000afda:	83 ec 0c             	sub    esp,0xc
c000afdd:	53                   	push   ebx
c000afde:	e8 3d 56 ff ff       	call   c0000620 <strlen>
c000afe3:	83 c4 10             	add    esp,0x10
c000afe6:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000afeb:	74 c7                	je     c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)+0x163>
c000afed:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aff3:	5b                   	pop    ebx
c000aff4:	5e                   	pop    esi
c000aff5:	5f                   	pop    edi
c000aff6:	5d                   	pop    ebp
c000aff7:	c3                   	ret    

c000aff8 <File::File(char const*, Process*)>:
c000aff8:	83 ec 1c             	sub    esp,0x1c
c000affb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afff:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b007:	89 04 24             	mov    DWORD PTR [esp],eax
c000b00a:	e8 ef e1 ff ff       	call   c00091fe <UnixFile::UnixFile(int)>
c000b00f:	ba 50 06 02 c0       	mov    edx,0xc0020650
c000b014:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b018:	89 10                	mov    DWORD PTR [eax],edx
c000b01a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b01e:	05 0c 01 00 00       	add    eax,0x10c
c000b023:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b027:	83 c2 0d             	add    edx,0xd
c000b02a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b02e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b032:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b036:	89 14 24             	mov    DWORD PTR [esp],edx
c000b039:	e8 13 fe ff ff       	call   c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b03e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b042:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
c000b046:	2c 41                	sub    al,0x41
c000b048:	88 c2                	mov    dl,al
c000b04a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b04e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b054:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b058:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b05c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b060:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b067:	0f b6 c0             	movzx  eax,al
c000b06a:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b071:	85 c0                	test   eax,eax
c000b073:	74 3c                	je     c000b0b1 <File::File(char const*, Process*)+0xb9>
c000b075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b079:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b080:	0f b6 c0             	movzx  eax,al
c000b083:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b08a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b090:	85 c0                	test   eax,eax
c000b092:	75 1d                	jne    c000b0b1 <File::File(char const*, Process*)+0xb9>
c000b094:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b098:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b09f:	0f b6 c0             	movzx  eax,al
c000b0a2:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b0a9:	89 04 24             	mov    DWORD PTR [esp],eax
c000b0ac:	e8 a5 26 00 00       	call   c000d756 <LogicalDisk::mount()>
c000b0b1:	90                   	nop
c000b0b2:	83 c4 1c             	add    esp,0x1c
c000b0b5:	c3                   	ret    

c000b0b6 <File::open(FileOpenMode)>:
c000b0b6:	53                   	push   ebx
c000b0b7:	b8 0b 00 00 00       	mov    eax,0xb
c000b0bc:	83 ec 08             	sub    esp,0x8
c000b0bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0c3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b0ca:	80 fa 19             	cmp    dl,0x19
c000b0cd:	77 40                	ja     c000b10f <File::open(FileOpenMode)+0x59>
c000b0cf:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b0d6:	85 d2                	test   edx,edx
c000b0d8:	74 35                	je     c000b10f <File::open(FileOpenMode)+0x59>
c000b0da:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b0e0:	85 d2                	test   edx,edx
c000b0e2:	74 2b                	je     c000b10f <File::open(FileOpenMode)+0x59>
c000b0e4:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b0e8:	b8 06 00 00 00       	mov    eax,0x6
c000b0ed:	75 20                	jne    c000b10f <File::open(FileOpenMode)+0x59>
c000b0ef:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0f1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b0f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0fb:	51                   	push   ecx
c000b0fc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b0ff:	51                   	push   ecx
c000b100:	52                   	push   edx
c000b101:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b104:	83 c4 10             	add    esp,0x10
c000b107:	85 c0                	test   eax,eax
c000b109:	75 04                	jne    c000b10f <File::open(FileOpenMode)+0x59>
c000b10b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b10f:	83 c4 08             	add    esp,0x8
c000b112:	5b                   	pop    ebx
c000b113:	c3                   	ret    

c000b114 <File::close()>:
c000b114:	53                   	push   ebx
c000b115:	b8 0b 00 00 00       	mov    eax,0xb
c000b11a:	83 ec 08             	sub    esp,0x8
c000b11d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b121:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b128:	80 fa 19             	cmp    dl,0x19
c000b12b:	77 41                	ja     c000b16e <File::close()+0x5a>
c000b12d:	8b 1c 95 20 74 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd8be0]
c000b134:	85 db                	test   ebx,ebx
c000b136:	74 36                	je     c000b16e <File::close()+0x5a>
c000b138:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b13f:	74 2d                	je     c000b16e <File::close()+0x5a>
c000b141:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b145:	b8 05 00 00 00       	mov    eax,0x5
c000b14a:	74 22                	je     c000b16e <File::close()+0x5a>
c000b14c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b150:	8b 04 95 20 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8be0]
c000b157:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b15d:	53                   	push   ebx
c000b15e:	53                   	push   ebx
c000b15f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b161:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b167:	50                   	push   eax
c000b168:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000b16b:	83 c4 10             	add    esp,0x10
c000b16e:	83 c4 08             	add    esp,0x8
c000b171:	5b                   	pop    ebx
c000b172:	c3                   	ret    
c000b173:	90                   	nop

c000b174 <File::seek(unsigned long long)>:
c000b174:	56                   	push   esi
c000b175:	b8 0b 00 00 00       	mov    eax,0xb
c000b17a:	53                   	push   ebx
c000b17b:	51                   	push   ecx
c000b17c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b180:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b184:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b188:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b18f:	80 fa 19             	cmp    dl,0x19
c000b192:	77 31                	ja     c000b1c5 <File::seek(unsigned long long)+0x51>
c000b194:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b19b:	85 d2                	test   edx,edx
c000b19d:	74 26                	je     c000b1c5 <File::seek(unsigned long long)+0x51>
c000b19f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b1a5:	85 d2                	test   edx,edx
c000b1a7:	74 1c                	je     c000b1c5 <File::seek(unsigned long long)+0x51>
c000b1a9:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b1ad:	b8 05 00 00 00       	mov    eax,0x5
c000b1b2:	74 11                	je     c000b1c5 <File::seek(unsigned long long)+0x51>
c000b1b4:	8b 02                	mov    eax,DWORD PTR [edx]
c000b1b6:	53                   	push   ebx
c000b1b7:	51                   	push   ecx
c000b1b8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b1be:	52                   	push   edx
c000b1bf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	5a                   	pop    edx
c000b1c6:	5b                   	pop    ebx
c000b1c7:	5e                   	pop    esi
c000b1c8:	c3                   	ret    
c000b1c9:	90                   	nop

c000b1ca <File::tell(unsigned long long*)>:
c000b1ca:	83 ec 0c             	sub    esp,0xc
c000b1cd:	b8 0b 00 00 00       	mov    eax,0xb
c000b1d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b1d6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1dd:	80 fa 19             	cmp    dl,0x19
c000b1e0:	77 34                	ja     c000b216 <File::tell(unsigned long long*)+0x4c>
c000b1e2:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b1e9:	85 d2                	test   edx,edx
c000b1eb:	74 29                	je     c000b216 <File::tell(unsigned long long*)+0x4c>
c000b1ed:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b1f3:	85 d2                	test   edx,edx
c000b1f5:	74 1f                	je     c000b216 <File::tell(unsigned long long*)+0x4c>
c000b1f7:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b1fb:	b8 05 00 00 00       	mov    eax,0x5
c000b200:	74 14                	je     c000b216 <File::tell(unsigned long long*)+0x4c>
c000b202:	50                   	push   eax
c000b203:	8b 02                	mov    eax,DWORD PTR [edx]
c000b205:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b209:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b20f:	52                   	push   edx
c000b210:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b213:	83 c4 10             	add    esp,0x10
c000b216:	83 c4 0c             	add    esp,0xc
c000b219:	c3                   	ret    

c000b21a <File::rewind()>:
c000b21a:	83 ec 10             	sub    esp,0x10
c000b21d:	6a 00                	push   0x0
c000b21f:	6a 00                	push   0x0
c000b221:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b225:	e8 4a ff ff ff       	call   c000b174 <File::seek(unsigned long long)>
c000b22a:	83 c4 1c             	add    esp,0x1c
c000b22d:	c3                   	ret    

c000b22e <File::unlink()>:
c000b22e:	83 ec 0c             	sub    esp,0xc
c000b231:	b8 0b 00 00 00       	mov    eax,0xb
c000b236:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b23a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b241:	80 f9 19             	cmp    cl,0x19
c000b244:	77 2f                	ja     c000b275 <File::unlink()+0x47>
c000b246:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b24d:	85 c9                	test   ecx,ecx
c000b24f:	74 24                	je     c000b275 <File::unlink()+0x47>
c000b251:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b257:	85 c9                	test   ecx,ecx
c000b259:	74 1a                	je     c000b275 <File::unlink()+0x47>
c000b25b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b25f:	b8 06 00 00 00       	mov    eax,0x6
c000b264:	75 0f                	jne    c000b275 <File::unlink()+0x47>
c000b266:	50                   	push   eax
c000b267:	83 c2 0d             	add    edx,0xd
c000b26a:	50                   	push   eax
c000b26b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b26d:	52                   	push   edx
c000b26e:	51                   	push   ecx
c000b26f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b272:	83 c4 10             	add    esp,0x10
c000b275:	83 c4 0c             	add    esp,0xc
c000b278:	c3                   	ret    
c000b279:	90                   	nop

c000b27a <File::rename(char const*)>:
c000b27a:	83 ec 0c             	sub    esp,0xc
c000b27d:	b8 0b 00 00 00       	mov    eax,0xb
c000b282:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b286:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b28d:	80 f9 19             	cmp    cl,0x19
c000b290:	77 32                	ja     c000b2c4 <File::rename(char const*)+0x4a>
c000b292:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b299:	85 c9                	test   ecx,ecx
c000b29b:	74 27                	je     c000b2c4 <File::rename(char const*)+0x4a>
c000b29d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2a3:	85 c9                	test   ecx,ecx
c000b2a5:	74 1d                	je     c000b2c4 <File::rename(char const*)+0x4a>
c000b2a7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2ab:	b8 06 00 00 00       	mov    eax,0x6
c000b2b0:	75 12                	jne    c000b2c4 <File::rename(char const*)+0x4a>
c000b2b2:	50                   	push   eax
c000b2b3:	83 c2 0d             	add    edx,0xd
c000b2b6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2bc:	52                   	push   edx
c000b2bd:	51                   	push   ecx
c000b2be:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	83 c4 0c             	add    esp,0xc
c000b2c7:	c3                   	ret    

c000b2c8 <File::chfatattr(unsigned char, unsigned char)>:
c000b2c8:	56                   	push   esi
c000b2c9:	b8 0b 00 00 00       	mov    eax,0xb
c000b2ce:	53                   	push   ebx
c000b2cf:	51                   	push   ecx
c000b2d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b2d4:	0f b6 4c 24 14       	movzx  ecx,BYTE PTR [esp+0x14]
c000b2d9:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000b2de:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b2e5:	80 fa 19             	cmp    dl,0x19
c000b2e8:	77 2f                	ja     c000b319 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b2ea:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b2f1:	85 d2                	test   edx,edx
c000b2f3:	74 24                	je     c000b319 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b2f5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b2fb:	85 d2                	test   edx,edx
c000b2fd:	74 1a                	je     c000b319 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b2ff:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b303:	b8 06 00 00 00       	mov    eax,0x6
c000b308:	75 0f                	jne    c000b319 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b30a:	8b 02                	mov    eax,DWORD PTR [edx]
c000b30c:	83 c6 0d             	add    esi,0xd
c000b30f:	53                   	push   ebx
c000b310:	51                   	push   ecx
c000b311:	56                   	push   esi
c000b312:	52                   	push   edx
c000b313:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000b316:	83 c4 10             	add    esp,0x10
c000b319:	5a                   	pop    edx
c000b31a:	5b                   	pop    ebx
c000b31b:	5e                   	pop    esi
c000b31c:	c3                   	ret    
c000b31d:	90                   	nop

c000b31e <File::exists()>:
c000b31e:	83 ec 0c             	sub    esp,0xc
c000b321:	31 c0                	xor    eax,eax
c000b323:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b327:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b32e:	80 f9 19             	cmp    cl,0x19
c000b331:	77 24                	ja     c000b357 <File::exists()+0x39>
c000b333:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b33a:	85 c9                	test   ecx,ecx
c000b33c:	74 19                	je     c000b357 <File::exists()+0x39>
c000b33e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b344:	85 c9                	test   ecx,ecx
c000b346:	74 0f                	je     c000b357 <File::exists()+0x39>
c000b348:	50                   	push   eax
c000b349:	83 c2 0d             	add    edx,0xd
c000b34c:	50                   	push   eax
c000b34d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b34f:	52                   	push   edx
c000b350:	51                   	push   ecx
c000b351:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b354:	83 c4 10             	add    esp,0x10
c000b357:	83 c4 0c             	add    esp,0xc
c000b35a:	c3                   	ret    
c000b35b:	90                   	nop

c000b35c <File::stat(unsigned long long*, bool*)>:
c000b35c:	56                   	push   esi
c000b35d:	53                   	push   ebx
c000b35e:	50                   	push   eax
c000b35f:	b8 0b 00 00 00       	mov    eax,0xb
c000b364:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b368:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b36c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b370:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b377:	80 f9 19             	cmp    cl,0x19
c000b37a:	77 3d                	ja     c000b3b9 <File::stat(unsigned long long*, bool*)+0x5d>
c000b37c:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b383:	85 c9                	test   ecx,ecx
c000b385:	74 32                	je     c000b3b9 <File::stat(unsigned long long*, bool*)+0x5d>
c000b387:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b38d:	85 c9                	test   ecx,ecx
c000b38f:	74 28                	je     c000b3b9 <File::stat(unsigned long long*, bool*)+0x5d>
c000b391:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b395:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b397:	74 13                	je     c000b3ac <File::stat(unsigned long long*, bool*)+0x50>
c000b399:	83 ec 04             	sub    esp,0x4
c000b39c:	56                   	push   esi
c000b39d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b3a3:	51                   	push   ecx
c000b3a4:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b3a7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b3aa:	eb 0a                	jmp    c000b3b6 <File::stat(unsigned long long*, bool*)+0x5a>
c000b3ac:	53                   	push   ebx
c000b3ad:	83 c2 0d             	add    edx,0xd
c000b3b0:	56                   	push   esi
c000b3b1:	52                   	push   edx
c000b3b2:	51                   	push   ecx
c000b3b3:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b3b6:	83 c4 10             	add    esp,0x10
c000b3b9:	5a                   	pop    edx
c000b3ba:	5b                   	pop    ebx
c000b3bb:	5e                   	pop    esi
c000b3bc:	c3                   	ret    

c000b3bd <Fs::setcwd(Process*, char*)>:
c000b3bd:	55                   	push   ebp
c000b3be:	57                   	push   edi
c000b3bf:	56                   	push   esi
c000b3c0:	53                   	push   ebx
c000b3c1:	81 ec 20 02 00 00    	sub    esp,0x220
c000b3c7:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b3ce:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b3d4:	57                   	push   edi
c000b3d5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b3dc:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b3e0:	56                   	push   esi
c000b3e1:	e8 6b fa ff ff       	call   c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b3e6:	89 34 24             	mov    DWORD PTR [esp],esi
c000b3e9:	e8 32 52 ff ff       	call   c0000620 <strlen>
c000b3ee:	83 c4 10             	add    esp,0x10
c000b3f1:	83 f8 02             	cmp    eax,0x2
c000b3f4:	77 15                	ja     c000b40b <Fs::setcwd(Process*, char*)+0x4e>
c000b3f6:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b3fb:	83 eb 41             	sub    ebx,0x41
c000b3fe:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b405:	85 c0                	test   eax,eax
c000b407:	75 1c                	jne    c000b425 <Fs::setcwd(Process*, char*)+0x68>
c000b409:	eb 2f                	jmp    c000b43a <Fs::setcwd(Process*, char*)+0x7d>
c000b40b:	83 ec 0c             	sub    esp,0xc
c000b40e:	56                   	push   esi
c000b40f:	e8 0c 52 ff ff       	call   c0000620 <strlen>
c000b414:	83 c4 10             	add    esp,0x10
c000b417:	83 f8 03             	cmp    eax,0x3
c000b41a:	75 57                	jne    c000b473 <Fs::setcwd(Process*, char*)+0xb6>
c000b41c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b421:	75 50                	jne    c000b473 <Fs::setcwd(Process*, char*)+0xb6>
c000b423:	eb d1                	jmp    c000b3f6 <Fs::setcwd(Process*, char*)+0x39>
c000b425:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b42c:	75 0c                	jne    c000b43a <Fs::setcwd(Process*, char*)+0x7d>
c000b42e:	83 ec 0c             	sub    esp,0xc
c000b431:	50                   	push   eax
c000b432:	e8 1f 23 00 00       	call   c000d756 <LogicalDisk::mount()>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	83 fb 19             	cmp    ebx,0x19
c000b43d:	b8 03 00 00 00       	mov    eax,0x3
c000b442:	0f 87 c6 00 00 00    	ja     c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b448:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b44f:	b8 05 00 00 00       	mov    eax,0x5
c000b454:	85 d2                	test   edx,edx
c000b456:	0f 84 b2 00 00 00    	je     c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b45c:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b463:	b8 06 00 00 00       	mov    eax,0x6
c000b468:	0f 85 92 00 00 00    	jne    c000b500 <Fs::setcwd(Process*, char*)+0x143>
c000b46e:	e9 9b 00 00 00       	jmp    c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b473:	83 ec 0c             	sub    esp,0xc
c000b476:	68 14 01 00 00       	push   0x114
c000b47b:	e8 7c c6 ff ff       	call   c0007afc <malloc>
c000b480:	83 c4 0c             	add    esp,0xc
c000b483:	55                   	push   ebp
c000b484:	56                   	push   esi
c000b485:	50                   	push   eax
c000b486:	89 c3                	mov    ebx,eax
c000b488:	e8 6b fb ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c000b48d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b492:	83 c4 0c             	add    esp,0xc
c000b495:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b499:	50                   	push   eax
c000b49a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b49e:	50                   	push   eax
c000b49f:	53                   	push   ebx
c000b4a0:	e8 b7 fe ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c000b4a5:	83 c4 10             	add    esp,0x10
c000b4a8:	83 f8 02             	cmp    eax,0x2
c000b4ab:	74 27                	je     c000b4d4 <Fs::setcwd(Process*, char*)+0x117>
c000b4ad:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b4b2:	75 1c                	jne    c000b4d0 <Fs::setcwd(Process*, char*)+0x113>
c000b4b4:	85 db                	test   ebx,ebx
c000b4b6:	b8 02 00 00 00       	mov    eax,0x2
c000b4bb:	74 51                	je     c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b4bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4bf:	83 ec 0c             	sub    esp,0xc
c000b4c2:	53                   	push   ebx
c000b4c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	b8 02 00 00 00       	mov    eax,0x2
c000b4ce:	eb 3e                	jmp    c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b4d0:	85 c0                	test   eax,eax
c000b4d2:	74 1c                	je     c000b4f0 <Fs::setcwd(Process*, char*)+0x133>
c000b4d4:	85 db                	test   ebx,ebx
c000b4d6:	b8 01 00 00 00       	mov    eax,0x1
c000b4db:	74 31                	je     c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b4dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4df:	83 ec 0c             	sub    esp,0xc
c000b4e2:	53                   	push   ebx
c000b4e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	b8 01 00 00 00       	mov    eax,0x1
c000b4ee:	eb 1e                	jmp    c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b4f0:	85 db                	test   ebx,ebx
c000b4f2:	74 0c                	je     c000b500 <Fs::setcwd(Process*, char*)+0x143>
c000b4f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4f6:	83 ec 0c             	sub    esp,0xc
c000b4f9:	53                   	push   ebx
c000b4fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b4fd:	83 c4 10             	add    esp,0x10
c000b500:	50                   	push   eax
c000b501:	50                   	push   eax
c000b502:	56                   	push   esi
c000b503:	57                   	push   edi
c000b504:	e8 17 52 ff ff       	call   c0000720 <strcpy>
c000b509:	83 c4 10             	add    esp,0x10
c000b50c:	31 c0                	xor    eax,eax
c000b50e:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b514:	5b                   	pop    ebx
c000b515:	5e                   	pop    esi
c000b516:	5f                   	pop    edi
c000b517:	5d                   	pop    ebp
c000b518:	c3                   	ret    
c000b519:	90                   	nop

c000b51a <Directory::Directory(char const*, Process*)>:
c000b51a:	83 ec 1c             	sub    esp,0x1c
c000b51d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b521:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b529:	89 04 24             	mov    DWORD PTR [esp],eax
c000b52c:	e8 cd dc ff ff       	call   c00091fe <UnixFile::UnixFile(int)>
c000b531:	ba 6c 06 02 c0       	mov    edx,0xc002066c
c000b536:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b53a:	89 10                	mov    DWORD PTR [eax],edx
c000b53c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b540:	05 0c 01 00 00       	add    eax,0x10c
c000b545:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b549:	83 c2 0d             	add    edx,0xd
c000b54c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b550:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b554:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b558:	89 14 24             	mov    DWORD PTR [esp],edx
c000b55b:	e8 f1 f8 ff ff       	call   c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b564:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
c000b568:	2c 41                	sub    al,0x41
c000b56a:	88 c2                	mov    dl,al
c000b56c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b570:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b576:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b57a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b57e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b582:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b589:	0f b6 c0             	movzx  eax,al
c000b58c:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b593:	85 c0                	test   eax,eax
c000b595:	74 3c                	je     c000b5d3 <Directory::Directory(char const*, Process*)+0xb9>
c000b597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b59b:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b5a2:	0f b6 c0             	movzx  eax,al
c000b5a5:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b5ac:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5b2:	85 c0                	test   eax,eax
c000b5b4:	75 1d                	jne    c000b5d3 <Directory::Directory(char const*, Process*)+0xb9>
c000b5b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b5ba:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b5c1:	0f b6 c0             	movzx  eax,al
c000b5c4:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b5cb:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5ce:	e8 83 21 00 00       	call   c000d756 <LogicalDisk::mount()>
c000b5d3:	90                   	nop
c000b5d4:	83 c4 1c             	add    esp,0x1c
c000b5d7:	c3                   	ret    

c000b5d8 <Directory::open()>:
c000b5d8:	53                   	push   ebx
c000b5d9:	b8 0b 00 00 00       	mov    eax,0xb
c000b5de:	83 ec 08             	sub    esp,0x8
c000b5e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b5e5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b5ec:	80 fa 19             	cmp    dl,0x19
c000b5ef:	77 3d                	ja     c000b62e <Directory::open()+0x56>
c000b5f1:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b5f8:	85 d2                	test   edx,edx
c000b5fa:	74 32                	je     c000b62e <Directory::open()+0x56>
c000b5fc:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b602:	85 d2                	test   edx,edx
c000b604:	74 28                	je     c000b62e <Directory::open()+0x56>
c000b606:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b60a:	b8 06 00 00 00       	mov    eax,0x6
c000b60f:	75 1d                	jne    c000b62e <Directory::open()+0x56>
c000b611:	50                   	push   eax
c000b612:	8b 02                	mov    eax,DWORD PTR [edx]
c000b614:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b61a:	51                   	push   ecx
c000b61b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b61e:	51                   	push   ecx
c000b61f:	52                   	push   edx
c000b620:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b623:	83 c4 10             	add    esp,0x10
c000b626:	85 c0                	test   eax,eax
c000b628:	75 04                	jne    c000b62e <Directory::open()+0x56>
c000b62a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b62e:	83 c4 08             	add    esp,0x8
c000b631:	5b                   	pop    ebx
c000b632:	c3                   	ret    
c000b633:	90                   	nop

c000b634 <Directory::close()>:
c000b634:	53                   	push   ebx
c000b635:	b8 0b 00 00 00       	mov    eax,0xb
c000b63a:	83 ec 08             	sub    esp,0x8
c000b63d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b641:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b648:	80 fa 19             	cmp    dl,0x19
c000b64b:	77 41                	ja     c000b68e <Directory::close()+0x5a>
c000b64d:	8b 1c 95 20 74 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd8be0]
c000b654:	85 db                	test   ebx,ebx
c000b656:	74 36                	je     c000b68e <Directory::close()+0x5a>
c000b658:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b65f:	74 2d                	je     c000b68e <Directory::close()+0x5a>
c000b661:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b665:	b8 05 00 00 00       	mov    eax,0x5
c000b66a:	74 22                	je     c000b68e <Directory::close()+0x5a>
c000b66c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b670:	8b 04 95 20 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8be0]
c000b677:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b67d:	53                   	push   ebx
c000b67e:	53                   	push   ebx
c000b67f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b681:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b687:	50                   	push   eax
c000b688:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b68b:	83 c4 10             	add    esp,0x10
c000b68e:	83 c4 08             	add    esp,0x8
c000b691:	5b                   	pop    ebx
c000b692:	c3                   	ret    
c000b693:	90                   	nop

c000b694 <Directory::unlink()>:
c000b694:	83 ec 0c             	sub    esp,0xc
c000b697:	b8 0b 00 00 00       	mov    eax,0xb
c000b69c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b6a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6a7:	80 f9 19             	cmp    cl,0x19
c000b6aa:	77 2f                	ja     c000b6db <Directory::unlink()+0x47>
c000b6ac:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6b3:	85 c9                	test   ecx,ecx
c000b6b5:	74 24                	je     c000b6db <Directory::unlink()+0x47>
c000b6b7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b6bd:	85 c9                	test   ecx,ecx
c000b6bf:	74 1a                	je     c000b6db <Directory::unlink()+0x47>
c000b6c1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6c5:	b8 06 00 00 00       	mov    eax,0x6
c000b6ca:	75 0f                	jne    c000b6db <Directory::unlink()+0x47>
c000b6cc:	50                   	push   eax
c000b6cd:	83 c2 0d             	add    edx,0xd
c000b6d0:	50                   	push   eax
c000b6d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b6d3:	52                   	push   edx
c000b6d4:	51                   	push   ecx
c000b6d5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b6d8:	83 c4 10             	add    esp,0x10
c000b6db:	83 c4 0c             	add    esp,0xc
c000b6de:	c3                   	ret    
c000b6df:	90                   	nop

c000b6e0 <Directory::rename(char const*)>:
c000b6e0:	83 ec 0c             	sub    esp,0xc
c000b6e3:	b8 0b 00 00 00       	mov    eax,0xb
c000b6e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b6ec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6f3:	80 f9 19             	cmp    cl,0x19
c000b6f6:	77 32                	ja     c000b72a <Directory::rename(char const*)+0x4a>
c000b6f8:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6ff:	85 c9                	test   ecx,ecx
c000b701:	74 27                	je     c000b72a <Directory::rename(char const*)+0x4a>
c000b703:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b709:	85 c9                	test   ecx,ecx
c000b70b:	74 1d                	je     c000b72a <Directory::rename(char const*)+0x4a>
c000b70d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b711:	b8 06 00 00 00       	mov    eax,0x6
c000b716:	75 12                	jne    c000b72a <Directory::rename(char const*)+0x4a>
c000b718:	50                   	push   eax
c000b719:	83 c2 0d             	add    edx,0xd
c000b71c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b71e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b722:	52                   	push   edx
c000b723:	51                   	push   ecx
c000b724:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b727:	83 c4 10             	add    esp,0x10
c000b72a:	83 c4 0c             	add    esp,0xc
c000b72d:	c3                   	ret    

c000b72e <Directory::exists()>:
c000b72e:	83 ec 0c             	sub    esp,0xc
c000b731:	31 c0                	xor    eax,eax
c000b733:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b737:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b73e:	80 f9 19             	cmp    cl,0x19
c000b741:	77 24                	ja     c000b767 <Directory::exists()+0x39>
c000b743:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b74a:	85 c9                	test   ecx,ecx
c000b74c:	74 19                	je     c000b767 <Directory::exists()+0x39>
c000b74e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b754:	85 c9                	test   ecx,ecx
c000b756:	74 0f                	je     c000b767 <Directory::exists()+0x39>
c000b758:	50                   	push   eax
c000b759:	83 c2 0d             	add    edx,0xd
c000b75c:	50                   	push   eax
c000b75d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b75f:	52                   	push   edx
c000b760:	51                   	push   ecx
c000b761:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	83 c4 0c             	add    esp,0xc
c000b76a:	c3                   	ret    
c000b76b:	90                   	nop

c000b76c <Directory::read(dirent*)>:
c000b76c:	83 ec 1c             	sub    esp,0x1c
c000b76f:	b8 0b 00 00 00       	mov    eax,0xb
c000b774:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b778:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b77f:	80 fa 19             	cmp    dl,0x19
c000b782:	77 30                	ja     c000b7b4 <Directory::read(dirent*)+0x48>
c000b784:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b78b:	85 d2                	test   edx,edx
c000b78d:	74 25                	je     c000b7b4 <Directory::read(dirent*)+0x48>
c000b78f:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b796:	74 1c                	je     c000b7b4 <Directory::read(dirent*)+0x48>
c000b798:	83 ec 0c             	sub    esp,0xc
c000b79b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b79d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b7a1:	52                   	push   edx
c000b7a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b7a6:	6a 00                	push   0x0
c000b7a8:	68 10 01 00 00       	push   0x110
c000b7ad:	51                   	push   ecx
c000b7ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b7b1:	83 c4 20             	add    esp,0x20
c000b7b4:	83 c4 1c             	add    esp,0x1c
c000b7b7:	c3                   	ret    

c000b7b8 <Directory::create()>:
c000b7b8:	83 ec 0c             	sub    esp,0xc
c000b7bb:	b8 0b 00 00 00       	mov    eax,0xb
c000b7c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b7cb:	80 f9 19             	cmp    cl,0x19
c000b7ce:	77 2f                	ja     c000b7ff <Directory::create()+0x47>
c000b7d0:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b7d7:	85 c9                	test   ecx,ecx
c000b7d9:	74 24                	je     c000b7ff <Directory::create()+0x47>
c000b7db:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b7e1:	85 c9                	test   ecx,ecx
c000b7e3:	74 1a                	je     c000b7ff <Directory::create()+0x47>
c000b7e5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b7e9:	b8 06 00 00 00       	mov    eax,0x6
c000b7ee:	75 0f                	jne    c000b7ff <Directory::create()+0x47>
c000b7f0:	50                   	push   eax
c000b7f1:	83 c2 0d             	add    edx,0xd
c000b7f4:	50                   	push   eax
c000b7f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b7f7:	52                   	push   edx
c000b7f8:	51                   	push   ecx
c000b7f9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b7fc:	83 c4 10             	add    esp,0x10
c000b7ff:	83 c4 0c             	add    esp,0xc
c000b802:	c3                   	ret    
c000b803:	90                   	nop

c000b804 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b804:	b8 0a 00 00 00       	mov    eax,0xa
c000b809:	c3                   	ret    
c000b80a:	66 90                	xchg   ax,ax

c000b80c <Bus::Bus(char const*)>:
c000b80c:	83 ec 1c             	sub    esp,0x1c
c000b80f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b813:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b817:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b81b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b81e:	e8 5f 0e 00 00       	call   c000c682 <Device::Device(char const*)>
c000b823:	ba 88 06 02 c0       	mov    edx,0xc0020688
c000b828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b82c:	89 10                	mov    DWORD PTR [eax],edx
c000b82e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b832:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b83c:	90                   	nop
c000b83d:	83 c4 1c             	add    esp,0x1c
c000b840:	c3                   	ret    
c000b841:	90                   	nop
c000b842:	66 90                	xchg   ax,ax

c000b844 <Bus::~Bus()>:
c000b844:	83 ec 1c             	sub    esp,0x1c
c000b847:	ba 88 06 02 c0       	mov    edx,0xc0020688
c000b84c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b850:	89 10                	mov    DWORD PTR [eax],edx
c000b852:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b856:	89 04 24             	mov    DWORD PTR [esp],eax
c000b859:	e8 90 0b 00 00       	call   c000c3ee <Device::~Device()>
c000b85e:	90                   	nop
c000b85f:	83 c4 1c             	add    esp,0x1c
c000b862:	c3                   	ret    
c000b863:	90                   	nop

c000b864 <Bus::~Bus()>:
c000b864:	83 ec 1c             	sub    esp,0x1c
c000b867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b86b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b86e:	e8 d1 ff ff ff       	call   c000b844 <Bus::~Bus()>
c000b873:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000b87b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b87f:	89 04 24             	mov    DWORD PTR [esp],eax
c000b882:	e8 d5 f0 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000b887:	83 c4 1c             	add    esp,0x1c
c000b88a:	c3                   	ret    

c000b88b <beepThread(void*)>:
c000b88b:	83 ec 0c             	sub    esp,0xc
c000b88e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b893:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b897:	48                   	dec    eax
c000b898:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b89d:	75 01                	jne    c000b8a0 <beepThread(void*)+0x15>
c000b89f:	fb                   	sti    
c000b8a0:	6b c2 0a             	imul   eax,edx,0xa
c000b8a3:	83 ec 0c             	sub    esp,0xc
c000b8a6:	50                   	push   eax
c000b8a7:	e8 90 a1 00 00       	call   c0015a3c <milliTenthSleep(unsigned int)>
c000b8ac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b8b3:	e8 df be 00 00       	call   c0017797 <HalMakeBeep(int)>
c000b8b8:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b8c0:	83 c4 1c             	add    esp,0x1c
c000b8c3:	e9 74 a0 00 00       	jmp    c001593c <blockTask(TaskState)>

c000b8c8 <Krnl::beep(int, int, bool)>:
c000b8c8:	53                   	push   ebx
c000b8c9:	83 ec 24             	sub    esp,0x24
c000b8cc:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c000b8d0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8d4:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000b8d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b8dc:	e8 b6 be 00 00       	call   c0017797 <HalMakeBeep(int)>
c000b8e1:	83 c4 10             	add    esp,0x10
c000b8e4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b8e8:	84 c0                	test   al,al
c000b8ea:	74 1d                	je     c000b909 <Krnl::beep(int, int, bool)+0x41>
c000b8ec:	6b db 0a             	imul   ebx,ebx,0xa
c000b8ef:	83 ec 0c             	sub    esp,0xc
c000b8f2:	53                   	push   ebx
c000b8f3:	e8 44 a1 00 00       	call   c0015a3c <milliTenthSleep(unsigned int)>
c000b8f8:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000b900:	83 c4 28             	add    esp,0x28
c000b903:	5b                   	pop    ebx
c000b904:	e9 8e be 00 00       	jmp    c0017797 <HalMakeBeep(int)>
c000b909:	68 e6 00 00 00       	push   0xe6
c000b90e:	53                   	push   ebx
c000b90f:	68 8b b8 00 c0       	push   0xc000b88b
c000b914:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b91a:	e8 e9 9b 00 00       	call   c0015508 <Process::createThread(void (*)(void*), void*, int)>
c000b91f:	83 c4 28             	add    esp,0x28
c000b922:	5b                   	pop    ebx
c000b923:	c3                   	ret    
c000b924:	66 90                	xchg   ax,ax
c000b926:	66 90                	xchg   ax,ax
c000b928:	66 90                	xchg   ax,ax
c000b92a:	66 90                	xchg   ax,ax
c000b92c:	66 90                	xchg   ax,ax
c000b92e:	66 90                	xchg   ax,ax

c000b930 <User::loadClockSettings(int)>:
c000b930:	53                   	push   ebx
c000b931:	83 ec 18             	sub    esp,0x18
c000b934:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b93b:	e8 bc c1 ff ff       	call   c0007afc <malloc>
c000b940:	89 c3                	mov    ebx,eax
c000b942:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000b947:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b94a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b94e:	b8 ac 06 02 c0       	mov    eax,0xc00206ac
c000b953:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b957:	e8 9c f6 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c000b95c:	ba 01 00 00 00       	mov    edx,0x1
c000b961:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b965:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b968:	e8 49 f7 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c000b96d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b970:	e8 9f f7 ff ff       	call   c000b114 <File::close()>
c000b975:	85 db                	test   ebx,ebx
c000b977:	74 0f                	je     c000b988 <User::loadClockSettings(int)+0x58>
c000b979:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b97b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000b97f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b982:	83 c4 18             	add    esp,0x18
c000b985:	5b                   	pop    ebx
c000b986:	ff e0                	jmp    eax
c000b988:	83 c4 18             	add    esp,0x18
c000b98b:	5b                   	pop    ebx
c000b98c:	c3                   	ret    
c000b98d:	90                   	nop

c000b98e <Clock::Clock(char const*)>:
c000b98e:	83 ec 1c             	sub    esp,0x1c
c000b991:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b995:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b999:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b99d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9a0:	e8 dd 0c 00 00       	call   c000c682 <Device::Device(char const*)>
c000b9a5:	ba d4 06 02 c0       	mov    edx,0xc00206d4
c000b9aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9ae:	89 10                	mov    DWORD PTR [eax],edx
c000b9b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9b4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b9be:	90                   	nop
c000b9bf:	83 c4 1c             	add    esp,0x1c
c000b9c2:	c3                   	ret    
c000b9c3:	90                   	nop

c000b9c4 <Clock::~Clock()>:
c000b9c4:	83 ec 1c             	sub    esp,0x1c
c000b9c7:	ba d4 06 02 c0       	mov    edx,0xc00206d4
c000b9cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9d0:	89 10                	mov    DWORD PTR [eax],edx
c000b9d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9d9:	e8 10 0a 00 00       	call   c000c3ee <Device::~Device()>
c000b9de:	90                   	nop
c000b9df:	83 c4 1c             	add    esp,0x1c
c000b9e2:	c3                   	ret    
c000b9e3:	90                   	nop

c000b9e4 <Clock::~Clock()>:
c000b9e4:	83 ec 1c             	sub    esp,0x1c
c000b9e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9eb:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9ee:	e8 d1 ff ff ff       	call   c000b9c4 <Clock::~Clock()>
c000b9f3:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000b9fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9ff:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba02:	e8 55 ef ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000ba07:	83 c4 1c             	add    esp,0x1c
c000ba0a:	c3                   	ret    
c000ba0b:	90                   	nop

c000ba0c <Clock::timeInSecondsLocal()>:
c000ba0c:	53                   	push   ebx
c000ba0d:	83 ec 18             	sub    esp,0x18
c000ba10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba14:	8b 10                	mov    edx,DWORD PTR [eax]
c000ba16:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba19:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ba1c:	8b 1d bc 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fbc
c000ba22:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000ba29:	01 d9                	add    ecx,ebx
c000ba2b:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000ba31:	89 cb                	mov    ebx,ecx
c000ba33:	c1 fb 1f             	sar    ebx,0x1f
c000ba36:	01 c8                	add    eax,ecx
c000ba38:	11 da                	adc    edx,ebx
c000ba3a:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000ba41:	74 08                	je     c000ba4b <Clock::timeInSecondsLocal()+0x3f>
c000ba43:	05 08 07 00 00       	add    eax,0x708
c000ba48:	83 d2 00             	adc    edx,0x0
c000ba4b:	83 c4 18             	add    esp,0x18
c000ba4e:	5b                   	pop    ebx
c000ba4f:	c3                   	ret    

c000ba50 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000ba50:	83 ec 0c             	sub    esp,0xc
c000ba53:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ba57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba5b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ba5f:	8b 15 bc 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fbc
c000ba65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ba68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ba6c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ba70:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ba72:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000ba75:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000ba7c:	01 d0                	add    eax,edx
c000ba7e:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000ba84:	99                   	cdq    
c000ba85:	29 c6                	sub    esi,eax
c000ba87:	19 d7                	sbb    edi,edx
c000ba89:	89 f0                	mov    eax,esi
c000ba8b:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000ba92:	89 fa                	mov    edx,edi
c000ba94:	74 08                	je     c000ba9e <Clock::setTimeInSecondsLocal(unsigned long long)+0x4e>
c000ba96:	05 f8 f8 ff ff       	add    eax,0xfffff8f8
c000ba9b:	83 d2 ff             	adc    edx,0xffffffff
c000ba9e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000baa2:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000baa6:	89 d8                	mov    eax,ebx
c000baa8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000baac:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c000baaf:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000bab3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000bab7:	83 c4 0c             	add    esp,0xc
c000baba:	ff e0                	jmp    eax

c000babc <datetimeToSeconds(datetime_t)>:
c000babc:	55                   	push   ebp
c000babd:	57                   	push   edi
c000babe:	56                   	push   esi
c000babf:	53                   	push   ebx
c000bac0:	83 ec 4c             	sub    esp,0x4c
c000bac3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000bac7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000bacb:	0f b6 cc             	movzx  ecx,ah
c000bace:	0f b6 c9             	movzx  ecx,cl
c000bad1:	0f b6 de             	movzx  ebx,dh
c000bad4:	89 cf                	mov    edi,ecx
c000bad6:	fe cb                	dec    bl
c000bad8:	c1 e7 04             	shl    edi,0x4
c000badb:	89 d6                	mov    esi,edx
c000badd:	29 cf                	sub    edi,ecx
c000badf:	89 c1                	mov    ecx,eax
c000bae1:	0f b6 c0             	movzx  eax,al
c000bae4:	0f b6 d2             	movzx  edx,dl
c000bae7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000baed:	c1 e9 10             	shr    ecx,0x10
c000baf0:	c1 ee 10             	shr    esi,0x10
c000baf3:	0f b6 c9             	movzx  ecx,cl
c000baf6:	8d 0c b9             	lea    ecx,[ecx+edi*4]
c000baf9:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000baff:	01 c8                	add    eax,ecx
c000bb01:	0f b7 f6             	movzx  esi,si
c000bb04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000bb08:	c1 f8 1f             	sar    eax,0x1f
c000bb0b:	80 fb 01             	cmp    bl,0x1
c000bb0e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000bb12:	0f b6 c3             	movzx  eax,bl
c000bb15:	8b 04 85 20 07 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf8e0]
c000bb1c:	8d 4c 02 ff          	lea    ecx,[edx+eax*1-0x1]
c000bb20:	76 0c                	jbe    c000bb2e <datetimeToSeconds(datetime_t)+0x72>
c000bb22:	f7 c6 03 00 00 00    	test   esi,0x3
c000bb28:	0f 84 8c 04 00 00    	je     c000bfba <datetimeToSeconds(datetime_t)+0x4fe>
c000bb2e:	83 fe 46             	cmp    esi,0x46
c000bb31:	0f 86 5a 03 00 00    	jbe    c000be91 <datetimeToSeconds(datetime_t)+0x3d5>
c000bb37:	8d 46 b9             	lea    eax,[esi-0x47]
c000bb3a:	8d 56 ba             	lea    edx,[esi-0x46]
c000bb3d:	83 f8 02             	cmp    eax,0x2
c000bb40:	0f 86 c4 04 00 00    	jbe    c000c00a <datetimeToSeconds(datetime_t)+0x54e>
c000bb46:	89 d3                	mov    ebx,edx
c000bb48:	31 c0                	xor    eax,eax
c000bb4a:	66 0f ef ff          	pxor   xmm7,xmm7
c000bb4e:	c1 eb 02             	shr    ebx,0x2
c000bb51:	66 0f 6f cf          	movdqa xmm1,xmm7
c000bb55:	66 0f 7f 7c 24 10    	movdqa XMMWORD PTR [esp+0x10],xmm7
c000bb5b:	66 0f 6f 1d 50 07 02 c0 	movdqa xmm3,XMMWORD PTR ds:0xc0020750
c000bb63:	66 0f 6f 3d 90 08 02 c0 	movdqa xmm7,XMMWORD PTR ds:0xc0020890
c000bb6b:	66 0f 66 cf          	pcmpgtd xmm1,xmm7
c000bb6f:	66 0f 7f 0c 24       	movdqa XMMWORD PTR [esp],xmm1
c000bb74:	66 0f 6f 24 24       	movdqa xmm4,XMMWORD PTR [esp]
c000bb79:	66 0f 6f eb          	movdqa xmm5,xmm3
c000bb7d:	66 0f 6f f4          	movdqa xmm6,xmm4
c000bb81:	66 0f 62 eb          	punpckldq xmm5,xmm3
c000bb85:	66 0f ef c0          	pxor   xmm0,xmm0
c000bb89:	66 0f f4 f5          	pmuludq xmm6,xmm5
c000bb8d:	66 0f 66 c5          	pcmpgtd xmm0,xmm5
c000bb91:	66 0f 6f d0          	movdqa xmm2,xmm0
c000bb95:	66 0f f4 d7          	pmuludq xmm2,xmm7
c000bb99:	66 0f d4 d6          	paddq  xmm2,xmm6
c000bb9d:	66 0f 6f c5          	movdqa xmm0,xmm5
c000bba1:	66 0f f4 c7          	pmuludq xmm0,xmm7
c000bba5:	66 0f 73 f2 20       	psllq  xmm2,0x20
c000bbaa:	66 0f 6f f4          	movdqa xmm6,xmm4
c000bbae:	66 0f ef ed          	pxor   xmm5,xmm5
c000bbb2:	66 0f d4 c2          	paddq  xmm0,xmm2
c000bbb6:	66 0f 6f d3          	movdqa xmm2,xmm3
c000bbba:	66 0f 6a d3          	punpckhdq xmm2,xmm3
c000bbbe:	66 0f f4 f2          	pmuludq xmm6,xmm2
c000bbc2:	66 0f 66 ea          	pcmpgtd xmm5,xmm2
c000bbc6:	66 0f f4 ef          	pmuludq xmm5,xmm7
c000bbca:	66 0f d4 ee          	paddq  xmm5,xmm6
c000bbce:	66 0f f4 d7          	pmuludq xmm2,xmm7
c000bbd2:	66 0f ef f6          	pxor   xmm6,xmm6
c000bbd6:	66 0f 73 f5 20       	psllq  xmm5,0x20
c000bbdb:	66 0f 6f 0d 80 08 02 c0 	movdqa xmm1,XMMWORD PTR ds:0xc0020880
c000bbe3:	66 0f db cb          	pand   xmm1,xmm3
c000bbe7:	66 0f d4 d5          	paddq  xmm2,xmm5
c000bbeb:	66 0f 76 ce          	pcmpeqd xmm1,xmm6
c000bbef:	40                   	inc    eax
c000bbf0:	0f c6 c2 dd          	shufps xmm0,xmm2,0xdd
c000bbf4:	39 d8                	cmp    eax,ebx
c000bbf6:	66 0f 72 e0 05       	psrad  xmm0,0x5
c000bbfb:	66 0f 6f d0          	movdqa xmm2,xmm0
c000bbff:	66 0f 72 f2 01       	pslld  xmm2,0x1
c000bc04:	66 0f fe d0          	paddd  xmm2,xmm0
c000bc08:	66 0f 72 f2 03       	pslld  xmm2,0x3
c000bc0d:	66 0f fe c2          	paddd  xmm0,xmm2
c000bc11:	66 0f 6f 15 a0 08 02 c0 	movdqa xmm2,XMMWORD PTR ds:0xc00208a0
c000bc19:	66 0f fe d3          	paddd  xmm2,xmm3
c000bc1d:	66 0f 72 f0 02       	pslld  xmm0,0x2
c000bc22:	66 0f 6f f2          	movdqa xmm6,xmm2
c000bc26:	66 0f 62 f2          	punpckldq xmm6,xmm2
c000bc2a:	66 0f 7f 44 24 20    	movdqa XMMWORD PTR [esp+0x20],xmm0
c000bc30:	66 0f ef c0          	pxor   xmm0,xmm0
c000bc34:	66 0f 66 c6          	pcmpgtd xmm0,xmm6
c000bc38:	66 0f 6f e8          	movdqa xmm5,xmm0
c000bc3c:	66 0f 6f c4          	movdqa xmm0,xmm4
c000bc40:	66 0f f4 ef          	pmuludq xmm5,xmm7
c000bc44:	66 0f f4 c6          	pmuludq xmm0,xmm6
c000bc48:	66 0f 6f e0          	movdqa xmm4,xmm0
c000bc4c:	66 0f d4 ec          	paddq  xmm5,xmm4
c000bc50:	66 0f 6f c6          	movdqa xmm0,xmm6
c000bc54:	66 0f 73 f5 20       	psllq  xmm5,0x20
c000bc59:	66 0f f4 c7          	pmuludq xmm0,xmm7
c000bc5d:	66 0f 6f f2          	movdqa xmm6,xmm2
c000bc61:	66 0f d4 c5          	paddq  xmm0,xmm5
c000bc65:	66 0f 6a f2          	punpckhdq xmm6,xmm2
c000bc69:	66 0f 6f 24 24       	movdqa xmm4,XMMWORD PTR [esp]
c000bc6e:	66 0f 6f ee          	movdqa xmm5,xmm6
c000bc72:	66 0f ef f6          	pxor   xmm6,xmm6
c000bc76:	66 0f f4 e5          	pmuludq xmm4,xmm5
c000bc7a:	66 0f 66 f5          	pcmpgtd xmm6,xmm5
c000bc7e:	66 0f f4 f7          	pmuludq xmm6,xmm7
c000bc82:	66 0f f4 ef          	pmuludq xmm5,xmm7
c000bc86:	66 0f d4 f4          	paddq  xmm6,xmm4
c000bc8a:	66 0f 6f e2          	movdqa xmm4,xmm2
c000bc8e:	66 0f 72 e4 1f       	psrad  xmm4,0x1f
c000bc93:	66 0f 73 f6 20       	psllq  xmm6,0x20
c000bc98:	66 0f d4 ee          	paddq  xmm5,xmm6
c000bc9c:	0f c6 c5 dd          	shufps xmm0,xmm5,0xdd
c000bca0:	66 0f 72 e0 07       	psrad  xmm0,0x7
c000bca5:	66 0f fa c4          	psubd  xmm0,xmm4
c000bca9:	66 0f 6f e0          	movdqa xmm4,xmm0
c000bcad:	66 0f 72 f4 01       	pslld  xmm4,0x1
c000bcb2:	66 0f 6f ec          	movdqa xmm5,xmm4
c000bcb6:	66 0f fe e8          	paddd  xmm5,xmm0
c000bcba:	66 0f ef e4          	pxor   xmm4,xmm4
c000bcbe:	66 0f 72 f5 03       	pslld  xmm5,0x3
c000bcc3:	66 0f fe c5          	paddd  xmm0,xmm5
c000bcc7:	66 0f 6f 6c 24 20    	movdqa xmm5,XMMWORD PTR [esp+0x20]
c000bccd:	66 0f 76 eb          	pcmpeqd xmm5,xmm3
c000bcd1:	66 0f 6f f5          	movdqa xmm6,xmm5
c000bcd5:	66 0f 76 ec          	pcmpeqd xmm5,xmm4
c000bcd9:	66 0f db f1          	pand   xmm6,xmm1
c000bcdd:	66 0f db e9          	pand   xmm5,xmm1
c000bce1:	66 0f 76 cc          	pcmpeqd xmm1,xmm4
c000bce5:	66 0f fe 1d 70 08 02 c0 	paddd  xmm3,XMMWORD PTR ds:0xc0020870
c000bced:	66 0f 72 f0 04       	pslld  xmm0,0x4
c000bcf2:	66 0f 76 d0          	pcmpeqd xmm2,xmm0
c000bcf6:	66 0f 6f c2          	movdqa xmm0,xmm2
c000bcfa:	66 0f 76 d4          	pcmpeqd xmm2,xmm4
c000bcfe:	66 0f db c6          	pand   xmm0,xmm6
c000bd02:	66 0f db d6          	pand   xmm2,xmm6
c000bd06:	66 0f eb e8          	por    xmm5,xmm0
c000bd0a:	66 0f eb d1          	por    xmm2,xmm1
c000bd0e:	66 0f 6f 05 b0 08 02 c0 	movdqa xmm0,XMMWORD PTR ds:0xc00208b0
c000bd16:	66 0f 6f 0d c0 08 02 c0 	movdqa xmm1,XMMWORD PTR ds:0xc00208c0
c000bd1e:	66 0f db c2          	pand   xmm0,xmm2
c000bd22:	66 0f db cd          	pand   xmm1,xmm5
c000bd26:	66 0f df 15 c0 08 02 c0 	pandn  xmm2,XMMWORD PTR ds:0xc00208c0
c000bd2e:	66 0f eb d0          	por    xmm2,xmm0
c000bd32:	66 0f df ea          	pandn  xmm5,xmm2
c000bd36:	66 0f eb e9          	por    xmm5,xmm1
c000bd3a:	66 0f fe 6c 24 10    	paddd  xmm5,XMMWORD PTR [esp+0x10]
c000bd40:	66 0f 7f 6c 24 10    	movdqa XMMWORD PTR [esp+0x10],xmm5
c000bd46:	0f 85 28 fe ff ff    	jne    c000bb74 <datetimeToSeconds(datetime_t)+0xb8>
c000bd4c:	66 0f 6f c5          	movdqa xmm0,xmm5
c000bd50:	66 0f 73 d8 08       	psrldq xmm0,0x8
c000bd55:	89 d7                	mov    edi,edx
c000bd57:	66 0f fe c5          	paddd  xmm0,xmm5
c000bd5b:	83 e7 fc             	and    edi,0xfffffffc
c000bd5e:	66 0f 6f c8          	movdqa xmm1,xmm0
c000bd62:	8d 5f 46             	lea    ebx,[edi+0x46]
c000bd65:	66 0f 73 d9 04       	psrldq xmm1,0x4
c000bd6a:	66 0f fe c1          	paddd  xmm0,xmm1
c000bd6e:	66 0f 7e c0          	movd   eax,xmm0
c000bd72:	01 c1                	add    ecx,eax
c000bd74:	39 fa                	cmp    edx,edi
c000bd76:	0f 84 fe 00 00 00    	je     c000be7a <datetimeToSeconds(datetime_t)+0x3be>
c000bd7c:	f6 c3 02             	test   bl,0x2
c000bd7f:	b8 6d 01 00 00       	mov    eax,0x16d
c000bd84:	75 41                	jne    c000bdc7 <datetimeToSeconds(datetime_t)+0x30b>
c000bd86:	89 d8                	mov    eax,ebx
c000bd88:	bd 1f 85 eb 51       	mov    ebp,0x51eb851f
c000bd8d:	f7 e5                	mul    ebp
c000bd8f:	c1 ea 05             	shr    edx,0x5
c000bd92:	8d 04 92             	lea    eax,[edx+edx*4]
c000bd95:	8d 14 80             	lea    edx,[eax+eax*4]
c000bd98:	b8 6e 01 00 00       	mov    eax,0x16e
c000bd9d:	c1 e2 02             	shl    edx,0x2
c000bda0:	39 d3                	cmp    ebx,edx
c000bda2:	75 23                	jne    c000bdc7 <datetimeToSeconds(datetime_t)+0x30b>
c000bda4:	81 c7 b2 07 00 00    	add    edi,0x7b2
c000bdaa:	89 f8                	mov    eax,edi
c000bdac:	f7 e5                	mul    ebp
c000bdae:	c1 ea 07             	shr    edx,0x7
c000bdb1:	8d 04 92             	lea    eax,[edx+edx*4]
c000bdb4:	8d 04 80             	lea    eax,[eax+eax*4]
c000bdb7:	c1 e0 04             	shl    eax,0x4
c000bdba:	39 c7                	cmp    edi,eax
c000bdbc:	0f 94 c0             	sete   al
c000bdbf:	0f b6 c0             	movzx  eax,al
c000bdc2:	05 6d 01 00 00       	add    eax,0x16d
c000bdc7:	8d 7b 01             	lea    edi,[ebx+0x1]
c000bdca:	01 c1                	add    ecx,eax
c000bdcc:	39 f7                	cmp    edi,esi
c000bdce:	0f 8d a6 00 00 00    	jge    c000be7a <datetimeToSeconds(datetime_t)+0x3be>
c000bdd4:	f7 c7 03 00 00 00    	test   edi,0x3
c000bdda:	b8 6d 01 00 00       	mov    eax,0x16d
c000bddf:	75 41                	jne    c000be22 <datetimeToSeconds(datetime_t)+0x366>
c000bde1:	89 f8                	mov    eax,edi
c000bde3:	bd 1f 85 eb 51       	mov    ebp,0x51eb851f
c000bde8:	f7 e5                	mul    ebp
c000bdea:	c1 ea 05             	shr    edx,0x5
c000bded:	8d 04 92             	lea    eax,[edx+edx*4]
c000bdf0:	8d 14 80             	lea    edx,[eax+eax*4]
c000bdf3:	b8 6e 01 00 00       	mov    eax,0x16e
c000bdf8:	c1 e2 02             	shl    edx,0x2
c000bdfb:	39 d7                	cmp    edi,edx
c000bdfd:	75 23                	jne    c000be22 <datetimeToSeconds(datetime_t)+0x366>
c000bdff:	8d bb 6d 07 00 00    	lea    edi,[ebx+0x76d]
c000be05:	89 f8                	mov    eax,edi
c000be07:	f7 e5                	mul    ebp
c000be09:	c1 ea 07             	shr    edx,0x7
c000be0c:	8d 04 92             	lea    eax,[edx+edx*4]
c000be0f:	8d 04 80             	lea    eax,[eax+eax*4]
c000be12:	c1 e0 04             	shl    eax,0x4
c000be15:	39 c7                	cmp    edi,eax
c000be17:	0f 94 c0             	sete   al
c000be1a:	0f b6 c0             	movzx  eax,al
c000be1d:	05 6d 01 00 00       	add    eax,0x16d
c000be22:	8d 7b 02             	lea    edi,[ebx+0x2]
c000be25:	01 c1                	add    ecx,eax
c000be27:	39 fe                	cmp    esi,edi
c000be29:	7e 4f                	jle    c000be7a <datetimeToSeconds(datetime_t)+0x3be>
c000be2b:	f7 c7 02 00 00 00    	test   edi,0x2
c000be31:	0f 85 a3 01 00 00    	jne    c000bfda <datetimeToSeconds(datetime_t)+0x51e>
c000be37:	89 f8                	mov    eax,edi
c000be39:	be 1f 85 eb 51       	mov    esi,0x51eb851f
c000be3e:	f7 e6                	mul    esi
c000be40:	c1 ea 05             	shr    edx,0x5
c000be43:	8d 04 92             	lea    eax,[edx+edx*4]
c000be46:	8d 14 80             	lea    edx,[eax+eax*4]
c000be49:	b8 6e 01 00 00       	mov    eax,0x16e
c000be4e:	c1 e2 02             	shl    edx,0x2
c000be51:	39 d7                	cmp    edi,edx
c000be53:	75 23                	jne    c000be78 <datetimeToSeconds(datetime_t)+0x3bc>
c000be55:	81 c3 6e 07 00 00    	add    ebx,0x76e
c000be5b:	89 d8                	mov    eax,ebx
c000be5d:	f7 e6                	mul    esi
c000be5f:	c1 ea 07             	shr    edx,0x7
c000be62:	8d 04 92             	lea    eax,[edx+edx*4]
c000be65:	8d 04 80             	lea    eax,[eax+eax*4]
c000be68:	c1 e0 04             	shl    eax,0x4
c000be6b:	39 c3                	cmp    ebx,eax
c000be6d:	0f 94 c0             	sete   al
c000be70:	0f b6 c0             	movzx  eax,al
c000be73:	05 6d 01 00 00       	add    eax,0x16d
c000be78:	01 c1                	add    ecx,eax
c000be7a:	b8 80 51 01 00       	mov    eax,0x15180
c000be7f:	f7 e9                	imul   ecx
c000be81:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c000be85:	13 54 24 3c          	adc    edx,DWORD PTR [esp+0x3c]
c000be89:	83 c4 4c             	add    esp,0x4c
c000be8c:	5b                   	pop    ebx
c000be8d:	5e                   	pop    esi
c000be8e:	5f                   	pop    edi
c000be8f:	5d                   	pop    ebp
c000be90:	c3                   	ret    
c000be91:	74 e7                	je     c000be7a <datetimeToSeconds(datetime_t)+0x3be>
c000be93:	83 fe 44             	cmp    esi,0x44
c000be96:	0f 8f 12 01 00 00    	jg     c000bfae <datetimeToSeconds(datetime_t)+0x4f2>
c000be9c:	b8 44 00 00 00       	mov    eax,0x44
c000bea1:	ba 45 00 00 00       	mov    edx,0x45
c000bea6:	29 f0                	sub    eax,esi
c000bea8:	29 f2                	sub    edx,esi
c000beaa:	83 f8 04             	cmp    eax,0x4
c000bead:	0f 86 14 02 00 00    	jbe    c000c0c7 <datetimeToSeconds(datetime_t)+0x60b>
c000beb3:	89 d0                	mov    eax,edx
c000beb5:	c1 e8 02             	shr    eax,0x2
c000beb8:	83 f8 01             	cmp    eax,0x1
c000bebb:	0f 84 58 01 00 00    	je     c000c019 <datetimeToSeconds(datetime_t)+0x55d>
c000bec1:	83 f8 02             	cmp    eax,0x2
c000bec4:	0f 84 e3 01 00 00    	je     c000c0ad <datetimeToSeconds(datetime_t)+0x5f1>
c000beca:	83 f8 03             	cmp    eax,0x3
c000becd:	0f 84 e7 01 00 00    	je     c000c0ba <datetimeToSeconds(datetime_t)+0x5fe>
c000bed3:	83 f8 04             	cmp    eax,0x4
c000bed6:	0f 84 fa 01 00 00    	je     c000c0d6 <datetimeToSeconds(datetime_t)+0x61a>
c000bedc:	83 f8 05             	cmp    eax,0x5
c000bedf:	90                   	nop
c000bee0:	0f 84 fd 01 00 00    	je     c000c0e3 <datetimeToSeconds(datetime_t)+0x627>
c000bee6:	83 f8 06             	cmp    eax,0x6
c000bee9:	0f 84 01 02 00 00    	je     c000c0f0 <datetimeToSeconds(datetime_t)+0x634>
c000beef:	83 f8 07             	cmp    eax,0x7
c000bef2:	0f 84 05 02 00 00    	je     c000c0fd <datetimeToSeconds(datetime_t)+0x641>
c000bef8:	83 f8 08             	cmp    eax,0x8
c000befb:	0f 84 25 01 00 00    	je     c000c026 <datetimeToSeconds(datetime_t)+0x56a>
c000bf01:	83 f8 09             	cmp    eax,0x9
c000bf04:	0f 84 00 02 00 00    	je     c000c10a <datetimeToSeconds(datetime_t)+0x64e>
c000bf0a:	83 f8 0a             	cmp    eax,0xa
c000bf0d:	0f 84 04 02 00 00    	je     c000c117 <datetimeToSeconds(datetime_t)+0x65b>
c000bf13:	83 f8 0b             	cmp    eax,0xb
c000bf16:	0f 84 08 02 00 00    	je     c000c124 <datetimeToSeconds(datetime_t)+0x668>
c000bf1c:	83 f8 0c             	cmp    eax,0xc
c000bf1f:	90                   	nop
c000bf20:	0f 84 0b 02 00 00    	je     c000c131 <datetimeToSeconds(datetime_t)+0x675>
c000bf26:	83 f8 0d             	cmp    eax,0xd
c000bf29:	0f 84 0f 02 00 00    	je     c000c13e <datetimeToSeconds(datetime_t)+0x682>
c000bf2f:	83 f8 0e             	cmp    eax,0xe
c000bf32:	0f 84 13 02 00 00    	je     c000c14b <datetimeToSeconds(datetime_t)+0x68f>
c000bf38:	83 f8 0f             	cmp    eax,0xf
c000bf3b:	0f 84 17 02 00 00    	je     c000c158 <datetimeToSeconds(datetime_t)+0x69c>
c000bf41:	83 f8 10             	cmp    eax,0x10
c000bf44:	0f 84 1b 02 00 00    	je     c000c165 <datetimeToSeconds(datetime_t)+0x6a9>
c000bf4a:	66 0f 6f 05 60 07 02 c0 	movdqa xmm0,XMMWORD PTR ds:0xc0020760
c000bf52:	66 0f 6f c8          	movdqa xmm1,xmm0
c000bf56:	66 0f 73 d9 08       	psrldq xmm1,0x8
c000bf5b:	89 d3                	mov    ebx,edx
c000bf5d:	66 0f fe c1          	paddd  xmm0,xmm1
c000bf61:	83 e3 fc             	and    ebx,0xfffffffc
c000bf64:	66 0f 6f c8          	movdqa xmm1,xmm0
c000bf68:	66 0f 73 d9 04       	psrldq xmm1,0x4
c000bf6d:	66 0f fe c1          	paddd  xmm0,xmm1
c000bf71:	66 0f 7e c0          	movd   eax,xmm0
c000bf75:	01 c1                	add    ecx,eax
c000bf77:	b8 45 00 00 00       	mov    eax,0x45
c000bf7c:	29 d8                	sub    eax,ebx
c000bf7e:	39 da                	cmp    edx,ebx
c000bf80:	74 1b                	je     c000bf9d <datetimeToSeconds(datetime_t)+0x4e1>
c000bf82:	a8 03                	test   al,0x3
c000bf84:	0f 85 a9 00 00 00    	jne    c000c033 <datetimeToSeconds(datetime_t)+0x577>
c000bf8a:	85 c0                	test   eax,eax
c000bf8c:	ba 6e 01 00 00       	mov    edx,0x16e
c000bf91:	0f 85 a1 00 00 00    	jne    c000c038 <datetimeToSeconds(datetime_t)+0x57c>
c000bf97:	81 e9 6d 01 00 00    	sub    ecx,0x16d
c000bf9d:	f7 c6 03 00 00 00    	test   esi,0x3
c000bfa3:	75 09                	jne    c000bfae <datetimeToSeconds(datetime_t)+0x4f2>
c000bfa5:	85 f6                	test   esi,esi
c000bfa7:	b8 6e 01 00 00       	mov    eax,0x16e
c000bfac:	75 05                	jne    c000bfb3 <datetimeToSeconds(datetime_t)+0x4f7>
c000bfae:	b8 6d 01 00 00       	mov    eax,0x16d
c000bfb3:	29 c1                	sub    ecx,eax
c000bfb5:	e9 c0 fe ff ff       	jmp    c000be7a <datetimeToSeconds(datetime_t)+0x3be>
c000bfba:	89 f0                	mov    eax,esi
c000bfbc:	bb 1f 85 eb 51       	mov    ebx,0x51eb851f
c000bfc1:	f7 e3                	mul    ebx
c000bfc3:	c1 ea 05             	shr    edx,0x5
c000bfc6:	8d 04 92             	lea    eax,[edx+edx*4]
c000bfc9:	8d 04 80             	lea    eax,[eax+eax*4]
c000bfcc:	c1 e0 02             	shl    eax,0x2
c000bfcf:	66 39 c6             	cmp    si,ax
c000bfd2:	74 12                	je     c000bfe6 <datetimeToSeconds(datetime_t)+0x52a>
c000bfd4:	41                   	inc    ecx
c000bfd5:	e9 54 fb ff ff       	jmp    c000bb2e <datetimeToSeconds(datetime_t)+0x72>
c000bfda:	b8 6d 01 00 00       	mov    eax,0x16d
c000bfdf:	01 c1                	add    ecx,eax
c000bfe1:	e9 94 fe ff ff       	jmp    c000be7a <datetimeToSeconds(datetime_t)+0x3be>
c000bfe6:	8d be 6c 07 00 00    	lea    edi,[esi+0x76c]
c000bfec:	89 f8                	mov    eax,edi
c000bfee:	f7 e3                	mul    ebx
c000bff0:	c1 ea 07             	shr    edx,0x7
c000bff3:	8d 04 92             	lea    eax,[edx+edx*4]
c000bff6:	8d 04 80             	lea    eax,[eax+eax*4]
c000bff9:	c1 e0 04             	shl    eax,0x4
c000bffc:	39 c7                	cmp    edi,eax
c000bffe:	0f 85 2a fb ff ff    	jne    c000bb2e <datetimeToSeconds(datetime_t)+0x72>
c000c004:	41                   	inc    ecx
c000c005:	e9 24 fb ff ff       	jmp    c000bb2e <datetimeToSeconds(datetime_t)+0x72>
c000c00a:	bb 46 00 00 00       	mov    ebx,0x46
c000c00f:	b8 6d 01 00 00       	mov    eax,0x16d
c000c014:	e9 ae fd ff ff       	jmp    c000bdc7 <datetimeToSeconds(datetime_t)+0x30b>
c000c019:	66 0f 6f 05 90 07 02 c0 	movdqa xmm0,XMMWORD PTR ds:0xc0020790
c000c021:	e9 2c ff ff ff       	jmp    c000bf52 <datetimeToSeconds(datetime_t)+0x496>
c000c026:	66 0f 6f 05 00 08 02 c0 	movdqa xmm0,XMMWORD PTR ds:0xc0020800
c000c02e:	e9 1f ff ff ff       	jmp    c000bf52 <datetimeToSeconds(datetime_t)+0x496>
c000c033:	ba 6d 01 00 00       	mov    edx,0x16d
c000c038:	29 d1                	sub    ecx,edx
c000c03a:	8d 50 ff             	lea    edx,[eax-0x1]
c000c03d:	39 f2                	cmp    edx,esi
c000c03f:	0f 8e 58 ff ff ff    	jle    c000bf9d <datetimeToSeconds(datetime_t)+0x4e1>
c000c045:	f6 c2 03             	test   dl,0x3
c000c048:	0f 94 c2             	sete   dl
c000c04b:	0f b6 d2             	movzx  edx,dl
c000c04e:	81 c2 6d 01 00 00    	add    edx,0x16d
c000c054:	29 d1                	sub    ecx,edx
c000c056:	8d 50 fe             	lea    edx,[eax-0x2]
c000c059:	39 f2                	cmp    edx,esi
c000c05b:	0f 8e 3c ff ff ff    	jle    c000bf9d <datetimeToSeconds(datetime_t)+0x4e1>
c000c061:	f6 c2 03             	test   dl,0x3
c000c064:	0f 94 c2             	sete   dl
c000c067:	0f b6 d2             	movzx  edx,dl
c000c06a:	81 c2 6d 01 00 00    	add    edx,0x16d
c000c070:	29 d1                	sub    ecx,edx
c000c072:	8d 50 fd             	lea    edx,[eax-0x3]
c000c075:	39 f2                	cmp    edx,esi
c000c077:	0f 8e 20 ff ff ff    	jle    c000bf9d <datetimeToSeconds(datetime_t)+0x4e1>
c000c07d:	f6 c2 03             	test   dl,0x3
c000c080:	0f 94 c2             	sete   dl
c000c083:	83 e8 04             	sub    eax,0x4
c000c086:	0f b6 d2             	movzx  edx,dl
c000c089:	81 c2 6d 01 00 00    	add    edx,0x16d
c000c08f:	29 d1                	sub    ecx,edx
c000c091:	39 f0                	cmp    eax,esi
c000c093:	0f 8e 04 ff ff ff    	jle    c000bf9d <datetimeToSeconds(datetime_t)+0x4e1>
c000c099:	a8 03                	test   al,0x3
c000c09b:	0f 94 c0             	sete   al
c000c09e:	0f b6 c0             	movzx  eax,al
c000c0a1:	05 6d 01 00 00       	add    eax,0x16d
c000c0a6:	29 c1                	sub    ecx,eax
c000c0a8:	e9 f0 fe ff ff       	jmp    c000bf9d <datetimeToSeconds(datetime_t)+0x4e1>
c000c0ad:	66 0f 6f 05 a0 07 02 c0 	movdqa xmm0,XMMWORD PTR ds:0xc00207a0
c000c0b5:	e9 98 fe ff ff       	jmp    c000bf52 <datetimeToSeconds(datetime_t)+0x496>
c000c0ba:	66 0f 6f 05 b0 07 02 c0 	movdqa xmm0,XMMWORD PTR ds:0xc00207b0
c000c0c2:	e9 8b fe ff ff       	jmp    c000bf52 <datetimeToSeconds(datetime_t)+0x496>
c000c0c7:	b8 45 00 00 00       	mov    eax,0x45
c000c0cc:	ba 6d 01 00 00       	mov    edx,0x16d
c000c0d1:	e9 62 ff ff ff       	jmp    c000c038 <datetimeToSeconds(datetime_t)+0x57c>
c000c0d6:	66 0f 6f 05 c0 07 02 c0 	movdqa xmm0,XMMWORD PTR ds:0xc00207c0
c000c0de:	e9 6f fe ff ff       	jmp    c000bf52 <datetimeToSeconds(datetime_t)+0x496>
c000c0e3:	66 0f 6f 05 d0 07 02 c0 	movdqa xmm0,XMMWORD PTR ds:0xc00207d0
c000c0eb:	e9 62 fe ff ff       	jmp    c000bf52 <datetimeToSeconds(datetime_t)+0x496>
c000c0f0:	66 0f 6f 05 e0 07 02 c0 	movdqa xmm0,XMMWORD PTR ds:0xc00207e0
c000c0f8:	e9 55 fe ff ff       	jmp    c000bf52 <datetimeToSeconds(datetime_t)+0x496>
c000c0fd:	66 0f 6f 05 f0 07 02 c0 	movdqa xmm0,XMMWORD PTR ds:0xc00207f0
c000c105:	e9 48 fe ff ff       	jmp    c000bf52 <datetimeToSeconds(datetime_t)+0x496>
c000c10a:	66 0f 6f 05 10 08 02 c0 	movdqa xmm0,XMMWORD PTR ds:0xc0020810
c000c112:	e9 3b fe ff ff       	jmp    c000bf52 <datetimeToSeconds(datetime_t)+0x496>
c000c117:	66 0f 6f 05 20 08 02 c0 	movdqa xmm0,XMMWORD PTR ds:0xc0020820
c000c11f:	e9 2e fe ff ff       	jmp    c000bf52 <datetimeToSeconds(datetime_t)+0x496>
c000c124:	66 0f 6f 05 30 08 02 c0 	movdqa xmm0,XMMWORD PTR ds:0xc0020830
c000c12c:	e9 21 fe ff ff       	jmp    c000bf52 <datetimeToSeconds(datetime_t)+0x496>
c000c131:	66 0f 6f 05 40 08 02 c0 	movdqa xmm0,XMMWORD PTR ds:0xc0020840
c000c139:	e9 14 fe ff ff       	jmp    c000bf52 <datetimeToSeconds(datetime_t)+0x496>
c000c13e:	66 0f 6f 05 50 08 02 c0 	movdqa xmm0,XMMWORD PTR ds:0xc0020850
c000c146:	e9 07 fe ff ff       	jmp    c000bf52 <datetimeToSeconds(datetime_t)+0x496>
c000c14b:	66 0f 6f 05 70 07 02 c0 	movdqa xmm0,XMMWORD PTR ds:0xc0020770
c000c153:	e9 fa fd ff ff       	jmp    c000bf52 <datetimeToSeconds(datetime_t)+0x496>
c000c158:	66 0f 6f 05 80 07 02 c0 	movdqa xmm0,XMMWORD PTR ds:0xc0020780
c000c160:	e9 ed fd ff ff       	jmp    c000bf52 <datetimeToSeconds(datetime_t)+0x496>
c000c165:	66 0f 6f 05 60 08 02 c0 	movdqa xmm0,XMMWORD PTR ds:0xc0020860
c000c16d:	e9 e0 fd ff ff       	jmp    c000bf52 <datetimeToSeconds(datetime_t)+0x496>

c000c172 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c172:	83 ec 1c             	sub    esp,0x1c
c000c175:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000c179:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c17d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c181:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c185:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c189:	8b 06                	mov    eax,DWORD PTR [esi]
c000c18b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c18e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c192:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c196:	89 04 24             	mov    DWORD PTR [esp],eax
c000c199:	e8 1e f9 ff ff       	call   c000babc <datetimeToSeconds(datetime_t)>
c000c19e:	8b 1d bc 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fbc
c000c1a4:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000c1ab:	01 d9                	add    ecx,ebx
c000c1ad:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c1b3:	89 cb                	mov    ebx,ecx
c000c1b5:	c1 fb 1f             	sar    ebx,0x1f
c000c1b8:	29 c8                	sub    eax,ecx
c000c1ba:	19 da                	sbb    edx,ebx
c000c1bc:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000c1c3:	74 08                	je     c000c1cd <Clock::setTimeInDatetimeLocal(datetime_t)+0x5b>
c000c1c5:	05 f8 f8 ff ff       	add    eax,0xfffff8f8
c000c1ca:	83 d2 ff             	adc    edx,0xffffffff
c000c1cd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c1d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c1d5:	89 f8                	mov    eax,edi
c000c1d7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000c1db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c1df:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c1e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c1e7:	83 c4 1c             	add    esp,0x1c
c000c1ea:	ff e0                	jmp    eax

c000c1ec <secondsToDatetime(unsigned long long)>:
c000c1ec:	55                   	push   ebp
c000c1ed:	31 d2                	xor    edx,edx
c000c1ef:	57                   	push   edi
c000c1f0:	b8 80 51 01 00       	mov    eax,0x15180
c000c1f5:	56                   	push   esi
c000c1f6:	53                   	push   ebx
c000c1f7:	83 ec 2c             	sub    esp,0x2c
c000c1fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fe:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000c202:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c206:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000c20a:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000c20e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c211:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000c215:	e8 36 28 01 00       	call   c001ea50 <__udivdi3>
c000c21a:	b9 80 51 01 00       	mov    ecx,0x15180
c000c21f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000c226:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000c22a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c22e:	8d a8 6c fa 0a 00    	lea    ebp,[eax+0xafa6c]
c000c234:	31 c0                	xor    eax,eax
c000c236:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c23a:	e8 11 29 01 00       	call   c001eb50 <__umoddi3>
c000c23f:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000c244:	89 c3                	mov    ebx,eax
c000c246:	89 d8                	mov    eax,ebx
c000c248:	f7 e2                	mul    edx
c000c24a:	c1 ea 0b             	shr    edx,0xb
c000c24d:	88 57 04             	mov    BYTE PTR [edi+0x4],dl
c000c250:	69 d2 10 0e 00 00    	imul   edx,edx,0xe10
c000c256:	29 d3                	sub    ebx,edx
c000c258:	ba 89 88 88 88       	mov    edx,0x88888889
c000c25d:	89 d8                	mov    eax,ebx
c000c25f:	f7 e2                	mul    edx
c000c261:	c1 ea 05             	shr    edx,0x5
c000c264:	88 57 05             	mov    BYTE PTR [edi+0x5],dl
c000c267:	89 d0                	mov    eax,edx
c000c269:	c1 e0 04             	shl    eax,0x4
c000c26c:	29 d0                	sub    eax,edx
c000c26e:	c1 e0 02             	shl    eax,0x2
c000c271:	29 c3                	sub    ebx,eax
c000c273:	85 ed                	test   ebp,ebp
c000c275:	88 5f 06             	mov    BYTE PTR [edi+0x6],bl
c000c278:	0f 88 f7 00 00 00    	js     c000c375 <secondsToDatetime(unsigned long long)+0x189>
c000c27e:	89 e8                	mov    eax,ebp
c000c280:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000c285:	f7 ea                	imul   edx
c000c287:	89 e8                	mov    eax,ebp
c000c289:	c1 f8 1f             	sar    eax,0x1f
c000c28c:	c1 fa 0f             	sar    edx,0xf
c000c28f:	29 c2                	sub    edx,eax
c000c291:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c295:	69 5c 24 1c 4f c5 fd ff 	imul   ebx,DWORD PTR [esp+0x1c],0xfffdc54f
c000c29d:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c000c2a2:	01 eb                	add    ebx,ebp
c000c2a4:	bd d9 7c c6 59       	mov    ebp,0x59c67cd9
c000c2a9:	89 de                	mov    esi,ebx
c000c2ab:	c1 ee 02             	shr    esi,0x2
c000c2ae:	89 f0                	mov    eax,esi
c000c2b0:	f7 e2                	mul    edx
c000c2b2:	89 f0                	mov    eax,esi
c000c2b4:	c1 ea 0b             	shr    edx,0xb
c000c2b7:	8d 0c 1a             	lea    ecx,[edx+ebx*1]
c000c2ba:	f7 e5                	mul    ebp
c000c2bc:	89 d8                	mov    eax,ebx
c000c2be:	c1 e8 04             	shr    eax,0x4
c000c2c1:	c1 ea 07             	shr    edx,0x7
c000c2c4:	29 d1                	sub    ecx,edx
c000c2c6:	ba 41 d6 72 00       	mov    edx,0x72d641
c000c2cb:	f7 e2                	mul    edx
c000c2cd:	c1 ea 04             	shr    edx,0x4
c000c2d0:	29 d1                	sub    ecx,edx
c000c2d2:	ba 61 f3 19 67       	mov    edx,0x6719f361
c000c2d7:	89 c8                	mov    eax,ecx
c000c2d9:	89 ce                	mov    esi,ecx
c000c2db:	f7 e2                	mul    edx
c000c2dd:	89 c8                	mov    eax,ecx
c000c2df:	c1 e9 02             	shr    ecx,0x2
c000c2e2:	29 d6                	sub    esi,edx
c000c2e4:	d1 ee                	shr    esi,1
c000c2e6:	01 d6                	add    esi,edx
c000c2e8:	ba 1f 2b d3 e5       	mov    edx,0xe5d32b1f
c000c2ed:	f7 e2                	mul    edx
c000c2ef:	89 c8                	mov    eax,ecx
c000c2f1:	c1 ee 08             	shr    esi,0x8
c000c2f4:	c1 ea 0f             	shr    edx,0xf
c000c2f7:	01 d3                	add    ebx,edx
c000c2f9:	f7 e5                	mul    ebp
c000c2fb:	8d 04 f6             	lea    eax,[esi+esi*8]
c000c2fe:	8d 04 c6             	lea    eax,[esi+eax*8]
c000c301:	8d 04 80             	lea    eax,[eax+eax*4]
c000c304:	c1 ea 07             	shr    edx,0x7
c000c307:	29 d3                	sub    ebx,edx
c000c309:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c000c30e:	29 c3                	sub    ebx,eax
c000c310:	8d 6c 9b 02          	lea    ebp,[ebx+ebx*4+0x2]
c000c314:	43                   	inc    ebx
c000c315:	89 e8                	mov    eax,ebp
c000c317:	f7 e2                	mul    edx
c000c319:	c1 ea 07             	shr    edx,0x7
c000c31c:	8d 04 d2             	lea    eax,[edx+edx*8]
c000c31f:	89 d1                	mov    ecx,edx
c000c321:	89 c2                	mov    edx,eax
c000c323:	c1 e2 04             	shl    edx,0x4
c000c326:	8d 44 10 02          	lea    eax,[eax+edx*1+0x2]
c000c32a:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000c32f:	f7 e2                	mul    edx
c000c331:	c1 ea 02             	shr    edx,0x2
c000c334:	29 d3                	sub    ebx,edx
c000c336:	81 fd fa 05 00 00    	cmp    ebp,0x5fa
c000c33c:	88 1f                	mov    BYTE PTR [edi],bl
c000c33e:	19 c0                	sbb    eax,eax
c000c340:	83 e0 0c             	and    eax,0xc
c000c343:	8d 44 08 f6          	lea    eax,[eax+ecx*1-0xa]
c000c347:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000c34b:	8d 14 89             	lea    edx,[ecx+ecx*4]
c000c34e:	31 c9                	xor    ecx,ecx
c000c350:	8d 14 92             	lea    edx,[edx+edx*4]
c000c353:	c1 e2 04             	shl    edx,0x4
c000c356:	01 d6                	add    esi,edx
c000c358:	83 f8 01             	cmp    eax,0x1
c000c35b:	0f 96 c1             	setbe  cl
c000c35e:	fe c0                	inc    al
c000c360:	88 47 01             	mov    BYTE PTR [edi+0x1],al
c000c363:	01 ce                	add    esi,ecx
c000c365:	89 f8                	mov    eax,edi
c000c367:	66 89 77 02          	mov    WORD PTR [edi+0x2],si
c000c36b:	83 c4 2c             	add    esp,0x2c
c000c36e:	5b                   	pop    ebx
c000c36f:	5e                   	pop    esi
c000c370:	5f                   	pop    edi
c000c371:	5d                   	pop    ebp
c000c372:	c2 04 00             	ret    0x4
c000c375:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000c379:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000c37e:	81 c1 bc bf 08 00    	add    ecx,0x8bfbc
c000c384:	89 c8                	mov    eax,ecx
c000c386:	f7 ea                	imul   edx
c000c388:	c1 f9 1f             	sar    ecx,0x1f
c000c38b:	c1 fa 0f             	sar    edx,0xf
c000c38e:	29 ca                	sub    edx,ecx
c000c390:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c394:	e9 fc fe ff ff       	jmp    c000c295 <secondsToDatetime(unsigned long long)+0xa9>
c000c399:	90                   	nop

c000c39a <Clock::timeInDatetimeLocal()>:
c000c39a:	53                   	push   ebx
c000c39b:	83 ec 18             	sub    esp,0x18
c000c39e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c3a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c3a6:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3a9:	e8 5e f6 ff ff       	call   c000ba0c <Clock::timeInSecondsLocal()>
c000c3ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c3b1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c3b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c3b9:	e8 2e fe ff ff       	call   c000c1ec <secondsToDatetime(unsigned long long)>
c000c3be:	89 d8                	mov    eax,ebx
c000c3c0:	83 ec 04             	sub    esp,0x4
c000c3c3:	83 c4 18             	add    esp,0x18
c000c3c6:	5b                   	pop    ebx
c000c3c7:	c2 04 00             	ret    0x4

c000c3ca <Device::hibernate()>:
c000c3ca:	c3                   	ret    
c000c3cb:	90                   	nop

c000c3cc <Device::wake()>:
c000c3cc:	c3                   	ret    
c000c3cd:	90                   	nop

c000c3ce <Device::detect()>:
c000c3ce:	c3                   	ret    
c000c3cf:	90                   	nop

c000c3d0 <Device::disableLegacy()>:
c000c3d0:	c3                   	ret    
c000c3d1:	90                   	nop

c000c3d2 <Device::powerSaving(PowerSavingLevel)>:
c000c3d2:	c3                   	ret    
c000c3d3:	90                   	nop

c000c3d4 <DriverlessDevice::close(int, int, void*)>:
c000c3d4:	31 c0                	xor    eax,eax
c000c3d6:	c3                   	ret    
c000c3d7:	90                   	nop

c000c3d8 <DriverlessDevice::detect()>:
c000c3d8:	c3                   	ret    
c000c3d9:	90                   	nop

c000c3da <DriverlessDevice::open(int, int, void*)>:
c000c3da:	83 ec 18             	sub    esp,0x18
c000c3dd:	68 d0 08 02 c0       	push   0xc00208d0
c000c3e2:	e8 4e 4a 00 00       	call   c0010e35 <KePanic(char const*)>
c000c3e7:	83 c8 ff             	or     eax,0xffffffff
c000c3ea:	83 c4 1c             	add    esp,0x1c
c000c3ed:	c3                   	ret    

c000c3ee <Device::~Device()>:
c000c3ee:	ba 30 09 02 c0       	mov    edx,0xc0020930
c000c3f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c3f7:	89 10                	mov    DWORD PTR [eax],edx
c000c3f9:	90                   	nop
c000c3fa:	c3                   	ret    
c000c3fb:	90                   	nop

c000c3fc <Device::~Device()>:
c000c3fc:	83 ec 1c             	sub    esp,0x1c
c000c3ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c403:	89 04 24             	mov    DWORD PTR [esp],eax
c000c406:	e8 e3 ff ff ff       	call   c000c3ee <Device::~Device()>
c000c40b:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000c413:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c417:	89 04 24             	mov    DWORD PTR [esp],eax
c000c41a:	e8 3d e5 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000c41f:	83 c4 1c             	add    esp,0x1c
c000c422:	c3                   	ret    
c000c423:	90                   	nop

c000c424 <Device::findAndLoadDriver()>:
c000c424:	c7 44 24 04 ee 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc00208ee
c000c42c:	e9 45 e6 ff ff       	jmp    c000aa76 <Dbg::kprintf(char const*, ...)>
c000c431:	90                   	nop

c000c432 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c432:	57                   	push   edi
c000c433:	b9 09 00 00 00       	mov    ecx,0x9
c000c438:	56                   	push   esi
c000c439:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c43d:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c441:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c44b:	81 c7 18 01 00 00    	add    edi,0x118
c000c451:	fc                   	cld    
c000c452:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c454:	5e                   	pop    esi
c000c455:	5f                   	pop    edi
c000c456:	c3                   	ret    
c000c457:	90                   	nop

c000c458 <Device::preOpenACPI(void*, char*, char*)>:
c000c458:	57                   	push   edi
c000c459:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c45e:	56                   	push   esi
c000c45f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c463:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c467:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c46b:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c475:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c47b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c481:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c483:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c489:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c48d:	b9 0e 00 00 00       	mov    ecx,0xe
c000c492:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c494:	5e                   	pop    esi
c000c495:	5f                   	pop    edi
c000c496:	c3                   	ret    
c000c497:	90                   	nop

c000c498 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c498:	53                   	push   ebx
c000c499:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c49d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c4a1:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000c4a6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c4aa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c4ae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c4b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c4b6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c4ba:	5b                   	pop    ebx
c000c4bb:	e9 94 05 00 00       	jmp    c000ca54 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c4c0 <Device::getParent()>:
c000c4c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4c4:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c4ca:	c3                   	ret    
c000c4cb:	90                   	nop

c000c4cc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c4cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c4d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c4d4:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c4d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c4dd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c4e1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c4e5:	e9 de 06 00 00       	jmp    c000cbc8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c4ea <Device::addChild(Device*)>:
c000c4ea:	53                   	push   ebx
c000c4eb:	83 ec 08             	sub    esp,0x8
c000c4ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c4f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c4f6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c4fc:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c502:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c504:	85 d2                	test   edx,edx
c000c506:	74 04                	je     c000c50c <Device::addChild(Device*)+0x22>
c000c508:	89 d3                	mov    ebx,edx
c000c50a:	eb f6                	jmp    c000c502 <Device::addChild(Device*)+0x18>
c000c50c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c50f:	83 ec 0c             	sub    esp,0xc
c000c512:	6a 08                	push   0x8
c000c514:	e8 e3 b5 ff ff       	call   c0007afc <malloc>
c000c519:	89 03                	mov    DWORD PTR [ebx],eax
c000c51b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c521:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c528:	83 c4 18             	add    esp,0x18
c000c52b:	5b                   	pop    ebx
c000c52c:	c3                   	ret    
c000c52d:	90                   	nop

c000c52e <Device::removeAllChildren()>:
c000c52e:	56                   	push   esi
c000c52f:	53                   	push   ebx
c000c530:	52                   	push   edx
c000c531:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c535:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c53b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c53e:	74 17                	je     c000c557 <Device::removeAllChildren()+0x29>
c000c540:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c543:	85 c0                	test   eax,eax
c000c545:	74 0c                	je     c000c553 <Device::removeAllChildren()+0x25>
c000c547:	8b 10                	mov    edx,DWORD PTR [eax]
c000c549:	83 ec 0c             	sub    esp,0xc
c000c54c:	50                   	push   eax
c000c54d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c550:	83 c4 10             	add    esp,0x10
c000c553:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c555:	eb e4                	jmp    c000c53b <Device::removeAllChildren()+0xd>
c000c557:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c55d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c563:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c569:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c570:	58                   	pop    eax
c000c571:	5b                   	pop    ebx
c000c572:	5e                   	pop    esi
c000c573:	c3                   	ret    

c000c574 <Device::hibernateAll()>:
c000c574:	53                   	push   ebx
c000c575:	83 ec 14             	sub    esp,0x14
c000c578:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c57c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c57e:	53                   	push   ebx
c000c57f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c582:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c588:	83 c4 10             	add    esp,0x10
c000c58b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c58e:	74 0f                	je     c000c59f <Device::hibernateAll()+0x2b>
c000c590:	83 ec 0c             	sub    esp,0xc
c000c593:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c596:	e8 d9 ff ff ff       	call   c000c574 <Device::hibernateAll()>
c000c59b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c59d:	eb e9                	jmp    c000c588 <Device::hibernateAll()+0x14>
c000c59f:	83 c4 08             	add    esp,0x8
c000c5a2:	5b                   	pop    ebx
c000c5a3:	c3                   	ret    

c000c5a4 <Device::wakeAll()>:
c000c5a4:	53                   	push   ebx
c000c5a5:	83 ec 14             	sub    esp,0x14
c000c5a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c5ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c5ae:	53                   	push   ebx
c000c5af:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c5b2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c5b8:	83 c4 10             	add    esp,0x10
c000c5bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c5be:	74 0f                	je     c000c5cf <Device::wakeAll()+0x2b>
c000c5c0:	83 ec 0c             	sub    esp,0xc
c000c5c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c5c6:	e8 d9 ff ff ff       	call   c000c5a4 <Device::wakeAll()>
c000c5cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c5cd:	eb e9                	jmp    c000c5b8 <Device::wakeAll()+0x14>
c000c5cf:	83 c4 08             	add    esp,0x8
c000c5d2:	5b                   	pop    ebx
c000c5d3:	c3                   	ret    

c000c5d4 <Device::detectAll()>:
c000c5d4:	53                   	push   ebx
c000c5d5:	83 ec 14             	sub    esp,0x14
c000c5d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c5dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c5de:	53                   	push   ebx
c000c5df:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c5e2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c5e8:	83 c4 10             	add    esp,0x10
c000c5eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c5ee:	74 0f                	je     c000c5ff <Device::detectAll()+0x2b>
c000c5f0:	83 ec 0c             	sub    esp,0xc
c000c5f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c5f6:	e8 d9 ff ff ff       	call   c000c5d4 <Device::detectAll()>
c000c5fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c5fd:	eb e9                	jmp    c000c5e8 <Device::detectAll()+0x14>
c000c5ff:	83 c4 08             	add    esp,0x8
c000c602:	5b                   	pop    ebx
c000c603:	c3                   	ret    

c000c604 <Device::disableLegacyAll()>:
c000c604:	c3                   	ret    
c000c605:	90                   	nop

c000c606 <Device::loadDriversForAll()>:
c000c606:	c3                   	ret    
c000c607:	90                   	nop

c000c608 <Device::closeAll()>:
c000c608:	53                   	push   ebx
c000c609:	83 ec 08             	sub    esp,0x8
c000c60c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c610:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c612:	6a 00                	push   0x0
c000c614:	6a 00                	push   0x0
c000c616:	6a 00                	push   0x0
c000c618:	53                   	push   ebx
c000c619:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c61c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c622:	83 c4 10             	add    esp,0x10
c000c625:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c628:	74 0f                	je     c000c639 <Device::closeAll()+0x31>
c000c62a:	83 ec 0c             	sub    esp,0xc
c000c62d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c630:	e8 d3 ff ff ff       	call   c000c608 <Device::closeAll()>
c000c635:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c637:	eb e9                	jmp    c000c622 <Device::closeAll()+0x1a>
c000c639:	83 c4 08             	add    esp,0x8
c000c63c:	5b                   	pop    ebx
c000c63d:	c3                   	ret    

c000c63e <Device::powerSavingAll(PowerSavingLevel)>:
c000c63e:	56                   	push   esi
c000c63f:	53                   	push   ebx
c000c640:	83 ec 0c             	sub    esp,0xc
c000c643:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c647:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c64b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c64d:	56                   	push   esi
c000c64e:	53                   	push   ebx
c000c64f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c652:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c658:	83 c4 10             	add    esp,0x10
c000c65b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c65e:	74 0f                	je     c000c66f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c660:	52                   	push   edx
c000c661:	52                   	push   edx
c000c662:	56                   	push   esi
c000c663:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c666:	e8 d3 ff ff ff       	call   c000c63e <Device::powerSavingAll(PowerSavingLevel)>
c000c66b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c66d:	eb e9                	jmp    c000c658 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c66f:	58                   	pop    eax
c000c670:	5b                   	pop    ebx
c000c671:	5e                   	pop    esi
c000c672:	c3                   	ret    
c000c673:	90                   	nop

c000c674 <Device::setName(char const*)>:
c000c674:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c67c:	e9 9f 40 ff ff       	jmp    c0000720 <strcpy>
c000c681:	90                   	nop

c000c682 <Device::Device(char const*)>:
c000c682:	83 ec 2c             	sub    esp,0x2c
c000c685:	ba 30 09 02 c0       	mov    edx,0xc0020930
c000c68a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c68e:	89 10                	mov    DWORD PTR [eax],edx
c000c690:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c694:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6a2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c6ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6b0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c6ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6be:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c6c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c6cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c6d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000c6d7:	e8 98 ff ff ff       	call   c000c674 <Device::setName(char const*)>
c000c6dc:	c7 44 24 1c 08 00 00 00 	mov    DWORD PTR [esp+0x1c],0x8
c000c6e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c6e8:	89 04 24             	mov    DWORD PTR [esp],eax
c000c6eb:	e8 0c b4 ff ff       	call   c0007afc <malloc>
c000c6f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c6f6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c6fd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c701:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c707:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c70b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c711:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c717:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c71b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c721:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c728:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c72c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c733:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c737:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c73e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c742:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c74c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c750:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c75a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c75e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c76c:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c776:	90                   	nop
c000c777:	83 c4 2c             	add    esp,0x2c
c000c77a:	c3                   	ret    
c000c77b:	90                   	nop

c000c77c <Device::getName()>:
c000c77c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c780:	05 d0 00 00 00       	add    eax,0xd0
c000c785:	c3                   	ret    

c000c786 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c786:	83 ec 1c             	sub    esp,0x1c
c000c789:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c78d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c791:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c795:	89 04 24             	mov    DWORD PTR [esp],eax
c000c798:	e8 e5 fe ff ff       	call   c000c682 <Device::Device(char const*)>
c000c79d:	ba 5c 09 02 c0       	mov    edx,0xc002095c
c000c7a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7a6:	89 10                	mov    DWORD PTR [eax],edx
c000c7a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7ac:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c7b6:	90                   	nop
c000c7b7:	83 c4 1c             	add    esp,0x1c
c000c7ba:	c3                   	ret    
c000c7bb:	90                   	nop

c000c7bc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c7bc:	57                   	push   edi
c000c7bd:	56                   	push   esi
c000c7be:	53                   	push   ebx
c000c7bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c7c3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c7c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c7cb:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c7d1:	75 0c                	jne    c000c7df <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c7d3:	52                   	push   edx
c000c7d4:	52                   	push   edx
c000c7d5:	53                   	push   ebx
c000c7d6:	56                   	push   esi
c000c7d7:	e8 0a 27 01 00       	call   c001eee6 <LinkedList<Device>::addElement(Device*)>
c000c7dc:	83 c4 10             	add    esp,0x10
c000c7df:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7e8:	74 12                	je     c000c7fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c7ea:	50                   	push   eax
c000c7eb:	57                   	push   edi
c000c7ec:	56                   	push   esi
c000c7ed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7f0:	e8 c7 ff ff ff       	call   c000c7bc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c7f5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7f7:	83 c4 10             	add    esp,0x10
c000c7fa:	eb e9                	jmp    c000c7e5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c7fc:	5b                   	pop    ebx
c000c7fd:	5e                   	pop    esi
c000c7fe:	5f                   	pop    edi
c000c7ff:	c3                   	ret    

c000c800 <getDevicesOfType(DeviceType)>:
c000c800:	53                   	push   ebx
c000c801:	83 ec 14             	sub    esp,0x14
c000c804:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c808:	53                   	push   ebx
c000c809:	e8 a8 27 01 00       	call   c001efb6 <LinkedList<Device>::LinkedList()>
c000c80e:	83 c4 0c             	add    esp,0xc
c000c811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c815:	53                   	push   ebx
c000c816:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c81c:	e8 9b ff ff ff       	call   c000c7bc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c821:	83 c4 18             	add    esp,0x18
c000c824:	89 d8                	mov    eax,ebx
c000c826:	5b                   	pop    ebx
c000c827:	c2 04 00             	ret    0x4
c000c82a:	66 90                	xchg   ax,ax

c000c82c <HardDiskController::HardDiskController(char const*)>:
c000c82c:	83 ec 1c             	sub    esp,0x1c
c000c82f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c833:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c837:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c83b:	89 04 24             	mov    DWORD PTR [esp],eax
c000c83e:	e8 3f fe ff ff       	call   c000c682 <Device::Device(char const*)>
c000c843:	ba 88 09 02 c0       	mov    edx,0xc0020988
c000c848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c84c:	89 10                	mov    DWORD PTR [eax],edx
c000c84e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c852:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c85c:	90                   	nop
c000c85d:	83 c4 1c             	add    esp,0x1c
c000c860:	c3                   	ret    
c000c861:	90                   	nop
c000c862:	66 90                	xchg   ax,ax

c000c864 <HardDiskController::~HardDiskController()>:
c000c864:	83 ec 1c             	sub    esp,0x1c
c000c867:	ba 88 09 02 c0       	mov    edx,0xc0020988
c000c86c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c870:	89 10                	mov    DWORD PTR [eax],edx
c000c872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c876:	89 04 24             	mov    DWORD PTR [esp],eax
c000c879:	e8 70 fb ff ff       	call   c000c3ee <Device::~Device()>
c000c87e:	90                   	nop
c000c87f:	83 c4 1c             	add    esp,0x1c
c000c882:	c3                   	ret    
c000c883:	90                   	nop

c000c884 <HardDiskController::~HardDiskController()>:
c000c884:	83 ec 1c             	sub    esp,0x1c
c000c887:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c88b:	89 04 24             	mov    DWORD PTR [esp],eax
c000c88e:	e8 d1 ff ff ff       	call   c000c864 <HardDiskController::~HardDiskController()>
c000c893:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000c89b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c89f:	89 04 24             	mov    DWORD PTR [esp],eax
c000c8a2:	e8 b5 e0 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000c8a7:	83 c4 1c             	add    esp,0x1c
c000c8aa:	c3                   	ret    
c000c8ab:	90                   	nop

c000c8ac <PhysicalDisk::eject()>:
c000c8ac:	83 c8 ff             	or     eax,0xffffffff
c000c8af:	c3                   	ret    

c000c8b0 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c8b0:	83 ec 1c             	sub    esp,0x1c
c000c8b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8b7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c8bb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c8bf:	89 04 24             	mov    DWORD PTR [esp],eax
c000c8c2:	e8 bb fd ff ff       	call   c000c682 <Device::Device(char const*)>
c000c8c7:	ba b4 09 02 c0       	mov    edx,0xc00209b4
c000c8cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8d0:	89 10                	mov    DWORD PTR [eax],edx
c000c8d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8d6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c8dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8e1:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c8e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8ec:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c8f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c8fe:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c908:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c912:	90                   	nop
c000c913:	83 c4 1c             	add    esp,0x1c
c000c916:	c3                   	ret    
c000c917:	90                   	nop

c000c918 <PhysicalDisk::startCache()>:
c000c918:	56                   	push   esi
c000c919:	53                   	push   ebx
c000c91a:	83 ec 10             	sub    esp,0x10
c000c91d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c921:	6a 44                	push   0x44
c000c923:	e8 d4 b1 ff ff       	call   c0007afc <malloc>
c000c928:	89 c6                	mov    esi,eax
c000c92a:	58                   	pop    eax
c000c92b:	5a                   	pop    edx
c000c92c:	53                   	push   ebx
c000c92d:	56                   	push   esi
c000c92e:	e8 cd 16 00 00       	call   c000e000 <VCache::VCache(PhysicalDisk*)>
c000c933:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c939:	83 c4 14             	add    esp,0x14
c000c93c:	5b                   	pop    ebx
c000c93d:	5e                   	pop    esi
c000c93e:	c3                   	ret    
c000c93f:	90                   	nop

c000c940 <PhysicalDisk::~PhysicalDisk()>:
c000c940:	83 ec 1c             	sub    esp,0x1c
c000c943:	ba b4 09 02 c0       	mov    edx,0xc00209b4
c000c948:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c94c:	89 10                	mov    DWORD PTR [eax],edx
c000c94e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c952:	89 04 24             	mov    DWORD PTR [esp],eax
c000c955:	e8 94 fa ff ff       	call   c000c3ee <Device::~Device()>
c000c95a:	90                   	nop
c000c95b:	83 c4 1c             	add    esp,0x1c
c000c95e:	c3                   	ret    
c000c95f:	90                   	nop

c000c960 <PhysicalDisk::~PhysicalDisk()>:
c000c960:	83 ec 1c             	sub    esp,0x1c
c000c963:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c967:	89 04 24             	mov    DWORD PTR [esp],eax
c000c96a:	e8 d1 ff ff ff       	call   c000c940 <PhysicalDisk::~PhysicalDisk()>
c000c96f:	c7 44 24 04 6c 01 00 00 	mov    DWORD PTR [esp+0x4],0x16c
c000c977:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c97b:	89 04 24             	mov    DWORD PTR [esp],eax
c000c97e:	e8 d9 df ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000c983:	83 c4 1c             	add    esp,0x1c
c000c986:	c3                   	ret    
c000c987:	66 90                	xchg   ax,ax
c000c989:	66 90                	xchg   ax,ax
c000c98b:	66 90                	xchg   ax,ax
c000c98d:	66 90                	xchg   ax,ax
c000c98f:	90                   	nop

c000c990 <int_handler>:
c000c990:	55                   	push   ebp
c000c991:	57                   	push   edi
c000c992:	56                   	push   esi
c000c993:	53                   	push   ebx
c000c994:	83 ec 1c             	sub    esp,0x1c
c000c997:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c99e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c9a2:	74 0b                	je     c000c9af <int_handler+0x1f>
c000c9a4:	fa                   	cli    
c000c9a5:	f4                   	hlt    
c000c9a6:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c9ad:	75 f5                	jne    c000c9a4 <int_handler+0x14>
c000c9af:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c9b2:	8d 46 e0             	lea    eax,[esi-0x20]
c000c9b5:	83 f8 17             	cmp    eax,0x17
c000c9b8:	76 3d                	jbe    c000c9f7 <int_handler+0x67>
c000c9ba:	c1 e6 04             	shl    esi,0x4
c000c9bd:	31 db                	xor    ebx,ebx
c000c9bf:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c9c5:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c9cb:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c9cf:	85 c0                	test   eax,eax
c000c9d1:	74 12                	je     c000c9e5 <int_handler+0x55>
c000c9d3:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c9d6:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c9da:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c9dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c9e1:	74 1e                	je     c000ca01 <int_handler+0x71>
c000c9e3:	ff d0                	call   eax
c000c9e5:	43                   	inc    ebx
c000c9e6:	83 fb 04             	cmp    ebx,0x4
c000c9e9:	75 e0                	jne    c000c9cb <int_handler+0x3b>
c000c9eb:	83 c4 1c             	add    esp,0x1c
c000c9ee:	31 c0                	xor    eax,eax
c000c9f0:	5b                   	pop    ebx
c000c9f1:	31 d2                	xor    edx,edx
c000c9f3:	5e                   	pop    esi
c000c9f4:	5f                   	pop    edi
c000c9f5:	5d                   	pop    ebp
c000c9f6:	c3                   	ret    
c000c9f7:	89 04 24             	mov    DWORD PTR [esp],eax
c000c9fa:	e8 d4 ad 00 00       	call   c00177d3 <HalEndOfInterrupt(int)>
c000c9ff:	eb b9                	jmp    c000c9ba <int_handler+0x2a>
c000ca01:	ff d0                	call   eax
c000ca03:	83 c4 1c             	add    esp,0x1c
c000ca06:	5b                   	pop    ebx
c000ca07:	5e                   	pop    esi
c000ca08:	5f                   	pop    edi
c000ca09:	5d                   	pop    ebp
c000ca0a:	c3                   	ret    

c000ca0b <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ca0b:	56                   	push   esi
c000ca0c:	31 c0                	xor    eax,eax
c000ca0e:	53                   	push   ebx
c000ca0f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ca13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca17:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ca1b:	89 ca                	mov    edx,ecx
c000ca1d:	c1 e2 04             	shl    edx,0x4
c000ca20:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000ca28:	74 16                	je     c000ca40 <installISRHandler(int, void (*)(regs*, void*), void*)+0x35>
c000ca2a:	40                   	inc    eax
c000ca2b:	83 f8 04             	cmp    eax,0x4
c000ca2e:	75 f0                	jne    c000ca20 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000ca30:	b8 e4 09 02 c0       	mov    eax,0xc00209e4
c000ca35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ca39:	5b                   	pop    ebx
c000ca3a:	5e                   	pop    esi
c000ca3b:	e9 f5 43 00 00       	jmp    c0010e35 <KePanic(char const*)>
c000ca40:	8d 04 88             	lea    eax,[eax+ecx*4]
c000ca43:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000ca4a:	5b                   	pop    ebx
c000ca4b:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000ca52:	5e                   	pop    esi
c000ca53:	c3                   	ret    

c000ca54 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ca54:	56                   	push   esi
c000ca55:	53                   	push   ebx
c000ca56:	83 ec 34             	sub    esp,0x34
c000ca59:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c000ca5e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ca62:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000ca66:	88 c1                	mov    cl,al
c000ca68:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ca6d:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000ca74:	74 50                	je     c000cac6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c000ca76:	84 c9                	test   cl,cl
c000ca78:	74 20                	je     c000ca9a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x46>
c000ca7a:	83 fb 0f             	cmp    ebx,0xf
c000ca7d:	0f 8f da 00 00 00    	jg     c000cb5d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000ca83:	0f b6 9b 20 24 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffddbe0]
c000ca8a:	0f b7 84 1b 60 77 02 c0 	movzx  eax,WORD PTR [ebx+ebx*1-0x3ffd88a0]
c000ca92:	d1 e8                	shr    eax,1
c000ca94:	24 01                	and    al,0x1
c000ca96:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000ca9a:	c7 04 24 f1 09 02 c0 	mov    DWORD PTR [esp],0xc00209f1
c000caa1:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000caa6:	31 f6                	xor    esi,esi
c000caa8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000caac:	e8 c5 df ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000cab1:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000cab6:	85 c0                	test   eax,eax
c000cab8:	7f 4b                	jg     c000cb05 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb1>
c000caba:	c7 04 24 08 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a08
c000cac1:	e8 6f 43 00 00       	call   c0010e35 <KePanic(char const*)>
c000cac6:	8d 4b 20             	lea    ecx,[ebx+0x20]
c000cac9:	31 c0                	xor    eax,eax
c000cacb:	89 ca                	mov    edx,ecx
c000cacd:	c1 e2 04             	shl    edx,0x4
c000cad0:	8b b4 82 c0 5f 02 c0 	mov    esi,DWORD PTR [edx+eax*4-0x3ffda040]
c000cad7:	85 f6                	test   esi,esi
c000cad9:	0f 84 94 00 00 00    	je     c000cb73 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11f>
c000cadf:	40                   	inc    eax
c000cae0:	83 f8 04             	cmp    eax,0x4
c000cae3:	75 eb                	jne    c000cad0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7c>
c000cae5:	c7 04 24 5c 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a5c
c000caec:	e8 44 43 00 00       	call   c0010e35 <KePanic(char const*)>
c000caf1:	83 c4 34             	add    esp,0x34
c000caf4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000caf9:	5b                   	pop    ebx
c000cafa:	5e                   	pop    esi
c000cafb:	c3                   	ret    
c000cafc:	46                   	inc    esi
c000cafd:	39 35 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,esi
c000cb03:	7e b5                	jle    c000caba <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000cb05:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000cb09:	8b 04 b5 80 8b 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7480]
c000cb10:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb13:	e8 ee 12 01 00       	call   c001de06 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cb18:	84 c0                	test   al,al
c000cb1a:	74 e0                	je     c000cafc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000cb1c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000cb21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb25:	31 c0                	xor    eax,eax
c000cb27:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cb2b:	88 d8                	mov    al,bl
c000cb2d:	04 20                	add    al,0x20
c000cb2f:	0f b6 c0             	movzx  eax,al
c000cb32:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb36:	31 c0                	xor    eax,eax
c000cb38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb3c:	31 c0                	xor    eax,eax
c000cb3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb42:	0f b6 c3             	movzx  eax,bl
c000cb45:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb49:	8b 04 b5 80 8b 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7480]
c000cb50:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb53:	e8 14 14 01 00       	call   c001df6c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cb58:	e9 69 ff ff ff       	jmp    c000cac6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c000cb5d:	c7 04 24 24 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a24
c000cb64:	e8 cc 42 00 00       	call   c0010e35 <KePanic(char const*)>
c000cb69:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000cb6e:	e9 27 ff ff ff       	jmp    c000ca9a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x46>
c000cb73:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000cb77:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cb7a:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000cb81:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000cb85:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000cb8c:	83 c4 34             	add    esp,0x34
c000cb8f:	89 d8                	mov    eax,ebx
c000cb91:	5b                   	pop    ebx
c000cb92:	5e                   	pop    esi
c000cb93:	c3                   	ret    

c000cb94 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000cb94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb98:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cb9c:	c1 e0 04             	shl    eax,0x4
c000cb9f:	8d 50 10             	lea    edx,[eax+0x10]
c000cba2:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000cba8:	74 08                	je     c000cbb2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000cbaa:	83 c0 04             	add    eax,0x4
c000cbad:	39 d0                	cmp    eax,edx
c000cbaf:	75 f1                	jne    c000cba2 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000cbb1:	c3                   	ret    
c000cbb2:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000cbbc:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000cbc6:	eb e2                	jmp    c000cbaa <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000cbc8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000cbc8:	56                   	push   esi
c000cbc9:	53                   	push   ebx
c000cbca:	83 ec 14             	sub    esp,0x14
c000cbcd:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
c000cbd2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000cbd6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000cbda:	74 0e                	je     c000cbea <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000cbdc:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000cbe1:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000cbe8:	75 30                	jne    c000cc1a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x52>
c000cbea:	8d 43 20             	lea    eax,[ebx+0x20]
c000cbed:	c1 e0 04             	shl    eax,0x4
c000cbf0:	8d 50 10             	lea    edx,[eax+0x10]
c000cbf3:	39 b0 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],esi
c000cbf9:	74 0d                	je     c000cc08 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000cbfb:	83 c0 04             	add    eax,0x4
c000cbfe:	39 d0                	cmp    eax,edx
c000cc00:	75 f1                	jne    c000cbf3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000cc02:	83 c4 14             	add    esp,0x14
c000cc05:	5b                   	pop    ebx
c000cc06:	5e                   	pop    esi
c000cc07:	c3                   	ret    
c000cc08:	31 c9                	xor    ecx,ecx
c000cc0a:	31 db                	xor    ebx,ebx
c000cc0c:	89 88 c0 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda040],ecx
c000cc12:	89 98 c0 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb040],ebx
c000cc18:	eb e1                	jmp    c000cbfb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000cc1a:	83 fb 0f             	cmp    ebx,0xf
c000cc1d:	7f 09                	jg     c000cc28 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x60>
c000cc1f:	0f b6 9b 20 24 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffddbe0]
c000cc26:	eb c2                	jmp    c000cbea <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000cc28:	c7 04 24 15 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a15
c000cc2f:	e8 01 42 00 00       	call   c0010e35 <KePanic(char const*)>
c000cc34:	eb b4                	jmp    c000cbea <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000cc36 <setupINTS()>:
c000cc36:	31 c0                	xor    eax,eax
c000cc38:	31 d2                	xor    edx,edx
c000cc3a:	31 c9                	xor    ecx,ecx
c000cc3c:	89 90 c0 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda040],edx
c000cc42:	31 d2                	xor    edx,edx
c000cc44:	83 c0 10             	add    eax,0x10
c000cc47:	89 88 b0 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb050],ecx
c000cc4d:	31 c9                	xor    ecx,ecx
c000cc4f:	89 90 b4 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda04c],edx
c000cc55:	31 d2                	xor    edx,edx
c000cc57:	89 88 b4 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb04c],ecx
c000cc5d:	31 c9                	xor    ecx,ecx
c000cc5f:	89 90 b8 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda048],edx
c000cc65:	31 d2                	xor    edx,edx
c000cc67:	89 88 b8 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb048],ecx
c000cc6d:	31 c9                	xor    ecx,ecx
c000cc6f:	89 90 bc 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda044],edx
c000cc75:	89 88 bc 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb044],ecx
c000cc7b:	3d 00 10 00 00       	cmp    eax,0x1000
c000cc80:	75 b6                	jne    c000cc38 <setupINTS()+0x2>
c000cc82:	c3                   	ret    

c000cc83 <convertLegacyIRQNumber(int)>:
c000cc83:	83 ec 1c             	sub    esp,0x1c
c000cc86:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000cc8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc90:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cc97:	74 0c                	je     c000cca5 <convertLegacyIRQNumber(int)+0x22>
c000cc99:	83 f8 0f             	cmp    eax,0xf
c000cc9c:	7f 0b                	jg     c000cca9 <convertLegacyIRQNumber(int)+0x26>
c000cc9e:	0f b6 80 20 24 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffddbe0]
c000cca5:	83 c4 1c             	add    esp,0x1c
c000cca8:	c3                   	ret    
c000cca9:	c7 04 24 24 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a24
c000ccb0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ccb4:	e8 7c 41 00 00       	call   c0010e35 <KePanic(char const*)>
c000ccb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ccbd:	83 c4 1c             	add    esp,0x1c
c000ccc0:	c3                   	ret    
c000ccc1:	90                   	nop

c000ccc2 <startGUI(void*)>:
c000ccc2:	55                   	push   ebp
c000ccc3:	89 e5                	mov    ebp,esp
c000ccc5:	53                   	push   ebx
c000ccc6:	83 ec 14             	sub    esp,0x14
c000ccc9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000ccce:	48                   	dec    eax
c000cccf:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000ccd4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000ccd9:	85 c0                	test   eax,eax
c000ccdb:	75 01                	jne    c000ccde <startGUI(void*)+0x1c>
c000ccdd:	fb                   	sti    
c000ccde:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000cce4:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000ccec:	c7 04 24 81 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a81
c000ccf3:	e8 e6 7f 00 00       	call   c0014cde <Thr::loadDLL(char const*, bool)>
c000ccf8:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000ccfc:	89 04 24             	mov    DWORD PTR [esp],eax
c000ccff:	e8 16 82 00 00       	call   c0014f1a <Thr::executeDLL(unsigned long, void*)>
c000cd04:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000cd0a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000cd12:	c7 04 24 9b 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a9b
c000cd19:	e8 c0 7f 00 00       	call   c0014cde <Thr::loadDLL(char const*, bool)>
c000cd1e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000cd22:	89 04 24             	mov    DWORD PTR [esp],eax
c000cd25:	e8 f0 81 00 00       	call   c0014f1a <Thr::executeDLL(unsigned long, void*)>
c000cd2a:	90                   	nop
c000cd2b:	83 c4 14             	add    esp,0x14
c000cd2e:	5b                   	pop    ebx
c000cd2f:	5d                   	pop    ebp
c000cd30:	c3                   	ret    

c000cd31 <startGUIVESA(void*)>:
c000cd31:	55                   	push   ebp
c000cd32:	89 e5                	mov    ebp,esp
c000cd34:	53                   	push   ebx
c000cd35:	83 ec 14             	sub    esp,0x14
c000cd38:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd3d:	48                   	dec    eax
c000cd3e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd43:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd48:	85 c0                	test   eax,eax
c000cd4a:	75 01                	jne    c000cd4d <startGUIVESA(void*)+0x1c>
c000cd4c:	fb                   	sti    
c000cd4d:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000cd53:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000cd5b:	c7 04 24 b9 0a 02 c0 	mov    DWORD PTR [esp],0xc0020ab9
c000cd62:	e8 77 7f 00 00       	call   c0014cde <Thr::loadDLL(char const*, bool)>
c000cd67:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000cd6b:	89 04 24             	mov    DWORD PTR [esp],eax
c000cd6e:	e8 a7 81 00 00       	call   c0014f1a <Thr::executeDLL(unsigned long, void*)>
c000cd73:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000cd79:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000cd81:	c7 04 24 9b 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a9b
c000cd88:	e8 51 7f 00 00       	call   c0014cde <Thr::loadDLL(char const*, bool)>
c000cd8d:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000cd91:	89 04 24             	mov    DWORD PTR [esp],eax
c000cd94:	e8 81 81 00 00       	call   c0014f1a <Thr::executeDLL(unsigned long, void*)>
c000cd99:	90                   	nop
c000cd9a:	83 c4 14             	add    esp,0x14
c000cd9d:	5b                   	pop    ebx
c000cd9e:	5d                   	pop    ebp
c000cd9f:	c3                   	ret    

c000cda0 <sendKeyToTerminal(unsigned char)>:
c000cda0:	55                   	push   ebp
c000cda1:	89 e5                	mov    ebp,esp
c000cda3:	83 ec 38             	sub    esp,0x38
c000cda6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cda9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000cdac:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000cdb1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000cdb5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdb9:	89 04 24             	mov    DWORD PTR [esp],eax
c000cdbc:	e8 33 c0 ff ff       	call   c0008df4 <VgaText::receiveKey(unsigned char)>
c000cdc1:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000cdc5:	74 10                	je     c000cdd7 <sendKeyToTerminal(unsigned char)+0x37>
c000cdc7:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000cdcb:	74 0a                	je     c000cdd7 <sendKeyToTerminal(unsigned char)+0x37>
c000cdcd:	80 7d e4 1c          	cmp    BYTE PTR [ebp-0x1c],0x1c
c000cdd1:	0f 85 8c 00 00 00    	jne    c000ce63 <sendKeyToTerminal(unsigned char)+0xc3>
c000cdd7:	fa                   	cli    
c000cdd8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cddd:	40                   	inc    eax
c000cdde:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cde3:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000cde8:	40                   	inc    eax
c000cde9:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000cdee:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000cdf3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cdf6:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ce00:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000ce04:	74 1c                	je     c000ce22 <sendKeyToTerminal(unsigned char)+0x82>
c000ce06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce09:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000ce0c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ce0f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ce12:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ce15:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ce18:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce1b:	e8 c8 8d 00 00       	call   c0015be8 <unblockTask(ThreadControlBlock*)>
c000ce20:	eb de                	jmp    c000ce00 <sendKeyToTerminal(unsigned char)+0x60>
c000ce22:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000ce27:	48                   	dec    eax
c000ce28:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000ce2d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000ce32:	85 c0                	test   eax,eax
c000ce34:	75 18                	jne    c000ce4e <sendKeyToTerminal(unsigned char)+0xae>
c000ce36:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000ce3b:	85 c0                	test   eax,eax
c000ce3d:	74 0f                	je     c000ce4e <sendKeyToTerminal(unsigned char)+0xae>
c000ce3f:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000ce49:	e8 12 89 00 00       	call   c0015760 <schedule()>
c000ce4e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000ce53:	48                   	dec    eax
c000ce54:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000ce59:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000ce5e:	85 c0                	test   eax,eax
c000ce60:	75 01                	jne    c000ce63 <sendKeyToTerminal(unsigned char)+0xc3>
c000ce62:	fb                   	sti    
c000ce63:	90                   	nop
c000ce64:	c9                   	leave  
c000ce65:	c3                   	ret    

c000ce66 <sendKeyboardToken(KeyboardToken)>:
c000ce66:	55                   	push   ebp
c000ce67:	89 e5                	mov    ebp,esp
c000ce69:	83 ec 28             	sub    esp,0x28
c000ce6c:	e8 14 40 00 00       	call   c0010e85 <Krnl::userIOReceived()>
c000ce71:	0f b6 55 0a          	movzx  edx,BYTE PTR [ebp+0xa]
c000ce75:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ce79:	80 f2 01             	xor    dl,0x1
c000ce7c:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000ce82:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000ce87:	85 c0                	test   eax,eax
c000ce89:	74 1d                	je     c000cea8 <sendKeyboardToken(KeyboardToken)+0x42>
c000ce8b:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000ce90:	c7 44 24 08 e0 6f 02 c0 	mov    DWORD PTR [esp+0x8],0xc0026fe0
c000ce98:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce9b:	89 14 24             	mov    DWORD PTR [esp],edx
c000ce9e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cea1:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000cea6:	ff d0                	call   eax
c000cea8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ceac:	0f b6 55 0c          	movzx  edx,BYTE PTR [ebp+0xc]
c000ceb0:	0f b6 05 e8 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e8
c000ceb7:	38 c2                	cmp    dl,al
c000ceb9:	74 1b                	je     c000ced6 <sendKeyboardToken(KeyboardToken)+0x70>
c000cebb:	0f b6 45 0c          	movzx  eax,BYTE PTR [ebp+0xc]
c000cebf:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000cec4:	0f b6 05 e8 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e8
c000cecb:	0f b6 c0             	movzx  eax,al
c000cece:	89 04 24             	mov    DWORD PTR [esp],eax
c000ced1:	e8 50 b6 ff ff       	call   c0008526 <setTerminalScrollLock(bool)>
c000ced6:	0f b6 45 0b          	movzx  eax,BYTE PTR [ebp+0xb]
c000ceda:	84 c0                	test   al,al
c000cedc:	0f 84 c4 00 00 00    	je     c000cfa6 <sendKeyboardToken(KeyboardToken)+0x140>
c000cee2:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cee6:	3d 18 03 00 00       	cmp    eax,0x318
c000ceeb:	75 06                	jne    c000cef3 <sendKeyboardToken(KeyboardToken)+0x8d>
c000ceed:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000cef3:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cef7:	3d 19 03 00 00       	cmp    eax,0x319
c000cefc:	75 06                	jne    c000cf04 <sendKeyboardToken(KeyboardToken)+0x9e>
c000cefe:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000cf04:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cf08:	3d 1a 03 00 00       	cmp    eax,0x31a
c000cf0d:	75 06                	jne    c000cf15 <sendKeyboardToken(KeyboardToken)+0xaf>
c000cf0f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000cf15:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cf19:	3d 1b 03 00 00       	cmp    eax,0x31b
c000cf1e:	75 06                	jne    c000cf26 <sendKeyboardToken(KeyboardToken)+0xc0>
c000cf20:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000cf26:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cf2a:	3d 1c 03 00 00       	cmp    eax,0x31c
c000cf2f:	75 06                	jne    c000cf37 <sendKeyboardToken(KeyboardToken)+0xd1>
c000cf31:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000cf37:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cf3b:	3d 1d 03 00 00       	cmp    eax,0x31d
c000cf40:	75 06                	jne    c000cf48 <sendKeyboardToken(KeyboardToken)+0xe2>
c000cf42:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cf48:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cf4c:	3d 1e 03 00 00       	cmp    eax,0x31e
c000cf51:	75 06                	jne    c000cf59 <sendKeyboardToken(KeyboardToken)+0xf3>
c000cf53:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000cf59:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cf5d:	3d 1f 03 00 00       	cmp    eax,0x31f
c000cf62:	75 06                	jne    c000cf6a <sendKeyboardToken(KeyboardToken)+0x104>
c000cf64:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000cf6a:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cf6e:	3d 20 03 00 00       	cmp    eax,0x320
c000cf73:	75 06                	jne    c000cf7b <sendKeyboardToken(KeyboardToken)+0x115>
c000cf75:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000cf7b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cf7f:	3d 21 03 00 00       	cmp    eax,0x321
c000cf84:	75 06                	jne    c000cf8c <sendKeyboardToken(KeyboardToken)+0x126>
c000cf86:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000cf8c:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cf90:	3d 22 03 00 00       	cmp    eax,0x322
c000cf95:	0f 85 dd 00 00 00    	jne    c000d078 <sendKeyboardToken(KeyboardToken)+0x212>
c000cf9b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000cfa1:	e9 d2 00 00 00       	jmp    c000d078 <sendKeyboardToken(KeyboardToken)+0x212>
c000cfa6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cfaa:	3d 18 03 00 00       	cmp    eax,0x318
c000cfaf:	75 0a                	jne    c000cfbb <sendKeyboardToken(KeyboardToken)+0x155>
c000cfb1:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000cfb7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cfbb:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cfbf:	3d 19 03 00 00       	cmp    eax,0x319
c000cfc4:	75 0a                	jne    c000cfd0 <sendKeyboardToken(KeyboardToken)+0x16a>
c000cfc6:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000cfcc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cfd0:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cfd4:	3d 1a 03 00 00       	cmp    eax,0x31a
c000cfd9:	75 0a                	jne    c000cfe5 <sendKeyboardToken(KeyboardToken)+0x17f>
c000cfdb:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000cfe1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cfe5:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cfe9:	3d 1b 03 00 00       	cmp    eax,0x31b
c000cfee:	75 0a                	jne    c000cffa <sendKeyboardToken(KeyboardToken)+0x194>
c000cff0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000cff6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cffa:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cffe:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d003:	75 0a                	jne    c000d00f <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d005:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d00b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d00f:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d013:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d018:	75 0a                	jne    c000d024 <sendKeyboardToken(KeyboardToken)+0x1be>
c000d01a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d020:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d024:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d028:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d02d:	75 0a                	jne    c000d039 <sendKeyboardToken(KeyboardToken)+0x1d3>
c000d02f:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d035:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d039:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d03d:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d042:	75 0a                	jne    c000d04e <sendKeyboardToken(KeyboardToken)+0x1e8>
c000d044:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d04a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d04e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d052:	3d 20 03 00 00       	cmp    eax,0x320
c000d057:	75 0a                	jne    c000d063 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000d059:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d05f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d063:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d067:	3d 21 03 00 00       	cmp    eax,0x321
c000d06c:	75 0a                	jne    c000d078 <sendKeyboardToken(KeyboardToken)+0x212>
c000d06e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d074:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d078:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d07c:	3d 00 02 00 00       	cmp    eax,0x200
c000d081:	75 3b                	jne    c000d0be <sendKeyboardToken(KeyboardToken)+0x258>
c000d083:	0f b6 05 e0 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e0
c000d08a:	34 01                	xor    al,0x1
c000d08c:	84 c0                	test   al,al
c000d08e:	74 2e                	je     c000d0be <sendKeyboardToken(KeyboardToken)+0x258>
c000d090:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000d095:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000d09d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d0a5:	c7 44 24 04 c2 cc 00 c0 	mov    DWORD PTR [esp+0x4],0xc000ccc2
c000d0ad:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0b0:	e8 53 84 00 00       	call   c0015508 <Process::createThread(void (*)(void*), void*, int)>
c000d0b5:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000d0bc:	eb 44                	jmp    c000d102 <sendKeyboardToken(KeyboardToken)+0x29c>
c000d0be:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d0c2:	3d 01 02 00 00       	cmp    eax,0x201
c000d0c7:	75 39                	jne    c000d102 <sendKeyboardToken(KeyboardToken)+0x29c>
c000d0c9:	0f b6 05 e0 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e0
c000d0d0:	34 01                	xor    al,0x1
c000d0d2:	84 c0                	test   al,al
c000d0d4:	74 2c                	je     c000d102 <sendKeyboardToken(KeyboardToken)+0x29c>
c000d0d6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000d0db:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000d0e3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d0eb:	c7 44 24 04 31 cd 00 c0 	mov    DWORD PTR [esp+0x4],0xc000cd31
c000d0f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0f6:	e8 0d 84 00 00       	call   c0015508 <Process::createThread(void (*)(void*), void*, int)>
c000d0fb:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000d102:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d106:	3d 25 03 00 00       	cmp    eax,0x325
c000d10b:	75 06                	jne    c000d113 <sendKeyboardToken(KeyboardToken)+0x2ad>
c000d10d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d113:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d117:	3d 24 03 00 00       	cmp    eax,0x324
c000d11c:	75 06                	jne    c000d124 <sendKeyboardToken(KeyboardToken)+0x2be>
c000d11e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d124:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d128:	3d 23 03 00 00       	cmp    eax,0x323
c000d12d:	75 06                	jne    c000d135 <sendKeyboardToken(KeyboardToken)+0x2cf>
c000d12f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d135:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d139:	3d 26 03 00 00       	cmp    eax,0x326
c000d13e:	75 06                	jne    c000d146 <sendKeyboardToken(KeyboardToken)+0x2e0>
c000d140:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d146:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d14a:	3d 27 03 00 00       	cmp    eax,0x327
c000d14f:	75 06                	jne    c000d157 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000d151:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d157:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d15b:	3d 22 03 00 00       	cmp    eax,0x322
c000d160:	75 06                	jne    c000d168 <sendKeyboardToken(KeyboardToken)+0x302>
c000d162:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d168:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d16c:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000d170:	34 01                	xor    al,0x1
c000d172:	84 c0                	test   al,al
c000d174:	74 73                	je     c000d1e9 <sendKeyboardToken(KeyboardToken)+0x383>
c000d176:	0f b6 05 e1 70 02 c0 	movzx  eax,BYTE PTR ds:0xc00270e1
c000d17d:	84 c0                	test   al,al
c000d17f:	74 3f                	je     c000d1c0 <sendKeyboardToken(KeyboardToken)+0x35a>
c000d181:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d185:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000d189:	74 29                	je     c000d1b4 <sendKeyboardToken(KeyboardToken)+0x34e>
c000d18b:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000d191:	89 d0                	mov    eax,edx
c000d193:	c1 e0 02             	shl    eax,0x2
c000d196:	01 d0                	add    eax,edx
c000d198:	01 c0                	add    eax,eax
c000d19a:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000d19f:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d1a3:	8d 50 d0             	lea    edx,[eax-0x30]
c000d1a6:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000d1ab:	01 d0                	add    eax,edx
c000d1ad:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000d1b2:	eb 67                	jmp    c000d21b <sendKeyboardToken(KeyboardToken)+0x3b5>
c000d1b4:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000d1be:	eb 5b                	jmp    c000d21b <sendKeyboardToken(KeyboardToken)+0x3b5>
c000d1c0:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000d1c5:	85 c0                	test   eax,eax
c000d1c7:	74 14                	je     c000d1dd <sendKeyboardToken(KeyboardToken)+0x377>
c000d1c9:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000d1ce:	0f b6 c0             	movzx  eax,al
c000d1d1:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1d4:	e8 c7 fb ff ff       	call   c000cda0 <sendKeyToTerminal(unsigned char)>
c000d1d9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d1dd:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000d1e7:	eb 32                	jmp    c000d21b <sendKeyboardToken(KeyboardToken)+0x3b5>
c000d1e9:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d1ed:	3d 01 01 00 00       	cmp    eax,0x101
c000d1f2:	75 27                	jne    c000d21b <sendKeyboardToken(KeyboardToken)+0x3b5>
c000d1f4:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000d1f9:	85 c0                	test   eax,eax
c000d1fb:	74 14                	je     c000d211 <sendKeyboardToken(KeyboardToken)+0x3ab>
c000d1fd:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000d202:	0f b6 c0             	movzx  eax,al
c000d205:	89 04 24             	mov    DWORD PTR [esp],eax
c000d208:	e8 93 fb ff ff       	call   c000cda0 <sendKeyToTerminal(unsigned char)>
c000d20d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d211:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000d21b:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000d21f:	34 01                	xor    al,0x1
c000d221:	84 c0                	test   al,al
c000d223:	74 4a                	je     c000d26f <sendKeyboardToken(KeyboardToken)+0x409>
c000d225:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000d229:	34 01                	xor    al,0x1
c000d22b:	84 c0                	test   al,al
c000d22d:	74 40                	je     c000d26f <sendKeyboardToken(KeyboardToken)+0x409>
c000d22f:	0f b6 05 e0 70 02 c0 	movzx  eax,BYTE PTR ds:0xc00270e0
c000d236:	34 01                	xor    al,0x1
c000d238:	84 c0                	test   al,al
c000d23a:	74 33                	je     c000d26f <sendKeyboardToken(KeyboardToken)+0x409>
c000d23c:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d240:	83 f8 1f             	cmp    eax,0x1f
c000d243:	76 09                	jbe    c000d24e <sendKeyboardToken(KeyboardToken)+0x3e8>
c000d245:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d249:	83 f8 7e             	cmp    eax,0x7e
c000d24c:	76 12                	jbe    c000d260 <sendKeyboardToken(KeyboardToken)+0x3fa>
c000d24e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d252:	83 f8 0a             	cmp    eax,0xa
c000d255:	74 09                	je     c000d260 <sendKeyboardToken(KeyboardToken)+0x3fa>
c000d257:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d25b:	83 f8 08             	cmp    eax,0x8
c000d25e:	75 0f                	jne    c000d26f <sendKeyboardToken(KeyboardToken)+0x409>
c000d260:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d264:	0f b6 c0             	movzx  eax,al
c000d267:	89 04 24             	mov    DWORD PTR [esp],eax
c000d26a:	e8 31 fb ff ff       	call   c000cda0 <sendKeyToTerminal(unsigned char)>
c000d26f:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000d273:	34 01                	xor    al,0x1
c000d275:	84 c0                	test   al,al
c000d277:	74 4d                	je     c000d2c6 <sendKeyboardToken(KeyboardToken)+0x460>
c000d279:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000d27d:	34 01                	xor    al,0x1
c000d27f:	84 c0                	test   al,al
c000d281:	74 43                	je     c000d2c6 <sendKeyboardToken(KeyboardToken)+0x460>
c000d283:	0f b6 05 e0 70 02 c0 	movzx  eax,BYTE PTR ds:0xc00270e0
c000d28a:	84 c0                	test   al,al
c000d28c:	74 38                	je     c000d2c6 <sendKeyboardToken(KeyboardToken)+0x460>
c000d28e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d292:	83 f8 3f             	cmp    eax,0x3f
c000d295:	76 2f                	jbe    c000d2c6 <sendKeyboardToken(KeyboardToken)+0x460>
c000d297:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d29b:	83 f8 7f             	cmp    eax,0x7f
c000d29e:	77 26                	ja     c000d2c6 <sendKeyboardToken(KeyboardToken)+0x460>
c000d2a0:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d2a4:	88 c2                	mov    dl,al
c000d2a6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d2aa:	83 f8 5f             	cmp    eax,0x5f
c000d2ad:	76 04                	jbe    c000d2b3 <sendKeyboardToken(KeyboardToken)+0x44d>
c000d2af:	b0 20                	mov    al,0x20
c000d2b1:	eb 02                	jmp    c000d2b5 <sendKeyboardToken(KeyboardToken)+0x44f>
c000d2b3:	b0 00                	mov    al,0x0
c000d2b5:	28 c2                	sub    dl,al
c000d2b7:	88 d0                	mov    al,dl
c000d2b9:	2c 40                	sub    al,0x40
c000d2bb:	0f b6 c0             	movzx  eax,al
c000d2be:	89 04 24             	mov    DWORD PTR [esp],eax
c000d2c1:	e8 da fa ff ff       	call   c000cda0 <sendKeyToTerminal(unsigned char)>
c000d2c6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000d2ca:	3d 00 03 00 00       	cmp    eax,0x300
c000d2cf:	75 0f                	jne    c000d2e0 <sendKeyboardToken(KeyboardToken)+0x47a>
c000d2d1:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000d2d5:	34 01                	xor    al,0x1
c000d2d7:	84 c0                	test   al,al
c000d2d9:	74 05                	je     c000d2e0 <sendKeyboardToken(KeyboardToken)+0x47a>
c000d2db:	e8 47 b2 ff ff       	call   c0008527 <doTerminalCycle()>
c000d2e0:	90                   	nop
c000d2e1:	c9                   	leave  
c000d2e2:	c3                   	ret    

c000d2e3 <clearInternalKeybuffer(VgaText*)>:
c000d2e3:	55                   	push   ebp
c000d2e4:	89 e5                	mov    ebp,esp
c000d2e6:	83 ec 18             	sub    esp,0x18
c000d2e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2ec:	05 02 01 00 00       	add    eax,0x102
c000d2f1:	89 04 24             	mov    DWORD PTR [esp],eax
c000d2f4:	e8 27 33 ff ff       	call   c0000620 <strlen>
c000d2f9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d2fc:	81 c2 02 01 00 00    	add    edx,0x102
c000d302:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d306:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000d30e:	89 14 24             	mov    DWORD PTR [esp],edx
c000d311:	e8 6a 32 ff ff       	call   c0000580 <memset>
c000d316:	90                   	nop
c000d317:	c9                   	leave  
c000d318:	c3                   	ret    

c000d319 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d319:	55                   	push   ebp
c000d31a:	89 e5                	mov    ebp,esp
c000d31c:	83 ec 28             	sub    esp,0x28
c000d31f:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000d324:	85 c0                	test   eax,eax
c000d326:	74 23                	je     c000d34b <readKeyboard(VgaText*, char*, unsigned long)+0x32>
c000d328:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d32e:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000d333:	c7 44 24 08 e0 6f 02 c0 	mov    DWORD PTR [esp+0x8],0xc0026fe0
c000d33b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000d33e:	89 14 24             	mov    DWORD PTR [esp],edx
c000d341:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000d344:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000d349:	ff d0                	call   eax
c000d34b:	fb                   	sti    
c000d34c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d353:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d357:	0f 84 fa 00 00 00    	je     c000d457 <readKeyboard(VgaText*, char*, unsigned long)+0x13e>
c000d35d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d360:	0f b6 80 02 01 00 00 	movzx  eax,BYTE PTR [eax+0x102]
c000d367:	84 c0                	test   al,al
c000d369:	75 28                	jne    c000d393 <readKeyboard(VgaText*, char*, unsigned long)+0x7a>
c000d36b:	fa                   	cli    
c000d36c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d371:	40                   	inc    eax
c000d372:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d377:	e8 e4 83 00 00       	call   c0015760 <schedule()>
c000d37c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d381:	48                   	dec    eax
c000d382:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d387:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d38c:	85 c0                	test   eax,eax
c000d38e:	75 cd                	jne    c000d35d <readKeyboard(VgaText*, char*, unsigned long)+0x44>
c000d390:	fb                   	sti    
c000d391:	eb ca                	jmp    c000d35d <readKeyboard(VgaText*, char*, unsigned long)+0x44>
c000d393:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d396:	8d 50 01             	lea    edx,[eax+0x1]
c000d399:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d39c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d39f:	0f b6 92 02 01 00 00 	movzx  edx,BYTE PTR [edx+0x102]
c000d3a6:	88 10                	mov    BYTE PTR [eax],dl
c000d3a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3ab:	0f b6 80 02 01 00 00 	movzx  eax,BYTE PTR [eax+0x102]
c000d3b2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d3b5:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000d3b9:	75 20                	jne    c000d3db <readKeyboard(VgaText*, char*, unsigned long)+0xc2>
c000d3bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d3c0:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d3c5:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d3cb:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c000d3d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3d6:	e8 cc 3e 00 00       	call   c00112a7 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d3db:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000d3df:	75 20                	jne    c000d401 <readKeyboard(VgaText*, char*, unsigned long)+0xe8>
c000d3e1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d3e6:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d3eb:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d3f1:	c7 44 24 04 09 00 00 00 	mov    DWORD PTR [esp+0x4],0x9
c000d3f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3fc:	e8 a6 3e 00 00       	call   c00112a7 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d401:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d404:	05 02 01 00 00       	add    eax,0x102
c000d409:	89 04 24             	mov    DWORD PTR [esp],eax
c000d40c:	e8 0f 32 ff ff       	call   c0000620 <strlen>
c000d411:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d414:	81 c2 02 01 00 00    	add    edx,0x102
c000d41a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d41d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d420:	81 c2 02 01 00 00    	add    edx,0x102
c000d426:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d42a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d42e:	89 14 24             	mov    DWORD PTR [esp],edx
c000d431:	e8 9a 2f ff ff       	call   c00003d0 <memmove>
c000d436:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000d439:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000d43c:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000d440:	74 10                	je     c000d452 <readKeyboard(VgaText*, char*, unsigned long)+0x139>
c000d442:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000d446:	74 0a                	je     c000d452 <readKeyboard(VgaText*, char*, unsigned long)+0x139>
c000d448:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000d44c:	0f 85 01 ff ff ff    	jne    c000d353 <readKeyboard(VgaText*, char*, unsigned long)+0x3a>
c000d452:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d455:	eb 03                	jmp    c000d45a <readKeyboard(VgaText*, char*, unsigned long)+0x141>
c000d457:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d45a:	c9                   	leave  
c000d45b:	c3                   	ret    

c000d45c <Keyboard::Keyboard(char const*)>:
c000d45c:	83 ec 1c             	sub    esp,0x1c
c000d45f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d463:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d467:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d46b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d46e:	e8 0f f2 ff ff       	call   c000c682 <Device::Device(char const*)>
c000d473:	ba dc 0a 02 c0       	mov    edx,0xc0020adc
c000d478:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d47c:	89 10                	mov    DWORD PTR [eax],edx
c000d47e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d482:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d48c:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000d493:	90                   	nop
c000d494:	83 c4 1c             	add    esp,0x1c
c000d497:	c3                   	ret    

c000d498 <Keyboard::~Keyboard()>:
c000d498:	83 ec 1c             	sub    esp,0x1c
c000d49b:	ba dc 0a 02 c0       	mov    edx,0xc0020adc
c000d4a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4a4:	89 10                	mov    DWORD PTR [eax],edx
c000d4a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4aa:	89 04 24             	mov    DWORD PTR [esp],eax
c000d4ad:	e8 3c ef ff ff       	call   c000c3ee <Device::~Device()>
c000d4b2:	90                   	nop
c000d4b3:	83 c4 1c             	add    esp,0x1c
c000d4b6:	c3                   	ret    
c000d4b7:	90                   	nop

c000d4b8 <Keyboard::~Keyboard()>:
c000d4b8:	83 ec 1c             	sub    esp,0x1c
c000d4bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4bf:	89 04 24             	mov    DWORD PTR [esp],eax
c000d4c2:	e8 d1 ff ff ff       	call   c000d498 <Keyboard::~Keyboard()>
c000d4c7:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000d4cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d4d6:	e8 81 d4 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000d4db:	83 c4 1c             	add    esp,0x1c
c000d4de:	c3                   	ret    
c000d4df:	90                   	nop

c000d4e0 <LogicalDisk::close(int, int, void*)>:
c000d4e0:	83 c8 ff             	or     eax,0xffffffff
c000d4e3:	c3                   	ret    

c000d4e4 <LogicalDisk::~LogicalDisk()>:
c000d4e4:	83 ec 1c             	sub    esp,0x1c
c000d4e7:	ba 54 0b 02 c0       	mov    edx,0xc0020b54
c000d4ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4f0:	89 10                	mov    DWORD PTR [eax],edx
c000d4f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000d4f9:	e8 f0 ee ff ff       	call   c000c3ee <Device::~Device()>
c000d4fe:	90                   	nop
c000d4ff:	83 c4 1c             	add    esp,0x1c
c000d502:	c3                   	ret    
c000d503:	90                   	nop

c000d504 <LogicalDisk::~LogicalDisk()>:
c000d504:	83 ec 1c             	sub    esp,0x1c
c000d507:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d50b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d50e:	e8 d1 ff ff ff       	call   c000d4e4 <LogicalDisk::~LogicalDisk()>
c000d513:	c7 44 24 04 78 01 00 00 	mov    DWORD PTR [esp+0x4],0x178
c000d51b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d51f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d522:	e8 35 d4 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000d527:	83 c4 1c             	add    esp,0x1c
c000d52a:	c3                   	ret    
c000d52b:	90                   	nop

c000d52c <LogicalDisk::open(int, int, void*)>:
c000d52c:	83 ec 18             	sub    esp,0x18
c000d52f:	68 08 0b 02 c0       	push   0xc0020b08
c000d534:	e8 fc 38 00 00       	call   c0010e35 <KePanic(char const*)>
c000d539:	83 c8 ff             	or     eax,0xffffffff
c000d53c:	83 c4 1c             	add    esp,0x1c
c000d53f:	c3                   	ret    

c000d540 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d540:	53                   	push   ebx
c000d541:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d545:	f3 0f 7e 44 24 0c    	movq   xmm0,QWORD PTR [esp+0xc]
c000d54b:	f3 0f 7e 89 58 01 00 00 	movq   xmm1,QWORD PTR [ecx+0x158]
c000d553:	66 0f fb c1          	psubq  xmm0,xmm1
c000d557:	66 0f 7e c0          	movd   eax,xmm0
c000d55b:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c000d560:	66 0f 7e c2          	movd   edx,xmm0
c000d564:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d56a:	77 12                	ja     c000d57e <LogicalDisk::absoluteToRelative(unsigned long long)+0x3e>
c000d56c:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d572:	66 0f 7e c3          	movd   ebx,xmm0
c000d576:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d57c:	72 11                	jb     c000d58f <LogicalDisk::absoluteToRelative(unsigned long long)+0x4f>
c000d57e:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c000d582:	66 0f 7e c0          	movd   eax,xmm0
c000d586:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c000d58b:	66 0f 7e c2          	movd   edx,xmm0
c000d58f:	5b                   	pop    ebx
c000d590:	c3                   	ret    
c000d591:	90                   	nop

c000d592 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d592:	56                   	push   esi
c000d593:	83 c8 ff             	or     eax,0xffffffff
c000d596:	53                   	push   ebx
c000d597:	89 c2                	mov    edx,eax
c000d599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d59d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d5a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d5a5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d5ab:	77 27                	ja     c000d5d4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d5ad:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d5b3:	89 d8                	mov    eax,ebx
c000d5b5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d5bb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d5c0:	89 c2                	mov    edx,eax
c000d5c2:	73 10                	jae    c000d5d4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d5c4:	89 c8                	mov    eax,ecx
c000d5c6:	89 da                	mov    edx,ebx
c000d5c8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d5ce:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d5d4:	5b                   	pop    ebx
c000d5d5:	5e                   	pop    esi
c000d5d6:	c3                   	ret    
c000d5d7:	90                   	nop

c000d5d8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d5d8:	83 ec 2c             	sub    esp,0x2c
c000d5db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d5df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d5e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d5e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d5eb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d5ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5f3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d5f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d5fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d5ff:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d603:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d607:	89 04 24             	mov    DWORD PTR [esp],eax
c000d60a:	e8 73 f0 ff ff       	call   c000c682 <Device::Device(char const*)>
c000d60f:	ba 54 0b 02 c0       	mov    edx,0xc0020b54
c000d614:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d618:	89 10                	mov    DWORD PTR [eax],edx
c000d61a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d61e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d625:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d629:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d630:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d634:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d63b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d63f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d649:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000d64d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d651:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d655:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d65b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d661:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000d665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d669:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d66d:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d673:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d679:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d67d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000d681:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d687:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d68b:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d695:	90                   	nop
c000d696:	83 c4 2c             	add    esp,0x2c
c000d699:	c3                   	ret    

c000d69a <LogicalDisk::assignDriveLetter()>:
c000d69a:	55                   	push   ebp
c000d69b:	57                   	push   edi
c000d69c:	56                   	push   esi
c000d69d:	53                   	push   ebx
c000d69e:	83 ec 24             	sub    esp,0x24
c000d6a1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d6a5:	8b 1d 00 74 02 c0    	mov    ebx,DWORD PTR ds:0xc0027400
c000d6ab:	8b 35 04 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027404
c000d6b1:	8b 95 6c 01 00 00    	mov    edx,DWORD PTR [ebp+0x16c]
c000d6b7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000d6bb:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000d6bf:	8a 82 69 01 00 00    	mov    al,BYTE PTR [edx+0x169]
c000d6c5:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000d6c9:	3c 01                	cmp    al,0x1
c000d6cb:	19 c0                	sbb    eax,eax
c000d6cd:	24 02                	and    al,0x2
c000d6cf:	04 41                	add    al,0x41
c000d6d1:	0f be d8             	movsx  ebx,al
c000d6d4:	3c 43                	cmp    al,0x43
c000d6d6:	75 10                	jne    c000d6e8 <LogicalDisk::assignDriveLetter()+0x4e>
c000d6d8:	80 ba 68 01 00 00 00 	cmp    BYTE PTR [edx+0x168],0x0
c000d6df:	75 63                	jne    c000d744 <LogicalDisk::assignDriveLetter()+0xaa>
c000d6e1:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d6e6:	75 5c                	jne    c000d744 <LogicalDisk::assignDriveLetter()+0xaa>
c000d6e8:	8d 4b bf             	lea    ecx,[ebx-0x41]
c000d6eb:	bf 01 00 00 00       	mov    edi,0x1
c000d6f0:	d3 e7                	shl    edi,cl
c000d6f2:	89 fe                	mov    esi,edi
c000d6f4:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000d6f8:	c1 ff 1f             	sar    edi,0x1f
c000d6fb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c000d6ff:	23 7c 24 0c          	and    edi,DWORD PTR [esp+0xc]
c000d703:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000d707:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000d70b:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000d70f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d713:	0b 7c 24 18          	or     edi,DWORD PTR [esp+0x18]
c000d717:	75 2b                	jne    c000d744 <LogicalDisk::assignDriveLetter()+0xaa>
c000d719:	88 85 68 01 00 00    	mov    BYTE PTR [ebp+0x168],al
c000d71f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d723:	89 2c 8d 20 74 02 c0 	mov    DWORD PTR [ecx*4-0x3ffd8be0],ebp
c000d72a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000d72e:	0b 74 24 10          	or     esi,DWORD PTR [esp+0x10]
c000d732:	0b 7c 24 14          	or     edi,DWORD PTR [esp+0x14]
c000d736:	89 35 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,esi
c000d73c:	89 3d 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edi
c000d742:	eb 09                	jmp    c000d74d <LogicalDisk::assignDriveLetter()+0xb3>
c000d744:	fe c0                	inc    al
c000d746:	43                   	inc    ebx
c000d747:	3c 5b                	cmp    al,0x5b
c000d749:	75 89                	jne    c000d6d4 <LogicalDisk::assignDriveLetter()+0x3a>
c000d74b:	31 c0                	xor    eax,eax
c000d74d:	83 c4 24             	add    esp,0x24
c000d750:	5b                   	pop    ebx
c000d751:	5e                   	pop    esi
c000d752:	5f                   	pop    edi
c000d753:	5d                   	pop    ebp
c000d754:	c3                   	ret    
c000d755:	90                   	nop

c000d756 <LogicalDisk::mount()>:
c000d756:	56                   	push   esi
c000d757:	53                   	push   ebx
c000d758:	53                   	push   ebx
c000d759:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d75d:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d763:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d76d:	85 db                	test   ebx,ebx
c000d76f:	74 27                	je     c000d798 <LogicalDisk::mount()+0x42>
c000d771:	51                   	push   ecx
c000d772:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d779:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d77b:	83 e8 41             	sub    eax,0x41
c000d77e:	50                   	push   eax
c000d77f:	56                   	push   esi
c000d780:	53                   	push   ebx
c000d781:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d784:	83 c4 10             	add    esp,0x10
c000d787:	84 c0                	test   al,al
c000d789:	74 08                	je     c000d793 <LogicalDisk::mount()+0x3d>
c000d78b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d791:	eb 07                	jmp    c000d79a <LogicalDisk::mount()+0x44>
c000d793:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d796:	eb d5                	jmp    c000d76d <LogicalDisk::mount()+0x17>
c000d798:	31 c0                	xor    eax,eax
c000d79a:	5a                   	pop    edx
c000d79b:	5b                   	pop    ebx
c000d79c:	5e                   	pop    esi
c000d79d:	c3                   	ret    

c000d79e <LogicalDisk::unmount()>:
c000d79e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d7a2:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d7ac:	c3                   	ret    
c000d7ad:	90                   	nop

c000d7ae <LogicalDisk::eject()>:
c000d7ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d7b2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d7b8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d7ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d7be:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d7c1:	90                   	nop

c000d7c2 <LogicalDisk::unassignDriveLetter()>:
c000d7c2:	53                   	push   ebx
c000d7c3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000d7c7:	0f be 8b 68 01 00 00 	movsx  ecx,BYTE PTR [ebx+0x168]
c000d7ce:	84 c9                	test   cl,cl
c000d7d0:	75 0e                	jne    c000d7e0 <LogicalDisk::unassignDriveLetter()+0x1e>
c000d7d2:	c7 44 24 08 2c 0b 02 c0 	mov    DWORD PTR [esp+0x8],0xc0020b2c
c000d7da:	5b                   	pop    ebx
c000d7db:	e9 55 36 00 00       	jmp    c0010e35 <KePanic(char const*)>
c000d7e0:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c000d7e7:	83 e9 41             	sub    ecx,0x41
c000d7ea:	b8 01 00 00 00       	mov    eax,0x1
c000d7ef:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d7fa:	d3 e0                	shl    eax,cl
c000d7fc:	66 0f 6e c0          	movd   xmm0,eax
c000d800:	5b                   	pop    ebx
c000d801:	99                   	cdq    
c000d802:	66 0f 6e ca          	movd   xmm1,edx
c000d806:	66 0f 62 c1          	punpckldq xmm0,xmm1
c000d80a:	66 0f 76 c9          	pcmpeqd xmm1,xmm1
c000d80e:	0f 57 c1             	xorps  xmm0,xmm1
c000d811:	f3 0f 7e 0d 00 74 02 c0 	movq   xmm1,QWORD PTR ds:0xc0027400
c000d819:	0f 54 c1             	andps  xmm0,xmm1
c000d81c:	66 0f d6 05 00 74 02 c0 	movq   QWORD PTR ds:0xc0027400,xmm0
c000d824:	c3                   	ret    
c000d825:	90                   	nop

c000d826 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d826:	57                   	push   edi
c000d827:	56                   	push   esi
c000d828:	53                   	push   ebx
c000d829:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d82d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d831:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d835:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d839:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d83f:	77 41                	ja     c000d882 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d841:	99                   	cdq    
c000d842:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d848:	01 c8                	add    eax,ecx
c000d84a:	11 da                	adc    edx,ebx
c000d84c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d852:	19 d7                	sbb    edi,edx
c000d854:	72 33                	jb     c000d889 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d856:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d85c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d862:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d866:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d86a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d870:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d876:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d87a:	5b                   	pop    ebx
c000d87b:	5e                   	pop    esi
c000d87c:	5f                   	pop    edi
c000d87d:	e9 98 0a 00 00       	jmp    c000e31a <VCache::read(unsigned long long, int, void*)>
c000d882:	b8 05 00 00 00       	mov    eax,0x5
c000d887:	eb 05                	jmp    c000d88e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d889:	b8 07 00 00 00       	mov    eax,0x7
c000d88e:	5b                   	pop    ebx
c000d88f:	5e                   	pop    esi
c000d890:	5f                   	pop    edi
c000d891:	c3                   	ret    

c000d892 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d892:	57                   	push   edi
c000d893:	56                   	push   esi
c000d894:	53                   	push   ebx
c000d895:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d899:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d89d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d8a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d8a5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d8ab:	77 41                	ja     c000d8ee <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d8ad:	99                   	cdq    
c000d8ae:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d8b4:	01 c8                	add    eax,ecx
c000d8b6:	11 da                	adc    edx,ebx
c000d8b8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d8be:	19 d7                	sbb    edi,edx
c000d8c0:	72 33                	jb     c000d8f5 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d8c2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d8c8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d8ce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d8d2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d8d6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d8dc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d8e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d8e6:	5b                   	pop    ebx
c000d8e7:	5e                   	pop    esi
c000d8e8:	5f                   	pop    edi
c000d8e9:	e9 42 09 00 00       	jmp    c000e230 <VCache::write(unsigned long long, int, void*)>
c000d8ee:	b8 05 00 00 00       	mov    eax,0x5
c000d8f3:	eb 05                	jmp    c000d8fa <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d8f5:	b8 07 00 00 00       	mov    eax,0x7
c000d8fa:	5b                   	pop    ebx
c000d8fb:	5e                   	pop    esi
c000d8fc:	5f                   	pop    edi
c000d8fd:	c3                   	ret    
c000d8fe:	66 90                	xchg   ax,ax

c000d900 <Mouse::Mouse(char const*)>:
c000d900:	83 ec 1c             	sub    esp,0x1c
c000d903:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d907:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d90b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d90f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d912:	e8 6b ed ff ff       	call   c000c682 <Device::Device(char const*)>
c000d917:	ba 80 0b 02 c0       	mov    edx,0xc0020b80
c000d91c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d920:	89 10                	mov    DWORD PTR [eax],edx
c000d922:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d926:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d930:	90                   	nop
c000d931:	83 c4 1c             	add    esp,0x1c
c000d934:	c3                   	ret    
c000d935:	90                   	nop
c000d936:	66 90                	xchg   ax,ax

c000d938 <Mouse::~Mouse()>:
c000d938:	83 ec 1c             	sub    esp,0x1c
c000d93b:	ba 80 0b 02 c0       	mov    edx,0xc0020b80
c000d940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d944:	89 10                	mov    DWORD PTR [eax],edx
c000d946:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d94a:	89 04 24             	mov    DWORD PTR [esp],eax
c000d94d:	e8 9c ea ff ff       	call   c000c3ee <Device::~Device()>
c000d952:	90                   	nop
c000d953:	83 c4 1c             	add    esp,0x1c
c000d956:	c3                   	ret    
c000d957:	90                   	nop

c000d958 <Mouse::~Mouse()>:
c000d958:	83 ec 1c             	sub    esp,0x1c
c000d95b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d95f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d962:	e8 d1 ff ff ff       	call   c000d938 <Mouse::~Mouse()>
c000d967:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000d96f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d973:	89 04 24             	mov    DWORD PTR [esp],eax
c000d976:	e8 e1 cf ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000d97b:	83 c4 1c             	add    esp,0x1c
c000d97e:	c3                   	ret    
c000d97f:	90                   	nop

c000d980 <NIC::getMAC()>:
c000d980:	31 c0                	xor    eax,eax
c000d982:	31 d2                	xor    edx,edx
c000d984:	c3                   	ret    
c000d985:	90                   	nop

c000d986 <NIC::write(int, unsigned char*, int*)>:
c000d986:	b8 01 00 00 00       	mov    eax,0x1
c000d98b:	c3                   	ret    

c000d98c <NIC::NIC(char const*)>:
c000d98c:	83 ec 1c             	sub    esp,0x1c
c000d98f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d993:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d997:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d99b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d99e:	e8 df ec ff ff       	call   c000c682 <Device::Device(char const*)>
c000d9a3:	ba ac 0b 02 c0       	mov    edx,0xc0020bac
c000d9a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ac:	89 10                	mov    DWORD PTR [eax],edx
c000d9ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9b2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d9bc:	90                   	nop
c000d9bd:	83 c4 1c             	add    esp,0x1c
c000d9c0:	c3                   	ret    
c000d9c1:	90                   	nop

c000d9c2 <NIC::~NIC()>:
c000d9c2:	83 ec 1c             	sub    esp,0x1c
c000d9c5:	ba ac 0b 02 c0       	mov    edx,0xc0020bac
c000d9ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ce:	89 10                	mov    DWORD PTR [eax],edx
c000d9d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000d9d7:	e8 12 ea ff ff       	call   c000c3ee <Device::~Device()>
c000d9dc:	90                   	nop
c000d9dd:	83 c4 1c             	add    esp,0x1c
c000d9e0:	c3                   	ret    
c000d9e1:	90                   	nop

c000d9e2 <NIC::~NIC()>:
c000d9e2:	83 ec 1c             	sub    esp,0x1c
c000d9e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e9:	89 04 24             	mov    DWORD PTR [esp],eax
c000d9ec:	e8 d1 ff ff ff       	call   c000d9c2 <NIC::~NIC()>
c000d9f1:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000d9f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9fd:	89 04 24             	mov    DWORD PTR [esp],eax
c000da00:	e8 57 cf ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000da05:	83 c4 1c             	add    esp,0x1c
c000da08:	c3                   	ret    

c000da09 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000da09:	55                   	push   ebp
c000da0a:	57                   	push   edi
c000da0b:	56                   	push   esi
c000da0c:	53                   	push   ebx
c000da0d:	81 ec 28 01 00 00    	sub    esp,0x128
c000da13:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000da1a:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000da21:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000da28:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000da2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da37:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000da3e:	e8 39 ed ff ff       	call   c000c77c <Device::getName()>
c000da43:	5a                   	pop    edx
c000da44:	59                   	pop    ecx
c000da45:	50                   	push   eax
c000da46:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000da4a:	55                   	push   ebp
c000da4b:	e8 d0 2c ff ff       	call   c0000720 <strcpy>
c000da50:	5b                   	pop    ebx
c000da51:	58                   	pop    eax
c000da52:	68 d8 0b 02 c0       	push   0xc0020bd8
c000da57:	55                   	push   ebp
c000da58:	e8 d3 2e ff ff       	call   c0000930 <strcat>
c000da5d:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000da64:	e8 93 a0 ff ff       	call   c0007afc <malloc>
c000da69:	83 c4 0c             	add    esp,0xc
c000da6c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000da70:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000da74:	89 c3                	mov    ebx,eax
c000da76:	57                   	push   edi
c000da77:	56                   	push   esi
c000da78:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000da7f:	55                   	push   ebp
c000da80:	50                   	push   eax
c000da81:	e8 52 fb ff ff       	call   c000d5d8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000da86:	83 c4 14             	add    esp,0x14
c000da89:	53                   	push   ebx
c000da8a:	e8 0b fc ff ff       	call   c000d69a <LogicalDisk::assignDriveLetter()>
c000da8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000da92:	e8 bf fc ff ff       	call   c000d756 <LogicalDisk::mount()>
c000da97:	58                   	pop    eax
c000da98:	5a                   	pop    edx
c000da99:	53                   	push   ebx
c000da9a:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000daa1:	e8 44 ea ff ff       	call   c000c4ea <Device::addChild(Device*)>
c000daa6:	81 c4 2c 01 00 00    	add    esp,0x12c
c000daac:	5b                   	pop    ebx
c000daad:	5e                   	pop    esi
c000daae:	5f                   	pop    edi
c000daaf:	5d                   	pop    ebp
c000dab0:	c3                   	ret    

c000dab1 <createPartitionsForDisk(PhysicalDisk*)>:
c000dab1:	55                   	push   ebp
c000dab2:	57                   	push   edi
c000dab3:	56                   	push   esi
c000dab4:	53                   	push   ebx
c000dab5:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dabb:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dac2:	8b 8b 5c 01 00 00    	mov    ecx,DWORD PTR [ebx+0x15c]
c000dac8:	81 f9 00 02 00 00    	cmp    ecx,0x200
c000dace:	74 30                	je     c000db00 <createPartitionsForDisk(PhysicalDisk*)+0x4f>
c000dad0:	89 cf                	mov    edi,ecx
c000dad2:	83 ec 10             	sub    esp,0x10
c000dad5:	f3 0f 7e 83 60 01 00 00 	movq   xmm0,QWORD PTR [ebx+0x160]
c000dadd:	c1 ff 1f             	sar    edi,0x1f
c000dae0:	66 0f 73 f0 0a       	psllq  xmm0,0xa
c000dae5:	57                   	push   edi
c000dae6:	66 0f 7e c0          	movd   eax,xmm0
c000daea:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c000daef:	51                   	push   ecx
c000daf0:	66 0f 7e c2          	movd   edx,xmm0
c000daf4:	52                   	push   edx
c000daf5:	50                   	push   eax
c000daf6:	e8 55 0f 01 00       	call   c001ea50 <__udivdi3>
c000dafb:	e9 bf 00 00 00       	jmp    c000dbbf <createPartitionsForDisk(PhysicalDisk*)+0x10e>
c000db00:	83 ec 0c             	sub    esp,0xc
c000db03:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db05:	8d 6c 24 5c          	lea    ebp,[esp+0x5c]
c000db09:	55                   	push   ebp
c000db0a:	6a 01                	push   0x1
c000db0c:	6a 00                	push   0x0
c000db0e:	6a 00                	push   0x0
c000db10:	53                   	push   ebx
c000db11:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000db14:	83 c4 20             	add    esp,0x20
c000db17:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000db1f:	75 0a                	jne    c000db2b <createPartitionsForDisk(PhysicalDisk*)+0x7a>
c000db21:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000db29:	74 2f                	je     c000db5a <createPartitionsForDisk(PhysicalDisk*)+0xa9>
c000db2b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000db31:	83 ec 10             	sub    esp,0x10
c000db34:	f3 0f 7e 83 60 01 00 00 	movq   xmm0,QWORD PTR [ebx+0x160]
c000db3c:	66 0f 73 f0 0a       	psllq  xmm0,0xa
c000db41:	66 0f 7e c6          	movd   esi,xmm0
c000db45:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c000db4a:	66 0f 7e c7          	movd   edi,xmm0
c000db4e:	99                   	cdq    
c000db4f:	52                   	push   edx
c000db50:	50                   	push   eax
c000db51:	57                   	push   edi
c000db52:	56                   	push   esi
c000db53:	e8 f8 0e 01 00       	call   c001ea50 <__udivdi3>
c000db58:	eb 65                	jmp    c000dbbf <createPartitionsForDisk(PhysicalDisk*)+0x10e>
c000db5a:	8a 84 24 0e 02 00 00 	mov    al,BYTE PTR [esp+0x20e]
c000db61:	8a 8c 24 1e 02 00 00 	mov    cl,BYTE PTR [esp+0x21e]
c000db68:	24 7f                	and    al,0x7f
c000db6a:	80 e1 7f             	and    cl,0x7f
c000db6d:	00 c8                	add    al,cl
c000db6f:	8a 8c 24 2e 02 00 00 	mov    cl,BYTE PTR [esp+0x22e]
c000db76:	80 e1 7f             	and    cl,0x7f
c000db79:	00 c1                	add    cl,al
c000db7b:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000db82:	24 7f                	and    al,0x7f
c000db84:	00 c1                	add    cl,al
c000db86:	74 4e                	je     c000dbd6 <createPartitionsForDisk(PhysicalDisk*)+0x125>
c000db88:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000db8e:	83 ec 10             	sub    esp,0x10
c000db91:	f3 0f 7e 83 60 01 00 00 	movq   xmm0,QWORD PTR [ebx+0x160]
c000db99:	66 0f 73 f0 0a       	psllq  xmm0,0xa
c000db9e:	66 0f 7e 44 24 10    	movd   DWORD PTR [esp+0x10],xmm0
c000dba4:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c000dba9:	66 0f 7e 44 24 14    	movd   DWORD PTR [esp+0x14],xmm0
c000dbaf:	99                   	cdq    
c000dbb0:	52                   	push   edx
c000dbb1:	50                   	push   eax
c000dbb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbba:	e8 91 0e 01 00       	call   c001ea50 <__udivdi3>
c000dbbf:	83 c4 14             	add    esp,0x14
c000dbc2:	52                   	push   edx
c000dbc3:	50                   	push   eax
c000dbc4:	6a 00                	push   0x0
c000dbc6:	6a 00                	push   0x0
c000dbc8:	53                   	push   ebx
c000dbc9:	e8 3b fe ff ff       	call   c000da09 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000dbce:	83 c4 20             	add    esp,0x20
c000dbd1:	e9 72 01 00 00       	jmp    c000dd48 <createPartitionsForDisk(PhysicalDisk*)+0x297>
c000dbd6:	31 c0                	xor    eax,eax
c000dbd8:	80 bd be 01 00 00 80 	cmp    BYTE PTR [ebp+0x1be],0x80
c000dbdf:	75 02                	jne    c000dbe3 <createPartitionsForDisk(PhysicalDisk*)+0x132>
c000dbe1:	88 c1                	mov    cl,al
c000dbe3:	c7 44 c4 14 00 00 00 00 	mov    DWORD PTR [esp+eax*8+0x14],0x0
c000dbeb:	0f b6 95 c7 01 00 00 	movzx  edx,BYTE PTR [ebp+0x1c7]
c000dbf2:	83 c5 10             	add    ebp,0x10
c000dbf5:	c7 44 c4 34 00 00 00 00 	mov    DWORD PTR [esp+eax*8+0x34],0x0
c000dbfd:	c1 e2 08             	shl    edx,0x8
c000dc00:	89 d6                	mov    esi,edx
c000dc02:	0f b6 95 b8 01 00 00 	movzx  edx,BYTE PTR [ebp+0x1b8]
c000dc09:	c1 e2 10             	shl    edx,0x10
c000dc0c:	09 f2                	or     edx,esi
c000dc0e:	0f b6 b5 b6 01 00 00 	movzx  esi,BYTE PTR [ebp+0x1b6]
c000dc15:	09 f2                	or     edx,esi
c000dc17:	0f b6 b5 b9 01 00 00 	movzx  esi,BYTE PTR [ebp+0x1b9]
c000dc1e:	c1 e6 18             	shl    esi,0x18
c000dc21:	09 f2                	or     edx,esi
c000dc23:	89 54 c4 10          	mov    DWORD PTR [esp+eax*8+0x10],edx
c000dc27:	0f b6 95 bb 01 00 00 	movzx  edx,BYTE PTR [ebp+0x1bb]
c000dc2e:	c1 e2 08             	shl    edx,0x8
c000dc31:	89 d6                	mov    esi,edx
c000dc33:	0f b6 95 bc 01 00 00 	movzx  edx,BYTE PTR [ebp+0x1bc]
c000dc3a:	c1 e2 10             	shl    edx,0x10
c000dc3d:	09 f2                	or     edx,esi
c000dc3f:	0f b6 b5 ba 01 00 00 	movzx  esi,BYTE PTR [ebp+0x1ba]
c000dc46:	09 f2                	or     edx,esi
c000dc48:	0f b6 b5 bd 01 00 00 	movzx  esi,BYTE PTR [ebp+0x1bd]
c000dc4f:	c1 e6 18             	shl    esi,0x18
c000dc52:	09 f2                	or     edx,esi
c000dc54:	89 54 c4 30          	mov    DWORD PTR [esp+eax*8+0x30],edx
c000dc58:	40                   	inc    eax
c000dc59:	83 f8 04             	cmp    eax,0x4
c000dc5c:	0f 85 76 ff ff ff    	jne    c000dbd8 <createPartitionsForDisk(PhysicalDisk*)+0x127>
c000dc62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc66:	83 f0 01             	xor    eax,0x1
c000dc69:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000dc6d:	75 62                	jne    c000dcd1 <createPartitionsForDisk(PhysicalDisk*)+0x220>
c000dc6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dc73:	83 f0 01             	xor    eax,0x1
c000dc76:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000dc7a:	75 55                	jne    c000dcd1 <createPartitionsForDisk(PhysicalDisk*)+0x220>
c000dc7c:	f3 0f 7e 83 60 01 00 00 	movq   xmm0,QWORD PTR [ebx+0x160]
c000dc84:	88 0c 24             	mov    BYTE PTR [esp],cl
c000dc87:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dc8d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dc95:	66 0f 73 f0 0a       	psllq  xmm0,0xa
c000dc9a:	66 0f 7e 44 24 08    	movd   DWORD PTR [esp+0x8],xmm0
c000dca0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dca8:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c000dcad:	66 0f 7e 44 24 0c    	movd   DWORD PTR [esp+0xc],xmm0
c000dcb3:	99                   	cdq    
c000dcb4:	52                   	push   edx
c000dcb5:	50                   	push   eax
c000dcb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dcba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dcbe:	e8 8d 0d 01 00       	call   c001ea50 <__udivdi3>
c000dcc3:	83 c4 10             	add    esp,0x10
c000dcc6:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dcc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dccd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dcd1:	84 c9                	test   cl,cl
c000dcd3:	74 3f                	je     c000dd14 <createPartitionsForDisk(PhysicalDisk*)+0x263>
c000dcd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dcd9:	0f b6 c9             	movzx  ecx,cl
c000dcdc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dce0:	f3 0f 7e 4c cc 10    	movq   xmm1,QWORD PTR [esp+ecx*8+0x10]
c000dce6:	66 0f d6 4c 24 10    	movq   QWORD PTR [esp+0x10],xmm1
c000dcec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dcf0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dcf4:	89 74 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],esi
c000dcf8:	8b 74 cc 30          	mov    esi,DWORD PTR [esp+ecx*8+0x30]
c000dcfc:	89 7c cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edi
c000dd00:	8b 7c cc 34          	mov    edi,DWORD PTR [esp+ecx*8+0x34]
c000dd04:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000dd08:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000dd0c:	89 44 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],eax
c000dd10:	89 54 cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edx
c000dd14:	31 ed                	xor    ebp,ebp
c000dd16:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000dd1a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000dd1e:	89 f8                	mov    eax,edi
c000dd20:	09 f0                	or     eax,esi
c000dd22:	74 1e                	je     c000dd42 <createPartitionsForDisk(PhysicalDisk*)+0x291>
c000dd24:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dd28:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000dd2c:	89 d1                	mov    ecx,edx
c000dd2e:	09 c1                	or     ecx,eax
c000dd30:	74 10                	je     c000dd42 <createPartitionsForDisk(PhysicalDisk*)+0x291>
c000dd32:	83 ec 0c             	sub    esp,0xc
c000dd35:	57                   	push   edi
c000dd36:	56                   	push   esi
c000dd37:	52                   	push   edx
c000dd38:	50                   	push   eax
c000dd39:	53                   	push   ebx
c000dd3a:	e8 ca fc ff ff       	call   c000da09 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000dd3f:	83 c4 20             	add    esp,0x20
c000dd42:	45                   	inc    ebp
c000dd43:	83 fd 04             	cmp    ebp,0x4
c000dd46:	75 ce                	jne    c000dd16 <createPartitionsForDisk(PhysicalDisk*)+0x265>
c000dd48:	81 c4 5c 02 00 00    	add    esp,0x25c
c000dd4e:	5b                   	pop    ebx
c000dd4f:	5e                   	pop    esi
c000dd50:	5f                   	pop    edi
c000dd51:	5d                   	pop    ebp
c000dd52:	c3                   	ret    
c000dd53:	90                   	nop

c000dd54 <Serial::Serial(char const*)>:
c000dd54:	83 ec 1c             	sub    esp,0x1c
c000dd57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd5b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dd5f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dd63:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd66:	e8 17 e9 ff ff       	call   c000c682 <Device::Device(char const*)>
c000dd6b:	ba ec 0b 02 c0       	mov    edx,0xc0020bec
c000dd70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd74:	89 10                	mov    DWORD PTR [eax],edx
c000dd76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd7a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000dd84:	90                   	nop
c000dd85:	83 c4 1c             	add    esp,0x1c
c000dd88:	c3                   	ret    
c000dd89:	90                   	nop
c000dd8a:	66 90                	xchg   ax,ax

c000dd8c <Serial::~Serial()>:
c000dd8c:	83 ec 1c             	sub    esp,0x1c
c000dd8f:	ba ec 0b 02 c0       	mov    edx,0xc0020bec
c000dd94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd98:	89 10                	mov    DWORD PTR [eax],edx
c000dd9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd9e:	89 04 24             	mov    DWORD PTR [esp],eax
c000dda1:	e8 48 e6 ff ff       	call   c000c3ee <Device::~Device()>
c000dda6:	90                   	nop
c000dda7:	83 c4 1c             	add    esp,0x1c
c000ddaa:	c3                   	ret    
c000ddab:	90                   	nop

c000ddac <Serial::~Serial()>:
c000ddac:	83 ec 1c             	sub    esp,0x1c
c000ddaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddb3:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddb6:	e8 d1 ff ff ff       	call   c000dd8c <Serial::~Serial()>
c000ddbb:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000ddc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddc7:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddca:	e8 8d cb ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000ddcf:	83 c4 1c             	add    esp,0x1c
c000ddd2:	c3                   	ret    
c000ddd3:	90                   	nop

c000ddd4 <Timer::Timer(char const*)>:
c000ddd4:	83 ec 1c             	sub    esp,0x1c
c000ddd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dddb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dddf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dde3:	89 04 24             	mov    DWORD PTR [esp],eax
c000dde6:	e8 97 e8 ff ff       	call   c000c682 <Device::Device(char const*)>
c000ddeb:	ba 30 0c 02 c0       	mov    edx,0xc0020c30
c000ddf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddf4:	89 10                	mov    DWORD PTR [eax],edx
c000ddf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddfa:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000de04:	90                   	nop
c000de05:	83 c4 1c             	add    esp,0x1c
c000de08:	c3                   	ret    
c000de09:	90                   	nop
c000de0a:	66 90                	xchg   ax,ax

c000de0c <Timer::~Timer()>:
c000de0c:	83 ec 1c             	sub    esp,0x1c
c000de0f:	ba 30 0c 02 c0       	mov    edx,0xc0020c30
c000de14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de18:	89 10                	mov    DWORD PTR [eax],edx
c000de1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de1e:	89 04 24             	mov    DWORD PTR [esp],eax
c000de21:	e8 c8 e5 ff ff       	call   c000c3ee <Device::~Device()>
c000de26:	90                   	nop
c000de27:	83 c4 1c             	add    esp,0x1c
c000de2a:	c3                   	ret    
c000de2b:	90                   	nop

c000de2c <Timer::~Timer()>:
c000de2c:	83 ec 1c             	sub    esp,0x1c
c000de2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de33:	89 04 24             	mov    DWORD PTR [esp],eax
c000de36:	e8 d1 ff ff ff       	call   c000de0c <Timer::~Timer()>
c000de3b:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000de43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de47:	89 04 24             	mov    DWORD PTR [esp],eax
c000de4a:	e8 0d cb ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000de4f:	83 c4 1c             	add    esp,0x1c
c000de52:	c3                   	ret    
c000de53:	90                   	nop

c000de54 <Timer::read()>:
c000de54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de58:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de5e:	c3                   	ret    

c000de5f <setupTimer(int)>:
c000de5f:	53                   	push   ebx
c000de60:	83 ec 14             	sub    esp,0x14
c000de63:	68 5c 01 00 00       	push   0x15c
c000de68:	e8 8f 9c ff ff       	call   c0007afc <malloc>
c000de6d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de70:	89 c3                	mov    ebx,eax
c000de72:	e8 39 04 01 00       	call   c001e2b0 <PIT::PIT()>
c000de77:	58                   	pop    eax
c000de78:	5a                   	pop    edx
c000de79:	53                   	push   ebx
c000de7a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000de80:	e8 65 e6 ff ff       	call   c000c4ea <Device::addChild(Device*)>
c000de85:	8b 03                	mov    eax,DWORD PTR [ebx]
c000de87:	6a 00                	push   0x0
c000de89:	6a 00                	push   0x0
c000de8b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000de8f:	53                   	push   ebx
c000de90:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000de93:	83 c4 28             	add    esp,0x28
c000de96:	89 d8                	mov    eax,ebx
c000de98:	5b                   	pop    ebx
c000de99:	c3                   	ret    

c000de9a <timerHandler(unsigned int)>:
c000de9a:	56                   	push   esi
c000de9b:	53                   	push   ebx
c000de9c:	51                   	push   ecx
c000de9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dea1:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000dea7:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000deae:	0f 84 48 01 00 00    	je     c000dffc <timerHandler(unsigned int)+0x162>
c000deb4:	fa                   	cli    
c000deb5:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000debb:	83 ec 0c             	sub    esp,0xc
c000debe:	68 78 81 02 c0       	push   0xc0028178
c000dec3:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000dec9:	e8 2a 11 01 00       	call   c001eff8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000dece:	83 c4 10             	add    esp,0x10
c000ded1:	84 c0                	test   al,al
c000ded3:	0f 85 9f 00 00 00    	jne    c000df78 <timerHandler(unsigned int)+0xde>
c000ded9:	83 ec 0c             	sub    esp,0xc
c000dedc:	68 78 81 02 c0       	push   0xc0028178
c000dee1:	e8 2e 11 01 00       	call   c001f014 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000dee6:	83 c4 10             	add    esp,0x10
c000dee9:	89 c6                	mov    esi,eax
c000deeb:	90                   	nop
c000deec:	83 ec 0c             	sub    esp,0xc
c000deef:	68 78 81 02 c0       	push   0xc0028178
c000def4:	e8 1b 11 01 00       	call   c001f014 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000def9:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000df00:	89 c3                	mov    ebx,eax
c000df02:	e8 15 11 01 00       	call   c001f01c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000df07:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000df0a:	83 c4 10             	add    esp,0x10
c000df0d:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000df13:	77 23                	ja     c000df38 <timerHandler(unsigned int)+0x9e>
c000df15:	83 ec 0c             	sub    esp,0xc
c000df18:	53                   	push   ebx
c000df19:	e8 ca 7c 00 00       	call   c0015be8 <unblockTask(ThreadControlBlock*)>
c000df1e:	83 c4 10             	add    esp,0x10
c000df21:	39 de                	cmp    esi,ebx
c000df23:	75 27                	jne    c000df4c <timerHandler(unsigned int)+0xb2>
c000df25:	83 ec 0c             	sub    esp,0xc
c000df28:	68 78 81 02 c0       	push   0xc0028178
c000df2d:	e8 e2 10 01 00       	call   c001f014 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000df32:	89 c6                	mov    esi,eax
c000df34:	eb 12                	jmp    c000df48 <timerHandler(unsigned int)+0xae>
c000df36:	66 90                	xchg   ax,ax
c000df38:	52                   	push   edx
c000df39:	52                   	push   edx
c000df3a:	53                   	push   ebx
c000df3b:	68 78 81 02 c0       	push   0xc0028178
c000df40:	e8 83 11 01 00       	call   c001f0c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000df45:	8d 76 00             	lea    esi,[esi+0x0]
c000df48:	83 c4 10             	add    esp,0x10
c000df4b:	90                   	nop
c000df4c:	83 ec 0c             	sub    esp,0xc
c000df4f:	68 78 81 02 c0       	push   0xc0028178
c000df54:	e8 9f 10 01 00       	call   c001eff8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000df59:	83 c4 10             	add    esp,0x10
c000df5c:	84 c0                	test   al,al
c000df5e:	75 18                	jne    c000df78 <timerHandler(unsigned int)+0xde>
c000df60:	83 ec 0c             	sub    esp,0xc
c000df63:	68 78 81 02 c0       	push   0xc0028178
c000df68:	e8 a7 10 01 00       	call   c001f014 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000df6d:	83 c4 10             	add    esp,0x10
c000df70:	39 f0                	cmp    eax,esi
c000df72:	0f 85 74 ff ff ff    	jne    c000deec <timerHandler(unsigned int)+0x52>
c000df78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000df7d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000df81:	74 41                	je     c000dfc4 <timerHandler(unsigned int)+0x12a>
c000df83:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000df8a:	74 38                	je     c000dfc4 <timerHandler(unsigned int)+0x12a>
c000df8c:	fa                   	cli    
c000df8d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000df93:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000df98:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000df9e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000dfa1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000dfa7:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000dfaa:	72 08                	jb     c000dfb4 <timerHandler(unsigned int)+0x11a>
c000dfac:	e8 af 77 00 00       	call   c0015760 <schedule()>
c000dfb1:	8d 76 00             	lea    esi,[esi+0x0]
c000dfb4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000dfb9:	48                   	dec    eax
c000dfba:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000dfbf:	75 03                	jne    c000dfc4 <timerHandler(unsigned int)+0x12a>
c000dfc1:	fb                   	sti    
c000dfc2:	66 90                	xchg   ax,ax
c000dfc4:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000dfc9:	48                   	dec    eax
c000dfca:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000dfcf:	75 1b                	jne    c000dfec <timerHandler(unsigned int)+0x152>
c000dfd1:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000dfd8:	74 12                	je     c000dfec <timerHandler(unsigned int)+0x152>
c000dfda:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000dfe4:	e8 77 77 00 00       	call   c0015760 <schedule()>
c000dfe9:	8d 76 00             	lea    esi,[esi+0x0]
c000dfec:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000dff1:	48                   	dec    eax
c000dff2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000dff7:	75 03                	jne    c000dffc <timerHandler(unsigned int)+0x162>
c000dff9:	fb                   	sti    
c000dffa:	66 90                	xchg   ax,ax
c000dffc:	58                   	pop    eax
c000dffd:	5b                   	pop    ebx
c000dffe:	5e                   	pop    esi
c000dfff:	c3                   	ret    

c000e000 <VCache::VCache(PhysicalDisk*)>:
c000e000:	53                   	push   ebx
c000e001:	83 ec 28             	sub    esp,0x28
c000e004:	ba 60 0c 02 c0       	mov    edx,0xc0020c60
c000e009:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e00d:	89 10                	mov    DWORD PTR [eax],edx
c000e00f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e013:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e01a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e01e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e025:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e029:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e030:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e03b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e042:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e049:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e04d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e054:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e058:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e05c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e060:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e067:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e06e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e072:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e076:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e07a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e07e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e082:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e08a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e091:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c000e099:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e09d:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0a0:	e8 57 9a ff ff       	call   c0007afc <malloc>
c000e0a5:	89 c3                	mov    ebx,eax
c000e0a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e0aa:	e8 3d 74 00 00       	call   c00154ec <Mutex::Mutex()>
c000e0af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0b3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e0b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0ba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e0be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e0c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0c5:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e0cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e0d0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0da:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e0dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e0e1:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e0e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e0ed:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e0f1:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e0f4:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e0f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0fb:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e0ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e103:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e109:	05 00 02 00 00       	add    eax,0x200
c000e10e:	c1 e0 03             	shl    eax,0x3
c000e111:	89 04 24             	mov    DWORD PTR [esp],eax
c000e114:	e8 e3 99 ff ff       	call   c0007afc <malloc>
c000e119:	89 c2                	mov    edx,eax
c000e11b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e11f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e122:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e126:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e12d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e131:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e135:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e139:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e13f:	89 d0                	mov    eax,edx
c000e141:	c1 e0 02             	shl    eax,0x2
c000e144:	01 d0                	add    eax,edx
c000e146:	c1 e0 04             	shl    eax,0x4
c000e149:	89 04 24             	mov    DWORD PTR [esp],eax
c000e14c:	e8 ab 99 ff ff       	call   c0007afc <malloc>
c000e151:	89 c2                	mov    edx,eax
c000e153:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e157:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e15a:	90                   	nop
c000e15b:	83 c4 28             	add    esp,0x28
c000e15e:	5b                   	pop    ebx
c000e15f:	c3                   	ret    

c000e160 <VCache::invalidateReadBuffer()>:
c000e160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e164:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e16a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e16e:	c3                   	ret    
c000e16f:	90                   	nop

c000e170 <VCache::writeWriteBuffer()>:
c000e170:	53                   	push   ebx
c000e171:	83 ec 08             	sub    esp,0x8
c000e174:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e178:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e17c:	74 1e                	je     c000e19c <VCache::writeWriteBuffer()+0x2c>
c000e17e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e181:	83 ec 0c             	sub    esp,0xc
c000e184:	8b 10                	mov    edx,DWORD PTR [eax]
c000e186:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e189:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e18c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e18f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e192:	50                   	push   eax
c000e193:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e196:	83 c4 20             	add    esp,0x20
c000e199:	8d 76 00             	lea    esi,[esi+0x0]
c000e19c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e1a3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e1aa:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e1ae:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e1b5:	83 c4 08             	add    esp,0x8
c000e1b8:	5b                   	pop    ebx
c000e1b9:	c3                   	ret    
c000e1ba:	66 90                	xchg   ax,ax

c000e1bc <VCache::~VCache()>:
c000e1bc:	83 ec 1c             	sub    esp,0x1c
c000e1bf:	ba 60 0c 02 c0       	mov    edx,0xc0020c60
c000e1c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1c8:	89 10                	mov    DWORD PTR [eax],edx
c000e1ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1ce:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
c000e1d2:	84 c0                	test   al,al
c000e1d4:	74 0e                	je     c000e1e4 <VCache::~VCache()+0x28>
c000e1d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1da:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1dd:	e8 8e ff ff ff       	call   c000e170 <VCache::writeWriteBuffer()>
c000e1e2:	66 90                	xchg   ax,ax
c000e1e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1e8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e1eb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1ee:	e8 1c 99 ff ff       	call   c0007b0f <free>
c000e1f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1f7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e1fa:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1fd:	e8 0d 99 ff ff       	call   c0007b0f <free>
c000e202:	90                   	nop
c000e203:	83 c4 1c             	add    esp,0x1c
c000e206:	c3                   	ret    
c000e207:	90                   	nop

c000e208 <VCache::~VCache()>:
c000e208:	83 ec 1c             	sub    esp,0x1c
c000e20b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e20f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e212:	e8 a5 ff ff ff       	call   c000e1bc <VCache::~VCache()>
c000e217:	c7 44 24 04 44 00 00 00 	mov    DWORD PTR [esp+0x4],0x44
c000e21f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e223:	89 04 24             	mov    DWORD PTR [esp],eax
c000e226:	e8 31 c7 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000e22b:	83 c4 1c             	add    esp,0x1c
c000e22e:	c3                   	ret    
c000e22f:	90                   	nop

c000e230 <VCache::write(unsigned long long, int, void*)>:
c000e230:	55                   	push   ebp
c000e231:	57                   	push   edi
c000e232:	56                   	push   esi
c000e233:	53                   	push   ebx
c000e234:	83 ec 1c             	sub    esp,0x1c
c000e237:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e23b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e23f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000e243:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e247:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e24b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e24f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e253:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e257:	74 07                	je     c000e260 <VCache::write(unsigned long long, int, void*)+0x30>
c000e259:	53                   	push   ebx
c000e25a:	e8 01 ff ff ff       	call   c000e160 <VCache::invalidateReadBuffer()>
c000e25f:	58                   	pop    eax
c000e260:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e264:	74 5a                	je     c000e2c0 <VCache::write(unsigned long long, int, void*)+0x90>
c000e266:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000e269:	89 e8                	mov    eax,ebp
c000e26b:	99                   	cdq    
c000e26c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e26f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e272:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c000e276:	33 54 24 0c          	xor    edx,DWORD PTR [esp+0xc]
c000e27a:	89 c1                	mov    ecx,eax
c000e27c:	09 d1                	or     ecx,edx
c000e27e:	75 34                	jne    c000e2b4 <VCache::write(unsigned long long, int, void*)+0x84>
c000e280:	83 ff 01             	cmp    edi,0x1
c000e283:	75 2f                	jne    c000e2b4 <VCache::write(unsigned long long, int, void*)+0x84>
c000e285:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e288:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e28b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e291:	0f af e9             	imul   ebp,ecx
c000e294:	01 ef                	add    edi,ebp
c000e296:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e298:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e29b:	40                   	inc    eax
c000e29c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e29f:	83 f8 50             	cmp    eax,0x50
c000e2a2:	75 6c                	jne    c000e310 <VCache::write(unsigned long long, int, void*)+0xe0>
c000e2a4:	83 ec 0c             	sub    esp,0xc
c000e2a7:	53                   	push   ebx
c000e2a8:	e8 c3 fe ff ff       	call   c000e170 <VCache::writeWriteBuffer()>
c000e2ad:	83 c4 10             	add    esp,0x10
c000e2b0:	eb 5e                	jmp    c000e310 <VCache::write(unsigned long long, int, void*)+0xe0>
c000e2b2:	66 90                	xchg   ax,ax
c000e2b4:	83 ec 0c             	sub    esp,0xc
c000e2b7:	53                   	push   ebx
c000e2b8:	e8 b3 fe ff ff       	call   c000e170 <VCache::writeWriteBuffer()>
c000e2bd:	83 c4 10             	add    esp,0x10
c000e2c0:	83 ff 4f             	cmp    edi,0x4f
c000e2c3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e2c6:	7f 20                	jg     c000e2e8 <VCache::write(unsigned long long, int, void*)+0xb8>
c000e2c8:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e2cb:	f3 0f 7e 44 24 08    	movq   xmm0,QWORD PTR [esp+0x8]
c000e2d1:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e2d4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e2d8:	66 0f d6 43 1c       	movq   QWORD PTR [ebx+0x1c],xmm0
c000e2dd:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e2e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e2e5:	eb 29                	jmp    c000e310 <VCache::write(unsigned long long, int, void*)+0xe0>
c000e2e7:	90                   	nop
c000e2e8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2ea:	f3 0f 7e 4c 24 08    	movq   xmm1,QWORD PTR [esp+0x8]
c000e2f0:	66 0f d6 4c 24 34    	movq   QWORD PTR [esp+0x34],xmm1
c000e2f6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e2fa:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e2fe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e302:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e305:	83 c4 1c             	add    esp,0x1c
c000e308:	5b                   	pop    ebx
c000e309:	5e                   	pop    esi
c000e30a:	5f                   	pop    edi
c000e30b:	5d                   	pop    ebp
c000e30c:	ff e0                	jmp    eax
c000e30e:	66 90                	xchg   ax,ax
c000e310:	83 c4 1c             	add    esp,0x1c
c000e313:	31 c0                	xor    eax,eax
c000e315:	5b                   	pop    ebx
c000e316:	5e                   	pop    esi
c000e317:	5f                   	pop    edi
c000e318:	5d                   	pop    ebp
c000e319:	c3                   	ret    

c000e31a <VCache::read(unsigned long long, int, void*)>:
c000e31a:	55                   	push   ebp
c000e31b:	57                   	push   edi
c000e31c:	56                   	push   esi
c000e31d:	53                   	push   ebx
c000e31e:	83 ec 1c             	sub    esp,0x1c
c000e321:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e325:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e329:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e32d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e331:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e335:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e339:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e33d:	74 0d                	je     c000e34c <VCache::read(unsigned long long, int, void*)+0x32>
c000e33f:	83 ec 0c             	sub    esp,0xc
c000e342:	53                   	push   ebx
c000e343:	e8 28 fe ff ff       	call   c000e170 <VCache::writeWriteBuffer()>
c000e348:	83 c4 10             	add    esp,0x10
c000e34b:	90                   	nop
c000e34c:	83 fe 01             	cmp    esi,0x1
c000e34f:	75 77                	jne    c000e3c8 <VCache::read(unsigned long long, int, void*)+0xae>
c000e351:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000e354:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000e35b:	75 6b                	jne    c000e3c8 <VCache::read(unsigned long long, int, void*)+0xae>
c000e35d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000e360:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e364:	f7 d8                	neg    eax
c000e366:	99                   	cdq    
c000e367:	21 f8                	and    eax,edi
c000e369:	21 ea                	and    edx,ebp
c000e36b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e36f:	74 2f                	je     c000e3a0 <VCache::read(unsigned long long, int, void*)+0x86>
c000e371:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000e374:	75 2a                	jne    c000e3a0 <VCache::read(unsigned long long, int, void*)+0x86>
c000e376:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000e379:	75 25                	jne    c000e3a0 <VCache::read(unsigned long long, int, void*)+0x86>
c000e37b:	90                   	nop
c000e37c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e37f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e385:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000e388:	8d 70 ff             	lea    esi,[eax-0x1]
c000e38b:	21 fe                	and    esi,edi
c000e38d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e391:	0f af f1             	imul   esi,ecx
c000e394:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000e397:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e399:	31 c0                	xor    eax,eax
c000e39b:	eb 5f                	jmp    c000e3fc <VCache::read(unsigned long long, int, void*)+0xe2>
c000e39d:	8d 76 00             	lea    esi,[esi+0x0]
c000e3a0:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000e3a4:	83 ec 0c             	sub    esp,0xc
c000e3a7:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000e3aa:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000e3ad:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e3af:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000e3b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3b6:	52                   	push   edx
c000e3b7:	50                   	push   eax
c000e3b8:	51                   	push   ecx
c000e3b9:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e3bc:	83 c4 20             	add    esp,0x20
c000e3bf:	85 c0                	test   eax,eax
c000e3c1:	75 39                	jne    c000e3fc <VCache::read(unsigned long long, int, void*)+0xe2>
c000e3c3:	eb b7                	jmp    c000e37c <VCache::read(unsigned long long, int, void*)+0x62>
c000e3c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e3c8:	83 ec 0c             	sub    esp,0xc
c000e3cb:	53                   	push   ebx
c000e3cc:	e8 8f fd ff ff       	call   c000e160 <VCache::invalidateReadBuffer()>
c000e3d1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e3d4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000e3d8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e3da:	89 74 24 4c          	mov    DWORD PTR [esp+0x4c],esi
c000e3de:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000e3e2:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000e3e6:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e3ea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e3ee:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e3f1:	83 c4 2c             	add    esp,0x2c
c000e3f4:	5b                   	pop    ebx
c000e3f5:	5e                   	pop    esi
c000e3f6:	5f                   	pop    edi
c000e3f7:	5d                   	pop    ebp
c000e3f8:	ff e0                	jmp    eax
c000e3fa:	66 90                	xchg   ax,ax
c000e3fc:	83 c4 1c             	add    esp,0x1c
c000e3ff:	5b                   	pop    ebx
c000e400:	5e                   	pop    esi
c000e401:	5f                   	pop    edi
c000e402:	5d                   	pop    ebp
c000e403:	c3                   	ret    

c000e404 <Video::putrect(int, int, int, int, unsigned int)>:
c000e404:	55                   	push   ebp
c000e405:	57                   	push   edi
c000e406:	56                   	push   esi
c000e407:	53                   	push   ebx
c000e408:	83 ec 1c             	sub    esp,0x1c
c000e40b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e40f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e413:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e417:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e41b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e41f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e423:	01 df                	add    edi,ebx
c000e425:	39 fb                	cmp    ebx,edi
c000e427:	7d 1f                	jge    c000e448 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e429:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e42d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e431:	7d 12                	jge    c000e445 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e433:	8b 16                	mov    edx,DWORD PTR [esi]
c000e435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e439:	53                   	push   ebx
c000e43a:	55                   	push   ebp
c000e43b:	45                   	inc    ebp
c000e43c:	56                   	push   esi
c000e43d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e440:	83 c4 10             	add    esp,0x10
c000e443:	eb e8                	jmp    c000e42d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e445:	43                   	inc    ebx
c000e446:	eb dd                	jmp    c000e425 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e448:	83 c4 1c             	add    esp,0x1c
c000e44b:	5b                   	pop    ebx
c000e44c:	5e                   	pop    esi
c000e44d:	5f                   	pop    edi
c000e44e:	5d                   	pop    ebp
c000e44f:	c3                   	ret    

c000e450 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e450:	55                   	push   ebp
c000e451:	57                   	push   edi
c000e452:	31 ff                	xor    edi,edi
c000e454:	56                   	push   esi
c000e455:	53                   	push   ebx
c000e456:	83 ec 1c             	sub    esp,0x1c
c000e459:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e45d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e461:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e468:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e46d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e471:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e475:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e479:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e47c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e480:	01 f9                	add    ecx,edi
c000e482:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e486:	7d 2f                	jge    c000e4b7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e488:	31 f6                	xor    esi,esi
c000e48a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e48e:	01 f2                	add    edx,esi
c000e490:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e494:	7d 1a                	jge    c000e4b0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e496:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e499:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e49c:	46                   	inc    esi
c000e49d:	51                   	push   ecx
c000e49e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e4a2:	52                   	push   edx
c000e4a3:	55                   	push   ebp
c000e4a4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e4a7:	83 c4 10             	add    esp,0x10
c000e4aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e4ae:	eb da                	jmp    c000e48a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e4b0:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e4b4:	47                   	inc    edi
c000e4b5:	eb c5                	jmp    c000e47c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e4b7:	83 c4 1c             	add    esp,0x1c
c000e4ba:	5b                   	pop    ebx
c000e4bb:	5e                   	pop    esi
c000e4bc:	5f                   	pop    edi
c000e4bd:	5d                   	pop    ebp
c000e4be:	c3                   	ret    
c000e4bf:	90                   	nop

c000e4c0 <Video::blit(unsigned int*, int, int, int, int)>:
c000e4c0:	55                   	push   ebp
c000e4c1:	ba 00 00 00 00       	mov    edx,0x0
c000e4c6:	57                   	push   edi
c000e4c7:	56                   	push   esi
c000e4c8:	53                   	push   ebx
c000e4c9:	83 ec 1c             	sub    esp,0x1c
c000e4cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4d0:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e4d4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e4d8:	85 c0                	test   eax,eax
c000e4da:	0f 49 d0             	cmovns edx,eax
c000e4dd:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000e4e4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e4e8:	89 eb                	mov    ebx,ebp
c000e4ea:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e4ee:	01 ea                	add    edx,ebp
c000e4f0:	39 da                	cmp    edx,ebx
c000e4f2:	7e 54                	jle    c000e548 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e4f4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e4fa:	7c 4c                	jl     c000e548 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e4fc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e500:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e504:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e508:	01 c1                	add    ecx,eax
c000e50a:	39 f9                	cmp    ecx,edi
c000e50c:	7e 2f                	jle    c000e53d <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000e50e:	83 c2 04             	add    edx,0x4
c000e511:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e517:	7c 21                	jl     c000e53a <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000e519:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e51d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e51f:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000e522:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e526:	55                   	push   ebp
c000e527:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e52b:	56                   	push   esi
c000e52c:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e52f:	83 c4 10             	add    esp,0x10
c000e532:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e536:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e53a:	47                   	inc    edi
c000e53b:	eb c7                	jmp    c000e504 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000e53d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000e541:	43                   	inc    ebx
c000e542:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000e546:	eb a2                	jmp    c000e4ea <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000e548:	83 c4 1c             	add    esp,0x1c
c000e54b:	5b                   	pop    ebx
c000e54c:	5e                   	pop    esi
c000e54d:	5f                   	pop    edi
c000e54e:	5d                   	pop    ebp
c000e54f:	c3                   	ret    

c000e550 <Video::clearScreen(unsigned int)>:
c000e550:	57                   	push   edi
c000e551:	56                   	push   esi
c000e552:	53                   	push   ebx
c000e553:	31 db                	xor    ebx,ebx
c000e555:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e559:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e55f:	7e 1f                	jle    c000e580 <Video::clearScreen(unsigned int)+0x30>
c000e561:	31 ff                	xor    edi,edi
c000e563:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e569:	7e 12                	jle    c000e57d <Video::clearScreen(unsigned int)+0x2d>
c000e56b:	8b 06                	mov    eax,DWORD PTR [esi]
c000e56d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e571:	53                   	push   ebx
c000e572:	57                   	push   edi
c000e573:	47                   	inc    edi
c000e574:	56                   	push   esi
c000e575:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e578:	83 c4 10             	add    esp,0x10
c000e57b:	eb e6                	jmp    c000e563 <Video::clearScreen(unsigned int)+0x13>
c000e57d:	43                   	inc    ebx
c000e57e:	eb d9                	jmp    c000e559 <Video::clearScreen(unsigned int)+0x9>
c000e580:	5b                   	pop    ebx
c000e581:	5e                   	pop    esi
c000e582:	5f                   	pop    edi
c000e583:	c3                   	ret    

c000e584 <Video::putpixel(int, int, unsigned int)>:
c000e584:	c7 44 24 04 68 0c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020c68
c000e58c:	e9 a4 28 00 00       	jmp    c0010e35 <KePanic(char const*)>
c000e591:	90                   	nop

c000e592 <Video::readPixelApprox(int, int)>:
c000e592:	83 ec 18             	sub    esp,0x18
c000e595:	68 89 0c 02 c0       	push   0xc0020c89
c000e59a:	e8 96 28 00 00       	call   c0010e35 <KePanic(char const*)>
c000e59f:	31 c0                	xor    eax,eax
c000e5a1:	83 c4 1c             	add    esp,0x1c
c000e5a4:	c3                   	ret    
c000e5a5:	90                   	nop

c000e5a6 <Video::Video(char const*)>:
c000e5a6:	83 ec 1c             	sub    esp,0x1c
c000e5a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ad:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e5b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e5b5:	89 04 24             	mov    DWORD PTR [esp],eax
c000e5b8:	e8 c5 e0 ff ff       	call   c000c682 <Device::Device(char const*)>
c000e5bd:	ba 04 0d 02 c0       	mov    edx,0xc0020d04
c000e5c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5c6:	89 10                	mov    DWORD PTR [eax],edx
c000e5c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5cc:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e5d6:	90                   	nop
c000e5d7:	83 c4 1c             	add    esp,0x1c
c000e5da:	c3                   	ret    
c000e5db:	90                   	nop

c000e5dc <Video::~Video()>:
c000e5dc:	83 ec 1c             	sub    esp,0x1c
c000e5df:	ba 04 0d 02 c0       	mov    edx,0xc0020d04
c000e5e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5e8:	89 10                	mov    DWORD PTR [eax],edx
c000e5ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ee:	89 04 24             	mov    DWORD PTR [esp],eax
c000e5f1:	e8 f8 dd ff ff       	call   c000c3ee <Device::~Device()>
c000e5f6:	90                   	nop
c000e5f7:	83 c4 1c             	add    esp,0x1c
c000e5fa:	c3                   	ret    
c000e5fb:	90                   	nop

c000e5fc <Video::~Video()>:
c000e5fc:	83 ec 1c             	sub    esp,0x1c
c000e5ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e603:	89 04 24             	mov    DWORD PTR [esp],eax
c000e606:	e8 d1 ff ff ff       	call   c000e5dc <Video::~Video()>
c000e60b:	c7 44 24 04 64 01 00 00 	mov    DWORD PTR [esp+0x4],0x164
c000e613:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e617:	89 04 24             	mov    DWORD PTR [esp],eax
c000e61a:	e8 3d c3 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000e61f:	83 c4 1c             	add    esp,0x1c
c000e622:	c3                   	ret    
c000e623:	90                   	nop

c000e624 <Video::isMonochrome()>:
c000e624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e628:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e62e:	c3                   	ret    
c000e62f:	90                   	nop

c000e630 <Video::getWidth()>:
c000e630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e634:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e63a:	c3                   	ret    
c000e63b:	90                   	nop

c000e63c <Video::getHeight()>:
c000e63c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e640:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e646:	c3                   	ret    
c000e647:	90                   	nop

c000e648 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e648:	55                   	push   ebp
c000e649:	57                   	push   edi
c000e64a:	56                   	push   esi
c000e64b:	53                   	push   ebx
c000e64c:	83 ec 2c             	sub    esp,0x2c
c000e64f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e653:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e657:	83 f8 01             	cmp    eax,0x1
c000e65a:	19 c9                	sbb    ecx,ecx
c000e65c:	31 db                	xor    ebx,ebx
c000e65e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e662:	89 ce                	mov    esi,ecx
c000e664:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e66c:	f7 d6                	not    esi
c000e66e:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e674:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e678:	01 d8                	add    eax,ebx
c000e67a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e67e:	57                   	push   edi
c000e67f:	e8 b8 ff ff ff       	call   c000e63c <Video::getHeight()>
c000e684:	59                   	pop    ecx
c000e685:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e689:	7e 70                	jle    c000e6fb <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e68b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e68f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e693:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e696:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e69a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e69e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e6a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6a9:	89 e8                	mov    eax,ebp
c000e6ab:	83 c0 20             	add    eax,0x20
c000e6ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e6b2:	57                   	push   edi
c000e6b3:	e8 78 ff ff ff       	call   c000e630 <Video::getWidth()>
c000e6b8:	5a                   	pop    edx
c000e6b9:	39 c5                	cmp    ebp,eax
c000e6bb:	7d 34                	jge    c000e6f1 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e6bd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e6c2:	74 05                	je     c000e6c9 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e6c4:	8b 07                	mov    eax,DWORD PTR [edi]
c000e6c6:	56                   	push   esi
c000e6c7:	eb 0d                	jmp    c000e6d6 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e6c9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e6ce:	74 12                	je     c000e6e2 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e6d0:	8b 07                	mov    eax,DWORD PTR [edi]
c000e6d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e6da:	55                   	push   ebp
c000e6db:	57                   	push   edi
c000e6dc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e6df:	83 c4 10             	add    esp,0x10
c000e6e2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e6e6:	45                   	inc    ebp
c000e6e7:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e6eb:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e6ef:	75 c1                	jne    c000e6b2 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e6f1:	43                   	inc    ebx
c000e6f2:	83 fb 20             	cmp    ebx,0x20
c000e6f5:	0f 85 79 ff ff ff    	jne    c000e674 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e6fb:	83 c4 2c             	add    esp,0x2c
c000e6fe:	5b                   	pop    ebx
c000e6ff:	5e                   	pop    esi
c000e700:	5f                   	pop    edi
c000e701:	5d                   	pop    ebp
c000e702:	c3                   	ret    
c000e703:	90                   	nop

c000e704 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e704:	55                   	push   ebp
c000e705:	57                   	push   edi
c000e706:	56                   	push   esi
c000e707:	53                   	push   ebx
c000e708:	83 ec 28             	sub    esp,0x28
c000e70b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e70f:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e713:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e717:	0f b6 6b 0f          	movzx  ebp,BYTE PTR [ebx+0xf]
c000e71b:	c1 e6 08             	shl    esi,0x8
c000e71e:	01 c6                	add    esi,eax
c000e720:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e724:	c1 e5 08             	shl    ebp,0x8
c000e727:	01 c5                	add    ebp,eax
c000e729:	89 f0                	mov    eax,esi
c000e72b:	0f af c5             	imul   eax,ebp
c000e72e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e735:	50                   	push   eax
c000e736:	e8 c1 93 ff ff       	call   c0007afc <malloc>
c000e73b:	83 c4 10             	add    esp,0x10
c000e73e:	85 c0                	test   eax,eax
c000e740:	89 c7                	mov    edi,eax
c000e742:	75 10                	jne    c000e754 <Video::tgaParse(unsigned char*, int, int*, int*)+0x50>
c000e744:	83 ec 0c             	sub    esp,0xc
c000e747:	68 b4 0c 02 c0       	push   0xc0020cb4
c000e74c:	e8 e4 26 00 00       	call   c0010e35 <KePanic(char const*)>
c000e751:	83 c4 10             	add    esp,0x10
c000e754:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000e757:	ba 12 00 00 00       	mov    edx,0x12
c000e75c:	84 c0                	test   al,al
c000e75e:	74 11                	je     c000e771 <Video::tgaParse(unsigned char*, int, int*, int*)+0x6d>
c000e760:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e764:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e768:	c1 fa 03             	sar    edx,0x3
c000e76b:	0f af d1             	imul   edx,ecx
c000e76e:	83 c2 12             	add    edx,0x12
c000e771:	85 f6                	test   esi,esi
c000e773:	74 04                	je     c000e779 <Video::tgaParse(unsigned char*, int, int*, int*)+0x75>
c000e775:	85 ed                	test   ebp,ebp
c000e777:	75 12                	jne    c000e78b <Video::tgaParse(unsigned char*, int, int*, int*)+0x87>
c000e779:	83 ec 0c             	sub    esp,0xc
c000e77c:	68 c4 0c 02 c0       	push   0xc0020cc4
c000e781:	e8 f0 c2 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000e786:	e9 c1 00 00 00       	jmp    c000e84c <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e78b:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e78f:	80 f9 02             	cmp    cl,0x2
c000e792:	0f 85 9f 00 00 00    	jne    c000e837 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e798:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e79d:	75 0f                	jne    c000e7ae <Video::tgaParse(unsigned char*, int, int*, int*)+0xaa>
c000e79f:	84 c0                	test   al,al
c000e7a1:	75 0b                	jne    c000e7ae <Video::tgaParse(unsigned char*, int, int*, int*)+0xaa>
c000e7a3:	8a 4b 10             	mov    cl,BYTE PTR [ebx+0x10]
c000e7a6:	80 e9 18             	sub    cl,0x18
c000e7a9:	f6 c1 f7             	test   cl,0xf7
c000e7ac:	74 0d                	je     c000e7bb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000e7ae:	83 ec 0c             	sub    esp,0xc
c000e7b1:	68 d9 0c 02 c0       	push   0xc0020cd9
c000e7b6:	e9 84 00 00 00       	jmp    c000e83f <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e7bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e7c3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e7cf:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7d2:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e7d6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e7de:	75 0c                	jne    c000e7ec <Video::tgaParse(unsigned char*, int, int*, int*)+0xe8>
c000e7e0:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e7e5:	c1 e0 18             	shl    eax,0x18
c000e7e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7ec:	0f b6 44 13 02       	movzx  eax,BYTE PTR [ebx+edx*1+0x2]
c000e7f1:	ff 04 24             	inc    DWORD PTR [esp]
c000e7f4:	c1 e0 10             	shl    eax,0x10
c000e7f7:	89 c1                	mov    ecx,eax
c000e7f9:	0f b6 44 13 01       	movzx  eax,BYTE PTR [ebx+edx*1+0x1]
c000e7fe:	c1 e0 08             	shl    eax,0x8
c000e801:	09 c8                	or     eax,ecx
c000e803:	0f b6 0c 13          	movzx  ecx,BYTE PTR [ebx+edx*1]
c000e807:	09 c8                	or     eax,ecx
c000e809:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000e80c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e810:	89 44 8f fc          	mov    DWORD PTR [edi+ecx*4-0x4],eax
c000e814:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e818:	c1 f8 03             	sar    eax,0x3
c000e81b:	01 c2                	add    edx,eax
c000e81d:	89 c8                	mov    eax,ecx
c000e81f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e823:	39 c6                	cmp    esi,eax
c000e825:	7f ab                	jg     c000e7d2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xce>
c000e827:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e82b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e82f:	7e 22                	jle    c000e853 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e831:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000e835:	eb 94                	jmp    c000e7cb <Video::tgaParse(unsigned char*, int, int*, int*)+0xc7>
c000e837:	50                   	push   eax
c000e838:	50                   	push   eax
c000e839:	51                   	push   ecx
c000e83a:	68 e7 0c 02 c0       	push   0xc0020ce7
c000e83f:	e8 32 c2 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000e844:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e847:	e8 c3 92 ff ff       	call   c0007b0f <free>
c000e84c:	83 c4 10             	add    esp,0x10
c000e84f:	31 ff                	xor    edi,edi
c000e851:	eb 0c                	jmp    c000e85f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15b>
c000e853:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e857:	89 30                	mov    DWORD PTR [eax],esi
c000e859:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e85d:	89 28                	mov    DWORD PTR [eax],ebp
c000e85f:	83 c4 1c             	add    esp,0x1c
c000e862:	89 f8                	mov    eax,edi
c000e864:	5b                   	pop    ebx
c000e865:	5e                   	pop    esi
c000e866:	5f                   	pop    edi
c000e867:	5d                   	pop    ebp
c000e868:	c3                   	ret    
c000e869:	90                   	nop

c000e86a <Video::putTGA(int, int, unsigned char*, int)>:
c000e86a:	55                   	push   ebp
c000e86b:	57                   	push   edi
c000e86c:	56                   	push   esi
c000e86d:	53                   	push   ebx
c000e86e:	83 ec 28             	sub    esp,0x28
c000e871:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e875:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e879:	50                   	push   eax
c000e87a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e87e:	50                   	push   eax
c000e87f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e883:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e887:	57                   	push   edi
c000e888:	e8 77 fe ff ff       	call   c000e704 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e88d:	83 c4 20             	add    esp,0x20
c000e890:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e894:	85 c0                	test   eax,eax
c000e896:	74 35                	je     c000e8cd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e898:	89 c6                	mov    esi,eax
c000e89a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e89e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e8a2:	39 d8                	cmp    eax,ebx
c000e8a4:	7e 27                	jle    c000e8cd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e8a6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e8aa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e8ae:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000e8b2:	39 e9                	cmp    ecx,ebp
c000e8b4:	7e 14                	jle    c000e8ca <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e8b6:	83 c6 04             	add    esi,0x4
c000e8b9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e8bb:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000e8be:	53                   	push   ebx
c000e8bf:	55                   	push   ebp
c000e8c0:	45                   	inc    ebp
c000e8c1:	57                   	push   edi
c000e8c2:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e8c5:	83 c4 10             	add    esp,0x10
c000e8c8:	eb e0                	jmp    c000e8aa <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e8ca:	43                   	inc    ebx
c000e8cb:	eb cd                	jmp    c000e89a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e8cd:	83 c4 1c             	add    esp,0x1c
c000e8d0:	5b                   	pop    ebx
c000e8d1:	5e                   	pop    esi
c000e8d2:	5f                   	pop    edi
c000e8d3:	5d                   	pop    ebp
c000e8d4:	c3                   	ret    
c000e8d5:	66 90                	xchg   ax,ax
c000e8d7:	90                   	nop

c000e8d8 <ACPI::close(int, int, void*)>:
c000e8d8:	83 ec 2c             	sub    esp,0x2c
c000e8db:	81 7c 24 38 0f 27 00 00 	cmp    DWORD PTR [esp+0x38],0x270f
c000e8e3:	74 0b                	je     c000e8f0 <ACPI::close(int, int, void*)+0x18>
c000e8e5:	b8 00 00 00 00       	mov    eax,0x0
c000e8ea:	e9 95 00 00 00       	jmp    c000e984 <ACPI::close(int, int, void*)+0xac>
c000e8ef:	90                   	nop
c000e8f0:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000e8f5:	75 25                	jne    c000e91c <ACPI::close(int, int, void*)+0x44>
c000e8f7:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e8fc:	85 c0                	test   eax,eax
c000e8fe:	74 08                	je     c000e908 <ACPI::close(int, int, void*)+0x30>
c000e900:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e905:	ff d0                	call   eax
c000e907:	90                   	nop
c000e908:	c7 04 24 48 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d48
c000e90f:	e8 21 25 00 00       	call   c0010e35 <KePanic(char const*)>
c000e914:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e919:	eb 69                	jmp    c000e984 <ACPI::close(int, int, void*)+0xac>
c000e91b:	90                   	nop
c000e91c:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000e921:	75 59                	jne    c000e97c <ACPI::close(int, int, void*)+0xa4>
c000e923:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e928:	85 c0                	test   eax,eax
c000e92a:	74 08                	je     c000e934 <ACPI::close(int, int, void*)+0x5c>
c000e92c:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e931:	ff d0                	call   eax
c000e933:	90                   	nop
c000e934:	c6 44 24 1f 02       	mov    BYTE PTR [esp+0x1f],0x2
c000e939:	8d 76 00             	lea    esi,[esi+0x0]
c000e93c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000e941:	83 e0 02             	and    eax,0x2
c000e944:	74 1e                	je     c000e964 <ACPI::close(int, int, void*)+0x8c>
c000e946:	66 c7 44 24 1c 64 00 	mov    WORD PTR [esp+0x1c],0x64
c000e94d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e951:	89 c2                	mov    edx,eax
c000e953:	ec                   	in     al,dx
c000e954:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000e958:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c000e95d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000e961:	eb d9                	jmp    c000e93c <ACPI::close(int, int, void*)+0x64>
c000e963:	90                   	nop
c000e964:	66 c7 44 24 18 64 00 	mov    WORD PTR [esp+0x18],0x64
c000e96b:	c6 44 24 17 fe       	mov    BYTE PTR [esp+0x17],0xfe
c000e970:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000e975:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e979:	ee                   	out    dx,al
c000e97a:	66 90                	xchg   ax,ax
c000e97c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e981:	8d 76 00             	lea    esi,[esi+0x0]
c000e984:	83 c4 2c             	add    esp,0x2c
c000e987:	c3                   	ret    

c000e988 <findRSDP()>:
c000e988:	83 ec 2c             	sub    esp,0x2c
c000e98b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e990:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e997:	24 04                	and    al,0x4
c000e999:	75 09                	jne    c000e9a4 <findRSDP()+0x1c>
c000e99b:	b8 00 00 00 00       	mov    eax,0x0
c000e9a0:	eb 7a                	jmp    c000ea1c <findRSDP()+0x94>
c000e9a2:	66 90                	xchg   ax,ax
c000e9a4:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e9a9:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e9ae:	7f 1c                	jg     c000e9cc <findRSDP()+0x44>
c000e9b0:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e9b5:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e9bc:	80 e2 fb             	and    dl,0xfb
c000e9bf:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e9c5:	b8 00 00 00 00       	mov    eax,0x0
c000e9ca:	eb 50                	jmp    c000ea1c <findRSDP()+0x94>
c000e9cc:	c7 44 24 1c 00 00 00 c2 	mov    DWORD PTR [esp+0x1c],0xc2000000
c000e9d4:	81 7c 24 1c fe ff 0f c2 	cmp    DWORD PTR [esp+0x1c],0xc20ffffe
c000e9dc:	77 36                	ja     c000ea14 <findRSDP()+0x8c>
c000e9de:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000e9e6:	c7 44 24 04 e3 0d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020de3
c000e9ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e9f2:	89 04 24             	mov    DWORD PTR [esp],eax
c000e9f5:	e8 86 19 ff ff       	call   c0000380 <memcmp>
c000e9fa:	85 c0                	test   eax,eax
c000e9fc:	0f 94 c0             	sete   al
c000e9ff:	84 c0                	test   al,al
c000ea01:	74 09                	je     c000ea0c <findRSDP()+0x84>
c000ea03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea07:	eb 13                	jmp    c000ea1c <findRSDP()+0x94>
c000ea09:	8d 76 00             	lea    esi,[esi+0x0]
c000ea0c:	83 44 24 1c 10       	add    DWORD PTR [esp+0x1c],0x10
c000ea11:	eb c1                	jmp    c000e9d4 <findRSDP()+0x4c>
c000ea13:	90                   	nop
c000ea14:	b8 00 00 00 00       	mov    eax,0x0
c000ea19:	8d 76 00             	lea    esi,[esi+0x0]
c000ea1c:	83 c4 2c             	add    esp,0x2c
c000ea1f:	c3                   	ret    

c000ea20 <loadACPITables(unsigned char*)>:
c000ea20:	57                   	push   edi
c000ea21:	56                   	push   esi
c000ea22:	53                   	push   ebx
c000ea23:	83 c4 80             	add    esp,0xffffff80
c000ea26:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ea2b:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000ea32:	24 04                	and    al,0x4
c000ea34:	0f 84 5e 02 00 00    	je     c000ec98 <loadACPITables(unsigned char*)+0x278>
c000ea3a:	0f b6 05 c0 76 02 c0 	movzx  eax,BYTE PTR ds:0xc00276c0
c000ea41:	84 c0                	test   al,al
c000ea43:	74 7f                	je     c000eac4 <loadACPITables(unsigned char*)+0xa4>
c000ea45:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000ea4c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ea50:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ea54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea57:	83 e8 24             	sub    eax,0x24
c000ea5a:	c1 e8 03             	shr    eax,0x3
c000ea5d:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000ea61:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000ea69:	8d 76 00             	lea    esi,[esi+0x0]
c000ea6c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000ea70:	3b 44 24 6c          	cmp    eax,DWORD PTR [esp+0x6c]
c000ea74:	0f 8d be 00 00 00    	jge    c000eb38 <loadACPITables(unsigned char*)+0x118>
c000ea7a:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000ea81:	83 c0 24             	add    eax,0x24
c000ea84:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000ea88:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000ea8c:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000ea90:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000ea94:	c1 e0 03             	shl    eax,0x3
c000ea97:	01 44 24 64          	add    DWORD PTR [esp+0x64],eax
c000ea9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ea9f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000eaa2:	8b 00                	mov    eax,DWORD PTR [eax]
c000eaa4:	89 c1                	mov    ecx,eax
c000eaa6:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000eaab:	8d 50 01             	lea    edx,[eax+0x1]
c000eaae:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000eab4:	89 ca                	mov    edx,ecx
c000eab6:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000eabd:	ff 44 24 7c          	inc    DWORD PTR [esp+0x7c]
c000eac1:	eb a9                	jmp    c000ea6c <loadACPITables(unsigned char*)+0x4c>
c000eac3:	90                   	nop
c000eac4:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000eacb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000eacf:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ead3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ead6:	83 e8 24             	sub    eax,0x24
c000ead9:	c1 e8 02             	shr    eax,0x2
c000eadc:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000eae0:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000eae8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000eaec:	3b 44 24 5c          	cmp    eax,DWORD PTR [esp+0x5c]
c000eaf0:	7d 46                	jge    c000eb38 <loadACPITables(unsigned char*)+0x118>
c000eaf2:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000eaf9:	83 c0 24             	add    eax,0x24
c000eafc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000eb00:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000eb04:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000eb08:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000eb0c:	c1 e0 02             	shl    eax,0x2
c000eb0f:	01 44 24 54          	add    DWORD PTR [esp+0x54],eax
c000eb13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eb17:	8b 08                	mov    ecx,DWORD PTR [eax]
c000eb19:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000eb1e:	8d 50 01             	lea    edx,[eax+0x1]
c000eb21:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000eb27:	89 ca                	mov    edx,ecx
c000eb29:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000eb30:	ff 44 24 78          	inc    DWORD PTR [esp+0x78]
c000eb34:	eb b2                	jmp    c000eae8 <loadACPITables(unsigned char*)+0xc8>
c000eb36:	66 90                	xchg   ax,ax
c000eb38:	c7 44 24 74 00 00 00 00 	mov    DWORD PTR [esp+0x74],0x0
c000eb40:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000eb45:	39 44 24 74          	cmp    DWORD PTR [esp+0x74],eax
c000eb49:	0f 8d 4d 01 00 00    	jge    c000ec9c <loadACPITables(unsigned char*)+0x27c>
c000eb4f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000eb53:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000eb5a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000eb5e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000eb62:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000eb66:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000eb6a:	25 ff 0f 00 00       	and    eax,0xfff
c000eb6f:	89 c6                	mov    esi,eax
c000eb71:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000eb77:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000eb7e:	e8 9d aa ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c000eb83:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000eb87:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000eb8d:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000eb95:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000eb9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eba1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000eba5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eba8:	e8 d5 b4 ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ebad:	09 f0                	or     eax,esi
c000ebaf:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ebb3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000ebb7:	c1 e0 03             	shl    eax,0x3
c000ebba:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000ebbf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ebc3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ebc7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ebcb:	c7 44 24 34 04 00 00 00 	mov    DWORD PTR [esp+0x34],0x4
c000ebd3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebd7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ebdb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebdf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ebe3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ebe7:	89 c6                	mov    esi,eax
c000ebe9:	89 d7                	mov    edi,edx
c000ebeb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ebed:	89 c8                	mov    eax,ecx
c000ebef:	89 fa                	mov    edx,edi
c000ebf1:	89 f3                	mov    ebx,esi
c000ebf3:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000ebf7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ebfb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ebff:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec06:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ec0a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec0e:	05 00 10 00 00       	add    eax,0x1000
c000ec13:	c1 e8 0c             	shr    eax,0xc
c000ec16:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ec1a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec1e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ec22:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec26:	25 ff 0f 00 00       	and    eax,0xfff
c000ec2b:	89 c6                	mov    esi,eax
c000ec2d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000ec33:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ec37:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec3a:	e8 e1 a9 ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c000ec3f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000ec43:	89 d1                	mov    ecx,edx
c000ec45:	81 e1 00 f0 ff ff    	and    ecx,0xfffff000
c000ec4b:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000ec53:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ec57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ec5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ec5f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ec63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec66:	e8 17 b4 ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ec6b:	09 f0                	or     eax,esi
c000ec6d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ec71:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec75:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec78:	e8 bc ac ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000ec7d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000ec81:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c000ec85:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000ec8c:	ff 44 24 74          	inc    DWORD PTR [esp+0x74]
c000ec90:	e9 ab fe ff ff       	jmp    c000eb40 <loadACPITables(unsigned char*)+0x120>
c000ec95:	8d 76 00             	lea    esi,[esi+0x0]
c000ec98:	90                   	nop
c000ec99:	8d 76 00             	lea    esi,[esi+0x0]
c000ec9c:	83 ec 80             	sub    esp,0xffffff80
c000ec9f:	5b                   	pop    ebx
c000eca0:	5e                   	pop    esi
c000eca1:	5f                   	pop    edi
c000eca2:	c3                   	ret    
c000eca3:	90                   	nop

c000eca4 <findRSDT(unsigned char*)>:
c000eca4:	57                   	push   edi
c000eca5:	56                   	push   esi
c000eca6:	53                   	push   ebx
c000eca7:	83 ec 70             	sub    esp,0x70
c000ecaa:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ecaf:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000ecb6:	24 04                	and    al,0x4
c000ecb8:	75 0a                	jne    c000ecc4 <findRSDT(unsigned char*)+0x20>
c000ecba:	b8 00 00 00 00       	mov    eax,0x0
c000ecbf:	e9 44 01 00 00       	jmp    c000ee08 <findRSDT(unsigned char*)+0x164>
c000ecc4:	8d 44 24 20          	lea    eax,[esp+0x20]
c000ecc8:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000eccc:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000ecd3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000ecd7:	c7 44 24 54 24 00 00 00 	mov    DWORD PTR [esp+0x54],0x24
c000ecdf:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ece3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ece7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000eceb:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000ecef:	8b 4c 24 54          	mov    ecx,DWORD PTR [esp+0x54]
c000ecf3:	89 c6                	mov    esi,eax
c000ecf5:	89 d7                	mov    edi,edx
c000ecf7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ecf9:	89 c8                	mov    eax,ecx
c000ecfb:	89 fa                	mov    edx,edi
c000ecfd:	89 f3                	mov    ebx,esi
c000ecff:	89 5c 24 4c          	mov    DWORD PTR [esp+0x4c],ebx
c000ed03:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000ed07:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ed0b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000ed10:	88 44 24 6b          	mov    BYTE PTR [esp+0x6b],al
c000ed14:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c000ed1c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed20:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ed24:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000ed28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed2c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000ed30:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ed34:	25 ff 0f 00 00       	and    eax,0xfff
c000ed39:	89 c6                	mov    esi,eax
c000ed3b:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000ed41:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c000ed48:	e8 d3 a8 ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c000ed4d:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000ed51:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ed57:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000ed5f:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000ed67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ed6b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ed6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ed72:	e8 0b b3 ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed77:	09 f0                	or     eax,esi
c000ed79:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000ed7d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ed81:	25 ff 0f 00 00       	and    eax,0xfff
c000ed86:	89 c6                	mov    esi,eax
c000ed88:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000ed8e:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c000ed95:	e8 86 a8 ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c000ed9a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000ed9e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000eda4:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000edac:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000edb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000edb8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000edbc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000edbf:	e8 be b2 ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000edc4:	09 f0                	or     eax,esi
c000edc6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000edca:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000edcf:	75 13                	jne    c000ede4 <findRSDT(unsigned char*)+0x140>
c000edd1:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000edd8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000eddc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000ede0:	eb 22                	jmp    c000ee04 <findRSDT(unsigned char*)+0x160>
c000ede2:	66 90                	xchg   ax,ax
c000ede4:	80 7c 24 6b 02       	cmp    BYTE PTR [esp+0x6b],0x2
c000ede9:	75 11                	jne    c000edfc <findRSDT(unsigned char*)+0x158>
c000edeb:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000edf2:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000edf6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000edfa:	eb 08                	jmp    c000ee04 <findRSDT(unsigned char*)+0x160>
c000edfc:	b8 00 00 00 00       	mov    eax,0x0
c000ee01:	eb 05                	jmp    c000ee08 <findRSDT(unsigned char*)+0x164>
c000ee03:	90                   	nop
c000ee04:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000ee08:	83 c4 70             	add    esp,0x70
c000ee0b:	5b                   	pop    ebx
c000ee0c:	5e                   	pop    esi
c000ee0d:	5f                   	pop    edi
c000ee0e:	c3                   	ret    
c000ee0f:	90                   	nop

c000ee10 <findDataTable(unsigned char*, char*)>:
c000ee10:	83 ec 2c             	sub    esp,0x2c
c000ee13:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ee18:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000ee1f:	24 04                	and    al,0x4
c000ee21:	75 09                	jne    c000ee2c <findDataTable(unsigned char*, char*)+0x1c>
c000ee23:	b8 00 00 00 00       	mov    eax,0x0
c000ee28:	eb 62                	jmp    c000ee8c <findDataTable(unsigned char*, char*)+0x7c>
c000ee2a:	66 90                	xchg   ax,ax
c000ee2c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ee34:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000ee39:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000ee3d:	7d 45                	jge    c000ee84 <findDataTable(unsigned char*, char*)+0x74>
c000ee3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ee43:	c1 e0 03             	shl    eax,0x3
c000ee46:	8d 90 c0 74 02 c0    	lea    edx,[eax-0x3ffd8b40]
c000ee4c:	c7 44 24 08 04 00 00 00 	mov    DWORD PTR [esp+0x8],0x4
c000ee54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ee5c:	89 14 24             	mov    DWORD PTR [esp],edx
c000ee5f:	e8 1c 15 ff ff       	call   c0000380 <memcmp>
c000ee64:	85 c0                	test   eax,eax
c000ee66:	0f 94 c0             	sete   al
c000ee69:	84 c0                	test   al,al
c000ee6b:	74 0f                	je     c000ee7c <findDataTable(unsigned char*, char*)+0x6c>
c000ee6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ee71:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000ee78:	eb 12                	jmp    c000ee8c <findDataTable(unsigned char*, char*)+0x7c>
c000ee7a:	66 90                	xchg   ax,ax
c000ee7c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ee80:	eb b2                	jmp    c000ee34 <findDataTable(unsigned char*, char*)+0x24>
c000ee82:	66 90                	xchg   ax,ax
c000ee84:	b8 00 00 00 00       	mov    eax,0x0
c000ee89:	8d 76 00             	lea    esi,[esi+0x0]
c000ee8c:	83 c4 2c             	add    esp,0x2c
c000ee8f:	c3                   	ret    

c000ee90 <scanMADT()>:
c000ee90:	53                   	push   ebx
c000ee91:	83 ec 48             	sub    esp,0x48
c000ee94:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000ee99:	25 00 04 00 00       	and    eax,0x400
c000ee9e:	74 18                	je     c000eeb8 <scanMADT()+0x28>
c000eea0:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000eea5:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000eeac:	80 e2 fb             	and    dl,0xfb
c000eeaf:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eeb5:	8d 76 00             	lea    esi,[esi+0x0]
c000eeb8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000eebd:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000eec4:	24 04                	and    al,0x4
c000eec6:	0f 84 7c 04 00 00    	je     c000f348 <scanMADT()+0x4b8>
c000eecc:	e8 b7 fa ff ff       	call   c000e988 <findRSDP()>
c000eed1:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000eed6:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000eedb:	85 c0                	test   eax,eax
c000eedd:	75 1d                	jne    c000eefc <scanMADT()+0x6c>
c000eedf:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000eee4:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000eeeb:	80 e2 fb             	and    dl,0xfb
c000eeee:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eef4:	e9 57 04 00 00       	jmp    c000f350 <scanMADT()+0x4c0>
c000eef9:	8d 76 00             	lea    esi,[esi+0x0]
c000eefc:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000ef01:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef04:	e8 9b fd ff ff       	call   c000eca4 <findRSDT(unsigned char*)>
c000ef09:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000ef0e:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ef13:	85 c0                	test   eax,eax
c000ef15:	75 1d                	jne    c000ef34 <scanMADT()+0xa4>
c000ef17:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ef1c:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000ef23:	80 e2 fb             	and    dl,0xfb
c000ef26:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ef2c:	e9 1f 04 00 00       	jmp    c000f350 <scanMADT()+0x4c0>
c000ef31:	8d 76 00             	lea    esi,[esi+0x0]
c000ef34:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ef39:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef3c:	e8 df fa ff ff       	call   c000ea20 <loadACPITables(unsigned char*)>
c000ef41:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ef46:	c7 44 24 04 ec 0d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020dec
c000ef4e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef51:	e8 ba fe ff ff       	call   c000ee10 <findDataTable(unsigned char*, char*)>
c000ef56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ef5a:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000ef5f:	75 1b                	jne    c000ef7c <scanMADT()+0xec>
c000ef61:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ef66:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000ef6d:	80 e2 fe             	and    dl,0xfe
c000ef70:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ef76:	e9 d5 03 00 00       	jmp    c000f350 <scanMADT()+0x4c0>
c000ef7b:	90                   	nop
c000ef7c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000ef84:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ef88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ef8b:	39 44 24 3c          	cmp    DWORD PTR [esp+0x3c],eax
c000ef8f:	0f 87 bb 03 00 00    	ja     c000f350 <scanMADT()+0x4c0>
c000ef95:	81 7c 24 3c f3 01 00 00 	cmp    DWORD PTR [esp+0x3c],0x1f3
c000ef9d:	0f 87 ad 03 00 00    	ja     c000f350 <scanMADT()+0x4c0>
c000efa3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000efa7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000efab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000efaf:	8d 50 01             	lea    edx,[eax+0x1]
c000efb2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000efb6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000efba:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000efbf:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c000efc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000efc7:	8d 50 01             	lea    edx,[eax+0x1]
c000efca:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000efce:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000efd2:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000efd7:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c000efdb:	80 7c 24 32 02       	cmp    BYTE PTR [esp+0x32],0x2
c000efe0:	0f 86 66 03 00 00    	jbe    c000f34c <scanMADT()+0x4bc>
c000efe6:	80 7c 24 33 00       	cmp    BYTE PTR [esp+0x33],0x0
c000efeb:	75 5f                	jne    c000f04c <scanMADT()+0x1bc>
c000efed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eff1:	8d 50 01             	lea    edx,[eax+0x1]
c000eff4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000eff8:	0f b6 15 c0 78 02 c0 	movzx  edx,BYTE PTR ds:0xc00278c0
c000efff:	0f b6 d2             	movzx  edx,dl
c000f002:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f006:	0f b6 44 01 2c       	movzx  eax,BYTE PTR [ecx+eax*1+0x2c]
c000f00b:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000f011:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f015:	8d 50 01             	lea    edx,[eax+0x1]
c000f018:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000f01c:	0f b6 15 c0 78 02 c0 	movzx  edx,BYTE PTR ds:0xc00278c0
c000f023:	88 d1                	mov    cl,dl
c000f025:	fe c1                	inc    cl
c000f027:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000f02d:	0f b6 d2             	movzx  edx,dl
c000f030:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f034:	0f b6 44 01 2c       	movzx  eax,BYTE PTR [ecx+eax*1+0x2c]
c000f039:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000f03f:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000f044:	e9 eb 02 00 00       	jmp    c000f334 <scanMADT()+0x4a4>
c000f049:	8d 76 00             	lea    esi,[esi+0x0]
c000f04c:	80 7c 24 33 01       	cmp    BYTE PTR [esp+0x33],0x1
c000f051:	0f 85 25 01 00 00    	jne    c000f17c <scanMADT()+0x2ec>
c000f057:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f05b:	8d 50 01             	lea    edx,[eax+0x1]
c000f05e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000f062:	0f b6 15 80 77 02 c0 	movzx  edx,BYTE PTR ds:0xc0027780
c000f069:	0f b6 d2             	movzx  edx,dl
c000f06c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f070:	0f b6 44 01 2c       	movzx  eax,BYTE PTR [ecx+eax*1+0x2c]
c000f075:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000f07b:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c000f07f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f083:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f087:	01 d0                	add    eax,edx
c000f089:	83 c0 2c             	add    eax,0x2c
c000f08c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000f08f:	0f b6 d0             	movzx  edx,al
c000f092:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f096:	8d 48 01             	lea    ecx,[eax+0x1]
c000f099:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f09d:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000f0a2:	0f b6 c0             	movzx  eax,al
c000f0a5:	c1 e0 08             	shl    eax,0x8
c000f0a8:	89 d1                	mov    ecx,edx
c000f0aa:	09 c1                	or     ecx,eax
c000f0ac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f0b0:	8d 50 02             	lea    edx,[eax+0x2]
c000f0b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f0b7:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000f0bc:	0f b6 c0             	movzx  eax,al
c000f0bf:	c1 e0 10             	shl    eax,0x10
c000f0c2:	09 c1                	or     ecx,eax
c000f0c4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f0c8:	8d 50 03             	lea    edx,[eax+0x3]
c000f0cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f0cf:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000f0d4:	0f b6 c0             	movzx  eax,al
c000f0d7:	c1 e0 18             	shl    eax,0x18
c000f0da:	09 c1                	or     ecx,eax
c000f0dc:	89 ca                	mov    edx,ecx
c000f0de:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c000f0e5:	0f b6 c0             	movzx  eax,al
c000f0e8:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000f0ef:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000f0f4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f0f8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f0fc:	01 d0                	add    eax,edx
c000f0fe:	83 c0 2c             	add    eax,0x2c
c000f101:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000f104:	0f b6 d0             	movzx  edx,al
c000f107:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f10b:	8d 48 01             	lea    ecx,[eax+0x1]
c000f10e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f112:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000f117:	0f b6 c0             	movzx  eax,al
c000f11a:	c1 e0 08             	shl    eax,0x8
c000f11d:	89 d1                	mov    ecx,edx
c000f11f:	09 c1                	or     ecx,eax
c000f121:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f125:	8d 50 02             	lea    edx,[eax+0x2]
c000f128:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f12c:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000f131:	0f b6 c0             	movzx  eax,al
c000f134:	c1 e0 10             	shl    eax,0x10
c000f137:	09 c1                	or     ecx,eax
c000f139:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f13d:	8d 50 03             	lea    edx,[eax+0x3]
c000f140:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f144:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000f149:	0f b6 c0             	movzx  eax,al
c000f14c:	c1 e0 18             	shl    eax,0x18
c000f14f:	09 c1                	or     ecx,eax
c000f151:	89 ca                	mov    edx,ecx
c000f153:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c000f15a:	0f b6 c0             	movzx  eax,al
c000f15d:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000f164:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000f169:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c000f170:	fe c0                	inc    al
c000f172:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000f177:	e9 b8 01 00 00       	jmp    c000f334 <scanMADT()+0x4a4>
c000f17c:	80 7c 24 33 02       	cmp    BYTE PTR [esp+0x33],0x2
c000f181:	0f 85 f9 00 00 00    	jne    c000f280 <scanMADT()+0x3f0>
c000f187:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f18b:	8d 50 01             	lea    edx,[eax+0x1]
c000f18e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000f192:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f196:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000f19b:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c000f19f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f1a3:	8d 50 01             	lea    edx,[eax+0x1]
c000f1a6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000f1aa:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f1ae:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000f1b3:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c000f1b7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f1bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f1bf:	01 d0                	add    eax,edx
c000f1c1:	83 c0 2c             	add    eax,0x2c
c000f1c4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000f1c7:	0f b6 d0             	movzx  edx,al
c000f1ca:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f1ce:	8d 48 01             	lea    ecx,[eax+0x1]
c000f1d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f1d5:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000f1da:	0f b6 c0             	movzx  eax,al
c000f1dd:	c1 e0 08             	shl    eax,0x8
c000f1e0:	89 d1                	mov    ecx,edx
c000f1e2:	09 c1                	or     ecx,eax
c000f1e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f1e8:	8d 50 02             	lea    edx,[eax+0x2]
c000f1eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f1ef:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000f1f4:	0f b6 c0             	movzx  eax,al
c000f1f7:	c1 e0 10             	shl    eax,0x10
c000f1fa:	09 c1                	or     ecx,eax
c000f1fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f200:	8d 50 03             	lea    edx,[eax+0x3]
c000f203:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f207:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000f20c:	0f b6 c0             	movzx  eax,al
c000f20f:	c1 e0 18             	shl    eax,0x18
c000f212:	09 c8                	or     eax,ecx
c000f214:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f218:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000f21d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f221:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f225:	01 d0                	add    eax,edx
c000f227:	83 c0 2c             	add    eax,0x2c
c000f22a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000f22d:	0f b6 c0             	movzx  eax,al
c000f230:	0f bf d0             	movsx  edx,ax
c000f233:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f237:	8d 48 01             	lea    ecx,[eax+0x1]
c000f23a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f23e:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000f243:	0f b6 c0             	movzx  eax,al
c000f246:	c1 e0 08             	shl    eax,0x8
c000f249:	98                   	cwde   
c000f24a:	09 d0                	or     eax,edx
c000f24c:	98                   	cwde   
c000f24d:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c000f252:	83 44 24 3c 02       	add    DWORD PTR [esp+0x3c],0x2
c000f257:	0f b6 44 24 30       	movzx  eax,BYTE PTR [esp+0x30]
c000f25c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f260:	88 90 20 24 02 c0    	mov    BYTE PTR [eax-0x3ffddbe0],dl
c000f266:	0f b6 44 24 30       	movzx  eax,BYTE PTR [esp+0x30]
c000f26b:	0f b7 54 24 2a       	movzx  edx,WORD PTR [esp+0x2a]
c000f270:	66 89 94 00 60 77 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd88a0],dx
c000f278:	e9 b7 00 00 00       	jmp    c000f334 <scanMADT()+0x4a4>
c000f27d:	8d 76 00             	lea    esi,[esi+0x0]
c000f280:	80 7c 24 33 04       	cmp    BYTE PTR [esp+0x33],0x4
c000f285:	0f 85 9d 00 00 00    	jne    c000f328 <scanMADT()+0x498>
c000f28b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f28f:	8d 50 01             	lea    edx,[eax+0x1]
c000f292:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000f296:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f29a:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000f29f:	0f b6 c0             	movzx  eax,al
c000f2a2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2a6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f2aa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f2ae:	01 d0                	add    eax,edx
c000f2b0:	83 c0 2c             	add    eax,0x2c
c000f2b3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000f2b6:	0f b6 d0             	movzx  edx,al
c000f2b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f2bd:	8d 48 01             	lea    ecx,[eax+0x1]
c000f2c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f2c4:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000f2c9:	0f b6 c0             	movzx  eax,al
c000f2cc:	c1 e0 08             	shl    eax,0x8
c000f2cf:	09 d0                	or     eax,edx
c000f2d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f2d5:	83 44 24 3c 02       	add    DWORD PTR [esp+0x3c],0x2
c000f2da:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f2de:	8d 50 01             	lea    edx,[eax+0x1]
c000f2e1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000f2e5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f2e9:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000f2ee:	0f b6 c0             	movzx  eax,al
c000f2f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f2f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f2f9:	c1 e0 08             	shl    eax,0x8
c000f2fc:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000f300:	89 c1                	mov    ecx,eax
c000f302:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f306:	c1 e0 18             	shl    eax,0x18
c000f309:	89 c3                	mov    ebx,eax
c000f30b:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000f310:	8d 50 01             	lea    edx,[eax+0x1]
c000f313:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000f319:	09 d9                	or     ecx,ebx
c000f31b:	89 ca                	mov    edx,ecx
c000f31d:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000f324:	eb 0e                	jmp    c000f334 <scanMADT()+0x4a4>
c000f326:	66 90                	xchg   ax,ax
c000f328:	80 7c 24 33 05       	cmp    BYTE PTR [esp+0x33],0x5
c000f32d:	75 05                	jne    c000f334 <scanMADT()+0x4a4>
c000f32f:	83 44 24 3c 0a       	add    DWORD PTR [esp+0x3c],0xa
c000f334:	0f b6 54 24 32       	movzx  edx,BYTE PTR [esp+0x32]
c000f339:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f33d:	01 d0                	add    eax,edx
c000f33f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f343:	e9 3c fc ff ff       	jmp    c000ef84 <scanMADT()+0xf4>
c000f348:	90                   	nop
c000f349:	eb 05                	jmp    c000f350 <scanMADT()+0x4c0>
c000f34b:	90                   	nop
c000f34c:	90                   	nop
c000f34d:	8d 76 00             	lea    esi,[esi+0x0]
c000f350:	83 c4 48             	add    esp,0x48
c000f353:	5b                   	pop    ebx
c000f354:	c3                   	ret    
c000f355:	90                   	nop
c000f356:	66 90                	xchg   ax,ax

c000f358 <ACPI::ACPI()>:
c000f358:	83 ec 1c             	sub    esp,0x1c
c000f35b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f35f:	c7 44 24 04 f1 0d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020df1
c000f367:	89 04 24             	mov    DWORD PTR [esp],eax
c000f36a:	e8 13 d3 ff ff       	call   c000c682 <Device::Device(char const*)>
c000f36f:	ba 28 0f 02 c0       	mov    edx,0xc0020f28
c000f374:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f378:	89 10                	mov    DWORD PTR [eax],edx
c000f37a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f37e:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f385:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f389:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f393:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f397:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f3a1:	e8 ea fa ff ff       	call   c000ee90 <scanMADT()>
c000f3a6:	90                   	nop
c000f3a7:	83 c4 1c             	add    esp,0x1c
c000f3aa:	c3                   	ret    
c000f3ab:	90                   	nop

c000f3ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f3ac:	83 ec 3c             	sub    esp,0x3c
c000f3af:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f3b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3b7:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000f3bb:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f3bf:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000f3c4:	88 c8                	mov    al,cl
c000f3c6:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000f3ca:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f3cf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000f3d7:	90                   	nop
c000f3d8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f3dc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f3e2:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000f3e6:	0f 8d 98 00 00 00    	jge    c000f484 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd8>
c000f3ec:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f3f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3f4:	83 c2 2a             	add    edx,0x2a
c000f3f7:	0f b7 44 d0 0c       	movzx  eax,WORD PTR [eax+edx*8+0xc]
c000f3fc:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000f401:	39 c2                	cmp    edx,eax
c000f403:	75 73                	jne    c000f478 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcc>
c000f405:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f409:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f40d:	83 c2 2a             	add    edx,0x2a
c000f410:	0f b6 44 d0 0e       	movzx  eax,BYTE PTR [eax+edx*8+0xe]
c000f415:	38 44 24 14          	cmp    BYTE PTR [esp+0x14],al
c000f419:	75 5d                	jne    c000f478 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcc>
c000f41b:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c000f420:	74 32                	je     c000f454 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xa8>
c000f422:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f426:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f42a:	83 c2 2a             	add    edx,0x2a
c000f42d:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f431:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f435:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f438:	39 c2                	cmp    edx,eax
c000f43a:	74 0c                	je     c000f448 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000f43c:	c7 04 24 6c 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d6c
c000f443:	e8 ed 19 00 00       	call   c0010e35 <KePanic(char const*)>
c000f448:	c7 04 24 f6 0d 02 c0 	mov    DWORD PTR [esp],0xc0020df6
c000f44f:	e8 e1 19 00 00       	call   c0010e35 <KePanic(char const*)>
c000f454:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f458:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f45c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f460:	83 c2 2a             	add    edx,0x2a
c000f463:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f467:	8b 02                	mov    eax,DWORD PTR [edx]
c000f469:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f46c:	89 01                	mov    DWORD PTR [ecx],eax
c000f46e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f471:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000f476:	66 90                	xchg   ax,ax
c000f478:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000f47c:	e9 57 ff ff ff       	jmp    c000f3d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f481:	8d 76 00             	lea    esi,[esi+0x0]
c000f484:	90                   	nop
c000f485:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f489:	83 c4 3c             	add    esp,0x3c
c000f48c:	c2 04 00             	ret    0x4
c000f48f:	90                   	nop

c000f490 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f490:	83 ec 2c             	sub    esp,0x2c
c000f493:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f497:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000f49b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f49f:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c000f4a4:	88 c8                	mov    al,cl
c000f4a6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000f4aa:	88 d0                	mov    al,dl
c000f4ac:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000f4b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f4b4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f4ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f4be:	83 c2 2a             	add    edx,0x2a
c000f4c1:	0f b6 4c 24 14       	movzx  ecx,BYTE PTR [esp+0x14]
c000f4c6:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000f4ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f4ce:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f4d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f4d8:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f4db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f4df:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000f4e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f4e8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f4ee:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000f4f3:	fe c0                	inc    al
c000f4f5:	88 c1                	mov    cl,al
c000f4f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f4fb:	83 c2 2a             	add    edx,0x2a
c000f4fe:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f502:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f506:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f50c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f510:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f513:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f517:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f51b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f51f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f525:	8d 50 01             	lea    edx,[eax+0x1]
c000f528:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f52c:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f532:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f536:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f53c:	3d 00 02 00 00       	cmp    eax,0x200
c000f541:	75 0d                	jne    c000f550 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000f543:	c7 04 24 05 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e05
c000f54a:	e8 e6 18 00 00       	call   c0010e35 <KePanic(char const*)>
c000f54f:	90                   	nop
c000f550:	90                   	nop
c000f551:	83 c4 2c             	add    esp,0x2c
c000f554:	c3                   	ret    
c000f555:	90                   	nop
c000f556:	66 90                	xchg   ax,ax

c000f558 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f558:	b8 00 00 00 00       	mov    eax,0x0
c000f55d:	c3                   	ret    
c000f55e:	66 90                	xchg   ax,ax

c000f560 <ACPI::detectPCI()>:
c000f560:	53                   	push   ebx
c000f561:	83 ec 38             	sub    esp,0x38
c000f564:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f569:	c6 44 24 2e 00       	mov    BYTE PTR [esp+0x2e],0x0
c000f56e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f573:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000f57a:	24 04                	and    al,0x4
c000f57c:	74 2a                	je     c000f5a8 <ACPI::detectPCI()+0x48>
c000f57e:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f583:	c7 44 24 04 22 0e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020e22
c000f58b:	89 04 24             	mov    DWORD PTR [esp],eax
c000f58e:	e8 7d f8 ff ff       	call   c000ee10 <findDataTable(unsigned char*, char*)>
c000f593:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f597:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f59c:	74 0a                	je     c000f5a8 <ACPI::detectPCI()+0x48>
c000f59e:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000f5a3:	c6 44 24 2e 01       	mov    BYTE PTR [esp+0x2e],0x1
c000f5a8:	c7 44 24 24 5f 0c 00 00 	mov    DWORD PTR [esp+0x24],0xc5f
c000f5b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f5b4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000f5b7:	3c 01                	cmp    al,0x1
c000f5b9:	75 0d                	jne    c000f5c8 <ACPI::detectPCI()+0x68>
c000f5bb:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000f5c0:	c6 44 24 2e 01       	mov    BYTE PTR [esp+0x2e],0x1
c000f5c5:	eb 25                	jmp    c000f5ec <ACPI::detectPCI()+0x8c>
c000f5c7:	90                   	nop
c000f5c8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f5cc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000f5cf:	3c 02                	cmp    al,0x2
c000f5d1:	75 19                	jne    c000f5ec <ACPI::detectPCI()+0x8c>
c000f5d3:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000f5d8:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c000f5dd:	74 0d                	je     c000f5ec <ACPI::detectPCI()+0x8c>
c000f5df:	c7 04 24 9c 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d9c
c000f5e6:	e8 4a 18 00 00       	call   c0010e35 <KePanic(char const*)>
c000f5eb:	90                   	nop
c000f5ec:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f5f1:	34 01                	xor    al,0x1
c000f5f3:	74 3f                	je     c000f634 <ACPI::detectPCI()+0xd4>
c000f5f5:	e8 36 0b ff ff       	call   c0000130 <manualPCIProbe>
c000f5fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f5fe:	83 7c 24 20 01       	cmp    DWORD PTR [esp+0x20],0x1
c000f603:	75 0f                	jne    c000f614 <ACPI::detectPCI()+0xb4>
c000f605:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000f60a:	c6 44 24 2e 01       	mov    BYTE PTR [esp+0x2e],0x1
c000f60f:	eb 23                	jmp    c000f634 <ACPI::detectPCI()+0xd4>
c000f611:	8d 76 00             	lea    esi,[esi+0x0]
c000f614:	83 7c 24 20 02       	cmp    DWORD PTR [esp+0x20],0x2
c000f619:	75 19                	jne    c000f634 <ACPI::detectPCI()+0xd4>
c000f61b:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000f620:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c000f625:	74 0d                	je     c000f634 <ACPI::detectPCI()+0xd4>
c000f627:	c7 04 24 9c 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d9c
c000f62e:	e8 02 18 00 00       	call   c0010e35 <KePanic(char const*)>
c000f633:	90                   	nop
c000f634:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c000f639:	0f 84 89 00 00 00    	je     c000f6c8 <ACPI::detectPCI()+0x168>
c000f63f:	c7 04 24 27 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e27
c000f646:	e8 76 11 00 00       	call   c00107c1 <KeSetBootMessage(char const*)>
c000f64b:	c7 44 24 14 5c 01 00 00 	mov    DWORD PTR [esp+0x14],0x15c
c000f653:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f657:	89 04 24             	mov    DWORD PTR [esp],eax
c000f65a:	e8 9d 84 ff ff       	call   c0007afc <malloc>
c000f65f:	89 c3                	mov    ebx,eax
c000f661:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f664:	e8 85 ae 00 00       	call   c001a4ee <PCI::PCI()>
c000f669:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c000f66d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f671:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f675:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f679:	89 04 24             	mov    DWORD PTR [esp],eax
c000f67c:	e8 69 ce ff ff       	call   c000c4ea <Device::addChild(Device*)>
c000f681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f685:	8b 00                	mov    eax,DWORD PTR [eax]
c000f687:	83 c0 08             	add    eax,0x8
c000f68a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f68c:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c000f691:	74 09                	je     c000f69c <ACPI::detectPCI()+0x13c>
c000f693:	ba 01 00 00 00       	mov    edx,0x1
c000f698:	eb 0a                	jmp    c000f6a4 <ACPI::detectPCI()+0x144>
c000f69a:	66 90                	xchg   ax,ax
c000f69c:	ba 02 00 00 00       	mov    edx,0x2
c000f6a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f6a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f6ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f6b4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f6b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6bc:	89 14 24             	mov    DWORD PTR [esp],edx
c000f6bf:	ff d0                	call   eax
c000f6c1:	e9 9a 00 00 00       	jmp    c000f760 <ACPI::detectPCI()+0x200>
c000f6c6:	66 90                	xchg   ax,ax
c000f6c8:	c7 04 24 3f 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e3f
c000f6cf:	e8 ed 10 00 00       	call   c00107c1 <KeSetBootMessage(char const*)>
c000f6d4:	c7 44 24 10 70 02 00 00 	mov    DWORD PTR [esp+0x10],0x270
c000f6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6e0:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6e3:	e8 14 84 ff ff       	call   c0007afc <malloc>
c000f6e8:	89 c3                	mov    ebx,eax
c000f6ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6ed:	e8 5c b9 00 00       	call   c001b04e <IDE::IDE()>
c000f6f2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000f6f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f6fa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f6fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f702:	89 04 24             	mov    DWORD PTR [esp],eax
c000f705:	e8 e0 cd ff ff       	call   c000c4ea <Device::addChild(Device*)>
c000f70a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f70e:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f718:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f71c:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f725:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f729:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f732:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f736:	8b 00                	mov    eax,DWORD PTR [eax]
c000f738:	83 c0 08             	add    eax,0x8
c000f73b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f73d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f745:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f74d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000f755:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f759:	89 14 24             	mov    DWORD PTR [esp],edx
c000f75c:	ff d0                	call   eax
c000f75e:	66 90                	xchg   ax,ax
c000f760:	90                   	nop
c000f761:	83 c4 38             	add    esp,0x38
c000f764:	5b                   	pop    ebx
c000f765:	c3                   	ret    
c000f766:	66 90                	xchg   ax,ax

c000f768 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f768:	83 ec 2c             	sub    esp,0x2c
c000f76b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f76f:	0f b6 40 24          	movzx  eax,BYTE PTR [eax+0x24]
c000f773:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000f777:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f77c:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000f781:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f785:	89 04 24             	mov    DWORD PTR [esp],eax
c000f788:	e8 0d 7a ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000f78d:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f791:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f796:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000f79b:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000f7a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f7a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000f7aa:	e8 29 7b ff ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f7af:	90                   	nop
c000f7b0:	83 c4 2c             	add    esp,0x2c
c000f7b3:	c3                   	ret    

c000f7b4 <ACPI::sleep()>:
c000f7b4:	83 ec 0c             	sub    esp,0xc
c000f7b7:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f7bc:	85 c0                	test   eax,eax
c000f7be:	74 08                	je     c000f7c8 <ACPI::sleep()+0x14>
c000f7c0:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f7c5:	ff d0                	call   eax
c000f7c7:	90                   	nop
c000f7c8:	90                   	nop
c000f7c9:	83 c4 0c             	add    esp,0xc
c000f7cc:	c3                   	ret    
c000f7cd:	90                   	nop
c000f7ce:	66 90                	xchg   ax,ax

c000f7d0 <ACPI::open(int, int, void*)>:
c000f7d0:	53                   	push   ebx
c000f7d1:	81 ec a8 01 00 00    	sub    esp,0x1a8
c000f7d7:	8b 84 24 b0 01 00 00 	mov    eax,DWORD PTR [esp+0x1b0]
c000f7de:	89 04 24             	mov    DWORD PTR [esp],eax
c000f7e1:	e8 7a fd ff ff       	call   c000f560 <ACPI::detectPCI()>
c000f7e6:	c7 04 24 c4 0d 02 c0 	mov    DWORD PTR [esp],0xc0020dc4
c000f7ed:	e8 cf 0f 00 00       	call   c00107c1 <KeSetBootMessage(char const*)>
c000f7f2:	c7 04 24 54 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e54
c000f7f9:	e8 52 4a 00 00       	call   c0014250 <Thr::loadKernelSymbolTable(char const*)>
c000f7fe:	c6 84 24 9f 01 00 00 00 	mov    BYTE PTR [esp+0x19f],0x0
c000f806:	c7 84 24 74 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x174],0x114
c000f811:	8b 84 24 74 01 00 00 	mov    eax,DWORD PTR [esp+0x174]
c000f818:	89 04 24             	mov    DWORD PTR [esp],eax
c000f81b:	e8 dc 82 ff ff       	call   c0007afc <malloc>
c000f820:	89 c3                	mov    ebx,eax
c000f822:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f827:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f82b:	c7 44 24 04 72 0e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020e72
c000f833:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f836:	e8 bd b7 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c000f83b:	89 9c 24 98 01 00 00 	mov    DWORD PTR [esp+0x198],ebx
c000f842:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f84a:	8b 84 24 98 01 00 00 	mov    eax,DWORD PTR [esp+0x198]
c000f851:	89 04 24             	mov    DWORD PTR [esp],eax
c000f854:	e8 5d b8 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c000f859:	89 84 24 94 01 00 00 	mov    DWORD PTR [esp+0x194],eax
c000f860:	83 bc 24 94 01 00 00 00 	cmp    DWORD PTR [esp+0x194],0x0
c000f868:	75 12                	jne    c000f87c <ACPI::open(int, int, void*)+0xac>
c000f86a:	8b 84 24 98 01 00 00 	mov    eax,DWORD PTR [esp+0x198]
c000f871:	89 04 24             	mov    DWORD PTR [esp],eax
c000f874:	e8 9b b8 ff ff       	call   c000b114 <File::close()>
c000f879:	eb 09                	jmp    c000f884 <ACPI::open(int, int, void*)+0xb4>
c000f87b:	90                   	nop
c000f87c:	c6 84 24 9f 01 00 00 01 	mov    BYTE PTR [esp+0x19f],0x1
c000f884:	83 bc 24 98 01 00 00 00 	cmp    DWORD PTR [esp+0x198],0x0
c000f88c:	74 1a                	je     c000f8a8 <ACPI::open(int, int, void*)+0xd8>
c000f88e:	8b 84 24 98 01 00 00 	mov    eax,DWORD PTR [esp+0x198]
c000f895:	8b 00                	mov    eax,DWORD PTR [eax]
c000f897:	83 c0 08             	add    eax,0x8
c000f89a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f89c:	8b 94 24 98 01 00 00 	mov    edx,DWORD PTR [esp+0x198]
c000f8a3:	89 14 24             	mov    DWORD PTR [esp],edx
c000f8a6:	ff d0                	call   eax
c000f8a8:	0f b6 84 24 9f 01 00 00 	movzx  eax,BYTE PTR [esp+0x19f]
c000f8b0:	34 01                	xor    al,0x1
c000f8b2:	74 40                	je     c000f8f4 <ACPI::open(int, int, void*)+0x124>
c000f8b4:	c7 04 24 90 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e90
c000f8bb:	e8 01 0f 00 00       	call   c00107c1 <KeSetBootMessage(char const*)>
c000f8c0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000f8c8:	c7 44 24 04 ab 0e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020eab
c000f8d0:	c7 04 24 bc 0e 02 c0 	mov    DWORD PTR [esp],0xc0020ebc
c000f8d7:	e8 f4 3c 00 00       	call   c00135d0 <Reg::readIntWithDefault(char*, char*, int)>
c000f8dc:	89 84 24 90 01 00 00 	mov    DWORD PTR [esp+0x190],eax
c000f8e3:	8b 84 24 90 01 00 00 	mov    eax,DWORD PTR [esp+0x190]
c000f8ea:	89 04 24             	mov    DWORD PTR [esp],eax
c000f8ed:	e8 50 9f ff ff       	call   c0009842 <Virt::setupPageSwapping(int)>
c000f8f2:	66 90                	xchg   ax,ax
c000f8f4:	c7 04 24 95 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd95
c000f8fb:	e8 c1 0e 00 00       	call   c00107c1 <KeSetBootMessage(char const*)>
c000f900:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f907:	c7 44 24 04 13 00 00 00 	mov    DWORD PTR [esp+0x4],0x13
c000f90f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f912:	e8 e9 ce ff ff       	call   c000c800 <getDevicesOfType(DeviceType)>
c000f917:	83 ec 04             	sub    esp,0x4
c000f91a:	66 90                	xchg   ax,ax
c000f91c:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f923:	89 04 24             	mov    DWORD PTR [esp],eax
c000f926:	e8 b9 f8 00 00       	call   c001f1e4 <LinkedList<Device>::isEmpty()>
c000f92b:	34 01                	xor    al,0x1
c000f92d:	0f 84 49 01 00 00    	je     c000fa7c <ACPI::open(int, int, void*)+0x2ac>
c000f933:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f93a:	89 04 24             	mov    DWORD PTR [esp],eax
c000f93d:	e8 be f8 00 00       	call   c001f200 <LinkedList<Device>::getFirstElement()>
c000f942:	89 84 24 8c 01 00 00 	mov    DWORD PTR [esp+0x18c],eax
c000f949:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f950:	89 04 24             	mov    DWORD PTR [esp],eax
c000f953:	e8 b0 f8 00 00       	call   c001f208 <LinkedList<Device>::removeFirst()>
c000f958:	8b 84 24 8c 01 00 00 	mov    eax,DWORD PTR [esp+0x18c]
c000f95f:	89 84 24 88 01 00 00 	mov    DWORD PTR [esp+0x188],eax
c000f966:	8b 8c 24 88 01 00 00 	mov    ecx,DWORD PTR [esp+0x188]
c000f96d:	b8 24 00 00 00       	mov    eax,0x24
c000f972:	83 e0 fc             	and    eax,0xfffffffc
c000f975:	89 c3                	mov    ebx,eax
c000f977:	b8 00 00 00 00       	mov    eax,0x0
c000f97c:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000f983:	89 54 04 3c          	mov    DWORD PTR [esp+eax*1+0x3c],edx
c000f987:	83 c0 04             	add    eax,0x4
c000f98a:	39 d8                	cmp    eax,ebx
c000f98c:	72 ee                	jb     c000f97c <ACPI::open(int, int, void*)+0x1ac>
c000f98e:	8d 44 24 60          	lea    eax,[esp+0x60]
c000f992:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f996:	b8 24 00 00 00       	mov    eax,0x24
c000f99b:	83 e0 fc             	and    eax,0xfffffffc
c000f99e:	89 c1                	mov    ecx,eax
c000f9a0:	b8 00 00 00 00       	mov    eax,0x0
c000f9a5:	8d 76 00             	lea    esi,[esi+0x0]
c000f9a8:	8b 54 04 3c          	mov    edx,DWORD PTR [esp+eax*1+0x3c]
c000f9ac:	89 14 04             	mov    DWORD PTR [esp+eax*1],edx
c000f9af:	83 c0 04             	add    eax,0x4
c000f9b2:	39 c8                	cmp    eax,ecx
c000f9b4:	72 f2                	jb     c000f9a8 <ACPI::open(int, int, void*)+0x1d8>
c000f9b6:	e8 11 b0 00 00       	call   c001a9cc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f9bb:	89 84 24 84 01 00 00 	mov    DWORD PTR [esp+0x184],eax
c000f9c2:	83 bc 24 84 01 00 00 00 	cmp    DWORD PTR [esp+0x184],0x0
c000f9ca:	0f 84 4c ff ff ff    	je     c000f91c <ACPI::open(int, int, void*)+0x14c>
c000f9d0:	c7 84 24 70 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x170],0x114
c000f9db:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c000f9e2:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9e5:	e8 12 81 ff ff       	call   c0007afc <malloc>
c000f9ea:	89 c3                	mov    ebx,eax
c000f9ec:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f9f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f9f5:	8b 84 24 84 01 00 00 	mov    eax,DWORD PTR [esp+0x184]
c000f9fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fa00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa03:	e8 f0 b5 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c000fa08:	89 9c 24 80 01 00 00 	mov    DWORD PTR [esp+0x180],ebx
c000fa0f:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c000fa16:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa19:	e8 00 b9 ff ff       	call   c000b31e <File::exists()>
c000fa1e:	84 c0                	test   al,al
c000fa20:	74 2a                	je     c000fa4c <ACPI::open(int, int, void*)+0x27c>
c000fa22:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000fa2a:	8b 84 24 84 01 00 00 	mov    eax,DWORD PTR [esp+0x184]
c000fa31:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa34:	e8 a5 52 00 00       	call   c0014cde <Thr::loadDLL(char const*, bool)>
c000fa39:	8b 94 24 88 01 00 00 	mov    edx,DWORD PTR [esp+0x188]
c000fa40:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fa44:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa47:	e8 ce 54 00 00       	call   c0014f1a <Thr::executeDLL(unsigned long, void*)>
c000fa4c:	83 bc 24 80 01 00 00 00 	cmp    DWORD PTR [esp+0x180],0x0
c000fa54:	0f 84 c2 fe ff ff    	je     c000f91c <ACPI::open(int, int, void*)+0x14c>
c000fa5a:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c000fa61:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa63:	83 c0 08             	add    eax,0x8
c000fa66:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa68:	8b 94 24 80 01 00 00 	mov    edx,DWORD PTR [esp+0x180]
c000fa6f:	89 14 24             	mov    DWORD PTR [esp],edx
c000fa72:	ff d0                	call   eax
c000fa74:	e9 a3 fe ff ff       	jmp    c000f91c <ACPI::open(int, int, void*)+0x14c>
c000fa79:	8d 76 00             	lea    esi,[esi+0x0]
c000fa7c:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000fa83:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa86:	e8 55 f7 00 00       	call   c001f1e0 <LinkedList<Device>::~LinkedList()>
c000fa8b:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000fa91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000fa99:	c7 04 24 c3 0e 02 c0 	mov    DWORD PTR [esp],0xc0020ec3
c000faa0:	e8 39 52 00 00       	call   c0014cde <Thr::loadDLL(char const*, bool)>
c000faa5:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000faa9:	89 04 24             	mov    DWORD PTR [esp],eax
c000faac:	e8 69 54 00 00       	call   c0014f1a <Thr::executeDLL(unsigned long, void*)>
c000fab1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000fab6:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000fabd:	24 04                	and    al,0x4
c000fabf:	0f 84 0b 01 00 00    	je     c000fbd0 <ACPI::open(int, int, void*)+0x400>
c000fac5:	c7 04 24 e0 0e 02 c0 	mov    DWORD PTR [esp],0xc0020ee0
c000facc:	e8 f0 0c 00 00       	call   c00107c1 <KeSetBootMessage(char const*)>
c000fad1:	c7 84 24 6c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x16c],0x114
c000fadc:	8b 84 24 6c 01 00 00 	mov    eax,DWORD PTR [esp+0x16c]
c000fae3:	89 04 24             	mov    DWORD PTR [esp],eax
c000fae6:	e8 11 80 ff ff       	call   c0007afc <malloc>
c000faeb:	89 c3                	mov    ebx,eax
c000faed:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000faf2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000faf6:	c7 44 24 04 fd 0e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020efd
c000fafe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb01:	e8 f2 b4 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c000fb06:	89 9c 24 7c 01 00 00 	mov    DWORD PTR [esp+0x17c],ebx
c000fb0d:	83 bc 24 7c 01 00 00 00 	cmp    DWORD PTR [esp+0x17c],0x0
c000fb15:	74 19                	je     c000fb30 <ACPI::open(int, int, void*)+0x360>
c000fb17:	8b 84 24 7c 01 00 00 	mov    eax,DWORD PTR [esp+0x17c]
c000fb1e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb21:	e8 f8 b7 ff ff       	call   c000b31e <File::exists()>
c000fb26:	84 c0                	test   al,al
c000fb28:	74 06                	je     c000fb30 <ACPI::open(int, int, void*)+0x360>
c000fb2a:	b0 01                	mov    al,0x1
c000fb2c:	eb 06                	jmp    c000fb34 <ACPI::open(int, int, void*)+0x364>
c000fb2e:	66 90                	xchg   ax,ax
c000fb30:	b0 00                	mov    al,0x0
c000fb32:	66 90                	xchg   ax,ax
c000fb34:	84 c0                	test   al,al
c000fb36:	74 28                	je     c000fb60 <ACPI::open(int, int, void*)+0x390>
c000fb38:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000fb40:	c7 04 24 fd 0e 02 c0 	mov    DWORD PTR [esp],0xc0020efd
c000fb47:	e8 92 51 00 00       	call   c0014cde <Thr::loadDLL(char const*, bool)>
c000fb4c:	8b 94 24 b0 01 00 00 	mov    edx,DWORD PTR [esp+0x1b0]
c000fb53:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fb57:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb5a:	e8 bb 53 00 00       	call   c0014f1a <Thr::executeDLL(unsigned long, void*)>
c000fb5f:	90                   	nop
c000fb60:	83 bc 24 7c 01 00 00 00 	cmp    DWORD PTR [esp+0x17c],0x0
c000fb68:	74 26                	je     c000fb90 <ACPI::open(int, int, void*)+0x3c0>
c000fb6a:	83 bc 24 7c 01 00 00 00 	cmp    DWORD PTR [esp+0x17c],0x0
c000fb72:	74 1c                	je     c000fb90 <ACPI::open(int, int, void*)+0x3c0>
c000fb74:	8b 84 24 7c 01 00 00 	mov    eax,DWORD PTR [esp+0x17c]
c000fb7b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb7d:	83 c0 08             	add    eax,0x8
c000fb80:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb82:	8b 94 24 7c 01 00 00 	mov    edx,DWORD PTR [esp+0x17c]
c000fb89:	89 14 24             	mov    DWORD PTR [esp],edx
c000fb8c:	ff d0                	call   eax
c000fb8e:	66 90                	xchg   ax,ax
c000fb90:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000fb95:	c7 44 24 04 1a 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020f1a
c000fb9d:	89 04 24             	mov    DWORD PTR [esp],eax
c000fba0:	e8 6b f2 ff ff       	call   c000ee10 <findDataTable(unsigned char*, char*)>
c000fba5:	89 84 24 78 01 00 00 	mov    DWORD PTR [esp+0x178],eax
c000fbac:	83 bc 24 78 01 00 00 00 	cmp    DWORD PTR [esp+0x178],0x0
c000fbb4:	74 1a                	je     c000fbd0 <ACPI::open(int, int, void*)+0x400>
c000fbb6:	8b 84 24 78 01 00 00 	mov    eax,DWORD PTR [esp+0x178]
c000fbbd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fbc1:	8b 84 24 b0 01 00 00 	mov    eax,DWORD PTR [esp+0x1b0]
c000fbc8:	89 04 24             	mov    DWORD PTR [esp],eax
c000fbcb:	e8 98 fb ff ff       	call   c000f768 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000fbd0:	b8 00 00 00 00       	mov    eax,0x0
c000fbd5:	81 c4 a8 01 00 00    	add    esp,0x1a8
c000fbdb:	5b                   	pop    ebx
c000fbdc:	c3                   	ret    
c000fbdd:	90                   	nop

c000fbde <CPU::close(int, int, void*)>:
c000fbde:	31 c0                	xor    eax,eax
c000fbe0:	c3                   	ret    
c000fbe1:	90                   	nop

c000fbe2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000fbe2:	60                   	pusha  
c000fbe3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fbe7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fbeb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fbef:	9c                   	pushf  
c000fbf0:	fa                   	cli    
c000fbf1:	0f 09                	wbinvd 
c000fbf3:	0f 30                	wrmsr  
c000fbf5:	9d                   	popf   
c000fbf6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fbfa:	89 02                	mov    DWORD PTR [edx],eax
c000fbfc:	61                   	popa   
c000fbfd:	c3                   	ret    

c000fbfe <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000fbfe:	60                   	pusha  
c000fbff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fc03:	9c                   	pushf  
c000fc04:	fa                   	cli    
c000fc05:	0f 09                	wbinvd 
c000fc07:	31 c0                	xor    eax,eax
c000fc09:	31 d2                	xor    edx,edx
c000fc0b:	0f 32                	rdmsr  
c000fc0d:	9d                   	popf   
c000fc0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fc12:	89 02                	mov    DWORD PTR [edx],eax
c000fc14:	61                   	popa   
c000fc15:	c3                   	ret    

c000fc16 <CPU::AMD_K6_writeback(int, int, int)>:
c000fc16:	56                   	push   esi
c000fc17:	53                   	push   ebx
c000fc18:	83 ec 10             	sub    esp,0x10
c000fc1b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000fc20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc24:	75 5d                	jne    c000fc83 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fc26:	83 f8 08             	cmp    eax,0x8
c000fc29:	75 09                	jne    c000fc34 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000fc2b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000fc30:	7e 13                	jle    c000fc45 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fc32:	eb 30                	jmp    c000fc64 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fc34:	83 f8 06             	cmp    eax,0x6
c000fc37:	7c 4a                	jl     c000fc83 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fc39:	83 f8 07             	cmp    eax,0x7
c000fc3c:	7e 07                	jle    c000fc45 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fc3e:	83 f8 09             	cmp    eax,0x9
c000fc41:	74 21                	je     c000fc64 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fc43:	eb 3e                	jmp    c000fc83 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fc45:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000fc4b:	89 e6                	mov    esi,esp
c000fc4d:	56                   	push   esi
c000fc4e:	68 82 00 00 c0       	push   0xc0000082
c000fc53:	e8 a6 ff ff ff       	call   c000fbfe <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fc58:	c1 eb 15             	shr    ebx,0x15
c000fc5b:	56                   	push   esi
c000fc5c:	83 e3 7e             	and    ebx,0x7e
c000fc5f:	6a 00                	push   0x0
c000fc61:	53                   	push   ebx
c000fc62:	eb 12                	jmp    c000fc76 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000fc64:	89 e3                	mov    ebx,esp
c000fc66:	53                   	push   ebx
c000fc67:	68 82 00 00 c0       	push   0xc0000082
c000fc6c:	e8 8d ff ff ff       	call   c000fbfe <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fc71:	53                   	push   ebx
c000fc72:	6a 00                	push   0x0
c000fc74:	6a 00                	push   0x0
c000fc76:	68 82 00 00 c0       	push   0xc0000082
c000fc7b:	e8 62 ff ff ff       	call   c000fbe2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000fc80:	83 c4 18             	add    esp,0x18
c000fc83:	83 c4 10             	add    esp,0x10
c000fc86:	5b                   	pop    ebx
c000fc87:	5e                   	pop    esi
c000fc88:	c3                   	ret    
c000fc89:	90                   	nop

c000fc8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000fc8a:	55                   	push   ebp
c000fc8b:	57                   	push   edi
c000fc8c:	56                   	push   esi
c000fc8d:	53                   	push   ebx
c000fc8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc92:	39 05 30 24 02 c0    	cmp    DWORD PTR ds:0xc0022430,eax
c000fc98:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000fc9c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fca0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000fca4:	75 23                	jne    c000fcc9 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000fca6:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000fcab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fcaf:	89 06                	mov    DWORD PTR [esi],eax
c000fcb1:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000fcb6:	89 07                	mov    DWORD PTR [edi],eax
c000fcb8:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000fcbd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fcc0:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000fcc5:	89 02                	mov    DWORD PTR [edx],eax
c000fcc7:	eb 3f                	jmp    c000fd08 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000fcc9:	31 c9                	xor    ecx,ecx
c000fccb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fccf:	0f a2                	cpuid  
c000fcd1:	89 06                	mov    DWORD PTR [esi],eax
c000fcd3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcd7:	89 1f                	mov    DWORD PTR [edi],ebx
c000fcd9:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000fcdc:	89 10                	mov    DWORD PTR [eax],edx
c000fcde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fce2:	a3 30 24 02 c0       	mov    ds:0xc0022430,eax
c000fce7:	8b 06                	mov    eax,DWORD PTR [esi]
c000fce9:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000fcee:	8b 07                	mov    eax,DWORD PTR [edi]
c000fcf0:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000fcf5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fcf8:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000fcfd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd01:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd03:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000fd08:	5b                   	pop    ebx
c000fd09:	5e                   	pop    esi
c000fd0a:	5f                   	pop    edi
c000fd0b:	5d                   	pop    ebp
c000fd0c:	c3                   	ret    
c000fd0d:	90                   	nop

c000fd0e <CPU::cpuidCheckEDX(unsigned int)>:
c000fd0e:	83 ec 10             	sub    esp,0x10
c000fd11:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fd15:	50                   	push   eax
c000fd16:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fd1a:	50                   	push   eax
c000fd1b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fd1f:	50                   	push   eax
c000fd20:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fd24:	50                   	push   eax
c000fd25:	6a 01                	push   0x1
c000fd27:	e8 5e ff ff ff       	call   c000fc8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd2c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fd30:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000fd34:	0f 95 c0             	setne  al
c000fd37:	83 c4 24             	add    esp,0x24
c000fd3a:	c3                   	ret    
c000fd3b:	90                   	nop

c000fd3c <CPU::cpuidCheckECX(unsigned int)>:
c000fd3c:	83 ec 10             	sub    esp,0x10
c000fd3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fd43:	50                   	push   eax
c000fd44:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fd48:	50                   	push   eax
c000fd49:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fd4d:	50                   	push   eax
c000fd4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fd52:	50                   	push   eax
c000fd53:	6a 01                	push   0x1
c000fd55:	e8 30 ff ff ff       	call   c000fc8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fd5e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000fd62:	0f 95 c0             	setne  al
c000fd65:	83 c4 24             	add    esp,0x24
c000fd68:	c3                   	ret    
c000fd69:	90                   	nop

c000fd6a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000fd6a:	83 ec 10             	sub    esp,0x10
c000fd6d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fd71:	50                   	push   eax
c000fd72:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fd76:	50                   	push   eax
c000fd77:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fd7b:	50                   	push   eax
c000fd7c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fd80:	50                   	push   eax
c000fd81:	6a 07                	push   0x7
c000fd83:	e8 02 ff ff ff       	call   c000fc8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fd8c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000fd90:	0f 95 c0             	setne  al
c000fd93:	83 c4 24             	add    esp,0x24
c000fd96:	c3                   	ret    
c000fd97:	90                   	nop

c000fd98 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000fd98:	83 ec 10             	sub    esp,0x10
c000fd9b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fd9f:	50                   	push   eax
c000fda0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fda4:	50                   	push   eax
c000fda5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fda9:	50                   	push   eax
c000fdaa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fdae:	50                   	push   eax
c000fdaf:	6a 07                	push   0x7
c000fdb1:	e8 d4 fe ff ff       	call   c000fc8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fdb6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fdba:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000fdbe:	0f 95 c0             	setne  al
c000fdc1:	83 c4 24             	add    esp,0x24
c000fdc4:	c3                   	ret    
c000fdc5:	90                   	nop

c000fdc6 <CPU::CPU()>:
c000fdc6:	83 ec 1c             	sub    esp,0x1c
c000fdc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdcd:	c7 44 24 04 3d 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc002103d
c000fdd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fdd8:	e8 a5 c8 ff ff       	call   c000c682 <Device::Device(char const*)>
c000fddd:	ba c4 10 02 c0       	mov    edx,0xc00210c4
c000fde2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fde6:	89 10                	mov    DWORD PTR [eax],edx
c000fde8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdec:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000fdf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdfa:	05 78 01 00 00       	add    eax,0x178
c000fdff:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe02:	e8 9b 75 ff ff       	call   c00073a2 <GDT::GDT()>
c000fe07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe0b:	05 7c 09 00 00       	add    eax,0x97c
c000fe10:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe13:	e8 c4 77 ff ff       	call   c00075dc <IDT::IDT()>
c000fe18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe1c:	05 7c 11 00 00       	add    eax,0x117c
c000fe21:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe24:	e8 4f 91 ff ff       	call   c0008f78 <TSS::TSS()>
c000fe29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe2d:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000fe34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe38:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000fe42:	90                   	nop
c000fe43:	83 c4 1c             	add    esp,0x1c
c000fe46:	c3                   	ret    
c000fe47:	90                   	nop

c000fe48 <CPU::displayFeatures()>:
c000fe48:	c3                   	ret    
c000fe49:	90                   	nop

c000fe4a <CPU::detectFeatures()>:
c000fe4a:	55                   	push   ebp
c000fe4b:	57                   	push   edi
c000fe4c:	56                   	push   esi
c000fe4d:	53                   	push   ebx
c000fe4e:	83 ec 30             	sub    esp,0x30
c000fe51:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fe55:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000fe5f:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000fe65:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000fe6c:	6a 0d                	push   0xd
c000fe6e:	6a 00                	push   0x0
c000fe70:	55                   	push   ebp
c000fe71:	e8 0a 07 ff ff       	call   c0000580 <memset>
c000fe76:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000fe7b:	83 c4 10             	add    esp,0x10
c000fe7e:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000fe85:	0f 84 ba 05 00 00    	je     c0010445 <CPU::detectFeatures()+0x5fb>
c000fe8b:	83 ec 0c             	sub    esp,0xc
c000fe8e:	89 ef                	mov    edi,ebp
c000fe90:	6a 10                	push   0x10
c000fe92:	e8 77 fe ff ff       	call   c000fd0e <CPU::cpuidCheckEDX(unsigned int)>
c000fe97:	24 01                	and    al,0x1
c000fe99:	00 c0                	add    al,al
c000fe9b:	88 c2                	mov    dl,al
c000fe9d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fea3:	24 fd                	and    al,0xfd
c000fea5:	08 d0                	or     al,dl
c000fea7:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fead:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000feb4:	e8 55 fe ff ff       	call   c000fd0e <CPU::cpuidCheckEDX(unsigned int)>
c000feb9:	24 01                	and    al,0x1
c000febb:	c0 e0 02             	shl    al,0x2
c000febe:	88 c2                	mov    dl,al
c000fec0:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fec6:	24 fb                	and    al,0xfb
c000fec8:	08 d0                	or     al,dl
c000feca:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fed0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000fed7:	e8 32 fe ff ff       	call   c000fd0e <CPU::cpuidCheckEDX(unsigned int)>
c000fedc:	24 01                	and    al,0x1
c000fede:	c0 e0 03             	shl    al,0x3
c000fee1:	88 c2                	mov    dl,al
c000fee3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fee9:	24 f7                	and    al,0xf7
c000feeb:	08 d0                	or     al,dl
c000feed:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fef3:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000fefa:	e8 0f fe ff ff       	call   c000fd0e <CPU::cpuidCheckEDX(unsigned int)>
c000feff:	24 01                	and    al,0x1
c000ff01:	c0 e0 04             	shl    al,0x4
c000ff04:	88 c2                	mov    dl,al
c000ff06:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000ff0c:	24 ef                	and    al,0xef
c000ff0e:	08 d0                	or     al,dl
c000ff10:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000ff16:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000ff1d:	e8 ec fd ff ff       	call   c000fd0e <CPU::cpuidCheckEDX(unsigned int)>
c000ff22:	24 01                	and    al,0x1
c000ff24:	c0 e0 05             	shl    al,0x5
c000ff27:	88 c2                	mov    dl,al
c000ff29:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000ff2f:	24 df                	and    al,0xdf
c000ff31:	08 d0                	or     al,dl
c000ff33:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000ff39:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000ff40:	e8 c9 fd ff ff       	call   c000fd0e <CPU::cpuidCheckEDX(unsigned int)>
c000ff45:	24 01                	and    al,0x1
c000ff47:	00 c0                	add    al,al
c000ff49:	88 c2                	mov    dl,al
c000ff4b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff51:	24 fd                	and    al,0xfd
c000ff53:	08 d0                	or     al,dl
c000ff55:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff5b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000ff62:	e8 a7 fd ff ff       	call   c000fd0e <CPU::cpuidCheckEDX(unsigned int)>
c000ff67:	24 01                	and    al,0x1
c000ff69:	c0 e0 06             	shl    al,0x6
c000ff6c:	88 c2                	mov    dl,al
c000ff6e:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ff74:	24 bf                	and    al,0xbf
c000ff76:	08 d0                	or     al,dl
c000ff78:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ff7e:	58                   	pop    eax
c000ff7f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ff83:	50                   	push   eax
c000ff84:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ff88:	50                   	push   eax
c000ff89:	8d 74 24 28          	lea    esi,[esp+0x28]
c000ff8d:	56                   	push   esi
c000ff8e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ff92:	50                   	push   eax
c000ff93:	6a 00                	push   0x0
c000ff95:	e8 f0 fc ff ff       	call   c000fc8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff9a:	b8 04 00 00 00       	mov    eax,0x4
c000ff9f:	89 c1                	mov    ecx,eax
c000ffa1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffa3:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000ffa9:	89 c1                	mov    ecx,eax
c000ffab:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000ffaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffb1:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000ffb7:	89 c1                	mov    ecx,eax
c000ffb9:	8d 74 24 38          	lea    esi,[esp+0x38]
c000ffbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffbf:	83 c4 18             	add    esp,0x18
c000ffc2:	68 4c 0f 02 c0       	push   0xc0020f4c
c000ffc7:	55                   	push   ebp
c000ffc8:	e8 73 08 ff ff       	call   c0000840 <strcmp>
c000ffcd:	83 c4 10             	add    esp,0x10
c000ffd0:	85 c0                	test   eax,eax
c000ffd2:	75 0f                	jne    c000ffe3 <CPU::detectFeatures()+0x199>
c000ffd4:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000ffde:	e9 22 02 00 00       	jmp    c0010205 <CPU::detectFeatures()+0x3bb>
c000ffe3:	50                   	push   eax
c000ffe4:	50                   	push   eax
c000ffe5:	68 59 0f 02 c0       	push   0xc0020f59
c000ffea:	55                   	push   ebp
c000ffeb:	e8 50 08 ff ff       	call   c0000840 <strcmp>
c000fff0:	83 c4 10             	add    esp,0x10
c000fff3:	85 c0                	test   eax,eax
c000fff5:	74 dd                	je     c000ffd4 <CPU::detectFeatures()+0x18a>
c000fff7:	50                   	push   eax
c000fff8:	50                   	push   eax
c000fff9:	68 66 0f 02 c0       	push   0xc0020f66
c000fffe:	55                   	push   ebp
c000ffff:	e8 3c 08 ff ff       	call   c0000840 <strcmp>
c0010004:	83 c4 10             	add    esp,0x10
c0010007:	85 c0                	test   eax,eax
c0010009:	74 2a                	je     c0010035 <CPU::detectFeatures()+0x1eb>
c001000b:	50                   	push   eax
c001000c:	50                   	push   eax
c001000d:	68 73 0f 02 c0       	push   0xc0020f73
c0010012:	55                   	push   ebp
c0010013:	e8 28 08 ff ff       	call   c0000840 <strcmp>
c0010018:	83 c4 10             	add    esp,0x10
c001001b:	85 c0                	test   eax,eax
c001001d:	74 16                	je     c0010035 <CPU::detectFeatures()+0x1eb>
c001001f:	50                   	push   eax
c0010020:	50                   	push   eax
c0010021:	68 80 0f 02 c0       	push   0xc0020f80
c0010026:	55                   	push   ebp
c0010027:	e8 14 08 ff ff       	call   c0000840 <strcmp>
c001002c:	83 c4 10             	add    esp,0x10
c001002f:	85 c0                	test   eax,eax
c0010031:	74 48                	je     c001007b <CPU::detectFeatures()+0x231>
c0010033:	eb 0f                	jmp    c0010044 <CPU::detectFeatures()+0x1fa>
c0010035:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001003f:	e9 c1 01 00 00       	jmp    c0010205 <CPU::detectFeatures()+0x3bb>
c0010044:	50                   	push   eax
c0010045:	50                   	push   eax
c0010046:	68 8d 0f 02 c0       	push   0xc0020f8d
c001004b:	55                   	push   ebp
c001004c:	e8 ef 07 ff ff       	call   c0000840 <strcmp>
c0010051:	83 c4 10             	add    esp,0x10
c0010054:	85 c0                	test   eax,eax
c0010056:	74 23                	je     c001007b <CPU::detectFeatures()+0x231>
c0010058:	57                   	push   edi
c0010059:	57                   	push   edi
c001005a:	68 9a 0f 02 c0       	push   0xc0020f9a
c001005f:	55                   	push   ebp
c0010060:	e8 db 07 ff ff       	call   c0000840 <strcmp>
c0010065:	83 c4 10             	add    esp,0x10
c0010068:	85 c0                	test   eax,eax
c001006a:	75 1e                	jne    c001008a <CPU::detectFeatures()+0x240>
c001006c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010076:	e9 8a 01 00 00       	jmp    c0010205 <CPU::detectFeatures()+0x3bb>
c001007b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010085:	e9 7b 01 00 00       	jmp    c0010205 <CPU::detectFeatures()+0x3bb>
c001008a:	56                   	push   esi
c001008b:	56                   	push   esi
c001008c:	68 a7 0f 02 c0       	push   0xc0020fa7
c0010091:	55                   	push   ebp
c0010092:	e8 a9 07 ff ff       	call   c0000840 <strcmp>
c0010097:	83 c4 10             	add    esp,0x10
c001009a:	85 c0                	test   eax,eax
c001009c:	75 0f                	jne    c00100ad <CPU::detectFeatures()+0x263>
c001009e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00100a8:	e9 58 01 00 00       	jmp    c0010205 <CPU::detectFeatures()+0x3bb>
c00100ad:	51                   	push   ecx
c00100ae:	51                   	push   ecx
c00100af:	68 66 0f 02 c0       	push   0xc0020f66
c00100b4:	55                   	push   ebp
c00100b5:	e8 86 07 ff ff       	call   c0000840 <strcmp>
c00100ba:	83 c4 10             	add    esp,0x10
c00100bd:	85 c0                	test   eax,eax
c00100bf:	75 0f                	jne    c00100d0 <CPU::detectFeatures()+0x286>
c00100c1:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00100cb:	e9 35 01 00 00       	jmp    c0010205 <CPU::detectFeatures()+0x3bb>
c00100d0:	52                   	push   edx
c00100d1:	52                   	push   edx
c00100d2:	68 b4 0f 02 c0       	push   0xc0020fb4
c00100d7:	55                   	push   ebp
c00100d8:	e8 63 07 ff ff       	call   c0000840 <strcmp>
c00100dd:	83 c4 10             	add    esp,0x10
c00100e0:	85 c0                	test   eax,eax
c00100e2:	75 0f                	jne    c00100f3 <CPU::detectFeatures()+0x2a9>
c00100e4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00100ee:	e9 12 01 00 00       	jmp    c0010205 <CPU::detectFeatures()+0x3bb>
c00100f3:	50                   	push   eax
c00100f4:	50                   	push   eax
c00100f5:	68 c1 0f 02 c0       	push   0xc0020fc1
c00100fa:	55                   	push   ebp
c00100fb:	e8 40 07 ff ff       	call   c0000840 <strcmp>
c0010100:	83 c4 10             	add    esp,0x10
c0010103:	85 c0                	test   eax,eax
c0010105:	75 0f                	jne    c0010116 <CPU::detectFeatures()+0x2cc>
c0010107:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010111:	e9 ef 00 00 00       	jmp    c0010205 <CPU::detectFeatures()+0x3bb>
c0010116:	50                   	push   eax
c0010117:	50                   	push   eax
c0010118:	68 ce 0f 02 c0       	push   0xc0020fce
c001011d:	55                   	push   ebp
c001011e:	e8 1d 07 ff ff       	call   c0000840 <strcmp>
c0010123:	83 c4 10             	add    esp,0x10
c0010126:	85 c0                	test   eax,eax
c0010128:	75 0f                	jne    c0010139 <CPU::detectFeatures()+0x2ef>
c001012a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010134:	e9 cc 00 00 00       	jmp    c0010205 <CPU::detectFeatures()+0x3bb>
c0010139:	50                   	push   eax
c001013a:	50                   	push   eax
c001013b:	68 db 0f 02 c0       	push   0xc0020fdb
c0010140:	55                   	push   ebp
c0010141:	e8 fa 06 ff ff       	call   c0000840 <strcmp>
c0010146:	83 c4 10             	add    esp,0x10
c0010149:	85 c0                	test   eax,eax
c001014b:	75 0f                	jne    c001015c <CPU::detectFeatures()+0x312>
c001014d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010157:	e9 a9 00 00 00       	jmp    c0010205 <CPU::detectFeatures()+0x3bb>
c001015c:	50                   	push   eax
c001015d:	50                   	push   eax
c001015e:	68 e8 0f 02 c0       	push   0xc0020fe8
c0010163:	55                   	push   ebp
c0010164:	e8 d7 06 ff ff       	call   c0000840 <strcmp>
c0010169:	83 c4 10             	add    esp,0x10
c001016c:	85 c0                	test   eax,eax
c001016e:	75 0f                	jne    c001017f <CPU::detectFeatures()+0x335>
c0010170:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001017a:	e9 86 00 00 00       	jmp    c0010205 <CPU::detectFeatures()+0x3bb>
c001017f:	50                   	push   eax
c0010180:	50                   	push   eax
c0010181:	68 f5 0f 02 c0       	push   0xc0020ff5
c0010186:	55                   	push   ebp
c0010187:	e8 b4 06 ff ff       	call   c0000840 <strcmp>
c001018c:	83 c4 10             	add    esp,0x10
c001018f:	85 c0                	test   eax,eax
c0010191:	75 0c                	jne    c001019f <CPU::detectFeatures()+0x355>
c0010193:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001019d:	eb 66                	jmp    c0010205 <CPU::detectFeatures()+0x3bb>
c001019f:	50                   	push   eax
c00101a0:	50                   	push   eax
c00101a1:	68 02 10 02 c0       	push   0xc0021002
c00101a6:	55                   	push   ebp
c00101a7:	e8 94 06 ff ff       	call   c0000840 <strcmp>
c00101ac:	83 c4 10             	add    esp,0x10
c00101af:	85 c0                	test   eax,eax
c00101b1:	75 0c                	jne    c00101bf <CPU::detectFeatures()+0x375>
c00101b3:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00101bd:	eb 46                	jmp    c0010205 <CPU::detectFeatures()+0x3bb>
c00101bf:	57                   	push   edi
c00101c0:	57                   	push   edi
c00101c1:	68 0f 10 02 c0       	push   0xc002100f
c00101c6:	55                   	push   ebp
c00101c7:	e8 74 06 ff ff       	call   c0000840 <strcmp>
c00101cc:	83 c4 10             	add    esp,0x10
c00101cf:	85 c0                	test   eax,eax
c00101d1:	74 e0                	je     c00101b3 <CPU::detectFeatures()+0x369>
c00101d3:	56                   	push   esi
c00101d4:	56                   	push   esi
c00101d5:	68 1c 10 02 c0       	push   0xc002101c
c00101da:	55                   	push   ebp
c00101db:	e8 60 06 ff ff       	call   c0000840 <strcmp>
c00101e0:	83 c4 10             	add    esp,0x10
c00101e3:	85 c0                	test   eax,eax
c00101e5:	74 cc                	je     c00101b3 <CPU::detectFeatures()+0x369>
c00101e7:	51                   	push   ecx
c00101e8:	51                   	push   ecx
c00101e9:	68 29 10 02 c0       	push   0xc0021029
c00101ee:	55                   	push   ebp
c00101ef:	e8 4c 06 ff ff       	call   c0000840 <strcmp>
c00101f4:	83 c4 10             	add    esp,0x10
c00101f7:	85 c0                	test   eax,eax
c00101f9:	74 b8                	je     c00101b3 <CPU::detectFeatures()+0x369>
c00101fb:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010205:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001020a:	0f 86 ac 00 00 00    	jbe    c00102bc <CPU::detectFeatures()+0x472>
c0010210:	83 ec 0c             	sub    esp,0xc
c0010213:	68 80 00 00 00       	push   0x80
c0010218:	e8 4d fb ff ff       	call   c000fd6a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001021d:	8a 93 8c 11 00 00    	mov    dl,BYTE PTR [ebx+0x118c]
c0010223:	80 e2 bf             	and    dl,0xbf
c0010226:	24 01                	and    al,0x1
c0010228:	c0 e0 06             	shl    al,0x6
c001022b:	08 c2                	or     dl,al
c001022d:	88 93 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],dl
c0010233:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001023a:	e8 2b fb ff ff       	call   c000fd6a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001023f:	8a 93 8d 11 00 00    	mov    dl,BYTE PTR [ebx+0x118d]
c0010245:	80 e2 ef             	and    dl,0xef
c0010248:	24 01                	and    al,0x1
c001024a:	c0 e0 04             	shl    al,0x4
c001024d:	08 c2                	or     dl,al
c001024f:	88 93 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],dl
c0010255:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001025c:	e8 09 fb ff ff       	call   c000fd6a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010261:	8a 93 8c 11 00 00    	mov    dl,BYTE PTR [ebx+0x118c]
c0010267:	80 e2 7f             	and    dl,0x7f
c001026a:	c0 e0 07             	shl    al,0x7
c001026d:	08 d0                	or     al,dl
c001026f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010275:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001027c:	e8 17 fb ff ff       	call   c000fd98 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010281:	8a 93 8d 11 00 00    	mov    dl,BYTE PTR [ebx+0x118d]
c0010287:	80 e2 f7             	and    dl,0xf7
c001028a:	24 01                	and    al,0x1
c001028c:	c0 e0 03             	shl    al,0x3
c001028f:	08 c2                	or     dl,al
c0010291:	88 93 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],dl
c0010297:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001029e:	e8 f5 fa ff ff       	call   c000fd98 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00102a3:	8a 93 8e 11 00 00    	mov    dl,BYTE PTR [ebx+0x118e]
c00102a9:	83 c4 10             	add    esp,0x10
c00102ac:	80 e2 fb             	and    dl,0xfb
c00102af:	24 01                	and    al,0x1
c00102b1:	c0 e0 02             	shl    al,0x2
c00102b4:	08 c2                	or     dl,al
c00102b6:	88 93 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],dl
c00102bc:	83 ec 0c             	sub    esp,0xc
c00102bf:	8d 44 24 28          	lea    eax,[esp+0x28]
c00102c3:	50                   	push   eax
c00102c4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00102c8:	50                   	push   eax
c00102c9:	8d 74 24 28          	lea    esi,[esp+0x28]
c00102cd:	56                   	push   esi
c00102ce:	8d 44 24 28          	lea    eax,[esp+0x28]
c00102d2:	50                   	push   eax
c00102d3:	6a 01                	push   0x1
c00102d5:	e8 b0 f9 ff ff       	call   c000fc8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00102da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102de:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00102e4:	88 c1                	mov    cl,al
c00102e6:	80 e1 0f             	and    cl,0xf
c00102e9:	80 e2 f0             	and    dl,0xf0
c00102ec:	08 ca                	or     dl,cl
c00102ee:	88 c1                	mov    cl,al
c00102f0:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00102f6:	c0 e9 04             	shr    cl,0x4
c00102f9:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c00102fd:	0f b6 d1             	movzx  edx,cl
c0010300:	89 d1                	mov    ecx,edx
c0010302:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010308:	c1 e1 06             	shl    ecx,0x6
c001030b:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010311:	09 ca                	or     edx,ecx
c0010313:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001031a:	89 c2                	mov    edx,eax
c001031c:	c1 ea 08             	shr    edx,0x8
c001031f:	88 d1                	mov    cl,dl
c0010321:	c0 e2 06             	shl    dl,0x6
c0010324:	80 e1 0f             	and    cl,0xf
c0010327:	88 4c 24 2e          	mov    BYTE PTR [esp+0x2e],cl
c001032b:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010331:	80 e1 3f             	and    cl,0x3f
c0010334:	08 ca                	or     dl,cl
c0010336:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001033c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010342:	8a 4c 24 2e          	mov    cl,BYTE PTR [esp+0x2e]
c0010346:	83 c4 20             	add    esp,0x20
c0010349:	80 e2 c0             	and    dl,0xc0
c001034c:	c0 e9 02             	shr    cl,0x2
c001034f:	08 ca                	or     dl,cl
c0010351:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010357:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001035d:	89 c2                	mov    edx,eax
c001035f:	c1 ea 0c             	shr    edx,0xc
c0010362:	80 e2 03             	and    dl,0x3
c0010365:	c0 e2 04             	shl    dl,0x4
c0010368:	80 e1 cf             	and    cl,0xcf
c001036b:	08 ca                	or     dl,cl
c001036d:	80 7c 24 0e 06       	cmp    BYTE PTR [esp+0xe],0x6
c0010372:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010378:	74 07                	je     c0010381 <CPU::detectFeatures()+0x537>
c001037a:	80 7c 24 0e 0f       	cmp    BYTE PTR [esp+0xe],0xf
c001037f:	75 5f                	jne    c00103e0 <CPU::detectFeatures()+0x596>
c0010381:	89 c2                	mov    edx,eax
c0010383:	c1 ea 10             	shr    edx,0x10
c0010386:	c0 e2 04             	shl    dl,0x4
c0010389:	0a 54 24 0f          	or     dl,BYTE PTR [esp+0xf]
c001038d:	0f b6 d2             	movzx  edx,dl
c0010390:	89 d7                	mov    edi,edx
c0010392:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010398:	c1 e7 06             	shl    edi,0x6
c001039b:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c00103a1:	09 fa                	or     edx,edi
c00103a3:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00103aa:	80 7c 24 0e 0f       	cmp    BYTE PTR [esp+0xe],0xf
c00103af:	75 2f                	jne    c00103e0 <CPU::detectFeatures()+0x596>
c00103b1:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00103b7:	c1 e8 14             	shr    eax,0x14
c00103ba:	04 0f                	add    al,0xf
c00103bc:	88 c1                	mov    cl,al
c00103be:	c0 e1 06             	shl    cl,0x6
c00103c1:	c0 e8 02             	shr    al,0x2
c00103c4:	80 e2 3f             	and    dl,0x3f
c00103c7:	08 ca                	or     dl,cl
c00103c9:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00103cf:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00103d5:	80 e2 c0             	and    dl,0xc0
c00103d8:	08 d0                	or     al,dl
c00103da:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00103e0:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c00103e7:	83 ec 0c             	sub    esp,0xc
c00103ea:	8d 44 24 28          	lea    eax,[esp+0x28]
c00103ee:	50                   	push   eax
c00103ef:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00103f3:	55                   	push   ebp
c00103f4:	56                   	push   esi
c00103f5:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00103f9:	57                   	push   edi
c00103fa:	68 00 00 00 80       	push   0x80000000
c00103ff:	e8 86 f8 ff ff       	call   c000fc8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010404:	83 c4 20             	add    esp,0x20
c0010407:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001040f:	76 22                	jbe    c0010433 <CPU::detectFeatures()+0x5e9>
c0010411:	83 ec 0c             	sub    esp,0xc
c0010414:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010418:	50                   	push   eax
c0010419:	55                   	push   ebp
c001041a:	56                   	push   esi
c001041b:	57                   	push   edi
c001041c:	68 01 00 00 80       	push   0x80000001
c0010421:	e8 64 f8 ff ff       	call   c000fc8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010426:	83 c4 20             	add    esp,0x20
c0010429:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010433:	52                   	push   edx
c0010434:	52                   	push   edx
c0010435:	68 35 10 02 c0       	push   0xc0021035
c001043a:	53                   	push   ebx
c001043b:	e8 34 c2 ff ff       	call   c000c674 <Device::setName(char const*)>
c0010440:	83 c4 10             	add    esp,0x10
c0010443:	eb 64                	jmp    c00104a9 <CPU::detectFeatures()+0x65f>
c0010445:	50                   	push   eax
c0010446:	50                   	push   eax
c0010447:	68 9a 0f 02 c0       	push   0xc0020f9a
c001044c:	55                   	push   ebp
c001044d:	e8 ce 02 ff ff       	call   c0000720 <strcpy>
c0010452:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001045c:	e8 62 fd fe ff       	call   c00001c3 <is486>
c0010461:	83 c4 10             	add    esp,0x10
c0010464:	85 c0                	test   eax,eax
c0010466:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001046c:	74 1c                	je     c001048a <CPU::detectFeatures()+0x640>
c001046e:	0c 07                	or     al,0x7
c0010470:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010476:	0f 20 c0             	mov    eax,cr0
c0010479:	83 e0 14             	and    eax,0x14
c001047c:	83 f8 04             	cmp    eax,0x4
c001047f:	75 0d                	jne    c001048e <CPU::detectFeatures()+0x644>
c0010481:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c0010488:	eb 1f                	jmp    c00104a9 <CPU::detectFeatures()+0x65f>
c001048a:	24 f8                	and    al,0xf8
c001048c:	eb e2                	jmp    c0010470 <CPU::detectFeatures()+0x626>
c001048e:	e8 0b fd fe ff       	call   c000019e <hasLegacyFPU>
c0010493:	24 01                	and    al,0x1
c0010495:	00 c0                	add    al,al
c0010497:	88 c2                	mov    dl,al
c0010499:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001049f:	24 fd                	and    al,0xfd
c00104a1:	08 d0                	or     al,dl
c00104a3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00104a9:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00104b0:	74 0e                	je     c00104c0 <CPU::detectFeatures()+0x676>
c00104b2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00104b7:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c00104be:	eb 1f                	jmp    c00104df <CPU::detectFeatures()+0x695>
c00104c0:	e8 d9 fc fe ff       	call   c000019e <hasLegacyFPU>
c00104c5:	24 01                	and    al,0x1
c00104c7:	00 c0                	add    al,al
c00104c9:	88 c2                	mov    dl,al
c00104cb:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00104d1:	24 fd                	and    al,0xfd
c00104d3:	08 d0                	or     al,dl
c00104d5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00104db:	24 02                	and    al,0x2
c00104dd:	75 d3                	jne    c00104b2 <CPU::detectFeatures()+0x668>
c00104df:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c00104e6:	83 c4 2c             	add    esp,0x2c
c00104e9:	5b                   	pop    ebx
c00104ea:	5e                   	pop    esi
c00104eb:	5f                   	pop    edi
c00104ec:	5d                   	pop    ebp
c00104ed:	c3                   	ret    

c00104ee <CPU::setupSMEP()>:
c00104ee:	0f 20 e0             	mov    eax,cr4
c00104f1:	0d 00 00 10 00       	or     eax,0x100000
c00104f6:	0f 22 e0             	mov    cr4,eax
c00104f9:	c3                   	ret    

c00104fa <CPU::setupUMIP()>:
c00104fa:	0f 20 e0             	mov    eax,cr4
c00104fd:	80 cc 08             	or     ah,0x8
c0010500:	0f 22 e0             	mov    cr4,eax
c0010503:	c3                   	ret    

c0010504 <CPU::setupTSC()>:
c0010504:	0f 20 e0             	mov    eax,cr4
c0010507:	83 c8 04             	or     eax,0x4
c001050a:	0f 22 e0             	mov    cr4,eax
c001050d:	c3                   	ret    

c001050e <CPU::setupLargePages()>:
c001050e:	0f 20 e0             	mov    eax,cr4
c0010511:	83 c8 10             	or     eax,0x10
c0010514:	0f 22 e0             	mov    cr4,eax
c0010517:	c3                   	ret    

c0010518 <CPU::setupPAT()>:
c0010518:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001051d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010524:	74 39                	je     c001055f <CPU::setupPAT()+0x47>
c0010526:	57                   	push   edi
c0010527:	56                   	push   esi
c0010528:	53                   	push   ebx
c0010529:	31 db                	xor    ebx,ebx
c001052b:	52                   	push   edx
c001052c:	52                   	push   edx
c001052d:	68 77 02 00 00       	push   0x277
c0010532:	50                   	push   eax
c0010533:	e8 88 6b ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0010538:	83 e2 f8             	and    edx,0xfffffff8
c001053b:	89 c1                	mov    ecx,eax
c001053d:	83 ca 01             	or     edx,0x1
c0010540:	31 c0                	xor    eax,eax
c0010542:	09 da                	or     edx,ebx
c0010544:	09 c8                	or     eax,ecx
c0010546:	52                   	push   edx
c0010547:	50                   	push   eax
c0010548:	68 77 02 00 00       	push   0x277
c001054d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010553:	e8 90 6b ff ff       	call   c00070e8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0010558:	83 c4 20             	add    esp,0x20
c001055b:	5b                   	pop    ebx
c001055c:	5e                   	pop    esi
c001055d:	5f                   	pop    edi
c001055e:	c3                   	ret    
c001055f:	c3                   	ret    

c0010560 <CPU::setupMTRR()>:
c0010560:	c3                   	ret    
c0010561:	90                   	nop

c0010562 <CPU::setupGlobalPages()>:
c0010562:	0f 20 e0             	mov    eax,cr4
c0010565:	0c 80                	or     al,0x80
c0010567:	0f 22 e0             	mov    cr4,eax
c001056a:	c3                   	ret    
c001056b:	90                   	nop

c001056c <CPU::allowUsermodeDataAccess()>:
c001056c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010570:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010577:	74 03                	je     c001057c <CPU::allowUsermodeDataAccess()+0x10>
c0010579:	0f 01 cb             	stac   
c001057c:	c3                   	ret    
c001057d:	90                   	nop

c001057e <CPU::prohibitUsermodeDataAccess()>:
c001057e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010582:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010589:	74 03                	je     c001058e <CPU::prohibitUsermodeDataAccess()+0x10>
c001058b:	0f 01 ca             	clac   
c001058e:	c3                   	ret    
c001058f:	90                   	nop

c0010590 <CPU::setupSMAP()>:
c0010590:	0f 20 e0             	mov    eax,cr4
c0010593:	0d 00 00 20 00       	or     eax,0x200000
c0010598:	0f 22 e0             	mov    cr4,eax
c001059b:	eb e1                	jmp    c001057e <CPU::prohibitUsermodeDataAccess()>
c001059d:	90                   	nop

c001059e <CPU::setupFeatures()>:
c001059e:	53                   	push   ebx
c001059f:	83 ec 08             	sub    esp,0x8
c00105a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105a6:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00105ad:	74 18                	je     c00105c7 <CPU::setupFeatures()+0x29>
c00105af:	83 ec 0c             	sub    esp,0xc
c00105b2:	68 41 10 02 c0       	push   0xc0021041
c00105b7:	e8 ba a4 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00105bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00105bf:	e8 36 ff ff ff       	call   c00104fa <CPU::setupUMIP()>
c00105c4:	83 c4 10             	add    esp,0x10
c00105c7:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00105ce:	74 18                	je     c00105e8 <CPU::setupFeatures()+0x4a>
c00105d0:	83 ec 0c             	sub    esp,0xc
c00105d3:	68 4b 10 02 c0       	push   0xc002104b
c00105d8:	e8 99 a4 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00105dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00105e0:	e8 1f ff ff ff       	call   c0010504 <CPU::setupTSC()>
c00105e5:	83 c4 10             	add    esp,0x10
c00105e8:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c00105ef:	74 18                	je     c0010609 <CPU::setupFeatures()+0x6b>
c00105f1:	83 ec 0c             	sub    esp,0xc
c00105f4:	68 54 10 02 c0       	push   0xc0021054
c00105f9:	e8 78 a4 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00105fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010601:	e8 08 ff ff ff       	call   c001050e <CPU::setupLargePages()>
c0010606:	83 c4 10             	add    esp,0x10
c0010609:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010610:	74 18                	je     c001062a <CPU::setupFeatures()+0x8c>
c0010612:	83 ec 0c             	sub    esp,0xc
c0010615:	68 5d 10 02 c0       	push   0xc002105d
c001061a:	e8 57 a4 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001061f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010622:	e8 3b ff ff ff       	call   c0010562 <CPU::setupGlobalPages()>
c0010627:	83 c4 10             	add    esp,0x10
c001062a:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010631:	74 18                	je     c001064b <CPU::setupFeatures()+0xad>
c0010633:	83 ec 0c             	sub    esp,0xc
c0010636:	68 6f 10 02 c0       	push   0xc002106f
c001063b:	e8 36 a4 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0010640:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010643:	e8 d0 fe ff ff       	call   c0010518 <CPU::setupPAT()>
c0010648:	83 c4 10             	add    esp,0x10
c001064b:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010652:	74 11                	je     c0010665 <CPU::setupFeatures()+0xc7>
c0010654:	c7 44 24 10 78 10 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021078
c001065c:	83 c4 08             	add    esp,0x8
c001065f:	5b                   	pop    ebx
c0010660:	e9 11 a4 ff ff       	jmp    c000aa76 <Dbg::kprintf(char const*, ...)>
c0010665:	83 c4 08             	add    esp,0x8
c0010668:	5b                   	pop    ebx
c0010669:	c3                   	ret    

c001066a <CPU::open(int, int, void*)>:
c001066a:	57                   	push   edi
c001066b:	56                   	push   esi
c001066c:	53                   	push   ebx
c001066d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010671:	83 ec 0c             	sub    esp,0xc
c0010674:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010678:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001067e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0010684:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001068a:	50                   	push   eax
c001068b:	e8 6e 6d ff ff       	call   c00073fe <GDT::setup()>
c0010690:	83 c4 0c             	add    esp,0xc
c0010693:	6a 00                	push   0x0
c0010695:	68 ef be ad de       	push   0xdeadbeef
c001069a:	57                   	push   edi
c001069b:	e8 20 89 ff ff       	call   c0008fc0 <TSS::setup(unsigned long, unsigned long)>
c00106a0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00106a3:	e8 f4 88 ff ff       	call   c0008f9c <TSS::flush()>
c00106a8:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00106ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00106b1:	e8 96 6f ff ff       	call   c000764c <IDT::setup()>
c00106b6:	b8 00 04 00 00       	mov    eax,0x400
c00106bb:	0f 23 f8             	mov    db7,eax
c00106be:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00106c8:	e8 3f 77 ff ff       	call   c0007e0c <Phys::allocatePage()>
c00106cd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00106d3:	89 30                	mov    DWORD PTR [eax],esi
c00106d5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00106db:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00106de:	58                   	pop    eax
c00106df:	5a                   	pop    edx
c00106e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00106e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00106ea:	e8 65 99 ff ff       	call   c000a054 <VAS::setCPUSpecific(unsigned long)>
c00106ef:	c7 04 24 82 10 02 c0 	mov    DWORD PTR [esp],0xc0021082
c00106f6:	e8 c6 00 00 00       	call   c00107c1 <KeSetBootMessage(char const*)>
c00106fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106fe:	e8 47 f7 ff ff       	call   c000fe4a <CPU::detectFeatures()>
c0010703:	c7 04 24 a5 10 02 c0 	mov    DWORD PTR [esp],0xc00210a5
c001070a:	e8 b2 00 00 00       	call   c00107c1 <KeSetBootMessage(char const*)>
c001070f:	e8 dd 6e 00 00       	call   c00175f1 <HalInitialise()>
c0010714:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c0010719:	83 e0 10             	and    eax,0x10
c001071c:	83 f8 01             	cmp    eax,0x1
c001071f:	19 c0                	sbb    eax,eax
c0010721:	83 e0 46             	and    eax,0x46
c0010724:	83 c0 1e             	add    eax,0x1e
c0010727:	89 04 24             	mov    DWORD PTR [esp],eax
c001072a:	e8 30 d7 ff ff       	call   c000de5f <setupTimer(int)>
c001072f:	83 c4 10             	add    esp,0x10
c0010732:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c0010739:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001073f:	74 0c                	je     c001074d <CPU::open(int, int, void*)+0xe3>
c0010741:	83 ec 0c             	sub    esp,0xc
c0010744:	53                   	push   ebx
c0010745:	e8 54 fe ff ff       	call   c001059e <CPU::setupFeatures()>
c001074a:	83 c4 10             	add    esp,0x10
c001074d:	5b                   	pop    ebx
c001074e:	31 c0                	xor    eax,eax
c0010750:	5e                   	pop    esi
c0010751:	5f                   	pop    edi
c0010752:	c3                   	ret    

c0010753 <KeDisplaySplashScreen()>:
c0010753:	55                   	push   ebp
c0010754:	bd 05 00 00 00       	mov    ebp,0x5
c0010759:	57                   	push   edi
c001075a:	bf 40 24 02 c0       	mov    edi,0xc0022440
c001075f:	56                   	push   esi
c0010760:	be 0a 00 00 00       	mov    esi,0xa
c0010765:	53                   	push   ebx
c0010766:	31 db                	xor    ebx,ebx
c0010768:	83 ec 0c             	sub    esp,0xc
c001076b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001076e:	84 c0                	test   al,al
c0010770:	74 47                	je     c00107b9 <KeDisplaySplashScreen()+0x66>
c0010772:	80 bb 76 24 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffddb8a],0xdb
c0010779:	75 13                	jne    c001078e <KeDisplaySplashScreen()+0x3b>
c001077b:	0f b6 93 75 24 02 c0 	movzx  edx,BYTE PTR [ebx-0x3ffddb8b]
c0010782:	83 e2 fe             	and    edx,0xfffffffe
c0010785:	81 fa ba 00 00 00    	cmp    edx,0xba
c001078b:	75 01                	jne    c001078e <KeDisplaySplashScreen()+0x3b>
c001078d:	46                   	inc    esi
c001078e:	3c 0d                	cmp    al,0xd
c0010790:	74 24                	je     c00107b6 <KeDisplaySplashScreen()+0x63>
c0010792:	3c 0a                	cmp    al,0xa
c0010794:	75 0a                	jne    c00107a0 <KeDisplaySplashScreen()+0x4d>
c0010796:	45                   	inc    ebp
c0010797:	be 0a 00 00 00       	mov    esi,0xa
c001079c:	31 db                	xor    ebx,ebx
c001079e:	eb 16                	jmp    c00107b6 <KeDisplaySplashScreen()+0x63>
c00107a0:	8d 14 33             	lea    edx,[ebx+esi*1]
c00107a3:	83 ec 0c             	sub    esp,0xc
c00107a6:	55                   	push   ebp
c00107a7:	43                   	inc    ebx
c00107a8:	52                   	push   edx
c00107a9:	6a 00                	push   0x0
c00107ab:	6a 0e                	push   0xe
c00107ad:	50                   	push   eax
c00107ae:	e8 e1 7a 00 00       	call   c0018294 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00107b3:	83 c4 20             	add    esp,0x20
c00107b6:	47                   	inc    edi
c00107b7:	eb b2                	jmp    c001076b <KeDisplaySplashScreen()+0x18>
c00107b9:	83 c4 0c             	add    esp,0xc
c00107bc:	5b                   	pop    ebx
c00107bd:	5e                   	pop    esi
c00107be:	5f                   	pop    edi
c00107bf:	5d                   	pop    ebp
c00107c0:	c3                   	ret    

c00107c1 <KeSetBootMessage(char const*)>:
c00107c1:	57                   	push   edi
c00107c2:	56                   	push   esi
c00107c3:	53                   	push   ebx
c00107c4:	81 ec a4 00 00 00    	sub    esp,0xa4
c00107ca:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00107d1:	68 9e 00 00 00       	push   0x9e
c00107d6:	6a 00                	push   0x0
c00107d8:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00107dc:	56                   	push   esi
c00107dd:	e8 9e fd fe ff       	call   c0000580 <memset>
c00107e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107e5:	e8 36 fe fe ff       	call   c0000620 <strlen>
c00107ea:	ba 50 00 00 00       	mov    edx,0x50
c00107ef:	83 c4 10             	add    esp,0x10
c00107f2:	31 c9                	xor    ecx,ecx
c00107f4:	29 c2                	sub    edx,eax
c00107f6:	83 e2 fe             	and    edx,0xfffffffe
c00107f9:	01 f2                	add    edx,esi
c00107fb:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010800:	84 c0                	test   al,al
c0010802:	74 0a                	je     c001080e <KeSetBootMessage(char const*)+0x4d>
c0010804:	80 cc 0f             	or     ah,0xf
c0010807:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001080b:	41                   	inc    ecx
c001080c:	eb ed                	jmp    c00107fb <KeSetBootMessage(char const*)+0x3a>
c001080e:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010813:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010818:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001081a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010820:	5b                   	pop    ebx
c0010821:	5e                   	pop    esi
c0010822:	5f                   	pop    edi
c0010823:	c3                   	ret    

c0010824 <EnvVarContainer::getEnv(char const*)>:
c0010824:	57                   	push   edi
c0010825:	56                   	push   esi
c0010826:	53                   	push   ebx
c0010827:	31 db                	xor    ebx,ebx
c0010829:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001082d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001082f:	7e 2b                	jle    c001085c <EnvVarContainer::getEnv(char const*)+0x38>
c0010831:	50                   	push   eax
c0010832:	50                   	push   eax
c0010833:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010836:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001083d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010840:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010844:	e8 f7 ff fe ff       	call   c0000840 <strcmp>
c0010849:	83 c4 10             	add    esp,0x10
c001084c:	85 c0                	test   eax,eax
c001084e:	75 09                	jne    c0010859 <EnvVarContainer::getEnv(char const*)+0x35>
c0010850:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010853:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010857:	eb 05                	jmp    c001085e <EnvVarContainer::getEnv(char const*)+0x3a>
c0010859:	43                   	inc    ebx
c001085a:	eb d1                	jmp    c001082d <EnvVarContainer::getEnv(char const*)+0x9>
c001085c:	31 c0                	xor    eax,eax
c001085e:	5b                   	pop    ebx
c001085f:	5e                   	pop    esi
c0010860:	5f                   	pop    edi
c0010861:	c3                   	ret    

c0010862 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010862:	55                   	push   ebp
c0010863:	57                   	push   edi
c0010864:	56                   	push   esi
c0010865:	53                   	push   ebx
c0010866:	83 ec 28             	sub    esp,0x28
c0010869:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001086d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010871:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010875:	56                   	push   esi
c0010876:	e8 a5 fd fe ff       	call   c0000620 <strlen>
c001087b:	40                   	inc    eax
c001087c:	89 04 24             	mov    DWORD PTR [esp],eax
c001087f:	e8 78 72 ff ff       	call   c0007afc <malloc>
c0010884:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010887:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001088b:	e8 90 fd fe ff       	call   c0000620 <strlen>
c0010890:	40                   	inc    eax
c0010891:	89 04 24             	mov    DWORD PTR [esp],eax
c0010894:	e8 63 72 ff ff       	call   c0007afc <malloc>
c0010899:	89 34 24             	mov    DWORD PTR [esp],esi
c001089c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00108a0:	e8 7b fd fe ff       	call   c0000620 <strlen>
c00108a5:	83 c4 0c             	add    esp,0xc
c00108a8:	40                   	inc    eax
c00108a9:	50                   	push   eax
c00108aa:	6a 00                	push   0x0
c00108ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00108b0:	e8 cb fc fe ff       	call   c0000580 <memset>
c00108b5:	89 34 24             	mov    DWORD PTR [esp],esi
c00108b8:	e8 63 fd fe ff       	call   c0000620 <strlen>
c00108bd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00108c1:	8d 48 01             	lea    ecx,[eax+0x1]
c00108c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00108c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108c9:	89 de                	mov    esi,ebx
c00108cb:	e8 50 fd fe ff       	call   c0000620 <strlen>
c00108d0:	83 c4 0c             	add    esp,0xc
c00108d3:	40                   	inc    eax
c00108d4:	50                   	push   eax
c00108d5:	6a 00                	push   0x0
c00108d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108db:	e8 a0 fc fe ff       	call   c0000580 <memset>
c00108e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108e3:	e8 38 fd fe ff       	call   c0000620 <strlen>
c00108e8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00108ec:	8d 48 01             	lea    ecx,[eax+0x1]
c00108ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00108f1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00108f4:	40                   	inc    eax
c00108f5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00108f8:	c1 e0 03             	shl    eax,0x3
c00108fb:	5a                   	pop    edx
c00108fc:	59                   	pop    ecx
c00108fd:	50                   	push   eax
c00108fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010901:	e8 db 71 ff ff       	call   c0007ae1 <realloc>
c0010906:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010909:	8d 74 24 18          	lea    esi,[esp+0x18]
c001090d:	b9 08 00 00 00       	mov    ecx,0x8
c0010912:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010915:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010919:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001091b:	83 c4 2c             	add    esp,0x2c
c001091e:	5b                   	pop    ebx
c001091f:	5e                   	pop    esi
c0010920:	5f                   	pop    edi
c0010921:	5d                   	pop    ebp
c0010922:	c3                   	ret    
c0010923:	90                   	nop

c0010924 <EnvVarContainer::deleteEnv(char const*)>:
c0010924:	c3                   	ret    
c0010925:	90                   	nop

c0010926 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010926:	55                   	push   ebp
c0010927:	57                   	push   edi
c0010928:	56                   	push   esi
c0010929:	53                   	push   ebx
c001092a:	81 ec 38 01 00 00    	sub    esp,0x138
c0010930:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010937:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001093e:	68 14 01 00 00       	push   0x114
c0010943:	e8 b4 71 ff ff       	call   c0007afc <malloc>
c0010948:	83 c4 0c             	add    esp,0xc
c001094b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001094e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010955:	89 c3                	mov    ebx,eax
c0010957:	50                   	push   eax
c0010958:	e8 9b a6 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c001095d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010960:	e8 b9 a9 ff ff       	call   c000b31e <File::exists()>
c0010965:	83 c4 10             	add    esp,0x10
c0010968:	84 c0                	test   al,al
c001096a:	75 31                	jne    c001099d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001096c:	50                   	push   eax
c001096d:	50                   	push   eax
c001096e:	6a 12                	push   0x12
c0010970:	53                   	push   ebx
c0010971:	e8 40 a7 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0010976:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010978:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001097b:	89 34 24             	mov    DWORD PTR [esp],esi
c001097e:	e8 9d fc fe ff       	call   c0000620 <strlen>
c0010983:	5a                   	pop    edx
c0010984:	31 d2                	xor    edx,edx
c0010986:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001098a:	51                   	push   ecx
c001098b:	56                   	push   esi
c001098c:	52                   	push   edx
c001098d:	50                   	push   eax
c001098e:	53                   	push   ebx
c001098f:	ff d7                	call   edi
c0010991:	83 c4 14             	add    esp,0x14
c0010994:	53                   	push   ebx
c0010995:	e8 7a a7 ff ff       	call   c000b114 <File::close()>
c001099a:	83 c4 10             	add    esp,0x10
c001099d:	56                   	push   esi
c001099e:	31 f6                	xor    esi,esi
c00109a0:	68 00 01 00 00       	push   0x100
c00109a5:	6a 00                	push   0x0
c00109a7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00109ab:	50                   	push   eax
c00109ac:	e8 cf fb fe ff       	call   c0000580 <memset>
c00109b1:	5f                   	pop    edi
c00109b2:	58                   	pop    eax
c00109b3:	6a 01                	push   0x1
c00109b5:	53                   	push   ebx
c00109b6:	e8 fb a6 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c00109bb:	83 c4 10             	add    esp,0x10
c00109be:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00109c6:	83 ec 0c             	sub    esp,0xc
c00109c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00109cb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00109cf:	51                   	push   ecx
c00109d0:	8d 54 24 23          	lea    edx,[esp+0x23]
c00109d4:	52                   	push   edx
c00109d5:	6a 00                	push   0x0
c00109d7:	6a 01                	push   0x1
c00109d9:	53                   	push   ebx
c00109da:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00109dd:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00109e1:	83 c4 20             	add    esp,0x20
c00109e4:	3c 0d                	cmp    al,0xd
c00109e6:	0f 84 09 01 00 00    	je     c0010af5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00109ec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00109f1:	0f 84 ef 00 00 00    	je     c0010ae6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00109f7:	3c 0a                	cmp    al,0xa
c00109f9:	74 13                	je     c0010a0e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00109fb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010a00:	74 0c                	je     c0010a0e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0010a02:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010a08:	0f 8e d8 00 00 00    	jle    c0010ae6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0010a0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a12:	83 ec 0c             	sub    esp,0xc
c0010a15:	8d 78 01             	lea    edi,[eax+0x1]
c0010a18:	57                   	push   edi
c0010a19:	e8 de 70 ff ff       	call   c0007afc <malloc>
c0010a1e:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010a22:	8d 56 04             	lea    edx,[esi+0x4]
c0010a25:	89 14 24             	mov    DWORD PTR [esp],edx
c0010a28:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010a2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010a30:	e8 c7 70 ff ff       	call   c0007afc <malloc>
c0010a35:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010a39:	83 c4 0c             	add    esp,0xc
c0010a3c:	57                   	push   edi
c0010a3d:	6a 00                	push   0x0
c0010a3f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010a43:	e8 38 fb fe ff       	call   c0000580 <memset>
c0010a48:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010a4c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010a50:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010a54:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010a56:	83 c4 0c             	add    esp,0xc
c0010a59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010a5d:	52                   	push   edx
c0010a5e:	6a 00                	push   0x0
c0010a60:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010a64:	e8 17 fb fe ff       	call   c0000580 <memset>
c0010a69:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010a6d:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010a71:	89 34 24             	mov    DWORD PTR [esp],esi
c0010a74:	e8 a7 fb fe ff       	call   c0000620 <strlen>
c0010a79:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010a7d:	89 c1                	mov    ecx,eax
c0010a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010a81:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010a84:	83 c4 10             	add    esp,0x10
c0010a87:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010a8a:	40                   	inc    eax
c0010a8b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010a8e:	85 d2                	test   edx,edx
c0010a90:	75 0c                	jne    c0010a9e <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0010a92:	83 ec 0c             	sub    esp,0xc
c0010a95:	6a 08                	push   0x8
c0010a97:	e8 60 70 ff ff       	call   c0007afc <malloc>
c0010a9c:	eb 0c                	jmp    c0010aaa <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0010a9e:	51                   	push   ecx
c0010a9f:	51                   	push   ecx
c0010aa0:	c1 e0 03             	shl    eax,0x3
c0010aa3:	50                   	push   eax
c0010aa4:	52                   	push   edx
c0010aa5:	e8 37 70 ff ff       	call   c0007ae1 <realloc>
c0010aaa:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010aad:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010ab0:	83 c4 10             	add    esp,0x10
c0010ab3:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010ab6:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010aba:	b9 08 00 00 00       	mov    ecx,0x8
c0010abf:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010ac3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ac5:	50                   	push   eax
c0010ac6:	31 f6                	xor    esi,esi
c0010ac8:	68 00 01 00 00       	push   0x100
c0010acd:	6a 00                	push   0x0
c0010acf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010ad3:	50                   	push   eax
c0010ad4:	e8 a7 fa fe ff       	call   c0000580 <memset>
c0010ad9:	83 c4 10             	add    esp,0x10
c0010adc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ae4:	eb 0f                	jmp    c0010af5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010ae6:	3c 3d                	cmp    al,0x3d
c0010ae8:	74 07                	je     c0010af1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0010aea:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0010aee:	46                   	inc    esi
c0010aef:	eb 04                	jmp    c0010af5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010af1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010af5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010afa:	0f 85 c6 fe ff ff    	jne    c00109c6 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010b00:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010b06:	5b                   	pop    ebx
c0010b07:	5e                   	pop    esi
c0010b08:	5f                   	pop    edi
c0010b09:	5d                   	pop    ebp
c0010b0a:	c3                   	ret    
c0010b0b:	90                   	nop

c0010b0c <EnvVarContainer::__loadSystem()>:
c0010b0c:	83 ec 10             	sub    esp,0x10
c0010b0f:	68 a0 25 02 c0       	push   0xc00225a0
c0010b14:	68 e8 10 02 c0       	push   0xc00210e8
c0010b19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b1d:	e8 04 fe ff ff       	call   c0010926 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010b22:	83 c4 1c             	add    esp,0x1c
c0010b25:	c3                   	ret    

c0010b26 <EnvVarContainer::__loadUser()>:
c0010b26:	c3                   	ret    
c0010b27:	90                   	nop

c0010b28 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010b28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b3a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010b3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b41:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b48:	90                   	nop
c0010b49:	c3                   	ret    

c0010b4a <EnvVarContainer::~EnvVarContainer()>:
c0010b4a:	83 ec 1c             	sub    esp,0x1c
c0010b4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b51:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b54:	85 c0                	test   eax,eax
c0010b56:	74 19                	je     c0010b71 <EnvVarContainer::~EnvVarContainer()+0x27>
c0010b58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b5e:	85 c0                	test   eax,eax
c0010b60:	74 0f                	je     c0010b71 <EnvVarContainer::~EnvVarContainer()+0x27>
c0010b62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b69:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b6c:	e8 9e 6f ff ff       	call   c0007b0f <free>
c0010b71:	90                   	nop
c0010b72:	83 c4 1c             	add    esp,0x1c
c0010b75:	c3                   	ret    

c0010b76 <Krnl::getEnv(Process*, char const*)>:
c0010b76:	53                   	push   ebx
c0010b77:	83 ec 08             	sub    esp,0x8
c0010b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b7e:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c0010b84:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010b88:	74 04                	je     c0010b8e <Krnl::getEnv(Process*, char const*)+0x18>
c0010b8a:	85 c0                	test   eax,eax
c0010b8c:	75 0b                	jne    c0010b99 <Krnl::getEnv(Process*, char const*)+0x23>
c0010b8e:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0010b93:	85 c0                	test   eax,eax
c0010b95:	75 19                	jne    c0010bb0 <Krnl::getEnv(Process*, char const*)+0x3a>
c0010b97:	eb 27                	jmp    c0010bc0 <Krnl::getEnv(Process*, char const*)+0x4a>
c0010b99:	52                   	push   edx
c0010b9a:	52                   	push   edx
c0010b9b:	53                   	push   ebx
c0010b9c:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010ba2:	e8 7d fc ff ff       	call   c0010824 <EnvVarContainer::getEnv(char const*)>
c0010ba7:	83 c4 10             	add    esp,0x10
c0010baa:	85 c0                	test   eax,eax
c0010bac:	75 28                	jne    c0010bd6 <Krnl::getEnv(Process*, char const*)+0x60>
c0010bae:	eb de                	jmp    c0010b8e <Krnl::getEnv(Process*, char const*)+0x18>
c0010bb0:	52                   	push   edx
c0010bb1:	52                   	push   edx
c0010bb2:	53                   	push   ebx
c0010bb3:	50                   	push   eax
c0010bb4:	e8 6b fc ff ff       	call   c0010824 <EnvVarContainer::getEnv(char const*)>
c0010bb9:	83 c4 10             	add    esp,0x10
c0010bbc:	85 c0                	test   eax,eax
c0010bbe:	75 16                	jne    c0010bd6 <Krnl::getEnv(Process*, char const*)+0x60>
c0010bc0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010bc4:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c0010bc9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010bcd:	83 c4 08             	add    esp,0x8
c0010bd0:	5b                   	pop    ebx
c0010bd1:	e9 4e fc ff ff       	jmp    c0010824 <EnvVarContainer::getEnv(char const*)>
c0010bd6:	83 c4 08             	add    esp,0x8
c0010bd9:	5b                   	pop    ebx
c0010bda:	c3                   	ret    

c0010bdb <Krnl::setEnvSystem(char const*, char const*)>:
c0010bdb:	83 ec 10             	sub    esp,0x10
c0010bde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010be6:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c0010bec:	e8 71 fc ff ff       	call   c0010862 <EnvVarContainer::setEnv(char const*, char const*)>
c0010bf1:	83 c4 1c             	add    esp,0x1c
c0010bf4:	c3                   	ret    

c0010bf5 <Krnl::setEnvUser(char const*, char const*)>:
c0010bf5:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0010bfa:	85 c0                	test   eax,eax
c0010bfc:	74 15                	je     c0010c13 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010bfe:	83 ec 10             	sub    esp,0x10
c0010c01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c09:	50                   	push   eax
c0010c0a:	e8 53 fc ff ff       	call   c0010862 <EnvVarContainer::setEnv(char const*, char const*)>
c0010c0f:	83 c4 1c             	add    esp,0x1c
c0010c12:	c3                   	ret    
c0010c13:	c3                   	ret    

c0010c14 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0010c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c18:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010c22:	e9 3b fc ff ff       	jmp    c0010862 <EnvVarContainer::setEnv(char const*, char const*)>

c0010c27 <Krnl::deleteEnvSystem(char const*)>:
c0010c27:	c3                   	ret    

c0010c28 <Krnl::deleteEnvUser(char const*)>:
c0010c28:	c3                   	ret    

c0010c29 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0010c29:	c3                   	ret    

c0010c2a <Krnl::newProcessEnv(Process*)>:
c0010c2a:	83 ec 28             	sub    esp,0x28
c0010c2d:	6a 0c                	push   0xc
c0010c2f:	e8 c8 6e ff ff       	call   c0007afc <malloc>
c0010c34:	5a                   	pop    edx
c0010c35:	59                   	pop    ecx
c0010c36:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010c3a:	50                   	push   eax
c0010c3b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010c3f:	e8 e4 fe ff ff       	call   c0010b28 <EnvVarContainer::EnvVarContainer(Process*)>
c0010c44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010c48:	83 c4 2c             	add    esp,0x2c
c0010c4b:	c3                   	ret    

c0010c4c <Krnl::copyProcessEnv(Process*, Process*)>:
c0010c4c:	57                   	push   edi
c0010c4d:	56                   	push   esi
c0010c4e:	53                   	push   ebx
c0010c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c53:	83 ec 0c             	sub    esp,0xc
c0010c56:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010c5c:	6a 0c                	push   0xc
c0010c5e:	e8 99 6e ff ff       	call   c0007afc <malloc>
c0010c63:	89 c3                	mov    ebx,eax
c0010c65:	58                   	pop    eax
c0010c66:	5a                   	pop    edx
c0010c67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c6b:	53                   	push   ebx
c0010c6c:	e8 b7 fe ff ff       	call   c0010b28 <EnvVarContainer::EnvVarContainer(Process*)>
c0010c71:	8b 07                	mov    eax,DWORD PTR [edi]
c0010c73:	89 03                	mov    DWORD PTR [ebx],eax
c0010c75:	c1 e0 03             	shl    eax,0x3
c0010c78:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c7b:	e8 7c 6e ff ff       	call   c0007afc <malloc>
c0010c80:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010c83:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010c85:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010c88:	89 c7                	mov    edi,eax
c0010c8a:	c1 e1 03             	shl    ecx,0x3
c0010c8d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c8f:	83 c4 10             	add    esp,0x10
c0010c92:	89 d8                	mov    eax,ebx
c0010c94:	5b                   	pop    ebx
c0010c95:	5e                   	pop    esi
c0010c96:	5f                   	pop    edi
c0010c97:	c3                   	ret    

c0010c98 <Krnl::loadSystemEnv()>:
c0010c98:	53                   	push   ebx
c0010c99:	83 ec 14             	sub    esp,0x14
c0010c9c:	6a 0c                	push   0xc
c0010c9e:	e8 59 6e ff ff       	call   c0007afc <malloc>
c0010ca3:	89 c3                	mov    ebx,eax
c0010ca5:	58                   	pop    eax
c0010ca6:	5a                   	pop    edx
c0010ca7:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010cad:	53                   	push   ebx
c0010cae:	e8 75 fe ff ff       	call   c0010b28 <EnvVarContainer::EnvVarContainer(Process*)>
c0010cb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cb6:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c0010cbc:	e8 4b fe ff ff       	call   c0010b0c <EnvVarContainer::__loadSystem()>
c0010cc1:	83 c4 18             	add    esp,0x18
c0010cc4:	5b                   	pop    ebx
c0010cc5:	c3                   	ret    

c0010cc6 <Krnl::loadUserEnv()>:
c0010cc6:	53                   	push   ebx
c0010cc7:	83 ec 14             	sub    esp,0x14
c0010cca:	6a 0c                	push   0xc
c0010ccc:	e8 2b 6e ff ff       	call   c0007afc <malloc>
c0010cd1:	89 c3                	mov    ebx,eax
c0010cd3:	58                   	pop    eax
c0010cd4:	5a                   	pop    edx
c0010cd5:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010cdb:	53                   	push   ebx
c0010cdc:	e8 47 fe ff ff       	call   c0010b28 <EnvVarContainer::EnvVarContainer(Process*)>
c0010ce1:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c0010ce7:	83 c4 18             	add    esp,0x18
c0010cea:	5b                   	pop    ebx
c0010ceb:	c3                   	ret    

c0010cec <Krnl::flushEnv()>:
c0010cec:	c3                   	ret    

c0010ced <Krnl::getProcessTotalEnvCount(Process*)>:
c0010ced:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cf1:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c0010cf7:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010cfd:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c0010d02:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d04:	03 01                	add    eax,DWORD PTR [ecx]
c0010d06:	85 d2                	test   edx,edx
c0010d08:	74 02                	je     c0010d0c <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010d0a:	03 02                	add    eax,DWORD PTR [edx]
c0010d0c:	c3                   	ret    

c0010d0d <Krnl::getProcessEnvPair(Process*, int)>:
c0010d0d:	57                   	push   edi
c0010d0e:	56                   	push   esi
c0010d0f:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c0010d15:	53                   	push   ebx
c0010d16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d1e:	85 f6                	test   esi,esi
c0010d20:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010d24:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010d2a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010d2c:	75 16                	jne    c0010d44 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010d2e:	39 c2                	cmp    edx,eax
c0010d30:	7c 16                	jl     c0010d48 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010d32:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c0010d38:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010d3a:	01 c6                	add    esi,eax
c0010d3c:	39 d6                	cmp    esi,edx
c0010d3e:	7e 3c                	jle    c0010d7c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010d40:	29 c2                	sub    edx,eax
c0010d42:	eb 04                	jmp    c0010d48 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010d44:	39 c2                	cmp    edx,eax
c0010d46:	7d 05                	jge    c0010d4d <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010d48:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010d4b:	eb 20                	jmp    c0010d6d <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010d4d:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010d4f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010d52:	39 d1                	cmp    ecx,edx
c0010d54:	7e 04                	jle    c0010d5a <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010d56:	29 c2                	sub    edx,eax
c0010d58:	eb 10                	jmp    c0010d6a <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010d5a:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c0010d60:	03 0e                	add    ecx,DWORD PTR [esi]
c0010d62:	39 d1                	cmp    ecx,edx
c0010d64:	7e 16                	jle    c0010d7c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010d66:	29 c2                	sub    edx,eax
c0010d68:	29 fa                	sub    edx,edi
c0010d6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010d6d:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010d70:	8b 02                	mov    eax,DWORD PTR [edx]
c0010d72:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010d75:	89 03                	mov    DWORD PTR [ebx],eax
c0010d77:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010d7a:	eb 1d                	jmp    c0010d99 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010d7c:	83 ec 0c             	sub    esp,0xc
c0010d7f:	68 0a 11 02 c0       	push   0xc002110a
c0010d84:	e8 ac 00 00 00       	call   c0010e35 <KePanic(char const*)>
c0010d89:	83 c4 10             	add    esp,0x10
c0010d8c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010d92:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010d99:	89 d8                	mov    eax,ebx
c0010d9b:	5b                   	pop    ebx
c0010d9c:	5e                   	pop    esi
c0010d9d:	5f                   	pop    edi
c0010d9e:	c2 04 00             	ret    0x4

c0010da1 <CPU::current()>:
c0010da1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010da6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010dac:	c3                   	ret    

c0010dad <operator new(unsigned long)>:
c0010dad:	e9 4a 6d ff ff       	jmp    c0007afc <malloc>

c0010db2 <operator delete(void*)>:
c0010db2:	e9 6b 6d ff ff       	jmp    c0007b22 <rfree>

c0010db7 <disableIRQs()>:
c0010db7:	fa                   	cli    
c0010db8:	c3                   	ret    

c0010db9 <enableIRQs()>:
c0010db9:	fb                   	sti    
c0010dba:	c3                   	ret    

c0010dbb <lockScheduler()>:
c0010dbb:	fa                   	cli    
c0010dbc:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0010dc2:	c3                   	ret    

c0010dc3 <unlockScheduler()>:
c0010dc3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010dc8:	48                   	dec    eax
c0010dc9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010dce:	75 01                	jne    c0010dd1 <unlockScheduler()+0xe>
c0010dd0:	fb                   	sti    
c0010dd1:	c3                   	ret    

c0010dd2 <lockStuff()>:
c0010dd2:	fa                   	cli    
c0010dd3:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0010dd9:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c0010ddf:	c3                   	ret    

c0010de0 <unlockStuff()>:
c0010de0:	83 ec 0c             	sub    esp,0xc
c0010de3:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0010de8:	48                   	dec    eax
c0010de9:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0010dee:	75 18                	jne    c0010e08 <unlockStuff()+0x28>
c0010df0:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0010df7:	74 0f                	je     c0010e08 <unlockStuff()+0x28>
c0010df9:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0010e03:	e8 58 49 00 00       	call   c0015760 <schedule()>
c0010e08:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010e0d:	48                   	dec    eax
c0010e0e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010e13:	75 01                	jne    c0010e16 <unlockStuff()+0x36>
c0010e15:	fb                   	sti    
c0010e16:	83 c4 0c             	add    esp,0xc
c0010e19:	c3                   	ret    

c0010e1a <Virt::getAKernelVAS()>:
c0010e1a:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0010e1f:	c3                   	ret    

c0010e20 <__not_memcpy>:
c0010e20:	57                   	push   edi
c0010e21:	56                   	push   esi
c0010e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e26:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e2a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010e2e:	89 c7                	mov    edi,eax
c0010e30:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e32:	5e                   	pop    esi
c0010e33:	5f                   	pop    edi
c0010e34:	c3                   	ret    

c0010e35 <KePanic(char const*)>:
c0010e35:	b0 01                	mov    al,0x1
c0010e37:	a2 38 79 02 c0       	mov    ds:0xc0027938,al
c0010e3c:	e9 84 66 00 00       	jmp    c00174c5 <HalPanic(char const*)>

c0010e41 <Krnl::powerThread(void*)>:
c0010e41:	83 ec 0c             	sub    esp,0xc
c0010e44:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010e49:	48                   	dec    eax
c0010e4a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010e4f:	75 01                	jne    c0010e52 <Krnl::powerThread(void*)+0x11>
c0010e51:	fb                   	sti    
c0010e52:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010e59:	83 ec 0c             	sub    esp,0xc
c0010e5c:	6a 0a                	push   0xa
c0010e5e:	e8 e9 4b 00 00       	call   c0015a4c <sleep(unsigned int)>
c0010e63:	83 c4 10             	add    esp,0x10
c0010e66:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c0010e6d:	eb e3                	jmp    c0010e52 <Krnl::powerThread(void*)+0x11>

c0010e6f <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010e6f:	57                   	push   edi
c0010e70:	b9 09 00 00 00       	mov    ecx,0x9
c0010e75:	56                   	push   esi
c0010e76:	bf 60 79 02 c0       	mov    edi,0xc0027960
c0010e7b:	fc                   	cld    
c0010e7c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010e80:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010e82:	5e                   	pop    esi
c0010e83:	5f                   	pop    edi
c0010e84:	c3                   	ret    

c0010e85 <Krnl::userIOReceived()>:
c0010e85:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010e8f:	c3                   	ret    

c0010e90 <Krnl::handlePowerButton()>:
c0010e90:	83 ec 0c             	sub    esp,0xc
c0010e93:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c0010e98:	83 f8 02             	cmp    eax,0x2
c0010e9b:	75 10                	jne    c0010ead <Krnl::handlePowerButton()+0x1d>
c0010e9d:	83 ec 0c             	sub    esp,0xc
c0010ea0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010ea6:	e8 81 62 ff ff       	call   c000712c <Computer::shutdown()>
c0010eab:	eb 11                	jmp    c0010ebe <Krnl::handlePowerButton()+0x2e>
c0010ead:	48                   	dec    eax
c0010eae:	75 11                	jne    c0010ec1 <Krnl::handlePowerButton()+0x31>
c0010eb0:	83 ec 0c             	sub    esp,0xc
c0010eb3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010eb9:	e8 bc 62 ff ff       	call   c000717a <Computer::sleep()>
c0010ebe:	83 c4 10             	add    esp,0x10
c0010ec1:	83 c4 0c             	add    esp,0xc
c0010ec4:	c3                   	ret    

c0010ec5 <Krnl::handleSleepButton()>:
c0010ec5:	83 ec 0c             	sub    esp,0xc
c0010ec8:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c0010ecd:	83 f8 02             	cmp    eax,0x2
c0010ed0:	75 10                	jne    c0010ee2 <Krnl::handleSleepButton()+0x1d>
c0010ed2:	83 ec 0c             	sub    esp,0xc
c0010ed5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010edb:	e8 4c 62 ff ff       	call   c000712c <Computer::shutdown()>
c0010ee0:	eb 11                	jmp    c0010ef3 <Krnl::handleSleepButton()+0x2e>
c0010ee2:	48                   	dec    eax
c0010ee3:	75 11                	jne    c0010ef6 <Krnl::handleSleepButton()+0x31>
c0010ee5:	83 ec 0c             	sub    esp,0xc
c0010ee8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010eee:	e8 87 62 ff ff       	call   c000717a <Computer::sleep()>
c0010ef3:	83 c4 10             	add    esp,0x10
c0010ef6:	83 c4 0c             	add    esp,0xc
c0010ef9:	c3                   	ret    

c0010efa <Krnl::setupPowerManager()>:
c0010efa:	83 ec 0c             	sub    esp,0xc
c0010efd:	68 f0 00 00 00       	push   0xf0
c0010f02:	6a 00                	push   0x0
c0010f04:	68 41 0e 01 c0       	push   0xc0010e41
c0010f09:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010f0f:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010f19:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010f20:	e8 e3 45 00 00       	call   c0015508 <Process::createThread(void (*)(void*), void*, int)>
c0010f25:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c0010f2f:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c0010f39:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c0010f43:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c0010f4d:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c0010f57:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c0010f61:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c0010f6b:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c0010f75:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c0010f7f:	83 c4 1c             	add    esp,0x1c
c0010f82:	c3                   	ret    

c0010f83 <KeRand()>:
c0010f83:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c0010f8d:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c0010f97:	53                   	push   ebx
c0010f98:	5b                   	pop    ebx
c0010f99:	01 c1                	add    ecx,eax
c0010f9b:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010fa0:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c0010fa6:	01 ca                	add    edx,ecx
c0010fa8:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010fad:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010fb2:	83 d2 00             	adc    edx,0x0
c0010fb5:	81 e2 ff ff 00 00    	and    edx,0xffff
c0010fbb:	89 15 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,edx
c0010fc1:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010fc5:	c3                   	ret    

c0010fc6 <KeSeedRand(unsigned int)>:
c0010fc6:	53                   	push   ebx
c0010fc7:	83 ec 08             	sub    esp,0x8
c0010fca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fce:	e8 fd 67 00 00       	call   c00177d0 <HalGetRand()>
c0010fd3:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c0010fdd:	31 d8                	xor    eax,ebx
c0010fdf:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010fe4:	e8 9a ff ff ff       	call   c0010f83 <KeRand()>
c0010fe9:	83 c4 08             	add    esp,0x8
c0010fec:	5b                   	pop    ebx
c0010fed:	eb 94                	jmp    c0010f83 <KeRand()>

c0010fef <KeInitRand()>:
c0010fef:	83 ec 0c             	sub    esp,0xc
c0010ff2:	e8 c7 65 00 00       	call   c00175be <HalQueryPerformanceCounter()>
c0010ff7:	0f 20 da             	mov    edx,cr3
c0010ffa:	0f 22 da             	mov    cr3,edx
c0010ffd:	0f 20 da             	mov    edx,cr3
c0011000:	0f 22 da             	mov    cr3,edx
c0011003:	0f 20 da             	mov    edx,cr3
c0011006:	0f 22 da             	mov    cr3,edx
c0011009:	0f 20 da             	mov    edx,cr3
c001100c:	0f 22 da             	mov    cr3,edx
c001100f:	83 ec 0c             	sub    esp,0xc
c0011012:	35 03 8a 95 38       	xor    eax,0x38958a03
c0011017:	50                   	push   eax
c0011018:	e8 a9 ff ff ff       	call   c0010fc6 <KeSeedRand(unsigned int)>
c001101d:	83 c4 1c             	add    esp,0x1c
c0011020:	c3                   	ret    
c0011021:	66 90                	xchg   ax,ax
c0011023:	90                   	nop

c0011024 <KeResolveCompatibilitySymbol(char*)>:
c0011024:	83 ec 1c             	sub    esp,0x1c
c0011027:	c7 44 24 04 24 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021124
c001102f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011033:	89 04 24             	mov    DWORD PTR [esp],eax
c0011036:	e8 05 f8 fe ff       	call   c0000840 <strcmp>
c001103b:	85 c0                	test   eax,eax
c001103d:	0f 94 c0             	sete   al
c0011040:	84 c0                	test   al,al
c0011042:	74 0c                	je     c0011050 <KeResolveCompatibilitySymbol(char*)+0x2c>
c0011044:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0011049:	e9 62 01 00 00       	jmp    c00111b0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001104e:	66 90                	xchg   ax,ax
c0011050:	c7 44 24 04 2d 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002112d
c0011058:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001105c:	89 04 24             	mov    DWORD PTR [esp],eax
c001105f:	e8 dc f7 fe ff       	call   c0000840 <strcmp>
c0011064:	85 c0                	test   eax,eax
c0011066:	0f 94 c0             	sete   al
c0011069:	84 c0                	test   al,al
c001106b:	74 0b                	je     c0011078 <KeResolveCompatibilitySymbol(char*)+0x54>
c001106d:	b8 50 ea 01 c0       	mov    eax,0xc001ea50
c0011072:	e9 39 01 00 00       	jmp    c00111b0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0011077:	90                   	nop
c0011078:	c7 44 24 04 37 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021137
c0011080:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011084:	89 04 24             	mov    DWORD PTR [esp],eax
c0011087:	e8 b4 f7 fe ff       	call   c0000840 <strcmp>
c001108c:	85 c0                	test   eax,eax
c001108e:	0f 94 c0             	sete   al
c0011091:	84 c0                	test   al,al
c0011093:	74 0b                	je     c00110a0 <KeResolveCompatibilitySymbol(char*)+0x7c>
c0011095:	b8 84 e7 01 c0       	mov    eax,0xc001e784
c001109a:	e9 11 01 00 00       	jmp    c00111b0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001109f:	90                   	nop
c00110a0:	c7 44 24 04 40 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021140
c00110a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00110af:	e8 8c f7 fe ff       	call   c0000840 <strcmp>
c00110b4:	85 c0                	test   eax,eax
c00110b6:	0f 94 c0             	sete   al
c00110b9:	84 c0                	test   al,al
c00110bb:	74 0b                	je     c00110c8 <KeResolveCompatibilitySymbol(char*)+0xa4>
c00110bd:	b8 35 0e 01 c0       	mov    eax,0xc0010e35
c00110c2:	e9 e9 00 00 00       	jmp    c00111b0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00110c7:	90                   	nop
c00110c8:	c7 44 24 04 53 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021153
c00110d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00110d7:	e8 64 f7 fe ff       	call   c0000840 <strcmp>
c00110dc:	85 c0                	test   eax,eax
c00110de:	0f 94 c0             	sete   al
c00110e1:	84 c0                	test   al,al
c00110e3:	74 0b                	je     c00110f0 <KeResolveCompatibilitySymbol(char*)+0xcc>
c00110e5:	b8 c1 07 01 c0       	mov    eax,0xc00107c1
c00110ea:	e9 c1 00 00 00       	jmp    c00111b0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00110ef:	90                   	nop
c00110f0:	c7 44 24 04 70 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021170
c00110f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00110ff:	e8 3c f7 fe ff       	call   c0000840 <strcmp>
c0011104:	85 c0                	test   eax,eax
c0011106:	0f 94 c0             	sete   al
c0011109:	84 c0                	test   al,al
c001110b:	74 0b                	je     c0011118 <KeResolveCompatibilitySymbol(char*)+0xf4>
c001110d:	b8 50 eb 01 c0       	mov    eax,0xc001eb50
c0011112:	e9 99 00 00 00       	jmp    c00111b0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0011117:	90                   	nop
c0011118:	c7 44 24 04 7a 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002117a
c0011120:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011124:	89 04 24             	mov    DWORD PTR [esp],eax
c0011127:	e8 14 f7 fe ff       	call   c0000840 <strcmp>
c001112c:	85 c0                	test   eax,eax
c001112e:	0f 94 c0             	sete   al
c0011131:	84 c0                	test   al,al
c0011133:	74 07                	je     c001113c <KeResolveCompatibilitySymbol(char*)+0x118>
c0011135:	b8 d0 e8 01 c0       	mov    eax,0xc001e8d0
c001113a:	eb 74                	jmp    c00111b0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001113c:	c7 44 24 04 83 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021183
c0011144:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011148:	89 04 24             	mov    DWORD PTR [esp],eax
c001114b:	e8 f0 f6 fe ff       	call   c0000840 <strcmp>
c0011150:	85 c0                	test   eax,eax
c0011152:	0f 94 c0             	sete   al
c0011155:	84 c0                	test   al,al
c0011157:	74 07                	je     c0011160 <KeResolveCompatibilitySymbol(char*)+0x13c>
c0011159:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c001115e:	eb 50                	jmp    c00111b0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0011160:	c7 44 24 04 9b 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002119b
c0011168:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001116c:	89 04 24             	mov    DWORD PTR [esp],eax
c001116f:	e8 cc f6 fe ff       	call   c0000840 <strcmp>
c0011174:	85 c0                	test   eax,eax
c0011176:	0f 94 c0             	sete   al
c0011179:	84 c0                	test   al,al
c001117b:	74 07                	je     c0011184 <KeResolveCompatibilitySymbol(char*)+0x160>
c001117d:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0011182:	eb 2c                	jmp    c00111b0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0011184:	c7 44 24 04 a8 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc00211a8
c001118c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011190:	89 04 24             	mov    DWORD PTR [esp],eax
c0011193:	e8 a8 f6 fe ff       	call   c0000840 <strcmp>
c0011198:	85 c0                	test   eax,eax
c001119a:	0f 94 c0             	sete   al
c001119d:	84 c0                	test   al,al
c001119f:	74 07                	je     c00111a8 <KeResolveCompatibilitySymbol(char*)+0x184>
c00111a1:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c00111a6:	eb 08                	jmp    c00111b0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00111a8:	b8 00 00 00 00       	mov    eax,0x0
c00111ad:	8d 76 00             	lea    esi,[esi+0x0]
c00111b0:	83 c4 1c             	add    esp,0x1c
c00111b3:	c3                   	ret    

c00111b4 <KiSigKill(int)>:
c00111b4:	83 ec 0c             	sub    esp,0xc
c00111b7:	6a 00                	push   0x0
c00111b9:	6a 00                	push   0x0
c00111bb:	6a ff                	push   0xffffffff
c00111bd:	6a 01                	push   0x1
c00111bf:	e8 8e 1e 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00111c4:	83 c4 1c             	add    esp,0x1c
c00111c7:	c3                   	ret    

c00111c8 <KiDefaultSignalHandlerIgnore(int)>:
c00111c8:	c3                   	ret    

c00111c9 <KiDefaultSignalHandlerPause(int)>:
c00111c9:	57                   	push   edi
c00111ca:	b9 07 00 00 00       	mov    ecx,0x7
c00111cf:	56                   	push   esi
c00111d0:	be f1 11 02 c0       	mov    esi,0xc00211f1
c00111d5:	83 ec 24             	sub    esp,0x24
c00111d8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00111dc:	fc                   	cld    
c00111dd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00111df:	8d 44 24 04          	lea    eax,[esp+0x4]
c00111e3:	50                   	push   eax
c00111e4:	6a 00                	push   0x0
c00111e6:	6a 00                	push   0x0
c00111e8:	6a 27                	push   0x27
c00111ea:	e8 63 1e 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00111ef:	83 c4 34             	add    esp,0x34
c00111f2:	5e                   	pop    esi
c00111f3:	5f                   	pop    edi
c00111f4:	c3                   	ret    

c00111f5 <KiDefaultSignalHandlerResume(int)>:
c00111f5:	57                   	push   edi
c00111f6:	b9 1d 00 00 00       	mov    ecx,0x1d
c00111fb:	56                   	push   esi
c00111fc:	be 0d 12 02 c0       	mov    esi,0xc002120d
c0011201:	83 ec 24             	sub    esp,0x24
c0011204:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011208:	fc                   	cld    
c0011209:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001120b:	8d 44 24 03          	lea    eax,[esp+0x3]
c001120f:	50                   	push   eax
c0011210:	6a 00                	push   0x0
c0011212:	6a 00                	push   0x0
c0011214:	6a 27                	push   0x27
c0011216:	e8 37 1e 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001121b:	83 c4 34             	add    esp,0x34
c001121e:	5e                   	pop    esi
c001121f:	5f                   	pop    edi
c0011220:	c3                   	ret    

c0011221 <KeDeinitSignals(SigHandlerBlock*)>:
c0011221:	e9 e9 68 ff ff       	jmp    c0007b0f <free>

c0011226 <KeInitSignals()>:
c0011226:	53                   	push   ebx
c0011227:	83 ec 14             	sub    esp,0x14
c001122a:	68 c8 00 00 00       	push   0xc8
c001122f:	e8 c8 68 ff ff       	call   c0007afc <malloc>
c0011234:	83 c4 0c             	add    esp,0xc
c0011237:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011241:	89 c3                	mov    ebx,eax
c0011243:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001124d:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011253:	6a 20                	push   0x20
c0011255:	6a 00                	push   0x0
c0011257:	50                   	push   eax
c0011258:	e8 23 f3 fe ff       	call   c0000580 <memset>
c001125d:	83 c4 0c             	add    esp,0xc
c0011260:	6a 44                	push   0x44
c0011262:	6a 00                	push   0x0
c0011264:	53                   	push   ebx
c0011265:	e8 16 f3 fe ff       	call   c0000580 <memset>
c001126a:	83 c4 18             	add    esp,0x18
c001126d:	89 d8                	mov    eax,ebx
c001126f:	5b                   	pop    ebx
c0011270:	c3                   	ret    

c0011271 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011271:	53                   	push   ebx
c0011272:	b8 01 00 00 00       	mov    eax,0x1
c0011277:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001127b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001127f:	83 f9 10             	cmp    ecx,0x10
c0011282:	7f 21                	jg     c00112a5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011288:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001128b:	89 03                	mov    DWORD PTR [ebx],eax
c001128d:	b8 01 00 00 00       	mov    eax,0x1
c0011292:	d3 e0                	shl    eax,cl
c0011294:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011298:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001129b:	31 c0                	xor    eax,eax
c001129d:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00112a5:	5b                   	pop    ebx
c00112a6:	c3                   	ret    

c00112a7 <KeRaiseSignal(SigHandlerBlock*, int)>:
c00112a7:	55                   	push   ebp
c00112a8:	57                   	push   edi
c00112a9:	bf 08 00 00 00       	mov    edi,0x8
c00112ae:	56                   	push   esi
c00112af:	53                   	push   ebx
c00112b0:	83 ec 18             	sub    esp,0x18
c00112b3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00112b7:	68 2a 12 02 c0       	push   0xc002122a
c00112bc:	e8 b5 97 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00112c1:	83 c4 10             	add    esp,0x10
c00112c4:	31 c9                	xor    ecx,ecx
c00112c6:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00112cd:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00112d3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00112d7:	99                   	cdq    
c00112d8:	f7 ff                	idiv   edi
c00112da:	8d 42 24             	lea    eax,[edx+0x24]
c00112dd:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00112e1:	85 f6                	test   esi,esi
c00112e3:	75 1a                	jne    c00112ff <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00112e5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00112e9:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00112ed:	50                   	push   eax
c00112ee:	50                   	push   eax
c00112ef:	52                   	push   edx
c00112f0:	68 3b 12 02 c0       	push   0xc002123b
c00112f5:	e8 7c 97 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00112fa:	83 c4 10             	add    esp,0x10
c00112fd:	eb 1b                	jmp    c001131a <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00112ff:	41                   	inc    ecx
c0011300:	83 f9 08             	cmp    ecx,0x8
c0011303:	75 ce                	jne    c00112d3 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011305:	83 ec 0c             	sub    esp,0xc
c0011308:	be 01 00 00 00       	mov    esi,0x1
c001130d:	68 5c 12 02 c0       	push   0xc002125c
c0011312:	e8 5f 97 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0011317:	83 c4 10             	add    esp,0x10
c001131a:	83 c4 0c             	add    esp,0xc
c001131d:	89 f0                	mov    eax,esi
c001131f:	5b                   	pop    ebx
c0011320:	5e                   	pop    esi
c0011321:	5f                   	pop    edi
c0011322:	5d                   	pop    ebp
c0011323:	c3                   	ret    

c0011324 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011324:	55                   	push   ebp
c0011325:	57                   	push   edi
c0011326:	56                   	push   esi
c0011327:	53                   	push   ebx
c0011328:	51                   	push   ecx
c0011329:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001132d:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011334:	0f 84 b1 00 00 00    	je     c00113eb <KeCheckSignal(SigHandlerBlock*, int*)+0xc7>
c001133a:	31 c9                	xor    ecx,ecx
c001133c:	bf 08 00 00 00       	mov    edi,0x8
c0011341:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011347:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001134a:	99                   	cdq    
c001134b:	f7 ff                	idiv   edi
c001134d:	89 d5                	mov    ebp,edx
c001134f:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c0011356:	85 d2                	test   edx,edx
c0011358:	0f 84 9e 00 00 00    	je     c00113fc <KeCheckSignal(SigHandlerBlock*, int*)+0xd8>
c001135e:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011364:	88 d1                	mov    cl,dl
c0011366:	bf 01 00 00 00       	mov    edi,0x1
c001136b:	d3 e7                	shl    edi,cl
c001136d:	31 c9                	xor    ecx,ecx
c001136f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011372:	b8 01 00 00 00       	mov    eax,0x1
c0011377:	d3 e0                	shl    eax,cl
c0011379:	85 04 24             	test   DWORD PTR [esp],eax
c001137c:	74 06                	je     c0011384 <KeCheckSignal(SigHandlerBlock*, int*)+0x60>
c001137e:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011382:	75 67                	jne    c00113eb <KeCheckSignal(SigHandlerBlock*, int*)+0xc7>
c0011384:	41                   	inc    ecx
c0011385:	83 f9 11             	cmp    ecx,0x11
c0011388:	75 e8                	jne    c0011372 <KeCheckSignal(SigHandlerBlock*, int*)+0x4e>
c001138a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001138d:	46                   	inc    esi
c001138e:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011394:	c7 84 ab 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+ebp*4+0x9c],0x0
c001139f:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00113a6:	09 f8                	or     eax,edi
c00113a8:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00113ae:	31 c0                	xor    eax,eax
c00113b0:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00113b8:	74 09                	je     c00113c3 <KeCheckSignal(SigHandlerBlock*, int*)+0x9f>
c00113ba:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00113c1:	eb 06                	jmp    c00113c9 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c00113c3:	40                   	inc    eax
c00113c4:	83 f8 08             	cmp    eax,0x8
c00113c7:	75 e7                	jne    c00113b0 <KeCheckSignal(SigHandlerBlock*, int*)+0x8c>
c00113c9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00113cd:	83 fa 09             	cmp    edx,0x9
c00113d0:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c00113d3:	89 11                	mov    DWORD PTR [ecx],edx
c00113d5:	75 07                	jne    c00113de <KeCheckSignal(SigHandlerBlock*, int*)+0xba>
c00113d7:	b8 b4 11 01 c0       	mov    eax,0xc00111b4
c00113dc:	eb 31                	jmp    c001140f <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c00113de:	83 f8 01             	cmp    eax,0x1
c00113e1:	75 0c                	jne    c00113ef <KeCheckSignal(SigHandlerBlock*, int*)+0xcb>
c00113e3:	f7 d7                	not    edi
c00113e5:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00113eb:	31 c0                	xor    eax,eax
c00113ed:	eb 20                	jmp    c001140f <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c00113ef:	85 c0                	test   eax,eax
c00113f1:	75 1c                	jne    c001140f <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c00113f3:	8b 04 95 00 26 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdda00]
c00113fa:	eb 13                	jmp    c001140f <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c00113fc:	41                   	inc    ecx
c00113fd:	46                   	inc    esi
c00113fe:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011404:	83 f9 08             	cmp    ecx,0x8
c0011407:	0f 85 34 ff ff ff    	jne    c0011341 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c001140d:	eb dc                	jmp    c00113eb <KeCheckSignal(SigHandlerBlock*, int*)+0xc7>
c001140f:	5a                   	pop    edx
c0011410:	5b                   	pop    ebx
c0011411:	5e                   	pop    esi
c0011412:	5f                   	pop    edi
c0011413:	5d                   	pop    ebp
c0011414:	c3                   	ret    

c0011415 <KiCheckSignalZ>:
c0011415:	83 ec 10             	sub    esp,0x10
c0011418:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001141c:	50                   	push   eax
c001141d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011422:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011425:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001142b:	e8 f4 fe ff ff       	call   c0011324 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011430:	5a                   	pop    edx
c0011431:	31 d2                	xor    edx,edx
c0011433:	59                   	pop    ecx
c0011434:	85 c0                	test   eax,eax
c0011436:	74 19                	je     c0011451 <KiCheckSignalZ+0x3c>
c0011438:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001143e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011441:	89 02                	mov    DWORD PTR [edx],eax
c0011443:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c001144a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001144e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011451:	89 d0                	mov    eax,edx
c0011453:	83 c4 10             	add    esp,0x10
c0011456:	c3                   	ret    

c0011457 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011457:	56                   	push   esi
c0011458:	53                   	push   ebx
c0011459:	bb 01 00 00 00       	mov    ebx,0x1
c001145e:	52                   	push   edx
c001145f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011463:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011467:	d3 e3                	shl    ebx,cl
c0011469:	83 f9 10             	cmp    ecx,0x10
c001146c:	7f 08                	jg     c0011476 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001146e:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011474:	75 10                	jne    c0011486 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011476:	83 ec 0c             	sub    esp,0xc
c0011479:	68 6d 12 02 c0       	push   0xc002126d
c001147e:	e8 b2 f9 ff ff       	call   c0010e35 <KePanic(char const*)>
c0011483:	83 c4 10             	add    esp,0x10
c0011486:	f7 d3                	not    ebx
c0011488:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001148e:	58                   	pop    eax
c001148f:	5b                   	pop    ebx
c0011490:	5e                   	pop    esi
c0011491:	c3                   	ret    

c0011492 <KiFinishSignalZ>:
c0011492:	53                   	push   ebx
c0011493:	83 ec 10             	sub    esp,0x10
c0011496:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001149a:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001149d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114a5:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00114ab:	e8 a7 ff ff ff       	call   c0011457 <KeCompleteSignal(SigHandlerBlock*, int)>
c00114b0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00114b6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00114bd:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00114c4:	83 c4 18             	add    esp,0x18
c00114c7:	5b                   	pop    ebx
c00114c8:	c3                   	ret    

c00114c9 <SysSeekDir(regs*)>:
c00114c9:	31 c0                	xor    eax,eax
c00114cb:	31 d2                	xor    edx,edx
c00114cd:	c3                   	ret    

c00114ce <SysTellDir(regs*)>:
c00114ce:	31 c0                	xor    eax,eax
c00114d0:	31 d2                	xor    edx,edx
c00114d2:	c3                   	ret    

c00114d3 <SysVerify(regs*)>:
c00114d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114d7:	31 d2                	xor    edx,edx
c00114d9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00114dc:	c3                   	ret    

c00114dd <SysGetArgc(regs*)>:
c00114dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114e5:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00114eb:	99                   	cdq    
c00114ec:	c3                   	ret    

c00114ed <SysTTYName(regs*)>:
c00114ed:	b8 01 00 00 00       	mov    eax,0x1
c00114f2:	31 d2                	xor    edx,edx
c00114f4:	c3                   	ret    

c00114f5 <SysFormatDisk(regs*)>:
c00114f5:	56                   	push   esi
c00114f6:	53                   	push   ebx
c00114f7:	83 ec 24             	sub    esp,0x24
c00114fa:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00114fe:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0011504:	eb 32                	jmp    c0011538 <SysFormatDisk(regs*)+0x43>
c0011506:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011509:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001150c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001150e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0011512:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011515:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011519:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0011520:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011523:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0011527:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001152b:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001152e:	83 f8 08             	cmp    eax,0x8
c0011531:	89 c1                	mov    ecx,eax
c0011533:	75 14                	jne    c0011549 <SysFormatDisk(regs*)+0x54>
c0011535:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011538:	85 db                	test   ebx,ebx
c001153a:	75 ca                	jne    c0011506 <SysFormatDisk(regs*)+0x11>
c001153c:	b8 03 00 00 00       	mov    eax,0x3
c0011541:	31 d2                	xor    edx,edx
c0011543:	83 c4 24             	add    esp,0x24
c0011546:	5b                   	pop    ebx
c0011547:	5e                   	pop    esi
c0011548:	c3                   	ret    
c0011549:	85 c0                	test   eax,eax
c001154b:	74 13                	je     c0011560 <SysFormatDisk(regs*)+0x6b>
c001154d:	31 d2                	xor    edx,edx
c001154f:	83 f9 09             	cmp    ecx,0x9
c0011552:	b8 01 00 00 00       	mov    eax,0x1
c0011557:	74 ea                	je     c0011543 <SysFormatDisk(regs*)+0x4e>
c0011559:	b8 02 00 00 00       	mov    eax,0x2
c001155e:	eb e1                	jmp    c0011541 <SysFormatDisk(regs*)+0x4c>
c0011560:	31 c0                	xor    eax,eax
c0011562:	eb dd                	jmp    c0011541 <SysFormatDisk(regs*)+0x4c>

c0011564 <SysSetDiskVolumeLabel(regs*)>:
c0011564:	83 ec 1c             	sub    esp,0x1c
c0011567:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001156b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001156f:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0011573:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011576:	83 f8 19             	cmp    eax,0x19
c0011579:	77 3d                	ja     c00115b8 <SysSetDiskVolumeLabel(regs*)+0x54>
c001157b:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0011582:	85 c9                	test   ecx,ecx
c0011584:	74 32                	je     c00115b8 <SysSetDiskVolumeLabel(regs*)+0x54>
c0011586:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011589:	85 db                	test   ebx,ebx
c001158b:	74 2b                	je     c00115b8 <SysSetDiskVolumeLabel(regs*)+0x54>
c001158d:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011593:	85 d2                	test   edx,edx
c0011595:	74 21                	je     c00115b8 <SysSetDiskVolumeLabel(regs*)+0x54>
c0011597:	8b 32                	mov    esi,DWORD PTR [edx]
c0011599:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001159d:	89 14 24             	mov    DWORD PTR [esp],edx
c00115a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00115a4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00115a8:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00115ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00115af:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00115b3:	83 c4 1c             	add    esp,0x1c
c00115b6:	99                   	cdq    
c00115b7:	c3                   	ret    
c00115b8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00115bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115c2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00115c6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00115ca:	83 c4 1c             	add    esp,0x1c
c00115cd:	c3                   	ret    

c00115ce <SysGetDiskVolumeLabel(regs*)>:
c00115ce:	83 ec 2c             	sub    esp,0x2c
c00115d1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00115d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115d9:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00115dd:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00115e1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00115e4:	83 fa 19             	cmp    edx,0x19
c00115e7:	77 4c                	ja     c0011635 <SysGetDiskVolumeLabel(regs*)+0x67>
c00115e9:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c00115f0:	85 c9                	test   ecx,ecx
c00115f2:	74 41                	je     c0011635 <SysGetDiskVolumeLabel(regs*)+0x67>
c00115f4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00115f7:	85 db                	test   ebx,ebx
c00115f9:	74 3a                	je     c0011635 <SysGetDiskVolumeLabel(regs*)+0x67>
c00115fb:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00115fe:	85 f6                	test   esi,esi
c0011600:	74 33                	je     c0011635 <SysGetDiskVolumeLabel(regs*)+0x67>
c0011602:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011608:	85 c0                	test   eax,eax
c001160a:	74 29                	je     c0011635 <SysGetDiskVolumeLabel(regs*)+0x67>
c001160c:	8b 38                	mov    edi,DWORD PTR [eax]
c001160e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0011612:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011616:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001161a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001161e:	89 04 24             	mov    DWORD PTR [esp],eax
c0011621:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0011624:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011628:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001162c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011630:	83 c4 2c             	add    esp,0x2c
c0011633:	99                   	cdq    
c0011634:	c3                   	ret    
c0011635:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001163a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001163f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011643:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011647:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001164b:	83 c4 2c             	add    esp,0x2c
c001164e:	c3                   	ret    

c001164f <SysShutdown(regs*)>:
c001164f:	53                   	push   ebx
c0011650:	83 ec 28             	sub    esp,0x28
c0011653:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011657:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001165a:	85 c0                	test   eax,eax
c001165c:	74 26                	je     c0011684 <SysShutdown(regs*)+0x35>
c001165e:	83 f8 01             	cmp    eax,0x1
c0011661:	0f 84 87 00 00 00    	je     c00116ee <SysShutdown(regs*)+0x9f>
c0011667:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c001166b:	83 f8 02             	cmp    eax,0x2
c001166e:	66 0f 7e c3          	movd   ebx,xmm0
c0011672:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c0011677:	66 0f 7e c2          	movd   edx,xmm0
c001167b:	74 3e                	je     c00116bb <SysShutdown(regs*)+0x6c>
c001167d:	83 c4 28             	add    esp,0x28
c0011680:	89 d8                	mov    eax,ebx
c0011682:	5b                   	pop    ebx
c0011683:	c3                   	ret    
c0011684:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011689:	31 c9                	xor    ecx,ecx
c001168b:	31 db                	xor    ebx,ebx
c001168d:	8b 10                	mov    edx,DWORD PTR [eax]
c001168f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0011693:	31 c9                	xor    ecx,ecx
c0011695:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0011699:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001169d:	89 04 24             	mov    DWORD PTR [esp],eax
c00116a0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00116a3:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c00116a7:	66 0f 7e c3          	movd   ebx,xmm0
c00116ab:	83 c4 28             	add    esp,0x28
c00116ae:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c00116b3:	89 d8                	mov    eax,ebx
c00116b5:	66 0f 7e c2          	movd   edx,xmm0
c00116b9:	5b                   	pop    ebx
c00116ba:	c3                   	ret    
c00116bb:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00116c0:	31 d2                	xor    edx,edx
c00116c2:	66 0f 7e 44 24 1c    	movd   DWORD PTR [esp+0x1c],xmm0
c00116c8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00116ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00116ce:	31 d2                	xor    edx,edx
c00116d0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00116d4:	ba 01 00 00 00       	mov    edx,0x1
c00116d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00116dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00116e0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00116e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00116e7:	83 c4 28             	add    esp,0x28
c00116ea:	89 d8                	mov    eax,ebx
c00116ec:	5b                   	pop    ebx
c00116ed:	c3                   	ret    
c00116ee:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c00116f3:	85 c0                	test   eax,eax
c00116f5:	74 02                	je     c00116f9 <SysShutdown(regs*)+0xaa>
c00116f7:	ff d0                	call   eax
c00116f9:	66 0f ef c0          	pxor   xmm0,xmm0
c00116fd:	eb a8                	jmp    c00116a7 <SysShutdown(regs*)+0x58>

c00116ff <SysRealpath(regs*)>:
c00116ff:	53                   	push   ebx
c0011700:	83 ec 18             	sub    esp,0x18
c0011703:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011707:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c001170a:	85 c9                	test   ecx,ecx
c001170c:	74 39                	je     c0011747 <SysRealpath(regs*)+0x48>
c001170e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011711:	31 d2                	xor    edx,edx
c0011713:	b8 01 00 00 00       	mov    eax,0x1
c0011718:	85 db                	test   ebx,ebx
c001171a:	75 05                	jne    c0011721 <SysRealpath(regs*)+0x22>
c001171c:	83 c4 18             	add    esp,0x18
c001171f:	5b                   	pop    ebx
c0011720:	c3                   	ret    
c0011721:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011726:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011729:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001172d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011730:	05 0c 01 00 00       	add    eax,0x10c
c0011735:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011739:	e8 13 97 ff ff       	call   c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)>
c001173e:	31 c0                	xor    eax,eax
c0011740:	31 d2                	xor    edx,edx
c0011742:	83 c4 18             	add    esp,0x18
c0011745:	5b                   	pop    ebx
c0011746:	c3                   	ret    
c0011747:	b8 01 00 00 00       	mov    eax,0x1
c001174c:	31 d2                	xor    edx,edx
c001174e:	eb f2                	jmp    c0011742 <SysRealpath(regs*)+0x43>

c0011750 <SysReadDir(regs*)>:
c0011750:	53                   	push   ebx
c0011751:	83 ec 38             	sub    esp,0x38
c0011754:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011758:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001175b:	83 f8 02             	cmp    eax,0x2
c001175e:	76 53                	jbe    c00117b3 <SysReadDir(regs*)+0x63>
c0011760:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011767:	77 56                	ja     c00117bf <SysReadDir(regs*)+0x6f>
c0011769:	89 04 24             	mov    DWORD PTR [esp],eax
c001176c:	e8 4e 7d ff ff       	call   c00094bf <getFromFileDescriptor(int)>
c0011771:	85 c0                	test   eax,eax
c0011773:	74 4a                	je     c00117bf <SysReadDir(regs*)+0x6f>
c0011775:	8d 4c 24 2c          	lea    ecx,[esp+0x2c]
c0011779:	31 d2                	xor    edx,edx
c001177b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001177f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011781:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0011785:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011788:	31 db                	xor    ebx,ebx
c001178a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001178e:	89 04 24             	mov    DWORD PTR [esp],eax
c0011791:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0011795:	b9 10 01 00 00       	mov    ecx,0x110
c001179a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001179e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00117a1:	85 c0                	test   eax,eax
c00117a3:	89 c1                	mov    ecx,eax
c00117a5:	74 27                	je     c00117ce <SysReadDir(regs*)+0x7e>
c00117a7:	31 d2                	xor    edx,edx
c00117a9:	83 f9 07             	cmp    ecx,0x7
c00117ac:	b8 02 00 00 00       	mov    eax,0x2
c00117b1:	75 16                	jne    c00117c9 <SysReadDir(regs*)+0x79>
c00117b3:	b8 01 00 00 00       	mov    eax,0x1
c00117b8:	31 d2                	xor    edx,edx
c00117ba:	83 c4 38             	add    esp,0x38
c00117bd:	5b                   	pop    ebx
c00117be:	c3                   	ret    
c00117bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117c9:	83 c4 38             	add    esp,0x38
c00117cc:	5b                   	pop    ebx
c00117cd:	c3                   	ret    
c00117ce:	31 c0                	xor    eax,eax
c00117d0:	31 d2                	xor    edx,edx
c00117d2:	eb e6                	jmp    c00117ba <SysReadDir(regs*)+0x6a>

c00117d4 <SysIsATTY(regs*)>:
c00117d4:	83 ec 1c             	sub    esp,0x1c
c00117d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117db:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00117de:	83 f8 02             	cmp    eax,0x2
c00117e1:	76 07                	jbe    c00117ea <SysIsATTY(regs*)+0x16>
c00117e3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00117e8:	75 22                	jne    c001180c <SysIsATTY(regs*)+0x38>
c00117ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117ef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117f2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00117f8:	85 c0                	test   eax,eax
c00117fa:	74 1c                	je     c0011818 <SysIsATTY(regs*)+0x44>
c00117fc:	8b 10                	mov    edx,DWORD PTR [eax]
c00117fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0011801:	ff 12                	call   DWORD PTR [edx]
c0011803:	31 d2                	xor    edx,edx
c0011805:	83 c4 1c             	add    esp,0x1c
c0011808:	0f b6 c0             	movzx  eax,al
c001180b:	c3                   	ret    
c001180c:	89 04 24             	mov    DWORD PTR [esp],eax
c001180f:	e8 ab 7c ff ff       	call   c00094bf <getFromFileDescriptor(int)>
c0011814:	85 c0                	test   eax,eax
c0011816:	75 e4                	jne    c00117fc <SysIsATTY(regs*)+0x28>
c0011818:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001181d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011822:	83 c4 1c             	add    esp,0x1c
c0011825:	c3                   	ret    

c0011826 <SysSeek(regs*)>:
c0011826:	83 ec 1c             	sub    esp,0x1c
c0011829:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001182d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011831:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0011835:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011838:	8d 71 fd             	lea    esi,[ecx-0x3]
c001183b:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011841:	77 3a                	ja     c001187d <SysSeek(regs*)+0x57>
c0011843:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011846:	e8 74 7c ff ff       	call   c00094bf <getFromFileDescriptor(int)>
c001184b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001184e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011852:	31 d2                	xor    edx,edx
c0011854:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011858:	89 04 24             	mov    DWORD PTR [esp],eax
c001185b:	e8 14 99 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0011860:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011868:	85 c0                	test   eax,eax
c001186a:	0f 95 c0             	setne  al
c001186d:	31 d2                	xor    edx,edx
c001186f:	0f b6 c0             	movzx  eax,al
c0011872:	f7 d8                	neg    eax
c0011874:	83 d2 00             	adc    edx,0x0
c0011877:	83 c4 1c             	add    esp,0x1c
c001187a:	f7 da                	neg    edx
c001187c:	c3                   	ret    
c001187d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011882:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011887:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001188b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001188f:	83 c4 1c             	add    esp,0x1c
c0011892:	c3                   	ret    

c0011893 <SysTell(regs*)>:
c0011893:	53                   	push   ebx
c0011894:	83 ec 18             	sub    esp,0x18
c0011897:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001189b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001189e:	83 f8 02             	cmp    eax,0x2
c00118a1:	76 4d                	jbe    c00118f0 <SysTell(regs*)+0x5d>
c00118a3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00118a8:	76 19                	jbe    c00118c3 <SysTell(regs*)+0x30>
c00118aa:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00118ad:	31 d2                	xor    edx,edx
c00118af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00118b5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00118bc:	83 c4 18             	add    esp,0x18
c00118bf:	31 c0                	xor    eax,eax
c00118c1:	5b                   	pop    ebx
c00118c2:	c3                   	ret    
c00118c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00118c6:	e8 f4 7b ff ff       	call   c00094bf <getFromFileDescriptor(int)>
c00118cb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00118ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00118d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00118d5:	e8 f0 98 ff ff       	call   c000b1ca <File::tell(unsigned long long*)>
c00118da:	85 c0                	test   eax,eax
c00118dc:	0f 95 c0             	setne  al
c00118df:	31 d2                	xor    edx,edx
c00118e1:	0f b6 c0             	movzx  eax,al
c00118e4:	f7 d8                	neg    eax
c00118e6:	83 d2 00             	adc    edx,0x0
c00118e9:	83 c4 18             	add    esp,0x18
c00118ec:	5b                   	pop    ebx
c00118ed:	f7 da                	neg    edx
c00118ef:	c3                   	ret    
c00118f0:	83 c4 18             	add    esp,0x18
c00118f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118f8:	5b                   	pop    ebx
c00118f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118fe:	c3                   	ret    

c00118ff <SysSize(regs*)>:
c00118ff:	53                   	push   ebx
c0011900:	83 ec 28             	sub    esp,0x28
c0011903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011907:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001190a:	83 f8 02             	cmp    eax,0x2
c001190d:	76 55                	jbe    c0011964 <SysSize(regs*)+0x65>
c001190f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011914:	76 19                	jbe    c001192f <SysSize(regs*)+0x30>
c0011916:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011919:	31 d2                	xor    edx,edx
c001191b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011921:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011928:	83 c4 28             	add    esp,0x28
c001192b:	31 c0                	xor    eax,eax
c001192d:	5b                   	pop    ebx
c001192e:	c3                   	ret    
c001192f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011932:	e8 88 7b ff ff       	call   c00094bf <getFromFileDescriptor(int)>
c0011937:	8d 54 24 1f          	lea    edx,[esp+0x1f]
c001193b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001193f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011942:	89 04 24             	mov    DWORD PTR [esp],eax
c0011945:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011949:	e8 0e 9a ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c001194e:	85 c0                	test   eax,eax
c0011950:	0f 95 c0             	setne  al
c0011953:	31 d2                	xor    edx,edx
c0011955:	0f b6 c0             	movzx  eax,al
c0011958:	f7 d8                	neg    eax
c001195a:	83 d2 00             	adc    edx,0x0
c001195d:	83 c4 28             	add    esp,0x28
c0011960:	5b                   	pop    ebx
c0011961:	f7 da                	neg    edx
c0011963:	c3                   	ret    
c0011964:	83 c4 28             	add    esp,0x28
c0011967:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001196c:	5b                   	pop    ebx
c001196d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011972:	c3                   	ret    

c0011973 <SysSizeFromFilename(regs*)>:
c0011973:	83 ec 2c             	sub    esp,0x2c
c0011976:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001197a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001197e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011982:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0011986:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011989:	83 fb 02             	cmp    ebx,0x2
c001198c:	0f 86 97 00 00 00    	jbe    c0011a29 <SysSizeFromFilename(regs*)+0xb6>
c0011992:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011998:	76 24                	jbe    c00119be <SysSizeFromFilename(regs*)+0x4b>
c001199a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001199d:	31 d2                	xor    edx,edx
c001199f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00119a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119ac:	31 c0                	xor    eax,eax
c00119ae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00119b2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00119b6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00119ba:	83 c4 2c             	add    esp,0x2c
c00119bd:	c3                   	ret    
c00119be:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00119c5:	e8 32 61 ff ff       	call   c0007afc <malloc>
c00119ca:	89 c7                	mov    edi,eax
c00119cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119d1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119d4:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00119d8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00119db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00119df:	e8 14 96 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c00119e4:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00119e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00119ec:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00119ef:	89 3c 24             	mov    DWORD PTR [esp],edi
c00119f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00119f6:	e8 61 99 ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c00119fb:	85 ff                	test   edi,edi
c00119fd:	89 c3                	mov    ebx,eax
c00119ff:	74 08                	je     c0011a09 <SysSizeFromFilename(regs*)+0x96>
c0011a01:	8b 07                	mov    eax,DWORD PTR [edi]
c0011a03:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011a06:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a09:	31 c0                	xor    eax,eax
c0011a0b:	85 db                	test   ebx,ebx
c0011a0d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011a11:	0f 95 c0             	setne  al
c0011a14:	31 d2                	xor    edx,edx
c0011a16:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a1a:	f7 d8                	neg    eax
c0011a1c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011a20:	83 d2 00             	adc    edx,0x0
c0011a23:	83 c4 2c             	add    esp,0x2c
c0011a26:	f7 da                	neg    edx
c0011a28:	c3                   	ret    
c0011a29:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a2e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a33:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a37:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011a3b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011a3f:	83 c4 2c             	add    esp,0x2c
c0011a42:	c3                   	ret    

c0011a43 <SysClose(regs*)>:
c0011a43:	53                   	push   ebx
c0011a44:	83 ec 18             	sub    esp,0x18
c0011a47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a4b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a4e:	83 f8 02             	cmp    eax,0x2
c0011a51:	76 46                	jbe    c0011a99 <SysClose(regs*)+0x56>
c0011a53:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011a59:	83 fa 01             	cmp    edx,0x1
c0011a5c:	76 25                	jbe    c0011a83 <SysClose(regs*)+0x40>
c0011a5e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011a63:	77 34                	ja     c0011a99 <SysClose(regs*)+0x56>
c0011a65:	89 04 24             	mov    DWORD PTR [esp],eax
c0011a68:	e8 52 7a ff ff       	call   c00094bf <getFromFileDescriptor(int)>
c0011a6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011a70:	89 c3                	mov    ebx,eax
c0011a72:	e8 9d 96 ff ff       	call   c000b114 <File::close()>
c0011a77:	85 db                	test   ebx,ebx
c0011a79:	74 08                	je     c0011a83 <SysClose(regs*)+0x40>
c0011a7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011a7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a80:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a83:	66 0f ef c0          	pxor   xmm0,xmm0
c0011a87:	66 0f 7e c0          	movd   eax,xmm0
c0011a8b:	83 c4 18             	add    esp,0x18
c0011a8e:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c0011a93:	66 0f 7e c2          	movd   edx,xmm0
c0011a97:	5b                   	pop    ebx
c0011a98:	c3                   	ret    
c0011a99:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c0011a9d:	eb e8                	jmp    c0011a87 <SysClose(regs*)+0x44>

c0011a9f <SysOpenDir(regs*)>:
c0011a9f:	56                   	push   esi
c0011aa0:	53                   	push   ebx
c0011aa1:	83 ec 14             	sub    esp,0x14
c0011aa4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011aa8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011aab:	85 c0                	test   eax,eax
c0011aad:	74 52                	je     c0011b01 <SysOpenDir(regs*)+0x62>
c0011aaf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011ab6:	e8 41 60 ff ff       	call   c0007afc <malloc>
c0011abb:	89 c6                	mov    esi,eax
c0011abd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ac2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ac5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011ac9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011acc:	89 34 24             	mov    DWORD PTR [esp],esi
c0011acf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ad3:	e8 42 9a ff ff       	call   c000b51a <Directory::Directory(char const*, Process*)>
c0011ad8:	85 f6                	test   esi,esi
c0011ada:	74 25                	je     c0011b01 <SysOpenDir(regs*)+0x62>
c0011adc:	89 34 24             	mov    DWORD PTR [esp],esi
c0011adf:	e8 f4 9a ff ff       	call   c000b5d8 <Directory::open()>
c0011ae4:	85 c0                	test   eax,eax
c0011ae6:	75 19                	jne    c0011b01 <SysOpenDir(regs*)+0x62>
c0011ae8:	89 34 24             	mov    DWORD PTR [esp],esi
c0011aeb:	e8 06 77 ff ff       	call   c00091f6 <UnixFile::getFileDescriptor()>
c0011af0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011af3:	66 0f ef c0          	pxor   xmm0,xmm0
c0011af7:	89 02                	mov    DWORD PTR [edx],eax
c0011af9:	c1 f8 1f             	sar    eax,0x1f
c0011afc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011aff:	eb 04                	jmp    c0011b05 <SysOpenDir(regs*)+0x66>
c0011b01:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c0011b05:	83 c4 14             	add    esp,0x14
c0011b08:	66 0f 7e c0          	movd   eax,xmm0
c0011b0c:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c0011b11:	5b                   	pop    ebx
c0011b12:	66 0f 7e c2          	movd   edx,xmm0
c0011b16:	5e                   	pop    esi
c0011b17:	c3                   	ret    

c0011b18 <SysMakeDir(regs*)>:
c0011b18:	56                   	push   esi
c0011b19:	53                   	push   ebx
c0011b1a:	83 ec 14             	sub    esp,0x14
c0011b1d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011b24:	e8 d3 5f ff ff       	call   c0007afc <malloc>
c0011b29:	89 c3                	mov    ebx,eax
c0011b2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011b37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b3b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011b3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b45:	e8 d0 99 ff ff       	call   c000b51a <Directory::Directory(char const*, Process*)>
c0011b4a:	85 db                	test   ebx,ebx
c0011b4c:	74 28                	je     c0011b76 <SysMakeDir(regs*)+0x5e>
c0011b4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b51:	e8 62 9c ff ff       	call   c000b7b8 <Directory::create()>
c0011b56:	89 c6                	mov    esi,eax
c0011b58:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b60:	31 c0                	xor    eax,eax
c0011b62:	85 f6                	test   esi,esi
c0011b64:	0f 95 c0             	setne  al
c0011b67:	31 d2                	xor    edx,edx
c0011b69:	f7 d8                	neg    eax
c0011b6b:	83 d2 00             	adc    edx,0x0
c0011b6e:	83 c4 14             	add    esp,0x14
c0011b71:	5b                   	pop    ebx
c0011b72:	f7 da                	neg    edx
c0011b74:	5e                   	pop    esi
c0011b75:	c3                   	ret    
c0011b76:	83 c4 14             	add    esp,0x14
c0011b79:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b7e:	5b                   	pop    ebx
c0011b7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b84:	5e                   	pop    esi
c0011b85:	c3                   	ret    

c0011b86 <SysCloseDir(regs*)>:
c0011b86:	53                   	push   ebx
c0011b87:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c0011b8b:	83 ec 18             	sub    esp,0x18
c0011b8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b92:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011b95:	66 0f 7e c0          	movd   eax,xmm0
c0011b99:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c0011b9e:	66 0f 7e c2          	movd   edx,xmm0
c0011ba2:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011ba5:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0011bab:	77 2f                	ja     c0011bdc <SysCloseDir(regs*)+0x56>
c0011bad:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011bb0:	e8 0a 79 ff ff       	call   c00094bf <getFromFileDescriptor(int)>
c0011bb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0011bb8:	89 c3                	mov    ebx,eax
c0011bba:	e8 75 9a ff ff       	call   c000b634 <Directory::close()>
c0011bbf:	85 db                	test   ebx,ebx
c0011bc1:	74 08                	je     c0011bcb <SysCloseDir(regs*)+0x45>
c0011bc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011bc5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011bc8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011bcb:	66 0f ef c0          	pxor   xmm0,xmm0
c0011bcf:	66 0f 7e c0          	movd   eax,xmm0
c0011bd3:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c0011bd8:	66 0f 7e c2          	movd   edx,xmm0
c0011bdc:	83 c4 18             	add    esp,0x18
c0011bdf:	5b                   	pop    ebx
c0011be0:	c3                   	ret    

c0011be1 <SysWait(regs*)>:
c0011be1:	83 ec 1c             	sub    esp,0x1c
c0011be4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011be8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011beb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011bef:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011bf2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011bf6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011bf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0011bfc:	e8 6b 3d 00 00       	call   c001596c <waitTask(int, int*, int)>
c0011c01:	83 c4 1c             	add    esp,0x1c
c0011c04:	99                   	cdq    
c0011c05:	c3                   	ret    

c0011c06 <SysNotImpl(regs*)>:
c0011c06:	83 ec 1c             	sub    esp,0x1c
c0011c09:	c7 04 24 7e 12 02 c0 	mov    DWORD PTR [esp],0xc002127e
c0011c10:	e8 20 f2 ff ff       	call   c0010e35 <KePanic(char const*)>
c0011c15:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c1a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c1f:	83 c4 1c             	add    esp,0x1c
c0011c22:	c3                   	ret    

c0011c23 <SysPanic(regs*)>:
c0011c23:	83 ec 1c             	sub    esp,0x1c
c0011c26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c2a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011c2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011c30:	e8 00 f2 ff ff       	call   c0010e35 <KePanic(char const*)>
c0011c35:	b8 01 00 00 00       	mov    eax,0x1
c0011c3a:	31 d2                	xor    edx,edx
c0011c3c:	83 c4 1c             	add    esp,0x1c
c0011c3f:	c3                   	ret    

c0011c40 <SysRmdir(regs*)>:
c0011c40:	56                   	push   esi
c0011c41:	53                   	push   ebx
c0011c42:	83 ec 14             	sub    esp,0x14
c0011c45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c49:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011c4c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011c53:	e8 a4 5e ff ff       	call   c0007afc <malloc>
c0011c58:	89 c3                	mov    ebx,eax
c0011c5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c5f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c62:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011c66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c6d:	e8 86 93 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0011c72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c75:	e8 b4 95 ff ff       	call   c000b22e <File::unlink()>
c0011c7a:	85 db                	test   ebx,ebx
c0011c7c:	89 c6                	mov    esi,eax
c0011c7e:	74 08                	je     c0011c88 <SysRmdir(regs*)+0x48>
c0011c80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011c82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c85:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011c88:	31 c0                	xor    eax,eax
c0011c8a:	85 f6                	test   esi,esi
c0011c8c:	0f 95 c0             	setne  al
c0011c8f:	31 d2                	xor    edx,edx
c0011c91:	f7 d8                	neg    eax
c0011c93:	83 d2 00             	adc    edx,0x0
c0011c96:	83 c4 14             	add    esp,0x14
c0011c99:	5b                   	pop    ebx
c0011c9a:	f7 da                	neg    edx
c0011c9c:	5e                   	pop    esi
c0011c9d:	c3                   	ret    

c0011c9e <SysUnlink(regs*)>:
c0011c9e:	56                   	push   esi
c0011c9f:	53                   	push   ebx
c0011ca0:	83 ec 14             	sub    esp,0x14
c0011ca3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ca7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011caa:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011cb1:	e8 46 5e ff ff       	call   c0007afc <malloc>
c0011cb6:	89 c3                	mov    ebx,eax
c0011cb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cbd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cc0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011cc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011cc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011ccb:	e8 28 93 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0011cd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011cd3:	e8 56 95 ff ff       	call   c000b22e <File::unlink()>
c0011cd8:	85 db                	test   ebx,ebx
c0011cda:	89 c6                	mov    esi,eax
c0011cdc:	74 08                	je     c0011ce6 <SysUnlink(regs*)+0x48>
c0011cde:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ce0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ce3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ce6:	31 c0                	xor    eax,eax
c0011ce8:	85 f6                	test   esi,esi
c0011cea:	0f 95 c0             	setne  al
c0011ced:	31 d2                	xor    edx,edx
c0011cef:	f7 d8                	neg    eax
c0011cf1:	83 d2 00             	adc    edx,0x0
c0011cf4:	83 c4 14             	add    esp,0x14
c0011cf7:	5b                   	pop    ebx
c0011cf8:	f7 da                	neg    edx
c0011cfa:	5e                   	pop    esi
c0011cfb:	c3                   	ret    

c0011cfc <SysGetArgv(regs*)>:
c0011cfc:	83 ec 1c             	sub    esp,0x1c
c0011cff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0011d03:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011d06:	85 c0                	test   eax,eax
c0011d08:	78 2b                	js     c0011d35 <SysGetArgv(regs*)+0x39>
c0011d0a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011d10:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011d13:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011d19:	7d 1a                	jge    c0011d35 <SysGetArgv(regs*)+0x39>
c0011d1b:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011d22:	85 c0                	test   eax,eax
c0011d24:	74 17                	je     c0011d3d <SysGetArgv(regs*)+0x41>
c0011d26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d2a:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011d2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011d30:	e8 eb e9 fe ff       	call   c0000720 <strcpy>
c0011d35:	31 c0                	xor    eax,eax
c0011d37:	31 d2                	xor    edx,edx
c0011d39:	83 c4 1c             	add    esp,0x1c
c0011d3c:	c3                   	ret    
c0011d3d:	b8 01 00 00 00       	mov    eax,0x1
c0011d42:	31 d2                	xor    edx,edx
c0011d44:	83 c4 1c             	add    esp,0x1c
c0011d47:	c3                   	ret    

c0011d48 <SysUSleep(regs*)>:
c0011d48:	83 ec 1c             	sub    esp,0x1c
c0011d4b:	31 c0                	xor    eax,eax
c0011d4d:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0011d51:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011d55:	be 64 00 00 00       	mov    esi,0x64
c0011d5a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011d5e:	8b 59 28             	mov    ebx,DWORD PTR [ecx+0x28]
c0011d61:	8b 49 20             	mov    ecx,DWORD PTR [ecx+0x20]
c0011d64:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0011d68:	89 da                	mov    edx,ebx
c0011d6a:	31 db                	xor    ebx,ebx
c0011d6c:	09 c8                	or     eax,ecx
c0011d6e:	09 da                	or     edx,ebx
c0011d70:	89 04 24             	mov    DWORD PTR [esp],eax
c0011d73:	31 c9                	xor    ecx,ecx
c0011d75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0011d79:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011d7d:	e8 ce cc 00 00       	call   c001ea50 <__udivdi3>
c0011d82:	89 04 24             	mov    DWORD PTR [esp],eax
c0011d85:	e8 b2 3c 00 00       	call   c0015a3c <milliTenthSleep(unsigned int)>
c0011d8a:	31 c0                	xor    eax,eax
c0011d8c:	31 d2                	xor    edx,edx
c0011d8e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011d92:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011d96:	83 c4 1c             	add    esp,0x1c
c0011d99:	c3                   	ret    

c0011d9a <SysSpawn(regs*)>:
c0011d9a:	83 ec 1c             	sub    esp,0x1c
c0011d9d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011da1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011da5:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0011da9:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011dac:	85 f6                	test   esi,esi
c0011dae:	75 10                	jne    c0011dc0 <SysSpawn(regs*)+0x26>
c0011db0:	31 c0                	xor    eax,eax
c0011db2:	31 d2                	xor    edx,edx
c0011db4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011db8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011dbc:	83 c4 1c             	add    esp,0x1c
c0011dbf:	c3                   	ret    
c0011dc0:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0011dc7:	e8 30 5d ff ff       	call   c0007afc <malloc>
c0011dcc:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011dcf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011dd2:	89 c6                	mov    esi,eax
c0011dd4:	31 c0                	xor    eax,eax
c0011dd6:	85 c9                	test   ecx,ecx
c0011dd8:	75 08                	jne    c0011de2 <SysSpawn(regs*)+0x48>
c0011dda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ddf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011de2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011de6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011dea:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ded:	89 34 24             	mov    DWORD PTR [esp],esi
c0011df0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011df4:	e8 ff 32 00 00       	call   c00150f8 <Process::Process(char const*, Process*, char**)>
c0011df9:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011e00:	75 ae                	jne    c0011db0 <SysSpawn(regs*)+0x16>
c0011e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e05:	e8 02 38 00 00       	call   c001560c <Process::createUserThread()>
c0011e0a:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e0c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011e10:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011e14:	83 c4 1c             	add    esp,0x1c
c0011e17:	99                   	cdq    
c0011e18:	c3                   	ret    

c0011e19 <SysGetEnv(regs*)>:
c0011e19:	83 ec 2c             	sub    esp,0x2c
c0011e1c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011e20:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011e24:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0011e28:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0011e2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e31:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011e34:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011e37:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e3d:	e8 ab ee ff ff       	call   c0010ced <Krnl::getProcessTotalEnvCount(Process*)>
c0011e42:	39 c7                	cmp    edi,eax
c0011e44:	7c 1b                	jl     c0011e61 <SysGetEnv(regs*)+0x48>
c0011e46:	31 c0                	xor    eax,eax
c0011e48:	31 d2                	xor    edx,edx
c0011e4a:	85 f6                	test   esi,esi
c0011e4c:	74 03                	je     c0011e51 <SysGetEnv(regs*)+0x38>
c0011e4e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011e51:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e55:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011e59:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011e5d:	83 c4 2c             	add    esp,0x2c
c0011e60:	c3                   	ret    
c0011e61:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011e65:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011e69:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011e6f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011e72:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011e79:	e8 8f ee ff ff       	call   c0010d0d <Krnl::getProcessEnvPair(Process*, int)>
c0011e7e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e81:	83 ec 04             	sub    esp,0x4
c0011e84:	85 d2                	test   edx,edx
c0011e86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e8a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011e8e:	75 28                	jne    c0011eb8 <SysGetEnv(regs*)+0x9f>
c0011e90:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e93:	e8 88 e7 fe ff       	call   c0000620 <strlen>
c0011e98:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011e9b:	89 c3                	mov    ebx,eax
c0011e9d:	e8 7e e7 fe ff       	call   c0000620 <strlen>
c0011ea2:	31 d2                	xor    edx,edx
c0011ea4:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011ea8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011eac:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011eb0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011eb4:	83 c4 2c             	add    esp,0x2c
c0011eb7:	c3                   	ret    
c0011eb8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011ebb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ebf:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ec2:	e8 59 e8 fe ff       	call   c0000720 <strcpy>
c0011ec7:	b8 98 12 02 c0       	mov    eax,0xc0021298
c0011ecc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ed0:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ed3:	e8 58 ea fe ff       	call   c0000930 <strcat>
c0011ed8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0011edc:	89 34 24             	mov    DWORD PTR [esp],esi
c0011edf:	e8 4c ea fe ff       	call   c0000930 <strcat>
c0011ee4:	31 c0                	xor    eax,eax
c0011ee6:	31 d2                	xor    edx,edx
c0011ee8:	eb be                	jmp    c0011ea8 <SysGetEnv(regs*)+0x8f>

c0011eea <SysSetFatAttrib(regs*)>:
c0011eea:	83 ec 1c             	sub    esp,0x1c
c0011eed:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0011ef1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011ef5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011ef9:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0011efd:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011f00:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011f07:	e8 f0 5b ff ff       	call   c0007afc <malloc>
c0011f0c:	89 c3                	mov    ebx,eax
c0011f0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f16:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0011f1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011f21:	e8 d2 90 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0011f26:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011f29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f2c:	0f b6 d4             	movzx  edx,ah
c0011f2f:	0f b6 c0             	movzx  eax,al
c0011f32:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011f36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011f3a:	e8 89 93 ff ff       	call   c000b2c8 <File::chfatattr(unsigned char, unsigned char)>
c0011f3f:	85 db                	test   ebx,ebx
c0011f41:	89 c6                	mov    esi,eax
c0011f43:	74 08                	je     c0011f4d <SysSetFatAttrib(regs*)+0x63>
c0011f45:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f4a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f4d:	31 c0                	xor    eax,eax
c0011f4f:	85 f6                	test   esi,esi
c0011f51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f55:	0f 95 c0             	setne  al
c0011f58:	31 d2                	xor    edx,edx
c0011f5a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011f5e:	f7 d8                	neg    eax
c0011f60:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011f64:	83 d2 00             	adc    edx,0x0
c0011f67:	83 c4 1c             	add    esp,0x1c
c0011f6a:	f7 da                	neg    edx
c0011f6c:	c3                   	ret    

c0011f6d <SysPipe(regs*)>:
c0011f6d:	83 ec 1c             	sub    esp,0x1c
c0011f70:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011f74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f78:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0011f7c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0011f80:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011f83:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011f86:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0011f8d:	e8 6a 5b ff ff       	call   c0007afc <malloc>
c0011f92:	89 c3                	mov    ebx,eax
c0011f94:	b8 00 50 00 00       	mov    eax,0x5000
c0011f99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011f9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fa0:	e8 af 64 ff ff       	call   c0008454 <Pipe::Pipe(int)>
c0011fa5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fa8:	e8 49 72 ff ff       	call   c00091f6 <UnixFile::getFileDescriptor()>
c0011fad:	89 07                	mov    DWORD PTR [edi],eax
c0011faf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fb2:	e8 3f 72 ff ff       	call   c00091f6 <UnixFile::getFileDescriptor()>
c0011fb7:	31 d2                	xor    edx,edx
c0011fb9:	89 06                	mov    DWORD PTR [esi],eax
c0011fbb:	31 c0                	xor    eax,eax
c0011fbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fc1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011fc5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011fc9:	83 c4 1c             	add    esp,0x1c
c0011fcc:	c3                   	ret    

c0011fcd <SysGetUnixTime(regs*)>:
c0011fcd:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011fd2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011fd8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011fdc:	e9 2b 9a ff ff       	jmp    c000ba0c <Clock::timeInSecondsLocal()>

c0011fe1 <string_ends_with(char const*, char const*)>:
c0011fe1:	83 ec 1c             	sub    esp,0x1c
c0011fe4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011fe8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011fec:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0011ff0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0011ff4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011ff8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ffb:	e8 20 e6 fe ff       	call   c0000620 <strlen>
c0012000:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012003:	89 c6                	mov    esi,eax
c0012005:	e8 16 e6 fe ff       	call   c0000620 <strlen>
c001200a:	31 d2                	xor    edx,edx
c001200c:	39 c6                	cmp    esi,eax
c001200e:	7d 12                	jge    c0012022 <string_ends_with(char const*, char const*)+0x41>
c0012010:	89 d0                	mov    eax,edx
c0012012:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012016:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001201a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001201e:	83 c4 1c             	add    esp,0x1c
c0012021:	c3                   	ret    
c0012022:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0012026:	29 c6                	sub    esi,eax
c0012028:	01 f3                	add    ebx,esi
c001202a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001202d:	e8 0e e8 fe ff       	call   c0000840 <strcmp>
c0012032:	31 d2                	xor    edx,edx
c0012034:	85 c0                	test   eax,eax
c0012036:	0f 94 c2             	sete   dl
c0012039:	eb d5                	jmp    c0012010 <string_ends_with(char const*, char const*)+0x2f>

c001203b <SysOpen(regs*)>:
c001203b:	56                   	push   esi
c001203c:	53                   	push   ebx
c001203d:	81 ec 14 01 00 00    	sub    esp,0x114
c0012043:	8b b4 24 20 01 00 00 	mov    esi,DWORD PTR [esp+0x120]
c001204a:	8b 4e 20             	mov    ecx,DWORD PTR [esi+0x20]
c001204d:	85 c9                	test   ecx,ecx
c001204f:	0f 84 cf 01 00 00    	je     c0012224 <SysOpen(regs*)+0x1e9>
c0012055:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0012058:	85 c0                	test   eax,eax
c001205a:	0f 84 c4 01 00 00    	je     c0012224 <SysOpen(regs*)+0x1e9>
c0012060:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012064:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0012068:	ba 9a 12 02 c0       	mov    edx,0xc002129a
c001206d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012071:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012074:	e8 d8 8d ff ff       	call   c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012079:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001207c:	e8 9f e5 fe ff       	call   c0000620 <strlen>
c0012081:	48                   	dec    eax
c0012082:	74 29                	je     c00120ad <SysOpen(regs*)+0x72>
c0012084:	0f b6 54 04 10       	movzx  edx,BYTE PTR [esp+eax*1+0x10]
c0012089:	80 fa 2e             	cmp    dl,0x2e
c001208c:	74 1a                	je     c00120a8 <SysOpen(regs*)+0x6d>
c001208e:	80 fa 3a             	cmp    dl,0x3a
c0012091:	74 15                	je     c00120a8 <SysOpen(regs*)+0x6d>
c0012093:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012097:	48                   	dec    eax
c0012098:	74 13                	je     c00120ad <SysOpen(regs*)+0x72>
c001209a:	0f b6 14 03          	movzx  edx,BYTE PTR [ebx+eax*1]
c001209e:	80 fa 3a             	cmp    dl,0x3a
c00120a1:	74 05                	je     c00120a8 <SysOpen(regs*)+0x6d>
c00120a3:	80 fa 2e             	cmp    dl,0x2e
c00120a6:	75 eb                	jne    c0012093 <SysOpen(regs*)+0x58>
c00120a8:	c6 44 04 10 00       	mov    BYTE PTR [esp+eax*1+0x10],0x0
c00120ad:	b8 9e 12 02 c0       	mov    eax,0xc002129e
c00120b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00120b6:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00120b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00120bc:	e8 20 ff ff ff       	call   c0011fe1 <string_ends_with(char const*, char const*)>
c00120c1:	85 c0                	test   eax,eax
c00120c3:	74 2a                	je     c00120ef <SysOpen(regs*)+0xb4>
c00120c5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00120c8:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00120ce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120d5:	66 0f ef c0          	pxor   xmm0,xmm0
c00120d9:	81 c4 14 01 00 00    	add    esp,0x114
c00120df:	66 0f 7e c0          	movd   eax,xmm0
c00120e3:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c00120e8:	5b                   	pop    ebx
c00120e9:	66 0f 7e c2          	movd   edx,xmm0
c00120ed:	5e                   	pop    esi
c00120ee:	c3                   	ret    
c00120ef:	b8 a3 12 02 c0       	mov    eax,0xc00212a3
c00120f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00120f8:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00120fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00120fe:	e8 de fe ff ff       	call   c0011fe1 <string_ends_with(char const*, char const*)>
c0012103:	85 c0                	test   eax,eax
c0012105:	75 be                	jne    c00120c5 <SysOpen(regs*)+0x8a>
c0012107:	b8 9f 12 02 c0       	mov    eax,0xc002129f
c001210c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012110:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0012113:	89 04 24             	mov    DWORD PTR [esp],eax
c0012116:	e8 25 e7 fe ff       	call   c0000840 <strcmp>
c001211b:	85 c0                	test   eax,eax
c001211d:	74 a6                	je     c00120c5 <SysOpen(regs*)+0x8a>
c001211f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012122:	b8 9e 12 02 c0       	mov    eax,0xc002129e
c0012127:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001212b:	e8 b1 fe ff ff       	call   c0011fe1 <string_ends_with(char const*, char const*)>
c0012130:	85 c0                	test   eax,eax
c0012132:	75 91                	jne    c00120c5 <SysOpen(regs*)+0x8a>
c0012134:	b8 a8 12 02 c0       	mov    eax,0xc00212a8
c0012139:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001213d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0012140:	89 04 24             	mov    DWORD PTR [esp],eax
c0012143:	e8 99 fe ff ff       	call   c0011fe1 <string_ends_with(char const*, char const*)>
c0012148:	85 c0                	test   eax,eax
c001214a:	0f 85 dd 00 00 00    	jne    c001222d <SysOpen(regs*)+0x1f2>
c0012150:	b9 ad 12 02 c0       	mov    ecx,0xc00212ad
c0012155:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012159:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001215c:	89 04 24             	mov    DWORD PTR [esp],eax
c001215f:	e8 7d fe ff ff       	call   c0011fe1 <string_ends_with(char const*, char const*)>
c0012164:	85 c0                	test   eax,eax
c0012166:	0f 85 c1 00 00 00    	jne    c001222d <SysOpen(regs*)+0x1f2>
c001216c:	ba a9 12 02 c0       	mov    edx,0xc00212a9
c0012171:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012175:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0012178:	89 04 24             	mov    DWORD PTR [esp],eax
c001217b:	e8 c0 e6 fe ff       	call   c0000840 <strcmp>
c0012180:	85 c0                	test   eax,eax
c0012182:	0f 84 a5 00 00 00    	je     c001222d <SysOpen(regs*)+0x1f2>
c0012188:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001218b:	b8 a8 12 02 c0       	mov    eax,0xc00212a8
c0012190:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012194:	e8 48 fe ff ff       	call   c0011fe1 <string_ends_with(char const*, char const*)>
c0012199:	85 c0                	test   eax,eax
c001219b:	0f 85 8c 00 00 00    	jne    c001222d <SysOpen(regs*)+0x1f2>
c00121a1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00121a8:	e8 4f 59 ff ff       	call   c0007afc <malloc>
c00121ad:	89 c3                	mov    ebx,eax
c00121af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00121bb:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00121be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00121c5:	e8 2e 8e ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c00121ca:	85 db                	test   ebx,ebx
c00121cc:	74 56                	je     c0012224 <SysOpen(regs*)+0x1e9>
c00121ce:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c00121d1:	0f b6 c2             	movzx  eax,dl
c00121d4:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00121d7:	89 d0                	mov    eax,edx
c00121d9:	83 e0 01             	and    eax,0x1
c00121dc:	f6 c2 02             	test   dl,0x2
c00121df:	74 03                	je     c00121e4 <SysOpen(regs*)+0x1a9>
c00121e1:	83 c8 02             	or     eax,0x2
c00121e4:	f6 c2 04             	test   dl,0x4
c00121e7:	74 03                	je     c00121ec <SysOpen(regs*)+0x1b1>
c00121e9:	83 c8 04             	or     eax,0x4
c00121ec:	f6 c2 08             	test   dl,0x8
c00121ef:	74 03                	je     c00121f4 <SysOpen(regs*)+0x1b9>
c00121f1:	83 c8 0a             	or     eax,0xa
c00121f4:	f6 c2 10             	test   dl,0x10
c00121f7:	74 03                	je     c00121fc <SysOpen(regs*)+0x1c1>
c00121f9:	83 c8 12             	or     eax,0x12
c00121fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012203:	e8 ae 8e ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0012208:	85 c0                	test   eax,eax
c001220a:	75 18                	jne    c0012224 <SysOpen(regs*)+0x1e9>
c001220c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001220f:	e8 e2 6f ff ff       	call   c00091f6 <UnixFile::getFileDescriptor()>
c0012214:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c0012217:	89 02                	mov    DWORD PTR [edx],eax
c0012219:	c1 f8 1f             	sar    eax,0x1f
c001221c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001221f:	e9 b1 fe ff ff       	jmp    c00120d5 <SysOpen(regs*)+0x9a>
c0012224:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c0012228:	e9 ac fe ff ff       	jmp    c00120d9 <SysOpen(regs*)+0x9e>
c001222d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0012230:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012236:	e9 93 fe ff ff       	jmp    c00120ce <SysOpen(regs*)+0x93>

c001223b <KeSystemCall(regs*, void*)>:
c001223b:	53                   	push   ebx
c001223c:	83 ec 08             	sub    esp,0x8
c001223f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012243:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012246:	83 f8 3b             	cmp    eax,0x3b
c0012249:	77 16                	ja     c0012261 <KeSystemCall(regs*, void*)+0x26>
c001224b:	8b 14 85 60 26 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd9a0]
c0012252:	85 d2                	test   edx,edx
c0012254:	74 0b                	je     c0012261 <KeSystemCall(regs*, void*)+0x26>
c0012256:	83 ec 0c             	sub    esp,0xc
c0012259:	53                   	push   ebx
c001225a:	ff d2                	call   edx
c001225c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001225f:	eb 0d                	jmp    c001226e <KeSystemCall(regs*, void*)+0x33>
c0012261:	52                   	push   edx
c0012262:	52                   	push   edx
c0012263:	50                   	push   eax
c0012264:	68 b2 12 02 c0       	push   0xc00212b2
c0012269:	e8 08 88 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001226e:	83 c4 10             	add    esp,0x10
c0012271:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012276:	83 c4 08             	add    esp,0x8
c0012279:	31 d2                	xor    edx,edx
c001227b:	5b                   	pop    ebx
c001227c:	c3                   	ret    
c001227d:	66 90                	xchg   ax,ax
c001227f:	90                   	nop

c0012280 <KeSwitchEndian16(unsigned short)>:
c0012280:	83 ec 04             	sub    esp,0x4
c0012283:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012287:	66 89 04 24          	mov    WORD PTR [esp],ax
c001228b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001228f:	c1 f8 08             	sar    eax,0x8
c0012292:	0f bf d0             	movsx  edx,ax
c0012295:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012299:	c1 e0 08             	shl    eax,0x8
c001229c:	98                   	cwde   
c001229d:	09 d0                	or     eax,edx
c001229f:	98                   	cwde   
c00122a0:	0f b7 c0             	movzx  eax,ax
c00122a3:	83 c4 04             	add    esp,0x4
c00122a6:	c3                   	ret    
c00122a7:	90                   	nop

c00122a8 <KeSwitchEndian32(unsigned int)>:
c00122a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122ac:	c1 e8 18             	shr    eax,0x18
c00122af:	89 c2                	mov    edx,eax
c00122b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122b5:	c1 e0 08             	shl    eax,0x8
c00122b8:	25 00 00 ff 00       	and    eax,0xff0000
c00122bd:	09 c2                	or     edx,eax
c00122bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122c3:	c1 e8 08             	shr    eax,0x8
c00122c6:	25 00 ff 00 00       	and    eax,0xff00
c00122cb:	09 c2                	or     edx,eax
c00122cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122d1:	c1 e0 18             	shl    eax,0x18
c00122d4:	09 d0                	or     eax,edx
c00122d6:	c3                   	ret    
c00122d7:	90                   	nop

c00122d8 <EthernetCRC32(unsigned char*, int)>:
c00122d8:	83 ec 10             	sub    esp,0x10
c00122db:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00122e0:	75 0a                	jne    c00122ec <EthernetCRC32(unsigned char*, int)+0x14>
c00122e2:	b8 00 00 00 00       	mov    eax,0x0
c00122e7:	e9 8c 00 00 00       	jmp    c0012378 <EthernetCRC32(unsigned char*, int)+0xa0>
c00122ec:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00122f1:	7f 09                	jg     c00122fc <EthernetCRC32(unsigned char*, int)+0x24>
c00122f3:	b8 00 00 00 00       	mov    eax,0x0
c00122f8:	eb 7e                	jmp    c0012378 <EthernetCRC32(unsigned char*, int)+0xa0>
c00122fa:	66 90                	xchg   ax,ax
c00122fc:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012304:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001230c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012310:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012314:	7d 5a                	jge    c0012370 <EthernetCRC32(unsigned char*, int)+0x98>
c0012316:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001231a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001231e:	01 d0                	add    eax,edx
c0012320:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0012323:	0f b6 c0             	movzx  eax,al
c0012326:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001232a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012332:	66 90                	xchg   ax,ax
c0012334:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012339:	7f 2d                	jg     c0012368 <EthernetCRC32(unsigned char*, int)+0x90>
c001233b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001233f:	83 e0 01             	and    eax,0x1
c0012342:	74 10                	je     c0012354 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012348:	d1 e8                	shr    eax,1
c001234a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001234f:	eb 0b                	jmp    c001235c <EthernetCRC32(unsigned char*, int)+0x84>
c0012351:	8d 76 00             	lea    esi,[esi+0x0]
c0012354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012358:	d1 e8                	shr    eax,1
c001235a:	66 90                	xchg   ax,ax
c001235c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012360:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0012364:	eb ce                	jmp    c0012334 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012366:	66 90                	xchg   ax,ax
c0012368:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001236c:	eb 9e                	jmp    c001230c <EthernetCRC32(unsigned char*, int)+0x34>
c001236e:	66 90                	xchg   ax,ax
c0012370:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012374:	f7 d0                	not    eax
c0012376:	66 90                	xchg   ax,ax
c0012378:	83 c4 10             	add    esp,0x10
c001237b:	c3                   	ret    

c001237c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c001237c:	83 ec 3c             	sub    esp,0x3c
c001237f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0012383:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c0012388:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001238c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012390:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012394:	0f b7 40 0c          	movzx  eax,WORD PTR [eax+0xc]
c0012398:	3d 06 08 00 00       	cmp    eax,0x806
c001239d:	75 11                	jne    c00123b0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x34>
c001239f:	c7 04 24 c6 12 02 c0 	mov    DWORD PTR [esp],0xc00212c6
c00123a6:	e8 cb 86 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00123ab:	eb 1f                	jmp    c00123cc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x50>
c00123ad:	8d 76 00             	lea    esi,[esi+0x0]
c00123b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123b4:	0f b7 40 0c          	movzx  eax,WORD PTR [eax+0xc]
c00123b8:	3d 00 08 00 00       	cmp    eax,0x800
c00123bd:	75 0d                	jne    c00123cc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x50>
c00123bf:	c7 04 24 dc 12 02 c0 	mov    DWORD PTR [esp],0xc00212dc
c00123c6:	e8 ab 86 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00123cb:	90                   	nop
c00123cc:	90                   	nop
c00123cd:	83 c4 3c             	add    esp,0x3c
c00123d0:	c3                   	ret    

c00123d1 <CmOpen(char const*)>:
c00123d1:	57                   	push   edi
c00123d2:	56                   	push   esi
c00123d3:	53                   	push   ebx
c00123d4:	83 ec 1c             	sub    esp,0x1c
c00123d7:	6a 30                	push   0x30
c00123d9:	e8 1e 57 ff ff       	call   c0007afc <malloc>
c00123de:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00123e5:	89 c3                	mov    ebx,eax
c00123e7:	e8 10 57 ff ff       	call   c0007afc <malloc>
c00123ec:	83 c4 0c             	add    esp,0xc
c00123ef:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00123f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00123f9:	89 c6                	mov    esi,eax
c00123fb:	50                   	push   eax
c00123fc:	e8 f7 8b ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0012401:	83 c4 0c             	add    esp,0xc
c0012404:	89 33                	mov    DWORD PTR [ebx],esi
c0012406:	8d 44 24 07          	lea    eax,[esp+0x7]
c001240a:	50                   	push   eax
c001240b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001240f:	50                   	push   eax
c0012410:	56                   	push   esi
c0012411:	e8 46 8f ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c0012416:	5a                   	pop    edx
c0012417:	59                   	pop    ecx
c0012418:	6a 01                	push   0x1
c001241a:	ff 33                	push   DWORD PTR [ebx]
c001241c:	e8 95 8c ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0012421:	5e                   	pop    esi
c0012422:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012426:	e8 d1 56 ff ff       	call   c0007afc <malloc>
c001242b:	5a                   	pop    edx
c001242c:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012430:	89 c7                	mov    edi,eax
c0012432:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012434:	8b 10                	mov    edx,DWORD PTR [eax]
c0012436:	56                   	push   esi
c0012437:	57                   	push   edi
c0012438:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001243c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012440:	50                   	push   eax
c0012441:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012444:	83 c4 14             	add    esp,0x14
c0012447:	ff 33                	push   DWORD PTR [ebx]
c0012449:	e8 c6 8c ff ff       	call   c000b114 <File::close()>
c001244e:	59                   	pop    ecx
c001244f:	58                   	pop    eax
c0012450:	6a 13                	push   0x13
c0012452:	ff 33                	push   DWORD PTR [ebx]
c0012454:	e8 5d 8c ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0012459:	8b 03                	mov    eax,DWORD PTR [ebx]
c001245b:	8b 10                	mov    edx,DWORD PTR [eax]
c001245d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012460:	57                   	push   edi
c0012461:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012465:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012469:	50                   	push   eax
c001246a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001246d:	83 c4 14             	add    esp,0x14
c0012470:	57                   	push   edi
c0012471:	e8 99 56 ff ff       	call   c0007b0f <free>
c0012476:	83 c4 10             	add    esp,0x10
c0012479:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001247c:	75 10                	jne    c001248e <CmOpen(char const*)+0xbd>
c001247e:	83 ec 0c             	sub    esp,0xc
c0012481:	68 f1 12 02 c0       	push   0xc00212f1
c0012486:	e8 aa e9 ff ff       	call   c0010e35 <KePanic(char const*)>
c001248b:	83 c4 10             	add    esp,0x10
c001248e:	50                   	push   eax
c001248f:	6a 00                	push   0x0
c0012491:	6a 00                	push   0x0
c0012493:	ff 33                	push   DWORD PTR [ebx]
c0012495:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012498:	e8 d7 8c ff ff       	call   c000b174 <File::seek(unsigned long long)>
c001249d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001249f:	8b 10                	mov    edx,DWORD PTR [eax]
c00124a1:	89 34 24             	mov    DWORD PTR [esp],esi
c00124a4:	57                   	push   edi
c00124a5:	6a 00                	push   0x0
c00124a7:	6a 2b                	push   0x2b
c00124a9:	50                   	push   eax
c00124aa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00124ad:	83 c4 1c             	add    esp,0x1c
c00124b0:	6a 00                	push   0x0
c00124b2:	6a 00                	push   0x0
c00124b4:	ff 33                	push   DWORD PTR [ebx]
c00124b6:	e8 b9 8c ff ff       	call   c000b174 <File::seek(unsigned long long)>
c00124bb:	83 c4 0c             	add    esp,0xc
c00124be:	6a 08                	push   0x8
c00124c0:	68 02 13 02 c0       	push   0xc0021302
c00124c5:	57                   	push   edi
c00124c6:	e8 b5 de fe ff       	call   c0000380 <memcmp>
c00124cb:	83 c4 10             	add    esp,0x10
c00124ce:	85 c0                	test   eax,eax
c00124d0:	74 10                	je     c00124e2 <CmOpen(char const*)+0x111>
c00124d2:	83 ec 0c             	sub    esp,0xc
c00124d5:	68 0b 13 02 c0       	push   0xc002130b
c00124da:	e8 56 e9 ff ff       	call   c0010e35 <KePanic(char const*)>
c00124df:	83 c4 10             	add    esp,0x10
c00124e2:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c00124e6:	83 c4 10             	add    esp,0x10
c00124e9:	89 d8                	mov    eax,ebx
c00124eb:	5b                   	pop    ebx
c00124ec:	5e                   	pop    esi
c00124ed:	5f                   	pop    edi
c00124ee:	c3                   	ret    

c00124ef <CmClose(Reghive_Tag*)>:
c00124ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124f3:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00124f7:	74 0b                	je     c0012504 <CmClose(Reghive_Tag*)+0x15>
c00124f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00124fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00124ff:	e9 10 8c ff ff       	jmp    c000b114 <File::close()>
c0012504:	c3                   	ret    

c0012505 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012505:	53                   	push   ebx
c0012506:	83 ec 18             	sub    esp,0x18
c0012509:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001250d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012511:	74 29                	je     c001253c <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012513:	50                   	push   eax
c0012514:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012519:	99                   	cdq    
c001251a:	52                   	push   edx
c001251b:	50                   	push   eax
c001251c:	ff 33                	push   DWORD PTR [ebx]
c001251e:	e8 51 8c ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0012523:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012525:	5a                   	pop    edx
c0012526:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001252a:	8b 10                	mov    edx,DWORD PTR [eax]
c001252c:	51                   	push   ecx
c001252d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012531:	6a 00                	push   0x0
c0012533:	6a 2b                	push   0x2b
c0012535:	50                   	push   eax
c0012536:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012539:	83 c4 20             	add    esp,0x20
c001253c:	83 c4 18             	add    esp,0x18
c001253f:	5b                   	pop    ebx
c0012540:	c3                   	ret    

c0012541 <CmGetString(Reghive_Tag*, int, char*)>:
c0012541:	55                   	push   ebp
c0012542:	57                   	push   edi
c0012543:	56                   	push   esi
c0012544:	53                   	push   ebx
c0012545:	31 db                	xor    ebx,ebx
c0012547:	83 ec 70             	sub    esp,0x70
c001254a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001254e:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012555:	50                   	push   eax
c0012556:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001255d:	55                   	push   ebp
c001255e:	e8 a2 ff ff ff       	call   c0012505 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012563:	83 c4 10             	add    esp,0x10
c0012566:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c001256b:	c1 e0 08             	shl    eax,0x8
c001256e:	89 c2                	mov    edx,eax
c0012570:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012575:	09 d0                	or     eax,edx
c0012577:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c001257c:	c1 e0 08             	shl    eax,0x8
c001257f:	09 d0                	or     eax,edx
c0012581:	74 25                	je     c00125a8 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012583:	52                   	push   edx
c0012584:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012588:	52                   	push   edx
c0012589:	6b fb 0d             	imul   edi,ebx,0xd
c001258c:	50                   	push   eax
c001258d:	55                   	push   ebp
c001258e:	e8 72 ff ff ff       	call   c0012505 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012593:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012597:	b9 27 00 00 00       	mov    ecx,0x27
c001259c:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00125a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00125a5:	83 c4 10             	add    esp,0x10
c00125a8:	83 c3 03             	add    ebx,0x3
c00125ab:	83 fb 15             	cmp    ebx,0x15
c00125ae:	75 b6                	jne    c0012566 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c00125b0:	83 c4 6c             	add    esp,0x6c
c00125b3:	5b                   	pop    ebx
c00125b4:	5e                   	pop    esi
c00125b5:	5f                   	pop    edi
c00125b6:	5d                   	pop    ebp
c00125b7:	c3                   	ret    

c00125b8 <CmEnterDirectory(Reghive_Tag*, int)>:
c00125b8:	83 ec 40             	sub    esp,0x40
c00125bb:	8d 44 24 09          	lea    eax,[esp+0x9]
c00125bf:	50                   	push   eax
c00125c0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00125c4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00125c8:	e8 38 ff ff ff       	call   c0012505 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00125cd:	83 c4 10             	add    esp,0x10
c00125d0:	83 c8 ff             	or     eax,0xffffffff
c00125d3:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c00125d8:	75 19                	jne    c00125f3 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c00125da:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00125df:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c00125e4:	c1 e0 08             	shl    eax,0x8
c00125e7:	09 c2                	or     edx,eax
c00125e9:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c00125ee:	c1 e0 10             	shl    eax,0x10
c00125f1:	09 d0                	or     eax,edx
c00125f3:	83 c4 3c             	add    esp,0x3c
c00125f6:	c3                   	ret    

c00125f7 <CmGetNext(Reghive_Tag*, int)>:
c00125f7:	83 ec 40             	sub    esp,0x40
c00125fa:	8d 44 24 09          	lea    eax,[esp+0x9]
c00125fe:	50                   	push   eax
c00125ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012603:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012607:	e8 f9 fe ff ff       	call   c0012505 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001260c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012611:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012616:	c1 e0 08             	shl    eax,0x8
c0012619:	09 c2                	or     edx,eax
c001261b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012620:	83 c4 4c             	add    esp,0x4c
c0012623:	c1 e0 10             	shl    eax,0x10
c0012626:	09 d0                	or     eax,edx
c0012628:	c3                   	ret    

c0012629 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012629:	53                   	push   ebx
c001262a:	83 ec 18             	sub    esp,0x18
c001262d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012631:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012635:	74 29                	je     c0012660 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012637:	50                   	push   eax
c0012638:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c001263d:	99                   	cdq    
c001263e:	52                   	push   edx
c001263f:	50                   	push   eax
c0012640:	ff 33                	push   DWORD PTR [ebx]
c0012642:	e8 2d 8b ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0012647:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012649:	5a                   	pop    edx
c001264a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001264e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012650:	51                   	push   ecx
c0012651:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012655:	6a 00                	push   0x0
c0012657:	6a 2b                	push   0x2b
c0012659:	50                   	push   eax
c001265a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001265d:	83 c4 20             	add    esp,0x20
c0012660:	83 c4 18             	add    esp,0x18
c0012663:	5b                   	pop    ebx
c0012664:	c3                   	ret    

c0012665 <CmFreeExtent(Reghive_Tag*, int)>:
c0012665:	53                   	push   ebx
c0012666:	83 ec 3c             	sub    esp,0x3c
c0012669:	6a 2b                	push   0x2b
c001266b:	6a 00                	push   0x0
c001266d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012671:	53                   	push   ebx
c0012672:	e8 09 df fe ff       	call   c0000580 <memset>
c0012677:	83 c4 0c             	add    esp,0xc
c001267a:	53                   	push   ebx
c001267b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001267f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012683:	e8 a1 ff ff ff       	call   c0012629 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012688:	83 c4 48             	add    esp,0x48
c001268b:	5b                   	pop    ebx
c001268c:	c3                   	ret    

c001268d <CmUpdateHeader(Reghive_Tag*)>:
c001268d:	83 ec 0c             	sub    esp,0xc
c0012690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012694:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012698:	74 10                	je     c00126aa <CmUpdateHeader(Reghive_Tag*)+0x1d>
c001269a:	52                   	push   edx
c001269b:	8d 50 05             	lea    edx,[eax+0x5]
c001269e:	52                   	push   edx
c001269f:	6a 00                	push   0x0
c00126a1:	50                   	push   eax
c00126a2:	e8 82 ff ff ff       	call   c0012629 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00126a7:	83 c4 10             	add    esp,0x10
c00126aa:	83 c4 0c             	add    esp,0xc
c00126ad:	c3                   	ret    

c00126ae <CmExpand(Reghive_Tag*, int)>:
c00126ae:	55                   	push   ebp
c00126af:	57                   	push   edi
c00126b0:	83 cf ff             	or     edi,0xffffffff
c00126b3:	56                   	push   esi
c00126b4:	53                   	push   ebx
c00126b5:	83 ec 3c             	sub    esp,0x3c
c00126b8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00126bc:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00126c0:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00126c4:	74 59                	je     c001271f <CmExpand(Reghive_Tag*, int)+0x71>
c00126c6:	50                   	push   eax
c00126c7:	31 d2                	xor    edx,edx
c00126c9:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c00126cd:	31 ff                	xor    edi,edi
c00126cf:	52                   	push   edx
c00126d0:	50                   	push   eax
c00126d1:	ff 33                	push   DWORD PTR [ebx]
c00126d3:	e8 9c 8a ff ff       	call   c000b174 <File::seek(unsigned long long)>
c00126d8:	83 c4 0c             	add    esp,0xc
c00126db:	6a 2b                	push   0x2b
c00126dd:	6a 00                	push   0x0
c00126df:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c00126e3:	55                   	push   ebp
c00126e4:	e8 97 de fe ff       	call   c0000580 <memset>
c00126e9:	83 c4 10             	add    esp,0x10
c00126ec:	39 f7                	cmp    edi,esi
c00126ee:	7d 1b                	jge    c001270b <CmExpand(Reghive_Tag*, int)+0x5d>
c00126f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126f2:	83 ec 0c             	sub    esp,0xc
c00126f5:	47                   	inc    edi
c00126f6:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00126fa:	8b 10                	mov    edx,DWORD PTR [eax]
c00126fc:	51                   	push   ecx
c00126fd:	55                   	push   ebp
c00126fe:	6a 00                	push   0x0
c0012700:	6a 2b                	push   0x2b
c0012702:	50                   	push   eax
c0012703:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012706:	83 c4 20             	add    esp,0x20
c0012709:	eb e1                	jmp    c00126ec <CmExpand(Reghive_Tag*, int)+0x3e>
c001270b:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c001270e:	83 ec 0c             	sub    esp,0xc
c0012711:	01 fe                	add    esi,edi
c0012713:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012716:	53                   	push   ebx
c0012717:	e8 71 ff ff ff       	call   c001268d <CmUpdateHeader(Reghive_Tag*)>
c001271c:	83 c4 10             	add    esp,0x10
c001271f:	83 c4 3c             	add    esp,0x3c
c0012722:	89 f8                	mov    eax,edi
c0012724:	5b                   	pop    ebx
c0012725:	5e                   	pop    esi
c0012726:	5f                   	pop    edi
c0012727:	5d                   	pop    ebp
c0012728:	c3                   	ret    

c0012729 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012729:	55                   	push   ebp
c001272a:	57                   	push   edi
c001272b:	56                   	push   esi
c001272c:	53                   	push   ebx
c001272d:	83 cb ff             	or     ebx,0xffffffff
c0012730:	83 ec 1c             	sub    esp,0x1c
c0012733:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012737:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c001273b:	74 68                	je     c00127a5 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001273d:	51                   	push   ecx
c001273e:	be 2b 00 00 00       	mov    esi,0x2b
c0012743:	6a 00                	push   0x0
c0012745:	31 ff                	xor    edi,edi
c0012747:	6a 00                	push   0x0
c0012749:	31 db                	xor    ebx,ebx
c001274b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001274e:	e8 21 8a ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0012753:	83 c4 10             	add    esp,0x10
c0012756:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012759:	76 3b                	jbe    c0012796 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c001275b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001275e:	83 ec 0c             	sub    esp,0xc
c0012761:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012765:	8b 10                	mov    edx,DWORD PTR [eax]
c0012767:	51                   	push   ecx
c0012768:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c001276c:	51                   	push   ecx
c001276d:	6a 00                	push   0x0
c001276f:	6a 01                	push   0x1
c0012771:	50                   	push   eax
c0012772:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012775:	83 c4 20             	add    esp,0x20
c0012778:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001277d:	74 26                	je     c00127a5 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001277f:	52                   	push   edx
c0012780:	43                   	inc    ebx
c0012781:	57                   	push   edi
c0012782:	56                   	push   esi
c0012783:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012786:	e8 e9 89 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c001278b:	83 c6 2b             	add    esi,0x2b
c001278e:	83 d7 00             	adc    edi,0x0
c0012791:	83 c4 10             	add    esp,0x10
c0012794:	eb c0                	jmp    c0012756 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012796:	50                   	push   eax
c0012797:	50                   	push   eax
c0012798:	6a 40                	push   0x40
c001279a:	55                   	push   ebp
c001279b:	e8 0e ff ff ff       	call   c00126ae <CmExpand(Reghive_Tag*, int)>
c00127a0:	83 c4 10             	add    esp,0x10
c00127a3:	89 c3                	mov    ebx,eax
c00127a5:	83 c4 1c             	add    esp,0x1c
c00127a8:	89 d8                	mov    eax,ebx
c00127aa:	5b                   	pop    ebx
c00127ab:	5e                   	pop    esi
c00127ac:	5f                   	pop    edi
c00127ad:	5d                   	pop    ebp
c00127ae:	c3                   	ret    

c00127af <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00127af:	55                   	push   ebp
c00127b0:	57                   	push   edi
c00127b1:	56                   	push   esi
c00127b2:	53                   	push   ebx
c00127b3:	81 ec 88 00 00 00    	sub    esp,0x88
c00127b9:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00127c0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00127c7:	e8 5d ff ff ff       	call   c0012729 <CmFindUnusedExtent(Reghive_Tag*)>
c00127cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00127d0:	83 c4 0c             	add    esp,0xc
c00127d3:	6a 2b                	push   0x2b
c00127d5:	6a 00                	push   0x0
c00127d7:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00127db:	55                   	push   ebp
c00127dc:	e8 9f dd fe ff       	call   c0000580 <memset>
c00127e1:	83 c4 10             	add    esp,0x10
c00127e4:	85 db                	test   ebx,ebx
c00127e6:	74 12                	je     c00127fa <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00127e8:	51                   	push   ecx
c00127e9:	55                   	push   ebp
c00127ea:	53                   	push   ebx
c00127eb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00127f2:	e8 0e fd ff ff       	call   c0012505 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127f7:	83 c4 10             	add    esp,0x10
c00127fa:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00127fe:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012805:	b9 2b 00 00 00       	mov    ecx,0x2b
c001280a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001280c:	85 db                	test   ebx,ebx
c001280e:	74 4c                	je     c001285c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xad>
c0012810:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012815:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c001281a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001281e:	c1 e0 08             	shl    eax,0x8
c0012821:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012827:	09 c8                	or     eax,ecx
c0012829:	0f b6 ca             	movzx  ecx,dl
c001282c:	74 11                	je     c001283f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x90>
c001282e:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012832:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012836:	c1 e8 10             	shr    eax,0x10
c0012839:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c001283d:	eb 0f                	jmp    c001284e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9f>
c001283f:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012844:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012849:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001284e:	88 4c 24 1b          	mov    BYTE PTR [esp+0x1b],cl
c0012852:	c1 ea 08             	shr    edx,0x8
c0012855:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001285a:	eb 0f                	jmp    c001286b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xbc>
c001285c:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012861:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012866:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001286b:	52                   	push   edx
c001286c:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012870:	50                   	push   eax
c0012871:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012875:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001287c:	e8 a8 fd ff ff       	call   c0012629 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012881:	83 c4 10             	add    esp,0x10
c0012884:	85 db                	test   ebx,ebx
c0012886:	74 12                	je     c001289a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xeb>
c0012888:	50                   	push   eax
c0012889:	55                   	push   ebp
c001288a:	53                   	push   ebx
c001288b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012892:	e8 92 fd ff ff       	call   c0012629 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012897:	83 c4 10             	add    esp,0x10
c001289a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001289e:	83 c4 7c             	add    esp,0x7c
c00128a1:	5b                   	pop    ebx
c00128a2:	5e                   	pop    esi
c00128a3:	5f                   	pop    edi
c00128a4:	5d                   	pop    ebp
c00128a5:	c3                   	ret    

c00128a6 <CmSetString(Reghive_Tag*, int, char const*)>:
c00128a6:	55                   	push   ebp
c00128a7:	57                   	push   edi
c00128a8:	56                   	push   esi
c00128a9:	53                   	push   ebx
c00128aa:	bb 27 00 00 00       	mov    ebx,0x27
c00128af:	81 ec 88 00 00 00    	sub    esp,0x88
c00128b5:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00128bc:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00128c3:	e8 58 dd fe ff       	call   c0000620 <strlen>
c00128c8:	8d 48 26             	lea    ecx,[eax+0x26]
c00128cb:	89 c8                	mov    eax,ecx
c00128cd:	99                   	cdq    
c00128ce:	f7 fb                	idiv   ebx
c00128d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00128d4:	83 c4 10             	add    esp,0x10
c00128d7:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00128dd:	7e 10                	jle    c00128ef <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00128df:	83 ec 0c             	sub    esp,0xc
c00128e2:	68 1c 13 02 c0       	push   0xc002131c
c00128e7:	e8 49 e5 ff ff       	call   c0010e35 <KePanic(char const*)>
c00128ec:	83 c4 10             	add    esp,0x10
c00128ef:	50                   	push   eax
c00128f0:	31 ff                	xor    edi,edi
c00128f2:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00128f6:	53                   	push   ebx
c00128f7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00128fe:	56                   	push   esi
c00128ff:	e8 01 fc ff ff       	call   c0012505 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012904:	83 c4 10             	add    esp,0x10
c0012907:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c001290b:	89 d0                	mov    eax,edx
c001290d:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012911:	c1 e0 08             	shl    eax,0x8
c0012914:	09 c2                	or     edx,eax
c0012916:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001291a:	c1 e2 08             	shl    edx,0x8
c001291d:	09 c2                	or     edx,eax
c001291f:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012923:	7e 76                	jle    c001299b <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012925:	85 d2                	test   edx,edx
c0012927:	75 25                	jne    c001294e <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012929:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c001292e:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012932:	50                   	push   eax
c0012933:	6a 00                	push   0x0
c0012935:	6a 00                	push   0x0
c0012937:	56                   	push   esi
c0012938:	e8 72 fe ff ff       	call   c00127af <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001293d:	83 c4 10             	add    esp,0x10
c0012940:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012943:	89 c2                	mov    edx,eax
c0012945:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012948:	c1 f8 10             	sar    eax,0x10
c001294b:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001294e:	55                   	push   ebp
c001294f:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012953:	55                   	push   ebp
c0012954:	52                   	push   edx
c0012955:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012959:	56                   	push   esi
c001295a:	e8 a6 fb ff ff       	call   c0012505 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001295f:	83 c4 0c             	add    esp,0xc
c0012962:	6a 27                	push   0x27
c0012964:	6a 00                	push   0x0
c0012966:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001296a:	51                   	push   ecx
c001296b:	e8 10 dc fe ff       	call   c0000580 <memset>
c0012970:	6b c7 27             	imul   eax,edi,0x27
c0012973:	83 c4 0c             	add    esp,0xc
c0012976:	6a 27                	push   0x27
c0012978:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c001297f:	50                   	push   eax
c0012980:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012984:	51                   	push   ecx
c0012985:	e8 c6 dd fe ff       	call   c0000750 <strncpy>
c001298a:	83 c4 0c             	add    esp,0xc
c001298d:	55                   	push   ebp
c001298e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012992:	52                   	push   edx
c0012993:	56                   	push   esi
c0012994:	e8 90 fc ff ff       	call   c0012629 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012999:	eb 19                	jmp    c00129b4 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c001299b:	85 d2                	test   edx,edx
c001299d:	74 18                	je     c00129b7 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c001299f:	51                   	push   ecx
c00129a0:	51                   	push   ecx
c00129a1:	52                   	push   edx
c00129a2:	56                   	push   esi
c00129a3:	e8 bd fc ff ff       	call   c0012665 <CmFreeExtent(Reghive_Tag*, int)>
c00129a8:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00129ac:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00129b0:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00129b4:	83 c4 10             	add    esp,0x10
c00129b7:	47                   	inc    edi
c00129b8:	83 c3 03             	add    ebx,0x3
c00129bb:	83 ff 07             	cmp    edi,0x7
c00129be:	0f 85 43 ff ff ff    	jne    c0012907 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00129c4:	50                   	push   eax
c00129c5:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00129c9:	50                   	push   eax
c00129ca:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00129d1:	56                   	push   esi
c00129d2:	e8 52 fc ff ff       	call   c0012629 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00129d7:	81 c4 8c 00 00 00    	add    esp,0x8c
c00129dd:	5b                   	pop    ebx
c00129de:	5e                   	pop    esi
c00129df:	5f                   	pop    edi
c00129e0:	5d                   	pop    ebp
c00129e1:	c3                   	ret    

c00129e2 <CmGetMatch(char*, char*, bool, bool*)>:
c00129e2:	56                   	push   esi
c00129e3:	53                   	push   ebx
c00129e4:	50                   	push   eax
c00129e5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00129ea:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00129ee:	74 25                	je     c0012a15 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00129f0:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00129f3:	31 db                	xor    ebx,ebx
c00129f5:	50                   	push   eax
c00129f6:	50                   	push   eax
c00129f7:	8d 04 9d 60 27 02 c0 	lea    eax,[ebx*4-0x3ffdd8a0]
c00129fe:	50                   	push   eax
c00129ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a03:	e8 38 de fe ff       	call   c0000840 <strcmp>
c0012a08:	83 c4 10             	add    esp,0x10
c0012a0b:	85 c0                	test   eax,eax
c0012a0d:	74 2e                	je     c0012a3d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012a0f:	43                   	inc    ebx
c0012a10:	83 fb 3f             	cmp    ebx,0x3f
c0012a13:	75 e0                	jne    c00129f5 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012a15:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012a18:	31 db                	xor    ebx,ebx
c0012a1a:	51                   	push   ecx
c0012a1b:	51                   	push   ecx
c0012a1c:	8d 04 9d 60 27 02 c0 	lea    eax,[ebx*4-0x3ffdd8a0]
c0012a23:	50                   	push   eax
c0012a24:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012a28:	e8 13 de fe ff       	call   c0000840 <strcmp>
c0012a2d:	83 c4 10             	add    esp,0x10
c0012a30:	85 c0                	test   eax,eax
c0012a32:	74 09                	je     c0012a3d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012a34:	43                   	inc    ebx
c0012a35:	83 fb 3f             	cmp    ebx,0x3f
c0012a38:	75 e0                	jne    c0012a1a <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012a3a:	83 cb ff             	or     ebx,0xffffffff
c0012a3d:	5a                   	pop    edx
c0012a3e:	89 d8                	mov    eax,ebx
c0012a40:	5b                   	pop    ebx
c0012a41:	5e                   	pop    esi
c0012a42:	c3                   	ret    

c0012a43 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012a43:	55                   	push   ebp
c0012a44:	31 c0                	xor    eax,eax
c0012a46:	57                   	push   edi
c0012a47:	56                   	push   esi
c0012a48:	53                   	push   ebx
c0012a49:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012a4d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012a51:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012a55:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0012a5a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012a5c:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012a5f:	83 fd 1f             	cmp    ebp,0x1f
c0012a62:	7f 08                	jg     c0012a6c <CmAddShift(unsigned int*, int*, unsigned char, int)+0x29>
c0012a64:	d3 e2                	shl    edx,cl
c0012a66:	b0 01                	mov    al,0x1
c0012a68:	09 17                	or     DWORD PTR [edi],edx
c0012a6a:	01 33                	add    DWORD PTR [ebx],esi
c0012a6c:	5b                   	pop    ebx
c0012a6d:	5e                   	pop    esi
c0012a6e:	5f                   	pop    edi
c0012a6f:	5d                   	pop    ebp
c0012a70:	c3                   	ret    

c0012a71 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012a71:	57                   	push   edi
c0012a72:	56                   	push   esi
c0012a73:	53                   	push   ebx
c0012a74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012a78:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012a80:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012a84:	39 0a                	cmp    DWORD PTR [edx],ecx
c0012a86:	7c 18                	jl     c0012aa0 <CmGetShift(unsigned int*, int*, int, bool*)+0x2f>
c0012a88:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0012a8a:	b8 01 00 00 00       	mov    eax,0x1
c0012a8f:	d3 e0                	shl    eax,cl
c0012a91:	fe c8                	dec    al
c0012a93:	22 03                	and    al,BYTE PTR [ebx]
c0012a95:	d3 ef                	shr    edi,cl
c0012a97:	89 3b                	mov    DWORD PTR [ebx],edi
c0012a99:	29 0a                	sub    DWORD PTR [edx],ecx
c0012a9b:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012a9e:	eb 05                	jmp    c0012aa5 <CmGetShift(unsigned int*, int*, int, bool*)+0x34>
c0012aa0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012aa3:	31 c0                	xor    eax,eax
c0012aa5:	5b                   	pop    ebx
c0012aa6:	5e                   	pop    esi
c0012aa7:	5f                   	pop    edi
c0012aa8:	c3                   	ret    

c0012aa9 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012aa9:	83 ec 40             	sub    esp,0x40
c0012aac:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012ab0:	50                   	push   eax
c0012ab1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ab5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ab9:	e8 47 fa ff ff       	call   c0012505 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012abe:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012ac2:	f3 0f 7e 44 24 2b    	movq   xmm0,QWORD PTR [esp+0x2b]
c0012ac8:	66 0f d6 00          	movq   QWORD PTR [eax],xmm0
c0012acc:	83 c4 4c             	add    esp,0x4c
c0012acf:	c3                   	ret    

c0012ad0 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012ad0:	55                   	push   ebp
c0012ad1:	57                   	push   edi
c0012ad2:	56                   	push   esi
c0012ad3:	53                   	push   ebx
c0012ad4:	83 ec 40             	sub    esp,0x40
c0012ad7:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012adb:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012adf:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012ae3:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012ae7:	53                   	push   ebx
c0012ae8:	56                   	push   esi
c0012ae9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012aed:	e8 13 fa ff ff       	call   c0012505 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012af2:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012af6:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012afa:	83 c4 0c             	add    esp,0xc
c0012afd:	53                   	push   ebx
c0012afe:	56                   	push   esi
c0012aff:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012b03:	e8 21 fb ff ff       	call   c0012629 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b08:	83 c4 4c             	add    esp,0x4c
c0012b0b:	5b                   	pop    ebx
c0012b0c:	5e                   	pop    esi
c0012b0d:	5f                   	pop    edi
c0012b0e:	5d                   	pop    ebp
c0012b0f:	c3                   	ret    

c0012b10 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012b10:	55                   	push   ebp
c0012b11:	57                   	push   edi
c0012b12:	56                   	push   esi
c0012b13:	31 f6                	xor    esi,esi
c0012b15:	53                   	push   ebx
c0012b16:	31 db                	xor    ebx,ebx
c0012b18:	83 ec 40             	sub    esp,0x40
c0012b1b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012b23:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012b2b:	6a 12                	push   0x12
c0012b2d:	68 ee 00 00 00       	push   0xee
c0012b32:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012b36:	e8 45 da fe ff       	call   c0000580 <memset>
c0012b3b:	83 c4 10             	add    esp,0x10
c0012b3e:	6a 08                	push   0x8
c0012b40:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012b44:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012b48:	50                   	push   eax
c0012b49:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0012b4d:	57                   	push   edi
c0012b4e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012b52:	55                   	push   ebp
c0012b53:	e8 eb fe ff ff       	call   c0012a43 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012b58:	83 c4 10             	add    esp,0x10
c0012b5b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012b5f:	50                   	push   eax
c0012b60:	6a 06                	push   0x6
c0012b62:	57                   	push   edi
c0012b63:	55                   	push   ebp
c0012b64:	e8 08 ff ff ff       	call   c0012a71 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012b69:	83 c4 10             	add    esp,0x10
c0012b6c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012b71:	74 07                	je     c0012b7a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012b73:	46                   	inc    esi
c0012b74:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012b78:	eb e1                	jmp    c0012b5b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012b7a:	43                   	inc    ebx
c0012b7b:	83 fb 12             	cmp    ebx,0x12
c0012b7e:	75 be                	jne    c0012b3e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x2e>
c0012b80:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012b84:	31 f6                	xor    esi,esi
c0012b86:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012b89:	50                   	push   eax
c0012b8a:	50                   	push   eax
c0012b8b:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012b90:	46                   	inc    esi
c0012b91:	8d 04 85 60 27 02 c0 	lea    eax,[eax*4-0x3ffdd8a0]
c0012b98:	50                   	push   eax
c0012b99:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012b9d:	e8 8e dd fe ff       	call   c0000930 <strcat>
c0012ba2:	83 c4 10             	add    esp,0x10
c0012ba5:	83 fe 18             	cmp    esi,0x18
c0012ba8:	75 df                	jne    c0012b89 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012baa:	83 c4 3c             	add    esp,0x3c
c0012bad:	31 c0                	xor    eax,eax
c0012baf:	5b                   	pop    ebx
c0012bb0:	5e                   	pop    esi
c0012bb1:	5f                   	pop    edi
c0012bb2:	5d                   	pop    ebp
c0012bb3:	c3                   	ret    

c0012bb4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012bb4:	83 ec 40             	sub    esp,0x40
c0012bb7:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012bbb:	50                   	push   eax
c0012bbc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012bc0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012bc4:	e8 3c f9 ff ff       	call   c0012505 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012bc9:	58                   	pop    eax
c0012bca:	5a                   	pop    edx
c0012bcb:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012bcf:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012bd3:	50                   	push   eax
c0012bd4:	e8 37 ff ff ff       	call   c0012b10 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012bd9:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012bde:	83 c4 4c             	add    esp,0x4c
c0012be1:	c3                   	ret    

c0012be2 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012be2:	55                   	push   ebp
c0012be3:	57                   	push   edi
c0012be4:	56                   	push   esi
c0012be5:	53                   	push   ebx
c0012be6:	31 db                	xor    ebx,ebx
c0012be8:	83 ec 70             	sub    esp,0x70
c0012beb:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012bf2:	6a 30                	push   0x30
c0012bf4:	6a 00                	push   0x0
c0012bf6:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012bfa:	56                   	push   esi
c0012bfb:	e8 80 d9 fe ff       	call   c0000580 <memset>
c0012c00:	83 c4 10             	add    esp,0x10
c0012c03:	83 ec 0c             	sub    esp,0xc
c0012c06:	57                   	push   edi
c0012c07:	e8 14 da fe ff       	call   c0000620 <strlen>
c0012c0c:	83 c4 10             	add    esp,0x10
c0012c0f:	39 d8                	cmp    eax,ebx
c0012c11:	76 16                	jbe    c0012c29 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012c13:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012c17:	83 ec 0c             	sub    esp,0xc
c0012c1a:	50                   	push   eax
c0012c1b:	e8 00 de fe ff       	call   c0000a20 <toupper>
c0012c20:	83 c4 10             	add    esp,0x10
c0012c23:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012c26:	43                   	inc    ebx
c0012c27:	eb da                	jmp    c0012c03 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012c29:	52                   	push   edx
c0012c2a:	31 db                	xor    ebx,ebx
c0012c2c:	6a 18                	push   0x18
c0012c2e:	31 ff                	xor    edi,edi
c0012c30:	6a 3f                	push   0x3f
c0012c32:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012c36:	50                   	push   eax
c0012c37:	e8 44 d9 fe ff       	call   c0000580 <memset>
c0012c3c:	83 c4 10             	add    esp,0x10
c0012c3f:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012c43:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012c47:	84 c0                	test   al,al
c0012c49:	0f 84 af 00 00 00    	je     c0012cfe <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012c4f:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012c53:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012c56:	83 ec 0c             	sub    esp,0xc
c0012c59:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0012c5e:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012c62:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0012c66:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0012c6b:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012c6f:	56                   	push   esi
c0012c70:	e8 ab d9 fe ff       	call   c0000620 <strlen>
c0012c75:	83 c4 10             	add    esp,0x10
c0012c78:	85 c0                	test   eax,eax
c0012c7a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012c7e:	74 0b                	je     c0012c8b <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012c80:	50                   	push   eax
c0012c81:	6a 01                	push   0x1
c0012c83:	56                   	push   esi
c0012c84:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012c88:	50                   	push   eax
c0012c89:	eb 0a                	jmp    c0012c95 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012c8b:	50                   	push   eax
c0012c8c:	6a 00                	push   0x0
c0012c8e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012c92:	50                   	push   eax
c0012c93:	6a 00                	push   0x0
c0012c95:	e8 48 fd ff ff       	call   c00129e2 <CmGetMatch(char*, char*, bool, bool*)>
c0012c9a:	83 c4 10             	add    esp,0x10
c0012c9d:	83 f8 ff             	cmp    eax,0xffffffff
c0012ca0:	75 1a                	jne    c0012cbc <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012ca2:	83 ec 0c             	sub    esp,0xc
c0012ca5:	68 31 13 02 c0       	push   0xc0021331
c0012caa:	e8 86 e1 ff ff       	call   c0010e35 <KePanic(char const*)>
c0012caf:	83 c4 10             	add    esp,0x10
c0012cb2:	b8 02 00 00 00       	mov    eax,0x2
c0012cb7:	e9 bb 00 00 00       	jmp    c0012d77 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012cbc:	83 ff 18             	cmp    edi,0x18
c0012cbf:	75 1a                	jne    c0012cdb <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012cc1:	83 ec 0c             	sub    esp,0xc
c0012cc4:	68 46 13 02 c0       	push   0xc0021346
c0012cc9:	e8 67 e1 ff ff       	call   c0010e35 <KePanic(char const*)>
c0012cce:	83 c4 10             	add    esp,0x10
c0012cd1:	b8 01 00 00 00       	mov    eax,0x1
c0012cd6:	e9 9c 00 00 00       	jmp    c0012d77 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012cdb:	47                   	inc    edi
c0012cdc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012ce1:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012ce5:	0f 45 dd             	cmovne ebx,ebp
c0012ce8:	83 ec 0c             	sub    esp,0xc
c0012ceb:	56                   	push   esi
c0012cec:	e8 2f d9 fe ff       	call   c0000620 <strlen>
c0012cf1:	83 c4 10             	add    esp,0x10
c0012cf4:	85 c0                	test   eax,eax
c0012cf6:	74 06                	je     c0012cfe <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012cf8:	43                   	inc    ebx
c0012cf9:	e9 41 ff ff ff       	jmp    c0012c3f <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012cfe:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012d06:	31 db                	xor    ebx,ebx
c0012d08:	31 ff                	xor    edi,edi
c0012d0a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012d12:	50                   	push   eax
c0012d13:	6a 12                	push   0x12
c0012d15:	68 ee 00 00 00       	push   0xee
c0012d1a:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012d21:	e8 5a d8 fe ff       	call   c0000580 <memset>
c0012d26:	83 c4 10             	add    esp,0x10
c0012d29:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0012d2d:	83 fb 17             	cmp    ebx,0x17
c0012d30:	7e 26                	jle    c0012d58 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0012d32:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012d36:	50                   	push   eax
c0012d37:	6a 08                	push   0x8
c0012d39:	55                   	push   ebp
c0012d3a:	56                   	push   esi
c0012d3b:	e8 31 fd ff ff       	call   c0012a71 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012d40:	83 c4 10             	add    esp,0x10
c0012d43:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012d48:	74 26                	je     c0012d70 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c0012d4a:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012d51:	4b                   	dec    ebx
c0012d52:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012d55:	47                   	inc    edi
c0012d56:	eb 1c                	jmp    c0012d74 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012d58:	6a 06                	push   0x6
c0012d5a:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0012d5f:	50                   	push   eax
c0012d60:	55                   	push   ebp
c0012d61:	56                   	push   esi
c0012d62:	e8 dc fc ff ff       	call   c0012a43 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012d67:	83 c4 10             	add    esp,0x10
c0012d6a:	84 c0                	test   al,al
c0012d6c:	75 06                	jne    c0012d74 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012d6e:	eb c2                	jmp    c0012d32 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0012d70:	31 c0                	xor    eax,eax
c0012d72:	eb 03                	jmp    c0012d77 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012d74:	43                   	inc    ebx
c0012d75:	eb b2                	jmp    c0012d29 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0012d77:	83 c4 6c             	add    esp,0x6c
c0012d7a:	5b                   	pop    ebx
c0012d7b:	5e                   	pop    esi
c0012d7c:	5f                   	pop    edi
c0012d7d:	5d                   	pop    ebp
c0012d7e:	c3                   	ret    

c0012d7f <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012d7f:	53                   	push   ebx
c0012d80:	83 ec 3c             	sub    esp,0x3c
c0012d83:	6a 2b                	push   0x2b
c0012d85:	6a 00                	push   0x0
c0012d87:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012d8b:	53                   	push   ebx
c0012d8c:	e8 ef d7 fe ff       	call   c0000580 <memset>
c0012d91:	58                   	pop    eax
c0012d92:	5a                   	pop    edx
c0012d93:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012d97:	50                   	push   eax
c0012d98:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012d9c:	e8 41 fe ff ff       	call   c0012be2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012da1:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012da6:	83 c4 0c             	add    esp,0xc
c0012da9:	6a 15                	push   0x15
c0012dab:	6a 00                	push   0x0
c0012dad:	8d 44 24 27          	lea    eax,[esp+0x27]
c0012db1:	50                   	push   eax
c0012db2:	e8 c9 d7 fe ff       	call   c0000580 <memset>
c0012db7:	53                   	push   ebx
c0012db8:	6a 00                	push   0x0
c0012dba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012dbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012dc2:	e8 e8 f9 ff ff       	call   c00127af <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012dc7:	83 c4 58             	add    esp,0x58
c0012dca:	5b                   	pop    ebx
c0012dcb:	c3                   	ret    

c0012dcc <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0012dcc:	56                   	push   esi
c0012dcd:	53                   	push   ebx
c0012dce:	83 ec 48             	sub    esp,0x48
c0012dd1:	6a 12                	push   0x12
c0012dd3:	68 ff 00 00 00       	push   0xff
c0012dd8:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0012ddc:	56                   	push   esi
c0012ddd:	e8 9e d7 fe ff       	call   c0000580 <memset>
c0012de2:	5a                   	pop    edx
c0012de3:	59                   	pop    ecx
c0012de4:	56                   	push   esi
c0012de5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012de9:	e8 f4 fd ff ff       	call   c0012be2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012dee:	83 c4 10             	add    esp,0x10
c0012df1:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012df5:	85 db                	test   ebx,ebx
c0012df7:	74 42                	je     c0012e3b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0012df9:	50                   	push   eax
c0012dfa:	8d 44 24 19          	lea    eax,[esp+0x19]
c0012dfe:	50                   	push   eax
c0012dff:	53                   	push   ebx
c0012e00:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012e04:	e8 fc f6 ff ff       	call   c0012505 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e09:	83 c4 0c             	add    esp,0xc
c0012e0c:	6a 12                	push   0x12
c0012e0e:	8d 44 24 21          	lea    eax,[esp+0x21]
c0012e12:	50                   	push   eax
c0012e13:	56                   	push   esi
c0012e14:	e8 67 d5 fe ff       	call   c0000380 <memcmp>
c0012e19:	83 c4 10             	add    esp,0x10
c0012e1c:	85 c0                	test   eax,eax
c0012e1e:	74 1e                	je     c0012e3e <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0012e20:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0012e25:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0012e2a:	c1 e3 08             	shl    ebx,0x8
c0012e2d:	09 d8                	or     eax,ebx
c0012e2f:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012e34:	c1 e3 10             	shl    ebx,0x10
c0012e37:	09 c3                	or     ebx,eax
c0012e39:	eb ba                	jmp    c0012df5 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0012e3b:	83 cb ff             	or     ebx,0xffffffff
c0012e3e:	83 c4 44             	add    esp,0x44
c0012e41:	89 d8                	mov    eax,ebx
c0012e43:	5b                   	pop    ebx
c0012e44:	5e                   	pop    esi
c0012e45:	c3                   	ret    

c0012e46 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012e46:	57                   	push   edi
c0012e47:	56                   	push   esi
c0012e48:	53                   	push   ebx
c0012e49:	83 ec 34             	sub    esp,0x34
c0012e4c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012e50:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012e54:	6a 2b                	push   0x2b
c0012e56:	6a 00                	push   0x0
c0012e58:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012e5c:	53                   	push   ebx
c0012e5d:	e8 1e d7 fe ff       	call   c0000580 <memset>
c0012e62:	58                   	pop    eax
c0012e63:	5a                   	pop    edx
c0012e64:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012e68:	50                   	push   eax
c0012e69:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012e6d:	e8 70 fd ff ff       	call   c0012be2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012e72:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0012e76:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0012e7a:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0012e7e:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012e82:	53                   	push   ebx
c0012e83:	6a 00                	push   0x0
c0012e85:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012e89:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012e8d:	e8 1d f9 ff ff       	call   c00127af <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012e92:	83 c4 50             	add    esp,0x50
c0012e95:	5b                   	pop    ebx
c0012e96:	5e                   	pop    esi
c0012e97:	5f                   	pop    edi
c0012e98:	c3                   	ret    

c0012e99 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0012e99:	55                   	push   ebp
c0012e9a:	57                   	push   edi
c0012e9b:	56                   	push   esi
c0012e9c:	53                   	push   ebx
c0012e9d:	83 ec 40             	sub    esp,0x40
c0012ea0:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012ea4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012ea8:	6a 2b                	push   0x2b
c0012eaa:	6a 00                	push   0x0
c0012eac:	8d 74 24 11          	lea    esi,[esp+0x11]
c0012eb0:	56                   	push   esi
c0012eb1:	e8 ca d6 fe ff       	call   c0000580 <memset>
c0012eb6:	5f                   	pop    edi
c0012eb7:	89 ef                	mov    edi,ebp
c0012eb9:	58                   	pop    eax
c0012eba:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012ebe:	50                   	push   eax
c0012ebf:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012ec3:	e8 1a fd ff ff       	call   c0012be2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012ec8:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0012ecd:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0012ed2:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0012ed7:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0012edc:	83 c4 10             	add    esp,0x10
c0012edf:	85 ed                	test   ebp,ebp
c0012ee1:	74 14                	je     c0012ef7 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012ee3:	51                   	push   ecx
c0012ee4:	51                   	push   ecx
c0012ee5:	57                   	push   edi
c0012ee6:	53                   	push   ebx
c0012ee7:	e8 0b f7 ff ff       	call   c00125f7 <CmGetNext(Reghive_Tag*, int)>
c0012eec:	83 c4 10             	add    esp,0x10
c0012eef:	85 c0                	test   eax,eax
c0012ef1:	74 04                	je     c0012ef7 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012ef3:	89 c7                	mov    edi,eax
c0012ef5:	eb e8                	jmp    c0012edf <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012ef7:	56                   	push   esi
c0012ef8:	6a 00                	push   0x0
c0012efa:	57                   	push   edi
c0012efb:	53                   	push   ebx
c0012efc:	e8 ae f8 ff ff       	call   c00127af <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012f01:	83 c4 0c             	add    esp,0xc
c0012f04:	56                   	push   esi
c0012f05:	50                   	push   eax
c0012f06:	89 c7                	mov    edi,eax
c0012f08:	53                   	push   ebx
c0012f09:	e8 f7 f5 ff ff       	call   c0012505 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f0e:	58                   	pop    eax
c0012f0f:	5a                   	pop    edx
c0012f10:	6a 6c                	push   0x6c
c0012f12:	6a 00                	push   0x0
c0012f14:	6a 00                	push   0x0
c0012f16:	68 57 13 02 c0       	push   0xc0021357
c0012f1b:	57                   	push   edi
c0012f1c:	53                   	push   ebx
c0012f1d:	e8 24 ff ff ff       	call   c0012e46 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012f22:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012f26:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0012f2a:	c1 e8 10             	shr    eax,0x10
c0012f2d:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0012f31:	83 c4 1c             	add    esp,0x1c
c0012f34:	56                   	push   esi
c0012f35:	57                   	push   edi
c0012f36:	53                   	push   ebx
c0012f37:	e8 ed f6 ff ff       	call   c0012629 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f3c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012f41:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012f46:	c1 e0 08             	shl    eax,0x8
c0012f49:	09 c2                	or     edx,eax
c0012f4b:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012f50:	83 c4 4c             	add    esp,0x4c
c0012f53:	5b                   	pop    ebx
c0012f54:	5e                   	pop    esi
c0012f55:	c1 e0 10             	shl    eax,0x10
c0012f58:	09 d0                	or     eax,edx
c0012f5a:	5f                   	pop    edi
c0012f5b:	5d                   	pop    ebp
c0012f5c:	c3                   	ret    

c0012f5d <zStrtok(char*, char const*)>:
c0012f5d:	57                   	push   edi
c0012f5e:	56                   	push   esi
c0012f5f:	53                   	push   ebx
c0012f60:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f68:	85 f6                	test   esi,esi
c0012f6a:	74 2b                	je     c0012f97 <zStrtok(char*, char const*)+0x3a>
c0012f6c:	85 c0                	test   eax,eax
c0012f6e:	75 09                	jne    c0012f79 <zStrtok(char*, char const*)+0x1c>
c0012f70:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0012f75:	85 c0                	test   eax,eax
c0012f77:	74 49                	je     c0012fc2 <zStrtok(char*, char const*)+0x65>
c0012f79:	31 c9                	xor    ecx,ecx
c0012f7b:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0012f7f:	74 03                	je     c0012f84 <zStrtok(char*, char const*)+0x27>
c0012f81:	41                   	inc    ecx
c0012f82:	eb f7                	jmp    c0012f7b <zStrtok(char*, char const*)+0x1e>
c0012f84:	31 d2                	xor    edx,edx
c0012f86:	39 ca                	cmp    edx,ecx
c0012f88:	74 11                	je     c0012f9b <zStrtok(char*, char const*)+0x3e>
c0012f8a:	8a 1e                	mov    bl,BYTE PTR [esi]
c0012f8c:	8d 3c 10             	lea    edi,[eax+edx*1]
c0012f8f:	38 1c 10             	cmp    BYTE PTR [eax+edx*1],bl
c0012f92:	74 13                	je     c0012fa7 <zStrtok(char*, char const*)+0x4a>
c0012f94:	42                   	inc    edx
c0012f95:	eb ef                	jmp    c0012f86 <zStrtok(char*, char const*)+0x29>
c0012f97:	31 c0                	xor    eax,eax
c0012f99:	eb 27                	jmp    c0012fc2 <zStrtok(char*, char const*)+0x65>
c0012f9b:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c0012fa5:	eb 1b                	jmp    c0012fc2 <zStrtok(char*, char const*)+0x65>
c0012fa7:	3a 18                	cmp    bl,BYTE PTR [eax]
c0012fa9:	75 0a                	jne    c0012fb5 <zStrtok(char*, char const*)+0x58>
c0012fab:	40                   	inc    eax
c0012fac:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c0012fb1:	89 f0                	mov    eax,esi
c0012fb3:	eb 0d                	jmp    c0012fc2 <zStrtok(char*, char const*)+0x65>
c0012fb5:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0012fb8:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0012fbc:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c0012fc2:	5b                   	pop    ebx
c0012fc3:	5e                   	pop    esi
c0012fc4:	5f                   	pop    edi
c0012fc5:	c3                   	ret    

c0012fc6 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0012fc6:	57                   	push   edi
c0012fc7:	56                   	push   esi
c0012fc8:	53                   	push   ebx
c0012fc9:	81 ec 08 01 00 00    	sub    esp,0x108
c0012fcf:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0012fd6:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0012fdd:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0012fe1:	53                   	push   ebx
c0012fe2:	e8 39 d7 fe ff       	call   c0000720 <strcpy>
c0012fe7:	59                   	pop    ecx
c0012fe8:	5e                   	pop    esi
c0012fe9:	68 bb 16 02 c0       	push   0xc00216bb
c0012fee:	53                   	push   ebx
c0012fef:	bb 01 00 00 00       	mov    ebx,0x1
c0012ff4:	e8 64 ff ff ff       	call   c0012f5d <zStrtok(char*, char const*)>
c0012ff9:	83 c4 10             	add    esp,0x10
c0012ffc:	85 c0                	test   eax,eax
c0012ffe:	74 3b                	je     c001303b <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013000:	52                   	push   edx
c0013001:	50                   	push   eax
c0013002:	6a 01                	push   0x1
c0013004:	57                   	push   edi
c0013005:	e8 c2 fd ff ff       	call   c0012dcc <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c001300a:	59                   	pop    ecx
c001300b:	5e                   	pop    esi
c001300c:	89 c3                	mov    ebx,eax
c001300e:	68 bb 16 02 c0       	push   0xc00216bb
c0013013:	6a 00                	push   0x0
c0013015:	e8 43 ff ff ff       	call   c0012f5d <zStrtok(char*, char const*)>
c001301a:	83 c4 10             	add    esp,0x10
c001301d:	85 c0                	test   eax,eax
c001301f:	89 c6                	mov    esi,eax
c0013021:	74 18                	je     c001303b <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013023:	52                   	push   edx
c0013024:	52                   	push   edx
c0013025:	53                   	push   ebx
c0013026:	57                   	push   edi
c0013027:	e8 8c f5 ff ff       	call   c00125b8 <CmEnterDirectory(Reghive_Tag*, int)>
c001302c:	83 c4 10             	add    esp,0x10
c001302f:	83 f8 ff             	cmp    eax,0xffffffff
c0013032:	89 c3                	mov    ebx,eax
c0013034:	74 05                	je     c001303b <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013036:	50                   	push   eax
c0013037:	56                   	push   esi
c0013038:	53                   	push   ebx
c0013039:	eb c9                	jmp    c0013004 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c001303b:	81 c4 00 01 00 00    	add    esp,0x100
c0013041:	89 d8                	mov    eax,ebx
c0013043:	5b                   	pop    ebx
c0013044:	5e                   	pop    esi
c0013045:	5f                   	pop    edi
c0013046:	c3                   	ret    

c0013047 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0013047:	55                   	push   ebp
c0013048:	57                   	push   edi
c0013049:	56                   	push   esi
c001304a:	53                   	push   ebx
c001304b:	83 ec 5c             	sub    esp,0x5c
c001304e:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013052:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013056:	85 db                	test   ebx,ebx
c0013058:	0f 8e 84 00 00 00    	jle    c00130e2 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c001305e:	57                   	push   edi
c001305f:	31 ed                	xor    ebp,ebp
c0013061:	6a 32                	push   0x32
c0013063:	6a 00                	push   0x0
c0013065:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013069:	57                   	push   edi
c001306a:	e8 11 d5 fe ff       	call   c0000580 <memset>
c001306f:	83 c4 0c             	add    esp,0xc
c0013072:	57                   	push   edi
c0013073:	53                   	push   ebx
c0013074:	56                   	push   esi
c0013075:	e8 3a fb ff ff       	call   c0012bb4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001307a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001307e:	83 c4 10             	add    esp,0x10
c0013081:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013085:	7d 13                	jge    c001309a <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013087:	83 ec 0c             	sub    esp,0xc
c001308a:	45                   	inc    ebp
c001308b:	68 28 1a 02 c0       	push   0xc0021a28
c0013090:	e8 e1 79 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0013095:	83 c4 10             	add    esp,0x10
c0013098:	eb e7                	jmp    c0013081 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c001309a:	51                   	push   ecx
c001309b:	57                   	push   edi
c001309c:	53                   	push   ebx
c001309d:	68 5d 13 02 c0       	push   0xc002135d
c00130a2:	e8 cf 79 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00130a7:	83 c4 10             	add    esp,0x10
c00130aa:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00130af:	75 1e                	jne    c00130cf <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00130b1:	52                   	push   edx
c00130b2:	52                   	push   edx
c00130b3:	53                   	push   ebx
c00130b4:	56                   	push   esi
c00130b5:	e8 fe f4 ff ff       	call   c00125b8 <CmEnterDirectory(Reghive_Tag*, int)>
c00130ba:	83 c4 0c             	add    esp,0xc
c00130bd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00130c1:	8d 51 04             	lea    edx,[ecx+0x4]
c00130c4:	52                   	push   edx
c00130c5:	50                   	push   eax
c00130c6:	56                   	push   esi
c00130c7:	e8 7b ff ff ff       	call   c0013047 <CmDisplayTree(Reghive_Tag*, int, int)>
c00130cc:	83 c4 10             	add    esp,0x10
c00130cf:	50                   	push   eax
c00130d0:	50                   	push   eax
c00130d1:	53                   	push   ebx
c00130d2:	56                   	push   esi
c00130d3:	e8 1f f5 ff ff       	call   c00125f7 <CmGetNext(Reghive_Tag*, int)>
c00130d8:	83 c4 10             	add    esp,0x10
c00130db:	89 c3                	mov    ebx,eax
c00130dd:	e9 74 ff ff ff       	jmp    c0013056 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00130e2:	83 c4 5c             	add    esp,0x5c
c00130e5:	5b                   	pop    ebx
c00130e6:	5e                   	pop    esi
c00130e7:	5f                   	pop    edi
c00130e8:	5d                   	pop    ebp
c00130e9:	c3                   	ret    

c00130ea <CmSplitFinalSlashInPlace(char*)>:
c00130ea:	53                   	push   ebx
c00130eb:	83 ec 14             	sub    esp,0x14
c00130ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00130f2:	53                   	push   ebx
c00130f3:	e8 28 d5 fe ff       	call   c0000620 <strlen>
c00130f8:	83 c4 10             	add    esp,0x10
c00130fb:	48                   	dec    eax
c00130fc:	85 c0                	test   eax,eax
c00130fe:	74 15                	je     c0013115 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013100:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013104:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013107:	75 09                	jne    c0013112 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013109:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001310c:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0013110:	eb 05                	jmp    c0013117 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013112:	48                   	dec    eax
c0013113:	eb e7                	jmp    c00130fc <CmSplitFinalSlashInPlace(char*)+0x12>
c0013115:	31 c0                	xor    eax,eax
c0013117:	83 c4 08             	add    esp,0x8
c001311a:	5b                   	pop    ebx
c001311b:	c3                   	ret    

c001311c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001311c:	55                   	push   ebp
c001311d:	57                   	push   edi
c001311e:	56                   	push   esi
c001311f:	53                   	push   ebx
c0013120:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013126:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001312d:	8a 1e                	mov    bl,BYTE PTR [esi]
c001312f:	8d 6e 01             	lea    ebp,[esi+0x1]
c0013132:	80 fb 40             	cmp    bl,0x40
c0013135:	75 19                	jne    c0013150 <Reg::findLineFromLoadedData(char*, char*, char*)+0x34>
c0013137:	8a 06                	mov    al,BYTE PTR [esi]
c0013139:	84 c0                	test   al,al
c001313b:	74 07                	je     c0013144 <Reg::findLineFromLoadedData(char*, char*, char*)+0x28>
c001313d:	3c 3a                	cmp    al,0x3a
c001313f:	74 03                	je     c0013144 <Reg::findLineFromLoadedData(char*, char*, char*)+0x28>
c0013141:	46                   	inc    esi
c0013142:	eb f3                	jmp    c0013137 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0013144:	84 c0                	test   al,al
c0013146:	0f 84 2b 01 00 00    	je     c0013277 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c001314c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001314f:	46                   	inc    esi
c0013150:	50                   	push   eax
c0013151:	6a 40                	push   0x40
c0013153:	6a 00                	push   0x0
c0013155:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013159:	50                   	push   eax
c001315a:	e8 21 d4 fe ff       	call   c0000580 <memset>
c001315f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013166:	31 d2                	xor    edx,edx
c0013168:	83 c4 10             	add    esp,0x10
c001316b:	8a 07                	mov    al,BYTE PTR [edi]
c001316d:	84 c0                	test   al,al
c001316f:	0f 84 02 01 00 00    	je     c0013277 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0013175:	81 fa c7 00 00 00    	cmp    edx,0xc7
c001317b:	0f 8f f6 00 00 00    	jg     c0013277 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0013181:	3c 0a                	cmp    al,0xa
c0013183:	0f 85 df 00 00 00    	jne    c0013268 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14c>
c0013189:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c001318e:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0013192:	a8 df                	test   al,0xdf
c0013194:	0f 94 c1             	sete   cl
c0013197:	3c 23                	cmp    al,0x23
c0013199:	0f 94 c2             	sete   dl
c001319c:	08 d1                	or     cl,dl
c001319e:	75 50                	jne    c00131f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00131a0:	88 c2                	mov    dl,al
c00131a2:	80 ea 09             	sub    dl,0x9
c00131a5:	80 fa 01             	cmp    dl,0x1
c00131a8:	76 46                	jbe    c00131f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00131aa:	3c 5b                	cmp    al,0x5b
c00131ac:	75 46                	jne    c00131f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd8>
c00131ae:	80 fb 40             	cmp    bl,0x40
c00131b1:	75 3d                	jne    c00131f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00131b3:	83 ec 0c             	sub    esp,0xc
c00131b6:	8d 54 24 65          	lea    edx,[esp+0x65]
c00131ba:	52                   	push   edx
c00131bb:	e8 60 d4 fe ff       	call   c0000620 <strlen>
c00131c0:	83 c4 10             	add    esp,0x10
c00131c3:	83 f8 3f             	cmp    eax,0x3f
c00131c6:	0f 87 ab 00 00 00    	ja     c0013277 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c00131cc:	50                   	push   eax
c00131cd:	50                   	push   eax
c00131ce:	8d 54 24 61          	lea    edx,[esp+0x61]
c00131d2:	52                   	push   edx
c00131d3:	8d 54 24 24          	lea    edx,[esp+0x24]
c00131d7:	52                   	push   edx
c00131d8:	e8 43 d5 fe ff       	call   c0000720 <strcpy>
c00131dd:	58                   	pop    eax
c00131de:	8d 54 24 24          	lea    edx,[esp+0x24]
c00131e2:	52                   	push   edx
c00131e3:	e8 38 d4 fe ff       	call   c0000620 <strlen>
c00131e8:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00131ed:	83 c4 10             	add    esp,0x10
c00131f0:	31 c9                	xor    ecx,ecx
c00131f2:	eb 7b                	jmp    c001326f <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c00131f4:	80 fb 40             	cmp    bl,0x40
c00131f7:	74 06                	je     c00131ff <Reg::findLineFromLoadedData(char*, char*, char*)+0xe3>
c00131f9:	8d 54 24 58          	lea    edx,[esp+0x58]
c00131fd:	eb 16                	jmp    c0013215 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c00131ff:	51                   	push   ecx
c0013200:	51                   	push   ecx
c0013201:	55                   	push   ebp
c0013202:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013206:	50                   	push   eax
c0013207:	e8 34 d6 fe ff       	call   c0000840 <strcmp>
c001320c:	83 c4 10             	add    esp,0x10
c001320f:	85 c0                	test   eax,eax
c0013211:	75 dd                	jne    c00131f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0013213:	eb e4                	jmp    c00131f9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdd>
c0013215:	8a 02                	mov    al,BYTE PTR [edx]
c0013217:	84 c0                	test   al,al
c0013219:	0f 94 c1             	sete   cl
c001321c:	3c 3d                	cmp    al,0x3d
c001321e:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
c0013223:	0a 4c 24 0b          	or     cl,BYTE PTR [esp+0xb]
c0013227:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001322b:	75 03                	jne    c0013230 <Reg::findLineFromLoadedData(char*, char*, char*)+0x114>
c001322d:	42                   	inc    edx
c001322e:	eb e5                	jmp    c0013215 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0013230:	84 c0                	test   al,al
c0013232:	74 43                	je     c0013277 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0013234:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013238:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001323b:	52                   	push   edx
c001323c:	52                   	push   edx
c001323d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013241:	50                   	push   eax
c0013242:	56                   	push   esi
c0013243:	e8 f8 d5 fe ff       	call   c0000840 <strcmp>
c0013248:	83 c4 10             	add    esp,0x10
c001324b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001324f:	85 c0                	test   eax,eax
c0013251:	75 9d                	jne    c00131f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0013253:	50                   	push   eax
c0013254:	42                   	inc    edx
c0013255:	50                   	push   eax
c0013256:	52                   	push   edx
c0013257:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001325e:	e8 bd d4 fe ff       	call   c0000720 <strcpy>
c0013263:	83 c4 10             	add    esp,0x10
c0013266:	eb 14                	jmp    c001327c <Reg::findLineFromLoadedData(char*, char*, char*)+0x160>
c0013268:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c001326c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001326f:	47                   	inc    edi
c0013270:	89 ca                	mov    edx,ecx
c0013272:	e9 f4 fe ff ff       	jmp    c001316b <Reg::findLineFromLoadedData(char*, char*, char*)+0x4f>
c0013277:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001327c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0013280:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013286:	5b                   	pop    ebx
c0013287:	5e                   	pop    esi
c0013288:	5f                   	pop    edi
c0013289:	5d                   	pop    ebp
c001328a:	c3                   	ret    

c001328b <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001328b:	57                   	push   edi
c001328c:	56                   	push   esi
c001328d:	53                   	push   ebx
c001328e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013294:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001329b:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00132a2:	53                   	push   ebx
c00132a3:	e8 78 d3 fe ff       	call   c0000620 <strlen>
c00132a8:	89 34 24             	mov    DWORD PTR [esp],esi
c00132ab:	89 c7                	mov    edi,eax
c00132ad:	e8 6e d3 fe ff       	call   c0000620 <strlen>
c00132b2:	83 c4 10             	add    esp,0x10
c00132b5:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00132b9:	3d ff 00 00 00       	cmp    eax,0xff
c00132be:	0f 87 d3 00 00 00    	ja     c0013397 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00132c4:	57                   	push   edi
c00132c5:	57                   	push   edi
c00132c6:	56                   	push   esi
c00132c7:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00132cb:	56                   	push   esi
c00132cc:	e8 4f d4 fe ff       	call   c0000720 <strcpy>
c00132d1:	58                   	pop    eax
c00132d2:	5a                   	pop    edx
c00132d3:	68 bb 16 02 c0       	push   0xc00216bb
c00132d8:	56                   	push   esi
c00132d9:	e8 52 d6 fe ff       	call   c0000930 <strcat>
c00132de:	59                   	pop    ecx
c00132df:	5f                   	pop    edi
c00132e0:	53                   	push   ebx
c00132e1:	56                   	push   esi
c00132e2:	e8 49 d6 fe ff       	call   c0000930 <strcat>
c00132e7:	58                   	pop    eax
c00132e8:	5a                   	pop    edx
c00132e9:	68 67 13 02 c0       	push   0xc0021367
c00132ee:	56                   	push   esi
c00132ef:	e8 3c d6 fe ff       	call   c0000930 <strcat>
c00132f4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00132fb:	e8 fc 47 ff ff       	call   c0007afc <malloc>
c0013300:	83 c4 0c             	add    esp,0xc
c0013303:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0013309:	56                   	push   esi
c001330a:	50                   	push   eax
c001330b:	89 c3                	mov    ebx,eax
c001330d:	e8 e6 7c ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0013312:	83 c4 10             	add    esp,0x10
c0013315:	85 db                	test   ebx,ebx
c0013317:	74 7e                	je     c0013397 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013319:	51                   	push   ecx
c001331a:	51                   	push   ecx
c001331b:	6a 01                	push   0x1
c001331d:	53                   	push   ebx
c001331e:	e8 93 7d ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0013323:	83 c4 10             	add    esp,0x10
c0013326:	85 c0                	test   eax,eax
c0013328:	74 08                	je     c0013332 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001332a:	83 ec 0c             	sub    esp,0xc
c001332d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001332f:	53                   	push   ebx
c0013330:	eb 5f                	jmp    c0013391 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013332:	52                   	push   edx
c0013333:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013337:	50                   	push   eax
c0013338:	8d 44 24 20          	lea    eax,[esp+0x20]
c001333c:	50                   	push   eax
c001333d:	53                   	push   ebx
c001333e:	e8 19 80 ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c0013343:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013347:	83 c4 10             	add    esp,0x10
c001334a:	89 c1                	mov    ecx,eax
c001334c:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013350:	74 31                	je     c0013383 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013352:	83 ec 0c             	sub    esp,0xc
c0013355:	50                   	push   eax
c0013356:	e8 a1 47 ff ff       	call   c0007afc <malloc>
c001335b:	89 c6                	mov    esi,eax
c001335d:	58                   	pop    eax
c001335e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013360:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013364:	52                   	push   edx
c0013365:	56                   	push   esi
c0013366:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001336a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001336e:	53                   	push   ebx
c001336f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013372:	83 c4 20             	add    esp,0x20
c0013375:	85 c0                	test   eax,eax
c0013377:	75 0a                	jne    c0013383 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013379:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001337d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013381:	74 18                	je     c001339b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013383:	83 ec 0c             	sub    esp,0xc
c0013386:	53                   	push   ebx
c0013387:	e8 88 7d ff ff       	call   c000b114 <File::close()>
c001338c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001338e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013391:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013394:	83 c4 10             	add    esp,0x10
c0013397:	31 c0                	xor    eax,eax
c0013399:	eb 3b                	jmp    c00133d6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001339b:	83 ec 0c             	sub    esp,0xc
c001339e:	53                   	push   ebx
c001339f:	e8 70 7d ff ff       	call   c000b114 <File::close()>
c00133a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00133a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133ac:	83 c4 0c             	add    esp,0xc
c00133af:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00133b6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00133bd:	56                   	push   esi
c00133be:	e8 59 fd ff ff       	call   c001311c <Reg::findLineFromLoadedData(char*, char*, char*)>
c00133c3:	89 34 24             	mov    DWORD PTR [esp],esi
c00133c6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00133ca:	e8 40 47 ff ff       	call   c0007b0f <free>
c00133cf:	83 c4 10             	add    esp,0x10
c00133d2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00133d6:	81 c4 20 01 00 00    	add    esp,0x120
c00133dc:	5b                   	pop    ebx
c00133dd:	5e                   	pop    esi
c00133de:	5f                   	pop    edi
c00133df:	c3                   	ret    

c00133e0 <Reg::getLine(char*, char*, char*)>:
c00133e0:	57                   	push   edi
c00133e1:	56                   	push   esi
c00133e2:	53                   	push   ebx
c00133e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00133e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00133eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00133ef:	57                   	push   edi
c00133f0:	56                   	push   esi
c00133f1:	53                   	push   ebx
c00133f2:	68 6c 13 02 c0       	push   0xc002136c
c00133f7:	e8 8f fe ff ff       	call   c001328b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00133fc:	83 c4 10             	add    esp,0x10
c00133ff:	84 c0                	test   al,al
c0013401:	75 10                	jne    c0013413 <Reg::getLine(char*, char*, char*)+0x33>
c0013403:	57                   	push   edi
c0013404:	56                   	push   esi
c0013405:	53                   	push   ebx
c0013406:	68 91 13 02 c0       	push   0xc0021391
c001340b:	e8 7b fe ff ff       	call   c001328b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013410:	83 c4 10             	add    esp,0x10
c0013413:	5b                   	pop    ebx
c0013414:	5e                   	pop    esi
c0013415:	5f                   	pop    edi
c0013416:	c3                   	ret    

c0013417 <Reg::readInt(char*, char*, int*)>:
c0013417:	55                   	push   ebp
c0013418:	57                   	push   edi
c0013419:	56                   	push   esi
c001341a:	53                   	push   ebx
c001341b:	81 ec e0 00 00 00    	sub    esp,0xe0
c0013421:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013425:	56                   	push   esi
c0013426:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c001342d:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0013434:	e8 a7 ff ff ff       	call   c00133e0 <Reg::getLine(char*, char*, char*)>
c0013439:	83 c4 10             	add    esp,0x10
c001343c:	84 c0                	test   al,al
c001343e:	0f 84 a4 00 00 00    	je     c00134e8 <Reg::readInt(char*, char*, int*)+0xd1>
c0013444:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0013448:	80 fa 2b             	cmp    dl,0x2b
c001344b:	74 0c                	je     c0013459 <Reg::readInt(char*, char*, int*)+0x42>
c001344d:	80 fa 2d             	cmp    dl,0x2d
c0013450:	75 0e                	jne    c0013460 <Reg::readInt(char*, char*, int*)+0x49>
c0013452:	ba 01 00 00 00       	mov    edx,0x1
c0013457:	eb 0b                	jmp    c0013464 <Reg::readInt(char*, char*, int*)+0x4d>
c0013459:	ba 01 00 00 00       	mov    edx,0x1
c001345e:	eb 02                	jmp    c0013462 <Reg::readInt(char*, char*, int*)+0x4b>
c0013460:	31 d2                	xor    edx,edx
c0013462:	31 c0                	xor    eax,eax
c0013464:	80 7c 14 08 30       	cmp    BYTE PTR [esp+edx*1+0x8],0x30
c0013469:	bf 0a 00 00 00       	mov    edi,0xa
c001346e:	75 20                	jne    c0013490 <Reg::readInt(char*, char*, int*)+0x79>
c0013470:	8a 4c 14 09          	mov    cl,BYTE PTR [esp+edx*1+0x9]
c0013474:	80 f9 78             	cmp    cl,0x78
c0013477:	75 0a                	jne    c0013483 <Reg::readInt(char*, char*, int*)+0x6c>
c0013479:	83 c2 02             	add    edx,0x2
c001347c:	bf 10 00 00 00       	mov    edi,0x10
c0013481:	eb 0d                	jmp    c0013490 <Reg::readInt(char*, char*, int*)+0x79>
c0013483:	80 f9 62             	cmp    cl,0x62
c0013486:	75 08                	jne    c0013490 <Reg::readInt(char*, char*, int*)+0x79>
c0013488:	83 c2 02             	add    edx,0x2
c001348b:	bf 02 00 00 00       	mov    edi,0x2
c0013490:	01 d6                	add    esi,edx
c0013492:	31 ed                	xor    ebp,ebp
c0013494:	8a 0e                	mov    cl,BYTE PTR [esi]
c0013496:	84 c9                	test   cl,cl
c0013498:	0f 94 c2             	sete   dl
c001349b:	80 f9 0d             	cmp    cl,0xd
c001349e:	0f 94 c3             	sete   bl
c00134a1:	08 d3                	or     bl,dl
c00134a3:	75 32                	jne    c00134d7 <Reg::readInt(char*, char*, int*)+0xc0>
c00134a5:	89 ea                	mov    edx,ebp
c00134a7:	0f be e9             	movsx  ebp,cl
c00134aa:	0f af d7             	imul   edx,edi
c00134ad:	83 ff 10             	cmp    edi,0x10
c00134b0:	75 1e                	jne    c00134d0 <Reg::readInt(char*, char*, int*)+0xb9>
c00134b2:	88 cb                	mov    bl,cl
c00134b4:	80 eb 41             	sub    bl,0x41
c00134b7:	80 fb 05             	cmp    bl,0x5
c00134ba:	77 06                	ja     c00134c2 <Reg::readInt(char*, char*, int*)+0xab>
c00134bc:	8d 6c 2a c9          	lea    ebp,[edx+ebp*1-0x37]
c00134c0:	eb 12                	jmp    c00134d4 <Reg::readInt(char*, char*, int*)+0xbd>
c00134c2:	80 e9 61             	sub    cl,0x61
c00134c5:	80 f9 05             	cmp    cl,0x5
c00134c8:	77 06                	ja     c00134d0 <Reg::readInt(char*, char*, int*)+0xb9>
c00134ca:	8d 6c 2a a9          	lea    ebp,[edx+ebp*1-0x57]
c00134ce:	eb 04                	jmp    c00134d4 <Reg::readInt(char*, char*, int*)+0xbd>
c00134d0:	8d 6c 2a d0          	lea    ebp,[edx+ebp*1-0x30]
c00134d4:	46                   	inc    esi
c00134d5:	eb bd                	jmp    c0013494 <Reg::readInt(char*, char*, int*)+0x7d>
c00134d7:	84 c0                	test   al,al
c00134d9:	74 02                	je     c00134dd <Reg::readInt(char*, char*, int*)+0xc6>
c00134db:	f7 dd                	neg    ebp
c00134dd:	8b 84 24 f8 00 00 00 	mov    eax,DWORD PTR [esp+0xf8]
c00134e4:	89 28                	mov    DWORD PTR [eax],ebp
c00134e6:	88 d8                	mov    al,bl
c00134e8:	81 c4 dc 00 00 00    	add    esp,0xdc
c00134ee:	5b                   	pop    ebx
c00134ef:	5e                   	pop    esi
c00134f0:	5f                   	pop    edi
c00134f1:	5d                   	pop    ebp
c00134f2:	c3                   	ret    

c00134f3 <Reg::readString(char*, char*, char*, int)>:
c00134f3:	56                   	push   esi
c00134f4:	53                   	push   ebx
c00134f5:	81 ec e8 00 00 00    	sub    esp,0xe8
c00134fb:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00134ff:	8b 9c 24 fc 00 00 00 	mov    ebx,DWORD PTR [esp+0xfc]
c0013506:	56                   	push   esi
c0013507:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c001350e:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0013515:	e8 c6 fe ff ff       	call   c00133e0 <Reg::getLine(char*, char*, char*)>
c001351a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001351e:	83 c4 10             	add    esp,0x10
c0013521:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013526:	74 44                	je     c001356c <Reg::readString(char*, char*, char*, int)+0x79>
c0013528:	8b 94 24 fc 00 00 00 	mov    edx,DWORD PTR [esp+0xfc]
c001352f:	31 c0                	xor    eax,eax
c0013531:	4a                   	dec    edx
c0013532:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c0013535:	84 c9                	test   cl,cl
c0013537:	74 0f                	je     c0013548 <Reg::readString(char*, char*, char*, int)+0x55>
c0013539:	39 c2                	cmp    edx,eax
c001353b:	7e 0b                	jle    c0013548 <Reg::readString(char*, char*, char*, int)+0x55>
c001353d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013540:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013545:	40                   	inc    eax
c0013546:	eb ea                	jmp    c0013532 <Reg::readString(char*, char*, char*, int)+0x3f>
c0013548:	83 ec 0c             	sub    esp,0xc
c001354b:	53                   	push   ebx
c001354c:	e8 cf d0 fe ff       	call   c0000620 <strlen>
c0013551:	83 c4 10             	add    esp,0x10
c0013554:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013559:	75 11                	jne    c001356c <Reg::readString(char*, char*, char*, int)+0x79>
c001355b:	83 ec 0c             	sub    esp,0xc
c001355e:	53                   	push   ebx
c001355f:	e8 bc d0 fe ff       	call   c0000620 <strlen>
c0013564:	83 c4 10             	add    esp,0x10
c0013567:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001356c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013570:	81 c4 e4 00 00 00    	add    esp,0xe4
c0013576:	5b                   	pop    ebx
c0013577:	5e                   	pop    esi
c0013578:	c3                   	ret    

c0013579 <Reg::readBool(char*, char*, bool*)>:
c0013579:	83 ec 20             	sub    esp,0x20
c001357c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013580:	50                   	push   eax
c0013581:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013585:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013589:	e8 89 fe ff ff       	call   c0013417 <Reg::readInt(char*, char*, int*)>
c001358e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013592:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013597:	0f 95 02             	setne  BYTE PTR [edx]
c001359a:	83 c4 2c             	add    esp,0x2c
c001359d:	c3                   	ret    

c001359e <Reg::readBoolWithDefault(char*, char*, bool)>:
c001359e:	83 ec 30             	sub    esp,0x30
c00135a1:	8a 54 24 3c          	mov    dl,BYTE PTR [esp+0x3c]
c00135a5:	8d 44 24 23          	lea    eax,[esp+0x23]
c00135a9:	88 54 24 13          	mov    BYTE PTR [esp+0x13],dl
c00135ad:	50                   	push   eax
c00135ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00135b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00135b6:	e8 be ff ff ff       	call   c0013579 <Reg::readBool(char*, char*, bool*)>
c00135bb:	83 c4 10             	add    esp,0x10
c00135be:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00135c2:	84 c0                	test   al,al
c00135c4:	74 04                	je     c00135ca <Reg::readBoolWithDefault(char*, char*, bool)+0x2c>
c00135c6:	8a 54 24 1f          	mov    dl,BYTE PTR [esp+0x1f]
c00135ca:	88 d0                	mov    al,dl
c00135cc:	83 c4 2c             	add    esp,0x2c
c00135cf:	c3                   	ret    

c00135d0 <Reg::readIntWithDefault(char*, char*, int)>:
c00135d0:	53                   	push   ebx
c00135d1:	83 ec 1c             	sub    esp,0x1c
c00135d4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00135d8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00135dc:	50                   	push   eax
c00135dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135e5:	e8 2d fe ff ff       	call   c0013417 <Reg::readInt(char*, char*, int*)>
c00135ea:	83 c4 10             	add    esp,0x10
c00135ed:	84 c0                	test   al,al
c00135ef:	74 04                	je     c00135f5 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00135f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00135f5:	83 c4 18             	add    esp,0x18
c00135f8:	89 d8                	mov    eax,ebx
c00135fa:	5b                   	pop    ebx
c00135fb:	c3                   	ret    

c00135fc <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00135fc:	57                   	push   edi
c00135fd:	56                   	push   esi
c00135fe:	53                   	push   ebx
c00135ff:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013603:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013607:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001360b:	56                   	push   esi
c001360c:	57                   	push   edi
c001360d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013611:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013615:	e8 d9 fe ff ff       	call   c00134f3 <Reg::readString(char*, char*, char*, int)>
c001361a:	83 c4 10             	add    esp,0x10
c001361d:	84 c0                	test   al,al
c001361f:	75 16                	jne    c0013637 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013621:	50                   	push   eax
c0013622:	56                   	push   esi
c0013623:	6a 00                	push   0x0
c0013625:	57                   	push   edi
c0013626:	e8 55 cf fe ff       	call   c0000580 <memset>
c001362b:	8d 4e ff             	lea    ecx,[esi-0x1]
c001362e:	89 de                	mov    esi,ebx
c0013630:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013632:	83 c4 10             	add    esp,0x10
c0013635:	89 df                	mov    edi,ebx
c0013637:	5b                   	pop    ebx
c0013638:	89 f8                	mov    eax,edi
c001363a:	5e                   	pop    esi
c001363b:	5f                   	pop    edi
c001363c:	c3                   	ret    

c001363d <SysEject(regs*)>:
c001363d:	83 ec 0c             	sub    esp,0xc
c0013640:	83 ca ff             	or     edx,0xffffffff
c0013643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013647:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001364a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001364f:	83 e9 41             	sub    ecx,0x41
c0013652:	83 f9 19             	cmp    ecx,0x19
c0013655:	77 18                	ja     c001366f <SysEject(regs*)+0x32>
c0013657:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c001365e:	85 c9                	test   ecx,ecx
c0013660:	74 0d                	je     c001366f <SysEject(regs*)+0x32>
c0013662:	83 ec 0c             	sub    esp,0xc
c0013665:	51                   	push   ecx
c0013666:	e8 43 a1 ff ff       	call   c000d7ae <LogicalDisk::eject()>
c001366b:	83 c4 10             	add    esp,0x10
c001366e:	99                   	cdq    
c001366f:	83 c4 0c             	add    esp,0xc
c0013672:	c3                   	ret    

c0013673 <SysExit(regs*)>:
c0013673:	83 ec 18             	sub    esp,0x18
c0013676:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001367a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001367d:	e8 96 29 00 00       	call   c0016018 <terminateTask(int)>
c0013682:	83 c8 ff             	or     eax,0xffffffff
c0013685:	83 c4 1c             	add    esp,0x1c
c0013688:	89 c2                	mov    edx,eax
c001368a:	c3                   	ret    

c001368b <SysGetCwd(regs*)>:
c001368b:	83 ec 10             	sub    esp,0x10
c001368e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013692:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013695:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013698:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001369d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00136a0:	e8 58 77 ff ff       	call   c000adfd <Fs::getcwd(Process*, char*, int)>
c00136a5:	83 c4 1c             	add    esp,0x1c
c00136a8:	99                   	cdq    
c00136a9:	c3                   	ret    

c00136aa <SysGetPID(regs*)>:
c00136aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00136b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00136b4:	99                   	cdq    
c00136b5:	c3                   	ret    

c00136b6 <SysGetRAMData(regs*)>:
c00136b6:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c00136c0:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c00136c6:	99                   	cdq    
c00136c7:	f7 f9                	idiv   ecx
c00136c9:	c1 e0 18             	shl    eax,0x18
c00136cc:	09 c8                	or     eax,ecx
c00136ce:	99                   	cdq    
c00136cf:	c3                   	ret    

c00136d0 <SysGetVGAPtr(regs*)>:
c00136d0:	55                   	push   ebp
c00136d1:	57                   	push   edi
c00136d2:	56                   	push   esi
c00136d3:	53                   	push   ebx
c00136d4:	83 ec 18             	sub    esp,0x18
c00136d7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00136db:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00136de:	e8 65 24 00 00       	call   c0015b48 <Thr::processFromPID(int)>
c00136e3:	83 c4 10             	add    esp,0x10
c00136e6:	89 c1                	mov    ecx,eax
c00136e8:	b8 01 00 00 00       	mov    eax,0x1
c00136ed:	85 c9                	test   ecx,ecx
c00136ef:	74 57                	je     c0013748 <SysGetVGAPtr(regs*)+0x78>
c00136f1:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00136f5:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00136fb:	74 0c                	je     c0013709 <SysGetVGAPtr(regs*)+0x39>
c00136fd:	83 ec 0c             	sub    esp,0xc
c0013700:	55                   	push   ebp
c0013701:	e8 77 50 ff ff       	call   c000877d <setActiveTerminal(VgaText*)>
c0013706:	83 c4 10             	add    esp,0x10
c0013709:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001370c:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013711:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013714:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013716:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013719:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001371c:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013722:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013725:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013728:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001372e:	50                   	push   eax
c001372f:	50                   	push   eax
c0013730:	68 ac 13 02 c0       	push   0xc00213ac
c0013735:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013738:	05 a8 0f 00 00       	add    eax,0xfa8
c001373d:	50                   	push   eax
c001373e:	e8 dd cf fe ff       	call   c0000720 <strcpy>
c0013743:	83 c4 10             	add    esp,0x10
c0013746:	31 c0                	xor    eax,eax
c0013748:	83 c4 0c             	add    esp,0xc
c001374b:	31 d2                	xor    edx,edx
c001374d:	5b                   	pop    ebx
c001374e:	5e                   	pop    esi
c001374f:	5f                   	pop    edi
c0013750:	5d                   	pop    ebp
c0013751:	c3                   	ret    
c0013752:	66 90                	xchg   ax,ax

c0013754 <SysKill(regs*)>:
c0013754:	53                   	push   ebx
c0013755:	83 ec 08             	sub    esp,0x8
c0013758:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001375c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013760:	75 16                	jne    c0013778 <SysKill(regs*)+0x24>
c0013762:	83 ec 0c             	sub    esp,0xc
c0013765:	68 b6 13 02 c0       	push   0xc00213b6
c001376a:	e8 c6 d6 ff ff       	call   c0010e35 <KePanic(char const*)>
c001376f:	83 c4 10             	add    esp,0x10
c0013772:	e9 85 00 00 00       	jmp    c00137fc <SysKill(regs*)+0xa8>
c0013777:	90                   	nop
c0013778:	83 ec 0c             	sub    esp,0xc
c001377b:	68 84 81 02 c0       	push   0xc0028184
c0013780:	e8 8f b8 00 00       	call   c001f014 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013785:	8d 76 00             	lea    esi,[esi+0x0]
c0013788:	83 c4 10             	add    esp,0x10
c001378b:	85 c0                	test   eax,eax
c001378d:	74 19                	je     c00137a8 <SysKill(regs*)+0x54>
c001378f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013792:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013795:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013797:	74 33                	je     c00137cc <SysKill(regs*)+0x78>
c0013799:	52                   	push   edx
c001379a:	52                   	push   edx
c001379b:	50                   	push   eax
c001379c:	68 84 81 02 c0       	push   0xc0028184
c00137a1:	e8 56 bb 00 00       	call   c001f2fc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00137a6:	eb e0                	jmp    c0013788 <SysKill(regs*)+0x34>
c00137a8:	83 ec 0c             	sub    esp,0xc
c00137ab:	68 78 81 02 c0       	push   0xc0028178
c00137b0:	e8 5f b8 00 00       	call   c001f014 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137b5:	8d 76 00             	lea    esi,[esi+0x0]
c00137b8:	83 c4 10             	add    esp,0x10
c00137bb:	85 c0                	test   eax,eax
c00137bd:	74 3d                	je     c00137fc <SysKill(regs*)+0xa8>
c00137bf:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00137c2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00137c5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00137c7:	75 23                	jne    c00137ec <SysKill(regs*)+0x98>
c00137c9:	8d 76 00             	lea    esi,[esi+0x0]
c00137cc:	51                   	push   ecx
c00137cd:	51                   	push   ecx
c00137ce:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00137d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137d9:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00137df:	e8 c3 da ff ff       	call   c00112a7 <KeRaiseSignal(SigHandlerBlock*, int)>
c00137e4:	83 c4 10             	add    esp,0x10
c00137e7:	0f 57 c0             	xorps  xmm0,xmm0
c00137ea:	eb 14                	jmp    c0013800 <SysKill(regs*)+0xac>
c00137ec:	52                   	push   edx
c00137ed:	52                   	push   edx
c00137ee:	50                   	push   eax
c00137ef:	68 78 81 02 c0       	push   0xc0028178
c00137f4:	e8 03 bb 00 00       	call   c001f2fc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00137f9:	eb bd                	jmp    c00137b8 <SysKill(regs*)+0x64>
c00137fb:	90                   	nop
c00137fc:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c0013800:	66 0f 7e c0          	movd   eax,xmm0
c0013804:	83 c4 08             	add    esp,0x8
c0013807:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c001380c:	66 0f 7e c2          	movd   edx,xmm0
c0013810:	5b                   	pop    ebx
c0013811:	c3                   	ret    

c0013812 <SysLoadDLL(regs*)>:
c0013812:	56                   	push   esi
c0013813:	31 d2                	xor    edx,edx
c0013815:	53                   	push   ebx
c0013816:	b8 01 00 00 00       	mov    eax,0x1
c001381b:	51                   	push   ecx
c001381c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013820:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013824:	0f 84 8c 00 00 00    	je     c00138b6 <SysLoadDLL(regs*)+0xa4>
c001382a:	83 ec 0c             	sub    esp,0xc
c001382d:	68 14 01 00 00       	push   0x114
c0013832:	e8 c5 42 ff ff       	call   c0007afc <malloc>
c0013837:	83 c4 0c             	add    esp,0xc
c001383a:	89 c3                	mov    ebx,eax
c001383c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013841:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013844:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013847:	53                   	push   ebx
c0013848:	e8 ab 77 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c001384d:	83 c4 10             	add    esp,0x10
c0013850:	31 d2                	xor    edx,edx
c0013852:	85 db                	test   ebx,ebx
c0013854:	b8 02 00 00 00       	mov    eax,0x2
c0013859:	74 5b                	je     c00138b6 <SysLoadDLL(regs*)+0xa4>
c001385b:	83 ec 0c             	sub    esp,0xc
c001385e:	53                   	push   ebx
c001385f:	e8 ba 7a ff ff       	call   c000b31e <File::exists()>
c0013864:	83 c4 10             	add    esp,0x10
c0013867:	84 c0                	test   al,al
c0013869:	8b 03                	mov    eax,DWORD PTR [ebx]
c001386b:	75 11                	jne    c001387e <SysLoadDLL(regs*)+0x6c>
c001386d:	83 ec 0c             	sub    esp,0xc
c0013870:	53                   	push   ebx
c0013871:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013874:	83 c4 10             	add    esp,0x10
c0013877:	b8 03 00 00 00       	mov    eax,0x3
c001387c:	eb 36                	jmp    c00138b4 <SysLoadDLL(regs*)+0xa2>
c001387e:	83 ec 0c             	sub    esp,0xc
c0013881:	53                   	push   ebx
c0013882:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013885:	58                   	pop    eax
c0013886:	5a                   	pop    edx
c0013887:	6a 00                	push   0x0
c0013889:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001388c:	e8 4d 14 00 00       	call   c0014cde <Thr::loadDLL(char const*, bool)>
c0013891:	83 c4 10             	add    esp,0x10
c0013894:	31 d2                	xor    edx,edx
c0013896:	89 c1                	mov    ecx,eax
c0013898:	b8 04 00 00 00       	mov    eax,0x4
c001389d:	85 c9                	test   ecx,ecx
c001389f:	74 15                	je     c00138b6 <SysLoadDLL(regs*)+0xa4>
c00138a1:	53                   	push   ebx
c00138a2:	53                   	push   ebx
c00138a3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00138a9:	51                   	push   ecx
c00138aa:	e8 6b 16 00 00       	call   c0014f1a <Thr::executeDLL(unsigned long, void*)>
c00138af:	83 c4 10             	add    esp,0x10
c00138b2:	31 c0                	xor    eax,eax
c00138b4:	31 d2                	xor    edx,edx
c00138b6:	59                   	pop    ecx
c00138b7:	5b                   	pop    ebx
c00138b8:	5e                   	pop    esi
c00138b9:	c3                   	ret    

c00138ba <SysRead(regs*)>:
c00138ba:	57                   	push   edi
c00138bb:	56                   	push   esi
c00138bc:	53                   	push   ebx
c00138bd:	83 ec 10             	sub    esp,0x10
c00138c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00138c4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00138c7:	83 f8 02             	cmp    eax,0x2
c00138ca:	77 10                	ja     c00138dc <SysRead(regs*)+0x22>
c00138cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138d1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138d4:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00138da:	eb 0e                	jmp    c00138ea <SysRead(regs*)+0x30>
c00138dc:	83 ec 0c             	sub    esp,0xc
c00138df:	50                   	push   eax
c00138e0:	e8 da 5b ff ff       	call   c00094bf <getFromFileDescriptor(int)>
c00138e5:	83 c4 10             	add    esp,0x10
c00138e8:	89 c1                	mov    ecx,eax
c00138ea:	83 c8 ff             	or     eax,0xffffffff
c00138ed:	85 c9                	test   ecx,ecx
c00138ef:	89 c2                	mov    edx,eax
c00138f1:	74 28                	je     c001391b <SysRead(regs*)+0x61>
c00138f3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00138fb:	83 ec 0c             	sub    esp,0xc
c00138fe:	31 ff                	xor    edi,edi
c0013900:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013904:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013906:	52                   	push   edx
c0013907:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001390a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001390d:	57                   	push   edi
c001390e:	56                   	push   esi
c001390f:	51                   	push   ecx
c0013910:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013913:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013917:	83 c4 20             	add    esp,0x20
c001391a:	99                   	cdq    
c001391b:	83 c4 10             	add    esp,0x10
c001391e:	5b                   	pop    ebx
c001391f:	5e                   	pop    esi
c0013920:	5f                   	pop    edi
c0013921:	c3                   	ret    

c0013922 <SysRegisterSignal(regs*)>:
c0013922:	83 ec 18             	sub    esp,0x18
c0013925:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013929:	6a 00                	push   0x0
c001392b:	6a 00                	push   0x0
c001392d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013930:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013933:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013938:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001393b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013941:	e8 2b d9 ff ff       	call   c0011271 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013946:	83 c4 2c             	add    esp,0x2c
c0013949:	99                   	cdq    
c001394a:	c3                   	ret    

c001394b <SysRegistryGetTypeFromPath(regs*)>:
c001394b:	57                   	push   edi
c001394c:	56                   	push   esi
c001394d:	53                   	push   ebx
c001394e:	81 ec 38 01 00 00    	sub    esp,0x138
c0013954:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001395b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001395e:	68 d7 13 02 c0       	push   0xc00213d7
c0013963:	e8 0e 71 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0013968:	5a                   	pop    edx
c0013969:	59                   	pop    ecx
c001396a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001396d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013970:	e8 51 f6 ff ff       	call   c0012fc6 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013975:	5f                   	pop    edi
c0013976:	5a                   	pop    edx
c0013977:	89 c6                	mov    esi,eax
c0013979:	50                   	push   eax
c001397a:	68 f7 13 02 c0       	push   0xc00213f7
c001397f:	e8 f2 70 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0013984:	83 c4 10             	add    esp,0x10
c0013987:	85 f6                	test   esi,esi
c0013989:	74 28                	je     c00139b3 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001398b:	50                   	push   eax
c001398c:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013990:	57                   	push   edi
c0013991:	56                   	push   esi
c0013992:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013995:	e8 1a f2 ff ff       	call   c0012bb4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001399a:	83 c4 0c             	add    esp,0xc
c001399d:	57                   	push   edi
c001399e:	50                   	push   eax
c001399f:	89 c3                	mov    ebx,eax
c00139a1:	68 ff 13 02 c0       	push   0xc00213ff
c00139a6:	e8 cb 70 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00139ab:	89 d8                	mov    eax,ebx
c00139ad:	83 c4 10             	add    esp,0x10
c00139b0:	99                   	cdq    
c00139b1:	eb 05                	jmp    c00139b8 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00139b3:	83 c8 ff             	or     eax,0xffffffff
c00139b6:	89 c2                	mov    edx,eax
c00139b8:	81 c4 30 01 00 00    	add    esp,0x130
c00139be:	5b                   	pop    ebx
c00139bf:	5e                   	pop    esi
c00139c0:	5f                   	pop    edi
c00139c1:	c3                   	ret    

c00139c2 <SysRegistryReadExtent(regs*)>:
c00139c2:	83 ec 1c             	sub    esp,0x1c
c00139c5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00139c9:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00139cc:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00139cf:	85 c0                	test   eax,eax
c00139d1:	79 1f                	jns    c00139f2 <SysRegistryReadExtent(regs*)+0x30>
c00139d3:	52                   	push   edx
c00139d4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00139d9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00139dd:	52                   	push   edx
c00139de:	50                   	push   eax
c00139df:	51                   	push   ecx
c00139e0:	e8 c4 f0 ff ff       	call   c0012aa9 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00139e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00139ed:	83 c4 10             	add    esp,0x10
c00139f0:	eb 14                	jmp    c0013a06 <SysRegistryReadExtent(regs*)+0x44>
c00139f2:	83 ec 04             	sub    esp,0x4
c00139f5:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00139f8:	50                   	push   eax
c00139f9:	51                   	push   ecx
c00139fa:	e8 42 eb ff ff       	call   c0012541 <CmGetString(Reghive_Tag*, int, char*)>
c00139ff:	83 c4 10             	add    esp,0x10
c0013a02:	31 c0                	xor    eax,eax
c0013a04:	31 d2                	xor    edx,edx
c0013a06:	83 c4 1c             	add    esp,0x1c
c0013a09:	c3                   	ret    

c0013a0a <SysRegistryPathToExtentLookup(regs*)>:
c0013a0a:	53                   	push   ebx
c0013a0b:	83 ec 10             	sub    esp,0x10
c0013a0e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013a12:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013a15:	68 15 14 02 c0       	push   0xc0021415
c0013a1a:	e8 57 70 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0013a1f:	58                   	pop    eax
c0013a20:	5a                   	pop    edx
c0013a21:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013a24:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013a27:	e8 9a f5 ff ff       	call   c0012fc6 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013a2c:	83 c4 18             	add    esp,0x18
c0013a2f:	5b                   	pop    ebx
c0013a30:	99                   	cdq    
c0013a31:	c3                   	ret    

c0013a32 <SysRegistryEnterDirectory(regs*)>:
c0013a32:	53                   	push   ebx
c0013a33:	83 ec 10             	sub    esp,0x10
c0013a36:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013a3a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013a3d:	68 38 14 02 c0       	push   0xc0021438
c0013a42:	e8 2f 70 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0013a47:	58                   	pop    eax
c0013a48:	5a                   	pop    edx
c0013a49:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013a4c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013a4f:	e8 64 eb ff ff       	call   c00125b8 <CmEnterDirectory(Reghive_Tag*, int)>
c0013a54:	83 c4 18             	add    esp,0x18
c0013a57:	5b                   	pop    ebx
c0013a58:	99                   	cdq    
c0013a59:	c3                   	ret    

c0013a5a <SysRegistryGetNext(regs*)>:
c0013a5a:	53                   	push   ebx
c0013a5b:	83 ec 10             	sub    esp,0x10
c0013a5e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013a62:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013a65:	68 56 14 02 c0       	push   0xc0021456
c0013a6a:	e8 07 70 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0013a6f:	58                   	pop    eax
c0013a70:	5a                   	pop    edx
c0013a71:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013a74:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013a77:	e8 7b eb ff ff       	call   c00125f7 <CmGetNext(Reghive_Tag*, int)>
c0013a7c:	83 c4 18             	add    esp,0x18
c0013a7f:	5b                   	pop    ebx
c0013a80:	99                   	cdq    
c0013a81:	c3                   	ret    

c0013a82 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013a82:	57                   	push   edi
c0013a83:	56                   	push   esi
c0013a84:	53                   	push   ebx
c0013a85:	81 ec 34 01 00 00    	sub    esp,0x134
c0013a8b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013a92:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013a96:	57                   	push   edi
c0013a97:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013a9a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013a9d:	e8 12 f1 ff ff       	call   c0012bb4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013aa2:	89 c3                	mov    ebx,eax
c0013aa4:	58                   	pop    eax
c0013aa5:	5a                   	pop    edx
c0013aa6:	57                   	push   edi
c0013aa7:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013aaa:	e8 71 cc fe ff       	call   c0000720 <strcpy>
c0013aaf:	81 c4 40 01 00 00    	add    esp,0x140
c0013ab5:	89 d8                	mov    eax,ebx
c0013ab7:	5b                   	pop    ebx
c0013ab8:	99                   	cdq    
c0013ab9:	5e                   	pop    esi
c0013aba:	5f                   	pop    edi
c0013abb:	c3                   	ret    

c0013abc <SysRegistryOpen(regs*)>:
c0013abc:	83 ec 18             	sub    esp,0x18
c0013abf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ac3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013ac6:	e8 06 e9 ff ff       	call   c00123d1 <CmOpen(char const*)>
c0013acb:	83 c4 1c             	add    esp,0x1c
c0013ace:	99                   	cdq    
c0013acf:	c3                   	ret    

c0013ad0 <SysRegistryClose(regs*)>:
c0013ad0:	83 ec 18             	sub    esp,0x18
c0013ad3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ad7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ada:	e8 10 ea ff ff       	call   c00124ef <CmClose(Reghive_Tag*)>
c0013adf:	31 c0                	xor    eax,eax
c0013ae1:	31 d2                	xor    edx,edx
c0013ae3:	83 c4 1c             	add    esp,0x1c
c0013ae6:	c3                   	ret    

c0013ae7 <SysSbrk(regs*)>:
c0013ae7:	56                   	push   esi
c0013ae8:	53                   	push   ebx
c0013ae9:	50                   	push   eax
c0013aea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013aef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013af3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013af6:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013af9:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013aff:	85 db                	test   ebx,ebx
c0013b01:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013b04:	74 02                	je     c0013b08 <SysSbrk(regs*)+0x21>
c0013b06:	79 06                	jns    c0013b0e <SysSbrk(regs*)+0x27>
c0013b08:	89 f0                	mov    eax,esi
c0013b0a:	31 d2                	xor    edx,edx
c0013b0c:	eb 2a                	jmp    c0013b38 <SysSbrk(regs*)+0x51>
c0013b0e:	83 c8 ff             	or     eax,0xffffffff
c0013b11:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013b17:	89 c2                	mov    edx,eax
c0013b19:	77 1d                	ja     c0013b38 <SysSbrk(regs*)+0x51>
c0013b1b:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013b21:	50                   	push   eax
c0013b22:	68 07 0c 00 00       	push   0xc07
c0013b27:	c1 ea 0c             	shr    edx,0xc
c0013b2a:	52                   	push   edx
c0013b2b:	51                   	push   ecx
c0013b2c:	e8 45 63 ff ff       	call   c0009e76 <VAS::allocatePages(int, int)>
c0013b31:	89 f0                	mov    eax,esi
c0013b33:	31 d2                	xor    edx,edx
c0013b35:	83 c4 10             	add    esp,0x10
c0013b38:	59                   	pop    ecx
c0013b39:	5b                   	pop    ebx
c0013b3a:	5e                   	pop    esi
c0013b3b:	c3                   	ret    

c0013b3c <SysSetCwd(regs*)>:
c0013b3c:	83 ec 14             	sub    esp,0x14
c0013b3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b43:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013b46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b4b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013b4e:	e8 6a 78 ff ff       	call   c000b3bd <Fs::setcwd(Process*, char*)>
c0013b53:	83 c4 1c             	add    esp,0x1c
c0013b56:	99                   	cdq    
c0013b57:	c3                   	ret    

c0013b58 <SysSetTime(regs*)>:
c0013b58:	56                   	push   esi
c0013b59:	be 0c 00 00 00       	mov    esi,0xc
c0013b5e:	53                   	push   ebx
c0013b5f:	83 ec 18             	sub    esp,0x18
c0013b62:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013b6a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013b6e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013b76:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013b79:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013b7c:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0013b7f:	89 c2                	mov    edx,eax
c0013b81:	c1 e8 05             	shr    eax,0x5
c0013b84:	83 e2 1f             	and    edx,0x1f
c0013b87:	42                   	inc    edx
c0013b88:	81 eb 6c 07 00 00    	sub    ebx,0x76c
c0013b8e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013b92:	c1 e3 10             	shl    ebx,0x10
c0013b95:	31 d2                	xor    edx,edx
c0013b97:	f7 f6                	div    esi
c0013b99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ba1:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c0013ba7:	88 d4                	mov    ah,dl
c0013ba9:	31 d2                	xor    edx,edx
c0013bab:	0f b7 c0             	movzx  eax,ax
c0013bae:	09 d8                	or     eax,ebx
c0013bb0:	bb 3c 00 00 00       	mov    ebx,0x3c
c0013bb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013bb9:	89 c8                	mov    eax,ecx
c0013bbb:	f7 f3                	div    ebx
c0013bbd:	c1 e2 10             	shl    edx,0x10
c0013bc0:	09 d6                	or     esi,edx
c0013bc2:	31 d2                	xor    edx,edx
c0013bc4:	f7 f3                	div    ebx
c0013bc6:	89 f0                	mov    eax,esi
c0013bc8:	bb 10 0e 00 00       	mov    ebx,0xe10
c0013bcd:	88 d4                	mov    ah,dl
c0013bcf:	31 d2                	xor    edx,edx
c0013bd1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013bd5:	89 c8                	mov    eax,ecx
c0013bd7:	b9 18 00 00 00       	mov    ecx,0x18
c0013bdc:	f7 f3                	div    ebx
c0013bde:	31 d2                	xor    edx,edx
c0013be0:	f7 f1                	div    ecx
c0013be2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0013be7:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c0013beb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013bef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013bf3:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013bf9:	e8 74 85 ff ff       	call   c000c172 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013bfe:	83 c4 24             	add    esp,0x24
c0013c01:	31 d2                	xor    edx,edx
c0013c03:	5b                   	pop    ebx
c0013c04:	5e                   	pop    esi
c0013c05:	34 01                	xor    al,0x1
c0013c07:	0f b6 c0             	movzx  eax,al
c0013c0a:	c3                   	ret    

c0013c0b <SysTimezone(regs*)>:
c0013c0b:	53                   	push   ebx
c0013c0c:	83 ec 08             	sub    esp,0x8
c0013c0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c13:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013c17:	75 17                	jne    c0013c30 <SysTimezone(regs*)+0x25>
c0013c19:	83 ec 0c             	sub    esp,0xc
c0013c1c:	68 6d 14 02 c0       	push   0xc002146d
c0013c21:	e8 50 6e ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0013c26:	83 c8 ff             	or     eax,0xffffffff
c0013c29:	83 c4 10             	add    esp,0x10
c0013c2c:	89 c2                	mov    edx,eax
c0013c2e:	eb 20                	jmp    c0013c50 <SysTimezone(regs*)+0x45>
c0013c30:	83 ec 0c             	sub    esp,0xc
c0013c33:	68 82 14 02 c0       	push   0xc0021482
c0013c38:	e8 39 6e ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0013c3d:	58                   	pop    eax
c0013c3e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c41:	e8 ea 7c ff ff       	call   c000b930 <User::loadClockSettings(int)>
c0013c46:	83 c4 10             	add    esp,0x10
c0013c49:	b8 01 00 00 00       	mov    eax,0x1
c0013c4e:	31 d2                	xor    edx,edx
c0013c50:	83 c4 08             	add    esp,0x8
c0013c53:	5b                   	pop    ebx
c0013c54:	c3                   	ret    

c0013c55 <SysWrite(regs*)>:
c0013c55:	57                   	push   edi
c0013c56:	56                   	push   esi
c0013c57:	53                   	push   ebx
c0013c58:	83 ec 10             	sub    esp,0x10
c0013c5b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013c5f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c62:	83 f8 02             	cmp    eax,0x2
c0013c65:	77 10                	ja     c0013c77 <SysWrite(regs*)+0x22>
c0013c67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c6c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c6f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013c75:	eb 0e                	jmp    c0013c85 <SysWrite(regs*)+0x30>
c0013c77:	83 ec 0c             	sub    esp,0xc
c0013c7a:	50                   	push   eax
c0013c7b:	e8 3f 58 ff ff       	call   c00094bf <getFromFileDescriptor(int)>
c0013c80:	83 c4 10             	add    esp,0x10
c0013c83:	89 c1                	mov    ecx,eax
c0013c85:	83 c8 ff             	or     eax,0xffffffff
c0013c88:	85 c9                	test   ecx,ecx
c0013c8a:	89 c2                	mov    edx,eax
c0013c8c:	74 28                	je     c0013cb6 <SysWrite(regs*)+0x61>
c0013c8e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013c96:	83 ec 0c             	sub    esp,0xc
c0013c99:	31 ff                	xor    edi,edi
c0013c9b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013c9f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ca1:	52                   	push   edx
c0013ca2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013ca5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013ca8:	57                   	push   edi
c0013ca9:	56                   	push   esi
c0013caa:	51                   	push   ecx
c0013cab:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013cae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013cb2:	83 c4 20             	add    esp,0x20
c0013cb5:	99                   	cdq    
c0013cb6:	83 c4 10             	add    esp,0x10
c0013cb9:	5b                   	pop    ebx
c0013cba:	5e                   	pop    esi
c0013cbb:	5f                   	pop    edi
c0013cbc:	c3                   	ret    

c0013cbd <SysWsbe(regs*)>:
c0013cbd:	57                   	push   edi
c0013cbe:	b9 0b 00 00 00       	mov    ecx,0xb
c0013cc3:	56                   	push   esi
c0013cc4:	be c1 14 02 c0       	mov    esi,0xc00214c1
c0013cc9:	53                   	push   ebx
c0013cca:	83 ec 30             	sub    esp,0x30
c0013ccd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013cd1:	fc                   	cld    
c0013cd2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013cd4:	83 ec 0c             	sub    esp,0xc
c0013cd7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013cdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ce0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ce3:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013ce9:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ceb:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0013cee:	57                   	push   edi
c0013cef:	e8 2c c9 fe ff       	call   c0000620 <strlen>
c0013cf4:	5a                   	pop    edx
c0013cf5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013cf9:	52                   	push   edx
c0013cfa:	31 d2                	xor    edx,edx
c0013cfc:	57                   	push   edi
c0013cfd:	52                   	push   edx
c0013cfe:	50                   	push   eax
c0013cff:	56                   	push   esi
c0013d00:	ff d3                	call   ebx
c0013d02:	83 c4 14             	add    esp,0x14
c0013d05:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0013d09:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013d0c:	e8 07 23 00 00       	call   c0016018 <terminateTask(int)>
c0013d11:	83 c4 40             	add    esp,0x40
c0013d14:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013d19:	5b                   	pop    ebx
c0013d1a:	31 d2                	xor    edx,edx
c0013d1c:	5e                   	pop    esi
c0013d1d:	5f                   	pop    edi
c0013d1e:	c3                   	ret    

c0013d1f <SysYield(regs*)>:
c0013d1f:	83 ec 0c             	sub    esp,0xc
c0013d22:	fa                   	cli    
c0013d23:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013d29:	e8 32 1a 00 00       	call   c0015760 <schedule()>
c0013d2e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013d33:	48                   	dec    eax
c0013d34:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013d39:	75 01                	jne    c0013d3c <SysYield(regs*)+0x1d>
c0013d3b:	fb                   	sti    
c0013d3c:	31 c0                	xor    eax,eax
c0013d3e:	31 d2                	xor    edx,edx
c0013d40:	83 c4 0c             	add    esp,0xc
c0013d43:	c3                   	ret    

c0013d44 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013d44:	55                   	push   ebp
c0013d45:	57                   	push   edi
c0013d46:	56                   	push   esi
c0013d47:	53                   	push   ebx
c0013d48:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013d4e:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013d59:	74 3b                	je     c0013d96 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013d5b:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013d63:	74 31                	je     c0013d96 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013d65:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013d6d:	75 27                	jne    c0013d96 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013d6f:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013d76:	05 00 10 00 00       	add    eax,0x1000
c0013d7b:	89 c2                	mov    edx,eax
c0013d7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013d82:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013d89:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0013d8f:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0013d96:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013d9d:	83 ec 0c             	sub    esp,0xc
c0013da0:	6a 01                	push   0x1
c0013da2:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013da8:	e8 73 58 ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c0013dad:	83 c4 10             	add    esp,0x10
c0013db0:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013db6:	89 c3                	mov    ebx,eax
c0013db8:	0f 86 26 01 00 00    	jbe    c0013ee4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0013dbe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013dc6:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013dcd:	c1 ee 0c             	shr    esi,0xc
c0013dd0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013dd4:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013ddb:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013de2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013de6:	29 ef                	sub    edi,ebp
c0013de8:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0013dec:	0f 83 f9 00 00 00    	jae    c0013eeb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0013df2:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013df8:	b8 00 10 00 00       	mov    eax,0x1000
c0013dfd:	0f 47 f8             	cmova  edi,eax
c0013e00:	83 ec 0c             	sub    esp,0xc
c0013e03:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013e0a:	31 d2                	xor    edx,edx
c0013e0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013e0e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013e12:	50                   	push   eax
c0013e13:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013e17:	56                   	push   esi
c0013e18:	52                   	push   edx
c0013e19:	57                   	push   edi
c0013e1a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013e21:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013e24:	83 c4 20             	add    esp,0x20
c0013e27:	85 c0                	test   eax,eax
c0013e29:	75 06                	jne    c0013e31 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0013e2b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013e2f:	74 13                	je     c0013e44 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0013e31:	83 ec 0c             	sub    esp,0xc
c0013e34:	53                   	push   ebx
c0013e35:	e8 ff 5a ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0013e3a:	83 c4 10             	add    esp,0x10
c0013e3d:	31 c0                	xor    eax,eax
c0013e3f:	e9 7c 01 00 00       	jmp    c0013fc0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0013e44:	fa                   	cli    
c0013e45:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013e4b:	e8 bc 3f ff ff       	call   c0007e0c <Phys::allocatePage()>
c0013e50:	6a 07                	push   0x7
c0013e52:	53                   	push   ebx
c0013e53:	50                   	push   eax
c0013e54:	89 c7                	mov    edi,eax
c0013e56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e5b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e5e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013e64:	e8 d9 5e ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013e69:	83 c4 0c             	add    esp,0xc
c0013e6c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013e73:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013e79:	6a 00                	push   0x0
c0013e7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e83:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013e89:	e8 20 5d ff ff       	call   c0009bae <VAS::mapOtherVASIn(bool, VAS*)>
c0013e8e:	58                   	pop    eax
c0013e8f:	5a                   	pop    edx
c0013e90:	68 07 0c 00 00       	push   0xc07
c0013e95:	55                   	push   ebp
c0013e96:	57                   	push   edi
c0013e97:	89 df                	mov    edi,ebx
c0013e99:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013ea0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ea6:	6a 00                	push   0x0
c0013ea8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ead:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013eb0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013eb6:	e8 95 62 ff ff       	call   c000a150 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013ebb:	b9 00 10 00 00       	mov    ecx,0x1000
c0013ec0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ec2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013ec7:	83 c4 20             	add    esp,0x20
c0013eca:	48                   	dec    eax
c0013ecb:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013ed0:	85 c0                	test   eax,eax
c0013ed2:	75 01                	jne    c0013ed5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0013ed4:	fb                   	sti    
c0013ed5:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013ed9:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013edf:	e9 f0 fe ff ff       	jmp    c0013dd4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0013ee4:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013eeb:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013ef2:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013ef8:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013efe:	0f 86 ae 00 00 00    	jbe    c0013fb2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013f04:	fa                   	cli    
c0013f05:	51                   	push   ecx
c0013f06:	31 ff                	xor    edi,edi
c0013f08:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013f0f:	c1 ee 0c             	shr    esi,0xc
c0013f12:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013f18:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013f1e:	6a 00                	push   0x0
c0013f20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f28:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013f2e:	e8 7b 5c ff ff       	call   c0009bae <VAS::mapOtherVASIn(bool, VAS*)>
c0013f33:	83 c4 10             	add    esp,0x10
c0013f36:	e8 d1 3e ff ff       	call   c0007e0c <Phys::allocatePage()>
c0013f3b:	47                   	inc    edi
c0013f3c:	6a 07                	push   0x7
c0013f3e:	53                   	push   ebx
c0013f3f:	50                   	push   eax
c0013f40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f44:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013f4a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013f4d:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013f53:	e8 ea 5d ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013f58:	58                   	pop    eax
c0013f59:	5a                   	pop    edx
c0013f5a:	68 07 0c 00 00       	push   0xc07
c0013f5f:	55                   	push   ebp
c0013f60:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013f66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f6a:	50                   	push   eax
c0013f6b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013f72:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013f78:	6a 00                	push   0x0
c0013f7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f7f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f82:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013f88:	e8 c3 61 ff ff       	call   c000a150 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013f8d:	83 c4 1c             	add    esp,0x1c
c0013f90:	68 00 10 00 00       	push   0x1000
c0013f95:	6a 00                	push   0x0
c0013f97:	53                   	push   ebx
c0013f98:	e8 e3 c5 fe ff       	call   c0000580 <memset>
c0013f9d:	83 c4 10             	add    esp,0x10
c0013fa0:	39 fe                	cmp    esi,edi
c0013fa2:	77 92                	ja     c0013f36 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0013fa4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013fa9:	48                   	dec    eax
c0013faa:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013faf:	75 01                	jne    c0013fb2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013fb1:	fb                   	sti    
c0013fb2:	83 ec 0c             	sub    esp,0xc
c0013fb5:	53                   	push   ebx
c0013fb6:	e8 7e 59 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0013fbb:	83 c4 10             	add    esp,0x10
c0013fbe:	b0 01                	mov    al,0x1
c0013fc0:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013fc6:	5b                   	pop    ebx
c0013fc7:	5e                   	pop    esi
c0013fc8:	5f                   	pop    edi
c0013fc9:	5d                   	pop    ebp
c0013fca:	c3                   	ret    

c0013fcb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013fcb:	55                   	push   ebp
c0013fcc:	57                   	push   edi
c0013fcd:	56                   	push   esi
c0013fce:	53                   	push   ebx
c0013fcf:	83 ec 48             	sub    esp,0x48
c0013fd2:	68 14 01 00 00       	push   0x114
c0013fd7:	e8 20 3b ff ff       	call   c0007afc <malloc>
c0013fdc:	83 c4 0c             	add    esp,0xc
c0013fdf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013fe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013fe7:	89 c7                	mov    edi,eax
c0013fe9:	50                   	push   eax
c0013fea:	e8 09 70 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0013fef:	58                   	pop    eax
c0013ff0:	5a                   	pop    edx
c0013ff1:	6a 01                	push   0x1
c0013ff3:	57                   	push   edi
c0013ff4:	e8 bd 70 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0013ff9:	83 c4 10             	add    esp,0x10
c0013ffc:	85 c0                	test   eax,eax
c0013ffe:	0f 85 4d 01 00 00    	jne    c0014151 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0014004:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001400c:	83 ec 0c             	sub    esp,0xc
c001400f:	6a 34                	push   0x34
c0014011:	e8 e6 3a ff ff       	call   c0007afc <malloc>
c0014016:	89 c3                	mov    ebx,eax
c0014018:	58                   	pop    eax
c0014019:	8b 07                	mov    eax,DWORD PTR [edi]
c001401b:	8d 74 24 38          	lea    esi,[esp+0x38]
c001401f:	56                   	push   esi
c0014020:	53                   	push   ebx
c0014021:	6a 00                	push   0x0
c0014023:	6a 34                	push   0x34
c0014025:	57                   	push   edi
c0014026:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014029:	83 c4 20             	add    esp,0x20
c001402c:	85 c0                	test   eax,eax
c001402e:	0f 85 1d 01 00 00    	jne    c0014151 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0014034:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001403a:	0f 85 11 01 00 00    	jne    c0014151 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0014040:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014043:	85 c0                	test   eax,eax
c0014045:	0f 84 06 01 00 00    	je     c0014151 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c001404b:	31 d2                	xor    edx,edx
c001404d:	55                   	push   ebp
c001404e:	52                   	push   edx
c001404f:	50                   	push   eax
c0014050:	57                   	push   edi
c0014051:	e8 1e 71 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0014056:	83 c4 10             	add    esp,0x10
c0014059:	85 c0                	test   eax,eax
c001405b:	0f 85 f0 00 00 00    	jne    c0014151 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0014061:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014064:	83 ec 0c             	sub    esp,0xc
c0014067:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001406b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001406f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014073:	0f af c2             	imul   eax,edx
c0014076:	50                   	push   eax
c0014077:	e8 80 3a ff ff       	call   c0007afc <malloc>
c001407c:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001407e:	89 34 24             	mov    DWORD PTR [esp],esi
c0014081:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014085:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014089:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001408d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014091:	0f af c2             	imul   eax,edx
c0014094:	99                   	cdq    
c0014095:	52                   	push   edx
c0014096:	50                   	push   eax
c0014097:	57                   	push   edi
c0014098:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001409b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001409e:	83 c4 20             	add    esp,0x20
c00140a1:	85 c0                	test   eax,eax
c00140a3:	0f 84 a8 00 00 00    	je     c0014151 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c00140a9:	31 d2                	xor    edx,edx
c00140ab:	51                   	push   ecx
c00140ac:	52                   	push   edx
c00140ad:	50                   	push   eax
c00140ae:	57                   	push   edi
c00140af:	e8 c0 70 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c00140b4:	83 c4 10             	add    esp,0x10
c00140b7:	85 c0                	test   eax,eax
c00140b9:	0f 85 92 00 00 00    	jne    c0014151 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c00140bf:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00140c3:	83 ec 0c             	sub    esp,0xc
c00140c6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00140ca:	0f af c2             	imul   eax,edx
c00140cd:	50                   	push   eax
c00140ce:	e8 29 3a ff ff       	call   c0007afc <malloc>
c00140d3:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00140d5:	89 34 24             	mov    DWORD PTR [esp],esi
c00140d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00140dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140e0:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00140e4:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00140e8:	0f af c2             	imul   eax,edx
c00140eb:	99                   	cdq    
c00140ec:	52                   	push   edx
c00140ed:	50                   	push   eax
c00140ee:	57                   	push   edi
c00140ef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00140f2:	83 c4 20             	add    esp,0x20
c00140f5:	31 c9                	xor    ecx,ecx
c00140f7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00140ff:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014103:	39 c8                	cmp    eax,ecx
c0014105:	0f 86 8b 00 00 00    	jbe    c0014196 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1cb>
c001410b:	89 cd                	mov    ebp,ecx
c001410d:	c1 e5 05             	shl    ebp,0x5
c0014110:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014114:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0014118:	75 73                	jne    c001418d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c2>
c001411a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001411e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014121:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014124:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014128:	52                   	push   edx
c0014129:	31 d2                	xor    edx,edx
c001412b:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001412e:	52                   	push   edx
c001412f:	50                   	push   eax
c0014130:	57                   	push   edi
c0014131:	e8 3e 70 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0014136:	83 c4 10             	add    esp,0x10
c0014139:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001413d:	85 c0                	test   eax,eax
c001413f:	74 17                	je     c0014158 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18d>
c0014141:	83 ec 0c             	sub    esp,0xc
c0014144:	68 ed 14 02 c0       	push   0xc00214ed
c0014149:	e8 28 69 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001414e:	83 c4 10             	add    esp,0x10
c0014151:	31 c0                	xor    eax,eax
c0014153:	e9 8e 00 00 00       	jmp    c00141e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x21b>
c0014158:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001415c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001415f:	83 ec 0c             	sub    esp,0xc
c0014162:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0014165:	50                   	push   eax
c0014166:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001416a:	56                   	push   esi
c001416b:	57                   	push   edi
c001416c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014170:	e8 cf fb ff ff       	call   c0013d44 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014175:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014179:	83 c4 20             	add    esp,0x20
c001417c:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014180:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014184:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014189:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001418d:	41                   	inc    ecx
c001418e:	0f b7 c9             	movzx  ecx,cx
c0014191:	e9 69 ff ff ff       	jmp    c00140ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014196:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001419a:	83 ec 0c             	sub    esp,0xc
c001419d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00141a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141a5:	89 b2 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],esi
c00141ab:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c00141b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00141b6:	05 00 10 00 00       	add    eax,0x1000
c00141bb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00141be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141c2:	e8 48 39 ff ff       	call   c0007b0f <free>
c00141c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141ca:	e8 40 39 ff ff       	call   c0007b0f <free>
c00141cf:	58                   	pop    eax
c00141d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141d4:	e8 36 39 ff ff       	call   c0007b0f <free>
c00141d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00141dc:	e8 33 6f ff ff       	call   c000b114 <File::close()>
c00141e1:	83 c4 10             	add    esp,0x10
c00141e4:	b0 01                	mov    al,0x1
c00141e6:	83 c4 3c             	add    esp,0x3c
c00141e9:	5b                   	pop    ebx
c00141ea:	5e                   	pop    esi
c00141eb:	5f                   	pop    edi
c00141ec:	5d                   	pop    ebp
c00141ed:	c3                   	ret    

c00141ee <Thr::runtimeReferenceHelper()>:
c00141ee:	83 ec 18             	sub    esp,0x18
c00141f1:	68 f5 14 02 c0       	push   0xc00214f5
c00141f6:	e8 7b 68 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00141fb:	fa                   	cli    
c00141fc:	83 c4 10             	add    esp,0x10
c00141ff:	eb fe                	jmp    c00141ff <Thr::runtimeReferenceHelper()+0x11>

c0014201 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014201:	57                   	push   edi
c0014202:	56                   	push   esi
c0014203:	53                   	push   ebx
c0014204:	31 db                	xor    ebx,ebx
c0014206:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c001420c:	7e 3c                	jle    c001424a <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001420e:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0014215:	31 ff                	xor    edi,edi
c0014217:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c001421e:	7e 27                	jle    c0014247 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014220:	50                   	push   eax
c0014221:	50                   	push   eax
c0014222:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014226:	8b 06                	mov    eax,DWORD PTR [esi]
c0014228:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c001422f:	50                   	push   eax
c0014230:	e8 0b c6 fe ff       	call   c0000840 <strcmp>
c0014235:	83 c4 10             	add    esp,0x10
c0014238:	85 c0                	test   eax,eax
c001423a:	75 05                	jne    c0014241 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001423c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001423f:	eb 0b                	jmp    c001424c <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014241:	83 c6 10             	add    esi,0x10
c0014244:	47                   	inc    edi
c0014245:	eb d0                	jmp    c0014217 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014247:	43                   	inc    ebx
c0014248:	eb bc                	jmp    c0014206 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001424a:	31 c0                	xor    eax,eax
c001424c:	5b                   	pop    ebx
c001424d:	5e                   	pop    esi
c001424e:	5f                   	pop    edi
c001424f:	c3                   	ret    

c0014250 <Thr::loadKernelSymbolTable(char const*)>:
c0014250:	55                   	push   ebp
c0014251:	57                   	push   edi
c0014252:	56                   	push   esi
c0014253:	53                   	push   ebx
c0014254:	83 ec 68             	sub    esp,0x68
c0014257:	68 14 01 00 00       	push   0x114
c001425c:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0014262:	e8 95 38 ff ff       	call   c0007afc <malloc>
c0014267:	83 c4 0c             	add    esp,0xc
c001426a:	56                   	push   esi
c001426b:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001426f:	89 c3                	mov    ebx,eax
c0014271:	50                   	push   eax
c0014272:	e8 81 6d ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0014277:	5e                   	pop    esi
c0014278:	5f                   	pop    edi
c0014279:	6a 01                	push   0x1
c001427b:	53                   	push   ebx
c001427c:	e8 35 6e ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0014281:	83 c4 10             	add    esp,0x10
c0014284:	85 c0                	test   eax,eax
c0014286:	74 0a                	je     c0014292 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014288:	83 ec 0c             	sub    esp,0xc
c001428b:	68 17 15 02 c0       	push   0xc0021517
c0014290:	eb 34                	jmp    c00142c6 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014292:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001429a:	83 ec 0c             	sub    esp,0xc
c001429d:	6a 34                	push   0x34
c001429f:	e8 58 38 ff ff       	call   c0007afc <malloc>
c00142a4:	59                   	pop    ecx
c00142a5:	8d 74 24 34          	lea    esi,[esp+0x34]
c00142a9:	89 c7                	mov    edi,eax
c00142ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142ad:	56                   	push   esi
c00142ae:	57                   	push   edi
c00142af:	6a 00                	push   0x0
c00142b1:	6a 34                	push   0x34
c00142b3:	53                   	push   ebx
c00142b4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00142b7:	83 c4 20             	add    esp,0x20
c00142ba:	85 c0                	test   eax,eax
c00142bc:	74 17                	je     c00142d5 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00142be:	83 ec 0c             	sub    esp,0xc
c00142c1:	68 2e 15 02 c0       	push   0xc002152e
c00142c6:	e8 6a cb ff ff       	call   c0010e35 <KePanic(char const*)>
c00142cb:	83 c4 10             	add    esp,0x10
c00142ce:	31 c0                	xor    eax,eax
c00142d0:	e9 34 02 00 00       	jmp    c0014509 <Thr::loadKernelSymbolTable(char const*)+0x2b9>
c00142d5:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00142db:	75 e1                	jne    c00142be <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00142dd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00142e0:	85 c0                	test   eax,eax
c00142e2:	74 da                	je     c00142be <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00142e4:	52                   	push   edx
c00142e5:	31 d2                	xor    edx,edx
c00142e7:	52                   	push   edx
c00142e8:	50                   	push   eax
c00142e9:	53                   	push   ebx
c00142ea:	e8 85 6e ff ff       	call   c000b174 <File::seek(unsigned long long)>
c00142ef:	83 c4 10             	add    esp,0x10
c00142f2:	85 c0                	test   eax,eax
c00142f4:	75 c8                	jne    c00142be <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00142f6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00142fa:	83 ec 0c             	sub    esp,0xc
c00142fd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014301:	0f af c2             	imul   eax,edx
c0014304:	50                   	push   eax
c0014305:	e8 f2 37 ff ff       	call   c0007afc <malloc>
c001430a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001430c:	89 34 24             	mov    DWORD PTR [esp],esi
c001430f:	31 f6                	xor    esi,esi
c0014311:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014315:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014319:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001431d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014321:	0f af c2             	imul   eax,edx
c0014324:	99                   	cdq    
c0014325:	52                   	push   edx
c0014326:	50                   	push   eax
c0014327:	53                   	push   ebx
c0014328:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001432b:	83 c4 20             	add    esp,0x20
c001432e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014336:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001433e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014346:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001434e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014352:	39 f0                	cmp    eax,esi
c0014354:	0f 86 ab 00 00 00    	jbe    c0014405 <Thr::loadKernelSymbolTable(char const*)+0x1b5>
c001435a:	6b ee 28             	imul   ebp,esi,0x28
c001435d:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0014361:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0014364:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014368:	50                   	push   eax
c0014369:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001436d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014371:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014374:	6b c0 28             	imul   eax,eax,0x28
c0014377:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001437b:	89 d0                	mov    eax,edx
c001437d:	31 d2                	xor    edx,edx
c001437f:	52                   	push   edx
c0014380:	50                   	push   eax
c0014381:	53                   	push   ebx
c0014382:	e8 ed 6d ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0014387:	83 c4 0c             	add    esp,0xc
c001438a:	6a 20                	push   0x20
c001438c:	6a 00                	push   0x0
c001438e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014392:	52                   	push   edx
c0014393:	e8 e8 c1 fe ff       	call   c0000580 <memset>
c0014398:	58                   	pop    eax
c0014399:	8b 03                	mov    eax,DWORD PTR [ebx]
c001439b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001439f:	51                   	push   ecx
c00143a0:	8d 54 24 40          	lea    edx,[esp+0x40]
c00143a4:	52                   	push   edx
c00143a5:	6a 00                	push   0x0
c00143a7:	6a 1f                	push   0x1f
c00143a9:	53                   	push   ebx
c00143aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143ad:	83 c4 18             	add    esp,0x18
c00143b0:	68 45 15 02 c0       	push   0xc0021545
c00143b5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00143b9:	52                   	push   edx
c00143ba:	e8 81 c4 fe ff       	call   c0000840 <strcmp>
c00143bf:	83 c4 10             	add    esp,0x10
c00143c2:	85 c0                	test   eax,eax
c00143c4:	75 0f                	jne    c00143d5 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00143c6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00143c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00143d5:	50                   	push   eax
c00143d6:	50                   	push   eax
c00143d7:	68 4d 15 02 c0       	push   0xc002154d
c00143dc:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00143e0:	50                   	push   eax
c00143e1:	e8 5a c4 fe ff       	call   c0000840 <strcmp>
c00143e6:	83 c4 10             	add    esp,0x10
c00143e9:	85 c0                	test   eax,eax
c00143eb:	75 0f                	jne    c00143fc <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00143ed:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00143f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00143fc:	46                   	inc    esi
c00143fd:	0f b7 f6             	movzx  esi,si
c0014400:	e9 49 ff ff ff       	jmp    c001434e <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014405:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001440a:	75 10                	jne    c001441c <Thr::loadKernelSymbolTable(char const*)+0x1cc>
c001440c:	83 ec 0c             	sub    esp,0xc
c001440f:	68 55 15 02 c0       	push   0xc0021555
c0014414:	e8 1c ca ff ff       	call   c0010e35 <KePanic(char const*)>
c0014419:	83 c4 10             	add    esp,0x10
c001441c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014421:	75 10                	jne    c0014433 <Thr::loadKernelSymbolTable(char const*)+0x1e3>
c0014423:	83 ec 0c             	sub    esp,0xc
c0014426:	68 55 15 02 c0       	push   0xc0021555
c001442b:	e8 05 ca ff ff       	call   c0010e35 <KePanic(char const*)>
c0014430:	83 c4 10             	add    esp,0x10
c0014433:	50                   	push   eax
c0014434:	31 d2                	xor    edx,edx
c0014436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001443a:	52                   	push   edx
c001443b:	50                   	push   eax
c001443c:	53                   	push   ebx
c001443d:	e8 32 6d ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0014442:	5a                   	pop    edx
c0014443:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014447:	e8 b0 36 ff ff       	call   c0007afc <malloc>
c001444c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014450:	31 c9                	xor    ecx,ecx
c0014452:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014456:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014458:	5e                   	pop    esi
c0014459:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001445d:	55                   	push   ebp
c001445e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014462:	51                   	push   ecx
c0014463:	52                   	push   edx
c0014464:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014468:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001446c:	53                   	push   ebx
c001446d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014470:	83 c4 14             	add    esp,0x14
c0014473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014477:	e8 80 36 ff ff       	call   c0007afc <malloc>
c001447c:	89 c6                	mov    esi,eax
c001447e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014480:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014483:	56                   	push   esi
c0014484:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014488:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001448c:	51                   	push   ecx
c001448d:	52                   	push   edx
c001448e:	53                   	push   ebx
c001448f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014492:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014496:	83 c4 1c             	add    esp,0x1c
c0014499:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c001449f:	c1 e8 04             	shr    eax,0x4
c00144a2:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c00144a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144ad:	31 d2                	xor    edx,edx
c00144af:	52                   	push   edx
c00144b0:	50                   	push   eax
c00144b1:	53                   	push   ebx
c00144b2:	e8 bd 6c ff ff       	call   c000b174 <File::seek(unsigned long long)>
c00144b7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00144b9:	31 d2                	xor    edx,edx
c00144bb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00144be:	56                   	push   esi
c00144bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00144c3:	52                   	push   edx
c00144c4:	50                   	push   eax
c00144c5:	53                   	push   ebx
c00144c6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00144c9:	83 c4 14             	add    esp,0x14
c00144cc:	53                   	push   ebx
c00144cd:	e8 42 6c ff ff       	call   c000b114 <File::close()>
c00144d2:	5d                   	pop    ebp
c00144d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00144d7:	e8 33 36 ff ff       	call   c0007b0f <free>
c00144dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00144df:	e8 2b 36 ff ff       	call   c0007b0f <free>
c00144e4:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c00144e9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00144ed:	83 c4 10             	add    esp,0x10
c00144f0:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c00144f7:	8d 50 01             	lea    edx,[eax+0x1]
c00144fa:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0014501:	b0 01                	mov    al,0x1
c0014503:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0014509:	83 c4 5c             	add    esp,0x5c
c001450c:	5b                   	pop    ebx
c001450d:	5e                   	pop    esi
c001450e:	5f                   	pop    edi
c001450f:	5d                   	pop    ebp
c0014510:	c3                   	ret    

c0014511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014511:	55                   	push   ebp
c0014512:	57                   	push   edi
c0014513:	56                   	push   esi
c0014514:	53                   	push   ebx
c0014515:	81 ec 68 03 00 00    	sub    esp,0x368
c001451b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014522:	8b 1d 90 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028190
c0014528:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001452c:	68 14 01 00 00       	push   0x114
c0014531:	e8 c6 35 ff ff       	call   c0007afc <malloc>
c0014536:	83 c4 0c             	add    esp,0xc
c0014539:	53                   	push   ebx
c001453a:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014541:	50                   	push   eax
c0014542:	89 c6                	mov    esi,eax
c0014544:	e8 af 6a ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0014549:	5f                   	pop    edi
c001454a:	5d                   	pop    ebp
c001454b:	6a 01                	push   0x1
c001454d:	56                   	push   esi
c001454e:	e8 63 6b ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0014553:	83 c4 10             	add    esp,0x10
c0014556:	85 c0                	test   eax,eax
c0014558:	0f 85 bc 06 00 00    	jne    c0014c1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c001455e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014566:	83 ec 0c             	sub    esp,0xc
c0014569:	6a 34                	push   0x34
c001456b:	e8 8c 35 ff ff       	call   c0007afc <malloc>
c0014570:	5b                   	pop    ebx
c0014571:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014575:	89 c5                	mov    ebp,eax
c0014577:	8b 06                	mov    eax,DWORD PTR [esi]
c0014579:	53                   	push   ebx
c001457a:	55                   	push   ebp
c001457b:	6a 00                	push   0x0
c001457d:	6a 34                	push   0x34
c001457f:	56                   	push   esi
c0014580:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014583:	83 c4 20             	add    esp,0x20
c0014586:	85 c0                	test   eax,eax
c0014588:	0f 85 8c 06 00 00    	jne    c0014c1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c001458e:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014595:	0f 85 7f 06 00 00    	jne    c0014c1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c001459b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001459e:	85 c0                	test   eax,eax
c00145a0:	0f 84 74 06 00 00    	je     c0014c1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c00145a6:	31 d2                	xor    edx,edx
c00145a8:	51                   	push   ecx
c00145a9:	52                   	push   edx
c00145aa:	50                   	push   eax
c00145ab:	56                   	push   esi
c00145ac:	e8 c3 6b ff ff       	call   c000b174 <File::seek(unsigned long long)>
c00145b1:	83 c4 10             	add    esp,0x10
c00145b4:	85 c0                	test   eax,eax
c00145b6:	0f 85 5e 06 00 00    	jne    c0014c1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c00145bc:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00145bf:	83 ec 0c             	sub    esp,0xc
c00145c2:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00145c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00145ca:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00145ce:	0f af c2             	imul   eax,edx
c00145d1:	50                   	push   eax
c00145d2:	e8 25 35 ff ff       	call   c0007afc <malloc>
c00145d7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00145d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00145e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145e4:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00145e8:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00145ec:	0f af c2             	imul   eax,edx
c00145ef:	99                   	cdq    
c00145f0:	52                   	push   edx
c00145f1:	50                   	push   eax
c00145f2:	56                   	push   esi
c00145f3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145f6:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c00145f9:	83 c4 20             	add    esp,0x20
c00145fc:	85 c0                	test   eax,eax
c00145fe:	0f 84 16 06 00 00    	je     c0014c1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0014604:	52                   	push   edx
c0014605:	31 d2                	xor    edx,edx
c0014607:	52                   	push   edx
c0014608:	50                   	push   eax
c0014609:	56                   	push   esi
c001460a:	e8 65 6b ff ff       	call   c000b174 <File::seek(unsigned long long)>
c001460f:	83 c4 10             	add    esp,0x10
c0014612:	85 c0                	test   eax,eax
c0014614:	0f 85 00 06 00 00    	jne    c0014c1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c001461a:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001461e:	83 ec 0c             	sub    esp,0xc
c0014621:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014625:	0f af c2             	imul   eax,edx
c0014628:	50                   	push   eax
c0014629:	e8 ce 34 ff ff       	call   c0007afc <malloc>
c001462e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014630:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014633:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014637:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001463b:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001463f:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014643:	0f af c2             	imul   eax,edx
c0014646:	99                   	cdq    
c0014647:	52                   	push   edx
c0014648:	50                   	push   eax
c0014649:	56                   	push   esi
c001464a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001464d:	83 c4 20             	add    esp,0x20
c0014650:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014658:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001465c:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0014660:	0f 86 84 00 00 00    	jbe    c00146ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d9>
c0014666:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001466a:	c1 e7 05             	shl    edi,0x5
c001466d:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014671:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014674:	75 63                	jne    c00146d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c8>
c0014676:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014679:	31 d2                	xor    edx,edx
c001467b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001467e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014682:	50                   	push   eax
c0014683:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014686:	52                   	push   edx
c0014687:	50                   	push   eax
c0014688:	56                   	push   esi
c0014689:	e8 e6 6a ff ff       	call   c000b174 <File::seek(unsigned long long)>
c001468e:	83 c4 10             	add    esp,0x10
c0014691:	85 c0                	test   eax,eax
c0014693:	0f 85 81 05 00 00    	jne    c0014c1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0014699:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00146a0:	83 ec 0c             	sub    esp,0xc
c00146a3:	31 d2                	xor    edx,edx
c00146a5:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00146a9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00146ab:	01 c3                	add    ebx,eax
c00146ad:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00146b4:	50                   	push   eax
c00146b5:	53                   	push   ebx
c00146b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146ba:	52                   	push   edx
c00146bb:	50                   	push   eax
c00146bc:	56                   	push   esi
c00146bd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00146c0:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00146c3:	83 c4 1c             	add    esp,0x1c
c00146c6:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00146c9:	50                   	push   eax
c00146ca:	6a 00                	push   0x0
c00146cc:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c00146d0:	53                   	push   ebx
c00146d1:	e8 aa be fe ff       	call   c0000580 <memset>
c00146d6:	83 c4 10             	add    esp,0x10
c00146d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146dd:	40                   	inc    eax
c00146de:	0f b7 c0             	movzx  eax,ax
c00146e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00146e5:	e9 6e ff ff ff       	jmp    c0014658 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x147>
c00146ea:	53                   	push   ebx
c00146eb:	68 00 01 00 00       	push   0x100
c00146f0:	6a 00                	push   0x0
c00146f2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00146f6:	50                   	push   eax
c00146f7:	e8 84 be fe ff       	call   c0000580 <memset>
c00146fc:	83 c4 0c             	add    esp,0xc
c00146ff:	68 00 01 00 00       	push   0x100
c0014704:	6a 00                	push   0x0
c0014706:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001470d:	50                   	push   eax
c001470e:	e8 6d be fe ff       	call   c0000580 <memset>
c0014713:	83 c4 10             	add    esp,0x10
c0014716:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001471e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014726:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001472e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014736:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001473e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014746:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001474a:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001474e:	0f 86 25 01 00 00    	jbe    c0014879 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x368>
c0014754:	6b 7c 24 10 28       	imul   edi,DWORD PTR [esp+0x10],0x28
c0014759:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001475d:	8b 5f 10             	mov    ebx,DWORD PTR [edi+0x10]
c0014760:	52                   	push   edx
c0014761:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014765:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014769:	8b 07                	mov    eax,DWORD PTR [edi]
c001476b:	6b d2 28             	imul   edx,edx,0x28
c001476e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014772:	31 d2                	xor    edx,edx
c0014774:	52                   	push   edx
c0014775:	50                   	push   eax
c0014776:	56                   	push   esi
c0014777:	e8 f8 69 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c001477c:	83 c4 0c             	add    esp,0xc
c001477f:	6a 20                	push   0x20
c0014781:	6a 00                	push   0x0
c0014783:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001478a:	51                   	push   ecx
c001478b:	e8 f0 bd fe ff       	call   c0000580 <memset>
c0014790:	8b 06                	mov    eax,DWORD PTR [esi]
c0014792:	59                   	pop    ecx
c0014793:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014797:	52                   	push   edx
c0014798:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001479f:	51                   	push   ecx
c00147a0:	6a 00                	push   0x0
c00147a2:	6a 1f                	push   0x1f
c00147a4:	56                   	push   esi
c00147a5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00147a8:	83 c4 1c             	add    esp,0x1c
c00147ab:	6a 09                	push   0x9
c00147ad:	68 6f 15 02 c0       	push   0xc002156f
c00147b2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00147b9:	51                   	push   ecx
c00147ba:	e8 c1 bb fe ff       	call   c0000380 <memcmp>
c00147bf:	83 c4 10             	add    esp,0x10
c00147c2:	85 c0                	test   eax,eax
c00147c4:	75 1d                	jne    c00147e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d2>
c00147c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147ca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00147ce:	89 5c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ebx
c00147d2:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00147d5:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00147dc:	89 c8                	mov    eax,ecx
c00147de:	40                   	inc    eax
c00147df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147e3:	50                   	push   eax
c00147e4:	6a 09                	push   0x9
c00147e6:	68 79 15 02 c0       	push   0xc0021579
c00147eb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00147f2:	50                   	push   eax
c00147f3:	e8 88 bb fe ff       	call   c0000380 <memcmp>
c00147f8:	83 c4 10             	add    esp,0x10
c00147fb:	85 c0                	test   eax,eax
c00147fd:	75 1d                	jne    c001481c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30b>
c00147ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014803:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014807:	89 5c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ebx
c001480b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001480e:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014815:	89 c8                	mov    eax,ecx
c0014817:	40                   	inc    eax
c0014818:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001481c:	50                   	push   eax
c001481d:	50                   	push   eax
c001481e:	68 45 15 02 c0       	push   0xc0021545
c0014823:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001482a:	50                   	push   eax
c001482b:	e8 10 c0 fe ff       	call   c0000840 <strcmp>
c0014830:	83 c4 10             	add    esp,0x10
c0014833:	85 c0                	test   eax,eax
c0014835:	75 0b                	jne    c0014842 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x331>
c0014837:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001483b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001483e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014842:	50                   	push   eax
c0014843:	50                   	push   eax
c0014844:	68 4d 15 02 c0       	push   0xc002154d
c0014849:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014850:	50                   	push   eax
c0014851:	e8 ea bf fe ff       	call   c0000840 <strcmp>
c0014856:	83 c4 10             	add    esp,0x10
c0014859:	85 c0                	test   eax,eax
c001485b:	75 0b                	jne    c0014868 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x357>
c001485d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014861:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014864:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001486c:	40                   	inc    eax
c001486d:	0f b7 c0             	movzx  eax,ax
c0014870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014874:	e9 cd fe ff ff       	jmp    c0014746 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x235>
c0014879:	50                   	push   eax
c001487a:	31 d2                	xor    edx,edx
c001487c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014880:	52                   	push   edx
c0014881:	50                   	push   eax
c0014882:	56                   	push   esi
c0014883:	e8 ec 68 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0014888:	58                   	pop    eax
c0014889:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001488d:	e8 6a 32 ff ff       	call   c0007afc <malloc>
c0014892:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014894:	31 d2                	xor    edx,edx
c0014896:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001489a:	58                   	pop    eax
c001489b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001489f:	53                   	push   ebx
c00148a0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00148a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148a8:	52                   	push   edx
c00148a9:	50                   	push   eax
c00148aa:	56                   	push   esi
c00148ab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00148ae:	83 c4 14             	add    esp,0x14
c00148b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00148b5:	e8 42 32 ff ff       	call   c0007afc <malloc>
c00148ba:	31 d2                	xor    edx,edx
c00148bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00148c0:	83 c4 0c             	add    esp,0xc
c00148c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00148c7:	52                   	push   edx
c00148c8:	50                   	push   eax
c00148c9:	56                   	push   esi
c00148ca:	e8 a5 68 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c00148cf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00148d1:	31 d2                	xor    edx,edx
c00148d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00148da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148de:	52                   	push   edx
c00148df:	50                   	push   eax
c00148e0:	56                   	push   esi
c00148e1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00148e4:	83 c4 20             	add    esp,0x20
c00148e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00148ef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00148f3:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00148f7:	0f 84 21 03 00 00    	je     c0014c1e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x70d>
c00148fd:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014904:	31 d2                	xor    edx,edx
c0014906:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001490a:	c1 e8 03             	shr    eax,0x3
c001490d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014911:	51                   	push   ecx
c0014912:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014916:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001491a:	52                   	push   edx
c001491b:	50                   	push   eax
c001491c:	56                   	push   esi
c001491d:	e8 52 68 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0014922:	5b                   	pop    ebx
c0014923:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014927:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001492e:	e8 c9 31 ff ff       	call   c0007afc <malloc>
c0014933:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014935:	31 d2                	xor    edx,edx
c0014937:	5f                   	pop    edi
c0014938:	89 c3                	mov    ebx,eax
c001493a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001493e:	50                   	push   eax
c001493f:	53                   	push   ebx
c0014940:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014944:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001494b:	52                   	push   edx
c001494c:	50                   	push   eax
c001494d:	56                   	push   esi
c001494e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014951:	83 c4 20             	add    esp,0x20
c0014954:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001495c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0014960:	39 4c 24 1c          	cmp    DWORD PTR [esp+0x1c],ecx
c0014964:	0f 8d 9b 02 00 00    	jge    c0014c05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001496a:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c001496f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014973:	8b 04 c3             	mov    eax,DWORD PTR [ebx+eax*8]
c0014976:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001497a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001497e:	8b 44 c3 04          	mov    eax,DWORD PTR [ebx+eax*8+0x4]
c0014982:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014986:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001498a:	88 44 24 37          	mov    BYTE PTR [esp+0x37],al
c001498e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014992:	c1 e8 08             	shr    eax,0x8
c0014995:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014999:	89 c7                	mov    edi,eax
c001499b:	c1 e7 04             	shl    edi,0x4
c001499e:	03 7c 24 30          	add    edi,DWORD PTR [esp+0x30]
c00149a2:	8b 4f 04             	mov    ecx,DWORD PTR [edi+0x4]
c00149a5:	85 c9                	test   ecx,ecx
c00149a7:	0f 85 bf 00 00 00    	jne    c0014a6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c00149ad:	83 ec 0c             	sub    esp,0xc
c00149b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00149b4:	03 07                	add    eax,DWORD PTR [edi]
c00149b6:	50                   	push   eax
c00149b7:	e8 45 f8 ff ff       	call   c0014201 <Thr::getAddressOfKernelSymbol(char const*)>
c00149bc:	83 c4 10             	add    esp,0x10
c00149bf:	c6 44 24 20 01       	mov    BYTE PTR [esp+0x20],0x1
c00149c4:	85 c0                	test   eax,eax
c00149c6:	89 c1                	mov    ecx,eax
c00149c8:	0f 85 9e 00 00 00    	jne    c0014a6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c00149ce:	83 ec 0c             	sub    esp,0xc
c00149d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00149d5:	03 07                	add    eax,DWORD PTR [edi]
c00149d7:	50                   	push   eax
c00149d8:	e8 47 c6 ff ff       	call   c0011024 <KeResolveCompatibilitySymbol(char*)>
c00149dd:	83 c4 10             	add    esp,0x10
c00149e0:	85 c0                	test   eax,eax
c00149e2:	89 c1                	mov    ecx,eax
c00149e4:	0f 85 82 00 00 00    	jne    c0014a6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c00149ea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00149ee:	50                   	push   eax
c00149ef:	50                   	push   eax
c00149f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149f4:	03 07                	add    eax,DWORD PTR [edi]
c00149f6:	50                   	push   eax
c00149f7:	68 83 15 02 c0       	push   0xc0021583
c00149fc:	e8 75 60 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0014a01:	58                   	pop    eax
c0014a02:	5a                   	pop    edx
c0014a03:	68 9d 15 02 c0       	push   0xc002159d
c0014a08:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0014a0f:	52                   	push   edx
c0014a10:	e8 0b bd fe ff       	call   c0000720 <strcpy>
c0014a15:	59                   	pop    ecx
c0014a16:	58                   	pop    eax
c0014a17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a1b:	03 07                	add    eax,DWORD PTR [edi]
c0014a1d:	50                   	push   eax
c0014a1e:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0014a25:	52                   	push   edx
c0014a26:	e8 05 bf fe ff       	call   c0000930 <strcat>
c0014a2b:	58                   	pop    eax
c0014a2c:	5a                   	pop    edx
c0014a2d:	68 33 16 02 c0       	push   0xc0021633
c0014a32:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0014a39:	52                   	push   edx
c0014a3a:	e8 f1 be fe ff       	call   c0000930 <strcat>
c0014a3f:	83 c4 10             	add    esp,0x10
c0014a42:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c0014a47:	0f 84 75 01 00 00    	je     c0014bc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c0014a4d:	83 ec 0c             	sub    esp,0xc
c0014a50:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0014a57:	52                   	push   edx
c0014a58:	e8 d8 c3 ff ff       	call   c0010e35 <KePanic(char const*)>
c0014a5d:	83 c4 10             	add    esp,0x10
c0014a60:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c0014a64:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0014a68:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0014a6c:	80 7c 24 37 01       	cmp    BYTE PTR [esp+0x37],0x1
c0014a71:	0f 85 90 00 00 00    	jne    c0014b07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f6>
c0014a77:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014a7b:	8b bc 24 74 03 00 00 	mov    edi,DWORD PTR [esp+0x374]
c0014a82:	2b 7c 24 24          	sub    edi,DWORD PTR [esp+0x24]
c0014a86:	01 f8                	add    eax,edi
c0014a88:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014a90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014a94:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a96:	0f 94 c2             	sete   dl
c0014a99:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014aa1:	0f 94 44 24 10       	sete   BYTE PTR [esp+0x10]
c0014aa6:	0a 54 24 10          	or     dl,BYTE PTR [esp+0x10]
c0014aaa:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
c0014aaf:	74 39                	je     c0014aea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d9>
c0014ab1:	8d 3c 08             	lea    edi,[eax+ecx*1]
c0014ab4:	84 d2                	test   dl,dl
c0014ab6:	75 15                	jne    c0014acd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5bc>
c0014ab8:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014abc:	66 83 f8 0c          	cmp    ax,0xc
c0014ac0:	76 05                	jbe    c0014ac7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0014ac2:	b8 0c 00 00 00       	mov    eax,0xc
c0014ac7:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014acb:	76 2f                	jbe    c0014afc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c0014acd:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c0014ad2:	0f 84 ea 00 00 00    	je     c0014bc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c0014ad8:	83 ec 0c             	sub    esp,0xc
c0014adb:	68 b4 15 02 c0       	push   0xc00215b4
c0014ae0:	e8 50 c3 ff ff       	call   c0010e35 <KePanic(char const*)>
c0014ae5:	83 c4 10             	add    esp,0x10
c0014ae8:	eb 12                	jmp    c0014afc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c0014aea:	01 c7                	add    edi,eax
c0014aec:	84 d2                	test   dl,dl
c0014aee:	75 0c                	jne    c0014afc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c0014af0:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014af4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014af8:	77 02                	ja     c0014afc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c0014afa:	01 cf                	add    edi,ecx
c0014afc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014b00:	89 38                	mov    DWORD PTR [eax],edi
c0014b02:	e9 f5 00 00 00       	jmp    c0014bfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014b07:	80 7c 24 37 02       	cmp    BYTE PTR [esp+0x37],0x2
c0014b0c:	0f 85 82 00 00 00    	jne    c0014b94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x683>
c0014b12:	8b bc 24 74 03 00 00 	mov    edi,DWORD PTR [esp+0x374]
c0014b19:	2b 7c 24 24          	sub    edi,DWORD PTR [esp+0x24]
c0014b1d:	03 7c 24 28          	add    edi,DWORD PTR [esp+0x28]
c0014b21:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014b29:	74 21                	je     c0014b4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63b>
c0014b2b:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014b33:	74 17                	je     c0014b4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63b>
c0014b35:	0f b7 55 30          	movzx  edx,WORD PTR [ebp+0x30]
c0014b39:	b8 0a 00 00 00       	mov    eax,0xa
c0014b3e:	83 fa 0e             	cmp    edx,0xe
c0014b41:	77 03                	ja     c0014b46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x635>
c0014b43:	8d 42 fc             	lea    eax,[edx-0x4]
c0014b46:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014b4a:	76 1f                	jbe    c0014b6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65a>
c0014b4c:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c0014b51:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0014b55:	74 6b                	je     c0014bc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c0014b57:	83 ec 0c             	sub    esp,0xc
c0014b5a:	68 d0 15 02 c0       	push   0xc00215d0
c0014b5f:	e8 d1 c2 ff ff       	call   c0010e35 <KePanic(char const*)>
c0014b64:	83 c4 10             	add    esp,0x10
c0014b67:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014b6b:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
c0014b70:	8b 07                	mov    eax,DWORD PTR [edi]
c0014b72:	74 16                	je     c0014b8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x679>
c0014b74:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014b78:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0014b7f:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014b83:	01 c2                	add    edx,eax
c0014b85:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0014b88:	eb 06                	jmp    c0014b90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014b8a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014b8e:	01 c8                	add    eax,ecx
c0014b90:	89 07                	mov    DWORD PTR [edi],eax
c0014b92:	eb 68                	jmp    c0014bfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014b94:	57                   	push   edi
c0014b95:	57                   	push   edi
c0014b96:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0014b9b:	50                   	push   eax
c0014b9c:	68 ec 15 02 c0       	push   0xc00215ec
c0014ba1:	e8 d0 5e ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0014ba6:	83 c4 10             	add    esp,0x10
c0014ba9:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c0014bae:	74 12                	je     c0014bc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c0014bb0:	83 ec 0c             	sub    esp,0xc
c0014bb3:	68 f7 15 02 c0       	push   0xc00215f7
c0014bb8:	e8 78 c2 ff ff       	call   c0010e35 <KePanic(char const*)>
c0014bbd:	83 c4 10             	add    esp,0x10
c0014bc0:	eb 3a                	jmp    c0014bfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014bc2:	83 ec 0c             	sub    esp,0xc
c0014bc5:	56                   	push   esi
c0014bc6:	e8 49 65 ff ff       	call   c000b114 <File::close()>
c0014bcb:	8b 06                	mov    eax,DWORD PTR [esi]
c0014bcd:	89 34 24             	mov    DWORD PTR [esp],esi
c0014bd0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014bd3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bd6:	e8 34 2f ff ff       	call   c0007b0f <free>
c0014bdb:	59                   	pop    ecx
c0014bdc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014be0:	e8 2a 2f ff ff       	call   c0007b0f <free>
c0014be5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014be8:	e8 22 2f ff ff       	call   c0007b0f <free>
c0014bed:	5b                   	pop    ebx
c0014bee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bf2:	e8 18 2f ff ff       	call   c0007b0f <free>
c0014bf7:	83 c4 10             	add    esp,0x10
c0014bfa:	eb 1e                	jmp    c0014c1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0014bfc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0014c00:	e9 57 fd ff ff       	jmp    c001495c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x44b>
c0014c05:	83 ec 0c             	sub    esp,0xc
c0014c08:	53                   	push   ebx
c0014c09:	e8 01 2f ff ff       	call   c0007b0f <free>
c0014c0e:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0014c12:	83 c4 10             	add    esp,0x10
c0014c15:	e9 d5 fc ff ff       	jmp    c00148ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3de>
c0014c1a:	31 c0                	xor    eax,eax
c0014c1c:	eb 32                	jmp    c0014c50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0014c1e:	83 ec 0c             	sub    esp,0xc
c0014c21:	56                   	push   esi
c0014c22:	e8 ed 64 ff ff       	call   c000b114 <File::close()>
c0014c27:	8b 06                	mov    eax,DWORD PTR [esi]
c0014c29:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c2c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014c2f:	58                   	pop    eax
c0014c30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014c34:	e8 d6 2e ff ff       	call   c0007b0f <free>
c0014c39:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014c3c:	e8 ce 2e ff ff       	call   c0007b0f <free>
c0014c41:	5a                   	pop    edx
c0014c42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c46:	e8 c4 2e ff ff       	call   c0007b0f <free>
c0014c4b:	83 c4 10             	add    esp,0x10
c0014c4e:	b0 01                	mov    al,0x1
c0014c50:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014c56:	5b                   	pop    ebx
c0014c57:	5e                   	pop    esi
c0014c58:	5f                   	pop    edi
c0014c59:	5d                   	pop    ebp
c0014c5a:	c3                   	ret    

c0014c5b <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014c5b:	56                   	push   esi
c0014c5c:	31 d2                	xor    edx,edx
c0014c5e:	53                   	push   ebx
c0014c5f:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014c65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014c69:	39 d3                	cmp    ebx,edx
c0014c6b:	7e 1b                	jle    c0014c88 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014c6d:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c0014c74:	39 c8                	cmp    eax,ecx
c0014c76:	77 0d                	ja     c0014c85 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014c78:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c0014c7f:	01 c6                	add    esi,eax
c0014c81:	39 ce                	cmp    esi,ecx
c0014c83:	77 05                	ja     c0014c8a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014c85:	42                   	inc    edx
c0014c86:	eb e1                	jmp    c0014c69 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014c88:	31 c0                	xor    eax,eax
c0014c8a:	5b                   	pop    ebx
c0014c8b:	5e                   	pop    esi
c0014c8c:	c3                   	ret    

c0014c8d <Thr::getDriverNameFromAddress(unsigned long)>:
c0014c8d:	53                   	push   ebx
c0014c8e:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014c94:	31 c0                	xor    eax,eax
c0014c96:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014c9a:	39 c3                	cmp    ebx,eax
c0014c9c:	7e 22                	jle    c0014cc0 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014c9e:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c0014ca5:	39 ca                	cmp    edx,ecx
c0014ca7:	77 14                	ja     c0014cbd <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014ca9:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c0014cb0:	39 ca                	cmp    edx,ecx
c0014cb2:	76 09                	jbe    c0014cbd <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014cb4:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c0014cbb:	eb 05                	jmp    c0014cc2 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0014cbd:	40                   	inc    eax
c0014cbe:	eb da                	jmp    c0014c9a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014cc0:	31 c0                	xor    eax,eax
c0014cc2:	5b                   	pop    ebx
c0014cc3:	c3                   	ret    

c0014cc4 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014cc4:	53                   	push   ebx
c0014cc5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014cc9:	53                   	push   ebx
c0014cca:	e8 8c ff ff ff       	call   c0014c5b <Thr::getDriverBaseFromAddress(unsigned long)>
c0014ccf:	5a                   	pop    edx
c0014cd0:	31 d2                	xor    edx,edx
c0014cd2:	85 c0                	test   eax,eax
c0014cd4:	74 04                	je     c0014cda <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014cd6:	89 da                	mov    edx,ebx
c0014cd8:	29 c2                	sub    edx,eax
c0014cda:	5b                   	pop    ebx
c0014cdb:	89 d0                	mov    eax,edx
c0014cdd:	c3                   	ret    

c0014cde <Thr::loadDLL(char const*, bool)>:
c0014cde:	55                   	push   ebp
c0014cdf:	57                   	push   edi
c0014ce0:	56                   	push   esi
c0014ce1:	53                   	push   ebx
c0014ce2:	81 ec 34 01 00 00    	sub    esp,0x134
c0014ce8:	8b bc 24 48 01 00 00 	mov    edi,DWORD PTR [esp+0x148]
c0014cef:	8a 9c 24 4c 01 00 00 	mov    bl,BYTE PTR [esp+0x14c]
c0014cf6:	57                   	push   edi
c0014cf7:	68 0f 16 02 c0       	push   0xc002160f
c0014cfc:	e8 75 5d ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0014d01:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014d08:	e8 ef 2d ff ff       	call   c0007afc <malloc>
c0014d0d:	83 c4 0c             	add    esp,0xc
c0014d10:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0014d16:	57                   	push   edi
c0014d17:	50                   	push   eax
c0014d18:	89 c6                	mov    esi,eax
c0014d1a:	e8 d9 62 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0014d1f:	83 c4 10             	add    esp,0x10
c0014d22:	85 f6                	test   esi,esi
c0014d24:	75 3a                	jne    c0014d60 <Thr::loadDLL(char const*, bool)+0x82>
c0014d26:	84 db                	test   bl,bl
c0014d28:	0f 84 df 01 00 00    	je     c0014f0d <Thr::loadDLL(char const*, bool)+0x22f>
c0014d2e:	50                   	push   eax
c0014d2f:	50                   	push   eax
c0014d30:	68 20 16 02 c0       	push   0xc0021620
c0014d35:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0014d39:	55                   	push   ebp
c0014d3a:	e8 e1 b9 fe ff       	call   c0000720 <strcpy>
c0014d3f:	58                   	pop    eax
c0014d40:	5a                   	pop    edx
c0014d41:	57                   	push   edi
c0014d42:	55                   	push   ebp
c0014d43:	e8 e8 bb fe ff       	call   c0000930 <strcat>
c0014d48:	59                   	pop    ecx
c0014d49:	58                   	pop    eax
c0014d4a:	68 33 16 02 c0       	push   0xc0021633
c0014d4f:	55                   	push   ebp
c0014d50:	e8 db bb fe ff       	call   c0000930 <strcat>
c0014d55:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014d58:	e8 d8 c0 ff ff       	call   c0010e35 <KePanic(char const*)>
c0014d5d:	83 c4 10             	add    esp,0x10
c0014d60:	50                   	push   eax
c0014d61:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014d65:	50                   	push   eax
c0014d66:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014d6a:	50                   	push   eax
c0014d6b:	56                   	push   esi
c0014d6c:	e8 eb 65 ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c0014d71:	83 c4 10             	add    esp,0x10
c0014d74:	85 f6                	test   esi,esi
c0014d76:	74 0c                	je     c0014d84 <Thr::loadDLL(char const*, bool)+0xa6>
c0014d78:	8b 06                	mov    eax,DWORD PTR [esi]
c0014d7a:	83 ec 0c             	sub    esp,0xc
c0014d7d:	56                   	push   esi
c0014d7e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014d81:	83 c4 10             	add    esp,0x10
c0014d84:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014d89:	75 0a                	jne    c0014d95 <Thr::loadDLL(char const*, bool)+0xb7>
c0014d8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d8f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014d93:	75 3c                	jne    c0014dd1 <Thr::loadDLL(char const*, bool)+0xf3>
c0014d95:	31 f6                	xor    esi,esi
c0014d97:	84 db                	test   bl,bl
c0014d99:	0f 84 6e 01 00 00    	je     c0014f0d <Thr::loadDLL(char const*, bool)+0x22f>
c0014d9f:	50                   	push   eax
c0014da0:	50                   	push   eax
c0014da1:	68 20 16 02 c0       	push   0xc0021620
c0014da6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014daa:	56                   	push   esi
c0014dab:	e8 70 b9 fe ff       	call   c0000720 <strcpy>
c0014db0:	58                   	pop    eax
c0014db1:	5a                   	pop    edx
c0014db2:	57                   	push   edi
c0014db3:	56                   	push   esi
c0014db4:	e8 77 bb fe ff       	call   c0000930 <strcat>
c0014db9:	59                   	pop    ecx
c0014dba:	5d                   	pop    ebp
c0014dbb:	68 33 16 02 c0       	push   0xc0021633
c0014dc0:	56                   	push   esi
c0014dc1:	e8 6a bb fe ff       	call   c0000930 <strcat>
c0014dc6:	89 34 24             	mov    DWORD PTR [esp],esi
c0014dc9:	e8 67 c0 ff ff       	call   c0010e35 <KePanic(char const*)>
c0014dce:	83 c4 10             	add    esp,0x10
c0014dd1:	56                   	push   esi
c0014dd2:	6a 03                	push   0x3
c0014dd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dd8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014ddc:	05 ff 0f 00 00       	add    eax,0xfff
c0014de1:	83 d2 00             	adc    edx,0x0
c0014de4:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014de8:	50                   	push   eax
c0014de9:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014def:	e8 82 50 ff ff       	call   c0009e76 <VAS::allocatePages(int, int)>
c0014df4:	89 c6                	mov    esi,eax
c0014df6:	58                   	pop    eax
c0014df7:	5a                   	pop    edx
c0014df8:	56                   	push   esi
c0014df9:	68 32 00 02 c0       	push   0xc0020032
c0014dfe:	e8 73 5c ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0014e03:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014e06:	e8 15 b8 fe ff       	call   c0000620 <strlen>
c0014e0b:	8b 2d a0 79 02 c0    	mov    ebp,DWORD PTR ds:0xc00279a0
c0014e11:	40                   	inc    eax
c0014e12:	89 04 24             	mov    DWORD PTR [esp],eax
c0014e15:	e8 e2 2c ff ff       	call   c0007afc <malloc>
c0014e1a:	59                   	pop    ecx
c0014e1b:	89 04 ad c0 7d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8240],eax
c0014e22:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014e27:	5d                   	pop    ebp
c0014e28:	57                   	push   edi
c0014e29:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c0014e30:	e8 eb b8 fe ff       	call   c0000720 <strcpy>
c0014e35:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014e3a:	89 34 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],esi
c0014e41:	8d 50 01             	lea    edx,[eax+0x1]
c0014e44:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c0014e4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014e4e:	83 c4 0c             	add    esp,0xc
c0014e51:	6a 01                	push   0x1
c0014e53:	56                   	push   esi
c0014e54:	57                   	push   edi
c0014e55:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c0014e5c:	e8 b0 f6 ff ff       	call   c0014511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014e61:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0014e65:	83 c4 10             	add    esp,0x10
c0014e68:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0014e6d:	74 2d                	je     c0014e9c <Thr::loadDLL(char const*, bool)+0x1be>
c0014e6f:	84 db                	test   bl,bl
c0014e71:	74 12                	je     c0014e85 <Thr::loadDLL(char const*, bool)+0x1a7>
c0014e73:	83 ec 0c             	sub    esp,0xc
c0014e76:	68 35 16 02 c0       	push   0xc0021635
c0014e7b:	e8 b5 bf ff ff       	call   c0010e35 <KePanic(char const*)>
c0014e80:	83 c4 10             	add    esp,0x10
c0014e83:	eb 07                	jmp    c0014e8c <Thr::loadDLL(char const*, bool)+0x1ae>
c0014e85:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0014e8a:	75 10                	jne    c0014e9c <Thr::loadDLL(char const*, bool)+0x1be>
c0014e8c:	83 ec 0c             	sub    esp,0xc
c0014e8f:	68 54 16 02 c0       	push   0xc0021654
c0014e94:	e8 9c bf ff ff       	call   c0010e35 <KePanic(char const*)>
c0014e99:	83 c4 10             	add    esp,0x10
c0014e9c:	31 ff                	xor    edi,edi
c0014e9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ea2:	bb 00 00 00 00       	mov    ebx,0x0
c0014ea7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014eab:	05 ff 0f 00 00       	add    eax,0xfff
c0014eb0:	83 d2 00             	adc    edx,0x0
c0014eb3:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014eb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014ebb:	c1 ea 0c             	shr    edx,0xc
c0014ebe:	89 d8                	mov    eax,ebx
c0014ec0:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0014ec4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014ec8:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0014ecc:	73 32                	jae    c0014f00 <Thr::loadDLL(char const*, bool)+0x222>
c0014ece:	50                   	push   eax
c0014ecf:	50                   	push   eax
c0014ed0:	89 f8                	mov    eax,edi
c0014ed2:	c1 e0 0c             	shl    eax,0xc
c0014ed5:	01 f0                	add    eax,esi
c0014ed7:	50                   	push   eax
c0014ed8:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014ede:	e8 37 4a ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0014ee3:	83 c4 10             	add    esp,0x10
c0014ee6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ee8:	a8 60                	test   al,0x60
c0014eea:	75 11                	jne    c0014efd <Thr::loadDLL(char const*, bool)+0x21f>
c0014eec:	83 ec 0c             	sub    esp,0xc
c0014eef:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014ef4:	50                   	push   eax
c0014ef5:	e8 aa 2e ff ff       	call   c0007da4 <Phys::freePage(unsigned long)>
c0014efa:	83 c4 10             	add    esp,0x10
c0014efd:	47                   	inc    edi
c0014efe:	eb 9e                	jmp    c0014e9e <Thr::loadDLL(char const*, bool)+0x1c0>
c0014f00:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0014f05:	b8 00 00 00 00       	mov    eax,0x0
c0014f0a:	0f 44 f0             	cmove  esi,eax
c0014f0d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014f13:	89 f0                	mov    eax,esi
c0014f15:	5b                   	pop    ebx
c0014f16:	5e                   	pop    esi
c0014f17:	5f                   	pop    edi
c0014f18:	5d                   	pop    ebp
c0014f19:	c3                   	ret    

c0014f1a <Thr::executeDLL(unsigned long, void*)>:
c0014f1a:	56                   	push   esi
c0014f1b:	53                   	push   ebx
c0014f1c:	52                   	push   edx
c0014f1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f21:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014f25:	85 db                	test   ebx,ebx
c0014f27:	75 10                	jne    c0014f39 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014f29:	83 ec 0c             	sub    esp,0xc
c0014f2c:	68 70 16 02 c0       	push   0xc0021670
c0014f31:	e8 ff be ff ff       	call   c0010e35 <KePanic(char const*)>
c0014f36:	83 c4 10             	add    esp,0x10
c0014f39:	50                   	push   eax
c0014f3a:	50                   	push   eax
c0014f3b:	53                   	push   ebx
c0014f3c:	68 9a 16 02 c0       	push   0xc002169a
c0014f41:	e8 30 5b ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0014f46:	89 d8                	mov    eax,ebx
c0014f48:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014f4c:	83 c4 14             	add    esp,0x14
c0014f4f:	5b                   	pop    ebx
c0014f50:	5e                   	pop    esi
c0014f51:	ff e0                	jmp    eax
c0014f53:	66 90                	xchg   ax,ax
c0014f55:	66 90                	xchg   ax,ax
c0014f57:	66 90                	xchg   ax,ax
c0014f59:	66 90                	xchg   ax,ax
c0014f5b:	66 90                	xchg   ax,ax
c0014f5d:	66 90                	xchg   ax,ax
c0014f5f:	90                   	nop

c0014f60 <userModeEntryPoint(void*)>:
c0014f60:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0014f65:	48                   	dec    eax
c0014f66:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0014f6b:	75 03                	jne    c0014f70 <userModeEntryPoint(void*)+0x10>
c0014f6d:	fb                   	sti    
c0014f6e:	66 90                	xchg   ax,ax
c0014f70:	fb                   	sti    
c0014f71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f76:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f79:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014f7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f83:	e9 b7 b2 fe ff       	jmp    c000023f <goToUsermode>

c0014f88 <changeTSS>:
c0014f88:	83 ec 1c             	sub    esp,0x1c
c0014f8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f90:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f93:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014f98:	c1 e2 15             	shl    edx,0x15
c0014f9b:	29 d0                	sub    eax,edx
c0014f9d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fa1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0014fa6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014fac:	05 7c 11 00 00       	add    eax,0x117c
c0014fb1:	89 04 24             	mov    DWORD PTR [esp],eax
c0014fb4:	e8 cf 3f ff ff       	call   c0008f88 <TSS::setESP(unsigned long)>
c0014fb9:	83 c4 1c             	add    esp,0x1c
c0014fbc:	c3                   	ret    
c0014fbd:	8d 76 00             	lea    esi,[esi+0x0]

c0014fc0 <switchToThread(ThreadControlBlock*)>:
c0014fc0:	83 ec 1c             	sub    esp,0x1c
c0014fc3:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0014fc7:	8b 35 64 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028164
c0014fcd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0014fd1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014fd5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0014fd9:	85 f6                	test   esi,esi
c0014fdb:	0f 85 97 00 00 00    	jne    c0015078 <switchToThread(ThreadControlBlock*)+0xb8>
c0014fe1:	0f b6 43 40          	movzx  eax,BYTE PTR [ebx+0x40]
c0014fe5:	3c ff                	cmp    al,0xff
c0014fe7:	0f 84 87 00 00 00    	je     c0015074 <switchToThread(ThreadControlBlock*)+0xb4>
c0014fed:	0f b6 d0             	movzx  edx,al
c0014ff0:	b8 00 04 00 00       	mov    eax,0x400
c0014ff5:	29 d0                	sub    eax,edx
c0014ff7:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014ffa:	d1 f8                	sar    eax,1
c0014ffc:	01 d0                	add    eax,edx
c0014ffe:	66 90                	xchg   ax,ax
c0015000:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015003:	e8 b6 25 00 00       	call   c00175be <HalQueryPerformanceCounter()>
c0015008:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c001500d:	89 c6                	mov    esi,eax
c001500f:	89 d7                	mov    edi,edx
c0015011:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c0015017:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c001501c:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c0015022:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c0015028:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c001502e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015034:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c001503a:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c0015040:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015043:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015046:	01 c6                	add    esi,eax
c0015048:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001504b:	11 d7                	adc    edi,edx
c001504d:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015050:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015053:	e8 1f b2 fe ff       	call   c0000277 <switchToThreadASM>
c0015058:	0f 20 c0             	mov    eax,cr0
c001505b:	83 c8 08             	or     eax,0x8
c001505e:	0f 22 c0             	mov    cr0,eax
c0015061:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015065:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015069:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001506d:	83 c4 1c             	add    esp,0x1c
c0015070:	c3                   	ret    
c0015071:	8d 76 00             	lea    esi,[esi+0x0]
c0015074:	31 c0                	xor    eax,eax
c0015076:	eb 88                	jmp    c0015000 <switchToThread(ThreadControlBlock*)+0x40>
c0015078:	b9 01 00 00 00       	mov    ecx,0x1
c001507d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015081:	89 0d 60 81 02 c0    	mov    DWORD PTR ds:0xc0028160,ecx
c0015087:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001508b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001508f:	83 c4 1c             	add    esp,0x1c
c0015092:	c3                   	ret    
c0015093:	90                   	nop

c0015094 <Process::addArgs(char**)>:
c0015094:	57                   	push   edi
c0015095:	31 c0                	xor    eax,eax
c0015097:	56                   	push   esi
c0015098:	53                   	push   ebx
c0015099:	83 ec 10             	sub    esp,0x10
c001509c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00150a0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00150a4:	85 ff                	test   edi,edi
c00150a6:	89 86 16 05 00 00    	mov    DWORD PTR [esi+0x516],eax
c00150ac:	74 42                	je     c00150f0 <Process::addArgs(char**)+0x5c>
c00150ae:	8b 07                	mov    eax,DWORD PTR [edi]
c00150b0:	85 c0                	test   eax,eax
c00150b2:	74 3c                	je     c00150f0 <Process::addArgs(char**)+0x5c>
c00150b4:	31 db                	xor    ebx,ebx
c00150b6:	66 90                	xchg   ax,ax
c00150b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00150bb:	e8 60 b5 fe ff       	call   c0000620 <strlen>
c00150c0:	40                   	inc    eax
c00150c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00150c4:	e8 33 2a ff ff       	call   c0007afc <malloc>
c00150c9:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00150d0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00150d3:	43                   	inc    ebx
c00150d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00150d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00150db:	e8 40 b6 fe ff       	call   c0000720 <strcpy>
c00150e0:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00150e6:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00150e9:	85 c0                	test   eax,eax
c00150eb:	75 cb                	jne    c00150b8 <Process::addArgs(char**)+0x24>
c00150ed:	8d 76 00             	lea    esi,[esi+0x0]
c00150f0:	83 c4 10             	add    esp,0x10
c00150f3:	5b                   	pop    ebx
c00150f4:	5e                   	pop    esi
c00150f5:	5f                   	pop    edi
c00150f6:	c3                   	ret    
c00150f7:	90                   	nop

c00150f8 <Process::Process(char const*, Process*, char**)>:
c00150f8:	56                   	push   esi
c00150f9:	53                   	push   ebx
c00150fa:	83 ec 24             	sub    esp,0x24
c00150fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015101:	05 0c 02 00 00       	add    eax,0x20c
c0015106:	bb 07 00 00 00       	mov    ebx,0x7
c001510b:	89 c6                	mov    esi,eax
c001510d:	8d 76 00             	lea    esi,[esi+0x0]
c0015110:	85 db                	test   ebx,ebx
c0015112:	78 10                	js     c0015124 <Process::Process(char const*, Process*, char**)+0x2c>
c0015114:	89 34 24             	mov    DWORD PTR [esp],esi
c0015117:	e8 ec a1 00 00       	call   c001f308 <ThreadControlBlock::ThreadControlBlock()>
c001511c:	83 c6 5f             	add    esi,0x5f
c001511f:	4b                   	dec    ebx
c0015120:	eb ee                	jmp    c0015110 <Process::Process(char const*, Process*, char**)+0x18>
c0015122:	66 90                	xchg   ax,ax
c0015124:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015128:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001512f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015133:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001513a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001513e:	89 04 24             	mov    DWORD PTR [esp],eax
c0015141:	e8 e4 ba ff ff       	call   c0010c2a <Krnl::newProcessEnv(Process*)>
c0015146:	89 c2                	mov    edx,eax
c0015148:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001514c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015152:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015156:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001515f:	a1 60 28 02 c0       	mov    eax,ds:0xc0022860
c0015164:	8d 50 01             	lea    edx,[eax+0x1]
c0015167:	89 15 60 28 02 c0    	mov    DWORD PTR ds:0xc0022860,edx
c001516d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015171:	89 02                	mov    DWORD PTR [edx],eax
c0015173:	c7 44 24 18 14 00 00 00 	mov    DWORD PTR [esp+0x18],0x14
c001517b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001517f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015182:	e8 75 29 ff ff       	call   c0007afc <malloc>
c0015187:	89 c3                	mov    ebx,eax
c0015189:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015191:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015194:	e8 dd 50 ff ff       	call   c000a276 <VAS::VAS(bool)>
c0015199:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001519d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00151a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151a7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00151b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151b5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00151b9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00151bf:	e8 62 c0 ff ff       	call   c0011226 <KeInitSignals()>
c00151c4:	89 c2                	mov    edx,eax
c00151c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151ca:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00151d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151d4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00151da:	85 c0                	test   eax,eax
c00151dc:	74 42                	je     c0015220 <Process::Process(char const*, Process*, char**)+0x128>
c00151de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151e2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00151e8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00151ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151f2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00151f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151fc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015202:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015208:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001520c:	05 0c 01 00 00       	add    eax,0x10c
c0015211:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015215:	89 04 24             	mov    DWORD PTR [esp],eax
c0015218:	e8 03 b5 fe ff       	call   c0000720 <strcpy>
c001521d:	eb 5d                	jmp    c001527c <Process::Process(char const*, Process*, char**)+0x184>
c001521f:	90                   	nop
c0015220:	c7 44 24 14 84 01 00 00 	mov    DWORD PTR [esp+0x14],0x184
c0015228:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001522c:	89 04 24             	mov    DWORD PTR [esp],eax
c001522f:	e8 c8 28 ff ff       	call   c0007afc <malloc>
c0015234:	89 c3                	mov    ebx,eax
c0015236:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001523a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001523e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015241:	e8 38 3a ff ff       	call   c0008c7e <VgaText::VgaText(char const*)>
c0015246:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001524a:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015250:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015254:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001525a:	89 04 24             	mov    DWORD PTR [esp],eax
c001525d:	e8 c6 32 ff ff       	call   c0008528 <addToTerminalCycle(VgaText*)>
c0015262:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015266:	05 0c 01 00 00       	add    eax,0x10c
c001526b:	c7 44 24 04 b9 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc00216b9
c0015273:	89 04 24             	mov    DWORD PTR [esp],eax
c0015276:	e8 a5 b4 fe ff       	call   c0000720 <strcpy>
c001527b:	90                   	nop
c001527c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015280:	8d 50 0c             	lea    edx,[eax+0xc]
c0015283:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015287:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001528b:	89 14 24             	mov    DWORD PTR [esp],edx
c001528e:	e8 8d b4 fe ff       	call   c0000720 <strcpy>
c0015293:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015297:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001529b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001529f:	89 04 24             	mov    DWORD PTR [esp],eax
c00152a2:	e8 ed fd ff ff       	call   c0015094 <Process::addArgs(char**)>
c00152a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00152ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00152b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00152b6:	e8 10 ed ff ff       	call   c0013fcb <Thr::loadProgramIntoMemory(Process*, char const*)>
c00152bb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00152bf:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c00152c4:	34 01                	xor    al,0x1
c00152c6:	88 c2                	mov    dl,al
c00152c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00152cc:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00152d2:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c00152d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152db:	c7 04 24 10 17 02 c0 	mov    DWORD PTR [esp],0xc0021710
c00152e2:	e8 8f 57 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00152e7:	90                   	nop
c00152e8:	83 c4 24             	add    esp,0x24
c00152eb:	5b                   	pop    ebx
c00152ec:	5e                   	pop    esi
c00152ed:	c3                   	ret    
c00152ee:	66 90                	xchg   ax,ax

c00152f0 <Process::Process(bool, char const*, Process*, char**)>:
c00152f0:	56                   	push   esi
c00152f1:	53                   	push   ebx
c00152f2:	83 ec 34             	sub    esp,0x34
c00152f5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00152f9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00152fd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015301:	05 0c 02 00 00       	add    eax,0x20c
c0015306:	bb 07 00 00 00       	mov    ebx,0x7
c001530b:	89 c6                	mov    esi,eax
c001530d:	8d 76 00             	lea    esi,[esi+0x0]
c0015310:	85 db                	test   ebx,ebx
c0015312:	78 10                	js     c0015324 <Process::Process(bool, char const*, Process*, char**)+0x34>
c0015314:	89 34 24             	mov    DWORD PTR [esp],esi
c0015317:	e8 ec 9f 00 00       	call   c001f308 <ThreadControlBlock::ThreadControlBlock()>
c001531c:	83 c6 5f             	add    esi,0x5f
c001531f:	4b                   	dec    ebx
c0015320:	eb ee                	jmp    c0015310 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015322:	66 90                	xchg   ax,ax
c0015324:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015328:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001532f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015333:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001533a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001533e:	89 04 24             	mov    DWORD PTR [esp],eax
c0015341:	e8 e4 b8 ff ff       	call   c0010c2a <Krnl::newProcessEnv(Process*)>
c0015346:	89 c2                	mov    edx,eax
c0015348:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001534c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015352:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015356:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001535f:	a1 60 28 02 c0       	mov    eax,ds:0xc0022860
c0015364:	8d 50 01             	lea    edx,[eax+0x1]
c0015367:	89 15 60 28 02 c0    	mov    DWORD PTR ds:0xc0022860,edx
c001536d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015371:	89 02                	mov    DWORD PTR [edx],eax
c0015373:	c7 44 24 2c 14 00 00 00 	mov    DWORD PTR [esp+0x2c],0x14
c001537b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001537f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015382:	e8 75 27 ff ff       	call   c0007afc <malloc>
c0015387:	89 c3                	mov    ebx,eax
c0015389:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001538e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015392:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015395:	e8 dc 4e ff ff       	call   c000a276 <VAS::VAS(bool)>
c001539a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001539e:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00153a4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153a8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00153b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153b6:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00153ba:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00153c0:	e8 61 be ff ff       	call   c0011226 <KeInitSignals()>
c00153c5:	89 c2                	mov    edx,eax
c00153c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153cb:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00153d1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153d5:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00153db:	85 c0                	test   eax,eax
c00153dd:	74 41                	je     c0015420 <Process::Process(bool, char const*, Process*, char**)+0x130>
c00153df:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153e3:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00153e9:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00153ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153f3:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00153f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153fd:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015403:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015409:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001540d:	05 0c 01 00 00       	add    eax,0x10c
c0015412:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015416:	89 04 24             	mov    DWORD PTR [esp],eax
c0015419:	e8 02 b3 fe ff       	call   c0000720 <strcpy>
c001541e:	eb 5c                	jmp    c001547c <Process::Process(bool, char const*, Process*, char**)+0x18c>
c0015420:	c7 44 24 28 84 01 00 00 	mov    DWORD PTR [esp+0x28],0x184
c0015428:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001542c:	89 04 24             	mov    DWORD PTR [esp],eax
c001542f:	e8 c8 26 ff ff       	call   c0007afc <malloc>
c0015434:	89 c3                	mov    ebx,eax
c0015436:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001543a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001543e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015441:	e8 38 38 ff ff       	call   c0008c7e <VgaText::VgaText(char const*)>
c0015446:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001544a:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015450:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015454:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001545a:	89 04 24             	mov    DWORD PTR [esp],eax
c001545d:	e8 c6 30 ff ff       	call   c0008528 <addToTerminalCycle(VgaText*)>
c0015462:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015466:	05 0c 01 00 00       	add    eax,0x10c
c001546b:	c7 44 24 04 b9 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc00216b9
c0015473:	89 04 24             	mov    DWORD PTR [esp],eax
c0015476:	e8 a5 b2 fe ff       	call   c0000720 <strcpy>
c001547b:	90                   	nop
c001547c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015480:	8d 50 0c             	lea    edx,[eax+0xc]
c0015483:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015487:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001548b:	89 14 24             	mov    DWORD PTR [esp],edx
c001548e:	e8 8d b2 fe ff       	call   c0000720 <strcpy>
c0015493:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015497:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001549b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001549f:	89 04 24             	mov    DWORD PTR [esp],eax
c00154a2:	e8 ed fb ff ff       	call   c0015094 <Process::addArgs(char**)>
c00154a7:	90                   	nop
c00154a8:	83 c4 34             	add    esp,0x34
c00154ab:	5b                   	pop    ebx
c00154ac:	5e                   	pop    esi
c00154ad:	c3                   	ret    
c00154ae:	66 90                	xchg   ax,ax

c00154b0 <taskStartupFunction>:
c00154b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154b5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00154b8:	c3                   	ret    
c00154b9:	90                   	nop
c00154ba:	66 90                	xchg   ax,ax

c00154bc <Semaphore::Semaphore(int)>:
c00154bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00154c4:	89 10                	mov    DWORD PTR [eax],edx
c00154c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154ca:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00154d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154d5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00154dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154e0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00154e7:	90                   	nop
c00154e8:	c3                   	ret    
c00154e9:	90                   	nop
c00154ea:	66 90                	xchg   ax,ax

c00154ec <Mutex::Mutex()>:
c00154ec:	83 ec 08             	sub    esp,0x8
c00154ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00154f3:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00154fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00154fe:	e8 b9 ff ff ff       	call   c00154bc <Semaphore::Semaphore(int)>
c0015503:	90                   	nop
c0015504:	83 c4 08             	add    esp,0x8
c0015507:	c3                   	ret    

c0015508 <Process::createThread(void (*)(void*), void*, int)>:
c0015508:	57                   	push   edi
c0015509:	31 c9                	xor    ecx,ecx
c001550b:	56                   	push   esi
c001550c:	53                   	push   ebx
c001550d:	83 ec 10             	sub    esp,0x10
c0015510:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015514:	0f b7 93 04 05 00 00 	movzx  edx,WORD PTR [ebx+0x504]
c001551b:	89 d0                	mov    eax,edx
c001551d:	8d 76 00             	lea    esi,[esi+0x0]
c0015520:	a8 01                	test   al,0x1
c0015522:	74 14                	je     c0015538 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015524:	d1 e8                	shr    eax,1
c0015526:	41                   	inc    ecx
c0015527:	83 f9 10             	cmp    ecx,0x10
c001552a:	75 f4                	jne    c0015520 <Process::createThread(void (*)(void*), void*, int)+0x18>
c001552c:	83 c4 10             	add    esp,0x10
c001552f:	31 db                	xor    ebx,ebx
c0015531:	89 d8                	mov    eax,ebx
c0015533:	5b                   	pop    ebx
c0015534:	5e                   	pop    esi
c0015535:	5f                   	pop    edi
c0015536:	c3                   	ret    
c0015537:	90                   	nop
c0015538:	b8 01 00 00 00       	mov    eax,0x1
c001553d:	d3 e0                	shl    eax,cl
c001553f:	09 d0                	or     eax,edx
c0015541:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015548:	8d 04 49             	lea    eax,[ecx+ecx*2]
c001554b:	c1 e0 05             	shl    eax,0x5
c001554e:	29 c8                	sub    eax,ecx
c0015550:	01 d8                	add    eax,ebx
c0015552:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015559:	75 09                	jne    c0015564 <Process::createThread(void (*)(void*), void*, int)+0x5c>
c001555b:	31 f6                	xor    esi,esi
c001555d:	89 b0 61 02 00 00    	mov    DWORD PTR [eax+0x261],esi
c0015563:	90                   	nop
c0015564:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001556a:	8d 34 49             	lea    esi,[ecx+ecx*2]
c001556d:	c1 e6 05             	shl    esi,0x5
c0015570:	29 ce                	sub    esi,ecx
c0015572:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015575:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015578:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001557e:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015584:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c001558a:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015591:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015597:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001559b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00155a1:	89 ca                	mov    edx,ecx
c00155a3:	31 c9                	xor    ecx,ecx
c00155a5:	f7 da                	neg    edx
c00155a7:	c1 e2 15             	shl    edx,0x15
c00155aa:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00155b0:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00155b6:	0f b6 54 24 2c       	movzx  edx,BYTE PTR [esp+0x2c]
c00155bb:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00155c1:	31 d2                	xor    edx,edx
c00155c3:	89 90 24 02 00 00    	mov    DWORD PTR [eax+0x224],edx
c00155c9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00155cd:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00155d3:	31 d2                	xor    edx,edx
c00155d5:	89 88 1c 02 00 00    	mov    DWORD PTR [eax+0x21c],ecx
c00155db:	89 90 20 02 00 00    	mov    DWORD PTR [eax+0x220],edx
c00155e1:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00155e8:	e8 0f 25 ff ff       	call   c0007afc <malloc>
c00155ed:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c00155f0:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00155f4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00155fb:	e8 c8 9a 00 00       	call   c001f0c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015600:	83 c4 10             	add    esp,0x10
c0015603:	89 d8                	mov    eax,ebx
c0015605:	5b                   	pop    ebx
c0015606:	5e                   	pop    esi
c0015607:	5f                   	pop    edi
c0015608:	c3                   	ret    
c0015609:	90                   	nop
c001560a:	66 90                	xchg   ax,ax

c001560c <Process::createUserThread()>:
c001560c:	83 ec 1c             	sub    esp,0x1c
c001560f:	b8 80 00 00 00       	mov    eax,0x80
c0015614:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015618:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001561c:	31 d2                	xor    edx,edx
c001561e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0015622:	b9 60 4f 01 c0       	mov    ecx,0xc0014f60
c0015627:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001562b:	89 04 24             	mov    DWORD PTR [esp],eax
c001562e:	e8 d5 fe ff ff       	call   c0015508 <Process::createThread(void (*)(void*), void*, int)>
c0015633:	83 c4 1c             	add    esp,0x1c
c0015636:	c3                   	ret    
c0015637:	90                   	nop

c0015638 <setupMultitasking(void (*)())>:
c0015638:	56                   	push   esi
c0015639:	53                   	push   ebx
c001563a:	83 ec 24             	sub    esp,0x24
c001563d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015641:	eb 0d                	jmp    c0015650 <setupMultitasking(void (*)())+0x18>
c0015643:	90                   	nop
c0015644:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001564b:	e8 cc 99 00 00       	call   c001f01c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015650:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015657:	e8 9c 99 00 00       	call   c001eff8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001565c:	84 c0                	test   al,al
c001565e:	74 e4                	je     c0015644 <setupMultitasking(void (*)())+0xc>
c0015660:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0015667:	e8 90 24 ff ff       	call   c0007afc <malloc>
c001566c:	31 d2                	xor    edx,edx
c001566e:	b9 bd 16 02 c0       	mov    ecx,0xc00216bd
c0015673:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015677:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001567b:	89 c3                	mov    ebx,eax
c001567d:	31 c0                	xor    eax,eax
c001567f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015683:	b8 01 00 00 00       	mov    eax,0x1
c0015688:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001568c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001568f:	e8 5c fc ff ff       	call   c00152f0 <Process::Process(bool, char const*, Process*, char**)>
c0015694:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001569a:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c00156a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00156a3:	e8 d5 30 ff ff       	call   c000877d <setActiveTerminal(VgaText*)>
c00156a8:	0f b7 83 04 05 00 00 	movzx  eax,WORD PTR [ebx+0x504]
c00156af:	31 d2                	xor    edx,edx
c00156b1:	b9 80 f0 fa 02       	mov    ecx,0x2faf080
c00156b6:	83 c8 01             	or     eax,0x1
c00156b9:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00156c0:	31 c0                	xor    eax,eax
c00156c2:	89 83 61 02 00 00    	mov    DWORD PTR [ebx+0x261],eax
c00156c8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00156ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00156d1:	89 8b 40 02 00 00    	mov    DWORD PTR [ebx+0x240],ecx
c00156d7:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00156dd:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00156e3:	b8 e0 ff ff 01       	mov    eax,0x1ffffe0
c00156e8:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c00156ee:	31 c0                	xor    eax,eax
c00156f0:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c00156f6:	b8 01 00 00 00       	mov    eax,0x1
c00156fb:	89 83 24 02 00 00    	mov    DWORD PTR [ebx+0x224],eax
c0015701:	31 c0                	xor    eax,eax
c0015703:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015709:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001570f:	89 83 1c 02 00 00    	mov    DWORD PTR [ebx+0x21c],eax
c0015715:	89 93 20 02 00 00    	mov    DWORD PTR [ebx+0x220],edx
c001571b:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015722:	e8 d5 23 ff ff       	call   c0007afc <malloc>
c0015727:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001572d:	b8 b9 16 02 c0       	mov    eax,0xc00216b9
c0015732:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015738:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001573c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015742:	89 04 24             	mov    DWORD PTR [esp],eax
c0015745:	e8 d6 af fe ff       	call   c0000720 <strcpy>
c001574a:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015751:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015755:	83 c4 24             	add    esp,0x24
c0015758:	5b                   	pop    ebx
c0015759:	5e                   	pop    esi
c001575a:	e9 0a ab fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001575f:	90                   	nop

c0015760 <schedule()>:
c0015760:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c0015766:	85 d2                	test   edx,edx
c0015768:	74 0e                	je     c0015778 <schedule()+0x18>
c001576a:	b8 01 00 00 00       	mov    eax,0x1
c001576f:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015774:	c3                   	ret    
c0015775:	8d 76 00             	lea    esi,[esi+0x0]
c0015778:	53                   	push   ebx
c0015779:	83 ec 18             	sub    esp,0x18
c001577c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015783:	e8 70 98 00 00       	call   c001eff8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015788:	84 c0                	test   al,al
c001578a:	75 38                	jne    c00157c4 <schedule()+0x64>
c001578c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015791:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015794:	4a                   	dec    edx
c0015795:	74 35                	je     c00157cc <schedule()+0x6c>
c0015797:	90                   	nop
c0015798:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001579f:	e8 70 98 00 00       	call   c001f014 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157a4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00157ab:	89 c3                	mov    ebx,eax
c00157ad:	e8 6a 98 00 00       	call   c001f01c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00157b2:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00157b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157bc:	e8 ff f7 ff ff       	call   c0014fc0 <switchToThread(ThreadControlBlock*)>
c00157c1:	8d 76 00             	lea    esi,[esi+0x0]
c00157c4:	83 c4 18             	add    esp,0x18
c00157c7:	5b                   	pop    ebx
c00157c8:	c3                   	ret    
c00157c9:	8d 76 00             	lea    esi,[esi+0x0]
c00157cc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00157d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157d8:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00157df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00157e3:	e8 e0 98 00 00       	call   c001f0c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00157e8:	eb ae                	jmp    c0015798 <schedule()+0x38>
c00157ea:	66 90                	xchg   ax,ax

c00157ec <Semaphore::tryAcquire()>:
c00157ec:	53                   	push   ebx
c00157ed:	83 ec 08             	sub    esp,0x8
c00157f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00157f4:	fa                   	cli    
c00157f5:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00157fb:	8d 42 01             	lea    eax,[edx+0x1]
c00157fe:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015803:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015808:	8d 58 01             	lea    ebx,[eax+0x1]
c001580b:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c0015811:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015814:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015816:	7c 2c                	jl     c0015844 <Semaphore::tryAcquire()+0x58>
c0015818:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001581d:	85 c0                	test   eax,eax
c001581f:	75 0b                	jne    c001582c <Semaphore::tryAcquire()+0x40>
c0015821:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c0015827:	85 c9                	test   ecx,ecx
c0015829:	75 55                	jne    c0015880 <Semaphore::tryAcquire()+0x94>
c001582b:	90                   	nop
c001582c:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015832:	31 c0                	xor    eax,eax
c0015834:	85 d2                	test   edx,edx
c0015836:	75 04                	jne    c001583c <Semaphore::tryAcquire()+0x50>
c0015838:	fb                   	sti    
c0015839:	8d 76 00             	lea    esi,[esi+0x0]
c001583c:	83 c4 08             	add    esp,0x8
c001583f:	5b                   	pop    ebx
c0015840:	c3                   	ret    
c0015841:	8d 76 00             	lea    esi,[esi+0x0]
c0015844:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015849:	43                   	inc    ebx
c001584a:	85 c0                	test   eax,eax
c001584c:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001584f:	75 1f                	jne    c0015870 <Semaphore::tryAcquire()+0x84>
c0015851:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015856:	85 c0                	test   eax,eax
c0015858:	74 16                	je     c0015870 <Semaphore::tryAcquire()+0x84>
c001585a:	31 db                	xor    ebx,ebx
c001585c:	89 1d 60 81 02 c0    	mov    DWORD PTR ds:0xc0028160,ebx
c0015862:	e8 f9 fe ff ff       	call   c0015760 <schedule()>
c0015867:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001586c:	8d 50 ff             	lea    edx,[eax-0x1]
c001586f:	90                   	nop
c0015870:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015876:	85 d2                	test   edx,edx
c0015878:	b0 01                	mov    al,0x1
c001587a:	75 c0                	jne    c001583c <Semaphore::tryAcquire()+0x50>
c001587c:	eb ba                	jmp    c0015838 <Semaphore::tryAcquire()+0x4c>
c001587e:	66 90                	xchg   ax,ax
c0015880:	31 c0                	xor    eax,eax
c0015882:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015887:	e8 d4 fe ff ff       	call   c0015760 <schedule()>
c001588c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015891:	8d 50 ff             	lea    edx,[eax-0x1]
c0015894:	31 c0                	xor    eax,eax
c0015896:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001589c:	85 d2                	test   edx,edx
c001589e:	75 9c                	jne    c001583c <Semaphore::tryAcquire()+0x50>
c00158a0:	eb 96                	jmp    c0015838 <Semaphore::tryAcquire()+0x4c>
c00158a2:	66 90                	xchg   ax,ax

c00158a4 <Semaphore::assertLocked(char const*)>:
c00158a4:	83 ec 1c             	sub    esp,0x1c
c00158a7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00158ab:	fa                   	cli    
c00158ac:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00158b1:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00158b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00158ba:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00158c0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00158c2:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00158c5:	7c 29                	jl     c00158f0 <Semaphore::assertLocked(char const*)+0x4c>
c00158c7:	90                   	nop
c00158c8:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00158cd:	85 c0                	test   eax,eax
c00158cf:	75 0b                	jne    c00158dc <Semaphore::assertLocked(char const*)+0x38>
c00158d1:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c00158d7:	85 d2                	test   edx,edx
c00158d9:	75 29                	jne    c0015904 <Semaphore::assertLocked(char const*)+0x60>
c00158db:	90                   	nop
c00158dc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158e1:	48                   	dec    eax
c00158e2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158e7:	75 03                	jne    c00158ec <Semaphore::assertLocked(char const*)+0x48>
c00158e9:	fb                   	sti    
c00158ea:	66 90                	xchg   ax,ax
c00158ec:	83 c4 1c             	add    esp,0x1c
c00158ef:	c3                   	ret    
c00158f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00158f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00158f7:	e8 39 b5 ff ff       	call   c0010e35 <KePanic(char const*)>
c00158fc:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015901:	48                   	dec    eax
c0015902:	eb c4                	jmp    c00158c8 <Semaphore::assertLocked(char const*)+0x24>
c0015904:	31 c0                	xor    eax,eax
c0015906:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c001590b:	e8 50 fe ff ff       	call   c0015760 <schedule()>
c0015910:	eb ca                	jmp    c00158dc <Semaphore::assertLocked(char const*)+0x38>
c0015912:	66 90                	xchg   ax,ax

c0015914 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015914:	83 ec 0c             	sub    esp,0xc
c0015917:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001591c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015920:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015923:	e8 38 fe ff ff       	call   c0015760 <schedule()>
c0015928:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001592d:	48                   	dec    eax
c001592e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015933:	75 03                	jne    c0015938 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015935:	fb                   	sti    
c0015936:	66 90                	xchg   ax,ax
c0015938:	83 c4 0c             	add    esp,0xc
c001593b:	c3                   	ret    

c001593c <blockTask(TaskState)>:
c001593c:	83 ec 0c             	sub    esp,0xc
c001593f:	fa                   	cli    
c0015940:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015946:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001594a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001594f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015952:	e8 09 fe ff ff       	call   c0015760 <schedule()>
c0015957:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001595c:	48                   	dec    eax
c001595d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015962:	75 04                	jne    c0015968 <blockTask(TaskState)+0x2c>
c0015964:	fb                   	sti    
c0015965:	8d 76 00             	lea    esi,[esi+0x0]
c0015968:	83 c4 0c             	add    esp,0xc
c001596b:	c3                   	ret    

c001596c <waitTask(int, int*, int)>:
c001596c:	83 ec 1c             	sub    esp,0x1c
c001596f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015974:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015978:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001597b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001597f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015984:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015987:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001598e:	e8 a9 ff ff ff       	call   c001593c <blockTask(TaskState)>
c0015993:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015998:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001599b:	85 d2                	test   edx,edx
c001599d:	74 0d                	je     c00159ac <waitTask(int, int*, int)+0x40>
c001599f:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00159a2:	89 02                	mov    DWORD PTR [edx],eax
c00159a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159a9:	8d 76 00             	lea    esi,[esi+0x0]
c00159ac:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00159af:	83 c4 1c             	add    esp,0x1c
c00159b2:	c3                   	ret    
c00159b3:	90                   	nop

c00159b4 <milliTenthSleepUntil(unsigned int)>:
c00159b4:	83 ec 1c             	sub    esp,0x1c
c00159b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159bb:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c00159c1:	76 05                	jbe    c00159c8 <milliTenthSleepUntil(unsigned int)+0x14>
c00159c3:	90                   	nop
c00159c4:	83 c4 1c             	add    esp,0x1c
c00159c7:	c3                   	ret    
c00159c8:	fa                   	cli    
c00159c9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00159cf:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c00159d5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00159db:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00159de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159e3:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c00159ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00159ee:	e8 d5 96 00 00       	call   c001f0c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00159f3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00159fa:	e8 3d ff ff ff       	call   c001593c <blockTask(TaskState)>
c00159ff:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a04:	48                   	dec    eax
c0015a05:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a0a:	75 0c                	jne    c0015a18 <milliTenthSleepUntil(unsigned int)+0x64>
c0015a0c:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c0015a12:	85 d2                	test   edx,edx
c0015a14:	75 16                	jne    c0015a2c <milliTenthSleepUntil(unsigned int)+0x78>
c0015a16:	66 90                	xchg   ax,ax
c0015a18:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a1d:	48                   	dec    eax
c0015a1e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a23:	75 9f                	jne    c00159c4 <milliTenthSleepUntil(unsigned int)+0x10>
c0015a25:	fb                   	sti    
c0015a26:	83 c4 1c             	add    esp,0x1c
c0015a29:	c3                   	ret    
c0015a2a:	66 90                	xchg   ax,ax
c0015a2c:	31 c0                	xor    eax,eax
c0015a2e:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015a33:	e8 28 fd ff ff       	call   c0015760 <schedule()>
c0015a38:	eb de                	jmp    c0015a18 <milliTenthSleepUntil(unsigned int)+0x64>
c0015a3a:	66 90                	xchg   ax,ax

c0015a3c <milliTenthSleep(unsigned int)>:
c0015a3c:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c0015a41:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0015a45:	e9 6a ff ff ff       	jmp    c00159b4 <milliTenthSleepUntil(unsigned int)>
c0015a4a:	66 90                	xchg   ax,ax

c0015a4c <sleep(unsigned int)>:
c0015a4c:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015a54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a58:	eb e2                	jmp    c0015a3c <milliTenthSleep(unsigned int)>
c0015a5a:	66 90                	xchg   ax,ax

c0015a5c <Semaphore::acquire()>:
c0015a5c:	83 ec 1c             	sub    esp,0x1c
c0015a5f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a63:	fa                   	cli    
c0015a64:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a69:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015a6f:	8d 48 01             	lea    ecx,[eax+0x1]
c0015a72:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015a78:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015a7b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015a7d:	7d 2d                	jge    c0015aac <Semaphore::acquire()+0x50>
c0015a7f:	41                   	inc    ecx
c0015a80:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015a83:	90                   	nop
c0015a84:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a89:	85 c0                	test   eax,eax
c0015a8b:	75 0b                	jne    c0015a98 <Semaphore::acquire()+0x3c>
c0015a8d:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c0015a93:	85 d2                	test   edx,edx
c0015a95:	75 5d                	jne    c0015af4 <Semaphore::acquire()+0x98>
c0015a97:	90                   	nop
c0015a98:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a9d:	48                   	dec    eax
c0015a9e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015aa3:	75 03                	jne    c0015aa8 <Semaphore::acquire()+0x4c>
c0015aa5:	fb                   	sti    
c0015aa6:	66 90                	xchg   ax,ax
c0015aa8:	83 c4 1c             	add    esp,0x1c
c0015aab:	c3                   	ret    
c0015aac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ab1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015ab8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015abb:	85 c9                	test   ecx,ecx
c0015abd:	74 45                	je     c0015b04 <Semaphore::acquire()+0xa8>
c0015abf:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015ac2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015ac8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015acb:	90                   	nop
c0015acc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ad1:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015ad4:	c7 04 24 38 17 02 c0 	mov    DWORD PTR [esp],0xc0021738
c0015adb:	e8 96 4f ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0015ae0:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015ae7:	e8 50 fe ff ff       	call   c001593c <blockTask(TaskState)>
c0015aec:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015af1:	48                   	dec    eax
c0015af2:	eb 90                	jmp    c0015a84 <Semaphore::acquire()+0x28>
c0015af4:	31 c0                	xor    eax,eax
c0015af6:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015afb:	e8 60 fc ff ff       	call   c0015760 <schedule()>
c0015b00:	eb 96                	jmp    c0015a98 <Semaphore::acquire()+0x3c>
c0015b02:	66 90                	xchg   ax,ax
c0015b04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b09:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015b0c:	eb be                	jmp    c0015acc <Semaphore::acquire()+0x70>
c0015b0e:	66 90                	xchg   ax,ax

c0015b10 <taskReturned>:
c0015b10:	83 ec 1c             	sub    esp,0x1c
c0015b13:	c7 04 24 58 17 02 c0 	mov    DWORD PTR [esp],0xc0021758
c0015b1a:	e8 16 b3 ff ff       	call   c0010e35 <KePanic(char const*)>
c0015b1f:	90                   	nop
c0015b20:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0015b27:	e8 10 fe ff ff       	call   c001593c <blockTask(TaskState)>
c0015b2c:	fa                   	cli    
c0015b2d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015b33:	e8 28 fc ff ff       	call   c0015760 <schedule()>
c0015b38:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b3d:	48                   	dec    eax
c0015b3e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b43:	75 db                	jne    c0015b20 <taskReturned+0x10>
c0015b45:	fb                   	sti    
c0015b46:	eb d8                	jmp    c0015b20 <taskReturned+0x10>

c0015b48 <Thr::processFromPID(int)>:
c0015b48:	57                   	push   edi
c0015b49:	56                   	push   esi
c0015b4a:	53                   	push   ebx
c0015b4b:	83 ec 10             	sub    esp,0x10
c0015b4e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015b52:	fa                   	cli    
c0015b53:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015b5a:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015b60:	e8 af 94 00 00       	call   c001f014 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b65:	89 c7                	mov    edi,eax
c0015b67:	eb 13                	jmp    c0015b7c <Thr::processFromPID(int)+0x34>
c0015b69:	8d 76 00             	lea    esi,[esi+0x0]
c0015b6c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015b73:	e8 9c 94 00 00       	call   c001f014 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b78:	39 f8                	cmp    eax,edi
c0015b7a:	74 50                	je     c0015bcc <Thr::processFromPID(int)+0x84>
c0015b7c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015b83:	e8 8c 94 00 00       	call   c001f014 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b88:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015b8f:	89 c3                	mov    ebx,eax
c0015b91:	e8 86 94 00 00       	call   c001f01c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015b96:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0015b9a:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015ba1:	e8 22 95 00 00       	call   c001f0c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015ba6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015ba9:	39 30                	cmp    DWORD PTR [eax],esi
c0015bab:	75 bf                	jne    c0015b6c <Thr::processFromPID(int)+0x24>
c0015bad:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015bb2:	48                   	dec    eax
c0015bb3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015bb8:	74 0e                	je     c0015bc8 <Thr::processFromPID(int)+0x80>
c0015bba:	66 90                	xchg   ax,ax
c0015bbc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015bbf:	90                   	nop
c0015bc0:	83 c4 10             	add    esp,0x10
c0015bc3:	5b                   	pop    ebx
c0015bc4:	5e                   	pop    esi
c0015bc5:	5f                   	pop    edi
c0015bc6:	c3                   	ret    
c0015bc7:	90                   	nop
c0015bc8:	fb                   	sti    
c0015bc9:	eb f1                	jmp    c0015bbc <Thr::processFromPID(int)+0x74>
c0015bcb:	90                   	nop
c0015bcc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015bd1:	8d 50 ff             	lea    edx,[eax-0x1]
c0015bd4:	31 c0                	xor    eax,eax
c0015bd6:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015bdc:	85 d2                	test   edx,edx
c0015bde:	75 e0                	jne    c0015bc0 <Thr::processFromPID(int)+0x78>
c0015be0:	fb                   	sti    
c0015be1:	83 c4 10             	add    esp,0x10
c0015be4:	5b                   	pop    ebx
c0015be5:	5e                   	pop    esi
c0015be6:	5f                   	pop    edi
c0015be7:	c3                   	ret    

c0015be8 <unblockTask(ThreadControlBlock*)>:
c0015be8:	53                   	push   ebx
c0015be9:	83 ec 18             	sub    esp,0x18
c0015bec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015bf0:	fa                   	cli    
c0015bf1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015bf4:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015bfa:	85 c0                	test   eax,eax
c0015bfc:	74 5a                	je     c0015c58 <unblockTask(ThreadControlBlock*)+0x70>
c0015bfe:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015c01:	48                   	dec    eax
c0015c02:	74 30                	je     c0015c34 <unblockTask(ThreadControlBlock*)+0x4c>
c0015c04:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015c0b:	e8 04 94 00 00       	call   c001f014 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c10:	85 c0                	test   eax,eax
c0015c12:	75 18                	jne    c0015c2c <unblockTask(ThreadControlBlock*)+0x44>
c0015c14:	eb 52                	jmp    c0015c68 <unblockTask(ThreadControlBlock*)+0x80>
c0015c16:	66 90                	xchg   ax,ax
c0015c18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015c1c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015c23:	e8 d4 96 00 00       	call   c001f2fc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015c28:	85 c0                	test   eax,eax
c0015c2a:	74 3c                	je     c0015c68 <unblockTask(ThreadControlBlock*)+0x80>
c0015c2c:	39 c3                	cmp    ebx,eax
c0015c2e:	75 e8                	jne    c0015c18 <unblockTask(ThreadControlBlock*)+0x30>
c0015c30:	eb 0e                	jmp    c0015c40 <unblockTask(ThreadControlBlock*)+0x58>
c0015c32:	66 90                	xchg   ax,ax
c0015c34:	c7 04 24 db 16 02 c0 	mov    DWORD PTR [esp],0xc00216db
c0015c3b:	e8 36 4e ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0015c40:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015c45:	48                   	dec    eax
c0015c46:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015c4b:	75 03                	jne    c0015c50 <unblockTask(ThreadControlBlock*)+0x68>
c0015c4d:	fb                   	sti    
c0015c4e:	66 90                	xchg   ax,ax
c0015c50:	83 c4 18             	add    esp,0x18
c0015c53:	5b                   	pop    ebx
c0015c54:	c3                   	ret    
c0015c55:	8d 76 00             	lea    esi,[esi+0x0]
c0015c58:	c7 04 24 c4 16 02 c0 	mov    DWORD PTR [esp],0xc00216c4
c0015c5f:	e8 12 4e ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0015c64:	eb da                	jmp    c0015c40 <unblockTask(ThreadControlBlock*)+0x58>
c0015c66:	66 90                	xchg   ax,ax
c0015c68:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0015c6c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015c73:	e8 50 94 00 00       	call   c001f0c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015c78:	eb c6                	jmp    c0015c40 <unblockTask(ThreadControlBlock*)+0x58>
c0015c7a:	66 90                	xchg   ax,ax

c0015c7c <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015c7c:	55                   	push   ebp
c0015c7d:	57                   	push   edi
c0015c7e:	56                   	push   esi
c0015c7f:	53                   	push   ebx
c0015c80:	83 ec 2c             	sub    esp,0x2c
c0015c83:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015c87:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015c8a:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0015c90:	85 ff                	test   edi,edi
c0015c92:	7e 20                	jle    c0015cb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c0015c94:	31 f6                	xor    esi,esi
c0015c96:	66 90                	xchg   ax,ax
c0015c98:	8b 84 b0 1a 05 00 00 	mov    eax,DWORD PTR [eax+esi*4+0x51a]
c0015c9f:	46                   	inc    esi
c0015ca0:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ca3:	e8 67 1e ff ff       	call   c0007b0f <free>
c0015ca8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015cab:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015cb1:	7f e5                	jg     c0015c98 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015cb3:	90                   	nop
c0015cb4:	31 f6                	xor    esi,esi
c0015cb6:	89 b0 16 05 00 00    	mov    DWORD PTR [eax+0x516],esi
c0015cbc:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015cc1:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015cc4:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015cc7:	d3 c0                	rol    eax,cl
c0015cc9:	0f b7 8a 04 05 00 00 	movzx  ecx,WORD PTR [edx+0x504]
c0015cd0:	21 c8                	and    eax,ecx
c0015cd2:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015cd9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015cdc:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015ce4:	89 f7                	mov    edi,esi
c0015ce6:	0f 85 68 01 00 00    	jne    c0015e54 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d8>
c0015cec:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015cf2:	85 ed                	test   ebp,ebp
c0015cf4:	74 1e                	je     c0015d14 <cleanupTerminatedTask(ThreadControlBlock*)+0x98>
c0015cf6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015cf9:	e8 4c ae ff ff       	call   c0010b4a <EnvVarContainer::~EnvVarContainer()>
c0015cfe:	b9 0c 00 00 00       	mov    ecx,0xc
c0015d03:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0015d07:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015d0a:	e8 4d 4c ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c0015d0f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015d12:	89 f7                	mov    edi,esi
c0015d14:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015d1a:	85 c0                	test   eax,eax
c0015d1c:	0f 84 ae 00 00 00    	je     c0015dd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0015d22:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015d25:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015d29:	31 c9                	xor    ecx,ecx
c0015d2b:	eb 17                	jmp    c0015d44 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0015d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d30:	41                   	inc    ecx
c0015d31:	83 f9 10             	cmp    ecx,0x10
c0015d34:	0f 84 96 00 00 00    	je     c0015dd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0015d3a:	66 90                	xchg   ax,ax
c0015d3c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015d42:	66 90                	xchg   ax,ax
c0015d44:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0015d4b:	d3 fa                	sar    edx,cl
c0015d4d:	f6 c2 01             	test   dl,0x1
c0015d50:	74 de                	je     c0015d30 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c0015d52:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0015d55:	c1 e2 05             	shl    edx,0x5
c0015d58:	29 ca                	sub    edx,ecx
c0015d5a:	01 d0                	add    eax,edx
c0015d5c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015d62:	83 fd 07             	cmp    ebp,0x7
c0015d65:	75 c9                	jne    c0015d30 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c0015d67:	05 40 02 00 00       	add    eax,0x240
c0015d6c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015d6f:	83 fd ff             	cmp    ebp,0xffffffff
c0015d72:	0f 8c e4 00 00 00    	jl     c0015e5c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0015d78:	0f 84 9a 01 00 00    	je     c0015f18 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0015d7e:	85 ed                	test   ebp,ebp
c0015d80:	0f 84 72 01 00 00    	je     c0015ef8 <cleanupTerminatedTask(ThreadControlBlock*)+0x27c>
c0015d86:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015d88:	75 a6                	jne    c0015d30 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c0015d8a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0015d8e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015d94:	01 d0                	add    eax,edx
c0015d96:	66 90                	xchg   ax,ax
c0015d98:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015d9c:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015da2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015da5:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015dab:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015db2:	89 04 24             	mov    DWORD PTR [esp],eax
c0015db5:	e8 2e fe ff ff       	call   c0015be8 <unblockTask(ThreadControlBlock*)>
c0015dba:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015dbe:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015dc1:	41                   	inc    ecx
c0015dc2:	83 f9 10             	cmp    ecx,0x10
c0015dc5:	89 f7                	mov    edi,esi
c0015dc7:	0f 85 6f ff ff ff    	jne    c0015d3c <cleanupTerminatedTask(ThreadControlBlock*)+0xc0>
c0015dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0015dd0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015dd6:	85 c0                	test   eax,eax
c0015dd8:	74 56                	je     c0015e30 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0015dda:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015de0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015de6:	74 48                	je     c0015e30 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0015de8:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015def:	e8 20 92 00 00       	call   c001f014 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015df4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015dfb:	89 c7                	mov    edi,eax
c0015dfd:	e8 f6 91 00 00       	call   c001eff8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015e02:	84 c0                	test   al,al
c0015e04:	0f 84 be 00 00 00    	je     c0015ec8 <cleanupTerminatedTask(ThreadControlBlock*)+0x24c>
c0015e0a:	66 90                	xchg   ax,ax
c0015e0c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015e0f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015e15:	85 d2                	test   edx,edx
c0015e17:	74 0b                	je     c0015e24 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c0015e19:	8b 02                	mov    eax,DWORD PTR [edx]
c0015e1b:	89 14 24             	mov    DWORD PTR [esp],edx
c0015e1e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e21:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015e24:	31 d2                	xor    edx,edx
c0015e26:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015e2c:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015e2f:	90                   	nop
c0015e30:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015e36:	85 db                	test   ebx,ebx
c0015e38:	74 1a                	je     c0015e54 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d8>
c0015e3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e3d:	e8 96 3d ff ff       	call   c0009bd8 <VAS::~VAS()>
c0015e42:	b8 14 00 00 00       	mov    eax,0x14
c0015e47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e4e:	e8 09 4b ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c0015e53:	90                   	nop
c0015e54:	83 c4 2c             	add    esp,0x2c
c0015e57:	5b                   	pop    ebx
c0015e58:	5e                   	pop    esi
c0015e59:	5f                   	pop    edi
c0015e5a:	5d                   	pop    ebp
c0015e5b:	c3                   	ret    
c0015e5c:	c7 04 24 8c 17 02 c0 	mov    DWORD PTR [esp],0xc002178c
c0015e63:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0015e67:	e8 c9 af ff ff       	call   c0010e35 <KePanic(char const*)>
c0015e6c:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015e6f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015e73:	89 f7                	mov    edi,esi
c0015e75:	e9 b6 fe ff ff       	jmp    c0015d30 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c0015e7a:	66 90                	xchg   ax,ax
c0015e7c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e82:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015e88:	75 1a                	jne    c0015ea4 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c0015e8a:	c7 04 24 f4 17 02 c0 	mov    DWORD PTR [esp],0xc00217f4
c0015e91:	e8 e0 4b ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0015e96:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015e9d:	e8 9a fa ff ff       	call   c001593c <blockTask(TaskState)>
c0015ea2:	66 90                	xchg   ax,ax
c0015ea4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015ea8:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015eaf:	e8 14 92 00 00       	call   c001f0c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015eb4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015ebb:	e8 54 91 00 00       	call   c001f014 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ec0:	39 f8                	cmp    eax,edi
c0015ec2:	0f 84 44 ff ff ff    	je     c0015e0c <cleanupTerminatedTask(ThreadControlBlock*)+0x190>
c0015ec8:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015ecf:	e8 40 91 00 00       	call   c001f014 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ed4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015edb:	89 c6                	mov    esi,eax
c0015edd:	e8 3a 91 00 00       	call   c001f01c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015ee2:	39 f3                	cmp    ebx,esi
c0015ee4:	74 be                	je     c0015ea4 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c0015ee6:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015ee9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015eec:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015ef2:	75 b0                	jne    c0015ea4 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c0015ef4:	eb 86                	jmp    c0015e7c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015ef6:	66 90                	xchg   ax,ax
c0015ef8:	c7 04 24 c0 17 02 c0 	mov    DWORD PTR [esp],0xc00217c0
c0015eff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0015f03:	e8 2d af ff ff       	call   c0010e35 <KePanic(char const*)>
c0015f08:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015f0b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015f0f:	89 f7                	mov    edi,esi
c0015f11:	e9 1a fe ff ff       	jmp    c0015d30 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c0015f16:	66 90                	xchg   ax,ax
c0015f18:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0015f1c:	8b 36                	mov    esi,DWORD PTR [esi]
c0015f1e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015f21:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015f24:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015f2a:	01 d7                	add    edi,edx
c0015f2c:	89 f8                	mov    eax,edi
c0015f2e:	e9 65 fe ff ff       	jmp    c0015d98 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0015f33:	90                   	nop

c0015f34 <cleanerTaskFunction(void*)>:
c0015f34:	53                   	push   ebx
c0015f35:	83 ec 18             	sub    esp,0x18
c0015f38:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f3d:	48                   	dec    eax
c0015f3e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f43:	75 03                	jne    c0015f48 <cleanerTaskFunction(void*)+0x14>
c0015f45:	fb                   	sti    
c0015f46:	66 90                	xchg   ax,ax
c0015f48:	fa                   	cli    
c0015f49:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f4e:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c0015f55:	8d 50 01             	lea    edx,[eax+0x1]
c0015f58:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015f5e:	0f 84 a0 00 00 00    	je     c0016004 <cleanerTaskFunction(void*)+0xd0>
c0015f64:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f69:	85 c0                	test   eax,eax
c0015f6b:	75 03                	jne    c0015f70 <cleanerTaskFunction(void*)+0x3c>
c0015f6d:	fb                   	sti    
c0015f6e:	66 90                	xchg   ax,ax
c0015f70:	31 c9                	xor    ecx,ecx
c0015f72:	88 0d 4c 81 02 c0    	mov    BYTE PTR ds:0xc002814c,cl
c0015f78:	fa                   	cli    
c0015f79:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015f7f:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c0015f85:	fa                   	cli    
c0015f86:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015f8c:	eb 26                	jmp    c0015fb4 <cleanerTaskFunction(void*)+0x80>
c0015f8e:	66 90                	xchg   ax,ax
c0015f90:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015f97:	e8 78 90 00 00       	call   c001f014 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f9c:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015fa3:	89 c3                	mov    ebx,eax
c0015fa5:	e8 72 90 00 00       	call   c001f01c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015faa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fad:	e8 ca fc ff ff       	call   c0015c7c <cleanupTerminatedTask(ThreadControlBlock*)>
c0015fb2:	66 90                	xchg   ax,ax
c0015fb4:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015fbb:	e8 38 90 00 00       	call   c001eff8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015fc0:	84 c0                	test   al,al
c0015fc2:	74 cc                	je     c0015f90 <cleanerTaskFunction(void*)+0x5c>
c0015fc4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015fc9:	48                   	dec    eax
c0015fca:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015fcf:	75 03                	jne    c0015fd4 <cleanerTaskFunction(void*)+0xa0>
c0015fd1:	fb                   	sti    
c0015fd2:	66 90                	xchg   ax,ax
c0015fd4:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015fd9:	48                   	dec    eax
c0015fda:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015fdf:	0f 85 53 ff ff ff    	jne    c0015f38 <cleanerTaskFunction(void*)+0x4>
c0015fe5:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c0015feb:	85 d2                	test   edx,edx
c0015fed:	0f 84 45 ff ff ff    	je     c0015f38 <cleanerTaskFunction(void*)+0x4>
c0015ff3:	31 c0                	xor    eax,eax
c0015ff5:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015ffa:	e8 61 f7 ff ff       	call   c0015760 <schedule()>
c0015fff:	e9 34 ff ff ff       	jmp    c0015f38 <cleanerTaskFunction(void*)+0x4>
c0016004:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001600b:	e8 04 f9 ff ff       	call   c0015914 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016010:	e9 5b ff ff ff       	jmp    c0015f70 <cleanerTaskFunction(void*)+0x3c>
c0016015:	8d 76 00             	lea    esi,[esi+0x0]

c0016018 <terminateTask(int)>:
c0016018:	83 ec 1c             	sub    esp,0x1c
c001601b:	fa                   	cli    
c001601c:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0016022:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c0016028:	fa                   	cli    
c0016029:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001602f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016033:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016038:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001603b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016040:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016043:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016047:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c001604e:	e8 75 90 00 00       	call   c001f0c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016053:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016058:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001605f:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0016064:	85 c0                	test   eax,eax
c0016066:	74 58                	je     c00160c0 <terminateTask(int)+0xa8>
c0016068:	89 04 24             	mov    DWORD PTR [esp],eax
c001606b:	b2 01                	mov    dl,0x1
c001606d:	88 15 4c 81 02 c0    	mov    BYTE PTR ds:0xc002814c,dl
c0016073:	e8 70 fb ff ff       	call   c0015be8 <unblockTask(ThreadControlBlock*)>
c0016078:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001607d:	48                   	dec    eax
c001607e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016083:	75 03                	jne    c0016088 <terminateTask(int)+0x70>
c0016085:	fb                   	sti    
c0016086:	66 90                	xchg   ax,ax
c0016088:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001608d:	48                   	dec    eax
c001608e:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0016093:	75 0b                	jne    c00160a0 <terminateTask(int)+0x88>
c0016095:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c001609c:	75 32                	jne    c00160d0 <terminateTask(int)+0xb8>
c001609e:	66 90                	xchg   ax,ax
c00160a0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00160a5:	48                   	dec    eax
c00160a6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00160ab:	75 03                	jne    c00160b0 <terminateTask(int)+0x98>
c00160ad:	fb                   	sti    
c00160ae:	66 90                	xchg   ax,ax
c00160b0:	fa                   	cli    
c00160b1:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00160b7:	90                   	nop
c00160b8:	e8 a3 f6 ff ff       	call   c0015760 <schedule()>
c00160bd:	eb e1                	jmp    c00160a0 <terminateTask(int)+0x88>
c00160bf:	90                   	nop
c00160c0:	c7 04 24 f2 16 02 c0 	mov    DWORD PTR [esp],0xc00216f2
c00160c7:	e8 aa 49 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00160cc:	eb aa                	jmp    c0016078 <terminateTask(int)+0x60>
c00160ce:	66 90                	xchg   ax,ax
c00160d0:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00160da:	eb dc                	jmp    c00160b8 <terminateTask(int)+0xa0>

c00160dc <Thr::terminateFromIRQ(int)>:
c00160dc:	83 ec 1c             	sub    esp,0x1c
c00160df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00160e6:	e8 2d ff ff ff       	call   c0016018 <terminateTask(int)>
c00160eb:	90                   	nop

c00160ec <Semaphore::release()>:
c00160ec:	83 ec 1c             	sub    esp,0x1c
c00160ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00160f3:	fa                   	cli    
c00160f4:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00160f9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00160ff:	8d 48 01             	lea    ecx,[eax+0x1]
c0016102:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0016108:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001610b:	85 c9                	test   ecx,ecx
c001610d:	74 3d                	je     c001614c <Semaphore::release()+0x60>
c001610f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016112:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016115:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0016118:	e8 cb fa ff ff       	call   c0015be8 <unblockTask(ThreadControlBlock*)>
c001611d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0016122:	48                   	dec    eax
c0016123:	90                   	nop
c0016124:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0016129:	85 c0                	test   eax,eax
c001612b:	75 0b                	jne    c0016138 <Semaphore::release()+0x4c>
c001612d:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c0016133:	85 d2                	test   edx,edx
c0016135:	75 1d                	jne    c0016154 <Semaphore::release()+0x68>
c0016137:	90                   	nop
c0016138:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001613d:	48                   	dec    eax
c001613e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016143:	75 03                	jne    c0016148 <Semaphore::release()+0x5c>
c0016145:	fb                   	sti    
c0016146:	66 90                	xchg   ax,ax
c0016148:	83 c4 1c             	add    esp,0x1c
c001614b:	c3                   	ret    
c001614c:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001614f:	eb d3                	jmp    c0016124 <Semaphore::release()+0x38>
c0016151:	8d 76 00             	lea    esi,[esi+0x0]
c0016154:	31 c0                	xor    eax,eax
c0016156:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c001615b:	e8 00 f6 ff ff       	call   c0015760 <schedule()>
c0016160:	eb d6                	jmp    c0016138 <Semaphore::release()+0x4c>
c0016162:	66 90                	xchg   ax,ax

c0016164 <__static_initialization_and_destruction_0(int, int)>:
c0016164:	83 ec 1c             	sub    esp,0x1c
c0016167:	83 7c 24 20 01       	cmp    DWORD PTR [esp+0x20],0x1
c001616c:	0f 85 82 00 00 00    	jne    c00161f4 <__static_initialization_and_destruction_0(int, int)+0x90>
c0016172:	81 7c 24 24 ff ff 00 00 	cmp    DWORD PTR [esp+0x24],0xffff
c001617a:	75 78                	jne    c00161f4 <__static_initialization_and_destruction_0(int, int)+0x90>
c001617c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0016183:	e8 cc 91 00 00       	call   c001f354 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016188:	c7 44 24 08 88 23 02 c0 	mov    DWORD PTR [esp+0x8],0xc0022388
c0016190:	c7 44 24 04 84 81 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028184
c0016198:	c7 04 24 04 f3 01 c0 	mov    DWORD PTR [esp],0xc001f304
c001619f:	e8 68 47 ff ff       	call   c000a90c <__cxa_atexit>
c00161a4:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c00161ab:	e8 a4 91 00 00       	call   c001f354 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00161b0:	c7 44 24 08 88 23 02 c0 	mov    DWORD PTR [esp+0x8],0xc0022388
c00161b8:	c7 44 24 04 78 81 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028178
c00161c0:	c7 04 24 04 f3 01 c0 	mov    DWORD PTR [esp],0xc001f304
c00161c7:	e8 40 47 ff ff       	call   c000a90c <__cxa_atexit>
c00161cc:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c00161d3:	e8 7c 91 00 00       	call   c001f354 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00161d8:	c7 44 24 08 88 23 02 c0 	mov    DWORD PTR [esp+0x8],0xc0022388
c00161e0:	c7 44 24 04 6c 81 02 c0 	mov    DWORD PTR [esp+0x4],0xc002816c
c00161e8:	c7 04 24 04 f3 01 c0 	mov    DWORD PTR [esp],0xc001f304
c00161ef:	e8 18 47 ff ff       	call   c000a90c <__cxa_atexit>
c00161f4:	90                   	nop
c00161f5:	83 c4 1c             	add    esp,0x1c
c00161f8:	c3                   	ret    
c00161f9:	8d 76 00             	lea    esi,[esi+0x0]

c00161fc <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00161fc:	83 ec 1c             	sub    esp,0x1c
c00161ff:	c7 44 24 04 ff ff 00 00 	mov    DWORD PTR [esp+0x4],0xffff
c0016207:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001620e:	e8 51 ff ff ff       	call   c0016164 <__static_initialization_and_destruction_0(int, int)>
c0016213:	83 c4 1c             	add    esp,0x1c
c0016216:	c3                   	ret    

c0016217 <Vm::inbv(unsigned short)>:
c0016217:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c001621c:	81 fa fe fe 00 00    	cmp    edx,0xfefe
c0016222:	75 06                	jne    c001622a <Vm::inbv(unsigned short)+0x13>
c0016224:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0016229:	c3                   	ret    
c001622a:	ec                   	in     al,dx
c001622b:	c3                   	ret    

c001622c <Vm::outbv(unsigned short, unsigned char)>:
c001622c:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0016231:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016235:	81 fa fe fe 00 00    	cmp    edx,0xfefe
c001623b:	75 25                	jne    c0016262 <Vm::outbv(unsigned short, unsigned char)+0x36>
c001623d:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0016243:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0016249:	8d 51 01             	lea    edx,[ecx+0x1]
c001624c:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0016252:	83 fa 20             	cmp    edx,0x20
c0016255:	75 0c                	jne    c0016263 <Vm::outbv(unsigned short, unsigned char)+0x37>
c0016257:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0016261:	c3                   	ret    
c0016262:	ee                   	out    dx,al
c0016263:	c3                   	ret    

c0016264 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016264:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016269:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001626e:	c1 e0 04             	shl    eax,0x4
c0016271:	01 d0                	add    eax,edx
c0016273:	c3                   	ret    

c0016274 <Vm::getSegment(unsigned int)>:
c0016274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016278:	c1 e8 10             	shr    eax,0x10
c001627b:	c3                   	ret    

c001627c <Vm::getOffset(unsigned int)>:
c001627c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016280:	c3                   	ret    

c0016281 <Vm::mainloop2()>:
c0016281:	83 ec 18             	sub    esp,0x18
c0016284:	fa                   	cli    
c0016285:	6a 02                	push   0x2
c0016287:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001628d:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0016294:	e8 7b f6 ff ff       	call   c0015914 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016299:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001629e:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00162a2:	52                   	push   edx
c00162a3:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00162a7:	52                   	push   edx
c00162a8:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00162ac:	52                   	push   edx
c00162ad:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00162b1:	50                   	push   eax
c00162b2:	e8 58 9f fe ff       	call   c000020f <goToVM86>
c00162b7:	83 c4 2c             	add    esp,0x2c
c00162ba:	c3                   	ret    

c00162bb <Vm::mainVm8086Loop(void*)>:
c00162bb:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00162c0:	48                   	dec    eax
c00162c1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00162c6:	75 01                	jne    c00162c9 <Vm::mainVm8086Loop(void*)+0xe>
c00162c8:	fb                   	sti    
c00162c9:	eb b6                	jmp    c0016281 <Vm::mainloop2()>

c00162cb <Vm::mainloop3(unsigned long)>:
c00162cb:	83 ec 18             	sub    esp,0x18
c00162ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162d2:	fa                   	cli    
c00162d3:	6a 02                	push   0x2
c00162d5:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00162db:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c00162e2:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c00162e7:	e8 28 f6 ff ff       	call   c0015914 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00162ec:	83 c4 1c             	add    esp,0x1c
c00162ef:	eb 90                	jmp    c0016281 <Vm::mainloop2()>

c00162f1 <Vm::initialise8086()>:
c00162f1:	83 ec 0c             	sub    esp,0xc
c00162f4:	68 80 00 00 00       	push   0x80
c00162f9:	6a 00                	push   0x0
c00162fb:	68 bb 62 01 c0       	push   0xc00162bb
c0016300:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0016306:	e8 fd f1 ff ff       	call   c0015508 <Process::createThread(void (*)(void*), void*, int)>
c001630b:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016312:	68 00 01 00 00       	push   0x100
c0016317:	6a 00                	push   0x0
c0016319:	6a 00                	push   0x0
c001631b:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0016320:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016325:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001632b:	e8 52 3d ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016330:	83 c4 2c             	add    esp,0x2c
c0016333:	c3                   	ret    

c0016334 <Vm::finish8086()>:
c0016334:	53                   	push   ebx
c0016335:	83 ec 08             	sub    esp,0x8
c0016338:	fa                   	cli    
c0016339:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001633f:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0016346:	75 15                	jne    c001635d <Vm::finish8086()+0x29>
c0016348:	e8 13 f4 ff ff       	call   c0015760 <schedule()>
c001634d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016352:	48                   	dec    eax
c0016353:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016358:	75 de                	jne    c0016338 <Vm::finish8086()+0x4>
c001635a:	fb                   	sti    
c001635b:	eb db                	jmp    c0016338 <Vm::finish8086()+0x4>
c001635d:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0016364:	83 ec 0c             	sub    esp,0xc
c0016367:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c001636d:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0016373:	e8 70 f8 ff ff       	call   c0015be8 <unblockTask(ThreadControlBlock*)>
c0016378:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001637d:	83 c4 10             	add    esp,0x10
c0016380:	8d 50 ff             	lea    edx,[eax-0x1]
c0016383:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0016389:	85 d2                	test   edx,edx
c001638b:	75 01                	jne    c001638e <Vm::finish8086()+0x5a>
c001638d:	fb                   	sti    
c001638e:	83 c4 08             	add    esp,0x8
c0016391:	89 d8                	mov    eax,ebx
c0016393:	5b                   	pop    ebx
c0016394:	c3                   	ret    

c0016395 <Vm::getOutput8086(unsigned char*)>:
c0016395:	57                   	push   edi
c0016396:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c001639c:	56                   	push   esi
c001639d:	be e0 81 02 c0       	mov    esi,0xc00281e0
c00163a2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00163a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00163a8:	5e                   	pop    esi
c00163a9:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c00163ae:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c00163b8:	5f                   	pop    edi
c00163b9:	c3                   	ret    

c00163ba <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00163ba:	55                   	push   ebp
c00163bb:	57                   	push   edi
c00163bc:	56                   	push   esi
c00163bd:	53                   	push   ebx
c00163be:	83 ec 0c             	sub    esp,0xc
c00163c1:	0f b7 7c 24 28       	movzx  edi,WORD PTR [esp+0x28]
c00163c6:	0f b7 74 24 2c       	movzx  esi,WORD PTR [esp+0x2c]
c00163cb:	0f b7 6c 24 30       	movzx  ebp,WORD PTR [esp+0x30]
c00163d0:	0f b7 5c 24 34       	movzx  ebx,WORD PTR [esp+0x34]
c00163d5:	fa                   	cli    
c00163d6:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00163dc:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c00163e3:	75 15                	jne    c00163fa <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x40>
c00163e5:	e8 76 f3 ff ff       	call   c0015760 <schedule()>
c00163ea:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00163ef:	48                   	dec    eax
c00163f0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00163f5:	75 de                	jne    c00163d5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c00163f7:	fb                   	sti    
c00163f8:	eb db                	jmp    c00163d5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c00163fa:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0016404:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0016409:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001640d:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016411:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016415:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016419:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001641d:	50                   	push   eax
c001641e:	6a 20                	push   0x20
c0016420:	6a 00                	push   0x0
c0016422:	68 e0 81 02 c0       	push   0xc00281e0
c0016427:	e8 54 a1 fe ff       	call   c0000580 <memset>
c001642c:	5a                   	pop    edx
c001642d:	59                   	pop    ecx
c001642e:	57                   	push   edi
c001642f:	56                   	push   esi
c0016430:	e8 2f fe ff ff       	call   c0016264 <Vm::realToLinear(unsigned short, unsigned short)>
c0016435:	83 c4 10             	add    esp,0x10
c0016438:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001643c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016440:	89 c7                	mov    edi,eax
c0016442:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016444:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c001644b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016450:	48                   	dec    eax
c0016451:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016456:	75 01                	jne    c0016459 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x9f>
c0016458:	fb                   	sti    
c0016459:	83 ec 0c             	sub    esp,0xc
c001645c:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0016462:	e8 81 f7 ff ff       	call   c0015be8 <unblockTask(ThreadControlBlock*)>
c0016467:	83 c4 1c             	add    esp,0x1c
c001646a:	b0 01                	mov    al,0x1
c001646c:	5b                   	pop    ebx
c001646d:	5e                   	pop    esi
c001646e:	5f                   	pop    edi
c001646f:	5d                   	pop    ebp
c0016470:	c3                   	ret    

c0016471 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016471:	55                   	push   ebp
c0016472:	57                   	push   edi
c0016473:	56                   	push   esi
c0016474:	53                   	push   ebx
c0016475:	83 ec 2c             	sub    esp,0x2c
c0016478:	0f b7 7c 24 44       	movzx  edi,WORD PTR [esp+0x44]
c001647d:	0f b7 74 24 48       	movzx  esi,WORD PTR [esp+0x48]
c0016482:	0f b7 6c 24 4c       	movzx  ebp,WORD PTR [esp+0x4c]
c0016487:	0f b7 5c 24 50       	movzx  ebx,WORD PTR [esp+0x50]
c001648c:	fa                   	cli    
c001648d:	a0 c5 81 02 c0       	mov    al,ds:0xc00281c5
c0016492:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0016498:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001649c:	84 c0                	test   al,al
c001649e:	75 15                	jne    c00164b5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>
c00164a0:	e8 bb f2 ff ff       	call   c0015760 <schedule()>
c00164a5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00164aa:	48                   	dec    eax
c00164ab:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00164b0:	75 da                	jne    c001648c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c00164b2:	fb                   	sti    
c00164b3:	eb d7                	jmp    c001648c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c00164b5:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c00164bf:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c00164c4:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00164c8:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00164cc:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00164d0:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00164d4:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00164d8:	50                   	push   eax
c00164d9:	6a 20                	push   0x20
c00164db:	6a 00                	push   0x0
c00164dd:	68 e0 81 02 c0       	push   0xc00281e0
c00164e2:	e8 99 a0 fe ff       	call   c0000580 <memset>
c00164e7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00164ee:	e8 09 16 ff ff       	call   c0007afc <malloc>
c00164f3:	83 c4 0c             	add    esp,0xc
c00164f6:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00164fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016500:	89 c3                	mov    ebx,eax
c0016502:	50                   	push   eax
c0016503:	e8 f0 4a ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0016508:	83 c4 10             	add    esp,0x10
c001650b:	85 db                	test   ebx,ebx
c001650d:	75 0a                	jne    c0016519 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa8>
c001650f:	83 ec 0c             	sub    esp,0xc
c0016512:	68 1c 18 02 c0       	push   0xc002181c
c0016517:	eb 3e                	jmp    c0016557 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe6>
c0016519:	55                   	push   ebp
c001651a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001651e:	50                   	push   eax
c001651f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016523:	50                   	push   eax
c0016524:	53                   	push   ebx
c0016525:	e8 32 4e ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c001652a:	83 c4 10             	add    esp,0x10
c001652d:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016532:	74 0a                	je     c001653e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xcd>
c0016534:	83 ec 0c             	sub    esp,0xc
c0016537:	68 30 18 02 c0       	push   0xc0021830
c001653c:	eb 19                	jmp    c0016557 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe6>
c001653e:	51                   	push   ecx
c001653f:	51                   	push   ecx
c0016540:	6a 01                	push   0x1
c0016542:	53                   	push   ebx
c0016543:	e8 6e 4b ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0016548:	83 c4 10             	add    esp,0x10
c001654b:	85 c0                	test   eax,eax
c001654d:	74 27                	je     c0016576 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x105>
c001654f:	83 ec 0c             	sub    esp,0xc
c0016552:	68 49 18 02 c0       	push   0xc0021849
c0016557:	e8 d9 a8 ff ff       	call   c0010e35 <KePanic(char const*)>
c001655c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016561:	83 c4 10             	add    esp,0x10
c0016564:	48                   	dec    eax
c0016565:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001656a:	85 c0                	test   eax,eax
c001656c:	75 01                	jne    c001656f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfe>
c001656e:	fb                   	sti    
c001656f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016574:	eb 52                	jmp    c00165c8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x157>
c0016576:	50                   	push   eax
c0016577:	50                   	push   eax
c0016578:	57                   	push   edi
c0016579:	56                   	push   esi
c001657a:	e8 e5 fc ff ff       	call   c0016264 <Vm::realToLinear(unsigned short, unsigned short)>
c001657f:	5a                   	pop    edx
c0016580:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016582:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016586:	51                   	push   ecx
c0016587:	50                   	push   eax
c0016588:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001658c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016590:	53                   	push   ebx
c0016591:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016594:	83 c4 14             	add    esp,0x14
c0016597:	53                   	push   ebx
c0016598:	e8 77 4b ff ff       	call   c000b114 <File::close()>
c001659d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00165a2:	83 c4 10             	add    esp,0x10
c00165a5:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c00165ac:	48                   	dec    eax
c00165ad:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00165b2:	85 c0                	test   eax,eax
c00165b4:	75 01                	jne    c00165b7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c00165b6:	fb                   	sti    
c00165b7:	83 ec 0c             	sub    esp,0xc
c00165ba:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c00165c0:	e8 23 f6 ff ff       	call   c0015be8 <unblockTask(ThreadControlBlock*)>
c00165c5:	83 c4 10             	add    esp,0x10
c00165c8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00165cc:	83 c4 2c             	add    esp,0x2c
c00165cf:	5b                   	pop    ebx
c00165d0:	5e                   	pop    esi
c00165d1:	5f                   	pop    edi
c00165d2:	5d                   	pop    ebp
c00165d3:	c3                   	ret    

c00165d4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00165d4:	57                   	push   edi
c00165d5:	56                   	push   esi
c00165d6:	53                   	push   ebx
c00165d7:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00165dc:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00165e1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00165e5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00165e9:	83 e8 06             	sub    eax,0x6
c00165ec:	0f b7 c0             	movzx  eax,ax
c00165ef:	50                   	push   eax
c00165f0:	52                   	push   edx
c00165f1:	e8 6e fc ff ff       	call   c0016264 <Vm::realToLinear(unsigned short, unsigned short)>
c00165f6:	5a                   	pop    edx
c00165f7:	5e                   	pop    esi
c00165f8:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00165fb:	8d 56 fa             	lea    edx,[esi-0x6]
c00165fe:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c0016601:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016607:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001660a:	8d 56 02             	lea    edx,[esi+0x2]
c001660d:	66 89 10             	mov    WORD PTR [eax],dx
c0016610:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0016613:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016617:	0f b7 51 40          	movzx  edx,WORD PTR [ecx+0x40]
c001661b:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001661f:	89 d6                	mov    esi,edx
c0016621:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0016627:	81 e6 ff fd 00 00    	and    esi,0xfdff
c001662d:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0016631:	74 08                	je     c001663b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x67>
c0016633:	89 d6                	mov    esi,edx
c0016635:	81 ce 00 02 00 00    	or     esi,0x200
c001663b:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001663f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016644:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016648:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0016650:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0016653:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001665b:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001665e:	5b                   	pop    ebx
c001665f:	5e                   	pop    esi
c0016660:	5f                   	pop    edi
c0016661:	c3                   	ret    

c0016662 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016662:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016667:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001666c:	c1 e0 04             	shl    eax,0x4
c001666f:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016672:	c3                   	ret    

c0016673 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016673:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016678:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001667d:	c1 e0 04             	shl    eax,0x4
c0016680:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016684:	c3                   	ret    

c0016685 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016685:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001668a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001668f:	c1 e0 04             	shl    eax,0x4
c0016692:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016695:	c3                   	ret    

c0016696 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016696:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001669b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00166a0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00166a4:	c1 e0 04             	shl    eax,0x4
c00166a7:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00166aa:	c3                   	ret    

c00166ab <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00166ab:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00166b0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00166b5:	0f b7 4c 24 0c       	movzx  ecx,WORD PTR [esp+0xc]
c00166ba:	c1 e0 04             	shl    eax,0x4
c00166bd:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00166c1:	c3                   	ret    

c00166c2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00166c2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00166c7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00166cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166d0:	c1 e0 04             	shl    eax,0x4
c00166d3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00166d6:	c3                   	ret    

c00166d7 <Vm::faultHandler(regs*)>:
c00166d7:	55                   	push   ebp
c00166d8:	57                   	push   edi
c00166d9:	56                   	push   esi
c00166da:	53                   	push   ebx
c00166db:	83 ec 1c             	sub    esp,0x1c
c00166de:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00166e2:	0f b7 43 38          	movzx  eax,WORD PTR [ebx+0x38]
c00166e6:	0f b7 7b 3c          	movzx  edi,WORD PTR [ebx+0x3c]
c00166ea:	50                   	push   eax
c00166eb:	57                   	push   edi
c00166ec:	e8 73 fb ff ff       	call   c0016264 <Vm::realToLinear(unsigned short, unsigned short)>
c00166f1:	0f b7 6b 48          	movzx  ebp,WORD PTR [ebx+0x48]
c00166f5:	59                   	pop    ecx
c00166f6:	5e                   	pop    esi
c00166f7:	8b 73 44             	mov    esi,DWORD PTR [ebx+0x44]
c00166fa:	89 c1                	mov    ecx,eax
c00166fc:	0f b7 c6             	movzx  eax,si
c00166ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016703:	50                   	push   eax
c0016704:	55                   	push   ebp
c0016705:	e8 5a fb ff ff       	call   c0016264 <Vm::realToLinear(unsigned short, unsigned short)>
c001670a:	5a                   	pop    edx
c001670b:	5a                   	pop    edx
c001670c:	c6 44 24 0a 06       	mov    BYTE PTR [esp+0xa],0x6
c0016711:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016716:	c6 44 24 09 00       	mov    BYTE PTR [esp+0x9],0x0
c001671b:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001671e:	80 fa 9d             	cmp    dl,0x9d
c0016721:	0f 84 2c 02 00 00    	je     c0016953 <Vm::faultHandler(regs*)+0x27c>
c0016727:	0f 87 94 00 00 00    	ja     c00167c1 <Vm::faultHandler(regs*)+0xea>
c001672d:	80 fa 66             	cmp    dl,0x66
c0016730:	0f 84 99 01 00 00    	je     c00168cf <Vm::faultHandler(regs*)+0x1f8>
c0016736:	77 4a                	ja     c0016782 <Vm::faultHandler(regs*)+0xab>
c0016738:	80 fa 36             	cmp    dl,0x36
c001673b:	0f 84 81 01 00 00    	je     c00168c2 <Vm::faultHandler(regs*)+0x1eb>
c0016741:	77 1d                	ja     c0016760 <Vm::faultHandler(regs*)+0x89>
c0016743:	80 fa 26             	cmp    dl,0x26
c0016746:	0f 84 4f 01 00 00    	je     c001689b <Vm::faultHandler(regs*)+0x1c4>
c001674c:	80 fa 2e             	cmp    dl,0x2e
c001674f:	0f 85 ec 05 00 00    	jne    c0016d41 <Vm::faultHandler(regs*)+0x66a>
c0016755:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016758:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001675d:	41                   	inc    ecx
c001675e:	eb bb                	jmp    c001671b <Vm::faultHandler(regs*)+0x44>
c0016760:	80 fa 64             	cmp    dl,0x64
c0016763:	0f 84 3f 01 00 00    	je     c00168a8 <Vm::faultHandler(regs*)+0x1d1>
c0016769:	0f 87 46 01 00 00    	ja     c00168b5 <Vm::faultHandler(regs*)+0x1de>
c001676f:	80 fa 3e             	cmp    dl,0x3e
c0016772:	0f 85 c9 05 00 00    	jne    c0016d41 <Vm::faultHandler(regs*)+0x66a>
c0016778:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001677b:	c6 44 24 0a 01       	mov    BYTE PTR [esp+0xa],0x1
c0016780:	eb db                	jmp    c001675d <Vm::faultHandler(regs*)+0x86>
c0016782:	80 fa 6d             	cmp    dl,0x6d
c0016785:	0f 84 e3 02 00 00    	je     c0016a6e <Vm::faultHandler(regs*)+0x397>
c001678b:	77 17                	ja     c00167a4 <Vm::faultHandler(regs*)+0xcd>
c001678d:	80 fa 67             	cmp    dl,0x67
c0016790:	0f 84 46 01 00 00    	je     c00168dc <Vm::faultHandler(regs*)+0x205>
c0016796:	80 fa 6c             	cmp    dl,0x6c
c0016799:	0f 84 60 02 00 00    	je     c00169ff <Vm::faultHandler(regs*)+0x328>
c001679f:	e9 9d 05 00 00       	jmp    c0016d41 <Vm::faultHandler(regs*)+0x66a>
c00167a4:	80 fa 6f             	cmp    dl,0x6f
c00167a7:	0f 84 f1 03 00 00    	je     c0016b9e <Vm::faultHandler(regs*)+0x4c7>
c00167ad:	0f 82 54 03 00 00    	jb     c0016b07 <Vm::faultHandler(regs*)+0x430>
c00167b3:	80 fa 9c             	cmp    dl,0x9c
c00167b6:	0f 84 2d 01 00 00    	je     c00168e9 <Vm::faultHandler(regs*)+0x212>
c00167bc:	e9 80 05 00 00       	jmp    c0016d41 <Vm::faultHandler(regs*)+0x66a>
c00167c1:	80 fa ec             	cmp    dl,0xec
c00167c4:	0f 84 19 05 00 00    	je     c0016ce3 <Vm::faultHandler(regs*)+0x60c>
c00167ca:	77 79                	ja     c0016845 <Vm::faultHandler(regs*)+0x16e>
c00167cc:	80 fa e4             	cmp    dl,0xe4
c00167cf:	0f 84 98 04 00 00    	je     c0016c6d <Vm::faultHandler(regs*)+0x596>
c00167d5:	77 51                	ja     c0016828 <Vm::faultHandler(regs*)+0x151>
c00167d7:	80 fa cd             	cmp    dl,0xcd
c00167da:	0f 84 d3 01 00 00    	je     c00169b3 <Vm::faultHandler(regs*)+0x2dc>
c00167e0:	80 fa cf             	cmp    dl,0xcf
c00167e3:	0f 85 58 05 00 00    	jne    c0016d41 <Vm::faultHandler(regs*)+0x66a>
c00167e9:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00167ec:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00167ef:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00167f3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00167f6:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00167fa:	81 ca 00 02 02 00    	or     edx,0x20200
c0016800:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016803:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c0016807:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001680d:	c1 e8 09             	shr    eax,0x9
c0016810:	24 01                	and    al,0x1
c0016812:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016815:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016818:	83 c0 06             	add    eax,0x6
c001681b:	25 ff ff 00 00       	and    eax,0xffff
c0016820:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016823:	e9 15 05 00 00       	jmp    c0016d3d <Vm::faultHandler(regs*)+0x666>
c0016828:	80 fa e6             	cmp    dl,0xe6
c001682b:	0f 84 86 04 00 00    	je     c0016cb7 <Vm::faultHandler(regs*)+0x5e0>
c0016831:	0f 82 52 04 00 00    	jb     c0016c89 <Vm::faultHandler(regs*)+0x5b2>
c0016837:	80 fa e7             	cmp    dl,0xe7
c001683a:	0f 84 8e 04 00 00    	je     c0016cce <Vm::faultHandler(regs*)+0x5f7>
c0016840:	e9 fc 04 00 00       	jmp    c0016d41 <Vm::faultHandler(regs*)+0x66a>
c0016845:	80 fa ef             	cmp    dl,0xef
c0016848:	0f 84 d9 04 00 00    	je     c0016d27 <Vm::faultHandler(regs*)+0x650>
c001684e:	77 28                	ja     c0016878 <Vm::faultHandler(regs*)+0x1a1>
c0016850:	80 fa ed             	cmp    dl,0xed
c0016853:	0f 84 a6 04 00 00    	je     c0016cff <Vm::faultHandler(regs*)+0x628>
c0016859:	80 fa ee             	cmp    dl,0xee
c001685c:	0f 85 df 04 00 00    	jne    c0016d41 <Vm::faultHandler(regs*)+0x66a>
c0016862:	50                   	push   eax
c0016863:	50                   	push   eax
c0016864:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016868:	50                   	push   eax
c0016869:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001686d:	50                   	push   eax
c001686e:	e8 b9 f9 ff ff       	call   c001622c <Vm::outbv(unsigned short, unsigned char)>
c0016873:	e9 a7 04 00 00       	jmp    c0016d1f <Vm::faultHandler(regs*)+0x648>
c0016878:	80 fa fa             	cmp    dl,0xfa
c001687b:	0f 84 62 01 00 00    	je     c00169e3 <Vm::faultHandler(regs*)+0x30c>
c0016881:	80 fa fb             	cmp    dl,0xfb
c0016884:	0f 84 67 01 00 00    	je     c00169f1 <Vm::faultHandler(regs*)+0x31a>
c001688a:	80 fa f3             	cmp    dl,0xf3
c001688d:	0f 85 ae 04 00 00    	jne    c0016d41 <Vm::faultHandler(regs*)+0x66a>
c0016893:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016896:	e9 c2 fe ff ff       	jmp    c001675d <Vm::faultHandler(regs*)+0x86>
c001689b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001689e:	c6 44 24 0a 02       	mov    BYTE PTR [esp+0xa],0x2
c00168a3:	e9 b5 fe ff ff       	jmp    c001675d <Vm::faultHandler(regs*)+0x86>
c00168a8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00168ab:	c6 44 24 0a 03       	mov    BYTE PTR [esp+0xa],0x3
c00168b0:	e9 a8 fe ff ff       	jmp    c001675d <Vm::faultHandler(regs*)+0x86>
c00168b5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00168b8:	c6 44 24 0a 04       	mov    BYTE PTR [esp+0xa],0x4
c00168bd:	e9 9b fe ff ff       	jmp    c001675d <Vm::faultHandler(regs*)+0x86>
c00168c2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00168c5:	c6 44 24 0a 05       	mov    BYTE PTR [esp+0xa],0x5
c00168ca:	e9 8e fe ff ff       	jmp    c001675d <Vm::faultHandler(regs*)+0x86>
c00168cf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00168d2:	c6 44 24 09 01       	mov    BYTE PTR [esp+0x9],0x1
c00168d7:	e9 81 fe ff ff       	jmp    c001675d <Vm::faultHandler(regs*)+0x86>
c00168dc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00168df:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00168e4:	e9 74 fe ff ff       	jmp    c001675d <Vm::faultHandler(regs*)+0x86>
c00168e9:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c00168ee:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00168f1:	74 30                	je     c0016923 <Vm::faultHandler(regs*)+0x24c>
c00168f3:	8d 4e fc             	lea    ecx,[esi-0x4]
c00168f6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00168fc:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016902:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016905:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016908:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001690e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016912:	0f 84 22 04 00 00    	je     c0016d3a <Vm::faultHandler(regs*)+0x663>
c0016918:	80 ce 02             	or     dh,0x2
c001691b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001691e:	e9 17 04 00 00       	jmp    c0016d3a <Vm::faultHandler(regs*)+0x663>
c0016923:	8d 4e fe             	lea    ecx,[esi-0x2]
c0016926:	0f b7 d2             	movzx  edx,dx
c0016929:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001692f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016932:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016936:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001693c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016940:	74 05                	je     c0016947 <Vm::faultHandler(regs*)+0x270>
c0016942:	80 ce 02             	or     dh,0x2
c0016945:	eb 03                	jmp    c001694a <Vm::faultHandler(regs*)+0x273>
c0016947:	80 e6 fd             	and    dh,0xfd
c001694a:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001694e:	e9 e7 03 00 00       	jmp    c0016d3a <Vm::faultHandler(regs*)+0x663>
c0016953:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016958:	74 29                	je     c0016983 <Vm::faultHandler(regs*)+0x2ac>
c001695a:	8b 10                	mov    edx,DWORD PTR [eax]
c001695c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016962:	81 ca 00 02 02 00    	or     edx,0x20200
c0016968:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001696b:	8b 00                	mov    eax,DWORD PTR [eax]
c001696d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016973:	c1 e8 09             	shr    eax,0x9
c0016976:	24 01                	and    al,0x1
c0016978:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001697b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001697e:	83 c0 04             	add    eax,0x4
c0016981:	eb 23                	jmp    c00169a6 <Vm::faultHandler(regs*)+0x2cf>
c0016983:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016986:	81 ca 00 02 02 00    	or     edx,0x20200
c001698c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001698f:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016992:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016998:	c1 e8 09             	shr    eax,0x9
c001699b:	24 01                	and    al,0x1
c001699d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00169a0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00169a3:	83 c0 02             	add    eax,0x2
c00169a6:	25 ff ff 00 00       	and    eax,0xffff
c00169ab:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00169ae:	e9 87 03 00 00       	jmp    c0016d3a <Vm::faultHandler(regs*)+0x663>
c00169b3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00169b7:	3c ee                	cmp    al,0xee
c00169b9:	75 10                	jne    c00169cb <Vm::faultHandler(regs*)+0x2f4>
c00169bb:	83 ec 0c             	sub    esp,0xc
c00169be:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00169c1:	e8 05 f9 ff ff       	call   c00162cb <Vm::mainloop3(unsigned long)>
c00169c6:	e9 57 03 00 00       	jmp    c0016d22 <Vm::faultHandler(regs*)+0x64b>
c00169cb:	83 ec 0c             	sub    esp,0xc
c00169ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169d2:	55                   	push   ebp
c00169d3:	51                   	push   ecx
c00169d4:	50                   	push   eax
c00169d5:	53                   	push   ebx
c00169d6:	e8 f9 fb ff ff       	call   c00165d4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00169db:	83 c4 20             	add    esp,0x20
c00169de:	e9 5a 03 00 00       	jmp    c0016d3d <Vm::faultHandler(regs*)+0x666>
c00169e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169e8:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00169ec:	e9 49 03 00 00       	jmp    c0016d3a <Vm::faultHandler(regs*)+0x663>
c00169f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169f6:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00169fa:	e9 3b 03 00 00       	jmp    c0016d3a <Vm::faultHandler(regs*)+0x663>
c00169ff:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0016a04:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016a07:	74 2b                	je     c0016a34 <Vm::faultHandler(regs*)+0x35d>
c0016a09:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016a10:	76 22                	jbe    c0016a34 <Vm::faultHandler(regs*)+0x35d>
c0016a12:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016a16:	50                   	push   eax
c0016a17:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016a1b:	50                   	push   eax
c0016a1c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016a20:	50                   	push   eax
c0016a21:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016a25:	50                   	push   eax
c0016a26:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a2a:	50                   	push   eax
c0016a2b:	6a 6c                	push   0x6c
c0016a2d:	6a 6c                	push   0x6c
c0016a2f:	e9 c6 01 00 00       	jmp    c0016bfa <Vm::faultHandler(regs*)+0x523>
c0016a34:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016a38:	83 ec 0c             	sub    esp,0xc
c0016a3b:	0f b7 f6             	movzx  esi,si
c0016a3e:	50                   	push   eax
c0016a3f:	e8 d3 f7 ff ff       	call   c0016217 <Vm::inbv(unsigned short)>
c0016a44:	83 c4 0c             	add    esp,0xc
c0016a47:	0f b6 c0             	movzx  eax,al
c0016a4a:	50                   	push   eax
c0016a4b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016a4f:	50                   	push   eax
c0016a50:	56                   	push   esi
c0016a51:	e8 40 fc ff ff       	call   c0016696 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016a56:	83 c4 10             	add    esp,0x10
c0016a59:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016a5c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016a60:	74 03                	je     c0016a65 <Vm::faultHandler(regs*)+0x38e>
c0016a62:	48                   	dec    eax
c0016a63:	eb 01                	jmp    c0016a66 <Vm::faultHandler(regs*)+0x38f>
c0016a65:	40                   	inc    eax
c0016a66:	0f b7 c0             	movzx  eax,ax
c0016a69:	e9 91 00 00 00       	jmp    c0016aff <Vm::faultHandler(regs*)+0x428>
c0016a6e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0016a73:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016a76:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016a79:	74 29                	je     c0016aa4 <Vm::faultHandler(regs*)+0x3cd>
c0016a7b:	3d ff ff 00 00       	cmp    eax,0xffff
c0016a80:	76 22                	jbe    c0016aa4 <Vm::faultHandler(regs*)+0x3cd>
c0016a82:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016a86:	50                   	push   eax
c0016a87:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016a8b:	50                   	push   eax
c0016a8c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016a90:	50                   	push   eax
c0016a91:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016a95:	50                   	push   eax
c0016a96:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a9a:	50                   	push   eax
c0016a9b:	6a 6d                	push   0x6d
c0016a9d:	6a 6d                	push   0x6d
c0016a9f:	e9 56 01 00 00       	jmp    c0016bfa <Vm::faultHandler(regs*)+0x523>
c0016aa4:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016aa9:	0f b7 c8             	movzx  ecx,ax
c0016aac:	0f b7 f6             	movzx  esi,si
c0016aaf:	0f b7 53 24          	movzx  edx,WORD PTR [ebx+0x24]
c0016ab3:	74 1e                	je     c0016ad3 <Vm::faultHandler(regs*)+0x3fc>
c0016ab5:	ed                   	in     eax,dx
c0016ab6:	52                   	push   edx
c0016ab7:	50                   	push   eax
c0016ab8:	51                   	push   ecx
c0016ab9:	56                   	push   esi
c0016aba:	e8 03 fc ff ff       	call   c00166c2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016abf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016ac2:	83 c4 10             	add    esp,0x10
c0016ac5:	8d 50 04             	lea    edx,[eax+0x4]
c0016ac8:	83 e8 04             	sub    eax,0x4
c0016acb:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016ad1:	eb 20                	jmp    c0016af3 <Vm::faultHandler(regs*)+0x41c>
c0016ad3:	66 ed                	in     ax,dx
c0016ad5:	55                   	push   ebp
c0016ad6:	0f b7 c0             	movzx  eax,ax
c0016ad9:	50                   	push   eax
c0016ada:	51                   	push   ecx
c0016adb:	56                   	push   esi
c0016adc:	e8 ca fb ff ff       	call   c00166ab <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016ae1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016ae4:	83 c4 10             	add    esp,0x10
c0016ae7:	8d 50 02             	lea    edx,[eax+0x2]
c0016aea:	83 e8 02             	sub    eax,0x2
c0016aed:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016af3:	25 ff ff 00 00       	and    eax,0xffff
c0016af8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016afc:	0f 44 c2             	cmove  eax,edx
c0016aff:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016b02:	e9 33 02 00 00       	jmp    c0016d3a <Vm::faultHandler(regs*)+0x663>
c0016b07:	8a 44 24 0a          	mov    al,BYTE PTR [esp+0xa]
c0016b0b:	fe c8                	dec    al
c0016b0d:	3c 05                	cmp    al,0x5
c0016b0f:	77 23                	ja     c0016b34 <Vm::faultHandler(regs*)+0x45d>
c0016b11:	0f b6 c0             	movzx  eax,al
c0016b14:	ff 24 85 bc 18 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde744]
c0016b1b:	89 ef                	mov    edi,ebp
c0016b1d:	eb 15                	jmp    c0016b34 <Vm::faultHandler(regs*)+0x45d>
c0016b1f:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016b23:	eb 0f                	jmp    c0016b34 <Vm::faultHandler(regs*)+0x45d>
c0016b25:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016b29:	eb 09                	jmp    c0016b34 <Vm::faultHandler(regs*)+0x45d>
c0016b2b:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016b2f:	eb 03                	jmp    c0016b34 <Vm::faultHandler(regs*)+0x45d>
c0016b31:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016b34:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0016b39:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016b3c:	74 29                	je     c0016b67 <Vm::faultHandler(regs*)+0x490>
c0016b3e:	3d ff ff 00 00       	cmp    eax,0xffff
c0016b43:	76 22                	jbe    c0016b67 <Vm::faultHandler(regs*)+0x490>
c0016b45:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016b49:	50                   	push   eax
c0016b4a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016b4e:	50                   	push   eax
c0016b4f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016b53:	50                   	push   eax
c0016b54:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016b58:	50                   	push   eax
c0016b59:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016b5d:	50                   	push   eax
c0016b5e:	6a 6e                	push   0x6e
c0016b60:	6a 6e                	push   0x6e
c0016b62:	e9 93 00 00 00       	jmp    c0016bfa <Vm::faultHandler(regs*)+0x523>
c0016b67:	51                   	push   ecx
c0016b68:	0f b7 c0             	movzx  eax,ax
c0016b6b:	51                   	push   ecx
c0016b6c:	50                   	push   eax
c0016b6d:	57                   	push   edi
c0016b6e:	e8 ef fa ff ff       	call   c0016662 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016b73:	5e                   	pop    esi
c0016b74:	5f                   	pop    edi
c0016b75:	0f b6 c0             	movzx  eax,al
c0016b78:	50                   	push   eax
c0016b79:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016b7d:	50                   	push   eax
c0016b7e:	e8 a9 f6 ff ff       	call   c001622c <Vm::outbv(unsigned short, unsigned char)>
c0016b83:	83 c4 10             	add    esp,0x10
c0016b86:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016b89:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016b8d:	74 03                	je     c0016b92 <Vm::faultHandler(regs*)+0x4bb>
c0016b8f:	48                   	dec    eax
c0016b90:	eb 01                	jmp    c0016b93 <Vm::faultHandler(regs*)+0x4bc>
c0016b92:	40                   	inc    eax
c0016b93:	0f b7 c0             	movzx  eax,ax
c0016b96:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016b99:	e9 9c 01 00 00       	jmp    c0016d3a <Vm::faultHandler(regs*)+0x663>
c0016b9e:	8a 44 24 0a          	mov    al,BYTE PTR [esp+0xa]
c0016ba2:	fe c8                	dec    al
c0016ba4:	3c 05                	cmp    al,0x5
c0016ba6:	77 23                	ja     c0016bcb <Vm::faultHandler(regs*)+0x4f4>
c0016ba8:	0f b6 c0             	movzx  eax,al
c0016bab:	ff 24 85 d4 18 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde72c]
c0016bb2:	89 ef                	mov    edi,ebp
c0016bb4:	eb 15                	jmp    c0016bcb <Vm::faultHandler(regs*)+0x4f4>
c0016bb6:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016bba:	eb 0f                	jmp    c0016bcb <Vm::faultHandler(regs*)+0x4f4>
c0016bbc:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016bc0:	eb 09                	jmp    c0016bcb <Vm::faultHandler(regs*)+0x4f4>
c0016bc2:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016bc6:	eb 03                	jmp    c0016bcb <Vm::faultHandler(regs*)+0x4f4>
c0016bc8:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016bcb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0016bd0:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016bd3:	74 37                	je     c0016c0c <Vm::faultHandler(regs*)+0x535>
c0016bd5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016bdb:	76 2f                	jbe    c0016c0c <Vm::faultHandler(regs*)+0x535>
c0016bdd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016be1:	50                   	push   eax
c0016be2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016be6:	50                   	push   eax
c0016be7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016beb:	50                   	push   eax
c0016bec:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016bf0:	50                   	push   eax
c0016bf1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016bf5:	50                   	push   eax
c0016bf6:	6a 6f                	push   0x6f
c0016bf8:	6a 6f                	push   0x6f
c0016bfa:	68 62 18 02 c0       	push   0xc0021862
c0016bff:	e8 72 3e ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016c04:	83 c4 20             	add    esp,0x20
c0016c07:	e9 89 01 00 00       	jmp    c0016d95 <Vm::faultHandler(regs*)+0x6be>
c0016c0c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016c0f:	0f b7 c6             	movzx  eax,si
c0016c12:	0f b7 6b 24          	movzx  ebp,WORD PTR [ebx+0x24]
c0016c16:	81 e1 00 04 00 00    	and    ecx,0x400
c0016c1c:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016c21:	74 1c                	je     c0016c3f <Vm::faultHandler(regs*)+0x568>
c0016c23:	52                   	push   edx
c0016c24:	52                   	push   edx
c0016c25:	50                   	push   eax
c0016c26:	57                   	push   edi
c0016c27:	e8 59 fa ff ff       	call   c0016685 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016c2c:	83 c4 10             	add    esp,0x10
c0016c2f:	89 ea                	mov    edx,ebp
c0016c31:	ef                   	out    dx,eax
c0016c32:	8d 46 04             	lea    eax,[esi+0x4]
c0016c35:	83 ee 04             	sub    esi,0x4
c0016c38:	25 ff ff 00 00       	and    eax,0xffff
c0016c3d:	eb 1b                	jmp    c0016c5a <Vm::faultHandler(regs*)+0x583>
c0016c3f:	52                   	push   edx
c0016c40:	52                   	push   edx
c0016c41:	50                   	push   eax
c0016c42:	57                   	push   edi
c0016c43:	e8 2b fa ff ff       	call   c0016673 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016c48:	83 c4 10             	add    esp,0x10
c0016c4b:	89 ea                	mov    edx,ebp
c0016c4d:	66 ef                	out    dx,ax
c0016c4f:	8d 46 02             	lea    eax,[esi+0x2]
c0016c52:	83 ee 02             	sub    esi,0x2
c0016c55:	25 ff ff 00 00       	and    eax,0xffff
c0016c5a:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016c60:	85 c9                	test   ecx,ecx
c0016c62:	0f 44 f0             	cmove  esi,eax
c0016c65:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016c68:	e9 cd 00 00 00       	jmp    c0016d3a <Vm::faultHandler(regs*)+0x663>
c0016c6d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016c74:	83 ec 0c             	sub    esp,0xc
c0016c77:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016c7b:	50                   	push   eax
c0016c7c:	e8 96 f5 ff ff       	call   c0016217 <Vm::inbv(unsigned short)>
c0016c81:	0f b6 c0             	movzx  eax,al
c0016c84:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016c87:	eb 3f                	jmp    c0016cc8 <Vm::faultHandler(regs*)+0x5f1>
c0016c89:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016c8e:	74 07                	je     c0016c97 <Vm::faultHandler(regs*)+0x5c0>
c0016c90:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016c94:	ed                   	in     eax,dx
c0016c95:	eb 14                	jmp    c0016cab <Vm::faultHandler(regs*)+0x5d4>
c0016c97:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016c9a:	66 31 f6             	xor    si,si
c0016c9d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016ca0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016ca4:	66 ed                	in     ax,dx
c0016ca6:	0f b7 c0             	movzx  eax,ax
c0016ca9:	09 f0                	or     eax,esi
c0016cab:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016cae:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016cb2:	e9 86 00 00 00       	jmp    c0016d3d <Vm::faultHandler(regs*)+0x666>
c0016cb7:	52                   	push   edx
c0016cb8:	52                   	push   edx
c0016cb9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016cbd:	50                   	push   eax
c0016cbe:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016cc2:	50                   	push   eax
c0016cc3:	e8 64 f5 ff ff       	call   c001622c <Vm::outbv(unsigned short, unsigned char)>
c0016cc8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016ccc:	eb 54                	jmp    c0016d22 <Vm::faultHandler(regs*)+0x64b>
c0016cce:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016cd3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016cd6:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016cda:	74 03                	je     c0016cdf <Vm::faultHandler(regs*)+0x608>
c0016cdc:	ef                   	out    dx,eax
c0016cdd:	eb cf                	jmp    c0016cae <Vm::faultHandler(regs*)+0x5d7>
c0016cdf:	66 ef                	out    dx,ax
c0016ce1:	eb cb                	jmp    c0016cae <Vm::faultHandler(regs*)+0x5d7>
c0016ce3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016ce7:	83 ec 0c             	sub    esp,0xc
c0016cea:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016cf1:	50                   	push   eax
c0016cf2:	e8 20 f5 ff ff       	call   c0016217 <Vm::inbv(unsigned short)>
c0016cf7:	0f b6 c0             	movzx  eax,al
c0016cfa:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016cfd:	eb 20                	jmp    c0016d1f <Vm::faultHandler(regs*)+0x648>
c0016cff:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016d04:	0f b7 53 24          	movzx  edx,WORD PTR [ebx+0x24]
c0016d08:	74 03                	je     c0016d0d <Vm::faultHandler(regs*)+0x636>
c0016d0a:	ed                   	in     eax,dx
c0016d0b:	eb 0d                	jmp    c0016d1a <Vm::faultHandler(regs*)+0x643>
c0016d0d:	66 ed                	in     ax,dx
c0016d0f:	0f b7 d0             	movzx  edx,ax
c0016d12:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016d15:	66 31 c0             	xor    ax,ax
c0016d18:	09 d0                	or     eax,edx
c0016d1a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016d1d:	eb 1b                	jmp    c0016d3a <Vm::faultHandler(regs*)+0x663>
c0016d1f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d22:	83 c4 10             	add    esp,0x10
c0016d25:	eb 16                	jmp    c0016d3d <Vm::faultHandler(regs*)+0x666>
c0016d27:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016d2c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016d2f:	0f b7 53 24          	movzx  edx,WORD PTR [ebx+0x24]
c0016d33:	74 03                	je     c0016d38 <Vm::faultHandler(regs*)+0x661>
c0016d35:	ef                   	out    dx,eax
c0016d36:	eb 02                	jmp    c0016d3a <Vm::faultHandler(regs*)+0x663>
c0016d38:	66 ef                	out    dx,ax
c0016d3a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d3d:	b0 01                	mov    al,0x1
c0016d3f:	eb 56                	jmp    c0016d97 <Vm::faultHandler(regs*)+0x6c0>
c0016d41:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016d45:	50                   	push   eax
c0016d46:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016d4a:	50                   	push   eax
c0016d4b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016d4f:	50                   	push   eax
c0016d50:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016d54:	50                   	push   eax
c0016d55:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016d59:	50                   	push   eax
c0016d5a:	52                   	push   edx
c0016d5b:	52                   	push   edx
c0016d5c:	68 8f 18 02 c0       	push   0xc002188f
c0016d61:	e8 10 3d ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016d66:	83 c4 20             	add    esp,0x20
c0016d69:	83 ec 0c             	sub    esp,0xc
c0016d6c:	6a 60                	push   0x60
c0016d6e:	e8 a4 f4 ff ff       	call   c0016217 <Vm::inbv(unsigned short)>
c0016d73:	83 c4 10             	add    esp,0x10
c0016d76:	3c 1c                	cmp    al,0x1c
c0016d78:	74 04                	je     c0016d7e <Vm::faultHandler(regs*)+0x6a7>
c0016d7a:	3c 5a                	cmp    al,0x5a
c0016d7c:	75 eb                	jne    c0016d69 <Vm::faultHandler(regs*)+0x692>
c0016d7e:	3c 1c                	cmp    al,0x1c
c0016d80:	74 04                	je     c0016d86 <Vm::faultHandler(regs*)+0x6af>
c0016d82:	3c 5a                	cmp    al,0x5a
c0016d84:	75 0f                	jne    c0016d95 <Vm::faultHandler(regs*)+0x6be>
c0016d86:	83 ec 0c             	sub    esp,0xc
c0016d89:	6a 60                	push   0x60
c0016d8b:	e8 87 f4 ff ff       	call   c0016217 <Vm::inbv(unsigned short)>
c0016d90:	83 c4 10             	add    esp,0x10
c0016d93:	eb e9                	jmp    c0016d7e <Vm::faultHandler(regs*)+0x6a7>
c0016d95:	31 c0                	xor    eax,eax
c0016d97:	83 c4 1c             	add    esp,0x1c
c0016d9a:	5b                   	pop    ebx
c0016d9b:	5e                   	pop    esi
c0016d9c:	5f                   	pop    edi
c0016d9d:	5d                   	pop    ebp
c0016d9e:	c3                   	ret    

c0016d9f <noCopro(unsigned long)>:
c0016d9f:	c3                   	ret    

c0016da0 <nmiHandler(regs*, void*)>:
c0016da0:	83 ec 1c             	sub    esp,0x1c
c0016da3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016da8:	89 04 24             	mov    DWORD PTR [esp],eax
c0016dab:	e8 48 05 ff ff       	call   c00072f8 <Computer::handleNMI()>
c0016db0:	90                   	nop
c0016db1:	83 c4 1c             	add    esp,0x1c
c0016db4:	c3                   	ret    

c0016db5 <doubleFault(regs*, void*)>:
c0016db5:	55                   	push   ebp
c0016db6:	89 e5                	mov    ebp,esp
c0016db8:	83 ec 18             	sub    esp,0x18
c0016dbb:	c7 04 24 ec 18 02 c0 	mov    DWORD PTR [esp],0xc00218ec
c0016dc2:	e8 6e a0 ff ff       	call   c0010e35 <KePanic(char const*)>
c0016dc7:	90                   	nop
c0016dc8:	c9                   	leave  
c0016dc9:	c3                   	ret    

c0016dca <displayDebugInfo(regs*)>:
c0016dca:	83 ec 2c             	sub    esp,0x2c
c0016dcd:	0f 20 c0             	mov    eax,cr0
c0016dd0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016dd4:	0f 20 d0             	mov    eax,cr2
c0016dd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ddb:	0f 20 d8             	mov    eax,cr3
c0016dde:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016de2:	0f 20 e0             	mov    eax,cr4
c0016de5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016de9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ded:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016df0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016df4:	c7 04 24 08 19 02 c0 	mov    DWORD PTR [esp],0xc0021908
c0016dfb:	e8 76 3c ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016e00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e04:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016e07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e0b:	c7 04 24 f9 18 02 c0 	mov    DWORD PTR [esp],0xc00218f9
c0016e12:	e8 5f 3c ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016e17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e1b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016e1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e22:	c7 04 24 04 19 02 c0 	mov    DWORD PTR [esp],0xc0021904
c0016e29:	e8 48 3c ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016e2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e32:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016e35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e39:	c7 04 24 13 19 02 c0 	mov    DWORD PTR [esp],0xc0021913
c0016e40:	e8 31 3c ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016e45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e49:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016e4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e50:	c7 04 24 1e 19 02 c0 	mov    DWORD PTR [esp],0xc002191e
c0016e57:	e8 1a 3c ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016e5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016e60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e64:	c7 04 24 29 19 02 c0 	mov    DWORD PTR [esp],0xc0021929
c0016e6b:	e8 06 3c ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016e70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016e74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e78:	c7 04 24 34 19 02 c0 	mov    DWORD PTR [esp],0xc0021934
c0016e7f:	e8 f2 3b ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016e84:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016e89:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e92:	e8 e6 18 ff ff       	call   c000877d <setActiveTerminal(VgaText*)>
c0016e97:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016e9c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ea2:	c7 44 24 04 3f 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc002193f
c0016eaa:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ead:	e8 10 1c ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0016eb2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016eb7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ebd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016ec1:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0016ec4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016ec8:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ecb:	e8 ac 1b ff ff       	call   c0008a7c <VgaText::putx(unsigned int)>
c0016ed0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ed5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016edb:	c7 44 24 04 4d 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc002194d
c0016ee3:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ee6:	e8 d7 1b ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0016eeb:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ef0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ef6:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0016efb:	8b 12                	mov    edx,DWORD PTR [edx]
c0016efd:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016f00:	83 c2 0c             	add    edx,0xc
c0016f03:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016f07:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f0a:	e8 b3 1b ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0016f0f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016f14:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f1a:	c7 44 24 04 56 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021956
c0016f22:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f25:	e8 98 1b ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0016f2a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016f2f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f35:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016f39:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0016f3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016f40:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f43:	e8 34 1b ff ff       	call   c0008a7c <VgaText::putx(unsigned int)>
c0016f48:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016f4d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f53:	c7 44 24 04 5e 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc002195e
c0016f5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f5e:	e8 5f 1b ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0016f63:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016f68:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f6e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016f72:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016f75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016f79:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f7c:	e8 fb 1a ff ff       	call   c0008a7c <VgaText::putx(unsigned int)>
c0016f81:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016f86:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f8c:	c7 44 24 04 66 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021966
c0016f94:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f97:	e8 26 1b ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0016f9c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016fa1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016fa7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016fab:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016fae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016fb2:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fb5:	e8 c2 1a ff ff       	call   c0008a7c <VgaText::putx(unsigned int)>
c0016fba:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016fbf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016fc5:	c7 44 24 04 6e 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc002196e
c0016fcd:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fd0:	e8 ed 1a ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0016fd5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016fda:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016fe0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016fe4:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016fe7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016feb:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fee:	e8 89 1a ff ff       	call   c0008a7c <VgaText::putx(unsigned int)>
c0016ff3:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ff8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ffe:	c7 44 24 04 76 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021976
c0017006:	89 04 24             	mov    DWORD PTR [esp],eax
c0017009:	e8 b4 1a ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c001700e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0017013:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017019:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001701d:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017020:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0017024:	89 04 24             	mov    DWORD PTR [esp],eax
c0017027:	e8 50 1a ff ff       	call   c0008a7c <VgaText::putx(unsigned int)>
c001702c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0017031:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017037:	c7 44 24 04 7e 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc002197e
c001703f:	89 04 24             	mov    DWORD PTR [esp],eax
c0017042:	e8 7b 1a ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0017047:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001704c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017052:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017056:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017059:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001705d:	89 04 24             	mov    DWORD PTR [esp],eax
c0017060:	e8 17 1a ff ff       	call   c0008a7c <VgaText::putx(unsigned int)>
c0017065:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001706a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017070:	c7 44 24 04 86 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021986
c0017078:	89 04 24             	mov    DWORD PTR [esp],eax
c001707b:	e8 42 1a ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0017080:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0017085:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001708b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001708f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0017093:	89 04 24             	mov    DWORD PTR [esp],eax
c0017096:	e8 e1 19 ff ff       	call   c0008a7c <VgaText::putx(unsigned int)>
c001709b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00170a0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00170a6:	c7 44 24 04 8f 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc002198f
c00170ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00170b1:	e8 0c 1a ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c00170b6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00170bb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00170c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00170c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00170c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00170cc:	e8 ab 19 ff ff       	call   c0008a7c <VgaText::putx(unsigned int)>
c00170d1:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00170d6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00170dc:	c7 44 24 04 97 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021997
c00170e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00170e7:	e8 d6 19 ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c00170ec:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00170f1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00170f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00170fb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00170ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0017102:	e8 75 19 ff ff       	call   c0008a7c <VgaText::putx(unsigned int)>
c0017107:	fa                   	cli    
c0017108:	f4                   	hlt    
c0017109:	eb fe                	jmp    c0017109 <displayDebugInfo(regs*)+0x33f>

c001710b <HalSystemIdle()>:
c001710b:	83 ec 2c             	sub    esp,0x2c
c001710e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017113:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017119:	0f b6 80 8e 11 00 00 	movzx  eax,BYTE PTR [eax+0x118e]
c0017120:	24 04                	and    al,0x4
c0017122:	0f 95 c0             	setne  al
c0017125:	84 c0                	test   al,al
c0017127:	74 52                	je     c001717b <HalSystemIdle()+0x70>
c0017129:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001712e:	c7 44 24 04 e1 00 00 00 	mov    DWORD PTR [esp+0x4],0xe1
c0017136:	89 04 24             	mov    DWORD PTR [esp],eax
c0017139:	e8 82 ff fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001713e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017142:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0017146:	8b 0d b8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024eb8
c001714c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017150:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017154:	83 e0 02             	and    eax,0x2
c0017157:	ba 00 00 00 00       	mov    edx,0x0
c001715c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017160:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017164:	c7 44 24 04 e1 00 00 00 	mov    DWORD PTR [esp+0x4],0xe1
c001716c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001716f:	e8 74 ff fe ff       	call   c00070e8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0017174:	e8 1b 90 fe ff       	call   c0000194 <doTPAUSE>
c0017179:	eb 01                	jmp    c001717c <HalSystemIdle()+0x71>
c001717b:	f4                   	hlt    
c001717c:	90                   	nop
c001717d:	83 c4 2c             	add    esp,0x2c
c0017180:	c3                   	ret    

c0017181 <displayProgramFault(char const*)>:
c0017181:	83 ec 1c             	sub    esp,0x1c
c0017184:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017188:	89 04 24             	mov    DWORD PTR [esp],eax
c001718b:	e8 e6 38 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0017190:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017195:	8b 00                	mov    eax,DWORD PTR [eax]
c0017197:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001719a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00171a0:	85 c0                	test   eax,eax
c00171a2:	74 30                	je     c00171d4 <displayProgramFault(char const*)+0x53>
c00171a4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00171a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00171ab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00171ae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00171b4:	c7 44 24 0c 04 00 00 00 	mov    DWORD PTR [esp+0xc],0x4
c00171bc:	c7 44 24 08 0f 00 00 00 	mov    DWORD PTR [esp+0x8],0xf
c00171c4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00171c8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00171cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00171cf:	e8 60 19 ff ff       	call   c0008b34 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00171d4:	90                   	nop
c00171d5:	83 c4 1c             	add    esp,0x1c
c00171d8:	c3                   	ret    

c00171d9 <gpFault(regs*, void*)>:
c00171d9:	83 ec 2c             	sub    esp,0x2c
c00171dc:	c7 05 10 82 02 c0 d7 66 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc00166d7
c00171e6:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c00171eb:	85 c0                	test   eax,eax
c00171ed:	74 19                	je     c0017208 <gpFault(regs*, void*)+0x2f>
c00171ef:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c00171f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00171f8:	89 14 24             	mov    DWORD PTR [esp],edx
c00171fb:	ff d0                	call   eax
c00171fd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017201:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017206:	75 26                	jne    c001722e <gpFault(regs*, void*)+0x55>
c0017208:	c7 04 24 9f 19 02 c0 	mov    DWORD PTR [esp],0xc002199f
c001720f:	e8 6d ff ff ff       	call   c0017181 <displayProgramFault(char const*)>
c0017214:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017218:	89 04 24             	mov    DWORD PTR [esp],eax
c001721b:	e8 aa fb ff ff       	call   c0016dca <displayDebugInfo(regs*)>
c0017220:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017227:	e8 b0 ee ff ff       	call   c00160dc <Thr::terminateFromIRQ(int)>
c001722c:	eb 01                	jmp    c001722f <gpFault(regs*, void*)+0x56>
c001722e:	90                   	nop
c001722f:	83 c4 2c             	add    esp,0x2c
c0017232:	c3                   	ret    

c0017233 <pgFault(regs*, void*)>:
c0017233:	83 ec 2c             	sub    esp,0x2c
c0017236:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001723a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001723d:	0f 20 d0             	mov    eax,cr2
c0017240:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017244:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017248:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001724c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017250:	c7 04 24 7c 1a 02 c0 	mov    DWORD PTR [esp],0xc0021a7c
c0017257:	e8 1a 38 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001725c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017261:	8b 00                	mov    eax,DWORD PTR [eax]
c0017263:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017266:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001726c:	0f 20 d2             	mov    edx,cr2
c001726f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0017273:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017277:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001727b:	89 04 24             	mov    DWORD PTR [esp],eax
c001727e:	e8 47 33 ff ff       	call   c000a5ca <VAS::tryLoadBackOffDisk(unsigned long)>
c0017283:	84 c0                	test   al,al
c0017285:	75 26                	jne    c00172ad <pgFault(regs*, void*)+0x7a>
c0017287:	c7 04 24 b8 19 02 c0 	mov    DWORD PTR [esp],0xc00219b8
c001728e:	e8 ee fe ff ff       	call   c0017181 <displayProgramFault(char const*)>
c0017293:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017297:	89 04 24             	mov    DWORD PTR [esp],eax
c001729a:	e8 2b fb ff ff       	call   c0016dca <displayDebugInfo(regs*)>
c001729f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00172a6:	e8 31 ee ff ff       	call   c00160dc <Thr::terminateFromIRQ(int)>
c00172ab:	eb 01                	jmp    c00172ae <pgFault(regs*, void*)+0x7b>
c00172ad:	90                   	nop
c00172ae:	83 c4 2c             	add    esp,0x2c
c00172b1:	c3                   	ret    

c00172b2 <otherISRHandler(regs*, void*)>:
c00172b2:	83 ec 1c             	sub    esp,0x1c
c00172b5:	c7 04 24 a4 1a 02 c0 	mov    DWORD PTR [esp],0xc0021aa4
c00172bc:	e8 c0 fe ff ff       	call   c0017181 <displayProgramFault(char const*)>
c00172c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00172c8:	e8 fd fa ff ff       	call   c0016dca <displayDebugInfo(regs*)>
c00172cd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00172d4:	e8 03 ee ff ff       	call   c00160dc <Thr::terminateFromIRQ(int)>
c00172d9:	90                   	nop
c00172da:	83 c4 1c             	add    esp,0x1c
c00172dd:	c3                   	ret    

c00172de <opcodeFault(regs*, void*)>:
c00172de:	55                   	push   ebp
c00172df:	89 e5                	mov    ebp,esp
c00172e1:	83 ec 18             	sub    esp,0x18
c00172e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00172e7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00172ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00172ee:	c7 04 24 c3 19 02 c0 	mov    DWORD PTR [esp],0xc00219c3
c00172f5:	e8 7c 37 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00172fa:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00172ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017305:	0f b6 80 90 11 00 00 	movzx  eax,BYTE PTR [eax+0x1190]
c001730c:	84 c0                	test   al,al
c001730e:	74 1d                	je     c001732d <opcodeFault(regs*, void*)+0x4f>
c0017310:	c7 04 24 cc 1a 02 c0 	mov    DWORD PTR [esp],0xc0021acc
c0017317:	e8 5a 37 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001731c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001731f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017322:	8d 50 19             	lea    edx,[eax+0x19]
c0017325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017328:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001732b:	eb 23                	jmp    c0017350 <opcodeFault(regs*, void*)+0x72>
c001732d:	c7 04 24 d1 19 02 c0 	mov    DWORD PTR [esp],0xc00219d1
c0017334:	e8 48 fe ff ff       	call   c0017181 <displayProgramFault(char const*)>
c0017339:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001733c:	89 04 24             	mov    DWORD PTR [esp],eax
c001733f:	e8 86 fa ff ff       	call   c0016dca <displayDebugInfo(regs*)>
c0017344:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001734b:	e8 8c ed ff ff       	call   c00160dc <Thr::terminateFromIRQ(int)>
c0017350:	c9                   	leave  
c0017351:	c3                   	ret    

c0017352 <i386SaveCoprocessor(void*)>:
c0017352:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017356:	83 c0 3f             	add    eax,0x3f
c0017359:	83 e0 c0             	and    eax,0xffffffc0
c001735c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017360:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0017366 <i386LoadCoprocessor(void*)>:
c0017366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001736a:	83 c0 3f             	add    eax,0x3f
c001736d:	83 e0 c0             	and    eax,0xffffffc0
c0017370:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017374:	ff 25 08 82 02 c0    	jmp    DWORD PTR ds:0xc0028208

c001737a <x87EmulHandler(regs*, void*)>:
c001737a:	53                   	push   ebx
c001737b:	83 ec 08             	sub    esp,0x8
c001737e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017383:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017387:	74 10                	je     c0017399 <x87EmulHandler(regs*, void*)+0x1f>
c0017389:	83 ec 0c             	sub    esp,0xc
c001738c:	68 de 19 02 c0       	push   0xc00219de
c0017391:	e8 9f 9a ff ff       	call   c0010e35 <KePanic(char const*)>
c0017396:	83 c4 10             	add    esp,0x10
c0017399:	0f 20 c0             	mov    eax,cr0
c001739c:	a8 08                	test   al,0x8
c001739e:	74 59                	je     c00173f9 <x87EmulHandler(regs*, void*)+0x7f>
c00173a0:	0f 06                	clts   
c00173a2:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c00173a7:	85 c0                	test   eax,eax
c00173a9:	74 0e                	je     c00173b9 <x87EmulHandler(regs*, void*)+0x3f>
c00173ab:	83 ec 0c             	sub    esp,0xc
c00173ae:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00173b1:	e8 9c ff ff ff       	call   c0017352 <i386SaveCoprocessor(void*)>
c00173b6:	83 c4 10             	add    esp,0x10
c00173b9:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00173bf:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00173c3:	75 12                	jne    c00173d7 <x87EmulHandler(regs*, void*)+0x5d>
c00173c5:	83 ec 0c             	sub    esp,0xc
c00173c8:	68 40 02 00 00       	push   0x240
c00173cd:	e8 2a 07 ff ff       	call   c0007afc <malloc>
c00173d2:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00173d5:	eb 10                	jmp    c00173e7 <x87EmulHandler(regs*, void*)+0x6d>
c00173d7:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c00173dc:	83 ec 0c             	sub    esp,0xc
c00173df:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00173e2:	e8 7f ff ff ff       	call   c0017366 <i386LoadCoprocessor(void*)>
c00173e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173ec:	83 c4 10             	add    esp,0x10
c00173ef:	a3 04 82 02 c0       	mov    ds:0xc0028204,eax
c00173f4:	83 c4 08             	add    esp,0x8
c00173f7:	5b                   	pop    ebx
c00173f8:	c3                   	ret    
c00173f9:	83 ec 0c             	sub    esp,0xc
c00173fc:	68 f2 19 02 c0       	push   0xc00219f2
c0017401:	e8 70 36 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0017406:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001740e:	83 c4 18             	add    esp,0x18
c0017411:	5b                   	pop    ebx
c0017412:	e9 c5 ec ff ff       	jmp    c00160dc <Thr::terminateFromIRQ(int)>

c0017417 <HalInitialiseCoprocessor()>:
c0017417:	83 ec 10             	sub    esp,0x10
c001741a:	6a 00                	push   0x0
c001741c:	68 7a 73 01 c0       	push   0xc001737a
c0017421:	6a 07                	push   0x7
c0017423:	c7 05 04 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028204,0x0
c001742d:	e8 d9 55 ff ff       	call   c000ca0b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017432:	e8 09 6f 00 00       	call   c001e340 <avxDetect>
c0017437:	83 c4 10             	add    esp,0x10
c001743a:	85 c0                	test   eax,eax
c001743c:	74 1c                	je     c001745a <HalInitialiseCoprocessor()+0x43>
c001743e:	c7 05 0c 82 02 c0 6a e3 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e36a
c0017448:	c7 05 08 82 02 c0 7b e3 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e37b
c0017452:	83 c4 0c             	add    esp,0xc
c0017455:	e9 32 6f 00 00       	jmp    c001e38c <avxInit>
c001745a:	e8 71 72 00 00       	call   c001e6d0 <absolutelyNoChanceInHell>
c001745f:	85 c0                	test   eax,eax
c0017461:	74 1c                	je     c001747f <HalInitialiseCoprocessor()+0x68>
c0017463:	c7 05 0c 82 02 c0 e8 e6 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e6e8
c001746d:	c7 05 08 82 02 c0 f0 e6 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e6f0
c0017477:	83 c4 0c             	add    esp,0xc
c001747a:	e9 79 72 00 00       	jmp    c001e6f8 <sseInit>
c001747f:	e8 92 72 00 00       	call   c001e716 <x87Detect>
c0017484:	85 c0                	test   eax,eax
c0017486:	74 1c                	je     c00174a4 <HalInitialiseCoprocessor()+0x8d>
c0017488:	c7 05 0c 82 02 c0 31 e7 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e731
c0017492:	c7 05 08 82 02 c0 38 e7 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e738
c001749c:	83 c4 0c             	add    esp,0xc
c001749f:	e9 9b 72 00 00       	jmp    c001e73f <x87Init>
c00174a4:	c7 05 0c 82 02 c0 9f 6d 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc0016d9f
c00174ae:	c7 05 08 82 02 c0 9f 6d 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc0016d9f
c00174b8:	0f 20 c0             	mov    eax,cr0
c00174bb:	83 c8 04             	or     eax,0x4
c00174be:	0f 22 c0             	mov    cr0,eax
c00174c1:	83 c4 0c             	add    esp,0xc
c00174c4:	c3                   	ret    

c00174c5 <HalPanic(char const*)>:
c00174c5:	53                   	push   ebx
c00174c6:	83 ec 10             	sub    esp,0x10
c00174c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00174cd:	fa                   	cli    
c00174ce:	53                   	push   ebx
c00174cf:	68 08 1a 02 c0       	push   0xc0021a08
c00174d4:	e8 9d 35 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00174d9:	83 c4 0c             	add    esp,0xc
c00174dc:	6a 01                	push   0x1
c00174de:	6a 0f                	push   0xf
c00174e0:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00174e6:	e8 ed 10 ff ff       	call   c00085d8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00174eb:	58                   	pop    eax
c00174ec:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00174f2:	e8 d1 12 ff ff       	call   c00087c8 <VgaText::clearScreen()>
c00174f7:	5a                   	pop    edx
c00174f8:	59                   	pop    ecx
c00174f9:	68 e4 00 02 c0       	push   0xc00200e4
c00174fe:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017504:	e8 07 11 ff ff       	call   c0008610 <VgaText::setTitle(char*)>
c0017509:	83 c4 0c             	add    esp,0xc
c001750c:	6a 01                	push   0x1
c001750e:	6a 0f                	push   0xf
c0017510:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017516:	e8 bd 10 ff ff       	call   c00085d8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001751b:	58                   	pop    eax
c001751c:	5a                   	pop    edx
c001751d:	68 21 1a 02 c0       	push   0xc0021a21
c0017522:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017528:	e8 95 15 ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c001752d:	83 c4 0c             	add    esp,0xc
c0017530:	6a 0f                	push   0xf
c0017532:	6a 01                	push   0x1
c0017534:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001753a:	e8 99 10 ff ff       	call   c00085d8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001753f:	59                   	pop    ecx
c0017540:	58                   	pop    eax
c0017541:	68 2a 1a 02 c0       	push   0xc0021a2a
c0017546:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001754c:	e8 71 15 ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0017551:	83 c4 0c             	add    esp,0xc
c0017554:	6a 01                	push   0x1
c0017556:	6a 0f                	push   0xf
c0017558:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001755e:	e8 75 10 ff ff       	call   c00085d8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017563:	58                   	pop    eax
c0017564:	5a                   	pop    edx
c0017565:	68 6e 1a 02 c0       	push   0xc0021a6e
c001756a:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017570:	e8 4d 15 ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0017575:	59                   	pop    ecx
c0017576:	58                   	pop    eax
c0017577:	68 37 1a 02 c0       	push   0xc0021a37
c001757c:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017582:	e8 3b 15 ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0017587:	58                   	pop    eax
c0017588:	5a                   	pop    edx
c0017589:	68 71 1a 02 c0       	push   0xc0021a71
c001758e:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017594:	e8 29 15 ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0017599:	59                   	pop    ecx
c001759a:	58                   	pop    eax
c001759b:	53                   	push   ebx
c001759c:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00175a2:	e8 1b 15 ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c00175a7:	58                   	pop    eax
c00175a8:	5a                   	pop    edx
c00175a9:	68 6e 1a 02 c0       	push   0xc0021a6e
c00175ae:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00175b4:	e8 09 15 ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c00175b9:	83 c4 10             	add    esp,0x10
c00175bc:	eb fe                	jmp    c00175bc <HalPanic(char const*)+0xf7>

c00175be <HalQueryPerformanceCounter()>:
c00175be:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00175c3:	0f 57 c0             	xorps  xmm0,xmm0
c00175c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00175cc:	f6 80 8c 11 00 00 02 	test   BYTE PTR [eax+0x118c],0x2
c00175d3:	74 0e                	je     c00175e3 <HalQueryPerformanceCounter()+0x25>
c00175d5:	0f 31                	rdtsc  
c00175d7:	66 0f 6e c0          	movd   xmm0,eax
c00175db:	66 0f 6e ca          	movd   xmm1,edx
c00175df:	66 0f 62 c1          	punpckldq xmm0,xmm1
c00175e3:	66 0f 7e c0          	movd   eax,xmm0
c00175e7:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c00175ec:	66 0f 7e c2          	movd   edx,xmm0
c00175f0:	c3                   	ret    

c00175f1 <HalInitialise()>:
c00175f1:	53                   	push   ebx
c00175f2:	83 ec 08             	sub    esp,0x8
c00175f5:	e8 3c 56 ff ff       	call   c000cc36 <setupINTS()>
c00175fa:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00175ff:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c0017606:	75 07                	jne    c001760f <HalInitialise()+0x1e>
c0017608:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c001760f:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0017616:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c001761d:	e8 aa 02 00 00       	call   c00178cc <picOpen()>
c0017622:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0017629:	74 0a                	je     c0017635 <HalInitialise()+0x44>
c001762b:	e8 e0 01 00 00       	call   c0017810 <picDisable()>
c0017630:	e8 64 66 00 00       	call   c001dc99 <apicOpen()>
c0017635:	50                   	push   eax
c0017636:	bb 0f 00 00 00       	mov    ebx,0xf
c001763b:	6a 00                	push   0x0
c001763d:	68 b2 72 01 c0       	push   0xc00172b2
c0017642:	6a 00                	push   0x0
c0017644:	e8 c2 53 ff ff       	call   c000ca0b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017649:	83 c4 0c             	add    esp,0xc
c001764c:	6a 00                	push   0x0
c001764e:	68 b2 72 01 c0       	push   0xc00172b2
c0017653:	6a 01                	push   0x1
c0017655:	e8 b1 53 ff ff       	call   c000ca0b <installISRHandler(int, void (*)(regs*, void*), void*)>
c001765a:	83 c4 0c             	add    esp,0xc
c001765d:	6a 00                	push   0x0
c001765f:	68 a0 6d 01 c0       	push   0xc0016da0
c0017664:	6a 02                	push   0x2
c0017666:	e8 a0 53 ff ff       	call   c000ca0b <installISRHandler(int, void (*)(regs*, void*), void*)>
c001766b:	83 c4 0c             	add    esp,0xc
c001766e:	6a 00                	push   0x0
c0017670:	68 b2 72 01 c0       	push   0xc00172b2
c0017675:	6a 03                	push   0x3
c0017677:	e8 8f 53 ff ff       	call   c000ca0b <installISRHandler(int, void (*)(regs*, void*), void*)>
c001767c:	83 c4 0c             	add    esp,0xc
c001767f:	6a 00                	push   0x0
c0017681:	68 b2 72 01 c0       	push   0xc00172b2
c0017686:	6a 04                	push   0x4
c0017688:	e8 7e 53 ff ff       	call   c000ca0b <installISRHandler(int, void (*)(regs*, void*), void*)>
c001768d:	83 c4 0c             	add    esp,0xc
c0017690:	6a 00                	push   0x0
c0017692:	68 b2 72 01 c0       	push   0xc00172b2
c0017697:	6a 05                	push   0x5
c0017699:	e8 6d 53 ff ff       	call   c000ca0b <installISRHandler(int, void (*)(regs*, void*), void*)>
c001769e:	83 c4 0c             	add    esp,0xc
c00176a1:	6a 00                	push   0x0
c00176a3:	68 de 72 01 c0       	push   0xc00172de
c00176a8:	6a 06                	push   0x6
c00176aa:	e8 5c 53 ff ff       	call   c000ca0b <installISRHandler(int, void (*)(regs*, void*), void*)>
c00176af:	83 c4 0c             	add    esp,0xc
c00176b2:	6a 00                	push   0x0
c00176b4:	68 b5 6d 01 c0       	push   0xc0016db5
c00176b9:	6a 08                	push   0x8
c00176bb:	e8 4b 53 ff ff       	call   c000ca0b <installISRHandler(int, void (*)(regs*, void*), void*)>
c00176c0:	83 c4 0c             	add    esp,0xc
c00176c3:	6a 00                	push   0x0
c00176c5:	68 b2 72 01 c0       	push   0xc00172b2
c00176ca:	6a 09                	push   0x9
c00176cc:	e8 3a 53 ff ff       	call   c000ca0b <installISRHandler(int, void (*)(regs*, void*), void*)>
c00176d1:	83 c4 0c             	add    esp,0xc
c00176d4:	6a 00                	push   0x0
c00176d6:	68 b2 72 01 c0       	push   0xc00172b2
c00176db:	6a 0a                	push   0xa
c00176dd:	e8 29 53 ff ff       	call   c000ca0b <installISRHandler(int, void (*)(regs*, void*), void*)>
c00176e2:	83 c4 0c             	add    esp,0xc
c00176e5:	6a 00                	push   0x0
c00176e7:	68 b2 72 01 c0       	push   0xc00172b2
c00176ec:	6a 0b                	push   0xb
c00176ee:	e8 18 53 ff ff       	call   c000ca0b <installISRHandler(int, void (*)(regs*, void*), void*)>
c00176f3:	83 c4 0c             	add    esp,0xc
c00176f6:	6a 00                	push   0x0
c00176f8:	68 d9 71 01 c0       	push   0xc00171d9
c00176fd:	6a 0d                	push   0xd
c00176ff:	e8 07 53 ff ff       	call   c000ca0b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017704:	83 c4 0c             	add    esp,0xc
c0017707:	6a 00                	push   0x0
c0017709:	68 33 72 01 c0       	push   0xc0017233
c001770e:	6a 0e                	push   0xe
c0017710:	e8 f6 52 ff ff       	call   c000ca0b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017715:	83 c4 10             	add    esp,0x10
c0017718:	50                   	push   eax
c0017719:	6a 00                	push   0x0
c001771b:	68 b2 72 01 c0       	push   0xc00172b2
c0017720:	53                   	push   ebx
c0017721:	43                   	inc    ebx
c0017722:	e8 e4 52 ff ff       	call   c000ca0b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017727:	83 c4 10             	add    esp,0x10
c001772a:	83 fb 1e             	cmp    ebx,0x1e
c001772d:	75 e9                	jne    c0017718 <HalInitialise()+0x127>
c001772f:	50                   	push   eax
c0017730:	6a 00                	push   0x0
c0017732:	68 3b 22 01 c0       	push   0xc001223b
c0017737:	6a 60                	push   0x60
c0017739:	e8 cd 52 ff ff       	call   c000ca0b <installISRHandler(int, void (*)(regs*, void*), void*)>
c001773e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017743:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001774d:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017754:	e8 a3 03 ff ff       	call   c0007afc <malloc>
c0017759:	89 04 24             	mov    DWORD PTR [esp],eax
c001775c:	89 c3                	mov    ebx,eax
c001775e:	e8 5d 09 00 00       	call   c00180c0 <RTC::RTC()>
c0017763:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001776d:	5a                   	pop    edx
c001776e:	59                   	pop    ecx
c001776f:	53                   	push   ebx
c0017770:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017776:	e8 6f 4d ff ff       	call   c000c4ea <Device::addChild(Device*)>
c001777b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001777d:	6a 00                	push   0x0
c001777f:	6a 00                	push   0x0
c0017781:	6a 00                	push   0x0
c0017783:	53                   	push   ebx
c0017784:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017787:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001778c:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017792:	83 c4 28             	add    esp,0x28
c0017795:	5b                   	pop    ebx
c0017796:	c3                   	ret    

c0017797 <HalMakeBeep(int)>:
c0017797:	53                   	push   ebx
c0017798:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001779c:	85 db                	test   ebx,ebx
c001779e:	75 06                	jne    c00177a6 <HalMakeBeep(int)+0xf>
c00177a0:	e4 61                	in     al,0x61
c00177a2:	24 fc                	and    al,0xfc
c00177a4:	eb 26                	jmp    c00177cc <HalMakeBeep(int)+0x35>
c00177a6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00177ab:	99                   	cdq    
c00177ac:	f7 fb                	idiv   ebx
c00177ae:	89 c1                	mov    ecx,eax
c00177b0:	b0 b6                	mov    al,0xb6
c00177b2:	e6 43                	out    0x43,al
c00177b4:	88 c8                	mov    al,cl
c00177b6:	e6 42                	out    0x42,al
c00177b8:	89 c8                	mov    eax,ecx
c00177ba:	c1 e8 08             	shr    eax,0x8
c00177bd:	e6 42                	out    0x42,al
c00177bf:	e4 61                	in     al,0x61
c00177c1:	88 c2                	mov    dl,al
c00177c3:	80 ca 03             	or     dl,0x3
c00177c6:	38 c2                	cmp    dl,al
c00177c8:	74 04                	je     c00177ce <HalMakeBeep(int)+0x37>
c00177ca:	88 d0                	mov    al,dl
c00177cc:	e6 61                	out    0x61,al
c00177ce:	5b                   	pop    ebx
c00177cf:	c3                   	ret    

c00177d0 <HalGetRand()>:
c00177d0:	31 c0                	xor    eax,eax
c00177d2:	c3                   	ret    

c00177d3 <HalEndOfInterrupt(int)>:
c00177d3:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c00177da:	74 23                	je     c00177ff <HalEndOfInterrupt(int)+0x2c>
c00177dc:	83 ec 14             	sub    esp,0x14
c00177df:	6a 1b                	push   0x1b
c00177e1:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177e7:	e8 d4 f8 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c00177ec:	25 00 f0 ff ff       	and    eax,0xfffff000
c00177f1:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00177fb:	83 c4 1c             	add    esp,0x1c
c00177fe:	c3                   	ret    
c00177ff:	e9 5c 02 00 00       	jmp    c0017a60 <picEOI(int)>

c0017804 <HalRestart()>:
c0017804:	c3                   	ret    

c0017805 <HalShutdown()>:
c0017805:	c3                   	ret    

c0017806 <HalSleep()>:
c0017806:	c3                   	ret    
c0017807:	90                   	nop

c0017808 <picIoWait()>:
c0017808:	eb 00                	jmp    c001780a <picIoWait()+0x2>
c001780a:	eb 00                	jmp    c001780c <picIoWait()+0x4>
c001780c:	90                   	nop
c001780d:	c3                   	ret    
c001780e:	66 90                	xchg   ax,ax

c0017810 <picDisable()>:
c0017810:	83 ec 10             	sub    esp,0x10
c0017813:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001781a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001781f:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c0017824:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0017829:	ee                   	out    dx,al
c001782a:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017831:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017836:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c001783b:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0017840:	ee                   	out    dx,al
c0017841:	90                   	nop
c0017842:	83 c4 10             	add    esp,0x10
c0017845:	c3                   	ret    
c0017846:	66 90                	xchg   ax,ax

c0017848 <picGetIRQReg(int)>:
c0017848:	83 ec 10             	sub    esp,0x10
c001784b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001784f:	0f b6 c0             	movzx  eax,al
c0017852:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017859:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001785d:	0f b6 44 24 01       	movzx  eax,BYTE PTR [esp+0x1]
c0017862:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0017867:	ee                   	out    dx,al
c0017868:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001786c:	0f b6 c0             	movzx  eax,al
c001786f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017876:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001787a:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c001787f:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0017884:	ee                   	out    dx,al
c0017885:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001788c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0017891:	89 c2                	mov    edx,eax
c0017893:	ec                   	in     al,dx
c0017894:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017898:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c001789d:	0f b6 c0             	movzx  eax,al
c00178a0:	c1 e0 08             	shl    eax,0x8
c00178a3:	0f bf c8             	movsx  ecx,ax
c00178a6:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00178ad:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00178b2:	89 c2                	mov    edx,eax
c00178b4:	ec                   	in     al,dx
c00178b5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00178b9:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c00178be:	0f b6 c0             	movzx  eax,al
c00178c1:	98                   	cwde   
c00178c2:	09 c8                	or     eax,ecx
c00178c4:	98                   	cwde   
c00178c5:	0f b7 c0             	movzx  eax,ax
c00178c8:	83 c4 10             	add    esp,0x10
c00178cb:	c3                   	ret    

c00178cc <picOpen()>:
c00178cc:	83 ec 50             	sub    esp,0x50
c00178cf:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00178d6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00178db:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00178e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00178e4:	ee                   	out    dx,al
c00178e5:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00178ec:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00178f1:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00178f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00178fa:	ee                   	out    dx,al
c00178fb:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017903:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001790b:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017912:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017916:	89 c2                	mov    edx,eax
c0017918:	ec                   	in     al,dx
c0017919:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001791d:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0017922:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017926:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001792d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017931:	89 c2                	mov    edx,eax
c0017933:	ec                   	in     al,dx
c0017934:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017938:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001793d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017941:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017948:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001794d:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0017952:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017956:	ee                   	out    dx,al
c0017957:	e8 ac fe ff ff       	call   c0017808 <picIoWait()>
c001795c:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017963:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017968:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001796d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017971:	ee                   	out    dx,al
c0017972:	e8 91 fe ff ff       	call   c0017808 <picIoWait()>
c0017977:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001797b:	0f b6 c0             	movzx  eax,al
c001797e:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017985:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017989:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001798e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017992:	ee                   	out    dx,al
c0017993:	e8 70 fe ff ff       	call   c0017808 <picIoWait()>
c0017998:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001799c:	0f b6 c0             	movzx  eax,al
c001799f:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00179a6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00179aa:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c00179af:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00179b3:	ee                   	out    dx,al
c00179b4:	e8 4f fe ff ff       	call   c0017808 <picIoWait()>
c00179b9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00179c0:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00179c5:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00179ca:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00179ce:	ee                   	out    dx,al
c00179cf:	e8 34 fe ff ff       	call   c0017808 <picIoWait()>
c00179d4:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00179db:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00179e0:	0f b6 44 24 33       	movzx  eax,BYTE PTR [esp+0x33]
c00179e5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00179e9:	ee                   	out    dx,al
c00179ea:	e8 19 fe ff ff       	call   c0017808 <picIoWait()>
c00179ef:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00179f6:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00179fb:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0017a00:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017a04:	ee                   	out    dx,al
c0017a05:	e8 fe fd ff ff       	call   c0017808 <picIoWait()>
c0017a0a:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0017a11:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0017a16:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0017a1b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017a1f:	ee                   	out    dx,al
c0017a20:	e8 e3 fd ff ff       	call   c0017808 <picIoWait()>
c0017a25:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017a2a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017a31:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017a35:	0f b6 44 24 3f       	movzx  eax,BYTE PTR [esp+0x3f]
c0017a3a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017a3e:	ee                   	out    dx,al
c0017a3f:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0017a44:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0017a4b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0017a4f:	0f b6 44 24 43       	movzx  eax,BYTE PTR [esp+0x43]
c0017a54:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017a58:	ee                   	out    dx,al
c0017a59:	90                   	nop
c0017a5a:	83 c4 50             	add    esp,0x50
c0017a5d:	c3                   	ret    
c0017a5e:	66 90                	xchg   ax,ax

c0017a60 <picEOI(int)>:
c0017a60:	83 ec 14             	sub    esp,0x14
c0017a63:	83 7c 24 18 07       	cmp    DWORD PTR [esp+0x18],0x7
c0017a68:	75 1e                	jne    c0017a88 <picEOI(int)+0x28>
c0017a6a:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c0017a71:	e8 d2 fd ff ff       	call   c0017848 <picGetIRQReg(int)>
c0017a76:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017a7b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0017a80:	25 80 00 00 00       	and    eax,0x80
c0017a85:	74 79                	je     c0017b00 <picEOI(int)+0xa0>
c0017a87:	90                   	nop
c0017a88:	83 7c 24 18 0f       	cmp    DWORD PTR [esp+0x18],0xf
c0017a8d:	75 35                	jne    c0017ac4 <picEOI(int)+0x64>
c0017a8f:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c0017a96:	e8 ad fd ff ff       	call   c0017848 <picGetIRQReg(int)>
c0017a9b:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0017aa0:	0f bf 44 24 10       	movsx  eax,WORD PTR [esp+0x10]
c0017aa5:	85 c0                	test   eax,eax
c0017aa7:	78 1b                	js     c0017ac4 <picEOI(int)+0x64>
c0017aa9:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017ab0:	c6 44 24 0d 20       	mov    BYTE PTR [esp+0xd],0x20
c0017ab5:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c0017aba:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0017abf:	ee                   	out    dx,al
c0017ac0:	eb 42                	jmp    c0017b04 <picEOI(int)+0xa4>
c0017ac2:	66 90                	xchg   ax,ax
c0017ac4:	83 7c 24 18 07       	cmp    DWORD PTR [esp+0x18],0x7
c0017ac9:	7e 19                	jle    c0017ae4 <picEOI(int)+0x84>
c0017acb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017ad2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0017ad7:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c0017adc:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0017ae1:	ee                   	out    dx,al
c0017ae2:	66 90                	xchg   ax,ax
c0017ae4:	66 c7 44 24 06 20 00 	mov    WORD PTR [esp+0x6],0x20
c0017aeb:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0017af0:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c0017af5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0017afa:	ee                   	out    dx,al
c0017afb:	eb 07                	jmp    c0017b04 <picEOI(int)+0xa4>
c0017afd:	8d 76 00             	lea    esi,[esi+0x0]
c0017b00:	90                   	nop
c0017b01:	8d 76 00             	lea    esi,[esi+0x0]
c0017b04:	83 c4 14             	add    esp,0x14
c0017b07:	c3                   	ret    

c0017b08 <RTC::open(int, int, void*)>:
c0017b08:	31 c0                	xor    eax,eax
c0017b0a:	c3                   	ret    
c0017b0b:	90                   	nop

c0017b0c <RTC::close(int, int, void*)>:
c0017b0c:	31 c0                	xor    eax,eax
c0017b0e:	c3                   	ret    
c0017b0f:	90                   	nop

c0017b10 <RTC::timeInSecondsUTC()>:
c0017b10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b14:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017b1a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017b20:	c3                   	ret    
c0017b21:	90                   	nop

c0017b22 <RTC::timeInDatetimeUTC()>:
c0017b22:	53                   	push   ebx
c0017b23:	83 ec 14             	sub    esp,0x14
c0017b26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b2a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017b2e:	8b 10                	mov    edx,DWORD PTR [eax]
c0017b30:	50                   	push   eax
c0017b31:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017b34:	83 c4 0c             	add    esp,0xc
c0017b37:	52                   	push   edx
c0017b38:	50                   	push   eax
c0017b39:	53                   	push   ebx
c0017b3a:	e8 ad 46 ff ff       	call   c000c1ec <secondsToDatetime(unsigned long long)>
c0017b3f:	89 d8                	mov    eax,ebx
c0017b41:	83 c4 14             	add    esp,0x14
c0017b44:	5b                   	pop    ebx
c0017b45:	c2 04 00             	ret    0x4

c0017b48 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0017b48:	56                   	push   esi
c0017b49:	53                   	push   ebx
c0017b4a:	83 ec 14             	sub    esp,0x14
c0017b4d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017b51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b53:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0017b56:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017b5a:	52                   	push   edx
c0017b5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b63:	50                   	push   eax
c0017b64:	e8 83 46 ff ff       	call   c000c1ec <secondsToDatetime(unsigned long long)>
c0017b69:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017b6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b71:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b75:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b79:	89 f0                	mov    eax,esi
c0017b7b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017b7f:	83 c4 20             	add    esp,0x20
c0017b82:	5b                   	pop    ebx
c0017b83:	5e                   	pop    esi
c0017b84:	ff e0                	jmp    eax

c0017b86 <RTC::~RTC()>:
c0017b86:	83 ec 1c             	sub    esp,0x1c
c0017b89:	ba 0c 1b 02 c0       	mov    edx,0xc0021b0c
c0017b8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b92:	89 10                	mov    DWORD PTR [eax],edx
c0017b94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b98:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b9b:	e8 24 3e ff ff       	call   c000b9c4 <Clock::~Clock()>
c0017ba0:	90                   	nop
c0017ba1:	83 c4 1c             	add    esp,0x1c
c0017ba4:	c3                   	ret    
c0017ba5:	90                   	nop

c0017ba6 <RTC::~RTC()>:
c0017ba6:	83 ec 1c             	sub    esp,0x1c
c0017ba9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bad:	89 04 24             	mov    DWORD PTR [esp],eax
c0017bb0:	e8 d1 ff ff ff       	call   c0017b86 <RTC::~RTC()>
c0017bb5:	c7 44 24 04 60 01 00 00 	mov    DWORD PTR [esp+0x4],0x160
c0017bbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0017bc4:	e8 93 2d ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c0017bc9:	83 c4 1c             	add    esp,0x1c
c0017bcc:	c3                   	ret    
c0017bcd:	90                   	nop

c0017bce <RTC::get_update_in_progress_flag()>:
c0017bce:	83 ec 14             	sub    esp,0x14
c0017bd1:	6a 0a                	push   0xa
c0017bd3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017bd9:	e8 bc f5 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017bde:	83 c4 1c             	add    esp,0x1c
c0017be1:	c0 e8 07             	shr    al,0x7
c0017be4:	c3                   	ret    
c0017be5:	90                   	nop

c0017be6 <RTC::completeRTCRefresh()>:
c0017be6:	57                   	push   edi
c0017be7:	56                   	push   esi
c0017be8:	53                   	push   ebx
c0017be9:	83 ec 20             	sub    esp,0x20
c0017bec:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017bf0:	8b 35 8c 74 02 c0    	mov    esi,DWORD PTR ds:0xc002748c
c0017bf6:	83 ec 0c             	sub    esp,0xc
c0017bf9:	53                   	push   ebx
c0017bfa:	e8 cf ff ff ff       	call   c0017bce <RTC::get_update_in_progress_flag()>
c0017bff:	83 c4 10             	add    esp,0x10
c0017c02:	84 c0                	test   al,al
c0017c04:	74 0e                	je     c0017c14 <RTC::completeRTCRefresh()+0x2e>
c0017c06:	8d 86 20 4e 00 00    	lea    eax,[esi+0x4e20]
c0017c0c:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017c12:	73 e2                	jae    c0017bf6 <RTC::completeRTCRefresh()+0x10>
c0017c14:	51                   	push   ecx
c0017c15:	51                   	push   ecx
c0017c16:	6a 00                	push   0x0
c0017c18:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017c1e:	e8 77 f5 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017c23:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017c27:	5e                   	pop    esi
c0017c28:	5f                   	pop    edi
c0017c29:	6a 02                	push   0x2
c0017c2b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017c31:	e8 64 f5 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017c36:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0017c3a:	58                   	pop    eax
c0017c3b:	5a                   	pop    edx
c0017c3c:	6a 04                	push   0x4
c0017c3e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017c44:	e8 51 f5 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017c49:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0017c4d:	59                   	pop    ecx
c0017c4e:	5e                   	pop    esi
c0017c4f:	6a 07                	push   0x7
c0017c51:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017c57:	e8 3e f5 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017c5c:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0017c60:	5f                   	pop    edi
c0017c61:	58                   	pop    eax
c0017c62:	6a 08                	push   0x8
c0017c64:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017c6a:	e8 2b f5 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017c6f:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0017c73:	58                   	pop    eax
c0017c74:	5a                   	pop    edx
c0017c75:	6a 09                	push   0x9
c0017c77:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017c7d:	e8 18 f5 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017c82:	83 c4 10             	add    esp,0x10
c0017c85:	0f b6 f0             	movzx  esi,al
c0017c88:	8b 3d 8c 74 02 c0    	mov    edi,DWORD PTR ds:0xc002748c
c0017c8e:	83 ec 0c             	sub    esp,0xc
c0017c91:	53                   	push   ebx
c0017c92:	e8 37 ff ff ff       	call   c0017bce <RTC::get_update_in_progress_flag()>
c0017c97:	83 c4 10             	add    esp,0x10
c0017c9a:	84 c0                	test   al,al
c0017c9c:	74 0e                	je     c0017cac <RTC::completeRTCRefresh()+0xc6>
c0017c9e:	8d 87 20 4e 00 00    	lea    eax,[edi+0x4e20]
c0017ca4:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017caa:	73 e2                	jae    c0017c8e <RTC::completeRTCRefresh()+0xa8>
c0017cac:	57                   	push   edi
c0017cad:	57                   	push   edi
c0017cae:	6a 00                	push   0x0
c0017cb0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017cb6:	e8 df f4 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017cbb:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0017cbf:	58                   	pop    eax
c0017cc0:	5a                   	pop    edx
c0017cc1:	6a 02                	push   0x2
c0017cc3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017cc9:	e8 cc f4 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017cce:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017cd2:	59                   	pop    ecx
c0017cd3:	5f                   	pop    edi
c0017cd4:	6a 04                	push   0x4
c0017cd6:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017cdc:	e8 b9 f4 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017ce1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017ce5:	58                   	pop    eax
c0017ce6:	5a                   	pop    edx
c0017ce7:	6a 07                	push   0x7
c0017ce9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017cef:	e8 a6 f4 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017cf4:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0017cf8:	59                   	pop    ecx
c0017cf9:	5f                   	pop    edi
c0017cfa:	6a 08                	push   0x8
c0017cfc:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017d02:	e8 93 f4 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017d07:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017d0b:	58                   	pop    eax
c0017d0c:	5a                   	pop    edx
c0017d0d:	6a 09                	push   0x9
c0017d0f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017d15:	e8 80 f4 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017d1a:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0017d1e:	83 c4 10             	add    esp,0x10
c0017d21:	0f b6 f8             	movzx  edi,al
c0017d24:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0017d28:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0017d2c:	74 2f                	je     c0017d5d <RTC::completeRTCRefresh()+0x177>
c0017d2e:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0017d32:	89 fe                	mov    esi,edi
c0017d34:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017d38:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0017d3c:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0017d40:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017d44:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0017d48:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017d4c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017d50:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0017d54:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017d58:	e9 2b ff ff ff       	jmp    c0017c88 <RTC::completeRTCRefresh()+0xa2>
c0017d5d:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0017d61:	38 4c 24 1c          	cmp    BYTE PTR [esp+0x1c],cl
c0017d65:	75 c7                	jne    c0017d2e <RTC::completeRTCRefresh()+0x148>
c0017d67:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0017d6b:	38 4c 24 1d          	cmp    BYTE PTR [esp+0x1d],cl
c0017d6f:	8a 4c 24 19          	mov    cl,BYTE PTR [esp+0x19]
c0017d73:	0f 94 c2             	sete   dl
c0017d76:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0017d7a:	0f 94 c1             	sete   cl
c0017d7d:	20 d1                	and    cl,dl
c0017d7f:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
c0017d83:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0017d87:	0f 94 c2             	sete   dl
c0017d8a:	84 d1                	test   cl,dl
c0017d8c:	74 a0                	je     c0017d2e <RTC::completeRTCRefresh()+0x148>
c0017d8e:	39 fe                	cmp    esi,edi
c0017d90:	75 9c                	jne    c0017d2e <RTC::completeRTCRefresh()+0x148>
c0017d92:	56                   	push   esi
c0017d93:	56                   	push   esi
c0017d94:	6a 0b                	push   0xb
c0017d96:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017d9c:	e8 f9 f3 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017da1:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017da5:	24 04                	and    al,0x4
c0017da7:	83 c4 10             	add    esp,0x10
c0017daa:	84 c0                	test   al,al
c0017dac:	0f 85 8c 00 00 00    	jne    c0017e3e <RTC::completeRTCRefresh()+0x258>
c0017db2:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0017db6:	c1 ef 04             	shr    edi,0x4
c0017db9:	b1 0a                	mov    cl,0xa
c0017dbb:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0017dbf:	6b ff 0a             	imul   edi,edi,0xa
c0017dc2:	c0 e8 04             	shr    al,0x4
c0017dc5:	f6 e1                	mul    cl
c0017dc7:	80 e2 0f             	and    dl,0xf
c0017dca:	00 c2                	add    dl,al
c0017dcc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017dd0:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0017dd4:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0017dd8:	c0 e8 04             	shr    al,0x4
c0017ddb:	f6 e1                	mul    cl
c0017ddd:	80 e2 0f             	and    dl,0xf
c0017de0:	00 c2                	add    dl,al
c0017de2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017de6:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c0017dea:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017dee:	c0 e8 04             	shr    al,0x4
c0017df1:	24 07                	and    al,0x7
c0017df3:	80 e2 0f             	and    dl,0xf
c0017df6:	f6 e1                	mul    cl
c0017df8:	00 d0                	add    al,dl
c0017dfa:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017dfe:	80 e2 80             	and    dl,0x80
c0017e01:	08 d0                	or     al,dl
c0017e03:	8a 54 24 19          	mov    dl,BYTE PTR [esp+0x19]
c0017e07:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017e0b:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0017e0f:	80 e2 0f             	and    dl,0xf
c0017e12:	c0 e8 04             	shr    al,0x4
c0017e15:	f6 e1                	mul    cl
c0017e17:	00 c2                	add    dl,al
c0017e19:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0017e1d:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c0017e21:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
c0017e25:	c0 e8 04             	shr    al,0x4
c0017e28:	f6 e1                	mul    cl
c0017e2a:	80 e2 0f             	and    dl,0xf
c0017e2d:	00 c2                	add    dl,al
c0017e2f:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0017e33:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0017e37:	24 0f                	and    al,0xf
c0017e39:	0f b6 c0             	movzx  eax,al
c0017e3c:	01 c7                	add    edi,eax
c0017e3e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017e42:	24 02                	and    al,0x2
c0017e44:	75 20                	jne    c0017e66 <RTC::completeRTCRefresh()+0x280>
c0017e46:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017e4b:	79 19                	jns    c0017e66 <RTC::completeRTCRefresh()+0x280>
c0017e4d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017e51:	b9 18 00 00 00       	mov    ecx,0x18
c0017e56:	80 e2 7f             	and    dl,0x7f
c0017e59:	0f b6 d2             	movzx  edx,dl
c0017e5c:	8d 42 0c             	lea    eax,[edx+0xc]
c0017e5f:	99                   	cdq    
c0017e60:	f7 f9                	idiv   ecx
c0017e62:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0017e66:	8d b7 d0 07 00 00    	lea    esi,[edi+0x7d0]
c0017e6c:	81 fe e3 07 00 00    	cmp    esi,0x7e3
c0017e72:	77 06                	ja     c0017e7a <RTC::completeRTCRefresh()+0x294>
c0017e74:	8d b7 34 08 00 00    	lea    esi,[edi+0x834]
c0017e7a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0017e7f:	c1 e6 10             	shl    esi,0x10
c0017e82:	31 d2                	xor    edx,edx
c0017e84:	89 d7                	mov    edi,edx
c0017e86:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0017e8c:	c1 e0 10             	shl    eax,0x10
c0017e8f:	89 c1                	mov    ecx,eax
c0017e91:	31 c0                	xor    eax,eax
c0017e93:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0017e97:	09 cf                	or     edi,ecx
c0017e99:	8a 64 24 14          	mov    ah,BYTE PTR [esp+0x14]
c0017e9d:	89 fa                	mov    edx,edi
c0017e9f:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0017ea3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017ea7:	0f b7 c8             	movzx  ecx,ax
c0017eaa:	09 f1                	or     ecx,esi
c0017eac:	89 c8                	mov    eax,ecx
c0017eae:	51                   	push   ecx
c0017eaf:	51                   	push   ecx
c0017eb0:	52                   	push   edx
c0017eb1:	50                   	push   eax
c0017eb2:	e8 05 3c ff ff       	call   c000babc <datetimeToSeconds(datetime_t)>
c0017eb7:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c0017ebd:	89 93 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],edx
c0017ec3:	83 c4 30             	add    esp,0x30
c0017ec6:	5b                   	pop    ebx
c0017ec7:	5e                   	pop    esi
c0017ec8:	5f                   	pop    edi
c0017ec9:	c3                   	ret    

c0017eca <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0017eca:	53                   	push   ebx
c0017ecb:	83 ec 1c             	sub    esp,0x1c
c0017ece:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ed2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017ed6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017eda:	6a 00                	push   0x0
c0017edc:	6a 00                	push   0x0
c0017ede:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ee4:	e8 ef f3 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ee9:	83 c4 0c             	add    esp,0xc
c0017eec:	6a 00                	push   0x0
c0017eee:	6a 02                	push   0x2
c0017ef0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ef6:	e8 dd f3 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017efb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017eff:	89 d8                	mov    eax,ebx
c0017f01:	c1 e8 10             	shr    eax,0x10
c0017f04:	b9 64 00 00 00       	mov    ecx,0x64
c0017f09:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0017f0d:	0f b6 c7             	movzx  eax,bh
c0017f10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f14:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0017f18:	0f b6 c6             	movzx  eax,dh
c0017f1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017f1f:	89 d0                	mov    eax,edx
c0017f21:	31 d2                	xor    edx,edx
c0017f23:	c1 e8 10             	shr    eax,0x10
c0017f26:	f7 f1                	div    ecx
c0017f28:	88 54 24 1e          	mov    BYTE PTR [esp+0x1e],dl
c0017f2c:	59                   	pop    ecx
c0017f2d:	58                   	pop    eax
c0017f2e:	6a 0b                	push   0xb
c0017f30:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017f36:	e8 5f f2 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017f3b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017f3f:	24 04                	and    al,0x4
c0017f41:	83 c4 10             	add    esp,0x10
c0017f44:	84 c0                	test   al,al
c0017f46:	75 78                	jne    c0017fc0 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf6>
c0017f48:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c0017f4d:	b1 0a                	mov    cl,0xa
c0017f4f:	f6 f1                	div    cl
c0017f51:	88 c2                	mov    dl,al
c0017f53:	0f b6 c4             	movzx  eax,ah
c0017f56:	c0 e2 04             	shl    dl,0x4
c0017f59:	08 c2                	or     dl,al
c0017f5b:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0017f5f:	88 54 24 0d          	mov    BYTE PTR [esp+0xd],dl
c0017f63:	f6 f1                	div    cl
c0017f65:	88 c2                	mov    dl,al
c0017f67:	0f b6 c4             	movzx  eax,ah
c0017f6a:	c0 e2 04             	shl    dl,0x4
c0017f6d:	08 c2                	or     dl,al
c0017f6f:	0f b6 c3             	movzx  eax,bl
c0017f72:	f6 f1                	div    cl
c0017f74:	88 14 24             	mov    BYTE PTR [esp],dl
c0017f77:	88 c3                	mov    bl,al
c0017f79:	0f b6 c4             	movzx  eax,ah
c0017f7c:	c0 e3 04             	shl    bl,0x4
c0017f7f:	08 c3                	or     bl,al
c0017f81:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017f86:	f6 f1                	div    cl
c0017f88:	88 c2                	mov    dl,al
c0017f8a:	0f b6 c4             	movzx  eax,ah
c0017f8d:	c0 e2 04             	shl    dl,0x4
c0017f90:	08 c2                	or     dl,al
c0017f92:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017f97:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0017f9b:	f6 f1                	div    cl
c0017f9d:	88 c2                	mov    dl,al
c0017f9f:	0f b6 c4             	movzx  eax,ah
c0017fa2:	c0 e2 04             	shl    dl,0x4
c0017fa5:	08 c2                	or     dl,al
c0017fa7:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0017fac:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0017fb0:	f6 f1                	div    cl
c0017fb2:	88 c2                	mov    dl,al
c0017fb4:	0f b6 c4             	movzx  eax,ah
c0017fb7:	c0 e2 04             	shl    dl,0x4
c0017fba:	08 c2                	or     dl,al
c0017fbc:	88 54 24 0e          	mov    BYTE PTR [esp+0xe],dl
c0017fc0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017fc4:	24 02                	and    al,0x2
c0017fc6:	75 17                	jne    c0017fdf <RTC::setTimeInDatetimeUTC(datetime_t)+0x115>
c0017fc8:	80 fb 0b             	cmp    bl,0xb
c0017fcb:	76 0c                	jbe    c0017fd9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017fcd:	80 eb 0c             	sub    bl,0xc
c0017fd0:	75 02                	jne    c0017fd4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c0017fd2:	b3 0c                	mov    bl,0xc
c0017fd4:	80 cb 80             	or     bl,0x80
c0017fd7:	eb 06                	jmp    c0017fdf <RTC::setTimeInDatetimeUTC(datetime_t)+0x115>
c0017fd9:	84 db                	test   bl,bl
c0017fdb:	75 02                	jne    c0017fdf <RTC::setTimeInDatetimeUTC(datetime_t)+0x115>
c0017fdd:	b3 0c                	mov    bl,0xc
c0017fdf:	50                   	push   eax
c0017fe0:	0f b6 db             	movzx  ebx,bl
c0017fe3:	0f b6 44 24 11       	movzx  eax,BYTE PTR [esp+0x11]
c0017fe8:	50                   	push   eax
c0017fe9:	6a 00                	push   0x0
c0017feb:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ff1:	e8 e2 f2 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ff6:	83 c4 0c             	add    esp,0xc
c0017ff9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017ffe:	50                   	push   eax
c0017fff:	6a 02                	push   0x2
c0018001:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0018007:	e8 cc f2 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c001800c:	83 c4 0c             	add    esp,0xc
c001800f:	53                   	push   ebx
c0018010:	6a 04                	push   0x4
c0018012:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0018018:	e8 bb f2 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c001801d:	83 c4 0c             	add    esp,0xc
c0018020:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018025:	50                   	push   eax
c0018026:	6a 07                	push   0x7
c0018028:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001802e:	e8 a5 f2 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018033:	83 c4 0c             	add    esp,0xc
c0018036:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001803b:	50                   	push   eax
c001803c:	6a 08                	push   0x8
c001803e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0018044:	e8 8f f2 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018049:	83 c4 0c             	add    esp,0xc
c001804c:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0018051:	52                   	push   edx
c0018052:	6a 09                	push   0x9
c0018054:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001805a:	e8 79 f2 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c001805f:	5a                   	pop    edx
c0018060:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018064:	e8 7d fb ff ff       	call   c0017be6 <RTC::completeRTCRefresh()>
c0018069:	83 c4 28             	add    esp,0x28
c001806c:	b0 01                	mov    al,0x1
c001806e:	5b                   	pop    ebx
c001806f:	c3                   	ret    

c0018070 <rtcIRQHandler(regs*, void*)>:
c0018070:	53                   	push   ebx
c0018071:	83 ec 10             	sub    esp,0x10
c0018074:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018078:	6a 0c                	push   0xc
c001807a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0018080:	e8 15 f1 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018085:	83 c4 10             	add    esp,0x10
c0018088:	84 c0                	test   al,al
c001808a:	79 2f                	jns    c00180bb <rtcIRQHandler(regs*, void*)+0x4b>
c001808c:	66 a1 14 82 02 c0    	mov    ax,ds:0xc0028214
c0018092:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018099:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00180a0:	40                   	inc    eax
c00180a1:	0f b7 c0             	movzx  eax,ax
c00180a4:	66 a3 14 82 02 c0    	mov    ds:0xc0028214,ax
c00180aa:	85 c0                	test   eax,eax
c00180ac:	75 0d                	jne    c00180bb <rtcIRQHandler(regs*, void*)+0x4b>
c00180ae:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00180b2:	83 c4 08             	add    esp,0x8
c00180b5:	5b                   	pop    ebx
c00180b6:	e9 2b fb ff ff       	jmp    c0017be6 <RTC::completeRTCRefresh()>
c00180bb:	83 c4 08             	add    esp,0x8
c00180be:	5b                   	pop    ebx
c00180bf:	c3                   	ret    

c00180c0 <RTC::RTC()>:
c00180c0:	83 ec 3c             	sub    esp,0x3c
c00180c3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00180c7:	c7 44 24 04 ef 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021aef
c00180cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00180d2:	e8 b7 38 ff ff       	call   c000b98e <Clock::Clock(char const*)>
c00180d7:	ba 0c 1b 02 c0       	mov    edx,0xc0021b0c
c00180dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00180e0:	89 10                	mov    DWORD PTR [eax],edx
c00180e2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00180e6:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00180ea:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00180ee:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00180f6:	c7 44 24 08 70 80 01 c0 	mov    DWORD PTR [esp+0x8],0xc0018070
c00180fe:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c0018106:	89 04 24             	mov    DWORD PTR [esp],eax
c0018109:	e8 8a 43 ff ff       	call   c000c498 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001810e:	89 c2                	mov    edx,eax
c0018110:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018114:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001811a:	fa                   	cli    
c001811b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0018120:	40                   	inc    eax
c0018121:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0018126:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001812b:	c7 44 24 04 0b 00 00 00 	mov    DWORD PTR [esp+0x4],0xb
c0018133:	89 04 24             	mov    DWORD PTR [esp],eax
c0018136:	e8 5f f0 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001813b:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001813f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0018144:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0018149:	80 ca 10             	or     dl,0x10
c001814c:	0f b6 d2             	movzx  edx,dl
c001814f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018153:	c7 44 24 04 0b 00 00 00 	mov    DWORD PTR [esp+0x4],0xb
c001815b:	89 04 24             	mov    DWORD PTR [esp],eax
c001815e:	e8 75 f1 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018163:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018167:	89 04 24             	mov    DWORD PTR [esp],eax
c001816a:	e8 77 fa ff ff       	call   c0017be6 <RTC::completeRTCRefresh()>
c001816f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0018174:	48                   	dec    eax
c0018175:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001817a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001817f:	85 c0                	test   eax,eax
c0018181:	75 01                	jne    c0018184 <RTC::RTC()+0xc4>
c0018183:	fb                   	sti    
c0018184:	90                   	nop
c0018185:	83 c4 3c             	add    esp,0x3c
c0018188:	c3                   	ret    
c0018189:	66 90                	xchg   ax,ax
c001818b:	90                   	nop

c001818c <HalConsoleScroll(int, int)>:
c001818c:	83 ec 10             	sub    esp,0x10
c001818f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018197:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001819f:	90                   	nop
c00181a0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00181a5:	0f 8f e1 00 00 00    	jg     c001828c <HalConsoleScroll(int, int)+0x100>
c00181ab:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00181b3:	90                   	nop
c00181b4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00181bc:	0f 8f be 00 00 00    	jg     c0018280 <HalConsoleScroll(int, int)+0xf4>
c00181c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00181c6:	89 d0                	mov    eax,edx
c00181c8:	c1 e0 02             	shl    eax,0x2
c00181cb:	01 d0                	add    eax,edx
c00181cd:	c1 e0 05             	shl    eax,0x5
c00181d0:	89 c2                	mov    edx,eax
c00181d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181d6:	01 d0                	add    eax,edx
c00181d8:	89 c2                	mov    edx,eax
c00181da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181de:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00181e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00181e5:	89 d0                	mov    eax,edx
c00181e7:	c1 e0 02             	shl    eax,0x2
c00181ea:	01 d0                	add    eax,edx
c00181ec:	c1 e0 05             	shl    eax,0x5
c00181ef:	89 c2                	mov    edx,eax
c00181f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181f5:	01 d0                	add    eax,edx
c00181f7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00181fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018201:	01 d0                	add    eax,edx
c0018203:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0018206:	88 10                	mov    BYTE PTR [eax],dl
c0018208:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001820d:	75 65                	jne    c0018274 <HalConsoleScroll(int, int)+0xe8>
c001820f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018213:	83 e0 01             	and    eax,0x1
c0018216:	74 38                	je     c0018250 <HalConsoleScroll(int, int)+0xc4>
c0018218:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001821c:	24 0f                	and    al,0xf
c001821e:	88 c2                	mov    dl,al
c0018220:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018224:	c1 e0 04             	shl    eax,0x4
c0018227:	88 d1                	mov    cl,dl
c0018229:	08 c1                	or     cl,al
c001822b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001822f:	89 d0                	mov    eax,edx
c0018231:	c1 e0 02             	shl    eax,0x2
c0018234:	01 d0                	add    eax,edx
c0018236:	c1 e0 05             	shl    eax,0x5
c0018239:	89 c2                	mov    edx,eax
c001823b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001823f:	01 d0                	add    eax,edx
c0018241:	89 c2                	mov    edx,eax
c0018243:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018247:	01 d0                	add    eax,edx
c0018249:	88 ca                	mov    dl,cl
c001824b:	88 10                	mov    BYTE PTR [eax],dl
c001824d:	eb 25                	jmp    c0018274 <HalConsoleScroll(int, int)+0xe8>
c001824f:	90                   	nop
c0018250:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018254:	89 d0                	mov    eax,edx
c0018256:	c1 e0 02             	shl    eax,0x2
c0018259:	01 d0                	add    eax,edx
c001825b:	c1 e0 05             	shl    eax,0x5
c001825e:	89 c2                	mov    edx,eax
c0018260:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018264:	01 d0                	add    eax,edx
c0018266:	89 c2                	mov    edx,eax
c0018268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001826c:	01 d0                	add    eax,edx
c001826e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018271:	8d 76 00             	lea    esi,[esi+0x0]
c0018274:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0018278:	e9 37 ff ff ff       	jmp    c00181b4 <HalConsoleScroll(int, int)+0x28>
c001827d:	8d 76 00             	lea    esi,[esi+0x0]
c0018280:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0018284:	e9 17 ff ff ff       	jmp    c00181a0 <HalConsoleScroll(int, int)+0x14>
c0018289:	8d 76 00             	lea    esi,[esi+0x0]
c001828c:	90                   	nop
c001828d:	83 c4 10             	add    esp,0x10
c0018290:	c3                   	ret    
c0018291:	8d 76 00             	lea    esi,[esi+0x0]

c0018294 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018294:	83 ec 14             	sub    esp,0x14
c0018297:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001829b:	88 04 24             	mov    BYTE PTR [esp],al
c001829e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c00182a2:	0f b6 c0             	movzx  eax,al
c00182a5:	0f bf d0             	movsx  edx,ax
c00182a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00182ac:	83 e0 0f             	and    eax,0xf
c00182af:	89 c1                	mov    ecx,eax
c00182b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182b5:	c1 e0 04             	shl    eax,0x4
c00182b8:	0f b6 c0             	movzx  eax,al
c00182bb:	09 c8                	or     eax,ecx
c00182bd:	c1 e0 08             	shl    eax,0x8
c00182c0:	98                   	cwde   
c00182c1:	09 d0                	or     eax,edx
c00182c3:	98                   	cwde   
c00182c4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00182c9:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00182d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00182d5:	89 d0                	mov    eax,edx
c00182d7:	c1 e0 02             	shl    eax,0x2
c00182da:	01 d0                	add    eax,edx
c00182dc:	c1 e0 04             	shl    eax,0x4
c00182df:	89 c2                	mov    edx,eax
c00182e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00182e5:	01 d0                	add    eax,edx
c00182e7:	01 c0                	add    eax,eax
c00182e9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00182ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182f1:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c00182f6:	66 89 10             	mov    WORD PTR [eax],dx
c00182f9:	90                   	nop
c00182fa:	83 c4 14             	add    esp,0x14
c00182fd:	c3                   	ret    
c00182fe:	66 90                	xchg   ax,ax

c0018300 <HalConsoleCursorUpdate(int, int)>:
c0018300:	83 ec 20             	sub    esp,0x20
c0018303:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018307:	0f b7 c0             	movzx  eax,ax
c001830a:	89 c2                	mov    edx,eax
c001830c:	c1 e2 02             	shl    edx,0x2
c001830f:	01 d0                	add    eax,edx
c0018311:	c1 e0 04             	shl    eax,0x4
c0018314:	0f b7 d0             	movzx  edx,ax
c0018317:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001831b:	0f b7 c0             	movzx  eax,ax
c001831e:	01 d0                	add    eax,edx
c0018320:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018325:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001832c:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018331:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018336:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001833a:	ee                   	out    dx,al
c001833b:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018340:	0f b6 c0             	movzx  eax,al
c0018343:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001834a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001834e:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0018353:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018357:	ee                   	out    dx,al
c0018358:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001835f:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018364:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0018369:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001836d:	ee                   	out    dx,al
c001836e:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018373:	c1 e8 08             	shr    eax,0x8
c0018376:	0f b7 c0             	movzx  eax,ax
c0018379:	0f b6 c0             	movzx  eax,al
c001837c:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018383:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018387:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001838c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018390:	ee                   	out    dx,al
c0018391:	90                   	nop
c0018392:	83 c4 20             	add    esp,0x20
c0018395:	c3                   	ret    
c0018396:	66 90                	xchg   ax,ax

c0018398 <FAT::getName()>:
c0018398:	b8 40 1b 02 c0       	mov    eax,0xc0021b40
c001839d:	c3                   	ret    
c001839e:	66 90                	xchg   ax,ax

c00183a0 <FAT::tell(void*, unsigned long long*)>:
c00183a0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00183a5:	75 09                	jne    c00183b0 <FAT::tell(void*, unsigned long long*)+0x10>
c00183a7:	b8 04 00 00 00       	mov    eax,0x4
c00183ac:	c3                   	ret    
c00183ad:	8d 76 00             	lea    esi,[esi+0x0]
c00183b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00183b5:	75 09                	jne    c00183c0 <FAT::tell(void*, unsigned long long*)+0x20>
c00183b7:	b8 04 00 00 00       	mov    eax,0x4
c00183bc:	c3                   	ret    
c00183bd:	8d 76 00             	lea    esi,[esi+0x0]
c00183c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00183c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00183c7:	ba 00 00 00 00       	mov    edx,0x0
c00183cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00183d0:	89 01                	mov    DWORD PTR [ecx],eax
c00183d2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00183d5:	b8 00 00 00 00       	mov    eax,0x0
c00183da:	c3                   	ret    
c00183db:	90                   	nop

c00183dc <FAT::stat(void*, unsigned long long*)>:
c00183dc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00183e1:	75 09                	jne    c00183ec <FAT::stat(void*, unsigned long long*)+0x10>
c00183e3:	b8 04 00 00 00       	mov    eax,0x4
c00183e8:	c3                   	ret    
c00183e9:	8d 76 00             	lea    esi,[esi+0x0]
c00183ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00183f1:	75 09                	jne    c00183fc <FAT::stat(void*, unsigned long long*)+0x20>
c00183f3:	b8 04 00 00 00       	mov    eax,0x4
c00183f8:	c3                   	ret    
c00183f9:	8d 76 00             	lea    esi,[esi+0x0]
c00183fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018400:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018403:	ba 00 00 00 00       	mov    edx,0x0
c0018408:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001840c:	89 01                	mov    DWORD PTR [ecx],eax
c001840e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018411:	b8 00 00 00 00       	mov    eax,0x0
c0018416:	c3                   	ret    
c0018417:	90                   	nop

c0018418 <FAT::~FAT()>:
c0018418:	83 ec 1c             	sub    esp,0x1c
c001841b:	ba 8c 1b 02 c0       	mov    edx,0xc0021b8c
c0018420:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018424:	89 10                	mov    DWORD PTR [eax],edx
c0018426:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001842a:	89 04 24             	mov    DWORD PTR [esp],eax
c001842d:	e8 96 29 ff ff       	call   c000adc8 <Filesystem::~Filesystem()>
c0018432:	90                   	nop
c0018433:	83 c4 1c             	add    esp,0x1c
c0018436:	c3                   	ret    
c0018437:	90                   	nop

c0018438 <FAT::~FAT()>:
c0018438:	83 ec 1c             	sub    esp,0x1c
c001843b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001843f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018442:	e8 d1 ff ff ff       	call   c0018418 <FAT::~FAT()>
c0018447:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c001844f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018453:	89 04 24             	mov    DWORD PTR [esp],eax
c0018456:	e8 01 25 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001845b:	83 c4 1c             	add    esp,0x1c
c001845e:	c3                   	ret    
c001845f:	90                   	nop

c0018460 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018460:	83 ec 2c             	sub    esp,0x2c
c0018463:	66 c7 44 24 19 30 3a 	mov    WORD PTR [esp+0x19],0x3a30
c001846a:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c001846f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018473:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001847a:	83 f8 ff             	cmp    eax,0xffffffff
c001847d:	75 35                	jne    c00184b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001847f:	0f b6 44 24 19       	movzx  eax,BYTE PTR [esp+0x19]
c0018484:	88 c2                	mov    dl,al
c0018486:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001848b:	00 d0                	add    al,dl
c001848d:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0018491:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018497:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001849b:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c00184a2:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00184a7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00184ab:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c00184b2:	eb 18                	jmp    c00184cc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00184b4:	0f b6 44 24 19       	movzx  eax,BYTE PTR [esp+0x19]
c00184b9:	88 c2                	mov    dl,al
c00184bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00184bf:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00184c6:	00 d0                	add    al,dl
c00184c8:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c00184cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00184d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00184d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00184d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00184dc:	8d 44 24 19          	lea    eax,[esp+0x19]
c00184e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00184e3:	e8 e1 ca fe ff       	call   c0004fc9 <f_getlabel>
c00184e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00184ec:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00184f1:	75 09                	jne    c00184fc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x9c>
c00184f3:	b8 00 00 00 00       	mov    eax,0x0
c00184f8:	eb 0a                	jmp    c0018504 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa4>
c00184fa:	66 90                	xchg   ax,ax
c00184fc:	b8 01 00 00 00       	mov    eax,0x1
c0018501:	8d 76 00             	lea    esi,[esi+0x0]
c0018504:	83 c4 2c             	add    esp,0x2c
c0018507:	c3                   	ret    

c0018508 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018508:	53                   	push   ebx
c0018509:	83 ec 68             	sub    esp,0x68
c001850c:	c7 44 24 1c 30 3a 00 00 	mov    DWORD PTR [esp+0x1c],0x3a30
c0018514:	8d 54 24 20          	lea    edx,[esp+0x20]
c0018518:	b9 00 00 00 00       	mov    ecx,0x0
c001851d:	b8 3c 00 00 00       	mov    eax,0x3c
c0018522:	83 e0 f8             	and    eax,0xfffffff8
c0018525:	89 c3                	mov    ebx,eax
c0018527:	b8 00 00 00 00       	mov    eax,0x0
c001852c:	89 4c 04 20          	mov    DWORD PTR [esp+eax*1+0x20],ecx
c0018530:	89 4c 04 24          	mov    DWORD PTR [esp+eax*1+0x24],ecx
c0018534:	83 c0 08             	add    eax,0x8
c0018537:	39 d8                	cmp    eax,ebx
c0018539:	72 f1                	jb     c001852c <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001853b:	01 c2                	add    edx,eax
c001853d:	89 0a                	mov    DWORD PTR [edx],ecx
c001853f:	83 c2 04             	add    edx,0x4
c0018542:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0018546:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001854d:	83 f8 ff             	cmp    eax,0xffffffff
c0018550:	75 36                	jne    c0018588 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0018552:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018557:	88 c2                	mov    dl,al
c0018559:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001855e:	00 d0                	add    al,dl
c0018560:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018564:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001856a:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001856e:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018575:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001857a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c001857e:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018585:	eb 19                	jmp    c00185a0 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0018587:	90                   	nop
c0018588:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001858d:	88 c2                	mov    dl,al
c001858f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0018593:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001859a:	00 d0                	add    al,dl
c001859c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00185a0:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00185a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00185a8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00185ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00185af:	e8 7c 83 fe ff       	call   c0000930 <strcat>
c00185b4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00185b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00185bb:	e8 5d cb fe ff       	call   c000511d <f_setlabel>
c00185c0:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c00185c4:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
c00185c9:	75 09                	jne    c00185d4 <FAT::setlabel(LogicalDisk*, int, char*)+0xcc>
c00185cb:	b8 00 00 00 00       	mov    eax,0x0
c00185d0:	eb 0a                	jmp    c00185dc <FAT::setlabel(LogicalDisk*, int, char*)+0xd4>
c00185d2:	66 90                	xchg   ax,ax
c00185d4:	b8 01 00 00 00       	mov    eax,0x1
c00185d9:	8d 76 00             	lea    esi,[esi+0x0]
c00185dc:	83 c4 68             	add    esp,0x68
c00185df:	5b                   	pop    ebx
c00185e0:	c3                   	ret    
c00185e1:	90                   	nop
c00185e2:	66 90                	xchg   ax,ax

c00185e4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00185e4:	83 ec 3c             	sub    esp,0x3c
c00185e7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00185ef:	c7 44 24 04 64 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b64
c00185f7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00185fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00185fe:	e8 3d 82 fe ff       	call   c0000840 <strcmp>
c0018603:	85 c0                	test   eax,eax
c0018605:	0f 94 c0             	sete   al
c0018608:	84 c0                	test   al,al
c001860a:	74 10                	je     c001861c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001860c:	c7 44 24 2c 01 00 00 00 	mov    DWORD PTR [esp+0x2c],0x1
c0018614:	e9 b3 00 00 00       	jmp    c00186cc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0018619:	8d 76 00             	lea    esi,[esi+0x0]
c001861c:	c7 44 24 04 56 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b56
c0018624:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018628:	89 04 24             	mov    DWORD PTR [esp],eax
c001862b:	e8 10 82 fe ff       	call   c0000840 <strcmp>
c0018630:	85 c0                	test   eax,eax
c0018632:	0f 94 c0             	sete   al
c0018635:	84 c0                	test   al,al
c0018637:	74 0f                	je     c0018648 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0018639:	c7 44 24 2c 01 00 00 00 	mov    DWORD PTR [esp+0x2c],0x1
c0018641:	e9 86 00 00 00       	jmp    c00186cc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0018646:	66 90                	xchg   ax,ax
c0018648:	c7 44 24 04 5c 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b5c
c0018650:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018654:	89 04 24             	mov    DWORD PTR [esp],eax
c0018657:	e8 e4 81 fe ff       	call   c0000840 <strcmp>
c001865c:	85 c0                	test   eax,eax
c001865e:	0f 94 c0             	sete   al
c0018661:	84 c0                	test   al,al
c0018663:	74 0b                	je     c0018670 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0018665:	c7 44 24 2c 01 00 00 00 	mov    DWORD PTR [esp+0x2c],0x1
c001866d:	eb 5d                	jmp    c00186cc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001866f:	90                   	nop
c0018670:	c7 44 24 04 9c f7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f79c
c0018678:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001867c:	89 04 24             	mov    DWORD PTR [esp],eax
c001867f:	e8 bc 81 fe ff       	call   c0000840 <strcmp>
c0018684:	85 c0                	test   eax,eax
c0018686:	0f 94 c0             	sete   al
c0018689:	84 c0                	test   al,al
c001868b:	74 0b                	je     c0018698 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001868d:	c7 44 24 2c 02 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2
c0018695:	eb 35                	jmp    c00186cc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0018697:	90                   	nop
c0018698:	c7 44 24 04 62 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b62
c00186a0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00186a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00186a7:	e8 94 81 fe ff       	call   c0000840 <strcmp>
c00186ac:	85 c0                	test   eax,eax
c00186ae:	0f 94 c0             	sete   al
c00186b1:	84 c0                	test   al,al
c00186b3:	74 0b                	je     c00186c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00186b5:	c7 44 24 2c 04 00 00 00 	mov    DWORD PTR [esp+0x2c],0x4
c00186bd:	eb 0d                	jmp    c00186cc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00186bf:	90                   	nop
c00186c0:	b8 08 00 00 00       	mov    eax,0x8
c00186c5:	e9 f2 00 00 00       	jmp    c00187bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00186ca:	66 90                	xchg   ax,ax
c00186cc:	66 c7 44 24 21 30 3a 	mov    WORD PTR [esp+0x21],0x3a30
c00186d3:	c6 44 24 23 00       	mov    BYTE PTR [esp+0x23],0x0
c00186d8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00186dc:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00186e3:	83 f8 ff             	cmp    eax,0xffffffff
c00186e6:	75 38                	jne    c0018720 <FAT::format(LogicalDisk*, int, char const*, int)+0x13c>
c00186e8:	0f b6 44 24 21       	movzx  eax,BYTE PTR [esp+0x21]
c00186ed:	88 c2                	mov    dl,al
c00186ef:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00186f4:	00 d0                	add    al,dl
c00186f6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00186fa:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018700:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018704:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c001870b:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018710:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0018714:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c001871b:	eb 1b                	jmp    c0018738 <FAT::format(LogicalDisk*, int, char const*, int)+0x154>
c001871d:	8d 76 00             	lea    esi,[esi+0x0]
c0018720:	0f b6 44 24 21       	movzx  eax,BYTE PTR [esp+0x21]
c0018725:	88 c2                	mov    dl,al
c0018727:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001872b:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018732:	00 d0                	add    al,dl
c0018734:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018738:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001873c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0018740:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0018744:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018748:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0018750:	c6 44 24 11 02       	mov    BYTE PTR [esp+0x11],0x2
c0018755:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001875d:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018764:	e8 93 f3 fe ff       	call   c0007afc <malloc>
c0018769:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001876d:	c7 44 24 0c 00 20 00 00 	mov    DWORD PTR [esp+0xc],0x2000
c0018775:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018779:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001877d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018781:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018785:	8d 44 24 21          	lea    eax,[esp+0x21]
c0018789:	89 04 24             	mov    DWORD PTR [esp],eax
c001878c:	e8 7a cc fe ff       	call   c000540b <f_mkfs>
c0018791:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018795:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001879a:	75 08                	jne    c00187a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c0>
c001879c:	b8 00 00 00 00       	mov    eax,0x0
c00187a1:	eb 19                	jmp    c00187bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00187a3:	90                   	nop
c00187a4:	83 7c 24 24 0e       	cmp    DWORD PTR [esp+0x24],0xe
c00187a9:	75 09                	jne    c00187b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00187ab:	b8 09 00 00 00       	mov    eax,0x9
c00187b0:	eb 0a                	jmp    c00187bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00187b2:	66 90                	xchg   ax,ax
c00187b4:	b8 01 00 00 00       	mov    eax,0x1
c00187b9:	8d 76 00             	lea    esi,[esi+0x0]
c00187bc:	83 c4 3c             	add    esp,0x3c
c00187bf:	c3                   	ret    

c00187c0 <FAT::tryMount(LogicalDisk*, int)>:
c00187c0:	81 ec 5c 03 00 00    	sub    esp,0x35c
c00187c6:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00187cb:	83 f8 14             	cmp    eax,0x14
c00187ce:	75 14                	jne    c00187e4 <FAT::tryMount(LogicalDisk*, int)+0x24>
c00187d0:	c7 04 24 68 1b 02 c0 	mov    DWORD PTR [esp],0xc0021b68
c00187d7:	e8 59 86 ff ff       	call   c0010e35 <KePanic(char const*)>
c00187dc:	b0 00                	mov    al,0x0
c00187de:	e9 f1 01 00 00       	jmp    c00189d4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00187e3:	90                   	nop
c00187e4:	8b 84 24 64 03 00 00 	mov    eax,DWORD PTR [esp+0x364]
c00187eb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00187f1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00187f7:	3d 00 02 00 00       	cmp    eax,0x200
c00187fc:	74 0a                	je     c0018808 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00187fe:	b0 00                	mov    al,0x0
c0018800:	e9 cf 01 00 00       	jmp    c00189d4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018805:	8d 76 00             	lea    esi,[esi+0x0]
c0018808:	c6 84 24 4f 03 00 00 00 	mov    BYTE PTR [esp+0x34f],0x0
c0018810:	8b 84 24 68 03 00 00 	mov    eax,DWORD PTR [esp+0x368]
c0018817:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001881e:	83 f8 ff             	cmp    eax,0xffffffff
c0018821:	74 09                	je     c001882c <FAT::tryMount(LogicalDisk*, int)+0x6c>
c0018823:	b0 01                	mov    al,0x1
c0018825:	e9 aa 01 00 00       	jmp    c00189d4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001882a:	66 90                	xchg   ax,ax
c001882c:	66 c7 84 24 41 03 00 00 30 3a 	mov    WORD PTR [esp+0x341],0x3a30
c0018836:	c6 84 24 43 03 00 00 00 	mov    BYTE PTR [esp+0x343],0x0
c001883e:	0f b6 84 24 41 03 00 00 	movzx  eax,BYTE PTR [esp+0x341]
c0018846:	88 c2                	mov    dl,al
c0018848:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001884d:	00 d0                	add    al,dl
c001884f:	88 84 24 41 03 00 00 	mov    BYTE PTR [esp+0x341],al
c0018856:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001885c:	8b 84 24 68 03 00 00 	mov    eax,DWORD PTR [esp+0x368]
c0018863:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c001886a:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001886f:	8b 94 24 68 03 00 00 	mov    edx,DWORD PTR [esp+0x368]
c0018876:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c001887d:	c7 04 24 34 02 00 00 	mov    DWORD PTR [esp],0x234
c0018884:	e8 73 f2 fe ff       	call   c0007afc <malloc>
c0018889:	89 84 24 48 03 00 00 	mov    DWORD PTR [esp+0x348],eax
c0018890:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018898:	8d 84 24 41 03 00 00 	lea    eax,[esp+0x341]
c001889f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00188a3:	8b 84 24 48 03 00 00 	mov    eax,DWORD PTR [esp+0x348]
c00188aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00188ad:	e8 99 b3 fe ff       	call   c0003c4b <f_mount>
c00188b2:	89 84 24 44 03 00 00 	mov    DWORD PTR [esp+0x344],eax
c00188b9:	83 bc 24 44 03 00 00 00 	cmp    DWORD PTR [esp+0x344],0x0
c00188c1:	74 19                	je     c00188dc <FAT::tryMount(LogicalDisk*, int)+0x11c>
c00188c3:	8b 84 24 48 03 00 00 	mov    eax,DWORD PTR [esp+0x348]
c00188ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00188cd:	e8 50 f2 fe ff       	call   c0007b22 <rfree>
c00188d2:	b0 00                	mov    al,0x0
c00188d4:	e9 fb 00 00 00       	jmp    c00189d4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00188d9:	8d 76 00             	lea    esi,[esi+0x0]
c00188dc:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00188e4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00188ec:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c00188f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00188f6:	e8 85 7c fe ff       	call   c0000580 <memset>
c00188fb:	8d 84 24 41 03 00 00 	lea    eax,[esp+0x341]
c0018902:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018906:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c001890d:	89 04 24             	mov    DWORD PTR [esp],eax
c0018910:	e8 1b 80 fe ff       	call   c0000930 <strcat>
c0018915:	c7 44 24 04 76 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b76
c001891d:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c0018924:	89 04 24             	mov    DWORD PTR [esp],eax
c0018927:	e8 04 80 fe ff       	call   c0000930 <strcat>
c001892c:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0018934:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c001893b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001893f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018943:	89 04 24             	mov    DWORD PTR [esp],eax
c0018946:	e8 62 b3 fe ff       	call   c0003cad <f_open>
c001894b:	89 84 24 44 03 00 00 	mov    DWORD PTR [esp+0x344],eax
c0018952:	8b 84 24 44 03 00 00 	mov    eax,DWORD PTR [esp+0x344]
c0018959:	85 c0                	test   eax,eax
c001895b:	74 0b                	je     c0018968 <FAT::tryMount(LogicalDisk*, int)+0x1a8>
c001895d:	78 2d                	js     c001898c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001895f:	83 e8 04             	sub    eax,0x4
c0018962:	83 f8 01             	cmp    eax,0x1
c0018965:	77 25                	ja     c001898c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018967:	90                   	nop
c0018968:	c6 84 24 4f 03 00 00 01 	mov    BYTE PTR [esp+0x34f],0x1
c0018970:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018974:	89 04 24             	mov    DWORD PTR [esp],eax
c0018977:	e8 c1 ba fe ff       	call   c000443d <f_close>
c001897c:	90                   	nop
c001897d:	80 bc 24 4f 03 00 00 00 	cmp    BYTE PTR [esp+0x34f],0x0
c0018985:	74 45                	je     c00189cc <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018987:	eb 37                	jmp    c00189c0 <FAT::tryMount(LogicalDisk*, int)+0x200>
c0018989:	8d 76 00             	lea    esi,[esi+0x0]
c001898c:	8b 84 24 48 03 00 00 	mov    eax,DWORD PTR [esp+0x348]
c0018993:	89 04 24             	mov    DWORD PTR [esp],eax
c0018996:	e8 87 f1 fe ff       	call   c0007b22 <rfree>
c001899b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00189a3:	8d 84 24 41 03 00 00 	lea    eax,[esp+0x341]
c00189aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00189ae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00189b5:	e8 91 b2 fe ff       	call   c0003c4b <f_mount>
c00189ba:	b0 00                	mov    al,0x0
c00189bc:	eb 16                	jmp    c00189d4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00189be:	66 90                	xchg   ax,ax
c00189c0:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00189c5:	40                   	inc    eax
c00189c6:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c00189cb:	90                   	nop
c00189cc:	0f b6 84 24 4f 03 00 00 	movzx  eax,BYTE PTR [esp+0x34f]
c00189d4:	81 c4 5c 03 00 00    	add    esp,0x35c
c00189da:	c3                   	ret    
c00189db:	90                   	nop

c00189dc <FAT::allocateSwapfile(char const*, int)>:
c00189dc:	53                   	push   ebx
c00189dd:	81 ec 68 04 00 00    	sub    esp,0x468
c00189e3:	c7 84 24 50 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x450],0x114
c00189ee:	8b 84 24 50 04 00 00 	mov    eax,DWORD PTR [esp+0x450]
c00189f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00189f8:	e8 ff f0 fe ff       	call   c0007afc <malloc>
c00189fd:	89 c3                	mov    ebx,eax
c00189ff:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0018a04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018a08:	8b 84 24 74 04 00 00 	mov    eax,DWORD PTR [esp+0x474]
c0018a0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018a13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018a16:	e8 dd 25 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0018a1b:	89 9c 24 5c 04 00 00 	mov    DWORD PTR [esp+0x45c],ebx
c0018a22:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c0018a26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018a2a:	8d 44 24 40          	lea    eax,[esp+0x40]
c0018a2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018a32:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c0018a39:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a3c:	e8 1b 29 ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c0018a41:	8b 84 24 78 04 00 00 	mov    eax,DWORD PTR [esp+0x478]
c0018a48:	c1 e0 14             	shl    eax,0x14
c0018a4b:	89 c1                	mov    ecx,eax
c0018a4d:	89 c3                	mov    ebx,eax
c0018a4f:	c1 fb 1f             	sar    ebx,0x1f
c0018a52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018a56:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018a5a:	31 c8                	xor    eax,ecx
c0018a5c:	31 da                	xor    edx,ebx
c0018a5e:	09 d0                	or     eax,edx
c0018a60:	0f 84 aa 00 00 00    	je     c0018b10 <FAT::allocateSwapfile(char const*, int)+0x134>
c0018a66:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c0018a6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a70:	e8 b9 27 ff ff       	call   c000b22e <File::unlink()>
c0018a75:	c7 44 24 04 12 00 00 00 	mov    DWORD PTR [esp+0x4],0x12
c0018a7d:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c0018a84:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a87:	e8 2a 26 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0018a8c:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c0018a93:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018a99:	89 84 24 58 04 00 00 	mov    DWORD PTR [esp+0x458],eax
c0018aa0:	8b 84 24 78 04 00 00 	mov    eax,DWORD PTR [esp+0x478]
c0018aa7:	c1 e0 14             	shl    eax,0x14
c0018aaa:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0018ab2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018ab6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018abd:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ac0:	e8 e8 c7 fe ff       	call   c00052ad <f_expand>
c0018ac5:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c0018acc:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ace:	83 c0 10             	add    eax,0x10
c0018ad1:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ad3:	8d 54 24 48          	lea    edx,[esp+0x48]
c0018ad7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018adb:	8d 54 24 50          	lea    edx,[esp+0x50]
c0018adf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018ae3:	c7 44 24 04 00 04 00 00 	mov    DWORD PTR [esp+0x4],0x400
c0018aeb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018af3:	8b 94 24 5c 04 00 00 	mov    edx,DWORD PTR [esp+0x45c]
c0018afa:	89 14 24             	mov    DWORD PTR [esp],edx
c0018afd:	ff d0                	call   eax
c0018aff:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c0018b06:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b09:	e8 06 26 ff ff       	call   c000b114 <File::close()>
c0018b0e:	66 90                	xchg   ax,ax
c0018b10:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0018b18:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c0018b1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b22:	e8 8f 25 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0018b27:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c0018b2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b30:	83 c0 0c             	add    eax,0xc
c0018b33:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b35:	8d 54 24 48          	lea    edx,[esp+0x48]
c0018b39:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018b3d:	8d 54 24 4c          	lea    edx,[esp+0x4c]
c0018b41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018b45:	c7 44 24 04 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x4
c0018b4d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018b55:	8b 94 24 5c 04 00 00 	mov    edx,DWORD PTR [esp+0x45c]
c0018b5c:	89 14 24             	mov    DWORD PTR [esp],edx
c0018b5f:	ff d0                	call   eax
c0018b61:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c0018b68:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018b6e:	89 84 24 58 04 00 00 	mov    DWORD PTR [esp+0x458],eax
c0018b75:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018b7c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018b7f:	89 84 24 54 04 00 00 	mov    DWORD PTR [esp+0x454],eax
c0018b86:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c0018b8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b90:	e8 7f 25 ff ff       	call   c000b114 <File::close()>
c0018b95:	66 0f 6e 84 24 54 04 00 00 	movd   xmm0,DWORD PTR [esp+0x454]
c0018b9e:	66 0f d6 44 24 28    	movq   QWORD PTR [esp+0x28],xmm0
c0018ba4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ba8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018bac:	81 c4 68 04 00 00    	add    esp,0x468
c0018bb2:	5b                   	pop    ebx
c0018bb3:	c3                   	ret    

c0018bb4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0018bb4:	57                   	push   edi
c0018bb5:	56                   	push   esi
c0018bb6:	53                   	push   ebx
c0018bb7:	81 ec 60 02 00 00    	sub    esp,0x260
c0018bbd:	83 bc 24 74 02 00 00 00 	cmp    DWORD PTR [esp+0x274],0x0
c0018bc5:	74 0d                	je     c0018bd4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0018bc7:	83 bc 24 80 02 00 00 00 	cmp    DWORD PTR [esp+0x280],0x0
c0018bcf:	75 0f                	jne    c0018be0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0018bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0018bd4:	b8 04 00 00 00       	mov    eax,0x4
c0018bd9:	e9 32 01 00 00       	jmp    c0018d10 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0018bde:	66 90                	xchg   ax,ax
c0018be0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018be7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018beb:	8b 84 24 74 02 00 00 	mov    eax,DWORD PTR [esp+0x274]
c0018bf2:	89 04 24             	mov    DWORD PTR [esp],eax
c0018bf5:	e8 05 bb fe ff       	call   c00046ff <f_readdir>
c0018bfa:	89 84 24 5c 02 00 00 	mov    DWORD PTR [esp+0x25c],eax
c0018c01:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0018c08:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018c0f:	83 c0 16             	add    eax,0x16
c0018c12:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c15:	e8 06 7a fe ff       	call   c0000620 <strlen>
c0018c1a:	ba 00 00 00 00       	mov    edx,0x0
c0018c1f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018c23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0018c27:	0f b6 84 24 30 01 00 00 	movzx  eax,BYTE PTR [esp+0x130]
c0018c2f:	0f b6 c0             	movzx  eax,al
c0018c32:	83 e0 10             	and    eax,0x10
c0018c35:	74 09                	je     c0018c40 <FAT::readDir(void*, unsigned long, void*, int*)+0x8c>
c0018c37:	b8 02 00 00 00       	mov    eax,0x2
c0018c3c:	eb 0a                	jmp    c0018c48 <FAT::readDir(void*, unsigned long, void*, int*)+0x94>
c0018c3e:	66 90                	xchg   ax,ax
c0018c40:	b8 01 00 00 00       	mov    eax,0x1
c0018c45:	8d 76 00             	lea    esi,[esi+0x0]
c0018c48:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018c4c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018c53:	83 c0 16             	add    eax,0x16
c0018c56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018c5a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c5e:	83 c0 10             	add    eax,0x10
c0018c61:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c64:	e8 b7 7a fe ff       	call   c0000720 <strcpy>
c0018c69:	8b 84 24 7c 02 00 00 	mov    eax,DWORD PTR [esp+0x27c]
c0018c70:	89 84 24 58 02 00 00 	mov    DWORD PTR [esp+0x258],eax
c0018c77:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c7b:	89 84 24 54 02 00 00 	mov    DWORD PTR [esp+0x254],eax
c0018c82:	8b 84 24 78 02 00 00 	mov    eax,DWORD PTR [esp+0x278]
c0018c89:	89 84 24 50 02 00 00 	mov    DWORD PTR [esp+0x250],eax
c0018c90:	8b 84 24 58 02 00 00 	mov    eax,DWORD PTR [esp+0x258]
c0018c97:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0018c9e:	8b 84 24 54 02 00 00 	mov    eax,DWORD PTR [esp+0x254]
c0018ca5:	8b 94 24 58 02 00 00 	mov    edx,DWORD PTR [esp+0x258]
c0018cac:	8b 8c 24 50 02 00 00 	mov    ecx,DWORD PTR [esp+0x250]
c0018cb3:	89 c6                	mov    esi,eax
c0018cb5:	89 d7                	mov    edi,edx
c0018cb7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018cb9:	89 c8                	mov    eax,ecx
c0018cbb:	89 fa                	mov    edx,edi
c0018cbd:	89 f3                	mov    ebx,esi
c0018cbf:	89 9c 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],ebx
c0018cc6:	89 94 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],edx
c0018ccd:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0018cd4:	8b 84 24 80 02 00 00 	mov    eax,DWORD PTR [esp+0x280]
c0018cdb:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0018ce1:	0f b6 84 24 3e 01 00 00 	movzx  eax,BYTE PTR [esp+0x13e]
c0018ce9:	84 c0                	test   al,al
c0018ceb:	75 07                	jne    c0018cf4 <FAT::readDir(void*, unsigned long, void*, int*)+0x140>
c0018ced:	b8 07 00 00 00       	mov    eax,0x7
c0018cf2:	eb 1c                	jmp    c0018d10 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0018cf4:	8b 84 24 5c 02 00 00 	mov    eax,DWORD PTR [esp+0x25c]
c0018cfb:	85 c0                	test   eax,eax
c0018cfd:	75 09                	jne    c0018d08 <FAT::readDir(void*, unsigned long, void*, int*)+0x154>
c0018cff:	b8 00 00 00 00       	mov    eax,0x0
c0018d04:	eb 0a                	jmp    c0018d10 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0018d06:	66 90                	xchg   ax,ax
c0018d08:	b8 01 00 00 00       	mov    eax,0x1
c0018d0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d10:	81 c4 60 02 00 00    	add    esp,0x260
c0018d16:	5b                   	pop    ebx
c0018d17:	5e                   	pop    esi
c0018d18:	5f                   	pop    edi
c0018d19:	c3                   	ret    
c0018d1a:	66 90                	xchg   ax,ax

c0018d1c <FAT::read(void*, unsigned long, void*, int*)>:
c0018d1c:	83 ec 2c             	sub    esp,0x2c
c0018d1f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018d24:	74 0a                	je     c0018d30 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0018d26:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018d2b:	75 0b                	jne    c0018d38 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d30:	b8 04 00 00 00       	mov    eax,0x4
c0018d35:	eb 4d                	jmp    c0018d84 <FAT::read(void*, unsigned long, void*, int*)+0x68>
c0018d37:	90                   	nop
c0018d38:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d40:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018d48:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018d4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018d50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d57:	e8 1b b2 fe ff       	call   c0003f77 <f_read>
c0018d5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018d60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d64:	89 c2                	mov    edx,eax
c0018d66:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018d6a:	89 10                	mov    DWORD PTR [eax],edx
c0018d6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d70:	85 c0                	test   eax,eax
c0018d72:	75 08                	jne    c0018d7c <FAT::read(void*, unsigned long, void*, int*)+0x60>
c0018d74:	b8 00 00 00 00       	mov    eax,0x0
c0018d79:	eb 09                	jmp    c0018d84 <FAT::read(void*, unsigned long, void*, int*)+0x68>
c0018d7b:	90                   	nop
c0018d7c:	b8 01 00 00 00       	mov    eax,0x1
c0018d81:	8d 76 00             	lea    esi,[esi+0x0]
c0018d84:	83 c4 2c             	add    esp,0x2c
c0018d87:	c3                   	ret    

c0018d88 <FAT::write(void*, unsigned long, void*, int*)>:
c0018d88:	83 ec 2c             	sub    esp,0x2c
c0018d8b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018d90:	74 0a                	je     c0018d9c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0018d92:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018d97:	75 0b                	jne    c0018da4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018d99:	8d 76 00             	lea    esi,[esi+0x0]
c0018d9c:	b8 04 00 00 00       	mov    eax,0x4
c0018da1:	eb 4d                	jmp    c0018df0 <FAT::write(void*, unsigned long, void*, int*)+0x68>
c0018da3:	90                   	nop
c0018da4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018da8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018dac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018db0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018db4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018db8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018dbc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018dc0:	89 04 24             	mov    DWORD PTR [esp],eax
c0018dc3:	e8 8b b3 fe ff       	call   c0004153 <f_write>
c0018dc8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018dcc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018dd0:	89 c2                	mov    edx,eax
c0018dd2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018dd6:	89 10                	mov    DWORD PTR [eax],edx
c0018dd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018ddc:	85 c0                	test   eax,eax
c0018dde:	75 08                	jne    c0018de8 <FAT::write(void*, unsigned long, void*, int*)+0x60>
c0018de0:	b8 00 00 00 00       	mov    eax,0x0
c0018de5:	eb 09                	jmp    c0018df0 <FAT::write(void*, unsigned long, void*, int*)+0x68>
c0018de7:	90                   	nop
c0018de8:	b8 01 00 00 00       	mov    eax,0x1
c0018ded:	8d 76 00             	lea    esi,[esi+0x0]
c0018df0:	83 c4 2c             	add    esp,0x2c
c0018df3:	c3                   	ret    

c0018df4 <FAT::close(void*)>:
c0018df4:	83 ec 2c             	sub    esp,0x2c
c0018df7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018dfc:	75 0a                	jne    c0018e08 <FAT::close(void*)+0x14>
c0018dfe:	b8 04 00 00 00       	mov    eax,0x4
c0018e03:	eb 37                	jmp    c0018e3c <FAT::close(void*)+0x48>
c0018e05:	8d 76 00             	lea    esi,[esi+0x0]
c0018e08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018e0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e0f:	e8 29 b6 fe ff       	call   c000443d <f_close>
c0018e14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e18:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018e1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e1f:	e8 eb ec fe ff       	call   c0007b0f <free>
c0018e24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018e28:	85 c0                	test   eax,eax
c0018e2a:	75 08                	jne    c0018e34 <FAT::close(void*)+0x40>
c0018e2c:	b8 00 00 00 00       	mov    eax,0x0
c0018e31:	eb 09                	jmp    c0018e3c <FAT::close(void*)+0x48>
c0018e33:	90                   	nop
c0018e34:	b8 01 00 00 00       	mov    eax,0x1
c0018e39:	8d 76 00             	lea    esi,[esi+0x0]
c0018e3c:	83 c4 2c             	add    esp,0x2c
c0018e3f:	c3                   	ret    

c0018e40 <FAT::closeDir(void*)>:
c0018e40:	83 ec 2c             	sub    esp,0x2c
c0018e43:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018e48:	75 0a                	jne    c0018e54 <FAT::closeDir(void*)+0x14>
c0018e4a:	b8 04 00 00 00       	mov    eax,0x4
c0018e4f:	eb 37                	jmp    c0018e88 <FAT::closeDir(void*)+0x48>
c0018e51:	8d 76 00             	lea    esi,[esi+0x0]
c0018e54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018e58:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e5b:	e8 7d b8 fe ff       	call   c00046dd <f_closedir>
c0018e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e64:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018e68:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e6b:	e8 9f ec fe ff       	call   c0007b0f <free>
c0018e70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018e74:	85 c0                	test   eax,eax
c0018e76:	75 08                	jne    c0018e80 <FAT::closeDir(void*)+0x40>
c0018e78:	b8 00 00 00 00       	mov    eax,0x0
c0018e7d:	eb 09                	jmp    c0018e88 <FAT::closeDir(void*)+0x48>
c0018e7f:	90                   	nop
c0018e80:	b8 01 00 00 00       	mov    eax,0x1
c0018e85:	8d 76 00             	lea    esi,[esi+0x0]
c0018e88:	83 c4 2c             	add    esp,0x2c
c0018e8b:	c3                   	ret    

c0018e8c <FAT::seek(void*, unsigned long long)>:
c0018e8c:	83 ec 3c             	sub    esp,0x3c
c0018e8f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018e93:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018e97:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018e9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e9f:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0018ea4:	75 0a                	jne    c0018eb0 <FAT::seek(void*, unsigned long long)+0x24>
c0018ea6:	b8 04 00 00 00       	mov    eax,0x4
c0018eab:	eb 33                	jmp    c0018ee0 <FAT::seek(void*, unsigned long long)+0x54>
c0018ead:	8d 76 00             	lea    esi,[esi+0x0]
c0018eb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018eb4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018eb8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0018ebc:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ebf:	e8 a8 b5 fe ff       	call   c000446c <f_lseek>
c0018ec4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018ec8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018ecc:	85 c0                	test   eax,eax
c0018ece:	75 08                	jne    c0018ed8 <FAT::seek(void*, unsigned long long)+0x4c>
c0018ed0:	b8 00 00 00 00       	mov    eax,0x0
c0018ed5:	eb 09                	jmp    c0018ee0 <FAT::seek(void*, unsigned long long)+0x54>
c0018ed7:	90                   	nop
c0018ed8:	b8 01 00 00 00       	mov    eax,0x1
c0018edd:	8d 76 00             	lea    esi,[esi+0x0]
c0018ee0:	83 c4 3c             	add    esp,0x3c
c0018ee3:	c3                   	ret    

c0018ee4 <fatWrapperReadDisk>:
c0018ee4:	83 ec 3c             	sub    esp,0x3c
c0018ee7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018eeb:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018eef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018ef4:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018efb:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0018eff:	66 0f 6e 44 24 48    	movd   xmm0,DWORD PTR [esp+0x48]
c0018f05:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0018f09:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0018f0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018f11:	66 0f d6 44 24 04    	movq   QWORD PTR [esp+0x4],xmm0
c0018f17:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f1a:	e8 07 49 ff ff       	call   c000d826 <LogicalDisk::read(unsigned long long, int, void*)>
c0018f1f:	83 c4 3c             	add    esp,0x3c
c0018f22:	c3                   	ret    
c0018f23:	90                   	nop

c0018f24 <fatWrapperWriteDisk>:
c0018f24:	83 ec 3c             	sub    esp,0x3c
c0018f27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018f2b:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018f2f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018f34:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018f3b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0018f3f:	66 0f 6e 44 24 48    	movd   xmm0,DWORD PTR [esp+0x48]
c0018f45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0018f49:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0018f4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018f51:	66 0f d6 44 24 04    	movq   QWORD PTR [esp+0x4],xmm0
c0018f57:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f5a:	e8 33 49 ff ff       	call   c000d892 <LogicalDisk::write(unsigned long long, int, void*)>
c0018f5f:	83 c4 3c             	add    esp,0x3c
c0018f62:	c3                   	ret    
c0018f63:	90                   	nop

c0018f64 <fatWrapperIoctl>:
c0018f64:	53                   	push   ebx
c0018f65:	83 ec 38             	sub    esp,0x38
c0018f68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018f6c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018f70:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018f74:	88 d0                	mov    al,dl
c0018f76:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018f7a:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0018f7f:	75 37                	jne    c0018fb8 <fatWrapperIoctl+0x54>
c0018f81:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018f85:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018f89:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018f8e:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018f95:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018f9b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018fa1:	0f b7 d0             	movzx  edx,ax
c0018fa4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018fa8:	66 89 10             	mov    WORD PTR [eax],dx
c0018fab:	b8 00 00 00 00       	mov    eax,0x0
c0018fb0:	e9 c3 00 00 00       	jmp    c0019078 <fatWrapperIoctl+0x114>
c0018fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fb8:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0018fbd:	75 71                	jne    c0019030 <fatWrapperIoctl+0xcc>
c0018fbf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018fc3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018fc7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018fcc:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018fd3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018fd9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018fdf:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018fe5:	89 c8                	mov    eax,ecx
c0018fe7:	89 da                	mov    edx,ebx
c0018fe9:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018fed:	c1 e0 0a             	shl    eax,0xa
c0018ff0:	0f b6 4c 24 1c       	movzx  ecx,BYTE PTR [esp+0x1c]
c0018ff5:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0018ffc:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019002:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019008:	89 cb                	mov    ebx,ecx
c001900a:	c1 fb 1f             	sar    ebx,0x1f
c001900d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0019011:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0019015:	89 04 24             	mov    DWORD PTR [esp],eax
c0019018:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001901c:	e8 2f 5a 00 00       	call   c001ea50 <__udivdi3>
c0019021:	89 c2                	mov    edx,eax
c0019023:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019027:	89 10                	mov    DWORD PTR [eax],edx
c0019029:	b8 00 00 00 00       	mov    eax,0x0
c001902e:	eb 48                	jmp    c0019078 <fatWrapperIoctl+0x114>
c0019030:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0019035:	75 09                	jne    c0019040 <fatWrapperIoctl+0xdc>
c0019037:	b8 00 00 00 00       	mov    eax,0x0
c001903c:	eb 3a                	jmp    c0019078 <fatWrapperIoctl+0x114>
c001903e:	66 90                	xchg   ax,ax
c0019040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0019045:	75 19                	jne    c0019060 <fatWrapperIoctl+0xfc>
c0019047:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001904b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001904f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019053:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019059:	b8 00 00 00 00       	mov    eax,0x0
c001905e:	eb 18                	jmp    c0019078 <fatWrapperIoctl+0x114>
c0019060:	80 7c 24 18 04       	cmp    BYTE PTR [esp+0x18],0x4
c0019065:	75 09                	jne    c0019070 <fatWrapperIoctl+0x10c>
c0019067:	b8 00 00 00 00       	mov    eax,0x0
c001906c:	eb 0a                	jmp    c0019078 <fatWrapperIoctl+0x114>
c001906e:	66 90                	xchg   ax,ax
c0019070:	b8 04 00 00 00       	mov    eax,0x4
c0019075:	8d 76 00             	lea    esi,[esi+0x0]
c0019078:	83 c4 38             	add    esp,0x38
c001907b:	5b                   	pop    ebx
c001907c:	c3                   	ret    
c001907d:	90                   	nop
c001907e:	66 90                	xchg   ax,ax

c0019080 <FAT::FAT()>:
c0019080:	83 ec 2c             	sub    esp,0x2c
c0019083:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019087:	89 04 24             	mov    DWORD PTR [esp],eax
c001908a:	e8 15 1d ff ff       	call   c000ada4 <Filesystem::Filesystem()>
c001908f:	ba 8c 1b 02 c0       	mov    edx,0xc0021b8c
c0019094:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019098:	89 10                	mov    DWORD PTR [eax],edx
c001909a:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c00190a4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00190ac:	83 7c 24 1c 19       	cmp    DWORD PTR [esp+0x1c],0x19
c00190b1:	7f 15                	jg     c00190c8 <FAT::FAT()+0x48>
c00190b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00190b7:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c00190c2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00190c6:	eb e4                	jmp    c00190ac <FAT::FAT()+0x2c>
c00190c8:	90                   	nop
c00190c9:	83 c4 2c             	add    esp,0x2c
c00190cc:	c3                   	ret    
c00190cd:	90                   	nop
c00190ce:	66 90                	xchg   ax,ax

c00190d0 <FAT::fixFilepath(char*)>:
c00190d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00190d4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00190d7:	3c 40                	cmp    al,0x40
c00190d9:	7e 2d                	jle    c0019108 <FAT::fixFilepath(char*)+0x38>
c00190db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00190df:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00190e2:	2c 41                	sub    al,0x41
c00190e4:	88 c2                	mov    dl,al
c00190e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00190ea:	88 10                	mov    BYTE PTR [eax],dl
c00190ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00190f0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00190f3:	0f be c0             	movsx  eax,al
c00190f6:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00190fd:	04 30                	add    al,0x30
c00190ff:	88 c2                	mov    dl,al
c0019101:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019105:	88 10                	mov    BYTE PTR [eax],dl
c0019107:	90                   	nop
c0019108:	90                   	nop
c0019109:	c3                   	ret    
c001910a:	66 90                	xchg   ax,ax

c001910c <FAT::open(char const*, void**, FileOpenMode)>:
c001910c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019112:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001911a:	74 0c                	je     c0019128 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001911c:	83 bc 24 38 01 00 00 00 	cmp    DWORD PTR [esp+0x138],0x0
c0019124:	75 0e                	jne    c0019134 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019126:	66 90                	xchg   ax,ax
c0019128:	b8 04 00 00 00       	mov    eax,0x4
c001912d:	e9 02 01 00 00       	jmp    c0019234 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0019132:	66 90                	xchg   ax,ax
c0019134:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c001913b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001913f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019143:	89 04 24             	mov    DWORD PTR [esp],eax
c0019146:	e8 d5 75 fe ff       	call   c0000720 <strcpy>
c001914b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001914f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019153:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c001915a:	89 04 24             	mov    DWORD PTR [esp],eax
c001915d:	e8 6e ff ff ff       	call   c00190d0 <FAT::fixFilepath(char*)>
c0019162:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001916a:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019171:	83 e0 01             	and    eax,0x1
c0019174:	74 0a                	je     c0019180 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0019176:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001917e:	66 90                	xchg   ax,ax
c0019180:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019187:	83 e0 04             	and    eax,0x4
c001918a:	74 10                	je     c001919c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001918c:	80 8c 24 1f 01 00 00 30 	or     BYTE PTR [esp+0x11f],0x30
c0019194:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001919c:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00191a3:	83 e0 02             	and    eax,0x2
c00191a6:	74 08                	je     c00191b0 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c00191a8:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00191b0:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00191b7:	83 e0 08             	and    eax,0x8
c00191ba:	74 08                	je     c00191c4 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c00191bc:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00191c4:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00191cb:	83 e0 10             	and    eax,0x10
c00191ce:	74 08                	je     c00191d8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00191d0:	80 8c 24 1f 01 00 00 08 	or     BYTE PTR [esp+0x11f],0x8
c00191d8:	c7 04 24 28 02 00 00 	mov    DWORD PTR [esp],0x228
c00191df:	e8 18 e9 fe ff       	call   c0007afc <malloc>
c00191e4:	89 c2                	mov    edx,eax
c00191e6:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c00191ed:	89 10                	mov    DWORD PTR [eax],edx
c00191ef:	0f b6 94 24 1f 01 00 00 	movzx  edx,BYTE PTR [esp+0x11f]
c00191f7:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c00191fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0019200:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0019204:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019208:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001920c:	89 04 24             	mov    DWORD PTR [esp],eax
c001920f:	e8 99 aa fe ff       	call   c0003cad <f_open>
c0019214:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001921b:	83 bc 24 18 01 00 00 00 	cmp    DWORD PTR [esp+0x118],0x0
c0019223:	74 07                	je     c001922c <FAT::open(char const*, void**, FileOpenMode)+0x120>
c0019225:	b8 01 00 00 00       	mov    eax,0x1
c001922a:	eb 08                	jmp    c0019234 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c001922c:	b8 00 00 00 00       	mov    eax,0x0
c0019231:	8d 76 00             	lea    esi,[esi+0x0]
c0019234:	81 c4 2c 01 00 00    	add    esp,0x12c
c001923a:	c3                   	ret    
c001923b:	90                   	nop

c001923c <FAT::openDir(char const*, void**)>:
c001923c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019242:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001924a:	74 0c                	je     c0019258 <FAT::openDir(char const*, void**)+0x1c>
c001924c:	83 bc 24 38 01 00 00 00 	cmp    DWORD PTR [esp+0x138],0x0
c0019254:	75 0e                	jne    c0019264 <FAT::openDir(char const*, void**)+0x28>
c0019256:	66 90                	xchg   ax,ax
c0019258:	b8 04 00 00 00       	mov    eax,0x4
c001925d:	e9 82 00 00 00       	jmp    c00192e4 <FAT::openDir(char const*, void**)+0xa8>
c0019262:	66 90                	xchg   ax,ax
c0019264:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c001926b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001926f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019273:	89 04 24             	mov    DWORD PTR [esp],eax
c0019276:	e8 a5 74 fe ff       	call   c0000720 <strcpy>
c001927b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001927f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019283:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c001928a:	89 04 24             	mov    DWORD PTR [esp],eax
c001928d:	e8 3e fe ff ff       	call   c00190d0 <FAT::fixFilepath(char*)>
c0019292:	c7 04 24 30 00 00 00 	mov    DWORD PTR [esp],0x30
c0019299:	e8 5e e8 fe ff       	call   c0007afc <malloc>
c001929e:	89 c2                	mov    edx,eax
c00192a0:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c00192a7:	89 10                	mov    DWORD PTR [eax],edx
c00192a9:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c00192b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00192b2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00192b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00192ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00192bd:	e8 50 b3 fe ff       	call   c0004612 <f_opendir>
c00192c2:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
c00192c9:	83 bc 24 1c 01 00 00 00 	cmp    DWORD PTR [esp+0x11c],0x0
c00192d1:	74 09                	je     c00192dc <FAT::openDir(char const*, void**)+0xa0>
c00192d3:	b8 01 00 00 00       	mov    eax,0x1
c00192d8:	eb 0a                	jmp    c00192e4 <FAT::openDir(char const*, void**)+0xa8>
c00192da:	66 90                	xchg   ax,ax
c00192dc:	b8 00 00 00 00       	mov    eax,0x0
c00192e1:	8d 76 00             	lea    esi,[esi+0x0]
c00192e4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00192ea:	c3                   	ret    
c00192eb:	90                   	nop

c00192ec <FAT::stat(char const*, unsigned long long*, bool*)>:
c00192ec:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00192f2:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c00192fa:	75 0c                	jne    c0019308 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00192fc:	b8 04 00 00 00       	mov    eax,0x4
c0019301:	e9 d2 00 00 00       	jmp    c00193d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0019306:	66 90                	xchg   ax,ax
c0019308:	83 bc 24 48 02 00 00 00 	cmp    DWORD PTR [esp+0x248],0x0
c0019310:	75 0a                	jne    c001931c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019312:	b8 04 00 00 00       	mov    eax,0x4
c0019317:	e9 bc 00 00 00       	jmp    c00193d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001931c:	83 bc 24 4c 02 00 00 00 	cmp    DWORD PTR [esp+0x24c],0x0
c0019324:	75 0a                	jne    c0019330 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019326:	b8 04 00 00 00       	mov    eax,0x4
c001932b:	e9 a8 00 00 00       	jmp    c00193d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0019330:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019337:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001933b:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
c0019342:	89 04 24             	mov    DWORD PTR [esp],eax
c0019345:	e8 d6 73 fe ff       	call   c0000720 <strcpy>
c001934a:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
c0019351:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019355:	8b 84 24 40 02 00 00 	mov    eax,DWORD PTR [esp+0x240]
c001935c:	89 04 24             	mov    DWORD PTR [esp],eax
c001935f:	e8 6c fd ff ff       	call   c00190d0 <FAT::fixFilepath(char*)>
c0019364:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019368:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001936c:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
c0019373:	89 04 24             	mov    DWORD PTR [esp],eax
c0019376:	e8 16 b4 fe ff       	call   c0004791 <f_stat>
c001937b:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0019382:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0019389:	85 c0                	test   eax,eax
c001938b:	74 07                	je     c0019394 <FAT::stat(char const*, unsigned long long*, bool*)+0xa8>
c001938d:	83 f8 04             	cmp    eax,0x4
c0019390:	74 36                	je     c00193c8 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c0019392:	eb 3c                	jmp    c00193d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c0019394:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0019399:	0f b6 c0             	movzx  eax,al
c001939c:	83 e0 10             	and    eax,0x10
c001939f:	0f 95 c2             	setne  dl
c00193a2:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00193a9:	88 10                	mov    BYTE PTR [eax],dl
c00193ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00193af:	ba 00 00 00 00       	mov    edx,0x0
c00193b4:	8b 8c 24 48 02 00 00 	mov    ecx,DWORD PTR [esp+0x248]
c00193bb:	89 01                	mov    DWORD PTR [ecx],eax
c00193bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00193c0:	b8 00 00 00 00       	mov    eax,0x0
c00193c5:	eb 11                	jmp    c00193d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c00193c7:	90                   	nop
c00193c8:	b8 02 00 00 00       	mov    eax,0x2
c00193cd:	eb 09                	jmp    c00193d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c00193cf:	90                   	nop
c00193d0:	b8 01 00 00 00       	mov    eax,0x1
c00193d5:	8d 76 00             	lea    esi,[esi+0x0]
c00193d8:	81 c4 3c 02 00 00    	add    esp,0x23c
c00193de:	c3                   	ret    
c00193df:	90                   	nop

c00193e0 <FAT::unlink(char const*)>:
c00193e0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00193e6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00193ee:	75 08                	jne    c00193f8 <FAT::unlink(char const*)+0x18>
c00193f0:	b8 04 00 00 00       	mov    eax,0x4
c00193f5:	eb 5d                	jmp    c0019454 <FAT::unlink(char const*)+0x74>
c00193f7:	90                   	nop
c00193f8:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c00193ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019403:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019407:	89 04 24             	mov    DWORD PTR [esp],eax
c001940a:	e8 11 73 fe ff       	call   c0000720 <strcpy>
c001940f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019413:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019417:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c001941e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019421:	e8 aa fc ff ff       	call   c00190d0 <FAT::fixFilepath(char*)>
c0019426:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001942a:	89 04 24             	mov    DWORD PTR [esp],eax
c001942d:	e8 c6 b5 fe ff       	call   c00049f8 <f_unlink>
c0019432:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
c0019439:	8b 84 24 1c 01 00 00 	mov    eax,DWORD PTR [esp+0x11c]
c0019440:	85 c0                	test   eax,eax
c0019442:	75 08                	jne    c001944c <FAT::unlink(char const*)+0x6c>
c0019444:	b8 00 00 00 00       	mov    eax,0x0
c0019449:	eb 09                	jmp    c0019454 <FAT::unlink(char const*)+0x74>
c001944b:	90                   	nop
c001944c:	b8 01 00 00 00       	mov    eax,0x1
c0019451:	8d 76 00             	lea    esi,[esi+0x0]
c0019454:	81 c4 2c 01 00 00    	add    esp,0x12c
c001945a:	c3                   	ret    
c001945b:	90                   	nop

c001945c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001945c:	81 ec 3c 01 00 00    	sub    esp,0x13c
c0019462:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0019469:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c0019470:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019474:	88 d0                	mov    al,dl
c0019476:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001947a:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0019482:	75 0c                	jne    c0019490 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019484:	b8 04 00 00 00       	mov    eax,0x4
c0019489:	e9 32 01 00 00       	jmp    c00195c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x164>
c001948e:	66 90                	xchg   ax,ax
c0019490:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0019497:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001949b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001949f:	89 04 24             	mov    DWORD PTR [esp],eax
c00194a2:	e8 79 72 fe ff       	call   c0000720 <strcpy>
c00194a7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00194ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00194af:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00194b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00194b9:	e8 12 fc ff ff       	call   c00190d0 <FAT::fixFilepath(char*)>
c00194be:	c6 84 24 2f 01 00 00 00 	mov    BYTE PTR [esp+0x12f],0x0
c00194c6:	c6 84 24 2e 01 00 00 00 	mov    BYTE PTR [esp+0x12e],0x0
c00194ce:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00194d3:	83 e0 01             	and    eax,0x1
c00194d6:	74 08                	je     c00194e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00194d8:	80 8c 24 2f 01 00 00 01 	or     BYTE PTR [esp+0x12f],0x1
c00194e0:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00194e5:	83 e0 02             	and    eax,0x2
c00194e8:	74 0a                	je     c00194f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x98>
c00194ea:	80 8c 24 2f 01 00 00 20 	or     BYTE PTR [esp+0x12f],0x20
c00194f2:	66 90                	xchg   ax,ax
c00194f4:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00194f9:	83 e0 04             	and    eax,0x4
c00194fc:	74 0a                	je     c0019508 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c00194fe:	80 8c 24 2f 01 00 00 04 	or     BYTE PTR [esp+0x12f],0x4
c0019506:	66 90                	xchg   ax,ax
c0019508:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001950d:	83 e0 08             	and    eax,0x8
c0019510:	74 0a                	je     c001951c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc0>
c0019512:	80 8c 24 2f 01 00 00 02 	or     BYTE PTR [esp+0x12f],0x2
c001951a:	66 90                	xchg   ax,ax
c001951c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0019521:	83 e0 01             	and    eax,0x1
c0019524:	74 0a                	je     c0019530 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd4>
c0019526:	80 8c 24 2e 01 00 00 01 	or     BYTE PTR [esp+0x12e],0x1
c001952e:	66 90                	xchg   ax,ax
c0019530:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0019535:	83 e0 02             	and    eax,0x2
c0019538:	74 0a                	je     c0019544 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe8>
c001953a:	80 8c 24 2e 01 00 00 20 	or     BYTE PTR [esp+0x12e],0x20
c0019542:	66 90                	xchg   ax,ax
c0019544:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0019549:	83 e0 04             	and    eax,0x4
c001954c:	74 0a                	je     c0019558 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001954e:	80 8c 24 2e 01 00 00 04 	or     BYTE PTR [esp+0x12e],0x4
c0019556:	66 90                	xchg   ax,ax
c0019558:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001955d:	83 e0 08             	and    eax,0x8
c0019560:	74 0a                	je     c001956c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x110>
c0019562:	80 8c 24 2e 01 00 00 02 	or     BYTE PTR [esp+0x12e],0x2
c001956a:	66 90                	xchg   ax,ax
c001956c:	0f b6 84 24 2f 01 00 00 	movzx  eax,BYTE PTR [esp+0x12f]
c0019574:	08 84 24 2e 01 00 00 	or     BYTE PTR [esp+0x12e],al
c001957b:	0f b6 94 24 2e 01 00 00 	movzx  edx,BYTE PTR [esp+0x12e]
c0019583:	0f b6 84 24 2f 01 00 00 	movzx  eax,BYTE PTR [esp+0x12f]
c001958b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001958f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019593:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019597:	89 04 24             	mov    DWORD PTR [esp],eax
c001959a:	e8 ca b8 fe ff       	call   c0004e69 <f_chmod>
c001959f:	89 84 24 28 01 00 00 	mov    DWORD PTR [esp+0x128],eax
c00195a6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00195ad:	85 c0                	test   eax,eax
c00195af:	75 07                	jne    c00195b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x15c>
c00195b1:	b8 00 00 00 00       	mov    eax,0x0
c00195b6:	eb 08                	jmp    c00195c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x164>
c00195b8:	b8 01 00 00 00       	mov    eax,0x1
c00195bd:	8d 76 00             	lea    esi,[esi+0x0]
c00195c0:	81 c4 3c 01 00 00    	add    esp,0x13c
c00195c6:	c3                   	ret    
c00195c7:	90                   	nop

c00195c8 <FAT::rename(char const*, char const*)>:
c00195c8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00195ce:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00195d6:	74 0c                	je     c00195e4 <FAT::rename(char const*, char const*)+0x1c>
c00195d8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00195e0:	75 0e                	jne    c00195f0 <FAT::rename(char const*, char const*)+0x28>
c00195e2:	66 90                	xchg   ax,ax
c00195e4:	b8 04 00 00 00       	mov    eax,0x4
c00195e9:	e9 9e 00 00 00       	jmp    c001968c <FAT::rename(char const*, char const*)+0xc4>
c00195ee:	66 90                	xchg   ax,ax
c00195f0:	8b 84 24 34 02 00 00 	mov    eax,DWORD PTR [esp+0x234]
c00195f7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00195fb:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0019602:	89 04 24             	mov    DWORD PTR [esp],eax
c0019605:	e8 16 71 fe ff       	call   c0000720 <strcpy>
c001960a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0019611:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019615:	8b 84 24 30 02 00 00 	mov    eax,DWORD PTR [esp+0x230]
c001961c:	89 04 24             	mov    DWORD PTR [esp],eax
c001961f:	e8 ac fa ff ff       	call   c00190d0 <FAT::fixFilepath(char*)>
c0019624:	8b 84 24 38 02 00 00 	mov    eax,DWORD PTR [esp+0x238]
c001962b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001962f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019633:	89 04 24             	mov    DWORD PTR [esp],eax
c0019636:	e8 e5 70 fe ff       	call   c0000720 <strcpy>
c001963b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001963f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019643:	8b 84 24 30 02 00 00 	mov    eax,DWORD PTR [esp+0x230]
c001964a:	89 04 24             	mov    DWORD PTR [esp],eax
c001964d:	e8 7e fa ff ff       	call   c00190d0 <FAT::fixFilepath(char*)>
c0019652:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019656:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001965a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0019661:	89 04 24             	mov    DWORD PTR [esp],eax
c0019664:	e8 48 b6 fe ff       	call   c0004cb1 <f_rename>
c0019669:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019670:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019677:	85 c0                	test   eax,eax
c0019679:	75 09                	jne    c0019684 <FAT::rename(char const*, char const*)+0xbc>
c001967b:	b8 00 00 00 00       	mov    eax,0x0
c0019680:	eb 0a                	jmp    c001968c <FAT::rename(char const*, char const*)+0xc4>
c0019682:	66 90                	xchg   ax,ax
c0019684:	b8 01 00 00 00       	mov    eax,0x1
c0019689:	8d 76 00             	lea    esi,[esi+0x0]
c001968c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019692:	c3                   	ret    
c0019693:	90                   	nop

c0019694 <FAT::mkdir(char const*)>:
c0019694:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001969a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00196a2:	75 08                	jne    c00196ac <FAT::mkdir(char const*)+0x18>
c00196a4:	b8 04 00 00 00       	mov    eax,0x4
c00196a9:	eb 5d                	jmp    c0019708 <FAT::mkdir(char const*)+0x74>
c00196ab:	90                   	nop
c00196ac:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c00196b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00196b7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00196bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00196be:	e8 5d 70 fe ff       	call   c0000720 <strcpy>
c00196c3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00196c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00196cb:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c00196d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00196d5:	e8 f6 f9 ff ff       	call   c00190d0 <FAT::fixFilepath(char*)>
c00196da:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00196de:	89 04 24             	mov    DWORD PTR [esp],eax
c00196e1:	e8 30 b4 fe ff       	call   c0004b16 <f_mkdir>
c00196e6:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
c00196ed:	8b 84 24 1c 01 00 00 	mov    eax,DWORD PTR [esp+0x11c]
c00196f4:	85 c0                	test   eax,eax
c00196f6:	75 08                	jne    c0019700 <FAT::mkdir(char const*)+0x6c>
c00196f8:	b8 00 00 00 00       	mov    eax,0x0
c00196fd:	eb 09                	jmp    c0019708 <FAT::mkdir(char const*)+0x74>
c00196ff:	90                   	nop
c0019700:	b8 01 00 00 00       	mov    eax,0x1
c0019705:	8d 76 00             	lea    esi,[esi+0x0]
c0019708:	81 c4 2c 01 00 00    	add    esp,0x12c
c001970e:	c3                   	ret    
c001970f:	90                   	nop

c0019710 <FAT::exists(char const*)>:
c0019710:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0019716:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001971d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019721:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019725:	89 04 24             	mov    DWORD PTR [esp],eax
c0019728:	e8 f3 6f fe ff       	call   c0000720 <strcpy>
c001972d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019731:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019735:	8b 84 24 40 02 00 00 	mov    eax,DWORD PTR [esp+0x240]
c001973c:	89 04 24             	mov    DWORD PTR [esp],eax
c001973f:	e8 8c f9 ff ff       	call   c00190d0 <FAT::fixFilepath(char*)>
c0019744:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001974b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001974f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019753:	89 04 24             	mov    DWORD PTR [esp],eax
c0019756:	e8 36 b0 fe ff       	call   c0004791 <f_stat>
c001975b:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0019762:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0019769:	85 c0                	test   eax,eax
c001976b:	75 07                	jne    c0019774 <FAT::exists(char const*)+0x64>
c001976d:	b0 01                	mov    al,0x1
c001976f:	eb 07                	jmp    c0019778 <FAT::exists(char const*)+0x68>
c0019771:	8d 76 00             	lea    esi,[esi+0x0]
c0019774:	b0 00                	mov    al,0x0
c0019776:	66 90                	xchg   ax,ax
c0019778:	81 c4 3c 02 00 00    	add    esp,0x23c
c001977e:	c3                   	ret    
c001977f:	90                   	nop

c0019780 <isoReadDiscSectorHelper>:
c0019780:	83 ec 4c             	sub    esp,0x4c
c0019783:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0019787:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001978b:	0f be 44 24 2c       	movsx  eax,BYTE PTR [esp+0x2c]
c0019790:	83 e8 41             	sub    eax,0x41
c0019793:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c001979a:	66 0f 6e 44 24 54    	movd   xmm0,DWORD PTR [esp+0x54]
c00197a0:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00197a4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00197a8:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00197ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00197b0:	66 0f d6 44 24 04    	movq   QWORD PTR [esp+0x4],xmm0
c00197b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00197b9:	e8 68 40 ff ff       	call   c000d826 <LogicalDisk::read(unsigned long long, int, void*)>
c00197be:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00197c2:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c00197c7:	74 0b                	je     c00197d4 <isoReadDiscSectorHelper+0x54>
c00197c9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00197cd:	c1 e0 0b             	shl    eax,0xb
c00197d0:	eb 0a                	jmp    c00197dc <isoReadDiscSectorHelper+0x5c>
c00197d2:	66 90                	xchg   ax,ax
c00197d4:	b8 00 00 00 00       	mov    eax,0x0
c00197d9:	8d 76 00             	lea    esi,[esi+0x0]
c00197dc:	83 c4 4c             	add    esp,0x4c
c00197df:	c3                   	ret    

c00197e0 <iso_kprintf>:
c00197e0:	83 ec 1c             	sub    esp,0x1c
c00197e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00197eb:	c7 04 24 99 15 02 c0 	mov    DWORD PTR [esp],0xc0021599
c00197f2:	e8 7f 12 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00197f7:	90                   	nop
c00197f8:	83 c4 1c             	add    esp,0x1c
c00197fb:	c3                   	ret    

c00197fc <iso_kprintfd>:
c00197fc:	83 ec 1c             	sub    esp,0x1c
c00197ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019803:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019807:	c7 04 24 3b 04 02 c0 	mov    DWORD PTR [esp],0xc002043b
c001980e:	e8 63 12 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0019813:	90                   	nop
c0019814:	83 c4 1c             	add    esp,0x1c
c0019817:	c3                   	ret    

c0019818 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019818:	b8 08 00 00 00       	mov    eax,0x8
c001981d:	c3                   	ret    

c001981e <ISO9660::getName()>:
c001981e:	b8 ec 1b 02 c0       	mov    eax,0xc0021bec
c0019823:	c3                   	ret    

c0019824 <ISO9660::closeDir(void*)>:
c0019824:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019828:	8b 00                	mov    eax,DWORD PTR [eax]
c001982a:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001982d:	90                   	nop

c001982e <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001982e:	b8 01 00 00 00       	mov    eax,0x1
c0019833:	c3                   	ret    

c0019834 <ISO9660::unlink(char const*)>:
c0019834:	b8 01 00 00 00       	mov    eax,0x1
c0019839:	c3                   	ret    

c001983a <ISO9660::write(void*, unsigned long, void*, int*)>:
c001983a:	b8 03 00 00 00       	mov    eax,0x3
c001983f:	c3                   	ret    

c0019840 <ISO9660::rename(char const*, char const*)>:
c0019840:	b8 01 00 00 00       	mov    eax,0x1
c0019845:	c3                   	ret    

c0019846 <ISO9660::mkdir(char const*)>:
c0019846:	b8 01 00 00 00       	mov    eax,0x1
c001984b:	c3                   	ret    

c001984c <ISO9660::~ISO9660()>:
c001984c:	83 ec 1c             	sub    esp,0x1c
c001984f:	ba 2c 1d 02 c0       	mov    edx,0xc0021d2c
c0019854:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019858:	89 10                	mov    DWORD PTR [eax],edx
c001985a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001985e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019861:	e8 62 15 ff ff       	call   c000adc8 <Filesystem::~Filesystem()>
c0019866:	90                   	nop
c0019867:	83 c4 1c             	add    esp,0x1c
c001986a:	c3                   	ret    
c001986b:	90                   	nop

c001986c <ISO9660::~ISO9660()>:
c001986c:	83 ec 1c             	sub    esp,0x1c
c001986f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019873:	89 04 24             	mov    DWORD PTR [esp],eax
c0019876:	e8 d1 ff ff ff       	call   c001984c <ISO9660::~ISO9660()>
c001987b:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c0019883:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019887:	89 04 24             	mov    DWORD PTR [esp],eax
c001988a:	e8 cd 10 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001988f:	83 c4 1c             	add    esp,0x1c
c0019892:	c3                   	ret    
c0019893:	90                   	nop

c0019894 <ISO9660::exists(char const*)>:
c0019894:	83 ec 18             	sub    esp,0x18
c0019897:	68 07 1c 02 c0       	push   0xc0021c07
c001989c:	e8 94 75 ff ff       	call   c0010e35 <KePanic(char const*)>
c00198a1:	31 c0                	xor    eax,eax
c00198a3:	83 c4 1c             	add    esp,0x1c
c00198a6:	c3                   	ret    
c00198a7:	90                   	nop

c00198a8 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00198a8:	56                   	push   esi
c00198a9:	53                   	push   ebx
c00198aa:	53                   	push   ebx
c00198ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00198af:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00198b3:	85 db                	test   ebx,ebx
c00198b5:	0f 84 c2 00 00 00    	je     c001997d <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c00198bb:	85 f6                	test   esi,esi
c00198bd:	0f 84 ba 00 00 00    	je     c001997d <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c00198c3:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00198c8:	b8 03 00 00 00       	mov    eax,0x3
c00198cd:	0f 85 af 00 00 00    	jne    c0019982 <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c00198d3:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c00198d8:	38 03                	cmp    BYTE PTR [ebx],al
c00198da:	74 1b                	je     c00198f7 <ISO9660::open(char const*, void**, FileOpenMode)+0x4f>
c00198dc:	84 c0                	test   al,al
c00198de:	74 10                	je     c00198f0 <ISO9660::open(char const*, void**, FileOpenMode)+0x48>
c00198e0:	83 ec 0c             	sub    esp,0xc
c00198e3:	68 25 1c 02 c0       	push   0xc0021c25
c00198e8:	e8 48 75 ff ff       	call   c0010e35 <KePanic(char const*)>
c00198ed:	83 c4 10             	add    esp,0x10
c00198f0:	8a 03                	mov    al,BYTE PTR [ebx]
c00198f2:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00198f7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00198fa:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019901:	85 c0                	test   eax,eax
c0019903:	74 09                	je     c001990e <ISO9660::open(char const*, void**, FileOpenMode)+0x66>
c0019905:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001990c:	74 48                	je     c0019956 <ISO9660::open(char const*, void**, FileOpenMode)+0xae>
c001990e:	83 ec 0c             	sub    esp,0xc
c0019911:	68 35 1c 02 c0       	push   0xc0021c35
c0019916:	e8 5b 11 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001991b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001991e:	83 c4 10             	add    esp,0x10
c0019921:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019928:	85 c0                	test   eax,eax
c001992a:	74 17                	je     c0019943 <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c001992c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019933:	83 ec 0c             	sub    esp,0xc
c0019936:	68 55 1c 02 c0       	push   0xc0021c55
c001993b:	e8 36 11 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0019940:	83 c4 10             	add    esp,0x10
c0019943:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001994a:	83 ec 0c             	sub    esp,0xc
c001994d:	50                   	push   eax
c001994e:	e8 ac d0 fe ff       	call   c00069ff <init_percd>
c0019953:	83 c4 10             	add    esp,0x10
c0019956:	51                   	push   ecx
c0019957:	83 c3 03             	add    ebx,0x3
c001995a:	51                   	push   ecx
c001995b:	6a 00                	push   0x0
c001995d:	53                   	push   ebx
c001995e:	e8 5f cb fe ff       	call   c00064c2 <iso_open>
c0019963:	83 c4 10             	add    esp,0x10
c0019966:	89 c2                	mov    edx,eax
c0019968:	b8 01 00 00 00       	mov    eax,0x1
c001996d:	83 fa ff             	cmp    edx,0xffffffff
c0019970:	74 10                	je     c0019982 <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0019972:	83 c2 32             	add    edx,0x32
c0019975:	31 c0                	xor    eax,eax
c0019977:	01 d2                	add    edx,edx
c0019979:	89 16                	mov    DWORD PTR [esi],edx
c001997b:	eb 05                	jmp    c0019982 <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c001997d:	b8 04 00 00 00       	mov    eax,0x4
c0019982:	5a                   	pop    edx
c0019983:	5b                   	pop    ebx
c0019984:	5e                   	pop    esi
c0019985:	c3                   	ret    

c0019986 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019986:	53                   	push   ebx
c0019987:	83 ec 08             	sub    esp,0x8
c001998a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001998e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019992:	85 c0                	test   eax,eax
c0019994:	74 2d                	je     c00199c3 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019996:	85 db                	test   ebx,ebx
c0019998:	74 29                	je     c00199c3 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001999a:	52                   	push   edx
c001999b:	b9 02 00 00 00       	mov    ecx,0x2
c00199a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00199a4:	99                   	cdq    
c00199a5:	f7 f9                	idiv   ecx
c00199a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00199ab:	83 e8 32             	sub    eax,0x32
c00199ae:	50                   	push   eax
c00199af:	e8 b4 cb fe ff       	call   c0006568 <iso_read>
c00199b4:	83 c4 10             	add    esp,0x10
c00199b7:	89 03                	mov    DWORD PTR [ebx],eax
c00199b9:	09 d0                	or     eax,edx
c00199bb:	0f 94 c0             	sete   al
c00199be:	0f b6 c0             	movzx  eax,al
c00199c1:	eb 05                	jmp    c00199c8 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c00199c3:	b8 04 00 00 00       	mov    eax,0x4
c00199c8:	83 c4 08             	add    esp,0x8
c00199cb:	5b                   	pop    ebx
c00199cc:	c3                   	ret    
c00199cd:	90                   	nop

c00199ce <ISO9660::seek(void*, unsigned long long)>:
c00199ce:	57                   	push   edi
c00199cf:	b8 04 00 00 00       	mov    eax,0x4
c00199d4:	56                   	push   esi
c00199d5:	51                   	push   ecx
c00199d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00199da:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00199de:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00199e2:	85 d2                	test   edx,edx
c00199e4:	74 28                	je     c0019a0e <ISO9660::seek(void*, unsigned long long)+0x40>
c00199e6:	89 d0                	mov    eax,edx
c00199e8:	b9 02 00 00 00       	mov    ecx,0x2
c00199ed:	6a 00                	push   0x0
c00199ef:	99                   	cdq    
c00199f0:	f7 f9                	idiv   ecx
c00199f2:	57                   	push   edi
c00199f3:	56                   	push   esi
c00199f4:	83 e8 32             	sub    eax,0x32
c00199f7:	50                   	push   eax
c00199f8:	e8 81 cc fe ff       	call   c000667e <iso_seek>
c00199fd:	83 c4 10             	add    esp,0x10
c0019a00:	31 c6                	xor    esi,eax
c0019a02:	31 d7                	xor    edi,edx
c0019a04:	89 f0                	mov    eax,esi
c0019a06:	09 f8                	or     eax,edi
c0019a08:	0f 95 c0             	setne  al
c0019a0b:	0f b6 c0             	movzx  eax,al
c0019a0e:	5a                   	pop    edx
c0019a0f:	5e                   	pop    esi
c0019a10:	5f                   	pop    edi
c0019a11:	c3                   	ret    

c0019a12 <ISO9660::tell(void*, unsigned long long*)>:
c0019a12:	53                   	push   ebx
c0019a13:	83 ec 08             	sub    esp,0x8
c0019a16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a1a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019a1e:	85 c0                	test   eax,eax
c0019a20:	74 24                	je     c0019a46 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019a22:	85 db                	test   ebx,ebx
c0019a24:	74 20                	je     c0019a46 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019a26:	b9 02 00 00 00       	mov    ecx,0x2
c0019a2b:	99                   	cdq    
c0019a2c:	f7 f9                	idiv   ecx
c0019a2e:	83 ec 0c             	sub    esp,0xc
c0019a31:	83 e8 32             	sub    eax,0x32
c0019a34:	50                   	push   eax
c0019a35:	e8 c8 cc fe ff       	call   c0006702 <iso_tell>
c0019a3a:	83 c4 10             	add    esp,0x10
c0019a3d:	89 03                	mov    DWORD PTR [ebx],eax
c0019a3f:	31 c0                	xor    eax,eax
c0019a41:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019a44:	eb 05                	jmp    c0019a4b <ISO9660::tell(void*, unsigned long long*)+0x39>
c0019a46:	b8 04 00 00 00       	mov    eax,0x4
c0019a4b:	83 c4 08             	add    esp,0x8
c0019a4e:	5b                   	pop    ebx
c0019a4f:	c3                   	ret    

c0019a50 <ISO9660::stat(void*, unsigned long long*)>:
c0019a50:	56                   	push   esi
c0019a51:	53                   	push   ebx
c0019a52:	83 ec 10             	sub    esp,0x10
c0019a55:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019a59:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0019a5d:	68 79 1c 02 c0       	push   0xc0021c79
c0019a62:	e8 0f 10 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0019a67:	83 c4 10             	add    esp,0x10
c0019a6a:	85 db                	test   ebx,ebx
c0019a6c:	74 2a                	je     c0019a98 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019a6e:	85 f6                	test   esi,esi
c0019a70:	74 26                	je     c0019a98 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019a72:	89 d8                	mov    eax,ebx
c0019a74:	b9 02 00 00 00       	mov    ecx,0x2
c0019a79:	99                   	cdq    
c0019a7a:	83 ec 0c             	sub    esp,0xc
c0019a7d:	f7 f9                	idiv   ecx
c0019a7f:	83 e8 32             	sub    eax,0x32
c0019a82:	50                   	push   eax
c0019a83:	e8 ab cc fe ff       	call   c0006733 <iso_total>
c0019a88:	83 c4 10             	add    esp,0x10
c0019a8b:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019a92:	89 06                	mov    DWORD PTR [esi],eax
c0019a94:	31 c0                	xor    eax,eax
c0019a96:	eb 05                	jmp    c0019a9d <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0019a98:	b8 04 00 00 00       	mov    eax,0x4
c0019a9d:	5a                   	pop    edx
c0019a9e:	5b                   	pop    ebx
c0019a9f:	5e                   	pop    esi
c0019aa0:	c3                   	ret    
c0019aa1:	90                   	nop

c0019aa2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019aa2:	55                   	push   ebp
c0019aa3:	57                   	push   edi
c0019aa4:	56                   	push   esi
c0019aa5:	53                   	push   ebx
c0019aa6:	83 ec 18             	sub    esp,0x18
c0019aa9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019aad:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019ab1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019ab5:	68 81 1c 02 c0       	push   0xc0021c81
c0019aba:	e8 b7 0f ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0019abf:	83 c4 10             	add    esp,0x10
c0019ac2:	85 ff                	test   edi,edi
c0019ac4:	0f 94 c2             	sete   dl
c0019ac7:	85 f6                	test   esi,esi
c0019ac9:	0f 94 c0             	sete   al
c0019acc:	08 c2                	or     dl,al
c0019ace:	0f 85 d5 00 00 00    	jne    c0019ba9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c0019ad4:	85 db                	test   ebx,ebx
c0019ad6:	0f 84 cd 00 00 00    	je     c0019ba9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c0019adc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019adf:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0019ae5:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019aec:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c0019af1:	38 03                	cmp    BYTE PTR [ebx],al
c0019af3:	74 1b                	je     c0019b10 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x6e>
c0019af5:	84 c0                	test   al,al
c0019af7:	74 10                	je     c0019b09 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x67>
c0019af9:	83 ec 0c             	sub    esp,0xc
c0019afc:	68 25 1c 02 c0       	push   0xc0021c25
c0019b01:	e8 2f 73 ff ff       	call   c0010e35 <KePanic(char const*)>
c0019b06:	83 c4 10             	add    esp,0x10
c0019b09:	8a 03                	mov    al,BYTE PTR [ebx]
c0019b0b:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019b10:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019b13:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019b1a:	85 c0                	test   eax,eax
c0019b1c:	74 09                	je     c0019b27 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x85>
c0019b1e:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019b25:	74 51                	je     c0019b78 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd6>
c0019b27:	83 ec 0c             	sub    esp,0xc
c0019b2a:	68 89 1c 02 c0       	push   0xc0021c89
c0019b2f:	e8 42 0f ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0019b34:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019b37:	83 c4 10             	add    esp,0x10
c0019b3a:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c0019b42:	74 21                	je     c0019b65 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0019b44:	83 ec 0c             	sub    esp,0xc
c0019b47:	68 a9 1c 02 c0       	push   0xc0021ca9
c0019b4c:	e8 25 0f ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0019b51:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019b54:	83 c4 10             	add    esp,0x10
c0019b57:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019b5e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019b65:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019b6c:	83 ec 0c             	sub    esp,0xc
c0019b6f:	50                   	push   eax
c0019b70:	e8 8a ce fe ff       	call   c00069ff <init_percd>
c0019b75:	83 c4 10             	add    esp,0x10
c0019b78:	52                   	push   edx
c0019b79:	83 c3 03             	add    ebx,0x3
c0019b7c:	52                   	push   edx
c0019b7d:	6a 00                	push   0x0
c0019b7f:	53                   	push   ebx
c0019b80:	e8 3d c9 fe ff       	call   c00064c2 <iso_open>
c0019b85:	83 c4 10             	add    esp,0x10
c0019b88:	83 f8 ff             	cmp    eax,0xffffffff
c0019b8b:	89 c5                	mov    ebp,eax
c0019b8d:	75 21                	jne    c0019bb0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x10e>
c0019b8f:	50                   	push   eax
c0019b90:	50                   	push   eax
c0019b91:	6a 01                	push   0x1
c0019b93:	53                   	push   ebx
c0019b94:	e8 29 c9 fe ff       	call   c00064c2 <iso_open>
c0019b99:	83 c4 10             	add    esp,0x10
c0019b9c:	ba 02 00 00 00       	mov    edx,0x2
c0019ba1:	40                   	inc    eax
c0019ba2:	74 2b                	je     c0019bcf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0019ba4:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0019ba7:	eb 24                	jmp    c0019bcd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12b>
c0019ba9:	ba 04 00 00 00       	mov    edx,0x4
c0019bae:	eb 1f                	jmp    c0019bcf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0019bb0:	83 ec 0c             	sub    esp,0xc
c0019bb3:	50                   	push   eax
c0019bb4:	e8 7a cb fe ff       	call   c0006733 <iso_total>
c0019bb9:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019bc0:	89 07                	mov    DWORD PTR [edi],eax
c0019bc2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019bc5:	e8 80 c9 fe ff       	call   c000654a <iso_close>
c0019bca:	83 c4 10             	add    esp,0x10
c0019bcd:	31 d2                	xor    edx,edx
c0019bcf:	83 c4 0c             	add    esp,0xc
c0019bd2:	89 d0                	mov    eax,edx
c0019bd4:	5b                   	pop    ebx
c0019bd5:	5e                   	pop    esi
c0019bd6:	5f                   	pop    edi
c0019bd7:	5d                   	pop    ebp
c0019bd8:	c3                   	ret    
c0019bd9:	90                   	nop

c0019bda <ISO9660::close(void*)>:
c0019bda:	83 ec 0c             	sub    esp,0xc
c0019bdd:	b8 04 00 00 00       	mov    eax,0x4
c0019be2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019be6:	85 d2                	test   edx,edx
c0019be8:	74 1b                	je     c0019c05 <ISO9660::close(void*)+0x2b>
c0019bea:	89 d0                	mov    eax,edx
c0019bec:	b9 02 00 00 00       	mov    ecx,0x2
c0019bf1:	99                   	cdq    
c0019bf2:	83 ec 0c             	sub    esp,0xc
c0019bf5:	f7 f9                	idiv   ecx
c0019bf7:	83 e8 32             	sub    eax,0x32
c0019bfa:	50                   	push   eax
c0019bfb:	e8 4a c9 fe ff       	call   c000654a <iso_close>
c0019c00:	83 c4 10             	add    esp,0x10
c0019c03:	31 c0                	xor    eax,eax
c0019c05:	83 c4 0c             	add    esp,0xc
c0019c08:	c3                   	ret    
c0019c09:	90                   	nop

c0019c0a <ISO9660::openDir(char const*, void**)>:
c0019c0a:	56                   	push   esi
c0019c0b:	53                   	push   ebx
c0019c0c:	50                   	push   eax
c0019c0d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c11:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019c15:	85 db                	test   ebx,ebx
c0019c17:	0f 84 b5 00 00 00    	je     c0019cd2 <ISO9660::openDir(char const*, void**)+0xc8>
c0019c1d:	85 f6                	test   esi,esi
c0019c1f:	0f 84 ad 00 00 00    	je     c0019cd2 <ISO9660::openDir(char const*, void**)+0xc8>
c0019c25:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c0019c2a:	38 03                	cmp    BYTE PTR [ebx],al
c0019c2c:	74 1b                	je     c0019c49 <ISO9660::openDir(char const*, void**)+0x3f>
c0019c2e:	84 c0                	test   al,al
c0019c30:	74 10                	je     c0019c42 <ISO9660::openDir(char const*, void**)+0x38>
c0019c32:	83 ec 0c             	sub    esp,0xc
c0019c35:	68 25 1c 02 c0       	push   0xc0021c25
c0019c3a:	e8 f6 71 ff ff       	call   c0010e35 <KePanic(char const*)>
c0019c3f:	83 c4 10             	add    esp,0x10
c0019c42:	8a 03                	mov    al,BYTE PTR [ebx]
c0019c44:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019c49:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019c4c:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019c53:	85 c0                	test   eax,eax
c0019c55:	74 10                	je     c0019c67 <ISO9660::openDir(char const*, void**)+0x5d>
c0019c57:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019c5e:	74 1a                	je     c0019c7a <ISO9660::openDir(char const*, void**)+0x70>
c0019c60:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019c67:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019c6e:	83 ec 0c             	sub    esp,0xc
c0019c71:	50                   	push   eax
c0019c72:	e8 88 cd fe ff       	call   c00069ff <init_percd>
c0019c77:	83 c4 10             	add    esp,0x10
c0019c7a:	50                   	push   eax
c0019c7b:	83 c3 03             	add    ebx,0x3
c0019c7e:	50                   	push   eax
c0019c7f:	6a 01                	push   0x1
c0019c81:	53                   	push   ebx
c0019c82:	e8 3b c8 fe ff       	call   c00064c2 <iso_open>
c0019c87:	83 c4 10             	add    esp,0x10
c0019c8a:	83 f8 ff             	cmp    eax,0xffffffff
c0019c8d:	89 c3                	mov    ebx,eax
c0019c8f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019c94:	75 1c                	jne    c0019cb2 <ISO9660::openDir(char const*, void**)+0xa8>
c0019c96:	53                   	push   ebx
c0019c97:	53                   	push   ebx
c0019c98:	68 cd 1c 02 c0       	push   0xc0021ccd
c0019c9d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019ca3:	e8 1a ee fe ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0019ca8:	83 c4 10             	add    esp,0x10
c0019cab:	b8 01 00 00 00       	mov    eax,0x1
c0019cb0:	eb 25                	jmp    c0019cd7 <ISO9660::openDir(char const*, void**)+0xcd>
c0019cb2:	51                   	push   ecx
c0019cb3:	01 db                	add    ebx,ebx
c0019cb5:	51                   	push   ecx
c0019cb6:	83 c3 65             	add    ebx,0x65
c0019cb9:	68 e0 1c 02 c0       	push   0xc0021ce0
c0019cbe:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019cc4:	e8 f9 ed fe ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0019cc9:	83 c4 10             	add    esp,0x10
c0019ccc:	31 c0                	xor    eax,eax
c0019cce:	89 1e                	mov    DWORD PTR [esi],ebx
c0019cd0:	eb 05                	jmp    c0019cd7 <ISO9660::openDir(char const*, void**)+0xcd>
c0019cd2:	b8 04 00 00 00       	mov    eax,0x4
c0019cd7:	5a                   	pop    edx
c0019cd8:	5b                   	pop    ebx
c0019cd9:	5e                   	pop    esi
c0019cda:	c3                   	ret    
c0019cdb:	90                   	nop

c0019cdc <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0019cdc:	55                   	push   ebp
c0019cdd:	57                   	push   edi
c0019cde:	56                   	push   esi
c0019cdf:	53                   	push   ebx
c0019ce0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ce6:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c0019ced:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0019cf4:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c0019cfb:	85 db                	test   ebx,ebx
c0019cfd:	0f 84 e4 00 00 00    	je     c0019de7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0019d03:	85 ed                	test   ebp,ebp
c0019d05:	0f 84 dc 00 00 00    	je     c0019de7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0019d0b:	83 ec 0c             	sub    esp,0xc
c0019d0e:	68 f3 1c 02 c0       	push   0xc0021cf3
c0019d13:	e8 5e 0d ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0019d18:	89 d8                	mov    eax,ebx
c0019d1a:	b9 02 00 00 00       	mov    ecx,0x2
c0019d1f:	99                   	cdq    
c0019d20:	f7 f9                	idiv   ecx
c0019d22:	83 e8 32             	sub    eax,0x32
c0019d25:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d28:	e8 57 ca fe ff       	call   c0006784 <iso_readdir>
c0019d2d:	83 c4 10             	add    esp,0x10
c0019d30:	85 c0                	test   eax,eax
c0019d32:	89 c3                	mov    ebx,eax
c0019d34:	75 38                	jne    c0019d6e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0019d36:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019d3b:	53                   	push   ebx
c0019d3c:	53                   	push   ebx
c0019d3d:	68 fe 1c 02 c0       	push   0xc0021cfe
c0019d42:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019d48:	e8 75 ed fe ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0019d4d:	83 c4 0c             	add    esp,0xc
c0019d50:	68 10 01 00 00       	push   0x110
c0019d55:	6a 00                	push   0x0
c0019d57:	57                   	push   edi
c0019d58:	e8 23 68 fe ff       	call   c0000580 <memset>
c0019d5d:	83 c4 10             	add    esp,0x10
c0019d60:	b8 01 00 00 00       	mov    eax,0x1
c0019d65:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c0019d6c:	eb 7e                	jmp    c0019dec <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0019d6e:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019d74:	8d 70 08             	lea    esi,[eax+0x8]
c0019d77:	83 ec 0c             	sub    esp,0xc
c0019d7a:	56                   	push   esi
c0019d7b:	e8 a0 68 fe ff       	call   c0000620 <strlen>
c0019d80:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019d88:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019d8c:	83 c4 10             	add    esp,0x10
c0019d8f:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c0019d93:	75 0a                	jne    c0019d9f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c0019d95:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c0019d98:	b8 02 00 00 00       	mov    eax,0x2
c0019d9d:	74 05                	je     c0019da4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c0019d9f:	b8 01 00 00 00       	mov    eax,0x1
c0019da4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019da8:	50                   	push   eax
c0019da9:	50                   	push   eax
c0019daa:	56                   	push   esi
c0019dab:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019daf:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019db3:	50                   	push   eax
c0019db4:	e8 67 69 fe ff       	call   c0000720 <strcpy>
c0019db9:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0019dc0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019dc2:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c0019dc9:	5a                   	pop    edx
c0019dca:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019dcf:	59                   	pop    ecx
c0019dd0:	68 11 1d 02 c0       	push   0xc0021d11
c0019dd5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019ddb:	e8 e2 ec fe ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0019de0:	83 c4 10             	add    esp,0x10
c0019de3:	31 c0                	xor    eax,eax
c0019de5:	eb 05                	jmp    c0019dec <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0019de7:	b8 04 00 00 00       	mov    eax,0x4
c0019dec:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019df2:	5b                   	pop    ebx
c0019df3:	5e                   	pop    esi
c0019df4:	5f                   	pop    edi
c0019df5:	5d                   	pop    ebp
c0019df6:	c3                   	ret    

c0019df7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019df7:	57                   	push   edi
c0019df8:	56                   	push   esi
c0019df9:	53                   	push   ebx
c0019dfa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019dfe:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c0019e04:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019e08:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0019e0c:	75 08                	jne    c0019e16 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0019e0e:	38 1d 64 28 02 c0    	cmp    BYTE PTR ds:0xc0022864,bl
c0019e14:	74 4a                	je     c0019e60 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0019e16:	83 ec 0c             	sub    esp,0xc
c0019e19:	31 d2                	xor    edx,edx
c0019e1b:	68 40 83 02 c0       	push   0xc0028340
c0019e20:	0f be c3             	movsx  eax,bl
c0019e23:	6a 01                	push   0x1
c0019e25:	52                   	push   edx
c0019e26:	56                   	push   esi
c0019e27:	ff 34 85 1c 73 02 c0 	push   DWORD PTR [eax*4-0x3ffd8ce4]
c0019e2e:	e8 f3 39 ff ff       	call   c000d826 <LogicalDisk::read(unsigned long long, int, void*)>
c0019e33:	83 c4 20             	add    esp,0x20
c0019e36:	85 c0                	test   eax,eax
c0019e38:	75 0e                	jne    c0019e48 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0019e3a:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c0019e40:	88 1d 64 28 02 c0    	mov    BYTE PTR ds:0xc0022864,bl
c0019e46:	eb 18                	jmp    c0019e60 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0019e48:	50                   	push   eax
c0019e49:	68 00 08 00 00       	push   0x800
c0019e4e:	6a 00                	push   0x0
c0019e50:	57                   	push   edi
c0019e51:	e8 2a 67 fe ff       	call   c0000580 <memset>
c0019e56:	83 c4 10             	add    esp,0x10
c0019e59:	b8 01 00 00 00       	mov    eax,0x1
c0019e5e:	eb 0e                	jmp    c0019e6e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0019e60:	be 40 83 02 c0       	mov    esi,0xc0028340
c0019e65:	b9 00 08 00 00       	mov    ecx,0x800
c0019e6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e6c:	31 c0                	xor    eax,eax
c0019e6e:	5b                   	pop    ebx
c0019e6f:	5e                   	pop    esi
c0019e70:	5f                   	pop    edi
c0019e71:	c3                   	ret    

c0019e72 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019e72:	53                   	push   ebx
c0019e73:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019e79:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c0019e83:	8a 9c 24 1c 08 00 00 	mov    bl,BYTE PTR [esp+0x81c]
c0019e8a:	80 c3 41             	add    bl,0x41
c0019e8d:	0f be db             	movsx  ebx,bl
c0019e90:	53                   	push   ebx
c0019e91:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019e95:	50                   	push   eax
c0019e96:	6a 10                	push   0x10
c0019e98:	e8 5a ff ff ff       	call   c0019df7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019e9d:	83 c4 10             	add    esp,0x10
c0019ea0:	31 d2                	xor    edx,edx
c0019ea2:	85 c0                	test   eax,eax
c0019ea4:	75 33                	jne    c0019ed9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019ea6:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019eab:	75 2c                	jne    c0019ed9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019ead:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019eb2:	75 25                	jne    c0019ed9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019eb4:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019eb9:	75 1e                	jne    c0019ed9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019ebb:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019ec0:	75 17                	jne    c0019ed9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019ec2:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019ec7:	75 10                	jne    c0019ed9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019ec9:	83 ec 0c             	sub    esp,0xc
c0019ecc:	53                   	push   ebx
c0019ecd:	e8 2d cb fe ff       	call   c00069ff <init_percd>
c0019ed2:	83 c4 10             	add    esp,0x10
c0019ed5:	40                   	inc    eax
c0019ed6:	0f 95 c2             	setne  dl
c0019ed9:	81 c4 08 08 00 00    	add    esp,0x808
c0019edf:	88 d0                	mov    al,dl
c0019ee1:	5b                   	pop    ebx
c0019ee2:	c3                   	ret    
c0019ee3:	90                   	nop

c0019ee4 <ISO9660::ISO9660()>:
c0019ee4:	83 ec 1c             	sub    esp,0x1c
c0019ee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019eeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0019eee:	e8 b1 0e ff ff       	call   c000ada4 <Filesystem::Filesystem()>
c0019ef3:	ba 2c 1d 02 c0       	mov    edx,0xc0021d2c
c0019ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019efc:	89 10                	mov    DWORD PTR [eax],edx
c0019efe:	e8 0e cc fe ff       	call   c0006b11 <fs_iso9660_init>
c0019f03:	90                   	nop
c0019f04:	83 c4 1c             	add    esp,0x1c
c0019f07:	c3                   	ret    

c0019f08 <SoundCard::beginPlayback()>:
c0019f08:	c7 44 24 04 8c 1d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021d8c
c0019f10:	e9 20 6f ff ff       	jmp    c0010e35 <KePanic(char const*)>
c0019f15:	90                   	nop

c0019f16 <SoundCard::stopPlayback()>:
c0019f16:	c7 44 24 04 8c 1d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021d8c
c0019f1e:	e9 12 6f ff ff       	jmp    c0010e35 <KePanic(char const*)>
c0019f23:	90                   	nop

c0019f24 <SoundCard::SoundCard(char const*)>:
c0019f24:	83 ec 2c             	sub    esp,0x2c
c0019f27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f2b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019f2f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019f33:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f36:	e8 47 27 ff ff       	call   c000c682 <Device::Device(char const*)>
c0019f3b:	ba d8 1d 02 c0       	mov    edx,0xc0021dd8
c0019f40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f44:	89 10                	mov    DWORD PTR [eax],edx
c0019f46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f4a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019f51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f55:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019f5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f63:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019f6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f71:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019f7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f7f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019f89:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019f91:	83 7c 24 1c 1f       	cmp    DWORD PTR [esp+0x1c],0x1f
c0019f96:	7f 19                	jg     c0019fb1 <SoundCard::SoundCard(char const*)+0x8d>
c0019f98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f9c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019fa0:	83 c2 54             	add    edx,0x54
c0019fa3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019fab:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0019faf:	eb e0                	jmp    c0019f91 <SoundCard::SoundCard(char const*)+0x6d>
c0019fb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019fb5:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019fbc:	90                   	nop
c0019fbd:	83 c4 2c             	add    esp,0x2c
c0019fc0:	c3                   	ret    
c0019fc1:	90                   	nop

c0019fc2 <SoundCard::~SoundCard()>:
c0019fc2:	83 ec 1c             	sub    esp,0x1c
c0019fc5:	ba d8 1d 02 c0       	mov    edx,0xc0021dd8
c0019fca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019fce:	89 10                	mov    DWORD PTR [eax],edx
c0019fd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019fd4:	89 04 24             	mov    DWORD PTR [esp],eax
c0019fd7:	e8 12 24 ff ff       	call   c000c3ee <Device::~Device()>
c0019fdc:	90                   	nop
c0019fdd:	83 c4 1c             	add    esp,0x1c
c0019fe0:	c3                   	ret    
c0019fe1:	90                   	nop

c0019fe2 <SoundCard::~SoundCard()>:
c0019fe2:	83 ec 1c             	sub    esp,0x1c
c0019fe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019fe9:	89 04 24             	mov    DWORD PTR [esp],eax
c0019fec:	e8 d1 ff ff ff       	call   c0019fc2 <SoundCard::~SoundCard()>
c0019ff1:	c7 44 24 04 e8 01 00 00 	mov    DWORD PTR [esp+0x4],0x1e8
c0019ff9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ffd:	89 04 24             	mov    DWORD PTR [esp],eax
c001a000:	e8 57 09 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001a005:	83 c4 1c             	add    esp,0x1c
c001a008:	c3                   	ret    
c001a009:	90                   	nop

c001a00a <SoundCard::configureRates(int, int, int)>:
c001a00a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a00e:	31 c0                	xor    eax,eax
c001a010:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a017:	75 20                	jne    c001a039 <SoundCard::configureRates(int, int, int)+0x2f>
c001a019:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a01d:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a023:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a027:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a02d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a031:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a037:	b0 01                	mov    al,0x1
c001a039:	c3                   	ret    

c001a03a <SoundCard::getSamples16(int, short*)>:
c001a03a:	55                   	push   ebp
c001a03b:	57                   	push   edi
c001a03c:	31 ff                	xor    edi,edi
c001a03e:	56                   	push   esi
c001a03f:	53                   	push   ebx
c001a040:	31 db                	xor    ebx,ebx
c001a042:	83 ec 10             	sub    esp,0x10
c001a045:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a049:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a04d:	8d 04 36             	lea    eax,[esi+esi*1]
c001a050:	50                   	push   eax
c001a051:	6a 00                	push   0x0
c001a053:	55                   	push   ebp
c001a054:	e8 27 65 fe ff       	call   c0000580 <memset>
c001a059:	83 c4 10             	add    esp,0x10
c001a05c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a060:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001a067:	85 c0                	test   eax,eax
c001a069:	74 1a                	je     c001a085 <SoundCard::getSamples16(int, short*)+0x4b>
c001a06b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a06f:	75 14                	jne    c001a085 <SoundCard::getSamples16(int, short*)+0x4b>
c001a071:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a075:	55                   	push   ebp
c001a076:	56                   	push   esi
c001a077:	50                   	push   eax
c001a078:	e8 e3 02 00 00       	call   c001a360 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a07d:	83 c4 10             	add    esp,0x10
c001a080:	39 c3                	cmp    ebx,eax
c001a082:	0f 4c d8             	cmovl  ebx,eax
c001a085:	47                   	inc    edi
c001a086:	83 ff 20             	cmp    edi,0x20
c001a089:	75 d1                	jne    c001a05c <SoundCard::getSamples16(int, short*)+0x22>
c001a08b:	83 c4 0c             	add    esp,0xc
c001a08e:	89 d8                	mov    eax,ebx
c001a090:	5b                   	pop    ebx
c001a091:	5e                   	pop    esi
c001a092:	5f                   	pop    edi
c001a093:	5d                   	pop    ebp
c001a094:	c3                   	ret    
c001a095:	90                   	nop

c001a096 <SoundCard::getSamples32(int, int*)>:
c001a096:	55                   	push   ebp
c001a097:	57                   	push   edi
c001a098:	31 ff                	xor    edi,edi
c001a09a:	56                   	push   esi
c001a09b:	31 f6                	xor    esi,esi
c001a09d:	53                   	push   ebx
c001a09e:	83 ec 10             	sub    esp,0x10
c001a0a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a0a5:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a0a9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a0ad:	c1 e0 02             	shl    eax,0x2
c001a0b0:	50                   	push   eax
c001a0b1:	6a 00                	push   0x0
c001a0b3:	55                   	push   ebp
c001a0b4:	e8 c7 64 fe ff       	call   c0000580 <memset>
c001a0b9:	83 c4 10             	add    esp,0x10
c001a0bc:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a0c3:	85 c0                	test   eax,eax
c001a0c5:	74 1a                	je     c001a0e1 <SoundCard::getSamples32(int, int*)+0x4b>
c001a0c7:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a0cb:	75 14                	jne    c001a0e1 <SoundCard::getSamples32(int, int*)+0x4b>
c001a0cd:	53                   	push   ebx
c001a0ce:	55                   	push   ebp
c001a0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a0d3:	50                   	push   eax
c001a0d4:	e8 43 03 00 00       	call   c001a41c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a0d9:	83 c4 10             	add    esp,0x10
c001a0dc:	39 c6                	cmp    esi,eax
c001a0de:	0f 4c f0             	cmovl  esi,eax
c001a0e1:	47                   	inc    edi
c001a0e2:	83 ff 20             	cmp    edi,0x20
c001a0e5:	75 d5                	jne    c001a0bc <SoundCard::getSamples32(int, int*)+0x26>
c001a0e7:	85 f6                	test   esi,esi
c001a0e9:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001a0ef:	75 0f                	jne    c001a100 <SoundCard::getSamples32(int, int*)+0x6a>
c001a0f1:	84 c0                	test   al,al
c001a0f3:	74 1b                	je     c001a110 <SoundCard::getSamples32(int, int*)+0x7a>
c001a0f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0f7:	83 ec 0c             	sub    esp,0xc
c001a0fa:	53                   	push   ebx
c001a0fb:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a0fe:	eb 0d                	jmp    c001a10d <SoundCard::getSamples32(int, int*)+0x77>
c001a100:	84 c0                	test   al,al
c001a102:	75 0c                	jne    c001a110 <SoundCard::getSamples32(int, int*)+0x7a>
c001a104:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a106:	83 ec 0c             	sub    esp,0xc
c001a109:	53                   	push   ebx
c001a10a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a10d:	83 c4 10             	add    esp,0x10
c001a110:	83 c4 0c             	add    esp,0xc
c001a113:	89 f0                	mov    eax,esi
c001a115:	5b                   	pop    ebx
c001a116:	5e                   	pop    esi
c001a117:	5f                   	pop    edi
c001a118:	5d                   	pop    ebp
c001a119:	c3                   	ret    

c001a11a <SoundCard::addChannel(SoundPort*)>:
c001a11a:	83 ec 0c             	sub    esp,0xc
c001a11d:	31 c0                	xor    eax,eax
c001a11f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a123:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a12b:	74 1b                	je     c001a148 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a12d:	40                   	inc    eax
c001a12e:	83 f8 20             	cmp    eax,0x20
c001a131:	75 f0                	jne    c001a123 <SoundCard::addChannel(SoundPort*)+0x9>
c001a133:	83 ec 0c             	sub    esp,0xc
c001a136:	68 b1 1d 02 c0       	push   0xc0021db1
c001a13b:	e8 f5 6c ff ff       	call   c0010e35 <KePanic(char const*)>
c001a140:	83 c4 10             	add    esp,0x10
c001a143:	83 c8 ff             	or     eax,0xffffffff
c001a146:	eb 0b                	jmp    c001a153 <SoundCard::addChannel(SoundPort*)+0x39>
c001a148:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a14c:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a153:	83 c4 0c             	add    esp,0xc
c001a156:	c3                   	ret    
c001a157:	90                   	nop

c001a158 <SoundCard::removeChannel(int)>:
c001a158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a15c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a160:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a16b:	c3                   	ret    

c001a16c <SoundPort::SoundPort(int, int, int, int)>:
c001a16c:	83 ec 1c             	sub    esp,0x1c
c001a16f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a173:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a17a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a17e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a182:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a186:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a18a:	89 10                	mov    DWORD PTR [eax],edx
c001a18c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a190:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a194:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a197:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a19b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a19f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a1a2:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001a1a7:	75 13                	jne    c001a1bc <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a1a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1ad:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1af:	05 a0 0f 00 00       	add    eax,0xfa0
c001a1b4:	01 c0                	add    eax,eax
c001a1b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a1ba:	66 90                	xchg   ax,ax
c001a1bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a1c4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a1c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1cb:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a1d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a1d9:	c1 e0 02             	shl    eax,0x2
c001a1dc:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1df:	e8 18 d9 fe ff       	call   c0007afc <malloc>
c001a1e4:	89 c2                	mov    edx,eax
c001a1e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1ea:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a1ed:	90                   	nop
c001a1ee:	83 c4 1c             	add    esp,0x1c
c001a1f1:	c3                   	ret    
c001a1f2:	66 90                	xchg   ax,ax

c001a1f4 <SoundPort::~SoundPort()>:
c001a1f4:	83 ec 1c             	sub    esp,0x1c
c001a1f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a1fe:	85 c0                	test   eax,eax
c001a200:	74 1a                	je     c001a21c <SoundPort::~SoundPort()+0x28>
c001a202:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a206:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a209:	89 04 24             	mov    DWORD PTR [esp],eax
c001a20c:	e8 fe d8 fe ff       	call   c0007b0f <free>
c001a211:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a215:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a21c:	90                   	nop
c001a21d:	83 c4 1c             	add    esp,0x1c
c001a220:	c3                   	ret    
c001a221:	90                   	nop
c001a222:	66 90                	xchg   ax,ax

c001a224 <SoundPort::unpause()>:
c001a224:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a228:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a22c:	c3                   	ret    
c001a22d:	90                   	nop
c001a22e:	66 90                	xchg   ax,ax

c001a230 <SoundPort::pause()>:
c001a230:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a234:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a238:	c3                   	ret    
c001a239:	90                   	nop
c001a23a:	66 90                	xchg   ax,ax

c001a23c <SoundPort::getBufferUsed()>:
c001a23c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a240:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a243:	c3                   	ret    

c001a244 <SoundPort::getBufferSize()>:
c001a244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a248:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a24b:	c3                   	ret    

c001a24c <SoundPort::buffer16(short*, int)>:
c001a24c:	55                   	push   ebp
c001a24d:	57                   	push   edi
c001a24e:	56                   	push   esi
c001a24f:	53                   	push   ebx
c001a250:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a254:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a258:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a25b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a25e:	74 68                	je     c001a2c8 <SoundPort::buffer16(short*, int)+0x7c>
c001a260:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a264:	85 c9                	test   ecx,ecx
c001a266:	7e 60                	jle    c001a2c8 <SoundPort::buffer16(short*, int)+0x7c>
c001a268:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a26c:	8d 70 01             	lea    esi,[eax+0x1]
c001a26f:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a272:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a275:	c1 e1 0f             	shl    ecx,0xf
c001a278:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a27b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a27e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a281:	74 4d                	je     c001a2d0 <SoundPort::buffer16(short*, int)+0x84>
c001a283:	31 f6                	xor    esi,esi
c001a285:	eb 21                	jmp    c001a2a8 <SoundPort::buffer16(short*, int)+0x5c>
c001a287:	90                   	nop
c001a288:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a28d:	8d 79 01             	lea    edi,[ecx+0x1]
c001a290:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a293:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a296:	c1 e3 0f             	shl    ebx,0xf
c001a299:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a29c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a29f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a2a2:	74 1c                	je     c001a2c0 <SoundPort::buffer16(short*, int)+0x74>
c001a2a4:	89 c6                	mov    esi,eax
c001a2a6:	66 90                	xchg   ax,ax
c001a2a8:	8d 46 01             	lea    eax,[esi+0x1]
c001a2ab:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a2af:	75 d7                	jne    c001a288 <SoundPort::buffer16(short*, int)+0x3c>
c001a2b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a2b8:	5b                   	pop    ebx
c001a2b9:	5e                   	pop    esi
c001a2ba:	5f                   	pop    edi
c001a2bb:	5d                   	pop    ebp
c001a2bc:	c3                   	ret    
c001a2bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a2c0:	5b                   	pop    ebx
c001a2c1:	8d 46 02             	lea    eax,[esi+0x2]
c001a2c4:	5e                   	pop    esi
c001a2c5:	5f                   	pop    edi
c001a2c6:	5d                   	pop    ebp
c001a2c7:	c3                   	ret    
c001a2c8:	5b                   	pop    ebx
c001a2c9:	31 c0                	xor    eax,eax
c001a2cb:	5e                   	pop    esi
c001a2cc:	5f                   	pop    edi
c001a2cd:	5d                   	pop    ebp
c001a2ce:	c3                   	ret    
c001a2cf:	90                   	nop
c001a2d0:	b8 01 00 00 00       	mov    eax,0x1
c001a2d5:	eb e1                	jmp    c001a2b8 <SoundPort::buffer16(short*, int)+0x6c>
c001a2d7:	90                   	nop

c001a2d8 <SoundPort::buffer32(int*, int)>:
c001a2d8:	55                   	push   ebp
c001a2d9:	57                   	push   edi
c001a2da:	56                   	push   esi
c001a2db:	53                   	push   ebx
c001a2dc:	83 ec 04             	sub    esp,0x4
c001a2df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a2e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a2e7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a2eb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a2ee:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a2f1:	89 04 24             	mov    DWORD PTR [esp],eax
c001a2f4:	74 5a                	je     c001a350 <SoundPort::buffer32(int*, int)+0x78>
c001a2f6:	85 c0                	test   eax,eax
c001a2f8:	7e 56                	jle    c001a350 <SoundPort::buffer32(int*, int)+0x78>
c001a2fa:	8d 71 01             	lea    esi,[ecx+0x1]
c001a2fd:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a300:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a303:	8b 37                	mov    esi,DWORD PTR [edi]
c001a305:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001a308:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a30b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a30e:	74 48                	je     c001a358 <SoundPort::buffer32(int*, int)+0x80>
c001a310:	31 f6                	xor    esi,esi
c001a312:	eb 1c                	jmp    c001a330 <SoundPort::buffer32(int*, int)+0x58>
c001a314:	8d 69 01             	lea    ebp,[ecx+0x1]
c001a317:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001a31a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001a31d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001a320:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001a324:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a327:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a32a:	74 18                	je     c001a344 <SoundPort::buffer32(int*, int)+0x6c>
c001a32c:	89 de                	mov    esi,ebx
c001a32e:	66 90                	xchg   ax,ax
c001a330:	8d 5e 01             	lea    ebx,[esi+0x1]
c001a333:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001a336:	75 dc                	jne    c001a314 <SoundPort::buffer32(int*, int)+0x3c>
c001a338:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a33b:	90                   	nop
c001a33c:	5a                   	pop    edx
c001a33d:	5b                   	pop    ebx
c001a33e:	5e                   	pop    esi
c001a33f:	5f                   	pop    edi
c001a340:	5d                   	pop    ebp
c001a341:	c3                   	ret    
c001a342:	66 90                	xchg   ax,ax
c001a344:	5a                   	pop    edx
c001a345:	8d 46 02             	lea    eax,[esi+0x2]
c001a348:	5b                   	pop    ebx
c001a349:	5e                   	pop    esi
c001a34a:	5f                   	pop    edi
c001a34b:	5d                   	pop    ebp
c001a34c:	c3                   	ret    
c001a34d:	8d 76 00             	lea    esi,[esi+0x0]
c001a350:	5a                   	pop    edx
c001a351:	31 c0                	xor    eax,eax
c001a353:	5b                   	pop    ebx
c001a354:	5e                   	pop    esi
c001a355:	5f                   	pop    edi
c001a356:	5d                   	pop    ebp
c001a357:	c3                   	ret    
c001a358:	b8 01 00 00 00       	mov    eax,0x1
c001a35d:	eb dd                	jmp    c001a33c <SoundPort::buffer32(int*, int)+0x64>
c001a35f:	90                   	nop

c001a360 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001a360:	55                   	push   ebp
c001a361:	57                   	push   edi
c001a362:	56                   	push   esi
c001a363:	53                   	push   ebx
c001a364:	83 ec 1c             	sub    esp,0x1c
c001a367:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a36b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a36f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a373:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001a377:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001a37d:	39 03                	cmp    DWORD PTR [ebx],eax
c001a37f:	74 0f                	je     c001a390 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x30>
c001a381:	c7 04 24 04 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e04
c001a388:	e8 a8 6a ff ff       	call   c0010e35 <KePanic(char const*)>
c001a38d:	8d 76 00             	lea    esi,[esi+0x0]
c001a390:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001a396:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001a399:	74 0d                	je     c001a3a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x48>
c001a39b:	c7 04 24 43 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e43
c001a3a2:	e8 8e 6a ff ff       	call   c0010e35 <KePanic(char const*)>
c001a3a7:	90                   	nop
c001a3a8:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001a3ae:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001a3b1:	74 0d                	je     c001a3c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001a3b3:	c7 04 24 43 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e43
c001a3ba:	e8 76 6a ff ff       	call   c0010e35 <KePanic(char const*)>
c001a3bf:	90                   	nop
c001a3c0:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001a3c3:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001a3c7:	85 f6                	test   esi,esi
c001a3c9:	7e 25                	jle    c001a3f0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001a3cb:	31 c0                	xor    eax,eax
c001a3cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a3d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a3d3:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001a3d6:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001a3dc:	85 c9                	test   ecx,ecx
c001a3de:	0f 49 d1             	cmovns edx,ecx
c001a3e1:	c1 fa 0f             	sar    edx,0xf
c001a3e4:	66 01 14 47          	add    WORD PTR [edi+eax*2],dx
c001a3e8:	40                   	inc    eax
c001a3e9:	39 f0                	cmp    eax,esi
c001a3eb:	75 e3                	jne    c001a3d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001a3ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a3f0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a3f3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a3f6:	29 f0                	sub    eax,esi
c001a3f8:	89 14 24             	mov    DWORD PTR [esp],edx
c001a3fb:	c1 e0 02             	shl    eax,0x2
c001a3fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a402:	8d 04 b2             	lea    eax,[edx+esi*4]
c001a405:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a409:	e8 c2 5f fe ff       	call   c00003d0 <memmove>
c001a40e:	89 f0                	mov    eax,esi
c001a410:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001a413:	83 c4 1c             	add    esp,0x1c
c001a416:	5b                   	pop    ebx
c001a417:	5e                   	pop    esi
c001a418:	5f                   	pop    edi
c001a419:	5d                   	pop    ebp
c001a41a:	c3                   	ret    
c001a41b:	90                   	nop

c001a41c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001a41c:	55                   	push   ebp
c001a41d:	57                   	push   edi
c001a41e:	56                   	push   esi
c001a41f:	53                   	push   ebx
c001a420:	83 ec 1c             	sub    esp,0x1c
c001a423:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a427:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a42b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a42f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a433:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001a439:	39 03                	cmp    DWORD PTR [ebx],eax
c001a43b:	74 0f                	je     c001a44c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x30>
c001a43d:	c7 04 24 24 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e24
c001a444:	e8 ec 69 ff ff       	call   c0010e35 <KePanic(char const*)>
c001a449:	8d 76 00             	lea    esi,[esi+0x0]
c001a44c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001a452:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001a455:	74 0d                	je     c001a464 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001a457:	c7 04 24 5f 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e5f
c001a45e:	e8 d2 69 ff ff       	call   c0010e35 <KePanic(char const*)>
c001a463:	90                   	nop
c001a464:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001a46a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001a46d:	74 0d                	je     c001a47c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x60>
c001a46f:	c7 04 24 5f 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e5f
c001a476:	e8 ba 69 ff ff       	call   c0010e35 <KePanic(char const*)>
c001a47b:	90                   	nop
c001a47c:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001a47f:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001a483:	85 ff                	test   edi,edi
c001a485:	7e 19                	jle    c001a4a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001a487:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001a48e:	31 c0                	xor    eax,eax
c001a490:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a493:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001a496:	01 14 06             	add    DWORD PTR [esi+eax*1],edx
c001a499:	83 c0 04             	add    eax,0x4
c001a49c:	39 c1                	cmp    ecx,eax
c001a49e:	75 f0                	jne    c001a490 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001a4a0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a4a3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a4a6:	29 f8                	sub    eax,edi
c001a4a8:	89 14 24             	mov    DWORD PTR [esp],edx
c001a4ab:	c1 e0 02             	shl    eax,0x2
c001a4ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a4b2:	8d 04 ba             	lea    eax,[edx+edi*4]
c001a4b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a4b9:	e8 12 5f fe ff       	call   c00003d0 <memmove>
c001a4be:	89 f8                	mov    eax,edi
c001a4c0:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c001a4c3:	83 c4 1c             	add    esp,0x1c
c001a4c6:	5b                   	pop    ebx
c001a4c7:	5e                   	pop    esi
c001a4c8:	5f                   	pop    edi
c001a4c9:	5d                   	pop    ebp
c001a4ca:	c3                   	ret    
c001a4cb:	90                   	nop

c001a4cc <PCI::open(int, int, void*)>:
c001a4cc:	83 ec 18             	sub    esp,0x18
c001a4cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a4d7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001a4dd:	8b 10                	mov    edx,DWORD PTR [eax]
c001a4df:	50                   	push   eax
c001a4e0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001a4e3:	31 c0                	xor    eax,eax
c001a4e5:	83 c4 1c             	add    esp,0x1c
c001a4e8:	c3                   	ret    
c001a4e9:	90                   	nop

c001a4ea <PCI::close(int, int, void*)>:
c001a4ea:	31 c0                	xor    eax,eax
c001a4ec:	c3                   	ret    
c001a4ed:	90                   	nop

c001a4ee <PCI::PCI()>:
c001a4ee:	83 ec 1c             	sub    esp,0x1c
c001a4f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a4f5:	c7 44 24 04 7b 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021e7b
c001a4fd:	89 04 24             	mov    DWORD PTR [esp],eax
c001a500:	e8 07 13 ff ff       	call   c000b80c <Bus::Bus(char const*)>
c001a505:	ba 24 1f 02 c0       	mov    edx,0xc0021f24
c001a50a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a50e:	89 10                	mov    DWORD PTR [eax],edx
c001a510:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a514:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a51e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a522:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c001a527:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a52b:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001a532:	0f b6 d0             	movzx  edx,al
c001a535:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a539:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a540:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a544:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001a54b:	0f b6 d0             	movzx  edx,al
c001a54e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a552:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a557:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a55b:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001a562:	88 c1                	mov    cl,al
c001a564:	fe c1                	inc    cl
c001a566:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a56a:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a570:	0f b6 d0             	movzx  edx,al
c001a573:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a577:	0f b6 4c 90 07       	movzx  ecx,BYTE PTR [eax+edx*4+0x7]
c001a57c:	80 c9 c0             	or     cl,0xc0
c001a57f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a583:	90                   	nop
c001a584:	83 c4 1c             	add    esp,0x1c
c001a587:	c3                   	ret    

c001a588 <PCI::readBAR8(unsigned int, int)>:
c001a588:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a58c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a590:	f6 c2 01             	test   dl,0x1
c001a593:	74 07                	je     c001a59c <PCI::readBAR8(unsigned int, int)+0x14>
c001a595:	83 e2 fc             	and    edx,0xfffffffc
c001a598:	01 c2                	add    edx,eax
c001a59a:	ec                   	in     al,dx
c001a59b:	c3                   	ret    
c001a59c:	83 e2 f0             	and    edx,0xfffffff0
c001a59f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a5a2:	c3                   	ret    
c001a5a3:	90                   	nop

c001a5a4 <PCI::readBAR16(unsigned int, int)>:
c001a5a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a5a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a5ac:	f6 c2 01             	test   dl,0x1
c001a5af:	74 0b                	je     c001a5bc <PCI::readBAR16(unsigned int, int)+0x18>
c001a5b1:	83 e2 fc             	and    edx,0xfffffffc
c001a5b4:	01 c2                	add    edx,eax
c001a5b6:	66 ed                	in     ax,dx
c001a5b8:	0f b7 c0             	movzx  eax,ax
c001a5bb:	c3                   	ret    
c001a5bc:	83 e2 f0             	and    edx,0xfffffff0
c001a5bf:	0f b7 04 02          	movzx  eax,WORD PTR [edx+eax*1]
c001a5c3:	c3                   	ret    

c001a5c4 <PCI::readBAR32(unsigned int, int)>:
c001a5c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a5c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a5cc:	f6 c2 01             	test   dl,0x1
c001a5cf:	74 07                	je     c001a5d8 <PCI::readBAR32(unsigned int, int)+0x14>
c001a5d1:	83 e2 fc             	and    edx,0xfffffffc
c001a5d4:	01 c2                	add    edx,eax
c001a5d6:	ed                   	in     eax,dx
c001a5d7:	c3                   	ret    
c001a5d8:	83 e2 f0             	and    edx,0xfffffff0
c001a5db:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a5de:	c3                   	ret    
c001a5df:	90                   	nop

c001a5e0 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a5e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a5e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a5e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a5ec:	f6 c2 01             	test   dl,0x1
c001a5ef:	74 07                	je     c001a5f8 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a5f1:	83 e2 fc             	and    edx,0xfffffffc
c001a5f4:	01 ca                	add    edx,ecx
c001a5f6:	ee                   	out    dx,al
c001a5f7:	c3                   	ret    
c001a5f8:	83 e2 f0             	and    edx,0xfffffff0
c001a5fb:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a5fe:	c3                   	ret    
c001a5ff:	90                   	nop

c001a600 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a600:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a604:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a608:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001a60d:	f6 c2 01             	test   dl,0x1
c001a610:	74 08                	je     c001a61a <PCI::writeBAR16(unsigned int, unsigned short, int)+0x1a>
c001a612:	83 e2 fc             	and    edx,0xfffffffc
c001a615:	01 ca                	add    edx,ecx
c001a617:	66 ef                	out    dx,ax
c001a619:	c3                   	ret    
c001a61a:	83 e2 f0             	and    edx,0xfffffff0
c001a61d:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a621:	c3                   	ret    

c001a622 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a622:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a626:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a62a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a62e:	f6 c2 01             	test   dl,0x1
c001a631:	74 07                	je     c001a63a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a633:	83 e2 fc             	and    edx,0xfffffffc
c001a636:	01 ca                	add    edx,ecx
c001a638:	ef                   	out    dx,eax
c001a639:	c3                   	ret    
c001a63a:	83 e2 f0             	and    edx,0xfffffff0
c001a63d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a640:	c3                   	ret    
c001a641:	90                   	nop

c001a642 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a642:	53                   	push   ebx
c001a643:	83 ec 18             	sub    esp,0x18
c001a646:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a64a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a64e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a652:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001a656:	80 fb 07             	cmp    bl,0x7
c001a659:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001a65d:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001a661:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a665:	76 10                	jbe    c001a677 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x35>
c001a667:	83 ec 0c             	sub    esp,0xc
c001a66a:	68 83 1e 02 c0       	push   0xc0021e83
c001a66f:	e8 c1 67 ff ff       	call   c0010e35 <KePanic(char const*)>
c001a674:	83 c4 10             	add    esp,0x10
c001a677:	80 7c 24 0e 0f       	cmp    BYTE PTR [esp+0xe],0xf
c001a67c:	76 10                	jbe    c001a68e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>
c001a67e:	83 ec 0c             	sub    esp,0xc
c001a681:	68 b3 1e 02 c0       	push   0xc0021eb3
c001a686:	e8 aa 67 ff ff       	call   c0010e35 <KePanic(char const*)>
c001a68b:	83 c4 10             	add    esp,0x10
c001a68e:	88 d8                	mov    al,bl
c001a690:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a695:	00 c0                	add    al,al
c001a697:	0c f0                	or     al,0xf0
c001a699:	ee                   	out    dx,al
c001a69a:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a69f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001a6a3:	ee                   	out    dx,al
c001a6a4:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001a6a9:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001a6ae:	83 c4 18             	add    esp,0x18
c001a6b1:	5b                   	pop    ebx
c001a6b2:	c1 e0 08             	shl    eax,0x8
c001a6b5:	83 e2 fc             	and    edx,0xfffffffc
c001a6b8:	09 d0                	or     eax,edx
c001a6ba:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a6bf:	c3                   	ret    

c001a6c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a6c0:	57                   	push   edi
c001a6c1:	56                   	push   esi
c001a6c2:	53                   	push   ebx
c001a6c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a6c7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001a6cc:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001a6d1:	0f b6 4c 24 1c       	movzx  ecx,BYTE PTR [esp+0x1c]
c001a6d6:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a6dc:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
c001a6e0:	83 ff 01             	cmp    edi,0x1
c001a6e3:	75 3f                	jne    c001a724 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x64>
c001a6e5:	c1 e0 10             	shl    eax,0x10
c001a6e8:	c1 e1 08             	shl    ecx,0x8
c001a6eb:	89 c7                	mov    edi,eax
c001a6ed:	c1 e2 0b             	shl    edx,0xb
c001a6f0:	88 d8                	mov    al,bl
c001a6f2:	24 fc                	and    al,0xfc
c001a6f4:	0f b6 f0             	movzx  esi,al
c001a6f7:	89 f8                	mov    eax,edi
c001a6f9:	09 f0                	or     eax,esi
c001a6fb:	09 c8                	or     eax,ecx
c001a6fd:	09 d0                	or     eax,edx
c001a6ff:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a704:	0d 00 00 00 80       	or     eax,0x80000000
c001a709:	ef                   	out    dx,eax
c001a70a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a70f:	ed                   	in     eax,dx
c001a710:	80 e3 02             	and    bl,0x2
c001a713:	0f b6 db             	movzx  ebx,bl
c001a716:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a71d:	d3 e8                	shr    eax,cl
c001a71f:	0f b7 c0             	movzx  eax,ax
c001a722:	eb 41                	jmp    c001a765 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a724:	83 ff 02             	cmp    edi,0x2
c001a727:	75 2a                	jne    c001a753 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a729:	83 ec 0c             	sub    esp,0xc
c001a72c:	0f b6 fb             	movzx  edi,bl
c001a72f:	57                   	push   edi
c001a730:	51                   	push   ecx
c001a731:	52                   	push   edx
c001a732:	50                   	push   eax
c001a733:	56                   	push   esi
c001a734:	e8 09 ff ff ff       	call   c001a642 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a739:	89 c2                	mov    edx,eax
c001a73b:	ed                   	in     eax,dx
c001a73c:	80 e3 02             	and    bl,0x2
c001a73f:	83 c4 20             	add    esp,0x20
c001a742:	0f b6 db             	movzx  ebx,bl
c001a745:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a74c:	d3 e8                	shr    eax,cl
c001a74e:	0f b7 c0             	movzx  eax,ax
c001a751:	eb 12                	jmp    c001a765 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a753:	83 ec 0c             	sub    esp,0xc
c001a756:	68 e3 1e 02 c0       	push   0xc0021ee3
c001a75b:	e8 d5 66 ff ff       	call   c0010e35 <KePanic(char const*)>
c001a760:	83 c4 10             	add    esp,0x10
c001a763:	31 c0                	xor    eax,eax
c001a765:	5b                   	pop    ebx
c001a766:	5e                   	pop    esi
c001a767:	5f                   	pop    edi
c001a768:	c3                   	ret    
c001a769:	90                   	nop

c001a76a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a76a:	83 ec 18             	sub    esp,0x18
c001a76d:	6a 00                	push   0x0
c001a76f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a774:	50                   	push   eax
c001a775:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a77a:	50                   	push   eax
c001a77b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a780:	50                   	push   eax
c001a781:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a785:	e8 36 ff ff ff       	call   c001a6c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a78a:	83 c4 2c             	add    esp,0x2c
c001a78d:	c3                   	ret    

c001a78e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a78e:	83 ec 18             	sub    esp,0x18
c001a791:	6a 0e                	push   0xe
c001a793:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a798:	50                   	push   eax
c001a799:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a79e:	50                   	push   eax
c001a79f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a7a4:	50                   	push   eax
c001a7a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7a9:	e8 12 ff ff ff       	call   c001a6c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a7ae:	83 c4 2c             	add    esp,0x2c
c001a7b1:	0f b6 c0             	movzx  eax,al
c001a7b4:	c3                   	ret    
c001a7b5:	90                   	nop

c001a7b6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a7b6:	55                   	push   ebp
c001a7b7:	57                   	push   edi
c001a7b8:	56                   	push   esi
c001a7b9:	53                   	push   ebx
c001a7ba:	83 ec 18             	sub    esp,0x18
c001a7bd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a7c2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a7c7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a7cc:	6a 0a                	push   0xa
c001a7ce:	56                   	push   esi
c001a7cf:	55                   	push   ebp
c001a7d0:	57                   	push   edi
c001a7d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a7d5:	e8 e6 fe ff ff       	call   c001a6c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a7da:	83 c4 14             	add    esp,0x14
c001a7dd:	6a 0a                	push   0xa
c001a7df:	56                   	push   esi
c001a7e0:	55                   	push   ebp
c001a7e1:	57                   	push   edi
c001a7e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a7e6:	0f b7 d8             	movzx  ebx,ax
c001a7e9:	0f b6 db             	movzx  ebx,bl
c001a7ec:	e8 cf fe ff ff       	call   c001a6c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a7f1:	83 c4 2c             	add    esp,0x2c
c001a7f4:	25 00 ff 00 00       	and    eax,0xff00
c001a7f9:	09 d8                	or     eax,ebx
c001a7fb:	5b                   	pop    ebx
c001a7fc:	5e                   	pop    esi
c001a7fd:	5f                   	pop    edi
c001a7fe:	5d                   	pop    ebp
c001a7ff:	c3                   	ret    

c001a800 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a800:	83 ec 18             	sub    esp,0x18
c001a803:	6a 08                	push   0x8
c001a805:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a80a:	50                   	push   eax
c001a80b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a810:	50                   	push   eax
c001a811:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a816:	50                   	push   eax
c001a817:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a81b:	e8 a0 fe ff ff       	call   c001a6c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a820:	83 c4 2c             	add    esp,0x2c
c001a823:	0f b6 c4             	movzx  eax,ah
c001a826:	c3                   	ret    
c001a827:	90                   	nop

c001a828 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a828:	83 ec 18             	sub    esp,0x18
c001a82b:	6a 08                	push   0x8
c001a82d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a832:	50                   	push   eax
c001a833:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a838:	50                   	push   eax
c001a839:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a83e:	50                   	push   eax
c001a83f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a843:	e8 78 fe ff ff       	call   c001a6c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a848:	83 c4 2c             	add    esp,0x2c
c001a84b:	0f b7 c0             	movzx  eax,ax
c001a84e:	c3                   	ret    
c001a84f:	90                   	nop

c001a850 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a850:	83 ec 18             	sub    esp,0x18
c001a853:	6a 3c                	push   0x3c
c001a855:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a85a:	50                   	push   eax
c001a85b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a860:	50                   	push   eax
c001a861:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a866:	50                   	push   eax
c001a867:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a86b:	e8 50 fe ff ff       	call   c001a6c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a870:	83 c4 2c             	add    esp,0x2c
c001a873:	0f b7 c0             	movzx  eax,ax
c001a876:	c3                   	ret    
c001a877:	90                   	nop

c001a878 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a878:	83 ec 18             	sub    esp,0x18
c001a87b:	6a 18                	push   0x18
c001a87d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a882:	50                   	push   eax
c001a883:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a888:	50                   	push   eax
c001a889:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a88e:	50                   	push   eax
c001a88f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a893:	e8 28 fe ff ff       	call   c001a6c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a898:	83 c4 2c             	add    esp,0x2c
c001a89b:	0f b6 c4             	movzx  eax,ah
c001a89e:	c3                   	ret    
c001a89f:	90                   	nop

c001a8a0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a8a0:	55                   	push   ebp
c001a8a1:	57                   	push   edi
c001a8a2:	56                   	push   esi
c001a8a3:	53                   	push   ebx
c001a8a4:	83 ec 28             	sub    esp,0x28
c001a8a7:	8a 5c 24 40          	mov    bl,BYTE PTR [esp+0x40]
c001a8ab:	0f b6 74 24 4c       	movzx  esi,BYTE PTR [esp+0x4c]
c001a8b0:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a8b5:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a8ba:	c0 e3 02             	shl    bl,0x2
c001a8bd:	88 d8                	mov    al,bl
c001a8bf:	80 c3 10             	add    bl,0x10
c001a8c2:	04 12                	add    al,0x12
c001a8c4:	0f b6 db             	movzx  ebx,bl
c001a8c7:	0f b6 c0             	movzx  eax,al
c001a8ca:	50                   	push   eax
c001a8cb:	56                   	push   esi
c001a8cc:	57                   	push   edi
c001a8cd:	55                   	push   ebp
c001a8ce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a8d2:	e8 e9 fd ff ff       	call   c001a6c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a8d7:	0f b7 c0             	movzx  eax,ax
c001a8da:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a8de:	83 c4 14             	add    esp,0x14
c001a8e1:	53                   	push   ebx
c001a8e2:	56                   	push   esi
c001a8e3:	57                   	push   edi
c001a8e4:	55                   	push   ebp
c001a8e5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a8e9:	e8 d2 fd ff ff       	call   c001a6c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a8ee:	0f b7 d0             	movzx  edx,ax
c001a8f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a8f5:	83 c4 3c             	add    esp,0x3c
c001a8f8:	5b                   	pop    ebx
c001a8f9:	5e                   	pop    esi
c001a8fa:	c1 e0 10             	shl    eax,0x10
c001a8fd:	09 d0                	or     eax,edx
c001a8ff:	5f                   	pop    edi
c001a900:	5d                   	pop    ebp
c001a901:	c3                   	ret    

c001a902 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a902:	55                   	push   ebp
c001a903:	57                   	push   edi
c001a904:	56                   	push   esi
c001a905:	53                   	push   ebx
c001a906:	83 ec 0c             	sub    esp,0xc
c001a909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a90d:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001a912:	0f b6 54 24 28       	movzx  edx,BYTE PTR [esp+0x28]
c001a917:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a91c:	8b af 58 01 00 00    	mov    ebp,DWORD PTR [edi+0x158]
c001a922:	0f b6 5c 24 30       	movzx  ebx,BYTE PTR [esp+0x30]
c001a927:	0f b7 74 24 34       	movzx  esi,WORD PTR [esp+0x34]
c001a92c:	83 fd 01             	cmp    ebp,0x1
c001a92f:	75 50                	jne    c001a981 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x7f>
c001a931:	c1 e0 08             	shl    eax,0x8
c001a934:	89 cf                	mov    edi,ecx
c001a936:	c1 e7 10             	shl    edi,0x10
c001a939:	88 d9                	mov    cl,bl
c001a93b:	c1 e2 0b             	shl    edx,0xb
c001a93e:	80 e1 fc             	and    cl,0xfc
c001a941:	0f b6 c9             	movzx  ecx,cl
c001a944:	09 f9                	or     ecx,edi
c001a946:	09 c1                	or     ecx,eax
c001a948:	09 d1                	or     ecx,edx
c001a94a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a94f:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a955:	89 c8                	mov    eax,ecx
c001a957:	ef                   	out    dx,eax
c001a958:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a95d:	ed                   	in     eax,dx
c001a95e:	80 e3 02             	and    bl,0x2
c001a961:	74 08                	je     c001a96b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x69>
c001a963:	c1 e6 10             	shl    esi,0x10
c001a966:	0f b7 c0             	movzx  eax,ax
c001a969:	eb 03                	jmp    c001a96e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x6c>
c001a96b:	66 31 c0             	xor    ax,ax
c001a96e:	09 c6                	or     esi,eax
c001a970:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a975:	89 c8                	mov    eax,ecx
c001a977:	ef                   	out    dx,eax
c001a978:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a97d:	89 f0                	mov    eax,esi
c001a97f:	eb 2d                	jmp    c001a9ae <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xac>
c001a981:	83 fd 02             	cmp    ebp,0x2
c001a984:	75 31                	jne    c001a9b7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xb5>
c001a986:	83 ec 0c             	sub    esp,0xc
c001a989:	53                   	push   ebx
c001a98a:	50                   	push   eax
c001a98b:	52                   	push   edx
c001a98c:	51                   	push   ecx
c001a98d:	57                   	push   edi
c001a98e:	e8 af fc ff ff       	call   c001a642 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a993:	0f b7 c8             	movzx  ecx,ax
c001a996:	89 ca                	mov    edx,ecx
c001a998:	ed                   	in     eax,dx
c001a999:	83 c4 20             	add    esp,0x20
c001a99c:	f6 c1 02             	test   cl,0x2
c001a99f:	74 08                	je     c001a9a9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xa7>
c001a9a1:	c1 e6 10             	shl    esi,0x10
c001a9a4:	0f b7 c0             	movzx  eax,ax
c001a9a7:	eb 03                	jmp    c001a9ac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xaa>
c001a9a9:	66 31 c0             	xor    ax,ax
c001a9ac:	09 f0                	or     eax,esi
c001a9ae:	ef                   	out    dx,eax
c001a9af:	83 c4 0c             	add    esp,0xc
c001a9b2:	5b                   	pop    ebx
c001a9b3:	5e                   	pop    esi
c001a9b4:	5f                   	pop    edi
c001a9b5:	5d                   	pop    ebp
c001a9b6:	c3                   	ret    
c001a9b7:	c7 44 24 20 e3 1e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021ee3
c001a9bf:	83 c4 0c             	add    esp,0xc
c001a9c2:	5b                   	pop    ebx
c001a9c3:	5e                   	pop    esi
c001a9c4:	5f                   	pop    edi
c001a9c5:	5d                   	pop    ebp
c001a9c6:	e9 6a 64 ff ff       	jmp    c0010e35 <KePanic(char const*)>
c001a9cb:	90                   	nop

c001a9cc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a9cc:	55                   	push   ebp
c001a9cd:	57                   	push   edi
c001a9ce:	56                   	push   esi
c001a9cf:	53                   	push   ebx
c001a9d0:	81 ec 3c 01 00 00    	sub    esp,0x13c
c001a9d6:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a9dd:	8b bc 24 74 01 00 00 	mov    edi,DWORD PTR [esp+0x174]
c001a9e4:	0f 85 bd 00 00 00    	jne    c001aaa7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a9ea:	83 ec 0c             	sub    esp,0xc
c001a9ed:	68 14 01 00 00       	push   0x114
c001a9f2:	e8 05 d1 fe ff       	call   c0007afc <malloc>
c001a9f7:	83 c4 0c             	add    esp,0xc
c001a9fa:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001aa00:	68 e9 1e 02 c0       	push   0xc0021ee9
c001aa05:	50                   	push   eax
c001aa06:	89 c3                	mov    ebx,eax
c001aa08:	e8 eb 05 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c001aa0d:	83 c4 10             	add    esp,0x10
c001aa10:	85 db                	test   ebx,ebx
c001aa12:	0f 84 4c 02 00 00    	je     c001ac64 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001aa18:	56                   	push   esi
c001aa19:	56                   	push   esi
c001aa1a:	6a 01                	push   0x1
c001aa1c:	53                   	push   ebx
c001aa1d:	e8 94 06 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c001aa22:	83 c4 10             	add    esp,0x10
c001aa25:	85 c0                	test   eax,eax
c001aa27:	0f 85 37 02 00 00    	jne    c001ac64 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001aa2d:	52                   	push   edx
c001aa2e:	8d 44 24 2f          	lea    eax,[esp+0x2f]
c001aa32:	50                   	push   eax
c001aa33:	8d 44 24 38          	lea    eax,[esp+0x38]
c001aa37:	50                   	push   eax
c001aa38:	53                   	push   ebx
c001aa39:	e8 1e 09 ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c001aa3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001aa42:	40                   	inc    eax
c001aa43:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa46:	e8 b1 d0 fe ff       	call   c0007afc <malloc>
c001aa4b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001aa4f:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001aa53:	59                   	pop    ecx
c001aa54:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001aa59:	8b 13                	mov    edx,DWORD PTR [ebx]
c001aa5b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001aa5f:	51                   	push   ecx
c001aa60:	50                   	push   eax
c001aa61:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aa65:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aa69:	53                   	push   ebx
c001aa6a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001aa6d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c001aa71:	83 c4 20             	add    esp,0x20
c001aa74:	89 c8                	mov    eax,ecx
c001aa76:	99                   	cdq    
c001aa77:	3b 54 24 34          	cmp    edx,DWORD PTR [esp+0x34]
c001aa7b:	0f 85 e3 01 00 00    	jne    c001ac64 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001aa81:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001aa85:	0f 85 d9 01 00 00    	jne    c001ac64 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001aa8b:	83 ec 0c             	sub    esp,0xc
c001aa8e:	53                   	push   ebx
c001aa8f:	e8 80 06 ff ff       	call   c000b114 <File::close()>
c001aa94:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001aa98:	83 c4 10             	add    esp,0x10
c001aa9b:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001aaa2:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001aaa7:	0f b7 84 24 52 01 00 00 	movzx  eax,WORD PTR [esp+0x152]
c001aaaf:	31 db                	xor    ebx,ebx
c001aab1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aab9:	8b 0d 44 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028b44
c001aabf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aac7:	8b 35 48 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b48
c001aacd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aad1:	0f b7 84 24 72 01 00 00 	movzx  eax,WORD PTR [esp+0x172]
c001aad9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aadd:	8a 84 24 50 01 00 00 	mov    al,BYTE PTR [esp+0x150]
c001aae4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001aae8:	8a 84 24 51 01 00 00 	mov    al,BYTE PTR [esp+0x151]
c001aaef:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001aaf3:	39 d9                	cmp    ecx,ebx
c001aaf5:	0f 8e 69 01 00 00    	jle    c001ac64 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001aafb:	8a 04 1e             	mov    al,BYTE PTR [esi+ebx*1]
c001aafe:	d4 40                	aam    0x40
c001ab00:	d5 39                	aad    0x39
c001ab02:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ab06:	8a 44 1e 01          	mov    al,BYTE PTR [esi+ebx*1+0x1]
c001ab0a:	d4 40                	aam    0x40
c001ab0c:	d5 39                	aad    0x39
c001ab0e:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c001ab12:	8a 44 1e 03          	mov    al,BYTE PTR [esi+ebx*1+0x3]
c001ab16:	d4 40                	aam    0x40
c001ab18:	d5 39                	aad    0x39
c001ab1a:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001ab1e:	8a 44 1e 04          	mov    al,BYTE PTR [esi+ebx*1+0x4]
c001ab22:	d4 40                	aam    0x40
c001ab24:	d5 39                	aad    0x39
c001ab26:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ab2a:	8a 44 1e 06          	mov    al,BYTE PTR [esi+ebx*1+0x6]
c001ab2e:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c001ab32:	3c 56                	cmp    al,0x56
c001ab34:	74 46                	je     c001ab7c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b0>
c001ab36:	d4 40                	aam    0x40
c001ab38:	d5 39                	aad    0x39
c001ab3a:	2c 30                	sub    al,0x30
c001ab3c:	0f b6 d0             	movzx  edx,al
c001ab3f:	8a 44 1e 07          	mov    al,BYTE PTR [esi+ebx*1+0x7]
c001ab43:	c1 e2 04             	shl    edx,0x4
c001ab46:	d4 40                	aam    0x40
c001ab48:	d5 39                	aad    0x39
c001ab4a:	2c 30                	sub    al,0x30
c001ab4c:	0f b6 c0             	movzx  eax,al
c001ab4f:	09 c2                	or     edx,eax
c001ab51:	8a 44 1e 08          	mov    al,BYTE PTR [esi+ebx*1+0x8]
c001ab55:	c1 e2 04             	shl    edx,0x4
c001ab58:	d4 40                	aam    0x40
c001ab5a:	d5 39                	aad    0x39
c001ab5c:	2c 30                	sub    al,0x30
c001ab5e:	0f b6 c0             	movzx  eax,al
c001ab61:	09 c2                	or     edx,eax
c001ab63:	8a 44 1e 09          	mov    al,BYTE PTR [esi+ebx*1+0x9]
c001ab67:	c1 e2 04             	shl    edx,0x4
c001ab6a:	0f b7 d2             	movzx  edx,dx
c001ab6d:	d4 40                	aam    0x40
c001ab6f:	d5 39                	aad    0x39
c001ab71:	2c 30                	sub    al,0x30
c001ab73:	0f b6 c0             	movzx  eax,al
c001ab76:	09 d0                	or     eax,edx
c001ab78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab7c:	8a 54 1e 0b          	mov    dl,BYTE PTR [esi+ebx*1+0xb]
c001ab80:	80 fa 58             	cmp    dl,0x58
c001ab83:	74 48                	je     c001abcd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x201>
c001ab85:	88 d0                	mov    al,dl
c001ab87:	d4 40                	aam    0x40
c001ab89:	d5 39                	aad    0x39
c001ab8b:	2c 30                	sub    al,0x30
c001ab8d:	0f b6 e8             	movzx  ebp,al
c001ab90:	8a 44 1e 0c          	mov    al,BYTE PTR [esi+ebx*1+0xc]
c001ab94:	c1 e5 04             	shl    ebp,0x4
c001ab97:	d4 40                	aam    0x40
c001ab99:	d5 39                	aad    0x39
c001ab9b:	2c 30                	sub    al,0x30
c001ab9d:	0f b6 c0             	movzx  eax,al
c001aba0:	09 c5                	or     ebp,eax
c001aba2:	8a 44 1e 0d          	mov    al,BYTE PTR [esi+ebx*1+0xd]
c001aba6:	c1 e5 04             	shl    ebp,0x4
c001aba9:	d4 40                	aam    0x40
c001abab:	d5 39                	aad    0x39
c001abad:	2c 30                	sub    al,0x30
c001abaf:	0f b6 c0             	movzx  eax,al
c001abb2:	09 c5                	or     ebp,eax
c001abb4:	8a 44 1e 0e          	mov    al,BYTE PTR [esi+ebx*1+0xe]
c001abb8:	c1 e5 04             	shl    ebp,0x4
c001abbb:	0f b7 ed             	movzx  ebp,bp
c001abbe:	d4 40                	aam    0x40
c001abc0:	d5 39                	aad    0x39
c001abc2:	2c 30                	sub    al,0x30
c001abc4:	0f b6 c0             	movzx  eax,al
c001abc7:	09 e8                	or     eax,ebp
c001abc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001abcd:	8d 6c 24 30          	lea    ebp,[esp+0x30]
c001abd1:	83 c3 10             	add    ebx,0x10
c001abd4:	8a 04 1e             	mov    al,BYTE PTR [esi+ebx*1]
c001abd7:	3c 0a                	cmp    al,0xa
c001abd9:	74 07                	je     c001abe2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x216>
c001abdb:	45                   	inc    ebp
c001abdc:	39 d9                	cmp    ecx,ebx
c001abde:	75 15                	jne    c001abf5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x229>
c001abe0:	89 cb                	mov    ebx,ecx
c001abe2:	3c 0a                	cmp    al,0xa
c001abe4:	0f 94 c0             	sete   al
c001abe7:	0f b6 c0             	movzx  eax,al
c001abea:	01 c3                	add    ebx,eax
c001abec:	80 7c 24 19 56       	cmp    BYTE PTR [esp+0x19],0x56
c001abf1:	75 0c                	jne    c001abff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x233>
c001abf3:	eb 18                	jmp    c001ac0d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001abf5:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001abf8:	43                   	inc    ebx
c001abf9:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001abfd:	eb d5                	jmp    c001abd4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x208>
c001abff:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001ac03:	39 6c 24 10          	cmp    DWORD PTR [esp+0x10],ebp
c001ac07:	0f 85 e6 fe ff ff    	jne    c001aaf3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ac0d:	80 fa 58             	cmp    dl,0x58
c001ac10:	74 0e                	je     c001ac20 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x254>
c001ac12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac16:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c001ac1a:	0f 85 d3 fe ff ff    	jne    c001aaf3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ac20:	8a 54 24 1c          	mov    dl,BYTE PTR [esp+0x1c]
c001ac24:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c001ac28:	c0 e2 04             	shl    dl,0x4
c001ac2b:	2c 30                	sub    al,0x30
c001ac2d:	08 d0                	or     al,dl
c001ac2f:	38 44 24 1a          	cmp    BYTE PTR [esp+0x1a],al
c001ac33:	0f 85 ba fe ff ff    	jne    c001aaf3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ac39:	8a 54 24 1e          	mov    dl,BYTE PTR [esp+0x1e]
c001ac3d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001ac41:	c0 e2 04             	shl    dl,0x4
c001ac44:	2c 30                	sub    al,0x30
c001ac46:	08 d0                	or     al,dl
c001ac48:	38 44 24 1b          	cmp    BYTE PTR [esp+0x1b],al
c001ac4c:	0f 85 a1 fe ff ff    	jne    c001aaf3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ac52:	50                   	push   eax
c001ac53:	50                   	push   eax
c001ac54:	8d 44 24 38          	lea    eax,[esp+0x38]
c001ac58:	50                   	push   eax
c001ac59:	57                   	push   edi
c001ac5a:	e8 c1 5a fe ff       	call   c0000720 <strcpy>
c001ac5f:	83 c4 10             	add    esp,0x10
c001ac62:	eb 05                	jmp    c001ac69 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x29d>
c001ac64:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001ac67:	31 ff                	xor    edi,edi
c001ac69:	81 c4 3c 01 00 00    	add    esp,0x13c
c001ac6f:	89 f8                	mov    eax,edi
c001ac71:	5b                   	pop    ebx
c001ac72:	5e                   	pop    esi
c001ac73:	5f                   	pop    edi
c001ac74:	5d                   	pop    ebp
c001ac75:	c3                   	ret    

c001ac76 <PCI::checkBus(unsigned char)>:
c001ac76:	56                   	push   esi
c001ac77:	53                   	push   ebx
c001ac78:	31 db                	xor    ebx,ebx
c001ac7a:	51                   	push   ecx
c001ac7b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ac80:	52                   	push   edx
c001ac81:	53                   	push   ebx
c001ac82:	43                   	inc    ebx
c001ac83:	56                   	push   esi
c001ac84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac88:	e8 f1 02 00 00       	call   c001af7e <PCI::checkDevice(unsigned char, unsigned char)>
c001ac8d:	83 c4 10             	add    esp,0x10
c001ac90:	83 fb 20             	cmp    ebx,0x20
c001ac93:	75 eb                	jne    c001ac80 <PCI::checkBus(unsigned char)+0xa>
c001ac95:	58                   	pop    eax
c001ac96:	5b                   	pop    ebx
c001ac97:	5e                   	pop    esi
c001ac98:	c3                   	ret    
c001ac99:	90                   	nop

c001ac9a <PCI::foundDevice(PCIDeviceInfo)>:
c001ac9a:	55                   	push   ebp
c001ac9b:	57                   	push   edi
c001ac9c:	56                   	push   esi
c001ac9d:	53                   	push   ebx
c001ac9e:	83 ec 1c             	sub    esp,0x1c
c001aca1:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001aca6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001acaa:	3d ff ff 00 00       	cmp    eax,0xffff
c001acaf:	0f 84 54 01 00 00    	je     c001ae09 <PCI::foundDevice(PCIDeviceInfo)+0x16f>
c001acb5:	0f b7 7c 24 34       	movzx  edi,WORD PTR [esp+0x34]
c001acba:	81 ff 06 04 00 00    	cmp    edi,0x406
c001acc0:	75 2c                	jne    c001acee <PCI::foundDevice(PCIDeviceInfo)+0x54>
c001acc2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001acc7:	50                   	push   eax
c001acc8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001accd:	50                   	push   eax
c001acce:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001acd3:	50                   	push   eax
c001acd4:	56                   	push   esi
c001acd5:	e8 9e fb ff ff       	call   c001a878 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001acda:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001acde:	0f b6 c0             	movzx  eax,al
c001ace1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ace5:	83 c4 2c             	add    esp,0x2c
c001ace8:	5b                   	pop    ebx
c001ace9:	5e                   	pop    esi
c001acea:	5f                   	pop    edi
c001aceb:	5d                   	pop    ebp
c001acec:	eb 88                	jmp    c001ac76 <PCI::checkBus(unsigned char)>
c001acee:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001acf2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001acf8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001acfc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ad00:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001ad04:	85 c0                	test   eax,eax
c001ad06:	74 33                	je     c001ad3b <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001ad08:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001ad0b:	85 d2                	test   edx,edx
c001ad0d:	74 28                	je     c001ad37 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ad0f:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001ad15:	31 e9                	xor    ecx,ebp
c001ad17:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001ad1d:	75 18                	jne    c001ad37 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ad1f:	39 9a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ebx
c001ad25:	75 10                	jne    c001ad37 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ad27:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ad2b:	38 8a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],cl
c001ad31:	0f 84 d2 00 00 00    	je     c001ae09 <PCI::foundDevice(PCIDeviceInfo)+0x16f>
c001ad37:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad39:	eb c9                	jmp    c001ad04 <PCI::foundDevice(PCIDeviceInfo)+0x6a>
c001ad3b:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001ad3f:	81 ff 01 06 00 00    	cmp    edi,0x601
c001ad45:	75 19                	jne    c001ad60 <PCI::foundDevice(PCIDeviceInfo)+0xc6>
c001ad47:	83 ec 0c             	sub    esp,0xc
c001ad4a:	68 64 01 00 00       	push   0x164
c001ad4f:	e8 a8 cd fe ff       	call   c0007afc <malloc>
c001ad54:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad57:	89 c5                	mov    ebp,eax
c001ad59:	e8 36 0e 00 00       	call   c001bb94 <SATABus::SATABus()>
c001ad5e:	eb 1f                	jmp    c001ad7f <PCI::foundDevice(PCIDeviceInfo)+0xe5>
c001ad60:	81 ff 01 01 00 00    	cmp    edi,0x101
c001ad66:	75 60                	jne    c001adc8 <PCI::foundDevice(PCIDeviceInfo)+0x12e>
c001ad68:	83 ec 0c             	sub    esp,0xc
c001ad6b:	68 70 02 00 00       	push   0x270
c001ad70:	e8 87 cd fe ff       	call   c0007afc <malloc>
c001ad75:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad78:	89 c5                	mov    ebp,eax
c001ad7a:	e8 cf 02 00 00       	call   c001b04e <IDE::IDE()>
c001ad7f:	58                   	pop    eax
c001ad80:	5a                   	pop    edx
c001ad81:	55                   	push   ebp
c001ad82:	56                   	push   esi
c001ad83:	e8 62 17 ff ff       	call   c000c4ea <Device::addChild(Device*)>
c001ad88:	83 ec 1c             	sub    esp,0x1c
c001ad8b:	b9 09 00 00 00       	mov    ecx,0x9
c001ad90:	fc                   	cld    
c001ad91:	89 e7                	mov    edi,esp
c001ad93:	89 de                	mov    esi,ebx
c001ad95:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ad97:	55                   	push   ebp
c001ad98:	e8 95 16 ff ff       	call   c000c432 <Device::preOpenPCI(PCIDeviceInfo)>
c001ad9d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ada0:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001ada4:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001adac:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001adb4:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001adbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001adbf:	83 c4 4c             	add    esp,0x4c
c001adc2:	5b                   	pop    ebx
c001adc3:	5e                   	pop    esi
c001adc4:	5f                   	pop    edi
c001adc5:	5d                   	pop    ebp
c001adc6:	ff e0                	jmp    eax
c001adc8:	83 ec 0c             	sub    esp,0xc
c001adcb:	68 58 01 00 00       	push   0x158
c001add0:	e8 27 cd fe ff       	call   c0007afc <malloc>
c001add5:	89 c5                	mov    ebp,eax
c001add7:	58                   	pop    eax
c001add8:	5a                   	pop    edx
c001add9:	68 02 1f 02 c0       	push   0xc0021f02
c001adde:	55                   	push   ebp
c001addf:	e8 a2 19 ff ff       	call   c000c786 <DriverlessDevice::DriverlessDevice(char const*)>
c001ade4:	59                   	pop    ecx
c001ade5:	5f                   	pop    edi
c001ade6:	55                   	push   ebp
c001ade7:	56                   	push   esi
c001ade8:	e8 fd 16 ff ff       	call   c000c4ea <Device::addChild(Device*)>
c001aded:	b9 09 00 00 00       	mov    ecx,0x9
c001adf2:	fc                   	cld    
c001adf3:	89 df                	mov    edi,ebx
c001adf5:	89 de                	mov    esi,ebx
c001adf7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001adf9:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001adfd:	83 c4 2c             	add    esp,0x2c
c001ae00:	5b                   	pop    ebx
c001ae01:	5e                   	pop    esi
c001ae02:	5f                   	pop    edi
c001ae03:	5d                   	pop    ebp
c001ae04:	e9 29 16 ff ff       	jmp    c000c432 <Device::preOpenPCI(PCIDeviceInfo)>
c001ae09:	83 c4 1c             	add    esp,0x1c
c001ae0c:	5b                   	pop    ebx
c001ae0d:	5e                   	pop    esi
c001ae0e:	5f                   	pop    edi
c001ae0f:	5d                   	pop    ebp
c001ae10:	c3                   	ret    
c001ae11:	90                   	nop

c001ae12 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001ae12:	55                   	push   ebp
c001ae13:	57                   	push   edi
c001ae14:	56                   	push   esi
c001ae15:	53                   	push   ebx
c001ae16:	83 ec 58             	sub    esp,0x58
c001ae19:	8a 44 24 70          	mov    al,BYTE PTR [esp+0x70]
c001ae1d:	0f b6 74 24 78       	movzx  esi,BYTE PTR [esp+0x78]
c001ae22:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
c001ae26:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001ae2a:	8a 44 24 74          	mov    al,BYTE PTR [esp+0x74]
c001ae2e:	0f b6 7c 24 15       	movzx  edi,BYTE PTR [esp+0x15]
c001ae33:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c001ae37:	89 f0                	mov    eax,esi
c001ae39:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001ae3d:	0f b6 5c 24 16       	movzx  ebx,BYTE PTR [esp+0x16]
c001ae42:	6a 0c                	push   0xc
c001ae44:	56                   	push   esi
c001ae45:	53                   	push   ebx
c001ae46:	57                   	push   edi
c001ae47:	55                   	push   ebp
c001ae48:	e8 73 f8 ff ff       	call   c001a6c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae4d:	83 c4 20             	add    esp,0x20
c001ae50:	56                   	push   esi
c001ae51:	53                   	push   ebx
c001ae52:	57                   	push   edi
c001ae53:	55                   	push   ebp
c001ae54:	e8 5d f9 ff ff       	call   c001a7b6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001ae59:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001ae5e:	56                   	push   esi
c001ae5f:	53                   	push   ebx
c001ae60:	57                   	push   edi
c001ae61:	55                   	push   ebp
c001ae62:	e8 e9 f9 ff ff       	call   c001a850 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001ae67:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001ae6b:	83 c4 14             	add    esp,0x14
c001ae6e:	6a 3c                	push   0x3c
c001ae70:	56                   	push   esi
c001ae71:	53                   	push   ebx
c001ae72:	57                   	push   edi
c001ae73:	55                   	push   ebp
c001ae74:	e8 47 f8 ff ff       	call   c001a6c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae79:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001ae7f:	8b 8a 68 01 00 00    	mov    ecx,DWORD PTR [edx+0x168]
c001ae85:	0f b6 c4             	movzx  eax,ah
c001ae88:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ae8c:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001ae90:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001ae94:	8b 81 5c 11 00 00    	mov    eax,DWORD PTR [ecx+0x115c]
c001ae9a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ae9e:	83 c4 20             	add    esp,0x20
c001aea1:	85 c0                	test   eax,eax
c001aea3:	74 2f                	je     c001aed4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc2>
c001aea5:	31 d2                	xor    edx,edx
c001aea7:	39 14 24             	cmp    DWORD PTR [esp],edx
c001aeaa:	7e 28                	jle    c001aed4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc2>
c001aeac:	0f b7 84 d1 5c 01 00 00 	movzx  eax,WORD PTR [ecx+edx*8+0x15c]
c001aeb4:	39 c3                	cmp    ebx,eax
c001aeb6:	75 19                	jne    c001aed1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xbf>
c001aeb8:	0f b6 84 d1 5e 01 00 00 	movzx  eax,BYTE PTR [ecx+edx*8+0x15e]
c001aec0:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c001aec4:	75 0b                	jne    c001aed1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xbf>
c001aec6:	8a 84 d1 5f 01 00 00 	mov    al,BYTE PTR [ecx+edx*8+0x15f]
c001aecd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001aed1:	42                   	inc    edx
c001aed2:	eb d3                	jmp    c001aea7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x95>
c001aed4:	31 d2                	xor    edx,edx
c001aed6:	83 ec 0c             	sub    esp,0xc
c001aed9:	56                   	push   esi
c001aeda:	53                   	push   ebx
c001aedb:	57                   	push   edi
c001aedc:	52                   	push   edx
c001aedd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001aee1:	55                   	push   ebp
c001aee2:	e8 b9 f9 ff ff       	call   c001a8a0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aee7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aeeb:	89 44 94 44          	mov    DWORD PTR [esp+edx*4+0x44],eax
c001aeef:	42                   	inc    edx
c001aef0:	83 c4 20             	add    esp,0x20
c001aef3:	83 fa 06             	cmp    edx,0x6
c001aef6:	75 de                	jne    c001aed6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001aef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aefc:	83 ec 0c             	sub    esp,0xc
c001aeff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001af03:	c1 e2 08             	shl    edx,0x8
c001af06:	0f b6 c4             	movzx  eax,ah
c001af09:	09 d0                	or     eax,edx
c001af0b:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c001af10:	6a 02                	push   0x2
c001af12:	56                   	push   esi
c001af13:	53                   	push   ebx
c001af14:	57                   	push   edi
c001af15:	55                   	push   ebp
c001af16:	e8 a5 f7 ff ff       	call   c001a6c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af1b:	66 89 44 24 5e       	mov    WORD PTR [esp+0x5e],ax
c001af20:	83 c4 20             	add    esp,0x20
c001af23:	56                   	push   esi
c001af24:	53                   	push   ebx
c001af25:	57                   	push   edi
c001af26:	55                   	push   ebp
c001af27:	e8 d4 f8 ff ff       	call   c001a800 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001af2c:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001af30:	56                   	push   esi
c001af31:	53                   	push   ebx
c001af32:	57                   	push   edi
c001af33:	55                   	push   ebp
c001af34:	e8 31 f8 ff ff       	call   c001a76a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001af39:	b9 09 00 00 00       	mov    ecx,0x9
c001af3e:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001af43:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001af47:	88 44 24 5c          	mov    BYTE PTR [esp+0x5c],al
c001af4b:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c001af4f:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001af53:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c001af57:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001af5b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001af5f:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001af63:	83 ec 0c             	sub    esp,0xc
c001af66:	fc                   	cld    
c001af67:	8d 74 24 48          	lea    esi,[esp+0x48]
c001af6b:	89 e7                	mov    edi,esp
c001af6d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001af6f:	55                   	push   ebp
c001af70:	e8 25 fd ff ff       	call   c001ac9a <PCI::foundDevice(PCIDeviceInfo)>
c001af75:	83 c4 7c             	add    esp,0x7c
c001af78:	5b                   	pop    ebx
c001af79:	5e                   	pop    esi
c001af7a:	5f                   	pop    edi
c001af7b:	5d                   	pop    ebp
c001af7c:	c3                   	ret    
c001af7d:	90                   	nop

c001af7e <PCI::checkDevice(unsigned char, unsigned char)>:
c001af7e:	55                   	push   ebp
c001af7f:	57                   	push   edi
c001af80:	56                   	push   esi
c001af81:	53                   	push   ebx
c001af82:	83 ec 0c             	sub    esp,0xc
c001af85:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001af8a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001af8f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001af93:	6a 00                	push   0x0
c001af95:	56                   	push   esi
c001af96:	57                   	push   edi
c001af97:	55                   	push   ebp
c001af98:	e8 cd f7 ff ff       	call   c001a76a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001af9d:	6a 00                	push   0x0
c001af9f:	56                   	push   esi
c001afa0:	57                   	push   edi
c001afa1:	55                   	push   ebp
c001afa2:	e8 6b fe ff ff       	call   c001ae12 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001afa7:	83 c4 20             	add    esp,0x20
c001afaa:	6a 00                	push   0x0
c001afac:	56                   	push   esi
c001afad:	57                   	push   edi
c001afae:	55                   	push   ebp
c001afaf:	e8 da f7 ff ff       	call   c001a78e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001afb4:	83 c4 10             	add    esp,0x10
c001afb7:	84 c0                	test   al,al
c001afb9:	79 2d                	jns    c001afe8 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001afbb:	bb 01 00 00 00       	mov    ebx,0x1
c001afc0:	53                   	push   ebx
c001afc1:	56                   	push   esi
c001afc2:	57                   	push   edi
c001afc3:	55                   	push   ebp
c001afc4:	e8 a1 f7 ff ff       	call   c001a76a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001afc9:	83 c4 10             	add    esp,0x10
c001afcc:	0f b7 c0             	movzx  eax,ax
c001afcf:	3d ff ff 00 00       	cmp    eax,0xffff
c001afd4:	74 0c                	je     c001afe2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001afd6:	53                   	push   ebx
c001afd7:	56                   	push   esi
c001afd8:	57                   	push   edi
c001afd9:	55                   	push   ebp
c001afda:	e8 33 fe ff ff       	call   c001ae12 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001afdf:	83 c4 10             	add    esp,0x10
c001afe2:	43                   	inc    ebx
c001afe3:	83 fb 08             	cmp    ebx,0x8
c001afe6:	75 d8                	jne    c001afc0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001afe8:	83 c4 0c             	add    esp,0xc
c001afeb:	5b                   	pop    ebx
c001afec:	5e                   	pop    esi
c001afed:	5f                   	pop    edi
c001afee:	5d                   	pop    ebp
c001afef:	c3                   	ret    

c001aff0 <PCI::detect()>:
c001aff0:	56                   	push   esi
c001aff1:	53                   	push   ebx
c001aff2:	53                   	push   ebx
c001aff3:	31 db                	xor    ebx,ebx
c001aff5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aff9:	6a 00                	push   0x0
c001affb:	6a 00                	push   0x0
c001affd:	6a 00                	push   0x0
c001afff:	56                   	push   esi
c001b000:	e8 89 f7 ff ff       	call   c001a78e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b005:	83 c4 10             	add    esp,0x10
c001b008:	a8 80                	test   al,0x80
c001b00a:	75 21                	jne    c001b02d <PCI::detect()+0x3d>
c001b00c:	51                   	push   ecx
c001b00d:	51                   	push   ecx
c001b00e:	6a 00                	push   0x0
c001b010:	56                   	push   esi
c001b011:	e8 60 fc ff ff       	call   c001ac76 <PCI::checkBus(unsigned char)>
c001b016:	83 c4 10             	add    esp,0x10
c001b019:	eb 2a                	jmp    c001b045 <PCI::detect()+0x55>
c001b01b:	52                   	push   edx
c001b01c:	52                   	push   edx
c001b01d:	53                   	push   ebx
c001b01e:	43                   	inc    ebx
c001b01f:	56                   	push   esi
c001b020:	e8 51 fc ff ff       	call   c001ac76 <PCI::checkBus(unsigned char)>
c001b025:	83 c4 10             	add    esp,0x10
c001b028:	83 fb 08             	cmp    ebx,0x8
c001b02b:	74 18                	je     c001b045 <PCI::detect()+0x55>
c001b02d:	53                   	push   ebx
c001b02e:	6a 00                	push   0x0
c001b030:	6a 00                	push   0x0
c001b032:	56                   	push   esi
c001b033:	e8 32 f7 ff ff       	call   c001a76a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b038:	83 c4 10             	add    esp,0x10
c001b03b:	0f b7 c0             	movzx  eax,ax
c001b03e:	3d ff ff 00 00       	cmp    eax,0xffff
c001b043:	74 d6                	je     c001b01b <PCI::detect()+0x2b>
c001b045:	58                   	pop    eax
c001b046:	5b                   	pop    ebx
c001b047:	5e                   	pop    esi
c001b048:	c3                   	ret    
c001b049:	90                   	nop

c001b04a <IDE::close(int, int, void*)>:
c001b04a:	83 c8 ff             	or     eax,0xffffffff
c001b04d:	c3                   	ret    

c001b04e <IDE::IDE()>:
c001b04e:	83 ec 1c             	sub    esp,0x1c
c001b051:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b055:	c7 44 24 04 48 1f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021f48
c001b05d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b060:	e8 c7 17 ff ff       	call   c000c82c <HardDiskController::HardDiskController(char const*)>
c001b065:	ba d8 1f 02 c0       	mov    edx,0xc0021fd8
c001b06a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b06e:	89 10                	mov    DWORD PTR [eax],edx
c001b070:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b074:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b07b:	90                   	nop
c001b07c:	83 c4 1c             	add    esp,0x1c
c001b07f:	c3                   	ret    

c001b080 <IDE::prepareInterrupt(unsigned char)>:
c001b080:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b085:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b089:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b091:	c3                   	ret    

c001b092 <selectDrive(unsigned char, unsigned char)>:
c001b092:	c3                   	ret    
c001b093:	90                   	nop

c001b094 <IDE::getBase(unsigned char)>:
c001b094:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b099:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b09d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b0a5:	c3                   	ret    

c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b0a6:	55                   	push   ebp
c001b0a7:	57                   	push   edi
c001b0a8:	56                   	push   esi
c001b0a9:	53                   	push   ebx
c001b0aa:	83 ec 1c             	sub    esp,0x1c
c001b0ad:	0f b6 5c 24 38       	movzx  ebx,BYTE PTR [esp+0x38]
c001b0b2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b0b6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b0ba:	0f b6 54 24 34       	movzx  edx,BYTE PTR [esp+0x34]
c001b0bf:	88 d9                	mov    cl,bl
c001b0c1:	80 e9 08             	sub    cl,0x8
c001b0c4:	80 f9 03             	cmp    cl,0x3
c001b0c7:	77 4e                	ja     c001b117 <IDE::write(unsigned char, unsigned char, unsigned char)+0x71>
c001b0c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b0cd:	0f b6 fa             	movzx  edi,dl
c001b0d0:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b0d3:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001b0d7:	80 ca 80             	or     dl,0x80
c001b0da:	0f b6 d2             	movzx  edx,dl
c001b0dd:	52                   	push   edx
c001b0de:	6a 0c                	push   0xc
c001b0e0:	57                   	push   edi
c001b0e1:	56                   	push   esi
c001b0e2:	e8 bf ff ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b0e7:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001b0ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0f0:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b0f4:	ee                   	out    dx,al
c001b0f5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b0fa:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001b0fe:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b102:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b10a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b10e:	83 c4 2c             	add    esp,0x2c
c001b111:	5b                   	pop    ebx
c001b112:	5e                   	pop    esi
c001b113:	5f                   	pop    edi
c001b114:	5d                   	pop    ebp
c001b115:	eb 8f                	jmp    c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b117:	80 fb 07             	cmp    bl,0x7
c001b11a:	77 0c                	ja     c001b128 <IDE::write(unsigned char, unsigned char, unsigned char)+0x82>
c001b11c:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001b124:	01 da                	add    edx,ebx
c001b126:	eb 23                	jmp    c001b14b <IDE::write(unsigned char, unsigned char, unsigned char)+0xa5>
c001b128:	80 fb 0d             	cmp    bl,0xd
c001b12b:	77 0d                	ja     c001b13a <IDE::write(unsigned char, unsigned char, unsigned char)+0x94>
c001b12d:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001b134:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b138:	eb 11                	jmp    c001b14b <IDE::write(unsigned char, unsigned char, unsigned char)+0xa5>
c001b13a:	80 fb 15             	cmp    bl,0x15
c001b13d:	77 0d                	ja     c001b14c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa6>
c001b13f:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001b147:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b14b:	ee                   	out    dx,al
c001b14c:	83 c4 1c             	add    esp,0x1c
c001b14f:	5b                   	pop    ebx
c001b150:	5e                   	pop    esi
c001b151:	5f                   	pop    edi
c001b152:	5d                   	pop    ebp
c001b153:	c3                   	ret    

c001b154 <IDE::read(unsigned char, unsigned char)>:
c001b154:	55                   	push   ebp
c001b155:	57                   	push   edi
c001b156:	56                   	push   esi
c001b157:	53                   	push   ebx
c001b158:	83 ec 1c             	sub    esp,0x1c
c001b15b:	0f b6 5c 24 38       	movzx  ebx,BYTE PTR [esp+0x38]
c001b160:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b164:	0f b6 54 24 34       	movzx  edx,BYTE PTR [esp+0x34]
c001b169:	88 d8                	mov    al,bl
c001b16b:	2c 08                	sub    al,0x8
c001b16d:	3c 03                	cmp    al,0x3
c001b16f:	77 3f                	ja     c001b1b0 <IDE::read(unsigned char, unsigned char)+0x5c>
c001b171:	0f b6 f2             	movzx  esi,dl
c001b174:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b177:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001b17b:	0c 80                	or     al,0x80
c001b17d:	0f b6 c0             	movzx  eax,al
c001b180:	50                   	push   eax
c001b181:	6a 0c                	push   0xc
c001b183:	56                   	push   esi
c001b184:	57                   	push   edi
c001b185:	e8 1c ff ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b18a:	66 8b 44 ef 0a       	mov    ax,WORD PTR [edi+ebp*8+0xa]
c001b18f:	8d 54 18 fa          	lea    edx,[eax+ebx*1-0x6]
c001b193:	ec                   	in     al,dx
c001b194:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b198:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b19d:	52                   	push   edx
c001b19e:	6a 0c                	push   0xc
c001b1a0:	56                   	push   esi
c001b1a1:	57                   	push   edi
c001b1a2:	e8 ff fe ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b1a7:	83 c4 20             	add    esp,0x20
c001b1aa:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b1ae:	eb 38                	jmp    c001b1e8 <IDE::read(unsigned char, unsigned char)+0x94>
c001b1b0:	80 fb 07             	cmp    bl,0x7
c001b1b3:	77 0d                	ja     c001b1c2 <IDE::read(unsigned char, unsigned char)+0x6e>
c001b1b5:	66 8b 84 d7 5a 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15a]
c001b1bd:	8d 14 18             	lea    edx,[eax+ebx*1]
c001b1c0:	eb 25                	jmp    c001b1e7 <IDE::read(unsigned char, unsigned char)+0x93>
c001b1c2:	80 fb 0d             	cmp    bl,0xd
c001b1c5:	77 0d                	ja     c001b1d4 <IDE::read(unsigned char, unsigned char)+0x80>
c001b1c7:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001b1ce:	8d 54 18 f4          	lea    edx,[eax+ebx*1-0xc]
c001b1d2:	eb 13                	jmp    c001b1e7 <IDE::read(unsigned char, unsigned char)+0x93>
c001b1d4:	31 c0                	xor    eax,eax
c001b1d6:	80 fb 15             	cmp    bl,0x15
c001b1d9:	77 0d                	ja     c001b1e8 <IDE::read(unsigned char, unsigned char)+0x94>
c001b1db:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001b1e3:	8d 54 18 f2          	lea    edx,[eax+ebx*1-0xe]
c001b1e7:	ec                   	in     al,dx
c001b1e8:	83 c4 1c             	add    esp,0x1c
c001b1eb:	5b                   	pop    ebx
c001b1ec:	5e                   	pop    esi
c001b1ed:	5f                   	pop    edi
c001b1ee:	5d                   	pop    ebp
c001b1ef:	c3                   	ret    

c001b1f0 <IDE::waitInterrupt(unsigned char)>:
c001b1f0:	57                   	push   edi
c001b1f1:	56                   	push   esi
c001b1f2:	53                   	push   ebx
c001b1f3:	31 db                	xor    ebx,ebx
c001b1f5:	83 ec 10             	sub    esp,0x10
c001b1f8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b1fc:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b201:	8a 84 37 6c 02 00 00 	mov    al,BYTE PTR [edi+esi*1+0x26c]
c001b208:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b20c:	84 c0                	test   al,al
c001b20e:	75 32                	jne    c001b242 <IDE::waitInterrupt(unsigned char)+0x52>
c001b210:	50                   	push   eax
c001b211:	6a 0c                	push   0xc
c001b213:	56                   	push   esi
c001b214:	57                   	push   edi
c001b215:	e8 3a ff ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001b21a:	83 c4 10             	add    esp,0x10
c001b21d:	24 01                	and    al,0x1
c001b21f:	84 c0                	test   al,al
c001b221:	75 27                	jne    c001b24a <IDE::waitInterrupt(unsigned char)+0x5a>
c001b223:	f6 c3 04             	test   bl,0x4
c001b226:	75 12                	jne    c001b23a <IDE::waitInterrupt(unsigned char)+0x4a>
c001b228:	83 fb 32             	cmp    ebx,0x32
c001b22b:	7e 0d                	jle    c001b23a <IDE::waitInterrupt(unsigned char)+0x4a>
c001b22d:	83 ec 0c             	sub    esp,0xc
c001b230:	6a 64                	push   0x64
c001b232:	e8 05 a8 ff ff       	call   c0015a3c <milliTenthSleep(unsigned int)>
c001b237:	83 c4 10             	add    esp,0x10
c001b23a:	83 fb 3c             	cmp    ebx,0x3c
c001b23d:	74 0b                	je     c001b24a <IDE::waitInterrupt(unsigned char)+0x5a>
c001b23f:	43                   	inc    ebx
c001b240:	eb bf                	jmp    c001b201 <IDE::waitInterrupt(unsigned char)+0x11>
c001b242:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b24a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b24e:	83 c4 10             	add    esp,0x10
c001b251:	5b                   	pop    ebx
c001b252:	5e                   	pop    esi
c001b253:	5f                   	pop    edi
c001b254:	c3                   	ret    

c001b255 <ideChannel0IRQHandler(regs*, void*)>:
c001b255:	83 ec 10             	sub    esp,0x10
c001b258:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b25c:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b263:	6a 07                	push   0x7
c001b265:	6a 00                	push   0x0
c001b267:	50                   	push   eax
c001b268:	e8 e7 fe ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001b26d:	83 c4 1c             	add    esp,0x1c
c001b270:	c3                   	ret    

c001b271 <ideChannel1IRQHandler(regs*, void*)>:
c001b271:	83 ec 10             	sub    esp,0x10
c001b274:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b278:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b27f:	6a 07                	push   0x7
c001b281:	6a 01                	push   0x1
c001b283:	50                   	push   eax
c001b284:	e8 cb fe ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001b289:	83 c4 1c             	add    esp,0x1c
c001b28c:	c3                   	ret    
c001b28d:	90                   	nop

c001b28e <IDE::enableIRQs(unsigned char, bool)>:
c001b28e:	57                   	push   edi
c001b28f:	56                   	push   esi
c001b290:	be 04 00 00 00       	mov    esi,0x4
c001b295:	53                   	push   ebx
c001b296:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b29b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b29f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001b2a4:	0f 94 c0             	sete   al
c001b2a7:	00 c0                	add    al,al
c001b2a9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001b2b0:	0f b6 c0             	movzx  eax,al
c001b2b3:	50                   	push   eax
c001b2b4:	6a 0c                	push   0xc
c001b2b6:	57                   	push   edi
c001b2b7:	53                   	push   ebx
c001b2b8:	e8 e9 fd ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2bd:	83 c4 10             	add    esp,0x10
c001b2c0:	50                   	push   eax
c001b2c1:	6a 0c                	push   0xc
c001b2c3:	57                   	push   edi
c001b2c4:	53                   	push   ebx
c001b2c5:	e8 8a fe ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001b2ca:	83 c4 10             	add    esp,0x10
c001b2cd:	4e                   	dec    esi
c001b2ce:	75 f0                	jne    c001b2c0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001b2d0:	5b                   	pop    ebx
c001b2d1:	5e                   	pop    esi
c001b2d2:	5f                   	pop    edi
c001b2d3:	c3                   	ret    

c001b2d4 <IDE::open(int, int, void*)>:
c001b2d4:	55                   	push   ebp
c001b2d5:	57                   	push   edi
c001b2d6:	56                   	push   esi
c001b2d7:	53                   	push   ebx
c001b2d8:	83 ec 1c             	sub    esp,0x1c
c001b2db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b2df:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001b2e6:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b2ef:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001b2f8:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001b2ff:	0f 85 b7 02 00 00    	jne    c001b5bc <IDE::open(int, int, void*)+0x2e8>
c001b305:	8a 8b 1f 01 00 00    	mov    cl,BYTE PTR [ebx+0x11f]
c001b30b:	88 c8                	mov    al,cl
c001b30d:	24 7f                	and    al,0x7f
c001b30f:	0f b6 c0             	movzx  eax,al
c001b312:	83 f8 05             	cmp    eax,0x5
c001b315:	74 05                	je     c001b31c <IDE::open(int, int, void*)+0x48>
c001b317:	83 f8 0f             	cmp    eax,0xf
c001b31a:	75 32                	jne    c001b34e <IDE::open(int, int, void*)+0x7a>
c001b31c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001b322:	83 e0 fc             	and    eax,0xfffffffc
c001b325:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b32c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001b332:	83 e0 fc             	and    eax,0xfffffffc
c001b335:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b33c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001b342:	83 e0 fc             	and    eax,0xfffffffc
c001b345:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b34c:	eb 14                	jmp    c001b362 <IDE::open(int, int, void*)+0x8e>
c001b34e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001b358:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001b362:	0f b6 bb 1c 01 00 00 	movzx  edi,BYTE PTR [ebx+0x11c]
c001b369:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b36e:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001b375:	89 fe                	mov    esi,edi
c001b377:	c1 e6 10             	shl    esi,0x10
c001b37a:	89 e8                	mov    eax,ebp
c001b37c:	c1 e0 0b             	shl    eax,0xb
c001b37f:	09 c6                	or     esi,eax
c001b381:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b388:	c1 e0 08             	shl    eax,0x8
c001b38b:	09 c6                	or     esi,eax
c001b38d:	89 f0                	mov    eax,esi
c001b38f:	0d 08 00 00 80       	or     eax,0x80000008
c001b394:	ef                   	out    dx,eax
c001b395:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b39a:	ed                   	in     eax,dx
c001b39b:	c1 e8 10             	shr    eax,0x10
c001b39e:	3d ff ff 00 00       	cmp    eax,0xffff
c001b3a3:	0f 84 f9 00 00 00    	je     c001b4a2 <IDE::open(int, int, void*)+0x1ce>
c001b3a9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001b3af:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b3b4:	89 f0                	mov    eax,esi
c001b3b6:	ef                   	out    dx,eax
c001b3b7:	b0 fe                	mov    al,0xfe
c001b3b9:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b3be:	ee                   	out    dx,al
c001b3bf:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b3c4:	89 f0                	mov    eax,esi
c001b3c6:	ef                   	out    dx,eax
c001b3c7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b3cc:	ed                   	in     eax,dx
c001b3cd:	3c fe                	cmp    al,0xfe
c001b3cf:	0f 85 a5 00 00 00    	jne    c001b47a <IDE::open(int, int, void*)+0x1a6>
c001b3d5:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001b3db:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b3e2:	74 31                	je     c001b415 <IDE::open(int, int, void*)+0x141>
c001b3e4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001b3ea:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001b3ee:	83 ec 0c             	sub    esp,0xc
c001b3f1:	fe c0                	inc    al
c001b3f3:	0f b6 c0             	movzx  eax,al
c001b3f6:	50                   	push   eax
c001b3f7:	55                   	push   ebp
c001b3f8:	57                   	push   edi
c001b3f9:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001b3ff:	51                   	push   ecx
c001b400:	e8 a7 3f ff ff       	call   c000f3ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001b405:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001b40a:	83 c4 1c             	add    esp,0x1c
c001b40d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b413:	eb 0a                	jmp    c001b41f <IDE::open(int, int, void*)+0x14b>
c001b415:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001b41f:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001b426:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001b42b:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b432:	89 ea                	mov    edx,ebp
c001b434:	c1 e6 10             	shl    esi,0x10
c001b437:	c1 e0 08             	shl    eax,0x8
c001b43a:	09 c6                	or     esi,eax
c001b43c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001b443:	c1 e0 0b             	shl    eax,0xb
c001b446:	09 c6                	or     esi,eax
c001b448:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001b44e:	89 f0                	mov    eax,esi
c001b450:	ef                   	out    dx,eax
c001b451:	8b 8b 50 01 00 00    	mov    ecx,DWORD PTR [ebx+0x150]
c001b457:	bf fc 0c 00 00       	mov    edi,0xcfc
c001b45c:	89 fa                	mov    edx,edi
c001b45e:	88 c8                	mov    al,cl
c001b460:	ee                   	out    dx,al
c001b461:	89 f0                	mov    eax,esi
c001b463:	89 ea                	mov    edx,ebp
c001b465:	ef                   	out    dx,eax
c001b466:	89 fa                	mov    edx,edi
c001b468:	ed                   	in     eax,dx
c001b469:	0f b6 c0             	movzx  eax,al
c001b46c:	39 c8                	cmp    eax,ecx
c001b46e:	74 42                	je     c001b4b2 <IDE::open(int, int, void*)+0x1de>
c001b470:	83 ec 0c             	sub    esp,0xc
c001b473:	68 60 1f 02 c0       	push   0xc0021f60
c001b478:	eb 30                	jmp    c001b4aa <IDE::open(int, int, void*)+0x1d6>
c001b47a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b483:	75 13                	jne    c001b498 <IDE::open(int, int, void*)+0x1c4>
c001b485:	80 f9 8a             	cmp    cl,0x8a
c001b488:	74 05                	je     c001b48f <IDE::open(int, int, void*)+0x1bb>
c001b48a:	80 f9 80             	cmp    cl,0x80
c001b48d:	75 09                	jne    c001b498 <IDE::open(int, int, void*)+0x1c4>
c001b48f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b496:	eb 1a                	jmp    c001b4b2 <IDE::open(int, int, void*)+0x1de>
c001b498:	83 ec 0c             	sub    esp,0xc
c001b49b:	68 68 1f 02 c0       	push   0xc0021f68
c001b4a0:	eb 08                	jmp    c001b4aa <IDE::open(int, int, void*)+0x1d6>
c001b4a2:	83 ec 0c             	sub    esp,0xc
c001b4a5:	68 99 1f 02 c0       	push   0xc0021f99
c001b4aa:	e8 86 59 ff ff       	call   c0010e35 <KePanic(char const*)>
c001b4af:	83 c4 10             	add    esp,0x10
c001b4b2:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001b4b9:	79 1c                	jns    c001b4d7 <IDE::open(int, int, void*)+0x203>
c001b4bb:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b4c1:	25 fc ff 00 00       	and    eax,0xfffc
c001b4c6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b4cd:	83 c0 08             	add    eax,0x8
c001b4d0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b4d7:	0f b7 83 5c 01 00 00 	movzx  eax,WORD PTR [ebx+0x15c]
c001b4de:	89 c2                	mov    edx,eax
c001b4e0:	83 e2 0f             	and    edx,0xf
c001b4e3:	83 fa 08             	cmp    edx,0x8
c001b4e6:	75 0a                	jne    c001b4f2 <IDE::open(int, int, void*)+0x21e>
c001b4e8:	83 e8 02             	sub    eax,0x2
c001b4eb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b4f2:	0f b7 83 64 01 00 00 	movzx  eax,WORD PTR [ebx+0x164]
c001b4f9:	89 c2                	mov    edx,eax
c001b4fb:	83 e2 0f             	and    edx,0xf
c001b4fe:	83 fa 08             	cmp    edx,0x8
c001b501:	75 0a                	jne    c001b50d <IDE::open(int, int, void*)+0x239>
c001b503:	83 e8 02             	sub    eax,0x2
c001b506:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b50d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b514:	0f b7 b3 5a 01 00 00 	movzx  esi,WORD PTR [ebx+0x15a]
c001b51b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b51e:	89 d0                	mov    eax,edx
c001b520:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b524:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b528:	88 d1                	mov    cl,dl
c001b52a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001b52f:	fe c1                	inc    cl
c001b531:	0f b6 c9             	movzx  ecx,cl
c001b534:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b537:	0f b7 b3 62 01 00 00 	movzx  esi,WORD PTR [ebx+0x162]
c001b53e:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b542:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b546:	88 c2                	mov    dl,al
c001b548:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001b54d:	80 c2 02             	add    dl,0x2
c001b550:	0f b6 d2             	movzx  edx,dl
c001b553:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b556:	0f b7 b3 5c 01 00 00 	movzx  esi,WORD PTR [ebx+0x15c]
c001b55d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b561:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b565:	88 c1                	mov    cl,al
c001b567:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001b56c:	80 c1 03             	add    cl,0x3
c001b56f:	0f b6 c9             	movzx  ecx,cl
c001b572:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b575:	0f b7 b3 64 01 00 00 	movzx  esi,WORD PTR [ebx+0x164]
c001b57c:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b580:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b584:	88 c2                	mov    dl,al
c001b586:	80 c2 04             	add    dl,0x4
c001b589:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b58f:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001b594:	0f b7 b3 5e 01 00 00 	movzx  esi,WORD PTR [ebx+0x15e]
c001b59b:	85 f6                	test   esi,esi
c001b59d:	74 5d                	je     c001b5fc <IDE::open(int, int, void*)+0x328>
c001b59f:	0f b6 d2             	movzx  edx,dl
c001b5a2:	04 05                	add    al,0x5
c001b5a4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b5a7:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b5ab:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b5af:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b5b5:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001b5ba:	eb 40                	jmp    c001b5fc <IDE::open(int, int, void*)+0x328>
c001b5bc:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b5c3:	0f b7 83 18 01 00 00 	movzx  eax,WORD PTR [ebx+0x118]
c001b5ca:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b5d1:	05 06 02 00 00       	add    eax,0x206
c001b5d6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b5dd:	0f b7 83 1a 01 00 00 	movzx  eax,WORD PTR [ebx+0x11a]
c001b5e4:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b5eb:	05 06 02 00 00       	add    eax,0x206
c001b5f0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b5f7:	e9 db fe ff ff       	jmp    c001b4d7 <IDE::open(int, int, void*)+0x203>
c001b5fc:	50                   	push   eax
c001b5fd:	50                   	push   eax
c001b5fe:	6a 00                	push   0x0
c001b600:	53                   	push   ebx
c001b601:	e8 7a fa ff ff       	call   c001b080 <IDE::prepareInterrupt(unsigned char)>
c001b606:	5a                   	pop    edx
c001b607:	59                   	pop    ecx
c001b608:	6a 01                	push   0x1
c001b60a:	53                   	push   ebx
c001b60b:	e8 70 fa ff ff       	call   c001b080 <IDE::prepareInterrupt(unsigned char)>
c001b610:	83 c4 0c             	add    esp,0xc
c001b613:	6a 00                	push   0x0
c001b615:	6a 00                	push   0x0
c001b617:	53                   	push   ebx
c001b618:	e8 71 fc ff ff       	call   c001b28e <IDE::enableIRQs(unsigned char, bool)>
c001b61d:	83 c4 0c             	add    esp,0xc
c001b620:	6a 00                	push   0x0
c001b622:	6a 01                	push   0x1
c001b624:	53                   	push   ebx
c001b625:	e8 64 fc ff ff       	call   c001b28e <IDE::enableIRQs(unsigned char, bool)>
c001b62a:	83 c4 10             	add    esp,0x10
c001b62d:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b634:	74 34                	je     c001b66a <IDE::open(int, int, void*)+0x396>
c001b636:	83 ec 0c             	sub    esp,0xc
c001b639:	53                   	push   ebx
c001b63a:	6a 01                	push   0x1
c001b63c:	68 55 b2 01 c0       	push   0xc001b255
c001b641:	6a 0e                	push   0xe
c001b643:	53                   	push   ebx
c001b644:	e8 4f 0e ff ff       	call   c000c498 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b649:	83 c4 14             	add    esp,0x14
c001b64c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b652:	53                   	push   ebx
c001b653:	6a 01                	push   0x1
c001b655:	68 71 b2 01 c0       	push   0xc001b271
c001b65a:	6a 0f                	push   0xf
c001b65c:	53                   	push   ebx
c001b65d:	e8 36 0e ff ff       	call   c000c498 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b662:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b668:	eb 38                	jmp    c001b6a2 <IDE::open(int, int, void*)+0x3ce>
c001b66a:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b674:	83 ec 0c             	sub    esp,0xc
c001b677:	53                   	push   ebx
c001b678:	6a 00                	push   0x0
c001b67a:	68 55 b2 01 c0       	push   0xc001b255
c001b67f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b685:	53                   	push   ebx
c001b686:	e8 0d 0e ff ff       	call   c000c498 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b68b:	83 c4 14             	add    esp,0x14
c001b68e:	53                   	push   ebx
c001b68f:	6a 00                	push   0x0
c001b691:	68 71 b2 01 c0       	push   0xc001b271
c001b696:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b69c:	53                   	push   ebx
c001b69d:	e8 f6 0d ff ff       	call   c000c498 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b6a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6a4:	83 c4 20             	add    esp,0x20
c001b6a7:	83 ec 0c             	sub    esp,0xc
c001b6aa:	53                   	push   ebx
c001b6ab:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b6ae:	83 c4 0c             	add    esp,0xc
c001b6b1:	6a 07                	push   0x7
c001b6b3:	6a 00                	push   0x0
c001b6b5:	53                   	push   ebx
c001b6b6:	e8 99 fa ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001b6bb:	83 c4 0c             	add    esp,0xc
c001b6be:	6a 07                	push   0x7
c001b6c0:	6a 01                	push   0x1
c001b6c2:	53                   	push   ebx
c001b6c3:	e8 8c fa ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001b6c8:	83 c4 0c             	add    esp,0xc
c001b6cb:	6a 01                	push   0x1
c001b6cd:	6a 00                	push   0x0
c001b6cf:	53                   	push   ebx
c001b6d0:	e8 b9 fb ff ff       	call   c001b28e <IDE::enableIRQs(unsigned char, bool)>
c001b6d5:	83 c4 0c             	add    esp,0xc
c001b6d8:	6a 01                	push   0x1
c001b6da:	6a 01                	push   0x1
c001b6dc:	53                   	push   ebx
c001b6dd:	e8 ac fb ff ff       	call   c001b28e <IDE::enableIRQs(unsigned char, bool)>
c001b6e2:	83 c4 2c             	add    esp,0x2c
c001b6e5:	31 c0                	xor    eax,eax
c001b6e7:	5b                   	pop    ebx
c001b6e8:	5e                   	pop    esi
c001b6e9:	5f                   	pop    edi
c001b6ea:	5d                   	pop    ebp
c001b6eb:	c3                   	ret    

c001b6ec <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b6ec:	55                   	push   ebp
c001b6ed:	57                   	push   edi
c001b6ee:	56                   	push   esi
c001b6ef:	53                   	push   ebx
c001b6f0:	83 ec 1c             	sub    esp,0x1c
c001b6f3:	0f b6 54 24 38       	movzx  edx,BYTE PTR [esp+0x38]
c001b6f8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b6fc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b700:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b704:	88 d0                	mov    al,dl
c001b706:	0f b6 5c 24 34       	movzx  ebx,BYTE PTR [esp+0x34]
c001b70b:	2c 08                	sub    al,0x8
c001b70d:	3c 03                	cmp    al,0x3
c001b70f:	77 57                	ja     c001b768 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b711:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b715:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b718:	88 54 24 0b          	mov    BYTE PTR [esp+0xb],dl
c001b71c:	8a 44 ee 10          	mov    al,BYTE PTR [esi+ebp*8+0x10]
c001b720:	0c 80                	or     al,0x80
c001b722:	0f b6 c0             	movzx  eax,al
c001b725:	50                   	push   eax
c001b726:	6a 0c                	push   0xc
c001b728:	53                   	push   ebx
c001b729:	56                   	push   esi
c001b72a:	e8 77 f9 ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b72f:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b734:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c001b739:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b73d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b741:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b743:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b748:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b74c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b750:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b758:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b75c:	83 c4 2c             	add    esp,0x2c
c001b75f:	5b                   	pop    ebx
c001b760:	5e                   	pop    esi
c001b761:	5f                   	pop    edi
c001b762:	5d                   	pop    ebp
c001b763:	e9 3e f9 ff ff       	jmp    c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b768:	80 fa 07             	cmp    dl,0x7
c001b76b:	77 0c                	ja     c001b779 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x8d>
c001b76d:	66 8b 84 de 5a 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15a]
c001b775:	01 c2                	add    edx,eax
c001b777:	eb 23                	jmp    c001b79c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xb0>
c001b779:	80 fa 0d             	cmp    dl,0xd
c001b77c:	77 0d                	ja     c001b78b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x9f>
c001b77e:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b785:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b789:	eb 11                	jmp    c001b79c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xb0>
c001b78b:	80 fa 15             	cmp    dl,0x15
c001b78e:	77 0e                	ja     c001b79e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xb2>
c001b790:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b798:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b79c:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b79e:	83 c4 1c             	add    esp,0x1c
c001b7a1:	5b                   	pop    ebx
c001b7a2:	5e                   	pop    esi
c001b7a3:	5f                   	pop    edi
c001b7a4:	5d                   	pop    ebp
c001b7a5:	c3                   	ret    

c001b7a6 <IDE::detect()>:
c001b7a6:	55                   	push   ebp
c001b7a7:	57                   	push   edi
c001b7a8:	56                   	push   esi
c001b7a9:	53                   	push   ebx
c001b7aa:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b7b0:	8b b4 24 30 02 00 00 	mov    esi,DWORD PTR [esp+0x230]
c001b7b7:	80 be 58 01 00 00 00 	cmp    BYTE PTR [esi+0x158],0x0
c001b7be:	0f 85 91 02 00 00    	jne    c001ba55 <IDE::detect()+0x2af>
c001b7c4:	c6 86 58 01 00 00 01 	mov    BYTE PTR [esi+0x158],0x1
c001b7cb:	31 db                	xor    ebx,ebx
c001b7cd:	31 ff                	xor    edi,edi
c001b7cf:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b7d4:	89 f8                	mov    eax,edi
c001b7d6:	c1 e0 06             	shl    eax,0x6
c001b7d9:	c6 84 06 6c 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x16c],0x0
c001b7e1:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001b7e5:	c0 e0 04             	shl    al,0x4
c001b7e8:	0c a0                	or     al,0xa0
c001b7ea:	0f b6 c0             	movzx  eax,al
c001b7ed:	50                   	push   eax
c001b7ee:	6a 06                	push   0x6
c001b7f0:	53                   	push   ebx
c001b7f1:	56                   	push   esi
c001b7f2:	e8 af f8 ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7f7:	83 c4 0c             	add    esp,0xc
c001b7fa:	6a 0c                	push   0xc
c001b7fc:	53                   	push   ebx
c001b7fd:	56                   	push   esi
c001b7fe:	e8 51 f9 ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001b803:	83 c4 0c             	add    esp,0xc
c001b806:	6a 0c                	push   0xc
c001b808:	53                   	push   ebx
c001b809:	56                   	push   esi
c001b80a:	e8 45 f9 ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001b80f:	83 c4 0c             	add    esp,0xc
c001b812:	6a 0c                	push   0xc
c001b814:	53                   	push   ebx
c001b815:	56                   	push   esi
c001b816:	e8 39 f9 ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001b81b:	83 c4 0c             	add    esp,0xc
c001b81e:	6a 0c                	push   0xc
c001b820:	53                   	push   ebx
c001b821:	56                   	push   esi
c001b822:	e8 2d f9 ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001b827:	68 ec 00 00 00       	push   0xec
c001b82c:	6a 07                	push   0x7
c001b82e:	53                   	push   ebx
c001b82f:	56                   	push   esi
c001b830:	e8 71 f8 ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b835:	83 c4 1c             	add    esp,0x1c
c001b838:	6a 0c                	push   0xc
c001b83a:	53                   	push   ebx
c001b83b:	56                   	push   esi
c001b83c:	e8 13 f9 ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001b841:	83 c4 0c             	add    esp,0xc
c001b844:	6a 0c                	push   0xc
c001b846:	53                   	push   ebx
c001b847:	56                   	push   esi
c001b848:	e8 07 f9 ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001b84d:	83 c4 0c             	add    esp,0xc
c001b850:	6a 0c                	push   0xc
c001b852:	53                   	push   ebx
c001b853:	56                   	push   esi
c001b854:	e8 fb f8 ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001b859:	83 c4 0c             	add    esp,0xc
c001b85c:	6a 0c                	push   0xc
c001b85e:	53                   	push   ebx
c001b85f:	56                   	push   esi
c001b860:	e8 ef f8 ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001b865:	83 c4 0c             	add    esp,0xc
c001b868:	6a 0c                	push   0xc
c001b86a:	53                   	push   ebx
c001b86b:	56                   	push   esi
c001b86c:	e8 e3 f8 ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001b871:	83 c4 10             	add    esp,0x10
c001b874:	84 c0                	test   al,al
c001b876:	0f 84 62 01 00 00    	je     c001b9de <IDE::detect()+0x238>
c001b87c:	31 ed                	xor    ebp,ebp
c001b87e:	50                   	push   eax
c001b87f:	6a 0c                	push   0xc
c001b881:	53                   	push   ebx
c001b882:	56                   	push   esi
c001b883:	e8 cc f8 ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001b888:	83 c4 10             	add    esp,0x10
c001b88b:	88 c2                	mov    dl,al
c001b88d:	80 e2 01             	and    dl,0x1
c001b890:	84 d2                	test   dl,dl
c001b892:	0f 85 64 01 00 00    	jne    c001b9fc <IDE::detect()+0x256>
c001b898:	84 c0                	test   al,al
c001b89a:	78 04                	js     c001b8a0 <IDE::detect()+0xfa>
c001b89c:	24 08                	and    al,0x8
c001b89e:	75 23                	jne    c001b8c3 <IDE::detect()+0x11d>
c001b8a0:	45                   	inc    ebp
c001b8a1:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001b8a7:	7e d5                	jle    c001b87e <IDE::detect()+0xd8>
c001b8a9:	83 ec 0c             	sub    esp,0xc
c001b8ac:	6a 32                	push   0x32
c001b8ae:	e8 89 a1 ff ff       	call   c0015a3c <milliTenthSleep(unsigned int)>
c001b8b3:	83 c4 10             	add    esp,0x10
c001b8b6:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001b8bc:	75 c0                	jne    c001b87e <IDE::detect()+0xd8>
c001b8be:	e9 39 01 00 00       	jmp    c001b9fc <IDE::detect()+0x256>
c001b8c3:	31 d2                	xor    edx,edx
c001b8c5:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b8c9:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001b8cd:	83 ec 0c             	sub    esp,0xc
c001b8d0:	68 80 00 00 00       	push   0x80
c001b8d5:	55                   	push   ebp
c001b8d6:	6a 00                	push   0x0
c001b8d8:	53                   	push   ebx
c001b8d9:	56                   	push   esi
c001b8da:	e8 0d fe ff ff       	call   c001b6ec <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b8df:	0f b6 4c 24 2c       	movzx  ecx,BYTE PTR [esp+0x2c]
c001b8e4:	89 f8                	mov    eax,edi
c001b8e6:	c1 e0 06             	shl    eax,0x6
c001b8e9:	01 f0                	add    eax,esi
c001b8eb:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b8f2:	66 89 88 70 01 00 00 	mov    WORD PTR [eax+0x170],cx
c001b8f9:	89 ca                	mov    edx,ecx
c001b8fb:	8a 4c 24 2b          	mov    cl,BYTE PTR [esp+0x2b]
c001b8ff:	88 98 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],bl
c001b905:	88 88 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],cl
c001b90b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b90f:	66 89 88 72 01 00 00 	mov    WORD PTR [eax+0x172],cx
c001b916:	66 8b 8c 24 92 00 00 00 	mov    cx,WORD PTR [esp+0x92]
c001b91e:	66 89 88 74 01 00 00 	mov    WORD PTR [eax+0x174],cx
c001b925:	0f b6 8c 24 d4 00 00 00 	movzx  ecx,BYTE PTR [esp+0xd4]
c001b92d:	89 88 78 01 00 00    	mov    DWORD PTR [eax+0x178],ecx
c001b933:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c001b93a:	89 88 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],ecx
c001b940:	8d 4c 24 58          	lea    ecx,[esp+0x58]
c001b944:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b948:	83 c4 20             	add    esp,0x20
c001b94b:	8a 4d 37             	mov    cl,BYTE PTR [ebp+0x37]
c001b94e:	83 c5 02             	add    ebp,0x2
c001b951:	83 c0 02             	add    eax,0x2
c001b954:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001b95a:	8a 4d 34             	mov    cl,BYTE PTR [ebp+0x34]
c001b95d:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001b963:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001b967:	75 e2                	jne    c001b94b <IDE::detect()+0x1a5>
c001b969:	89 f9                	mov    ecx,edi
c001b96b:	c1 e1 06             	shl    ecx,0x6
c001b96e:	01 f1                	add    ecx,esi
c001b970:	c6 81 a8 01 00 00 00 	mov    BYTE PTR [ecx+0x1a8],0x0
c001b977:	0f b7 81 74 01 00 00 	movzx  eax,WORD PTR [ecx+0x174]
c001b97e:	c1 e8 09             	shr    eax,0x9
c001b981:	24 01                	and    al,0x1
c001b983:	84 d2                	test   dl,dl
c001b985:	88 81 a9 01 00 00    	mov    BYTE PTR [ecx+0x1a9],al
c001b98b:	75 22                	jne    c001b9af <IDE::detect()+0x209>
c001b98d:	83 b9 7c 01 00 00 00 	cmp    DWORD PTR [ecx+0x17c],0x0
c001b994:	74 47                	je     c001b9dd <IDE::detect()+0x237>
c001b996:	83 ec 0c             	sub    esp,0xc
c001b999:	68 7c 01 00 00       	push   0x17c
c001b99e:	e8 59 c1 fe ff       	call   c0007afc <malloc>
c001b9a3:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9a6:	89 c5                	mov    ebp,eax
c001b9a8:	e8 3b 05 00 00       	call   c001bee8 <ATA::ATA()>
c001b9ad:	eb 17                	jmp    c001b9c6 <IDE::detect()+0x220>
c001b9af:	83 ec 0c             	sub    esp,0xc
c001b9b2:	68 84 01 00 00       	push   0x184
c001b9b7:	e8 40 c1 fe ff       	call   c0007afc <malloc>
c001b9bc:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9bf:	89 c5                	mov    ebp,eax
c001b9c1:	e8 b6 0e 00 00       	call   c001c87c <ATAPI::ATAPI()>
c001b9c6:	5a                   	pop    edx
c001b9c7:	59                   	pop    ecx
c001b9c8:	55                   	push   ebp
c001b9c9:	56                   	push   esi
c001b9ca:	e8 1b 0b ff ff       	call   c000c4ea <Device::addChild(Device*)>
c001b9cf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b9d2:	56                   	push   esi
c001b9d3:	57                   	push   edi
c001b9d4:	6a 00                	push   0x0
c001b9d6:	55                   	push   ebp
c001b9d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b9da:	83 c4 20             	add    esp,0x20
c001b9dd:	47                   	inc    edi
c001b9de:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001b9e3:	74 0a                	je     c001b9ef <IDE::detect()+0x249>
c001b9e5:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c001b9ea:	e9 e5 fd ff ff       	jmp    c001b7d4 <IDE::detect()+0x2e>
c001b9ef:	4b                   	dec    ebx
c001b9f0:	74 63                	je     c001ba55 <IDE::detect()+0x2af>
c001b9f2:	bb 01 00 00 00       	mov    ebx,0x1
c001b9f7:	e9 d3 fd ff ff       	jmp    c001b7cf <IDE::detect()+0x29>
c001b9fc:	50                   	push   eax
c001b9fd:	6a 04                	push   0x4
c001b9ff:	53                   	push   ebx
c001ba00:	56                   	push   esi
c001ba01:	e8 4e f7 ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001ba06:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ba0a:	83 c4 0c             	add    esp,0xc
c001ba0d:	6a 05                	push   0x5
c001ba0f:	53                   	push   ebx
c001ba10:	56                   	push   esi
c001ba11:	e8 3e f7 ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001ba16:	83 c4 10             	add    esp,0x10
c001ba19:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001ba1d:	80 fa 14             	cmp    dl,0x14
c001ba20:	74 2d                	je     c001ba4f <IDE::detect()+0x2a9>
c001ba22:	80 fa 69             	cmp    dl,0x69
c001ba25:	75 b7                	jne    c001b9de <IDE::detect()+0x238>
c001ba27:	3c 96                	cmp    al,0x96
c001ba29:	75 b3                	jne    c001b9de <IDE::detect()+0x238>
c001ba2b:	68 a1 00 00 00       	push   0xa1
c001ba30:	6a 07                	push   0x7
c001ba32:	53                   	push   ebx
c001ba33:	56                   	push   esi
c001ba34:	e8 6d f6 ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba39:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001ba40:	e8 f7 9f ff ff       	call   c0015a3c <milliTenthSleep(unsigned int)>
c001ba45:	83 c4 10             	add    esp,0x10
c001ba48:	b2 01                	mov    dl,0x1
c001ba4a:	e9 76 fe ff ff       	jmp    c001b8c5 <IDE::detect()+0x11f>
c001ba4f:	3c eb                	cmp    al,0xeb
c001ba51:	75 cf                	jne    c001ba22 <IDE::detect()+0x27c>
c001ba53:	eb d6                	jmp    c001ba2b <IDE::detect()+0x285>
c001ba55:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ba5b:	5b                   	pop    ebx
c001ba5c:	5e                   	pop    esi
c001ba5d:	5f                   	pop    edi
c001ba5e:	5d                   	pop    ebp
c001ba5f:	c3                   	ret    

c001ba60 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ba60:	56                   	push   esi
c001ba61:	53                   	push   ebx
c001ba62:	83 ec 14             	sub    esp,0x14
c001ba65:	8a 54 24 2c          	mov    dl,BYTE PTR [esp+0x2c]
c001ba69:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001ba6d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ba71:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001ba75:	84 d2                	test   dl,dl
c001ba77:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001ba7b:	0f 84 a8 00 00 00    	je     c001bb29 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001ba81:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001ba85:	83 ec 0c             	sub    esp,0xc
c001ba88:	68 c3 1f 02 c0       	push   0xc0021fc3
c001ba8d:	e8 e4 ef fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001ba92:	83 c4 10             	add    esp,0x10
c001ba95:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001ba99:	80 fa 01             	cmp    dl,0x1
c001ba9c:	0f 84 81 00 00 00    	je     c001bb23 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc3>
c001baa2:	80 fa 02             	cmp    dl,0x2
c001baa5:	75 6e                	jne    c001bb15 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb5>
c001baa7:	00 db                	add    bl,bl
c001baa9:	0a 5c 24 0e          	or     bl,BYTE PTR [esp+0xe]
c001baad:	50                   	push   eax
c001baae:	6a 01                	push   0x1
c001bab0:	0f b6 db             	movzx  ebx,bl
c001bab3:	c1 e3 06             	shl    ebx,0x6
c001bab6:	0f b6 84 1e 6d 01 00 00 	movzx  eax,BYTE PTR [esi+ebx*1+0x16d]
c001babe:	50                   	push   eax
c001babf:	56                   	push   esi
c001bac0:	e8 8f f6 ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001bac5:	83 c4 10             	add    esp,0x10
c001bac8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001bacc:	88 c1                	mov    cl,al
c001bace:	80 e1 01             	and    cl,0x1
c001bad1:	84 c9                	test   cl,cl
c001bad3:	74 02                	je     c001bad7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x77>
c001bad5:	b2 07                	mov    dl,0x7
c001bad7:	88 c1                	mov    cl,al
c001bad9:	80 e1 02             	and    cl,0x2
c001badc:	74 02                	je     c001bae0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001bade:	b2 03                	mov    dl,0x3
c001bae0:	88 c1                	mov    cl,al
c001bae2:	80 e1 04             	and    cl,0x4
c001bae5:	74 02                	je     c001bae9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x89>
c001bae7:	b2 14                	mov    dl,0x14
c001bae9:	88 c1                	mov    cl,al
c001baeb:	80 e1 08             	and    cl,0x8
c001baee:	74 02                	je     c001baf2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x92>
c001baf0:	b2 03                	mov    dl,0x3
c001baf2:	88 c1                	mov    cl,al
c001baf4:	80 e1 10             	and    cl,0x10
c001baf7:	74 02                	je     c001bafb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9b>
c001baf9:	b2 15                	mov    dl,0x15
c001bafb:	88 c1                	mov    cl,al
c001bafd:	80 e1 20             	and    cl,0x20
c001bb00:	74 02                	je     c001bb04 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001bb02:	b2 03                	mov    dl,0x3
c001bb04:	88 c1                	mov    cl,al
c001bb06:	80 e1 40             	and    cl,0x40
c001bb09:	74 02                	je     c001bb0d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xad>
c001bb0b:	b2 16                	mov    dl,0x16
c001bb0d:	84 c0                	test   al,al
c001bb0f:	79 18                	jns    c001bb29 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001bb11:	b2 0d                	mov    dl,0xd
c001bb13:	eb 14                	jmp    c001bb29 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001bb15:	80 fa 03             	cmp    dl,0x3
c001bb18:	74 0d                	je     c001bb27 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc7>
c001bb1a:	80 fa 04             	cmp    dl,0x4
c001bb1d:	75 0a                	jne    c001bb29 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001bb1f:	b2 08                	mov    dl,0x8
c001bb21:	eb 06                	jmp    c001bb29 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001bb23:	b2 13                	mov    dl,0x13
c001bb25:	eb 02                	jmp    c001bb29 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001bb27:	b2 17                	mov    dl,0x17
c001bb29:	83 c4 14             	add    esp,0x14
c001bb2c:	88 d0                	mov    al,dl
c001bb2e:	5b                   	pop    ebx
c001bb2f:	5e                   	pop    esi
c001bb30:	c3                   	ret    
c001bb31:	90                   	nop

c001bb32 <IDE::polling(unsigned char, unsigned int)>:
c001bb32:	57                   	push   edi
c001bb33:	56                   	push   esi
c001bb34:	53                   	push   ebx
c001bb35:	bb 04 00 00 00       	mov    ebx,0x4
c001bb3a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001bb3e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001bb43:	52                   	push   edx
c001bb44:	6a 0c                	push   0xc
c001bb46:	56                   	push   esi
c001bb47:	57                   	push   edi
c001bb48:	e8 07 f6 ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001bb4d:	83 c4 10             	add    esp,0x10
c001bb50:	4b                   	dec    ebx
c001bb51:	75 f0                	jne    c001bb43 <IDE::polling(unsigned char, unsigned int)+0x11>
c001bb53:	bb a0 86 01 00       	mov    ebx,0x186a0
c001bb58:	50                   	push   eax
c001bb59:	6a 0c                	push   0xc
c001bb5b:	56                   	push   esi
c001bb5c:	57                   	push   edi
c001bb5d:	e8 f2 f5 ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001bb62:	83 c4 10             	add    esp,0x10
c001bb65:	88 c2                	mov    dl,al
c001bb67:	80 e2 01             	and    dl,0x1
c001bb6a:	84 d2                	test   dl,dl
c001bb6c:	75 1a                	jne    c001bb88 <IDE::polling(unsigned char, unsigned int)+0x56>
c001bb6e:	88 c2                	mov    dl,al
c001bb70:	80 e2 20             	and    dl,0x20
c001bb73:	75 0f                	jne    c001bb84 <IDE::polling(unsigned char, unsigned int)+0x52>
c001bb75:	4b                   	dec    ebx
c001bb76:	74 10                	je     c001bb88 <IDE::polling(unsigned char, unsigned int)+0x56>
c001bb78:	84 c0                	test   al,al
c001bb7a:	78 dc                	js     c001bb58 <IDE::polling(unsigned char, unsigned int)+0x26>
c001bb7c:	24 08                	and    al,0x8
c001bb7e:	74 d8                	je     c001bb58 <IDE::polling(unsigned char, unsigned int)+0x26>
c001bb80:	31 c0                	xor    eax,eax
c001bb82:	eb 06                	jmp    c001bb8a <IDE::polling(unsigned char, unsigned int)+0x58>
c001bb84:	b0 01                	mov    al,0x1
c001bb86:	eb 02                	jmp    c001bb8a <IDE::polling(unsigned char, unsigned int)+0x58>
c001bb88:	b0 02                	mov    al,0x2
c001bb8a:	5b                   	pop    ebx
c001bb8b:	5e                   	pop    esi
c001bb8c:	5f                   	pop    edi
c001bb8d:	c3                   	ret    

c001bb8e <SATABus::close(int, int, void*)>:
c001bb8e:	31 c0                	xor    eax,eax
c001bb90:	c3                   	ret    
c001bb91:	90                   	nop

c001bb92 <SATABus::detect()>:
c001bb92:	c3                   	ret    
c001bb93:	90                   	nop

c001bb94 <SATABus::SATABus()>:
c001bb94:	83 ec 2c             	sub    esp,0x2c
c001bb97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bb9b:	c7 44 24 04 fc 1f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021ffc
c001bba3:	89 04 24             	mov    DWORD PTR [esp],eax
c001bba6:	e8 81 0c ff ff       	call   c000c82c <HardDiskController::HardDiskController(char const*)>
c001bbab:	ba 28 20 02 c0       	mov    edx,0xc0022028
c001bbb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bbb4:	89 10                	mov    DWORD PTR [eax],edx
c001bbb6:	c7 04 24 50 00 00 00 	mov    DWORD PTR [esp],0x50
c001bbbd:	e8 0a c3 fe ff       	call   c0007ecc <Phys::allocateContiguousPages(int)>
c001bbc2:	89 c2                	mov    edx,eax
c001bbc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bbc8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001bbce:	c7 04 24 50 00 00 00 	mov    DWORD PTR [esp],0x50
c001bbd5:	e8 46 da fe ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c001bbda:	89 c2                	mov    edx,eax
c001bbdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bbe0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bbe6:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001bbeb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bbef:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001bbf5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bbf9:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001bbff:	c7 44 24 10 03 00 00 00 	mov    DWORD PTR [esp+0x10],0x3
c001bc07:	c7 44 24 0c 50 00 00 00 	mov    DWORD PTR [esp+0xc],0x50
c001bc0f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bc13:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bc17:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc1a:	e8 63 e4 fe ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001bc1f:	90                   	nop
c001bc20:	83 c4 2c             	add    esp,0x2c
c001bc23:	c3                   	ret    

c001bc24 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001bc24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc28:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001bc2b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001bc2e:	09 c2                	or     edx,eax
c001bc30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001bc3a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bc3c:	31 c0                	xor    eax,eax
c001bc3e:	c1 e9 08             	shr    ecx,0x8
c001bc41:	83 e1 0f             	and    ecx,0xf
c001bc44:	39 c8                	cmp    eax,ecx
c001bc46:	74 0a                	je     c001bc52 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001bc48:	f6 c2 01             	test   dl,0x1
c001bc4b:	74 08                	je     c001bc55 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001bc4d:	d1 ea                	shr    edx,1
c001bc4f:	40                   	inc    eax
c001bc50:	eb f2                	jmp    c001bc44 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001bc52:	83 c8 ff             	or     eax,0xffffffff
c001bc55:	c3                   	ret    

c001bc56 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001bc56:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bc5a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001bc5d:	89 c2                	mov    edx,eax
c001bc5f:	c1 ea 08             	shr    edx,0x8
c001bc62:	80 e2 0f             	and    dl,0xf
c001bc65:	fe ca                	dec    dl
c001bc67:	75 30                	jne    c001bc99 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x43>
c001bc69:	24 0f                	and    al,0xf
c001bc6b:	3c 03                	cmp    al,0x3
c001bc6d:	75 2a                	jne    c001bc99 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x43>
c001bc6f:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001bc72:	b8 02 00 00 00       	mov    eax,0x2
c001bc77:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001bc7d:	74 1c                	je     c001bc9b <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x45>
c001bc7f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001bc85:	b8 04 00 00 00       	mov    eax,0x4
c001bc8a:	74 0f                	je     c001bc9b <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x45>
c001bc8c:	31 c0                	xor    eax,eax
c001bc8e:	83 fa 03             	cmp    edx,0x3
c001bc91:	0f 94 c0             	sete   al
c001bc94:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001bc98:	c3                   	ret    
c001bc99:	31 c0                	xor    eax,eax
c001bc9b:	c3                   	ret    

c001bc9c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001bc9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bca0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bca3:	0f ba e2 0f          	bt     edx,0xf
c001bca7:	72 f7                	jb     c001bca0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001bca9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bcac:	83 ca 10             	or     edx,0x10
c001bcaf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bcb2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bcb5:	83 ca 01             	or     edx,0x1
c001bcb8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bcbb:	c3                   	ret    

c001bcbc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001bcbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bcc0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bcc3:	83 e2 fe             	and    edx,0xfffffffe
c001bcc6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bcc9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bccc:	83 e2 ef             	and    edx,0xffffffef
c001bccf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bcd2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bcd5:	0f ba e2 0e          	bt     edx,0xe
c001bcd9:	72 f7                	jb     c001bcd2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001bcdb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bcde:	0f ba e2 0f          	bt     edx,0xf
c001bce2:	72 ee                	jb     c001bcd2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001bce4:	c3                   	ret    
c001bce5:	90                   	nop

c001bce6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001bce6:	55                   	push   ebp
c001bce7:	57                   	push   edi
c001bce8:	56                   	push   esi
c001bce9:	53                   	push   ebx
c001bcea:	83 ec 1c             	sub    esp,0x1c
c001bced:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bcf1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bcf5:	53                   	push   ebx
c001bcf6:	57                   	push   edi
c001bcf7:	e8 c0 ff ff ff       	call   c001bcbc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001bcfc:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001bd00:	83 ec 0c             	sub    esp,0xc
c001bd03:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001bd09:	c1 e5 0a             	shl    ebp,0xa
c001bd0c:	01 e8                	add    eax,ebp
c001bd0e:	89 03                	mov    DWORD PTR [ebx],eax
c001bd10:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd12:	68 00 04 00 00       	push   0x400
c001bd17:	6a 00                	push   0x0
c001bd19:	50                   	push   eax
c001bd1a:	e8 61 48 fe ff       	call   c0000580 <memset>
c001bd1f:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001bd25:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001bd29:	83 c4 1c             	add    esp,0x1c
c001bd2c:	01 e8                	add    eax,ebp
c001bd2e:	89 03                	mov    DWORD PTR [ebx],eax
c001bd30:	c1 e6 08             	shl    esi,0x8
c001bd33:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bd3a:	81 c6 00 80 00 00    	add    esi,0x8000
c001bd40:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001bd46:	01 f0                	add    eax,esi
c001bd48:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bd4b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001bd4e:	68 00 01 00 00       	push   0x100
c001bd53:	6a 00                	push   0x0
c001bd55:	50                   	push   eax
c001bd56:	e8 25 48 fe ff       	call   c0000580 <memset>
c001bd5b:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001bd61:	31 d2                	xor    edx,edx
c001bd63:	01 f0                	add    eax,esi
c001bd65:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bd68:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001bd6f:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001bd75:	01 ee                	add    esi,ebp
c001bd77:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001bd7b:	83 c4 10             	add    esp,0x10
c001bd7e:	c1 e5 0d             	shl    ebp,0xd
c001bd81:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001bd87:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001bd8d:	83 c6 20             	add    esi,0x20
c001bd90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bd94:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001bd9a:	01 e8                	add    eax,ebp
c001bd9c:	01 d0                	add    eax,edx
c001bd9e:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001bda1:	52                   	push   edx
c001bda2:	68 00 01 00 00       	push   0x100
c001bda7:	6a 00                	push   0x0
c001bda9:	50                   	push   eax
c001bdaa:	e8 d1 47 fe ff       	call   c0000580 <memset>
c001bdaf:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001bdb5:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001bdbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bdc0:	83 c4 10             	add    esp,0x10
c001bdc3:	01 e8                	add    eax,ebp
c001bdc5:	01 d0                	add    eax,edx
c001bdc7:	81 c2 00 01 00 00    	add    edx,0x100
c001bdcd:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001bdd0:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001bdd6:	75 af                	jne    c001bd87 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001bdd8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001bddf:	50                   	push   eax
c001bde0:	50                   	push   eax
c001bde1:	53                   	push   ebx
c001bde2:	57                   	push   edi
c001bde3:	e8 b4 fe ff ff       	call   c001bc9c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001bde8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001bdef:	83 c4 2c             	add    esp,0x2c
c001bdf2:	5b                   	pop    ebx
c001bdf3:	5e                   	pop    esi
c001bdf4:	5f                   	pop    edi
c001bdf5:	5d                   	pop    ebp
c001bdf6:	c3                   	ret    
c001bdf7:	90                   	nop

c001bdf8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001bdf8:	55                   	push   ebp
c001bdf9:	57                   	push   edi
c001bdfa:	56                   	push   esi
c001bdfb:	53                   	push   ebx
c001bdfc:	31 db                	xor    ebx,ebx
c001bdfe:	83 ec 0c             	sub    esp,0xc
c001be01:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001be05:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001be09:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001be0c:	f7 c7 01 00 00 00    	test   edi,0x1
c001be12:	74 7a                	je     c001be8e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001be14:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001be18:	89 d8                	mov    eax,ebx
c001be1a:	c1 e0 07             	shl    eax,0x7
c001be1d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001be24:	55                   	push   ebp
c001be25:	56                   	push   esi
c001be26:	e8 2b fe ff ff       	call   c001bc56 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001be2b:	5a                   	pop    edx
c001be2c:	59                   	pop    ecx
c001be2d:	83 f8 01             	cmp    eax,0x1
c001be30:	75 21                	jne    c001be53 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001be32:	50                   	push   eax
c001be33:	53                   	push   ebx
c001be34:	55                   	push   ebp
c001be35:	56                   	push   esi
c001be36:	e8 ab fe ff ff       	call   c001bce6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001be3b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001be42:	e8 b5 bc fe ff       	call   c0007afc <malloc>
c001be47:	89 04 24             	mov    DWORD PTR [esp],eax
c001be4a:	89 c5                	mov    ebp,eax
c001be4c:	e8 dd 10 00 00       	call   c001cf2e <SATA::SATA()>
c001be51:	eb 24                	jmp    c001be77 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001be53:	83 f8 04             	cmp    eax,0x4
c001be56:	75 36                	jne    c001be8e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001be58:	51                   	push   ecx
c001be59:	53                   	push   ebx
c001be5a:	55                   	push   ebp
c001be5b:	56                   	push   esi
c001be5c:	e8 85 fe ff ff       	call   c001bce6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001be61:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001be68:	e8 8f bc fe ff       	call   c0007afc <malloc>
c001be6d:	89 04 24             	mov    DWORD PTR [esp],eax
c001be70:	89 c5                	mov    ebp,eax
c001be72:	e8 0d 18 00 00       	call   c001d684 <SATAPI::SATAPI()>
c001be77:	58                   	pop    eax
c001be78:	5a                   	pop    edx
c001be79:	55                   	push   ebp
c001be7a:	56                   	push   esi
c001be7b:	e8 6a 06 ff ff       	call   c000c4ea <Device::addChild(Device*)>
c001be80:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001be83:	56                   	push   esi
c001be84:	6a 00                	push   0x0
c001be86:	53                   	push   ebx
c001be87:	55                   	push   ebp
c001be88:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be8b:	83 c4 20             	add    esp,0x20
c001be8e:	d1 ef                	shr    edi,1
c001be90:	43                   	inc    ebx
c001be91:	83 fb 20             	cmp    ebx,0x20
c001be94:	0f 85 72 ff ff ff    	jne    c001be0c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001be9a:	83 c4 0c             	add    esp,0xc
c001be9d:	5b                   	pop    ebx
c001be9e:	5e                   	pop    esi
c001be9f:	5f                   	pop    edi
c001bea0:	5d                   	pop    ebp
c001bea1:	c3                   	ret    

c001bea2 <SATABus::open(int, int, void*)>:
c001bea2:	83 ec 14             	sub    esp,0x14
c001bea5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bea9:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001beaf:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001beb5:	52                   	push   edx
c001beb6:	50                   	push   eax
c001beb7:	e8 3c ff ff ff       	call   c001bdf8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001bebc:	31 c0                	xor    eax,eax
c001bebe:	83 c4 1c             	add    esp,0x1c
c001bec1:	c3                   	ret    

c001bec2 <ATA::close(int, int, void*)>:
c001bec2:	83 ec 0c             	sub    esp,0xc
c001bec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bec9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001becf:	85 c0                	test   eax,eax
c001bed1:	74 0c                	je     c001bedf <ATA::close(int, int, void*)+0x1d>
c001bed3:	8b 10                	mov    edx,DWORD PTR [eax]
c001bed5:	83 ec 0c             	sub    esp,0xc
c001bed8:	50                   	push   eax
c001bed9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001bedc:	83 c4 10             	add    esp,0x10
c001bedf:	31 c0                	xor    eax,eax
c001bee1:	83 c4 0c             	add    esp,0xc
c001bee4:	c3                   	ret    
c001bee5:	90                   	nop

c001bee6 <ATA::powerSaving(PowerSavingLevel)>:
c001bee6:	c3                   	ret    
c001bee7:	90                   	nop

c001bee8 <ATA::ATA()>:
c001bee8:	83 ec 1c             	sub    esp,0x1c
c001beeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001beef:	c7 44 24 08 00 02 00 00 	mov    DWORD PTR [esp+0x8],0x200
c001bef7:	c7 44 24 04 f5 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc00220f5
c001beff:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf02:	e8 a9 09 ff ff       	call   c000c8b0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001bf07:	ba 68 20 02 c0       	mov    edx,0xc0022068
c001bf0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf10:	89 10                	mov    DWORD PTR [eax],edx
c001bf12:	90                   	nop
c001bf13:	83 c4 1c             	add    esp,0x1c
c001bf16:	c3                   	ret    
c001bf17:	90                   	nop

c001bf18 <ATA::flush(bool)>:
c001bf18:	53                   	push   ebx
c001bf19:	83 ec 08             	sub    esp,0x8
c001bf1c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001bf21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf25:	19 c0                	sbb    eax,eax
c001bf27:	83 e0 fd             	and    eax,0xfffffffd
c001bf2a:	05 ea 00 00 00       	add    eax,0xea
c001bf2f:	50                   	push   eax
c001bf30:	6a 07                	push   0x7
c001bf32:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bf39:	50                   	push   eax
c001bf3a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf40:	e8 61 f1 ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf45:	83 c4 0c             	add    esp,0xc
c001bf48:	6a 00                	push   0x0
c001bf4a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bf51:	50                   	push   eax
c001bf52:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf58:	e8 d5 fb ff ff       	call   c001bb32 <IDE::polling(unsigned char, unsigned int)>
c001bf5d:	83 c4 18             	add    esp,0x18
c001bf60:	5b                   	pop    ebx
c001bf61:	c3                   	ret    

c001bf62 <ATA::readyForCommand()>:
c001bf62:	56                   	push   esi
c001bf63:	53                   	push   ebx
c001bf64:	53                   	push   ebx
c001bf65:	31 db                	xor    ebx,ebx
c001bf67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf6b:	51                   	push   ecx
c001bf6c:	6a 0c                	push   0xc
c001bf6e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bf75:	50                   	push   eax
c001bf76:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bf7c:	e8 d3 f1 ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001bf81:	83 c4 10             	add    esp,0x10
c001bf84:	a8 88                	test   al,0x88
c001bf86:	74 1f                	je     c001bfa7 <ATA::readyForCommand()+0x45>
c001bf88:	43                   	inc    ebx
c001bf89:	83 fb 63             	cmp    ebx,0x63
c001bf8c:	7e dd                	jle    c001bf6b <ATA::readyForCommand()+0x9>
c001bf8e:	83 ec 0c             	sub    esp,0xc
c001bf91:	6a 0a                	push   0xa
c001bf93:	e8 a4 9a ff ff       	call   c0015a3c <milliTenthSleep(unsigned int)>
c001bf98:	83 c4 10             	add    esp,0x10
c001bf9b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bfa1:	75 c8                	jne    c001bf6b <ATA::readyForCommand()+0x9>
c001bfa3:	31 c0                	xor    eax,eax
c001bfa5:	eb 02                	jmp    c001bfa9 <ATA::readyForCommand()+0x47>
c001bfa7:	b0 01                	mov    al,0x1
c001bfa9:	5a                   	pop    edx
c001bfaa:	5b                   	pop    ebx
c001bfab:	5e                   	pop    esi
c001bfac:	c3                   	ret    
c001bfad:	90                   	nop

c001bfae <ATA::access(unsigned long long, int, void*, bool)>:
c001bfae:	55                   	push   ebp
c001bfaf:	57                   	push   edi
c001bfb0:	56                   	push   esi
c001bfb1:	53                   	push   ebx
c001bfb2:	83 ec 2c             	sub    esp,0x2c
c001bfb5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001bfb9:	f3 0f 7e 44 24 44    	movq   xmm0,QWORD PTR [esp+0x44]
c001bfbf:	66 0f 7e c1          	movd   ecx,xmm0
c001bfc3:	8a 44 24 54          	mov    al,BYTE PTR [esp+0x54]
c001bfc7:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c001bfcb:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c001bfd1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001bfd5:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c001bfdb:	c1 e0 06             	shl    eax,0x6
c001bfde:	80 bc 07 a9 01 00 00 00 	cmp    BYTE PTR [edi+eax*1+0x1a9],0x0
c001bfe6:	74 6e                	je     c001c056 <ATA::access(unsigned long long, int, void*, bool)+0xa8>
c001bfe8:	0f 28 d0             	movaps xmm2,xmm0
c001bfeb:	66 0f 73 d2 1c       	psrlq  xmm2,0x1c
c001bff0:	0f 28 ca             	movaps xmm1,xmm2
c001bff3:	66 0f 7e d2          	movd   edx,xmm2
c001bff7:	66 0f 73 d1 20       	psrlq  xmm1,0x20
c001bffc:	66 0f 7e c8          	movd   eax,xmm1
c001c000:	09 d0                	or     eax,edx
c001c002:	74 2a                	je     c001c02e <ATA::access(unsigned long long, int, void*, bool)+0x80>
c001c004:	31 c0                	xor    eax,eax
c001c006:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001c00d:	0f 28 d8             	movaps xmm3,xmm0
c001c010:	0f b6 d2             	movzx  edx,dl
c001c013:	66 0f 6e ca          	movd   xmm1,edx
c001c017:	66 0f d3 d9          	psrlq  xmm3,xmm1
c001c01b:	66 0f 7e da          	movd   edx,xmm3
c001c01f:	88 54 04 1a          	mov    BYTE PTR [esp+eax*1+0x1a],dl
c001c023:	40                   	inc    eax
c001c024:	83 f8 06             	cmp    eax,0x6
c001c027:	75 dd                	jne    c001c006 <ATA::access(unsigned long long, int, void*, bool)+0x58>
c001c029:	e9 a5 00 00 00       	jmp    c001c0d3 <ATA::access(unsigned long long, int, void*, bool)+0x125>
c001c02e:	66 89 4c 24 1a       	mov    WORD PTR [esp+0x1a],cx
c001c033:	66 0f 73 d0 10       	psrlq  xmm0,0x10
c001c038:	b3 01                	mov    bl,0x1
c001c03a:	66 0f 7e c0          	movd   eax,xmm0
c001c03e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c045:	c1 e9 18             	shr    ecx,0x18
c001c048:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c04c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c051:	e9 81 00 00 00       	jmp    c001c0d7 <ATA::access(unsigned long long, int, void*, bool)+0x129>
c001c056:	6a 00                	push   0x0
c001c058:	0f 28 c8             	movaps xmm1,xmm0
c001c05b:	6a 3f                	push   0x3f
c001c05d:	66 0f 73 d1 20       	psrlq  xmm1,0x20
c001c062:	66 0f 7e cb          	movd   ebx,xmm1
c001c066:	53                   	push   ebx
c001c067:	51                   	push   ecx
c001c068:	66 0f 7e 44 24 10    	movd   DWORD PTR [esp+0x10],xmm0
c001c06e:	66 0f 7e 4c 24 14    	movd   DWORD PTR [esp+0x14],xmm1
c001c074:	e8 d7 2a 00 00       	call   c001eb50 <__umoddi3>
c001c079:	83 c4 10             	add    esp,0x10
c001c07c:	fe c0                	inc    al
c001c07e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c082:	6a 00                	push   0x0
c001c084:	68 f0 03 00 00       	push   0x3f0
c001c089:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c08d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c091:	53                   	push   ebx
c001c092:	51                   	push   ecx
c001c093:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001c097:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001c09b:	e8 b0 29 00 00       	call   c001ea50 <__udivdi3>
c001c0a0:	83 c4 10             	add    esp,0x10
c001c0a3:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c0a8:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c0af:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c0b4:	6a 00                	push   0x0
c001c0b6:	6a 3f                	push   0x3f
c001c0b8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c0bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c0c0:	53                   	push   ebx
c001c0c1:	31 db                	xor    ebx,ebx
c001c0c3:	51                   	push   ecx
c001c0c4:	e8 87 29 00 00       	call   c001ea50 <__udivdi3>
c001c0c9:	83 c4 10             	add    esp,0x10
c001c0cc:	88 c1                	mov    cl,al
c001c0ce:	80 e1 0f             	and    cl,0xf
c001c0d1:	eb 04                	jmp    c001c0d7 <ATA::access(unsigned long long, int, void*, bool)+0x129>
c001c0d3:	31 c9                	xor    ecx,ecx
c001c0d5:	b3 02                	mov    bl,0x2
c001c0d7:	88 0c 24             	mov    BYTE PTR [esp],cl
c001c0da:	50                   	push   eax
c001c0db:	6a 00                	push   0x0
c001c0dd:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c0e4:	50                   	push   eax
c001c0e5:	57                   	push   edi
c001c0e6:	e8 a3 f1 ff ff       	call   c001b28e <IDE::enableIRQs(unsigned char, bool)>
c001c0eb:	89 34 24             	mov    DWORD PTR [esp],esi
c001c0ee:	e8 6f fe ff ff       	call   c001bf62 <ATA::readyForCommand()>
c001c0f3:	83 c4 10             	add    esp,0x10
c001c0f6:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001c0f9:	84 c0                	test   al,al
c001c0fb:	75 0a                	jne    c001c107 <ATA::access(unsigned long long, int, void*, bool)+0x159>
c001c0fd:	bb 01 00 00 00       	mov    ebx,0x1
c001c102:	e9 74 02 00 00       	jmp    c001c37b <ATA::access(unsigned long long, int, void*, bool)+0x3cd>
c001c107:	8b 86 74 01 00 00    	mov    eax,DWORD PTR [esi+0x174]
c001c10d:	8b 96 6c 01 00 00    	mov    edx,DWORD PTR [esi+0x16c]
c001c113:	0f b6 be 70 01 00 00 	movzx  edi,BYTE PTR [esi+0x170]
c001c11a:	c1 e0 04             	shl    eax,0x4
c001c11d:	08 c1                	or     cl,al
c001c11f:	84 db                	test   bl,bl
c001c121:	75 05                	jne    c001c128 <ATA::access(unsigned long long, int, void*, bool)+0x17a>
c001c123:	80 c9 a0             	or     cl,0xa0
c001c126:	eb 03                	jmp    c001c12b <ATA::access(unsigned long long, int, void*, bool)+0x17d>
c001c128:	80 c9 e0             	or     cl,0xe0
c001c12b:	0f b6 c9             	movzx  ecx,cl
c001c12e:	51                   	push   ecx
c001c12f:	6a 06                	push   0x6
c001c131:	57                   	push   edi
c001c132:	52                   	push   edx
c001c133:	e8 6e ef ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c138:	83 c4 10             	add    esp,0x10
c001c13b:	6a 00                	push   0x0
c001c13d:	6a 01                	push   0x1
c001c13f:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c146:	50                   	push   eax
c001c147:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c14d:	e8 54 ef ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c152:	83 c4 10             	add    esp,0x10
c001c155:	80 fb 02             	cmp    bl,0x2
c001c158:	75 6e                	jne    c001c1c8 <ATA::access(unsigned long long, int, void*, bool)+0x21a>
c001c15a:	6a 00                	push   0x0
c001c15c:	6a 08                	push   0x8
c001c15e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c165:	50                   	push   eax
c001c166:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c16c:	e8 35 ef ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c171:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c176:	50                   	push   eax
c001c177:	6a 09                	push   0x9
c001c179:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c180:	50                   	push   eax
c001c181:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c187:	e8 1a ef ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c18c:	83 c4 20             	add    esp,0x20
c001c18f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c194:	50                   	push   eax
c001c195:	6a 0a                	push   0xa
c001c197:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c19e:	50                   	push   eax
c001c19f:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c1a5:	e8 fc ee ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1aa:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c1af:	50                   	push   eax
c001c1b0:	6a 0b                	push   0xb
c001c1b2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c1b9:	50                   	push   eax
c001c1ba:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c1c0:	e8 e1 ee ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1c5:	83 c4 20             	add    esp,0x20
c001c1c8:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c1cd:	50                   	push   eax
c001c1ce:	6a 02                	push   0x2
c001c1d0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c1d7:	50                   	push   eax
c001c1d8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c1de:	e8 c3 ee ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1e3:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c1e8:	50                   	push   eax
c001c1e9:	6a 03                	push   0x3
c001c1eb:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c1f2:	50                   	push   eax
c001c1f3:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c1f9:	e8 a8 ee ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1fe:	83 c4 20             	add    esp,0x20
c001c201:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c206:	50                   	push   eax
c001c207:	6a 04                	push   0x4
c001c209:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c210:	50                   	push   eax
c001c211:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c217:	e8 8a ee ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c21c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c221:	50                   	push   eax
c001c222:	6a 05                	push   0x5
c001c224:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c22b:	50                   	push   eax
c001c22c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c232:	e8 6f ee ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c237:	83 c4 20             	add    esp,0x20
c001c23a:	80 fb 02             	cmp    bl,0x2
c001c23d:	0f 94 04 24          	sete   BYTE PTR [esp]
c001c241:	75 07                	jne    c001c24a <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001c243:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001c248:	75 40                	jne    c001c28a <ATA::access(unsigned long long, int, void*, bool)+0x2dc>
c001c24a:	80 fb 02             	cmp    bl,0x2
c001c24d:	0f 95 c1             	setne  cl
c001c250:	74 0c                	je     c001c25e <ATA::access(unsigned long long, int, void*, bool)+0x2b0>
c001c252:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001c257:	b8 30 00 00 00       	mov    eax,0x30
c001c25c:	75 31                	jne    c001c28f <ATA::access(unsigned long long, int, void*, bool)+0x2e1>
c001c25e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001c262:	80 f2 01             	xor    dl,0x1
c001c265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001c269:	74 09                	je     c001c274 <ATA::access(unsigned long long, int, void*, bool)+0x2c6>
c001c26b:	84 d2                	test   dl,dl
c001c26d:	b8 24 00 00 00       	mov    eax,0x24
c001c272:	75 1b                	jne    c001c28f <ATA::access(unsigned long long, int, void*, bool)+0x2e1>
c001c274:	84 c9                	test   cl,cl
c001c276:	0f 84 81 fe ff ff    	je     c001c0fd <ATA::access(unsigned long long, int, void*, bool)+0x14f>
c001c27c:	84 d2                	test   dl,dl
c001c27e:	b8 20 00 00 00       	mov    eax,0x20
c001c283:	75 0a                	jne    c001c28f <ATA::access(unsigned long long, int, void*, bool)+0x2e1>
c001c285:	e9 73 fe ff ff       	jmp    c001c0fd <ATA::access(unsigned long long, int, void*, bool)+0x14f>
c001c28a:	b8 34 00 00 00       	mov    eax,0x34
c001c28f:	50                   	push   eax
c001c290:	6a 07                	push   0x7
c001c292:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c299:	50                   	push   eax
c001c29a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c2a0:	e8 01 ee ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2a5:	8b 5c 24 5c          	mov    ebx,DWORD PTR [esp+0x5c]
c001c2a9:	83 c4 10             	add    esp,0x10
c001c2ac:	85 db                	test   ebx,ebx
c001c2ae:	0f 84 ad 00 00 00    	je     c001c361 <ATA::access(unsigned long long, int, void*, bool)+0x3b3>
c001c2b4:	50                   	push   eax
c001c2b5:	6a 01                	push   0x1
c001c2b7:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c2be:	50                   	push   eax
c001c2bf:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c2c5:	e8 68 f8 ff ff       	call   c001bb32 <IDE::polling(unsigned char, unsigned int)>
c001c2ca:	83 c4 10             	add    esp,0x10
c001c2cd:	8b 96 70 01 00 00    	mov    edx,DWORD PTR [esi+0x170]
c001c2d3:	84 c0                	test   al,al
c001c2d5:	74 20                	je     c001c2f7 <ATA::access(unsigned long long, int, void*, bool)+0x349>
c001c2d7:	0f b6 d8             	movzx  ebx,al
c001c2da:	53                   	push   ebx
c001c2db:	0f b6 86 74 01 00 00 	movzx  eax,BYTE PTR [esi+0x174]
c001c2e2:	50                   	push   eax
c001c2e3:	0f b6 c2             	movzx  eax,dl
c001c2e6:	50                   	push   eax
c001c2e7:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c2ed:	e8 6e f7 ff ff       	call   c001ba60 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c2f2:	e9 81 00 00 00       	jmp    c001c378 <ATA::access(unsigned long long, int, void*, bool)+0x3ca>
c001c2f7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001c2fc:	74 36                	je     c001c334 <ATA::access(unsigned long long, int, void*, bool)+0x386>
c001c2fe:	31 ff                	xor    edi,edi
c001c300:	0f b7 44 7d 00       	movzx  eax,WORD PTR [ebp+edi*2+0x0]
c001c305:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c309:	50                   	push   eax
c001c30a:	50                   	push   eax
c001c30b:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c312:	50                   	push   eax
c001c313:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c319:	e8 76 ed ff ff       	call   c001b094 <IDE::getBase(unsigned char)>
c001c31e:	89 c2                	mov    edx,eax
c001c320:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c324:	66 ef                	out    dx,ax
c001c326:	47                   	inc    edi
c001c327:	83 c4 10             	add    esp,0x10
c001c32a:	81 ff 00 01 00 00    	cmp    edi,0x100
c001c330:	75 ce                	jne    c001c300 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001c332:	eb 21                	jmp    c001c355 <ATA::access(unsigned long long, int, void*, bool)+0x3a7>
c001c334:	51                   	push   ecx
c001c335:	0f b6 c2             	movzx  eax,dl
c001c338:	51                   	push   ecx
c001c339:	89 ef                	mov    edi,ebp
c001c33b:	50                   	push   eax
c001c33c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c342:	e8 4d ed ff ff       	call   c001b094 <IDE::getBase(unsigned char)>
c001c347:	b9 00 01 00 00       	mov    ecx,0x100
c001c34c:	89 c2                	mov    edx,eax
c001c34e:	fc                   	cld    
c001c34f:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001c352:	83 c4 10             	add    esp,0x10
c001c355:	81 c5 00 02 00 00    	add    ebp,0x200
c001c35b:	4b                   	dec    ebx
c001c35c:	e9 4b ff ff ff       	jmp    c001c2ac <ATA::access(unsigned long long, int, void*, bool)+0x2fe>
c001c361:	31 db                	xor    ebx,ebx
c001c363:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001c368:	74 11                	je     c001c37b <ATA::access(unsigned long long, int, void*, bool)+0x3cd>
c001c36a:	50                   	push   eax
c001c36b:	50                   	push   eax
c001c36c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c371:	50                   	push   eax
c001c372:	56                   	push   esi
c001c373:	e8 a0 fb ff ff       	call   c001bf18 <ATA::flush(bool)>
c001c378:	83 c4 10             	add    esp,0x10
c001c37b:	83 c4 2c             	add    esp,0x2c
c001c37e:	89 d8                	mov    eax,ebx
c001c380:	5b                   	pop    ebx
c001c381:	5e                   	pop    esi
c001c382:	5f                   	pop    edi
c001c383:	5d                   	pop    ebp
c001c384:	c3                   	ret    
c001c385:	90                   	nop

c001c386 <ATA::detectCHS()>:
c001c386:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c38a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001c390:	c1 e0 06             	shl    eax,0x6
c001c393:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001c399:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001c3a3:	c7 44 24 04 4c 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc002204c
c001c3ab:	e9 85 4a ff ff       	jmp    c0010e35 <KePanic(char const*)>

c001c3b0 <ATA::open(int, int, void*)>:
c001c3b0:	53                   	push   ebx
c001c3b1:	83 ec 08             	sub    esp,0x8
c001c3b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c3b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c3c0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c3c6:	c1 e0 06             	shl    eax,0x6
c001c3c9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c3cf:	01 d0                	add    eax,edx
c001c3d1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001c3d8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001c3de:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001c3e5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c3ef:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c3f6:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c3fc:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c403:	75 0c                	jne    c001c411 <ATA::open(int, int, void*)+0x61>
c001c405:	83 ec 0c             	sub    esp,0xc
c001c408:	53                   	push   ebx
c001c409:	e8 78 ff ff ff       	call   c001c386 <ATA::detectCHS()>
c001c40e:	83 c4 10             	add    esp,0x10
c001c411:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c417:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c41d:	c1 e0 06             	shl    eax,0x6
c001c420:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c427:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c431:	d1 e8                	shr    eax,1
c001c433:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c439:	6a 04                	push   0x4
c001c43b:	6a 0c                	push   0xc
c001c43d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c444:	50                   	push   eax
c001c445:	52                   	push   edx
c001c446:	e8 5b ec ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c44b:	90                   	nop
c001c44c:	90                   	nop
c001c44d:	6a 00                	push   0x0
c001c44f:	6a 0c                	push   0xc
c001c451:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c458:	50                   	push   eax
c001c459:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c45f:	e8 42 ec ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c464:	83 c4 14             	add    esp,0x14
c001c467:	53                   	push   ebx
c001c468:	e8 ab 04 ff ff       	call   c000c918 <PhysicalDisk::startCache()>
c001c46d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c470:	e8 3c 16 ff ff       	call   c000dab1 <createPartitionsForDisk(PhysicalDisk*)>
c001c475:	83 c4 18             	add    esp,0x18
c001c478:	31 c0                	xor    eax,eax
c001c47a:	5b                   	pop    ebx
c001c47b:	c3                   	ret    

c001c47c <combineCharAndColour(char, unsigned char)>:
c001c47c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c481:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001c487:	c1 e0 08             	shl    eax,0x8
c001c48a:	09 d0                	or     eax,edx
c001c48c:	c3                   	ret    

c001c48d <combineColours(unsigned char, unsigned char)>:
c001c48d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c492:	c1 e0 04             	shl    eax,0x4
c001c495:	0a 44 24 04          	or     al,BYTE PTR [esp+0x4]
c001c499:	c3                   	ret    

c001c49a <ATA::read(unsigned long long, int, void*)>:
c001c49a:	55                   	push   ebp
c001c49b:	57                   	push   edi
c001c49c:	56                   	push   esi
c001c49d:	be 04 00 00 00       	mov    esi,0x4
c001c4a2:	53                   	push   ebx
c001c4a3:	83 ec 0c             	sub    esp,0xc
c001c4a6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c4aa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c4ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c4b2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c4b6:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c4b9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c4bf:	0f 87 a9 01 00 00    	ja     c001c66e <ATA::read(unsigned long long, int, void*)+0x1d4>
c001c4c5:	85 c9                	test   ecx,ecx
c001c4c7:	be 06 00 00 00       	mov    esi,0x6
c001c4cc:	0f 84 9c 01 00 00    	je     c001c66e <ATA::read(unsigned long long, int, void*)+0x1d4>
c001c4d2:	55                   	push   ebp
c001c4d3:	55                   	push   ebp
c001c4d4:	6a 00                	push   0x0
c001c4d6:	51                   	push   ecx
c001c4d7:	53                   	push   ebx
c001c4d8:	52                   	push   edx
c001c4d9:	50                   	push   eax
c001c4da:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c4de:	e8 cb fa ff ff       	call   c001bfae <ATA::access(unsigned long long, int, void*, bool)>
c001c4e3:	83 c4 20             	add    esp,0x20
c001c4e6:	85 c0                	test   eax,eax
c001c4e8:	89 c6                	mov    esi,eax
c001c4ea:	0f 85 79 01 00 00    	jne    c001c669 <ATA::read(unsigned long long, int, void*)+0x1cf>
c001c4f0:	50                   	push   eax
c001c4f1:	bd 10 27 00 00       	mov    ebp,0x2710
c001c4f6:	50                   	push   eax
c001c4f7:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001c4fd:	6a 0f                	push   0xf
c001c4ff:	6a 00                	push   0x0
c001c501:	89 da                	mov    edx,ebx
c001c503:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001c509:	e8 7f ff ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001c50e:	59                   	pop    ecx
c001c50f:	b9 0a 00 00 00       	mov    ecx,0xa
c001c514:	5b                   	pop    ebx
c001c515:	0f b6 d8             	movzx  ebx,al
c001c518:	89 d0                	mov    eax,edx
c001c51a:	53                   	push   ebx
c001c51b:	99                   	cdq    
c001c51c:	f7 fd                	idiv   ebp
c001c51e:	99                   	cdq    
c001c51f:	f7 f9                	idiv   ecx
c001c521:	80 c2 30             	add    dl,0x30
c001c524:	0f b6 d2             	movzx  edx,dl
c001c527:	52                   	push   edx
c001c528:	e8 4f ff ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001c52d:	5f                   	pop    edi
c001c52e:	bf e8 03 00 00       	mov    edi,0x3e8
c001c533:	5a                   	pop    edx
c001c534:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c53a:	53                   	push   ebx
c001c53b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c540:	99                   	cdq    
c001c541:	f7 ff                	idiv   edi
c001c543:	99                   	cdq    
c001c544:	f7 f9                	idiv   ecx
c001c546:	88 d0                	mov    al,dl
c001c548:	04 30                	add    al,0x30
c001c54a:	0f b6 c0             	movzx  eax,al
c001c54d:	50                   	push   eax
c001c54e:	e8 29 ff ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001c553:	5f                   	pop    edi
c001c554:	bf 64 00 00 00       	mov    edi,0x64
c001c559:	5a                   	pop    edx
c001c55a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c560:	53                   	push   ebx
c001c561:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c566:	99                   	cdq    
c001c567:	f7 ff                	idiv   edi
c001c569:	99                   	cdq    
c001c56a:	f7 f9                	idiv   ecx
c001c56c:	88 d0                	mov    al,dl
c001c56e:	04 30                	add    al,0x30
c001c570:	0f b6 c0             	movzx  eax,al
c001c573:	50                   	push   eax
c001c574:	e8 03 ff ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001c579:	5a                   	pop    edx
c001c57a:	5a                   	pop    edx
c001c57b:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c581:	53                   	push   ebx
c001c582:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c587:	99                   	cdq    
c001c588:	f7 f9                	idiv   ecx
c001c58a:	99                   	cdq    
c001c58b:	f7 f9                	idiv   ecx
c001c58d:	88 d0                	mov    al,dl
c001c58f:	04 30                	add    al,0x30
c001c591:	0f b6 c0             	movzx  eax,al
c001c594:	50                   	push   eax
c001c595:	e8 e2 fe ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001c59a:	5a                   	pop    edx
c001c59b:	5a                   	pop    edx
c001c59c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c5a2:	53                   	push   ebx
c001c5a3:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c5a8:	99                   	cdq    
c001c5a9:	f7 f9                	idiv   ecx
c001c5ab:	88 d0                	mov    al,dl
c001c5ad:	04 30                	add    al,0x30
c001c5af:	0f b6 c0             	movzx  eax,al
c001c5b2:	50                   	push   eax
c001c5b3:	e8 c4 fe ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001c5b8:	5a                   	pop    edx
c001c5b9:	5a                   	pop    edx
c001c5ba:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c5c0:	53                   	push   ebx
c001c5c1:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c5c6:	99                   	cdq    
c001c5c7:	f7 fd                	idiv   ebp
c001c5c9:	99                   	cdq    
c001c5ca:	f7 f9                	idiv   ecx
c001c5cc:	88 d0                	mov    al,dl
c001c5ce:	04 30                	add    al,0x30
c001c5d0:	0f b6 c0             	movzx  eax,al
c001c5d3:	50                   	push   eax
c001c5d4:	e8 a3 fe ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001c5d9:	5d                   	pop    ebp
c001c5da:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c5df:	5a                   	pop    edx
c001c5e0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c5e6:	53                   	push   ebx
c001c5e7:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c5ec:	99                   	cdq    
c001c5ed:	f7 fd                	idiv   ebp
c001c5ef:	99                   	cdq    
c001c5f0:	f7 f9                	idiv   ecx
c001c5f2:	88 d0                	mov    al,dl
c001c5f4:	04 30                	add    al,0x30
c001c5f6:	0f b6 c0             	movzx  eax,al
c001c5f9:	50                   	push   eax
c001c5fa:	e8 7d fe ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001c5ff:	5d                   	pop    ebp
c001c600:	5a                   	pop    edx
c001c601:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c607:	53                   	push   ebx
c001c608:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c60d:	99                   	cdq    
c001c60e:	f7 ff                	idiv   edi
c001c610:	99                   	cdq    
c001c611:	f7 f9                	idiv   ecx
c001c613:	88 d0                	mov    al,dl
c001c615:	04 30                	add    al,0x30
c001c617:	0f b6 c0             	movzx  eax,al
c001c61a:	50                   	push   eax
c001c61b:	e8 5c fe ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001c620:	5f                   	pop    edi
c001c621:	5d                   	pop    ebp
c001c622:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c628:	53                   	push   ebx
c001c629:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c62e:	99                   	cdq    
c001c62f:	f7 f9                	idiv   ecx
c001c631:	99                   	cdq    
c001c632:	f7 f9                	idiv   ecx
c001c634:	88 d0                	mov    al,dl
c001c636:	04 30                	add    al,0x30
c001c638:	0f b6 c0             	movzx  eax,al
c001c63b:	50                   	push   eax
c001c63c:	e8 3b fe ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001c641:	5a                   	pop    edx
c001c642:	5f                   	pop    edi
c001c643:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c649:	53                   	push   ebx
c001c64a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c64f:	99                   	cdq    
c001c650:	f7 f9                	idiv   ecx
c001c652:	80 c2 30             	add    dl,0x30
c001c655:	0f b6 d2             	movzx  edx,dl
c001c658:	52                   	push   edx
c001c659:	e8 1e fe ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001c65e:	83 c4 10             	add    esp,0x10
c001c661:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c667:	eb 05                	jmp    c001c66e <ATA::read(unsigned long long, int, void*)+0x1d4>
c001c669:	be 01 00 00 00       	mov    esi,0x1
c001c66e:	83 c4 0c             	add    esp,0xc
c001c671:	89 f0                	mov    eax,esi
c001c673:	5b                   	pop    ebx
c001c674:	5e                   	pop    esi
c001c675:	5f                   	pop    edi
c001c676:	5d                   	pop    ebp
c001c677:	c3                   	ret    

c001c678 <ATA::write(unsigned long long, int, void*)>:
c001c678:	55                   	push   ebp
c001c679:	57                   	push   edi
c001c67a:	56                   	push   esi
c001c67b:	be 04 00 00 00       	mov    esi,0x4
c001c680:	53                   	push   ebx
c001c681:	83 ec 0c             	sub    esp,0xc
c001c684:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c688:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c68c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c690:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c694:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c697:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c69d:	0f 87 a5 01 00 00    	ja     c001c848 <ATA::write(unsigned long long, int, void*)+0x1d0>
c001c6a3:	85 c9                	test   ecx,ecx
c001c6a5:	be 06 00 00 00       	mov    esi,0x6
c001c6aa:	0f 84 98 01 00 00    	je     c001c848 <ATA::write(unsigned long long, int, void*)+0x1d0>
c001c6b0:	55                   	push   ebp
c001c6b1:	55                   	push   ebp
c001c6b2:	6a 01                	push   0x1
c001c6b4:	51                   	push   ecx
c001c6b5:	53                   	push   ebx
c001c6b6:	52                   	push   edx
c001c6b7:	50                   	push   eax
c001c6b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c6bc:	e8 ed f8 ff ff       	call   c001bfae <ATA::access(unsigned long long, int, void*, bool)>
c001c6c1:	83 c4 20             	add    esp,0x20
c001c6c4:	85 c0                	test   eax,eax
c001c6c6:	89 c6                	mov    esi,eax
c001c6c8:	0f 85 75 01 00 00    	jne    c001c843 <ATA::write(unsigned long long, int, void*)+0x1cb>
c001c6ce:	50                   	push   eax
c001c6cf:	bd 10 27 00 00       	mov    ebp,0x2710
c001c6d4:	50                   	push   eax
c001c6d5:	6a 0f                	push   0xf
c001c6d7:	6a 00                	push   0x0
c001c6d9:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c6df:	e8 a9 fd ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001c6e4:	5a                   	pop    edx
c001c6e5:	59                   	pop    ecx
c001c6e6:	b9 0a 00 00 00       	mov    ecx,0xa
c001c6eb:	0f b6 d8             	movzx  ebx,al
c001c6ee:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c6f3:	53                   	push   ebx
c001c6f4:	99                   	cdq    
c001c6f5:	f7 fd                	idiv   ebp
c001c6f7:	99                   	cdq    
c001c6f8:	f7 f9                	idiv   ecx
c001c6fa:	88 d0                	mov    al,dl
c001c6fc:	04 30                	add    al,0x30
c001c6fe:	0f b6 c0             	movzx  eax,al
c001c701:	50                   	push   eax
c001c702:	e8 75 fd ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001c707:	5f                   	pop    edi
c001c708:	bf e8 03 00 00       	mov    edi,0x3e8
c001c70d:	5a                   	pop    edx
c001c70e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c714:	53                   	push   ebx
c001c715:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c71a:	99                   	cdq    
c001c71b:	f7 ff                	idiv   edi
c001c71d:	99                   	cdq    
c001c71e:	f7 f9                	idiv   ecx
c001c720:	88 d0                	mov    al,dl
c001c722:	04 30                	add    al,0x30
c001c724:	0f b6 c0             	movzx  eax,al
c001c727:	50                   	push   eax
c001c728:	e8 4f fd ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001c72d:	5f                   	pop    edi
c001c72e:	bf 64 00 00 00       	mov    edi,0x64
c001c733:	5a                   	pop    edx
c001c734:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c73a:	53                   	push   ebx
c001c73b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c740:	99                   	cdq    
c001c741:	f7 ff                	idiv   edi
c001c743:	99                   	cdq    
c001c744:	f7 f9                	idiv   ecx
c001c746:	88 d0                	mov    al,dl
c001c748:	04 30                	add    al,0x30
c001c74a:	0f b6 c0             	movzx  eax,al
c001c74d:	50                   	push   eax
c001c74e:	e8 29 fd ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001c753:	5a                   	pop    edx
c001c754:	5a                   	pop    edx
c001c755:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c75b:	53                   	push   ebx
c001c75c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c761:	99                   	cdq    
c001c762:	f7 f9                	idiv   ecx
c001c764:	99                   	cdq    
c001c765:	f7 f9                	idiv   ecx
c001c767:	88 d0                	mov    al,dl
c001c769:	04 30                	add    al,0x30
c001c76b:	0f b6 c0             	movzx  eax,al
c001c76e:	50                   	push   eax
c001c76f:	e8 08 fd ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001c774:	5a                   	pop    edx
c001c775:	5a                   	pop    edx
c001c776:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c77c:	53                   	push   ebx
c001c77d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c782:	99                   	cdq    
c001c783:	f7 f9                	idiv   ecx
c001c785:	88 d0                	mov    al,dl
c001c787:	04 30                	add    al,0x30
c001c789:	0f b6 c0             	movzx  eax,al
c001c78c:	50                   	push   eax
c001c78d:	e8 ea fc ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001c792:	5a                   	pop    edx
c001c793:	5a                   	pop    edx
c001c794:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c79a:	53                   	push   ebx
c001c79b:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c7a0:	99                   	cdq    
c001c7a1:	f7 fd                	idiv   ebp
c001c7a3:	99                   	cdq    
c001c7a4:	f7 f9                	idiv   ecx
c001c7a6:	88 d0                	mov    al,dl
c001c7a8:	04 30                	add    al,0x30
c001c7aa:	0f b6 c0             	movzx  eax,al
c001c7ad:	50                   	push   eax
c001c7ae:	e8 c9 fc ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001c7b3:	5d                   	pop    ebp
c001c7b4:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c7b9:	5a                   	pop    edx
c001c7ba:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c7c0:	53                   	push   ebx
c001c7c1:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c7c6:	99                   	cdq    
c001c7c7:	f7 fd                	idiv   ebp
c001c7c9:	99                   	cdq    
c001c7ca:	f7 f9                	idiv   ecx
c001c7cc:	88 d0                	mov    al,dl
c001c7ce:	04 30                	add    al,0x30
c001c7d0:	0f b6 c0             	movzx  eax,al
c001c7d3:	50                   	push   eax
c001c7d4:	e8 a3 fc ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001c7d9:	5d                   	pop    ebp
c001c7da:	5a                   	pop    edx
c001c7db:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c7e1:	53                   	push   ebx
c001c7e2:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c7e7:	99                   	cdq    
c001c7e8:	f7 ff                	idiv   edi
c001c7ea:	99                   	cdq    
c001c7eb:	f7 f9                	idiv   ecx
c001c7ed:	88 d0                	mov    al,dl
c001c7ef:	04 30                	add    al,0x30
c001c7f1:	0f b6 c0             	movzx  eax,al
c001c7f4:	50                   	push   eax
c001c7f5:	e8 82 fc ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001c7fa:	5f                   	pop    edi
c001c7fb:	5d                   	pop    ebp
c001c7fc:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c802:	53                   	push   ebx
c001c803:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c808:	99                   	cdq    
c001c809:	f7 f9                	idiv   ecx
c001c80b:	99                   	cdq    
c001c80c:	f7 f9                	idiv   ecx
c001c80e:	88 d0                	mov    al,dl
c001c810:	04 30                	add    al,0x30
c001c812:	0f b6 c0             	movzx  eax,al
c001c815:	50                   	push   eax
c001c816:	e8 61 fc ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001c81b:	5a                   	pop    edx
c001c81c:	5f                   	pop    edi
c001c81d:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c823:	53                   	push   ebx
c001c824:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c829:	99                   	cdq    
c001c82a:	f7 f9                	idiv   ecx
c001c82c:	80 c2 30             	add    dl,0x30
c001c82f:	0f b6 d2             	movzx  edx,dl
c001c832:	52                   	push   edx
c001c833:	e8 44 fc ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001c838:	83 c4 10             	add    esp,0x10
c001c83b:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c841:	eb 05                	jmp    c001c848 <ATA::write(unsigned long long, int, void*)+0x1d0>
c001c843:	be 01 00 00 00       	mov    esi,0x1
c001c848:	83 c4 0c             	add    esp,0xc
c001c84b:	89 f0                	mov    eax,esi
c001c84d:	5b                   	pop    ebx
c001c84e:	5e                   	pop    esi
c001c84f:	5f                   	pop    edi
c001c850:	5d                   	pop    ebp
c001c851:	c3                   	ret    

c001c852 <ATAPI::write(unsigned long long, int, void*)>:
c001c852:	b8 03 00 00 00       	mov    eax,0x3
c001c857:	c3                   	ret    

c001c858 <ATAPI::close(int, int, void*)>:
c001c858:	83 ec 0c             	sub    esp,0xc
c001c85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c85f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c865:	85 c0                	test   eax,eax
c001c867:	74 0c                	je     c001c875 <ATAPI::close(int, int, void*)+0x1d>
c001c869:	8b 10                	mov    edx,DWORD PTR [eax]
c001c86b:	83 ec 0c             	sub    esp,0xc
c001c86e:	50                   	push   eax
c001c86f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c872:	83 c4 10             	add    esp,0x10
c001c875:	31 c0                	xor    eax,eax
c001c877:	83 c4 0c             	add    esp,0xc
c001c87a:	c3                   	ret    
c001c87b:	90                   	nop

c001c87c <ATAPI::ATAPI()>:
c001c87c:	83 ec 1c             	sub    esp,0x1c
c001c87f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c883:	c7 44 24 08 00 08 00 00 	mov    DWORD PTR [esp+0x8],0x800
c001c88b:	c7 44 24 04 95 21 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022195
c001c893:	89 04 24             	mov    DWORD PTR [esp],eax
c001c896:	e8 15 00 ff ff       	call   c000c8b0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c89b:	ba b0 20 02 c0       	mov    edx,0xc00220b0
c001c8a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8a4:	89 10                	mov    DWORD PTR [eax],edx
c001c8a6:	90                   	nop
c001c8a7:	83 c4 1c             	add    esp,0x1c
c001c8aa:	c3                   	ret    
c001c8ab:	90                   	nop

c001c8ac <ATAPI::readyForCommand()>:
c001c8ac:	56                   	push   esi
c001c8ad:	53                   	push   ebx
c001c8ae:	53                   	push   ebx
c001c8af:	31 db                	xor    ebx,ebx
c001c8b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c8b5:	51                   	push   ecx
c001c8b6:	6a 0c                	push   0xc
c001c8b8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c8bf:	50                   	push   eax
c001c8c0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c8c6:	e8 89 e8 ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001c8cb:	83 c4 10             	add    esp,0x10
c001c8ce:	a8 88                	test   al,0x88
c001c8d0:	74 25                	je     c001c8f7 <ATAPI::readyForCommand()+0x4b>
c001c8d2:	43                   	inc    ebx
c001c8d3:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c8d9:	7e da                	jle    c001c8b5 <ATAPI::readyForCommand()+0x9>
c001c8db:	83 ec 0c             	sub    esp,0xc
c001c8de:	68 5e 01 00 00       	push   0x15e
c001c8e3:	e8 54 91 ff ff       	call   c0015a3c <milliTenthSleep(unsigned int)>
c001c8e8:	83 c4 10             	add    esp,0x10
c001c8eb:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c8f1:	75 c2                	jne    c001c8b5 <ATAPI::readyForCommand()+0x9>
c001c8f3:	31 c0                	xor    eax,eax
c001c8f5:	eb 02                	jmp    c001c8f9 <ATAPI::readyForCommand()+0x4d>
c001c8f7:	b0 01                	mov    al,0x1
c001c8f9:	5a                   	pop    edx
c001c8fa:	5b                   	pop    ebx
c001c8fb:	5e                   	pop    esi
c001c8fc:	c3                   	ret    
c001c8fd:	90                   	nop

c001c8fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c8fe:	55                   	push   ebp
c001c8ff:	57                   	push   edi
c001c900:	56                   	push   esi
c001c901:	53                   	push   ebx
c001c902:	83 ec 20             	sub    esp,0x20
c001c905:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c909:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c90d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c911:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c915:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001c919:	6a 01                	push   0x1
c001c91b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c922:	50                   	push   eax
c001c923:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c929:	e8 60 e9 ff ff       	call   c001b28e <IDE::enableIRQs(unsigned char, bool)>
c001c92e:	5e                   	pop    esi
c001c92f:	58                   	pop    eax
c001c930:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c937:	50                   	push   eax
c001c938:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c93e:	e8 3d e7 ff ff       	call   c001b080 <IDE::prepareInterrupt(unsigned char)>
c001c943:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c946:	e8 61 ff ff ff       	call   c001c8ac <ATAPI::readyForCommand()>
c001c94b:	83 c4 10             	add    esp,0x10
c001c94e:	84 c0                	test   al,al
c001c950:	75 0a                	jne    c001c95c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c952:	bb 01 00 00 00       	mov    ebx,0x1
c001c957:	e9 57 02 00 00       	jmp    c001cbb3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c95c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001c962:	c0 e0 04             	shl    al,0x4
c001c965:	0f b6 c0             	movzx  eax,al
c001c968:	50                   	push   eax
c001c969:	6a 06                	push   0x6
c001c96b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c972:	50                   	push   eax
c001c973:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c979:	e8 28 e7 ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c97e:	6a 00                	push   0x0
c001c980:	6a 01                	push   0x1
c001c982:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c989:	50                   	push   eax
c001c98a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c990:	e8 11 e7 ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c995:	83 c4 20             	add    esp,0x20
c001c998:	0f b6 c3             	movzx  eax,bl
c001c99b:	50                   	push   eax
c001c99c:	0f b6 df             	movzx  ebx,bh
c001c99f:	6a 04                	push   0x4
c001c9a1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9a8:	50                   	push   eax
c001c9a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9af:	e8 f2 e6 ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9b4:	53                   	push   ebx
c001c9b5:	6a 05                	push   0x5
c001c9b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9be:	50                   	push   eax
c001c9bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9c5:	e8 dc e6 ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9ca:	83 c4 20             	add    esp,0x20
c001c9cd:	68 a0 00 00 00       	push   0xa0
c001c9d2:	6a 07                	push   0x7
c001c9d4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9db:	50                   	push   eax
c001c9dc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9e2:	e8 bf e6 ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9e7:	83 c4 0c             	add    esp,0xc
c001c9ea:	6a 01                	push   0x1
c001c9ec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9f3:	50                   	push   eax
c001c9f4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9fa:	e8 33 f1 ff ff       	call   c001bb32 <IDE::polling(unsigned char, unsigned int)>
c001c9ff:	83 c4 10             	add    esp,0x10
c001ca02:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001ca08:	84 c0                	test   al,al
c001ca0a:	74 23                	je     c001ca2f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ca0c:	0f b6 d8             	movzx  ebx,al
c001ca0f:	0f b6 d2             	movzx  edx,dl
c001ca12:	53                   	push   ebx
c001ca13:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ca1a:	50                   	push   eax
c001ca1b:	52                   	push   edx
c001ca1c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca22:	e8 39 f0 ff ff       	call   c001ba60 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ca27:	83 c4 10             	add    esp,0x10
c001ca2a:	e9 84 01 00 00       	jmp    c001cbb3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ca2f:	53                   	push   ebx
c001ca30:	0f b6 d2             	movzx  edx,dl
c001ca33:	53                   	push   ebx
c001ca34:	52                   	push   edx
c001ca35:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca3b:	e8 54 e6 ff ff       	call   c001b094 <IDE::getBase(unsigned char)>
c001ca40:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ca44:	b9 06 00 00 00       	mov    ecx,0x6
c001ca49:	89 c2                	mov    edx,eax
c001ca4b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ca4e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ca52:	83 c4 10             	add    esp,0x10
c001ca55:	85 db                	test   ebx,ebx
c001ca57:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ca5d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ca64:	0f 84 e9 00 00 00    	je     c001cb53 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x255>
c001ca6a:	51                   	push   ecx
c001ca6b:	51                   	push   ecx
c001ca6c:	52                   	push   edx
c001ca6d:	50                   	push   eax
c001ca6e:	e8 7d e7 ff ff       	call   c001b1f0 <IDE::waitInterrupt(unsigned char)>
c001ca73:	83 c4 10             	add    esp,0x10
c001ca76:	84 c0                	test   al,al
c001ca78:	0f 84 d4 fe ff ff    	je     c001c952 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ca7e:	56                   	push   esi
c001ca7f:	56                   	push   esi
c001ca80:	31 f6                	xor    esi,esi
c001ca82:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca89:	50                   	push   eax
c001ca8a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca90:	e8 eb e5 ff ff       	call   c001b080 <IDE::prepareInterrupt(unsigned char)>
c001ca95:	83 c4 0c             	add    esp,0xc
c001ca98:	6a 04                	push   0x4
c001ca9a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001caa1:	50                   	push   eax
c001caa2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001caa8:	e8 a7 e6 ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001caad:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c001cab1:	83 c4 0c             	add    esp,0xc
c001cab4:	6a 05                	push   0x5
c001cab6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cabd:	50                   	push   eax
c001cabe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cac4:	e8 8b e6 ff ff       	call   c001b154 <IDE::read(unsigned char, unsigned char)>
c001cac9:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001cace:	0f b6 c0             	movzx  eax,al
c001cad1:	c1 e0 08             	shl    eax,0x8
c001cad4:	09 d0                	or     eax,edx
c001cad6:	d1 f8                	sar    eax,1
c001cad8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cadc:	83 c4 10             	add    esp,0x10
c001cadf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001cae4:	74 54                	je     c001cb3a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23c>
c001cae6:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001caea:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001caf0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001caf7:	75 0b                	jne    c001cb04 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001caf9:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001cafc:	01 cd                	add    ebp,ecx
c001cafe:	4b                   	dec    ebx
c001caff:	e9 51 ff ff ff       	jmp    c001ca55 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001cb04:	0f b7 4c 75 00       	movzx  ecx,WORD PTR [ebp+esi*2+0x0]
c001cb09:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cb0d:	51                   	push   ecx
c001cb0e:	51                   	push   ecx
c001cb0f:	52                   	push   edx
c001cb10:	50                   	push   eax
c001cb11:	e8 7e e5 ff ff       	call   c001b094 <IDE::getBase(unsigned char)>
c001cb16:	89 c2                	mov    edx,eax
c001cb18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb1c:	66 ef                	out    dx,ax
c001cb1e:	46                   	inc    esi
c001cb1f:	83 c4 10             	add    esp,0x10
c001cb22:	eb c2                	jmp    c001cae6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e8>
c001cb24:	51                   	push   ecx
c001cb25:	51                   	push   ecx
c001cb26:	52                   	push   edx
c001cb27:	50                   	push   eax
c001cb28:	e8 67 e5 ff ff       	call   c001b094 <IDE::getBase(unsigned char)>
c001cb2d:	89 c2                	mov    edx,eax
c001cb2f:	66 ed                	in     ax,dx
c001cb31:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001cb36:	83 c4 10             	add    esp,0x10
c001cb39:	46                   	inc    esi
c001cb3a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001cb3e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cb44:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cb4b:	75 d7                	jne    c001cb24 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001cb4d:	01 f6                	add    esi,esi
c001cb4f:	01 f5                	add    ebp,esi
c001cb51:	eb ab                	jmp    c001cafe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x200>
c001cb53:	51                   	push   ecx
c001cb54:	51                   	push   ecx
c001cb55:	52                   	push   edx
c001cb56:	50                   	push   eax
c001cb57:	e8 94 e6 ff ff       	call   c001b1f0 <IDE::waitInterrupt(unsigned char)>
c001cb5c:	83 c4 10             	add    esp,0x10
c001cb5f:	84 c0                	test   al,al
c001cb61:	0f 84 eb fd ff ff    	je     c001c952 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cb67:	52                   	push   edx
c001cb68:	bb a0 86 01 00       	mov    ebx,0x186a0
c001cb6d:	52                   	push   edx
c001cb6e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb75:	50                   	push   eax
c001cb76:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb7c:	e8 ff e4 ff ff       	call   c001b080 <IDE::prepareInterrupt(unsigned char)>
c001cb81:	83 c4 10             	add    esp,0x10
c001cb84:	50                   	push   eax
c001cb85:	50                   	push   eax
c001cb86:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb8d:	50                   	push   eax
c001cb8e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb94:	e8 fb e4 ff ff       	call   c001b094 <IDE::getBase(unsigned char)>
c001cb99:	0f b7 c0             	movzx  eax,ax
c001cb9c:	8d 50 07             	lea    edx,[eax+0x7]
c001cb9f:	ec                   	in     al,dx
c001cba0:	83 c4 10             	add    esp,0x10
c001cba3:	a8 88                	test   al,0x88
c001cba5:	74 0a                	je     c001cbb1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001cba7:	4b                   	dec    ebx
c001cba8:	75 da                	jne    c001cb84 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x286>
c001cbaa:	bb 02 00 00 00       	mov    ebx,0x2
c001cbaf:	eb 02                	jmp    c001cbb3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cbb1:	31 db                	xor    ebx,ebx
c001cbb3:	83 c4 1c             	add    esp,0x1c
c001cbb6:	89 d8                	mov    eax,ebx
c001cbb8:	5b                   	pop    ebx
c001cbb9:	5e                   	pop    esi
c001cbba:	5f                   	pop    edi
c001cbbb:	5d                   	pop    ebp
c001cbbc:	c3                   	ret    
c001cbbd:	90                   	nop

c001cbbe <ATAPI::diskRemoved()>:
c001cbbe:	53                   	push   ebx
c001cbbf:	83 ec 14             	sub    esp,0x14
c001cbc2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cbc6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001cbcd:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001cbd3:	e8 c6 0b ff ff       	call   c000d79e <LogicalDisk::unmount()>
c001cbd8:	58                   	pop    eax
c001cbd9:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001cbdf:	e8 8c 15 ff ff       	call   c000e170 <VCache::writeWriteBuffer()>
c001cbe4:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001cbea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbee:	83 c4 18             	add    esp,0x18
c001cbf1:	5b                   	pop    ebx
c001cbf2:	e9 69 15 ff ff       	jmp    c000e160 <VCache::invalidateReadBuffer()>
c001cbf7:	90                   	nop

c001cbf8 <ATAPI::eject()>:
c001cbf8:	57                   	push   edi
c001cbf9:	b9 03 00 00 00       	mov    ecx,0x3
c001cbfe:	53                   	push   ebx
c001cbff:	83 ec 14             	sub    esp,0x14
c001cc02:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cc06:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cc0a:	fc                   	cld    
c001cc0b:	31 c0                	xor    eax,eax
c001cc0d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cc0f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001cc14:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001cc19:	50                   	push   eax
c001cc1a:	50                   	push   eax
c001cc1b:	6a 00                	push   0x0
c001cc1d:	6a 00                	push   0x0
c001cc1f:	6a 00                	push   0x0
c001cc21:	6a 02                	push   0x2
c001cc23:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cc27:	50                   	push   eax
c001cc28:	53                   	push   ebx
c001cc29:	e8 d0 fc ff ff       	call   c001c8fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cc2e:	83 c4 14             	add    esp,0x14
c001cc31:	53                   	push   ebx
c001cc32:	e8 87 ff ff ff       	call   c001cbbe <ATAPI::diskRemoved()>
c001cc37:	83 c4 24             	add    esp,0x24
c001cc3a:	31 c0                	xor    eax,eax
c001cc3c:	5b                   	pop    ebx
c001cc3d:	5f                   	pop    edi
c001cc3e:	c3                   	ret    
c001cc3f:	90                   	nop

c001cc40 <ATAPI::diskInserted()>:
c001cc40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc44:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001cc4b:	c3                   	ret    

c001cc4c <ATAPI::detectMedia()>:
c001cc4c:	56                   	push   esi
c001cc4d:	53                   	push   ebx
c001cc4e:	83 ec 28             	sub    esp,0x28
c001cc51:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cc55:	6a 0c                	push   0xc
c001cc57:	6a 00                	push   0x0
c001cc59:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001cc5d:	56                   	push   esi
c001cc5e:	e8 1d 39 fe ff       	call   c0000580 <memset>
c001cc63:	58                   	pop    eax
c001cc64:	5a                   	pop    edx
c001cc65:	6a 00                	push   0x0
c001cc67:	6a 00                	push   0x0
c001cc69:	6a 00                	push   0x0
c001cc6b:	6a 00                	push   0x0
c001cc6d:	56                   	push   esi
c001cc6e:	53                   	push   ebx
c001cc6f:	e8 8a fc ff ff       	call   c001c8fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cc74:	83 c4 1c             	add    esp,0x1c
c001cc77:	6a 0c                	push   0xc
c001cc79:	6a 00                	push   0x0
c001cc7b:	56                   	push   esi
c001cc7c:	e8 ff 38 fe ff       	call   c0000580 <memset>
c001cc81:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001cc86:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001cc8b:	59                   	pop    ecx
c001cc8c:	58                   	pop    eax
c001cc8d:	6a 01                	push   0x1
c001cc8f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001cc93:	50                   	push   eax
c001cc94:	6a 00                	push   0x0
c001cc96:	6a 12                	push   0x12
c001cc98:	56                   	push   esi
c001cc99:	53                   	push   ebx
c001cc9a:	e8 5f fc ff ff       	call   c001c8fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cc9f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001cca3:	83 c4 20             	add    esp,0x20
c001cca6:	24 7f                	and    al,0x7f
c001cca8:	3c 70                	cmp    al,0x70
c001ccaa:	74 15                	je     c001ccc1 <ATAPI::detectMedia()+0x75>
c001ccac:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ccb3:	75 0c                	jne    c001ccc1 <ATAPI::detectMedia()+0x75>
c001ccb5:	83 ec 0c             	sub    esp,0xc
c001ccb8:	53                   	push   ebx
c001ccb9:	e8 82 ff ff ff       	call   c001cc40 <ATAPI::diskInserted()>
c001ccbe:	83 c4 10             	add    esp,0x10
c001ccc1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ccc5:	24 0f                	and    al,0xf
c001ccc7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001cccc:	75 18                	jne    c001cce6 <ATAPI::detectMedia()+0x9a>
c001ccce:	3c 02                	cmp    al,0x2
c001ccd0:	75 14                	jne    c001cce6 <ATAPI::detectMedia()+0x9a>
c001ccd2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ccd9:	74 24                	je     c001ccff <ATAPI::detectMedia()+0xb3>
c001ccdb:	83 ec 0c             	sub    esp,0xc
c001ccde:	53                   	push   ebx
c001ccdf:	e8 da fe ff ff       	call   c001cbbe <ATAPI::diskRemoved()>
c001cce4:	eb 16                	jmp    c001ccfc <ATAPI::detectMedia()+0xb0>
c001cce6:	84 c0                	test   al,al
c001cce8:	75 15                	jne    c001ccff <ATAPI::detectMedia()+0xb3>
c001ccea:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ccf1:	75 0c                	jne    c001ccff <ATAPI::detectMedia()+0xb3>
c001ccf3:	83 ec 0c             	sub    esp,0xc
c001ccf6:	53                   	push   ebx
c001ccf7:	e8 44 ff ff ff       	call   c001cc40 <ATAPI::diskInserted()>
c001ccfc:	83 c4 10             	add    esp,0x10
c001ccff:	83 c4 24             	add    esp,0x24
c001cd02:	5b                   	pop    ebx
c001cd03:	5e                   	pop    esi
c001cd04:	c3                   	ret    
c001cd05:	90                   	nop

c001cd06 <ATAPI::open(int, int, void*)>:
c001cd06:	56                   	push   esi
c001cd07:	53                   	push   ebx
c001cd08:	50                   	push   eax
c001cd09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd15:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cd1b:	c1 e0 06             	shl    eax,0x6
c001cd1e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cd24:	01 d0                	add    eax,edx
c001cd26:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001cd2d:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001cd33:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001cd3a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001cd44:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001cd4b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cd51:	6a 04                	push   0x4
c001cd53:	6a 0c                	push   0xc
c001cd55:	51                   	push   ecx
c001cd56:	52                   	push   edx
c001cd57:	e8 4a e3 ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd5c:	90                   	nop
c001cd5d:	90                   	nop
c001cd5e:	6a 00                	push   0x0
c001cd60:	6a 0c                	push   0xc
c001cd62:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd69:	50                   	push   eax
c001cd6a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd70:	e8 31 e3 ff ff       	call   c001b0a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd75:	83 c4 14             	add    esp,0x14
c001cd78:	68 78 01 00 00       	push   0x178
c001cd7d:	e8 7a ad fe ff       	call   c0007afc <malloc>
c001cd82:	83 c4 0c             	add    esp,0xc
c001cd85:	6a 00                	push   0x0
c001cd87:	68 ff ff ff 7f       	push   0x7fffffff
c001cd8c:	6a 00                	push   0x0
c001cd8e:	6a 00                	push   0x0
c001cd90:	53                   	push   ebx
c001cd91:	68 47 22 02 c0       	push   0xc0022247
c001cd96:	89 c6                	mov    esi,eax
c001cd98:	50                   	push   eax
c001cd99:	e8 3a 08 ff ff       	call   c000d5d8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001cd9e:	83 c4 14             	add    esp,0x14
c001cda1:	56                   	push   esi
c001cda2:	e8 f3 08 ff ff       	call   c000d69a <LogicalDisk::assignDriveLetter()>
c001cda7:	5a                   	pop    edx
c001cda8:	59                   	pop    ecx
c001cda9:	0f be c0             	movsx  eax,al
c001cdac:	50                   	push   eax
c001cdad:	68 98 20 02 c0       	push   0xc0022098
c001cdb2:	e8 bf dc fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001cdb7:	58                   	pop    eax
c001cdb8:	5a                   	pop    edx
c001cdb9:	56                   	push   esi
c001cdba:	53                   	push   ebx
c001cdbb:	e8 2a f7 fe ff       	call   c000c4ea <Device::addChild(Device*)>
c001cdc0:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001cdc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdc9:	e8 4a fb fe ff       	call   c000c918 <PhysicalDisk::startCache()>
c001cdce:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001cdd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdd8:	e8 6f fe ff ff       	call   c001cc4c <ATAPI::detectMedia()>
c001cddd:	83 c4 14             	add    esp,0x14
c001cde0:	31 c0                	xor    eax,eax
c001cde2:	5b                   	pop    ebx
c001cde3:	5e                   	pop    esi
c001cde4:	c3                   	ret    
c001cde5:	90                   	nop

c001cde6 <ATAPI::read(unsigned long long, int, void*)>:
c001cde6:	55                   	push   ebp
c001cde7:	57                   	push   edi
c001cde8:	56                   	push   esi
c001cde9:	53                   	push   ebx
c001cdea:	83 ec 1c             	sub    esp,0x1c
c001cded:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001cdf1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001cdf5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001cdf9:	80 bd 7c 01 00 00 00 	cmp    BYTE PTR [ebp+0x17c],0x0
c001ce00:	74 3a                	je     c001ce3c <ATAPI::read(unsigned long long, int, void*)+0x56>
c001ce02:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ce06:	b9 03 00 00 00       	mov    ecx,0x3
c001ce0b:	fc                   	cld    
c001ce0c:	31 c0                	xor    eax,eax
c001ce0e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ce10:	0f ce                	bswap  esi
c001ce12:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
c001ce16:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ce1b:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001ce1f:	50                   	push   eax
c001ce20:	50                   	push   eax
c001ce21:	53                   	push   ebx
c001ce22:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ce26:	c1 e3 0b             	shl    ebx,0xb
c001ce29:	6a 00                	push   0x0
c001ce2b:	53                   	push   ebx
c001ce2c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ce30:	50                   	push   eax
c001ce31:	55                   	push   ebp
c001ce32:	e8 c7 fa ff ff       	call   c001c8fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ce37:	83 c4 20             	add    esp,0x20
c001ce3a:	eb 1a                	jmp    c001ce56 <ATAPI::read(unsigned long long, int, void*)+0x70>
c001ce3c:	83 ec 0c             	sub    esp,0xc
c001ce3f:	55                   	push   ebp
c001ce40:	e8 07 fe ff ff       	call   c001cc4c <ATAPI::detectMedia()>
c001ce45:	83 c4 10             	add    esp,0x10
c001ce48:	80 bd 7c 01 00 00 00 	cmp    BYTE PTR [ebp+0x17c],0x0
c001ce4f:	75 b1                	jne    c001ce02 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ce51:	b8 02 00 00 00       	mov    eax,0x2
c001ce56:	83 c4 1c             	add    esp,0x1c
c001ce59:	5b                   	pop    ebx
c001ce5a:	5e                   	pop    esi
c001ce5b:	5f                   	pop    edi
c001ce5c:	5d                   	pop    ebp
c001ce5d:	c3                   	ret    

c001ce5e <SATA::close(int, int, void*)>:
c001ce5e:	83 ec 0c             	sub    esp,0xc
c001ce61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce65:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ce6b:	85 c0                	test   eax,eax
c001ce6d:	74 0c                	je     c001ce7b <SATA::close(int, int, void*)+0x1d>
c001ce6f:	8b 10                	mov    edx,DWORD PTR [eax]
c001ce71:	83 ec 0c             	sub    esp,0xc
c001ce74:	50                   	push   eax
c001ce75:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ce78:	83 c4 10             	add    esp,0x10
c001ce7b:	31 c0                	xor    eax,eax
c001ce7d:	83 c4 0c             	add    esp,0xc
c001ce80:	c3                   	ret    
c001ce81:	90                   	nop

c001ce82 <SATA::powerSaving(PowerSavingLevel)>:
c001ce82:	c3                   	ret    
c001ce83:	90                   	nop

c001ce84 <SATA::open(int, int, void*)>:
c001ce84:	56                   	push   esi
c001ce85:	53                   	push   ebx
c001ce86:	50                   	push   eax
c001ce87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ce8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ce8f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ce99:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ce9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cea3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001cead:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ceb7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cebe:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001cec4:	e8 43 af fe ff       	call   c0007e0c <Phys::allocatePage()>
c001cec9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cecf:	89 c6                	mov    esi,eax
c001ced1:	e8 36 af fe ff       	call   c0007e0c <Phys::allocatePage()>
c001ced6:	81 c6 00 10 00 00    	add    esi,0x1000
c001cedc:	39 c6                	cmp    esi,eax
c001cede:	74 10                	je     c001cef0 <SATA::open(int, int, void*)+0x6c>
c001cee0:	83 ec 0c             	sub    esp,0xc
c001cee3:	68 e0 20 02 c0       	push   0xc00220e0
c001cee8:	e8 48 3f ff ff       	call   c0010e35 <KePanic(char const*)>
c001ceed:	83 c4 10             	add    esp,0x10
c001cef0:	83 ec 0c             	sub    esp,0xc
c001cef3:	6a 02                	push   0x2
c001cef5:	e8 26 c7 fe ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c001cefa:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cf00:	6a 03                	push   0x3
c001cf02:	50                   	push   eax
c001cf03:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001cf09:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001cf0f:	e8 2e ce fe ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cf14:	83 c4 14             	add    esp,0x14
c001cf17:	53                   	push   ebx
c001cf18:	e8 fb f9 fe ff       	call   c000c918 <PhysicalDisk::startCache()>
c001cf1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf20:	e8 8c 0b ff ff       	call   c000dab1 <createPartitionsForDisk(PhysicalDisk*)>
c001cf25:	83 c4 14             	add    esp,0x14
c001cf28:	31 c0                	xor    eax,eax
c001cf2a:	5b                   	pop    ebx
c001cf2b:	5e                   	pop    esi
c001cf2c:	c3                   	ret    
c001cf2d:	90                   	nop

c001cf2e <SATA::SATA()>:
c001cf2e:	83 ec 1c             	sub    esp,0x1c
c001cf31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf35:	c7 44 24 08 00 02 00 00 	mov    DWORD PTR [esp+0x8],0x200
c001cf3d:	c7 44 24 04 f4 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc00220f4
c001cf45:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf48:	e8 63 f9 fe ff       	call   c000c8b0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cf4d:	ba 64 21 02 c0       	mov    edx,0xc0022164
c001cf52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf56:	89 10                	mov    DWORD PTR [eax],edx
c001cf58:	90                   	nop
c001cf59:	83 c4 1c             	add    esp,0x1c
c001cf5c:	c3                   	ret    
c001cf5d:	90                   	nop

c001cf5e <SATA::access(unsigned long long, int, void*, bool)>:
c001cf5e:	55                   	push   ebp
c001cf5f:	57                   	push   edi
c001cf60:	56                   	push   esi
c001cf61:	53                   	push   ebx
c001cf62:	83 ec 2c             	sub    esp,0x2c
c001cf65:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001cf69:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001cf6e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cf72:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf76:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001cf7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf7e:	8a 44 24 54          	mov    al,BYTE PTR [esp+0x54]
c001cf82:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001cf86:	7e 10                	jle    c001cf98 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001cf88:	83 ec 0c             	sub    esp,0xc
c001cf8b:	68 04 21 02 c0       	push   0xc0022104
c001cf90:	e8 a0 3e ff ff       	call   c0010e35 <KePanic(char const*)>
c001cf95:	83 c4 10             	add    esp,0x10
c001cf98:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001cf9e:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001cfa4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001cfaa:	89 e8                	mov    eax,ebp
c001cfac:	c1 e0 07             	shl    eax,0x7
c001cfaf:	01 d0                	add    eax,edx
c001cfb1:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cfbb:	8d 45 02             	lea    eax,[ebp+0x2]
c001cfbe:	51                   	push   ecx
c001cfbf:	c1 e0 07             	shl    eax,0x7
c001cfc2:	51                   	push   ecx
c001cfc3:	01 d0                	add    eax,edx
c001cfc5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cfc9:	50                   	push   eax
c001cfca:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cfd0:	e8 4f ec ff ff       	call   c001bc24 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cfd5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cfd9:	83 c4 10             	add    esp,0x10
c001cfdc:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001cfe1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cfe5:	0f 84 4e 01 00 00    	je     c001d139 <SATA::access(unsigned long long, int, void*, bool)+0x1db>
c001cfeb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cfef:	c1 e0 09             	shl    eax,0x9
c001cff2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001cff7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cffb:	74 0e                	je     c001d00b <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001cffd:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d003:	89 c1                	mov    ecx,eax
c001d005:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d009:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d00b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d00f:	8d 45 02             	lea    eax,[ebp+0x2]
c001d012:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001d016:	c1 e0 07             	shl    eax,0x7
c001d019:	01 d0                	add    eax,edx
c001d01b:	8b 38                	mov    edi,DWORD PTR [eax]
c001d01d:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d023:	80 e1 01             	and    cl,0x1
c001d026:	c0 e1 06             	shl    cl,0x6
c001d029:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c001d02f:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c001d035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d039:	c1 e0 05             	shl    eax,0x5
c001d03c:	01 c7                	add    edi,eax
c001d03e:	8a 07                	mov    al,BYTE PTR [edi]
c001d040:	24 bf                	and    al,0xbf
c001d042:	08 c8                	or     al,cl
c001d044:	88 07                	mov    BYTE PTR [edi],al
c001d046:	8b 07                	mov    eax,DWORD PTR [edi]
c001d048:	25 e0 ff 00 00       	and    eax,0xffe0
c001d04d:	0d 05 00 01 00       	or     eax,0x10005
c001d052:	89 07                	mov    DWORD PTR [edi],eax
c001d054:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d05a:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c001d060:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c001d066:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c001d069:	50                   	push   eax
c001d06a:	68 90 00 00 00       	push   0x90
c001d06f:	6a 00                	push   0x0
c001d071:	56                   	push   esi
c001d072:	e8 09 35 fe ff       	call   c0000580 <memset>
c001d077:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d07d:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d081:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d087:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d08b:	83 c4 10             	add    esp,0x10
c001d08e:	48                   	dec    eax
c001d08f:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d094:	89 c1                	mov    ecx,eax
c001d096:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d09c:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d0a1:	09 c8                	or     eax,ecx
c001d0a3:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d0a9:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d0ac:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001d0b3:	25 00 7f 00 00       	and    eax,0x7f00
c001d0b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d0bc:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d0c1:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001d0c6:	66 89 06             	mov    WORD PTR [esi],ax
c001d0c9:	19 c0                	sbb    eax,eax
c001d0cb:	24 f0                	and    al,0xf0
c001d0cd:	04 35                	add    al,0x35
c001d0cf:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d0d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d0d6:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001d0da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d0de:	c1 e8 10             	shr    eax,0x10
c001d0e1:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d0e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d0e8:	c1 e8 18             	shr    eax,0x18
c001d0eb:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d0ee:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d0f2:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d0f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d0f9:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d0fc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d100:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d104:	89 ee                	mov    esi,ebp
c001d106:	31 c0                	xor    eax,eax
c001d108:	c1 e6 07             	shl    esi,0x7
c001d10b:	01 d6                	add    esi,edx
c001d10d:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d113:	f6 c1 88             	test   cl,0x88
c001d116:	74 0a                	je     c001d122 <SATA::access(unsigned long long, int, void*, bool)+0x1c4>
c001d118:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d11d:	74 0a                	je     c001d129 <SATA::access(unsigned long long, int, void*, bool)+0x1cb>
c001d11f:	40                   	inc    eax
c001d120:	eb eb                	jmp    c001d10d <SATA::access(unsigned long long, int, void*, bool)+0x1af>
c001d122:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d127:	75 17                	jne    c001d140 <SATA::access(unsigned long long, int, void*, bool)+0x1e2>
c001d129:	83 ec 0c             	sub    esp,0xc
c001d12c:	68 3d 21 02 c0       	push   0xc002213d
c001d131:	e8 40 d9 fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001d136:	83 c4 10             	add    esp,0x10
c001d139:	b8 01 00 00 00       	mov    eax,0x1
c001d13e:	eb 5b                	jmp    c001d19b <SATA::access(unsigned long long, int, void*, bool)+0x23d>
c001d140:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d144:	c1 e5 07             	shl    ebp,0x7
c001d147:	b8 01 00 00 00       	mov    eax,0x1
c001d14c:	01 d5                	add    ebp,edx
c001d14e:	d3 e0                	shl    eax,cl
c001d150:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d156:	8b 95 38 01 00 00    	mov    edx,DWORD PTR [ebp+0x138]
c001d15c:	85 d0                	test   eax,edx
c001d15e:	74 16                	je     c001d176 <SATA::access(unsigned long long, int, void*, bool)+0x218>
c001d160:	8b 95 10 01 00 00    	mov    edx,DWORD PTR [ebp+0x110]
c001d166:	0f ba e2 1e          	bt     edx,0x1e
c001d16a:	73 ea                	jae    c001d156 <SATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001d16c:	83 ec 0c             	sub    esp,0xc
c001d16f:	68 4b 21 02 c0       	push   0xc002214b
c001d174:	eb bb                	jmp    c001d131 <SATA::access(unsigned long long, int, void*, bool)+0x1d3>
c001d176:	8b 85 10 01 00 00    	mov    eax,DWORD PTR [ebp+0x110]
c001d17c:	0f ba e0 1e          	bt     eax,0x1e
c001d180:	72 b7                	jb     c001d139 <SATA::access(unsigned long long, int, void*, bool)+0x1db>
c001d182:	31 c0                	xor    eax,eax
c001d184:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d189:	75 10                	jne    c001d19b <SATA::access(unsigned long long, int, void*, bool)+0x23d>
c001d18b:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d191:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d195:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d199:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d19b:	83 c4 2c             	add    esp,0x2c
c001d19e:	5b                   	pop    ebx
c001d19f:	5e                   	pop    esi
c001d1a0:	5f                   	pop    edi
c001d1a1:	5d                   	pop    ebp
c001d1a2:	c3                   	ret    
c001d1a3:	90                   	nop

c001d1a4 <SATA::read(unsigned long long, int, void*)>:
c001d1a4:	55                   	push   ebp
c001d1a5:	57                   	push   edi
c001d1a6:	56                   	push   esi
c001d1a7:	be 04 00 00 00       	mov    esi,0x4
c001d1ac:	53                   	push   ebx
c001d1ad:	83 ec 0c             	sub    esp,0xc
c001d1b0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d1b4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d1b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d1bc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d1c0:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d1c3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d1c9:	0f 87 1c 02 00 00    	ja     c001d3eb <SATA::read(unsigned long long, int, void*)+0x247>
c001d1cf:	85 c9                	test   ecx,ecx
c001d1d1:	be 06 00 00 00       	mov    esi,0x6
c001d1d6:	0f 84 0f 02 00 00    	je     c001d3eb <SATA::read(unsigned long long, int, void*)+0x247>
c001d1dc:	56                   	push   esi
c001d1dd:	56                   	push   esi
c001d1de:	6a 00                	push   0x0
c001d1e0:	51                   	push   ecx
c001d1e1:	53                   	push   ebx
c001d1e2:	52                   	push   edx
c001d1e3:	50                   	push   eax
c001d1e4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d1e8:	e8 71 fd ff ff       	call   c001cf5e <SATA::access(unsigned long long, int, void*, bool)>
c001d1ed:	83 c4 20             	add    esp,0x20
c001d1f0:	85 c0                	test   eax,eax
c001d1f2:	89 c6                	mov    esi,eax
c001d1f4:	0f 85 ec 01 00 00    	jne    c001d3e6 <SATA::read(unsigned long long, int, void*)+0x242>
c001d1fa:	50                   	push   eax
c001d1fb:	bd 10 27 00 00       	mov    ebp,0x2710
c001d200:	50                   	push   eax
c001d201:	6a 0f                	push   0xf
c001d203:	6a 00                	push   0x0
c001d205:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001d20b:	bb 0a 00 00 00       	mov    ebx,0xa
c001d210:	e8 78 f2 ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001d215:	5a                   	pop    edx
c001d216:	59                   	pop    ecx
c001d217:	0f b6 c0             	movzx  eax,al
c001d21a:	50                   	push   eax
c001d21b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d220:	99                   	cdq    
c001d221:	f7 fd                	idiv   ebp
c001d223:	99                   	cdq    
c001d224:	f7 fb                	idiv   ebx
c001d226:	80 c2 30             	add    dl,0x30
c001d229:	0f b6 d2             	movzx  edx,dl
c001d22c:	52                   	push   edx
c001d22d:	e8 4a f2 ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001d232:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d238:	5f                   	pop    edi
c001d239:	bf e8 03 00 00       	mov    edi,0x3e8
c001d23e:	58                   	pop    eax
c001d23f:	6a 0f                	push   0xf
c001d241:	6a 00                	push   0x0
c001d243:	e8 45 f2 ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001d248:	5a                   	pop    edx
c001d249:	59                   	pop    ecx
c001d24a:	0f b6 c0             	movzx  eax,al
c001d24d:	50                   	push   eax
c001d24e:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d253:	99                   	cdq    
c001d254:	f7 ff                	idiv   edi
c001d256:	99                   	cdq    
c001d257:	f7 fb                	idiv   ebx
c001d259:	80 c2 30             	add    dl,0x30
c001d25c:	0f b6 d2             	movzx  edx,dl
c001d25f:	52                   	push   edx
c001d260:	e8 17 f2 ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001d265:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d26b:	58                   	pop    eax
c001d26c:	5a                   	pop    edx
c001d26d:	6a 0f                	push   0xf
c001d26f:	6a 00                	push   0x0
c001d271:	e8 17 f2 ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001d276:	59                   	pop    ecx
c001d277:	b9 64 00 00 00       	mov    ecx,0x64
c001d27c:	5a                   	pop    edx
c001d27d:	0f b6 c0             	movzx  eax,al
c001d280:	50                   	push   eax
c001d281:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d286:	99                   	cdq    
c001d287:	f7 f9                	idiv   ecx
c001d289:	99                   	cdq    
c001d28a:	f7 fb                	idiv   ebx
c001d28c:	80 c2 30             	add    dl,0x30
c001d28f:	0f b6 d2             	movzx  edx,dl
c001d292:	52                   	push   edx
c001d293:	e8 e4 f1 ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001d298:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d29e:	59                   	pop    ecx
c001d29f:	58                   	pop    eax
c001d2a0:	6a 0f                	push   0xf
c001d2a2:	6a 00                	push   0x0
c001d2a4:	e8 e4 f1 ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001d2a9:	5a                   	pop    edx
c001d2aa:	59                   	pop    ecx
c001d2ab:	0f b6 c0             	movzx  eax,al
c001d2ae:	50                   	push   eax
c001d2af:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d2b4:	99                   	cdq    
c001d2b5:	f7 fb                	idiv   ebx
c001d2b7:	99                   	cdq    
c001d2b8:	f7 fb                	idiv   ebx
c001d2ba:	80 c2 30             	add    dl,0x30
c001d2bd:	0f b6 d2             	movzx  edx,dl
c001d2c0:	52                   	push   edx
c001d2c1:	e8 b6 f1 ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001d2c6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d2cc:	58                   	pop    eax
c001d2cd:	5a                   	pop    edx
c001d2ce:	6a 0f                	push   0xf
c001d2d0:	6a 00                	push   0x0
c001d2d2:	e8 b6 f1 ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001d2d7:	59                   	pop    ecx
c001d2d8:	5a                   	pop    edx
c001d2d9:	0f b6 c0             	movzx  eax,al
c001d2dc:	50                   	push   eax
c001d2dd:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d2e2:	99                   	cdq    
c001d2e3:	f7 fb                	idiv   ebx
c001d2e5:	80 c2 30             	add    dl,0x30
c001d2e8:	0f b6 d2             	movzx  edx,dl
c001d2eb:	52                   	push   edx
c001d2ec:	e8 8b f1 ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001d2f1:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d2f7:	59                   	pop    ecx
c001d2f8:	58                   	pop    eax
c001d2f9:	6a 0f                	push   0xf
c001d2fb:	6a 00                	push   0x0
c001d2fd:	e8 8b f1 ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001d302:	5a                   	pop    edx
c001d303:	59                   	pop    ecx
c001d304:	0f b6 c0             	movzx  eax,al
c001d307:	50                   	push   eax
c001d308:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d30d:	99                   	cdq    
c001d30e:	f7 fd                	idiv   ebp
c001d310:	99                   	cdq    
c001d311:	f7 fb                	idiv   ebx
c001d313:	80 c2 30             	add    dl,0x30
c001d316:	0f b6 d2             	movzx  edx,dl
c001d319:	52                   	push   edx
c001d31a:	e8 5d f1 ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001d31f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d325:	5d                   	pop    ebp
c001d326:	58                   	pop    eax
c001d327:	6a 0f                	push   0xf
c001d329:	6a 00                	push   0x0
c001d32b:	e8 5d f1 ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001d330:	5a                   	pop    edx
c001d331:	59                   	pop    ecx
c001d332:	0f b6 c0             	movzx  eax,al
c001d335:	50                   	push   eax
c001d336:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d33b:	99                   	cdq    
c001d33c:	f7 ff                	idiv   edi
c001d33e:	99                   	cdq    
c001d33f:	f7 fb                	idiv   ebx
c001d341:	80 c2 30             	add    dl,0x30
c001d344:	0f b6 d2             	movzx  edx,dl
c001d347:	52                   	push   edx
c001d348:	e8 2f f1 ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001d34d:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d353:	5f                   	pop    edi
c001d354:	5d                   	pop    ebp
c001d355:	6a 0f                	push   0xf
c001d357:	6a 00                	push   0x0
c001d359:	e8 2f f1 ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001d35e:	5a                   	pop    edx
c001d35f:	59                   	pop    ecx
c001d360:	b9 64 00 00 00       	mov    ecx,0x64
c001d365:	0f b6 c0             	movzx  eax,al
c001d368:	50                   	push   eax
c001d369:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d36e:	99                   	cdq    
c001d36f:	f7 f9                	idiv   ecx
c001d371:	99                   	cdq    
c001d372:	f7 fb                	idiv   ebx
c001d374:	88 d0                	mov    al,dl
c001d376:	04 30                	add    al,0x30
c001d378:	0f b6 c0             	movzx  eax,al
c001d37b:	50                   	push   eax
c001d37c:	e8 fb f0 ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001d381:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d387:	5f                   	pop    edi
c001d388:	5d                   	pop    ebp
c001d389:	6a 0f                	push   0xf
c001d38b:	6a 00                	push   0x0
c001d38d:	e8 fb f0 ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001d392:	5a                   	pop    edx
c001d393:	59                   	pop    ecx
c001d394:	0f b6 c0             	movzx  eax,al
c001d397:	50                   	push   eax
c001d398:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d39d:	99                   	cdq    
c001d39e:	f7 fb                	idiv   ebx
c001d3a0:	99                   	cdq    
c001d3a1:	f7 fb                	idiv   ebx
c001d3a3:	88 d0                	mov    al,dl
c001d3a5:	04 30                	add    al,0x30
c001d3a7:	0f b6 c0             	movzx  eax,al
c001d3aa:	50                   	push   eax
c001d3ab:	e8 cc f0 ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001d3b0:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d3b6:	5f                   	pop    edi
c001d3b7:	5d                   	pop    ebp
c001d3b8:	6a 0f                	push   0xf
c001d3ba:	6a 00                	push   0x0
c001d3bc:	e8 cc f0 ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001d3c1:	5a                   	pop    edx
c001d3c2:	59                   	pop    ecx
c001d3c3:	0f b6 c0             	movzx  eax,al
c001d3c6:	50                   	push   eax
c001d3c7:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d3cc:	99                   	cdq    
c001d3cd:	f7 fb                	idiv   ebx
c001d3cf:	80 c2 30             	add    dl,0x30
c001d3d2:	0f b6 d2             	movzx  edx,dl
c001d3d5:	52                   	push   edx
c001d3d6:	e8 a1 f0 ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001d3db:	83 c4 10             	add    esp,0x10
c001d3de:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d3e4:	eb 05                	jmp    c001d3eb <SATA::read(unsigned long long, int, void*)+0x247>
c001d3e6:	be 01 00 00 00       	mov    esi,0x1
c001d3eb:	83 c4 0c             	add    esp,0xc
c001d3ee:	89 f0                	mov    eax,esi
c001d3f0:	5b                   	pop    ebx
c001d3f1:	5e                   	pop    esi
c001d3f2:	5f                   	pop    edi
c001d3f3:	5d                   	pop    ebp
c001d3f4:	c3                   	ret    
c001d3f5:	90                   	nop

c001d3f6 <SATA::write(unsigned long long, int, void*)>:
c001d3f6:	55                   	push   ebp
c001d3f7:	57                   	push   edi
c001d3f8:	56                   	push   esi
c001d3f9:	53                   	push   ebx
c001d3fa:	83 ec 0c             	sub    esp,0xc
c001d3fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d401:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d405:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d409:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d40d:	8d 70 ff             	lea    esi,[eax-0x1]
c001d410:	b8 04 00 00 00       	mov    eax,0x4
c001d415:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001d41b:	0f 87 30 02 00 00    	ja     c001d651 <SATA::write(unsigned long long, int, void*)+0x25b>
c001d421:	85 db                	test   ebx,ebx
c001d423:	b8 06 00 00 00       	mov    eax,0x6
c001d428:	0f 84 23 02 00 00    	je     c001d651 <SATA::write(unsigned long long, int, void*)+0x25b>
c001d42e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d432:	c1 e6 09             	shl    esi,0x9
c001d435:	01 de                	add    esi,ebx
c001d437:	50                   	push   eax
c001d438:	89 d7                	mov    edi,edx
c001d43a:	50                   	push   eax
c001d43b:	83 c7 01             	add    edi,0x1
c001d43e:	6a 01                	push   0x1
c001d440:	89 cd                	mov    ebp,ecx
c001d442:	53                   	push   ebx
c001d443:	83 d5 00             	adc    ebp,0x0
c001d446:	6a 01                	push   0x1
c001d448:	81 c3 00 02 00 00    	add    ebx,0x200
c001d44e:	51                   	push   ecx
c001d44f:	52                   	push   edx
c001d450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d454:	e8 05 fb ff ff       	call   c001cf5e <SATA::access(unsigned long long, int, void*, bool)>
c001d459:	83 c4 20             	add    esp,0x20
c001d45c:	39 f3                	cmp    ebx,esi
c001d45e:	89 fa                	mov    edx,edi
c001d460:	89 e9                	mov    ecx,ebp
c001d462:	75 d3                	jne    c001d437 <SATA::write(unsigned long long, int, void*)+0x41>
c001d464:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d468:	bd 10 27 00 00       	mov    ebp,0x2710
c001d46d:	bb 0a 00 00 00       	mov    ebx,0xa
c001d472:	01 05 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,eax
c001d478:	50                   	push   eax
c001d479:	50                   	push   eax
c001d47a:	6a 0f                	push   0xf
c001d47c:	6a 00                	push   0x0
c001d47e:	e8 0a f0 ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001d483:	5a                   	pop    edx
c001d484:	59                   	pop    ecx
c001d485:	0f b6 c0             	movzx  eax,al
c001d488:	50                   	push   eax
c001d489:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d48e:	99                   	cdq    
c001d48f:	f7 fd                	idiv   ebp
c001d491:	99                   	cdq    
c001d492:	f7 fb                	idiv   ebx
c001d494:	88 d0                	mov    al,dl
c001d496:	04 30                	add    al,0x30
c001d498:	0f b6 c0             	movzx  eax,al
c001d49b:	50                   	push   eax
c001d49c:	e8 db ef ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001d4a1:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d4a7:	5e                   	pop    esi
c001d4a8:	5f                   	pop    edi
c001d4a9:	bf e8 03 00 00       	mov    edi,0x3e8
c001d4ae:	6a 0f                	push   0xf
c001d4b0:	6a 00                	push   0x0
c001d4b2:	e8 d6 ef ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001d4b7:	5a                   	pop    edx
c001d4b8:	59                   	pop    ecx
c001d4b9:	0f b6 c0             	movzx  eax,al
c001d4bc:	50                   	push   eax
c001d4bd:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d4c2:	99                   	cdq    
c001d4c3:	f7 ff                	idiv   edi
c001d4c5:	99                   	cdq    
c001d4c6:	f7 fb                	idiv   ebx
c001d4c8:	80 c2 30             	add    dl,0x30
c001d4cb:	0f b6 d2             	movzx  edx,dl
c001d4ce:	52                   	push   edx
c001d4cf:	e8 a8 ef ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001d4d4:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d4da:	5e                   	pop    esi
c001d4db:	be 64 00 00 00       	mov    esi,0x64
c001d4e0:	58                   	pop    eax
c001d4e1:	6a 0f                	push   0xf
c001d4e3:	6a 00                	push   0x0
c001d4e5:	e8 a3 ef ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001d4ea:	5a                   	pop    edx
c001d4eb:	59                   	pop    ecx
c001d4ec:	0f b6 c0             	movzx  eax,al
c001d4ef:	50                   	push   eax
c001d4f0:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d4f5:	99                   	cdq    
c001d4f6:	f7 fe                	idiv   esi
c001d4f8:	99                   	cdq    
c001d4f9:	f7 fb                	idiv   ebx
c001d4fb:	80 c2 30             	add    dl,0x30
c001d4fe:	0f b6 d2             	movzx  edx,dl
c001d501:	52                   	push   edx
c001d502:	e8 75 ef ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001d507:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d50d:	58                   	pop    eax
c001d50e:	5a                   	pop    edx
c001d50f:	6a 0f                	push   0xf
c001d511:	6a 00                	push   0x0
c001d513:	e8 75 ef ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001d518:	59                   	pop    ecx
c001d519:	5a                   	pop    edx
c001d51a:	0f b6 c0             	movzx  eax,al
c001d51d:	50                   	push   eax
c001d51e:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d523:	99                   	cdq    
c001d524:	f7 fb                	idiv   ebx
c001d526:	99                   	cdq    
c001d527:	f7 fb                	idiv   ebx
c001d529:	80 c2 30             	add    dl,0x30
c001d52c:	0f b6 d2             	movzx  edx,dl
c001d52f:	52                   	push   edx
c001d530:	e8 47 ef ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001d535:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d53b:	59                   	pop    ecx
c001d53c:	58                   	pop    eax
c001d53d:	6a 0f                	push   0xf
c001d53f:	6a 00                	push   0x0
c001d541:	e8 47 ef ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001d546:	5a                   	pop    edx
c001d547:	59                   	pop    ecx
c001d548:	0f b6 c0             	movzx  eax,al
c001d54b:	50                   	push   eax
c001d54c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d551:	99                   	cdq    
c001d552:	f7 fb                	idiv   ebx
c001d554:	80 c2 30             	add    dl,0x30
c001d557:	0f b6 d2             	movzx  edx,dl
c001d55a:	52                   	push   edx
c001d55b:	e8 1c ef ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001d560:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d566:	58                   	pop    eax
c001d567:	5a                   	pop    edx
c001d568:	6a 0f                	push   0xf
c001d56a:	6a 00                	push   0x0
c001d56c:	e8 1c ef ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001d571:	59                   	pop    ecx
c001d572:	5a                   	pop    edx
c001d573:	0f b6 c0             	movzx  eax,al
c001d576:	50                   	push   eax
c001d577:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d57c:	99                   	cdq    
c001d57d:	f7 fd                	idiv   ebp
c001d57f:	99                   	cdq    
c001d580:	f7 fb                	idiv   ebx
c001d582:	80 c2 30             	add    dl,0x30
c001d585:	0f b6 d2             	movzx  edx,dl
c001d588:	52                   	push   edx
c001d589:	e8 ee ee ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001d58e:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d594:	59                   	pop    ecx
c001d595:	5d                   	pop    ebp
c001d596:	6a 0f                	push   0xf
c001d598:	6a 00                	push   0x0
c001d59a:	e8 ee ee ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001d59f:	5a                   	pop    edx
c001d5a0:	59                   	pop    ecx
c001d5a1:	0f b6 c0             	movzx  eax,al
c001d5a4:	50                   	push   eax
c001d5a5:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d5aa:	99                   	cdq    
c001d5ab:	f7 ff                	idiv   edi
c001d5ad:	99                   	cdq    
c001d5ae:	f7 fb                	idiv   ebx
c001d5b0:	88 d0                	mov    al,dl
c001d5b2:	04 30                	add    al,0x30
c001d5b4:	0f b6 c0             	movzx  eax,al
c001d5b7:	50                   	push   eax
c001d5b8:	e8 bf ee ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001d5bd:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d5c3:	5f                   	pop    edi
c001d5c4:	5d                   	pop    ebp
c001d5c5:	6a 0f                	push   0xf
c001d5c7:	6a 00                	push   0x0
c001d5c9:	e8 bf ee ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001d5ce:	5a                   	pop    edx
c001d5cf:	59                   	pop    ecx
c001d5d0:	0f b6 c0             	movzx  eax,al
c001d5d3:	50                   	push   eax
c001d5d4:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d5d9:	99                   	cdq    
c001d5da:	f7 fe                	idiv   esi
c001d5dc:	99                   	cdq    
c001d5dd:	f7 fb                	idiv   ebx
c001d5df:	88 d0                	mov    al,dl
c001d5e1:	04 30                	add    al,0x30
c001d5e3:	0f b6 c0             	movzx  eax,al
c001d5e6:	50                   	push   eax
c001d5e7:	e8 90 ee ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001d5ec:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d5f2:	5e                   	pop    esi
c001d5f3:	5f                   	pop    edi
c001d5f4:	6a 0f                	push   0xf
c001d5f6:	6a 00                	push   0x0
c001d5f8:	e8 90 ee ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001d5fd:	5d                   	pop    ebp
c001d5fe:	5a                   	pop    edx
c001d5ff:	0f b6 c0             	movzx  eax,al
c001d602:	50                   	push   eax
c001d603:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d608:	99                   	cdq    
c001d609:	f7 fb                	idiv   ebx
c001d60b:	99                   	cdq    
c001d60c:	f7 fb                	idiv   ebx
c001d60e:	88 d0                	mov    al,dl
c001d610:	04 30                	add    al,0x30
c001d612:	0f b6 c0             	movzx  eax,al
c001d615:	50                   	push   eax
c001d616:	e8 61 ee ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001d61b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d621:	59                   	pop    ecx
c001d622:	5e                   	pop    esi
c001d623:	6a 0f                	push   0xf
c001d625:	6a 00                	push   0x0
c001d627:	e8 61 ee ff ff       	call   c001c48d <combineColours(unsigned char, unsigned char)>
c001d62c:	5f                   	pop    edi
c001d62d:	5d                   	pop    ebp
c001d62e:	0f b6 c0             	movzx  eax,al
c001d631:	50                   	push   eax
c001d632:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d637:	99                   	cdq    
c001d638:	f7 fb                	idiv   ebx
c001d63a:	80 c2 30             	add    dl,0x30
c001d63d:	0f b6 d2             	movzx  edx,dl
c001d640:	52                   	push   edx
c001d641:	e8 36 ee ff ff       	call   c001c47c <combineCharAndColour(char, unsigned char)>
c001d646:	83 c4 10             	add    esp,0x10
c001d649:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d64f:	31 c0                	xor    eax,eax
c001d651:	83 c4 0c             	add    esp,0xc
c001d654:	5b                   	pop    ebx
c001d655:	5e                   	pop    esi
c001d656:	5f                   	pop    edi
c001d657:	5d                   	pop    ebp
c001d658:	c3                   	ret    
c001d659:	90                   	nop

c001d65a <SATAPI::write(unsigned long long, int, void*)>:
c001d65a:	b8 03 00 00 00       	mov    eax,0x3
c001d65f:	c3                   	ret    

c001d660 <SATAPI::close(int, int, void*)>:
c001d660:	83 ec 0c             	sub    esp,0xc
c001d663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d667:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d66d:	85 c0                	test   eax,eax
c001d66f:	74 0c                	je     c001d67d <SATAPI::close(int, int, void*)+0x1d>
c001d671:	8b 10                	mov    edx,DWORD PTR [eax]
c001d673:	83 ec 0c             	sub    esp,0xc
c001d676:	50                   	push   eax
c001d677:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d67a:	83 c4 10             	add    esp,0x10
c001d67d:	31 c0                	xor    eax,eax
c001d67f:	83 c4 0c             	add    esp,0xc
c001d682:	c3                   	ret    
c001d683:	90                   	nop

c001d684 <SATAPI::SATAPI()>:
c001d684:	83 ec 1c             	sub    esp,0x1c
c001d687:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d68b:	c7 44 24 08 00 08 00 00 	mov    DWORD PTR [esp+0x8],0x800
c001d693:	c7 44 24 04 94 21 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022194
c001d69b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d69e:	e8 0d f2 fe ff       	call   c000c8b0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d6a3:	ba 88 22 02 c0       	mov    edx,0xc0022288
c001d6a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6ac:	89 10                	mov    DWORD PTR [eax],edx
c001d6ae:	90                   	nop
c001d6af:	83 c4 1c             	add    esp,0x1c
c001d6b2:	c3                   	ret    
c001d6b3:	90                   	nop

c001d6b4 <SATAPI::diskRemoved()>:
c001d6b4:	c3                   	ret    
c001d6b5:	90                   	nop

c001d6b6 <SATAPI::diskInserted()>:
c001d6b6:	83 ec 18             	sub    esp,0x18
c001d6b9:	68 a0 21 02 c0       	push   0xc00221a0
c001d6be:	e8 b3 d3 fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001d6c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6c7:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d6ce:	83 c4 1c             	add    esp,0x1c
c001d6d1:	c3                   	ret    

c001d6d2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d6d2:	55                   	push   ebp
c001d6d3:	57                   	push   edi
c001d6d4:	56                   	push   esi
c001d6d5:	53                   	push   ebx
c001d6d6:	83 ec 34             	sub    esp,0x34
c001d6d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d6dd:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d6e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d6e5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d6e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d6ed:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d6f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d6f9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d6fd:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d703:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d707:	83 c0 02             	add    eax,0x2
c001d70a:	c1 e0 07             	shl    eax,0x7
c001d70d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d711:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d715:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d719:	c1 e0 07             	shl    eax,0x7
c001d71c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d720:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d724:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d72e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d732:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d738:	e8 e7 e4 ff ff       	call   c001bc24 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d73d:	83 c4 10             	add    esp,0x10
c001d740:	89 c2                	mov    edx,eax
c001d742:	b8 01 00 00 00       	mov    eax,0x1
c001d747:	83 fa ff             	cmp    edx,0xffffffff
c001d74a:	0f 84 55 02 00 00    	je     c001d9a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d750:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d754:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d758:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d75e:	8b 00                	mov    eax,DWORD PTR [eax]
c001d760:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d766:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d76c:	89 d1                	mov    ecx,edx
c001d76e:	c1 e1 05             	shl    ecx,0x5
c001d771:	01 c8                	add    eax,ecx
c001d773:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d775:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d77b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d781:	89 08                	mov    DWORD PTR [eax],ecx
c001d783:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d789:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d78f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d795:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d798:	50                   	push   eax
c001d799:	68 90 00 00 00       	push   0x90
c001d79e:	6a 00                	push   0x0
c001d7a0:	53                   	push   ebx
c001d7a1:	e8 da 2d fe ff       	call   c0000580 <memset>
c001d7a6:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d7a9:	b9 0c 00 00 00       	mov    ecx,0xc
c001d7ae:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d7b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d7b4:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d7ba:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d7be:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d7c2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d7c8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d7cc:	48                   	dec    eax
c001d7cd:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d7d2:	89 c1                	mov    ecx,eax
c001d7d4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d7da:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d7df:	09 c8                	or     eax,ecx
c001d7e1:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d7e7:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d7ea:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001d7f1:	25 00 7f 00 00       	and    eax,0x7f00
c001d7f6:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d7fb:	66 89 03             	mov    WORD PTR [ebx],ax
c001d7fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d802:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001d806:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d80a:	c1 e8 10             	shr    eax,0x10
c001d80d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d810:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d814:	c1 e8 18             	shr    eax,0x18
c001d817:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001d81a:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d81e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d821:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d825:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d828:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d82c:	83 c4 10             	add    esp,0x10
c001d82f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d833:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d837:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d83b:	31 c0                	xor    eax,eax
c001d83d:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001d843:	f6 c1 88             	test   cl,0x88
c001d846:	74 0a                	je     c001d852 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001d848:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d84d:	74 0a                	je     c001d859 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001d84f:	40                   	inc    eax
c001d850:	eb eb                	jmp    c001d83d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001d852:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d857:	75 43                	jne    c001d89c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001d859:	83 ec 0c             	sub    esp,0xc
c001d85c:	68 b8 21 02 c0       	push   0xc00221b8
c001d861:	e8 10 d2 fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001d866:	58                   	pop    eax
c001d867:	5a                   	pop    edx
c001d868:	68 cd 21 02 c0       	push   0xc00221cd
c001d86d:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d873:	e8 4a b2 fe ff       	call   c0008ac2 <VgaText::puts(char const*)>
c001d878:	59                   	pop    ecx
c001d879:	5b                   	pop    ebx
c001d87a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d87e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d884:	e8 33 e4 ff ff       	call   c001bcbc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d889:	5e                   	pop    esi
c001d88a:	5f                   	pop    edi
c001d88b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d88f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d895:	e8 02 e4 ff ff       	call   c001bc9c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d89a:	eb 46                	jmp    c001d8e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001d89c:	be 01 00 00 00       	mov    esi,0x1
c001d8a1:	88 d1                	mov    cl,dl
c001d8a3:	d3 e6                	shl    esi,cl
c001d8a5:	bf a8 e4 ff ff       	mov    edi,0xffffe4a8
c001d8aa:	89 b3 38 01 00 00    	mov    DWORD PTR [ebx+0x138],esi
c001d8b0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d8b4:	c1 e3 07             	shl    ebx,0x7
c001d8b7:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d8bb:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001d8c1:	85 c6                	test   esi,eax
c001d8c3:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001d8c9:	0f 84 a3 00 00 00    	je     c001d972 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a0>
c001d8cf:	0f ba e0 1e          	bt     eax,0x1e
c001d8d3:	73 1a                	jae    c001d8ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21d>
c001d8d5:	83 ec 0c             	sub    esp,0xc
c001d8d8:	68 df 21 02 c0       	push   0xc00221df
c001d8dd:	e8 94 d1 fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001d8e2:	83 c4 10             	add    esp,0x10
c001d8e5:	b8 01 00 00 00       	mov    eax,0x1
c001d8ea:	e9 b6 00 00 00       	jmp    c001d9a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d8ef:	8d 87 70 17 00 00    	lea    eax,[edi+0x1770]
c001d8f5:	83 f8 0d             	cmp    eax,0xd
c001d8f8:	77 0a                	ja     c001d904 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x232>
c001d8fa:	83 ec 0c             	sub    esp,0xc
c001d8fd:	68 c8 00 00 00       	push   0xc8
c001d902:	eb 28                	jmp    c001d92c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001d904:	8d 87 88 13 00 00    	lea    eax,[edi+0x1388]
c001d90a:	83 f8 0d             	cmp    eax,0xd
c001d90d:	77 0a                	ja     c001d919 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x247>
c001d90f:	83 ec 0c             	sub    esp,0xc
c001d912:	68 58 02 00 00       	push   0x258
c001d917:	eb 13                	jmp    c001d92c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001d919:	8d 87 a0 0f 00 00    	lea    eax,[edi+0xfa0]
c001d91f:	83 f8 06             	cmp    eax,0x6
c001d922:	77 10                	ja     c001d934 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x262>
c001d924:	83 ec 0c             	sub    esp,0xc
c001d927:	68 dc 05 00 00       	push   0x5dc
c001d92c:	e8 0b 81 ff ff       	call   c0015a3c <milliTenthSleep(unsigned int)>
c001d931:	83 c4 10             	add    esp,0x10
c001d934:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d938:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d93b:	75 06                	jne    c001d943 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x271>
c001d93d:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d941:	74 15                	je     c001d958 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001d943:	83 ff 06             	cmp    edi,0x6
c001d946:	77 10                	ja     c001d958 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001d948:	83 ec 0c             	sub    esp,0xc
c001d94b:	68 c4 09 00 00       	push   0x9c4
c001d950:	e8 e7 80 ff ff       	call   c0015a3c <milliTenthSleep(unsigned int)>
c001d955:	83 c4 10             	add    esp,0x10
c001d958:	47                   	inc    edi
c001d959:	81 ff b9 0b 00 00    	cmp    edi,0xbb9
c001d95f:	0f 85 56 ff ff ff    	jne    c001d8bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e9>
c001d965:	83 ec 0c             	sub    esp,0xc
c001d968:	68 f2 21 02 c0       	push   0xc00221f2
c001d96d:	e9 6b ff ff ff       	jmp    c001d8dd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20b>
c001d972:	0f ba e0 1e          	bt     eax,0x1e
c001d976:	73 0d                	jae    c001d985 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001d978:	83 ec 0c             	sub    esp,0xc
c001d97b:	68 06 22 02 c0       	push   0xc0022206
c001d980:	e9 58 ff ff ff       	jmp    c001d8dd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20b>
c001d985:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d98a:	74 17                	je     c001d9a3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001d98c:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d991:	74 10                	je     c001d9a3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001d993:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d999:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d99d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d9a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d9a3:	31 c0                	xor    eax,eax
c001d9a5:	83 c4 2c             	add    esp,0x2c
c001d9a8:	5b                   	pop    ebx
c001d9a9:	5e                   	pop    esi
c001d9aa:	5f                   	pop    edi
c001d9ab:	5d                   	pop    ebp
c001d9ac:	c3                   	ret    
c001d9ad:	90                   	nop

c001d9ae <SATAPI::eject()>:
c001d9ae:	57                   	push   edi
c001d9af:	b9 03 00 00 00       	mov    ecx,0x3
c001d9b4:	83 ec 18             	sub    esp,0x18
c001d9b7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d9bb:	fc                   	cld    
c001d9bc:	31 c0                	xor    eax,eax
c001d9be:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d9c0:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d9c5:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d9ca:	50                   	push   eax
c001d9cb:	6a 00                	push   0x0
c001d9cd:	6a 00                	push   0x0
c001d9cf:	6a 00                	push   0x0
c001d9d1:	6a 00                	push   0x0
c001d9d3:	6a 02                	push   0x2
c001d9d5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d9d9:	50                   	push   eax
c001d9da:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d9de:	e8 ef fc ff ff       	call   c001d6d2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d9e3:	83 c4 38             	add    esp,0x38
c001d9e6:	31 c0                	xor    eax,eax
c001d9e8:	5f                   	pop    edi
c001d9e9:	c3                   	ret    

c001d9ea <SATAPI::detectMedia()>:
c001d9ea:	53                   	push   ebx
c001d9eb:	83 ec 14             	sub    esp,0x14
c001d9ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d9f2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d9f8:	e8 73 07 ff ff       	call   c000e170 <VCache::writeWriteBuffer()>
c001d9fd:	59                   	pop    ecx
c001d9fe:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001da04:	e8 57 07 ff ff       	call   c000e160 <VCache::invalidateReadBuffer()>
c001da09:	c7 04 24 1b 22 02 c0 	mov    DWORD PTR [esp],0xc002221b
c001da10:	e8 61 d0 fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001da15:	83 c4 10             	add    esp,0x10
c001da18:	31 c0                	xor    eax,eax
c001da1a:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001da21:	85 d2                	test   edx,edx
c001da23:	74 0f                	je     c001da34 <SATAPI::detectMedia()+0x4a>
c001da25:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001da2b:	75 07                	jne    c001da34 <SATAPI::detectMedia()+0x4a>
c001da2d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001da34:	40                   	inc    eax
c001da35:	83 f8 1a             	cmp    eax,0x1a
c001da38:	75 e0                	jne    c001da1a <SATAPI::detectMedia()+0x30>
c001da3a:	83 c4 08             	add    esp,0x8
c001da3d:	5b                   	pop    ebx
c001da3e:	c3                   	ret    
c001da3f:	90                   	nop

c001da40 <SATAPI::open(int, int, void*)>:
c001da40:	56                   	push   esi
c001da41:	53                   	push   ebx
c001da42:	51                   	push   ecx
c001da43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da4b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001da55:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001da5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001da5f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001da69:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001da73:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001da7a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001da80:	e8 87 a3 fe ff       	call   c0007e0c <Phys::allocatePage()>
c001da85:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001da8b:	89 c6                	mov    esi,eax
c001da8d:	e8 7a a3 fe ff       	call   c0007e0c <Phys::allocatePage()>
c001da92:	81 c6 00 10 00 00    	add    esi,0x1000
c001da98:	39 c6                	cmp    esi,eax
c001da9a:	74 10                	je     c001daac <SATAPI::open(int, int, void*)+0x6c>
c001da9c:	83 ec 0c             	sub    esp,0xc
c001da9f:	68 30 22 02 c0       	push   0xc0022230
c001daa4:	e8 8c 33 ff ff       	call   c0010e35 <KePanic(char const*)>
c001daa9:	83 c4 10             	add    esp,0x10
c001daac:	83 ec 0c             	sub    esp,0xc
c001daaf:	6a 02                	push   0x2
c001dab1:	e8 6a bb fe ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c001dab6:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001dabc:	6a 03                	push   0x3
c001dabe:	50                   	push   eax
c001dabf:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001dac5:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001dacb:	e8 72 c2 fe ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c001dad0:	83 c4 14             	add    esp,0x14
c001dad3:	68 78 01 00 00       	push   0x178
c001dad8:	e8 1f a0 fe ff       	call   c0007afc <malloc>
c001dadd:	83 c4 0c             	add    esp,0xc
c001dae0:	6a 00                	push   0x0
c001dae2:	68 ff ff ff 7f       	push   0x7fffffff
c001dae7:	6a 00                	push   0x0
c001dae9:	6a 00                	push   0x0
c001daeb:	53                   	push   ebx
c001daec:	68 46 22 02 c0       	push   0xc0022246
c001daf1:	89 c6                	mov    esi,eax
c001daf3:	50                   	push   eax
c001daf4:	e8 df fa fe ff       	call   c000d5d8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001daf9:	83 c4 14             	add    esp,0x14
c001dafc:	56                   	push   esi
c001dafd:	e8 98 fb fe ff       	call   c000d69a <LogicalDisk::assignDriveLetter()>
c001db02:	5a                   	pop    edx
c001db03:	59                   	pop    ecx
c001db04:	0f be c0             	movsx  eax,al
c001db07:	50                   	push   eax
c001db08:	68 98 20 02 c0       	push   0xc0022098
c001db0d:	e8 64 cf fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001db12:	58                   	pop    eax
c001db13:	5a                   	pop    edx
c001db14:	56                   	push   esi
c001db15:	53                   	push   ebx
c001db16:	e8 cf e9 fe ff       	call   c000c4ea <Device::addChild(Device*)>
c001db1b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001db21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db24:	e8 ef ed fe ff       	call   c000c918 <PhysicalDisk::startCache()>
c001db29:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001db30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db33:	e8 b2 fe ff ff       	call   c001d9ea <SATAPI::detectMedia()>
c001db38:	83 c4 14             	add    esp,0x14
c001db3b:	31 c0                	xor    eax,eax
c001db3d:	5b                   	pop    ebx
c001db3e:	5e                   	pop    esi
c001db3f:	c3                   	ret    

c001db40 <SATAPI::read(unsigned long long, int, void*)>:
c001db40:	55                   	push   ebp
c001db41:	57                   	push   edi
c001db42:	56                   	push   esi
c001db43:	53                   	push   ebx
c001db44:	83 ec 3c             	sub    esp,0x3c
c001db47:	8b 5c 24 5c          	mov    ebx,DWORD PTR [esp+0x5c]
c001db4b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001db4f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001db53:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001db57:	83 fb 04             	cmp    ebx,0x4
c001db5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001db5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001db62:	7e 10                	jle    c001db74 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001db64:	83 ec 0c             	sub    esp,0xc
c001db67:	68 54 22 02 c0       	push   0xc0022254
c001db6c:	e8 c4 32 ff ff       	call   c0010e35 <KePanic(char const*)>
c001db71:	83 c4 10             	add    esp,0x10
c001db74:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001db7a:	8b 96 70 01 00 00    	mov    edx,DWORD PTR [esi+0x170]
c001db80:	51                   	push   ecx
c001db81:	50                   	push   eax
c001db82:	83 c0 02             	add    eax,0x2
c001db85:	c1 e0 07             	shl    eax,0x7
c001db88:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001db8e:	50                   	push   eax
c001db8f:	52                   	push   edx
c001db90:	e8 51 e1 ff ff       	call   c001bce6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001db95:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001db99:	b9 03 00 00 00       	mov    ecx,0x3
c001db9e:	fc                   	cld    
c001db9f:	31 c0                	xor    eax,eax
c001dba1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dba3:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001dba8:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001dbad:	83 c4 0c             	add    esp,0xc
c001dbb0:	6a 00                	push   0x0
c001dbb2:	6a 00                	push   0x0
c001dbb4:	6a 00                	push   0x0
c001dbb6:	6a 00                	push   0x0
c001dbb8:	6a 02                	push   0x2
c001dbba:	8d 44 24 30          	lea    eax,[esp+0x30]
c001dbbe:	50                   	push   eax
c001dbbf:	56                   	push   esi
c001dbc0:	e8 0d fb ff ff       	call   c001d6d2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001dbc5:	83 c4 20             	add    esp,0x20
c001dbc8:	85 c0                	test   eax,eax
c001dbca:	89 c5                	mov    ebp,eax
c001dbcc:	75 44                	jne    c001dc12 <SATAPI::read(unsigned long long, int, void*)+0xd2>
c001dbce:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001dbd2:	b9 03 00 00 00       	mov    ecx,0x3
c001dbd7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dbd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dbdd:	88 5c 24 2d          	mov    BYTE PTR [esp+0x2d],bl
c001dbe1:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001dbe6:	0f c8                	bswap  eax
c001dbe8:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001dbec:	50                   	push   eax
c001dbed:	53                   	push   ebx
c001dbee:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001dbf2:	c1 e3 0b             	shl    ebx,0xb
c001dbf5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dbf9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dbfd:	53                   	push   ebx
c001dbfe:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001dc02:	50                   	push   eax
c001dc03:	56                   	push   esi
c001dc04:	e8 c9 fa ff ff       	call   c001d6d2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001dc09:	83 c4 20             	add    esp,0x20
c001dc0c:	85 c0                	test   eax,eax
c001dc0e:	89 c5                	mov    ebp,eax
c001dc10:	74 0c                	je     c001dc1e <SATAPI::read(unsigned long long, int, void*)+0xde>
c001dc12:	83 ec 0c             	sub    esp,0xc
c001dc15:	56                   	push   esi
c001dc16:	e8 cf fd ff ff       	call   c001d9ea <SATAPI::detectMedia()>
c001dc1b:	83 c4 10             	add    esp,0x10
c001dc1e:	83 c4 3c             	add    esp,0x3c
c001dc21:	89 e8                	mov    eax,ebp
c001dc23:	5b                   	pop    ebx
c001dc24:	5e                   	pop    esi
c001dc25:	5f                   	pop    edi
c001dc26:	5d                   	pop    ebp
c001dc27:	c3                   	ret    

c001dc28 <IOAPIC::close(int, int, void*)>:
c001dc28:	b8 00 00 00 00       	mov    eax,0x0
c001dc2d:	c3                   	ret    

c001dc2e <apicGetBase()>:
c001dc2e:	55                   	push   ebp
c001dc2f:	89 e5                	mov    ebp,esp
c001dc31:	83 ec 28             	sub    esp,0x28
c001dc34:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001dc39:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c001dc40:	24 08                	and    al,0x8
c001dc42:	84 c0                	test   al,al
c001dc44:	75 07                	jne    c001dc4d <apicGetBase()+0x1f>
c001dc46:	b8 00 00 00 00       	mov    eax,0x0
c001dc4b:	eb 23                	jmp    c001dc70 <apicGetBase()+0x42>
c001dc4d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001dc52:	c7 44 24 04 1b 00 00 00 	mov    DWORD PTR [esp+0x4],0x1b
c001dc5a:	89 04 24             	mov    DWORD PTR [esp],eax
c001dc5d:	e8 5e 94 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001dc62:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001dc65:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001dc68:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dc6b:	25 00 00 ff ff       	and    eax,0xffff0000
c001dc70:	c9                   	leave  
c001dc71:	c3                   	ret    

c001dc72 <IOAPIC::IOAPIC()>:
c001dc72:	83 ec 1c             	sub    esp,0x1c
c001dc75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc79:	c7 44 24 04 b8 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc00222b8
c001dc81:	89 04 24             	mov    DWORD PTR [esp],eax
c001dc84:	e8 f9 e9 fe ff       	call   c000c682 <Device::Device(char const*)>
c001dc89:	ba c8 22 02 c0       	mov    edx,0xc00222c8
c001dc8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc92:	89 10                	mov    DWORD PTR [eax],edx
c001dc94:	90                   	nop
c001dc95:	83 c4 1c             	add    esp,0x1c
c001dc98:	c3                   	ret    

c001dc99 <apicOpen()>:
c001dc99:	55                   	push   ebp
c001dc9a:	89 e5                	mov    ebp,esp
c001dc9c:	53                   	push   ebx
c001dc9d:	83 ec 44             	sub    esp,0x44
c001dca0:	0f b6 05 a0 8b 02 c0 	movzx  eax,BYTE PTR ds:0xc0028ba0
c001dca7:	34 01                	xor    al,0x1
c001dca9:	84 c0                	test   al,al
c001dcab:	0f 84 a1 00 00 00    	je     c001dd52 <apicOpen()+0xb9>
c001dcb1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001dcb5:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c001dcbc:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001dcbf:	0f 83 86 00 00 00    	jae    c001dd4b <apicOpen()+0xb2>
c001dcc5:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001dccc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001dccf:	89 04 24             	mov    DWORD PTR [esp],eax
c001dcd2:	e8 25 9e fe ff       	call   c0007afc <malloc>
c001dcd7:	89 c3                	mov    ebx,eax
c001dcd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dcdc:	e8 91 ff ff ff       	call   c001dc72 <IOAPIC::IOAPIC()>
c001dce1:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001dce4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001dce8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dceb:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001dcf2:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001dcf7:	40                   	inc    eax
c001dcf8:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001dcfd:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001dd02:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001dd08:	89 c2                	mov    edx,eax
c001dd0a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dd0d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dd11:	89 14 24             	mov    DWORD PTR [esp],edx
c001dd14:	e8 d1 e7 fe ff       	call   c000c4ea <Device::addChild(Device*)>
c001dd19:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dd1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd1e:	83 c0 08             	add    eax,0x8
c001dd21:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd23:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001dd27:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001dd2f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001dd37:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001dd3b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dd3e:	89 14 24             	mov    DWORD PTR [esp],edx
c001dd41:	ff d0                	call   eax
c001dd43:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001dd46:	e9 6a ff ff ff       	jmp    c001dcb5 <apicOpen()+0x1c>
c001dd4b:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001dd52:	e8 d7 fe ff ff       	call   c001dc2e <apicGetBase()>
c001dd57:	05 f0 00 00 00       	add    eax,0xf0
c001dd5c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001dd5f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001dd62:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd64:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001dd67:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001dd6e:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001dd75:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001dd78:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001dd7b:	89 10                	mov    DWORD PTR [eax],edx
c001dd7d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001dd84:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001dd89:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001dd8c:	7d 70                	jge    c001ddfe <apicOpen()+0x165>
c001dd8e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dd91:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001dd98:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001dd9b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dd9e:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001dda5:	c1 e8 08             	shr    eax,0x8
c001dda8:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ddac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ddaf:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001ddb6:	c1 e8 18             	shr    eax,0x18
c001ddb9:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ddbc:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001ddc0:	75 37                	jne    c001ddf9 <apicOpen()+0x160>
c001ddc2:	e8 67 fe ff ff       	call   c001dc2e <apicGetBase()>
c001ddc7:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001ddcb:	75 07                	jne    c001ddd4 <apicOpen()+0x13b>
c001ddcd:	ba 60 03 00 00       	mov    edx,0x360
c001ddd2:	eb 05                	jmp    c001ddd9 <apicOpen()+0x140>
c001ddd4:	ba 50 03 00 00       	mov    edx,0x350
c001ddd9:	01 d0                	add    eax,edx
c001dddb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ddde:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001dde1:	8b 00                	mov    eax,DWORD PTR [eax]
c001dde3:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001dde6:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001dded:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ddf1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ddf4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ddf7:	89 10                	mov    DWORD PTR [eax],edx
c001ddf9:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001ddfc:	eb 86                	jmp    c001dd84 <apicOpen()+0xeb>
c001ddfe:	90                   	nop
c001ddff:	83 c4 44             	add    esp,0x44
c001de02:	5b                   	pop    ebx
c001de03:	5d                   	pop    ebp
c001de04:	c3                   	ret    
c001de05:	90                   	nop

c001de06 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001de06:	55                   	push   ebp
c001de07:	89 e5                	mov    ebp,esp
c001de09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de0c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de12:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001de15:	72 1d                	jb     c001de34 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001de17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de1a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001de20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de23:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001de29:	01 d0                	add    eax,edx
c001de2b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001de2e:	73 04                	jae    c001de34 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001de30:	b0 01                	mov    al,0x1
c001de32:	eb 02                	jmp    c001de36 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001de34:	b0 00                	mov    al,0x0
c001de36:	5d                   	pop    ebp
c001de37:	c3                   	ret    

c001de38 <IOAPIC::read(int)>:
c001de38:	55                   	push   ebp
c001de39:	89 e5                	mov    ebp,esp
c001de3b:	83 ec 10             	sub    esp,0x10
c001de3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de41:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001de47:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001de4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001de4d:	0f b6 d0             	movzx  edx,al
c001de50:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001de53:	89 10                	mov    DWORD PTR [eax],edx
c001de55:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001de58:	83 c0 10             	add    eax,0x10
c001de5b:	8b 00                	mov    eax,DWORD PTR [eax]
c001de5d:	c9                   	leave  
c001de5e:	c3                   	ret    
c001de5f:	90                   	nop

c001de60 <IOAPIC::open(int, int, void*)>:
c001de60:	55                   	push   ebp
c001de61:	89 e5                	mov    ebp,esp
c001de63:	53                   	push   ebx
c001de64:	83 ec 0c             	sub    esp,0xc
c001de67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de6a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001de6d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001de73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de76:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001de7c:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001de83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de86:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001de8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de8f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001de95:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001de9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de9f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001dea5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dea8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001deae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001deb1:	0f b6 80 c5 00 00 00 	movzx  eax,BYTE PTR [eax+0xc5]
c001deb8:	0f b6 d8             	movzx  ebx,al
c001debb:	89 d0                	mov    eax,edx
c001debd:	ba 00 00 00 00       	mov    edx,0x0
c001dec2:	81 e2 ff 00 00 00    	and    edx,0xff
c001dec8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001decb:	83 c3 08             	add    ebx,0x8
c001dece:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ded2:	0f b6 44 d9 08       	movzx  eax,BYTE PTR [ecx+ebx*8+0x8]
c001ded7:	24 00                	and    al,0x0
c001ded9:	08 d0                	or     al,dl
c001dedb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001dedf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dee2:	0f b6 80 c5 00 00 00 	movzx  eax,BYTE PTR [eax+0xc5]
c001dee9:	88 c1                	mov    cl,al
c001deeb:	fe c1                	inc    cl
c001deed:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001def0:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001def6:	0f b6 d0             	movzx  edx,al
c001def9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001defc:	83 c2 08             	add    edx,0x8
c001deff:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001df03:	0f b6 c9             	movzx  ecx,cl
c001df06:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001df0c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001df10:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001df18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df1b:	89 04 24             	mov    DWORD PTR [esp],eax
c001df1e:	e8 15 ff ff ff       	call   c001de38 <IOAPIC::read(int)>
c001df23:	c1 f8 10             	sar    eax,0x10
c001df26:	0f b6 c0             	movzx  eax,al
c001df29:	8d 50 01             	lea    edx,[eax+0x1]
c001df2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df2f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001df35:	b8 00 00 00 00       	mov    eax,0x0
c001df3a:	83 c4 0c             	add    esp,0xc
c001df3d:	5b                   	pop    ebx
c001df3e:	5d                   	pop    ebp
c001df3f:	c3                   	ret    

c001df40 <IOAPIC::write(int, int)>:
c001df40:	55                   	push   ebp
c001df41:	89 e5                	mov    ebp,esp
c001df43:	83 ec 10             	sub    esp,0x10
c001df46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df49:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001df4f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001df52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001df55:	0f b6 d0             	movzx  edx,al
c001df58:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001df5b:	89 10                	mov    DWORD PTR [eax],edx
c001df5d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001df60:	8d 50 10             	lea    edx,[eax+0x10]
c001df63:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001df66:	89 02                	mov    DWORD PTR [edx],eax
c001df68:	90                   	nop
c001df69:	c9                   	leave  
c001df6a:	c3                   	ret    
c001df6b:	90                   	nop

c001df6c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001df6c:	55                   	push   ebp
c001df6d:	89 e5                	mov    ebp,esp
c001df6f:	53                   	push   ebx
c001df70:	83 ec 38             	sub    esp,0x38
c001df73:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001df76:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001df79:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001df7c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001df7f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001df82:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001df85:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001df88:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001df8b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001df8e:	88 d8                	mov    al,bl
c001df90:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001df93:	88 c8                	mov    al,cl
c001df95:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001df98:	88 d0                	mov    al,dl
c001df9a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001df9d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001dfa1:	83 c0 08             	add    eax,0x8
c001dfa4:	01 c0                	add    eax,eax
c001dfa6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001dfa9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001dfad:	83 c0 08             	add    eax,0x8
c001dfb0:	01 c0                	add    eax,eax
c001dfb2:	40                   	inc    eax
c001dfb3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001dfb6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dfb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dfbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dfc0:	89 04 24             	mov    DWORD PTR [esp],eax
c001dfc3:	e8 70 fe ff ff       	call   c001de38 <IOAPIC::read(int)>
c001dfc8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001dfcb:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001dfd2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001dfd5:	c1 e0 18             	shl    eax,0x18
c001dfd8:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001dfdb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001dfde:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dfe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dfe5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dfe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dfec:	89 04 24             	mov    DWORD PTR [esp],eax
c001dfef:	e8 4c ff ff ff       	call   c001df40 <IOAPIC::write(int, int)>
c001dff4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dff7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dffb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dffe:	89 04 24             	mov    DWORD PTR [esp],eax
c001e001:	e8 32 fe ff ff       	call   c001de38 <IOAPIC::read(int)>
c001e006:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e009:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e010:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e017:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e01e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001e022:	74 09                	je     c001e02d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc1>
c001e024:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e02b:	eb 07                	jmp    c001e034 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc8>
c001e02d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e034:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001e038:	74 09                	je     c001e043 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd7>
c001e03a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e041:	eb 07                	jmp    c001e04a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xde>
c001e043:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e04a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e051:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e055:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e058:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e05b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e05e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e062:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e069:	89 04 24             	mov    DWORD PTR [esp],eax
c001e06c:	e8 cf fe ff ff       	call   c001df40 <IOAPIC::write(int, int)>
c001e071:	90                   	nop
c001e072:	83 c4 38             	add    esp,0x38
c001e075:	5b                   	pop    ebx
c001e076:	5d                   	pop    ebp
c001e077:	c3                   	ret    

c001e078 <APICTimer::close(int, int, void*)>:
c001e078:	b8 00 00 00 00       	mov    eax,0x0
c001e07d:	c3                   	ret    
c001e07e:	66 90                	xchg   ax,ax

c001e080 <apicTimerHandler(regs*, void*)>:
c001e080:	83 ec 1c             	sub    esp,0x1c
c001e083:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e087:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e089:	b8 10 27 00 00       	mov    eax,0x2710
c001e08e:	ba 00 00 00 00       	mov    edx,0x0
c001e093:	f7 f1                	div    ecx
c001e095:	89 04 24             	mov    DWORD PTR [esp],eax
c001e098:	e8 fd fd fe ff       	call   c000de9a <timerHandler(unsigned int)>
c001e09d:	90                   	nop
c001e09e:	83 c4 1c             	add    esp,0x1c
c001e0a1:	c3                   	ret    
c001e0a2:	66 90                	xchg   ax,ax

c001e0a4 <APICTimer::open(int, int, void*)>:
c001e0a4:	83 ec 2c             	sub    esp,0x2c
c001e0a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0ad:	83 c0 24             	add    eax,0x24
c001e0b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0b2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e0b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e0ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e0be:	89 14 24             	mov    DWORD PTR [esp],edx
c001e0c1:	ff d0                	call   eax
c001e0c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0c7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e0cb:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e0d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0d5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e0d9:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e0df:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e0e3:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e0e9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001e0ed:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001e0f5:	c7 44 24 08 80 e0 01 c0 	mov    DWORD PTR [esp+0x8],0xc001e080
c001e0fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e101:	89 04 24             	mov    DWORD PTR [esp],eax
c001e104:	e8 8f e3 fe ff       	call   c000c498 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e109:	89 c2                	mov    edx,eax
c001e10b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e10f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e115:	b8 00 00 00 00       	mov    eax,0x0
c001e11a:	83 c4 2c             	add    esp,0x2c
c001e11d:	c3                   	ret    
c001e11e:	66 90                	xchg   ax,ax

c001e120 <APICTimer::write(int)>:
c001e120:	83 ec 1c             	sub    esp,0x1c
c001e123:	c7 04 24 ec 22 02 c0 	mov    DWORD PTR [esp],0xc00222ec
c001e12a:	e8 06 2d ff ff       	call   c0010e35 <KePanic(char const*)>
c001e12f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e133:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e137:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e13d:	90                   	nop
c001e13e:	83 c4 1c             	add    esp,0x1c
c001e141:	c3                   	ret    
c001e142:	66 90                	xchg   ax,ax

c001e144 <APICTimer::APICTimer()>:
c001e144:	83 ec 1c             	sub    esp,0x1c
c001e147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e14b:	c7 44 24 04 fc 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc00222fc
c001e153:	89 04 24             	mov    DWORD PTR [esp],eax
c001e156:	e8 79 fc fe ff       	call   c000ddd4 <Timer::Timer(char const*)>
c001e15b:	ba 10 23 02 c0       	mov    edx,0xc0022310
c001e160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e164:	89 10                	mov    DWORD PTR [eax],edx
c001e166:	90                   	nop
c001e167:	83 c4 1c             	add    esp,0x1c
c001e16a:	c3                   	ret    
c001e16b:	90                   	nop

c001e16c <PIT::write(int)>:
c001e16c:	83 ec 10             	sub    esp,0x10
c001e16f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e173:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e177:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e17d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e181:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001e186:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e18b:	99                   	cdq    
c001e18c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e190:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e194:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e19b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e1a0:	0f b6 44 24 01       	movzx  eax,BYTE PTR [esp+0x1]
c001e1a5:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c001e1aa:	ee                   	out    dx,al
c001e1ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e1af:	0f b6 c0             	movzx  eax,al
c001e1b2:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e1b9:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e1bd:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c001e1c2:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c001e1c7:	ee                   	out    dx,al
c001e1c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e1cc:	c1 f8 08             	sar    eax,0x8
c001e1cf:	0f b6 c0             	movzx  eax,al
c001e1d2:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e1d9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e1dd:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c001e1e2:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c001e1e7:	ee                   	out    dx,al
c001e1e8:	90                   	nop
c001e1e9:	83 c4 10             	add    esp,0x10
c001e1ec:	c3                   	ret    
c001e1ed:	8d 76 00             	lea    esi,[esi+0x0]

c001e1f0 <pitHandler(regs*, void*)>:
c001e1f0:	83 ec 1c             	sub    esp,0x1c
c001e1f3:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001e1f9:	b8 10 27 00 00       	mov    eax,0x2710
c001e1fe:	99                   	cdq    
c001e1ff:	f7 f9                	idiv   ecx
c001e201:	89 04 24             	mov    DWORD PTR [esp],eax
c001e204:	e8 91 fc fe ff       	call   c000de9a <timerHandler(unsigned int)>
c001e209:	90                   	nop
c001e20a:	83 c4 1c             	add    esp,0x1c
c001e20d:	c3                   	ret    
c001e20e:	66 90                	xchg   ax,ax

c001e210 <PIT::open(int, int, void*)>:
c001e210:	83 ec 2c             	sub    esp,0x2c
c001e213:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e217:	8b 00                	mov    eax,DWORD PTR [eax]
c001e219:	83 c0 24             	add    eax,0x24
c001e21c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e21e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e222:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e226:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e22a:	89 14 24             	mov    DWORD PTR [esp],edx
c001e22d:	ff d0                	call   eax
c001e22f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e233:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e23b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001e243:	c7 44 24 08 f0 e1 01 c0 	mov    DWORD PTR [esp+0x8],0xc001e1f0
c001e24b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e253:	89 04 24             	mov    DWORD PTR [esp],eax
c001e256:	e8 3d e2 fe ff       	call   c000c498 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e25b:	89 c2                	mov    edx,eax
c001e25d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e261:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e267:	b8 00 00 00 00       	mov    eax,0x0
c001e26c:	83 c4 2c             	add    esp,0x2c
c001e26f:	c3                   	ret    

c001e270 <PIT::close(int, int, void*)>:
c001e270:	83 ec 1c             	sub    esp,0x1c
c001e273:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e277:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e281:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e285:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001e28d:	c7 44 24 08 f0 e1 01 c0 	mov    DWORD PTR [esp+0x8],0xc001e1f0
c001e295:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e29d:	89 04 24             	mov    DWORD PTR [esp],eax
c001e2a0:	e8 27 e2 fe ff       	call   c000c4cc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e2a5:	b8 00 00 00 00       	mov    eax,0x0
c001e2aa:	83 c4 1c             	add    esp,0x1c
c001e2ad:	c3                   	ret    
c001e2ae:	66 90                	xchg   ax,ax

c001e2b0 <PIT::PIT()>:
c001e2b0:	83 ec 1c             	sub    esp,0x1c
c001e2b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e2b7:	c7 44 24 04 38 23 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022338
c001e2bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001e2c2:	e8 0d fb fe ff       	call   c000ddd4 <Timer::Timer(char const*)>
c001e2c7:	ba 60 23 02 c0       	mov    edx,0xc0022360
c001e2cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e2d0:	89 10                	mov    DWORD PTR [eax],edx
c001e2d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e2d6:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001e2dd:	0f b6 d0             	movzx  edx,al
c001e2e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e2e4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e2eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e2ef:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001e2f6:	0f b6 d0             	movzx  edx,al
c001e2f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e2fd:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e302:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e306:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001e30d:	88 c1                	mov    cl,al
c001e30f:	fe c1                	inc    cl
c001e311:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e315:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001e31b:	0f b6 d0             	movzx  edx,al
c001e31e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e322:	0f b6 4c 90 07       	movzx  ecx,BYTE PTR [eax+edx*4+0x7]
c001e327:	80 e1 3f             	and    cl,0x3f
c001e32a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e32e:	90                   	nop
c001e32f:	83 c4 1c             	add    esp,0x1c
c001e332:	c3                   	ret    
c001e333:	66 90                	xchg   ax,ax
c001e335:	66 90                	xchg   ax,ax
c001e337:	66 90                	xchg   ax,ax
c001e339:	66 90                	xchg   ax,ax
c001e33b:	66 90                	xchg   ax,ax
c001e33d:	66 90                	xchg   ax,ax
c001e33f:	90                   	nop

c001e340 <avxDetect>:
c001e340:	b8 01 00 00 00       	mov    eax,0x1
c001e345:	0f a2                	cpuid  
c001e347:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001e34d:	74 15                	je     c001e364 <avxDetect.noAVX>
c001e34f:	b8 01 00 00 00       	mov    eax,0x1
c001e354:	0f a2                	cpuid  
c001e356:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001e35c:	74 06                	je     c001e364 <avxDetect.noAVX>
c001e35e:	b8 01 00 00 00       	mov    eax,0x1
c001e363:	c3                   	ret    

c001e364 <avxDetect.noAVX>:
c001e364:	b8 00 00 00 00       	mov    eax,0x0
c001e369:	c3                   	ret    

c001e36a <avxSave>:
c001e36a:	53                   	push   ebx
c001e36b:	52                   	push   edx
c001e36c:	31 c0                	xor    eax,eax
c001e36e:	48                   	dec    eax
c001e36f:	89 c2                	mov    edx,eax
c001e371:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e375:	0f ae 23             	xsave  [ebx]
c001e378:	5a                   	pop    edx
c001e379:	5b                   	pop    ebx
c001e37a:	c3                   	ret    

c001e37b <avxLoad>:
c001e37b:	53                   	push   ebx
c001e37c:	52                   	push   edx
c001e37d:	31 c0                	xor    eax,eax
c001e37f:	48                   	dec    eax
c001e380:	89 c2                	mov    edx,eax
c001e382:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e386:	0f ae 2b             	xrstor [ebx]
c001e389:	5a                   	pop    edx
c001e38a:	5b                   	pop    ebx
c001e38b:	c3                   	ret    

c001e38c <avxInit>:
c001e38c:	e8 67 03 00 00       	call   c001e6f8 <sseInit>
c001e391:	50                   	push   eax
c001e392:	51                   	push   ecx
c001e393:	0f 20 e0             	mov    eax,cr4
c001e396:	0d 00 00 04 00       	or     eax,0x40000
c001e39b:	0f 22 e0             	mov    cr4,eax
c001e39e:	31 c9                	xor    ecx,ecx
c001e3a0:	0f 01 d0             	xgetbv 
c001e3a3:	0d 07 00 00 00       	or     eax,0x7
c001e3a8:	0f 01 d1             	xsetbv 
c001e3ab:	59                   	pop    ecx
c001e3ac:	58                   	pop    eax
c001e3ad:	c3                   	ret    

c001e3ae <avxClose>:
c001e3ae:	c3                   	ret    

c001e3af <wouldSheSayYes>:
c001e3af:	c3                   	ret    
c001e3b0:	49                   	dec    ecx
c001e3b1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001e3b5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001e3b9:	75 20                	jne    c001e3db <isr0+0xb>
c001e3bb:	4e                   	dec    esi
c001e3bc:	79 61                	jns    c001e41f <isr7+0x3>
c001e3be:	68 2e 2e 2e 00       	push   0x2e2e2e
c001e3c3:	66 90                	xchg   ax,ax
c001e3c5:	66 90                	xchg   ax,ax
c001e3c7:	66 90                	xchg   ax,ax
c001e3c9:	66 90                	xchg   ax,ax
c001e3cb:	66 90                	xchg   ax,ax
c001e3cd:	66 90                	xchg   ax,ax
c001e3cf:	90                   	nop

c001e3d0 <isr0>:
c001e3d0:	fa                   	cli    
c001e3d1:	68 00 00 00 00       	push   0x0
c001e3d6:	68 00 00 00 00       	push   0x0
c001e3db:	e9 56 01 00 00       	jmp    c001e536 <int_common_stub>

c001e3e0 <isr1>:
c001e3e0:	fa                   	cli    
c001e3e1:	6a 00                	push   0x0
c001e3e3:	6a 01                	push   0x1
c001e3e5:	e9 4c 01 00 00       	jmp    c001e536 <int_common_stub>

c001e3ea <isr2>:
c001e3ea:	fa                   	cli    
c001e3eb:	6a 00                	push   0x0
c001e3ed:	6a 02                	push   0x2
c001e3ef:	e9 42 01 00 00       	jmp    c001e536 <int_common_stub>

c001e3f4 <isr3>:
c001e3f4:	fa                   	cli    
c001e3f5:	6a 00                	push   0x0
c001e3f7:	6a 03                	push   0x3
c001e3f9:	e9 38 01 00 00       	jmp    c001e536 <int_common_stub>

c001e3fe <isr4>:
c001e3fe:	fa                   	cli    
c001e3ff:	6a 00                	push   0x0
c001e401:	6a 04                	push   0x4
c001e403:	e9 2e 01 00 00       	jmp    c001e536 <int_common_stub>

c001e408 <isr5>:
c001e408:	fa                   	cli    
c001e409:	6a 00                	push   0x0
c001e40b:	6a 05                	push   0x5
c001e40d:	e9 24 01 00 00       	jmp    c001e536 <int_common_stub>

c001e412 <isr6>:
c001e412:	fa                   	cli    
c001e413:	6a 00                	push   0x0
c001e415:	6a 06                	push   0x6
c001e417:	e9 1a 01 00 00       	jmp    c001e536 <int_common_stub>

c001e41c <isr7>:
c001e41c:	fa                   	cli    
c001e41d:	6a 00                	push   0x0
c001e41f:	6a 07                	push   0x7
c001e421:	e9 10 01 00 00       	jmp    c001e536 <int_common_stub>

c001e426 <isr8>:
c001e426:	fa                   	cli    
c001e427:	6a 08                	push   0x8
c001e429:	e9 08 01 00 00       	jmp    c001e536 <int_common_stub>

c001e42e <isr9>:
c001e42e:	fa                   	cli    
c001e42f:	6a 00                	push   0x0
c001e431:	6a 09                	push   0x9
c001e433:	e9 fe 00 00 00       	jmp    c001e536 <int_common_stub>

c001e438 <isr10>:
c001e438:	fa                   	cli    
c001e439:	6a 0a                	push   0xa
c001e43b:	e9 f6 00 00 00       	jmp    c001e536 <int_common_stub>

c001e440 <isr11>:
c001e440:	fa                   	cli    
c001e441:	6a 0b                	push   0xb
c001e443:	e9 ee 00 00 00       	jmp    c001e536 <int_common_stub>

c001e448 <isr12>:
c001e448:	fa                   	cli    
c001e449:	6a 0c                	push   0xc
c001e44b:	e9 e6 00 00 00       	jmp    c001e536 <int_common_stub>

c001e450 <isr13>:
c001e450:	fa                   	cli    
c001e451:	6a 0d                	push   0xd
c001e453:	53                   	push   ebx
c001e454:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e458:	81 fb 26 e6 01 c0    	cmp    ebx,0xc001e626
c001e45e:	5b                   	pop    ebx
c001e45f:	0f 84 c3 01 00 00    	je     c001e628 <finishSignal2>
c001e465:	e9 cc 00 00 00       	jmp    c001e536 <int_common_stub>

c001e46a <isr14>:
c001e46a:	fa                   	cli    
c001e46b:	6a 0e                	push   0xe
c001e46d:	e9 c4 00 00 00       	jmp    c001e536 <int_common_stub>

c001e472 <isr15>:
c001e472:	fa                   	cli    
c001e473:	6a 00                	push   0x0
c001e475:	6a 0f                	push   0xf
c001e477:	e9 ba 00 00 00       	jmp    c001e536 <int_common_stub>

c001e47c <isr16>:
c001e47c:	fa                   	cli    
c001e47d:	6a 00                	push   0x0
c001e47f:	6a 10                	push   0x10
c001e481:	e9 b0 00 00 00       	jmp    c001e536 <int_common_stub>

c001e486 <isr17>:
c001e486:	fa                   	cli    
c001e487:	6a 00                	push   0x0
c001e489:	6a 11                	push   0x11
c001e48b:	e9 a6 00 00 00       	jmp    c001e536 <int_common_stub>

c001e490 <isr18>:
c001e490:	fa                   	cli    
c001e491:	6a 00                	push   0x0
c001e493:	6a 12                	push   0x12
c001e495:	e9 9c 00 00 00       	jmp    c001e536 <int_common_stub>

c001e49a <irq3>:
c001e49a:	fa                   	cli    
c001e49b:	6a 00                	push   0x0
c001e49d:	6a 23                	push   0x23
c001e49f:	e9 92 00 00 00       	jmp    c001e536 <int_common_stub>

c001e4a4 <irq4>:
c001e4a4:	fa                   	cli    
c001e4a5:	6a 00                	push   0x0
c001e4a7:	6a 24                	push   0x24
c001e4a9:	e9 88 00 00 00       	jmp    c001e536 <int_common_stub>

c001e4ae <irq5>:
c001e4ae:	fa                   	cli    
c001e4af:	6a 00                	push   0x0
c001e4b1:	6a 25                	push   0x25
c001e4b3:	e9 7e 00 00 00       	jmp    c001e536 <int_common_stub>

c001e4b8 <irq6>:
c001e4b8:	fa                   	cli    
c001e4b9:	6a 00                	push   0x0
c001e4bb:	6a 26                	push   0x26
c001e4bd:	e9 74 00 00 00       	jmp    c001e536 <int_common_stub>

c001e4c2 <irq7>:
c001e4c2:	fa                   	cli    
c001e4c3:	6a 00                	push   0x0
c001e4c5:	6a 27                	push   0x27
c001e4c7:	e9 6a 00 00 00       	jmp    c001e536 <int_common_stub>

c001e4cc <irq8>:
c001e4cc:	fa                   	cli    
c001e4cd:	6a 00                	push   0x0
c001e4cf:	6a 28                	push   0x28
c001e4d1:	e9 60 00 00 00       	jmp    c001e536 <int_common_stub>

c001e4d6 <irq9>:
c001e4d6:	fa                   	cli    
c001e4d7:	6a 00                	push   0x0
c001e4d9:	6a 29                	push   0x29
c001e4db:	e9 56 00 00 00       	jmp    c001e536 <int_common_stub>

c001e4e0 <irq10>:
c001e4e0:	fa                   	cli    
c001e4e1:	6a 00                	push   0x0
c001e4e3:	6a 2a                	push   0x2a
c001e4e5:	e9 4c 00 00 00       	jmp    c001e536 <int_common_stub>

c001e4ea <irq11>:
c001e4ea:	fa                   	cli    
c001e4eb:	6a 00                	push   0x0
c001e4ed:	6a 2b                	push   0x2b
c001e4ef:	e9 42 00 00 00       	jmp    c001e536 <int_common_stub>

c001e4f4 <irq12>:
c001e4f4:	fa                   	cli    
c001e4f5:	6a 00                	push   0x0
c001e4f7:	6a 2c                	push   0x2c
c001e4f9:	e9 38 00 00 00       	jmp    c001e536 <int_common_stub>

c001e4fe <irq13>:
c001e4fe:	fa                   	cli    
c001e4ff:	6a 00                	push   0x0
c001e501:	6a 2d                	push   0x2d
c001e503:	e9 2e 00 00 00       	jmp    c001e536 <int_common_stub>

c001e508 <irq14>:
c001e508:	fa                   	cli    
c001e509:	6a 00                	push   0x0
c001e50b:	6a 2e                	push   0x2e
c001e50d:	e9 24 00 00 00       	jmp    c001e536 <int_common_stub>

c001e512 <irq15>:
c001e512:	fa                   	cli    
c001e513:	6a 00                	push   0x0
c001e515:	6a 2f                	push   0x2f
c001e517:	e9 1a 00 00 00       	jmp    c001e536 <int_common_stub>

c001e51c <irq1>:
c001e51c:	fa                   	cli    
c001e51d:	6a 00                	push   0x0
c001e51f:	6a 21                	push   0x21
c001e521:	eb 13                	jmp    c001e536 <int_common_stub>

c001e523 <irq2>:
c001e523:	fa                   	cli    
c001e524:	6a 00                	push   0x0
c001e526:	6a 22                	push   0x22
c001e528:	eb 0c                	jmp    c001e536 <int_common_stub>

c001e52a <isr96>:
c001e52a:	6a 00                	push   0x0
c001e52c:	6a 60                	push   0x60
c001e52e:	fb                   	sti    
c001e52f:	eb 37                	jmp    c001e568 <syscall_common_stub>

c001e531 <irq0>:
c001e531:	fa                   	cli    
c001e532:	6a 00                	push   0x0
c001e534:	6a 20                	push   0x20

c001e536 <int_common_stub>:
c001e536:	60                   	pusha  
c001e537:	1e                   	push   ds
c001e538:	06                   	push   es
c001e539:	0f a0                	push   fs
c001e53b:	0f a8                	push   gs
c001e53d:	66 b8 10 00          	mov    ax,0x10
c001e541:	66 8e d8             	mov    ds,ax
c001e544:	66 8e c0             	mov    es,ax
c001e547:	66 8e e0             	mov    fs,ax
c001e54a:	66 8e e8             	mov    gs,ax
c001e54d:	54                   	push   esp
c001e54e:	fc                   	cld    
c001e54f:	e8 3c e4 fe ff       	call   c000c990 <int_handler>
c001e554:	81 c4 04 00 00 00    	add    esp,0x4
c001e55a:	0f a9                	pop    gs
c001e55c:	0f a1                	pop    fs
c001e55e:	07                   	pop    es
c001e55f:	1f                   	pop    ds
c001e560:	61                   	popa   
c001e561:	81 c4 08 00 00 00    	add    esp,0x8
c001e567:	cf                   	iret   

c001e568 <syscall_common_stub>:
c001e568:	60                   	pusha  
c001e569:	1e                   	push   ds
c001e56a:	06                   	push   es
c001e56b:	0f a0                	push   fs
c001e56d:	0f a8                	push   gs
c001e56f:	66 b8 10 00          	mov    ax,0x10
c001e573:	66 8e d8             	mov    ds,ax
c001e576:	66 8e c0             	mov    es,ax
c001e579:	66 8e e0             	mov    fs,ax
c001e57c:	66 8e e8             	mov    gs,ax
c001e57f:	54                   	push   esp
c001e580:	fc                   	cld    
c001e581:	e8 0a e4 fe ff       	call   c000c990 <int_handler>
c001e586:	81 c4 04 00 00 00    	add    esp,0x4
c001e58c:	0f a9                	pop    gs
c001e58e:	0f a1                	pop    fs
c001e590:	07                   	pop    es
c001e591:	1f                   	pop    ds
c001e592:	e8 7e 2e ff ff       	call   c0011415 <KiCheckSignalZ>
c001e597:	3d 00 00 00 00       	cmp    eax,0x0
c001e59c:	0f 84 c0 00 00 00    	je     c001e662 <skipSignals>
c001e5a2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e5a7:	61                   	popa   
c001e5a8:	53                   	push   ebx
c001e5a9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e5af:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e5b2:	5b                   	pop    ebx
c001e5b3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e5b8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e5bb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e5be:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e5c1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e5c4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e5c7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e5ca:	81 c4 08 00 00 00    	add    esp,0x8
c001e5d0:	5e                   	pop    esi
c001e5d1:	5b                   	pop    ebx
c001e5d2:	59                   	pop    ecx
c001e5d3:	5a                   	pop    edx
c001e5d4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e5d7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e5da:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e5dd:	52                   	push   edx
c001e5de:	51                   	push   ecx
c001e5df:	53                   	push   ebx
c001e5e0:	56                   	push   esi
c001e5e1:	81 ec 08 00 00 00    	sub    esp,0x8
c001e5e7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e5ea:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e5ed:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e5f0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e5f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e5f6:	60                   	pusha  
c001e5f7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e5fd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e600:	89 e3                	mov    ebx,esp
c001e602:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e605:	52                   	push   edx
c001e606:	68 26 e6 01 c0       	push   0xc001e626
c001e60b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e60e:	89 dc                	mov    esp,ebx
c001e610:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e613:	68 23 00 00 00       	push   0x23
c001e618:	51                   	push   ecx
c001e619:	68 02 02 00 00       	push   0x202
c001e61e:	68 1b 00 00 00       	push   0x1b
c001e623:	ff 36                	push   DWORD PTR [esi]
c001e625:	cf                   	iret   

c001e626 <finishSignal>:
c001e626:	cd 0f                	int    0xf

c001e628 <finishSignal2>:
c001e628:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e62e:	e8 5f 2e ff ff       	call   c0011492 <KiFinishSignalZ>
c001e633:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e639:	68 23 00 00 00       	push   0x23
c001e63e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e641:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e644:	68 1b 00 00 00       	push   0x1b
c001e649:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e64c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e64f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e652:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e655:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e658:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e65b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e65e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e661:	cf                   	iret   

c001e662 <skipSignals>:
c001e662:	61                   	popa   
c001e663:	81 c4 08 00 00 00    	add    esp,0x8
c001e669:	cf                   	iret   
c001e66a:	90                   	nop
c001e66b:	90                   	nop

c001e66c <irq16>:
c001e66c:	fa                   	cli    
c001e66d:	6a 00                	push   0x0
c001e66f:	6a 30                	push   0x30
c001e671:	e9 c0 fe ff ff       	jmp    c001e536 <int_common_stub>

c001e676 <irq17>:
c001e676:	fa                   	cli    
c001e677:	6a 00                	push   0x0
c001e679:	6a 31                	push   0x31
c001e67b:	e9 b6 fe ff ff       	jmp    c001e536 <int_common_stub>

c001e680 <irq18>:
c001e680:	fa                   	cli    
c001e681:	6a 00                	push   0x0
c001e683:	6a 32                	push   0x32
c001e685:	e9 ac fe ff ff       	jmp    c001e536 <int_common_stub>

c001e68a <irq19>:
c001e68a:	fa                   	cli    
c001e68b:	6a 00                	push   0x0
c001e68d:	6a 33                	push   0x33
c001e68f:	e9 a2 fe ff ff       	jmp    c001e536 <int_common_stub>

c001e694 <irq20>:
c001e694:	fa                   	cli    
c001e695:	6a 00                	push   0x0
c001e697:	6a 34                	push   0x34
c001e699:	e9 98 fe ff ff       	jmp    c001e536 <int_common_stub>

c001e69e <irq21>:
c001e69e:	fa                   	cli    
c001e69f:	6a 00                	push   0x0
c001e6a1:	6a 35                	push   0x35
c001e6a3:	e9 8e fe ff ff       	jmp    c001e536 <int_common_stub>

c001e6a8 <irq22>:
c001e6a8:	fa                   	cli    
c001e6a9:	6a 00                	push   0x0
c001e6ab:	6a 36                	push   0x36
c001e6ad:	e9 84 fe ff ff       	jmp    c001e536 <int_common_stub>

c001e6b2 <irq23>:
c001e6b2:	fa                   	cli    
c001e6b3:	6a 00                	push   0x0
c001e6b5:	6a 37                	push   0x37
c001e6b7:	e9 7a fe ff ff       	jmp    c001e536 <int_common_stub>
c001e6bc:	66 90                	xchg   ax,ax
c001e6be:	66 90                	xchg   ax,ax

c001e6c0 <i386GetRDRAND>:
c001e6c0:	b9 64 00 00 00       	mov    ecx,0x64

c001e6c5 <retry>:
c001e6c5:	0f c7 f0             	rdrand eax
c001e6c8:	72 05                	jb     c001e6cf <retry.done>
c001e6ca:	e2 f9                	loop   c001e6c5 <retry>

c001e6cc <retry.fail>:
c001e6cc:	31 c0                	xor    eax,eax
c001e6ce:	c3                   	ret    

c001e6cf <retry.done>:
c001e6cf:	c3                   	ret    

c001e6d0 <absolutelyNoChanceInHell>:
c001e6d0:	b8 01 00 00 00       	mov    eax,0x1
c001e6d5:	0f a2                	cpuid  
c001e6d7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e6dd:	74 06                	je     c001e6e5 <sseDetect.noSSE>
c001e6df:	b8 01 00 00 00       	mov    eax,0x1
c001e6e4:	c3                   	ret    

c001e6e5 <sseDetect.noSSE>:
c001e6e5:	31 c0                	xor    eax,eax
c001e6e7:	c3                   	ret    

c001e6e8 <sseSave>:
c001e6e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6ec:	0f ae 00             	fxsave [eax]
c001e6ef:	c3                   	ret    

c001e6f0 <sseLoad>:
c001e6f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6f4:	0f ae 08             	fxrstor [eax]
c001e6f7:	c3                   	ret    

c001e6f8 <sseInit>:
c001e6f8:	e8 42 00 00 00       	call   c001e73f <x87Init>
c001e6fd:	0f 20 e0             	mov    eax,cr4
c001e700:	66 0d 00 06          	or     ax,0x600
c001e704:	0f 22 e0             	mov    cr4,eax
c001e707:	c3                   	ret    

c001e708 <sseClose>:
c001e708:	c3                   	ret    
c001e709:	66 90                	xchg   ax,ax
c001e70b:	66 90                	xchg   ax,ax
c001e70d:	66 90                	xchg   ax,ax
c001e70f:	90                   	nop

c001e710 <value_37F>:
c001e710:	7f 03                	jg     c001e715 <value_37A+0x1>

c001e712 <value_37E>:
c001e712:	7e 03                	jle    c001e717 <x87Detect+0x1>

c001e714 <value_37A>:
c001e714:	7a 03                	jp     c001e719 <x87Detect+0x3>

c001e716 <x87Detect>:
c001e716:	b8 01 00 00 00       	mov    eax,0x1
c001e71b:	0f a2                	cpuid  
c001e71d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e723:	74 06                	je     c001e72b <x87Detect.nox87>
c001e725:	b8 01 00 00 00       	mov    eax,0x1
c001e72a:	c3                   	ret    

c001e72b <x87Detect.nox87>:
c001e72b:	b8 00 00 00 00       	mov    eax,0x0
c001e730:	c3                   	ret    

c001e731 <x87Save>:
c001e731:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e735:	dd 30                	fnsave [eax]
c001e737:	c3                   	ret    

c001e738 <x87Load>:
c001e738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e73c:	dd 20                	frstor [eax]
c001e73e:	c3                   	ret    

c001e73f <x87Init>:
c001e73f:	0f 20 c0             	mov    eax,cr0
c001e742:	66 25 fb ff          	and    ax,0xfffb
c001e746:	66 0d 22 00          	or     ax,0x22
c001e74a:	0f 22 c0             	mov    cr0,eax
c001e74d:	db e3                	fninit 
c001e74f:	0f 06                	clts   
c001e751:	d9 2d 14 e7 01 c0    	fldcw  WORD PTR ds:0xc001e714
c001e757:	c3                   	ret    

c001e758 <x87Close>:
c001e758:	c3                   	ret    
c001e759:	66 90                	xchg   ax,ax
c001e75b:	90                   	nop

c001e75c <__do_global_ctors_aux>:
c001e75c:	a1 70 f6 01 c0       	mov    eax,ds:0xc001f670
c001e761:	83 f8 ff             	cmp    eax,0xffffffff
c001e764:	74 1a                	je     c001e780 <__do_global_ctors_aux+0x24>
c001e766:	55                   	push   ebp
c001e767:	89 e5                	mov    ebp,esp
c001e769:	53                   	push   ebx
c001e76a:	52                   	push   edx
c001e76b:	bb 70 f6 01 c0       	mov    ebx,0xc001f670
c001e770:	ff d0                	call   eax
c001e772:	83 eb 04             	sub    ebx,0x4
c001e775:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e777:	83 f8 ff             	cmp    eax,0xffffffff
c001e77a:	75 f4                	jne    c001e770 <__do_global_ctors_aux+0x14>
c001e77c:	58                   	pop    eax
c001e77d:	5b                   	pop    ebx
c001e77e:	5d                   	pop    ebp
c001e77f:	c3                   	ret    
c001e780:	c3                   	ret    
c001e781:	66 90                	xchg   ax,ax
c001e783:	90                   	nop

c001e784 <__divdi3>:
c001e784:	55                   	push   ebp
c001e785:	57                   	push   edi
c001e786:	56                   	push   esi
c001e787:	53                   	push   ebx
c001e788:	83 ec 1c             	sub    esp,0x1c
c001e78b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e78f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e796:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e79a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e79e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e7a2:	85 db                	test   ebx,ebx
c001e7a4:	0f 88 8e 00 00 00    	js     c001e838 <__divdi3+0xb4>
c001e7aa:	89 dd                	mov    ebp,ebx
c001e7ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e7b4:	89 d3                	mov    ebx,edx
c001e7b6:	85 d2                	test   edx,edx
c001e7b8:	79 0d                	jns    c001e7c7 <__divdi3+0x43>
c001e7ba:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e7be:	f7 d8                	neg    eax
c001e7c0:	83 d2 00             	adc    edx,0x0
c001e7c3:	f7 da                	neg    edx
c001e7c5:	89 d3                	mov    ebx,edx
c001e7c7:	89 c7                	mov    edi,eax
c001e7c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e7cc:	85 db                	test   ebx,ebx
c001e7ce:	75 48                	jne    c001e818 <__divdi3+0x94>
c001e7d0:	39 ef                	cmp    edi,ebp
c001e7d2:	76 24                	jbe    c001e7f8 <__divdi3+0x74>
c001e7d4:	89 ea                	mov    edx,ebp
c001e7d6:	f7 f7                	div    edi
c001e7d8:	89 c1                	mov    ecx,eax
c001e7da:	31 f6                	xor    esi,esi
c001e7dc:	89 c8                	mov    eax,ecx
c001e7de:	89 f2                	mov    edx,esi
c001e7e0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e7e4:	85 c9                	test   ecx,ecx
c001e7e6:	74 07                	je     c001e7ef <__divdi3+0x6b>
c001e7e8:	f7 d8                	neg    eax
c001e7ea:	83 d2 00             	adc    edx,0x0
c001e7ed:	f7 da                	neg    edx
c001e7ef:	83 c4 1c             	add    esp,0x1c
c001e7f2:	5b                   	pop    ebx
c001e7f3:	5e                   	pop    esi
c001e7f4:	5f                   	pop    edi
c001e7f5:	5d                   	pop    ebp
c001e7f6:	c3                   	ret    
c001e7f7:	90                   	nop
c001e7f8:	85 ff                	test   edi,edi
c001e7fa:	75 0b                	jne    c001e807 <__divdi3+0x83>
c001e7fc:	b8 01 00 00 00       	mov    eax,0x1
c001e801:	31 d2                	xor    edx,edx
c001e803:	f7 f3                	div    ebx
c001e805:	89 c7                	mov    edi,eax
c001e807:	31 d2                	xor    edx,edx
c001e809:	89 e8                	mov    eax,ebp
c001e80b:	f7 f7                	div    edi
c001e80d:	89 c6                	mov    esi,eax
c001e80f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e812:	f7 f7                	div    edi
c001e814:	89 c1                	mov    ecx,eax
c001e816:	eb c4                	jmp    c001e7dc <__divdi3+0x58>
c001e818:	39 eb                	cmp    ebx,ebp
c001e81a:	77 3c                	ja     c001e858 <__divdi3+0xd4>
c001e81c:	0f bd f3             	bsr    esi,ebx
c001e81f:	83 f6 1f             	xor    esi,0x1f
c001e822:	75 40                	jne    c001e864 <__divdi3+0xe0>
c001e824:	39 eb                	cmp    ebx,ebp
c001e826:	72 09                	jb     c001e831 <__divdi3+0xad>
c001e828:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e82b:	0f 87 97 00 00 00    	ja     c001e8c8 <__divdi3+0x144>
c001e831:	b9 01 00 00 00       	mov    ecx,0x1
c001e836:	eb a4                	jmp    c001e7dc <__divdi3+0x58>
c001e838:	f7 d9                	neg    ecx
c001e83a:	83 d3 00             	adc    ebx,0x0
c001e83d:	f7 db                	neg    ebx
c001e83f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e842:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e846:	89 dd                	mov    ebp,ebx
c001e848:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e850:	e9 5f ff ff ff       	jmp    c001e7b4 <__divdi3+0x30>
c001e855:	8d 76 00             	lea    esi,[esi+0x0]
c001e858:	31 f6                	xor    esi,esi
c001e85a:	31 c9                	xor    ecx,ecx
c001e85c:	e9 7b ff ff ff       	jmp    c001e7dc <__divdi3+0x58>
c001e861:	8d 76 00             	lea    esi,[esi+0x0]
c001e864:	b8 20 00 00 00       	mov    eax,0x20
c001e869:	29 f0                	sub    eax,esi
c001e86b:	89 f1                	mov    ecx,esi
c001e86d:	d3 e3                	shl    ebx,cl
c001e86f:	89 fa                	mov    edx,edi
c001e871:	88 c1                	mov    cl,al
c001e873:	d3 ea                	shr    edx,cl
c001e875:	09 da                	or     edx,ebx
c001e877:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e87b:	89 f1                	mov    ecx,esi
c001e87d:	d3 e7                	shl    edi,cl
c001e87f:	89 eb                	mov    ebx,ebp
c001e881:	88 c1                	mov    cl,al
c001e883:	d3 eb                	shr    ebx,cl
c001e885:	89 f1                	mov    ecx,esi
c001e887:	d3 e5                	shl    ebp,cl
c001e889:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e88c:	88 c1                	mov    cl,al
c001e88e:	d3 ea                	shr    edx,cl
c001e890:	09 d5                	or     ebp,edx
c001e892:	89 e8                	mov    eax,ebp
c001e894:	89 da                	mov    edx,ebx
c001e896:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e89a:	89 d3                	mov    ebx,edx
c001e89c:	89 c5                	mov    ebp,eax
c001e89e:	f7 e7                	mul    edi
c001e8a0:	39 d3                	cmp    ebx,edx
c001e8a2:	72 18                	jb     c001e8bc <__divdi3+0x138>
c001e8a4:	74 0a                	je     c001e8b0 <__divdi3+0x12c>
c001e8a6:	89 e9                	mov    ecx,ebp
c001e8a8:	31 f6                	xor    esi,esi
c001e8aa:	e9 2d ff ff ff       	jmp    c001e7dc <__divdi3+0x58>
c001e8af:	90                   	nop
c001e8b0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e8b3:	89 f1                	mov    ecx,esi
c001e8b5:	d3 e7                	shl    edi,cl
c001e8b7:	39 c7                	cmp    edi,eax
c001e8b9:	73 eb                	jae    c001e8a6 <__divdi3+0x122>
c001e8bb:	90                   	nop
c001e8bc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e8bf:	31 f6                	xor    esi,esi
c001e8c1:	e9 16 ff ff ff       	jmp    c001e7dc <__divdi3+0x58>
c001e8c6:	66 90                	xchg   ax,ax
c001e8c8:	31 c9                	xor    ecx,ecx
c001e8ca:	e9 0d ff ff ff       	jmp    c001e7dc <__divdi3+0x58>
c001e8cf:	90                   	nop

c001e8d0 <__moddi3>:
c001e8d0:	55                   	push   ebp
c001e8d1:	57                   	push   edi
c001e8d2:	56                   	push   esi
c001e8d3:	53                   	push   ebx
c001e8d4:	83 ec 2c             	sub    esp,0x2c
c001e8d7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e8db:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e8df:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e8e3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e8e7:	85 db                	test   ebx,ebx
c001e8e9:	0f 88 85 00 00 00    	js     c001e974 <__moddi3+0xa4>
c001e8ef:	89 de                	mov    esi,ebx
c001e8f1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e8f9:	89 d7                	mov    edi,edx
c001e8fb:	85 d2                	test   edx,edx
c001e8fd:	79 09                	jns    c001e908 <__moddi3+0x38>
c001e8ff:	f7 d8                	neg    eax
c001e901:	83 d2 00             	adc    edx,0x0
c001e904:	f7 da                	neg    edx
c001e906:	89 d7                	mov    edi,edx
c001e908:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e90c:	89 cd                	mov    ebp,ecx
c001e90e:	85 ff                	test   edi,edi
c001e910:	75 52                	jne    c001e964 <__moddi3+0x94>
c001e912:	89 c3                	mov    ebx,eax
c001e914:	39 f0                	cmp    eax,esi
c001e916:	76 24                	jbe    c001e93c <__moddi3+0x6c>
c001e918:	89 c8                	mov    eax,ecx
c001e91a:	89 f2                	mov    edx,esi
c001e91c:	f7 f3                	div    ebx
c001e91e:	89 d6                	mov    esi,edx
c001e920:	89 f0                	mov    eax,esi
c001e922:	31 d2                	xor    edx,edx
c001e924:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e928:	85 c9                	test   ecx,ecx
c001e92a:	74 07                	je     c001e933 <__moddi3+0x63>
c001e92c:	f7 d8                	neg    eax
c001e92e:	83 d2 00             	adc    edx,0x0
c001e931:	f7 da                	neg    edx
c001e933:	83 c4 2c             	add    esp,0x2c
c001e936:	5b                   	pop    ebx
c001e937:	5e                   	pop    esi
c001e938:	5f                   	pop    edi
c001e939:	5d                   	pop    ebp
c001e93a:	c3                   	ret    
c001e93b:	90                   	nop
c001e93c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e940:	85 db                	test   ebx,ebx
c001e942:	75 0d                	jne    c001e951 <__moddi3+0x81>
c001e944:	b8 01 00 00 00       	mov    eax,0x1
c001e949:	31 d2                	xor    edx,edx
c001e94b:	f7 f7                	div    edi
c001e94d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e951:	89 f0                	mov    eax,esi
c001e953:	31 d2                	xor    edx,edx
c001e955:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e959:	f7 f7                	div    edi
c001e95b:	89 e8                	mov    eax,ebp
c001e95d:	f7 f7                	div    edi
c001e95f:	89 d6                	mov    esi,edx
c001e961:	eb bd                	jmp    c001e920 <__moddi3+0x50>
c001e963:	90                   	nop
c001e964:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e968:	39 f7                	cmp    edi,esi
c001e96a:	76 20                	jbe    c001e98c <__moddi3+0xbc>
c001e96c:	89 c8                	mov    eax,ecx
c001e96e:	89 f2                	mov    edx,esi
c001e970:	eb b2                	jmp    c001e924 <__moddi3+0x54>
c001e972:	66 90                	xchg   ax,ax
c001e974:	f7 d9                	neg    ecx
c001e976:	83 d3 00             	adc    ebx,0x0
c001e979:	f7 db                	neg    ebx
c001e97b:	89 de                	mov    esi,ebx
c001e97d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e985:	e9 6f ff ff ff       	jmp    c001e8f9 <__moddi3+0x29>
c001e98a:	66 90                	xchg   ax,ax
c001e98c:	0f bd c7             	bsr    eax,edi
c001e98f:	83 f0 1f             	xor    eax,0x1f
c001e992:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e996:	75 24                	jne    c001e9bc <__moddi3+0xec>
c001e998:	39 f7                	cmp    edi,esi
c001e99a:	72 06                	jb     c001e9a2 <__moddi3+0xd2>
c001e99c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e9a0:	77 0c                	ja     c001e9ae <__moddi3+0xde>
c001e9a2:	89 e9                	mov    ecx,ebp
c001e9a4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e9a8:	19 fe                	sbb    esi,edi
c001e9aa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e9ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e9b2:	89 f2                	mov    edx,esi
c001e9b4:	e9 6b ff ff ff       	jmp    c001e924 <__moddi3+0x54>
c001e9b9:	8d 76 00             	lea    esi,[esi+0x0]
c001e9bc:	b8 20 00 00 00       	mov    eax,0x20
c001e9c1:	89 c2                	mov    edx,eax
c001e9c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e9c7:	29 da                	sub    edx,ebx
c001e9c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e9cd:	88 d9                	mov    cl,bl
c001e9cf:	d3 e7                	shl    edi,cl
c001e9d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9d5:	88 d1                	mov    cl,dl
c001e9d7:	d3 e8                	shr    eax,cl
c001e9d9:	09 c7                	or     edi,eax
c001e9db:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e9df:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e9e3:	89 d8                	mov    eax,ebx
c001e9e5:	88 d9                	mov    cl,bl
c001e9e7:	d3 e7                	shl    edi,cl
c001e9e9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e9ed:	89 f3                	mov    ebx,esi
c001e9ef:	88 d1                	mov    cl,dl
c001e9f1:	d3 eb                	shr    ebx,cl
c001e9f3:	89 c7                	mov    edi,eax
c001e9f5:	88 c1                	mov    cl,al
c001e9f7:	d3 e6                	shl    esi,cl
c001e9f9:	89 e8                	mov    eax,ebp
c001e9fb:	88 d1                	mov    cl,dl
c001e9fd:	d3 e8                	shr    eax,cl
c001e9ff:	09 f0                	or     eax,esi
c001ea01:	89 f9                	mov    ecx,edi
c001ea03:	d3 e5                	shl    ebp,cl
c001ea05:	89 da                	mov    edx,ebx
c001ea07:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001ea0b:	89 d3                	mov    ebx,edx
c001ea0d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ea11:	89 c6                	mov    esi,eax
c001ea13:	89 d1                	mov    ecx,edx
c001ea15:	39 d3                	cmp    ebx,edx
c001ea17:	72 27                	jb     c001ea40 <__moddi3+0x170>
c001ea19:	74 21                	je     c001ea3c <__moddi3+0x16c>
c001ea1b:	29 f5                	sub    ebp,esi
c001ea1d:	19 cb                	sbb    ebx,ecx
c001ea1f:	89 de                	mov    esi,ebx
c001ea21:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001ea25:	d3 e6                	shl    esi,cl
c001ea27:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ea2b:	89 f9                	mov    ecx,edi
c001ea2d:	d3 ed                	shr    ebp,cl
c001ea2f:	09 ee                	or     esi,ebp
c001ea31:	89 f0                	mov    eax,esi
c001ea33:	d3 eb                	shr    ebx,cl
c001ea35:	89 da                	mov    edx,ebx
c001ea37:	e9 e8 fe ff ff       	jmp    c001e924 <__moddi3+0x54>
c001ea3c:	39 c5                	cmp    ebp,eax
c001ea3e:	73 db                	jae    c001ea1b <__moddi3+0x14b>
c001ea40:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001ea44:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001ea48:	89 d1                	mov    ecx,edx
c001ea4a:	89 c6                	mov    esi,eax
c001ea4c:	eb cd                	jmp    c001ea1b <__moddi3+0x14b>
c001ea4e:	66 90                	xchg   ax,ax

c001ea50 <__udivdi3>:
c001ea50:	55                   	push   ebp
c001ea51:	57                   	push   edi
c001ea52:	56                   	push   esi
c001ea53:	53                   	push   ebx
c001ea54:	83 ec 1c             	sub    esp,0x1c
c001ea57:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ea5b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ea5f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001ea63:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ea67:	85 d2                	test   edx,edx
c001ea69:	75 41                	jne    c001eaac <__udivdi3+0x5c>
c001ea6b:	39 f7                	cmp    edi,esi
c001ea6d:	76 15                	jbe    c001ea84 <__udivdi3+0x34>
c001ea6f:	89 e8                	mov    eax,ebp
c001ea71:	89 f2                	mov    edx,esi
c001ea73:	f7 f7                	div    edi
c001ea75:	31 db                	xor    ebx,ebx
c001ea77:	89 da                	mov    edx,ebx
c001ea79:	83 c4 1c             	add    esp,0x1c
c001ea7c:	5b                   	pop    ebx
c001ea7d:	5e                   	pop    esi
c001ea7e:	5f                   	pop    edi
c001ea7f:	5d                   	pop    ebp
c001ea80:	c3                   	ret    
c001ea81:	8d 76 00             	lea    esi,[esi+0x0]
c001ea84:	89 f9                	mov    ecx,edi
c001ea86:	85 ff                	test   edi,edi
c001ea88:	75 0b                	jne    c001ea95 <__udivdi3+0x45>
c001ea8a:	b8 01 00 00 00       	mov    eax,0x1
c001ea8f:	31 d2                	xor    edx,edx
c001ea91:	f7 f7                	div    edi
c001ea93:	89 c1                	mov    ecx,eax
c001ea95:	31 d2                	xor    edx,edx
c001ea97:	89 f0                	mov    eax,esi
c001ea99:	f7 f1                	div    ecx
c001ea9b:	89 c3                	mov    ebx,eax
c001ea9d:	89 e8                	mov    eax,ebp
c001ea9f:	f7 f1                	div    ecx
c001eaa1:	89 da                	mov    edx,ebx
c001eaa3:	83 c4 1c             	add    esp,0x1c
c001eaa6:	5b                   	pop    ebx
c001eaa7:	5e                   	pop    esi
c001eaa8:	5f                   	pop    edi
c001eaa9:	5d                   	pop    ebp
c001eaaa:	c3                   	ret    
c001eaab:	90                   	nop
c001eaac:	39 f2                	cmp    edx,esi
c001eaae:	77 1c                	ja     c001eacc <__udivdi3+0x7c>
c001eab0:	0f bd da             	bsr    ebx,edx
c001eab3:	83 f3 1f             	xor    ebx,0x1f
c001eab6:	75 24                	jne    c001eadc <__udivdi3+0x8c>
c001eab8:	39 f2                	cmp    edx,esi
c001eaba:	72 08                	jb     c001eac4 <__udivdi3+0x74>
c001eabc:	39 ef                	cmp    edi,ebp
c001eabe:	0f 87 84 00 00 00    	ja     c001eb48 <__udivdi3+0xf8>
c001eac4:	b8 01 00 00 00       	mov    eax,0x1
c001eac9:	eb ac                	jmp    c001ea77 <__udivdi3+0x27>
c001eacb:	90                   	nop
c001eacc:	31 db                	xor    ebx,ebx
c001eace:	31 c0                	xor    eax,eax
c001ead0:	89 da                	mov    edx,ebx
c001ead2:	83 c4 1c             	add    esp,0x1c
c001ead5:	5b                   	pop    ebx
c001ead6:	5e                   	pop    esi
c001ead7:	5f                   	pop    edi
c001ead8:	5d                   	pop    ebp
c001ead9:	c3                   	ret    
c001eada:	66 90                	xchg   ax,ax
c001eadc:	b8 20 00 00 00       	mov    eax,0x20
c001eae1:	29 d8                	sub    eax,ebx
c001eae3:	88 d9                	mov    cl,bl
c001eae5:	d3 e2                	shl    edx,cl
c001eae7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001eaeb:	89 fa                	mov    edx,edi
c001eaed:	88 c1                	mov    cl,al
c001eaef:	d3 ea                	shr    edx,cl
c001eaf1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eaf5:	09 d1                	or     ecx,edx
c001eaf7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001eafb:	88 d9                	mov    cl,bl
c001eafd:	d3 e7                	shl    edi,cl
c001eaff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001eb03:	89 f7                	mov    edi,esi
c001eb05:	88 c1                	mov    cl,al
c001eb07:	d3 ef                	shr    edi,cl
c001eb09:	88 d9                	mov    cl,bl
c001eb0b:	d3 e6                	shl    esi,cl
c001eb0d:	89 ea                	mov    edx,ebp
c001eb0f:	88 c1                	mov    cl,al
c001eb11:	d3 ea                	shr    edx,cl
c001eb13:	09 d6                	or     esi,edx
c001eb15:	89 f0                	mov    eax,esi
c001eb17:	89 fa                	mov    edx,edi
c001eb19:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001eb1d:	89 d7                	mov    edi,edx
c001eb1f:	89 c6                	mov    esi,eax
c001eb21:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001eb25:	39 d7                	cmp    edi,edx
c001eb27:	72 13                	jb     c001eb3c <__udivdi3+0xec>
c001eb29:	74 09                	je     c001eb34 <__udivdi3+0xe4>
c001eb2b:	89 f0                	mov    eax,esi
c001eb2d:	31 db                	xor    ebx,ebx
c001eb2f:	e9 43 ff ff ff       	jmp    c001ea77 <__udivdi3+0x27>
c001eb34:	88 d9                	mov    cl,bl
c001eb36:	d3 e5                	shl    ebp,cl
c001eb38:	39 c5                	cmp    ebp,eax
c001eb3a:	73 ef                	jae    c001eb2b <__udivdi3+0xdb>
c001eb3c:	8d 46 ff             	lea    eax,[esi-0x1]
c001eb3f:	31 db                	xor    ebx,ebx
c001eb41:	e9 31 ff ff ff       	jmp    c001ea77 <__udivdi3+0x27>
c001eb46:	66 90                	xchg   ax,ax
c001eb48:	31 c0                	xor    eax,eax
c001eb4a:	e9 28 ff ff ff       	jmp    c001ea77 <__udivdi3+0x27>
c001eb4f:	90                   	nop

c001eb50 <__umoddi3>:
c001eb50:	55                   	push   ebp
c001eb51:	57                   	push   edi
c001eb52:	56                   	push   esi
c001eb53:	53                   	push   ebx
c001eb54:	83 ec 1c             	sub    esp,0x1c
c001eb57:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001eb5b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eb5f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001eb63:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eb67:	89 da                	mov    edx,ebx
c001eb69:	85 c0                	test   eax,eax
c001eb6b:	75 37                	jne    c001eba4 <__umoddi3+0x54>
c001eb6d:	39 df                	cmp    edi,ebx
c001eb6f:	76 13                	jbe    c001eb84 <__umoddi3+0x34>
c001eb71:	89 f0                	mov    eax,esi
c001eb73:	f7 f7                	div    edi
c001eb75:	89 d0                	mov    eax,edx
c001eb77:	31 d2                	xor    edx,edx
c001eb79:	83 c4 1c             	add    esp,0x1c
c001eb7c:	5b                   	pop    ebx
c001eb7d:	5e                   	pop    esi
c001eb7e:	5f                   	pop    edi
c001eb7f:	5d                   	pop    ebp
c001eb80:	c3                   	ret    
c001eb81:	8d 76 00             	lea    esi,[esi+0x0]
c001eb84:	89 fd                	mov    ebp,edi
c001eb86:	85 ff                	test   edi,edi
c001eb88:	75 0b                	jne    c001eb95 <__umoddi3+0x45>
c001eb8a:	b8 01 00 00 00       	mov    eax,0x1
c001eb8f:	31 d2                	xor    edx,edx
c001eb91:	f7 f7                	div    edi
c001eb93:	89 c5                	mov    ebp,eax
c001eb95:	89 d8                	mov    eax,ebx
c001eb97:	31 d2                	xor    edx,edx
c001eb99:	f7 f5                	div    ebp
c001eb9b:	89 f0                	mov    eax,esi
c001eb9d:	f7 f5                	div    ebp
c001eb9f:	89 d0                	mov    eax,edx
c001eba1:	eb d4                	jmp    c001eb77 <__umoddi3+0x27>
c001eba3:	90                   	nop
c001eba4:	89 f1                	mov    ecx,esi
c001eba6:	39 d8                	cmp    eax,ebx
c001eba8:	76 0a                	jbe    c001ebb4 <__umoddi3+0x64>
c001ebaa:	89 f0                	mov    eax,esi
c001ebac:	83 c4 1c             	add    esp,0x1c
c001ebaf:	5b                   	pop    ebx
c001ebb0:	5e                   	pop    esi
c001ebb1:	5f                   	pop    edi
c001ebb2:	5d                   	pop    ebp
c001ebb3:	c3                   	ret    
c001ebb4:	0f bd e8             	bsr    ebp,eax
c001ebb7:	83 f5 1f             	xor    ebp,0x1f
c001ebba:	75 1c                	jne    c001ebd8 <__umoddi3+0x88>
c001ebbc:	39 d8                	cmp    eax,ebx
c001ebbe:	72 04                	jb     c001ebc4 <__umoddi3+0x74>
c001ebc0:	39 f7                	cmp    edi,esi
c001ebc2:	77 08                	ja     c001ebcc <__umoddi3+0x7c>
c001ebc4:	89 da                	mov    edx,ebx
c001ebc6:	29 fe                	sub    esi,edi
c001ebc8:	19 c2                	sbb    edx,eax
c001ebca:	89 f1                	mov    ecx,esi
c001ebcc:	89 c8                	mov    eax,ecx
c001ebce:	83 c4 1c             	add    esp,0x1c
c001ebd1:	5b                   	pop    ebx
c001ebd2:	5e                   	pop    esi
c001ebd3:	5f                   	pop    edi
c001ebd4:	5d                   	pop    ebp
c001ebd5:	c3                   	ret    
c001ebd6:	66 90                	xchg   ax,ax
c001ebd8:	ba 20 00 00 00       	mov    edx,0x20
c001ebdd:	29 ea                	sub    edx,ebp
c001ebdf:	89 e9                	mov    ecx,ebp
c001ebe1:	d3 e0                	shl    eax,cl
c001ebe3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ebe7:	89 f8                	mov    eax,edi
c001ebe9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ebed:	88 d1                	mov    cl,dl
c001ebef:	d3 e8                	shr    eax,cl
c001ebf1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ebf5:	09 c1                	or     ecx,eax
c001ebf7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ebfb:	89 e9                	mov    ecx,ebp
c001ebfd:	d3 e7                	shl    edi,cl
c001ebff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ec03:	89 d8                	mov    eax,ebx
c001ec05:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ec09:	88 d1                	mov    cl,dl
c001ec0b:	d3 e8                	shr    eax,cl
c001ec0d:	89 c7                	mov    edi,eax
c001ec0f:	89 e9                	mov    ecx,ebp
c001ec11:	d3 e3                	shl    ebx,cl
c001ec13:	89 f0                	mov    eax,esi
c001ec15:	88 d1                	mov    cl,dl
c001ec17:	d3 e8                	shr    eax,cl
c001ec19:	09 d8                	or     eax,ebx
c001ec1b:	89 e9                	mov    ecx,ebp
c001ec1d:	d3 e6                	shl    esi,cl
c001ec1f:	89 f3                	mov    ebx,esi
c001ec21:	89 fa                	mov    edx,edi
c001ec23:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001ec27:	89 d1                	mov    ecx,edx
c001ec29:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ec2d:	89 c6                	mov    esi,eax
c001ec2f:	89 d7                	mov    edi,edx
c001ec31:	39 d1                	cmp    ecx,edx
c001ec33:	72 27                	jb     c001ec5c <__umoddi3+0x10c>
c001ec35:	74 21                	je     c001ec58 <__umoddi3+0x108>
c001ec37:	89 ca                	mov    edx,ecx
c001ec39:	29 f3                	sub    ebx,esi
c001ec3b:	19 fa                	sbb    edx,edi
c001ec3d:	89 d0                	mov    eax,edx
c001ec3f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001ec43:	d3 e0                	shl    eax,cl
c001ec45:	89 e9                	mov    ecx,ebp
c001ec47:	d3 eb                	shr    ebx,cl
c001ec49:	09 d8                	or     eax,ebx
c001ec4b:	d3 ea                	shr    edx,cl
c001ec4d:	83 c4 1c             	add    esp,0x1c
c001ec50:	5b                   	pop    ebx
c001ec51:	5e                   	pop    esi
c001ec52:	5f                   	pop    edi
c001ec53:	5d                   	pop    ebp
c001ec54:	c3                   	ret    
c001ec55:	8d 76 00             	lea    esi,[esi+0x0]
c001ec58:	39 c3                	cmp    ebx,eax
c001ec5a:	73 db                	jae    c001ec37 <__umoddi3+0xe7>
c001ec5c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001ec60:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001ec64:	89 d7                	mov    edi,edx
c001ec66:	89 c6                	mov    esi,eax
c001ec68:	eb cd                	jmp    c001ec37 <__umoddi3+0xe7>

Disassembly of section .init:

c001ec6a <_init>:
c001ec6a:	55                   	push   ebp
c001ec6b:	89 e5                	mov    ebp,esp
c001ec6d:	e8 82 14 fe ff       	call   c00000f4 <frame_dummy>
c001ec72:	e8 e5 fa ff ff       	call   c001e75c <__do_global_ctors_aux>
c001ec77:	5d                   	pop    ebp
c001ec78:	c3                   	ret    

Disassembly of section .fini:

c001ec79 <_fini>:
c001ec79:	55                   	push   ebp
c001ec7a:	89 e5                	mov    ebp,esp
c001ec7c:	e8 03 14 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001ec81:	5d                   	pop    ebp
c001ec82:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001ec84 <Computer::~Computer()>:
c001ec84:	83 ec 1c             	sub    esp,0x1c
c001ec87:	ba f4 fe 01 c0       	mov    edx,0xc001fef4
c001ec8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec90:	89 10                	mov    DWORD PTR [eax],edx
c001ec92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec96:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec99:	e8 50 d7 fe ff       	call   c000c3ee <Device::~Device()>
c001ec9e:	90                   	nop
c001ec9f:	83 c4 1c             	add    esp,0x1c
c001eca2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001eca4 <Computer::~Computer()>:
c001eca4:	83 ec 1c             	sub    esp,0x1c
c001eca7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecab:	89 04 24             	mov    DWORD PTR [esp],eax
c001ecae:	e8 d1 ff ff ff       	call   c001ec84 <Computer::~Computer()>
c001ecb3:	c7 44 24 04 70 01 00 00 	mov    DWORD PTR [esp+0x4],0x170
c001ecbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecbf:	89 04 24             	mov    DWORD PTR [esp],eax
c001ecc2:	e8 95 bc fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001ecc7:	83 c4 1c             	add    esp,0x1c
c001ecca:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001eccb <idleCommon()>:
c001eccb:	83 ec 0c             	sub    esp,0xc
c001ecce:	fa                   	cli    
c001eccf:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001ecd5:	e8 86 6a ff ff       	call   c0015760 <schedule()>
c001ecda:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001ecdf:	48                   	dec    eax
c001ece0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001ece5:	75 01                	jne    c001ece8 <idleCommon()+0x1d>
c001ece7:	fb                   	sti    
c001ece8:	83 c4 0c             	add    esp,0xc
c001eceb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ecec <LinkedList<UnixFile>::~LinkedList()>:
c001ecec:	90                   	nop
c001eced:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ecee <LinkedList<UnixFile>::LinkedList()>:
c001ecee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ecf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed2e:	90                   	nop
c001ed2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001ed30 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001ed30:	83 ec 1c             	sub    esp,0x1c
c001ed33:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ed38:	75 0c                	jne    c001ed46 <LinkedList<UnixFile>::addElement(UnixFile*)+0x16>
c001ed3a:	c7 04 24 08 01 02 c0 	mov    DWORD PTR [esp],0xc0020108
c001ed41:	e8 ef 20 ff ff       	call   c0010e35 <KePanic(char const*)>
c001ed46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed4a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed4c:	85 c0                	test   eax,eax
c001ed4e:	74 34                	je     c001ed84 <LinkedList<UnixFile>::addElement(UnixFile*)+0x54>
c001ed50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed57:	85 c0                	test   eax,eax
c001ed59:	74 29                	je     c001ed84 <LinkedList<UnixFile>::addElement(UnixFile*)+0x54>
c001ed5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed62:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ed66:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed6d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ed71:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed7b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed82:	eb 5d                	jmp    c001ede1 <LinkedList<UnixFile>::addElement(UnixFile*)+0xb1>
c001ed84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed88:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed8a:	85 c0                	test   eax,eax
c001ed8c:	75 47                	jne    c001edd5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xa5>
c001ed8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed95:	85 c0                	test   eax,eax
c001ed97:	75 3c                	jne    c001edd5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xa5>
c001ed99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed9d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001eda1:	89 10                	mov    DWORD PTR [eax],edx
c001eda3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eda7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001edab:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001edae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edb5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001edbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edc0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edc3:	85 c0                	test   eax,eax
c001edc5:	74 1a                	je     c001ede1 <LinkedList<UnixFile>::addElement(UnixFile*)+0xb1>
c001edc7:	c7 04 24 2a 01 02 c0 	mov    DWORD PTR [esp],0xc002012a
c001edce:	e8 62 20 ff ff       	call   c0010e35 <KePanic(char const*)>
c001edd3:	eb 0c                	jmp    c001ede1 <LinkedList<UnixFile>::addElement(UnixFile*)+0xb1>
c001edd5:	c7 04 24 34 01 02 c0 	mov    DWORD PTR [esp],0xc0020134
c001eddc:	e8 54 20 ff ff       	call   c0010e35 <KePanic(char const*)>
c001ede1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ede5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ede8:	8d 50 01             	lea    edx,[eax+0x1]
c001edeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edef:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001edf2:	90                   	nop
c001edf3:	83 c4 1c             	add    esp,0x1c
c001edf6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001edf8 <LinkedList<UnixFile>::getFirstElement()>:
c001edf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edfc:	8b 00                	mov    eax,DWORD PTR [eax]
c001edfe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ee00 <LinkedList<UnixFile>::removeFirst()>:
c001ee00:	83 ec 1c             	sub    esp,0x1c
c001ee03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee07:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee09:	85 c0                	test   eax,eax
c001ee0b:	75 0e                	jne    c001ee1b <LinkedList<UnixFile>::removeFirst()+0x1b>
c001ee0d:	c7 04 24 40 01 02 c0 	mov    DWORD PTR [esp],0xc0020140
c001ee14:	e8 1c 20 ff ff       	call   c0010e35 <KePanic(char const*)>
c001ee19:	eb 76                	jmp    c001ee91 <LinkedList<UnixFile>::removeFirst()+0x91>
c001ee1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee22:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee25:	85 c0                	test   eax,eax
c001ee27:	74 0c                	je     c001ee35 <LinkedList<UnixFile>::removeFirst()+0x35>
c001ee29:	c7 04 24 8b 01 02 c0 	mov    DWORD PTR [esp],0xc002018b
c001ee30:	e8 00 20 ff ff       	call   c0010e35 <KePanic(char const*)>
c001ee35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee39:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee3b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee3e:	85 c0                	test   eax,eax
c001ee40:	75 2f                	jne    c001ee71 <LinkedList<UnixFile>::removeFirst()+0x71>
c001ee42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee46:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ee4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ee57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee5b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee5e:	83 f8 01             	cmp    eax,0x1
c001ee61:	74 1d                	je     c001ee80 <LinkedList<UnixFile>::removeFirst()+0x80>
c001ee63:	c7 04 24 64 01 02 c0 	mov    DWORD PTR [esp],0xc0020164
c001ee6a:	e8 c6 1f ff ff       	call   c0010e35 <KePanic(char const*)>
c001ee6f:	eb 0f                	jmp    c001ee80 <LinkedList<UnixFile>::removeFirst()+0x80>
c001ee71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee75:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee77:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ee7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee7e:	89 10                	mov    DWORD PTR [eax],edx
c001ee80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee87:	8d 50 ff             	lea    edx,[eax-0x1]
c001ee8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee8e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee91:	83 c4 1c             	add    esp,0x1c
c001ee94:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ee96 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ee96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee9d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ee9e <DriverlessDevice::~DriverlessDevice()>:
c001ee9e:	83 ec 04             	sub    esp,0x4
c001eea1:	ba 5c 09 02 c0       	mov    edx,0xc002095c
c001eea6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eeaa:	89 10                	mov    DWORD PTR [eax],edx
c001eeac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eeb0:	89 04 24             	mov    DWORD PTR [esp],eax
c001eeb3:	e8 36 d5 fe ff       	call   c000c3ee <Device::~Device()>
c001eeb8:	90                   	nop
c001eeb9:	83 c4 04             	add    esp,0x4
c001eebc:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001eebe <DriverlessDevice::~DriverlessDevice()>:
c001eebe:	83 ec 1c             	sub    esp,0x1c
c001eec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eec5:	89 04 24             	mov    DWORD PTR [esp],eax
c001eec8:	e8 d1 ff ff ff       	call   c001ee9e <DriverlessDevice::~DriverlessDevice()>
c001eecd:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c001eed5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eed9:	89 04 24             	mov    DWORD PTR [esp],eax
c001eedc:	e8 7b ba fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001eee1:	83 c4 1c             	add    esp,0x1c
c001eee4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001eee6 <LinkedList<Device>::addElement(Device*)>:
c001eee6:	83 ec 1c             	sub    esp,0x1c
c001eee9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001eeee:	75 0c                	jne    c001eefc <LinkedList<Device>::addElement(Device*)+0x16>
c001eef0:	c7 04 24 08 01 02 c0 	mov    DWORD PTR [esp],0xc0020108
c001eef7:	e8 39 1f ff ff       	call   c0010e35 <KePanic(char const*)>
c001eefc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef02:	85 c0                	test   eax,eax
c001ef04:	74 3a                	je     c001ef40 <LinkedList<Device>::addElement(Device*)+0x5a>
c001ef06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef0d:	85 c0                	test   eax,eax
c001ef0f:	74 2f                	je     c001ef40 <LinkedList<Device>::addElement(Device*)+0x5a>
c001ef11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ef1c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ef22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef26:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ef2a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ef2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef34:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ef3e:	eb 60                	jmp    c001efa0 <LinkedList<Device>::addElement(Device*)+0xba>
c001ef40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef44:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef46:	85 c0                	test   eax,eax
c001ef48:	75 4a                	jne    c001ef94 <LinkedList<Device>::addElement(Device*)+0xae>
c001ef4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef51:	85 c0                	test   eax,eax
c001ef53:	75 3f                	jne    c001ef94 <LinkedList<Device>::addElement(Device*)+0xae>
c001ef55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef59:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ef5d:	89 10                	mov    DWORD PTR [eax],edx
c001ef5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef63:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ef67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ef6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef71:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ef7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef7f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef82:	85 c0                	test   eax,eax
c001ef84:	74 1a                	je     c001efa0 <LinkedList<Device>::addElement(Device*)+0xba>
c001ef86:	c7 04 24 2a 01 02 c0 	mov    DWORD PTR [esp],0xc002012a
c001ef8d:	e8 a3 1e ff ff       	call   c0010e35 <KePanic(char const*)>
c001ef92:	eb 0c                	jmp    c001efa0 <LinkedList<Device>::addElement(Device*)+0xba>
c001ef94:	c7 04 24 34 01 02 c0 	mov    DWORD PTR [esp],0xc0020134
c001ef9b:	e8 95 1e ff ff       	call   c0010e35 <KePanic(char const*)>
c001efa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001efa4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001efa7:	8d 50 01             	lea    edx,[eax+0x1]
c001efaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001efae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001efb1:	90                   	nop
c001efb2:	83 c4 1c             	add    esp,0x1c
c001efb5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001efb6 <LinkedList<Device>::LinkedList()>:
c001efb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001efc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efc4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efcf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001efd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001efe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efe4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eff6:	90                   	nop
c001eff7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001eff8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001eff8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001effc:	8b 00                	mov    eax,DWORD PTR [eax]
c001effe:	85 c0                	test   eax,eax
c001f000:	75 0e                	jne    c001f010 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f002:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f006:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f009:	85 c0                	test   eax,eax
c001f00b:	75 03                	jne    c001f010 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f00d:	b0 01                	mov    al,0x1
c001f00f:	c3                   	ret    
c001f010:	b0 00                	mov    al,0x0
c001f012:	90                   	nop
c001f013:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f014 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f018:	8b 00                	mov    eax,DWORD PTR [eax]
c001f01a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f01c <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f01c:	83 ec 1c             	sub    esp,0x1c
c001f01f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f023:	8b 00                	mov    eax,DWORD PTR [eax]
c001f025:	85 c0                	test   eax,eax
c001f027:	75 13                	jne    c001f03c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x20>
c001f029:	c7 04 24 40 01 02 c0 	mov    DWORD PTR [esp],0xc0020140
c001f030:	e8 00 1e ff ff       	call   c0010e35 <KePanic(char const*)>
c001f035:	e9 8a 00 00 00       	jmp    c001f0c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa8>
c001f03a:	66 90                	xchg   ax,ax
c001f03c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f043:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f046:	85 c0                	test   eax,eax
c001f048:	0f 95 c0             	setne  al
c001f04b:	84 c0                	test   al,al
c001f04d:	74 0d                	je     c001f05c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x40>
c001f04f:	c7 04 24 8b 01 02 c0 	mov    DWORD PTR [esp],0xc002018b
c001f056:	e8 da 1d ff ff       	call   c0010e35 <KePanic(char const*)>
c001f05b:	90                   	nop
c001f05c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f060:	8b 00                	mov    eax,DWORD PTR [eax]
c001f062:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f065:	85 c0                	test   eax,eax
c001f067:	0f 94 c0             	sete   al
c001f06a:	84 c0                	test   al,al
c001f06c:	74 32                	je     c001f0a0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x84>
c001f06e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f072:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f07c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f083:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f087:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f08a:	83 f8 01             	cmp    eax,0x1
c001f08d:	74 21                	je     c001f0b0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f08f:	c7 04 24 64 01 02 c0 	mov    DWORD PTR [esp],0xc0020164
c001f096:	e8 9a 1d ff ff       	call   c0010e35 <KePanic(char const*)>
c001f09b:	eb 13                	jmp    c001f0b0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f09d:	8d 76 00             	lea    esi,[esi+0x0]
c001f0a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f0a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0a6:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f0a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f0ad:	89 10                	mov    DWORD PTR [eax],edx
c001f0af:	90                   	nop
c001f0b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f0b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f0b7:	8d 50 ff             	lea    edx,[eax-0x1]
c001f0ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f0be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f0c1:	8d 76 00             	lea    esi,[esi+0x0]
c001f0c4:	83 c4 1c             	add    esp,0x1c
c001f0c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f0c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f0c8:	83 ec 1c             	sub    esp,0x1c
c001f0cb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001f0d0:	75 0e                	jne    c001f0e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x18>
c001f0d2:	c7 04 24 08 01 02 c0 	mov    DWORD PTR [esp],0xc0020108
c001f0d9:	e8 57 1d ff ff       	call   c0010e35 <KePanic(char const*)>
c001f0de:	66 90                	xchg   ax,ax
c001f0e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f0e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0e6:	85 c0                	test   eax,eax
c001f0e8:	74 36                	je     c001f120 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001f0ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f0ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f0f1:	85 c0                	test   eax,eax
c001f0f3:	74 2b                	je     c001f120 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001f0f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f0f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f0fc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f100:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f103:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f107:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f10b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f10e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f112:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f115:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f11c:	eb 62                	jmp    c001f180 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb8>
c001f11e:	66 90                	xchg   ax,ax
c001f120:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f124:	8b 00                	mov    eax,DWORD PTR [eax]
c001f126:	85 c0                	test   eax,eax
c001f128:	75 4a                	jne    c001f174 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xac>
c001f12a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f12e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f131:	85 c0                	test   eax,eax
c001f133:	75 3f                	jne    c001f174 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xac>
c001f135:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f139:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f13d:	89 10                	mov    DWORD PTR [eax],edx
c001f13f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f143:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f147:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f14a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f14e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f151:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f15c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f15f:	85 c0                	test   eax,eax
c001f161:	74 1d                	je     c001f180 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb8>
c001f163:	c7 04 24 2a 01 02 c0 	mov    DWORD PTR [esp],0xc002012a
c001f16a:	e8 c6 1c ff ff       	call   c0010e35 <KePanic(char const*)>
c001f16f:	eb 0f                	jmp    c001f180 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb8>
c001f171:	8d 76 00             	lea    esi,[esi+0x0]
c001f174:	c7 04 24 34 01 02 c0 	mov    DWORD PTR [esp],0xc0020134
c001f17b:	e8 b5 1c ff ff       	call   c0010e35 <KePanic(char const*)>
c001f180:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f184:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f187:	8d 50 01             	lea    edx,[eax+0x1]
c001f18a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f18e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f191:	90                   	nop
c001f192:	83 c4 1c             	add    esp,0x1c
c001f195:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f198 <ACPI::~ACPI()>:
c001f198:	83 ec 1c             	sub    esp,0x1c
c001f19b:	ba 28 0f 02 c0       	mov    edx,0xc0020f28
c001f1a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f1a4:	89 10                	mov    DWORD PTR [eax],edx
c001f1a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f1aa:	89 04 24             	mov    DWORD PTR [esp],eax
c001f1ad:	e8 3c d2 fe ff       	call   c000c3ee <Device::~Device()>
c001f1b2:	90                   	nop
c001f1b3:	83 c4 1c             	add    esp,0x1c
c001f1b6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f1b8 <ACPI::~ACPI()>:
c001f1b8:	83 ec 1c             	sub    esp,0x1c
c001f1bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f1bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001f1c2:	e8 d1 ff ff ff       	call   c001f198 <ACPI::~ACPI()>
c001f1c7:	c7 44 24 04 64 12 00 00 	mov    DWORD PTR [esp+0x4],0x1264
c001f1cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f1d3:	89 04 24             	mov    DWORD PTR [esp],eax
c001f1d6:	e8 81 b7 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001f1db:	83 c4 1c             	add    esp,0x1c
c001f1de:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f1e0 <LinkedList<Device>::~LinkedList()>:
c001f1e0:	90                   	nop
c001f1e1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f1e4 <LinkedList<Device>::isEmpty()>:
c001f1e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1e8:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1ea:	85 c0                	test   eax,eax
c001f1ec:	75 0e                	jne    c001f1fc <LinkedList<Device>::isEmpty()+0x18>
c001f1ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f1f5:	85 c0                	test   eax,eax
c001f1f7:	75 03                	jne    c001f1fc <LinkedList<Device>::isEmpty()+0x18>
c001f1f9:	b0 01                	mov    al,0x1
c001f1fb:	c3                   	ret    
c001f1fc:	b0 00                	mov    al,0x0
c001f1fe:	90                   	nop
c001f1ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001f200 <LinkedList<Device>::getFirstElement()>:
c001f200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f204:	8b 00                	mov    eax,DWORD PTR [eax]
c001f206:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001f208 <LinkedList<Device>::removeFirst()>:
c001f208:	83 ec 1c             	sub    esp,0x1c
c001f20b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f20f:	8b 00                	mov    eax,DWORD PTR [eax]
c001f211:	85 c0                	test   eax,eax
c001f213:	75 13                	jne    c001f228 <LinkedList<Device>::removeFirst()+0x20>
c001f215:	c7 04 24 40 01 02 c0 	mov    DWORD PTR [esp],0xc0020140
c001f21c:	e8 14 1c ff ff       	call   c0010e35 <KePanic(char const*)>
c001f221:	e9 8a 00 00 00       	jmp    c001f2b0 <LinkedList<Device>::removeFirst()+0xa8>
c001f226:	66 90                	xchg   ax,ax
c001f228:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f22c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f22f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f235:	85 c0                	test   eax,eax
c001f237:	74 0f                	je     c001f248 <LinkedList<Device>::removeFirst()+0x40>
c001f239:	c7 04 24 8b 01 02 c0 	mov    DWORD PTR [esp],0xc002018b
c001f240:	e8 f0 1b ff ff       	call   c0010e35 <KePanic(char const*)>
c001f245:	8d 76 00             	lea    esi,[esi+0x0]
c001f248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f24c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f24e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f254:	85 c0                	test   eax,eax
c001f256:	75 30                	jne    c001f288 <LinkedList<Device>::removeFirst()+0x80>
c001f258:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f25c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f262:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f266:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f26d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f271:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f274:	83 f8 01             	cmp    eax,0x1
c001f277:	74 23                	je     c001f29c <LinkedList<Device>::removeFirst()+0x94>
c001f279:	c7 04 24 64 01 02 c0 	mov    DWORD PTR [esp],0xc0020164
c001f280:	e8 b0 1b ff ff       	call   c0010e35 <KePanic(char const*)>
c001f285:	eb 15                	jmp    c001f29c <LinkedList<Device>::removeFirst()+0x94>
c001f287:	90                   	nop
c001f288:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f28c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f28e:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001f294:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f298:	89 10                	mov    DWORD PTR [eax],edx
c001f29a:	66 90                	xchg   ax,ax
c001f29c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f2a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f2a3:	8d 50 ff             	lea    edx,[eax-0x1]
c001f2a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f2aa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f2ad:	8d 76 00             	lea    esi,[esi+0x0]
c001f2b0:	83 c4 1c             	add    esp,0x1c
c001f2b3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f2b4 <CPU::~CPU()>:
c001f2b4:	83 ec 1c             	sub    esp,0x1c
c001f2b7:	ba c4 10 02 c0       	mov    edx,0xc00210c4
c001f2bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f2c0:	89 10                	mov    DWORD PTR [eax],edx
c001f2c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f2c6:	89 04 24             	mov    DWORD PTR [esp],eax
c001f2c9:	e8 20 d1 fe ff       	call   c000c3ee <Device::~Device()>
c001f2ce:	90                   	nop
c001f2cf:	83 c4 1c             	add    esp,0x1c
c001f2d2:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f2d4 <CPU::~CPU()>:
c001f2d4:	83 ec 1c             	sub    esp,0x1c
c001f2d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f2db:	89 04 24             	mov    DWORD PTR [esp],eax
c001f2de:	e8 d1 ff ff ff       	call   c001f2b4 <CPU::~CPU()>
c001f2e3:	c7 44 24 04 94 11 00 00 	mov    DWORD PTR [esp+0x4],0x1194
c001f2eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f2ef:	89 04 24             	mov    DWORD PTR [esp],eax
c001f2f2:	e8 65 b6 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001f2f7:	83 c4 1c             	add    esp,0x1c
c001f2fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001f2fc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001f2fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f300:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f303:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001f304 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001f304:	90                   	nop
c001f305:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001f308 <ThreadControlBlock::ThreadControlBlock()>:
c001f308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f30c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f313:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f317:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001f31e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f322:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001f329:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f32d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001f334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f338:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001f33f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f343:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001f347:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f34b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001f34f:	90                   	nop
c001f350:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001f354 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001f354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f358:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f35e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f362:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f369:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f36d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f374:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f378:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f37e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f382:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f389:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f38d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f394:	90                   	nop
c001f395:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f396 <PCI::~PCI()>:
c001f396:	83 ec 1c             	sub    esp,0x1c
c001f399:	ba 24 1f 02 c0       	mov    edx,0xc0021f24
c001f39e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f3a2:	89 10                	mov    DWORD PTR [eax],edx
c001f3a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f3a8:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3ab:	e8 94 c4 fe ff       	call   c000b844 <Bus::~Bus()>
c001f3b0:	90                   	nop
c001f3b1:	83 c4 1c             	add    esp,0x1c
c001f3b4:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f3b6 <PCI::~PCI()>:
c001f3b6:	83 ec 1c             	sub    esp,0x1c
c001f3b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f3bd:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3c0:	e8 d1 ff ff ff       	call   c001f396 <PCI::~PCI()>
c001f3c5:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001f3cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f3d1:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3d4:	e8 83 b5 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001f3d9:	83 c4 1c             	add    esp,0x1c
c001f3dc:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f3de <IDE::~IDE()>:
c001f3de:	83 ec 1c             	sub    esp,0x1c
c001f3e1:	ba d8 1f 02 c0       	mov    edx,0xc0021fd8
c001f3e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f3ea:	89 10                	mov    DWORD PTR [eax],edx
c001f3ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f3f0:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3f3:	e8 6c d4 fe ff       	call   c000c864 <HardDiskController::~HardDiskController()>
c001f3f8:	90                   	nop
c001f3f9:	83 c4 1c             	add    esp,0x1c
c001f3fc:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f3fe <IDE::~IDE()>:
c001f3fe:	83 ec 1c             	sub    esp,0x1c
c001f401:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f405:	89 04 24             	mov    DWORD PTR [esp],eax
c001f408:	e8 d1 ff ff ff       	call   c001f3de <IDE::~IDE()>
c001f40d:	c7 44 24 04 70 02 00 00 	mov    DWORD PTR [esp+0x4],0x270
c001f415:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f419:	89 04 24             	mov    DWORD PTR [esp],eax
c001f41c:	e8 3b b5 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001f421:	83 c4 1c             	add    esp,0x1c
c001f424:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001f426 <SATABus::~SATABus()>:
c001f426:	83 ec 1c             	sub    esp,0x1c
c001f429:	ba 28 20 02 c0       	mov    edx,0xc0022028
c001f42e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f432:	89 10                	mov    DWORD PTR [eax],edx
c001f434:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f438:	89 04 24             	mov    DWORD PTR [esp],eax
c001f43b:	e8 24 d4 fe ff       	call   c000c864 <HardDiskController::~HardDiskController()>
c001f440:	90                   	nop
c001f441:	83 c4 1c             	add    esp,0x1c
c001f444:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001f446 <SATABus::~SATABus()>:
c001f446:	83 ec 1c             	sub    esp,0x1c
c001f449:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f44d:	89 04 24             	mov    DWORD PTR [esp],eax
c001f450:	e8 d1 ff ff ff       	call   c001f426 <SATABus::~SATABus()>
c001f455:	c7 44 24 04 64 01 00 00 	mov    DWORD PTR [esp+0x4],0x164
c001f45d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f461:	89 04 24             	mov    DWORD PTR [esp],eax
c001f464:	e8 f3 b4 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001f469:	83 c4 1c             	add    esp,0x1c
c001f46c:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f46e <ATA::~ATA()>:
c001f46e:	83 ec 1c             	sub    esp,0x1c
c001f471:	ba 68 20 02 c0       	mov    edx,0xc0022068
c001f476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f47a:	89 10                	mov    DWORD PTR [eax],edx
c001f47c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f480:	89 04 24             	mov    DWORD PTR [esp],eax
c001f483:	e8 b8 d4 fe ff       	call   c000c940 <PhysicalDisk::~PhysicalDisk()>
c001f488:	90                   	nop
c001f489:	83 c4 1c             	add    esp,0x1c
c001f48c:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f48e <ATA::~ATA()>:
c001f48e:	83 ec 1c             	sub    esp,0x1c
c001f491:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f495:	89 04 24             	mov    DWORD PTR [esp],eax
c001f498:	e8 d1 ff ff ff       	call   c001f46e <ATA::~ATA()>
c001f49d:	c7 44 24 04 7c 01 00 00 	mov    DWORD PTR [esp+0x4],0x17c
c001f4a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f4a9:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4ac:	e8 ab b4 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001f4b1:	83 c4 1c             	add    esp,0x1c
c001f4b4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f4b6 <ATAPI::~ATAPI()>:
c001f4b6:	83 ec 1c             	sub    esp,0x1c
c001f4b9:	ba b0 20 02 c0       	mov    edx,0xc00220b0
c001f4be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f4c2:	89 10                	mov    DWORD PTR [eax],edx
c001f4c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f4c8:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4cb:	e8 70 d4 fe ff       	call   c000c940 <PhysicalDisk::~PhysicalDisk()>
c001f4d0:	90                   	nop
c001f4d1:	83 c4 1c             	add    esp,0x1c
c001f4d4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f4d6 <ATAPI::~ATAPI()>:
c001f4d6:	83 ec 1c             	sub    esp,0x1c
c001f4d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f4dd:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4e0:	e8 d1 ff ff ff       	call   c001f4b6 <ATAPI::~ATAPI()>
c001f4e5:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001f4ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f4f1:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4f4:	e8 63 b4 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001f4f9:	83 c4 1c             	add    esp,0x1c
c001f4fc:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f4fe <SATA::~SATA()>:
c001f4fe:	83 ec 1c             	sub    esp,0x1c
c001f501:	ba 64 21 02 c0       	mov    edx,0xc0022164
c001f506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f50a:	89 10                	mov    DWORD PTR [eax],edx
c001f50c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f510:	89 04 24             	mov    DWORD PTR [esp],eax
c001f513:	e8 28 d4 fe ff       	call   c000c940 <PhysicalDisk::~PhysicalDisk()>
c001f518:	90                   	nop
c001f519:	83 c4 1c             	add    esp,0x1c
c001f51c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f51e <SATA::~SATA()>:
c001f51e:	83 ec 1c             	sub    esp,0x1c
c001f521:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f525:	89 04 24             	mov    DWORD PTR [esp],eax
c001f528:	e8 d1 ff ff ff       	call   c001f4fe <SATA::~SATA()>
c001f52d:	c7 44 24 04 7c 01 00 00 	mov    DWORD PTR [esp+0x4],0x17c
c001f535:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f539:	89 04 24             	mov    DWORD PTR [esp],eax
c001f53c:	e8 1b b4 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001f541:	83 c4 1c             	add    esp,0x1c
c001f544:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f546 <SATAPI::~SATAPI()>:
c001f546:	83 ec 1c             	sub    esp,0x1c
c001f549:	ba 88 22 02 c0       	mov    edx,0xc0022288
c001f54e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f552:	89 10                	mov    DWORD PTR [eax],edx
c001f554:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f558:	89 04 24             	mov    DWORD PTR [esp],eax
c001f55b:	e8 e0 d3 fe ff       	call   c000c940 <PhysicalDisk::~PhysicalDisk()>
c001f560:	90                   	nop
c001f561:	83 c4 1c             	add    esp,0x1c
c001f564:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f566 <SATAPI::~SATAPI()>:
c001f566:	83 ec 1c             	sub    esp,0x1c
c001f569:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f56d:	89 04 24             	mov    DWORD PTR [esp],eax
c001f570:	e8 d1 ff ff ff       	call   c001f546 <SATAPI::~SATAPI()>
c001f575:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001f57d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f581:	89 04 24             	mov    DWORD PTR [esp],eax
c001f584:	e8 d3 b3 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001f589:	83 c4 1c             	add    esp,0x1c
c001f58c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f58e <IOAPIC::~IOAPIC()>:
c001f58e:	83 ec 1c             	sub    esp,0x1c
c001f591:	ba c8 22 02 c0       	mov    edx,0xc00222c8
c001f596:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f59a:	89 10                	mov    DWORD PTR [eax],edx
c001f59c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f5a0:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5a3:	e8 46 ce fe ff       	call   c000c3ee <Device::~Device()>
c001f5a8:	90                   	nop
c001f5a9:	83 c4 1c             	add    esp,0x1c
c001f5ac:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f5ae <IOAPIC::~IOAPIC()>:
c001f5ae:	83 ec 1c             	sub    esp,0x1c
c001f5b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f5b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5b8:	e8 d1 ff ff ff       	call   c001f58e <IOAPIC::~IOAPIC()>
c001f5bd:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c001f5c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f5c9:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5cc:	e8 8b b3 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001f5d1:	83 c4 1c             	add    esp,0x1c
c001f5d4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f5d8 <APICTimer::~APICTimer()>:
c001f5d8:	83 ec 1c             	sub    esp,0x1c
c001f5db:	ba 10 23 02 c0       	mov    edx,0xc0022310
c001f5e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f5e4:	89 10                	mov    DWORD PTR [eax],edx
c001f5e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f5ea:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5ed:	e8 1a e8 fe ff       	call   c000de0c <Timer::~Timer()>
c001f5f2:	90                   	nop
c001f5f3:	83 c4 1c             	add    esp,0x1c
c001f5f6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f5f8 <APICTimer::~APICTimer()>:
c001f5f8:	83 ec 1c             	sub    esp,0x1c
c001f5fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f5ff:	89 04 24             	mov    DWORD PTR [esp],eax
c001f602:	e8 d1 ff ff ff       	call   c001f5d8 <APICTimer::~APICTimer()>
c001f607:	c7 44 24 04 60 01 00 00 	mov    DWORD PTR [esp+0x4],0x160
c001f60f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f613:	89 04 24             	mov    DWORD PTR [esp],eax
c001f616:	e8 41 b3 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001f61b:	83 c4 1c             	add    esp,0x1c
c001f61e:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f620 <PIT::~PIT()>:
c001f620:	83 ec 1c             	sub    esp,0x1c
c001f623:	ba 60 23 02 c0       	mov    edx,0xc0022360
c001f628:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f62c:	89 10                	mov    DWORD PTR [eax],edx
c001f62e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f632:	89 04 24             	mov    DWORD PTR [esp],eax
c001f635:	e8 d2 e7 fe ff       	call   c000de0c <Timer::~Timer()>
c001f63a:	90                   	nop
c001f63b:	83 c4 1c             	add    esp,0x1c
c001f63e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f640 <PIT::~PIT()>:
c001f640:	83 ec 1c             	sub    esp,0x1c
c001f643:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f647:	89 04 24             	mov    DWORD PTR [esp],eax
c001f64a:	e8 d1 ff ff ff       	call   c001f620 <PIT::~PIT()>
c001f64f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001f657:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f65b:	89 04 24             	mov    DWORD PTR [esp],eax
c001f65e:	e8 f9 b2 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001f663:	83 c4 1c             	add    esp,0x1c
c001f666:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be b5 11 02 c0       	mov    esi,0xc00211b5
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be d1 11 02 c0       	mov    esi,0xc00211d1
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002305e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0023062:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023074:	89 c2                	mov    edx,eax
c0023076:	31 c0                	xor    eax,eax
c0023078:	89 d3                	mov    ebx,edx
c002307a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002307e:	89 c1                	mov    ecx,eax
c0023080:	83 c4 10             	add    esp,0x10
c0023083:	89 d0                	mov    eax,edx
c0023085:	31 d2                	xor    edx,edx
c0023087:	09 da                	or     edx,ebx
c0023089:	09 c8                	or     eax,ecx
c002308b:	5b                   	pop    ebx
c002308c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
