
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 bc f7 00 00       	call   c000f7dc <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 33 6f 02 00       	call   c0026f58 <_init>
c0000025:	c3                   	ret    
c0000026:	bb b4 7a 02 c0       	mov    ebx,0xc0027ab4
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb c0 7a 02 c0    	cmp    ebx,0xc0027ac0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 bd 02 c0       	mov    eax,0xc002bdd8
c0000049:	3d d8 bd 02 c0       	cmp    eax,0xc002bdd8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 bd 02 c0       	push   0xc002bdd8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 bd 02 c0       	mov    eax,0xc002bdd8
c0000075:	2d d8 bd 02 c0       	sub    eax,0xc002bdd8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 bd 02 c0       	push   0xc002bdd8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 08 c4 02 c0 00 	cmp    BYTE PTR ds:0xc002c408,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb c8 7a 02 c0       	mov    ebx,0xc0027ac8
c00000bb:	81 eb c4 7a 02 c0    	sub    ebx,0xc0027ac4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c4 7a 02 c0       	mov    esi,0xc0027ac4
c00000ca:	a1 0c c4 02 c0       	mov    eax,ds:0xc002c40c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 0c c4 02 c0       	mov    ds:0xc002c40c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 0c c4 02 c0       	mov    eax,ds:0xc002c40c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 bd 02 c0       	push   0xc002bdd8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 08 c4 02 c0 01 	mov    BYTE PTR ds:0xc002c408,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 10 c4 02 c0       	push   0xc002c410
c000012c:	68 d8 bd 02 c0       	push   0xc002bdd8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	55                   	push   ebp
c00002b0:	89 e5                	mov    ebp,esp
c00002b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002be:	25 ff ff 00 00       	and    eax,0xffff
c00002c3:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002c9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002cf:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d5:	52                   	push   edx
c00002d6:	51                   	push   ecx
c00002d7:	68 02 02 02 00       	push   0x20202
c00002dc:	53                   	push   ebx
c00002dd:	50                   	push   eax
c00002de:	cf                   	iret   

c00002df <goToUsermode>:
c00002df:	55                   	push   ebp
c00002e0:	89 e5                	mov    ebp,esp
c00002e2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e5:	66 b8 23 00          	mov    ax,0x23
c00002e9:	66 8e d8             	mov    ds,ax
c00002ec:	66 8e c0             	mov    es,ax
c00002ef:	66 8e e0             	mov    fs,ax
c00002f2:	66 8e e8             	mov    gs,ax
c00002f5:	89 e0                	mov    eax,esp
c00002f7:	68 23 00 00 00       	push   0x23
c00002fc:	50                   	push   eax
c00002fd:	68 02 02 00 00       	push   0x202
c0000302:	68 1b 00 00 00       	push   0x1b
c0000307:	53                   	push   ebx
c0000308:	cf                   	iret   

c0000309 <switchToThreadASMFirstTime>:
c0000309:	9c                   	pushf  
c000030a:	fa                   	cli    
c000030b:	50                   	push   eax
c000030c:	53                   	push   ebx
c000030d:	51                   	push   ecx
c000030e:	52                   	push   edx
c000030f:	56                   	push   esi
c0000310:	57                   	push   edi
c0000311:	55                   	push   ebp
c0000312:	e9 11 00 00 00       	jmp    c0000328 <commonThreadSwitch>

c0000317 <switchToThreadASM>:
c0000317:	9c                   	pushf  
c0000318:	50                   	push   eax
c0000319:	53                   	push   ebx
c000031a:	51                   	push   ecx
c000031b:	52                   	push   edx
c000031c:	56                   	push   esi
c000031d:	57                   	push   edi
c000031e:	55                   	push   ebp
c000031f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000325:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000328 <commonThreadSwitch>:
c0000328:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000332:	8b 06                	mov    eax,DWORD PTR [esi]
c0000334:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000337:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033a:	0f 20 d9             	mov    ecx,cr3
c000033d:	39 c8                	cmp    eax,ecx
c000033f:	74 03                	je     c0000344 <commonThreadSwitch.doneVAS>
c0000341:	0f 22 d8             	mov    cr3,eax

c0000344 <commonThreadSwitch.doneVAS>:
c0000344:	85 d2                	test   edx,edx
c0000346:	75 11                	jne    c0000359 <commonThreadSwitch.firstTime>
c0000348:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034b:	e8 a4 c4 01 00       	call   c001c7f4 <changeTSS>
c0000350:	5d                   	pop    ebp
c0000351:	5f                   	pop    edi
c0000352:	5e                   	pop    esi
c0000353:	5a                   	pop    edx
c0000354:	59                   	pop    ecx
c0000355:	5b                   	pop    ebx
c0000356:	58                   	pop    eax
c0000357:	9d                   	popf   
c0000358:	c3                   	ret    

c0000359 <commonThreadSwitch.firstTime>:
c0000359:	fa                   	cli    
c000035a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035d:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000362:	60                   	pusha  
c0000363:	e8 fb 20 01 00       	call   c0012463 <mapVASFirstTime>
c0000368:	61                   	popa   
c0000369:	89 c4                	mov    esp,eax
c000036b:	56                   	push   esi
c000036c:	52                   	push   edx
c000036d:	e8 82 c4 01 00       	call   c001c7f4 <changeTSS>
c0000372:	5a                   	pop    edx
c0000373:	5e                   	pop    esi
c0000374:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037b:	5d                   	pop    ebp
c000037c:	5f                   	pop    edi
c000037d:	5e                   	pop    esi
c000037e:	59                   	pop    ecx
c000037f:	59                   	pop    ecx
c0000380:	5b                   	pop    ebx
c0000381:	58                   	pop    eax
c0000382:	81 c4 04 00 00 00    	add    esp,0x4
c0000388:	6a 02                	push   0x2
c000038a:	9d                   	popf   
c000038b:	52                   	push   edx
c000038c:	e8 d0 c8 01 00       	call   c001cc61 <taskStartupFunction>
c0000391:	5a                   	pop    edx
c0000392:	50                   	push   eax
c0000393:	ff d2                	call   edx
c0000395:	e8 7e ce 01 00       	call   c001d218 <taskReturned>
c000039a:	e9 fb ff ff ff       	jmp    c000039a <commonThreadSwitch.firstTime+0x41>

c000039f <asmQuickAcquireLock>:
c000039f:	55                   	push   ebp
c00003a0:	89 e5                	mov    ebp,esp
c00003a2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a5 <asmQuickAcquireLock.retry>:
c00003a5:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003aa:	72 02                	jb     c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003ac:	fa                   	cli    
c00003ad:	c3                   	ret    

c00003ae <asmQuickAcquireLock.spin_with_pause>:
c00003ae:	f3 90                	pause  
c00003b0:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b6:	75 f6                	jne    c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003b8:	e9 e8 ff ff ff       	jmp    c00003a5 <asmQuickAcquireLock.retry>

c00003bd <asmQuickReleaseLock>:
c00003bd:	55                   	push   ebp
c00003be:	89 e5                	mov    ebp,esp
c00003c0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c7:	5d                   	pop    ebp
c00003c8:	c3                   	ret    

c00003c9 <asmAcquireLock>:
c00003c9:	55                   	push   ebp
c00003ca:	89 e5                	mov    ebp,esp
c00003cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003cf <asmAcquireLock.retry>:
c00003cf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d4:	72 05                	jb     c00003db <asmAcquireLock.spin_with_pause>
c00003d6:	9c                   	pushf  
c00003d7:	58                   	pop    eax
c00003d8:	fa                   	cli    
c00003d9:	5d                   	pop    ebp
c00003da:	c3                   	ret    

c00003db <asmAcquireLock.spin_with_pause>:
c00003db:	f3 90                	pause  
c00003dd:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e3:	75 f6                	jne    c00003db <asmAcquireLock.spin_with_pause>
c00003e5:	e9 e5 ff ff ff       	jmp    c00003cf <asmAcquireLock.retry>

c00003ea <asmReleaseLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003f9:	52                   	push   edx
c00003fa:	9d                   	popf   
c00003fb:	5d                   	pop    ebp
c00003fc:	c3                   	ret    

c00003fd <loadGDT>:
c00003fd:	0f 01 15 50 c8 02 c0 	lgdtd  ds:0xc002c850
c0000404:	66 b8 10 00          	mov    ax,0x10
c0000408:	66 8e d8             	mov    ds,ax
c000040b:	66 8e c0             	mov    es,ax
c000040e:	66 8e e0             	mov    fs,ax
c0000411:	66 8e e8             	mov    gs,ax
c0000414:	66 8e d0             	mov    ss,ax
c0000417:	e9 00 00 00 00       	jmp    c000041c <flush2>

c000041c <flush2>:
c000041c:	c3                   	ret    

c000041d <isr0>:
c000041d:	fa                   	cli    
c000041e:	68 00 00 00 00       	push   0x0
c0000423:	68 00 00 00 00       	push   0x0
c0000428:	e9 44 01 00 00       	jmp    c0000571 <int_common_stub>

c000042d <isr1>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 01                	push   0x1
c0000432:	e9 3a 01 00 00       	jmp    c0000571 <int_common_stub>

c0000437 <isr2>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 02                	push   0x2
c000043c:	e9 30 01 00 00       	jmp    c0000571 <int_common_stub>

c0000441 <isr3>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 03                	push   0x3
c0000446:	e9 26 01 00 00       	jmp    c0000571 <int_common_stub>

c000044b <isr4>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 04                	push   0x4
c0000450:	e9 1c 01 00 00       	jmp    c0000571 <int_common_stub>

c0000455 <isr5>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 05                	push   0x5
c000045a:	e9 12 01 00 00       	jmp    c0000571 <int_common_stub>

c000045f <isr6>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 06                	push   0x6
c0000464:	e9 08 01 00 00       	jmp    c0000571 <int_common_stub>

c0000469 <isr7>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 07                	push   0x7
c000046e:	e9 fe 00 00 00       	jmp    c0000571 <int_common_stub>

c0000473 <isr8>:
c0000473:	fa                   	cli    
c0000474:	6a 08                	push   0x8
c0000476:	e9 f6 00 00 00       	jmp    c0000571 <int_common_stub>

c000047b <isr9>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 09                	push   0x9
c0000480:	e9 ec 00 00 00       	jmp    c0000571 <int_common_stub>

c0000485 <isr10>:
c0000485:	fa                   	cli    
c0000486:	6a 0a                	push   0xa
c0000488:	e9 e4 00 00 00       	jmp    c0000571 <int_common_stub>

c000048d <isr11>:
c000048d:	fa                   	cli    
c000048e:	6a 0b                	push   0xb
c0000490:	e9 dc 00 00 00       	jmp    c0000571 <int_common_stub>

c0000495 <isr12>:
c0000495:	fa                   	cli    
c0000496:	6a 0c                	push   0xc
c0000498:	e9 d4 00 00 00       	jmp    c0000571 <int_common_stub>

c000049d <isr13>:
c000049d:	fa                   	cli    
c000049e:	6a 0d                	push   0xd
c00004a0:	e9 cc 00 00 00       	jmp    c0000571 <int_common_stub>

c00004a5 <isr14>:
c00004a5:	fa                   	cli    
c00004a6:	6a 0e                	push   0xe
c00004a8:	e9 c4 00 00 00       	jmp    c0000571 <int_common_stub>

c00004ad <isr15>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 0f                	push   0xf
c00004b2:	e9 ba 00 00 00       	jmp    c0000571 <int_common_stub>

c00004b7 <isr16>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 10                	push   0x10
c00004bc:	e9 b0 00 00 00       	jmp    c0000571 <int_common_stub>

c00004c1 <isr17>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 11                	push   0x11
c00004c6:	e9 a6 00 00 00       	jmp    c0000571 <int_common_stub>

c00004cb <isr18>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 12                	push   0x12
c00004d0:	e9 9c 00 00 00       	jmp    c0000571 <int_common_stub>

c00004d5 <irq3>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 23                	push   0x23
c00004da:	e9 92 00 00 00       	jmp    c0000571 <int_common_stub>

c00004df <irq4>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 24                	push   0x24
c00004e4:	e9 88 00 00 00       	jmp    c0000571 <int_common_stub>

c00004e9 <irq5>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 25                	push   0x25
c00004ee:	e9 7e 00 00 00       	jmp    c0000571 <int_common_stub>

c00004f3 <irq6>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 26                	push   0x26
c00004f8:	e9 74 00 00 00       	jmp    c0000571 <int_common_stub>

c00004fd <irq7>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 27                	push   0x27
c0000502:	e9 6a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000507 <irq8>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 28                	push   0x28
c000050c:	e9 60 00 00 00       	jmp    c0000571 <int_common_stub>

c0000511 <irq9>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 29                	push   0x29
c0000516:	e9 56 00 00 00       	jmp    c0000571 <int_common_stub>

c000051b <irq10>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 2a                	push   0x2a
c0000520:	e9 4c 00 00 00       	jmp    c0000571 <int_common_stub>

c0000525 <irq11>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 2b                	push   0x2b
c000052a:	e9 42 00 00 00       	jmp    c0000571 <int_common_stub>

c000052f <irq12>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 2c                	push   0x2c
c0000534:	e9 38 00 00 00       	jmp    c0000571 <int_common_stub>

c0000539 <irq13>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 2d                	push   0x2d
c000053e:	e9 2e 00 00 00       	jmp    c0000571 <int_common_stub>

c0000543 <irq14>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 2e                	push   0x2e
c0000548:	e9 24 00 00 00       	jmp    c0000571 <int_common_stub>

c000054d <irq15>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 2f                	push   0x2f
c0000552:	e9 1a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000557 <irq1>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 21                	push   0x21
c000055c:	eb 13                	jmp    c0000571 <int_common_stub>

c000055e <irq2>:
c000055e:	fa                   	cli    
c000055f:	6a 00                	push   0x0
c0000561:	6a 22                	push   0x22
c0000563:	eb 0c                	jmp    c0000571 <int_common_stub>

c0000565 <isr96>:
c0000565:	6a 00                	push   0x0
c0000567:	6a 60                	push   0x60
c0000569:	fb                   	sti    
c000056a:	eb 05                	jmp    c0000571 <int_common_stub>

c000056c <irq0>:
c000056c:	fa                   	cli    
c000056d:	6a 00                	push   0x0
c000056f:	6a 20                	push   0x20

c0000571 <int_common_stub>:
c0000571:	60                   	pusha  
c0000572:	1e                   	push   ds
c0000573:	06                   	push   es
c0000574:	0f a0                	push   fs
c0000576:	0f a8                	push   gs
c0000578:	66 b8 10 00          	mov    ax,0x10
c000057c:	66 8e d8             	mov    ds,ax
c000057f:	66 8e c0             	mov    es,ax
c0000582:	66 8e e0             	mov    fs,ax
c0000585:	66 8e e8             	mov    gs,ax
c0000588:	54                   	push   esp
c0000589:	e8 8d 3d 01 00       	call   c001431b <int_handler>
c000058e:	81 c4 04 00 00 00    	add    esp,0x4
c0000594:	0f a9                	pop    gs
c0000596:	0f a1                	pop    fs
c0000598:	07                   	pop    es
c0000599:	1f                   	pop    ds
c000059a:	61                   	popa   
c000059b:	81 c4 08 00 00 00    	add    esp,0x8
c00005a1:	cf                   	iret   

c00005a2 <irq16>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 30                	push   0x30
c00005a7:	e9 c5 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ac <irq17>:
c00005ac:	fa                   	cli    
c00005ad:	6a 00                	push   0x0
c00005af:	6a 31                	push   0x31
c00005b1:	e9 bb ff ff ff       	jmp    c0000571 <int_common_stub>

c00005b6 <irq18>:
c00005b6:	fa                   	cli    
c00005b7:	6a 00                	push   0x0
c00005b9:	6a 32                	push   0x32
c00005bb:	e9 b1 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005c0 <irq19>:
c00005c0:	fa                   	cli    
c00005c1:	6a 00                	push   0x0
c00005c3:	6a 33                	push   0x33
c00005c5:	e9 a7 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ca <irq20>:
c00005ca:	fa                   	cli    
c00005cb:	6a 00                	push   0x0
c00005cd:	6a 34                	push   0x34
c00005cf:	e9 9d ff ff ff       	jmp    c0000571 <int_common_stub>

c00005d4 <irq21>:
c00005d4:	fa                   	cli    
c00005d5:	6a 00                	push   0x0
c00005d7:	6a 35                	push   0x35
c00005d9:	e9 93 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005de <irq22>:
c00005de:	fa                   	cli    
c00005df:	6a 00                	push   0x0
c00005e1:	6a 36                	push   0x36
c00005e3:	e9 89 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005e8 <irq23>:
c00005e8:	fa                   	cli    
c00005e9:	6a 00                	push   0x0
c00005eb:	6a 37                	push   0x37
c00005ed:	e9 7f ff ff ff       	jmp    c0000571 <int_common_stub>

c00005f2 <memcmp>:
c00005f2:	56                   	push   esi
c00005f3:	53                   	push   ebx
c00005f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000600:	01 d6                	add    esi,edx
c0000602:	39 f2                	cmp    edx,esi
c0000604:	74 0e                	je     c0000614 <memcmp+0x22>
c0000606:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000609:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000060c:	38 c8                	cmp    al,cl
c000060e:	75 08                	jne    c0000618 <memcmp+0x26>
c0000610:	42                   	inc    edx
c0000611:	43                   	inc    ebx
c0000612:	eb ee                	jmp    c0000602 <memcmp+0x10>
c0000614:	31 c0                	xor    eax,eax
c0000616:	eb 02                	jmp    c000061a <memcmp+0x28>
c0000618:	29 c8                	sub    eax,ecx
c000061a:	5b                   	pop    ebx
c000061b:	5e                   	pop    esi
c000061c:	c3                   	ret    

c000061d <memmove>:
c000061d:	56                   	push   esi
c000061e:	53                   	push   ebx
c000061f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000623:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000062b:	39 c8                	cmp    eax,ecx
c000062d:	73 12                	jae    c0000641 <memmove+0x24>
c000062f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000632:	89 c3                	mov    ebx,eax
c0000634:	39 f1                	cmp    ecx,esi
c0000636:	74 1a                	je     c0000652 <memmove+0x35>
c0000638:	8a 11                	mov    dl,BYTE PTR [ecx]
c000063a:	43                   	inc    ebx
c000063b:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000063e:	41                   	inc    ecx
c000063f:	eb f3                	jmp    c0000634 <memmove+0x17>
c0000641:	76 0f                	jbe    c0000652 <memmove+0x35>
c0000643:	85 d2                	test   edx,edx
c0000645:	74 0b                	je     c0000652 <memmove+0x35>
c0000647:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000064b:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000064f:	4a                   	dec    edx
c0000650:	eb f1                	jmp    c0000643 <memmove+0x26>
c0000652:	5b                   	pop    ebx
c0000653:	5e                   	pop    esi
c0000654:	c3                   	ret    

c0000655 <memcpy>:
c0000655:	57                   	push   edi
c0000656:	56                   	push   esi
c0000657:	53                   	push   ebx
c0000658:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000065c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000660:	89 da                	mov    edx,ebx
c0000662:	89 d9                	mov    ecx,ebx
c0000664:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000668:	83 e2 fc             	and    edx,0xfffffffc
c000066b:	c1 e9 02             	shr    ecx,0x2
c000066e:	89 c7                	mov    edi,eax
c0000670:	fc                   	cld    
c0000671:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000673:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000676:	01 c2                	add    edx,eax
c0000678:	01 de                	add    esi,ebx
c000067a:	39 f1                	cmp    ecx,esi
c000067c:	74 09                	je     c0000687 <memcpy+0x32>
c000067e:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000680:	42                   	inc    edx
c0000681:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000684:	41                   	inc    ecx
c0000685:	eb f3                	jmp    c000067a <memcpy+0x25>
c0000687:	5b                   	pop    ebx
c0000688:	5e                   	pop    esi
c0000689:	5f                   	pop    edi
c000068a:	c3                   	ret    

c000068b <memset>:
c000068b:	53                   	push   ebx
c000068c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000694:	89 c2                	mov    edx,eax
c0000696:	01 c1                	add    ecx,eax
c0000698:	39 ca                	cmp    edx,ecx
c000069a:	74 0a                	je     c00006a6 <memset+0x1b>
c000069c:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006a0:	42                   	inc    edx
c00006a1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006a4:	eb f2                	jmp    c0000698 <memset+0xd>
c00006a6:	5b                   	pop    ebx
c00006a7:	c3                   	ret    

c00006a8 <strlen>:
c00006a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006ac:	31 c0                	xor    eax,eax
c00006ae:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b2:	74 03                	je     c00006b7 <strlen+0xf>
c00006b4:	40                   	inc    eax
c00006b5:	eb f7                	jmp    c00006ae <strlen+0x6>
c00006b7:	c3                   	ret    

c00006b8 <strpbrk>:
c00006b8:	53                   	push   ebx
c00006b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bd:	8a 08                	mov    cl,BYTE PTR [eax]
c00006bf:	84 c9                	test   cl,cl
c00006c1:	74 14                	je     c00006d7 <strpbrk+0x1f>
c00006c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006c7:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006c9:	84 db                	test   bl,bl
c00006cb:	74 07                	je     c00006d4 <strpbrk+0x1c>
c00006cd:	38 cb                	cmp    bl,cl
c00006cf:	74 08                	je     c00006d9 <strpbrk+0x21>
c00006d1:	42                   	inc    edx
c00006d2:	eb f3                	jmp    c00006c7 <strpbrk+0xf>
c00006d4:	40                   	inc    eax
c00006d5:	eb e6                	jmp    c00006bd <strpbrk+0x5>
c00006d7:	31 c0                	xor    eax,eax
c00006d9:	5b                   	pop    ebx
c00006da:	c3                   	ret    

c00006db <strtok>:
c00006db:	56                   	push   esi
c00006dc:	53                   	push   ebx
c00006dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006e5:	85 db                	test   ebx,ebx
c00006e7:	75 0e                	jne    c00006f7 <strtok+0x1c>
c00006e9:	8b 1d 28 c4 02 c0    	mov    ebx,DWORD PTR ds:0xc002c428
c00006ef:	85 db                	test   ebx,ebx
c00006f1:	75 04                	jne    c00006f7 <strtok+0x1c>
c00006f3:	31 db                	xor    ebx,ebx
c00006f5:	eb 2e                	jmp    c0000725 <strtok+0x4a>
c00006f7:	56                   	push   esi
c00006f8:	53                   	push   ebx
c00006f9:	e8 ba ff ff ff       	call   c00006b8 <strpbrk>
c00006fe:	5a                   	pop    edx
c00006ff:	a3 28 c4 02 c0       	mov    ds:0xc002c428,eax
c0000704:	59                   	pop    ecx
c0000705:	a1 28 c4 02 c0       	mov    eax,ds:0xc002c428
c000070a:	39 d8                	cmp    eax,ebx
c000070c:	75 07                	jne    c0000715 <strtok+0x3a>
c000070e:	43                   	inc    ebx
c000070f:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000713:	eb e2                	jmp    c00006f7 <strtok+0x1c>
c0000715:	85 c0                	test   eax,eax
c0000717:	74 da                	je     c00006f3 <strtok+0x18>
c0000719:	8d 50 01             	lea    edx,[eax+0x1]
c000071c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071f:	89 15 28 c4 02 c0    	mov    DWORD PTR ds:0xc002c428,edx
c0000725:	89 d8                	mov    eax,ebx
c0000727:	5b                   	pop    ebx
c0000728:	5e                   	pop    esi
c0000729:	c3                   	ret    

c000072a <strcpy>:
c000072a:	53                   	push   ebx
c000072b:	31 d2                	xor    edx,edx
c000072d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000735:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000738:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000073b:	84 c9                	test   cl,cl
c000073d:	74 06                	je     c0000745 <strcpy+0x1b>
c000073f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000742:	42                   	inc    edx
c0000743:	eb ec                	jmp    c0000731 <strcpy+0x7>
c0000745:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000748:	5b                   	pop    ebx
c0000749:	c3                   	ret    

c000074a <strncpy>:
c000074a:	56                   	push   esi
c000074b:	53                   	push   ebx
c000074c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000750:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000754:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000758:	89 c3                	mov    ebx,eax
c000075a:	85 c9                	test   ecx,ecx
c000075c:	74 1a                	je     c0000778 <strncpy+0x2e>
c000075e:	46                   	inc    esi
c000075f:	43                   	inc    ebx
c0000760:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000763:	49                   	dec    ecx
c0000764:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000767:	84 d2                	test   dl,dl
c0000769:	75 ef                	jne    c000075a <strncpy+0x10>
c000076b:	31 d2                	xor    edx,edx
c000076d:	39 d1                	cmp    ecx,edx
c000076f:	74 07                	je     c0000778 <strncpy+0x2e>
c0000771:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000775:	42                   	inc    edx
c0000776:	eb f5                	jmp    c000076d <strncpy+0x23>
c0000778:	5b                   	pop    ebx
c0000779:	5e                   	pop    esi
c000077a:	c3                   	ret    

c000077b <strcmp>:
c000077b:	31 c9                	xor    ecx,ecx
c000077d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000781:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000785:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000789:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000078d:	38 d0                	cmp    al,dl
c000078f:	75 08                	jne    c0000799 <strcmp+0x1e>
c0000791:	41                   	inc    ecx
c0000792:	84 c0                	test   al,al
c0000794:	75 e7                	jne    c000077d <strcmp+0x2>
c0000796:	31 c0                	xor    eax,eax
c0000798:	c3                   	ret    
c0000799:	29 d0                	sub    eax,edx
c000079b:	c3                   	ret    

c000079c <strchr>:
c000079c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007a0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007a2:	84 d2                	test   dl,dl
c00007a4:	74 09                	je     c00007af <strchr+0x13>
c00007a6:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007aa:	74 05                	je     c00007b1 <strchr+0x15>
c00007ac:	40                   	inc    eax
c00007ad:	eb f1                	jmp    c00007a0 <strchr+0x4>
c00007af:	31 c0                	xor    eax,eax
c00007b1:	c3                   	ret    

c00007b2 <strncmp>:
c00007b2:	56                   	push   esi
c00007b3:	53                   	push   ebx
c00007b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c0:	01 d6                	add    esi,edx
c00007c2:	39 f2                	cmp    edx,esi
c00007c4:	74 12                	je     c00007d8 <strncmp+0x26>
c00007c6:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007c9:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007cc:	38 c8                	cmp    al,cl
c00007ce:	75 0c                	jne    c00007dc <strncmp+0x2a>
c00007d0:	42                   	inc    edx
c00007d1:	84 c0                	test   al,al
c00007d3:	74 03                	je     c00007d8 <strncmp+0x26>
c00007d5:	43                   	inc    ebx
c00007d6:	eb ea                	jmp    c00007c2 <strncmp+0x10>
c00007d8:	31 c0                	xor    eax,eax
c00007da:	eb 02                	jmp    c00007de <strncmp+0x2c>
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5b                   	pop    ebx
c00007df:	5e                   	pop    esi
c00007e0:	c3                   	ret    

c00007e1 <strcat>:
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007e6:	89 c1                	mov    ecx,eax
c00007e8:	8d 51 01             	lea    edx,[ecx+0x1]
c00007eb:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007ef:	74 04                	je     c00007f5 <strcat+0x14>
c00007f1:	89 d1                	mov    ecx,edx
c00007f3:	eb f3                	jmp    c00007e8 <strcat+0x7>
c00007f5:	31 d2                	xor    edx,edx
c00007f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007fb:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007fe:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000801:	42                   	inc    edx
c0000802:	84 db                	test   bl,bl
c0000804:	75 f1                	jne    c00007f7 <strcat+0x16>
c0000806:	5b                   	pop    ebx
c0000807:	c3                   	ret    

c0000808 <strncat>:
c0000808:	56                   	push   esi
c0000809:	53                   	push   ebx
c000080a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000080e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000812:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000816:	89 c2                	mov    edx,eax
c0000818:	85 db                	test   ebx,ebx
c000081a:	74 23                	je     c000083f <strncat+0x37>
c000081c:	8d 72 01             	lea    esi,[edx+0x1]
c000081f:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000823:	74 04                	je     c0000829 <strncat+0x21>
c0000825:	89 f2                	mov    edx,esi
c0000827:	eb f3                	jmp    c000081c <strncat+0x14>
c0000829:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000082c:	41                   	inc    ecx
c000082d:	42                   	inc    edx
c000082e:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000831:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000834:	84 db                	test   bl,bl
c0000836:	74 07                	je     c000083f <strncat+0x37>
c0000838:	39 f1                	cmp    ecx,esi
c000083a:	75 f0                	jne    c000082c <strncat+0x24>
c000083c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000083f:	5b                   	pop    ebx
c0000840:	5e                   	pop    esi
c0000841:	c3                   	ret    

c0000842 <strstr>:
c0000842:	57                   	push   edi
c0000843:	56                   	push   esi
c0000844:	53                   	push   ebx
c0000845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000849:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000084d:	57                   	push   edi
c000084e:	e8 55 fe ff ff       	call   c00006a8 <strlen>
c0000853:	59                   	pop    ecx
c0000854:	89 c6                	mov    esi,eax
c0000856:	85 c0                	test   eax,eax
c0000858:	74 1f                	je     c0000879 <strstr+0x37>
c000085a:	53                   	push   ebx
c000085b:	e8 48 fe ff ff       	call   c00006a8 <strlen>
c0000860:	5a                   	pop    edx
c0000861:	39 f0                	cmp    eax,esi
c0000863:	72 12                	jb     c0000877 <strstr+0x35>
c0000865:	56                   	push   esi
c0000866:	57                   	push   edi
c0000867:	53                   	push   ebx
c0000868:	e8 85 fd ff ff       	call   c00005f2 <memcmp>
c000086d:	83 c4 0c             	add    esp,0xc
c0000870:	85 c0                	test   eax,eax
c0000872:	74 05                	je     c0000879 <strstr+0x37>
c0000874:	43                   	inc    ebx
c0000875:	eb e3                	jmp    c000085a <strstr+0x18>
c0000877:	31 db                	xor    ebx,ebx
c0000879:	89 d8                	mov    eax,ebx
c000087b:	5b                   	pop    ebx
c000087c:	5e                   	pop    esi
c000087d:	5f                   	pop    edi
c000087e:	c3                   	ret    

c000087f <toupper>:
c000087f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000883:	0f b6 d0             	movzx  edx,al
c0000886:	f6 82 e0 7a 02 c0 02 	test   BYTE PTR [edx-0x3ffd8520],0x2
c000088d:	74 03                	je     c0000892 <toupper+0x13>
c000088f:	83 e8 20             	sub    eax,0x20
c0000892:	c3                   	ret    

c0000893 <tolower>:
c0000893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000897:	0f b6 d0             	movzx  edx,al
c000089a:	f6 82 e0 7a 02 c0 01 	test   BYTE PTR [edx-0x3ffd8520],0x1
c00008a1:	74 03                	je     c00008a6 <tolower+0x13>
c00008a3:	83 c0 20             	add    eax,0x20
c00008a6:	c3                   	ret    

c00008a7 <simple_strtoul>:
c00008a7:	55                   	push   ebp
c00008a8:	57                   	push   edi
c00008a9:	56                   	push   esi
c00008aa:	53                   	push   ebx
c00008ab:	83 ec 08             	sub    esp,0x8
c00008ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008b6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008b9:	f6 82 e0 7a 02 c0 08 	test   BYTE PTR [edx-0x3ffd8520],0x8
c00008c0:	74 03                	je     c00008c5 <simple_strtoul+0x1e>
c00008c2:	41                   	inc    ecx
c00008c3:	eb f1                	jmp    c00008b6 <simple_strtoul+0xf>
c00008c5:	80 fa 09             	cmp    dl,0x9
c00008c8:	74 f8                	je     c00008c2 <simple_strtoul+0x1b>
c00008ca:	80 fa 2d             	cmp    dl,0x2d
c00008cd:	75 0b                	jne    c00008da <simple_strtoul+0x33>
c00008cf:	41                   	inc    ecx
c00008d0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d8:	eb 0e                	jmp    c00008e8 <simple_strtoul+0x41>
c00008da:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008e2:	80 fa 2b             	cmp    dl,0x2b
c00008e5:	75 01                	jne    c00008e8 <simple_strtoul+0x41>
c00008e7:	41                   	inc    ecx
c00008e8:	85 f6                	test   esi,esi
c00008ea:	75 22                	jne    c000090e <simple_strtoul+0x67>
c00008ec:	be 0a 00 00 00       	mov    esi,0xa
c00008f1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008f4:	75 5a                	jne    c0000950 <simple_strtoul+0xa9>
c00008f6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008fa:	50                   	push   eax
c00008fb:	e8 93 ff ff ff       	call   c0000893 <tolower>
c0000900:	5a                   	pop    edx
c0000901:	83 f8 78             	cmp    eax,0x78
c0000904:	74 03                	je     c0000909 <simple_strtoul+0x62>
c0000906:	41                   	inc    ecx
c0000907:	eb 16                	jmp    c000091f <simple_strtoul+0x78>
c0000909:	83 c1 02             	add    ecx,0x2
c000090c:	eb 22                	jmp    c0000930 <simple_strtoul+0x89>
c000090e:	8d 46 fe             	lea    eax,[esi-0x2]
c0000911:	83 f8 22             	cmp    eax,0x22
c0000914:	0f 87 b7 00 00 00    	ja     c00009d1 <simple_strtoul+0x12a>
c000091a:	83 fe 08             	cmp    esi,0x8
c000091d:	75 0c                	jne    c000092b <simple_strtoul+0x84>
c000091f:	be 08 00 00 00       	mov    esi,0x8
c0000924:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000927:	75 27                	jne    c0000950 <simple_strtoul+0xa9>
c0000929:	eb 1f                	jmp    c000094a <simple_strtoul+0xa3>
c000092b:	83 fe 10             	cmp    esi,0x10
c000092e:	75 20                	jne    c0000950 <simple_strtoul+0xa9>
c0000930:	be 10 00 00 00       	mov    esi,0x10
c0000935:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000938:	75 16                	jne    c0000950 <simple_strtoul+0xa9>
c000093a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000093e:	50                   	push   eax
c000093f:	e8 4f ff ff ff       	call   c0000893 <tolower>
c0000944:	5d                   	pop    ebp
c0000945:	83 f8 78             	cmp    eax,0x78
c0000948:	74 03                	je     c000094d <simple_strtoul+0xa6>
c000094a:	41                   	inc    ecx
c000094b:	eb 03                	jmp    c0000950 <simple_strtoul+0xa9>
c000094d:	83 c1 02             	add    ecx,0x2
c0000950:	31 ed                	xor    ebp,ebp
c0000952:	31 db                	xor    ebx,ebx
c0000954:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000095b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000095d:	84 d2                	test   dl,dl
c000095f:	74 27                	je     c0000988 <simple_strtoul+0xe1>
c0000961:	0f b6 fa             	movzx  edi,dl
c0000964:	f6 87 e0 7a 02 c0 04 	test   BYTE PTR [edi-0x3ffd8520],0x4
c000096b:	74 05                	je     c0000972 <simple_strtoul+0xcb>
c000096d:	83 ef 30             	sub    edi,0x30
c0000970:	eb 22                	jmp    c0000994 <simple_strtoul+0xed>
c0000972:	0f be d2             	movsx  edx,dl
c0000975:	52                   	push   edx
c0000976:	e8 04 ff ff ff       	call   c000087f <toupper>
c000097b:	5f                   	pop    edi
c000097c:	0f b6 d0             	movzx  edx,al
c000097f:	f6 82 e0 7a 02 c0 01 	test   BYTE PTR [edx-0x3ffd8520],0x1
c0000986:	75 09                	jne    c0000991 <simple_strtoul+0xea>
c0000988:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000098d:	75 2d                	jne    c00009bc <simple_strtoul+0x115>
c000098f:	eb 57                	jmp    c00009e8 <simple_strtoul+0x141>
c0000991:	8d 78 c9             	lea    edi,[eax-0x37]
c0000994:	39 f7                	cmp    edi,esi
c0000996:	73 f0                	jae    c0000988 <simple_strtoul+0xe1>
c0000998:	31 d2                	xor    edx,edx
c000099a:	89 f8                	mov    eax,edi
c000099c:	f7 d0                	not    eax
c000099e:	f7 f6                	div    esi
c00009a0:	39 d8                	cmp    eax,ebx
c00009a2:	72 0e                	jb     c00009b2 <simple_strtoul+0x10b>
c00009a4:	0f af de             	imul   ebx,esi
c00009a7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009ae:	01 fb                	add    ebx,edi
c00009b0:	eb 07                	jmp    c00009b9 <simple_strtoul+0x112>
c00009b2:	bd 01 00 00 00       	mov    ebp,0x1
c00009b7:	31 db                	xor    ebx,ebx
c00009b9:	41                   	inc    ecx
c00009ba:	eb 9f                	jmp    c000095b <simple_strtoul+0xb4>
c00009bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009bf:	09 d8                	or     eax,ebx
c00009c1:	75 1f                	jne    c00009e2 <simple_strtoul+0x13b>
c00009c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009cb:	31 db                	xor    ebx,ebx
c00009cd:	89 38                	mov    DWORD PTR [eax],edi
c00009cf:	eb 17                	jmp    c00009e8 <simple_strtoul+0x141>
c00009d1:	31 db                	xor    ebx,ebx
c00009d3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009d8:	74 14                	je     c00009ee <simple_strtoul+0x147>
c00009da:	31 ed                	xor    ebp,ebp
c00009dc:	85 c9                	test   ecx,ecx
c00009de:	75 e3                	jne    c00009c3 <simple_strtoul+0x11c>
c00009e0:	31 db                	xor    ebx,ebx
c00009e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e6:	89 08                	mov    DWORD PTR [eax],ecx
c00009e8:	4d                   	dec    ebp
c00009e9:	75 03                	jne    c00009ee <simple_strtoul+0x147>
c00009eb:	83 cb ff             	or     ebx,0xffffffff
c00009ee:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009f3:	75 02                	jne    c00009f7 <simple_strtoul+0x150>
c00009f5:	f7 db                	neg    ebx
c00009f7:	83 c4 08             	add    esp,0x8
c00009fa:	89 d8                	mov    eax,ebx
c00009fc:	5b                   	pop    ebx
c00009fd:	5e                   	pop    esi
c00009fe:	5f                   	pop    edi
c00009ff:	5d                   	pop    ebp
c0000a00:	c3                   	ret    

c0000a01 <largebin_index>:
c0000a01:	89 c2                	mov    edx,eax
c0000a03:	c1 ea 08             	shr    edx,0x8
c0000a06:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a0c:	77 10                	ja     c0000a1e <largebin_index+0x1d>
c0000a0e:	0f bd d2             	bsr    edx,edx
c0000a11:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a14:	d3 e8                	shr    eax,cl
c0000a16:	83 e0 03             	and    eax,0x3
c0000a19:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a1d:	c3                   	ret    
c0000a1e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a23:	c3                   	ret    

c0000a24 <malloc_init_state>:
c0000a24:	53                   	push   ebx
c0000a25:	8d 50 34             	lea    edx,[eax+0x34]
c0000a28:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a2e:	89 d1                	mov    ecx,edx
c0000a30:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a33:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a36:	83 c2 08             	add    edx,0x8
c0000a39:	39 da                	cmp    edx,ebx
c0000a3b:	75 f3                	jne    c0000a30 <malloc_init_state+0xc>
c0000a3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a3f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a49:	83 e2 03             	and    edx,0x3
c0000a4c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a56:	83 ca 48             	or     edx,0x48
c0000a59:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a63:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a6d:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a74:	89 10                	mov    DWORD PTR [eax],edx
c0000a76:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a79:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a83:	5b                   	pop    ebx
c0000a84:	c3                   	ret    

c0000a85 <malloc_consolidate>:
c0000a85:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a87:	85 d2                	test   edx,edx
c0000a89:	0f 84 d8 00 00 00    	je     c0000b67 <malloc_consolidate+0xe2>
c0000a8f:	55                   	push   ebp
c0000a90:	83 e2 fd             	and    edx,0xfffffffd
c0000a93:	57                   	push   edi
c0000a94:	89 c5                	mov    ebp,eax
c0000a96:	56                   	push   esi
c0000a97:	8d 78 34             	lea    edi,[eax+0x34]
c0000a9a:	53                   	push   ebx
c0000a9b:	83 ec 10             	sub    esp,0x10
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aa4:	c1 ea 03             	shr    edx,0x3
c0000aa7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000aab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aaf:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ab2:	85 d2                	test   edx,edx
c0000ab4:	0f 84 98 00 00 00    	je     c0000b52 <malloc_consolidate+0xcd>
c0000aba:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ac1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ac4:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ac7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000acb:	89 f9                	mov    ecx,edi
c0000acd:	83 e1 fe             	and    ecx,0xfffffffe
c0000ad0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ad3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ad6:	83 e3 fc             	and    ebx,0xfffffffc
c0000ad9:	83 e7 01             	and    edi,0x1
c0000adc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000adf:	75 14                	jne    c0000af5 <malloc_consolidate+0x70>
c0000ae1:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ae3:	29 fa                	sub    edx,edi
c0000ae5:	01 f9                	add    ecx,edi
c0000ae7:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000aea:	89 fb                	mov    ebx,edi
c0000aec:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000aef:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000af2:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000af5:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000af8:	74 40                	je     c0000b3a <malloc_consolidate+0xb5>
c0000afa:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000afd:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b00:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b04:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b07:	83 e7 01             	and    edi,0x1
c0000b0a:	75 0e                	jne    c0000b1a <malloc_consolidate+0x95>
c0000b0c:	01 d9                	add    ecx,ebx
c0000b0e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b11:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b14:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b17:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b1a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b1d:	89 ce                	mov    esi,ecx
c0000b1f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b22:	83 ce 01             	or     esi,0x1
c0000b25:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b28:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b2b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b2e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b32:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b35:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b38:	eb 0c                	jmp    c0000b46 <malloc_consolidate+0xc1>
c0000b3a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b43:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b4a:	85 d2                	test   edx,edx
c0000b4c:	0f 85 6f ff ff ff    	jne    c0000ac1 <malloc_consolidate+0x3c>
c0000b52:	83 c5 04             	add    ebp,0x4
c0000b55:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b59:	0f 85 50 ff ff ff    	jne    c0000aaf <malloc_consolidate+0x2a>
c0000b5f:	83 c4 10             	add    esp,0x10
c0000b62:	5b                   	pop    ebx
c0000b63:	5e                   	pop    esi
c0000b64:	5f                   	pop    edi
c0000b65:	5d                   	pop    ebp
c0000b66:	c3                   	ret    
c0000b67:	e9 b8 fe ff ff       	jmp    c0000a24 <malloc_init_state>

c0000b6c <dlfree>:
c0000b6c:	57                   	push   edi
c0000b6d:	56                   	push   esi
c0000b6e:	53                   	push   ebx
c0000b6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b73:	85 db                	test   ebx,ebx
c0000b75:	0f 84 e2 00 00 00    	je     c0000c5d <dlfree+0xf1>
c0000b7b:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b7e:	8b 0d 40 c4 02 c0    	mov    ecx,DWORD PTR ds:0xc002c440
c0000b84:	89 f0                	mov    eax,esi
c0000b86:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b89:	83 e0 fc             	and    eax,0xfffffffc
c0000b8c:	39 c1                	cmp    ecx,eax
c0000b8e:	72 24                	jb     c0000bb4 <dlfree+0x48>
c0000b90:	83 c9 03             	or     ecx,0x3
c0000b93:	c1 e8 03             	shr    eax,0x3
c0000b96:	89 0d 40 c4 02 c0    	mov    DWORD PTR ds:0xc002c440,ecx
c0000b9c:	83 e8 02             	sub    eax,0x2
c0000b9f:	8b 0c 85 44 c4 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3bbc]
c0000ba6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000ba8:	89 14 85 44 c4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3bbc],edx
c0000baf:	e9 a9 00 00 00       	jmp    c0000c5d <dlfree+0xf1>
c0000bb4:	83 e6 02             	and    esi,0x2
c0000bb7:	0f 85 a0 00 00 00    	jne    c0000c5d <dlfree+0xf1>
c0000bbd:	83 c9 01             	or     ecx,0x1
c0000bc0:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bc3:	89 0d 40 c4 02 c0    	mov    DWORD PTR ds:0xc002c440,ecx
c0000bc9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bcc:	83 e1 fc             	and    ecx,0xfffffffc
c0000bcf:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bd3:	75 13                	jne    c0000be8 <dlfree+0x7c>
c0000bd5:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bd8:	29 da                	sub    edx,ebx
c0000bda:	01 d8                	add    eax,ebx
c0000bdc:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bdf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000be2:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000be5:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000be8:	39 35 6c c4 02 c0    	cmp    DWORD PTR ds:0xc002c46c,esi
c0000bee:	74 40                	je     c0000c30 <dlfree+0xc4>
c0000bf0:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000bf4:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000bf7:	80 e3 01             	and    bl,0x1
c0000bfa:	75 0e                	jne    c0000c0a <dlfree+0x9e>
c0000bfc:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bff:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c02:	01 c8                	add    eax,ecx
c0000c04:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c07:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c0a:	8b 0d 7c c4 02 c0    	mov    ecx,DWORD PTR ds:0xc002c47c
c0000c10:	c7 42 0c 74 c4 02 c0 	mov    DWORD PTR [edx+0xc],0xc002c474
c0000c17:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c1a:	89 15 7c c4 02 c0    	mov    DWORD PTR ds:0xc002c47c,edx
c0000c20:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c23:	89 c1                	mov    ecx,eax
c0000c25:	83 c9 01             	or     ecx,0x1
c0000c28:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c2e:	eb 10                	jmp    c0000c40 <dlfree+0xd4>
c0000c30:	01 c8                	add    eax,ecx
c0000c32:	89 c1                	mov    ecx,eax
c0000c34:	83 c9 01             	or     ecx,0x1
c0000c37:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c3a:	89 15 6c c4 02 c0    	mov    DWORD PTR ds:0xc002c46c,edx
c0000c40:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c45:	76 16                	jbe    c0000c5d <dlfree+0xf1>
c0000c47:	f6 05 40 c4 02 c0 02 	test   BYTE PTR ds:0xc002c440,0x2
c0000c4e:	74 0d                	je     c0000c5d <dlfree+0xf1>
c0000c50:	5b                   	pop    ebx
c0000c51:	b8 40 c4 02 c0       	mov    eax,0xc002c440
c0000c56:	5e                   	pop    esi
c0000c57:	5f                   	pop    edi
c0000c58:	e9 28 fe ff ff       	jmp    c0000a85 <malloc_consolidate>
c0000c5d:	5b                   	pop    ebx
c0000c5e:	5e                   	pop    esi
c0000c5f:	5f                   	pop    edi
c0000c60:	c3                   	ret    

c0000c61 <sYSMALLOc>:
c0000c61:	55                   	push   ebp
c0000c62:	57                   	push   edi
c0000c63:	56                   	push   esi
c0000c64:	53                   	push   ebx
c0000c65:	89 d3                	mov    ebx,edx
c0000c67:	83 ec 2c             	sub    esp,0x2c
c0000c6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c6e:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c74:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c77:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c7e:	74 1f                	je     c0000c9f <sYSMALLOc+0x3e>
c0000c80:	89 d8                	mov    eax,ebx
c0000c82:	e8 fe fd ff ff       	call   c0000a85 <malloc_consolidate>
c0000c87:	83 ec 0c             	sub    esp,0xc
c0000c8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c8e:	83 e8 07             	sub    eax,0x7
c0000c91:	50                   	push   eax
c0000c92:	e8 30 02 00 00       	call   c0000ec7 <dlmalloc>
c0000c97:	83 c4 10             	add    esp,0x10
c0000c9a:	e9 20 02 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000c9f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ca2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ca8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cab:	83 e0 fc             	and    eax,0xfffffffc
c0000cae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cb6:	83 c0 10             	add    eax,0x10
c0000cb9:	01 c1                	add    ecx,eax
c0000cbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cc6:	74 04                	je     c0000ccc <sYSMALLOc+0x6b>
c0000cc8:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ccc:	f7 da                	neg    edx
c0000cce:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cd6:	21 d1                	and    ecx,edx
c0000cd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cdc:	7f 07                	jg     c0000ce5 <sYSMALLOc+0x84>
c0000cde:	31 c0                	xor    eax,eax
c0000ce0:	e9 da 01 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000ce5:	83 ec 0c             	sub    esp,0xc
c0000ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cec:	e8 3a e6 00 00       	call   c000f32b <sbrk>
c0000cf1:	83 c4 10             	add    esp,0x10
c0000cf4:	89 c6                	mov    esi,eax
c0000cf6:	83 f8 ff             	cmp    eax,0xffffffff
c0000cf9:	74 e3                	je     c0000cde <sYSMALLOc+0x7d>
c0000cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cff:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d03:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d06:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d0c:	39 f1                	cmp    ecx,esi
c0000d0e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d14:	75 13                	jne    c0000d29 <sYSMALLOc+0xc8>
c0000d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d1a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d1e:	83 c8 01             	or     eax,0x1
c0000d21:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d24:	e9 3e 01 00 00       	jmp    c0000e67 <sYSMALLOc+0x206>
c0000d29:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d2f:	88 d0                	mov    al,dl
c0000d31:	83 e0 01             	and    eax,0x1
c0000d34:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d39:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d3d:	0f 95 c0             	setne  al
c0000d40:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d44:	39 f1                	cmp    ecx,esi
c0000d46:	76 12                	jbe    c0000d5a <sYSMALLOc+0xf9>
c0000d48:	84 c0                	test   al,al
c0000d4a:	74 0e                	je     c0000d5a <sYSMALLOc+0xf9>
c0000d4c:	83 e2 fe             	and    edx,0xfffffffe
c0000d4f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d55:	e9 83 00 00 00       	jmp    c0000ddd <sYSMALLOc+0x17c>
c0000d5a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d5f:	74 7c                	je     c0000ddd <sYSMALLOc+0x17c>
c0000d61:	84 c0                	test   al,al
c0000d63:	74 0c                	je     c0000d71 <sYSMALLOc+0x110>
c0000d65:	89 f0                	mov    eax,esi
c0000d67:	29 c8                	sub    eax,ecx
c0000d69:	01 e8                	add    eax,ebp
c0000d6b:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d71:	89 f2                	mov    edx,esi
c0000d73:	83 e2 07             	and    edx,0x7
c0000d76:	74 0c                	je     c0000d84 <sYSMALLOc+0x123>
c0000d78:	b8 08 00 00 00       	mov    eax,0x8
c0000d7d:	29 d0                	sub    eax,edx
c0000d7f:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d82:	eb 04                	jmp    c0000d88 <sYSMALLOc+0x127>
c0000d84:	89 f5                	mov    ebp,esi
c0000d86:	31 c0                	xor    eax,eax
c0000d88:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d94:	01 c1                	add    ecx,eax
c0000d96:	83 ec 0c             	sub    esp,0xc
c0000d99:	01 f1                	add    ecx,esi
c0000d9b:	01 ca                	add    edx,ecx
c0000d9d:	29 c8                	sub    eax,ecx
c0000d9f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000da3:	01 c2                	add    edx,eax
c0000da5:	52                   	push   edx
c0000da6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000daa:	e8 7c e5 00 00       	call   c000f32b <sbrk>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	83 f8 ff             	cmp    eax,0xffffffff
c0000db5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000db9:	75 0f                	jne    c0000dca <sYSMALLOc+0x169>
c0000dbb:	83 ec 0c             	sub    esp,0xc
c0000dbe:	6a 00                	push   0x0
c0000dc0:	e8 66 e5 00 00       	call   c000f32b <sbrk>
c0000dc5:	83 c4 10             	add    esp,0x10
c0000dc8:	eb 30                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000dca:	39 c6                	cmp    esi,eax
c0000dcc:	76 33                	jbe    c0000e01 <sYSMALLOc+0x1a0>
c0000dce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dd2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dd9:	01 f0                	add    eax,esi
c0000ddb:	eb 1d                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000ddd:	83 ec 0c             	sub    esp,0xc
c0000de0:	89 f5                	mov    ebp,esi
c0000de2:	6a 00                	push   0x0
c0000de4:	e8 42 e5 00 00       	call   c000f32b <sbrk>
c0000de9:	89 c2                	mov    edx,eax
c0000deb:	29 f2                	sub    edx,esi
c0000ded:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000df1:	83 c4 10             	add    esp,0x10
c0000df4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dfa:	31 d2                	xor    edx,edx
c0000dfc:	83 f8 ff             	cmp    eax,0xffffffff
c0000dff:	74 66                	je     c0000e67 <sYSMALLOc+0x206>
c0000e01:	29 e8                	sub    eax,ebp
c0000e03:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e06:	01 d0                	add    eax,edx
c0000e08:	83 c8 01             	or     eax,0x1
c0000e0b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e0e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e14:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e19:	74 4c                	je     c0000e67 <sYSMALLOc+0x206>
c0000e1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e1f:	83 e8 0c             	sub    eax,0xc
c0000e22:	83 e0 f8             	and    eax,0xfffffff8
c0000e25:	89 c2                	mov    edx,eax
c0000e27:	83 ca 01             	or     edx,0x1
c0000e2a:	83 f8 0f             	cmp    eax,0xf
c0000e2d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e30:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e38:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e40:	76 25                	jbe    c0000e67 <sYSMALLOc+0x206>
c0000e42:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e48:	83 ec 0c             	sub    esp,0xc
c0000e4b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e55:	83 c7 08             	add    edi,0x8
c0000e58:	57                   	push   edi
c0000e59:	e8 0e fd ff ff       	call   c0000b6c <dlfree>
c0000e5e:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e64:	83 c4 10             	add    esp,0x10
c0000e67:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e6d:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e73:	73 06                	jae    c0000e7b <sYSMALLOc+0x21a>
c0000e75:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e7b:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e81:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e87:	73 06                	jae    c0000e8f <sYSMALLOc+0x22e>
c0000e89:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e8f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e92:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e95:	83 e2 fc             	and    edx,0xfffffffc
c0000e98:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e9c:	0f 82 3c fe ff ff    	jb     c0000cde <sYSMALLOc+0x7d>
c0000ea2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ea6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ea9:	29 fa                	sub    edx,edi
c0000eab:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000eae:	83 ca 01             	or     edx,0x1
c0000eb1:	89 fb                	mov    ebx,edi
c0000eb3:	83 c0 08             	add    eax,0x8
c0000eb6:	83 cb 01             	or     ebx,0x1
c0000eb9:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ebc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ebf:	83 c4 2c             	add    esp,0x2c
c0000ec2:	5b                   	pop    ebx
c0000ec3:	5e                   	pop    esi
c0000ec4:	5f                   	pop    edi
c0000ec5:	5d                   	pop    ebp
c0000ec6:	c3                   	ret    

c0000ec7 <dlmalloc>:
c0000ec7:	55                   	push   ebp
c0000ec8:	57                   	push   edi
c0000ec9:	56                   	push   esi
c0000eca:	53                   	push   ebx
c0000ecb:	83 ec 1c             	sub    esp,0x1c
c0000ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ed2:	83 f8 df             	cmp    eax,0xffffffdf
c0000ed5:	0f 87 70 03 00 00    	ja     c000124b <dlmalloc+0x384>
c0000edb:	83 c0 0b             	add    eax,0xb
c0000ede:	be 10 00 00 00       	mov    esi,0x10
c0000ee3:	83 f8 0f             	cmp    eax,0xf
c0000ee6:	76 05                	jbe    c0000eed <dlmalloc+0x26>
c0000ee8:	83 e0 f8             	and    eax,0xfffffff8
c0000eeb:	89 c6                	mov    esi,eax
c0000eed:	8b 3d 40 c4 02 c0    	mov    edi,DWORD PTR ds:0xc002c440
c0000ef3:	f7 c7 01 00 00 00    	test   edi,0x1
c0000ef9:	75 17                	jne    c0000f12 <dlmalloc+0x4b>
c0000efb:	85 ff                	test   edi,edi
c0000efd:	0f 85 05 03 00 00    	jne    c0001208 <dlmalloc+0x341>
c0000f03:	b8 40 c4 02 c0       	mov    eax,0xc002c440
c0000f08:	e8 78 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f0d:	e9 f6 02 00 00       	jmp    c0001208 <dlmalloc+0x341>
c0000f12:	39 f7                	cmp    edi,esi
c0000f14:	72 1f                	jb     c0000f35 <dlmalloc+0x6e>
c0000f16:	89 f2                	mov    edx,esi
c0000f18:	c1 ea 03             	shr    edx,0x3
c0000f1b:	83 ea 02             	sub    edx,0x2
c0000f1e:	8b 04 95 44 c4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3bbc]
c0000f25:	85 c0                	test   eax,eax
c0000f27:	74 0c                	je     c0000f35 <dlmalloc+0x6e>
c0000f29:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f2c:	89 0c 95 44 c4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3bbc],ecx
c0000f33:	eb 30                	jmp    c0000f65 <dlmalloc+0x9e>
c0000f35:	89 f0                	mov    eax,esi
c0000f37:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f3d:	77 2e                	ja     c0000f6d <dlmalloc+0xa6>
c0000f3f:	c1 e8 03             	shr    eax,0x3
c0000f42:	8d 14 c5 74 c4 02 c0 	lea    edx,[eax*8-0x3ffd3b8c]
c0000f49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f50:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f53:	39 c3                	cmp    ebx,eax
c0000f55:	74 2e                	je     c0000f85 <dlmalloc+0xbe>
c0000f57:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f5a:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f62:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f65:	83 c0 08             	add    eax,0x8
c0000f68:	e9 e0 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0000f6d:	e8 8f fa ff ff       	call   c0000a01 <largebin_index>
c0000f72:	83 e7 02             	and    edi,0x2
c0000f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f79:	74 0a                	je     c0000f85 <dlmalloc+0xbe>
c0000f7b:	b8 40 c4 02 c0       	mov    eax,0xc002c440
c0000f80:	e8 00 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f85:	8d 46 10             	lea    eax,[esi+0x10]
c0000f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f8c:	8b 1d 80 c4 02 c0    	mov    ebx,DWORD PTR ds:0xc002c480
c0000f92:	81 fb 74 c4 02 c0    	cmp    ebx,0xc002c474
c0000f98:	0f 84 13 01 00 00    	je     c00010b1 <dlmalloc+0x1ea>
c0000f9e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fa1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fa4:	83 e7 fc             	and    edi,0xfffffffc
c0000fa7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fad:	77 4c                	ja     c0000ffb <dlmalloc+0x134>
c0000faf:	3d 74 c4 02 c0       	cmp    eax,0xc002c474
c0000fb4:	75 45                	jne    c0000ffb <dlmalloc+0x134>
c0000fb6:	39 1d 70 c4 02 c0    	cmp    DWORD PTR ds:0xc002c470,ebx
c0000fbc:	75 3d                	jne    c0000ffb <dlmalloc+0x134>
c0000fbe:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fc2:	73 37                	jae    c0000ffb <dlmalloc+0x134>
c0000fc4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fc7:	89 fa                	mov    edx,edi
c0000fc9:	a3 7c c4 02 c0       	mov    ds:0xc002c47c,eax
c0000fce:	a3 80 c4 02 c0       	mov    ds:0xc002c480,eax
c0000fd3:	a3 70 c4 02 c0       	mov    ds:0xc002c470,eax
c0000fd8:	29 f2                	sub    edx,esi
c0000fda:	c7 40 08 74 c4 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c474
c0000fe1:	c7 40 0c 74 c4 02 c0 	mov    DWORD PTR [eax+0xc],0xc002c474
c0000fe8:	83 ce 01             	or     esi,0x1
c0000feb:	89 d1                	mov    ecx,edx
c0000fed:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000ff0:	83 c9 01             	or     ecx,0x1
c0000ff3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000ff6:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000ff9:	eb 15                	jmp    c0001010 <dlmalloc+0x149>
c0000ffb:	a3 80 c4 02 c0       	mov    ds:0xc002c480,eax
c0001000:	39 fe                	cmp    esi,edi
c0001002:	c7 40 08 74 c4 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c474
c0001009:	75 0d                	jne    c0001018 <dlmalloc+0x151>
c000100b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001010:	8d 43 08             	lea    eax,[ebx+0x8]
c0001013:	e9 35 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0001018:	89 f8                	mov    eax,edi
c000101a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001020:	77 19                	ja     c000103b <dlmalloc+0x174>
c0001022:	c1 e8 03             	shr    eax,0x3
c0001025:	8d 14 00             	lea    edx,[eax+eax*1]
c0001028:	83 c2 0d             	add    edx,0xd
c000102b:	8d 2c 95 38 c4 02 c0 	lea    ebp,[edx*4-0x3ffd3bc8]
c0001032:	8b 14 95 40 c4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3bc0]
c0001039:	eb 46                	jmp    c0001081 <dlmalloc+0x1ba>
c000103b:	e8 c1 f9 ff ff       	call   c0000a01 <largebin_index>
c0001040:	8d 14 00             	lea    edx,[eax+eax*1]
c0001043:	83 c2 0d             	add    edx,0xd
c0001046:	8d 0c 95 40 c4 02 c0 	lea    ecx,[edx*4-0x3ffd3bc0]
c000104d:	8b 14 95 40 c4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3bc0]
c0001054:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001057:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000105b:	89 d5                	mov    ebp,edx
c000105d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001061:	74 1e                	je     c0001081 <dlmalloc+0x1ba>
c0001063:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001066:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001069:	77 12                	ja     c000107d <dlmalloc+0x1b6>
c000106b:	83 cf 01             	or     edi,0x1
c000106e:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001071:	76 05                	jbe    c0001078 <dlmalloc+0x1b1>
c0001073:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001076:	eb f6                	jmp    c000106e <dlmalloc+0x1a7>
c0001078:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000107b:	eb 04                	jmp    c0001081 <dlmalloc+0x1ba>
c000107d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001081:	89 c7                	mov    edi,eax
c0001083:	88 c1                	mov    cl,al
c0001085:	c1 ff 05             	sar    edi,0x5
c0001088:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000108c:	bf 01 00 00 00       	mov    edi,0x1
c0001091:	d3 e7                	shl    edi,cl
c0001093:	89 f8                	mov    eax,edi
c0001095:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001099:	09 04 bd 74 c7 02 c0 	or     DWORD PTR [edi*4-0x3ffd388c],eax
c00010a0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010a3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010a6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010a9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010ac:	e9 db fe ff ff       	jmp    c0000f8c <dlmalloc+0xc5>
c00010b1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010b7:	76 78                	jbe    c0001131 <dlmalloc+0x26a>
c00010b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010bd:	8d 04 c5 74 c4 02 c0 	lea    eax,[eax*8-0x3ffd3b8c]
c00010c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ca:	39 ca                	cmp    edx,ecx
c00010cc:	74 63                	je     c0001131 <dlmalloc+0x26a>
c00010ce:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010d1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010d4:	83 e3 fc             	and    ebx,0xfffffffc
c00010d7:	39 de                	cmp    esi,ebx
c00010d9:	77 52                	ja     c000112d <dlmalloc+0x266>
c00010db:	89 df                	mov    edi,ebx
c00010dd:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010e0:	29 f7                	sub    edi,esi
c00010e2:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010e5:	01 d3                	add    ebx,edx
c00010e7:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010ea:	83 ff 0f             	cmp    edi,0xf
c00010ed:	8d 42 08             	lea    eax,[edx+0x8]
c00010f0:	77 09                	ja     c00010fb <dlmalloc+0x234>
c00010f2:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010f6:	e9 52 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c00010fb:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010fe:	83 ce 01             	or     esi,0x1
c0001101:	89 0d 7c c4 02 c0    	mov    DWORD PTR ds:0xc002c47c,ecx
c0001107:	89 0d 80 c4 02 c0    	mov    DWORD PTR ds:0xc002c480,ecx
c000110d:	c7 41 08 74 c4 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002c474
c0001114:	c7 41 0c 74 c4 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002c474
c000111b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000111e:	89 fa                	mov    edx,edi
c0001120:	83 ca 01             	or     edx,0x1
c0001123:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001126:	89 3b                	mov    DWORD PTR [ebx],edi
c0001128:	e9 20 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c000112d:	89 c2                	mov    edx,eax
c000112f:	eb 99                	jmp    c00010ca <dlmalloc+0x203>
c0001131:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001135:	b8 01 00 00 00       	mov    eax,0x1
c000113a:	41                   	inc    ecx
c000113b:	89 cb                	mov    ebx,ecx
c000113d:	8d 14 cd 6c c4 02 c0 	lea    edx,[ecx*8-0x3ffd3b94]
c0001144:	c1 eb 05             	shr    ebx,0x5
c0001147:	d3 e0                	shl    eax,cl
c0001149:	8b 3c 9d 74 c7 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd388c]
c0001150:	39 f8                	cmp    eax,edi
c0001152:	77 04                	ja     c0001158 <dlmalloc+0x291>
c0001154:	85 c0                	test   eax,eax
c0001156:	75 26                	jne    c000117e <dlmalloc+0x2b7>
c0001158:	43                   	inc    ebx
c0001159:	83 fb 02             	cmp    ebx,0x2
c000115c:	0f 87 a6 00 00 00    	ja     c0001208 <dlmalloc+0x341>
c0001162:	8b 3c 9d 74 c7 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd388c]
c0001169:	85 ff                	test   edi,edi
c000116b:	74 eb                	je     c0001158 <dlmalloc+0x291>
c000116d:	89 d8                	mov    eax,ebx
c000116f:	c1 e0 06             	shl    eax,0x6
c0001172:	8d 14 85 6c c4 02 c0 	lea    edx,[eax*4-0x3ffd3b94]
c0001179:	b8 01 00 00 00       	mov    eax,0x1
c000117e:	85 f8                	test   eax,edi
c0001180:	75 07                	jne    c0001189 <dlmalloc+0x2c2>
c0001182:	83 c2 08             	add    edx,0x8
c0001185:	01 c0                	add    eax,eax
c0001187:	eb f5                	jmp    c000117e <dlmalloc+0x2b7>
c0001189:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000118c:	39 ca                	cmp    edx,ecx
c000118e:	75 14                	jne    c00011a4 <dlmalloc+0x2dd>
c0001190:	89 c1                	mov    ecx,eax
c0001192:	83 c2 08             	add    edx,0x8
c0001195:	f7 d1                	not    ecx
c0001197:	01 c0                	add    eax,eax
c0001199:	21 cf                	and    edi,ecx
c000119b:	89 3c 9d 74 c7 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd388c],edi
c00011a2:	eb ac                	jmp    c0001150 <dlmalloc+0x289>
c00011a4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011a7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011aa:	83 e0 fc             	and    eax,0xfffffffc
c00011ad:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011b0:	89 c3                	mov    ebx,eax
c00011b2:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011b5:	29 f3                	sub    ebx,esi
c00011b7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ba:	83 fb 0f             	cmp    ebx,0xf
c00011bd:	8d 41 08             	lea    eax,[ecx+0x8]
c00011c0:	77 09                	ja     c00011cb <dlmalloc+0x304>
c00011c2:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011c6:	e9 82 00 00 00       	jmp    c000124d <dlmalloc+0x386>
c00011cb:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d4:	89 3d 7c c4 02 c0    	mov    DWORD PTR ds:0xc002c47c,edi
c00011da:	89 3d 80 c4 02 c0    	mov    DWORD PTR ds:0xc002c480,edi
c00011e0:	c7 47 08 74 c4 02 c0 	mov    DWORD PTR [edi+0x8],0xc002c474
c00011e7:	c7 47 0c 74 c4 02 c0 	mov    DWORD PTR [edi+0xc],0xc002c474
c00011ee:	77 06                	ja     c00011f6 <dlmalloc+0x32f>
c00011f0:	89 3d 70 c4 02 c0    	mov    DWORD PTR ds:0xc002c470,edi
c00011f6:	83 ce 01             	or     esi,0x1
c00011f9:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011fc:	89 d9                	mov    ecx,ebx
c00011fe:	83 c9 01             	or     ecx,0x1
c0001201:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001204:	89 1a                	mov    DWORD PTR [edx],ebx
c0001206:	eb 45                	jmp    c000124d <dlmalloc+0x386>
c0001208:	a1 6c c4 02 c0       	mov    eax,ds:0xc002c46c
c000120d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001210:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001213:	83 e2 fc             	and    edx,0xfffffffc
c0001216:	39 d1                	cmp    ecx,edx
c0001218:	77 1e                	ja     c0001238 <dlmalloc+0x371>
c000121a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000121d:	89 f3                	mov    ebx,esi
c000121f:	89 0d 6c c4 02 c0    	mov    DWORD PTR ds:0xc002c46c,ecx
c0001225:	83 cb 01             	or     ebx,0x1
c0001228:	29 f2                	sub    edx,esi
c000122a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000122d:	83 ca 01             	or     edx,0x1
c0001230:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001233:	e9 2d fd ff ff       	jmp    c0000f65 <dlmalloc+0x9e>
c0001238:	83 c4 1c             	add    esp,0x1c
c000123b:	89 f0                	mov    eax,esi
c000123d:	5b                   	pop    ebx
c000123e:	ba 40 c4 02 c0       	mov    edx,0xc002c440
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	e9 16 fa ff ff       	jmp    c0000c61 <sYSMALLOc>
c000124b:	31 c0                	xor    eax,eax
c000124d:	83 c4 1c             	add    esp,0x1c
c0001250:	5b                   	pop    ebx
c0001251:	5e                   	pop    esi
c0001252:	5f                   	pop    edi
c0001253:	5d                   	pop    ebp
c0001254:	c3                   	ret    

c0001255 <iALLOc>:
c0001255:	55                   	push   ebp
c0001256:	89 c5                	mov    ebp,eax
c0001258:	57                   	push   edi
c0001259:	56                   	push   esi
c000125a:	53                   	push   ebx
c000125b:	83 ec 2c             	sub    esp,0x2c
c000125e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001262:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001266:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000126a:	83 3d 40 c4 02 c0 00 	cmp    DWORD PTR ds:0xc002c440,0x0
c0001271:	75 12                	jne    c0001285 <iALLOc+0x30>
c0001273:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001277:	b8 40 c4 02 c0       	mov    eax,0xc002c440
c000127c:	e8 04 f8 ff ff       	call   c0000a85 <malloc_consolidate>
c0001281:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001285:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000128a:	74 12                	je     c000129e <iALLOc+0x49>
c000128c:	85 ed                	test   ebp,ebp
c000128e:	0f 84 64 01 00 00    	je     c00013f8 <iALLOc+0x1a3>
c0001294:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000129c:	eb 33                	jmp    c00012d1 <iALLOc+0x7c>
c000129e:	85 ed                	test   ebp,ebp
c00012a0:	75 14                	jne    c00012b6 <iALLOc+0x61>
c00012a2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012aa:	83 c4 2c             	add    esp,0x2c
c00012ad:	5b                   	pop    ebx
c00012ae:	5e                   	pop    esi
c00012af:	5f                   	pop    edi
c00012b0:	5d                   	pop    ebp
c00012b1:	e9 11 fc ff ff       	jmp    c0000ec7 <dlmalloc>
c00012b6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012bd:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012c5:	83 f8 0f             	cmp    eax,0xf
c00012c8:	76 07                	jbe    c00012d1 <iALLOc+0x7c>
c00012ca:	83 e0 f8             	and    eax,0xfffffff8
c00012cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012d1:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012d6:	75 09                	jne    c00012e1 <iALLOc+0x8c>
c00012d8:	89 d0                	mov    eax,edx
c00012da:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012dd:	31 f6                	xor    esi,esi
c00012df:	eb 3b                	jmp    c000131c <iALLOc+0xc7>
c00012e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00012e3:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012eb:	83 c0 0b             	add    eax,0xb
c00012ee:	83 f8 0f             	cmp    eax,0xf
c00012f1:	76 07                	jbe    c00012fa <iALLOc+0xa5>
c00012f3:	83 e0 f8             	and    eax,0xfffffff8
c00012f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012fe:	0f af f5             	imul   esi,ebp
c0001301:	eb 25                	jmp    c0001328 <iALLOc+0xd3>
c0001303:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001305:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001308:	bb 10 00 00 00       	mov    ebx,0x10
c000130d:	83 f9 0f             	cmp    ecx,0xf
c0001310:	76 05                	jbe    c0001317 <iALLOc+0xc2>
c0001312:	83 e1 f8             	and    ecx,0xfffffff8
c0001315:	89 cb                	mov    ebx,ecx
c0001317:	01 de                	add    esi,ebx
c0001319:	83 c0 04             	add    eax,0x4
c000131c:	39 c7                	cmp    edi,eax
c000131e:	75 e3                	jne    c0001303 <iALLOc+0xae>
c0001320:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000132c:	8b 1d 94 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c794
c0001332:	83 ec 0c             	sub    esp,0xc
c0001335:	c7 05 94 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c794,0x0
c000133f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001343:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001347:	50                   	push   eax
c0001348:	e8 7a fb ff ff       	call   c0000ec7 <dlmalloc>
c000134d:	83 c4 10             	add    esp,0x10
c0001350:	89 1d 94 c7 02 c0    	mov    DWORD PTR ds:0xc002c794,ebx
c0001356:	85 c0                	test   eax,eax
c0001358:	0f 84 92 00 00 00    	je     c00013f0 <iALLOc+0x19b>
c000135e:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001361:	8d 78 f8             	lea    edi,[eax-0x8]
c0001364:	83 e3 fc             	and    ebx,0xfffffffc
c0001367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000136b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001370:	74 1e                	je     c0001390 <iALLOc+0x13b>
c0001372:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001376:	89 d9                	mov    ecx,ebx
c0001378:	52                   	push   edx
c0001379:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000137d:	83 e9 04             	sub    ecx,0x4
c0001380:	51                   	push   ecx
c0001381:	6a 00                	push   0x0
c0001383:	50                   	push   eax
c0001384:	e8 02 f3 ff ff       	call   c000068b <memset>
c0001389:	83 c4 10             	add    esp,0x10
c000138c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001390:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001395:	75 14                	jne    c00013ab <iALLOc+0x156>
c0001397:	8d 04 37             	lea    eax,[edi+esi*1]
c000139a:	29 f3                	sub    ebx,esi
c000139c:	8d 48 08             	lea    ecx,[eax+0x8]
c000139f:	83 cb 01             	or     ebx,0x1
c00013a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013a6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013a9:	89 f3                	mov    ebx,esi
c00013ab:	31 c0                	xor    eax,eax
c00013ad:	4d                   	dec    ebp
c00013ae:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013b1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013b5:	39 c5                	cmp    ebp,eax
c00013b7:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ba:	74 2c                	je     c00013e8 <iALLOc+0x193>
c00013bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013c0:	85 c9                	test   ecx,ecx
c00013c2:	75 15                	jne    c00013d9 <iALLOc+0x184>
c00013c4:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013c7:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013ca:	b9 10 00 00 00       	mov    ecx,0x10
c00013cf:	83 fe 0f             	cmp    esi,0xf
c00013d2:	76 05                	jbe    c00013d9 <iALLOc+0x184>
c00013d4:	83 e6 f8             	and    esi,0xfffffff8
c00013d7:	89 f1                	mov    ecx,esi
c00013d9:	89 ce                	mov    esi,ecx
c00013db:	29 cb                	sub    ebx,ecx
c00013dd:	83 ce 01             	or     esi,0x1
c00013e0:	40                   	inc    eax
c00013e1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013e4:	01 cf                	add    edi,ecx
c00013e6:	eb c6                	jmp    c00013ae <iALLOc+0x159>
c00013e8:	83 cb 01             	or     ebx,0x1
c00013eb:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013ee:	eb 08                	jmp    c00013f8 <iALLOc+0x1a3>
c00013f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013fc:	83 c4 2c             	add    esp,0x2c
c00013ff:	5b                   	pop    ebx
c0001400:	5e                   	pop    esi
c0001401:	5f                   	pop    edi
c0001402:	5d                   	pop    ebp
c0001403:	c3                   	ret    

c0001404 <dlrealloc>:
c0001404:	55                   	push   ebp
c0001405:	57                   	push   edi
c0001406:	56                   	push   esi
c0001407:	53                   	push   ebx
c0001408:	83 ec 1c             	sub    esp,0x1c
c000140b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000140f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001413:	85 db                	test   ebx,ebx
c0001415:	75 10                	jne    c0001427 <dlrealloc+0x23>
c0001417:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000141b:	83 c4 1c             	add    esp,0x1c
c000141e:	5b                   	pop    ebx
c000141f:	5e                   	pop    esi
c0001420:	5f                   	pop    edi
c0001421:	5d                   	pop    ebp
c0001422:	e9 a0 fa ff ff       	jmp    c0000ec7 <dlmalloc>
c0001427:	83 f8 df             	cmp    eax,0xffffffdf
c000142a:	76 07                	jbe    c0001433 <dlrealloc+0x2f>
c000142c:	31 db                	xor    ebx,ebx
c000142e:	e9 7c 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c0001433:	83 c0 0b             	add    eax,0xb
c0001436:	bf 10 00 00 00       	mov    edi,0x10
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 05                	jbe    c0001445 <dlrealloc+0x41>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 c7                	mov    edi,eax
c0001445:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001448:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000144b:	89 c6                	mov    esi,eax
c000144d:	83 e6 fc             	and    esi,0xfffffffc
c0001450:	a8 02                	test   al,0x2
c0001452:	75 d8                	jne    c000142c <dlrealloc+0x28>
c0001454:	39 f7                	cmp    edi,esi
c0001456:	0f 86 15 01 00 00    	jbe    c0001571 <dlrealloc+0x16d>
c000145c:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001460:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001463:	39 15 6c c4 02 c0    	cmp    DWORD PTR ds:0xc002c46c,edx
c0001469:	75 33                	jne    c000149e <dlrealloc+0x9a>
c000146b:	83 e1 fc             	and    ecx,0xfffffffc
c000146e:	01 f1                	add    ecx,esi
c0001470:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001474:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001477:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000147b:	77 49                	ja     c00014c6 <dlrealloc+0xc2>
c000147d:	01 fd                	add    ebp,edi
c000147f:	83 e0 01             	and    eax,0x1
c0001482:	09 f8                	or     eax,edi
c0001484:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001487:	89 2d 6c c4 02 c0    	mov    DWORD PTR ds:0xc002c46c,ebp
c000148d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001491:	29 f8                	sub    eax,edi
c0001493:	83 c8 01             	or     eax,0x1
c0001496:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001499:	e9 11 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c000149e:	89 c8                	mov    eax,ecx
c00014a0:	83 e0 fe             	and    eax,0xfffffffe
c00014a3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014a8:	75 1c                	jne    c00014c6 <dlrealloc+0xc2>
c00014aa:	83 e1 fc             	and    ecx,0xfffffffc
c00014ad:	01 f1                	add    ecx,esi
c00014af:	39 cf                	cmp    edi,ecx
c00014b1:	77 13                	ja     c00014c6 <dlrealloc+0xc2>
c00014b3:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014b6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014b9:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014bc:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014bf:	89 ce                	mov    esi,ecx
c00014c1:	e9 ab 00 00 00       	jmp    c0001571 <dlrealloc+0x16d>
c00014c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014ca:	8d 47 f9             	lea    eax,[edi-0x7]
c00014cd:	83 ec 0c             	sub    esp,0xc
c00014d0:	50                   	push   eax
c00014d1:	e8 f1 f9 ff ff       	call   c0000ec7 <dlmalloc>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	89 c1                	mov    ecx,eax
c00014db:	85 c0                	test   eax,eax
c00014dd:	0f 84 49 ff ff ff    	je     c000142c <dlrealloc+0x28>
c00014e3:	8d 40 f8             	lea    eax,[eax-0x8]
c00014e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014ea:	39 c2                	cmp    edx,eax
c00014ec:	75 0a                	jne    c00014f8 <dlrealloc+0xf4>
c00014ee:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014f1:	83 e0 fc             	and    eax,0xfffffffc
c00014f4:	01 c6                	add    esi,eax
c00014f6:	eb 79                	jmp    c0001571 <dlrealloc+0x16d>
c00014f8:	83 ee 04             	sub    esi,0x4
c00014fb:	83 fe 27             	cmp    esi,0x27
c00014fe:	76 16                	jbe    c0001516 <dlrealloc+0x112>
c0001500:	50                   	push   eax
c0001501:	56                   	push   esi
c0001502:	53                   	push   ebx
c0001503:	51                   	push   ecx
c0001504:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001508:	e8 48 f1 ff ff       	call   c0000655 <memcpy>
c000150d:	83 c4 10             	add    esp,0x10
c0001510:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001514:	eb 43                	jmp    c0001559 <dlrealloc+0x155>
c0001516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001518:	83 fe 13             	cmp    esi,0x13
c000151b:	89 01                	mov    DWORD PTR [ecx],eax
c000151d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001520:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001523:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001526:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001529:	76 2e                	jbe    c0001559 <dlrealloc+0x155>
c000152b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000152e:	83 fe 1b             	cmp    esi,0x1b
c0001531:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001534:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001537:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000153a:	76 1d                	jbe    c0001559 <dlrealloc+0x155>
c000153c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000153f:	83 fe 23             	cmp    esi,0x23
c0001542:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001545:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001548:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000154b:	76 0c                	jbe    c0001559 <dlrealloc+0x155>
c000154d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001550:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001553:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001556:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001559:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000155d:	83 ec 0c             	sub    esp,0xc
c0001560:	53                   	push   ebx
c0001561:	e8 06 f6 ff ff       	call   c0000b6c <dlfree>
c0001566:	83 c4 10             	add    esp,0x10
c0001569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	eb 3e                	jmp    c00015af <dlrealloc+0x1ab>
c0001571:	89 f2                	mov    edx,esi
c0001573:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001576:	29 fa                	sub    edx,edi
c0001578:	83 e1 01             	and    ecx,0x1
c000157b:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c000157f:	83 fa 0f             	cmp    edx,0xf
c0001582:	77 0b                	ja     c000158f <dlrealloc+0x18b>
c0001584:	09 ce                	or     esi,ecx
c0001586:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001589:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000158d:	eb 20                	jmp    c00015af <dlrealloc+0x1ab>
c000158f:	01 fd                	add    ebp,edi
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	09 cf                	or     edi,ecx
c0001596:	83 ca 01             	or     edx,0x1
c0001599:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000159c:	83 c5 08             	add    ebp,0x8
c000159f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015a2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015a6:	55                   	push   ebp
c00015a7:	e8 c0 f5 ff ff       	call   c0000b6c <dlfree>
c00015ac:	83 c4 10             	add    esp,0x10
c00015af:	83 c4 1c             	add    esp,0x1c
c00015b2:	89 d8                	mov    eax,ebx
c00015b4:	5b                   	pop    ebx
c00015b5:	5e                   	pop    esi
c00015b6:	5f                   	pop    edi
c00015b7:	5d                   	pop    ebp
c00015b8:	c3                   	ret    

c00015b9 <dlmemalign>:
c00015b9:	55                   	push   ebp
c00015ba:	57                   	push   edi
c00015bb:	56                   	push   esi
c00015bc:	53                   	push   ebx
c00015bd:	83 ec 0c             	sub    esp,0xc
c00015c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015c8:	83 fa 08             	cmp    edx,0x8
c00015cb:	77 10                	ja     c00015dd <dlmemalign+0x24>
c00015cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015d1:	83 c4 0c             	add    esp,0xc
c00015d4:	5b                   	pop    ebx
c00015d5:	5e                   	pop    esi
c00015d6:	5f                   	pop    edi
c00015d7:	5d                   	pop    ebp
c00015d8:	e9 ea f8 ff ff       	jmp    c0000ec7 <dlmalloc>
c00015dd:	bf 10 00 00 00       	mov    edi,0x10
c00015e2:	83 fa 0f             	cmp    edx,0xf
c00015e5:	76 13                	jbe    c00015fa <dlmemalign+0x41>
c00015e7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015ea:	85 d1                	test   ecx,edx
c00015ec:	75 04                	jne    c00015f2 <dlmemalign+0x39>
c00015ee:	89 d7                	mov    edi,edx
c00015f0:	eb 08                	jmp    c00015fa <dlmemalign+0x41>
c00015f2:	39 d7                	cmp    edi,edx
c00015f4:	73 04                	jae    c00015fa <dlmemalign+0x41>
c00015f6:	01 ff                	add    edi,edi
c00015f8:	eb f8                	jmp    c00015f2 <dlmemalign+0x39>
c00015fa:	83 f8 df             	cmp    eax,0xffffffdf
c00015fd:	76 07                	jbe    c0001606 <dlmemalign+0x4d>
c00015ff:	31 c0                	xor    eax,eax
c0001601:	e9 ce 00 00 00       	jmp    c00016d4 <dlmemalign+0x11b>
c0001606:	83 c0 0b             	add    eax,0xb
c0001609:	bd 10 00 00 00       	mov    ebp,0x10
c000160e:	83 f8 0f             	cmp    eax,0xf
c0001611:	76 05                	jbe    c0001618 <dlmemalign+0x5f>
c0001613:	83 e0 f8             	and    eax,0xfffffff8
c0001616:	89 c5                	mov    ebp,eax
c0001618:	83 ec 0c             	sub    esp,0xc
c000161b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000161f:	50                   	push   eax
c0001620:	e8 a2 f8 ff ff       	call   c0000ec7 <dlmalloc>
c0001625:	83 c4 10             	add    esp,0x10
c0001628:	89 c1                	mov    ecx,eax
c000162a:	85 c0                	test   eax,eax
c000162c:	74 d1                	je     c00015ff <dlmemalign+0x46>
c000162e:	31 d2                	xor    edx,edx
c0001630:	8d 70 f8             	lea    esi,[eax-0x8]
c0001633:	f7 f7                	div    edi
c0001635:	85 d2                	test   edx,edx
c0001637:	74 62                	je     c000169b <dlmemalign+0xe2>
c0001639:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000163d:	89 f8                	mov    eax,edi
c000163f:	f7 d8                	neg    eax
c0001641:	21 c3                	and    ebx,eax
c0001643:	83 eb 08             	sub    ebx,0x8
c0001646:	89 d8                	mov    eax,ebx
c0001648:	29 f0                	sub    eax,esi
c000164a:	83 f8 0f             	cmp    eax,0xf
c000164d:	77 02                	ja     c0001651 <dlmemalign+0x98>
c000164f:	01 fb                	add    ebx,edi
c0001651:	89 d8                	mov    eax,ebx
c0001653:	29 f0                	sub    eax,esi
c0001655:	89 c6                	mov    esi,eax
c0001657:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000165a:	89 c2                	mov    edx,eax
c000165c:	83 e2 fc             	and    edx,0xfffffffc
c000165f:	29 f2                	sub    edx,esi
c0001661:	a8 02                	test   al,0x2
c0001663:	74 10                	je     c0001675 <dlmemalign+0xbc>
c0001665:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001668:	83 ca 02             	or     edx,0x2
c000166b:	8d 43 08             	lea    eax,[ebx+0x8]
c000166e:	89 33                	mov    DWORD PTR [ebx],esi
c0001670:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001673:	eb 5f                	jmp    c00016d4 <dlmemalign+0x11b>
c0001675:	83 ec 0c             	sub    esp,0xc
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 c8 01             	or     eax,0x1
c000167d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001680:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001685:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001688:	83 e0 01             	and    eax,0x1
c000168b:	09 f0                	or     eax,esi
c000168d:	89 de                	mov    esi,ebx
c000168f:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001692:	51                   	push   ecx
c0001693:	e8 d4 f4 ff ff       	call   c0000b6c <dlfree>
c0001698:	83 c4 10             	add    esp,0x10
c000169b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000169e:	a8 02                	test   al,0x2
c00016a0:	75 2f                	jne    c00016d1 <dlmemalign+0x118>
c00016a2:	83 e0 fc             	and    eax,0xfffffffc
c00016a5:	8d 55 10             	lea    edx,[ebp+0x10]
c00016a8:	39 c2                	cmp    edx,eax
c00016aa:	73 25                	jae    c00016d1 <dlmemalign+0x118>
c00016ac:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016af:	83 ec 0c             	sub    esp,0xc
c00016b2:	29 e8                	sub    eax,ebp
c00016b4:	83 c2 08             	add    edx,0x8
c00016b7:	83 c8 01             	or     eax,0x1
c00016ba:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016bd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016c0:	83 e0 01             	and    eax,0x1
c00016c3:	09 c5                	or     ebp,eax
c00016c5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016c8:	52                   	push   edx
c00016c9:	e8 9e f4 ff ff       	call   c0000b6c <dlfree>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	8d 46 08             	lea    eax,[esi+0x8]
c00016d4:	83 c4 0c             	add    esp,0xc
c00016d7:	5b                   	pop    ebx
c00016d8:	5e                   	pop    esi
c00016d9:	5f                   	pop    edi
c00016da:	5d                   	pop    ebp
c00016db:	c3                   	ret    

c00016dc <dlcalloc>:
c00016dc:	53                   	push   ebx
c00016dd:	83 ec 14             	sub    esp,0x14
c00016e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016e4:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016e9:	50                   	push   eax
c00016ea:	e8 d8 f7 ff ff       	call   c0000ec7 <dlmalloc>
c00016ef:	83 c4 10             	add    esp,0x10
c00016f2:	89 c3                	mov    ebx,eax
c00016f4:	85 c0                	test   eax,eax
c00016f6:	74 77                	je     c000176f <dlcalloc+0x93>
c00016f8:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016fb:	89 d0                	mov    eax,edx
c00016fd:	83 e0 fc             	and    eax,0xfffffffc
c0001700:	80 e2 02             	and    dl,0x2
c0001703:	75 5a                	jne    c000175f <dlcalloc+0x83>
c0001705:	83 e8 04             	sub    eax,0x4
c0001708:	83 f8 27             	cmp    eax,0x27
c000170b:	76 03                	jbe    c0001710 <dlcalloc+0x34>
c000170d:	51                   	push   ecx
c000170e:	eb 53                	jmp    c0001763 <dlcalloc+0x87>
c0001710:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001716:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000171d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001724:	83 f8 13             	cmp    eax,0x13
c0001727:	76 46                	jbe    c000176f <dlcalloc+0x93>
c0001729:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001730:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001737:	83 f8 1b             	cmp    eax,0x1b
c000173a:	76 33                	jbe    c000176f <dlcalloc+0x93>
c000173c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001743:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000174a:	83 f8 23             	cmp    eax,0x23
c000174d:	76 20                	jbe    c000176f <dlcalloc+0x93>
c000174f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001756:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000175d:	eb 10                	jmp    c000176f <dlcalloc+0x93>
c000175f:	83 e8 08             	sub    eax,0x8
c0001762:	52                   	push   edx
c0001763:	50                   	push   eax
c0001764:	6a 00                	push   0x0
c0001766:	53                   	push   ebx
c0001767:	e8 1f ef ff ff       	call   c000068b <memset>
c000176c:	83 c4 10             	add    esp,0x10
c000176f:	89 d8                	mov    eax,ebx
c0001771:	83 c4 08             	add    esp,0x8
c0001774:	5b                   	pop    ebx
c0001775:	c3                   	ret    

c0001776 <dlcfree>:
c0001776:	e9 f1 f3 ff ff       	jmp    c0000b6c <dlfree>

c000177b <dlindependent_calloc>:
c000177b:	83 ec 28             	sub    esp,0x28
c000177e:	b9 03 00 00 00       	mov    ecx,0x3
c0001783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001787:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000178b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000178f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001797:	e8 b9 fa ff ff       	call   c0001255 <iALLOc>
c000179c:	83 c4 2c             	add    esp,0x2c
c000179f:	c3                   	ret    

c00017a0 <dlindependent_comalloc>:
c00017a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017a8:	31 c9                	xor    ecx,ecx
c00017aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017b2:	e9 9e fa ff ff       	jmp    c0001255 <iALLOc>

c00017b7 <dlvalloc>:
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	83 3d 40 c4 02 c0 00 	cmp    DWORD PTR ds:0xc002c440,0x0
c00017c1:	75 0a                	jne    c00017cd <dlvalloc+0x16>
c00017c3:	b8 40 c4 02 c0       	mov    eax,0xc002c440
c00017c8:	e8 b8 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017cd:	50                   	push   eax
c00017ce:	50                   	push   eax
c00017cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017d3:	ff 35 9c c7 02 c0    	push   DWORD PTR ds:0xc002c79c
c00017d9:	e8 db fd ff ff       	call   c00015b9 <dlmemalign>
c00017de:	83 c4 1c             	add    esp,0x1c
c00017e1:	c3                   	ret    

c00017e2 <dlpvalloc>:
c00017e2:	83 ec 0c             	sub    esp,0xc
c00017e5:	83 3d 40 c4 02 c0 00 	cmp    DWORD PTR ds:0xc002c440,0x0
c00017ec:	75 0a                	jne    c00017f8 <dlpvalloc+0x16>
c00017ee:	b8 40 c4 02 c0       	mov    eax,0xc002c440
c00017f3:	e8 8d f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017f8:	a1 9c c7 02 c0       	mov    eax,ds:0xc002c79c
c00017fd:	89 c1                	mov    ecx,eax
c00017ff:	52                   	push   edx
c0001800:	f7 d9                	neg    ecx
c0001802:	52                   	push   edx
c0001803:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001807:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000180b:	21 ca                	and    edx,ecx
c000180d:	52                   	push   edx
c000180e:	50                   	push   eax
c000180f:	e8 a5 fd ff ff       	call   c00015b9 <dlmemalign>
c0001814:	83 c4 1c             	add    esp,0x1c
c0001817:	c3                   	ret    

c0001818 <dlmalloc_trim>:
c0001818:	b8 40 c4 02 c0       	mov    eax,0xc002c440
c000181d:	e8 63 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001822:	31 c0                	xor    eax,eax
c0001824:	c3                   	ret    

c0001825 <dlmalloc_usable_size>:
c0001825:	53                   	push   ebx
c0001826:	31 c0                	xor    eax,eax
c0001828:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000182c:	85 c9                	test   ecx,ecx
c000182e:	74 24                	je     c0001854 <dlmalloc_usable_size+0x2f>
c0001830:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001833:	f6 c2 02             	test   dl,0x2
c0001836:	74 08                	je     c0001840 <dlmalloc_usable_size+0x1b>
c0001838:	83 e2 fc             	and    edx,0xfffffffc
c000183b:	8d 42 f8             	lea    eax,[edx-0x8]
c000183e:	eb 14                	jmp    c0001854 <dlmalloc_usable_size+0x2f>
c0001840:	89 d3                	mov    ebx,edx
c0001842:	31 c0                	xor    eax,eax
c0001844:	83 e3 fe             	and    ebx,0xfffffffe
c0001847:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000184c:	74 06                	je     c0001854 <dlmalloc_usable_size+0x2f>
c000184e:	83 e2 fc             	and    edx,0xfffffffc
c0001851:	8d 42 fc             	lea    eax,[edx-0x4]
c0001854:	5b                   	pop    ebx
c0001855:	c3                   	ret    

c0001856 <dlmallinfo>:
c0001856:	55                   	push   ebp
c0001857:	57                   	push   edi
c0001858:	56                   	push   esi
c0001859:	53                   	push   ebx
c000185a:	83 ec 08             	sub    esp,0x8
c000185d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001861:	83 3d 6c c4 02 c0 00 	cmp    DWORD PTR ds:0xc002c46c,0x0
c0001868:	75 0a                	jne    c0001874 <dlmallinfo+0x1e>
c000186a:	b8 40 c4 02 c0       	mov    eax,0xc002c440
c000186f:	e8 11 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001874:	a1 6c c4 02 c0       	mov    eax,ds:0xc002c46c
c0001879:	31 ed                	xor    ebp,ebp
c000187b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000187e:	31 c9                	xor    ecx,ecx
c0001880:	83 e0 fc             	and    eax,0xfffffffc
c0001883:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001887:	31 c0                	xor    eax,eax
c0001889:	8b 14 85 44 c4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3bbc]
c0001890:	85 d2                	test   edx,edx
c0001892:	74 0e                	je     c00018a2 <dlmallinfo+0x4c>
c0001894:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001897:	45                   	inc    ebp
c0001898:	83 e6 fc             	and    esi,0xfffffffc
c000189b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000189e:	01 f1                	add    ecx,esi
c00018a0:	eb ee                	jmp    c0001890 <dlmallinfo+0x3a>
c00018a2:	40                   	inc    eax
c00018a3:	83 f8 0a             	cmp    eax,0xa
c00018a6:	75 e1                	jne    c0001889 <dlmallinfo+0x33>
c00018a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ac:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018b3:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018b6:	b8 74 c4 02 c0       	mov    eax,0xc002c474
c00018bb:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018be:	39 f0                	cmp    eax,esi
c00018c0:	74 10                	je     c00018d2 <dlmallinfo+0x7c>
c00018c2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018c5:	ff 04 24             	inc    DWORD PTR [esp]
c00018c8:	83 e7 fc             	and    edi,0xfffffffc
c00018cb:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018ce:	01 fa                	add    edx,edi
c00018d0:	eb ec                	jmp    c00018be <dlmallinfo+0x68>
c00018d2:	83 c0 08             	add    eax,0x8
c00018d5:	3d 6c c7 02 c0       	cmp    eax,0xc002c76c
c00018da:	75 df                	jne    c00018bb <dlmallinfo+0x65>
c00018dc:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018df:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018e2:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018e5:	a1 a8 c7 02 c0       	mov    eax,ds:0xc002c7a8
c00018ea:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018ed:	89 03                	mov    DWORD PTR [ebx],eax
c00018ef:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018f2:	8b 35 90 c7 02 c0    	mov    esi,DWORD PTR ds:0xc002c790
c00018f8:	29 d0                	sub    eax,edx
c00018fa:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018fd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001900:	8b 35 a4 c7 02 c0    	mov    esi,DWORD PTR ds:0xc002c7a4
c0001906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000190a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000190d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001910:	8b 35 b4 c7 02 c0    	mov    esi,DWORD PTR ds:0xc002c7b4
c0001916:	89 d8                	mov    eax,ebx
c0001918:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000191b:	83 c4 08             	add    esp,0x8
c000191e:	5b                   	pop    ebx
c000191f:	5e                   	pop    esi
c0001920:	5f                   	pop    edi
c0001921:	5d                   	pop    ebp
c0001922:	c2 04 00             	ret    0x4

c0001925 <dlmalloc_stats>:
c0001925:	83 ec 30             	sub    esp,0x30
c0001928:	8d 44 24 08          	lea    eax,[esp+0x8]
c000192c:	50                   	push   eax
c000192d:	e8 24 ff ff ff       	call   c0001856 <dlmallinfo>
c0001932:	83 c4 30             	add    esp,0x30
c0001935:	c3                   	ret    

c0001936 <dlmallopt>:
c0001936:	56                   	push   esi
c0001937:	b8 40 c4 02 c0       	mov    eax,0xc002c440
c000193c:	53                   	push   ebx
c000193d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001941:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001945:	e8 3b f1 ff ff       	call   c0000a85 <malloc_consolidate>
c000194a:	8d 46 04             	lea    eax,[esi+0x4]
c000194d:	83 f8 05             	cmp    eax,0x5
c0001950:	77 67                	ja     c00019b9 <dlmallopt+0x83>
c0001952:	ff 24 85 e4 7b 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd841c]
c0001959:	83 fb 50             	cmp    ebx,0x50
c000195c:	77 5b                	ja     c00019b9 <dlmallopt+0x83>
c000195e:	ba 08 00 00 00       	mov    edx,0x8
c0001963:	85 db                	test   ebx,ebx
c0001965:	74 12                	je     c0001979 <dlmallopt+0x43>
c0001967:	83 c3 0b             	add    ebx,0xb
c000196a:	ba 10 00 00 00       	mov    edx,0x10
c000196f:	83 fb 0f             	cmp    ebx,0xf
c0001972:	76 05                	jbe    c0001979 <dlmallopt+0x43>
c0001974:	89 da                	mov    edx,ebx
c0001976:	83 e2 f8             	and    edx,0xfffffff8
c0001979:	a1 40 c4 02 c0       	mov    eax,ds:0xc002c440
c000197e:	83 e0 03             	and    eax,0x3
c0001981:	09 d0                	or     eax,edx
c0001983:	a3 40 c4 02 c0       	mov    ds:0xc002c440,eax
c0001988:	eb 31                	jmp    c00019bb <dlmallopt+0x85>
c000198a:	89 1d 84 c7 02 c0    	mov    DWORD PTR ds:0xc002c784,ebx
c0001990:	eb 06                	jmp    c0001998 <dlmallopt+0x62>
c0001992:	89 1d 88 c7 02 c0    	mov    DWORD PTR ds:0xc002c788,ebx
c0001998:	be 01 00 00 00       	mov    esi,0x1
c000199d:	eb 1c                	jmp    c00019bb <dlmallopt+0x85>
c000199f:	89 1d 8c c7 02 c0    	mov    DWORD PTR ds:0xc002c78c,ebx
c00019a5:	eb f1                	jmp    c0001998 <dlmallopt+0x62>
c00019a7:	31 f6                	xor    esi,esi
c00019a9:	85 db                	test   ebx,ebx
c00019ab:	75 0e                	jne    c00019bb <dlmallopt+0x85>
c00019ad:	c7 05 94 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c794,0x0
c00019b7:	eb df                	jmp    c0001998 <dlmallopt+0x62>
c00019b9:	31 f6                	xor    esi,esi
c00019bb:	89 f0                	mov    eax,esi
c00019bd:	5b                   	pop    ebx
c00019be:	5e                   	pop    esi
c00019bf:	c3                   	ret    

c00019c0 <disk_status>:
c00019c0:	31 c0                	xor    eax,eax
c00019c2:	c3                   	ret    

c00019c3 <disk_initialize>:
c00019c3:	31 c0                	xor    eax,eax
c00019c5:	c3                   	ret    

c00019c6 <disk_read>:
c00019c6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019cb:	0f b6 04 85 00 df 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2100]
c00019d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d7:	e9 34 e2 01 00       	jmp    c001fc10 <fatWrapperReadDisk>

c00019dc <disk_write>:
c00019dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019e1:	0f b6 04 85 00 df 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2100]
c00019e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019ed:	e9 65 e2 01 00       	jmp    c001fc57 <fatWrapperWriteDisk>

c00019f2 <disk_ioctl>:
c00019f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019fb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a00:	0f b6 04 85 00 df 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2100]
c0001a08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0c:	e9 8d e2 01 00       	jmp    c001fc9e <fatWrapperIoctl>

c0001a11 <ld_word>:
c0001a11:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a18:	c1 e2 08             	shl    edx,0x8
c0001a1b:	09 d0                	or     eax,edx
c0001a1d:	c3                   	ret    

c0001a1e <ld_dword>:
c0001a1e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a22:	89 d1                	mov    ecx,edx
c0001a24:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a28:	c1 e1 08             	shl    ecx,0x8
c0001a2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a2e:	09 ca                	or     edx,ecx
c0001a30:	c1 e2 08             	shl    edx,0x8
c0001a33:	09 d0                	or     eax,edx
c0001a35:	c3                   	ret    

c0001a36 <ld_qword>:
c0001a36:	57                   	push   edi
c0001a37:	56                   	push   esi
c0001a38:	53                   	push   ebx
c0001a39:	31 db                	xor    ebx,ebx
c0001a3b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a3e:	89 df                	mov    edi,ebx
c0001a40:	89 ce                	mov    esi,ecx
c0001a42:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a46:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4a:	c1 e6 08             	shl    esi,0x8
c0001a4d:	09 f2                	or     edx,esi
c0001a4f:	89 d6                	mov    esi,edx
c0001a51:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a55:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a59:	c1 e6 08             	shl    esi,0x8
c0001a5c:	09 f2                	or     edx,esi
c0001a5e:	89 d6                	mov    esi,edx
c0001a60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a64:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a68:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a6b:	c1 e6 08             	shl    esi,0x8
c0001a6e:	89 fb                	mov    ebx,edi
c0001a70:	09 f2                	or     edx,esi
c0001a72:	89 d1                	mov    ecx,edx
c0001a74:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a78:	c1 e1 08             	shl    ecx,0x8
c0001a7b:	89 da                	mov    edx,ebx
c0001a7d:	09 c8                	or     eax,ecx
c0001a7f:	5b                   	pop    ebx
c0001a80:	5e                   	pop    esi
c0001a81:	5f                   	pop    edi
c0001a82:	c3                   	ret    

c0001a83 <st_word>:
c0001a83:	66 89 10             	mov    WORD PTR [eax],dx
c0001a86:	c3                   	ret    

c0001a87 <st_dword>:
c0001a87:	89 10                	mov    DWORD PTR [eax],edx
c0001a89:	c3                   	ret    

c0001a8a <st_qword>:
c0001a8a:	89 10                	mov    DWORD PTR [eax],edx
c0001a8c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a8f:	c3                   	ret    

c0001a90 <mem_cpy>:
c0001a90:	85 c9                	test   ecx,ecx
c0001a92:	74 10                	je     c0001aa4 <mem_cpy+0x14>
c0001a94:	57                   	push   edi
c0001a95:	01 c1                	add    ecx,eax
c0001a97:	56                   	push   esi
c0001a98:	89 c7                	mov    edi,eax
c0001a9a:	89 d6                	mov    esi,edx
c0001a9c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a9d:	39 f9                	cmp    ecx,edi
c0001a9f:	75 fb                	jne    c0001a9c <mem_cpy+0xc>
c0001aa1:	5e                   	pop    esi
c0001aa2:	5f                   	pop    edi
c0001aa3:	c3                   	ret    
c0001aa4:	c3                   	ret    

c0001aa5 <mem_set>:
c0001aa5:	01 c1                	add    ecx,eax
c0001aa7:	40                   	inc    eax
c0001aa8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001aab:	39 c8                	cmp    eax,ecx
c0001aad:	75 f8                	jne    c0001aa7 <mem_set+0x2>
c0001aaf:	c3                   	ret    

c0001ab0 <mem_cmp>:
c0001ab0:	57                   	push   edi
c0001ab1:	56                   	push   esi
c0001ab2:	89 c6                	mov    esi,eax
c0001ab4:	53                   	push   ebx
c0001ab5:	46                   	inc    esi
c0001ab6:	42                   	inc    edx
c0001ab7:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001abb:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001abf:	29 fb                	sub    ebx,edi
c0001ac1:	89 cf                	mov    edi,ecx
c0001ac3:	29 f7                	sub    edi,esi
c0001ac5:	01 c7                	add    edi,eax
c0001ac7:	74 04                	je     c0001acd <mem_cmp+0x1d>
c0001ac9:	85 db                	test   ebx,ebx
c0001acb:	74 e8                	je     c0001ab5 <mem_cmp+0x5>
c0001acd:	89 d8                	mov    eax,ebx
c0001acf:	5b                   	pop    ebx
c0001ad0:	5e                   	pop    esi
c0001ad1:	5f                   	pop    edi
c0001ad2:	c3                   	ret    

c0001ad3 <chk_chr>:
c0001ad3:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ad6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ad9:	74 07                	je     c0001ae2 <chk_chr+0xf>
c0001adb:	39 d1                	cmp    ecx,edx
c0001add:	74 03                	je     c0001ae2 <chk_chr+0xf>
c0001adf:	40                   	inc    eax
c0001ae0:	eb f1                	jmp    c0001ad3 <chk_chr>
c0001ae2:	89 c8                	mov    eax,ecx
c0001ae4:	c3                   	ret    

c0001ae5 <dbc_1st>:
c0001ae5:	31 c0                	xor    eax,eax
c0001ae7:	c3                   	ret    

c0001ae8 <dbc_2nd>:
c0001ae8:	31 c0                	xor    eax,eax
c0001aea:	c3                   	ret    

c0001aeb <tchar2uni>:
c0001aeb:	57                   	push   edi
c0001aec:	89 c7                	mov    edi,eax
c0001aee:	56                   	push   esi
c0001aef:	53                   	push   ebx
c0001af0:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001af2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001af4:	8d 73 01             	lea    esi,[ebx+0x1]
c0001af7:	84 c9                	test   cl,cl
c0001af9:	78 0a                	js     c0001b05 <tchar2uni+0x1a>
c0001afb:	0f b6 d1             	movzx  edx,cl
c0001afe:	89 f3                	mov    ebx,esi
c0001b00:	e9 9f 00 00 00       	jmp    c0001ba4 <tchar2uni+0xb9>
c0001b05:	88 ca                	mov    dl,cl
c0001b07:	83 e2 e0             	and    edx,0xffffffe0
c0001b0a:	80 fa c0             	cmp    dl,0xc0
c0001b0d:	75 0c                	jne    c0001b1b <tchar2uni+0x30>
c0001b0f:	89 ca                	mov    edx,ecx
c0001b11:	b9 01 00 00 00       	mov    ecx,0x1
c0001b16:	83 e2 1f             	and    edx,0x1f
c0001b19:	eb 2e                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b1b:	88 ca                	mov    dl,cl
c0001b1d:	83 e2 f0             	and    edx,0xfffffff0
c0001b20:	80 fa e0             	cmp    dl,0xe0
c0001b23:	75 0c                	jne    c0001b31 <tchar2uni+0x46>
c0001b25:	89 ca                	mov    edx,ecx
c0001b27:	b9 02 00 00 00       	mov    ecx,0x2
c0001b2c:	83 e2 0f             	and    edx,0xf
c0001b2f:	eb 18                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b31:	88 ca                	mov    dl,cl
c0001b33:	83 e2 f8             	and    edx,0xfffffff8
c0001b36:	88 d0                	mov    al,dl
c0001b38:	83 ca ff             	or     edx,0xffffffff
c0001b3b:	3c f0                	cmp    al,0xf0
c0001b3d:	75 6c                	jne    c0001bab <tchar2uni+0xc0>
c0001b3f:	89 ca                	mov    edx,ecx
c0001b41:	b9 03 00 00 00       	mov    ecx,0x3
c0001b46:	83 e2 07             	and    edx,0x7
c0001b49:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b4d:	46                   	inc    esi
c0001b4e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b51:	88 c8                	mov    al,cl
c0001b53:	83 e0 c0             	and    eax,0xffffffc0
c0001b56:	3c 80                	cmp    al,0x80
c0001b58:	75 4e                	jne    c0001ba8 <tchar2uni+0xbd>
c0001b5a:	c1 e2 06             	shl    edx,0x6
c0001b5d:	83 e1 3f             	and    ecx,0x3f
c0001b60:	09 ca                	or     edx,ecx
c0001b62:	39 de                	cmp    esi,ebx
c0001b64:	75 e7                	jne    c0001b4d <tchar2uni+0x62>
c0001b66:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b69:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b6f:	77 37                	ja     c0001ba8 <tchar2uni+0xbd>
c0001b71:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b77:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b7d:	76 29                	jbe    c0001ba8 <tchar2uni+0xbd>
c0001b7f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b85:	76 1d                	jbe    c0001ba4 <tchar2uni+0xb9>
c0001b87:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b8d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b93:	c1 e1 06             	shl    ecx,0x6
c0001b96:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b9c:	09 ca                	or     edx,ecx
c0001b9e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ba4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ba6:	eb 03                	jmp    c0001bab <tchar2uni+0xc0>
c0001ba8:	83 ca ff             	or     edx,0xffffffff
c0001bab:	5b                   	pop    ebx
c0001bac:	89 d0                	mov    eax,edx
c0001bae:	5e                   	pop    esi
c0001baf:	5f                   	pop    edi
c0001bb0:	c3                   	ret    

c0001bb1 <put_utf>:
c0001bb1:	53                   	push   ebx
c0001bb2:	83 f8 7f             	cmp    eax,0x7f
c0001bb5:	89 c3                	mov    ebx,eax
c0001bb7:	b0 00                	mov    al,0x0
c0001bb9:	77 11                	ja     c0001bcc <put_utf+0x1b>
c0001bbb:	85 c9                	test   ecx,ecx
c0001bbd:	0f 84 e5 00 00 00    	je     c0001ca8 <put_utf+0xf7>
c0001bc3:	88 1a                	mov    BYTE PTR [edx],bl
c0001bc5:	b0 01                	mov    al,0x1
c0001bc7:	e9 dc 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bcc:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bd2:	77 23                	ja     c0001bf7 <put_utf+0x46>
c0001bd4:	83 f9 01             	cmp    ecx,0x1
c0001bd7:	0f 86 cb 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001bdd:	89 d8                	mov    eax,ebx
c0001bdf:	83 e3 3f             	and    ebx,0x3f
c0001be2:	c1 e8 06             	shr    eax,0x6
c0001be5:	83 cb 80             	or     ebx,0xffffff80
c0001be8:	83 c8 c0             	or     eax,0xffffffc0
c0001beb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001bee:	88 02                	mov    BYTE PTR [edx],al
c0001bf0:	b0 02                	mov    al,0x2
c0001bf2:	e9 b1 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bf7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bfd:	77 40                	ja     c0001c3f <put_utf+0x8e>
c0001bff:	83 f9 02             	cmp    ecx,0x2
c0001c02:	0f 86 a0 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c08:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c0e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c14:	0f 86 8e 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c1a:	89 d8                	mov    eax,ebx
c0001c1c:	c1 e8 0c             	shr    eax,0xc
c0001c1f:	83 c8 e0             	or     eax,0xffffffe0
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	89 d8                	mov    eax,ebx
c0001c26:	83 e3 3f             	and    ebx,0x3f
c0001c29:	c1 e8 06             	shr    eax,0x6
c0001c2c:	83 cb 80             	or     ebx,0xffffff80
c0001c2f:	83 e0 3f             	and    eax,0x3f
c0001c32:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c35:	83 c8 80             	or     eax,0xffffff80
c0001c38:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c3b:	b0 03                	mov    al,0x3
c0001c3d:	eb 69                	jmp    c0001ca8 <put_utf+0xf7>
c0001c3f:	83 f9 03             	cmp    ecx,0x3
c0001c42:	76 64                	jbe    c0001ca8 <put_utf+0xf7>
c0001c44:	89 d9                	mov    ecx,ebx
c0001c46:	0f b7 c3             	movzx  eax,bx
c0001c49:	66 31 c9             	xor    cx,cx
c0001c4c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c52:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c58:	c1 e9 06             	shr    ecx,0x6
c0001c5b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c61:	77 43                	ja     c0001ca6 <put_utf+0xf5>
c0001c63:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c69:	77 3b                	ja     c0001ca6 <put_utf+0xf5>
c0001c6b:	09 cb                	or     ebx,ecx
c0001c6d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c73:	89 d8                	mov    eax,ebx
c0001c75:	c1 e8 12             	shr    eax,0x12
c0001c78:	83 c8 f0             	or     eax,0xfffffff0
c0001c7b:	88 02                	mov    BYTE PTR [edx],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	c1 e8 0c             	shr    eax,0xc
c0001c82:	83 e0 3f             	and    eax,0x3f
c0001c85:	83 c8 80             	or     eax,0xffffff80
c0001c88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c8b:	89 d8                	mov    eax,ebx
c0001c8d:	83 e3 3f             	and    ebx,0x3f
c0001c90:	c1 e8 06             	shr    eax,0x6
c0001c93:	83 cb 80             	or     ebx,0xffffff80
c0001c96:	83 e0 3f             	and    eax,0x3f
c0001c99:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c9c:	83 c8 80             	or     eax,0xffffff80
c0001c9f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ca2:	b0 04                	mov    al,0x4
c0001ca4:	eb 02                	jmp    c0001ca8 <put_utf+0xf7>
c0001ca6:	31 c0                	xor    eax,eax
c0001ca8:	5b                   	pop    ebx
c0001ca9:	c3                   	ret    

c0001caa <clst2sect>:
c0001caa:	89 c1                	mov    ecx,eax
c0001cac:	83 ea 02             	sub    edx,0x2
c0001caf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cb2:	83 e8 02             	sub    eax,0x2
c0001cb5:	39 d0                	cmp    eax,edx
c0001cb7:	76 0d                	jbe    c0001cc6 <clst2sect+0x1c>
c0001cb9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cbd:	f7 e2                	mul    edx
c0001cbf:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cc2:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cc5:	c3                   	ret    
c0001cc6:	31 c0                	xor    eax,eax
c0001cc8:	31 d2                	xor    edx,edx
c0001cca:	c3                   	ret    

c0001ccb <clmt_clust>:
c0001ccb:	57                   	push   edi
c0001ccc:	89 cf                	mov    edi,ecx
c0001cce:	56                   	push   esi
c0001ccf:	89 d6                	mov    esi,edx
c0001cd1:	53                   	push   ebx
c0001cd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cd6:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001cd9:	89 f2                	mov    edx,esi
c0001cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0001cdd:	c1 ef 09             	shr    edi,0x9
c0001ce0:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001ce4:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001ce7:	89 f9                	mov    ecx,edi
c0001ce9:	31 ff                	xor    edi,edi
c0001ceb:	57                   	push   edi
c0001cec:	56                   	push   esi
c0001ced:	51                   	push   ecx
c0001cee:	52                   	push   edx
c0001cef:	e8 c8 35 02 00       	call   c00252bc <__udivdi3>
c0001cf4:	83 c4 10             	add    esp,0x10
c0001cf7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001cf9:	85 d2                	test   edx,edx
c0001cfb:	74 10                	je     c0001d0d <clmt_clust+0x42>
c0001cfd:	39 d0                	cmp    eax,edx
c0001cff:	72 07                	jb     c0001d08 <clmt_clust+0x3d>
c0001d01:	29 d0                	sub    eax,edx
c0001d03:	83 c3 08             	add    ebx,0x8
c0001d06:	eb ef                	jmp    c0001cf7 <clmt_clust+0x2c>
c0001d08:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d0b:	89 c2                	mov    edx,eax
c0001d0d:	5b                   	pop    ebx
c0001d0e:	89 d0                	mov    eax,edx
c0001d10:	5e                   	pop    esi
c0001d11:	5f                   	pop    edi
c0001d12:	c3                   	ret    

c0001d13 <pick_lfn>:
c0001d13:	55                   	push   ebp
c0001d14:	57                   	push   edi
c0001d15:	56                   	push   esi
c0001d16:	89 d6                	mov    esi,edx
c0001d18:	53                   	push   ebx
c0001d19:	89 c3                	mov    ebx,eax
c0001d1b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d1e:	e8 ee fc ff ff       	call   c0001a11 <ld_word>
c0001d23:	66 85 c0             	test   ax,ax
c0001d26:	74 04                	je     c0001d2c <pick_lfn+0x19>
c0001d28:	31 c0                	xor    eax,eax
c0001d2a:	eb 5c                	jmp    c0001d88 <pick_lfn+0x75>
c0001d2c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d2f:	bd 01 00 00 00       	mov    ebp,0x1
c0001d34:	83 e1 bf             	and    ecx,0xffffffbf
c0001d37:	31 ff                	xor    edi,edi
c0001d39:	49                   	dec    ecx
c0001d3a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d3d:	0f b6 87 00 7d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd8300]
c0001d44:	01 f0                	add    eax,esi
c0001d46:	e8 c6 fc ff ff       	call   c0001a11 <ld_word>
c0001d4b:	66 85 ed             	test   bp,bp
c0001d4e:	74 11                	je     c0001d61 <pick_lfn+0x4e>
c0001d50:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d56:	77 d0                	ja     c0001d28 <pick_lfn+0x15>
c0001d58:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d5c:	89 c5                	mov    ebp,eax
c0001d5e:	41                   	inc    ecx
c0001d5f:	eb 04                	jmp    c0001d65 <pick_lfn+0x52>
c0001d61:	66 40                	inc    ax
c0001d63:	75 c3                	jne    c0001d28 <pick_lfn+0x15>
c0001d65:	47                   	inc    edi
c0001d66:	83 ff 0d             	cmp    edi,0xd
c0001d69:	75 d2                	jne    c0001d3d <pick_lfn+0x2a>
c0001d6b:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d6e:	74 13                	je     c0001d83 <pick_lfn+0x70>
c0001d70:	66 85 ed             	test   bp,bp
c0001d73:	74 0e                	je     c0001d83 <pick_lfn+0x70>
c0001d75:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d7b:	77 ab                	ja     c0001d28 <pick_lfn+0x15>
c0001d7d:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d83:	b8 01 00 00 00       	mov    eax,0x1
c0001d88:	5b                   	pop    ebx
c0001d89:	5e                   	pop    esi
c0001d8a:	5f                   	pop    edi
c0001d8b:	5d                   	pop    ebp
c0001d8c:	c3                   	ret    

c0001d8d <put_lfn>:
c0001d8d:	55                   	push   ebp
c0001d8e:	31 ed                	xor    ebp,ebp
c0001d90:	57                   	push   edi
c0001d91:	89 d7                	mov    edi,edx
c0001d93:	56                   	push   esi
c0001d94:	31 f6                	xor    esi,esi
c0001d96:	53                   	push   ebx
c0001d97:	83 ec 08             	sub    esp,0x8
c0001d9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d9d:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001da1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001da5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dab:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dae:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001db1:	31 d2                	xor    edx,edx
c0001db3:	e8 cb fc ff ff       	call   c0001a83 <st_word>
c0001db8:	0f b6 d9             	movzx  ebx,cl
c0001dbb:	4b                   	dec    ebx
c0001dbc:	6b db 0d             	imul   ebx,ebx,0xd
c0001dbf:	66 83 fe ff          	cmp    si,0xffff
c0001dc3:	74 08                	je     c0001dcd <put_lfn+0x40>
c0001dc5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dc8:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dcc:	43                   	inc    ebx
c0001dcd:	0f b6 85 00 7d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd8300]
c0001dd4:	0f b7 d6             	movzx  edx,si
c0001dd7:	01 f8                	add    eax,edi
c0001dd9:	e8 a5 fc ff ff       	call   c0001a83 <st_word>
c0001dde:	66 85 f6             	test   si,si
c0001de1:	75 03                	jne    c0001de6 <put_lfn+0x59>
c0001de3:	83 ce ff             	or     esi,0xffffffff
c0001de6:	45                   	inc    ebp
c0001de7:	83 fd 0d             	cmp    ebp,0xd
c0001dea:	75 d3                	jne    c0001dbf <put_lfn+0x32>
c0001dec:	66 46                	inc    si
c0001dee:	74 0a                	je     c0001dfa <put_lfn+0x6d>
c0001df0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001df3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001df8:	75 09                	jne    c0001e03 <put_lfn+0x76>
c0001dfa:	88 c8                	mov    al,cl
c0001dfc:	83 c8 40             	or     eax,0x40
c0001dff:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e03:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e07:	88 07                	mov    BYTE PTR [edi],al
c0001e09:	83 c4 08             	add    esp,0x8
c0001e0c:	5b                   	pop    ebx
c0001e0d:	5e                   	pop    esi
c0001e0e:	5f                   	pop    edi
c0001e0f:	5d                   	pop    ebp
c0001e10:	c3                   	ret    

c0001e11 <gen_numname>:
c0001e11:	57                   	push   edi
c0001e12:	89 cf                	mov    edi,ecx
c0001e14:	56                   	push   esi
c0001e15:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e1a:	53                   	push   ebx
c0001e1b:	89 c6                	mov    esi,eax
c0001e1d:	83 ec 10             	sub    esp,0x10
c0001e20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e24:	e8 67 fc ff ff       	call   c0001a90 <mem_cpy>
c0001e29:	83 fb 05             	cmp    ebx,0x5
c0001e2c:	76 2d                	jbe    c0001e5b <gen_numname+0x4a>
c0001e2e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e31:	66 85 c0             	test   ax,ax
c0001e34:	74 25                	je     c0001e5b <gen_numname+0x4a>
c0001e36:	83 c7 02             	add    edi,0x2
c0001e39:	ba 10 00 00 00       	mov    edx,0x10
c0001e3e:	01 db                	add    ebx,ebx
c0001e40:	89 c1                	mov    ecx,eax
c0001e42:	66 d1 e8             	shr    ax,1
c0001e45:	83 e1 01             	and    ecx,0x1
c0001e48:	01 cb                	add    ebx,ecx
c0001e4a:	0f ba e3 10          	bt     ebx,0x10
c0001e4e:	73 06                	jae    c0001e56 <gen_numname+0x45>
c0001e50:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e56:	4a                   	dec    edx
c0001e57:	75 e5                	jne    c0001e3e <gen_numname+0x2d>
c0001e59:	eb d3                	jmp    c0001e2e <gen_numname+0x1d>
c0001e5b:	b8 07 00 00 00       	mov    eax,0x7
c0001e60:	88 d9                	mov    cl,bl
c0001e62:	83 e1 0f             	and    ecx,0xf
c0001e65:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e68:	80 fa 39             	cmp    dl,0x39
c0001e6b:	76 03                	jbe    c0001e70 <gen_numname+0x5f>
c0001e6d:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e70:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e73:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e77:	89 da                	mov    edx,ebx
c0001e79:	c1 ea 04             	shr    edx,0x4
c0001e7c:	83 fb 0f             	cmp    ebx,0xf
c0001e7f:	76 06                	jbe    c0001e87 <gen_numname+0x76>
c0001e81:	89 c8                	mov    eax,ecx
c0001e83:	89 d3                	mov    ebx,edx
c0001e85:	eb d9                	jmp    c0001e60 <gen_numname+0x4f>
c0001e87:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e8c:	31 d2                	xor    edx,edx
c0001e8e:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e91:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e94:	39 ca                	cmp    edx,ecx
c0001e96:	73 18                	jae    c0001eb0 <gen_numname+0x9f>
c0001e98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e9b:	3c 20                	cmp    al,0x20
c0001e9d:	74 11                	je     c0001eb0 <gen_numname+0x9f>
c0001e9f:	e8 41 fc ff ff       	call   c0001ae5 <dbc_1st>
c0001ea4:	85 c0                	test   eax,eax
c0001ea6:	74 05                	je     c0001ead <gen_numname+0x9c>
c0001ea8:	39 d3                	cmp    ebx,edx
c0001eaa:	74 04                	je     c0001eb0 <gen_numname+0x9f>
c0001eac:	42                   	inc    edx
c0001ead:	42                   	inc    edx
c0001eae:	eb e1                	jmp    c0001e91 <gen_numname+0x80>
c0001eb0:	b0 20                	mov    al,0x20
c0001eb2:	83 f9 07             	cmp    ecx,0x7
c0001eb5:	77 05                	ja     c0001ebc <gen_numname+0xab>
c0001eb7:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ebb:	41                   	inc    ecx
c0001ebc:	42                   	inc    edx
c0001ebd:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ec1:	83 fa 07             	cmp    edx,0x7
c0001ec4:	76 ea                	jbe    c0001eb0 <gen_numname+0x9f>
c0001ec6:	83 c4 10             	add    esp,0x10
c0001ec9:	5b                   	pop    ebx
c0001eca:	5e                   	pop    esi
c0001ecb:	5f                   	pop    edi
c0001ecc:	c3                   	ret    

c0001ecd <sum_sfn>:
c0001ecd:	31 c9                	xor    ecx,ecx
c0001ecf:	31 d2                	xor    edx,edx
c0001ed1:	d0 ca                	ror    dl,1
c0001ed3:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ed6:	41                   	inc    ecx
c0001ed7:	83 f9 0b             	cmp    ecx,0xb
c0001eda:	75 f5                	jne    c0001ed1 <sum_sfn+0x4>
c0001edc:	88 d0                	mov    al,dl
c0001ede:	c3                   	ret    

c0001edf <xdir_sum>:
c0001edf:	56                   	push   esi
c0001ee0:	31 c9                	xor    ecx,ecx
c0001ee2:	53                   	push   ebx
c0001ee3:	31 d2                	xor    edx,edx
c0001ee5:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001ee9:	43                   	inc    ebx
c0001eea:	c1 e3 05             	shl    ebx,0x5
c0001eed:	83 fa 02             	cmp    edx,0x2
c0001ef0:	74 0b                	je     c0001efd <xdir_sum+0x1e>
c0001ef2:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ef6:	66 d1 c9             	ror    cx,1
c0001ef9:	01 f1                	add    ecx,esi
c0001efb:	eb 05                	jmp    c0001f02 <xdir_sum+0x23>
c0001efd:	ba 03 00 00 00       	mov    edx,0x3
c0001f02:	42                   	inc    edx
c0001f03:	39 d3                	cmp    ebx,edx
c0001f05:	77 e6                	ja     c0001eed <xdir_sum+0xe>
c0001f07:	89 c8                	mov    eax,ecx
c0001f09:	5b                   	pop    ebx
c0001f0a:	5e                   	pop    esi
c0001f0b:	c3                   	ret    

c0001f0c <xsum32>:
c0001f0c:	d1 ca                	ror    edx,1
c0001f0e:	0f b6 c0             	movzx  eax,al
c0001f11:	01 d0                	add    eax,edx
c0001f13:	c3                   	ret    

c0001f14 <get_xfileinfo>:
c0001f14:	55                   	push   ebp
c0001f15:	31 c9                	xor    ecx,ecx
c0001f17:	57                   	push   edi
c0001f18:	bd 40 00 00 00       	mov    ebp,0x40
c0001f1d:	56                   	push   esi
c0001f1e:	31 ff                	xor    edi,edi
c0001f20:	53                   	push   ebx
c0001f21:	89 c6                	mov    esi,eax
c0001f23:	83 ec 0c             	sub    esp,0xc
c0001f26:	89 d3                	mov    ebx,edx
c0001f28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f2f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f33:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f36:	76 6d                	jbe    c0001fa5 <get_xfileinfo+0x91>
c0001f38:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f3e:	76 0b                	jbe    c0001f4b <get_xfileinfo+0x37>
c0001f40:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f44:	bf 01 00 00 00       	mov    edi,0x1
c0001f49:	eb 63                	jmp    c0001fae <get_xfileinfo+0x9a>
c0001f4b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f51:	75 03                	jne    c0001f56 <get_xfileinfo+0x42>
c0001f53:	83 c5 02             	add    ebp,0x2
c0001f56:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f59:	83 c5 02             	add    ebp,0x2
c0001f5c:	e8 b0 fa ff ff       	call   c0001a11 <ld_word>
c0001f61:	ff 04 24             	inc    DWORD PTR [esp]
c0001f64:	66 85 c9             	test   cx,cx
c0001f67:	75 0d                	jne    c0001f76 <get_xfileinfo+0x62>
c0001f69:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f6f:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f74:	76 2b                	jbe    c0001fa1 <get_xfileinfo+0x8d>
c0001f76:	c1 e1 10             	shl    ecx,0x10
c0001f79:	ba ff 00 00 00       	mov    edx,0xff
c0001f7e:	0f b7 c0             	movzx  eax,ax
c0001f81:	29 fa                	sub    edx,edi
c0001f83:	09 c8                	or     eax,ecx
c0001f85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f89:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f91:	e8 1b fc ff ff       	call   c0001bb1 <put_utf>
c0001f96:	84 c0                	test   al,al
c0001f98:	74 a6                	je     c0001f40 <get_xfileinfo+0x2c>
c0001f9a:	0f b6 c0             	movzx  eax,al
c0001f9d:	01 c7                	add    edi,eax
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	89 c1                	mov    ecx,eax
c0001fa3:	eb 8a                	jmp    c0001f2f <get_xfileinfo+0x1b>
c0001fa5:	85 ff                	test   edi,edi
c0001fa7:	74 97                	je     c0001f40 <get_xfileinfo+0x2c>
c0001fa9:	66 85 c9             	test   cx,cx
c0001fac:	75 92                	jne    c0001f40 <get_xfileinfo+0x2c>
c0001fae:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fb3:	31 c0                	xor    eax,eax
c0001fb5:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fb9:	31 d2                	xor    edx,edx
c0001fbb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fbe:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fc1:	80 e1 10             	and    cl,0x10
c0001fc4:	75 08                	jne    c0001fce <get_xfileinfo+0xba>
c0001fc6:	8d 46 38             	lea    eax,[esi+0x38]
c0001fc9:	e8 68 fa ff ff       	call   c0001a36 <ld_qword>
c0001fce:	89 03                	mov    DWORD PTR [ebx],eax
c0001fd0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fd3:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fd6:	e8 36 fa ff ff       	call   c0001a11 <ld_word>
c0001fdb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fdf:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fe2:	e8 2a fa ff ff       	call   c0001a11 <ld_word>
c0001fe7:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001feb:	83 c4 0c             	add    esp,0xc
c0001fee:	5b                   	pop    ebx
c0001fef:	5e                   	pop    esi
c0001ff0:	5f                   	pop    edi
c0001ff1:	5d                   	pop    ebp
c0001ff2:	c3                   	ret    

c0001ff3 <get_ldnumber>:
c0001ff3:	8b 10                	mov    edx,DWORD PTR [eax]
c0001ff5:	85 d2                	test   edx,edx
c0001ff7:	74 14                	je     c000200d <get_ldnumber+0x1a>
c0001ff9:	56                   	push   esi
c0001ffa:	53                   	push   ebx
c0001ffb:	89 d3                	mov    ebx,edx
c0001ffd:	43                   	inc    ebx
c0001ffe:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002001:	80 f9 1f             	cmp    cl,0x1f
c0002004:	76 0d                	jbe    c0002013 <get_ldnumber+0x20>
c0002006:	80 f9 3a             	cmp    cl,0x3a
c0002009:	75 f2                	jne    c0001ffd <get_ldnumber+0xa>
c000200b:	eb 0a                	jmp    c0002017 <get_ldnumber+0x24>
c000200d:	83 c9 ff             	or     ecx,0xffffffff
c0002010:	89 c8                	mov    eax,ecx
c0002012:	c3                   	ret    
c0002013:	31 c9                	xor    ecx,ecx
c0002015:	eb 24                	jmp    c000203b <get_ldnumber+0x48>
c0002017:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000201a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000201d:	80 f9 09             	cmp    cl,0x9
c0002020:	77 16                	ja     c0002038 <get_ldnumber+0x45>
c0002022:	83 c2 02             	add    edx,0x2
c0002025:	83 c9 ff             	or     ecx,0xffffffff
c0002028:	39 d3                	cmp    ebx,edx
c000202a:	75 0f                	jne    c000203b <get_ldnumber+0x48>
c000202c:	89 f2                	mov    edx,esi
c000202e:	89 18                	mov    DWORD PTR [eax],ebx
c0002030:	0f be ca             	movsx  ecx,dl
c0002033:	83 e9 30             	sub    ecx,0x30
c0002036:	eb 03                	jmp    c000203b <get_ldnumber+0x48>
c0002038:	83 c9 ff             	or     ecx,0xffffffff
c000203b:	89 c8                	mov    eax,ecx
c000203d:	5b                   	pop    ebx
c000203e:	5e                   	pop    esi
c000203f:	c3                   	ret    

c0002040 <crc32>:
c0002040:	56                   	push   esi
c0002041:	89 d6                	mov    esi,edx
c0002043:	53                   	push   ebx
c0002044:	b2 01                	mov    dl,0x1
c0002046:	bb 08 00 00 00       	mov    ebx,0x8
c000204b:	89 f1                	mov    ecx,esi
c000204d:	84 d1                	test   cl,dl
c000204f:	0f 95 c1             	setne  cl
c0002052:	0f b6 c9             	movzx  ecx,cl
c0002055:	31 c1                	xor    ecx,eax
c0002057:	89 c8                	mov    eax,ecx
c0002059:	d1 e8                	shr    eax,1
c000205b:	80 e1 01             	and    cl,0x1
c000205e:	74 05                	je     c0002065 <crc32+0x25>
c0002060:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002065:	d1 e2                	shl    edx,1
c0002067:	4b                   	dec    ebx
c0002068:	75 e1                	jne    c000204b <crc32+0xb>
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    

c000206d <test_gpt_header>:
c000206d:	55                   	push   ebp
c000206e:	b9 10 00 00 00       	mov    ecx,0x10
c0002073:	57                   	push   edi
c0002074:	ba 00 7c 02 c0       	mov    edx,0xc0027c00
c0002079:	56                   	push   esi
c000207a:	31 ff                	xor    edi,edi
c000207c:	53                   	push   ebx
c000207d:	89 c3                	mov    ebx,eax
c000207f:	e8 2c fa ff ff       	call   c0001ab0 <mem_cmp>
c0002084:	85 c0                	test   eax,eax
c0002086:	75 55                	jne    c00020dd <test_gpt_header+0x70>
c0002088:	89 c7                	mov    edi,eax
c000208a:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000208f:	83 ce ff             	or     esi,0xffffffff
c0002092:	31 d2                	xor    edx,edx
c0002094:	83 fd 03             	cmp    ebp,0x3
c0002097:	76 05                	jbe    c000209e <test_gpt_header+0x31>
c0002099:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000209e:	89 f0                	mov    eax,esi
c00020a0:	45                   	inc    ebp
c00020a1:	e8 9a ff ff ff       	call   c0002040 <crc32>
c00020a6:	83 fd 4c             	cmp    ebp,0x4c
c00020a9:	89 c6                	mov    esi,eax
c00020ab:	75 e5                	jne    c0002092 <test_gpt_header+0x25>
c00020ad:	8d 43 10             	lea    eax,[ebx+0x10]
c00020b0:	f7 d6                	not    esi
c00020b2:	e8 67 f9 ff ff       	call   c0001a1e <ld_dword>
c00020b7:	39 c6                	cmp    esi,eax
c00020b9:	75 22                	jne    c00020dd <test_gpt_header+0x70>
c00020bb:	8d 43 54             	lea    eax,[ebx+0x54]
c00020be:	e8 5b f9 ff ff       	call   c0001a1e <ld_dword>
c00020c3:	83 c0 80             	add    eax,0xffffff80
c00020c6:	75 15                	jne    c00020dd <test_gpt_header+0x70>
c00020c8:	8d 43 50             	lea    eax,[ebx+0x50]
c00020cb:	e8 4e f9 ff ff       	call   c0001a1e <ld_dword>
c00020d0:	3d 80 00 00 00       	cmp    eax,0x80
c00020d5:	0f 96 c0             	setbe  al
c00020d8:	0f b6 c0             	movzx  eax,al
c00020db:	89 c7                	mov    edi,eax
c00020dd:	5b                   	pop    ebx
c00020de:	89 f8                	mov    eax,edi
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	5d                   	pop    ebp
c00020e3:	c3                   	ret    

c00020e4 <make_rand>:
c00020e4:	56                   	push   esi
c00020e5:	85 c0                	test   eax,eax
c00020e7:	53                   	push   ebx
c00020e8:	75 05                	jne    c00020ef <make_rand+0xb>
c00020ea:	b8 01 00 00 00       	mov    eax,0x1
c00020ef:	01 d1                	add    ecx,edx
c00020f1:	bb 08 00 00 00       	mov    ebx,0x8
c00020f6:	89 c6                	mov    esi,eax
c00020f8:	d1 e8                	shr    eax,1
c00020fa:	83 e6 01             	and    esi,0x1
c00020fd:	85 f6                	test   esi,esi
c00020ff:	74 05                	je     c0002106 <make_rand+0x22>
c0002101:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002106:	4b                   	dec    ebx
c0002107:	75 ed                	jne    c00020f6 <make_rand+0x12>
c0002109:	42                   	inc    edx
c000210a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000210d:	39 ca                	cmp    edx,ecx
c000210f:	75 e0                	jne    c00020f1 <make_rand+0xd>
c0002111:	5b                   	pop    ebx
c0002112:	5e                   	pop    esi
c0002113:	c3                   	ret    

c0002114 <validate>:
c0002114:	56                   	push   esi
c0002115:	53                   	push   ebx
c0002116:	89 d6                	mov    esi,edx
c0002118:	51                   	push   ecx
c0002119:	85 c0                	test   eax,eax
c000211b:	75 09                	jne    c0002126 <validate+0x12>
c000211d:	b8 09 00 00 00       	mov    eax,0x9
c0002122:	31 c9                	xor    ecx,ecx
c0002124:	eb 2f                	jmp    c0002155 <validate+0x41>
c0002126:	89 c3                	mov    ebx,eax
c0002128:	8b 00                	mov    eax,DWORD PTR [eax]
c000212a:	85 c0                	test   eax,eax
c000212c:	74 ef                	je     c000211d <validate+0x9>
c000212e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002131:	74 ea                	je     c000211d <validate+0x9>
c0002133:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002137:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000213b:	75 e0                	jne    c000211d <validate+0x9>
c000213d:	83 ec 0c             	sub    esp,0xc
c0002140:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002144:	50                   	push   eax
c0002145:	e8 76 f8 ff ff       	call   c00019c0 <disk_status>
c000214a:	83 c4 10             	add    esp,0x10
c000214d:	a8 01                	test   al,0x1
c000214f:	75 cc                	jne    c000211d <validate+0x9>
c0002151:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002153:	31 c0                	xor    eax,eax
c0002155:	89 0e                	mov    DWORD PTR [esi],ecx
c0002157:	5a                   	pop    edx
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	c3                   	ret    

c000215b <sync_window>:
c000215b:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000215f:	0f 84 85 00 00 00    	je     c00021ea <sync_window+0x8f>
c0002165:	55                   	push   ebp
c0002166:	8d 68 54             	lea    ebp,[eax+0x54]
c0002169:	57                   	push   edi
c000216a:	56                   	push   esi
c000216b:	53                   	push   ebx
c000216c:	89 c3                	mov    ebx,eax
c000216e:	83 ec 28             	sub    esp,0x28
c0002171:	6a 01                	push   0x1
c0002173:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002176:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002179:	55                   	push   ebp
c000217a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217e:	50                   	push   eax
c000217f:	e8 58 f8 ff ff       	call   c00019dc <disk_write>
c0002184:	83 c4 20             	add    esp,0x20
c0002187:	ba 01 00 00 00       	mov    edx,0x1
c000218c:	85 c0                	test   eax,eax
c000218e:	75 50                	jne    c00021e0 <sync_window+0x85>
c0002190:	31 ff                	xor    edi,edi
c0002192:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002195:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002199:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000219d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021a0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021a3:	89 c6                	mov    esi,eax
c00021a5:	89 d7                	mov    edi,edx
c00021a7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021aa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021ae:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021b1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021b5:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021b9:	73 23                	jae    c00021de <sync_window+0x83>
c00021bb:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021bf:	75 1d                	jne    c00021de <sync_window+0x83>
c00021c1:	83 ec 0c             	sub    esp,0xc
c00021c4:	6a 01                	push   0x1
c00021c6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021ca:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021ce:	52                   	push   edx
c00021cf:	50                   	push   eax
c00021d0:	55                   	push   ebp
c00021d1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021d5:	50                   	push   eax
c00021d6:	e8 01 f8 ff ff       	call   c00019dc <disk_write>
c00021db:	83 c4 20             	add    esp,0x20
c00021de:	31 d2                	xor    edx,edx
c00021e0:	83 c4 1c             	add    esp,0x1c
c00021e3:	89 d0                	mov    eax,edx
c00021e5:	5b                   	pop    ebx
c00021e6:	5e                   	pop    esi
c00021e7:	5f                   	pop    edi
c00021e8:	5d                   	pop    ebp
c00021e9:	c3                   	ret    
c00021ea:	31 d2                	xor    edx,edx
c00021ec:	89 d0                	mov    eax,edx
c00021ee:	c3                   	ret    

c00021ef <move_window>:
c00021ef:	56                   	push   esi
c00021f0:	53                   	push   ebx
c00021f1:	89 c3                	mov    ebx,eax
c00021f3:	83 ec 14             	sub    esp,0x14
c00021f6:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021f9:	75 07                	jne    c0002202 <move_window+0x13>
c00021fb:	31 f6                	xor    esi,esi
c00021fd:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002200:	74 59                	je     c000225b <move_window+0x6c>
c0002202:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002206:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000220a:	89 d8                	mov    eax,ebx
c000220c:	e8 4a ff ff ff       	call   c000215b <sync_window>
c0002211:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002215:	89 c6                	mov    esi,eax
c0002217:	85 c0                	test   eax,eax
c0002219:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000221d:	75 3c                	jne    c000225b <move_window+0x6c>
c000221f:	83 ec 0c             	sub    esp,0xc
c0002222:	8d 43 54             	lea    eax,[ebx+0x54]
c0002225:	6a 01                	push   0x1
c0002227:	51                   	push   ecx
c0002228:	52                   	push   edx
c0002229:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000222d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002231:	50                   	push   eax
c0002232:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002236:	50                   	push   eax
c0002237:	e8 8a f7 ff ff       	call   c00019c6 <disk_read>
c000223c:	83 c4 20             	add    esp,0x20
c000223f:	85 c0                	test   eax,eax
c0002241:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002245:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002249:	74 0a                	je     c0002255 <move_window+0x66>
c000224b:	83 ca ff             	or     edx,0xffffffff
c000224e:	be 01 00 00 00       	mov    esi,0x1
c0002253:	89 d1                	mov    ecx,edx
c0002255:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002258:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000225b:	89 f0                	mov    eax,esi
c000225d:	83 c4 14             	add    esp,0x14
c0002260:	5b                   	pop    ebx
c0002261:	5e                   	pop    esi
c0002262:	c3                   	ret    

c0002263 <check_fs>:
c0002263:	53                   	push   ebx
c0002264:	89 c3                	mov    ebx,eax
c0002266:	83 ec 08             	sub    esp,0x8
c0002269:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000226d:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002274:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000227b:	e8 6f ff ff ff       	call   c00021ef <move_window>
c0002280:	ba 04 00 00 00       	mov    edx,0x4
c0002285:	85 c0                	test   eax,eax
c0002287:	0f 85 89 00 00 00    	jne    c0002316 <check_fs+0xb3>
c000228d:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002293:	e8 79 f7 ff ff       	call   c0001a11 <ld_word>
c0002298:	ba 03 00 00 00       	mov    edx,0x3
c000229d:	66 3d 55 aa          	cmp    ax,0xaa55
c00022a1:	75 73                	jne    c0002316 <check_fs+0xb3>
c00022a3:	ba 20 7d 02 c0       	mov    edx,0xc0027d20
c00022a8:	8d 43 54             	lea    eax,[ebx+0x54]
c00022ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00022b0:	e8 fb f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022b5:	ba 01 00 00 00       	mov    edx,0x1
c00022ba:	85 c0                	test   eax,eax
c00022bc:	74 58                	je     c0002316 <check_fs+0xb3>
c00022be:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022c1:	8d 50 18             	lea    edx,[eax+0x18]
c00022c4:	80 fa 01             	cmp    dl,0x1
c00022c7:	76 09                	jbe    c00022d2 <check_fs+0x6f>
c00022c9:	ba 02 00 00 00       	mov    edx,0x2
c00022ce:	3c eb                	cmp    al,0xeb
c00022d0:	75 44                	jne    c0002316 <check_fs+0xb3>
c00022d2:	ba b0 ac 02 c0       	mov    edx,0xc002acb0
c00022d7:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022dd:	b9 03 00 00 00       	mov    ecx,0x3
c00022e2:	e8 c9 f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022e7:	31 d2                	xor    edx,edx
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 29                	je     c0002316 <check_fs+0xb3>
c00022ed:	ba 2c 7d 02 c0       	mov    edx,0xc0027d2c
c00022f2:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022f8:	b9 05 00 00 00       	mov    ecx,0x5
c00022fd:	e8 ae f7 ff ff       	call   c0001ab0 <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 0e                	je     c0002316 <check_fs+0xb3>
c0002308:	31 d2                	xor    edx,edx
c000230a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002311:	0f 95 c2             	setne  dl
c0002314:	01 d2                	add    edx,edx
c0002316:	89 d0                	mov    eax,edx
c0002318:	83 c4 08             	add    esp,0x8
c000231b:	5b                   	pop    ebx
c000231c:	c3                   	ret    

c000231d <find_volume>:
c000231d:	55                   	push   ebp
c000231e:	31 c9                	xor    ecx,ecx
c0002320:	57                   	push   edi
c0002321:	56                   	push   esi
c0002322:	89 d6                	mov    esi,edx
c0002324:	53                   	push   ebx
c0002325:	31 d2                	xor    edx,edx
c0002327:	83 ec 3c             	sub    esp,0x3c
c000232a:	89 c3                	mov    ebx,eax
c000232c:	e8 32 ff ff ff       	call   c0002263 <check_fs>
c0002331:	83 f8 02             	cmp    eax,0x2
c0002334:	74 0e                	je     c0002344 <find_volume+0x27>
c0002336:	0f 87 5d 01 00 00    	ja     c0002499 <find_volume+0x17c>
c000233c:	85 f6                	test   esi,esi
c000233e:	0f 84 55 01 00 00    	je     c0002499 <find_volume+0x17c>
c0002344:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000234b:	0f 85 dd 00 00 00    	jne    c000242e <find_volume+0x111>
c0002351:	31 c9                	xor    ecx,ecx
c0002353:	ba 01 00 00 00       	mov    edx,0x1
c0002358:	89 d8                	mov    eax,ebx
c000235a:	e8 90 fe ff ff       	call   c00021ef <move_window>
c000235f:	85 c0                	test   eax,eax
c0002361:	74 0a                	je     c000236d <find_volume+0x50>
c0002363:	b8 04 00 00 00       	mov    eax,0x4
c0002368:	e9 2c 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c000236d:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002370:	89 e8                	mov    eax,ebp
c0002372:	e8 f6 fc ff ff       	call   c000206d <test_gpt_header>
c0002377:	85 c0                	test   eax,eax
c0002379:	75 0a                	jne    c0002385 <find_volume+0x68>
c000237b:	b8 03 00 00 00       	mov    eax,0x3
c0002380:	e9 14 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c0002385:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000238b:	e8 8e f6 ff ff       	call   c0001a1e <ld_dword>
c0002390:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002394:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000239a:	e8 97 f6 ff ff       	call   c0001a36 <ld_qword>
c000239f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023b7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023bb:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023bf:	74 ba                	je     c000237b <find_volume+0x5e>
c00023c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023c5:	31 c9                	xor    ecx,ecx
c00023c7:	c1 e7 07             	shl    edi,0x7
c00023ca:	89 d8                	mov    eax,ebx
c00023cc:	89 fa                	mov    edx,edi
c00023ce:	c1 ea 09             	shr    edx,0x9
c00023d1:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023d5:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023d9:	e8 11 fe ff ff       	call   c00021ef <move_window>
c00023de:	85 c0                	test   eax,eax
c00023e0:	75 81                	jne    c0002363 <find_volume+0x46>
c00023e2:	81 e7 80 01 00 00    	and    edi,0x180
c00023e8:	b9 10 00 00 00       	mov    ecx,0x10
c00023ed:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023f1:	ba 10 7d 02 c0       	mov    edx,0xc0027d10
c00023f6:	e8 b5 f6 ff ff       	call   c0001ab0 <mem_cmp>
c00023fb:	85 c0                	test   eax,eax
c00023fd:	75 29                	jne    c0002428 <find_volume+0x10b>
c00023ff:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002403:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002407:	e8 2a f6 ff ff       	call   c0001a36 <ld_qword>
c000240c:	89 d1                	mov    ecx,edx
c000240e:	89 c2                	mov    edx,eax
c0002410:	89 d8                	mov    eax,ebx
c0002412:	e8 4c fe ff ff       	call   c0002263 <check_fs>
c0002417:	85 f6                	test   esi,esi
c0002419:	75 07                	jne    c0002422 <find_volume+0x105>
c000241b:	83 f8 01             	cmp    eax,0x1
c000241e:	77 08                	ja     c0002428 <find_volume+0x10b>
c0002420:	eb 77                	jmp    c0002499 <find_volume+0x17c>
c0002422:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002426:	74 71                	je     c0002499 <find_volume+0x17c>
c0002428:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000242c:	eb 89                	jmp    c00023b7 <find_volume+0x9a>
c000242e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002432:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002438:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000243e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002442:	89 cd                	mov    ebp,ecx
c0002444:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002448:	89 f8                	mov    eax,edi
c000244a:	83 c7 10             	add    edi,0x10
c000244d:	e8 cc f5 ff ff       	call   c0001a1e <ld_dword>
c0002452:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002456:	89 01                	mov    DWORD PTR [ecx],eax
c0002458:	83 c1 04             	add    ecx,0x4
c000245b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000245f:	75 e3                	jne    c0002444 <find_volume+0x127>
c0002461:	31 ff                	xor    edi,edi
c0002463:	85 f6                	test   esi,esi
c0002465:	74 03                	je     c000246a <find_volume+0x14d>
c0002467:	8d 7e ff             	lea    edi,[esi-0x1]
c000246a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000246e:	85 d2                	test   edx,edx
c0002470:	74 14                	je     c0002486 <find_volume+0x169>
c0002472:	31 c9                	xor    ecx,ecx
c0002474:	89 d8                	mov    eax,ebx
c0002476:	e8 e8 fd ff ff       	call   c0002263 <check_fs>
c000247b:	83 f8 01             	cmp    eax,0x1
c000247e:	76 19                	jbe    c0002499 <find_volume+0x17c>
c0002480:	85 f6                	test   esi,esi
c0002482:	74 0f                	je     c0002493 <find_volume+0x176>
c0002484:	eb 13                	jmp    c0002499 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 85 ed fe ff ff    	jne    c000237b <find_volume+0x5e>
c000248e:	b8 03 00 00 00       	mov    eax,0x3
c0002493:	47                   	inc    edi
c0002494:	83 ff 03             	cmp    edi,0x3
c0002497:	76 d1                	jbe    c000246a <find_volume+0x14d>
c0002499:	83 c4 3c             	add    esp,0x3c
c000249c:	5b                   	pop    ebx
c000249d:	5e                   	pop    esi
c000249e:	5f                   	pop    edi
c000249f:	5d                   	pop    ebp
c00024a0:	c3                   	ret    

c00024a1 <mount_volume>:
c00024a1:	55                   	push   ebp
c00024a2:	57                   	push   edi
c00024a3:	89 cf                	mov    edi,ecx
c00024a5:	56                   	push   esi
c00024a6:	53                   	push   ebx
c00024a7:	bb 0b 00 00 00       	mov    ebx,0xb
c00024ac:	83 ec 3c             	sub    esp,0x3c
c00024af:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024b9:	e8 35 fb ff ff       	call   c0001ff3 <get_ldnumber>
c00024be:	85 c0                	test   eax,eax
c00024c0:	0f 88 3a 05 00 00    	js     c0002a00 <mount_volume+0x55f>
c00024c6:	8b 2c 85 e0 c7 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd3820]
c00024cd:	89 c6                	mov    esi,eax
c00024cf:	bb 0c 00 00 00       	mov    ebx,0xc
c00024d4:	85 ed                	test   ebp,ebp
c00024d6:	0f 84 24 05 00 00    	je     c0002a00 <mount_volume+0x55f>
c00024dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024e0:	83 e7 fe             	and    edi,0xfffffffe
c00024e3:	89 2a                	mov    DWORD PTR [edx],ebp
c00024e5:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024e9:	74 32                	je     c000251d <mount_volume+0x7c>
c00024eb:	83 ec 0c             	sub    esp,0xc
c00024ee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024f2:	50                   	push   eax
c00024f3:	e8 c8 f4 ff ff       	call   c00019c0 <disk_status>
c00024f8:	83 c4 10             	add    esp,0x10
c00024fb:	a8 01                	test   al,0x1
c00024fd:	75 1e                	jne    c000251d <mount_volume+0x7c>
c00024ff:	31 db                	xor    ebx,ebx
c0002501:	89 f9                	mov    ecx,edi
c0002503:	84 c9                	test   cl,cl
c0002505:	0f 84 f5 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c000250b:	a8 04                	test   al,0x4
c000250d:	0f 84 ed 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c0002513:	bb 0a 00 00 00       	mov    ebx,0xa
c0002518:	e9 e3 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	89 f0                	mov    eax,esi
c0002522:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002526:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002529:	0f b6 f0             	movzx  esi,al
c000252c:	bb 03 00 00 00       	mov    ebx,0x3
c0002531:	56                   	push   esi
c0002532:	e8 8c f4 ff ff       	call   c00019c3 <disk_initialize>
c0002537:	83 c4 10             	add    esp,0x10
c000253a:	a8 01                	test   al,0x1
c000253c:	0f 85 be 04 00 00    	jne    c0002a00 <mount_volume+0x55f>
c0002542:	89 f9                	mov    ecx,edi
c0002544:	84 c9                	test   cl,cl
c0002546:	74 04                	je     c000254c <mount_volume+0xab>
c0002548:	a8 04                	test   al,0x4
c000254a:	75 c7                	jne    c0002513 <mount_volume+0x72>
c000254c:	31 d2                	xor    edx,edx
c000254e:	89 e8                	mov    eax,ebp
c0002550:	e8 c8 fd ff ff       	call   c000231d <find_volume>
c0002555:	83 f8 04             	cmp    eax,0x4
c0002558:	75 0a                	jne    c0002564 <mount_volume+0xc3>
c000255a:	bb 01 00 00 00       	mov    ebx,0x1
c000255f:	e9 9c 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002564:	83 f8 01             	cmp    eax,0x1
c0002567:	76 0a                	jbe    c0002573 <mount_volume+0xd2>
c0002569:	bb 0d 00 00 00       	mov    ebx,0xd
c000256e:	e9 8d 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002573:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002576:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002579:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000257d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002581:	75 17                	jne    c000259a <mount_volume+0xf9>
c0002583:	b8 0b 00 00 00       	mov    eax,0xb
c0002588:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000258d:	75 da                	jne    c0002569 <mount_volume+0xc8>
c000258f:	40                   	inc    eax
c0002590:	83 f8 40             	cmp    eax,0x40
c0002593:	75 f3                	jne    c0002588 <mount_volume+0xe7>
c0002595:	e9 5a 02 00 00       	jmp    c00027f4 <mount_volume+0x353>
c000259a:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000259d:	e8 6f f4 ff ff       	call   c0001a11 <ld_word>
c00025a2:	66 3d 00 02          	cmp    ax,0x200
c00025a6:	75 c1                	jne    c0002569 <mount_volume+0xc8>
c00025a8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025ab:	e8 61 f4 ff ff       	call   c0001a11 <ld_word>
c00025b0:	0f b7 c0             	movzx  eax,ax
c00025b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b7:	85 c0                	test   eax,eax
c00025b9:	75 0c                	jne    c00025c7 <mount_volume+0x126>
c00025bb:	8d 45 78             	lea    eax,[ebp+0x78]
c00025be:	e8 5b f4 ff ff       	call   c0001a1e <ld_dword>
c00025c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025cb:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025ce:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025d1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025d5:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025d8:	48                   	dec    eax
c00025d9:	3c 01                	cmp    al,0x1
c00025db:	77 8c                	ja     c0002569 <mount_volume+0xc8>
c00025dd:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025e1:	89 c3                	mov    ebx,eax
c00025e3:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025e7:	66 85 c0             	test   ax,ax
c00025ea:	0f 84 79 ff ff ff    	je     c0002569 <mount_volume+0xc8>
c00025f0:	8d 40 ff             	lea    eax,[eax-0x1]
c00025f3:	85 d8                	test   eax,ebx
c00025f5:	0f 85 6e ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c00025fb:	8d 45 65             	lea    eax,[ebp+0x65]
c00025fe:	e8 0e f4 ff ff       	call   c0001a11 <ld_word>
c0002603:	89 c7                	mov    edi,eax
c0002605:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002609:	a8 0f                	test   al,0xf
c000260b:	0f 85 58 ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002611:	8d 45 67             	lea    eax,[ebp+0x67]
c0002614:	e8 f8 f3 ff ff       	call   c0001a11 <ld_word>
c0002619:	0f b7 f0             	movzx  esi,ax
c000261c:	85 f6                	test   esi,esi
c000261e:	75 0a                	jne    c000262a <mount_volume+0x189>
c0002620:	8d 45 74             	lea    eax,[ebp+0x74]
c0002623:	e8 f6 f3 ff ff       	call   c0001a1e <ld_dword>
c0002628:	89 c6                	mov    esi,eax
c000262a:	8d 45 62             	lea    eax,[ebp+0x62]
c000262d:	e8 df f3 ff ff       	call   c0001a11 <ld_word>
c0002632:	66 85 c0             	test   ax,ax
c0002635:	0f 84 2e ff ff ff    	je     c0002569 <mount_volume+0xc8>
c000263b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002640:	0f b7 c8             	movzx  ecx,ax
c0002643:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000264c:	89 fa                	mov    edx,edi
c000264e:	66 c1 ea 04          	shr    dx,0x4
c0002652:	0f b7 d2             	movzx  edx,dx
c0002655:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002659:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000265c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002660:	39 c6                	cmp    esi,eax
c0002662:	0f 82 01 ff ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002668:	29 c6                	sub    esi,eax
c000266a:	31 d2                	xor    edx,edx
c000266c:	89 f0                	mov    eax,esi
c000266e:	f7 f3                	div    ebx
c0002670:	39 de                	cmp    esi,ebx
c0002672:	0f 82 f1 fe ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002678:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000267d:	0f 87 e6 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002683:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002688:	0f 86 63 03 00 00    	jbe    c00029f1 <mount_volume+0x550>
c000268e:	bb 03 00 00 00       	mov    ebx,0x3
c0002693:	8d 70 02             	lea    esi,[eax+0x2]
c0002696:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000269a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000269e:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026a1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026a4:	31 d2                	xor    edx,edx
c00026a6:	89 c8                	mov    eax,ecx
c00026a8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026ab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026af:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026bb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026be:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026c5:	31 d2                	xor    edx,edx
c00026c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026cf:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026d2:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026d5:	83 fb 03             	cmp    ebx,0x3
c00026d8:	75 2b                	jne    c0002705 <mount_volume+0x264>
c00026da:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026dd:	e8 2f f3 ff ff       	call   c0001a11 <ld_word>
c00026e2:	66 09 c7             	or     di,ax
c00026e5:	0f 85 7e fe ff ff    	jne    c0002569 <mount_volume+0xc8>
c00026eb:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026f1:	c1 e6 02             	shl    esi,0x2
c00026f4:	e8 25 f3 ff ff       	call   c0001a1e <ld_dword>
c00026f9:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002700:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002703:	eb 30                	jmp    c0002735 <mount_volume+0x294>
c0002705:	66 85 ff             	test   di,di
c0002708:	0f 84 5b fe ff ff    	je     c0002569 <mount_volume+0xc8>
c000270e:	31 d2                	xor    edx,edx
c0002710:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002714:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002718:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000271c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000271f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002722:	83 fb 02             	cmp    ebx,0x2
c0002725:	75 04                	jne    c000272b <mount_volume+0x28a>
c0002727:	01 f6                	add    esi,esi
c0002729:	eb 0a                	jmp    c0002735 <mount_volume+0x294>
c000272b:	8d 04 76             	lea    eax,[esi+esi*2]
c000272e:	83 e6 01             	and    esi,0x1
c0002731:	d1 e8                	shr    eax,1
c0002733:	01 c6                	add    esi,eax
c0002735:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000273b:	c1 ee 09             	shr    esi,0x9
c000273e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002742:	0f 87 21 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002748:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000274f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002756:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000275a:	83 fb 03             	cmp    ebx,0x3
c000275d:	75 7a                	jne    c00027d9 <mount_volume+0x338>
c000275f:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002765:	e8 a7 f2 ff ff       	call   c0001a11 <ld_word>
c000276a:	66 48                	dec    ax
c000276c:	75 6b                	jne    c00027d9 <mount_volume+0x338>
c000276e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002772:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002776:	83 c2 01             	add    edx,0x1
c0002779:	89 e8                	mov    eax,ebp
c000277b:	83 d1 00             	adc    ecx,0x0
c000277e:	e8 6c fa ff ff       	call   c00021ef <move_window>
c0002783:	85 c0                	test   eax,eax
c0002785:	75 52                	jne    c00027d9 <mount_volume+0x338>
c0002787:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000278b:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002791:	e8 7b f2 ff ff       	call   c0001a11 <ld_word>
c0002796:	66 3d 55 aa          	cmp    ax,0xaa55
c000279a:	75 3d                	jne    c00027d9 <mount_volume+0x338>
c000279c:	8d 45 54             	lea    eax,[ebp+0x54]
c000279f:	e8 7a f2 ff ff       	call   c0001a1e <ld_dword>
c00027a4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027a9:	75 2e                	jne    c00027d9 <mount_volume+0x338>
c00027ab:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027b1:	e8 68 f2 ff ff       	call   c0001a1e <ld_dword>
c00027b6:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027bb:	75 1c                	jne    c00027d9 <mount_volume+0x338>
c00027bd:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027c3:	e8 56 f2 ff ff       	call   c0001a1e <ld_dword>
c00027c8:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027cb:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027d1:	e8 48 f2 ff ff       	call   c0001a1e <ld_dword>
c00027d6:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027d9:	66 a1 c0 c7 02 c0    	mov    ax,ds:0xc002c7c0
c00027df:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027e2:	40                   	inc    eax
c00027e3:	31 db                	xor    ebx,ebx
c00027e5:	66 a3 c0 c7 02 c0    	mov    ds:0xc002c7c0,ax
c00027eb:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027ef:	e9 0c 02 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c00027f4:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027fa:	e8 12 f2 ff ff       	call   c0001a11 <ld_word>
c00027ff:	66 3d 00 01          	cmp    ax,0x100
c0002803:	0f 85 60 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002809:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002810:	0f 85 53 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002816:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000281c:	e8 15 f2 ff ff       	call   c0001a36 <ld_qword>
c0002821:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002825:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002829:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000282f:	e8 ea f1 ff ff       	call   c0001a1e <ld_dword>
c0002834:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002837:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000283d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002840:	fe c8                	dec    al
c0002842:	0f 85 21 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002848:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000284f:	bb 01 00 00 00       	mov    ebx,0x1
c0002854:	d3 e3                	shl    ebx,cl
c0002856:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000285a:	66 85 db             	test   bx,bx
c000285d:	0f 84 06 fd ff ff    	je     c0002569 <mount_volume+0xc8>
c0002863:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002869:	e8 b0 f1 ff ff       	call   c0001a1e <ld_dword>
c000286e:	89 c6                	mov    esi,eax
c0002870:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002875:	0f 87 ee fc ff ff    	ja     c0002569 <mount_volume+0xc8>
c000287b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000287f:	8d 40 02             	lea    eax,[eax+0x2]
c0002882:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002885:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000288c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000288f:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002895:	e8 84 f1 ff ff       	call   c0001a1e <ld_dword>
c000289a:	31 d2                	xor    edx,edx
c000289c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028a0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028ac:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028af:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028b2:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028b8:	e8 61 f1 ff ff       	call   c0001a1e <ld_dword>
c00028bd:	31 d2                	xor    edx,edx
c00028bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028cb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028ce:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d1:	0f b7 c3             	movzx  eax,bx
c00028d4:	31 d2                	xor    edx,edx
c00028d6:	0f af f0             	imul   esi,eax
c00028d9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028e3:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028e7:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028eb:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028ef:	39 c1                	cmp    ecx,eax
c00028f1:	89 df                	mov    edi,ebx
c00028f3:	19 d7                	sbb    edi,edx
c00028f5:	0f 82 6e fc ff ff    	jb     c0002569 <mount_volume+0xc8>
c00028fb:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002901:	31 db                	xor    ebx,ebx
c0002903:	e8 16 f1 ff ff       	call   c0001a1e <ld_dword>
c0002908:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000290f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002912:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000291a:	85 db                	test   ebx,ebx
c000291c:	75 39                	jne    c0002957 <mount_volume+0x4b6>
c000291e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002922:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002926:	0f 86 3d fc ff ff    	jbe    c0002569 <mount_volume+0xc8>
c000292c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000292f:	31 ff                	xor    edi,edi
c0002931:	89 e8                	mov    eax,ebp
c0002933:	e8 72 f3 ff ff       	call   c0001caa <clst2sect>
c0002938:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000293c:	01 c6                	add    esi,eax
c000293e:	89 e8                	mov    eax,ebp
c0002940:	11 d7                	adc    edi,edx
c0002942:	89 f2                	mov    edx,esi
c0002944:	89 f9                	mov    ecx,edi
c0002946:	e8 a4 f8 ff ff       	call   c00021ef <move_window>
c000294b:	85 c0                	test   eax,eax
c000294d:	0f 85 07 fc ff ff    	jne    c000255a <mount_volume+0xb9>
c0002953:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002957:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000295c:	74 0b                	je     c0002969 <mount_volume+0x4c8>
c000295e:	83 c3 20             	add    ebx,0x20
c0002961:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002967:	eb b1                	jmp    c000291a <mount_volume+0x479>
c0002969:	8d 75 54             	lea    esi,[ebp+0x54]
c000296c:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002970:	e8 a9 f0 ff ff       	call   c0001a1e <ld_dword>
c0002975:	89 c3                	mov    ebx,eax
c0002977:	83 f8 01             	cmp    eax,0x1
c000297a:	0f 86 e9 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002980:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002983:	0f 86 e0 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002989:	8d 53 fe             	lea    edx,[ebx-0x2]
c000298c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002990:	0f af c2             	imul   eax,edx
c0002993:	31 d2                	xor    edx,edx
c0002995:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002998:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000299b:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000299e:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029a1:	31 c9                	xor    ecx,ecx
c00029a3:	89 da                	mov    edx,ebx
c00029a5:	89 e8                	mov    eax,ebp
c00029a7:	c1 ea 07             	shr    edx,0x7
c00029aa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029ad:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029b0:	e8 3a f8 ff ff       	call   c00021ef <move_window>
c00029b5:	85 c0                	test   eax,eax
c00029b7:	0f 85 9d fb ff ff    	jne    c000255a <mount_volume+0xb9>
c00029bd:	89 d8                	mov    eax,ebx
c00029bf:	83 e0 7f             	and    eax,0x7f
c00029c2:	8d 04 86             	lea    eax,[esi+eax*4]
c00029c5:	e8 54 f0 ff ff       	call   c0001a1e <ld_dword>
c00029ca:	83 f8 ff             	cmp    eax,0xffffffff
c00029cd:	74 0a                	je     c00029d9 <mount_volume+0x538>
c00029cf:	43                   	inc    ebx
c00029d0:	39 d8                	cmp    eax,ebx
c00029d2:	74 cd                	je     c00029a1 <mount_volume+0x500>
c00029d4:	e9 90 fb ff ff       	jmp    c0002569 <mount_volume+0xc8>
c00029d9:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029e0:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029e7:	bb 04 00 00 00       	mov    ebx,0x4
c00029ec:	e9 e8 fd ff ff       	jmp    c00027d9 <mount_volume+0x338>
c00029f1:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029f6:	19 db                	sbb    ebx,ebx
c00029f8:	83 c3 02             	add    ebx,0x2
c00029fb:	e9 93 fc ff ff       	jmp    c0002693 <mount_volume+0x1f2>
c0002a00:	83 c4 3c             	add    esp,0x3c
c0002a03:	89 d8                	mov    eax,ebx
c0002a05:	5b                   	pop    ebx
c0002a06:	5e                   	pop    esi
c0002a07:	5f                   	pop    edi
c0002a08:	5d                   	pop    ebp
c0002a09:	c3                   	ret    

c0002a0a <find_bitmap>:
c0002a0a:	55                   	push   ebp
c0002a0b:	57                   	push   edi
c0002a0c:	89 c7                	mov    edi,eax
c0002a0e:	56                   	push   esi
c0002a0f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a12:	53                   	push   ebx
c0002a13:	83 ec 1c             	sub    esp,0x1c
c0002a16:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a19:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a1d:	83 e8 02             	sub    eax,0x2
c0002a20:	39 f0                	cmp    eax,esi
c0002a22:	77 02                	ja     c0002a26 <find_bitmap+0x1c>
c0002a24:	31 f6                	xor    esi,esi
c0002a26:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a2a:	89 f3                	mov    ebx,esi
c0002a2c:	31 ed                	xor    ebp,ebp
c0002a2e:	31 c9                	xor    ecx,ecx
c0002a30:	89 da                	mov    edx,ebx
c0002a32:	89 f8                	mov    eax,edi
c0002a34:	c1 ea 0c             	shr    edx,0xc
c0002a37:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a3a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a3d:	e8 ad f7 ff ff       	call   c00021ef <move_window>
c0002a42:	85 c0                	test   eax,eax
c0002a44:	75 68                	jne    c0002aae <find_bitmap+0xa4>
c0002a46:	89 da                	mov    edx,ebx
c0002a48:	89 d9                	mov    ecx,ebx
c0002a4a:	c1 ea 03             	shr    edx,0x3
c0002a4d:	83 e1 07             	and    ecx,0x7
c0002a50:	b8 01 00 00 00       	mov    eax,0x1
c0002a55:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a5b:	d3 e0                	shl    eax,cl
c0002a5d:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a60:	83 e9 02             	sub    ecx,0x2
c0002a63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a67:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a6b:	43                   	inc    ebx
c0002a6c:	21 c1                	and    ecx,eax
c0002a6e:	d1 e0                	shl    eax,1
c0002a70:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a74:	77 09                	ja     c0002a7f <find_bitmap+0x75>
c0002a76:	31 db                	xor    ebx,ebx
c0002a78:	ba 00 02 00 00       	mov    edx,0x200
c0002a7d:	31 c0                	xor    eax,eax
c0002a7f:	84 c9                	test   cl,cl
c0002a81:	75 10                	jne    c0002a93 <find_bitmap+0x89>
c0002a83:	45                   	inc    ebp
c0002a84:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a88:	75 0f                	jne    c0002a99 <find_bitmap+0x8f>
c0002a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a8e:	83 c0 02             	add    eax,0x2
c0002a91:	eb 22                	jmp    c0002ab5 <find_bitmap+0xab>
c0002a93:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a97:	31 ed                	xor    ebp,ebp
c0002a99:	39 de                	cmp    esi,ebx
c0002a9b:	74 16                	je     c0002ab3 <find_bitmap+0xa9>
c0002a9d:	84 c0                	test   al,al
c0002a9f:	75 c6                	jne    c0002a67 <find_bitmap+0x5d>
c0002aa1:	42                   	inc    edx
c0002aa2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002aa8:	77 84                	ja     c0002a2e <find_bitmap+0x24>
c0002aaa:	b0 01                	mov    al,0x1
c0002aac:	eb b9                	jmp    c0002a67 <find_bitmap+0x5d>
c0002aae:	83 c8 ff             	or     eax,0xffffffff
c0002ab1:	eb 02                	jmp    c0002ab5 <find_bitmap+0xab>
c0002ab3:	31 c0                	xor    eax,eax
c0002ab5:	83 c4 1c             	add    esp,0x1c
c0002ab8:	5b                   	pop    ebx
c0002ab9:	5e                   	pop    esi
c0002aba:	5f                   	pop    edi
c0002abb:	5d                   	pop    ebp
c0002abc:	c3                   	ret    

c0002abd <change_bitmap>:
c0002abd:	55                   	push   ebp
c0002abe:	89 cd                	mov    ebp,ecx
c0002ac0:	57                   	push   edi
c0002ac1:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ac4:	56                   	push   esi
c0002ac5:	89 c7                	mov    edi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	89 c8                	mov    eax,ecx
c0002aca:	83 ec 1c             	sub    esp,0x1c
c0002acd:	31 d2                	xor    edx,edx
c0002acf:	89 ce                	mov    esi,ecx
c0002ad1:	c1 e8 0c             	shr    eax,0xc
c0002ad4:	bb 01 00 00 00       	mov    ebx,0x1
c0002ad9:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002adc:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002adf:	c1 ee 03             	shr    esi,0x3
c0002ae2:	83 e1 07             	and    ecx,0x7
c0002ae5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002aeb:	d3 e3                	shl    ebx,cl
c0002aed:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002af1:	89 c1                	mov    ecx,eax
c0002af3:	89 d3                	mov    ebx,edx
c0002af5:	83 c1 01             	add    ecx,0x1
c0002af8:	83 d3 00             	adc    ebx,0x0
c0002afb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aff:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b03:	89 d1                	mov    ecx,edx
c0002b05:	89 c2                	mov    edx,eax
c0002b07:	89 f8                	mov    eax,edi
c0002b09:	e8 e1 f6 ff ff       	call   c00021ef <move_window>
c0002b0e:	89 c1                	mov    ecx,eax
c0002b10:	85 c0                	test   eax,eax
c0002b12:	75 48                	jne    c0002b5c <change_bitmap+0x9f>
c0002b14:	31 d2                	xor    edx,edx
c0002b16:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b1a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b1e:	0f 95 c2             	setne  dl
c0002b21:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b25:	74 3c                	je     c0002b63 <change_bitmap+0xa6>
c0002b27:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b2b:	4d                   	dec    ebp
c0002b2c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b34:	74 32                	je     c0002b68 <change_bitmap+0xab>
c0002b36:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b3a:	75 d8                	jne    c0002b14 <change_bitmap+0x57>
c0002b3c:	8d 46 01             	lea    eax,[esi+0x1]
c0002b3f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b44:	89 c3                	mov    ebx,eax
c0002b46:	31 f6                	xor    esi,esi
c0002b48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b50:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b56:	74 99                	je     c0002af1 <change_bitmap+0x34>
c0002b58:	89 de                	mov    esi,ebx
c0002b5a:	eb b8                	jmp    c0002b14 <change_bitmap+0x57>
c0002b5c:	b9 01 00 00 00       	mov    ecx,0x1
c0002b61:	eb 05                	jmp    c0002b68 <change_bitmap+0xab>
c0002b63:	b9 02 00 00 00       	mov    ecx,0x2
c0002b68:	83 c4 1c             	add    esp,0x1c
c0002b6b:	89 c8                	mov    eax,ecx
c0002b6d:	5b                   	pop    ebx
c0002b6e:	5e                   	pop    esi
c0002b6f:	5f                   	pop    edi
c0002b70:	5d                   	pop    ebp
c0002b71:	c3                   	ret    

c0002b72 <put_fat>:
c0002b72:	83 fa 01             	cmp    edx,0x1
c0002b75:	0f 86 7b 01 00 00    	jbe    c0002cf6 <put_fat+0x184>
c0002b7b:	55                   	push   ebp
c0002b7c:	57                   	push   edi
c0002b7d:	89 cf                	mov    edi,ecx
c0002b7f:	56                   	push   esi
c0002b80:	b9 02 00 00 00       	mov    ecx,0x2
c0002b85:	53                   	push   ebx
c0002b86:	89 c6                	mov    esi,eax
c0002b88:	83 ec 1c             	sub    esp,0x1c
c0002b8b:	89 d3                	mov    ebx,edx
c0002b8d:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b90:	0f 86 68 01 00 00    	jbe    c0002cfe <put_fat+0x18c>
c0002b96:	8a 00                	mov    al,BYTE PTR [eax]
c0002b98:	3c 02                	cmp    al,0x2
c0002b9a:	0f 84 c7 00 00 00    	je     c0002c67 <put_fat+0xf5>
c0002ba0:	77 09                	ja     c0002bab <put_fat+0x39>
c0002ba2:	fe c8                	dec    al
c0002ba4:	74 17                	je     c0002bbd <put_fat+0x4b>
c0002ba6:	e9 53 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bab:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb0:	3c 04                	cmp    al,0x4
c0002bb2:	0f 86 e1 00 00 00    	jbe    c0002c99 <put_fat+0x127>
c0002bb8:	e9 41 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bbd:	89 d5                	mov    ebp,edx
c0002bbf:	31 c9                	xor    ecx,ecx
c0002bc1:	d1 ed                	shr    ebp,1
c0002bc3:	89 f0                	mov    eax,esi
c0002bc5:	01 d5                	add    ebp,edx
c0002bc7:	89 ea                	mov    edx,ebp
c0002bc9:	c1 ea 09             	shr    edx,0x9
c0002bcc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bcf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bd2:	e8 18 f6 ff ff       	call   c00021ef <move_window>
c0002bd7:	89 c1                	mov    ecx,eax
c0002bd9:	85 c0                	test   eax,eax
c0002bdb:	0f 85 1d 01 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002be1:	8d 46 54             	lea    eax,[esi+0x54]
c0002be4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002be8:	8d 45 01             	lea    eax,[ebp+0x1]
c0002beb:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bf5:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bf9:	89 f8                	mov    eax,edi
c0002bfb:	83 e3 01             	and    ebx,0x1
c0002bfe:	74 0d                	je     c0002c0d <put_fat+0x9b>
c0002c00:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c03:	89 fa                	mov    edx,edi
c0002c05:	83 e0 0f             	and    eax,0xf
c0002c08:	c1 e2 04             	shl    edx,0x4
c0002c0b:	09 d0                	or     eax,edx
c0002c0d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c14:	31 c9                	xor    ecx,ecx
c0002c16:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c1a:	c1 ea 09             	shr    edx,0x9
c0002c1d:	89 f0                	mov    eax,esi
c0002c1f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c22:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c25:	e8 c5 f5 ff ff       	call   c00021ef <move_window>
c0002c2a:	89 c1                	mov    ecx,eax
c0002c2c:	85 c0                	test   eax,eax
c0002c2e:	0f 85 ca 00 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002c34:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c38:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c3e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c42:	85 db                	test   ebx,ebx
c0002c44:	74 07                	je     c0002c4d <put_fat+0xdb>
c0002c46:	c1 ef 04             	shr    edi,0x4
c0002c49:	89 fa                	mov    edx,edi
c0002c4b:	eb 0e                	jmp    c0002c5b <put_fat+0xe9>
c0002c4d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c50:	c1 ef 08             	shr    edi,0x8
c0002c53:	83 e2 f0             	and    edx,0xfffffff0
c0002c56:	83 e7 0f             	and    edi,0xf
c0002c59:	09 fa                	or     edx,edi
c0002c5b:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c5e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c62:	e9 97 00 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002c67:	31 c9                	xor    ecx,ecx
c0002c69:	c1 ea 08             	shr    edx,0x8
c0002c6c:	89 f0                	mov    eax,esi
c0002c6e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c71:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c74:	e8 76 f5 ff ff       	call   c00021ef <move_window>
c0002c79:	89 c1                	mov    ecx,eax
c0002c7b:	85 c0                	test   eax,eax
c0002c7d:	75 7f                	jne    c0002cfe <put_fat+0x18c>
c0002c7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c83:	01 db                	add    ebx,ebx
c0002c85:	0f b7 d7             	movzx  edx,di
c0002c88:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c8e:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c92:	e8 ec ed ff ff       	call   c0001a83 <st_word>
c0002c97:	eb 53                	jmp    c0002cec <put_fat+0x17a>
c0002c99:	31 c9                	xor    ecx,ecx
c0002c9b:	c1 ea 07             	shr    edx,0x7
c0002c9e:	89 f0                	mov    eax,esi
c0002ca0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca6:	e8 44 f5 ff ff       	call   c00021ef <move_window>
c0002cab:	89 c1                	mov    ecx,eax
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 4d                	jne    c0002cfe <put_fat+0x18c>
c0002cb1:	c1 e3 02             	shl    ebx,0x2
c0002cb4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cba:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cbd:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cc1:	74 1c                	je     c0002cdf <put_fat+0x16d>
c0002cc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cc7:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ccd:	89 d8                	mov    eax,ebx
c0002ccf:	e8 4a ed ff ff       	call   c0001a1e <ld_dword>
c0002cd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cd8:	25 00 00 00 f0       	and    eax,0xf0000000
c0002cdd:	09 c7                	or     edi,eax
c0002cdf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ce3:	89 fa                	mov    edx,edi
c0002ce5:	89 d8                	mov    eax,ebx
c0002ce7:	e8 9b ed ff ff       	call   c0001a87 <st_dword>
c0002cec:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cf4:	eb 08                	jmp    c0002cfe <put_fat+0x18c>
c0002cf6:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfb:	89 c8                	mov    eax,ecx
c0002cfd:	c3                   	ret    
c0002cfe:	83 c4 1c             	add    esp,0x1c
c0002d01:	89 c8                	mov    eax,ecx
c0002d03:	5b                   	pop    ebx
c0002d04:	5e                   	pop    esi
c0002d05:	5f                   	pop    edi
c0002d06:	5d                   	pop    ebp
c0002d07:	c3                   	ret    

c0002d08 <fill_last_frag>:
c0002d08:	57                   	push   edi
c0002d09:	89 cf                	mov    edi,ecx
c0002d0b:	56                   	push   esi
c0002d0c:	89 d6                	mov    esi,edx
c0002d0e:	53                   	push   ebx
c0002d0f:	89 c3                	mov    ebx,eax
c0002d11:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d14:	85 c0                	test   eax,eax
c0002d16:	74 21                	je     c0002d39 <fill_last_frag+0x31>
c0002d18:	89 f9                	mov    ecx,edi
c0002d1a:	83 f8 01             	cmp    eax,0x1
c0002d1d:	76 05                	jbe    c0002d24 <fill_last_frag+0x1c>
c0002d1f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d22:	29 c1                	sub    ecx,eax
c0002d24:	8d 56 01             	lea    edx,[esi+0x1]
c0002d27:	29 c2                	sub    edx,eax
c0002d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d2b:	e8 42 fe ff ff       	call   c0002b72 <put_fat>
c0002d30:	85 c0                	test   eax,eax
c0002d32:	75 05                	jne    c0002d39 <fill_last_frag+0x31>
c0002d34:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d37:	eb d8                	jmp    c0002d11 <fill_last_frag+0x9>
c0002d39:	5b                   	pop    ebx
c0002d3a:	5e                   	pop    esi
c0002d3b:	5f                   	pop    edi
c0002d3c:	c3                   	ret    

c0002d3d <fill_first_frag>:
c0002d3d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d41:	75 2d                	jne    c0002d70 <fill_first_frag+0x33>
c0002d43:	57                   	push   edi
c0002d44:	56                   	push   esi
c0002d45:	53                   	push   ebx
c0002d46:	89 c3                	mov    ebx,eax
c0002d48:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d4b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d4e:	01 d7                	add    edi,edx
c0002d50:	39 fa                	cmp    edx,edi
c0002d52:	74 14                	je     c0002d68 <fill_first_frag+0x2b>
c0002d54:	8d 72 01             	lea    esi,[edx+0x1]
c0002d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d59:	89 f1                	mov    ecx,esi
c0002d5b:	e8 12 fe ff ff       	call   c0002b72 <put_fat>
c0002d60:	89 f2                	mov    edx,esi
c0002d62:	85 c0                	test   eax,eax
c0002d64:	74 ea                	je     c0002d50 <fill_first_frag+0x13>
c0002d66:	eb 0b                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d68:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d6c:	31 c0                	xor    eax,eax
c0002d6e:	eb 03                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d70:	31 c0                	xor    eax,eax
c0002d72:	c3                   	ret    
c0002d73:	5b                   	pop    ebx
c0002d74:	5e                   	pop    esi
c0002d75:	5f                   	pop    edi
c0002d76:	c3                   	ret    

c0002d77 <get_fat>:
c0002d77:	83 fa 01             	cmp    edx,0x1
c0002d7a:	0f 86 db 01 00 00    	jbe    c0002f5b <get_fat+0x1e4>
c0002d80:	55                   	push   ebp
c0002d81:	b9 01 00 00 00       	mov    ecx,0x1
c0002d86:	57                   	push   edi
c0002d87:	56                   	push   esi
c0002d88:	53                   	push   ebx
c0002d89:	83 ec 1c             	sub    esp,0x1c
c0002d8c:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d8e:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d91:	0f 86 cc 01 00 00    	jbe    c0002f63 <get_fat+0x1ec>
c0002d97:	89 c3                	mov    ebx,eax
c0002d99:	89 d6                	mov    esi,edx
c0002d9b:	8a 07                	mov    al,BYTE PTR [edi]
c0002d9d:	3c 02                	cmp    al,0x2
c0002d9f:	0f 84 99 00 00 00    	je     c0002e3e <get_fat+0xc7>
c0002da5:	77 09                	ja     c0002db0 <get_fat+0x39>
c0002da7:	fe c8                	dec    al
c0002da9:	74 1a                	je     c0002dc5 <get_fat+0x4e>
c0002dab:	e9 b3 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002db0:	3c 03                	cmp    al,0x3
c0002db2:	0f 84 b5 00 00 00    	je     c0002e6d <get_fat+0xf6>
c0002db8:	3c 04                	cmp    al,0x4
c0002dba:	0f 84 e3 00 00 00    	je     c0002ea3 <get_fat+0x12c>
c0002dc0:	e9 9e 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002dc5:	89 d3                	mov    ebx,edx
c0002dc7:	31 c9                	xor    ecx,ecx
c0002dc9:	d1 eb                	shr    ebx,1
c0002dcb:	89 f8                	mov    eax,edi
c0002dcd:	01 d3                	add    ebx,edx
c0002dcf:	89 da                	mov    edx,ebx
c0002dd1:	c1 ea 09             	shr    edx,0x9
c0002dd4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dd7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dda:	e8 10 f4 ff ff       	call   c00021ef <move_window>
c0002ddf:	85 c0                	test   eax,eax
c0002de1:	74 08                	je     c0002deb <get_fat+0x74>
c0002de3:	83 c9 ff             	or     ecx,0xffffffff
c0002de6:	e9 78 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002deb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002df6:	89 ea                	mov    edx,ebp
c0002df8:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dfc:	c1 ea 09             	shr    edx,0x9
c0002dff:	89 f8                	mov    eax,edi
c0002e01:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e04:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e07:	e8 e3 f3 ff ff       	call   c00021ef <move_window>
c0002e0c:	85 c0                	test   eax,eax
c0002e0e:	75 d3                	jne    c0002de3 <get_fat+0x6c>
c0002e10:	0f b6 c3             	movzx  eax,bl
c0002e13:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e19:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e1e:	c1 e3 08             	shl    ebx,0x8
c0002e21:	09 c3                	or     ebx,eax
c0002e23:	89 d9                	mov    ecx,ebx
c0002e25:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e2b:	83 e6 01             	and    esi,0x1
c0002e2e:	0f 84 2f 01 00 00    	je     c0002f63 <get_fat+0x1ec>
c0002e34:	89 d9                	mov    ecx,ebx
c0002e36:	c1 e9 04             	shr    ecx,0x4
c0002e39:	e9 25 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e3e:	31 c9                	xor    ecx,ecx
c0002e40:	c1 ea 08             	shr    edx,0x8
c0002e43:	89 f8                	mov    eax,edi
c0002e45:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e48:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e4b:	e8 9f f3 ff ff       	call   c00021ef <move_window>
c0002e50:	85 c0                	test   eax,eax
c0002e52:	75 8f                	jne    c0002de3 <get_fat+0x6c>
c0002e54:	01 f6                	add    esi,esi
c0002e56:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e5c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e60:	e8 ac eb ff ff       	call   c0001a11 <ld_word>
c0002e65:	0f b7 c8             	movzx  ecx,ax
c0002e68:	e9 f6 00 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e6d:	31 c9                	xor    ecx,ecx
c0002e6f:	c1 ea 07             	shr    edx,0x7
c0002e72:	89 f8                	mov    eax,edi
c0002e74:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e77:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e7a:	e8 70 f3 ff ff       	call   c00021ef <move_window>
c0002e7f:	85 c0                	test   eax,eax
c0002e81:	0f 85 5c ff ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002e87:	c1 e6 02             	shl    esi,0x2
c0002e8a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e90:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e94:	e8 85 eb ff ff       	call   c0001a1e <ld_dword>
c0002e99:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e9e:	e9 b4 00 00 00       	jmp    c0002f57 <get_fat+0x1e0>
c0002ea3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ea6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ea9:	89 d1                	mov    ecx,edx
c0002eab:	09 c1                	or     ecx,eax
c0002ead:	74 06                	je     c0002eb5 <get_fat+0x13e>
c0002eaf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eb3:	75 0f                	jne    c0002ec4 <get_fat+0x14d>
c0002eb5:	b9 01 00 00 00       	mov    ecx,0x1
c0002eba:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ebe:	0f 85 9f 00 00 00    	jne    c0002f63 <get_fat+0x1ec>
c0002ec4:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ec8:	89 f5                	mov    ebp,esi
c0002eca:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ecf:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ed2:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ed5:	80 f9 02             	cmp    cl,0x2
c0002ed8:	75 35                	jne    c0002f0f <get_fat+0x198>
c0002eda:	83 c0 ff             	add    eax,0xffffffff
c0002edd:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ee2:	83 d2 ff             	adc    edx,0xffffffff
c0002ee5:	31 db                	xor    ebx,ebx
c0002ee7:	0f ac d0 09          	shrd   eax,edx,0x9
c0002eeb:	53                   	push   ebx
c0002eec:	c1 ea 09             	shr    edx,0x9
c0002eef:	51                   	push   ecx
c0002ef0:	52                   	push   edx
c0002ef1:	50                   	push   eax
c0002ef2:	e8 c5 23 02 00       	call   c00252bc <__udivdi3>
c0002ef7:	83 c4 10             	add    esp,0x10
c0002efa:	b9 01 00 00 00       	mov    ecx,0x1
c0002eff:	39 c5                	cmp    ebp,eax
c0002f01:	77 60                	ja     c0002f63 <get_fat+0x1ec>
c0002f03:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f08:	74 59                	je     c0002f63 <get_fat+0x1ec>
c0002f0a:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f0d:	eb 54                	jmp    c0002f63 <get_fat+0x1ec>
c0002f0f:	80 f9 03             	cmp    cl,0x3
c0002f12:	75 05                	jne    c0002f19 <get_fat+0x1a2>
c0002f14:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f17:	77 f1                	ja     c0002f0a <get_fat+0x193>
c0002f19:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f1e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f22:	75 3f                	jne    c0002f63 <get_fat+0x1ec>
c0002f24:	31 c9                	xor    ecx,ecx
c0002f26:	89 f2                	mov    edx,esi
c0002f28:	89 f8                	mov    eax,edi
c0002f2a:	c1 ea 07             	shr    edx,0x7
c0002f2d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f30:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f33:	e8 b7 f2 ff ff       	call   c00021ef <move_window>
c0002f38:	85 c0                	test   eax,eax
c0002f3a:	0f 85 a3 fe ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002f40:	c1 e6 02             	shl    esi,0x2
c0002f43:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f49:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f4d:	e8 cc ea ff ff       	call   c0001a1e <ld_dword>
c0002f52:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f57:	89 c1                	mov    ecx,eax
c0002f59:	eb 08                	jmp    c0002f63 <get_fat+0x1ec>
c0002f5b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f60:	89 c8                	mov    eax,ecx
c0002f62:	c3                   	ret    
c0002f63:	83 c4 1c             	add    esp,0x1c
c0002f66:	89 c8                	mov    eax,ecx
c0002f68:	5b                   	pop    ebx
c0002f69:	5e                   	pop    esi
c0002f6a:	5f                   	pop    edi
c0002f6b:	5d                   	pop    ebp
c0002f6c:	c3                   	ret    

c0002f6d <dir_sdi>:
c0002f6d:	55                   	push   ebp
c0002f6e:	57                   	push   edi
c0002f6f:	56                   	push   esi
c0002f70:	53                   	push   ebx
c0002f71:	89 c3                	mov    ebx,eax
c0002f73:	83 ec 1c             	sub    esp,0x1c
c0002f76:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f78:	31 c0                	xor    eax,eax
c0002f7a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f7d:	0f 94 c0             	sete   al
c0002f80:	48                   	dec    eax
c0002f81:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f86:	05 00 00 00 10       	add    eax,0x10000000
c0002f8b:	39 d0                	cmp    eax,edx
c0002f8d:	77 0a                	ja     c0002f99 <dir_sdi+0x2c>
c0002f8f:	b8 02 00 00 00       	mov    eax,0x2
c0002f94:	e9 c4 00 00 00       	jmp    c000305d <dir_sdi+0xf0>
c0002f99:	89 d6                	mov    esi,edx
c0002f9b:	f6 c2 1f             	test   dl,0x1f
c0002f9e:	75 ef                	jne    c0002f8f <dir_sdi+0x22>
c0002fa0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fa3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fa6:	85 c9                	test   ecx,ecx
c0002fa8:	75 2d                	jne    c0002fd7 <dir_sdi+0x6a>
c0002faa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fad:	77 1b                	ja     c0002fca <dir_sdi+0x5d>
c0002faf:	89 f2                	mov    edx,esi
c0002fb1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fb5:	c1 ea 05             	shr    edx,0x5
c0002fb8:	39 c2                	cmp    edx,eax
c0002fba:	73 d3                	jae    c0002f8f <dir_sdi+0x22>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fc2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fc8:	eb 4b                	jmp    c0003015 <dir_sdi+0xa8>
c0002fca:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fcd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 da                	je     c0002faf <dir_sdi+0x42>
c0002fd5:	89 c1                	mov    ecx,eax
c0002fd7:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fdb:	c1 e5 09             	shl    ebp,0x9
c0002fde:	89 ca                	mov    edx,ecx
c0002fe0:	39 ee                	cmp    esi,ebp
c0002fe2:	72 1c                	jb     c0003000 <dir_sdi+0x93>
c0002fe4:	89 d8                	mov    eax,ebx
c0002fe6:	e8 8c fd ff ff       	call   c0002d77 <get_fat>
c0002feb:	89 c1                	mov    ecx,eax
c0002fed:	83 f8 ff             	cmp    eax,0xffffffff
c0002ff0:	74 66                	je     c0003058 <dir_sdi+0xeb>
c0002ff2:	83 f8 01             	cmp    eax,0x1
c0002ff5:	76 98                	jbe    c0002f8f <dir_sdi+0x22>
c0002ff7:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002ffa:	76 93                	jbe    c0002f8f <dir_sdi+0x22>
c0002ffc:	29 ee                	sub    esi,ebp
c0002ffe:	eb de                	jmp    c0002fde <dir_sdi+0x71>
c0003000:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003004:	89 f8                	mov    eax,edi
c0003006:	e8 9f ec ff ff       	call   c0001caa <clst2sect>
c000300b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000300f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003012:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003015:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003018:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000301b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000301e:	89 d1                	mov    ecx,edx
c0003020:	09 c1                	or     ecx,eax
c0003022:	0f 84 67 ff ff ff    	je     c0002f8f <dir_sdi+0x22>
c0003028:	89 f1                	mov    ecx,esi
c000302a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003032:	c1 e9 09             	shr    ecx,0x9
c0003035:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003039:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000303d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003041:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003044:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000304a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003051:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003054:	31 c0                	xor    eax,eax
c0003056:	eb 05                	jmp    c000305d <dir_sdi+0xf0>
c0003058:	b8 01 00 00 00       	mov    eax,0x1
c000305d:	83 c4 1c             	add    esp,0x1c
c0003060:	5b                   	pop    ebx
c0003061:	5e                   	pop    esi
c0003062:	5f                   	pop    edi
c0003063:	5d                   	pop    ebp
c0003064:	c3                   	ret    

c0003065 <create_chain>:
c0003065:	55                   	push   ebp
c0003066:	89 c5                	mov    ebp,eax
c0003068:	57                   	push   edi
c0003069:	56                   	push   esi
c000306a:	53                   	push   ebx
c000306b:	83 ec 1c             	sub    esp,0x1c
c000306e:	85 d2                	test   edx,edx
c0003070:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003074:	8b 30                	mov    esi,DWORD PTR [eax]
c0003076:	75 0e                	jne    c0003086 <create_chain+0x21>
c0003078:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000307b:	85 ff                	test   edi,edi
c000307d:	74 39                	je     c00030b8 <create_chain+0x53>
c000307f:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003082:	77 39                	ja     c00030bd <create_chain+0x58>
c0003084:	eb 32                	jmp    c00030b8 <create_chain+0x53>
c0003086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000308a:	e8 e8 fc ff ff       	call   c0002d77 <get_fat>
c000308f:	89 c3                	mov    ebx,eax
c0003091:	83 f8 01             	cmp    eax,0x1
c0003094:	77 0a                	ja     c00030a0 <create_chain+0x3b>
c0003096:	bb 01 00 00 00       	mov    ebx,0x1
c000309b:	e9 ba 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030a0:	83 f8 ff             	cmp    eax,0xffffffff
c00030a3:	0f 84 62 01 00 00    	je     c000320b <create_chain+0x1a6>
c00030a9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ac:	0f 87 a8 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030b2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030b6:	eb 05                	jmp    c00030bd <create_chain+0x58>
c00030b8:	bf 01 00 00 00       	mov    edi,0x1
c00030bd:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030c1:	75 07                	jne    c00030ca <create_chain+0x65>
c00030c3:	31 db                	xor    ebx,ebx
c00030c5:	e9 90 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030ca:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030cd:	75 74                	jne    c0003143 <create_chain+0xde>
c00030cf:	b9 01 00 00 00       	mov    ecx,0x1
c00030d4:	89 fa                	mov    edx,edi
c00030d6:	89 f0                	mov    eax,esi
c00030d8:	e8 2d f9 ff ff       	call   c0002a0a <find_bitmap>
c00030dd:	89 c3                	mov    ebx,eax
c00030df:	8d 40 ff             	lea    eax,[eax-0x1]
c00030e2:	83 f8 fd             	cmp    eax,0xfffffffd
c00030e5:	0f 87 6f 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030eb:	83 ec 0c             	sub    esp,0xc
c00030ee:	b9 01 00 00 00       	mov    ecx,0x1
c00030f3:	6a 01                	push   0x1
c00030f5:	89 da                	mov    edx,ebx
c00030f7:	89 f0                	mov    eax,esi
c00030f9:	e8 bf f9 ff ff       	call   c0002abd <change_bitmap>
c00030fe:	83 c4 10             	add    esp,0x10
c0003101:	83 f8 02             	cmp    eax,0x2
c0003104:	74 90                	je     c0003096 <create_chain+0x31>
c0003106:	83 f8 01             	cmp    eax,0x1
c0003109:	0f 84 fc 00 00 00    	je     c000320b <create_chain+0x1a6>
c000310f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003114:	75 09                	jne    c000311f <create_chain+0xba>
c0003116:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000311a:	e9 0c 01 00 00       	jmp    c000322b <create_chain+0x1c6>
c000311f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003123:	0f 85 e7 00 00 00    	jne    c0003210 <create_chain+0x1ab>
c0003129:	8d 57 01             	lea    edx,[edi+0x1]
c000312c:	39 da                	cmp    edx,ebx
c000312e:	0f 84 f7 00 00 00    	je     c000322b <create_chain+0x1c6>
c0003134:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003137:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000313b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000313e:	e9 cd 00 00 00       	jmp    c0003210 <create_chain+0x1ab>
c0003143:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003147:	75 41                	jne    c000318a <create_chain+0x125>
c0003149:	8d 5f 01             	lea    ebx,[edi+0x1]
c000314c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000314f:	77 05                	ja     c0003156 <create_chain+0xf1>
c0003151:	bb 02 00 00 00       	mov    ebx,0x2
c0003156:	89 da                	mov    edx,ebx
c0003158:	89 e8                	mov    eax,ebp
c000315a:	e8 18 fc ff ff       	call   c0002d77 <get_fat>
c000315f:	83 f8 01             	cmp    eax,0x1
c0003162:	0f 84 2e ff ff ff    	je     c0003096 <create_chain+0x31>
c0003168:	83 f8 ff             	cmp    eax,0xffffffff
c000316b:	0f 84 9a 00 00 00    	je     c000320b <create_chain+0x1a6>
c0003171:	85 c0                	test   eax,eax
c0003173:	74 11                	je     c0003186 <create_chain+0x121>
c0003175:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003178:	83 f8 01             	cmp    eax,0x1
c000317b:	76 0d                	jbe    c000318a <create_chain+0x125>
c000317d:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003180:	76 08                	jbe    c000318a <create_chain+0x125>
c0003182:	89 c7                	mov    edi,eax
c0003184:	eb 04                	jmp    c000318a <create_chain+0x125>
c0003186:	85 db                	test   ebx,ebx
c0003188:	75 38                	jne    c00031c2 <create_chain+0x15d>
c000318a:	89 fb                	mov    ebx,edi
c000318c:	43                   	inc    ebx
c000318d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003190:	77 0e                	ja     c00031a0 <create_chain+0x13b>
c0003192:	83 ff 01             	cmp    edi,0x1
c0003195:	0f 86 28 ff ff ff    	jbe    c00030c3 <create_chain+0x5e>
c000319b:	bb 02 00 00 00       	mov    ebx,0x2
c00031a0:	89 da                	mov    edx,ebx
c00031a2:	89 e8                	mov    eax,ebp
c00031a4:	e8 ce fb ff ff       	call   c0002d77 <get_fat>
c00031a9:	85 c0                	test   eax,eax
c00031ab:	74 15                	je     c00031c2 <create_chain+0x15d>
c00031ad:	83 f8 01             	cmp    eax,0x1
c00031b0:	0f 84 e0 fe ff ff    	je     c0003096 <create_chain+0x31>
c00031b6:	40                   	inc    eax
c00031b7:	74 52                	je     c000320b <create_chain+0x1a6>
c00031b9:	39 fb                	cmp    ebx,edi
c00031bb:	75 cf                	jne    c000318c <create_chain+0x127>
c00031bd:	e9 01 ff ff ff       	jmp    c00030c3 <create_chain+0x5e>
c00031c2:	83 c9 ff             	or     ecx,0xffffffff
c00031c5:	89 da                	mov    edx,ebx
c00031c7:	89 f0                	mov    eax,esi
c00031c9:	e8 a4 f9 ff ff       	call   c0002b72 <put_fat>
c00031ce:	85 c0                	test   eax,eax
c00031d0:	75 32                	jne    c0003204 <create_chain+0x19f>
c00031d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031d7:	74 11                	je     c00031ea <create_chain+0x185>
c00031d9:	89 d9                	mov    ecx,ebx
c00031db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031df:	89 f0                	mov    eax,esi
c00031e1:	e8 8c f9 ff ff       	call   c0002b72 <put_fat>
c00031e6:	85 c0                	test   eax,eax
c00031e8:	75 1a                	jne    c0003204 <create_chain+0x19f>
c00031ea:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031ed:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031f0:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031f3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031f6:	39 d0                	cmp    eax,edx
c00031f8:	77 04                	ja     c00031fe <create_chain+0x199>
c00031fa:	48                   	dec    eax
c00031fb:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031fe:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003202:	eb 56                	jmp    c000325a <create_chain+0x1f5>
c0003204:	48                   	dec    eax
c0003205:	0f 85 8b fe ff ff    	jne    c0003096 <create_chain+0x31>
c000320b:	83 cb ff             	or     ebx,0xffffffff
c000320e:	eb 4a                	jmp    c000325a <create_chain+0x1f5>
c0003210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003214:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003217:	41                   	inc    ecx
c0003218:	39 d9                	cmp    ecx,ebx
c000321a:	75 19                	jne    c0003235 <create_chain+0x1d0>
c000321c:	b9 02 00 00 00       	mov    ecx,0x2
c0003221:	85 d2                	test   edx,edx
c0003223:	74 03                	je     c0003228 <create_chain+0x1c3>
c0003225:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003228:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000322b:	85 c0                	test   eax,eax
c000322d:	0f 85 63 fe ff ff    	jne    c0003096 <create_chain+0x31>
c0003233:	eb b5                	jmp    c00031ea <create_chain+0x185>
c0003235:	85 d2                	test   edx,edx
c0003237:	75 07                	jne    c0003240 <create_chain+0x1db>
c0003239:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003240:	89 d9                	mov    ecx,ebx
c0003242:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003246:	89 e8                	mov    eax,ebp
c0003248:	e8 bb fa ff ff       	call   c0002d08 <fill_last_frag>
c000324d:	85 c0                	test   eax,eax
c000324f:	75 b3                	jne    c0003204 <create_chain+0x19f>
c0003251:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003258:	eb 90                	jmp    c00031ea <create_chain+0x185>
c000325a:	83 c4 1c             	add    esp,0x1c
c000325d:	89 d8                	mov    eax,ebx
c000325f:	5b                   	pop    ebx
c0003260:	5e                   	pop    esi
c0003261:	5f                   	pop    edi
c0003262:	5d                   	pop    ebp
c0003263:	c3                   	ret    

c0003264 <remove_chain>:
c0003264:	55                   	push   ebp
c0003265:	57                   	push   edi
c0003266:	56                   	push   esi
c0003267:	53                   	push   ebx
c0003268:	83 ec 1c             	sub    esp,0x1c
c000326b:	83 fa 01             	cmp    edx,0x1
c000326e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003272:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003274:	77 0a                	ja     c0003280 <remove_chain+0x1c>
c0003276:	b8 02 00 00 00       	mov    eax,0x2
c000327b:	e9 24 01 00 00       	jmp    c00033a4 <remove_chain+0x140>
c0003280:	89 d6                	mov    esi,edx
c0003282:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003285:	76 ef                	jbe    c0003276 <remove_chain+0x12>
c0003287:	89 c7                	mov    edi,eax
c0003289:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000328e:	75 06                	jne    c0003296 <remove_chain+0x32>
c0003290:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003294:	eb 54                	jmp    c00032ea <remove_chain+0x86>
c0003296:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003299:	75 06                	jne    c00032a1 <remove_chain+0x3d>
c000329b:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000329f:	74 ef                	je     c0003290 <remove_chain+0x2c>
c00032a1:	83 c9 ff             	or     ecx,0xffffffff
c00032a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	e8 c3 f8 ff ff       	call   c0002b72 <put_fat>
c00032af:	85 c0                	test   eax,eax
c00032b1:	74 dd                	je     c0003290 <remove_chain+0x2c>
c00032b3:	e9 ec 00 00 00       	jmp    c00033a4 <remove_chain+0x140>
c00032b8:	83 f8 01             	cmp    eax,0x1
c00032bb:	74 b9                	je     c0003276 <remove_chain+0x12>
c00032bd:	83 f8 ff             	cmp    eax,0xffffffff
c00032c0:	74 6d                	je     c000332f <remove_chain+0xcb>
c00032c2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c5:	75 6f                	jne    c0003336 <remove_chain+0xd2>
c00032c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032ca:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032cd:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032d0:	39 d0                	cmp    eax,edx
c00032d2:	73 08                	jae    c00032dc <remove_chain+0x78>
c00032d4:	40                   	inc    eax
c00032d5:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032dc:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032df:	39 e9                	cmp    ecx,ebp
c00032e1:	75 64                	jne    c0003347 <remove_chain+0xe3>
c00032e3:	89 ee                	mov    esi,ebp
c00032e5:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032e8:	76 0f                	jbe    c00032f9 <remove_chain+0x95>
c00032ea:	89 f2                	mov    edx,esi
c00032ec:	89 f8                	mov    eax,edi
c00032ee:	e8 84 fa ff ff       	call   c0002d77 <get_fat>
c00032f3:	89 c5                	mov    ebp,eax
c00032f5:	85 c0                	test   eax,eax
c00032f7:	75 bf                	jne    c00032b8 <remove_chain+0x54>
c00032f9:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fc:	0f 85 a0 00 00 00    	jne    c00033a2 <remove_chain+0x13e>
c0003302:	eb 6c                	jmp    c0003370 <remove_chain+0x10c>
c0003304:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003307:	84 c0                	test   al,al
c0003309:	75 7d                	jne    c0003388 <remove_chain+0x124>
c000330b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000330e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003312:	0f 84 86 00 00 00    	je     c000339e <remove_chain+0x13a>
c0003318:	89 da                	mov    edx,ebx
c000331a:	89 f8                	mov    eax,edi
c000331c:	e8 56 fa ff ff       	call   c0002d77 <get_fat>
c0003321:	83 f8 01             	cmp    eax,0x1
c0003324:	0f 86 4c ff ff ff    	jbe    c0003276 <remove_chain+0x12>
c000332a:	83 f8 ff             	cmp    eax,0xffffffff
c000332d:	75 4e                	jne    c000337d <remove_chain+0x119>
c000332f:	b8 01 00 00 00       	mov    eax,0x1
c0003334:	eb 6e                	jmp    c00033a4 <remove_chain+0x140>
c0003336:	31 c9                	xor    ecx,ecx
c0003338:	89 f2                	mov    edx,esi
c000333a:	89 d8                	mov    eax,ebx
c000333c:	e8 31 f8 ff ff       	call   c0002b72 <put_fat>
c0003341:	85 c0                	test   eax,eax
c0003343:	74 82                	je     c00032c7 <remove_chain+0x63>
c0003345:	eb 5d                	jmp    c00033a4 <remove_chain+0x140>
c0003347:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000334a:	75 1b                	jne    c0003367 <remove_chain+0x103>
c000334c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003350:	89 d8                	mov    eax,ebx
c0003352:	83 ec 0c             	sub    esp,0xc
c0003355:	6a 00                	push   0x0
c0003357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000335b:	e8 5d f7 ff ff       	call   c0002abd <change_bitmap>
c0003360:	83 c4 10             	add    esp,0x10
c0003363:	85 c0                	test   eax,eax
c0003365:	75 3d                	jne    c00033a4 <remove_chain+0x140>
c0003367:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000336b:	e9 73 ff ff ff       	jmp    c00032e3 <remove_chain+0x7f>
c0003370:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003375:	75 8d                	jne    c0003304 <remove_chain+0xa0>
c0003377:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000337b:	eb 25                	jmp    c00033a2 <remove_chain+0x13e>
c000337d:	8d 53 01             	lea    edx,[ebx+0x1]
c0003380:	89 c3                	mov    ebx,eax
c0003382:	39 c2                	cmp    edx,eax
c0003384:	74 88                	je     c000330e <remove_chain+0xaa>
c0003386:	eb 1a                	jmp    c00033a2 <remove_chain+0x13e>
c0003388:	3c 03                	cmp    al,0x3
c000338a:	75 16                	jne    c00033a2 <remove_chain+0x13e>
c000338c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000338f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003393:	77 0d                	ja     c00033a2 <remove_chain+0x13e>
c0003395:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003398:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000339c:	72 04                	jb     c00033a2 <remove_chain+0x13e>
c000339e:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033a2:	31 c0                	xor    eax,eax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <dir_clear>:
c00033ac:	55                   	push   ebp
c00033ad:	57                   	push   edi
c00033ae:	56                   	push   esi
c00033af:	89 c6                	mov    esi,eax
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033b9:	e8 9d ed ff ff       	call   c000215b <sync_window>
c00033be:	85 c0                	test   eax,eax
c00033c0:	0f 85 de 00 00 00    	jne    c00034a4 <dir_clear+0xf8>
c00033c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ca:	89 f0                	mov    eax,esi
c00033cc:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033cf:	e8 d6 e8 ff ff       	call   c0001caa <clst2sect>
c00033d4:	b9 00 02 00 00       	mov    ecx,0x200
c00033d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033e1:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033e4:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033e7:	89 e8                	mov    eax,ebp
c00033e9:	31 d2                	xor    edx,edx
c00033eb:	e8 b5 e6 ff ff       	call   c0001aa5 <mem_set>
c00033f0:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033f4:	c1 e3 09             	shl    ebx,0x9
c00033f7:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033fd:	76 1f                	jbe    c000341e <dir_clear+0x72>
c00033ff:	bb 00 80 00 00       	mov    ebx,0x8000
c0003404:	eb 18                	jmp    c000341e <dir_clear+0x72>
c0003406:	83 ec 0c             	sub    esp,0xc
c0003409:	53                   	push   ebx
c000340a:	e8 35 4e 00 00       	call   c0008244 <ff_memalloc>
c000340f:	83 c4 10             	add    esp,0x10
c0003412:	89 c7                	mov    edi,eax
c0003414:	85 c0                	test   eax,eax
c0003416:	0f 85 8f 00 00 00    	jne    c00034ab <dir_clear+0xff>
c000341c:	d1 eb                	shr    ebx,1
c000341e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003424:	77 e0                	ja     c0003406 <dir_clear+0x5a>
c0003426:	31 db                	xor    ebx,ebx
c0003428:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000342c:	39 d8                	cmp    eax,ebx
c000342e:	76 66                	jbe    c0003496 <dir_clear+0xea>
c0003430:	83 ec 0c             	sub    esp,0xc
c0003433:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003437:	6a 01                	push   0x1
c0003439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000343d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003441:	55                   	push   ebp
c0003442:	50                   	push   eax
c0003443:	e8 94 e5 ff ff       	call   c00019dc <disk_write>
c0003448:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000344d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003452:	83 c4 20             	add    esp,0x20
c0003455:	85 c0                	test   eax,eax
c0003457:	75 3d                	jne    c0003496 <dir_clear+0xea>
c0003459:	43                   	inc    ebx
c000345a:	eb cc                	jmp    c0003428 <dir_clear+0x7c>
c000345c:	83 ec 0c             	sub    esp,0xc
c000345f:	31 d2                	xor    edx,edx
c0003461:	55                   	push   ebp
c0003462:	89 d8                	mov    eax,ebx
c0003464:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003468:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000346c:	52                   	push   edx
c000346d:	50                   	push   eax
c000346e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003472:	57                   	push   edi
c0003473:	50                   	push   eax
c0003474:	e8 63 e5 ff ff       	call   c00019dc <disk_write>
c0003479:	83 c4 20             	add    esp,0x20
c000347c:	85 c0                	test   eax,eax
c000347e:	75 0a                	jne    c000348a <dir_clear+0xde>
c0003480:	01 eb                	add    ebx,ebp
c0003482:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003486:	39 d8                	cmp    eax,ebx
c0003488:	77 d2                	ja     c000345c <dir_clear+0xb0>
c000348a:	83 ec 0c             	sub    esp,0xc
c000348d:	57                   	push   edi
c000348e:	e8 c7 4d 00 00       	call   c000825a <ff_memfree>
c0003493:	83 c4 10             	add    esp,0x10
c0003496:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000349a:	39 d8                	cmp    eax,ebx
c000349c:	0f 95 c0             	setne  al
c000349f:	0f b6 c0             	movzx  eax,al
c00034a2:	eb 19                	jmp    c00034bd <dir_clear+0x111>
c00034a4:	b8 01 00 00 00       	mov    eax,0x1
c00034a9:	eb 12                	jmp    c00034bd <dir_clear+0x111>
c00034ab:	89 d9                	mov    ecx,ebx
c00034ad:	31 d2                	xor    edx,edx
c00034af:	c1 eb 09             	shr    ebx,0x9
c00034b2:	e8 ee e5 ff ff       	call   c0001aa5 <mem_set>
c00034b7:	89 dd                	mov    ebp,ebx
c00034b9:	31 db                	xor    ebx,ebx
c00034bb:	eb c5                	jmp    c0003482 <dir_clear+0xd6>
c00034bd:	83 c4 1c             	add    esp,0x1c
c00034c0:	5b                   	pop    ebx
c00034c1:	5e                   	pop    esi
c00034c2:	5f                   	pop    edi
c00034c3:	5d                   	pop    ebp
c00034c4:	c3                   	ret    

c00034c5 <dir_next>:
c00034c5:	55                   	push   ebp
c00034c6:	57                   	push   edi
c00034c7:	56                   	push   esi
c00034c8:	53                   	push   ebx
c00034c9:	89 c3                	mov    ebx,eax
c00034cb:	83 ec 1c             	sub    esp,0x1c
c00034ce:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034d7:	8d 78 20             	lea    edi,[eax+0x20]
c00034da:	31 c0                	xor    eax,eax
c00034dc:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034e0:	0f 94 c0             	sete   al
c00034e3:	48                   	dec    eax
c00034e4:	25 00 00 20 f0       	and    eax,0xf0200000
c00034e9:	05 00 00 00 10       	add    eax,0x10000000
c00034ee:	39 f8                	cmp    eax,edi
c00034f0:	77 0e                	ja     c0003500 <dir_next+0x3b>
c00034f2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034f9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003500:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003503:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003506:	b8 04 00 00 00       	mov    eax,0x4
c000350b:	89 ce                	mov    esi,ecx
c000350d:	09 d6                	or     esi,edx
c000350f:	0f 84 da 00 00 00    	je     c00035ef <dir_next+0x12a>
c0003515:	89 f8                	mov    eax,edi
c0003517:	25 ff 01 00 00       	and    eax,0x1ff
c000351c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003520:	0f 85 b9 00 00 00    	jne    c00035df <dir_next+0x11a>
c0003526:	83 c2 01             	add    edx,0x1
c0003529:	83 d1 00             	adc    ecx,0x0
c000352c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000352f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003532:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003535:	85 d2                	test   edx,edx
c0003537:	75 29                	jne    c0003562 <dir_next+0x9d>
c0003539:	89 fa                	mov    edx,edi
c000353b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000353f:	c1 ea 05             	shr    edx,0x5
c0003542:	39 c2                	cmp    edx,eax
c0003544:	0f 82 95 00 00 00    	jb     c00035df <dir_next+0x11a>
c000354a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003551:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003558:	b8 04 00 00 00       	mov    eax,0x4
c000355d:	e9 8d 00 00 00       	jmp    c00035ef <dir_next+0x12a>
c0003562:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003566:	89 f9                	mov    ecx,edi
c0003568:	48                   	dec    eax
c0003569:	c1 e9 09             	shr    ecx,0x9
c000356c:	85 c8                	test   eax,ecx
c000356e:	75 6f                	jne    c00035df <dir_next+0x11a>
c0003570:	89 d8                	mov    eax,ebx
c0003572:	e8 00 f8 ff ff       	call   c0002d77 <get_fat>
c0003577:	89 c6                	mov    esi,eax
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	77 07                	ja     c0003585 <dir_next+0xc0>
c000357e:	b8 02 00 00 00       	mov    eax,0x2
c0003583:	eb 6a                	jmp    c00035ef <dir_next+0x12a>
c0003585:	83 f8 ff             	cmp    eax,0xffffffff
c0003588:	75 07                	jne    c0003591 <dir_next+0xcc>
c000358a:	b8 01 00 00 00       	mov    eax,0x1
c000358f:	eb 5e                	jmp    c00035ef <dir_next+0x12a>
c0003591:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003594:	77 37                	ja     c00035cd <dir_next+0x108>
c0003596:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000359b:	74 ad                	je     c000354a <dir_next+0x85>
c000359d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	e8 be fa ff ff       	call   c0003065 <create_chain>
c00035a7:	89 c6                	mov    esi,eax
c00035a9:	b8 07 00 00 00       	mov    eax,0x7
c00035ae:	85 f6                	test   esi,esi
c00035b0:	74 3d                	je     c00035ef <dir_next+0x12a>
c00035b2:	83 fe 01             	cmp    esi,0x1
c00035b5:	74 c7                	je     c000357e <dir_next+0xb9>
c00035b7:	83 fe ff             	cmp    esi,0xffffffff
c00035ba:	74 ce                	je     c000358a <dir_next+0xc5>
c00035bc:	89 f2                	mov    edx,esi
c00035be:	89 e8                	mov    eax,ebp
c00035c0:	e8 e7 fd ff ff       	call   c00033ac <dir_clear>
c00035c5:	85 c0                	test   eax,eax
c00035c7:	75 c1                	jne    c000358a <dir_next+0xc5>
c00035c9:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035cd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035d0:	89 f2                	mov    edx,esi
c00035d2:	89 e8                	mov    eax,ebp
c00035d4:	e8 d1 e6 ff ff       	call   c0001caa <clst2sect>
c00035d9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035dc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035e3:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035e6:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035ea:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035ed:	31 c0                	xor    eax,eax
c00035ef:	83 c4 1c             	add    esp,0x1c
c00035f2:	5b                   	pop    ebx
c00035f3:	5e                   	pop    esi
c00035f4:	5f                   	pop    edi
c00035f5:	5d                   	pop    ebp
c00035f6:	c3                   	ret    

c00035f7 <load_xdir>:
c00035f7:	55                   	push   ebp
c00035f8:	57                   	push   edi
c00035f9:	56                   	push   esi
c00035fa:	89 c6                	mov    esi,eax
c00035fc:	53                   	push   ebx
c00035fd:	83 ec 1c             	sub    esp,0x1c
c0003600:	8b 00                	mov    eax,DWORD PTR [eax]
c0003602:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003605:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003608:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000360b:	e8 df eb ff ff       	call   c00021ef <move_window>
c0003610:	89 c3                	mov    ebx,eax
c0003612:	85 c0                	test   eax,eax
c0003614:	0f 85 0c 01 00 00    	jne    c0003726 <load_xdir+0x12f>
c000361a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000361d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003620:	0f 85 fb 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c0003626:	89 f8                	mov    eax,edi
c0003628:	b9 20 00 00 00       	mov    ecx,0x20
c000362d:	e8 5e e4 ff ff       	call   c0001a90 <mem_cpy>
c0003632:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003636:	40                   	inc    eax
c0003637:	c1 e0 05             	shl    eax,0x5
c000363a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000363e:	83 e8 60             	sub    eax,0x60
c0003641:	3d 00 02 00 00       	cmp    eax,0x200
c0003646:	0f 87 d5 00 00 00    	ja     c0003721 <load_xdir+0x12a>
c000364c:	31 d2                	xor    edx,edx
c000364e:	89 f0                	mov    eax,esi
c0003650:	e8 70 fe ff ff       	call   c00034c5 <dir_next>
c0003655:	89 c3                	mov    ebx,eax
c0003657:	83 f8 04             	cmp    eax,0x4
c000365a:	0f 84 c1 00 00 00    	je     c0003721 <load_xdir+0x12a>
c0003660:	85 c0                	test   eax,eax
c0003662:	0f 85 be 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c0003668:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000366b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000366e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003670:	e8 7a eb ff ff       	call   c00021ef <move_window>
c0003675:	89 c3                	mov    ebx,eax
c0003677:	85 c0                	test   eax,eax
c0003679:	0f 85 a7 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c000367f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003682:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003685:	0f 85 96 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c000368b:	8d 47 20             	lea    eax,[edi+0x20]
c000368e:	b9 20 00 00 00       	mov    ecx,0x20
c0003693:	e8 f8 e3 ff ff       	call   c0001a90 <mem_cpy>
c0003698:	31 d2                	xor    edx,edx
c000369a:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000369e:	b9 0f 00 00 00       	mov    ecx,0xf
c00036a3:	83 c0 2c             	add    eax,0x2c
c00036a6:	f7 f1                	div    ecx
c00036a8:	c1 e0 05             	shl    eax,0x5
c00036ab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036af:	77 70                	ja     c0003721 <load_xdir+0x12a>
c00036b1:	bd 40 00 00 00       	mov    ebp,0x40
c00036b6:	31 d2                	xor    edx,edx
c00036b8:	89 f0                	mov    eax,esi
c00036ba:	e8 06 fe ff ff       	call   c00034c5 <dir_next>
c00036bf:	89 c3                	mov    ebx,eax
c00036c1:	83 f8 04             	cmp    eax,0x4
c00036c4:	74 5b                	je     c0003721 <load_xdir+0x12a>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 5c                	jne    c0003726 <load_xdir+0x12f>
c00036ca:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036cd:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00036d2:	e8 18 eb ff ff       	call   c00021ef <move_window>
c00036d7:	89 c3                	mov    ebx,eax
c00036d9:	85 c0                	test   eax,eax
c00036db:	75 49                	jne    c0003726 <load_xdir+0x12f>
c00036dd:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036e0:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036e3:	75 3c                	jne    c0003721 <load_xdir+0x12a>
c00036e5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036eb:	77 0d                	ja     c00036fa <load_xdir+0x103>
c00036ed:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036f0:	b9 20 00 00 00       	mov    ecx,0x20
c00036f5:	e8 96 e3 ff ff       	call   c0001a90 <mem_cpy>
c00036fa:	83 c5 20             	add    ebp,0x20
c00036fd:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003701:	77 b3                	ja     c00036b6 <load_xdir+0xbf>
c0003703:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003709:	77 1b                	ja     c0003726 <load_xdir+0x12f>
c000370b:	89 f8                	mov    eax,edi
c000370d:	e8 cd e7 ff ff       	call   c0001edf <xdir_sum>
c0003712:	89 c1                	mov    ecx,eax
c0003714:	8d 47 02             	lea    eax,[edi+0x2]
c0003717:	e8 f5 e2 ff ff       	call   c0001a11 <ld_word>
c000371c:	66 39 c1             	cmp    cx,ax
c000371f:	74 05                	je     c0003726 <load_xdir+0x12f>
c0003721:	bb 02 00 00 00       	mov    ebx,0x2
c0003726:	83 c4 1c             	add    esp,0x1c
c0003729:	89 d8                	mov    eax,ebx
c000372b:	5b                   	pop    ebx
c000372c:	5e                   	pop    esi
c000372d:	5f                   	pop    edi
c000372e:	5d                   	pop    ebp
c000372f:	c3                   	ret    

c0003730 <load_obj_xdir>:
c0003730:	53                   	push   ebx
c0003731:	89 c3                	mov    ebx,eax
c0003733:	83 ec 08             	sub    esp,0x8
c0003736:	8b 02                	mov    eax,DWORD PTR [edx]
c0003738:	89 03                	mov    DWORD PTR [ebx],eax
c000373a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000373d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003740:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003743:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003746:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003749:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003750:	30 c0                	xor    al,al
c0003752:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003759:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000375c:	89 d8                	mov    eax,ebx
c000375e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003761:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003764:	e8 04 f8 ff ff       	call   c0002f6d <dir_sdi>
c0003769:	85 c0                	test   eax,eax
c000376b:	75 0b                	jne    c0003778 <load_obj_xdir+0x48>
c000376d:	89 d8                	mov    eax,ebx
c000376f:	83 c4 08             	add    esp,0x8
c0003772:	5b                   	pop    ebx
c0003773:	e9 7f fe ff ff       	jmp    c00035f7 <load_xdir>
c0003778:	83 c4 08             	add    esp,0x8
c000377b:	5b                   	pop    ebx
c000377c:	c3                   	ret    

c000377d <dir_read>:
c000377d:	55                   	push   ebp
c000377e:	bd 04 00 00 00       	mov    ebp,0x4
c0003783:	57                   	push   edi
c0003784:	56                   	push   esi
c0003785:	be ff ff ff ff       	mov    esi,0xffffffff
c000378a:	53                   	push   ebx
c000378b:	89 c3                	mov    ebx,eax
c000378d:	83 ec 1c             	sub    esp,0x1c
c0003790:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003794:	8b 38                	mov    edi,DWORD PTR [eax]
c0003796:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000379b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000379e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037a1:	89 c8                	mov    eax,ecx
c00037a3:	09 d0                	or     eax,edx
c00037a5:	0f 84 25 01 00 00    	je     c00038d0 <dir_read+0x153>
c00037ab:	89 f8                	mov    eax,edi
c00037ad:	e8 3d ea ff ff       	call   c00021ef <move_window>
c00037b2:	89 c5                	mov    ebp,eax
c00037b4:	85 c0                	test   eax,eax
c00037b6:	0f 85 23 01 00 00    	jne    c00038df <dir_read+0x162>
c00037bc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037bf:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037c1:	84 c9                	test   cl,cl
c00037c3:	0f 84 11 01 00 00    	je     c00038da <dir_read+0x15d>
c00037c9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037cc:	75 48                	jne    c0003816 <dir_read+0x99>
c00037ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037d3:	74 10                	je     c00037e5 <dir_read+0x68>
c00037d5:	80 f9 83             	cmp    cl,0x83
c00037d8:	0f 85 dd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037de:	31 ed                	xor    ebp,ebp
c00037e0:	e9 08 01 00 00       	jmp    c00038ed <dir_read+0x170>
c00037e5:	80 f9 85             	cmp    cl,0x85
c00037e8:	0f 85 cd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037ee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037f1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037f4:	89 d8                	mov    eax,ebx
c00037f6:	e8 fc fd ff ff       	call   c00035f7 <load_xdir>
c00037fb:	89 c5                	mov    ebp,eax
c00037fd:	85 c0                	test   eax,eax
c00037ff:	0f 85 da 00 00 00    	jne    c00038df <dir_read+0x162>
c0003805:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003808:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003811:	e9 d7 00 00 00       	jmp    c00038ed <dir_read+0x170>
c0003816:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003819:	83 e0 3f             	and    eax,0x3f
c000381c:	80 f9 2e             	cmp    cl,0x2e
c000381f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003823:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003826:	0f 84 8a 00 00 00    	je     c00038b6 <dir_read+0x139>
c000382c:	80 f9 e5             	cmp    cl,0xe5
c000382f:	0f 84 81 00 00 00    	je     c00038b6 <dir_read+0x139>
c0003835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003839:	83 e0 1f             	and    eax,0x1f
c000383c:	83 f8 08             	cmp    eax,0x8
c000383f:	0f 94 c0             	sete   al
c0003842:	0f b6 c0             	movzx  eax,al
c0003845:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003849:	75 6b                	jne    c00038b6 <dir_read+0x139>
c000384b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003850:	75 44                	jne    c0003896 <dir_read+0x119>
c0003852:	f6 c1 40             	test   cl,0x40
c0003855:	74 12                	je     c0003869 <dir_read+0xec>
c0003857:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000385a:	83 e1 bf             	and    ecx,0xffffffbf
c000385d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003861:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003864:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003867:	eb 06                	jmp    c000386f <dir_read+0xf2>
c0003869:	89 f0                	mov    eax,esi
c000386b:	38 c8                	cmp    al,cl
c000386d:	75 47                	jne    c00038b6 <dir_read+0x139>
c000386f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003873:	be ff ff ff ff       	mov    esi,0xffffffff
c0003878:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000387b:	75 3e                	jne    c00038bb <dir_read+0x13e>
c000387d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003881:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003884:	e8 8a e4 ff ff       	call   c0001d13 <pick_lfn>
c0003889:	85 c0                	test   eax,eax
c000388b:	74 2e                	je     c00038bb <dir_read+0x13e>
c000388d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003891:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003894:	eb 25                	jmp    c00038bb <dir_read+0x13e>
c0003896:	89 f0                	mov    eax,esi
c0003898:	84 c0                	test   al,al
c000389a:	75 11                	jne    c00038ad <dir_read+0x130>
c000389c:	89 d0                	mov    eax,edx
c000389e:	e8 2a e6 ff ff       	call   c0001ecd <sum_sfn>
c00038a3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038a7:	0f 84 31 ff ff ff    	je     c00037de <dir_read+0x61>
c00038ad:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038b4:	eb 37                	jmp    c00038ed <dir_read+0x170>
c00038b6:	be ff ff ff ff       	mov    esi,0xffffffff
c00038bb:	31 d2                	xor    edx,edx
c00038bd:	89 d8                	mov    eax,ebx
c00038bf:	e8 01 fc ff ff       	call   c00034c5 <dir_next>
c00038c4:	89 c5                	mov    ebp,eax
c00038c6:	85 c0                	test   eax,eax
c00038c8:	0f 84 cd fe ff ff    	je     c000379b <dir_read+0x1e>
c00038ce:	eb 0f                	jmp    c00038df <dir_read+0x162>
c00038d0:	85 ed                	test   ebp,ebp
c00038d2:	0f 84 06 ff ff ff    	je     c00037de <dir_read+0x61>
c00038d8:	eb 05                	jmp    c00038df <dir_read+0x162>
c00038da:	bd 04 00 00 00       	mov    ebp,0x4
c00038df:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038e6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038ed:	83 c4 1c             	add    esp,0x1c
c00038f0:	89 e8                	mov    eax,ebp
c00038f2:	5b                   	pop    ebx
c00038f3:	5e                   	pop    esi
c00038f4:	5f                   	pop    edi
c00038f5:	5d                   	pop    ebp
c00038f6:	c3                   	ret    

c00038f7 <dir_alloc>:
c00038f7:	55                   	push   ebp
c00038f8:	89 d5                	mov    ebp,edx
c00038fa:	57                   	push   edi
c00038fb:	31 d2                	xor    edx,edx
c00038fd:	56                   	push   esi
c00038fe:	53                   	push   ebx
c00038ff:	89 c3                	mov    ebx,eax
c0003901:	83 ec 0c             	sub    esp,0xc
c0003904:	8b 38                	mov    edi,DWORD PTR [eax]
c0003906:	e8 62 f6 ff ff       	call   c0002f6d <dir_sdi>
c000390b:	85 c0                	test   eax,eax
c000390d:	75 4e                	jne    c000395d <dir_alloc+0x66>
c000390f:	31 f6                	xor    esi,esi
c0003911:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003914:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003917:	89 f8                	mov    eax,edi
c0003919:	e8 d1 e8 ff ff       	call   c00021ef <move_window>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 3b                	jne    c000395d <dir_alloc+0x66>
c0003922:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003925:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003928:	8a 12                	mov    dl,BYTE PTR [edx]
c000392a:	75 07                	jne    c0003933 <dir_alloc+0x3c>
c000392c:	f7 d2                	not    edx
c000392e:	c0 ea 07             	shr    dl,0x7
c0003931:	eb 0d                	jmp    c0003940 <dir_alloc+0x49>
c0003933:	84 d2                	test   dl,dl
c0003935:	0f 94 c1             	sete   cl
c0003938:	80 fa e5             	cmp    dl,0xe5
c000393b:	0f 94 c2             	sete   dl
c000393e:	09 ca                	or     edx,ecx
c0003940:	84 d2                	test   dl,dl
c0003942:	74 07                	je     c000394b <dir_alloc+0x54>
c0003944:	46                   	inc    esi
c0003945:	39 ee                	cmp    esi,ebp
c0003947:	75 04                	jne    c000394d <dir_alloc+0x56>
c0003949:	eb 1c                	jmp    c0003967 <dir_alloc+0x70>
c000394b:	31 f6                	xor    esi,esi
c000394d:	ba 01 00 00 00       	mov    edx,0x1
c0003952:	89 d8                	mov    eax,ebx
c0003954:	e8 6c fb ff ff       	call   c00034c5 <dir_next>
c0003959:	85 c0                	test   eax,eax
c000395b:	74 b4                	je     c0003911 <dir_alloc+0x1a>
c000395d:	83 f8 04             	cmp    eax,0x4
c0003960:	75 05                	jne    c0003967 <dir_alloc+0x70>
c0003962:	b8 07 00 00 00       	mov    eax,0x7
c0003967:	83 c4 0c             	add    esp,0xc
c000396a:	5b                   	pop    ebx
c000396b:	5e                   	pop    esi
c000396c:	5f                   	pop    edi
c000396d:	5d                   	pop    ebp
c000396e:	c3                   	ret    

c000396f <store_xdir>:
c000396f:	55                   	push   ebp
c0003970:	57                   	push   edi
c0003971:	89 c7                	mov    edi,eax
c0003973:	56                   	push   esi
c0003974:	53                   	push   ebx
c0003975:	83 ec 0c             	sub    esp,0xc
c0003978:	8b 00                	mov    eax,DWORD PTR [eax]
c000397a:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000397d:	89 e8                	mov    eax,ebp
c000397f:	e8 5b e5 ff ff       	call   c0001edf <xdir_sum>
c0003984:	0f b7 d0             	movzx  edx,ax
c0003987:	8d 45 02             	lea    eax,[ebp+0x2]
c000398a:	e8 f4 e0 ff ff       	call   c0001a83 <st_word>
c000398f:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003993:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003996:	89 f8                	mov    eax,edi
c0003998:	e8 d0 f5 ff ff       	call   c0002f6d <dir_sdi>
c000399d:	89 c6                	mov    esi,eax
c000399f:	85 f6                	test   esi,esi
c00039a1:	75 3d                	jne    c00039e0 <store_xdir+0x71>
c00039a3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039a6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039a9:	8b 07                	mov    eax,DWORD PTR [edi]
c00039ab:	e8 3f e8 ff ff       	call   c00021ef <move_window>
c00039b0:	89 c6                	mov    esi,eax
c00039b2:	85 c0                	test   eax,eax
c00039b4:	75 2a                	jne    c00039e0 <store_xdir+0x71>
c00039b6:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039b9:	b9 20 00 00 00       	mov    ecx,0x20
c00039be:	89 ea                	mov    edx,ebp
c00039c0:	e8 cb e0 ff ff       	call   c0001a90 <mem_cpy>
c00039c5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039c7:	85 db                	test   ebx,ebx
c00039c9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039cd:	74 11                	je     c00039e0 <store_xdir+0x71>
c00039cf:	31 d2                	xor    edx,edx
c00039d1:	89 f8                	mov    eax,edi
c00039d3:	83 c5 20             	add    ebp,0x20
c00039d6:	e8 ea fa ff ff       	call   c00034c5 <dir_next>
c00039db:	4b                   	dec    ebx
c00039dc:	89 c6                	mov    esi,eax
c00039de:	eb bf                	jmp    c000399f <store_xdir+0x30>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	83 fe 02             	cmp    esi,0x2
c00039e5:	76 05                	jbe    c00039ec <store_xdir+0x7d>
c00039e7:	b8 02 00 00 00       	mov    eax,0x2
c00039ec:	83 c4 0c             	add    esp,0xc
c00039ef:	5b                   	pop    ebx
c00039f0:	5e                   	pop    esi
c00039f1:	5f                   	pop    edi
c00039f2:	5d                   	pop    ebp
c00039f3:	c3                   	ret    

c00039f4 <dir_remove>:
c00039f4:	57                   	push   edi
c00039f5:	56                   	push   esi
c00039f6:	53                   	push   ebx
c00039f7:	89 c3                	mov    ebx,eax
c00039f9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039fc:	8b 30                	mov    esi,DWORD PTR [eax]
c00039fe:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a01:	83 fa ff             	cmp    edx,0xffffffff
c0003a04:	74 09                	je     c0003a0f <dir_remove+0x1b>
c0003a06:	e8 62 f5 ff ff       	call   c0002f6d <dir_sdi>
c0003a0b:	85 c0                	test   eax,eax
c0003a0d:	75 41                	jne    c0003a50 <dir_remove+0x5c>
c0003a0f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a12:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a15:	89 f0                	mov    eax,esi
c0003a17:	e8 d3 e7 ff ff       	call   c00021ef <move_window>
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	75 26                	jne    c0003a46 <dir_remove+0x52>
c0003a20:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a23:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a26:	75 05                	jne    c0003a2d <dir_remove+0x39>
c0003a28:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a2b:	eb 03                	jmp    c0003a30 <dir_remove+0x3c>
c0003a2d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a30:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a34:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a37:	73 17                	jae    c0003a50 <dir_remove+0x5c>
c0003a39:	31 d2                	xor    edx,edx
c0003a3b:	89 d8                	mov    eax,ebx
c0003a3d:	e8 83 fa ff ff       	call   c00034c5 <dir_next>
c0003a42:	85 c0                	test   eax,eax
c0003a44:	74 c9                	je     c0003a0f <dir_remove+0x1b>
c0003a46:	83 f8 04             	cmp    eax,0x4
c0003a49:	75 05                	jne    c0003a50 <dir_remove+0x5c>
c0003a4b:	b8 02 00 00 00       	mov    eax,0x2
c0003a50:	5b                   	pop    ebx
c0003a51:	5e                   	pop    esi
c0003a52:	5f                   	pop    edi
c0003a53:	c3                   	ret    

c0003a54 <create_name>:
c0003a54:	55                   	push   ebp
c0003a55:	89 d5                	mov    ebp,edx
c0003a57:	57                   	push   edi
c0003a58:	89 c7                	mov    edi,eax
c0003a5a:	56                   	push   esi
c0003a5b:	31 f6                	xor    esi,esi
c0003a5d:	53                   	push   ebx
c0003a5e:	83 ec 3c             	sub    esp,0x3c
c0003a61:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a63:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a67:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a69:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a70:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a74:	e8 72 e0 ff ff       	call   c0001aeb <tchar2uni>
c0003a79:	89 c3                	mov    ebx,eax
c0003a7b:	83 f8 ff             	cmp    eax,0xffffffff
c0003a7e:	75 0a                	jne    c0003a8a <create_name+0x36>
c0003a80:	b8 06 00 00 00       	mov    eax,0x6
c0003a85:	e9 9e 02 00 00       	jmp    c0003d28 <create_name+0x2d4>
c0003a8a:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a8f:	76 0c                	jbe    c0003a9d <create_name+0x49>
c0003a91:	c1 e8 10             	shr    eax,0x10
c0003a94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a98:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a9c:	46                   	inc    esi
c0003a9d:	66 83 fb 1f          	cmp    bx,0x1f
c0003aa1:	76 4f                	jbe    c0003af2 <create_name+0x9e>
c0003aa3:	66 83 fb 5c          	cmp    bx,0x5c
c0003aa7:	74 35                	je     c0003ade <create_name+0x8a>
c0003aa9:	66 83 fb 2f          	cmp    bx,0x2f
c0003aad:	74 2f                	je     c0003ade <create_name+0x8a>
c0003aaf:	66 83 fb 7f          	cmp    bx,0x7f
c0003ab3:	77 11                	ja     c0003ac6 <create_name+0x72>
c0003ab5:	0f b7 d3             	movzx  edx,bx
c0003ab8:	b8 32 7d 02 c0       	mov    eax,0xc0027d32
c0003abd:	e8 11 e0 ff ff       	call   c0001ad3 <chk_chr>
c0003ac2:	85 c0                	test   eax,eax
c0003ac4:	75 ba                	jne    c0003a80 <create_name+0x2c>
c0003ac6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003acc:	77 b2                	ja     c0003a80 <create_name+0x2c>
c0003ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad2:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ad6:	46                   	inc    esi
c0003ad7:	eb 97                	jmp    c0003a70 <create_name+0x1c>
c0003ad9:	40                   	inc    eax
c0003ada:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ade:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ae2:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ae4:	80 fa 2f             	cmp    dl,0x2f
c0003ae7:	74 f0                	je     c0003ad9 <create_name+0x85>
c0003ae9:	80 fa 5c             	cmp    dl,0x5c
c0003aec:	74 eb                	je     c0003ad9 <create_name+0x85>
c0003aee:	31 db                	xor    ebx,ebx
c0003af0:	eb 02                	jmp    c0003af4 <create_name+0xa0>
c0003af2:	b3 04                	mov    bl,0x4
c0003af4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003af8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003afb:	85 f6                	test   esi,esi
c0003afd:	74 18                	je     c0003b17 <create_name+0xc3>
c0003aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b03:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b08:	66 83 f8 20          	cmp    ax,0x20
c0003b0c:	74 06                	je     c0003b14 <create_name+0xc0>
c0003b0e:	66 83 f8 2e          	cmp    ax,0x2e
c0003b12:	75 03                	jne    c0003b17 <create_name+0xc3>
c0003b14:	4e                   	dec    esi
c0003b15:	eb e4                	jmp    c0003afb <create_name+0xa7>
c0003b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b1b:	31 ed                	xor    ebp,ebp
c0003b1d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b23:	85 f6                	test   esi,esi
c0003b25:	0f 84 55 ff ff ff    	je     c0003a80 <create_name+0x2c>
c0003b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b2f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b32:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b36:	66 83 f8 20          	cmp    ax,0x20
c0003b3a:	75 04                	jne    c0003b40 <create_name+0xec>
c0003b3c:	89 d5                	mov    ebp,edx
c0003b3e:	eb eb                	jmp    c0003b2b <create_name+0xd7>
c0003b40:	85 ed                	test   ebp,ebp
c0003b42:	75 06                	jne    c0003b4a <create_name+0xf6>
c0003b44:	66 83 f8 2e          	cmp    ax,0x2e
c0003b48:	75 08                	jne    c0003b52 <create_name+0xfe>
c0003b4a:	83 cb 03             	or     ebx,0x3
c0003b4d:	eb 03                	jmp    c0003b52 <create_name+0xfe>
c0003b4f:	4e                   	dec    esi
c0003b50:	74 0c                	je     c0003b5e <create_name+0x10a>
c0003b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b56:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b5c:	75 f1                	jne    c0003b4f <create_name+0xfb>
c0003b5e:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b63:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b66:	ba 20 00 00 00       	mov    edx,0x20
c0003b6b:	e8 35 df ff ff       	call   c0001aa5 <mem_set>
c0003b70:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b78:	31 c9                	xor    ecx,ecx
c0003b7a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8a:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b8e:	66 85 ed             	test   bp,bp
c0003b91:	0f 84 30 01 00 00    	je     c0003cc7 <create_name+0x273>
c0003b97:	66 83 fd 20          	cmp    bp,0x20
c0003b9b:	74 10                	je     c0003bad <create_name+0x159>
c0003b9d:	66 83 fd 2e          	cmp    bp,0x2e
c0003ba1:	75 13                	jne    c0003bb6 <create_name+0x162>
c0003ba3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ba7:	0f 84 6b 01 00 00    	je     c0003d18 <create_name+0x2c4>
c0003bad:	83 cb 03             	or     ebx,0x3
c0003bb0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bb4:	eb c9                	jmp    c0003b7f <create_name+0x12b>
c0003bb6:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bba:	73 0b                	jae    c0003bc7 <create_name+0x173>
c0003bbc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bc0:	75 47                	jne    c0003c09 <create_name+0x1b5>
c0003bc2:	e9 51 01 00 00       	jmp    c0003d18 <create_name+0x2c4>
c0003bc7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bcc:	75 10                	jne    c0003bde <create_name+0x18a>
c0003bce:	83 cb 03             	or     ebx,0x3
c0003bd1:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bd9:	e9 e9 00 00 00       	jmp    c0003cc7 <create_name+0x273>
c0003bde:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be2:	74 0d                	je     c0003bf1 <create_name+0x19d>
c0003be4:	83 cb 03             	or     ebx,0x3
c0003be7:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003beb:	0f 87 d6 00 00 00    	ja     c0003cc7 <create_name+0x273>
c0003bf1:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003bf6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bfa:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c02:	b9 08 00 00 00       	mov    ecx,0x8
c0003c07:	eb a7                	jmp    c0003bb0 <create_name+0x15c>
c0003c09:	66 83 fd 7f          	cmp    bp,0x7f
c0003c0d:	76 68                	jbe    c0003c77 <create_name+0x223>
c0003c0f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c13:	88 da                	mov    dl,bl
c0003c15:	83 ca 02             	or     edx,0x2
c0003c18:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c1c:	50                   	push   eax
c0003c1d:	50                   	push   eax
c0003c1e:	68 b5 01 00 00       	push   0x1b5
c0003c23:	55                   	push   ebp
c0003c24:	e8 48 46 00 00       	call   c0008271 <ff_uni2oem>
c0003c29:	83 c4 10             	add    esp,0x10
c0003c2c:	89 c5                	mov    ebp,eax
c0003c2e:	a8 80                	test   al,0x80
c0003c30:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c38:	74 0c                	je     c0003c46 <create_name+0x1f2>
c0003c3a:	83 e5 7f             	and    ebp,0x7f
c0003c3d:	0f b6 ad 80 7c 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd8380]
c0003c44:	eb 2a                	jmp    c0003c70 <create_name+0x21c>
c0003c46:	66 3d ff 00          	cmp    ax,0xff
c0003c4a:	76 24                	jbe    c0003c70 <create_name+0x21c>
c0003c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c50:	48                   	dec    eax
c0003c51:	39 c8                	cmp    eax,ecx
c0003c53:	77 0c                	ja     c0003c61 <create_name+0x20d>
c0003c55:	83 cb 03             	or     ebx,0x3
c0003c58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c5c:	e9 4f ff ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003c61:	89 e8                	mov    eax,ebp
c0003c63:	88 d3                	mov    bl,dl
c0003c65:	66 c1 e8 08          	shr    ax,0x8
c0003c69:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c6d:	41                   	inc    ecx
c0003c6e:	eb 4b                	jmp    c0003cbb <create_name+0x267>
c0003c70:	88 d3                	mov    bl,dl
c0003c72:	66 85 ed             	test   bp,bp
c0003c75:	74 19                	je     c0003c90 <create_name+0x23c>
c0003c77:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c7b:	0f b7 d5             	movzx  edx,bp
c0003c7e:	b8 3b 7d 02 c0       	mov    eax,0xc0027d3b
c0003c83:	e8 4b de ff ff       	call   c0001ad3 <chk_chr>
c0003c88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	74 0a                	je     c0003c9a <create_name+0x246>
c0003c90:	83 cb 03             	or     ebx,0x3
c0003c93:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c98:	eb 21                	jmp    c0003cbb <create_name+0x267>
c0003c9a:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c9d:	66 83 f8 19          	cmp    ax,0x19
c0003ca1:	77 07                	ja     c0003caa <create_name+0x256>
c0003ca3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ca8:	eb 11                	jmp    c0003cbb <create_name+0x267>
c0003caa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cad:	66 83 f8 19          	cmp    ax,0x19
c0003cb1:	77 08                	ja     c0003cbb <create_name+0x267>
c0003cb3:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cb8:	83 ed 20             	sub    ebp,0x20
c0003cbb:	89 e8                	mov    eax,ebp
c0003cbd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cc1:	41                   	inc    ecx
c0003cc2:	e9 e9 fe ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003cc7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ccb:	75 04                	jne    c0003cd1 <create_name+0x27d>
c0003ccd:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cd1:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cd6:	75 05                	jne    c0003cdd <create_name+0x289>
c0003cd8:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003cdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ce1:	83 e0 0c             	and    eax,0xc
c0003ce4:	3c 0c                	cmp    al,0xc
c0003ce6:	74 0b                	je     c0003cf3 <create_name+0x29f>
c0003ce8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cec:	83 e0 03             	and    eax,0x3
c0003cef:	3c 03                	cmp    al,0x3
c0003cf1:	75 05                	jne    c0003cf8 <create_name+0x2a4>
c0003cf3:	83 cb 02             	or     ebx,0x2
c0003cf6:	eb 19                	jmp    c0003d11 <create_name+0x2bd>
c0003cf8:	f6 c3 02             	test   bl,0x2
c0003cfb:	75 14                	jne    c0003d11 <create_name+0x2bd>
c0003cfd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d02:	74 03                	je     c0003d07 <create_name+0x2b3>
c0003d04:	83 cb 10             	or     ebx,0x10
c0003d07:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d0c:	74 03                	je     c0003d11 <create_name+0x2bd>
c0003d0e:	83 cb 08             	or     ebx,0x8
c0003d11:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d14:	31 c0                	xor    eax,eax
c0003d16:	eb 10                	jmp    c0003d28 <create_name+0x2d4>
c0003d18:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d1d:	0f 85 ce fe ff ff    	jne    c0003bf1 <create_name+0x19d>
c0003d23:	e9 a6 fe ff ff       	jmp    c0003bce <create_name+0x17a>
c0003d28:	83 c4 3c             	add    esp,0x3c
c0003d2b:	5b                   	pop    ebx
c0003d2c:	5e                   	pop    esi
c0003d2d:	5f                   	pop    edi
c0003d2e:	5d                   	pop    ebp
c0003d2f:	c3                   	ret    

c0003d30 <xname_sum>:
c0003d30:	56                   	push   esi
c0003d31:	53                   	push   ebx
c0003d32:	89 c6                	mov    esi,eax
c0003d34:	51                   	push   ecx
c0003d35:	31 db                	xor    ebx,ebx
c0003d37:	83 c6 02             	add    esi,0x2
c0003d3a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d3e:	66 85 c0             	test   ax,ax
c0003d41:	74 1f                	je     c0003d62 <xname_sum+0x32>
c0003d43:	83 ec 0c             	sub    esp,0xc
c0003d46:	66 d1 cb             	ror    bx,1
c0003d49:	50                   	push   eax
c0003d4a:	e8 1e 46 00 00       	call   c000836d <ff_wtoupper>
c0003d4f:	83 c4 10             	add    esp,0x10
c0003d52:	0f b6 d0             	movzx  edx,al
c0003d55:	66 c1 e8 08          	shr    ax,0x8
c0003d59:	01 d3                	add    ebx,edx
c0003d5b:	66 d1 cb             	ror    bx,1
c0003d5e:	01 c3                	add    ebx,eax
c0003d60:	eb d5                	jmp    c0003d37 <xname_sum+0x7>
c0003d62:	89 d8                	mov    eax,ebx
c0003d64:	5a                   	pop    edx
c0003d65:	5b                   	pop    ebx
c0003d66:	5e                   	pop    esi
c0003d67:	c3                   	ret    

c0003d68 <create_xdir>:
c0003d68:	55                   	push   ebp
c0003d69:	b9 40 00 00 00       	mov    ecx,0x40
c0003d6e:	57                   	push   edi
c0003d6f:	bd 01 00 00 00       	mov    ebp,0x1
c0003d74:	56                   	push   esi
c0003d75:	31 ff                	xor    edi,edi
c0003d77:	53                   	push   ebx
c0003d78:	be 40 00 00 00       	mov    esi,0x40
c0003d7d:	89 c3                	mov    ebx,eax
c0003d7f:	83 ec 1c             	sub    esp,0x1c
c0003d82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d86:	31 d2                	xor    edx,edx
c0003d88:	e8 18 dd ff ff       	call   c0001aa5 <mem_set>
c0003d8d:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d90:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d94:	31 c9                	xor    ecx,ecx
c0003d96:	8d 46 01             	lea    eax,[esi+0x1]
c0003d99:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d9d:	83 c6 02             	add    esi,0x2
c0003da0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	74 12                	je     c0003dbb <create_xdir+0x53>
c0003da9:	0f b6 c1             	movzx  eax,cl
c0003dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003db0:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003db4:	66 83 fd 01          	cmp    bp,0x1
c0003db8:	80 d9 ff             	sbb    cl,0xff
c0003dbb:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dbe:	0f b7 d5             	movzx  edx,bp
c0003dc1:	83 c6 02             	add    esi,0x2
c0003dc4:	e8 ba dc ff ff       	call   c0001a83 <st_word>
c0003dc9:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dcf:	75 d3                	jne    c0003da4 <create_xdir+0x3c>
c0003dd1:	8d 47 01             	lea    eax,[edi+0x1]
c0003dd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dd8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ddc:	0f b6 c1             	movzx  eax,cl
c0003ddf:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003de4:	74 07                	je     c0003ded <create_xdir+0x85>
c0003de6:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003deb:	eb a9                	jmp    c0003d96 <create_xdir+0x2e>
c0003ded:	8d 47 02             	lea    eax,[edi+0x2]
c0003df0:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003df3:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003df6:	89 d0                	mov    eax,edx
c0003df8:	e8 33 ff ff ff       	call   c0003d30 <xname_sum>
c0003dfd:	83 c4 1c             	add    esp,0x1c
c0003e00:	0f b7 d0             	movzx  edx,ax
c0003e03:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e06:	5b                   	pop    ebx
c0003e07:	5e                   	pop    esi
c0003e08:	5f                   	pop    edi
c0003e09:	5d                   	pop    ebp
c0003e0a:	e9 74 dc ff ff       	jmp    c0001a83 <st_word>

c0003e0f <cmp_lfn>:
c0003e0f:	55                   	push   ebp
c0003e10:	57                   	push   edi
c0003e11:	89 d7                	mov    edi,edx
c0003e13:	56                   	push   esi
c0003e14:	53                   	push   ebx
c0003e15:	83 ec 1c             	sub    esp,0x1c
c0003e18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e1f:	e8 ed db ff ff       	call   c0001a11 <ld_word>
c0003e24:	66 85 c0             	test   ax,ax
c0003e27:	74 07                	je     c0003e30 <cmp_lfn+0x21>
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	e9 9a 00 00 00       	jmp    c0003eca <cmp_lfn+0xbb>
c0003e30:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e32:	bd 01 00 00 00       	mov    ebp,0x1
c0003e37:	83 e3 3f             	and    ebx,0x3f
c0003e3a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e42:	4b                   	dec    ebx
c0003e43:	6b db 0d             	imul   ebx,ebx,0xd
c0003e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e4a:	0f b6 80 00 7d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8300]
c0003e51:	01 f8                	add    eax,edi
c0003e53:	e8 b9 db ff ff       	call   c0001a11 <ld_word>
c0003e58:	66 85 ed             	test   bp,bp
c0003e5b:	89 c6                	mov    esi,eax
c0003e5d:	74 3c                	je     c0003e9b <cmp_lfn+0x8c>
c0003e5f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e65:	77 c2                	ja     c0003e29 <cmp_lfn+0x1a>
c0003e67:	83 ec 0c             	sub    esp,0xc
c0003e6a:	0f b7 c0             	movzx  eax,ax
c0003e6d:	50                   	push   eax
c0003e6e:	e8 fa 44 00 00       	call   c000836d <ff_wtoupper>
c0003e73:	89 c5                	mov    ebp,eax
c0003e75:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e80:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e84:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e87:	e8 e1 44 00 00       	call   c000836d <ff_wtoupper>
c0003e8c:	83 c4 10             	add    esp,0x10
c0003e8f:	39 c5                	cmp    ebp,eax
c0003e91:	75 96                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e93:	89 f5                	mov    ebp,esi
c0003e95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e99:	eb 04                	jmp    c0003e9f <cmp_lfn+0x90>
c0003e9b:	66 46                	inc    si
c0003e9d:	75 8a                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e9f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ea3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ea8:	75 9c                	jne    c0003e46 <cmp_lfn+0x37>
c0003eaa:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ead:	74 16                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eaf:	66 85 ed             	test   bp,bp
c0003eb2:	74 11                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb8:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ebd:	0f 94 c0             	sete   al
c0003ec0:	0f b6 c0             	movzx  eax,al
c0003ec3:	eb 05                	jmp    c0003eca <cmp_lfn+0xbb>
c0003ec5:	b8 01 00 00 00       	mov    eax,0x1
c0003eca:	83 c4 1c             	add    esp,0x1c
c0003ecd:	5b                   	pop    ebx
c0003ece:	5e                   	pop    esi
c0003ecf:	5f                   	pop    edi
c0003ed0:	5d                   	pop    ebp
c0003ed1:	c3                   	ret    

c0003ed2 <dir_find>:
c0003ed2:	55                   	push   ebp
c0003ed3:	31 d2                	xor    edx,edx
c0003ed5:	57                   	push   edi
c0003ed6:	56                   	push   esi
c0003ed7:	53                   	push   ebx
c0003ed8:	89 c3                	mov    ebx,eax
c0003eda:	83 ec 1c             	sub    esp,0x1c
c0003edd:	8b 30                	mov    esi,DWORD PTR [eax]
c0003edf:	e8 89 f0 ff ff       	call   c0002f6d <dir_sdi>
c0003ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ee7:	85 c0                	test   eax,eax
c0003ee9:	0f 85 9e 01 00 00    	jne    c000408d <dir_find+0x1bb>
c0003eef:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ef2:	0f 85 8d 00 00 00    	jne    c0003f85 <dir_find+0xb3>
c0003ef8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003efb:	e8 30 fe ff ff       	call   c0003d30 <xname_sum>
c0003f00:	89 c7                	mov    edi,eax
c0003f02:	31 d2                	xor    edx,edx
c0003f04:	89 d8                	mov    eax,ebx
c0003f06:	e8 72 f8 ff ff       	call   c000377d <dir_read>
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	0f 85 5e 01 00 00    	jne    c0004071 <dir_find+0x19f>
c0003f13:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f16:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f19:	e8 f3 da ff ff       	call   c0001a11 <ld_word>
c0003f1e:	66 39 f8             	cmp    ax,di
c0003f21:	75 df                	jne    c0003f02 <dir_find+0x30>
c0003f23:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f26:	31 ed                	xor    ebp,ebp
c0003f28:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f2c:	ba 40 00 00 00       	mov    edx,0x40
c0003f31:	89 e9                	mov    ecx,ebp
c0003f33:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f37:	0f 84 42 01 00 00    	je     c000407f <dir_find+0x1ad>
c0003f3d:	f6 c2 1f             	test   dl,0x1f
c0003f40:	75 03                	jne    c0003f45 <dir_find+0x73>
c0003f42:	83 c2 02             	add    edx,0x2
c0003f45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f49:	89 d0                	mov    eax,edx
c0003f4b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f4e:	e8 be da ff ff       	call   c0001a11 <ld_word>
c0003f53:	83 ec 0c             	sub    esp,0xc
c0003f56:	0f b7 c0             	movzx  eax,ax
c0003f59:	50                   	push   eax
c0003f5a:	e8 0e 44 00 00       	call   c000836d <ff_wtoupper>
c0003f5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f63:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f66:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f6d:	e8 fb 43 00 00       	call   c000836d <ff_wtoupper>
c0003f72:	83 c4 10             	add    esp,0x10
c0003f75:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f79:	75 87                	jne    c0003f02 <dir_find+0x30>
c0003f7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f7f:	45                   	inc    ebp
c0003f80:	83 c2 02             	add    edx,0x2
c0003f83:	eb ac                	jmp    c0003f31 <dir_find+0x5f>
c0003f85:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f8c:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f91:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f96:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f99:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f9c:	89 f0                	mov    eax,esi
c0003f9e:	e8 4c e2 ff ff       	call   c00021ef <move_window>
c0003fa3:	85 c0                	test   eax,eax
c0003fa5:	0f 85 c6 00 00 00    	jne    c0004071 <dir_find+0x19f>
c0003fab:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fae:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fb1:	84 c9                	test   cl,cl
c0003fb3:	0f 84 bd 00 00 00    	je     c0004076 <dir_find+0x1a4>
c0003fb9:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fbc:	88 d0                	mov    al,dl
c0003fbe:	83 e0 3f             	and    eax,0x3f
c0003fc1:	80 f9 e5             	cmp    cl,0xe5
c0003fc4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fc7:	0f 84 87 00 00 00    	je     c0004054 <dir_find+0x182>
c0003fcd:	80 e2 08             	and    dl,0x8
c0003fd0:	74 06                	je     c0003fd8 <dir_find+0x106>
c0003fd2:	3c 0f                	cmp    al,0xf
c0003fd4:	75 7e                	jne    c0004054 <dir_find+0x182>
c0003fd6:	eb 04                	jmp    c0003fdc <dir_find+0x10a>
c0003fd8:	3c 0f                	cmp    al,0xf
c0003fda:	75 4c                	jne    c0004028 <dir_find+0x156>
c0003fdc:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fe0:	75 7e                	jne    c0004060 <dir_find+0x18e>
c0003fe2:	f6 c1 40             	test   cl,0x40
c0003fe5:	74 12                	je     c0003ff9 <dir_find+0x127>
c0003fe7:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fea:	83 e1 bf             	and    ecx,0xffffffbf
c0003fed:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003ff1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ff4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ff7:	eb 06                	jmp    c0003fff <dir_find+0x12d>
c0003ff9:	89 f8                	mov    eax,edi
c0003ffb:	38 c8                	cmp    al,cl
c0003ffd:	75 5c                	jne    c000405b <dir_find+0x189>
c0003fff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004003:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004008:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000400b:	75 53                	jne    c0004060 <dir_find+0x18e>
c000400d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004011:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004014:	89 ea                	mov    edx,ebp
c0004016:	e8 f4 fd ff ff       	call   c0003e0f <cmp_lfn>
c000401b:	85 c0                	test   eax,eax
c000401d:	74 41                	je     c0004060 <dir_find+0x18e>
c000401f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004023:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004026:	eb 38                	jmp    c0004060 <dir_find+0x18e>
c0004028:	89 f8                	mov    eax,edi
c000402a:	84 c0                	test   al,al
c000402c:	75 0d                	jne    c000403b <dir_find+0x169>
c000402e:	89 e8                	mov    eax,ebp
c0004030:	e8 98 de ff ff       	call   c0001ecd <sum_sfn>
c0004035:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004039:	74 52                	je     c000408d <dir_find+0x1bb>
c000403b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000403f:	75 13                	jne    c0004054 <dir_find+0x182>
c0004041:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004044:	b9 0b 00 00 00       	mov    ecx,0xb
c0004049:	89 e8                	mov    eax,ebp
c000404b:	e8 60 da ff ff       	call   c0001ab0 <mem_cmp>
c0004050:	85 c0                	test   eax,eax
c0004052:	74 39                	je     c000408d <dir_find+0x1bb>
c0004054:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000405b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004060:	31 d2                	xor    edx,edx
c0004062:	89 d8                	mov    eax,ebx
c0004064:	e8 5c f4 ff ff       	call   c00034c5 <dir_next>
c0004069:	85 c0                	test   eax,eax
c000406b:	0f 84 25 ff ff ff    	je     c0003f96 <dir_find+0xc4>
c0004071:	89 04 24             	mov    DWORD PTR [esp],eax
c0004074:	eb 17                	jmp    c000408d <dir_find+0x1bb>
c0004076:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000407d:	eb 0e                	jmp    c000408d <dir_find+0x1bb>
c000407f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004082:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004087:	0f 85 75 fe ff ff    	jne    c0003f02 <dir_find+0x30>
c000408d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004090:	83 c4 1c             	add    esp,0x1c
c0004093:	5b                   	pop    ebx
c0004094:	5e                   	pop    esi
c0004095:	5f                   	pop    edi
c0004096:	5d                   	pop    ebp
c0004097:	c3                   	ret    

c0004098 <dir_register>:
c0004098:	55                   	push   ebp
c0004099:	57                   	push   edi
c000409a:	56                   	push   esi
c000409b:	be 06 00 00 00       	mov    esi,0x6
c00040a0:	53                   	push   ebx
c00040a1:	83 ec 6c             	sub    esp,0x6c
c00040a4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040a8:	0f 85 62 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ae:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040b0:	31 ff                	xor    edi,edi
c00040b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040b5:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ba:	74 03                	je     c00040bf <dir_register+0x27>
c00040bc:	47                   	inc    edi
c00040bd:	eb f6                	jmp    c00040b5 <dir_register+0x1d>
c00040bf:	89 c3                	mov    ebx,eax
c00040c1:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040c5:	0f 85 e1 00 00 00    	jne    c00041ac <dir_register+0x114>
c00040cb:	83 c7 0e             	add    edi,0xe
c00040ce:	b9 0f 00 00 00       	mov    ecx,0xf
c00040d3:	89 f8                	mov    eax,edi
c00040d5:	31 d2                	xor    edx,edx
c00040d7:	f7 f1                	div    ecx
c00040d9:	8d 50 02             	lea    edx,[eax+0x2]
c00040dc:	89 c7                	mov    edi,eax
c00040de:	89 d8                	mov    eax,ebx
c00040e0:	e8 12 f8 ff ff       	call   c00038f7 <dir_alloc>
c00040e5:	89 c6                	mov    esi,eax
c00040e7:	85 c0                	test   eax,eax
c00040e9:	0f 85 21 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ef:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040f5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040f8:	c1 e7 05             	shl    edi,0x5
c00040fb:	29 f8                	sub    eax,edi
c00040fd:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004100:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004103:	a8 04                	test   al,0x4
c0004105:	0f 84 91 00 00 00    	je     c000419c <dir_register+0x104>
c000410b:	83 e0 fb             	and    eax,0xfffffffb
c000410e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004111:	89 d8                	mov    eax,ebx
c0004113:	e8 25 ec ff ff       	call   c0002d3d <fill_first_frag>
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 ee 01 00 00    	jne    c000430e <dir_register+0x276>
c0004120:	83 c9 ff             	or     ecx,0xffffffff
c0004123:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004126:	89 d8                	mov    eax,ebx
c0004128:	e8 db eb ff ff       	call   c0002d08 <fill_last_frag>
c000412d:	85 c0                	test   eax,eax
c000412f:	0f 85 d9 01 00 00    	jne    c000430e <dir_register+0x276>
c0004135:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004139:	74 61                	je     c000419c <dir_register+0x104>
c000413b:	89 da                	mov    edx,ebx
c000413d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004141:	e8 ea f5 ff ff       	call   c0003730 <load_obj_xdir>
c0004146:	85 c0                	test   eax,eax
c0004148:	0f 85 c0 01 00 00    	jne    c000430e <dir_register+0x276>
c000414e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004152:	31 c9                	xor    ecx,ecx
c0004154:	c1 e2 09             	shl    edx,0x9
c0004157:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000415a:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000415d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004160:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004163:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004166:	83 c0 38             	add    eax,0x38
c0004169:	e8 1c d9 ff ff       	call   c0001a8a <st_qword>
c000416e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004171:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004174:	83 c0 28             	add    eax,0x28
c0004177:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000417a:	e8 0b d9 ff ff       	call   c0001a8a <st_qword>
c000417f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004182:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004185:	83 c8 01             	or     eax,0x1
c0004188:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000418b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000418f:	e8 db f7 ff ff       	call   c000396f <store_xdir>
c0004194:	85 c0                	test   eax,eax
c0004196:	0f 85 72 01 00 00    	jne    c000430e <dir_register+0x276>
c000419c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000419f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a2:	e8 c1 fb ff ff       	call   c0003d68 <create_xdir>
c00041a7:	e9 64 01 00 00       	jmp    c0004310 <dir_register+0x278>
c00041ac:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041af:	b9 0c 00 00 00       	mov    ecx,0xc
c00041b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041b8:	89 c2                	mov    edx,eax
c00041ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041be:	e8 cd d8 ff ff       	call   c0001a90 <mem_cpy>
c00041c3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041c8:	74 58                	je     c0004222 <dir_register+0x18a>
c00041ca:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041ce:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041d6:	83 ec 0c             	sub    esp,0xc
c00041d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041e0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041e8:	e8 24 dc ff ff       	call   c0001e11 <gen_numname>
c00041ed:	89 d8                	mov    eax,ebx
c00041ef:	e8 de fc ff ff       	call   c0003ed2 <dir_find>
c00041f4:	83 c4 10             	add    esp,0x10
c00041f7:	89 c6                	mov    esi,eax
c00041f9:	85 c0                	test   eax,eax
c00041fb:	75 15                	jne    c0004212 <dir_register+0x17a>
c00041fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004201:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004206:	75 ce                	jne    c00041d6 <dir_register+0x13e>
c0004208:	be 07 00 00 00       	mov    esi,0x7
c000420d:	e9 fe 00 00 00       	jmp    c0004310 <dir_register+0x278>
c0004212:	83 f8 04             	cmp    eax,0x4
c0004215:	0f 85 f5 00 00 00    	jne    c0004310 <dir_register+0x278>
c000421b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000421f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004222:	b9 01 00 00 00       	mov    ecx,0x1
c0004227:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000422c:	74 0f                	je     c000423d <dir_register+0x1a5>
c000422e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004233:	8d 47 0c             	lea    eax,[edi+0xc]
c0004236:	31 d2                	xor    edx,edx
c0004238:	f7 f1                	div    ecx
c000423a:	8d 48 01             	lea    ecx,[eax+0x1]
c000423d:	89 ca                	mov    edx,ecx
c000423f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004243:	89 d8                	mov    eax,ebx
c0004245:	e8 ad f6 ff ff       	call   c00038f7 <dir_alloc>
c000424a:	89 c6                	mov    esi,eax
c000424c:	85 c0                	test   eax,eax
c000424e:	0f 85 bc 00 00 00    	jne    c0004310 <dir_register+0x278>
c0004254:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004258:	49                   	dec    ecx
c0004259:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000425d:	74 6a                	je     c00042c9 <dir_register+0x231>
c000425f:	89 c8                	mov    eax,ecx
c0004261:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004264:	c1 e0 05             	shl    eax,0x5
c0004267:	29 c2                	sub    edx,eax
c0004269:	89 d8                	mov    eax,ebx
c000426b:	e8 fd ec ff ff       	call   c0002f6d <dir_sdi>
c0004270:	89 c6                	mov    esi,eax
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 96 00 00 00    	jne    c0004310 <dir_register+0x278>
c000427a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000427e:	e8 4a dc ff ff       	call   c0001ecd <sum_sfn>
c0004283:	0f b6 f8             	movzx  edi,al
c0004286:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004289:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000428c:	89 e8                	mov    eax,ebp
c000428e:	e8 5c df ff ff       	call   c00021ef <move_window>
c0004293:	89 c6                	mov    esi,eax
c0004295:	85 c0                	test   eax,eax
c0004297:	75 77                	jne    c0004310 <dir_register+0x278>
c0004299:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000429e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042a1:	83 ec 0c             	sub    esp,0xc
c00042a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042a7:	57                   	push   edi
c00042a8:	e8 e0 da ff ff       	call   c0001d8d <put_lfn>
c00042ad:	31 d2                	xor    edx,edx
c00042af:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042b3:	89 d8                	mov    eax,ebx
c00042b5:	e8 0b f2 ff ff       	call   c00034c5 <dir_next>
c00042ba:	83 c4 10             	add    esp,0x10
c00042bd:	89 c6                	mov    esi,eax
c00042bf:	85 c0                	test   eax,eax
c00042c1:	75 4d                	jne    c0004310 <dir_register+0x278>
c00042c3:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042c7:	75 bd                	jne    c0004286 <dir_register+0x1ee>
c00042c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042cc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042cf:	89 e8                	mov    eax,ebp
c00042d1:	e8 19 df ff ff       	call   c00021ef <move_window>
c00042d6:	89 c6                	mov    esi,eax
c00042d8:	85 c0                	test   eax,eax
c00042da:	75 34                	jne    c0004310 <dir_register+0x278>
c00042dc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042df:	b9 20 00 00 00       	mov    ecx,0x20
c00042e4:	31 d2                	xor    edx,edx
c00042e6:	e8 ba d7 ff ff       	call   c0001aa5 <mem_set>
c00042eb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042f2:	b9 0b 00 00 00       	mov    ecx,0xb
c00042f7:	e8 94 d7 ff ff       	call   c0001a90 <mem_cpy>
c00042fc:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042ff:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004302:	83 e0 18             	and    eax,0x18
c0004305:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004308:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000430c:	eb 02                	jmp    c0004310 <dir_register+0x278>
c000430e:	89 c6                	mov    esi,eax
c0004310:	83 c4 6c             	add    esp,0x6c
c0004313:	89 f0                	mov    eax,esi
c0004315:	5b                   	pop    ebx
c0004316:	5e                   	pop    esi
c0004317:	5f                   	pop    edi
c0004318:	5d                   	pop    ebp
c0004319:	c3                   	ret    

c000431a <sync_fs>:
c000431a:	56                   	push   esi
c000431b:	53                   	push   ebx
c000431c:	53                   	push   ebx
c000431d:	89 c3                	mov    ebx,eax
c000431f:	e8 37 de ff ff       	call   c000215b <sync_window>
c0004324:	85 c0                	test   eax,eax
c0004326:	0f 85 b1 00 00 00    	jne    c00043dd <sync_fs+0xc3>
c000432c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000432f:	0f 85 8e 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c0004335:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004339:	0f 85 84 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c000433f:	b9 00 02 00 00       	mov    ecx,0x200
c0004344:	8d 73 54             	lea    esi,[ebx+0x54]
c0004347:	31 d2                	xor    edx,edx
c0004349:	89 f0                	mov    eax,esi
c000434b:	e8 55 d7 ff ff       	call   c0001aa5 <mem_set>
c0004350:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004356:	ba 55 aa 00 00       	mov    edx,0xaa55
c000435b:	e8 23 d7 ff ff       	call   c0001a83 <st_word>
c0004360:	ba 52 52 61 41       	mov    edx,0x41615252
c0004365:	89 f0                	mov    eax,esi
c0004367:	e8 1b d7 ff ff       	call   c0001a87 <st_dword>
c000436c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004372:	ba 72 72 41 61       	mov    edx,0x61417272
c0004377:	e8 0b d7 ff ff       	call   c0001a87 <st_dword>
c000437c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000437f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004385:	e8 fd d6 ff ff       	call   c0001a87 <st_dword>
c000438a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000438d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004393:	e8 ef d6 ff ff       	call   c0001a87 <st_dword>
c0004398:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000439b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000439e:	83 c0 01             	add    eax,0x1
c00043a1:	83 d2 00             	adc    edx,0x0
c00043a4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043a7:	83 ec 0c             	sub    esp,0xc
c00043aa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043ad:	6a 01                	push   0x1
c00043af:	52                   	push   edx
c00043b0:	50                   	push   eax
c00043b1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b5:	56                   	push   esi
c00043b6:	50                   	push   eax
c00043b7:	e8 20 d6 ff ff       	call   c00019dc <disk_write>
c00043bc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043c0:	83 c4 20             	add    esp,0x20
c00043c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c7:	51                   	push   ecx
c00043c8:	6a 00                	push   0x0
c00043ca:	6a 00                	push   0x0
c00043cc:	50                   	push   eax
c00043cd:	e8 20 d6 ff ff       	call   c00019f2 <disk_ioctl>
c00043d2:	83 c4 10             	add    esp,0x10
c00043d5:	85 c0                	test   eax,eax
c00043d7:	0f 95 c0             	setne  al
c00043da:	0f b6 c0             	movzx  eax,al
c00043dd:	5a                   	pop    edx
c00043de:	5b                   	pop    ebx
c00043df:	5e                   	pop    esi
c00043e0:	c3                   	ret    

c00043e1 <create_partition>:
c00043e1:	55                   	push   ebp
c00043e2:	0f b6 c0             	movzx  eax,al
c00043e5:	57                   	push   edi
c00043e6:	56                   	push   esi
c00043e7:	53                   	push   ebx
c00043e8:	83 ec 60             	sub    esp,0x60
c00043eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ef:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043f3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043f7:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043fb:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043ff:	50                   	push   eax
c0004400:	6a 01                	push   0x1
c0004402:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004406:	e8 e7 d5 ff ff       	call   c00019f2 <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	74 0a                	je     c000441c <create_partition+0x3b>
c0004412:	b8 01 00 00 00       	mov    eax,0x1
c0004417:	e9 67 05 00 00       	jmp    c0004983 <create_partition+0x5a2>
c000441c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004420:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004424:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004428:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000442c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004431:	0f 86 ed 03 00 00    	jbe    c0004824 <create_partition+0x443>
c0004437:	83 c0 df             	add    eax,0xffffffdf
c000443a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004442:	83 d2 ff             	adc    edx,0xffffffff
c0004445:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004449:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000444d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004455:	83 c0 bd             	add    eax,0xffffffbd
c0004458:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000445f:	83 d2 ff             	adc    edx,0xffffffff
c0004462:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004466:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000446a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004472:	be 22 00 00 00       	mov    esi,0x22
c0004477:	31 ff                	xor    edi,edi
c0004479:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004481:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004489:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004491:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004495:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000449b:	75 0e                	jne    c00044ab <create_partition+0xca>
c000449d:	b9 00 02 00 00       	mov    ecx,0x200
c00044a2:	31 d2                	xor    edx,edx
c00044a4:	89 d8                	mov    eax,ebx
c00044a6:	e8 fa d5 ff ff       	call   c0001aa5 <mem_set>
c00044ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044b7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ba:	0f 84 23 01 00 00    	je     c00045e3 <create_partition+0x202>
c00044c0:	89 f0                	mov    eax,esi
c00044c2:	89 fa                	mov    edx,edi
c00044c4:	05 ff 07 00 00       	add    eax,0x7ff
c00044c9:	83 d2 00             	adc    edx,0x0
c00044cc:	89 c1                	mov    ecx,eax
c00044ce:	89 d7                	mov    edi,edx
c00044d0:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044da:	89 ce                	mov    esi,ecx
c00044dc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044e4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044e8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f2:	b8 64 00 00 00       	mov    eax,0x64
c00044f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044fa:	b8 00 00 00 00       	mov    eax,0x0
c00044ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004503:	72 41                	jb     c0004546 <create_partition+0x165>
c0004505:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004511:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004516:	01 c1                	add    ecx,eax
c0004518:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000451c:	f7 24 24             	mul    DWORD PTR [esp]
c000451f:	6a 00                	push   0x0
c0004521:	01 ca                	add    edx,ecx
c0004523:	6a 64                	push   0x64
c0004525:	52                   	push   edx
c0004526:	50                   	push   eax
c0004527:	e8 90 0d 02 00       	call   c00252bc <__udivdi3>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	05 ff 07 00 00       	add    eax,0x7ff
c0004534:	83 d2 00             	adc    edx,0x0
c0004537:	89 c1                	mov    ecx,eax
c0004539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000453d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004543:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004546:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004549:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000454d:	01 f0                	add    eax,esi
c000454f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004553:	11 fa                	adc    edx,edi
c0004555:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004559:	19 d1                	sbb    ecx,edx
c000455b:	73 2e                	jae    c000458b <create_partition+0x1aa>
c000455d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004561:	89 f8                	mov    eax,edi
c0004563:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000456a:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000456e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004576:	73 6b                	jae    c00045e3 <create_partition+0x202>
c0004578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000457c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004580:	29 f0                	sub    eax,esi
c0004582:	19 fa                	sbb    edx,edi
c0004584:	89 04 24             	mov    DWORD PTR [esp],eax
c0004587:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000458b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000458f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004592:	74 4f                	je     c00045e3 <create_partition+0x202>
c0004594:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004597:	b9 10 00 00 00       	mov    ecx,0x10
c000459c:	ba 10 7d 02 c0       	mov    edx,0xc0027d10
c00045a1:	e8 ea d4 ff ff       	call   c0001a90 <mem_cpy>
c00045a6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045aa:	b9 10 00 00 00       	mov    ecx,0x10
c00045af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045b3:	e8 2c db ff ff       	call   c00020e4 <make_rand>
c00045b8:	89 f2                	mov    edx,esi
c00045ba:	89 f9                	mov    ecx,edi
c00045bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045c0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045c4:	e8 c1 d4 ff ff       	call   c0001a8a <st_qword>
c00045c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045cc:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045d0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045d4:	89 f2                	mov    edx,esi
c00045d6:	89 f9                	mov    ecx,edi
c00045d8:	83 c2 ff             	add    edx,0xffffffff
c00045db:	83 d1 ff             	adc    ecx,0xffffffff
c00045de:	e8 a7 d4 ff ff       	call   c0001a8a <st_qword>
c00045e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045e7:	83 e8 80             	sub    eax,0xffffff80
c00045ea:	89 c5                	mov    ebp,eax
c00045ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f6:	75 6b                	jne    c0004663 <create_partition+0x282>
c00045f8:	45                   	inc    ebp
c00045f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045fd:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004602:	e8 39 da ff ff       	call   c0002040 <crc32>
c0004607:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000460d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004611:	75 e5                	jne    c00045f8 <create_partition+0x217>
c0004613:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004617:	31 d2                	xor    edx,edx
c0004619:	83 ec 0c             	sub    esp,0xc
c000461c:	c1 ed 09             	shr    ebp,0x9
c000461f:	6a 01                	push   0x1
c0004621:	8d 45 02             	lea    eax,[ebp+0x2]
c0004624:	52                   	push   edx
c0004625:	50                   	push   eax
c0004626:	53                   	push   ebx
c0004627:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000462b:	e8 ac d3 ff ff       	call   c00019dc <disk_write>
c0004630:	83 c4 20             	add    esp,0x20
c0004633:	85 c0                	test   eax,eax
c0004635:	0f 85 d7 fd ff ff    	jne    c0004412 <create_partition+0x31>
c000463b:	83 ec 0c             	sub    esp,0xc
c000463e:	31 d2                	xor    edx,edx
c0004640:	6a 01                	push   0x1
c0004642:	89 e8                	mov    eax,ebp
c0004644:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004648:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000464c:	52                   	push   edx
c000464d:	50                   	push   eax
c000464e:	53                   	push   ebx
c000464f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004653:	e8 84 d3 ff ff       	call   c00019dc <disk_write>
c0004658:	83 c4 20             	add    esp,0x20
c000465b:	85 c0                	test   eax,eax
c000465d:	0f 85 af fd ff ff    	jne    c0004412 <create_partition+0x31>
c0004663:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004667:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000466b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004670:	74 0d                	je     c000467f <create_partition+0x29e>
c0004672:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004676:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000467a:	e9 12 fe ff ff       	jmp    c0004491 <create_partition+0xb0>
c000467f:	31 d2                	xor    edx,edx
c0004681:	b9 00 02 00 00       	mov    ecx,0x200
c0004686:	89 d8                	mov    eax,ebx
c0004688:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000468b:	e8 15 d4 ff ff       	call   c0001aa5 <mem_set>
c0004690:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004693:	b9 10 00 00 00       	mov    ecx,0x10
c0004698:	ba 00 7c 02 c0       	mov    edx,0xc0027c00
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 ec d3 ff ff       	call   c0001a90 <mem_cpy>
c00046a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046a8:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ab:	f7 d2                	not    edx
c00046ad:	e8 d5 d3 ff ff       	call   c0001a87 <st_dword>
c00046b2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046b5:	31 c9                	xor    ecx,ecx
c00046b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ba:	ba 01 00 00 00       	mov    edx,0x1
c00046bf:	e8 c6 d3 ff ff       	call   c0001a8a <st_qword>
c00046c4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046c8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046cc:	83 c2 ff             	add    edx,0xffffffff
c00046cf:	89 e8                	mov    eax,ebp
c00046d1:	83 d1 ff             	adc    ecx,0xffffffff
c00046d4:	e8 b1 d3 ff ff       	call   c0001a8a <st_qword>
c00046d9:	31 c9                	xor    ecx,ecx
c00046db:	8d 43 28             	lea    eax,[ebx+0x28]
c00046de:	ba 22 00 00 00       	mov    edx,0x22
c00046e3:	e8 a2 d3 ff ff       	call   c0001a8a <st_qword>
c00046e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046f0:	83 c2 de             	add    edx,0xffffffde
c00046f3:	8d 43 30             	lea    eax,[ebx+0x30]
c00046f6:	83 d1 ff             	adc    ecx,0xffffffff
c00046f9:	31 f6                	xor    esi,esi
c00046fb:	e8 8a d3 ff ff       	call   c0001a8a <st_qword>
c0004700:	8d 43 54             	lea    eax,[ebx+0x54]
c0004703:	ba 80 00 00 00       	mov    edx,0x80
c0004708:	e8 7a d3 ff ff       	call   c0001a87 <st_dword>
c000470d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004710:	ba 80 00 00 00       	mov    edx,0x80
c0004715:	e8 6d d3 ff ff       	call   c0001a87 <st_dword>
c000471a:	ba 02 00 00 00       	mov    edx,0x2
c000471f:	89 f8                	mov    eax,edi
c0004721:	e8 61 d3 ff ff       	call   c0001a87 <st_dword>
c0004726:	8d 53 38             	lea    edx,[ebx+0x38]
c0004729:	b9 10 00 00 00       	mov    ecx,0x10
c000472e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004732:	e8 ad d9 ff ff       	call   c00020e4 <make_rand>
c0004737:	83 c8 ff             	or     eax,0xffffffff
c000473a:	46                   	inc    esi
c000473b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004740:	e8 fb d8 ff ff       	call   c0002040 <crc32>
c0004745:	83 fe 5c             	cmp    esi,0x5c
c0004748:	75 f0                	jne    c000473a <create_partition+0x359>
c000474a:	f7 d0                	not    eax
c000474c:	8d 73 10             	lea    esi,[ebx+0x10]
c000474f:	89 c2                	mov    edx,eax
c0004751:	89 f0                	mov    eax,esi
c0004753:	e8 2f d3 ff ff       	call   c0001a87 <st_dword>
c0004758:	83 ec 0c             	sub    esp,0xc
c000475b:	6a 01                	push   0x1
c000475d:	6a 00                	push   0x0
c000475f:	6a 01                	push   0x1
c0004761:	53                   	push   ebx
c0004762:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004766:	e8 71 d2 ff ff       	call   c00019dc <disk_write>
c000476b:	83 c4 20             	add    esp,0x20
c000476e:	85 c0                	test   eax,eax
c0004770:	0f 85 9c fc ff ff    	jne    c0004412 <create_partition+0x31>
c0004776:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000477a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000477e:	83 c2 ff             	add    edx,0xffffffff
c0004781:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004784:	83 d1 ff             	adc    ecx,0xffffffff
c0004787:	e8 fe d2 ff ff       	call   c0001a8a <st_qword>
c000478c:	ba 01 00 00 00       	mov    edx,0x1
c0004791:	31 c9                	xor    ecx,ecx
c0004793:	89 e8                	mov    eax,ebp
c0004795:	e8 f0 d2 ff ff       	call   c0001a8a <st_qword>
c000479a:	89 f8                	mov    eax,edi
c000479c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a4:	31 ff                	xor    edi,edi
c00047a6:	e8 df d2 ff ff       	call   c0001a8a <st_qword>
c00047ab:	89 f0                	mov    eax,esi
c00047ad:	31 d2                	xor    edx,edx
c00047af:	e8 d3 d2 ff ff       	call   c0001a87 <st_dword>
c00047b4:	83 c8 ff             	or     eax,0xffffffff
c00047b7:	47                   	inc    edi
c00047b8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047bd:	e8 7e d8 ff ff       	call   c0002040 <crc32>
c00047c2:	83 ff 5c             	cmp    edi,0x5c
c00047c5:	75 f0                	jne    c00047b7 <create_partition+0x3d6>
c00047c7:	f7 d0                	not    eax
c00047c9:	89 c2                	mov    edx,eax
c00047cb:	89 f0                	mov    eax,esi
c00047cd:	e8 b5 d2 ff ff       	call   c0001a87 <st_dword>
c00047d2:	83 ec 0c             	sub    esp,0xc
c00047d5:	6a 01                	push   0x1
c00047d7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047db:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047df:	83 c0 ff             	add    eax,0xffffffff
c00047e2:	83 d2 ff             	adc    edx,0xffffffff
c00047e5:	52                   	push   edx
c00047e6:	50                   	push   eax
c00047e7:	53                   	push   ebx
c00047e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ec:	e8 eb d1 ff ff       	call   c00019dc <disk_write>
c00047f1:	83 c4 20             	add    esp,0x20
c00047f4:	85 c0                	test   eax,eax
c00047f6:	0f 85 16 fc ff ff    	jne    c0004412 <create_partition+0x31>
c00047fc:	31 d2                	xor    edx,edx
c00047fe:	89 d8                	mov    eax,ebx
c0004800:	b9 00 02 00 00       	mov    ecx,0x200
c0004805:	e8 9b d2 ff ff       	call   c0001aa5 <mem_set>
c000480a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004810:	b9 10 00 00 00       	mov    ecx,0x10
c0004815:	ba 10 7c 02 c0       	mov    edx,0xc0027c10
c000481a:	e8 71 d2 ff ff       	call   c0001a90 <mem_cpy>
c000481f:	e9 21 01 00 00       	jmp    c0004945 <create_partition+0x564>
c0004824:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004828:	b9 05 00 00 00       	mov    ecx,0x5
c000482d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004830:	bf 08 00 00 00       	mov    edi,0x8
c0004835:	89 f8                	mov    eax,edi
c0004837:	31 d2                	xor    edx,edx
c0004839:	0f b6 f0             	movzx  esi,al
c000483c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000483f:	f7 f6                	div    esi
c0004841:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004846:	76 0a                	jbe    c0004852 <create_partition+0x471>
c0004848:	d1 e7                	shl    edi,1
c000484a:	49                   	dec    ecx
c000484b:	75 e8                	jne    c0004835 <create_partition+0x454>
c000484d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004852:	b9 00 02 00 00       	mov    ecx,0x200
c0004857:	31 d2                	xor    edx,edx
c0004859:	89 d8                	mov    eax,ebx
c000485b:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004861:	e8 3f d2 ff ff       	call   c0001aa5 <mem_set>
c0004866:	b9 64 00 00 00       	mov    ecx,0x64
c000486b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000486e:	31 d2                	xor    edx,edx
c0004870:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004878:	f7 f1                	div    ecx
c000487a:	b9 3f 00 00 00       	mov    ecx,0x3f
c000487f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004883:	89 f8                	mov    eax,edi
c0004885:	0f b6 c0             	movzx  eax,al
c0004888:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000488c:	e9 80 00 00 00       	jmp    c0004911 <create_partition+0x530>
c0004891:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004894:	29 cf                	sub    edi,ecx
c0004896:	89 ca                	mov    edx,ecx
c0004898:	89 f0                	mov    eax,esi
c000489a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000489f:	e8 e3 d1 ff ff       	call   c0001a87 <st_dword>
c00048a4:	8d 46 04             	lea    eax,[esi+0x4]
c00048a7:	89 fa                	mov    edx,edi
c00048a9:	83 c6 10             	add    esi,0x10
c00048ac:	e8 d6 d1 ff ff       	call   c0001a87 <st_dword>
c00048b1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048b5:	31 d2                	xor    edx,edx
c00048b7:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ba:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048be:	89 c8                	mov    eax,ecx
c00048c0:	01 f9                	add    ecx,edi
c00048c2:	f7 f5                	div    ebp
c00048c4:	89 d5                	mov    ebp,edx
c00048c6:	31 d2                	xor    edx,edx
c00048c8:	45                   	inc    ebp
c00048c9:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048cd:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048d0:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048d3:	89 c2                	mov    edx,eax
c00048d5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048d8:	c1 ea 02             	shr    edx,0x2
c00048db:	83 e2 c0             	and    edx,0xffffffc0
c00048de:	09 ea                	or     edx,ebp
c00048e0:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048e5:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048e8:	31 d2                	xor    edx,edx
c00048ea:	f7 f5                	div    ebp
c00048ec:	89 d7                	mov    edi,edx
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	47                   	inc    edi
c00048f1:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048f5:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048f8:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048fb:	89 c5                	mov    ebp,eax
c00048fd:	c1 ed 02             	shr    ebp,0x2
c0004900:	83 e5 c0             	and    ebp,0xffffffc0
c0004903:	09 ef                	or     edi,ebp
c0004905:	89 fa                	mov    edx,edi
c0004907:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c000490a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000490f:	74 34                	je     c0004945 <create_partition+0x564>
c0004911:	85 c9                	test   ecx,ecx
c0004913:	74 30                	je     c0004945 <create_partition+0x564>
c0004915:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004918:	76 2b                	jbe    c0004945 <create_partition+0x564>
c000491a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000491e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004922:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004925:	83 ff 64             	cmp    edi,0x64
c0004928:	76 4b                	jbe    c0004975 <create_partition+0x594>
c000492a:	89 f8                	mov    eax,edi
c000492c:	01 c8                	add    eax,ecx
c000492e:	0f 82 5d ff ff ff    	jb     c0004891 <create_partition+0x4b0>
c0004934:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004937:	0f 87 54 ff ff ff    	ja     c0004891 <create_partition+0x4b0>
c000493d:	85 ff                	test   edi,edi
c000493f:	0f 85 51 ff ff ff    	jne    c0004896 <create_partition+0x4b5>
c0004945:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000494b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004950:	e8 2e d1 ff ff       	call   c0001a83 <st_word>
c0004955:	83 ec 0c             	sub    esp,0xc
c0004958:	6a 01                	push   0x1
c000495a:	6a 00                	push   0x0
c000495c:	6a 00                	push   0x0
c000495e:	53                   	push   ebx
c000495f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004963:	e8 74 d0 ff ff       	call   c00019dc <disk_write>
c0004968:	83 c4 20             	add    esp,0x20
c000496b:	85 c0                	test   eax,eax
c000496d:	0f 95 c0             	setne  al
c0004970:	0f b6 c0             	movzx  eax,al
c0004973:	eb 0e                	jmp    c0004983 <create_partition+0x5a2>
c0004975:	74 07                	je     c000497e <create_partition+0x59d>
c0004977:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000497c:	eb ac                	jmp    c000492a <create_partition+0x549>
c000497e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004981:	eb a7                	jmp    c000492a <create_partition+0x549>
c0004983:	83 c4 5c             	add    esp,0x5c
c0004986:	5b                   	pop    ebx
c0004987:	5e                   	pop    esi
c0004988:	5f                   	pop    edi
c0004989:	5d                   	pop    ebp
c000498a:	c3                   	ret    

c000498b <get_fileinfo>:
c000498b:	55                   	push   ebp
c000498c:	57                   	push   edi
c000498d:	56                   	push   esi
c000498e:	53                   	push   ebx
c000498f:	83 ec 1c             	sub    esp,0x1c
c0004992:	8b 30                	mov    esi,DWORD PTR [eax]
c0004994:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004998:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000499c:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000499f:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049a2:	0f 84 dc 01 00 00    	je     c0004b84 <get_fileinfo+0x1f9>
c00049a8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049ab:	75 0f                	jne    c00049bc <get_fileinfo+0x31>
c00049ad:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049b0:	83 c4 1c             	add    esp,0x1c
c00049b3:	5b                   	pop    ebx
c00049b4:	5e                   	pop    esi
c00049b5:	5f                   	pop    edi
c00049b6:	5d                   	pop    ebp
c00049b7:	e9 58 d5 ff ff       	jmp    c0001f14 <get_xfileinfo>
c00049bc:	89 d3                	mov    ebx,edx
c00049be:	89 c6                	mov    esi,eax
c00049c0:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049c4:	74 6a                	je     c0004a30 <get_fileinfo+0xa5>
c00049c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ce:	31 ed                	xor    ebp,ebp
c00049d0:	31 ff                	xor    edi,edi
c00049d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049dd:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049e1:	66 85 d2             	test   dx,dx
c00049e4:	74 3e                	je     c0004a24 <get_fileinfo+0x99>
c00049e6:	66 85 ed             	test   bp,bp
c00049e9:	75 0c                	jne    c00049f7 <get_fileinfo+0x6c>
c00049eb:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049f1:	66 3d ff 07          	cmp    ax,0x7ff
c00049f5:	76 22                	jbe    c0004a19 <get_fileinfo+0x8e>
c00049f7:	b9 ff 00 00 00       	mov    ecx,0xff
c00049fc:	89 e8                	mov    eax,ebp
c00049fe:	29 f9                	sub    ecx,edi
c0004a00:	c1 e0 10             	shl    eax,0x10
c0004a03:	09 d0                	or     eax,edx
c0004a05:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a09:	e8 a3 d1 ff ff       	call   c0001bb1 <put_utf>
c0004a0e:	84 c0                	test   al,al
c0004a10:	74 10                	je     c0004a22 <get_fileinfo+0x97>
c0004a12:	0f b6 c0             	movzx  eax,al
c0004a15:	31 d2                	xor    edx,edx
c0004a17:	01 c7                	add    edi,eax
c0004a19:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	eb b0                	jmp    c00049d2 <get_fileinfo+0x47>
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	66 85 ed             	test   bp,bp
c0004a27:	74 02                	je     c0004a2b <get_fileinfo+0xa0>
c0004a29:	31 ff                	xor    edi,edi
c0004a2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a30:	31 ff                	xor    edi,edi
c0004a32:	31 c9                	xor    ecx,ecx
c0004a34:	83 f9 0a             	cmp    ecx,0xa
c0004a37:	0f 87 ad 00 00 00    	ja     c0004aea <get_fileinfo+0x15f>
c0004a3d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a40:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a43:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a47:	66 83 fa 20          	cmp    dx,0x20
c0004a4b:	0f 84 92 00 00 00    	je     c0004ae3 <get_fileinfo+0x158>
c0004a51:	66 83 fa 05          	cmp    dx,0x5
c0004a55:	75 05                	jne    c0004a5c <get_fileinfo+0xd1>
c0004a57:	ba e5 00 00 00       	mov    edx,0xe5
c0004a5c:	83 ff 0b             	cmp    edi,0xb
c0004a5f:	77 0b                	ja     c0004a6c <get_fileinfo+0xe1>
c0004a61:	83 fd 09             	cmp    ebp,0x9
c0004a64:	75 06                	jne    c0004a6c <get_fileinfo+0xe1>
c0004a66:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a6b:	47                   	inc    edi
c0004a6c:	0f b7 c2             	movzx  eax,dx
c0004a6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a73:	e8 6d d0 ff ff       	call   c0001ae5 <dbc_1st>
c0004a78:	85 c0                	test   eax,eax
c0004a7a:	74 2f                	je     c0004aab <get_fileinfo+0x120>
c0004a7c:	83 fd 08             	cmp    ebp,0x8
c0004a7f:	74 2a                	je     c0004aab <get_fileinfo+0x120>
c0004a81:	83 fd 0b             	cmp    ebp,0xb
c0004a84:	74 25                	je     c0004aab <get_fileinfo+0x120>
c0004a86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a89:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a8d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a91:	e8 52 d0 ff ff       	call   c0001ae8 <dbc_2nd>
c0004a96:	85 c0                	test   eax,eax
c0004a98:	74 11                	je     c0004aab <get_fileinfo+0x120>
c0004a9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004aa3:	c1 e2 08             	shl    edx,0x8
c0004aa6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004aa9:	09 c2                	or     edx,eax
c0004aab:	0f b7 d2             	movzx  edx,dx
c0004aae:	50                   	push   eax
c0004aaf:	50                   	push   eax
c0004ab0:	68 b5 01 00 00       	push   0x1b5
c0004ab5:	52                   	push   edx
c0004ab6:	e8 46 38 00 00       	call   c0008301 <ff_oem2uni>
c0004abb:	83 c4 10             	add    esp,0x10
c0004abe:	66 85 c0             	test   ax,ax
c0004ac1:	75 04                	jne    c0004ac7 <get_fileinfo+0x13c>
c0004ac3:	31 ff                	xor    edi,edi
c0004ac5:	eb 23                	jmp    c0004aea <get_fileinfo+0x15f>
c0004ac7:	b9 0c 00 00 00       	mov    ecx,0xc
c0004acc:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ad0:	29 f9                	sub    ecx,edi
c0004ad2:	0f b7 c0             	movzx  eax,ax
c0004ad5:	e8 d7 d0 ff ff       	call   c0001bb1 <put_utf>
c0004ada:	84 c0                	test   al,al
c0004adc:	74 e5                	je     c0004ac3 <get_fileinfo+0x138>
c0004ade:	0f b6 c0             	movzx  eax,al
c0004ae1:	01 c7                	add    edi,eax
c0004ae3:	89 e9                	mov    ecx,ebp
c0004ae5:	e9 4a ff ff ff       	jmp    c0004a34 <get_fileinfo+0xa9>
c0004aea:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004aef:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004af3:	75 54                	jne    c0004b49 <get_fileinfo+0x1be>
c0004af5:	85 ff                	test   edi,edi
c0004af7:	75 0b                	jne    c0004b04 <get_fileinfo+0x179>
c0004af9:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004afd:	ba 01 00 00 00       	mov    edx,0x1
c0004b02:	eb 33                	jmp    c0004b37 <get_fileinfo+0x1ac>
c0004b04:	b1 08                	mov    cl,0x8
c0004b06:	31 d2                	xor    edx,edx
c0004b08:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b0e:	84 c0                	test   al,al
c0004b10:	74 25                	je     c0004b37 <get_fileinfo+0x1ac>
c0004b12:	66 83 f8 2e          	cmp    ax,0x2e
c0004b16:	74 16                	je     c0004b2e <get_fileinfo+0x1a3>
c0004b18:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b1b:	66 83 ff 19          	cmp    di,0x19
c0004b1f:	77 0f                	ja     c0004b30 <get_fileinfo+0x1a5>
c0004b21:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b24:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b27:	74 07                	je     c0004b30 <get_fileinfo+0x1a5>
c0004b29:	83 c0 20             	add    eax,0x20
c0004b2c:	eb 02                	jmp    c0004b30 <get_fileinfo+0x1a5>
c0004b2e:	b1 10                	mov    cl,0x10
c0004b30:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b34:	42                   	inc    edx
c0004b35:	eb d1                	jmp    c0004b08 <get_fileinfo+0x17d>
c0004b37:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b3c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b43:	75 04                	jne    c0004b49 <get_fileinfo+0x1be>
c0004b45:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b49:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b4c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b4f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b55:	83 c0 1c             	add    eax,0x1c
c0004b58:	e8 c1 ce ff ff       	call   c0001a1e <ld_dword>
c0004b5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b64:	89 03                	mov    DWORD PTR [ebx],eax
c0004b66:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b69:	83 c0 16             	add    eax,0x16
c0004b6c:	e8 a0 ce ff ff       	call   c0001a11 <ld_word>
c0004b71:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	83 c0 18             	add    eax,0x18
c0004b7b:	e8 91 ce ff ff       	call   c0001a11 <ld_word>
c0004b80:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b84:	83 c4 1c             	add    esp,0x1c
c0004b87:	5b                   	pop    ebx
c0004b88:	5e                   	pop    esi
c0004b89:	5f                   	pop    edi
c0004b8a:	5d                   	pop    ebp
c0004b8b:	c3                   	ret    

c0004b8c <ld_clust.isra.0>:
c0004b8c:	56                   	push   esi
c0004b8d:	89 c6                	mov    esi,eax
c0004b8f:	53                   	push   ebx
c0004b90:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b93:	89 d3                	mov    ebx,edx
c0004b95:	e8 77 ce ff ff       	call   c0001a11 <ld_word>
c0004b9a:	0f b7 c8             	movzx  ecx,ax
c0004b9d:	89 f0                	mov    eax,esi
c0004b9f:	3c 03                	cmp    al,0x3
c0004ba1:	75 0d                	jne    c0004bb0 <ld_clust.isra.0+0x24>
c0004ba3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ba6:	e8 66 ce ff ff       	call   c0001a11 <ld_word>
c0004bab:	c1 e0 10             	shl    eax,0x10
c0004bae:	09 c1                	or     ecx,eax
c0004bb0:	89 c8                	mov    eax,ecx
c0004bb2:	5b                   	pop    ebx
c0004bb3:	5e                   	pop    esi
c0004bb4:	c3                   	ret    

c0004bb5 <st_clust.isra.1>:
c0004bb5:	56                   	push   esi
c0004bb6:	89 c6                	mov    esi,eax
c0004bb8:	53                   	push   ebx
c0004bb9:	89 d3                	mov    ebx,edx
c0004bbb:	0f b7 d1             	movzx  edx,cx
c0004bbe:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bc1:	e8 bd ce ff ff       	call   c0001a83 <st_word>
c0004bc6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bc9:	75 0f                	jne    c0004bda <st_clust.isra.1+0x25>
c0004bcb:	c1 e9 10             	shr    ecx,0x10
c0004bce:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bd1:	89 ca                	mov    edx,ecx
c0004bd3:	5b                   	pop    ebx
c0004bd4:	5e                   	pop    esi
c0004bd5:	e9 a9 ce ff ff       	jmp    c0001a83 <st_word>
c0004bda:	5b                   	pop    ebx
c0004bdb:	5e                   	pop    esi
c0004bdc:	c3                   	ret    

c0004bdd <init_alloc_info.isra.2>:
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	89 c6                	mov    esi,eax
c0004be1:	89 d3                	mov    ebx,edx
c0004be3:	51                   	push   ecx
c0004be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0004be6:	83 c0 34             	add    eax,0x34
c0004be9:	e8 30 ce ff ff       	call   c0001a1e <ld_dword>
c0004bee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004bf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf3:	83 c0 38             	add    eax,0x38
c0004bf6:	e8 3b ce ff ff       	call   c0001a36 <ld_qword>
c0004bfb:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bfe:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c01:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c03:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c06:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c0d:	83 e0 02             	and    eax,0x2
c0004c10:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c13:	5b                   	pop    ebx
c0004c14:	5b                   	pop    ebx
c0004c15:	5e                   	pop    esi
c0004c16:	c3                   	ret    

c0004c17 <follow_path>:
c0004c17:	56                   	push   esi
c0004c18:	53                   	push   ebx
c0004c19:	89 c3                	mov    ebx,eax
c0004c1b:	83 ec 14             	sub    esp,0x14
c0004c1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c22:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c28:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c2a:	80 fa 5c             	cmp    dl,0x5c
c0004c2d:	75 07                	jne    c0004c36 <follow_path+0x1f>
c0004c2f:	40                   	inc    eax
c0004c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c34:	eb ee                	jmp    c0004c24 <follow_path+0xd>
c0004c36:	80 fa 2f             	cmp    dl,0x2f
c0004c39:	74 f4                	je     c0004c2f <follow_path+0x18>
c0004c3b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c42:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c49:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c4c:	77 52                	ja     c0004ca0 <follow_path+0x89>
c0004c4e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c52:	31 d2                	xor    edx,edx
c0004c54:	89 d8                	mov    eax,ebx
c0004c56:	e8 12 e3 ff ff       	call   c0002f6d <dir_sdi>
c0004c5b:	eb 7c                	jmp    c0004cd9 <follow_path+0xc2>
c0004c5d:	89 d8                	mov    eax,ebx
c0004c5f:	e8 6e f2 ff ff       	call   c0003ed2 <dir_find>
c0004c64:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c67:	85 c0                	test   eax,eax
c0004c69:	75 46                	jne    c0004cb1 <follow_path+0x9a>
c0004c6b:	80 e2 04             	and    dl,0x4
c0004c6e:	75 69                	jne    c0004cd9 <follow_path+0xc2>
c0004c70:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c74:	74 5e                	je     c0004cd4 <follow_path+0xbd>
c0004c76:	8a 06                	mov    al,BYTE PTR [esi]
c0004c78:	3c 04                	cmp    al,0x4
c0004c7a:	75 41                	jne    c0004cbd <follow_path+0xa6>
c0004c7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c7f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c83:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c86:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c89:	30 c0                	xor    al,al
c0004c8b:	09 d0                	or     eax,edx
c0004c8d:	89 da                	mov    edx,ebx
c0004c8f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c92:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c95:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c98:	8d 46 10             	lea    eax,[esi+0x10]
c0004c9b:	e8 3d ff ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ca0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ca4:	89 d8                	mov    eax,ebx
c0004ca6:	e8 a9 ed ff ff       	call   c0003a54 <create_name>
c0004cab:	85 c0                	test   eax,eax
c0004cad:	74 ae                	je     c0004c5d <follow_path+0x46>
c0004caf:	eb 28                	jmp    c0004cd9 <follow_path+0xc2>
c0004cb1:	83 f8 04             	cmp    eax,0x4
c0004cb4:	75 23                	jne    c0004cd9 <follow_path+0xc2>
c0004cb6:	80 e2 04             	and    dl,0x4
c0004cb9:	74 19                	je     c0004cd4 <follow_path+0xbd>
c0004cbb:	eb 1c                	jmp    c0004cd9 <follow_path+0xc2>
c0004cbd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cc0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cc6:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cca:	e8 bd fe ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cd2:	eb cc                	jmp    c0004ca0 <follow_path+0x89>
c0004cd4:	b8 05 00 00 00       	mov    eax,0x5
c0004cd9:	83 c4 14             	add    esp,0x14
c0004cdc:	5b                   	pop    ebx
c0004cdd:	5e                   	pop    esi
c0004cde:	c3                   	ret    

c0004cdf <f_mount>:
c0004cdf:	53                   	push   ebx
c0004ce0:	83 ec 18             	sub    esp,0x18
c0004ce3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004ce7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004ceb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004cf3:	e8 fb d2 ff ff       	call   c0001ff3 <get_ldnumber>
c0004cf8:	89 c2                	mov    edx,eax
c0004cfa:	b8 0b 00 00 00       	mov    eax,0xb
c0004cff:	85 d2                	test   edx,edx
c0004d01:	78 39                	js     c0004d3c <f_mount+0x5d>
c0004d03:	8b 04 95 e0 c7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3820]
c0004d0a:	85 c0                	test   eax,eax
c0004d0c:	74 03                	je     c0004d11 <f_mount+0x32>
c0004d0e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d15:	85 c0                	test   eax,eax
c0004d17:	74 03                	je     c0004d1c <f_mount+0x3d>
c0004d19:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d20:	89 04 95 e0 c7 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3820],eax
c0004d27:	31 c0                	xor    eax,eax
c0004d29:	84 db                	test   bl,bl
c0004d2b:	74 0f                	je     c0004d3c <f_mount+0x5d>
c0004d2d:	31 c9                	xor    ecx,ecx
c0004d2f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d37:	e8 65 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d3c:	83 c4 18             	add    esp,0x18
c0004d3f:	5b                   	pop    ebx
c0004d40:	c3                   	ret    

c0004d41 <f_open>:
c0004d41:	55                   	push   ebp
c0004d42:	bd 09 00 00 00       	mov    ebp,0x9
c0004d47:	57                   	push   edi
c0004d48:	56                   	push   esi
c0004d49:	53                   	push   ebx
c0004d4a:	83 ec 7c             	sub    esp,0x7c
c0004d4d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d54:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d5b:	85 db                	test   ebx,ebx
c0004d5d:	0f 84 10 04 00 00    	je     c0005173 <f_open+0x432>
c0004d63:	89 fe                	mov    esi,edi
c0004d65:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d69:	83 e6 3f             	and    esi,0x3f
c0004d6c:	89 f0                	mov    eax,esi
c0004d6e:	0f b6 c8             	movzx  ecx,al
c0004d71:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d78:	e8 24 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d7d:	89 c5                	mov    ebp,eax
c0004d7f:	85 c0                	test   eax,eax
c0004d81:	0f 85 e6 03 00 00    	jne    c000516d <f_open+0x42c>
c0004d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d8b:	bd 11 00 00 00       	mov    ebp,0x11
c0004d90:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d94:	83 ec 0c             	sub    esp,0xc
c0004d97:	68 60 04 00 00       	push   0x460
c0004d9c:	e8 a3 34 00 00       	call   c0008244 <ff_memalloc>
c0004da1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004da5:	83 c4 10             	add    esp,0x10
c0004da8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dad:	0f 84 c0 03 00 00    	je     c0005173 <f_open+0x432>
c0004db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004db7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dbb:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dc1:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004dc7:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dce:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dd2:	e8 40 fe ff ff       	call   c0004c17 <follow_path>
c0004dd7:	89 c5                	mov    ebp,eax
c0004dd9:	85 c0                	test   eax,eax
c0004ddb:	75 0c                	jne    c0004de9 <f_open+0xa8>
c0004ddd:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004de2:	79 05                	jns    c0004de9 <f_open+0xa8>
c0004de4:	bd 06 00 00 00       	mov    ebp,0x6
c0004de9:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004def:	0f 84 84 01 00 00    	je     c0004f79 <f_open+0x238>
c0004df5:	85 ed                	test   ebp,ebp
c0004df7:	74 20                	je     c0004e19 <f_open+0xd8>
c0004df9:	83 fd 04             	cmp    ebp,0x4
c0004dfc:	0f 85 58 03 00 00    	jne    c000515a <f_open+0x419>
c0004e02:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e06:	83 ce 08             	or     esi,0x8
c0004e09:	e8 8a f2 ff ff       	call   c0004098 <dir_register>
c0004e0e:	89 c5                	mov    ebp,eax
c0004e10:	85 c0                	test   eax,eax
c0004e12:	74 2f                	je     c0004e43 <f_open+0x102>
c0004e14:	e9 41 03 00 00       	jmp    c000515a <f_open+0x419>
c0004e19:	bd 07 00 00 00       	mov    ebp,0x7
c0004e1e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e23:	0f 85 31 03 00 00    	jne    c000515a <f_open+0x419>
c0004e29:	bd 08 00 00 00       	mov    ebp,0x8
c0004e2e:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e34:	0f 85 20 03 00 00    	jne    c000515a <f_open+0x419>
c0004e3a:	83 e7 08             	and    edi,0x8
c0004e3d:	0f 84 65 01 00 00    	je     c0004fa8 <f_open+0x267>
c0004e43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e47:	8a 02                	mov    al,BYTE PTR [edx]
c0004e49:	3c 04                	cmp    al,0x4
c0004e4b:	0f 85 97 00 00 00    	jne    c0004ee8 <f_open+0x1a7>
c0004e51:	8d 42 10             	lea    eax,[edx+0x10]
c0004e54:	89 13                	mov    DWORD PTR [ebx],edx
c0004e56:	89 da                	mov    edx,ebx
c0004e58:	e8 80 fd ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004e5d:	31 d2                	xor    edx,edx
c0004e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e63:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e6b:	83 c0 02             	add    eax,0x2
c0004e6e:	e8 32 cc ff ff       	call   c0001aa5 <mem_set>
c0004e73:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e78:	31 d2                	xor    edx,edx
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e81:	83 c0 26             	add    eax,0x26
c0004e84:	e8 1c cc ff ff       	call   c0001aa5 <mem_set>
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e90:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e94:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9c:	83 c0 08             	add    eax,0x8
c0004e9f:	e8 e3 cb ff ff       	call   c0001a87 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eab:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004eaf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eb3:	e8 b7 ea ff ff       	call   c000396f <store_xdir>
c0004eb8:	89 c5                	mov    ebp,eax
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 98 02 00 00    	jne    c000515a <f_open+0x419>
c0004ec2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ec5:	85 d2                	test   edx,edx
c0004ec7:	0f 84 db 00 00 00    	je     c0004fa8 <f_open+0x267>
c0004ecd:	31 c9                	xor    ecx,ecx
c0004ecf:	89 d8                	mov    eax,ebx
c0004ed1:	e8 8e e3 ff ff       	call   c0003264 <remove_chain>
c0004ed6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004eda:	89 c5                	mov    ebp,eax
c0004edc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004edf:	48                   	dec    eax
c0004ee0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ee3:	e9 b8 00 00 00       	jmp    c0004fa0 <f_open+0x25f>
c0004ee8:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004eec:	89 ea                	mov    edx,ebp
c0004eee:	e8 99 fc ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ef3:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ef8:	89 c7                	mov    edi,eax
c0004efa:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004efd:	e8 85 cb ff ff       	call   c0001a87 <st_dword>
c0004f02:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f10:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f14:	e8 9c fc ff ff       	call   c0004bb5 <st_clust.isra.1>
c0004f19:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f1d:	31 d2                	xor    edx,edx
c0004f1f:	83 c0 1c             	add    eax,0x1c
c0004f22:	e8 60 cb ff ff       	call   c0001a87 <st_dword>
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 ff                	test   edi,edi
c0004f2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f31:	74 75                	je     c0004fa8 <f_open+0x267>
c0004f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f37:	31 c9                	xor    ecx,ecx
c0004f39:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f3c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f47:	89 fa                	mov    edx,edi
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 12 e3 ff ff       	call   c0003264 <remove_chain>
c0004f52:	89 c5                	mov    ebp,eax
c0004f54:	85 c0                	test   eax,eax
c0004f56:	0f 85 fe 01 00 00    	jne    c000515a <f_open+0x419>
c0004f5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f68:	4f                   	dec    edi
c0004f69:	e8 81 d2 ff ff       	call   c00021ef <move_window>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f74:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f77:	eb 27                	jmp    c0004fa0 <f_open+0x25f>
c0004f79:	85 ed                	test   ebp,ebp
c0004f7b:	0f 85 d9 01 00 00    	jne    c000515a <f_open+0x419>
c0004f81:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f85:	bd 04 00 00 00       	mov    ebp,0x4
c0004f8a:	a8 10                	test   al,0x10
c0004f8c:	0f 85 c8 01 00 00    	jne    c000515a <f_open+0x419>
c0004f92:	83 e7 02             	and    edi,0x2
c0004f95:	74 11                	je     c0004fa8 <f_open+0x267>
c0004f97:	bd 07 00 00 00       	mov    ebp,0x7
c0004f9c:	a8 01                	test   al,0x1
c0004f9e:	eb 02                	jmp    c0004fa2 <f_open+0x261>
c0004fa0:	85 ed                	test   ebp,ebp
c0004fa2:	0f 85 b2 01 00 00    	jne    c000515a <f_open+0x419>
c0004fa8:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fae:	74 03                	je     c0004fb3 <f_open+0x272>
c0004fb0:	83 ce 40             	or     esi,0x40
c0004fb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fb7:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fba:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fbd:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fc0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fc3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fc7:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fca:	8a 02                	mov    al,BYTE PTR [edx]
c0004fcc:	3c 04                	cmp    al,0x4
c0004fce:	75 2a                	jne    c0004ffa <f_open+0x2b9>
c0004fd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fd4:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fd9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fe0:	30 c0                	xor    al,al
c0004fe2:	09 c8                	or     eax,ecx
c0004fe4:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fe7:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004feb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fee:	8d 42 10             	lea    eax,[edx+0x10]
c0004ff1:	89 da                	mov    edx,ebx
c0004ff3:	e8 e5 fb ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ff8:	eb 1c                	jmp    c0005016 <f_open+0x2d5>
c0004ffa:	89 fa                	mov    edx,edi
c0004ffc:	e8 8b fb ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005001:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005004:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005007:	e8 12 ca ff ff       	call   c0001a1e <ld_dword>
c000500c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005013:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000501a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005021:	89 03                	mov    DWORD PTR [ebx],eax
c0005023:	31 d2                	xor    edx,edx
c0005025:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005029:	b9 00 02 00 00       	mov    ecx,0x200
c000502e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005032:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005036:	89 f0                	mov    eax,esi
c0005038:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000503f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005042:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005049:	8d 43 50             	lea    eax,[ebx+0x50]
c000504c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005053:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000505a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000505e:	e8 42 ca ff ff       	call   c0001aa5 <mem_set>
c0005063:	83 e6 20             	and    esi,0x20
c0005066:	75 07                	jne    c000506f <f_open+0x32e>
c0005068:	31 ed                	xor    ebp,ebp
c000506a:	e9 eb 00 00 00       	jmp    c000515a <f_open+0x419>
c000506f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005072:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005075:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005079:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000507d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005081:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005085:	74 e1                	je     c0005068 <f_open+0x327>
c0005087:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000508b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000508f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005092:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005099:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000509c:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050a0:	31 ff                	xor    edi,edi
c00050a2:	c1 e5 09             	shl    ebp,0x9
c00050a5:	89 ee                	mov    esi,ebp
c00050a7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050ab:	89 f8                	mov    eax,edi
c00050ad:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050b1:	73 22                	jae    c00050d5 <f_open+0x394>
c00050b3:	89 d8                	mov    eax,ebx
c00050b5:	e8 bd dc ff ff       	call   c0002d77 <get_fat>
c00050ba:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050be:	89 c2                	mov    edx,eax
c00050c0:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050c4:	83 f8 01             	cmp    eax,0x1
c00050c7:	76 10                	jbe    c00050d9 <f_open+0x398>
c00050c9:	83 f8 ff             	cmp    eax,0xffffffff
c00050cc:	75 d9                	jne    c00050a7 <f_open+0x366>
c00050ce:	bd 01 00 00 00       	mov    ebp,0x1
c00050d3:	eb 09                	jmp    c00050de <f_open+0x39d>
c00050d5:	31 ed                	xor    ebp,ebp
c00050d7:	eb 05                	jmp    c00050de <f_open+0x39d>
c00050d9:	bd 02 00 00 00       	mov    ebp,0x2
c00050de:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050e1:	85 ed                	test   ebp,ebp
c00050e3:	75 75                	jne    c000515a <f_open+0x419>
c00050e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050e9:	25 ff 01 00 00       	and    eax,0x1ff
c00050ee:	0f 84 74 ff ff ff    	je     c0005068 <f_open+0x327>
c00050f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050f8:	bd 02 00 00 00       	mov    ebp,0x2
c00050fd:	89 c8                	mov    eax,ecx
c00050ff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005103:	e8 a2 cb ff ff       	call   c0001caa <clst2sect>
c0005108:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000510c:	89 d7                	mov    edi,edx
c000510e:	09 c7                	or     edi,eax
c0005110:	74 48                	je     c000515a <f_open+0x419>
c0005112:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005116:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000511a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005122:	0f ac fe 09          	shrd   esi,edi,0x9
c0005126:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000512a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000512e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005131:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005135:	83 ec 0c             	sub    esp,0xc
c0005138:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000513b:	6a 01                	push   0x1
c000513d:	52                   	push   edx
c000513e:	50                   	push   eax
c000513f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005143:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005147:	50                   	push   eax
c0005148:	e8 79 c8 ff ff       	call   c00019c6 <disk_read>
c000514d:	83 c4 20             	add    esp,0x20
c0005150:	85 c0                	test   eax,eax
c0005152:	0f 95 c0             	setne  al
c0005155:	0f b6 c0             	movzx  eax,al
c0005158:	89 c5                	mov    ebp,eax
c000515a:	83 ec 0c             	sub    esp,0xc
c000515d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005161:	e8 f4 30 00 00       	call   c000825a <ff_memfree>
c0005166:	83 c4 10             	add    esp,0x10
c0005169:	85 ed                	test   ebp,ebp
c000516b:	74 06                	je     c0005173 <f_open+0x432>
c000516d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005173:	83 c4 7c             	add    esp,0x7c
c0005176:	89 e8                	mov    eax,ebp
c0005178:	5b                   	pop    ebx
c0005179:	5e                   	pop    esi
c000517a:	5f                   	pop    edi
c000517b:	5d                   	pop    ebp
c000517c:	c3                   	ret    

c000517d <f_read>:
c000517d:	55                   	push   ebp
c000517e:	57                   	push   edi
c000517f:	56                   	push   esi
c0005180:	53                   	push   ebx
c0005181:	83 ec 2c             	sub    esp,0x2c
c0005184:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005188:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000518c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005192:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005196:	89 d8                	mov    eax,ebx
c0005198:	e8 77 cf ff ff       	call   c0002114 <validate>
c000519d:	89 c5                	mov    ebp,eax
c000519f:	85 c0                	test   eax,eax
c00051a1:	0f 85 4c 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051a7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051ab:	85 ed                	test   ebp,ebp
c00051ad:	0f 85 40 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051b3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051b7:	0f 84 31 02 00 00    	je     c00053ee <f_read+0x271>
c00051bd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051c0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051c3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051c6:	bf 00 00 00 00       	mov    edi,0x0
c00051cb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ce:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051d2:	89 d1                	mov    ecx,edx
c00051d4:	19 f9                	sbb    ecx,edi
c00051d6:	0f 83 cf 00 00 00    	jae    c00052ab <f_read+0x12e>
c00051dc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051e0:	e9 c6 00 00 00       	jmp    c00052ab <f_read+0x12e>
c00051e5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051e8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051eb:	89 d0                	mov    eax,edx
c00051ed:	25 ff 01 00 00       	and    eax,0x1ff
c00051f2:	0f 85 c9 01 00 00    	jne    c00053c1 <f_read+0x244>
c00051f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051fc:	89 d6                	mov    esi,edx
c00051fe:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005202:	89 cf                	mov    edi,ecx
c0005204:	48                   	dec    eax
c0005205:	0f ac fe 09          	shrd   esi,edi,0x9
c0005209:	21 f0                	and    eax,esi
c000520b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000520f:	0f 84 a6 00 00 00    	je     c00052bb <f_read+0x13e>
c0005215:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005219:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000521c:	89 c8                	mov    eax,ecx
c000521e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005221:	e8 84 ca ff ff       	call   c0001caa <clst2sect>
c0005226:	89 d7                	mov    edi,edx
c0005228:	09 c7                	or     edi,eax
c000522a:	0f 84 b4 00 00 00    	je     c00052e4 <f_read+0x167>
c0005230:	31 ff                	xor    edi,edi
c0005232:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005236:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005239:	01 c6                	add    esi,eax
c000523b:	11 d7                	adc    edi,edx
c000523d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005245:	0f 86 fd 00 00 00    	jbe    c0005348 <f_read+0x1cb>
c000524b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000524f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005253:	c1 e8 09             	shr    eax,0x9
c0005256:	89 04 24             	mov    DWORD PTR [esp],eax
c0005259:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000525d:	03 14 24             	add    edx,DWORD PTR [esp]
c0005260:	39 c2                	cmp    edx,eax
c0005262:	76 07                	jbe    c000526b <f_read+0xee>
c0005264:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005268:	89 04 24             	mov    DWORD PTR [esp],eax
c000526b:	83 ec 0c             	sub    esp,0xc
c000526e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005272:	57                   	push   edi
c0005273:	56                   	push   esi
c0005274:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005278:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000527c:	50                   	push   eax
c000527d:	e8 44 c7 ff ff       	call   c00019c6 <disk_read>
c0005282:	83 c4 20             	add    esp,0x20
c0005285:	85 c0                	test   eax,eax
c0005287:	75 6e                	jne    c00052f7 <f_read+0x17a>
c0005289:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000528d:	78 7e                	js     c000530d <f_read+0x190>
c000528f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005292:	c1 e6 09             	shl    esi,0x9
c0005295:	31 ff                	xor    edi,edi
c0005297:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000529b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000529f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052a3:	01 30                	add    DWORD PTR [eax],esi
c00052a5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052a8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052ab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052b0:	0f 85 2f ff ff ff    	jne    c00051e5 <f_read+0x68>
c00052b6:	e9 38 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052bb:	89 c8                	mov    eax,ecx
c00052bd:	09 d0                	or     eax,edx
c00052bf:	75 05                	jne    c00052c6 <f_read+0x149>
c00052c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052c4:	eb 19                	jmp    c00052df <f_read+0x162>
c00052c6:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052ca:	74 09                	je     c00052d5 <f_read+0x158>
c00052cc:	89 d8                	mov    eax,ebx
c00052ce:	e8 f8 c9 ff ff       	call   c0001ccb <clmt_clust>
c00052d3:	eb 0a                	jmp    c00052df <f_read+0x162>
c00052d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 98 da ff ff       	call   c0002d77 <get_fat>
c00052df:	83 f8 01             	cmp    eax,0x1
c00052e2:	77 0e                	ja     c00052f2 <f_read+0x175>
c00052e4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052e8:	bd 02 00 00 00       	mov    ebp,0x2
c00052ed:	e9 01 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052f2:	83 f8 ff             	cmp    eax,0xffffffff
c00052f5:	75 0e                	jne    c0005305 <f_read+0x188>
c00052f7:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052fb:	bd 01 00 00 00       	mov    ebp,0x1
c0005300:	e9 ee 00 00 00       	jmp    c00053f3 <f_read+0x276>
c0005305:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005308:	e9 08 ff ff ff       	jmp    c0005215 <f_read+0x98>
c000530d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005310:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005313:	29 f0                	sub    eax,esi
c0005315:	19 fa                	sbb    edx,edi
c0005317:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000531a:	89 d7                	mov    edi,edx
c000531c:	ba 00 00 00 00       	mov    edx,0x0
c0005321:	89 f9                	mov    ecx,edi
c0005323:	19 d1                	sbb    ecx,edx
c0005325:	0f 83 64 ff ff ff    	jae    c000528f <f_read+0x112>
c000532b:	89 c7                	mov    edi,eax
c000532d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005337:	b9 00 02 00 00       	mov    ecx,0x200
c000533c:	01 f8                	add    eax,edi
c000533e:	e8 4d c7 ff ff       	call   c0001a90 <mem_cpy>
c0005343:	e9 47 ff ff ff       	jmp    c000528f <f_read+0x112>
c0005348:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000534b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005351:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005355:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005359:	75 05                	jne    c0005360 <f_read+0x1e3>
c000535b:	39 34 24             	cmp    DWORD PTR [esp],esi
c000535e:	74 5b                	je     c00053bb <f_read+0x23e>
c0005360:	8d 43 50             	lea    eax,[ebx+0x50]
c0005363:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000536b:	79 2a                	jns    c0005397 <f_read+0x21a>
c000536d:	83 ec 0c             	sub    esp,0xc
c0005370:	6a 01                	push   0x1
c0005372:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000537a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000537e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005382:	50                   	push   eax
c0005383:	e8 54 c6 ff ff       	call   c00019dc <disk_write>
c0005388:	83 c4 20             	add    esp,0x20
c000538b:	85 c0                	test   eax,eax
c000538d:	0f 85 64 ff ff ff    	jne    c00052f7 <f_read+0x17a>
c0005393:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005397:	83 ec 0c             	sub    esp,0xc
c000539a:	6a 01                	push   0x1
c000539c:	57                   	push   edi
c000539d:	56                   	push   esi
c000539e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053aa:	50                   	push   eax
c00053ab:	e8 16 c6 ff ff       	call   c00019c6 <disk_read>
c00053b0:	83 c4 20             	add    esp,0x20
c00053b3:	85 c0                	test   eax,eax
c00053b5:	0f 85 3c ff ff ff    	jne    c00052f7 <f_read+0x17a>
c00053bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053c4:	ba 00 02 00 00       	mov    edx,0x200
c00053c9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053d2:	29 c2                	sub    edx,eax
c00053d4:	39 d6                	cmp    esi,edx
c00053d6:	76 02                	jbe    c00053da <f_read+0x25d>
c00053d8:	89 d6                	mov    esi,edx
c00053da:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053de:	89 f1                	mov    ecx,esi
c00053e0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e4:	e8 a7 c6 ff ff       	call   c0001a90 <mem_cpy>
c00053e9:	e9 a7 fe ff ff       	jmp    c0005295 <f_read+0x118>
c00053ee:	bd 07 00 00 00       	mov    ebp,0x7
c00053f3:	83 c4 2c             	add    esp,0x2c
c00053f6:	89 e8                	mov    eax,ebp
c00053f8:	5b                   	pop    ebx
c00053f9:	5e                   	pop    esi
c00053fa:	5f                   	pop    edi
c00053fb:	5d                   	pop    ebp
c00053fc:	c3                   	ret    

c00053fd <f_write>:
c00053fd:	55                   	push   ebp
c00053fe:	57                   	push   edi
c00053ff:	56                   	push   esi
c0005400:	53                   	push   ebx
c0005401:	83 ec 2c             	sub    esp,0x2c
c0005404:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005408:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000540c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005412:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f7 cc ff ff       	call   c0002114 <validate>
c000541d:	89 c5                	mov    ebp,eax
c000541f:	85 c0                	test   eax,eax
c0005421:	0f 85 86 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005427:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000542b:	85 ed                	test   ebp,ebp
c000542d:	0f 85 7a 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005433:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005437:	0f 84 6b 02 00 00    	je     c00056a8 <f_write+0x2ab>
c000543d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005441:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005444:	0f 84 43 01 00 00    	je     c000558d <f_write+0x190>
c000544a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000544d:	89 c1                	mov    ecx,eax
c000544f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005453:	0f 83 34 01 00 00    	jae    c000558d <f_write+0x190>
c0005459:	f7 d0                	not    eax
c000545b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000545f:	e9 29 01 00 00       	jmp    c000558d <f_write+0x190>
c0005464:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005467:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000546a:	89 d0                	mov    eax,edx
c000546c:	25 ff 01 00 00       	and    eax,0x1ff
c0005471:	0f 85 00 02 00 00    	jne    c0005677 <f_write+0x27a>
c0005477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547b:	89 d6                	mov    esi,edx
c000547d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005481:	89 cf                	mov    edi,ecx
c0005483:	48                   	dec    eax
c0005484:	0f ac fe 09          	shrd   esi,edi,0x9
c0005488:	21 f0                	and    eax,esi
c000548a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000548e:	0f 84 06 01 00 00    	je     c000559a <f_write+0x19d>
c0005494:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005498:	0f 88 6e 01 00 00    	js     c000560c <f_write+0x20f>
c000549e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054a2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054a5:	89 c8                	mov    eax,ecx
c00054a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054ab:	e8 fa c7 ff ff       	call   c0001caa <clst2sect>
c00054b0:	89 d1                	mov    ecx,edx
c00054b2:	09 c1                	or     ecx,eax
c00054b4:	0f 84 1c 01 00 00    	je     c00055d6 <f_write+0x1d9>
c00054ba:	31 ff                	xor    edi,edi
c00054bc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054c4:	01 c6                	add    esi,eax
c00054c6:	11 d7                	adc    edi,edx
c00054c8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054d0:	0f 86 63 01 00 00    	jbe    c0005639 <f_write+0x23c>
c00054d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054de:	c1 e8 09             	shr    eax,0x9
c00054e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054e5:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054e9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054ed:	39 c2                	cmp    edx,eax
c00054ef:	76 08                	jbe    c00054f9 <f_write+0xfc>
c00054f1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054f9:	83 ec 0c             	sub    esp,0xc
c00054fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005500:	57                   	push   edi
c0005501:	56                   	push   esi
c0005502:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005506:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000550a:	50                   	push   eax
c000550b:	e8 cc c4 ff ff       	call   c00019dc <disk_write>
c0005510:	83 c4 20             	add    esp,0x20
c0005513:	85 c0                	test   eax,eax
c0005515:	0f 85 ce 00 00 00    	jne    c00055e9 <f_write+0x1ec>
c000551b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000551e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005521:	29 f0                	sub    eax,esi
c0005523:	19 fa                	sbb    edx,edi
c0005525:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005529:	89 d7                	mov    edi,edx
c000552b:	ba 00 00 00 00       	mov    edx,0x0
c0005530:	89 f9                	mov    ecx,edi
c0005532:	19 d1                	sbb    ecx,edx
c0005534:	73 1c                	jae    c0005552 <f_write+0x155>
c0005536:	89 c7                	mov    edi,eax
c0005538:	b9 00 02 00 00       	mov    ecx,0x200
c000553d:	c1 e7 09             	shl    edi,0x9
c0005540:	8d 43 50             	lea    eax,[ebx+0x50]
c0005543:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005547:	89 fa                	mov    edx,edi
c0005549:	e8 42 c5 ff ff       	call   c0001a90 <mem_cpy>
c000554e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005552:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005556:	c1 e6 09             	shl    esi,0x9
c0005559:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000555d:	31 ff                	xor    edi,edi
c000555f:	01 30                	add    DWORD PTR [eax],esi
c0005561:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005565:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005569:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000556c:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000556f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005572:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005575:	89 c1                	mov    ecx,eax
c0005577:	39 f2                	cmp    edx,esi
c0005579:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000557c:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000557f:	19 f9                	sbb    ecx,edi
c0005581:	73 04                	jae    c0005587 <f_write+0x18a>
c0005583:	89 f2                	mov    edx,esi
c0005585:	89 f8                	mov    eax,edi
c0005587:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000558a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000558d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005592:	0f 85 cc fe ff ff    	jne    c0005464 <f_write+0x67>
c0005598:	eb 2e                	jmp    c00055c8 <f_write+0x1cb>
c000559a:	89 c8                	mov    eax,ecx
c000559c:	09 d0                	or     eax,edx
c000559e:	75 0b                	jne    c00055ab <f_write+0x1ae>
c00055a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055a3:	31 d2                	xor    edx,edx
c00055a5:	85 c0                	test   eax,eax
c00055a7:	75 28                	jne    c00055d1 <f_write+0x1d4>
c00055a9:	eb 12                	jmp    c00055bd <f_write+0x1c0>
c00055ab:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055af:	74 09                	je     c00055ba <f_write+0x1bd>
c00055b1:	89 d8                	mov    eax,ebx
c00055b3:	e8 13 c7 ff ff       	call   c0001ccb <clmt_clust>
c00055b8:	eb 0a                	jmp    c00055c4 <f_write+0x1c7>
c00055ba:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055bd:	89 d8                	mov    eax,ebx
c00055bf:	e8 a1 da ff ff       	call   c0003065 <create_chain>
c00055c4:	85 c0                	test   eax,eax
c00055c6:	75 09                	jne    c00055d1 <f_write+0x1d4>
c00055c8:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055cc:	e9 dc 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055d1:	83 f8 01             	cmp    eax,0x1
c00055d4:	75 0e                	jne    c00055e4 <f_write+0x1e7>
c00055d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055da:	bd 02 00 00 00       	mov    ebp,0x2
c00055df:	e9 c9 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055e4:	83 f8 ff             	cmp    eax,0xffffffff
c00055e7:	75 0e                	jne    c00055f7 <f_write+0x1fa>
c00055e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055ed:	bd 01 00 00 00       	mov    ebp,0x1
c00055f2:	e9 b6 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055fa:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055fe:	0f 85 90 fe ff ff    	jne    c0005494 <f_write+0x97>
c0005604:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005607:	e9 88 fe ff ff       	jmp    c0005494 <f_write+0x97>
c000560c:	83 ec 0c             	sub    esp,0xc
c000560f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005612:	6a 01                	push   0x1
c0005614:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005617:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000561a:	50                   	push   eax
c000561b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000561f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005623:	50                   	push   eax
c0005624:	e8 b3 c3 ff ff       	call   c00019dc <disk_write>
c0005629:	83 c4 20             	add    esp,0x20
c000562c:	85 c0                	test   eax,eax
c000562e:	75 b9                	jne    c00055e9 <f_write+0x1ec>
c0005630:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005634:	e9 65 fe ff ff       	jmp    c000549e <f_write+0xa1>
c0005639:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000563c:	75 05                	jne    c0005643 <f_write+0x246>
c000563e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005641:	74 2e                	je     c0005671 <f_write+0x274>
c0005643:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005646:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005649:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000564c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000564f:	73 20                	jae    c0005671 <f_write+0x274>
c0005651:	83 ec 0c             	sub    esp,0xc
c0005654:	8d 43 50             	lea    eax,[ebx+0x50]
c0005657:	6a 01                	push   0x1
c0005659:	57                   	push   edi
c000565a:	56                   	push   esi
c000565b:	50                   	push   eax
c000565c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005660:	50                   	push   eax
c0005661:	e8 60 c3 ff ff       	call   c00019c6 <disk_read>
c0005666:	83 c4 20             	add    esp,0x20
c0005669:	85 c0                	test   eax,eax
c000566b:	0f 85 78 ff ff ff    	jne    c00055e9 <f_write+0x1ec>
c0005671:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005674:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005677:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567a:	ba 00 02 00 00       	mov    edx,0x200
c000567f:	25 ff 01 00 00       	and    eax,0x1ff
c0005684:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005688:	29 c2                	sub    edx,eax
c000568a:	39 d6                	cmp    esi,edx
c000568c:	76 02                	jbe    c0005690 <f_write+0x293>
c000568e:	89 d6                	mov    esi,edx
c0005690:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005694:	89 f1                	mov    ecx,esi
c0005696:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000569a:	e8 f1 c3 ff ff       	call   c0001a90 <mem_cpy>
c000569f:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056a3:	e9 b1 fe ff ff       	jmp    c0005559 <f_write+0x15c>
c00056a8:	bd 07 00 00 00       	mov    ebp,0x7
c00056ad:	83 c4 2c             	add    esp,0x2c
c00056b0:	89 e8                	mov    eax,ebp
c00056b2:	5b                   	pop    ebx
c00056b3:	5e                   	pop    esi
c00056b4:	5f                   	pop    edi
c00056b5:	5d                   	pop    ebp
c00056b6:	c3                   	ret    

c00056b7 <f_sync>:
c00056b7:	56                   	push   esi
c00056b8:	53                   	push   ebx
c00056b9:	83 ec 64             	sub    esp,0x64
c00056bc:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056c0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056c4:	89 d8                	mov    eax,ebx
c00056c6:	e8 49 ca ff ff       	call   c0002114 <validate>
c00056cb:	85 c0                	test   eax,eax
c00056cd:	0f 85 ba 01 00 00    	jne    c000588d <f_sync+0x1d6>
c00056d3:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056d6:	f6 c2 40             	test   dl,0x40
c00056d9:	0f 84 ae 01 00 00    	je     c000588d <f_sync+0x1d6>
c00056df:	84 d2                	test   dl,dl
c00056e1:	79 33                	jns    c0005716 <f_sync+0x5f>
c00056e3:	83 ec 0c             	sub    esp,0xc
c00056e6:	8d 43 50             	lea    eax,[ebx+0x50]
c00056e9:	6a 01                	push   0x1
c00056eb:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056ee:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056f1:	50                   	push   eax
c00056f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056fa:	50                   	push   eax
c00056fb:	e8 dc c2 ff ff       	call   c00019dc <disk_write>
c0005700:	83 c4 20             	add    esp,0x20
c0005703:	89 c2                	mov    edx,eax
c0005705:	b8 01 00 00 00       	mov    eax,0x1
c000570a:	85 d2                	test   edx,edx
c000570c:	0f 85 7b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005712:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000571a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000571d:	0f 85 11 01 00 00    	jne    c0005834 <f_sync+0x17d>
c0005723:	89 d8                	mov    eax,ebx
c0005725:	e8 13 d6 ff ff       	call   c0002d3d <fill_first_frag>
c000572a:	85 c0                	test   eax,eax
c000572c:	0f 85 5b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005732:	83 c9 ff             	or     ecx,0xffffffff
c0005735:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005738:	89 d8                	mov    eax,ebx
c000573a:	e8 c9 d5 ff ff       	call   c0002d08 <fill_last_frag>
c000573f:	85 c0                	test   eax,eax
c0005741:	0f 85 46 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005747:	83 ec 0c             	sub    esp,0xc
c000574a:	68 60 04 00 00       	push   0x460
c000574f:	e8 f0 2a 00 00       	call   c0008244 <ff_memalloc>
c0005754:	83 c4 10             	add    esp,0x10
c0005757:	89 c6                	mov    esi,eax
c0005759:	b8 11 00 00 00       	mov    eax,0x11
c000575e:	85 f6                	test   esi,esi
c0005760:	0f 84 27 01 00 00    	je     c000588d <f_sync+0x1d6>
c0005766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005770:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005773:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005776:	89 da                	mov    edx,ebx
c0005778:	8d 44 24 14          	lea    eax,[esp+0x14]
c000577c:	e8 af df ff ff       	call   c0003730 <load_obj_xdir>
c0005781:	85 c0                	test   eax,eax
c0005783:	0f 85 95 00 00 00    	jne    c000581e <f_sync+0x167>
c0005789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000578d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005790:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005794:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005797:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000579a:	83 ca 01             	or     edx,0x1
c000579d:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057a0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057a6:	83 c0 34             	add    eax,0x34
c00057a9:	e8 d9 c2 ff ff       	call   c0001a87 <st_dword>
c00057ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057b8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057bb:	83 c0 38             	add    eax,0x38
c00057be:	e8 c7 c2 ff ff       	call   c0001a8a <st_qword>
c00057c3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d0:	83 c0 28             	add    eax,0x28
c00057d3:	e8 b2 c2 ff ff       	call   c0001a8a <st_qword>
c00057d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057dc:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e4:	83 c0 0c             	add    eax,0xc
c00057e7:	e8 9b c2 ff ff       	call   c0001a87 <st_dword>
c00057ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057f3:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057f7:	31 d2                	xor    edx,edx
c00057f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fc:	83 c0 10             	add    eax,0x10
c00057ff:	e8 83 c2 ff ff       	call   c0001a87 <st_dword>
c0005804:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005808:	e8 62 e1 ff ff       	call   c000396f <store_xdir>
c000580d:	85 c0                	test   eax,eax
c000580f:	75 0d                	jne    c000581e <f_sync+0x167>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	e8 00 eb ff ff       	call   c000431a <sync_fs>
c000581a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000581e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	56                   	push   esi
c0005826:	e8 2f 2a 00 00       	call   c000825a <ff_memfree>
c000582b:	83 c4 10             	add    esp,0x10
c000582e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005832:	eb 59                	jmp    c000588d <f_sync+0x1d6>
c0005834:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005837:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000583a:	e8 b0 c9 ff ff       	call   c00021ef <move_window>
c000583f:	85 c0                	test   eax,eax
c0005841:	75 4a                	jne    c000588d <f_sync+0x1d6>
c0005843:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005846:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000584a:	89 f2                	mov    edx,esi
c000584c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000584f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005851:	e8 5f f3 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0005856:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005859:	8d 46 1c             	lea    eax,[esi+0x1c]
c000585c:	e8 26 c2 ff ff       	call   c0001a87 <st_dword>
c0005861:	8d 46 16             	lea    eax,[esi+0x16]
c0005864:	ba 00 00 21 50       	mov    edx,0x50210000
c0005869:	e8 19 c2 ff ff       	call   c0001a87 <st_dword>
c000586e:	8d 46 12             	lea    eax,[esi+0x12]
c0005871:	31 d2                	xor    edx,edx
c0005873:	e8 0b c2 ff ff       	call   c0001a83 <st_word>
c0005878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000587c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005884:	e8 91 ea ff ff       	call   c000431a <sync_fs>
c0005889:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000588d:	83 c4 64             	add    esp,0x64
c0005890:	5b                   	pop    ebx
c0005891:	5e                   	pop    esi
c0005892:	c3                   	ret    

c0005893 <f_close>:
c0005893:	53                   	push   ebx
c0005894:	83 ec 24             	sub    esp,0x24
c0005897:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000589b:	53                   	push   ebx
c000589c:	e8 16 fe ff ff       	call   c00056b7 <f_sync>
c00058a1:	83 c4 10             	add    esp,0x10
c00058a4:	85 c0                	test   eax,eax
c00058a6:	75 15                	jne    c00058bd <f_close+0x2a>
c00058a8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058ac:	89 d8                	mov    eax,ebx
c00058ae:	e8 61 c8 ff ff       	call   c0002114 <validate>
c00058b3:	85 c0                	test   eax,eax
c00058b5:	75 06                	jne    c00058bd <f_close+0x2a>
c00058b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058bd:	83 c4 18             	add    esp,0x18
c00058c0:	5b                   	pop    ebx
c00058c1:	c3                   	ret    

c00058c2 <f_lseek>:
c00058c2:	55                   	push   ebp
c00058c3:	57                   	push   edi
c00058c4:	56                   	push   esi
c00058c5:	53                   	push   ebx
c00058c6:	83 ec 3c             	sub    esp,0x3c
c00058c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058cd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058d1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00058d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058dc:	89 d8                	mov    eax,ebx
c00058de:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058e2:	e8 2d c8 ff ff       	call   c0002114 <validate>
c00058e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058eb:	85 c0                	test   eax,eax
c00058ed:	0f 85 7a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c00058f3:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058fb:	85 c0                	test   eax,eax
c00058fd:	0f 85 6a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c0005903:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005907:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000590a:	74 0c                	je     c0005918 <f_lseek+0x56>
c000590c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000590f:	85 c0                	test   eax,eax
c0005911:	75 1f                	jne    c0005932 <f_lseek+0x70>
c0005913:	e9 b5 01 00 00       	jmp    c0005acd <f_lseek+0x20b>
c0005918:	83 c9 ff             	or     ecx,0xffffffff
c000591b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000591e:	89 d8                	mov    eax,ebx
c0005920:	e8 e3 d3 ff ff       	call   c0002d08 <fill_last_frag>
c0005925:	85 c0                	test   eax,eax
c0005927:	74 e3                	je     c000590c <f_lseek+0x4a>
c0005929:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000592d:	e9 3b 04 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c0005932:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005937:	0f 85 ac 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c000593d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005941:	0f 85 a2 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c0005947:	8d 78 04             	lea    edi,[eax+0x4]
c000594a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000594d:	8b 00                	mov    eax,DWORD PTR [eax]
c000594f:	be 02 00 00 00       	mov    esi,0x2
c0005954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005958:	85 ed                	test   ebp,ebp
c000595a:	74 73                	je     c00059cf <f_lseek+0x10d>
c000595c:	89 e9                	mov    ecx,ebp
c000595e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005965:	ff 04 24             	inc    DWORD PTR [esp]
c0005968:	89 ca                	mov    edx,ecx
c000596a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000596e:	89 d8                	mov    eax,ebx
c0005970:	e8 02 d4 ff ff       	call   c0002d77 <get_fat>
c0005975:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005979:	83 f8 01             	cmp    eax,0x1
c000597c:	77 11                	ja     c000598f <f_lseek+0xcd>
c000597e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005982:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000598a:	e9 de 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c000598f:	83 f8 ff             	cmp    eax,0xffffffff
c0005992:	75 11                	jne    c00059a5 <f_lseek+0xe3>
c0005994:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005998:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059a0:	e9 c8 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059a5:	8d 51 01             	lea    edx,[ecx+0x1]
c00059a8:	89 c1                	mov    ecx,eax
c00059aa:	39 c2                	cmp    edx,eax
c00059ac:	74 b7                	je     c0005965 <f_lseek+0xa3>
c00059ae:	83 c6 02             	add    esi,0x2
c00059b1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059b5:	72 0b                	jb     c00059c2 <f_lseek+0x100>
c00059b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ba:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059bd:	89 0f                	mov    DWORD PTR [edi],ecx
c00059bf:	83 c7 08             	add    edi,0x8
c00059c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059c6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059c9:	76 04                	jbe    c00059cf <f_lseek+0x10d>
c00059cb:	89 c5                	mov    ebp,eax
c00059cd:	eb 8d                	jmp    c000595c <f_lseek+0x9a>
c00059cf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059d2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059d6:	89 30                	mov    DWORD PTR [eax],esi
c00059d8:	0f 87 87 03 00 00    	ja     c0005d65 <f_lseek+0x4a3>
c00059de:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059e4:	e9 84 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059e9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059ec:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059fb:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a02:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a06:	73 0f                	jae    c0005a17 <f_lseek+0x155>
c0005a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a1f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a22:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a29:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a2d:	0f 84 3a 03 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a33:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a37:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a3b:	83 c6 ff             	add    esi,0xffffffff
c0005a3e:	89 d8                	mov    eax,ebx
c0005a40:	83 d7 ff             	adc    edi,0xffffffff
c0005a43:	89 f2                	mov    edx,esi
c0005a45:	89 f9                	mov    ecx,edi
c0005a47:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a4e:	e8 78 c2 ff ff       	call   c0001ccb <clmt_clust>
c0005a53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a57:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a5a:	89 c2                	mov    edx,eax
c0005a5c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a60:	89 c8                	mov    eax,ecx
c0005a62:	e8 43 c2 ff ff       	call   c0001caa <clst2sect>
c0005a67:	89 d7                	mov    edi,edx
c0005a69:	09 c7                	or     edi,eax
c0005a6b:	0f 84 0d ff ff ff    	je     c000597e <f_lseek+0xbc>
c0005a71:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a75:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a7b:	0f 84 ec 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a81:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a89:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a8c:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a90:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a94:	4d                   	dec    ebp
c0005a95:	31 ff                	xor    edi,edi
c0005a97:	21 ee                	and    esi,ebp
c0005a99:	01 c6                	add    esi,eax
c0005a9b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a9e:	11 d7                	adc    edi,edx
c0005aa0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005aa3:	39 fa                	cmp    edx,edi
c0005aa5:	75 08                	jne    c0005aaf <f_lseek+0x1ed>
c0005aa7:	39 f0                	cmp    eax,esi
c0005aa9:	0f 84 be 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005aaf:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ab2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ab6:	0f 89 80 02 00 00    	jns    c0005d3c <f_lseek+0x47a>
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	6a 01                	push   0x1
c0005ac1:	52                   	push   edx
c0005ac2:	50                   	push   eax
c0005ac3:	55                   	push   ebp
c0005ac4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ac8:	e9 5a 02 00 00       	jmp    c0005d27 <f_lseek+0x465>
c0005acd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ad1:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ad4:	74 16                	je     c0005aec <f_lseek+0x22a>
c0005ad6:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005adb:	76 0f                	jbe    c0005aec <f_lseek+0x22a>
c0005add:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ae4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005aec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005af2:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005af5:	89 c7                	mov    edi,eax
c0005af7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005afb:	73 0d                	jae    c0005b0a <f_lseek+0x248>
c0005afd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b01:	75 07                	jne    c0005b0a <f_lseek+0x248>
c0005b03:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b0a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b0d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b10:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b14:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b1b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b22:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b25:	75 09                	jne    c0005b30 <f_lseek+0x26e>
c0005b27:	31 f6                	xor    esi,esi
c0005b29:	31 ff                	xor    edi,edi
c0005b2b:	e9 af 01 00 00       	jmp    c0005cdf <f_lseek+0x41d>
c0005b30:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b34:	89 d7                	mov    edi,edx
c0005b36:	c1 e1 09             	shl    ecx,0x9
c0005b39:	09 c7                	or     edi,eax
c0005b3b:	89 cd                	mov    ebp,ecx
c0005b3d:	74 6d                	je     c0005bac <f_lseek+0x2ea>
c0005b3f:	83 c0 ff             	add    eax,0xffffffff
c0005b42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b46:	83 d2 ff             	adc    edx,0xffffffff
c0005b49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b50:	83 c0 ff             	add    eax,0xffffffff
c0005b53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b57:	83 d2 ff             	adc    edx,0xffffffff
c0005b5a:	31 ff                	xor    edi,edi
c0005b5c:	57                   	push   edi
c0005b5d:	51                   	push   ecx
c0005b5e:	52                   	push   edx
c0005b5f:	50                   	push   eax
c0005b60:	e8 57 f7 01 00       	call   c00252bc <__udivdi3>
c0005b65:	83 c4 10             	add    esp,0x10
c0005b68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b70:	57                   	push   edi
c0005b71:	55                   	push   ebp
c0005b72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b7a:	e8 3d f7 01 00       	call   c00252bc <__udivdi3>
c0005b7f:	83 c4 10             	add    esp,0x10
c0005b82:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b8a:	19 d1                	sbb    ecx,edx
c0005b8c:	72 1e                	jb     c0005bac <f_lseek+0x2ea>
c0005b8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b92:	89 e9                	mov    ecx,ebp
c0005b94:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b97:	f7 d9                	neg    ecx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ba0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ba3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ba6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005baa:	eb 28                	jmp    c0005bd4 <f_lseek+0x312>
c0005bac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005baf:	85 c0                	test   eax,eax
c0005bb1:	75 1e                	jne    c0005bd1 <f_lseek+0x30f>
c0005bb3:	31 d2                	xor    edx,edx
c0005bb5:	89 d8                	mov    eax,ebx
c0005bb7:	e8 a9 d4 ff ff       	call   c0003065 <create_chain>
c0005bbc:	83 f8 01             	cmp    eax,0x1
c0005bbf:	0f 84 b9 fd ff ff    	je     c000597e <f_lseek+0xbc>
c0005bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc8:	0f 84 c6 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005bce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bd1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	0f 84 4b ff ff ff    	je     c0005b27 <f_lseek+0x265>
c0005bdc:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005be0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005be8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005beb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bef:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005bf2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bf5:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005bf9:	0f 83 9d 00 00 00    	jae    c0005c9c <f_lseek+0x3da>
c0005bff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c07:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c0a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c0e:	01 f2                	add    edx,esi
c0005c10:	11 f9                	adc    ecx,edi
c0005c12:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c1a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c1d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c20:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c23:	f6 c1 02             	test   cl,0x2
c0005c26:	74 35                	je     c0005c5d <f_lseek+0x39b>
c0005c28:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c2c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c2f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c32:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c36:	73 16                	jae    c0005c4e <f_lseek+0x38c>
c0005c38:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c3c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c40:	88 ca                	mov    dl,cl
c0005c42:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c45:	83 ca 40             	or     edx,0x40
c0005c48:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c4b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c4e:	89 c2                	mov    edx,eax
c0005c50:	89 d8                	mov    eax,ebx
c0005c52:	e8 0e d4 ff ff       	call   c0003065 <create_chain>
c0005c57:	85 c0                	test   eax,eax
c0005c59:	75 0b                	jne    c0005c66 <f_lseek+0x3a4>
c0005c5b:	eb 30                	jmp    c0005c8d <f_lseek+0x3cb>
c0005c5d:	89 c2                	mov    edx,eax
c0005c5f:	89 d8                	mov    eax,ebx
c0005c61:	e8 11 d1 ff ff       	call   c0002d77 <get_fat>
c0005c66:	83 f8 ff             	cmp    eax,0xffffffff
c0005c69:	0f 84 25 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005c6f:	83 f8 01             	cmp    eax,0x1
c0005c72:	0f 86 06 fd ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c7c:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c7f:	0f 86 f9 fc ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c85:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c88:	e9 5b ff ff ff       	jmp    c0005be8 <f_lseek+0x326>
c0005c8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c9c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c9f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ca3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ca6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ca9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cac:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cb2:	0f 84 6f fe ff ff    	je     c0005b27 <f_lseek+0x265>
c0005cb8:	89 c2                	mov    edx,eax
c0005cba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cbe:	e8 e7 bf ff ff       	call   c0001caa <clst2sect>
c0005cc3:	89 d7                	mov    edi,edx
c0005cc5:	09 c7                	or     edi,eax
c0005cc7:	0f 84 b1 fc ff ff    	je     c000597e <f_lseek+0xbc>
c0005ccd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cd4:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cd8:	c1 ef 09             	shr    edi,0x9
c0005cdb:	01 c6                	add    esi,eax
c0005cdd:	11 d7                	adc    edi,edx
c0005cdf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ce2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005ce5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005ce8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005ceb:	19 d1                	sbb    ecx,edx
c0005ced:	73 0a                	jae    c0005cf9 <f_lseek+0x437>
c0005cef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cf2:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cf5:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cf9:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cfe:	74 6d                	je     c0005d6d <f_lseek+0x4ab>
c0005d00:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d03:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d06:	39 fa                	cmp    edx,edi
c0005d08:	75 04                	jne    c0005d0e <f_lseek+0x44c>
c0005d0a:	39 f0                	cmp    eax,esi
c0005d0c:	74 5f                	je     c0005d6d <f_lseek+0x4ab>
c0005d0e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d11:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d15:	79 25                	jns    c0005d3c <f_lseek+0x47a>
c0005d17:	83 ec 0c             	sub    esp,0xc
c0005d1a:	6a 01                	push   0x1
c0005d1c:	52                   	push   edx
c0005d1d:	50                   	push   eax
c0005d1e:	55                   	push   ebp
c0005d1f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d23:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d27:	50                   	push   eax
c0005d28:	e8 af bc ff ff       	call   c00019dc <disk_write>
c0005d2d:	83 c4 20             	add    esp,0x20
c0005d30:	85 c0                	test   eax,eax
c0005d32:	0f 85 5c fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d38:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d3c:	83 ec 0c             	sub    esp,0xc
c0005d3f:	6a 01                	push   0x1
c0005d41:	57                   	push   edi
c0005d42:	56                   	push   esi
c0005d43:	55                   	push   ebp
c0005d44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d48:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d4c:	50                   	push   eax
c0005d4d:	e8 74 bc ff ff       	call   c00019c6 <disk_read>
c0005d52:	83 c4 20             	add    esp,0x20
c0005d55:	85 c0                	test   eax,eax
c0005d57:	0f 85 37 fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d5d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d60:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d63:	eb 08                	jmp    c0005d6d <f_lseek+0x4ab>
c0005d65:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d71:	83 c4 3c             	add    esp,0x3c
c0005d74:	5b                   	pop    ebx
c0005d75:	5e                   	pop    esi
c0005d76:	5f                   	pop    edi
c0005d77:	5d                   	pop    ebp
c0005d78:	c3                   	ret    

c0005d79 <f_opendir>:
c0005d79:	56                   	push   esi
c0005d7a:	b8 09 00 00 00       	mov    eax,0x9
c0005d7f:	53                   	push   ebx
c0005d80:	83 ec 24             	sub    esp,0x24
c0005d83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d87:	85 db                	test   ebx,ebx
c0005d89:	0f 84 e6 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005d8f:	31 c9                	xor    ecx,ecx
c0005d91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d95:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d99:	e8 03 c7 ff ff       	call   c00024a1 <mount_volume>
c0005d9e:	85 c0                	test   eax,eax
c0005da0:	0f 85 c9 00 00 00    	jne    c0005e6f <f_opendir+0xf6>
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	83 ec 0c             	sub    esp,0xc
c0005dad:	89 03                	mov    DWORD PTR [ebx],eax
c0005daf:	68 60 04 00 00       	push   0x460
c0005db4:	e8 8b 24 00 00       	call   c0008244 <ff_memalloc>
c0005db9:	83 c4 10             	add    esp,0x10
c0005dbc:	89 c6                	mov    esi,eax
c0005dbe:	b8 11 00 00 00       	mov    eax,0x11
c0005dc3:	85 f6                	test   esi,esi
c0005dc5:	0f 84 aa 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005dcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ddb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ddf:	89 d8                	mov    eax,ebx
c0005de1:	e8 31 ee ff ff       	call   c0004c17 <follow_path>
c0005de6:	85 c0                	test   eax,eax
c0005de8:	75 61                	jne    c0005e4b <f_opendir+0xd2>
c0005dea:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dee:	78 46                	js     c0005e36 <f_opendir+0xbd>
c0005df0:	b8 05 00 00 00       	mov    eax,0x5
c0005df5:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005df9:	74 50                	je     c0005e4b <f_opendir+0xd2>
c0005dfb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dff:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e01:	3c 04                	cmp    al,0x4
c0005e03:	75 26                	jne    c0005e2b <f_opendir+0xb2>
c0005e05:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e08:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e0b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e0e:	30 d2                	xor    dl,dl
c0005e10:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e14:	09 c2                	or     edx,eax
c0005e16:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e19:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e1c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e1f:	89 da                	mov    edx,ebx
c0005e21:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e24:	e8 b4 ed ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0005e29:	eb 0b                	jmp    c0005e36 <f_opendir+0xbd>
c0005e2b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e2e:	e8 59 ed ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005e33:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3a:	31 d2                	xor    edx,edx
c0005e3c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e40:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e44:	89 d8                	mov    eax,ebx
c0005e46:	e8 22 d1 ff ff       	call   c0002f6d <dir_sdi>
c0005e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	56                   	push   esi
c0005e53:	e8 02 24 00 00       	call   c000825a <ff_memfree>
c0005e58:	83 c4 10             	add    esp,0x10
c0005e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e5f:	83 f8 04             	cmp    eax,0x4
c0005e62:	74 06                	je     c0005e6a <f_opendir+0xf1>
c0005e64:	85 c0                	test   eax,eax
c0005e66:	74 0d                	je     c0005e75 <f_opendir+0xfc>
c0005e68:	eb 05                	jmp    c0005e6f <f_opendir+0xf6>
c0005e6a:	b8 05 00 00 00       	mov    eax,0x5
c0005e6f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e75:	83 c4 24             	add    esp,0x24
c0005e78:	5b                   	pop    ebx
c0005e79:	5e                   	pop    esi
c0005e7a:	c3                   	ret    

c0005e7b <f_closedir>:
c0005e7b:	53                   	push   ebx
c0005e7c:	83 ec 18             	sub    esp,0x18
c0005e7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e83:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e87:	89 d8                	mov    eax,ebx
c0005e89:	e8 86 c2 ff ff       	call   c0002114 <validate>
c0005e8e:	85 c0                	test   eax,eax
c0005e90:	75 06                	jne    c0005e98 <f_closedir+0x1d>
c0005e92:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e98:	83 c4 18             	add    esp,0x18
c0005e9b:	5b                   	pop    ebx
c0005e9c:	c3                   	ret    

c0005e9d <f_readdir>:
c0005e9d:	57                   	push   edi
c0005e9e:	56                   	push   esi
c0005e9f:	53                   	push   ebx
c0005ea0:	83 ec 20             	sub    esp,0x20
c0005ea3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ea7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005eab:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 5e c2 ff ff       	call   c0002114 <validate>
c0005eb6:	85 c0                	test   eax,eax
c0005eb8:	75 77                	jne    c0005f31 <f_readdir+0x94>
c0005eba:	85 ff                	test   edi,edi
c0005ebc:	75 0b                	jne    c0005ec9 <f_readdir+0x2c>
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 a6 d0 ff ff       	call   c0002f6d <dir_sdi>
c0005ec7:	eb 68                	jmp    c0005f31 <f_readdir+0x94>
c0005ec9:	83 ec 0c             	sub    esp,0xc
c0005ecc:	68 60 04 00 00       	push   0x460
c0005ed1:	e8 6e 23 00 00       	call   c0008244 <ff_memalloc>
c0005ed6:	83 c4 10             	add    esp,0x10
c0005ed9:	89 c6                	mov    esi,eax
c0005edb:	b8 11 00 00 00       	mov    eax,0x11
c0005ee0:	85 f6                	test   esi,esi
c0005ee2:	74 4d                	je     c0005f31 <f_readdir+0x94>
c0005ee4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ee8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eee:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ef1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ef4:	31 d2                	xor    edx,edx
c0005ef6:	89 d8                	mov    eax,ebx
c0005ef8:	e8 80 d8 ff ff       	call   c000377d <dir_read>
c0005efd:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f02:	75 19                	jne    c0005f1d <f_readdir+0x80>
c0005f04:	89 fa                	mov    edx,edi
c0005f06:	89 d8                	mov    eax,ebx
c0005f08:	e8 7e ea ff ff       	call   c000498b <get_fileinfo>
c0005f0d:	31 d2                	xor    edx,edx
c0005f0f:	89 d8                	mov    eax,ebx
c0005f11:	e8 af d5 ff ff       	call   c00034c5 <dir_next>
c0005f16:	83 f8 04             	cmp    eax,0x4
c0005f19:	75 02                	jne    c0005f1d <f_readdir+0x80>
c0005f1b:	31 c0                	xor    eax,eax
c0005f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	56                   	push   esi
c0005f25:	e8 30 23 00 00       	call   c000825a <ff_memfree>
c0005f2a:	83 c4 10             	add    esp,0x10
c0005f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f31:	83 c4 20             	add    esp,0x20
c0005f34:	5b                   	pop    ebx
c0005f35:	5e                   	pop    esi
c0005f36:	5f                   	pop    edi
c0005f37:	c3                   	ret    

c0005f38 <f_stat>:
c0005f38:	57                   	push   edi
c0005f39:	31 c9                	xor    ecx,ecx
c0005f3b:	56                   	push   esi
c0005f3c:	53                   	push   ebx
c0005f3d:	83 ec 50             	sub    esp,0x50
c0005f40:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f44:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f48:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f4c:	e8 50 c5 ff ff       	call   c00024a1 <mount_volume>
c0005f51:	89 c3                	mov    ebx,eax
c0005f53:	85 c0                	test   eax,eax
c0005f55:	75 67                	jne    c0005fbe <f_stat+0x86>
c0005f57:	83 ec 0c             	sub    esp,0xc
c0005f5a:	bb 11 00 00 00       	mov    ebx,0x11
c0005f5f:	68 60 04 00 00       	push   0x460
c0005f64:	e8 db 22 00 00       	call   c0008244 <ff_memalloc>
c0005f69:	83 c4 10             	add    esp,0x10
c0005f6c:	89 c6                	mov    esi,eax
c0005f6e:	85 c0                	test   eax,eax
c0005f70:	74 4c                	je     c0005fbe <f_stat+0x86>
c0005f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f76:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f7c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f7f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f82:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f86:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f8a:	e8 88 ec ff ff       	call   c0004c17 <follow_path>
c0005f8f:	89 c3                	mov    ebx,eax
c0005f91:	85 c0                	test   eax,eax
c0005f93:	75 1d                	jne    c0005fb2 <f_stat+0x7a>
c0005f95:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f9a:	78 11                	js     c0005fad <f_stat+0x75>
c0005f9c:	85 ff                	test   edi,edi
c0005f9e:	74 12                	je     c0005fb2 <f_stat+0x7a>
c0005fa0:	89 fa                	mov    edx,edi
c0005fa2:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fa6:	e8 e0 e9 ff ff       	call   c000498b <get_fileinfo>
c0005fab:	eb 05                	jmp    c0005fb2 <f_stat+0x7a>
c0005fad:	bb 06 00 00 00       	mov    ebx,0x6
c0005fb2:	83 ec 0c             	sub    esp,0xc
c0005fb5:	56                   	push   esi
c0005fb6:	e8 9f 22 00 00       	call   c000825a <ff_memfree>
c0005fbb:	83 c4 10             	add    esp,0x10
c0005fbe:	83 c4 50             	add    esp,0x50
c0005fc1:	89 d8                	mov    eax,ebx
c0005fc3:	5b                   	pop    ebx
c0005fc4:	5e                   	pop    esi
c0005fc5:	5f                   	pop    edi
c0005fc6:	c3                   	ret    

c0005fc7 <f_getfree>:
c0005fc7:	55                   	push   ebp
c0005fc8:	31 c9                	xor    ecx,ecx
c0005fca:	57                   	push   edi
c0005fcb:	56                   	push   esi
c0005fcc:	53                   	push   ebx
c0005fcd:	83 ec 5c             	sub    esp,0x5c
c0005fd0:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fd4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fd8:	e8 c4 c4 ff ff       	call   c00024a1 <mount_volume>
c0005fdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	0f 85 9d 01 00 00    	jne    c0006186 <f_getfree+0x1bf>
c0005fe9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fed:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005ff1:	89 02                	mov    DWORD PTR [edx],eax
c0005ff3:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005ff6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005ff9:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005ffc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006000:	39 f2                	cmp    edx,esi
c0006002:	77 0b                	ja     c000600f <f_getfree+0x48>
c0006004:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006008:	89 10                	mov    DWORD PTR [eax],edx
c000600a:	e9 77 01 00 00       	jmp    c0006186 <f_getfree+0x1bf>
c000600f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006011:	80 fa 01             	cmp    dl,0x1
c0006014:	75 3a                	jne    c0006050 <f_getfree+0x89>
c0006016:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000601a:	be 02 00 00 00       	mov    esi,0x2
c000601f:	31 db                	xor    ebx,ebx
c0006021:	89 f2                	mov    edx,esi
c0006023:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006027:	e8 4b cd ff ff       	call   c0002d77 <get_fat>
c000602c:	83 f8 ff             	cmp    eax,0xffffffff
c000602f:	0f 84 28 01 00 00    	je     c000615d <f_getfree+0x196>
c0006035:	83 f8 01             	cmp    eax,0x1
c0006038:	0f 84 29 01 00 00    	je     c0006167 <f_getfree+0x1a0>
c000603e:	83 d3 00             	adc    ebx,0x0
c0006041:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006045:	46                   	inc    esi
c0006046:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006049:	77 d6                	ja     c0006021 <f_getfree+0x5a>
c000604b:	e9 25 01 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c0006050:	80 fa 04             	cmp    dl,0x4
c0006053:	0f 85 88 00 00 00    	jne    c00060e1 <f_getfree+0x11a>
c0006059:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000605c:	31 ed                	xor    ebp,ebp
c000605e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006061:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006069:	31 db                	xor    ebx,ebx
c000606b:	85 ed                	test   ebp,ebp
c000606d:	75 3f                	jne    c00060ae <f_getfree+0xe7>
c000606f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006077:	83 c0 01             	add    eax,0x1
c000607a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000607e:	83 d2 00             	adc    edx,0x0
c0006081:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006085:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006089:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006091:	e8 59 c1 ff ff       	call   c00021ef <move_window>
c0006096:	85 c0                	test   eax,eax
c0006098:	0f 85 d3 00 00 00    	jne    c0006171 <f_getfree+0x1aa>
c000609e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060b2:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060b5:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060b9:	89 cf                	mov    edi,ecx
c00060bb:	85 f6                	test   esi,esi
c00060bd:	74 12                	je     c00060d1 <f_getfree+0x10a>
c00060bf:	88 c1                	mov    cl,al
c00060c1:	83 e1 01             	and    ecx,0x1
c00060c4:	80 f9 01             	cmp    cl,0x1
c00060c7:	83 d3 00             	adc    ebx,0x0
c00060ca:	d0 e8                	shr    al,1
c00060cc:	4e                   	dec    esi
c00060cd:	39 fe                	cmp    esi,edi
c00060cf:	75 ea                	jne    c00060bb <f_getfree+0xf4>
c00060d1:	45                   	inc    ebp
c00060d2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060d8:	85 f6                	test   esi,esi
c00060da:	75 8f                	jne    c000606b <f_getfree+0xa4>
c00060dc:	e9 94 00 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c00060e1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060e4:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060e7:	31 f6                	xor    esi,esi
c00060e9:	31 db                	xor    ebx,ebx
c00060eb:	85 f6                	test   esi,esi
c00060ed:	75 1b                	jne    c000610a <f_getfree+0x143>
c00060ef:	89 d7                	mov    edi,edx
c00060f1:	89 cd                	mov    ebp,ecx
c00060f3:	83 c7 01             	add    edi,0x1
c00060f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fa:	83 d5 00             	adc    ebp,0x0
c00060fd:	e8 ed c0 ff ff       	call   c00021ef <move_window>
c0006102:	85 c0                	test   eax,eax
c0006104:	75 6b                	jne    c0006171 <f_getfree+0x1aa>
c0006106:	89 fa                	mov    edx,edi
c0006108:	89 e9                	mov    ecx,ebp
c000610a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000610e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006112:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006116:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006119:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000611d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006121:	75 11                	jne    c0006134 <f_getfree+0x16d>
c0006123:	e8 e9 b8 ff ff       	call   c0001a11 <ld_word>
c0006128:	66 83 f8 01          	cmp    ax,0x1
c000612c:	83 d3 00             	adc    ebx,0x0
c000612f:	83 c6 02             	add    esi,0x2
c0006132:	eb 13                	jmp    c0006147 <f_getfree+0x180>
c0006134:	e8 e5 b8 ff ff       	call   c0001a1e <ld_dword>
c0006139:	25 ff ff ff 0f       	and    eax,0xfffffff
c000613e:	83 f8 01             	cmp    eax,0x1
c0006141:	83 d3 00             	adc    ebx,0x0
c0006144:	83 c6 04             	add    esi,0x4
c0006147:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000614d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006151:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006155:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006159:	75 90                	jne    c00060eb <f_getfree+0x124>
c000615b:	eb 18                	jmp    c0006175 <f_getfree+0x1ae>
c000615d:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006165:	eb 0e                	jmp    c0006175 <f_getfree+0x1ae>
c0006167:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000616f:	eb 04                	jmp    c0006175 <f_getfree+0x1ae>
c0006171:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006175:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006179:	89 18                	mov    DWORD PTR [eax],ebx
c000617b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000617f:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006182:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000618a:	83 c4 5c             	add    esp,0x5c
c000618d:	5b                   	pop    ebx
c000618e:	5e                   	pop    esi
c000618f:	5f                   	pop    edi
c0006190:	5d                   	pop    ebp
c0006191:	c3                   	ret    

c0006192 <f_truncate>:
c0006192:	56                   	push   esi
c0006193:	53                   	push   ebx
c0006194:	83 ec 14             	sub    esp,0x14
c0006197:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000619b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000619f:	89 d8                	mov    eax,ebx
c00061a1:	e8 6e bf ff ff       	call   c0002114 <validate>
c00061a6:	89 c6                	mov    esi,eax
c00061a8:	85 c0                	test   eax,eax
c00061aa:	0f 85 d2 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061b0:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061b4:	85 f6                	test   esi,esi
c00061b6:	0f 85 c6 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061bc:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061c0:	0f 84 b7 00 00 00    	je     c000627d <f_truncate+0xeb>
c00061c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061cc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061cf:	89 d1                	mov    ecx,edx
c00061d1:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061d4:	0f 83 a8 00 00 00    	jae    c0006282 <f_truncate+0xf0>
c00061da:	09 c2                	or     edx,eax
c00061dc:	75 15                	jne    c00061f3 <f_truncate+0x61>
c00061de:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061e1:	31 c9                	xor    ecx,ecx
c00061e3:	89 d8                	mov    eax,ebx
c00061e5:	e8 7a d0 ff ff       	call   c0003264 <remove_chain>
c00061ea:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061f1:	eb 35                	jmp    c0006228 <f_truncate+0x96>
c00061f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061f6:	89 d8                	mov    eax,ebx
c00061f8:	e8 7a cb ff ff       	call   c0002d77 <get_fat>
c00061fd:	89 c2                	mov    edx,eax
c00061ff:	b8 01 00 00 00       	mov    eax,0x1
c0006204:	83 fa ff             	cmp    edx,0xffffffff
c0006207:	74 1f                	je     c0006228 <f_truncate+0x96>
c0006209:	b8 02 00 00 00       	mov    eax,0x2
c000620e:	83 fa 01             	cmp    edx,0x1
c0006211:	74 15                	je     c0006228 <f_truncate+0x96>
c0006213:	31 c0                	xor    eax,eax
c0006215:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006219:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000621c:	76 0a                	jbe    c0006228 <f_truncate+0x96>
c000621e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006221:	89 d8                	mov    eax,ebx
c0006223:	e8 3c d0 ff ff       	call   c0003264 <remove_chain>
c0006228:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000622b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000622e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006231:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006234:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006237:	83 ca 40             	or     edx,0x40
c000623a:	85 c0                	test   eax,eax
c000623c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000623f:	75 35                	jne    c0006276 <f_truncate+0xe4>
c0006241:	84 d2                	test   dl,dl
c0006243:	79 3d                	jns    c0006282 <f_truncate+0xf0>
c0006245:	83 ec 0c             	sub    esp,0xc
c0006248:	8d 43 50             	lea    eax,[ebx+0x50]
c000624b:	6a 01                	push   0x1
c000624d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006250:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006253:	50                   	push   eax
c0006254:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006258:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000625c:	50                   	push   eax
c000625d:	e8 7a b7 ff ff       	call   c00019dc <disk_write>
c0006262:	83 c4 20             	add    esp,0x20
c0006265:	85 c0                	test   eax,eax
c0006267:	75 08                	jne    c0006271 <f_truncate+0xdf>
c0006269:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000626d:	31 f6                	xor    esi,esi
c000626f:	eb 11                	jmp    c0006282 <f_truncate+0xf0>
c0006271:	b8 01 00 00 00       	mov    eax,0x1
c0006276:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006279:	89 c6                	mov    esi,eax
c000627b:	eb 05                	jmp    c0006282 <f_truncate+0xf0>
c000627d:	be 07 00 00 00       	mov    esi,0x7
c0006282:	89 f0                	mov    eax,esi
c0006284:	83 c4 14             	add    esp,0x14
c0006287:	5b                   	pop    ebx
c0006288:	5e                   	pop    esi
c0006289:	c3                   	ret    

c000628a <f_unlink>:
c000628a:	56                   	push   esi
c000628b:	b9 02 00 00 00       	mov    ecx,0x2
c0006290:	53                   	push   ebx
c0006291:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006297:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000629b:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062a2:	e8 fa c1 ff ff       	call   c00024a1 <mount_volume>
c00062a7:	85 c0                	test   eax,eax
c00062a9:	0f 85 55 01 00 00    	jne    c0006404 <f_unlink+0x17a>
c00062af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062b3:	83 ec 0c             	sub    esp,0xc
c00062b6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ba:	68 60 04 00 00       	push   0x460
c00062bf:	e8 80 1f 00 00       	call   c0008244 <ff_memalloc>
c00062c4:	83 c4 10             	add    esp,0x10
c00062c7:	89 c3                	mov    ebx,eax
c00062c9:	b8 11 00 00 00       	mov    eax,0x11
c00062ce:	85 db                	test   ebx,ebx
c00062d0:	0f 84 2e 01 00 00    	je     c0006404 <f_unlink+0x17a>
c00062d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062da:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062e0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062e6:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062f1:	e8 21 e9 ff ff       	call   c0004c17 <follow_path>
c00062f6:	85 c0                	test   eax,eax
c00062f8:	0f 85 f2 00 00 00    	jne    c00063f0 <f_unlink+0x166>
c00062fe:	b8 06 00 00 00       	mov    eax,0x6
c0006303:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000630b:	0f 88 df 00 00 00    	js     c00063f0 <f_unlink+0x166>
c0006311:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006316:	74 0a                	je     c0006322 <f_unlink+0x98>
c0006318:	b8 07 00 00 00       	mov    eax,0x7
c000631d:	e9 ce 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006322:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006326:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000632a:	8a 02                	mov    al,BYTE PTR [edx]
c000632c:	3c 04                	cmp    al,0x4
c000632e:	75 12                	jne    c0006342 <f_unlink+0xb8>
c0006330:	8d 42 10             	lea    eax,[edx+0x10]
c0006333:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006337:	e8 a1 e8 ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c000633c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006340:	eb 0e                	jmp    c0006350 <f_unlink+0xc6>
c0006342:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006349:	e8 3e e8 ff ff       	call   c0004b8c <ld_clust.isra.0>
c000634e:	89 c6                	mov    esi,eax
c0006350:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006355:	75 12                	jne    c0006369 <f_unlink+0xdf>
c0006357:	8d 44 24 48          	lea    eax,[esp+0x48]
c000635b:	e8 94 d6 ff ff       	call   c00039f4 <dir_remove>
c0006360:	85 c0                	test   eax,eax
c0006362:	74 6c                	je     c00063d0 <f_unlink+0x146>
c0006364:	e9 87 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000636d:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006374:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000637b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000637e:	75 21                	jne    c00063a1 <f_unlink+0x117>
c0006380:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006384:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006388:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000638f:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006396:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000639a:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063a1:	31 d2                	xor    edx,edx
c00063a3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063aa:	e8 be cb ff ff       	call   c0002f6d <dir_sdi>
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 3d                	jne    c00063f0 <f_unlink+0x166>
c00063b3:	31 d2                	xor    edx,edx
c00063b5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063bc:	e8 bc d3 ff ff       	call   c000377d <dir_read>
c00063c1:	85 c0                	test   eax,eax
c00063c3:	0f 84 4f ff ff ff    	je     c0006318 <f_unlink+0x8e>
c00063c9:	83 f8 04             	cmp    eax,0x4
c00063cc:	75 22                	jne    c00063f0 <f_unlink+0x166>
c00063ce:	eb 87                	jmp    c0006357 <f_unlink+0xcd>
c00063d0:	85 f6                	test   esi,esi
c00063d2:	75 0b                	jne    c00063df <f_unlink+0x155>
c00063d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d8:	e8 3d df ff ff       	call   c000431a <sync_fs>
c00063dd:	eb 11                	jmp    c00063f0 <f_unlink+0x166>
c00063df:	31 c9                	xor    ecx,ecx
c00063e1:	89 f2                	mov    edx,esi
c00063e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063e7:	e8 78 ce ff ff       	call   c0003264 <remove_chain>
c00063ec:	85 c0                	test   eax,eax
c00063ee:	74 e4                	je     c00063d4 <f_unlink+0x14a>
c00063f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063f4:	83 ec 0c             	sub    esp,0xc
c00063f7:	53                   	push   ebx
c00063f8:	e8 5d 1e 00 00       	call   c000825a <ff_memfree>
c00063fd:	83 c4 10             	add    esp,0x10
c0006400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006404:	81 c4 e4 00 00 00    	add    esp,0xe4
c000640a:	5b                   	pop    ebx
c000640b:	5e                   	pop    esi
c000640c:	c3                   	ret    

c000640d <f_mkdir>:
c000640d:	57                   	push   edi
c000640e:	b9 02 00 00 00       	mov    ecx,0x2
c0006413:	56                   	push   esi
c0006414:	53                   	push   ebx
c0006415:	83 c4 80             	add    esp,0xffffff80
c0006418:	8d 54 24 08          	lea    edx,[esp+0x8]
c000641c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006423:	e8 79 c0 ff ff       	call   c00024a1 <mount_volume>
c0006428:	89 c3                	mov    ebx,eax
c000642a:	85 c0                	test   eax,eax
c000642c:	0f 85 fe 01 00 00    	jne    c0006630 <f_mkdir+0x223>
c0006432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006436:	bb 11 00 00 00       	mov    ebx,0x11
c000643b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	68 60 04 00 00       	push   0x460
c0006447:	e8 f8 1d 00 00       	call   c0008244 <ff_memalloc>
c000644c:	83 c4 10             	add    esp,0x10
c000644f:	89 c7                	mov    edi,eax
c0006451:	85 c0                	test   eax,eax
c0006453:	0f 84 d7 01 00 00    	je     c0006630 <f_mkdir+0x223>
c0006459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000645d:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006463:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006466:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006469:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006470:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006474:	e8 9e e7 ff ff       	call   c0004c17 <follow_path>
c0006479:	89 c3                	mov    ebx,eax
c000647b:	85 c0                	test   eax,eax
c000647d:	74 3e                	je     c00064bd <f_mkdir+0xb0>
c000647f:	83 f8 04             	cmp    eax,0x4
c0006482:	75 3e                	jne    c00064c2 <f_mkdir+0xb5>
c0006484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006488:	31 d2                	xor    edx,edx
c000648a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000648e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006492:	e8 ce cb ff ff       	call   c0003065 <create_chain>
c0006497:	89 c6                	mov    esi,eax
c0006499:	85 c0                	test   eax,eax
c000649b:	74 0c                	je     c00064a9 <f_mkdir+0x9c>
c000649d:	bb 02 00 00 00       	mov    ebx,0x2
c00064a2:	83 f8 01             	cmp    eax,0x1
c00064a5:	74 07                	je     c00064ae <f_mkdir+0xa1>
c00064a7:	eb 2a                	jmp    c00064d3 <f_mkdir+0xc6>
c00064a9:	bb 07 00 00 00       	mov    ebx,0x7
c00064ae:	31 c9                	xor    ecx,ecx
c00064b0:	89 f2                	mov    edx,esi
c00064b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064b6:	e8 a9 cd ff ff       	call   c0003264 <remove_chain>
c00064bb:	eb 05                	jmp    c00064c2 <f_mkdir+0xb5>
c00064bd:	bb 08 00 00 00       	mov    ebx,0x8
c00064c2:	83 ec 0c             	sub    esp,0xc
c00064c5:	57                   	push   edi
c00064c6:	e8 8f 1d 00 00       	call   c000825a <ff_memfree>
c00064cb:	83 c4 10             	add    esp,0x10
c00064ce:	e9 5d 01 00 00       	jmp    c0006630 <f_mkdir+0x223>
c00064d3:	bb 01 00 00 00       	mov    ebx,0x1
c00064d8:	83 f8 ff             	cmp    eax,0xffffffff
c00064db:	74 d1                	je     c00064ae <f_mkdir+0xa1>
c00064dd:	89 f2                	mov    edx,esi
c00064df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e3:	e8 c4 ce ff ff       	call   c00033ac <dir_clear>
c00064e8:	89 c3                	mov    ebx,eax
c00064ea:	85 c0                	test   eax,eax
c00064ec:	75 c0                	jne    c00064ae <f_mkdir+0xa1>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f5:	74 69                	je     c0006560 <f_mkdir+0x153>
c00064f7:	b9 0b 00 00 00       	mov    ecx,0xb
c00064fc:	83 c0 54             	add    eax,0x54
c00064ff:	ba 20 00 00 00       	mov    edx,0x20
c0006504:	e8 9c b5 ff ff       	call   c0001aa5 <mem_set>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006512:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006516:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000651a:	83 c0 6a             	add    eax,0x6a
c000651d:	e8 65 b5 ff ff       	call   c0001a87 <st_dword>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	89 f1                	mov    ecx,esi
c0006528:	8d 50 54             	lea    edx,[eax+0x54]
c000652b:	e8 85 e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	b9 20 00 00 00       	mov    ecx,0x20
c0006539:	8d 50 54             	lea    edx,[eax+0x54]
c000653c:	83 c0 74             	add    eax,0x74
c000653f:	e8 4c b5 ff ff       	call   c0001a90 <mem_cpy>
c0006544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006548:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000654c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006550:	8d 50 74             	lea    edx,[eax+0x74]
c0006553:	e8 5d e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006560:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006564:	e8 2f db ff ff       	call   c0004098 <dir_register>
c0006569:	89 c3                	mov    ebx,eax
c000656b:	85 c0                	test   eax,eax
c000656d:	0f 85 3b ff ff ff    	jne    c00064ae <f_mkdir+0xa1>
c0006573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006577:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000657a:	75 74                	jne    c00065f0 <f_mkdir+0x1e3>
c000657c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000657f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006584:	83 c0 0c             	add    eax,0xc
c0006587:	e8 fb b4 ff ff       	call   c0001a87 <st_dword>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	89 f2                	mov    edx,esi
c0006592:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006595:	83 c0 34             	add    eax,0x34
c0006598:	e8 ea b4 ff ff       	call   c0001a87 <st_dword>
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a8:	c1 e2 09             	shl    edx,0x9
c00065ab:	83 c0 38             	add    eax,0x38
c00065ae:	e8 d4 b4 ff ff       	call   c0001a87 <st_dword>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065be:	c1 e2 09             	shl    edx,0x9
c00065c1:	83 c0 28             	add    eax,0x28
c00065c4:	e8 be b4 ff ff       	call   c0001a87 <st_dword>
c00065c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065d0:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d7:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065db:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065df:	e8 8b d3 ff ff       	call   c000396f <store_xdir>
c00065e4:	89 c3                	mov    ebx,eax
c00065e6:	85 c0                	test   eax,eax
c00065e8:	0f 85 d4 fe ff ff    	jne    c00064c2 <f_mkdir+0xb5>
c00065ee:	eb 30                	jmp    c0006620 <f_mkdir+0x213>
c00065f0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f4:	ba 00 00 21 50       	mov    edx,0x50210000
c00065f9:	83 c0 16             	add    eax,0x16
c00065fc:	e8 86 b4 ff ff       	call   c0001a87 <st_dword>
c0006601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006605:	89 f1                	mov    ecx,esi
c0006607:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000660b:	e8 a5 e5 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006610:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006614:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000661c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006624:	e8 f1 dc ff ff       	call   c000431a <sync_fs>
c0006629:	89 c3                	mov    ebx,eax
c000662b:	e9 92 fe ff ff       	jmp    c00064c2 <f_mkdir+0xb5>
c0006630:	83 ec 80             	sub    esp,0xffffff80
c0006633:	89 d8                	mov    eax,ebx
c0006635:	5b                   	pop    ebx
c0006636:	5e                   	pop    esi
c0006637:	5f                   	pop    edi
c0006638:	c3                   	ret    

c0006639 <f_rename>:
c0006639:	55                   	push   ebp
c000663a:	57                   	push   edi
c000663b:	56                   	push   esi
c000663c:	53                   	push   ebx
c000663d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006643:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000664a:	e8 a4 b9 ff ff       	call   c0001ff3 <get_ldnumber>
c000664f:	b9 02 00 00 00       	mov    ecx,0x2
c0006654:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006658:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000665f:	e8 3d be ff ff       	call   c00024a1 <mount_volume>
c0006664:	85 c0                	test   eax,eax
c0006666:	0f 85 b5 02 00 00    	jne    c0006921 <f_rename+0x2e8>
c000666c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006670:	83 ec 0c             	sub    esp,0xc
c0006673:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006677:	68 60 04 00 00       	push   0x460
c000667c:	e8 c3 1b 00 00       	call   c0008244 <ff_memalloc>
c0006681:	83 c4 10             	add    esp,0x10
c0006684:	89 c3                	mov    ebx,eax
c0006686:	b8 11 00 00 00       	mov    eax,0x11
c000668b:	85 db                	test   ebx,ebx
c000668d:	0f 84 8e 02 00 00    	je     c0006921 <f_rename+0x2e8>
c0006693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006697:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000669d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066a3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066aa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066ae:	e8 64 e5 ff ff       	call   c0004c17 <follow_path>
c00066b3:	85 c0                	test   eax,eax
c00066b5:	0f 85 52 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066bb:	b8 06 00 00 00       	mov    eax,0x6
c00066c0:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066c8:	0f 85 3f 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d5:	0f 85 05 01 00 00    	jne    c00067e0 <f_rename+0x1a7>
c00066db:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066de:	b9 40 00 00 00       	mov    ecx,0x40
c00066e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066e7:	e8 a4 b3 ff ff       	call   c0001a90 <mem_cpy>
c00066ec:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066f5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066fc:	e8 8f b3 ff ff       	call   c0001a90 <mem_cpy>
c0006701:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006708:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000670f:	e8 03 e5 ff ff       	call   c0004c17 <follow_path>
c0006714:	85 c0                	test   eax,eax
c0006716:	75 29                	jne    c0006741 <f_rename+0x108>
c0006718:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000671c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006723:	74 0a                	je     c000672f <f_rename+0xf6>
c0006725:	b8 08 00 00 00       	mov    eax,0x8
c000672a:	e9 de 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c000672f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006736:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000673d:	75 e6                	jne    c0006725 <f_rename+0xec>
c000673f:	eb 09                	jmp    c000674a <f_rename+0x111>
c0006741:	83 f8 04             	cmp    eax,0x4
c0006744:	0f 85 c3 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000674a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006751:	e8 42 d9 ff ff       	call   c0004098 <dir_register>
c0006756:	85 c0                	test   eax,eax
c0006758:	0f 85 af 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000675e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006762:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006765:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006768:	89 c5                	mov    ebp,eax
c000676a:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000676d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006771:	8d 46 24             	lea    eax,[esi+0x24]
c0006774:	e8 98 b2 ff ff       	call   c0001a11 <ld_word>
c0006779:	b9 40 00 00 00       	mov    ecx,0x40
c000677e:	89 c7                	mov    edi,eax
c0006780:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006784:	89 f0                	mov    eax,esi
c0006786:	e8 05 b3 ff ff       	call   c0001a90 <mem_cpy>
c000678b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678f:	89 e9                	mov    ecx,ebp
c0006791:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006794:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006797:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000679b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067a2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067a5:	0f b7 d7             	movzx  edx,di
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 24             	add    eax,0x24
c00067ae:	e8 d0 b2 ff ff       	call   c0001a83 <st_word>
c00067b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ba:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067bd:	a8 10                	test   al,0x10
c00067bf:	75 06                	jne    c00067c7 <f_rename+0x18e>
c00067c1:	83 c8 20             	or     eax,0x20
c00067c4:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ce:	e8 9c d1 ff ff       	call   c000396f <store_xdir>
c00067d3:	85 c0                	test   eax,eax
c00067d5:	0f 84 1c 01 00 00    	je     c00068f7 <f_rename+0x2be>
c00067db:	e9 2d 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c00067e0:	b9 20 00 00 00       	mov    ecx,0x20
c00067e5:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067ec:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067f0:	e8 9b b2 ff ff       	call   c0001a90 <mem_cpy>
c00067f5:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067fa:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067fe:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006805:	e8 86 b2 ff ff       	call   c0001a90 <mem_cpy>
c000680a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006811:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006818:	e8 fa e3 ff ff       	call   c0004c17 <follow_path>
c000681d:	85 c0                	test   eax,eax
c000681f:	75 27                	jne    c0006848 <f_rename+0x20f>
c0006821:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006825:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000682c:	0f 85 f3 fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006832:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006839:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006840:	0f 85 df fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006846:	eb 09                	jmp    c0006851 <f_rename+0x218>
c0006848:	83 f8 04             	cmp    eax,0x4
c000684b:	0f 85 bc 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006851:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006858:	e8 3b d8 ff ff       	call   c0004098 <dir_register>
c000685d:	85 c0                	test   eax,eax
c000685f:	0f 85 a8 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006865:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000686c:	b9 13 00 00 00       	mov    ecx,0x13
c0006871:	8d 46 0d             	lea    eax,[esi+0xd]
c0006874:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006878:	e8 13 b2 ff ff       	call   c0001a90 <mem_cpy>
c000687d:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006881:	a8 10                	test   al,0x10
c0006883:	75 03                	jne    c0006888 <f_rename+0x24f>
c0006885:	83 c8 20             	or     eax,0x20
c0006888:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000688b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000688f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006893:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006897:	74 5e                	je     c00068f7 <f_rename+0x2be>
c0006899:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068a0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068a4:	74 51                	je     c00068f7 <f_rename+0x2be>
c00068a6:	89 f2                	mov    edx,esi
c00068a8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068ac:	8a 07                	mov    al,BYTE PTR [edi]
c00068ae:	e8 d9 e2 ff ff       	call   c0004b8c <ld_clust.isra.0>
c00068b3:	89 c2                	mov    edx,eax
c00068b5:	89 f8                	mov    eax,edi
c00068b7:	e8 ee b3 ff ff       	call   c0001caa <clst2sect>
c00068bc:	89 c6                	mov    esi,eax
c00068be:	89 d1                	mov    ecx,edx
c00068c0:	b8 02 00 00 00       	mov    eax,0x2
c00068c5:	09 f2                	or     edx,esi
c00068c7:	74 44                	je     c000690d <f_rename+0x2d4>
c00068c9:	89 f2                	mov    edx,esi
c00068cb:	89 f8                	mov    eax,edi
c00068cd:	e8 1d b9 ff ff       	call   c00021ef <move_window>
c00068d2:	85 c0                	test   eax,eax
c00068d4:	75 37                	jne    c000690d <f_rename+0x2d4>
c00068d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068da:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068de:	75 17                	jne    c00068f7 <f_rename+0x2be>
c00068e0:	8d 50 74             	lea    edx,[eax+0x74]
c00068e3:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068ea:	e8 c6 e2 ff ff       	call   c0004bb5 <st_clust.isra.1>
c00068ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068f7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fb:	e8 f4 d0 ff ff       	call   c00039f4 <dir_remove>
c0006900:	85 c0                	test   eax,eax
c0006902:	75 09                	jne    c000690d <f_rename+0x2d4>
c0006904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006908:	e8 0d da ff ff       	call   c000431a <sync_fs>
c000690d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006911:	83 ec 0c             	sub    esp,0xc
c0006914:	53                   	push   ebx
c0006915:	e8 40 19 00 00       	call   c000825a <ff_memfree>
c000691a:	83 c4 10             	add    esp,0x10
c000691d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006921:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006927:	5b                   	pop    ebx
c0006928:	5e                   	pop    esi
c0006929:	5f                   	pop    edi
c000692a:	5d                   	pop    ebp
c000692b:	c3                   	ret    

c000692c <f_chmod>:
c000692c:	57                   	push   edi
c000692d:	b9 02 00 00 00       	mov    ecx,0x2
c0006932:	56                   	push   esi
c0006933:	53                   	push   ebx
c0006934:	83 ec 60             	sub    esp,0x60
c0006937:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000693b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000693f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006943:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006947:	e8 55 bb ff ff       	call   c00024a1 <mount_volume>
c000694c:	85 c0                	test   eax,eax
c000694e:	0f 85 af 00 00 00    	jne    c0006a03 <f_chmod+0xd7>
c0006954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006958:	83 ec 0c             	sub    esp,0xc
c000695b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000695f:	68 60 04 00 00       	push   0x460
c0006964:	e8 db 18 00 00       	call   c0008244 <ff_memalloc>
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	89 c6                	mov    esi,eax
c000696e:	b8 11 00 00 00       	mov    eax,0x11
c0006973:	85 f6                	test   esi,esi
c0006975:	0f 84 88 00 00 00    	je     c0006a03 <f_chmod+0xd7>
c000697b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000697f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006985:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006988:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000698b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000698f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006993:	e8 7f e2 ff ff       	call   c0004c17 <follow_path>
c0006998:	85 c0                	test   eax,eax
c000699a:	75 53                	jne    c00069ef <f_chmod+0xc3>
c000699c:	b8 06 00 00 00       	mov    eax,0x6
c00069a1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069a6:	75 47                	jne    c00069ef <f_chmod+0xc3>
c00069a8:	89 f9                	mov    ecx,edi
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 e1 27             	and    ecx,0x27
c00069b1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069b4:	75 1d                	jne    c00069d3 <f_chmod+0xa7>
c00069b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069b9:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069bc:	21 cb                	and    ebx,ecx
c00069be:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069c1:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c8:	e8 a2 cf ff ff       	call   c000396f <store_xdir>
c00069cd:	85 c0                	test   eax,eax
c00069cf:	75 1e                	jne    c00069ef <f_chmod+0xc3>
c00069d1:	eb 13                	jmp    c00069e6 <f_chmod+0xba>
c00069d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069d7:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069da:	21 cb                	and    ebx,ecx
c00069dc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069df:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ea:	e8 2b d9 ff ff       	call   c000431a <sync_fs>
c00069ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069f3:	83 ec 0c             	sub    esp,0xc
c00069f6:	56                   	push   esi
c00069f7:	e8 5e 18 00 00       	call   c000825a <ff_memfree>
c00069fc:	83 c4 10             	add    esp,0x10
c00069ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a03:	83 c4 60             	add    esp,0x60
c0006a06:	5b                   	pop    ebx
c0006a07:	5e                   	pop    esi
c0006a08:	5f                   	pop    edi
c0006a09:	c3                   	ret    

c0006a0a <f_utime>:
c0006a0a:	56                   	push   esi
c0006a0b:	b9 02 00 00 00       	mov    ecx,0x2
c0006a10:	53                   	push   ebx
c0006a11:	83 ec 64             	sub    esp,0x64
c0006a14:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a18:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a1c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a20:	e8 7c ba ff ff       	call   c00024a1 <mount_volume>
c0006a25:	85 c0                	test   eax,eax
c0006a27:	0f 85 b5 00 00 00    	jne    c0006ae2 <f_utime+0xd8>
c0006a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a31:	83 ec 0c             	sub    esp,0xc
c0006a34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a38:	68 60 04 00 00       	push   0x460
c0006a3d:	e8 02 18 00 00       	call   c0008244 <ff_memalloc>
c0006a42:	83 c4 10             	add    esp,0x10
c0006a45:	89 c3                	mov    ebx,eax
c0006a47:	b8 11 00 00 00       	mov    eax,0x11
c0006a4c:	85 db                	test   ebx,ebx
c0006a4e:	0f 84 8e 00 00 00    	je     c0006ae2 <f_utime+0xd8>
c0006a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a58:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a5e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a64:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a68:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a6c:	e8 a6 e1 ff ff       	call   c0004c17 <follow_path>
c0006a71:	85 c0                	test   eax,eax
c0006a73:	75 59                	jne    c0006ace <f_utime+0xc4>
c0006a75:	b8 06 00 00 00       	mov    eax,0x6
c0006a7a:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a7f:	75 4d                	jne    c0006ace <f_utime+0xc4>
c0006a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a85:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a89:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a8d:	c1 e2 10             	shl    edx,0x10
c0006a90:	09 ca                	or     edx,ecx
c0006a92:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a95:	75 1a                	jne    c0006ab1 <f_utime+0xa7>
c0006a97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a9a:	83 c0 0c             	add    eax,0xc
c0006a9d:	e8 e5 af ff ff       	call   c0001a87 <st_dword>
c0006aa2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa6:	e8 c4 ce ff ff       	call   c000396f <store_xdir>
c0006aab:	85 c0                	test   eax,eax
c0006aad:	75 1f                	jne    c0006ace <f_utime+0xc4>
c0006aaf:	eb 14                	jmp    c0006ac5 <f_utime+0xbb>
c0006ab1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ab5:	83 c0 16             	add    eax,0x16
c0006ab8:	e8 ca af ff ff       	call   c0001a87 <st_dword>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	e8 4c d8 ff ff       	call   c000431a <sync_fs>
c0006ace:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ad2:	83 ec 0c             	sub    esp,0xc
c0006ad5:	53                   	push   ebx
c0006ad6:	e8 7f 17 00 00       	call   c000825a <ff_memfree>
c0006adb:	83 c4 10             	add    esp,0x10
c0006ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ae2:	83 c4 64             	add    esp,0x64
c0006ae5:	5b                   	pop    ebx
c0006ae6:	5e                   	pop    esi
c0006ae7:	c3                   	ret    

c0006ae8 <f_getlabel>:
c0006ae8:	55                   	push   ebp
c0006ae9:	31 c9                	xor    ecx,ecx
c0006aeb:	57                   	push   edi
c0006aec:	56                   	push   esi
c0006aed:	53                   	push   ebx
c0006aee:	83 ec 6c             	sub    esp,0x6c
c0006af1:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006af5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006afc:	e8 a0 b9 ff ff       	call   c00024a1 <mount_volume>
c0006b01:	89 c6                	mov    esi,eax
c0006b03:	85 c0                	test   eax,eax
c0006b05:	0f 85 c1 01 00 00    	jne    c0006ccc <f_getlabel+0x1e4>
c0006b0b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b13:	0f 84 5f 01 00 00    	je     c0006c78 <f_getlabel+0x190>
c0006b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b1d:	31 d2                	xor    edx,edx
c0006b1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b23:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2f:	e8 39 c4 ff ff       	call   c0002f6d <dir_sdi>
c0006b34:	85 c0                	test   eax,eax
c0006b36:	0f 85 2d 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b3c:	ba 01 00 00 00       	mov    edx,0x1
c0006b41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b45:	e8 33 cc ff ff       	call   c000377d <dir_read>
c0006b4a:	85 c0                	test   eax,eax
c0006b4c:	0f 85 17 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b59:	74 09                	je     c0006b64 <f_getlabel+0x7c>
c0006b5b:	31 db                	xor    ebx,ebx
c0006b5d:	31 c9                	xor    ecx,ecx
c0006b5f:	e9 c8 00 00 00       	jmp    c0006c2c <f_getlabel+0x144>
c0006b64:	31 ed                	xor    ebp,ebp
c0006b66:	31 db                	xor    ebx,ebx
c0006b68:	31 ff                	xor    edi,edi
c0006b6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b72:	39 fa                	cmp    edx,edi
c0006b74:	76 4b                	jbe    c0006bc1 <f_getlabel+0xd9>
c0006b76:	47                   	inc    edi
c0006b77:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b7a:	01 d0                	add    eax,edx
c0006b7c:	e8 90 ae ff ff       	call   c0001a11 <ld_word>
c0006b81:	66 85 ed             	test   bp,bp
c0006b84:	75 0d                	jne    c0006b93 <f_getlabel+0xab>
c0006b86:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b8c:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b91:	76 28                	jbe    c0006bbb <f_getlabel+0xd3>
c0006b93:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b9a:	89 e9                	mov    ecx,ebp
c0006b9c:	01 da                	add    edx,ebx
c0006b9e:	c1 e1 10             	shl    ecx,0x10
c0006ba1:	0f b7 c0             	movzx  eax,ax
c0006ba4:	09 c8                	or     eax,ecx
c0006ba6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bab:	e8 01 b0 ff ff       	call   c0001bb1 <put_utf>
c0006bb0:	84 c0                	test   al,al
c0006bb2:	74 0b                	je     c0006bbf <f_getlabel+0xd7>
c0006bb4:	0f b6 c0             	movzx  eax,al
c0006bb7:	01 c3                	add    ebx,eax
c0006bb9:	31 c0                	xor    eax,eax
c0006bbb:	89 c5                	mov    ebp,eax
c0006bbd:	eb ab                	jmp    c0006b6a <f_getlabel+0x82>
c0006bbf:	31 db                	xor    ebx,ebx
c0006bc1:	66 85 ed             	test   bp,bp
c0006bc4:	74 02                	je     c0006bc8 <f_getlabel+0xe0>
c0006bc6:	31 db                	xor    ebx,ebx
c0006bc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bcf:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bd3:	e9 a0 00 00 00       	jmp    c0006c78 <f_getlabel+0x190>
c0006bd8:	83 ff 0b             	cmp    edi,0xb
c0006bdb:	74 11                	je     c0006bee <f_getlabel+0x106>
c0006bdd:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006be2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006be6:	8d 79 02             	lea    edi,[ecx+0x2]
c0006be9:	c1 e0 08             	shl    eax,0x8
c0006bec:	09 c2                	or     edx,eax
c0006bee:	0f b7 d2             	movzx  edx,dx
c0006bf1:	50                   	push   eax
c0006bf2:	50                   	push   eax
c0006bf3:	68 b5 01 00 00       	push   0x1b5
c0006bf8:	52                   	push   edx
c0006bf9:	e8 03 17 00 00       	call   c0008301 <ff_oem2uni>
c0006bfe:	83 c4 10             	add    esp,0x10
c0006c01:	66 85 c0             	test   ax,ax
c0006c04:	74 46                	je     c0006c4c <f_getlabel+0x164>
c0006c06:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c0d:	0f b7 c0             	movzx  eax,ax
c0006c10:	01 da                	add    edx,ebx
c0006c12:	b9 04 00 00 00       	mov    ecx,0x4
c0006c17:	e8 95 af ff ff       	call   c0001bb1 <put_utf>
c0006c1c:	84 c0                	test   al,al
c0006c1e:	74 2c                	je     c0006c4c <f_getlabel+0x164>
c0006c20:	0f b6 c0             	movzx  eax,al
c0006c23:	01 c3                	add    ebx,eax
c0006c25:	83 ff 0b             	cmp    edi,0xb
c0006c28:	74 24                	je     c0006c4e <f_getlabel+0x166>
c0006c2a:	89 f9                	mov    ecx,edi
c0006c2c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c30:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c33:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c38:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c41:	e8 9f ae ff ff       	call   c0001ae5 <dbc_1st>
c0006c46:	85 c0                	test   eax,eax
c0006c48:	74 a4                	je     c0006bee <f_getlabel+0x106>
c0006c4a:	eb 8c                	jmp    c0006bd8 <f_getlabel+0xf0>
c0006c4c:	31 db                	xor    ebx,ebx
c0006c4e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c55:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c58:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c5f:	74 17                	je     c0006c78 <f_getlabel+0x190>
c0006c61:	4b                   	dec    ebx
c0006c62:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c65:	74 ee                	je     c0006c55 <f_getlabel+0x16d>
c0006c67:	eb 0f                	jmp    c0006c78 <f_getlabel+0x190>
c0006c69:	83 f8 04             	cmp    eax,0x4
c0006c6c:	75 5c                	jne    c0006cca <f_getlabel+0x1e2>
c0006c6e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c78:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c80:	74 4a                	je     c0006ccc <f_getlabel+0x1e4>
c0006c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c86:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c89:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c8c:	e8 5e b5 ff ff       	call   c00021ef <move_window>
c0006c91:	89 c6                	mov    esi,eax
c0006c93:	85 c0                	test   eax,eax
c0006c95:	75 35                	jne    c0006ccc <f_getlabel+0x1e4>
c0006c97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c9b:	b8 43 00 00 00       	mov    eax,0x43
c0006ca0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ca2:	80 f9 03             	cmp    cl,0x3
c0006ca5:	74 0f                	je     c0006cb6 <f_getlabel+0x1ce>
c0006ca7:	31 c0                	xor    eax,eax
c0006ca9:	80 f9 04             	cmp    cl,0x4
c0006cac:	0f 94 c0             	sete   al
c0006caf:	48                   	dec    eax
c0006cb0:	83 e0 c3             	and    eax,0xffffffc3
c0006cb3:	83 c0 64             	add    eax,0x64
c0006cb6:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cba:	e8 5f ad ff ff       	call   c0001a1e <ld_dword>
c0006cbf:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cc6:	89 07                	mov    DWORD PTR [edi],eax
c0006cc8:	eb 02                	jmp    c0006ccc <f_getlabel+0x1e4>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	83 c4 6c             	add    esp,0x6c
c0006ccf:	89 f0                	mov    eax,esi
c0006cd1:	5b                   	pop    ebx
c0006cd2:	5e                   	pop    esi
c0006cd3:	5f                   	pop    edi
c0006cd4:	5d                   	pop    ebp
c0006cd5:	c3                   	ret    

c0006cd6 <f_setlabel>:
c0006cd6:	56                   	push   esi
c0006cd7:	b9 02 00 00 00       	mov    ecx,0x2
c0006cdc:	53                   	push   ebx
c0006cdd:	83 ec 74             	sub    esp,0x74
c0006ce0:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ce4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ceb:	e8 b1 b7 ff ff       	call   c00024a1 <mount_volume>
c0006cf0:	89 c6                	mov    esi,eax
c0006cf2:	85 c0                	test   eax,eax
c0006cf4:	0f 85 41 02 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006cfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cfe:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d01:	0f 85 8e 00 00 00    	jne    c0006d95 <f_setlabel+0xbf>
c0006d07:	b9 16 00 00 00       	mov    ecx,0x16
c0006d0c:	31 d2                	xor    edx,edx
c0006d0e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d12:	31 db                	xor    ebx,ebx
c0006d14:	e8 8c ad ff ff       	call   c0001aa5 <mem_set>
c0006d19:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d20:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d23:	0f 86 0a 01 00 00    	jbe    c0006e33 <f_setlabel+0x15d>
c0006d29:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d30:	e8 b6 ad ff ff       	call   c0001aeb <tchar2uni>
c0006d35:	89 c6                	mov    esi,eax
c0006d37:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d3c:	76 2a                	jbe    c0006d68 <f_setlabel+0x92>
c0006d3e:	83 f8 ff             	cmp    eax,0xffffffff
c0006d41:	74 05                	je     c0006d48 <f_setlabel+0x72>
c0006d43:	83 fb 09             	cmp    ebx,0x9
c0006d46:	76 0a                	jbe    c0006d52 <f_setlabel+0x7c>
c0006d48:	be 06 00 00 00       	mov    esi,0x6
c0006d4d:	e9 e9 01 00 00       	jmp    c0006f3b <f_setlabel+0x265>
c0006d52:	89 c2                	mov    edx,eax
c0006d54:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d58:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d5b:	c1 ea 10             	shr    edx,0x10
c0006d5e:	01 c8                	add    eax,ecx
c0006d60:	43                   	inc    ebx
c0006d61:	e8 1d ad ff ff       	call   c0001a83 <st_word>
c0006d66:	eb 04                	jmp    c0006d6c <f_setlabel+0x96>
c0006d68:	85 c0                	test   eax,eax
c0006d6a:	74 dc                	je     c0006d48 <f_setlabel+0x72>
c0006d6c:	89 f2                	mov    edx,esi
c0006d6e:	b8 57 7c 02 c0       	mov    eax,0xc0027c57
c0006d73:	e8 5b ad ff ff       	call   c0001ad3 <chk_chr>
c0006d78:	85 c0                	test   eax,eax
c0006d7a:	75 cc                	jne    c0006d48 <f_setlabel+0x72>
c0006d7c:	83 fb 0a             	cmp    ebx,0xa
c0006d7f:	77 c7                	ja     c0006d48 <f_setlabel+0x72>
c0006d81:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d84:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d88:	0f b7 d6             	movzx  edx,si
c0006d8b:	01 c8                	add    eax,ecx
c0006d8d:	43                   	inc    ebx
c0006d8e:	e8 f0 ac ff ff       	call   c0001a83 <st_word>
c0006d93:	eb 84                	jmp    c0006d19 <f_setlabel+0x43>
c0006d95:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d9a:	ba 20 00 00 00       	mov    edx,0x20
c0006d9f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006da3:	31 db                	xor    ebx,ebx
c0006da5:	e8 fb ac ff ff       	call   c0001aa5 <mem_set>
c0006daa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006db1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006db4:	76 60                	jbe    c0006e16 <f_setlabel+0x140>
c0006db6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dbd:	e8 29 ad ff ff       	call   c0001aeb <tchar2uni>
c0006dc2:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dc7:	0f 87 7b ff ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006dcd:	83 ec 0c             	sub    esp,0xc
c0006dd0:	50                   	push   eax
c0006dd1:	e8 97 15 00 00       	call   c000836d <ff_wtoupper>
c0006dd6:	5a                   	pop    edx
c0006dd7:	59                   	pop    ecx
c0006dd8:	68 b5 01 00 00       	push   0x1b5
c0006ddd:	50                   	push   eax
c0006dde:	e8 8e 14 00 00       	call   c0008271 <ff_uni2oem>
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	89 c6                	mov    esi,eax
c0006de8:	66 85 c0             	test   ax,ax
c0006deb:	0f 84 57 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006df1:	0f b7 d0             	movzx  edx,ax
c0006df4:	b8 50 7c 02 c0       	mov    eax,0xc0027c50
c0006df9:	e8 d5 ac ff ff       	call   c0001ad3 <chk_chr>
c0006dfe:	85 c0                	test   eax,eax
c0006e00:	0f 85 42 ff ff ff    	jne    c0006d48 <f_setlabel+0x72>
c0006e06:	66 81 fe ff 00       	cmp    si,0xff
c0006e0b:	0f 87 14 01 00 00    	ja     c0006f25 <f_setlabel+0x24f>
c0006e11:	e9 fa 00 00 00       	jmp    c0006f10 <f_setlabel+0x23a>
c0006e16:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e1b:	0f 84 27 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006e21:	85 db                	test   ebx,ebx
c0006e23:	74 0e                	je     c0006e33 <f_setlabel+0x15d>
c0006e25:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e28:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e2d:	75 04                	jne    c0006e33 <f_setlabel+0x15d>
c0006e2f:	89 c3                	mov    ebx,eax
c0006e31:	eb ee                	jmp    c0006e21 <f_setlabel+0x14b>
c0006e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e37:	31 d2                	xor    edx,edx
c0006e39:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e3d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e49:	e8 1f c1 ff ff       	call   c0002f6d <dir_sdi>
c0006e4e:	89 c6                	mov    esi,eax
c0006e50:	85 c0                	test   eax,eax
c0006e52:	0f 85 e3 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006e58:	ba 01 00 00 00       	mov    edx,0x1
c0006e5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e61:	e8 17 c9 ff ff       	call   c000377d <dir_read>
c0006e66:	85 c0                	test   eax,eax
c0006e68:	75 21                	jne    c0006e8b <f_setlabel+0x1b5>
c0006e6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e6e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e72:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e75:	74 5d                	je     c0006ed4 <f_setlabel+0x1fe>
c0006e77:	85 db                	test   ebx,ebx
c0006e79:	74 0b                	je     c0006e86 <f_setlabel+0x1b0>
c0006e7b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e80:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e84:	eb 70                	jmp    c0006ef6 <f_setlabel+0x220>
c0006e86:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e89:	eb 70                	jmp    c0006efb <f_setlabel+0x225>
c0006e8b:	83 f8 04             	cmp    eax,0x4
c0006e8e:	75 7c                	jne    c0006f0c <f_setlabel+0x236>
c0006e90:	85 db                	test   ebx,ebx
c0006e92:	0f 84 a3 00 00 00    	je     c0006f3b <f_setlabel+0x265>
c0006e98:	ba 01 00 00 00       	mov    edx,0x1
c0006e9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea1:	e8 51 ca ff ff       	call   c00038f7 <dir_alloc>
c0006ea6:	89 c6                	mov    esi,eax
c0006ea8:	85 c0                	test   eax,eax
c0006eaa:	0f 85 8b 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006eb0:	31 d2                	xor    edx,edx
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	b9 20 00 00 00       	mov    ecx,0x20
c0006ebb:	e8 e5 ab ff ff       	call   c0001aa5 <mem_set>
c0006ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ec4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	75 18                	jne    c0006ee5 <f_setlabel+0x20f>
c0006ecd:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ed0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed4:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ed7:	b9 16 00 00 00       	mov    ecx,0x16
c0006edc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee0:	83 c0 02             	add    eax,0x2
c0006ee3:	eb 9b                	jmp    c0006e80 <f_setlabel+0x1aa>
c0006ee5:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ee9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eee:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ef2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef6:	e8 95 ab ff ff       	call   c0001a90 <mem_cpy>
c0006efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eff:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f07:	e8 0e d4 ff ff       	call   c000431a <sync_fs>
c0006f0c:	89 c6                	mov    esi,eax
c0006f0e:	eb 2b                	jmp    c0006f3b <f_setlabel+0x265>
c0006f10:	83 fb 0a             	cmp    ebx,0xa
c0006f13:	0f 87 2f fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f1f:	43                   	inc    ebx
c0006f20:	e9 85 fe ff ff       	jmp    c0006daa <f_setlabel+0xd4>
c0006f25:	83 fb 09             	cmp    ebx,0x9
c0006f28:	0f 87 1a fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f2e:	89 f0                	mov    eax,esi
c0006f30:	66 c1 e8 08          	shr    ax,0x8
c0006f34:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f38:	43                   	inc    ebx
c0006f39:	eb de                	jmp    c0006f19 <f_setlabel+0x243>
c0006f3b:	89 f0                	mov    eax,esi
c0006f3d:	83 c4 74             	add    esp,0x74
c0006f40:	5b                   	pop    ebx
c0006f41:	5e                   	pop    esi
c0006f42:	c3                   	ret    

c0006f43 <f_forward>:
c0006f43:	55                   	push   ebp
c0006f44:	57                   	push   edi
c0006f45:	56                   	push   esi
c0006f46:	53                   	push   ebx
c0006f47:	83 ec 2c             	sub    esp,0x2c
c0006f4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f58:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f5c:	89 d8                	mov    eax,ebx
c0006f5e:	e8 b1 b1 ff ff       	call   c0002114 <validate>
c0006f63:	89 c5                	mov    ebp,eax
c0006f65:	85 c0                	test   eax,eax
c0006f67:	0f 85 aa 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f6d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f71:	85 ed                	test   ebp,ebp
c0006f73:	0f 85 9e 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f79:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f7d:	0f 84 8f 01 00 00    	je     c0007112 <f_forward+0x1cf>
c0006f83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f86:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f89:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f8c:	bf 00 00 00 00       	mov    edi,0x0
c0006f91:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f94:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f98:	89 d1                	mov    ecx,edx
c0006f9a:	19 f9                	sbb    ecx,edi
c0006f9c:	0f 83 cf 00 00 00    	jae    c0007071 <f_forward+0x12e>
c0006fa2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fa6:	e9 c6 00 00 00       	jmp    c0007071 <f_forward+0x12e>
c0006fab:	50                   	push   eax
c0006fac:	50                   	push   eax
c0006fad:	6a 00                	push   0x0
c0006faf:	6a 00                	push   0x0
c0006fb1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fb5:	83 c4 10             	add    esp,0x10
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	0f 84 57 01 00 00    	je     c0007117 <f_forward+0x1d4>
c0006fc0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fc3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fc7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fca:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fce:	89 d7                	mov    edi,edx
c0006fd0:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fd3:	89 c6                	mov    esi,eax
c0006fd5:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fd9:	21 ce                	and    esi,ecx
c0006fdb:	89 c1                	mov    ecx,eax
c0006fdd:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fe3:	0f 84 98 00 00 00    	je     c0007081 <f_forward+0x13e>
c0006fe9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fed:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006ff0:	89 c8                	mov    eax,ecx
c0006ff2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006ff6:	e8 af ac ff ff       	call   c0001caa <clst2sect>
c0006ffb:	89 d7                	mov    edi,edx
c0006ffd:	09 c7                	or     edi,eax
c0006fff:	0f 84 9e 00 00 00    	je     c00070a3 <f_forward+0x160>
c0007005:	31 ff                	xor    edi,edi
c0007007:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000700a:	01 c6                	add    esi,eax
c000700c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007010:	11 d7                	adc    edi,edx
c0007012:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007015:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007018:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000701c:	39 fa                	cmp    edx,edi
c000701e:	0f 85 a2 00 00 00    	jne    c00070c6 <f_forward+0x183>
c0007024:	39 f0                	cmp    eax,esi
c0007026:	0f 85 9a 00 00 00    	jne    c00070c6 <f_forward+0x183>
c000702c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000702f:	ba 00 02 00 00       	mov    edx,0x200
c0007034:	25 ff 01 00 00       	and    eax,0x1ff
c0007039:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000703d:	29 c2                	sub    edx,eax
c000703f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007042:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007045:	39 d1                	cmp    ecx,edx
c0007047:	76 02                	jbe    c000704b <f_forward+0x108>
c0007049:	89 d1                	mov    ecx,edx
c000704b:	8d 73 50             	lea    esi,[ebx+0x50]
c000704e:	52                   	push   edx
c000704f:	01 c6                	add    esi,eax
c0007051:	52                   	push   edx
c0007052:	51                   	push   ecx
c0007053:	56                   	push   esi
c0007054:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007058:	83 c4 10             	add    esp,0x10
c000705b:	85 c0                	test   eax,eax
c000705d:	74 44                	je     c00070a3 <f_forward+0x160>
c000705f:	31 ff                	xor    edi,edi
c0007061:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007064:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007067:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000706b:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000706f:	01 07                	add    DWORD PTR [edi],eax
c0007071:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007076:	0f 85 2f ff ff ff    	jne    c0006fab <f_forward+0x68>
c000707c:	e9 96 00 00 00       	jmp    c0007117 <f_forward+0x1d4>
c0007081:	85 f6                	test   esi,esi
c0007083:	0f 85 60 ff ff ff    	jne    c0006fe9 <f_forward+0xa6>
c0007089:	89 d7                	mov    edi,edx
c000708b:	09 c7                	or     edi,eax
c000708d:	75 05                	jne    c0007094 <f_forward+0x151>
c000708f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007092:	eb 0a                	jmp    c000709e <f_forward+0x15b>
c0007094:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007097:	89 d8                	mov    eax,ebx
c0007099:	e8 d9 bc ff ff       	call   c0002d77 <get_fat>
c000709e:	83 f8 01             	cmp    eax,0x1
c00070a1:	77 0b                	ja     c00070ae <f_forward+0x16b>
c00070a3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070a7:	bd 02 00 00 00       	mov    ebp,0x2
c00070ac:	eb 69                	jmp    c0007117 <f_forward+0x1d4>
c00070ae:	83 f8 ff             	cmp    eax,0xffffffff
c00070b1:	75 0b                	jne    c00070be <f_forward+0x17b>
c00070b3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070b7:	bd 01 00 00 00       	mov    ebp,0x1
c00070bc:	eb 59                	jmp    c0007117 <f_forward+0x1d4>
c00070be:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070c1:	e9 23 ff ff ff       	jmp    c0006fe9 <f_forward+0xa6>
c00070c6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070ca:	79 20                	jns    c00070ec <f_forward+0x1a9>
c00070cc:	83 ec 0c             	sub    esp,0xc
c00070cf:	6a 01                	push   0x1
c00070d1:	52                   	push   edx
c00070d2:	50                   	push   eax
c00070d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070db:	50                   	push   eax
c00070dc:	e8 fb a8 ff ff       	call   c00019dc <disk_write>
c00070e1:	83 c4 20             	add    esp,0x20
c00070e4:	85 c0                	test   eax,eax
c00070e6:	75 cb                	jne    c00070b3 <f_forward+0x170>
c00070e8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070ec:	83 ec 0c             	sub    esp,0xc
c00070ef:	6a 01                	push   0x1
c00070f1:	57                   	push   edi
c00070f2:	56                   	push   esi
c00070f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070fb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ff:	50                   	push   eax
c0007100:	e8 c1 a8 ff ff       	call   c00019c6 <disk_read>
c0007105:	83 c4 20             	add    esp,0x20
c0007108:	85 c0                	test   eax,eax
c000710a:	0f 84 1c ff ff ff    	je     c000702c <f_forward+0xe9>
c0007110:	eb a1                	jmp    c00070b3 <f_forward+0x170>
c0007112:	bd 07 00 00 00       	mov    ebp,0x7
c0007117:	83 c4 2c             	add    esp,0x2c
c000711a:	89 e8                	mov    eax,ebp
c000711c:	5b                   	pop    ebx
c000711d:	5e                   	pop    esi
c000711e:	5f                   	pop    edi
c000711f:	5d                   	pop    ebp
c0007120:	c3                   	ret    

c0007121 <f_mkfs>:
c0007121:	55                   	push   ebp
c0007122:	57                   	push   edi
c0007123:	56                   	push   esi
c0007124:	53                   	push   ebx
c0007125:	bb 0b 00 00 00       	mov    ebx,0xb
c000712a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007130:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007137:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000713e:	e8 b0 ae ff ff       	call   c0001ff3 <get_ldnumber>
c0007143:	85 c0                	test   eax,eax
c0007145:	0f 88 ec 10 00 00    	js     c0008237 <f_mkfs+0x1116>
c000714b:	8b 14 85 e0 c7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3820]
c0007152:	85 d2                	test   edx,edx
c0007154:	74 03                	je     c0007159 <f_mkfs+0x38>
c0007156:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007159:	85 f6                	test   esi,esi
c000715b:	75 05                	jne    c0007162 <f_mkfs+0x41>
c000715d:	be 40 7c 02 c0       	mov    esi,0xc0027c40
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	0f b6 c0             	movzx  eax,al
c0007168:	bb 03 00 00 00       	mov    ebx,0x3
c000716d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007171:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007175:	e8 49 a8 ff ff       	call   c00019c3 <disk_initialize>
c000717a:	83 c4 10             	add    esp,0x10
c000717d:	a8 01                	test   al,0x1
c000717f:	0f 85 b2 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007185:	bb 0a 00 00 00       	mov    ebx,0xa
c000718a:	a8 04                	test   al,0x4
c000718c:	0f 85 a5 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007192:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007195:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007199:	85 c0                	test   eax,eax
c000719b:	75 20                	jne    c00071bd <f_mkfs+0x9c>
c000719d:	51                   	push   ecx
c000719e:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071a2:	50                   	push   eax
c00071a3:	6a 03                	push   0x3
c00071a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a9:	e8 44 a8 ff ff       	call   c00019f2 <disk_ioctl>
c00071ae:	83 c4 10             	add    esp,0x10
c00071b1:	85 c0                	test   eax,eax
c00071b3:	74 08                	je     c00071bd <f_mkfs+0x9c>
c00071b5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071bd:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071c1:	8d 42 ff             	lea    eax,[edx-0x1]
c00071c4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071c9:	77 04                	ja     c00071cf <f_mkfs+0xae>
c00071cb:	85 c2                	test   edx,eax
c00071cd:	74 08                	je     c00071d7 <f_mkfs+0xb6>
c00071cf:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071d7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071da:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071de:	48                   	dec    eax
c00071df:	3c 01                	cmp    al,0x1
c00071e1:	76 05                	jbe    c00071e8 <f_mkfs+0xc7>
c00071e3:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071e8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071ef:	48                   	dec    eax
c00071f0:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071f5:	77 07                	ja     c00071fe <f_mkfs+0xdd>
c00071f7:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071fc:	74 08                	je     c0007206 <f_mkfs+0xe5>
c00071fe:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007206:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007209:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000720f:	77 07                	ja     c0007218 <f_mkfs+0xf7>
c0007211:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007214:	85 d8                	test   eax,ebx
c0007216:	74 02                	je     c000721a <f_mkfs+0xf9>
c0007218:	31 db                	xor    ebx,ebx
c000721a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007225:	77 0a                	ja     c0007231 <f_mkfs+0x110>
c0007227:	bb 11 00 00 00       	mov    ebx,0x11
c000722c:	e9 06 10 00 00       	jmp    c0008237 <f_mkfs+0x1116>
c0007231:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007238:	8b 36                	mov    esi,DWORD PTR [esi]
c000723a:	85 ed                	test   ebp,ebp
c000723c:	75 1e                	jne    c000725c <f_mkfs+0x13b>
c000723e:	83 ec 0c             	sub    esp,0xc
c0007241:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007248:	25 00 fe ff ff       	and    eax,0xfffffe00
c000724d:	50                   	push   eax
c000724e:	e8 f1 0f 00 00       	call   c0008244 <ff_memalloc>
c0007253:	83 c4 10             	add    esp,0x10
c0007256:	89 c5                	mov    ebp,eax
c0007258:	85 c0                	test   eax,eax
c000725a:	74 cb                	je     c0007227 <f_mkfs+0x106>
c000725c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007264:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000726c:	52                   	push   edx
c000726d:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007271:	50                   	push   eax
c0007272:	6a 01                	push   0x1
c0007274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007278:	e8 75 a7 ff ff       	call   c00019f2 <disk_ioctl>
c000727d:	83 c4 10             	add    esp,0x10
c0007280:	85 c0                	test   eax,eax
c0007282:	0f 85 4a 0f 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007288:	89 f1                	mov    ecx,esi
c000728a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007292:	83 e1 0f             	and    ecx,0xf
c0007295:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000729d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072a1:	83 e6 08             	and    esi,0x8
c00072a4:	75 56                	jne    c00072fc <f_mkfs+0x1db>
c00072a6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072aa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072ae:	83 ff 00             	cmp    edi,0x0
c00072b1:	76 20                	jbe    c00072d3 <f_mkfs+0x1b2>
c00072b3:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072b8:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072c0:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072c6:	83 d7 ff             	adc    edi,0xffffffff
c00072c9:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072cd:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072d1:	eb 21                	jmp    c00072f4 <f_mkfs+0x1d3>
c00072d3:	ba 3f 00 00 00       	mov    edx,0x3f
c00072d8:	39 f2                	cmp    edx,esi
c00072da:	19 f8                	sbb    eax,edi
c00072dc:	73 1e                	jae    c00072fc <f_mkfs+0x1db>
c00072de:	83 c6 c1             	add    esi,0xffffffc1
c00072e1:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072e9:	83 d7 ff             	adc    edi,0xffffffff
c00072ec:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072f0:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072fc:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007300:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007304:	89 04 24             	mov    DWORD PTR [esp],eax
c0007307:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000730b:	31 c0                	xor    eax,eax
c000730d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007312:	89 c7                	mov    edi,eax
c0007314:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007317:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000731b:	0f 83 c5 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c0007321:	89 df                	mov    edi,ebx
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000732a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007331:	c1 ef 09             	shr    edi,0x9
c0007334:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007339:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000733d:	74 29                	je     c0007368 <f_mkfs+0x247>
c000733f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007345:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000734a:	0f 97 c2             	seta   dl
c000734d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007350:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007354:	0f 92 c0             	setb   al
c0007357:	08 c2                	or     dl,al
c0007359:	75 5b                	jne    c00073b6 <f_mkfs+0x295>
c000735b:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000735f:	83 e0 07             	and    eax,0x7
c0007362:	3c 04                	cmp    al,0x4
c0007364:	74 50                	je     c00073b6 <f_mkfs+0x295>
c0007366:	eb 1b                	jmp    c0007383 <f_mkfs+0x262>
c0007368:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000736d:	0f 87 73 0a 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007373:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007379:	76 08                	jbe    c0007383 <f_mkfs+0x262>
c000737b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007383:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007387:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000738b:	83 e0 01             	and    eax,0x1
c000738e:	80 e1 02             	and    cl,0x2
c0007391:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007395:	74 0d                	je     c00073a4 <f_mkfs+0x283>
c0007397:	84 c0                	test   al,al
c0007399:	0f 84 53 09 00 00    	je     c0007cf2 <f_mkfs+0xbd1>
c000739f:	e9 12 08 00 00       	jmp    c0007bb6 <f_mkfs+0xa95>
c00073a4:	bb 13 00 00 00       	mov    ebx,0x13
c00073a9:	84 c0                	test   al,al
c00073ab:	0f 85 05 08 00 00    	jne    c0007bb6 <f_mkfs+0xa95>
c00073b1:	e9 39 0e 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c00073b6:	31 c0                	xor    eax,eax
c00073b8:	ba ff 0f 00 00       	mov    edx,0xfff
c00073bd:	89 c7                	mov    edi,eax
c00073bf:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073c2:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073c6:	0f 83 1a 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00073cc:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073d2:	77 39                	ja     c000740d <f_mkfs+0x2ec>
c00073d4:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073d9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073e1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073e4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073e8:	73 08                	jae    c00073f2 <f_mkfs+0x2d1>
c00073ea:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073f2:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073fa:	b8 00 00 00 00       	mov    eax,0x0
c00073ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007403:	73 08                	jae    c000740d <f_mkfs+0x2ec>
c0007405:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000740d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007411:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007415:	83 c0 20             	add    eax,0x20
c0007418:	83 d2 00             	adc    edx,0x0
c000741b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000741f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007427:	31 d2                	xor    edx,edx
c0007429:	31 ff                	xor    edi,edi
c000742b:	52                   	push   edx
c000742c:	89 fb                	mov    ebx,edi
c000742e:	50                   	push   eax
c000742f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007433:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007437:	e8 80 de 01 00       	call   c00252bc <__udivdi3>
c000743c:	83 c4 10             	add    esp,0x10
c000743f:	c1 e0 02             	shl    eax,0x2
c0007442:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007446:	05 07 02 00 00       	add    eax,0x207
c000744b:	89 f1                	mov    ecx,esi
c000744d:	c1 e8 09             	shr    eax,0x9
c0007450:	83 c1 ff             	add    ecx,0xffffffff
c0007453:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007457:	83 d3 ff             	adc    ebx,0xffffffff
c000745a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000745e:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007462:	31 d2                	xor    edx,edx
c0007464:	01 c8                	add    eax,ecx
c0007466:	11 da                	adc    edx,ebx
c0007468:	89 c1                	mov    ecx,eax
c000746a:	f7 de                	neg    esi
c000746c:	89 d0                	mov    eax,edx
c000746e:	83 d7 00             	adc    edi,0x0
c0007471:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007475:	f7 df                	neg    edi
c0007477:	21 f1                	and    ecx,esi
c0007479:	21 f8                	and    eax,edi
c000747b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000747f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007483:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007487:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000748b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000748f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007492:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007496:	0f ac d0 01          	shrd   eax,edx,0x1
c000749a:	89 df                	mov    edi,ebx
c000749c:	d1 ea                	shr    edx,1
c000749e:	39 c1                	cmp    ecx,eax
c00074a0:	19 d7                	sbb    edi,edx
c00074a2:	0f 83 3e 09 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00074a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ac:	31 d2                	xor    edx,edx
c00074ae:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074b6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074bd:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074c1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074cd:	83 f8 0f             	cmp    eax,0xf
c00074d0:	0f 86 10 09 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c00074d6:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074de:	0f 87 02 09 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c00074e4:	31 d2                	xor    edx,edx
c00074e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074ea:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074f2:	83 c0 07             	add    eax,0x7
c00074f5:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074fd:	c1 e8 03             	shr    eax,0x3
c0007500:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007507:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000750b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000750f:	c1 e0 09             	shl    eax,0x9
c0007512:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007516:	48                   	dec    eax
c0007517:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000751b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000751f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007523:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007527:	31 d2                	xor    edx,edx
c0007529:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000752d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007538:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000753d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007541:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007545:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007549:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000754d:	31 ff                	xor    edi,edi
c000754f:	31 f6                	xor    esi,esi
c0007551:	31 db                	xor    ebx,ebx
c0007553:	85 ff                	test   edi,edi
c0007555:	74 05                	je     c000755c <f_mkfs+0x43b>
c0007557:	4f                   	dec    edi
c0007558:	74 44                	je     c000759e <f_mkfs+0x47d>
c000755a:	eb 4f                	jmp    c00075ab <f_mkfs+0x48a>
c000755c:	83 ec 0c             	sub    esp,0xc
c000755f:	0f b7 c3             	movzx  eax,bx
c0007562:	50                   	push   eax
c0007563:	e8 05 0e 00 00       	call   c000836d <ff_wtoupper>
c0007568:	83 c4 10             	add    esp,0x10
c000756b:	89 c1                	mov    ecx,eax
c000756d:	8d 53 01             	lea    edx,[ebx+0x1]
c0007570:	66 39 c3             	cmp    bx,ax
c0007573:	75 3e                	jne    c00075b3 <f_mkfs+0x492>
c0007575:	be 01 00 00 00       	mov    esi,0x1
c000757a:	89 df                	mov    edi,ebx
c000757c:	66 01 f7             	add    di,si
c000757f:	75 07                	jne    c0007588 <f_mkfs+0x467>
c0007581:	83 fe 7f             	cmp    esi,0x7f
c0007584:	77 31                	ja     c00075b7 <f_mkfs+0x496>
c0007586:	eb 16                	jmp    c000759e <f_mkfs+0x47d>
c0007588:	83 ec 0c             	sub    esp,0xc
c000758b:	0f b7 ff             	movzx  edi,di
c000758e:	57                   	push   edi
c000758f:	e8 d9 0d 00 00       	call   c000836d <ff_wtoupper>
c0007594:	83 c4 10             	add    esp,0x10
c0007597:	39 c7                	cmp    edi,eax
c0007599:	75 e6                	jne    c0007581 <f_mkfs+0x460>
c000759b:	46                   	inc    esi
c000759c:	eb dc                	jmp    c000757a <f_mkfs+0x459>
c000759e:	31 c0                	xor    eax,eax
c00075a0:	89 d9                	mov    ecx,ebx
c00075a2:	4e                   	dec    esi
c00075a3:	0f 95 c0             	setne  al
c00075a6:	43                   	inc    ebx
c00075a7:	89 c7                	mov    edi,eax
c00075a9:	eb 14                	jmp    c00075bf <f_mkfs+0x49e>
c00075ab:	89 f1                	mov    ecx,esi
c00075ad:	01 f3                	add    ebx,esi
c00075af:	31 ff                	xor    edi,edi
c00075b1:	eb 0c                	jmp    c00075bf <f_mkfs+0x49e>
c00075b3:	89 d3                	mov    ebx,edx
c00075b5:	eb 08                	jmp    c00075bf <f_mkfs+0x49e>
c00075b7:	bf 02 00 00 00       	mov    edi,0x2
c00075bc:	83 c9 ff             	or     ecx,0xffffffff
c00075bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c6:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075ca:	0f b6 c1             	movzx  eax,cl
c00075cd:	e8 3a a9 ff ff       	call   c0001f0c <xsum32>
c00075d2:	66 c1 e9 08          	shr    cx,0x8
c00075d6:	89 c2                	mov    edx,eax
c00075d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075db:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075df:	0f b7 c1             	movzx  eax,cx
c00075e2:	e8 25 a9 ff ff       	call   c0001f0c <xsum32>
c00075e7:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075ec:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075f0:	66 85 db             	test   bx,bx
c00075f3:	74 1f                	je     c0007614 <f_mkfs+0x4f3>
c00075f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f8:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075ff:	83 c0 02             	add    eax,0x2
c0007602:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007608:	39 c2                	cmp    edx,eax
c000760a:	74 08                	je     c0007614 <f_mkfs+0x4f3>
c000760c:	89 04 24             	mov    DWORD PTR [esp],eax
c000760f:	e9 3f ff ff ff       	jmp    c0007553 <f_mkfs+0x432>
c0007614:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007617:	83 ec 0c             	sub    esp,0xc
c000761a:	05 01 02 00 00       	add    eax,0x201
c000761f:	c1 e8 09             	shr    eax,0x9
c0007622:	50                   	push   eax
c0007623:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007627:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762f:	55                   	push   ebp
c0007630:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007634:	e8 a3 a3 ff ff       	call   c00019dc <disk_write>
c0007639:	83 c4 20             	add    esp,0x20
c000763c:	85 c0                	test   eax,eax
c000763e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007641:	0f 85 8b 0b 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007647:	89 d0                	mov    eax,edx
c0007649:	31 d2                	xor    edx,edx
c000764b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000764f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007653:	66 85 db             	test   bx,bx
c0007656:	74 04                	je     c000765c <f_mkfs+0x53b>
c0007658:	31 c0                	xor    eax,eax
c000765a:	eb b0                	jmp    c000760c <f_mkfs+0x4eb>
c000765c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007660:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007664:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007668:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000766e:	31 d2                	xor    edx,edx
c0007670:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000767b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000767f:	c1 eb 09             	shr    ebx,0x9
c0007682:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000768d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007695:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007699:	8d 70 01             	lea    esi,[eax+0x1]
c000769c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076a4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076ab:	31 d2                	xor    edx,edx
c00076ad:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00076b5:	89 c1                	mov    ecx,eax
c00076b7:	89 e8                	mov    eax,ebp
c00076b9:	e8 e7 a3 ff ff       	call   c0001aa5 <mem_set>
c00076be:	31 c0                	xor    eax,eax
c00076c0:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c3:	76 10                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076c5:	83 fe 07             	cmp    esi,0x7
c00076c8:	76 0b                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076ca:	40                   	inc    eax
c00076cb:	83 ee 08             	sub    esi,0x8
c00076ce:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076d3:	eb eb                	jmp    c00076c0 <f_mkfs+0x59f>
c00076d5:	b2 01                	mov    dl,0x1
c00076d7:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076db:	85 f6                	test   esi,esi
c00076dd:	74 0c                	je     c00076eb <f_mkfs+0x5ca>
c00076df:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076e2:	76 07                	jbe    c00076eb <f_mkfs+0x5ca>
c00076e4:	08 11                	or     BYTE PTR [ecx],dl
c00076e6:	4e                   	dec    esi
c00076e7:	d1 e2                	shl    edx,1
c00076e9:	eb f0                	jmp    c00076db <f_mkfs+0x5ba>
c00076eb:	89 df                	mov    edi,ebx
c00076ed:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076f1:	76 04                	jbe    c00076f7 <f_mkfs+0x5d6>
c00076f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076f7:	83 ec 0c             	sub    esp,0xc
c00076fa:	57                   	push   edi
c00076fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007703:	55                   	push   ebp
c0007704:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007708:	e8 cf a2 ff ff       	call   c00019dc <disk_write>
c000770d:	83 c4 20             	add    esp,0x20
c0007710:	85 c0                	test   eax,eax
c0007712:	0f 85 ba 0a 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007718:	31 d2                	xor    edx,edx
c000771a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000771e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007722:	29 fb                	sub    ebx,edi
c0007724:	0f 85 7a ff ff ff    	jne    c00076a4 <f_mkfs+0x583>
c000772a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000772e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007736:	31 f6                	xor    esi,esi
c0007738:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000773c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000773f:	31 d2                	xor    edx,edx
c0007741:	89 e8                	mov    eax,ebp
c0007743:	e8 5d a3 ff ff       	call   c0001aa5 <mem_set>
c0007748:	31 c9                	xor    ecx,ecx
c000774a:	85 db                	test   ebx,ebx
c000774c:	75 40                	jne    c000778e <f_mkfs+0x66d>
c000774e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007753:	89 e8                	mov    eax,ebp
c0007755:	bb 02 00 00 00       	mov    ebx,0x2
c000775a:	e8 28 a3 ff ff       	call   c0001a87 <st_dword>
c000775f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007762:	83 ca ff             	or     edx,0xffffffff
c0007765:	e8 1d a3 ff ff       	call   c0001a87 <st_dword>
c000776a:	b9 08 00 00 00       	mov    ecx,0x8
c000776f:	eb 1d                	jmp    c000778e <f_mkfs+0x66d>
c0007771:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007774:	76 3b                	jbe    c00077b1 <f_mkfs+0x690>
c0007776:	43                   	inc    ebx
c0007777:	83 fe 01             	cmp    esi,0x1
c000777a:	89 da                	mov    edx,ebx
c000777c:	77 03                	ja     c0007781 <f_mkfs+0x660>
c000777e:	83 ca ff             	or     edx,0xffffffff
c0007781:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007785:	4e                   	dec    esi
c0007786:	e8 fc a2 ff ff       	call   c0001a87 <st_dword>
c000778b:	83 c1 04             	add    ecx,0x4
c000778e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007792:	85 f6                	test   esi,esi
c0007794:	75 db                	jne    c0007771 <f_mkfs+0x650>
c0007796:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000779b:	77 14                	ja     c00077b1 <f_mkfs+0x690>
c000779d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077a1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077a8:	85 f6                	test   esi,esi
c00077aa:	74 05                	je     c00077b1 <f_mkfs+0x690>
c00077ac:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077af:	77 dd                	ja     c000778e <f_mkfs+0x66d>
c00077b1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077b9:	39 cf                	cmp    edi,ecx
c00077bb:	76 02                	jbe    c00077bf <f_mkfs+0x69e>
c00077bd:	89 cf                	mov    edi,ecx
c00077bf:	83 ec 0c             	sub    esp,0xc
c00077c2:	57                   	push   edi
c00077c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077c7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077cb:	55                   	push   ebp
c00077cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d0:	e8 07 a2 ff ff       	call   c00019dc <disk_write>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	85 c0                	test   eax,eax
c00077da:	0f 85 f2 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00077e0:	31 d2                	xor    edx,edx
c00077e2:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077e6:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077ea:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077ee:	0f 85 48 ff ff ff    	jne    c000773c <f_mkfs+0x61b>
c00077f4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077f7:	31 d2                	xor    edx,edx
c00077f9:	89 e8                	mov    eax,ebp
c00077fb:	31 ff                	xor    edi,edi
c00077fd:	e8 a3 a2 ff ff       	call   c0001aa5 <mem_set>
c0007802:	8d 45 34             	lea    eax,[ebp+0x34]
c0007805:	ba 02 00 00 00       	mov    edx,0x2
c000780a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000780e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007812:	e8 70 a2 ff ff       	call   c0001a87 <st_dword>
c0007817:	8d 45 38             	lea    eax,[ebp+0x38]
c000781a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000781e:	e8 64 a2 ff ff       	call   c0001a87 <st_dword>
c0007823:	8d 45 44             	lea    eax,[ebp+0x44]
c0007826:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000782a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000782e:	e8 54 a2 ff ff       	call   c0001a87 <st_dword>
c0007833:	8d 45 54             	lea    eax,[ebp+0x54]
c0007836:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000783a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000783e:	83 c2 02             	add    edx,0x2
c0007841:	e8 41 a2 ff ff       	call   c0001a87 <st_dword>
c0007846:	8d 45 58             	lea    eax,[ebp+0x58]
c0007849:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000784d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007851:	e8 31 a2 ff ff       	call   c0001a87 <st_dword>
c0007856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000785a:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000785f:	89 c6                	mov    esi,eax
c0007861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007865:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007869:	89 04 24             	mov    DWORD PTR [esp],eax
c000786c:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007870:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007873:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007877:	39 cb                	cmp    ebx,ecx
c0007879:	76 02                	jbe    c000787d <f_mkfs+0x75c>
c000787b:	89 cb                	mov    ebx,ecx
c000787d:	83 ec 0c             	sub    esp,0xc
c0007880:	53                   	push   ebx
c0007881:	57                   	push   edi
c0007882:	56                   	push   esi
c0007883:	55                   	push   ebp
c0007884:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007888:	e8 4f a1 ff ff       	call   c00019dc <disk_write>
c000788d:	83 c4 20             	add    esp,0x20
c0007890:	85 c0                	test   eax,eax
c0007892:	0f 85 3a 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007898:	31 d2                	xor    edx,edx
c000789a:	b9 00 02 00 00       	mov    ecx,0x200
c000789f:	89 e8                	mov    eax,ebp
c00078a1:	e8 ff a1 ff ff       	call   c0001aa5 <mem_set>
c00078a6:	31 d2                	xor    edx,edx
c00078a8:	01 de                	add    esi,ebx
c00078aa:	11 d7                	adc    edi,edx
c00078ac:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078af:	75 bf                	jne    c0007870 <f_mkfs+0x74f>
c00078b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078b9:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078c1:	b9 00 02 00 00       	mov    ecx,0x200
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	89 e8                	mov    eax,ebp
c00078ca:	e8 d6 a1 ff ff       	call   c0001aa5 <mem_set>
c00078cf:	b9 0b 00 00 00       	mov    ecx,0xb
c00078d4:	ba 20 7d 02 c0       	mov    edx,0xc0027d20
c00078d9:	89 e8                	mov    eax,ebp
c00078db:	e8 b0 a1 ff ff       	call   c0001a90 <mem_cpy>
c00078e0:	8d 45 40             	lea    eax,[ebp+0x40]
c00078e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078eb:	e8 9a a1 ff ff       	call   c0001a8a <st_qword>
c00078f0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078f4:	8d 45 48             	lea    eax,[ebp+0x48]
c00078f7:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078fb:	e8 8a a1 ff ff       	call   c0001a8a <st_qword>
c0007900:	8d 45 50             	lea    eax,[ebp+0x50]
c0007903:	ba 20 00 00 00       	mov    edx,0x20
c0007908:	e8 7a a1 ff ff       	call   c0001a87 <st_dword>
c000790d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007911:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007915:	e8 6d a1 ff ff       	call   c0001a87 <st_dword>
c000791a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007926:	e8 5c a1 ff ff       	call   c0001a87 <st_dword>
c000792b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000792e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007932:	e8 50 a1 ff ff       	call   c0001a87 <st_dword>
c0007937:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000793b:	8d 50 02             	lea    edx,[eax+0x2]
c000793e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007941:	e8 41 a1 ff ff       	call   c0001a87 <st_dword>
c0007946:	8d 45 64             	lea    eax,[ebp+0x64]
c0007949:	ba 00 00 21 50       	mov    edx,0x50210000
c000794e:	e8 34 a1 ff ff       	call   c0001a87 <st_dword>
c0007953:	8d 45 68             	lea    eax,[ebp+0x68]
c0007956:	ba 00 01 00 00       	mov    edx,0x100
c000795b:	e8 23 a1 ff ff       	call   c0001a83 <st_word>
c0007960:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007964:	b8 0a 00 00 00       	mov    eax,0xa
c0007969:	48                   	dec    eax
c000796a:	74 05                	je     c0007971 <f_mkfs+0x850>
c000796c:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000796f:	eb f8                	jmp    c0007969 <f_mkfs+0x848>
c0007971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007975:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007979:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000797d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007981:	74 05                	je     c0007988 <f_mkfs+0x867>
c0007983:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007986:	eb f5                	jmp    c000797d <f_mkfs+0x85c>
c0007988:	8d 45 78             	lea    eax,[ebp+0x78]
c000798b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007990:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007996:	31 db                	xor    ebx,ebx
c0007998:	e8 e6 a0 ff ff       	call   c0001a83 <st_word>
c000799d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079a3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00079ab:	e8 d3 a0 ff ff       	call   c0001a83 <st_word>
c00079b0:	31 c9                	xor    ecx,ecx
c00079b2:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079b5:	83 f8 01             	cmp    eax,0x1
c00079b8:	76 13                	jbe    c00079cd <f_mkfs+0x8ac>
c00079ba:	83 f9 70             	cmp    ecx,0x70
c00079bd:	74 0e                	je     c00079cd <f_mkfs+0x8ac>
c00079bf:	89 da                	mov    edx,ebx
c00079c1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079c6:	e8 41 a5 ff ff       	call   c0001f0c <xsum32>
c00079cb:	89 c3                	mov    ebx,eax
c00079cd:	41                   	inc    ecx
c00079ce:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079d4:	75 dc                	jne    c00079b2 <f_mkfs+0x891>
c00079d6:	89 f0                	mov    eax,esi
c00079d8:	89 fa                	mov    edx,edi
c00079da:	83 c0 01             	add    eax,0x1
c00079dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079e1:	83 d2 00             	adc    edx,0x0
c00079e4:	83 ec 0c             	sub    esp,0xc
c00079e7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079eb:	6a 01                	push   0x1
c00079ed:	57                   	push   edi
c00079ee:	56                   	push   esi
c00079ef:	55                   	push   ebp
c00079f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079f4:	e8 e3 9f ff ff       	call   c00019dc <disk_write>
c00079f9:	83 c4 20             	add    esp,0x20
c00079fc:	85 c0                	test   eax,eax
c00079fe:	0f 85 ce 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a04:	31 d2                	xor    edx,edx
c0007a06:	b9 00 02 00 00       	mov    ecx,0x200
c0007a0b:	89 e8                	mov    eax,ebp
c0007a0d:	e8 93 a0 ff ff       	call   c0001aa5 <mem_set>
c0007a12:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a17:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a1a:	e8 64 a0 ff ff       	call   c0001a83 <st_word>
c0007a1f:	89 f0                	mov    eax,esi
c0007a21:	89 fa                	mov    edx,edi
c0007a23:	83 c0 09             	add    eax,0x9
c0007a26:	83 d2 00             	adc    edx,0x0
c0007a29:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a30:	31 c9                	xor    ecx,ecx
c0007a32:	41                   	inc    ecx
c0007a33:	89 da                	mov    edx,ebx
c0007a35:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a3a:	e8 cd a4 ff ff       	call   c0001f0c <xsum32>
c0007a3f:	89 c3                	mov    ebx,eax
c0007a41:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a47:	75 e9                	jne    c0007a32 <f_mkfs+0x911>
c0007a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a4d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a51:	83 c0 01             	add    eax,0x1
c0007a54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a58:	83 d2 00             	adc    edx,0x0
c0007a5b:	83 ec 0c             	sub    esp,0xc
c0007a5e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a62:	6a 01                	push   0x1
c0007a64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a6c:	55                   	push   ebp
c0007a6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a71:	e8 66 9f ff ff       	call   c00019dc <disk_write>
c0007a76:	83 c4 20             	add    esp,0x20
c0007a79:	85 c0                	test   eax,eax
c0007a7b:	0f 85 51 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a85:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a89:	75 09                	jne    c0007a94 <f_mkfs+0x973>
c0007a8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a8e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a92:	74 12                	je     c0007aa6 <f_mkfs+0x985>
c0007a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007aa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aa4:	eb 8a                	jmp    c0007a30 <f_mkfs+0x90f>
c0007aa6:	31 d2                	xor    edx,edx
c0007aa8:	b9 00 02 00 00       	mov    ecx,0x200
c0007aad:	89 e8                	mov    eax,ebp
c0007aaf:	e8 f1 9f ff ff       	call   c0001aa5 <mem_set>
c0007ab4:	83 c6 0b             	add    esi,0xb
c0007ab7:	83 d7 00             	adc    edi,0x0
c0007aba:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007abe:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ac2:	31 c9                	xor    ecx,ecx
c0007ac4:	41                   	inc    ecx
c0007ac5:	89 da                	mov    edx,ebx
c0007ac7:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007acc:	e8 3b a4 ff ff       	call   c0001f0c <xsum32>
c0007ad1:	89 c3                	mov    ebx,eax
c0007ad3:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ad9:	75 e9                	jne    c0007ac4 <f_mkfs+0x9a3>
c0007adb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ade:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ae2:	83 c6 01             	add    esi,0x1
c0007ae5:	83 d7 00             	adc    edi,0x0
c0007ae8:	83 ec 0c             	sub    esp,0xc
c0007aeb:	6a 01                	push   0x1
c0007aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af5:	55                   	push   ebp
c0007af6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007afa:	e8 dd 9e ff ff       	call   c00019dc <disk_write>
c0007aff:	83 c4 20             	add    esp,0x20
c0007b02:	85 c0                	test   eax,eax
c0007b04:	0f 85 c8 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b0a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b0e:	75 06                	jne    c0007b16 <f_mkfs+0x9f5>
c0007b10:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b14:	74 09                	je     c0007b1f <f_mkfs+0x9fe>
c0007b16:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b19:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b1d:	eb a3                	jmp    c0007ac2 <f_mkfs+0x9a1>
c0007b1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b23:	89 da                	mov    edx,ebx
c0007b25:	01 e8                	add    eax,ebp
c0007b27:	e8 5b 9f ff ff       	call   c0001a87 <st_dword>
c0007b2c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b31:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b39:	75 e4                	jne    c0007b1f <f_mkfs+0x9fe>
c0007b3b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b3e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b42:	83 c6 02             	add    esi,0x2
c0007b45:	83 d7 00             	adc    edi,0x0
c0007b48:	83 ec 0c             	sub    esp,0xc
c0007b4b:	6a 01                	push   0x1
c0007b4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b55:	55                   	push   ebp
c0007b56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b5a:	e8 7d 9e ff ff       	call   c00019dc <disk_write>
c0007b5f:	83 c4 20             	add    esp,0x20
c0007b62:	85 c0                	test   eax,eax
c0007b64:	0f 85 68 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b6a:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b6f:	74 0d                	je     c0007b7e <f_mkfs+0xa5d>
c0007b71:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b79:	e9 43 fd ff ff       	jmp    c00078c1 <f_mkfs+0x7a0>
c0007b7e:	b1 07                	mov    cl,0x7
c0007b80:	e9 e3 05 00 00       	jmp    c0008168 <f_mkfs+0x1047>
c0007b85:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b8a:	0f 85 4f 02 00 00    	jne    c0007ddf <f_mkfs+0xcbe>
c0007b90:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b95:	0f 86 22 02 00 00    	jbe    c0007dbd <f_mkfs+0xc9c>
c0007b9b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ba0:	0f 85 81 06 00 00    	jne    c0008227 <f_mkfs+0x1106>
c0007ba6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ba9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bad:	83 f8 40             	cmp    eax,0x40
c0007bb0:	0f 87 51 06 00 00    	ja     c0008207 <f_mkfs+0x10e6>
c0007bb6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bba:	85 ff                	test   edi,edi
c0007bbc:	75 1c                	jne    c0007bda <f_mkfs+0xab9>
c0007bbe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bc1:	ba 20 7c 02 c0       	mov    edx,0xc0027c20
c0007bc6:	c1 e9 0c             	shr    ecx,0xc
c0007bc9:	bf 01 00 00 00       	mov    edi,0x1
c0007bce:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bd1:	66 85 c0             	test   ax,ax
c0007bd4:	0f 85 95 01 00 00    	jne    c0007d6f <f_mkfs+0xc4e>
c0007bda:	31 d2                	xor    edx,edx
c0007bdc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bdf:	f7 f7                	div    edi
c0007be1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007be6:	0f 86 95 01 00 00    	jbe    c0007d81 <f_mkfs+0xc60>
c0007bec:	83 c0 02             	add    eax,0x2
c0007bef:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bf4:	01 c0                	add    eax,eax
c0007bf6:	05 ff 01 00 00       	add    eax,0x1ff
c0007bfb:	be 01 00 00 00       	mov    esi,0x1
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c0b:	c1 e0 05             	shl    eax,0x5
c0007c0e:	c1 e8 09             	shr    eax,0x9
c0007c11:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c15:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c20:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c24:	89 f0                	mov    eax,esi
c0007c26:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c2a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c32:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c3a:	31 d2                	xor    edx,edx
c0007c3c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c41:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c45:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c49:	31 db                	xor    ebx,ebx
c0007c4b:	01 c8                	add    eax,ecx
c0007c4d:	11 da                	adc    edx,ebx
c0007c4f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c53:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c57:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c5b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c5f:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c63:	f7 da                	neg    edx
c0007c65:	21 d1                	and    ecx,edx
c0007c67:	29 d9                	sub    ecx,ebx
c0007c69:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c6e:	0f 85 20 01 00 00    	jne    c0007d94 <f_mkfs+0xc73>
c0007c74:	31 db                	xor    ebx,ebx
c0007c76:	01 ce                	add    esi,ecx
c0007c78:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c7c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c80:	31 d2                	xor    edx,edx
c0007c82:	89 f8                	mov    eax,edi
c0007c84:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c88:	c1 e0 04             	shl    eax,0x4
c0007c8b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c8f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c93:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c97:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c9b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c9e:	19 d3                	sbb    ebx,edx
c0007ca0:	0f 82 40 01 00 00    	jb     c0007de6 <f_mkfs+0xcc5>
c0007ca6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ca9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cad:	89 c8                	mov    eax,ecx
c0007caf:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cb4:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cb8:	29 f0                	sub    eax,esi
c0007cba:	29 d0                	sub    eax,edx
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	f7 f7                	div    edi
c0007cc0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cc5:	89 c3                	mov    ebx,eax
c0007cc7:	0f 85 b8 fe ff ff    	jne    c0007b85 <f_mkfs+0xa64>
c0007ccd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cd2:	0f 87 1d 01 00 00    	ja     c0007df5 <f_mkfs+0xcd4>
c0007cd8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cdd:	0f 85 03 01 00 00    	jne    c0007de6 <f_mkfs+0xcc5>
c0007ce3:	83 ff 01             	cmp    edi,0x1
c0007ce6:	0f 86 fa 00 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c0007cec:	d1 ef                	shr    edi,1
c0007cee:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cf2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cf6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cf9:	85 db                	test   ebx,ebx
c0007cfb:	75 2d                	jne    c0007d2a <f_mkfs+0xc09>
c0007cfd:	89 cb                	mov    ebx,ecx
c0007cff:	ba 30 7c 02 c0       	mov    edx,0xc0027c30
c0007d04:	c1 eb 11             	shr    ebx,0x11
c0007d07:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d0f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d12:	66 85 c0             	test   ax,ax
c0007d15:	74 11                	je     c0007d28 <f_mkfs+0xc07>
c0007d17:	83 c2 02             	add    edx,0x2
c0007d1a:	39 d8                	cmp    eax,ebx
c0007d1c:	77 0a                	ja     c0007d28 <f_mkfs+0xc07>
c0007d1e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d22:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d26:	eb e7                	jmp    c0007d0f <f_mkfs+0xbee>
c0007d28:	31 db                	xor    ebx,ebx
c0007d2a:	31 d2                	xor    edx,edx
c0007d2c:	89 c8                	mov    eax,ecx
c0007d2e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d32:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d39:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d3e:	c1 ea 09             	shr    edx,0x9
c0007d41:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d46:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d4a:	0f 87 96 00 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007d50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d54:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d5c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d60:	be 20 00 00 00       	mov    esi,0x20
c0007d65:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d6a:	e9 a6 fe ff ff       	jmp    c0007c15 <f_mkfs+0xaf4>
c0007d6f:	83 c2 02             	add    edx,0x2
c0007d72:	39 c8                	cmp    eax,ecx
c0007d74:	0f 87 60 fe ff ff    	ja     c0007bda <f_mkfs+0xab9>
c0007d7a:	01 ff                	add    edi,edi
c0007d7c:	e9 4d fe ff ff       	jmp    c0007bce <f_mkfs+0xaad>
c0007d81:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d84:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d89:	40                   	inc    eax
c0007d8a:	d1 e8                	shr    eax,1
c0007d8c:	83 c0 03             	add    eax,0x3
c0007d8f:	e9 62 fe ff ff       	jmp    c0007bf6 <f_mkfs+0xad5>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	89 c8                	mov    eax,ecx
c0007d98:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d9c:	85 d2                	test   edx,edx
c0007d9e:	74 0c                	je     c0007dac <f_mkfs+0xc8b>
c0007da0:	49                   	dec    ecx
c0007da1:	46                   	inc    esi
c0007da2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007da7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007dac:	89 c8                	mov    eax,ecx
c0007dae:	31 d2                	xor    edx,edx
c0007db0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007db4:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007db8:	e9 c3 fe ff ff       	jmp    c0007c80 <f_mkfs+0xb5f>
c0007dbd:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dc2:	77 31                	ja     c0007df5 <f_mkfs+0xcd4>
c0007dc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dc9:	75 1b                	jne    c0007de6 <f_mkfs+0xcc5>
c0007dcb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dd2:	3d 80 00 00 00       	cmp    eax,0x80
c0007dd7:	0f 86 d9 fd ff ff    	jbe    c0007bb6 <f_mkfs+0xa95>
c0007ddd:	eb 07                	jmp    c0007de6 <f_mkfs+0xcc5>
c0007ddf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007de4:	76 0a                	jbe    c0007df0 <f_mkfs+0xccf>
c0007de6:	bb 0e 00 00 00       	mov    ebx,0xe
c0007deb:	e9 ff 03 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c0007df0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007df5:	31 d2                	xor    edx,edx
c0007df7:	b9 00 02 00 00       	mov    ecx,0x200
c0007dfc:	89 e8                	mov    eax,ebp
c0007dfe:	e8 a2 9c ff ff       	call   c0001aa5 <mem_set>
c0007e03:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e08:	ba 42 7d 02 c0       	mov    edx,0xc0027d42
c0007e0d:	89 e8                	mov    eax,ebp
c0007e0f:	e8 7c 9c ff ff       	call   c0001a90 <mem_cpy>
c0007e14:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e17:	ba 00 02 00 00       	mov    edx,0x200
c0007e1c:	e8 62 9c ff ff       	call   c0001a83 <st_word>
c0007e21:	89 f8                	mov    eax,edi
c0007e23:	0f b7 d6             	movzx  edx,si
c0007e26:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e29:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e2c:	e8 52 9c ff ff       	call   c0001a83 <st_word>
c0007e31:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e35:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e3a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e3d:	75 08                	jne    c0007e47 <f_mkfs+0xd26>
c0007e3f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e47:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e4e:	e8 30 9c ff ff       	call   c0001a83 <st_word>
c0007e53:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e58:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e5c:	39 d0                	cmp    eax,edx
c0007e5e:	b8 00 00 00 00       	mov    eax,0x0
c0007e63:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e67:	72 0a                	jb     c0007e73 <f_mkfs+0xd52>
c0007e69:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e6c:	e8 12 9c ff ff       	call   c0001a83 <st_word>
c0007e71:	eb 08                	jmp    c0007e7b <f_mkfs+0xd5a>
c0007e73:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e76:	e8 0c 9c ff ff       	call   c0001a87 <st_dword>
c0007e7b:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e7e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e83:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e87:	e8 f7 9b ff ff       	call   c0001a83 <st_word>
c0007e8c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e8f:	ba ff 00 00 00       	mov    edx,0xff
c0007e94:	e8 ea 9b ff ff       	call   c0001a83 <st_word>
c0007e99:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ea0:	e8 e2 9b ff ff       	call   c0001a87 <st_dword>
c0007ea5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eaa:	75 57                	jne    c0007f03 <f_mkfs+0xde2>
c0007eac:	8d 45 43             	lea    eax,[ebp+0x43]
c0007eaf:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eb4:	e8 ce 9b ff ff       	call   c0001a87 <st_dword>
c0007eb9:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ebc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec0:	e8 c2 9b ff ff       	call   c0001a87 <st_dword>
c0007ec5:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ec8:	ba 02 00 00 00       	mov    edx,0x2
c0007ecd:	e8 b5 9b ff ff       	call   c0001a87 <st_dword>
c0007ed2:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ed5:	ba 01 00 00 00       	mov    edx,0x1
c0007eda:	e8 a4 9b ff ff       	call   c0001a83 <st_word>
c0007edf:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ee2:	ba 06 00 00 00       	mov    edx,0x6
c0007ee7:	e8 97 9b ff ff       	call   c0001a83 <st_word>
c0007eec:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ef0:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ef4:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ef7:	b9 13 00 00 00       	mov    ecx,0x13
c0007efc:	ba 4e 7d 02 c0       	mov    edx,0xc0027d4e
c0007f01:	eb 2f                	jmp    c0007f32 <f_mkfs+0xe11>
c0007f03:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f06:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f0b:	e8 77 9b ff ff       	call   c0001a87 <st_dword>
c0007f10:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f15:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f18:	e8 66 9b ff ff       	call   c0001a83 <st_word>
c0007f1d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f21:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f25:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f28:	b9 13 00 00 00       	mov    ecx,0x13
c0007f2d:	ba 62 7d 02 c0       	mov    edx,0xc0027d62
c0007f32:	e8 59 9b ff ff       	call   c0001a90 <mem_cpy>
c0007f37:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f42:	89 f0                	mov    eax,esi
c0007f44:	e8 3a 9b ff ff       	call   c0001a83 <st_word>
c0007f49:	83 ec 0c             	sub    esp,0xc
c0007f4c:	6a 01                	push   0x1
c0007f4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f56:	55                   	push   ebp
c0007f57:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f5b:	e8 7c 9a ff ff       	call   c00019dc <disk_write>
c0007f60:	83 c4 20             	add    esp,0x20
c0007f63:	85 c0                	test   eax,eax
c0007f65:	0f 85 67 02 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007f6b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f70:	0f 85 b7 00 00 00    	jne    c000802d <f_mkfs+0xf0c>
c0007f76:	83 ec 0c             	sub    esp,0xc
c0007f79:	6a 01                	push   0x1
c0007f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f83:	83 c0 06             	add    eax,0x6
c0007f86:	83 d2 00             	adc    edx,0x0
c0007f89:	52                   	push   edx
c0007f8a:	50                   	push   eax
c0007f8b:	55                   	push   ebp
c0007f8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f90:	e8 47 9a ff ff       	call   c00019dc <disk_write>
c0007f95:	83 c4 20             	add    esp,0x20
c0007f98:	b9 00 02 00 00       	mov    ecx,0x200
c0007f9d:	31 d2                	xor    edx,edx
c0007f9f:	89 e8                	mov    eax,ebp
c0007fa1:	e8 ff 9a ff ff       	call   c0001aa5 <mem_set>
c0007fa6:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fab:	89 e8                	mov    eax,ebp
c0007fad:	e8 d5 9a ff ff       	call   c0001a87 <st_dword>
c0007fb2:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fb8:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fbd:	e8 c5 9a ff ff       	call   c0001a87 <st_dword>
c0007fc2:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fc5:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fcb:	e8 b7 9a ff ff       	call   c0001a87 <st_dword>
c0007fd0:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fd6:	ba 02 00 00 00       	mov    edx,0x2
c0007fdb:	e8 a7 9a ff ff       	call   c0001a87 <st_dword>
c0007fe0:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fe5:	89 f0                	mov    eax,esi
c0007fe7:	e8 97 9a ff ff       	call   c0001a83 <st_word>
c0007fec:	83 ec 0c             	sub    esp,0xc
c0007fef:	6a 01                	push   0x1
c0007ff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ff5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ff9:	83 c0 07             	add    eax,0x7
c0007ffc:	83 d2 00             	adc    edx,0x0
c0007fff:	52                   	push   edx
c0008000:	50                   	push   eax
c0008001:	55                   	push   ebp
c0008002:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008006:	e8 d1 99 ff ff       	call   c00019dc <disk_write>
c000800b:	83 c4 14             	add    esp,0x14
c000800e:	6a 01                	push   0x1
c0008010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008014:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008018:	83 c0 01             	add    eax,0x1
c000801b:	83 d2 00             	adc    edx,0x0
c000801e:	52                   	push   edx
c000801f:	50                   	push   eax
c0008020:	55                   	push   ebp
c0008021:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008025:	e8 b2 99 ff ff       	call   c00019dc <disk_write>
c000802a:	83 c4 20             	add    esp,0x20
c000802d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008034:	31 d2                	xor    edx,edx
c0008036:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000803c:	31 db                	xor    ebx,ebx
c000803e:	89 e8                	mov    eax,ebp
c0008040:	e8 60 9a ff ff       	call   c0001aa5 <mem_set>
c0008045:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000804a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008051:	0f 94 c3             	sete   bl
c0008054:	4b                   	dec    ebx
c0008055:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000805b:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008061:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008066:	75 21                	jne    c0008089 <f_mkfs+0xf68>
c0008068:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000806d:	89 e8                	mov    eax,ebp
c000806f:	e8 13 9a ff ff       	call   c0001a87 <st_dword>
c0008074:	8d 45 04             	lea    eax,[ebp+0x4]
c0008077:	83 ca ff             	or     edx,0xffffffff
c000807a:	e8 08 9a ff ff       	call   c0001a87 <st_dword>
c000807f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008082:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008087:	eb 04                	jmp    c000808d <f_mkfs+0xf6c>
c0008089:	89 da                	mov    edx,ebx
c000808b:	89 e8                	mov    eax,ebp
c000808d:	e8 f5 99 ff ff       	call   c0001a87 <st_dword>
c0008092:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008096:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000809a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080a2:	39 ce                	cmp    esi,ecx
c00080a4:	76 02                	jbe    c00080a8 <f_mkfs+0xf87>
c00080a6:	89 ce                	mov    esi,ecx
c00080a8:	83 ec 0c             	sub    esp,0xc
c00080ab:	56                   	push   esi
c00080ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b4:	55                   	push   ebp
c00080b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080b9:	e8 1e 99 ff ff       	call   c00019dc <disk_write>
c00080be:	83 c4 20             	add    esp,0x20
c00080c1:	85 c0                	test   eax,eax
c00080c3:	0f 85 09 01 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	b9 00 02 00 00       	mov    ecx,0x200
c00080d0:	89 e8                	mov    eax,ebp
c00080d2:	e8 ce 99 ff ff       	call   c0001aa5 <mem_set>
c00080d7:	31 d2                	xor    edx,edx
c00080d9:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080dd:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080e1:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080e5:	75 b3                	jne    c000809a <f_mkfs+0xf79>
c00080e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080ea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080f1:	40                   	inc    eax
c00080f2:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080f6:	0f 87 65 ff ff ff    	ja     c0008061 <f_mkfs+0xf40>
c00080fc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008101:	74 04                	je     c0008107 <f_mkfs+0xfe6>
c0008103:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008107:	89 fb                	mov    ebx,edi
c0008109:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000810d:	76 04                	jbe    c0008113 <f_mkfs+0xff2>
c000810f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008113:	83 ec 0c             	sub    esp,0xc
c0008116:	53                   	push   ebx
c0008117:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811f:	55                   	push   ebp
c0008120:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008124:	e8 b3 98 ff ff       	call   c00019dc <disk_write>
c0008129:	83 c4 20             	add    esp,0x20
c000812c:	85 c0                	test   eax,eax
c000812e:	0f 85 9e 00 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0008134:	31 d2                	xor    edx,edx
c0008136:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000813a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000813e:	29 df                	sub    edi,ebx
c0008140:	75 c5                	jne    c0008107 <f_mkfs+0xfe6>
c0008142:	b1 0c                	mov    cl,0xc
c0008144:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008149:	74 1d                	je     c0008168 <f_mkfs+0x1047>
c000814b:	b8 ff ff 00 00       	mov    eax,0xffff
c0008150:	b1 06                	mov    cl,0x6
c0008152:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008156:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000815a:	72 0c                	jb     c0008168 <f_mkfs+0x1047>
c000815c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008161:	0f 94 c1             	sete   cl
c0008164:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008168:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000816d:	75 4c                	jne    c00081bb <f_mkfs+0x109a>
c000816f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008173:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008177:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000817e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008185:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008190:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000819b:	0f b6 c9             	movzx  ecx,cl
c000819e:	83 ec 0c             	sub    esp,0xc
c00081a1:	55                   	push   ebp
c00081a2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081ad:	e8 2f c2 ff ff       	call   c00043e1 <create_partition>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	89 c3                	mov    ebx,eax
c00081b7:	85 c0                	test   eax,eax
c00081b9:	75 34                	jne    c00081ef <f_mkfs+0x10ce>
c00081bb:	31 db                	xor    ebx,ebx
c00081bd:	50                   	push   eax
c00081be:	6a 00                	push   0x0
c00081c0:	6a 00                	push   0x0
c00081c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081c6:	e8 27 98 ff ff       	call   c00019f2 <disk_ioctl>
c00081cb:	83 c4 10             	add    esp,0x10
c00081ce:	85 c0                	test   eax,eax
c00081d0:	74 1d                	je     c00081ef <f_mkfs+0x10ce>
c00081d2:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081da:	75 0c                	jne    c00081e8 <f_mkfs+0x10c7>
c00081dc:	83 ec 0c             	sub    esp,0xc
c00081df:	55                   	push   ebp
c00081e0:	e8 75 00 00 00       	call   c000825a <ff_memfree>
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	bb 01 00 00 00       	mov    ebx,0x1
c00081ed:	eb 48                	jmp    c0008237 <f_mkfs+0x1116>
c00081ef:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081f7:	75 3e                	jne    c0008237 <f_mkfs+0x1116>
c00081f9:	83 ec 0c             	sub    esp,0xc
c00081fc:	55                   	push   ebp
c00081fd:	e8 58 00 00 00       	call   c000825a <ff_memfree>
c0008202:	83 c4 10             	add    esp,0x10
c0008205:	eb 30                	jmp    c0008237 <f_mkfs+0x1116>
c0008207:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000820c:	0f 85 eb fa ff ff    	jne    c0007cfd <f_mkfs+0xbdc>
c0008212:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008216:	81 ff 80 00 00 00    	cmp    edi,0x80
c000821c:	0f 86 b8 f9 ff ff    	jbe    c0007bda <f_mkfs+0xab9>
c0008222:	e9 bf fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008227:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000822c:	0f 85 c0 fa ff ff    	jne    c0007cf2 <f_mkfs+0xbd1>
c0008232:	e9 af fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008237:	81 c4 9c 00 00 00    	add    esp,0x9c
c000823d:	89 d8                	mov    eax,ebx
c000823f:	5b                   	pop    ebx
c0008240:	5e                   	pop    esi
c0008241:	5f                   	pop    edi
c0008242:	5d                   	pop    ebp
c0008243:	c3                   	ret    

c0008244 <ff_memalloc>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 81 72 00 00       	call   c000f4d4 <malloc>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 c4 0c             	add    esp,0xc
c0008259:	c3                   	ret    

c000825a <ff_memfree>:
c000825a:	83 ec 0c             	sub    esp,0xc
c000825d:	83 ec 0c             	sub    esp,0xc
c0008260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008264:	e8 7b 72 00 00       	call   c000f4e4 <free>
c0008269:	83 c4 10             	add    esp,0x10
c000826c:	90                   	nop
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    

c0008271 <ff_uni2oem>:
c0008271:	83 ec 14             	sub    esp,0x14
c0008274:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008278:	66 89 04 24          	mov    WORD PTR [esp],ax
c000827c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008283:	c7 44 24 0c 80 80 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028080
c000828b:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008290:	77 0b                	ja     c000829d <ff_uni2oem+0x2c>
c0008292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008296:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000829b:	eb 5b                	jmp    c00082f8 <ff_uni2oem+0x87>
c000829d:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082a5:	77 51                	ja     c00082f8 <ff_uni2oem+0x87>
c00082a7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ad:	75 49                	jne    c00082f8 <ff_uni2oem+0x87>
c00082af:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b6:	eb 0b                	jmp    c00082c3 <ff_uni2oem+0x52>
c00082b8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082bd:	40                   	inc    eax
c00082be:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082c3:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082c9:	77 1b                	ja     c00082e6 <ff_uni2oem+0x75>
c00082cb:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082d0:	01 c0                	add    eax,eax
c00082d2:	89 c2                	mov    edx,eax
c00082d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082d8:	01 d0                	add    eax,edx
c00082da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dd:	0f b7 c0             	movzx  eax,ax
c00082e0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082e4:	75 d2                	jne    c00082b8 <ff_uni2oem+0x47>
c00082e6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082eb:	83 e8 80             	sub    eax,0xffffff80
c00082ee:	25 ff 00 00 00       	and    eax,0xff
c00082f3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082fd:	83 c4 14             	add    esp,0x14
c0008300:	c3                   	ret    

c0008301 <ff_oem2uni>:
c0008301:	83 ec 18             	sub    esp,0x18
c0008304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008311:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008315:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000831c:	c7 44 24 10 80 80 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028080
c0008324:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000832a:	77 0b                	ja     c0008337 <ff_oem2uni+0x36>
c000832c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008330:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008335:	eb 2d                	jmp    c0008364 <ff_oem2uni+0x63>
c0008337:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000833d:	75 25                	jne    c0008364 <ff_oem2uni+0x63>
c000833f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008346:	77 1c                	ja     c0008364 <ff_oem2uni+0x63>
c0008348:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000834d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008352:	01 c0                	add    eax,eax
c0008354:	89 c2                	mov    edx,eax
c0008356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000835a:	01 d0                	add    eax,edx
c000835c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008364:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008369:	83 c4 18             	add    esp,0x18
c000836c:	c3                   	ret    

c000836d <ff_wtoupper>:
c000836d:	83 ec 10             	sub    esp,0x10
c0008370:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008378:	0f 87 3e 01 00 00    	ja     c00084bc <ff_wtoupper+0x14f>
c000837e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008382:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008387:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000838e:	77 07                	ja     c0008397 <ff_wtoupper+0x2a>
c0008390:	b8 80 7e 02 c0       	mov    eax,0xc0027e80
c0008395:	eb 05                	jmp    c000839c <ff_wtoupper+0x2f>
c0008397:	b8 c0 7d 02 c0       	mov    eax,0xc0027dc0
c000839c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	8d 50 02             	lea    edx,[eax+0x2]
c00083a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ab:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083ae:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083b3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083b9:	0f 84 f4 00 00 00    	je     c00084b3 <ff_wtoupper+0x146>
c00083bf:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083c4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083c9:	0f 82 e4 00 00 00    	jb     c00084b3 <ff_wtoupper+0x146>
c00083cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083d3:	8d 50 02             	lea    edx,[eax+0x2]
c00083d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083dd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083e2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083e7:	66 c1 e8 08          	shr    ax,0x8
c00083eb:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083f0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083f7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083fc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008401:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008406:	01 ca                	add    edx,ecx
c0008408:	39 d0                	cmp    eax,edx
c000840a:	0f 8d 86 00 00 00    	jge    c0008496 <ff_wtoupper+0x129>
c0008410:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008415:	83 f8 08             	cmp    eax,0x8
c0008418:	0f 87 94 00 00 00    	ja     c00084b2 <ff_wtoupper+0x145>
c000841e:	8b 04 85 80 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8280]
c0008425:	ff e0                	jmp    eax
c0008427:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000842c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008431:	29 c2                	sub    edx,eax
c0008433:	89 d0                	mov    eax,edx
c0008435:	01 c0                	add    eax,eax
c0008437:	89 c2                	mov    edx,eax
c0008439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000843d:	01 d0                	add    eax,edx
c000843f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008442:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008447:	eb 4b                	jmp    c0008494 <ff_wtoupper+0x127>
c0008449:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000844e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008452:	83 e0 01             	and    eax,0x1
c0008455:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000845a:	eb 38                	jmp    c0008494 <ff_wtoupper+0x127>
c000845c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008462:	eb 30                	jmp    c0008494 <ff_wtoupper+0x127>
c0008464:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000846a:	eb 28                	jmp    c0008494 <ff_wtoupper+0x127>
c000846c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008472:	eb 20                	jmp    c0008494 <ff_wtoupper+0x127>
c0008474:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000847a:	eb 18                	jmp    c0008494 <ff_wtoupper+0x127>
c000847c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008482:	eb 10                	jmp    c0008494 <ff_wtoupper+0x127>
c0008484:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000848a:	eb 08                	jmp    c0008494 <ff_wtoupper+0x127>
c000848c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008493:	90                   	nop
c0008494:	eb 1c                	jmp    c00084b2 <ff_wtoupper+0x145>
c0008496:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000849c:	0f 85 fe fe ff ff    	jne    c00083a0 <ff_wtoupper+0x33>
c00084a2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084a7:	01 c0                	add    eax,eax
c00084a9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084ad:	e9 ee fe ff ff       	jmp    c00083a0 <ff_wtoupper+0x33>
c00084b2:	90                   	nop
c00084b3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	c3                   	ret    

c00084c4 <psrc_set_converter>:
c00084c4:	56                   	push   esi
c00084c5:	89 d6                	mov    esi,edx
c00084c7:	53                   	push   ebx
c00084c8:	89 c3                	mov    ebx,eax
c00084ca:	83 ec 0c             	sub    esp,0xc
c00084cd:	52                   	push   edx
c00084ce:	50                   	push   eax
c00084cf:	e8 6f 55 00 00       	call   c000da43 <sinc_set_converter>
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	85 c0                	test   eax,eax
c00084d9:	74 25                	je     c0008500 <psrc_set_converter+0x3c>
c00084db:	50                   	push   eax
c00084dc:	50                   	push   eax
c00084dd:	56                   	push   esi
c00084de:	53                   	push   ebx
c00084df:	e8 17 5d 00 00       	call   c000e1fb <zoh_set_converter>
c00084e4:	83 c4 10             	add    esp,0x10
c00084e7:	85 c0                	test   eax,eax
c00084e9:	74 15                	je     c0008500 <psrc_set_converter+0x3c>
c00084eb:	51                   	push   ecx
c00084ec:	51                   	push   ecx
c00084ed:	56                   	push   esi
c00084ee:	53                   	push   ebx
c00084ef:	e8 0f 11 00 00       	call   c0009603 <linear_set_converter>
c00084f4:	83 c4 10             	add    esp,0x10
c00084f7:	ba 0a 00 00 00       	mov    edx,0xa
c00084fc:	85 c0                	test   eax,eax
c00084fe:	75 02                	jne    c0008502 <psrc_set_converter+0x3e>
c0008500:	31 d2                	xor    edx,edx
c0008502:	89 d0                	mov    eax,edx
c0008504:	5a                   	pop    edx
c0008505:	5b                   	pop    ebx
c0008506:	5e                   	pop    esi
c0008507:	c3                   	ret    

c0008508 <src_delete>:
c0008508:	53                   	push   ebx
c0008509:	83 ec 08             	sub    esp,0x8
c000850c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008510:	85 db                	test   ebx,ebx
c0008512:	74 29                	je     c000853d <src_delete+0x35>
c0008514:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008517:	85 c0                	test   eax,eax
c0008519:	74 0c                	je     c0008527 <src_delete+0x1f>
c000851b:	83 ec 0c             	sub    esp,0xc
c000851e:	50                   	push   eax
c000851f:	e8 c0 6f 00 00       	call   c000f4e4 <free>
c0008524:	83 c4 10             	add    esp,0x10
c0008527:	50                   	push   eax
c0008528:	6a 3c                	push   0x3c
c000852a:	6a 00                	push   0x0
c000852c:	53                   	push   ebx
c000852d:	e8 59 81 ff ff       	call   c000068b <memset>
c0008532:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008535:	e8 aa 6f 00 00       	call   c000f4e4 <free>
c000853a:	83 c4 10             	add    esp,0x10
c000853d:	31 c0                	xor    eax,eax
c000853f:	83 c4 08             	add    esp,0x8
c0008542:	5b                   	pop    ebx
c0008543:	c3                   	ret    

c0008544 <src_process>:
c0008544:	55                   	push   ebp
c0008545:	57                   	push   edi
c0008546:	56                   	push   esi
c0008547:	53                   	push   ebx
c0008548:	83 ec 1c             	sub    esp,0x1c
c000854b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000854f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008553:	85 ed                	test   ebp,ebp
c0008555:	0f 84 6f 01 00 00    	je     c00086ca <src_process+0x186>
c000855b:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000855f:	0f 84 6c 01 00 00    	je     c00086d1 <src_process+0x18d>
c0008565:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0008569:	0f 84 62 01 00 00    	je     c00086d1 <src_process+0x18d>
c000856f:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008576:	0f 85 5c 01 00 00    	jne    c00086d8 <src_process+0x194>
c000857c:	85 db                	test   ebx,ebx
c000857e:	0f 84 5b 01 00 00    	je     c00086df <src_process+0x19b>
c0008584:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008586:	85 f6                	test   esi,esi
c0008588:	0f 84 58 01 00 00    	je     c00086e6 <src_process+0x1a2>
c000858e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008591:	85 ff                	test   edi,edi
c0008593:	0f 84 4d 01 00 00    	je     c00086e6 <src_process+0x1a2>
c0008599:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000859c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000859f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085a7:	68 00 00 70 3f       	push   0x3f700000
c00085ac:	6a 00                	push   0x0
c00085ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b6:	e8 d4 e7 01 00       	call   c0026d8f <__ltdf2>
c00085bb:	83 c4 10             	add    esp,0x10
c00085be:	85 c0                	test   eax,eax
c00085c0:	0f 88 27 01 00 00    	js     c00086ed <src_process+0x1a9>
c00085c6:	68 00 00 70 40       	push   0x40700000
c00085cb:	6a 00                	push   0x0
c00085cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d5:	e8 97 e7 01 00       	call   c0026d71 <__gtdf2>
c00085da:	83 c4 10             	add    esp,0x10
c00085dd:	85 c0                	test   eax,eax
c00085df:	0f 8f 08 01 00 00    	jg     c00086ed <src_process+0x1a9>
c00085e5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085e9:	79 07                	jns    c00085f2 <src_process+0xae>
c00085eb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085f5:	85 c0                	test   eax,eax
c00085f7:	79 50                	jns    c0008649 <src_process+0x105>
c00085f9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008600:	39 fe                	cmp    esi,edi
c0008602:	72 37                	jb     c000863b <src_process+0xf7>
c0008604:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000860b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008612:	68 00 00 70 3f       	push   0x3f700000
c0008617:	6a 00                	push   0x0
c0008619:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000861c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000861f:	e8 6b e7 01 00       	call   c0026d8f <__ltdf2>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	85 c0                	test   eax,eax
c0008629:	79 37                	jns    c0008662 <src_process+0x11e>
c000862b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000862f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008633:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008636:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008639:	eb 27                	jmp    c0008662 <src_process+0x11e>
c000863b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000863e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008642:	8d 04 86             	lea    eax,[esi+eax*4]
c0008645:	39 c7                	cmp    edi,eax
c0008647:	eb 0d                	jmp    c0008656 <src_process+0x112>
c0008649:	39 fe                	cmp    esi,edi
c000864b:	72 ee                	jb     c000863b <src_process+0xf7>
c000864d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008651:	8d 04 87             	lea    eax,[edi+eax*4]
c0008654:	39 c6                	cmp    esi,eax
c0008656:	73 ac                	jae    c0008604 <src_process+0xc0>
c0008658:	b8 10 00 00 00       	mov    eax,0x10
c000865d:	e9 90 00 00 00       	jmp    c00086f2 <src_process+0x1ae>
c0008662:	83 ec 10             	sub    esp,0x10
c0008665:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008668:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000866b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000866e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008671:	e8 1e de 01 00       	call   c0026494 <__subdf3>
c0008676:	83 c4 18             	add    esp,0x18
c0008679:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000867d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008681:	52                   	push   edx
c0008682:	50                   	push   eax
c0008683:	e8 98 e8 01 00       	call   c0026f20 <fabs>
c0008688:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000868c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008690:	83 c4 10             	add    esp,0x10
c0008693:	68 af 03 d2 3c       	push   0x3cd203af
c0008698:	68 16 56 e7 9e       	push   0x9ee75616
c000869d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a5:	e8 e5 e6 01 00       	call   c0026d8f <__ltdf2>
c00086aa:	83 c4 10             	add    esp,0x10
c00086ad:	85 c0                	test   eax,eax
c00086af:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086b3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086b7:	79 05                	jns    c00086be <src_process+0x17a>
c00086b9:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086bc:	eb 03                	jmp    c00086c1 <src_process+0x17d>
c00086be:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086c1:	83 c4 1c             	add    esp,0x1c
c00086c4:	5b                   	pop    ebx
c00086c5:	5e                   	pop    esi
c00086c6:	5f                   	pop    edi
c00086c7:	5d                   	pop    ebp
c00086c8:	ff e0                	jmp    eax
c00086ca:	b8 02 00 00 00       	mov    eax,0x2
c00086cf:	eb 21                	jmp    c00086f2 <src_process+0x1ae>
c00086d1:	b8 07 00 00 00       	mov    eax,0x7
c00086d6:	eb 1a                	jmp    c00086f2 <src_process+0x1ae>
c00086d8:	b8 12 00 00 00       	mov    eax,0x12
c00086dd:	eb 13                	jmp    c00086f2 <src_process+0x1ae>
c00086df:	b8 03 00 00 00       	mov    eax,0x3
c00086e4:	eb 0c                	jmp    c00086f2 <src_process+0x1ae>
c00086e6:	b8 04 00 00 00       	mov    eax,0x4
c00086eb:	eb 05                	jmp    c00086f2 <src_process+0x1ae>
c00086ed:	b8 06 00 00 00       	mov    eax,0x6
c00086f2:	83 c4 1c             	add    esp,0x1c
c00086f5:	5b                   	pop    ebx
c00086f6:	5e                   	pop    esi
c00086f7:	5f                   	pop    edi
c00086f8:	5d                   	pop    ebp
c00086f9:	c3                   	ret    

c00086fa <src_callback_read>:
c00086fa:	55                   	push   ebp
c00086fb:	57                   	push   edi
c00086fc:	56                   	push   esi
c00086fd:	53                   	push   ebx
c00086fe:	83 ec 3c             	sub    esp,0x3c
c0008701:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008705:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008709:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000870d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008711:	85 ed                	test   ebp,ebp
c0008713:	0f 8e 52 01 00 00    	jle    c000886b <src_callback_read+0x171>
c0008719:	85 db                	test   ebx,ebx
c000871b:	0f 84 4a 01 00 00    	je     c000886b <src_callback_read+0x171>
c0008721:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008728:	74 0c                	je     c0008736 <src_callback_read+0x3c>
c000872a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008731:	e9 35 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008736:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000873a:	75 0c                	jne    c0008748 <src_callback_read+0x4e>
c000873c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008743:	e9 23 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008748:	51                   	push   ecx
c0008749:	6a 24                	push   0x24
c000874b:	6a 00                	push   0x0
c000874d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008751:	50                   	push   eax
c0008752:	e8 34 7f ff ff       	call   c000068b <memset>
c0008757:	83 c4 10             	add    esp,0x10
c000875a:	68 00 00 70 3f       	push   0x3f700000
c000875f:	6a 00                	push   0x0
c0008761:	57                   	push   edi
c0008762:	56                   	push   esi
c0008763:	e8 27 e6 01 00       	call   c0026d8f <__ltdf2>
c0008768:	83 c4 10             	add    esp,0x10
c000876b:	85 c0                	test   eax,eax
c000876d:	78 3e                	js     c00087ad <src_callback_read+0xb3>
c000876f:	68 00 00 70 40       	push   0x40700000
c0008774:	6a 00                	push   0x0
c0008776:	57                   	push   edi
c0008777:	56                   	push   esi
c0008778:	e8 f4 e5 01 00       	call   c0026d71 <__gtdf2>
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	7f 29                	jg     c00087ad <src_callback_read+0xb3>
c0008784:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008788:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000878c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008790:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008794:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008797:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000879b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000879f:	31 f6                	xor    esi,esi
c00087a1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087a8:	e9 97 00 00 00       	jmp    c0008844 <src_callback_read+0x14a>
c00087ad:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087b4:	e9 b2 00 00 00       	jmp    c000886b <src_callback_read+0x171>
c00087b9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087c1:	52                   	push   edx
c00087c2:	52                   	push   edx
c00087c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087c7:	50                   	push   eax
c00087c8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087cb:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	85 c0                	test   eax,eax
c00087df:	75 08                	jne    c00087e9 <src_callback_read+0xef>
c00087e1:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087e9:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087f0:	50                   	push   eax
c00087f1:	50                   	push   eax
c00087f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087f6:	50                   	push   eax
c00087f7:	53                   	push   ebx
c00087f8:	e8 47 fd ff ff       	call   c0008544 <src_process>
c00087fd:	83 c4 10             	add    esp,0x10
c0008800:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008807:	85 c0                	test   eax,eax
c0008809:	75 49                	jne    c0008854 <src_callback_read+0x15a>
c000880b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000880f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008812:	89 f9                	mov    ecx,edi
c0008814:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008818:	0f af ca             	imul   ecx,edx
c000881b:	c1 e1 02             	shl    ecx,0x2
c000881e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008822:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008826:	0f af d1             	imul   edx,ecx
c0008829:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000882d:	c1 e2 02             	shl    edx,0x2
c0008830:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008834:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008837:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000883c:	74 12                	je     c0008850 <src_callback_read+0x156>
c000883e:	39 d5                	cmp    ebp,edx
c0008840:	7e 14                	jle    c0008856 <src_callback_read+0x15c>
c0008842:	89 d6                	mov    esi,edx
c0008844:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008849:	75 9e                	jne    c00087e9 <src_callback_read+0xef>
c000884b:	e9 69 ff ff ff       	jmp    c00087b9 <src_callback_read+0xbf>
c0008850:	85 c9                	test   ecx,ecx
c0008852:	75 ea                	jne    c000883e <src_callback_read+0x144>
c0008854:	89 f2                	mov    edx,esi
c0008856:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000885a:	85 c0                	test   eax,eax
c000885c:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000885f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008863:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008866:	74 05                	je     c000886d <src_callback_read+0x173>
c0008868:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000886b:	31 d2                	xor    edx,edx
c000886d:	83 c4 3c             	add    esp,0x3c
c0008870:	89 d0                	mov    eax,edx
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	5f                   	pop    edi
c0008875:	5d                   	pop    ebp
c0008876:	c3                   	ret    

c0008877 <src_set_ratio>:
c0008877:	57                   	push   edi
c0008878:	ba 02 00 00 00       	mov    edx,0x2
c000887d:	56                   	push   esi
c000887e:	53                   	push   ebx
c000887f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008883:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008887:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000888b:	85 db                	test   ebx,ebx
c000888d:	74 4c                	je     c00088db <src_set_ratio+0x64>
c000888f:	ba 07 00 00 00       	mov    edx,0x7
c0008894:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008898:	74 41                	je     c00088db <src_set_ratio+0x64>
c000889a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000889e:	74 3b                	je     c00088db <src_set_ratio+0x64>
c00088a0:	68 00 00 70 3f       	push   0x3f700000
c00088a5:	6a 00                	push   0x0
c00088a7:	57                   	push   edi
c00088a8:	56                   	push   esi
c00088a9:	e8 e1 e4 01 00       	call   c0026d8f <__ltdf2>
c00088ae:	83 c4 10             	add    esp,0x10
c00088b1:	ba 06 00 00 00       	mov    edx,0x6
c00088b6:	85 c0                	test   eax,eax
c00088b8:	78 21                	js     c00088db <src_set_ratio+0x64>
c00088ba:	68 00 00 70 40       	push   0x40700000
c00088bf:	6a 00                	push   0x0
c00088c1:	57                   	push   edi
c00088c2:	56                   	push   esi
c00088c3:	e8 a9 e4 01 00       	call   c0026d71 <__gtdf2>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	ba 06 00 00 00       	mov    edx,0x6
c00088d0:	85 c0                	test   eax,eax
c00088d2:	7f 07                	jg     c00088db <src_set_ratio+0x64>
c00088d4:	89 33                	mov    DWORD PTR [ebx],esi
c00088d6:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088d9:	31 d2                	xor    edx,edx
c00088db:	5b                   	pop    ebx
c00088dc:	89 d0                	mov    eax,edx
c00088de:	5e                   	pop    esi
c00088df:	5f                   	pop    edi
c00088e0:	c3                   	ret    

c00088e1 <src_get_channels>:
c00088e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088e5:	b8 02 00 00 00       	mov    eax,0x2
c00088ea:	85 d2                	test   edx,edx
c00088ec:	74 14                	je     c0008902 <src_get_channels+0x21>
c00088ee:	b8 07 00 00 00       	mov    eax,0x7
c00088f3:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088f7:	74 09                	je     c0008902 <src_get_channels+0x21>
c00088f9:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088fd:	74 03                	je     c0008902 <src_get_channels+0x21>
c00088ff:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008902:	c3                   	ret    

c0008903 <src_reset>:
c0008903:	53                   	push   ebx
c0008904:	b8 02 00 00 00       	mov    eax,0x2
c0008909:	83 ec 08             	sub    esp,0x8
c000890c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008910:	85 db                	test   ebx,ebx
c0008912:	74 36                	je     c000894a <src_reset+0x47>
c0008914:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008917:	85 c0                	test   eax,eax
c0008919:	74 09                	je     c0008924 <src_reset+0x21>
c000891b:	83 ec 0c             	sub    esp,0xc
c000891e:	53                   	push   ebx
c000891f:	ff d0                	call   eax
c0008921:	83 c4 10             	add    esp,0x10
c0008924:	31 c0                	xor    eax,eax
c0008926:	31 d2                	xor    edx,edx
c0008928:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000892b:	89 03                	mov    DWORD PTR [ebx],eax
c000892d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008930:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008933:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000893a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008941:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008948:	31 c0                	xor    eax,eax
c000894a:	83 c4 08             	add    esp,0x8
c000894d:	5b                   	pop    ebx
c000894e:	c3                   	ret    

c000894f <src_new>:
c000894f:	57                   	push   edi
c0008950:	56                   	push   esi
c0008951:	53                   	push   ebx
c0008952:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008956:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000895a:	85 f6                	test   esi,esi
c000895c:	74 73                	je     c00089d1 <src_new+0x82>
c000895e:	85 ff                	test   edi,edi
c0008960:	7f 08                	jg     c000896a <src_new+0x1b>
c0008962:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008968:	eb 1e                	jmp    c0008988 <src_new+0x39>
c000896a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008970:	50                   	push   eax
c0008971:	50                   	push   eax
c0008972:	6a 3c                	push   0x3c
c0008974:	6a 01                	push   0x1
c0008976:	e8 89 6b 00 00       	call   c000f504 <calloc>
c000897b:	83 c4 10             	add    esp,0x10
c000897e:	89 c3                	mov    ebx,eax
c0008980:	85 c0                	test   eax,eax
c0008982:	75 10                	jne    c0008994 <src_new+0x45>
c0008984:	85 f6                	test   esi,esi
c0008986:	75 04                	jne    c000898c <src_new+0x3d>
c0008988:	31 db                	xor    ebx,ebx
c000898a:	eb 4b                	jmp    c00089d7 <src_new+0x88>
c000898c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008992:	eb 43                	jmp    c00089d7 <src_new+0x88>
c0008994:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008997:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000899e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089a2:	e8 1d fb ff ff       	call   c00084c4 <psrc_set_converter>
c00089a7:	85 c0                	test   eax,eax
c00089a9:	74 18                	je     c00089c3 <src_new+0x74>
c00089ab:	85 f6                	test   esi,esi
c00089ad:	74 06                	je     c00089b5 <src_new+0x66>
c00089af:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089b5:	83 ec 0c             	sub    esp,0xc
c00089b8:	53                   	push   ebx
c00089b9:	31 db                	xor    ebx,ebx
c00089bb:	e8 24 6b 00 00       	call   c000f4e4 <free>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	53                   	push   ebx
c00089c7:	e8 37 ff ff ff       	call   c0008903 <src_reset>
c00089cc:	83 c4 10             	add    esp,0x10
c00089cf:	eb 06                	jmp    c00089d7 <src_new+0x88>
c00089d1:	85 ff                	test   edi,edi
c00089d3:	7f 9b                	jg     c0008970 <src_new+0x21>
c00089d5:	eb b1                	jmp    c0008988 <src_new+0x39>
c00089d7:	89 d8                	mov    eax,ebx
c00089d9:	5b                   	pop    ebx
c00089da:	5e                   	pop    esi
c00089db:	5f                   	pop    edi
c00089dc:	c3                   	ret    

c00089dd <src_callback_new>:
c00089dd:	56                   	push   esi
c00089de:	53                   	push   ebx
c00089df:	53                   	push   ebx
c00089e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089e8:	85 f6                	test   esi,esi
c00089ea:	75 0e                	jne    c00089fa <src_callback_new+0x1d>
c00089ec:	31 db                	xor    ebx,ebx
c00089ee:	85 c0                	test   eax,eax
c00089f0:	74 47                	je     c0008a39 <src_callback_new+0x5c>
c00089f2:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089f8:	eb 3f                	jmp    c0008a39 <src_callback_new+0x5c>
c00089fa:	85 c0                	test   eax,eax
c00089fc:	74 06                	je     c0008a04 <src_callback_new+0x27>
c00089fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a04:	51                   	push   ecx
c0008a05:	50                   	push   eax
c0008a06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0e:	e8 3c ff ff ff       	call   c000894f <src_new>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	89 c3                	mov    ebx,eax
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	74 1d                	je     c0008a39 <src_callback_new+0x5c>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	50                   	push   eax
c0008a20:	e8 de fe ff ff       	call   c0008903 <src_reset>
c0008a25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a29:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a30:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a33:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	89 d8                	mov    eax,ebx
c0008a3b:	5a                   	pop    edx
c0008a3c:	5b                   	pop    ebx
c0008a3d:	5e                   	pop    esi
c0008a3e:	c3                   	ret    

c0008a3f <src_get_name>:
c0008a3f:	53                   	push   ebx
c0008a40:	83 ec 14             	sub    esp,0x14
c0008a43:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a47:	53                   	push   ebx
c0008a48:	e8 d0 4f 00 00       	call   c000da1d <sinc_get_name>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	85 c0                	test   eax,eax
c0008a52:	75 1d                	jne    c0008a71 <src_get_name+0x32>
c0008a54:	83 ec 0c             	sub    esp,0xc
c0008a57:	53                   	push   ebx
c0008a58:	e8 80 57 00 00       	call   c000e1dd <zoh_get_name>
c0008a5d:	83 c4 10             	add    esp,0x10
c0008a60:	85 c0                	test   eax,eax
c0008a62:	75 0d                	jne    c0008a71 <src_get_name+0x32>
c0008a64:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a68:	83 c4 08             	add    esp,0x8
c0008a6b:	5b                   	pop    ebx
c0008a6c:	e9 74 0b 00 00       	jmp    c00095e5 <linear_get_name>
c0008a71:	83 c4 08             	add    esp,0x8
c0008a74:	5b                   	pop    ebx
c0008a75:	c3                   	ret    

c0008a76 <src_get_description>:
c0008a76:	53                   	push   ebx
c0008a77:	83 ec 14             	sub    esp,0x14
c0008a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a7e:	53                   	push   ebx
c0008a7f:	e8 ac 4f 00 00       	call   c000da30 <sinc_get_description>
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	85 c0                	test   eax,eax
c0008a89:	75 1d                	jne    c0008aa8 <src_get_description+0x32>
c0008a8b:	83 ec 0c             	sub    esp,0xc
c0008a8e:	53                   	push   ebx
c0008a8f:	e8 58 57 00 00       	call   c000e1ec <zoh_get_description>
c0008a94:	83 c4 10             	add    esp,0x10
c0008a97:	85 c0                	test   eax,eax
c0008a99:	75 0d                	jne    c0008aa8 <src_get_description+0x32>
c0008a9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a9f:	83 c4 08             	add    esp,0x8
c0008aa2:	5b                   	pop    ebx
c0008aa3:	e9 4c 0b 00 00       	jmp    c00095f4 <linear_get_description>
c0008aa8:	83 c4 08             	add    esp,0x8
c0008aab:	5b                   	pop    ebx
c0008aac:	c3                   	ret    

c0008aad <src_get_version>:
c0008aad:	b8 80 81 02 c0       	mov    eax,0xc0028180
c0008ab2:	c3                   	ret    

c0008ab3 <src_is_valid_ratio>:
c0008ab3:	83 ec 1c             	sub    esp,0x1c
c0008ab6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008abe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ac2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ac6:	68 00 00 70 3f       	push   0x3f700000
c0008acb:	6a 00                	push   0x0
c0008acd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad5:	e8 b5 e2 01 00       	call   c0026d8f <__ltdf2>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	31 d2                	xor    edx,edx
c0008adf:	85 c0                	test   eax,eax
c0008ae1:	78 1e                	js     c0008b01 <src_is_valid_ratio+0x4e>
c0008ae3:	68 00 00 70 40       	push   0x40700000
c0008ae8:	6a 00                	push   0x0
c0008aea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af2:	e8 7a e2 01 00       	call   c0026d71 <__gtdf2>
c0008af7:	31 d2                	xor    edx,edx
c0008af9:	83 c4 10             	add    esp,0x10
c0008afc:	85 c0                	test   eax,eax
c0008afe:	0f 9e c2             	setle  dl
c0008b01:	89 d0                	mov    eax,edx
c0008b03:	83 c4 1c             	add    esp,0x1c
c0008b06:	c3                   	ret    

c0008b07 <src_error>:
c0008b07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0b:	31 c0                	xor    eax,eax
c0008b0d:	85 d2                	test   edx,edx
c0008b0f:	74 03                	je     c0008b14 <src_error+0xd>
c0008b11:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b14:	c3                   	ret    

c0008b15 <src_strerror>:
c0008b15:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b19:	31 c0                	xor    eax,eax
c0008b1b:	83 fa 17             	cmp    edx,0x17
c0008b1e:	77 07                	ja     c0008b27 <src_strerror+0x12>
c0008b20:	8b 04 95 e0 85 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7a20]
c0008b27:	c3                   	ret    

c0008b28 <src_simple>:
c0008b28:	56                   	push   esi
c0008b29:	53                   	push   ebx
c0008b2a:	83 ec 18             	sub    esp,0x18
c0008b2d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b31:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b35:	50                   	push   eax
c0008b36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3e:	e8 0c fe ff ff       	call   c000894f <src_new>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	85 c0                	test   eax,eax
c0008b48:	75 06                	jne    c0008b50 <src_simple+0x28>
c0008b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b4e:	eb 25                	jmp    c0008b75 <src_simple+0x4d>
c0008b50:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b57:	89 c3                	mov    ebx,eax
c0008b59:	50                   	push   eax
c0008b5a:	50                   	push   eax
c0008b5b:	56                   	push   esi
c0008b5c:	53                   	push   ebx
c0008b5d:	e8 e2 f9 ff ff       	call   c0008544 <src_process>
c0008b62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b69:	e8 9a f9 ff ff       	call   c0008508 <src_delete>
c0008b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b72:	83 c4 10             	add    esp,0x10
c0008b75:	83 c4 14             	add    esp,0x14
c0008b78:	5b                   	pop    ebx
c0008b79:	5e                   	pop    esi
c0008b7a:	c3                   	ret    

c0008b7b <src_short_to_float_array>:
c0008b7b:	53                   	push   ebx
c0008b7c:	83 ec 18             	sub    esp,0x18
c0008b7f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b83:	85 db                	test   ebx,ebx
c0008b85:	74 54                	je     c0008bdb <src_short_to_float_array+0x60>
c0008b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b8b:	4b                   	dec    ebx
c0008b8c:	83 ec 0c             	sub    esp,0xc
c0008b8f:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b93:	50                   	push   eax
c0008b94:	e8 8a df 01 00       	call   c0026b23 <__floatsidf>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ba4:	68 00 00 00 3f       	push   0x3f000000
c0008ba9:	6a 00                	push   0x0
c0008bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb3:	e8 08 d9 01 00       	call   c00264c0 <__muldf3>
c0008bb8:	59                   	pop    ecx
c0008bb9:	59                   	pop    ecx
c0008bba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bbe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bca:	e8 c4 e1 01 00       	call   c0026d93 <__truncdfsf2>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bd6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bd9:	eb a8                	jmp    c0008b83 <src_short_to_float_array+0x8>
c0008bdb:	83 c4 18             	add    esp,0x18
c0008bde:	5b                   	pop    ebx
c0008bdf:	c3                   	ret    

c0008be0 <src_float_to_short_array>:
c0008be0:	56                   	push   esi
c0008be1:	53                   	push   ebx
c0008be2:	83 ec 14             	sub    esp,0x14
c0008be5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008be9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bed:	85 db                	test   ebx,ebx
c0008bef:	0f 84 a4 00 00 00    	je     c0008c99 <src_float_to_short_array+0xb9>
c0008bf5:	83 ec 0c             	sub    esp,0xc
c0008bf8:	4b                   	dec    ebx
c0008bf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bfd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c00:	e8 b2 e2 01 00       	call   c0026eb7 <__extendsfdf2>
c0008c05:	83 c4 10             	add    esp,0x10
c0008c08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c10:	68 00 00 e0 41       	push   0x41e00000
c0008c15:	6a 00                	push   0x0
c0008c17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1f:	e8 9c d8 01 00       	call   c00264c0 <__muldf3>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c2f:	68 ff ff df 41       	push   0x41dfffff
c0008c34:	68 00 00 c0 ff       	push   0xffc00000
c0008c39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c41:	e8 47 e1 01 00       	call   c0026d8d <__gedf2>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	85 c0                	test   eax,eax
c0008c4b:	78 08                	js     c0008c55 <src_float_to_short_array+0x75>
c0008c4d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c53:	eb 98                	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c55:	68 00 00 e0 c1       	push   0xc1e00000
c0008c5a:	6a 00                	push   0x0
c0008c5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c64:	e8 28 e1 01 00       	call   c0026d91 <__ledf2>
c0008c69:	83 c4 10             	add    esp,0x10
c0008c6c:	85 c0                	test   eax,eax
c0008c6e:	7f 0b                	jg     c0008c7b <src_float_to_short_array+0x9b>
c0008c70:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c76:	e9 72 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c7b:	50                   	push   eax
c0008c7c:	50                   	push   eax
c0008c7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c85:	e8 b6 e2 01 00       	call   c0026f40 <lrint>
c0008c8a:	83 c4 10             	add    esp,0x10
c0008c8d:	c1 f8 10             	sar    eax,0x10
c0008c90:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c94:	e9 54 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c99:	83 c4 14             	add    esp,0x14
c0008c9c:	5b                   	pop    ebx
c0008c9d:	5e                   	pop    esi
c0008c9e:	c3                   	ret    

c0008c9f <src_int_to_float_array>:
c0008c9f:	53                   	push   ebx
c0008ca0:	83 ec 18             	sub    esp,0x18
c0008ca3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ca7:	85 db                	test   ebx,ebx
c0008ca9:	74 52                	je     c0008cfd <src_int_to_float_array+0x5e>
c0008cab:	83 ec 0c             	sub    esp,0xc
c0008cae:	4b                   	dec    ebx
c0008caf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cb3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cb6:	e8 68 de 01 00       	call   c0026b23 <__floatsidf>
c0008cbb:	83 c4 10             	add    esp,0x10
c0008cbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cc6:	68 00 00 00 3e       	push   0x3e000000
c0008ccb:	6a 00                	push   0x0
c0008ccd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd5:	e8 e6 d7 01 00       	call   c00264c0 <__muldf3>
c0008cda:	59                   	pop    ecx
c0008cdb:	59                   	pop    ecx
c0008cdc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ce0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cec:	e8 a2 e0 01 00       	call   c0026d93 <__truncdfsf2>
c0008cf1:	83 c4 10             	add    esp,0x10
c0008cf4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cf8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cfb:	eb aa                	jmp    c0008ca7 <src_int_to_float_array+0x8>
c0008cfd:	83 c4 18             	add    esp,0x18
c0008d00:	5b                   	pop    ebx
c0008d01:	c3                   	ret    

c0008d02 <src_float_to_int_array>:
c0008d02:	56                   	push   esi
c0008d03:	53                   	push   ebx
c0008d04:	83 ec 14             	sub    esp,0x14
c0008d07:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d0b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d0f:	85 db                	test   ebx,ebx
c0008d11:	0f 84 a2 00 00 00    	je     c0008db9 <src_float_to_int_array+0xb7>
c0008d17:	83 ec 0c             	sub    esp,0xc
c0008d1a:	4b                   	dec    ebx
c0008d1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d1f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d22:	e8 90 e1 01 00       	call   c0026eb7 <__extendsfdf2>
c0008d27:	83 c4 10             	add    esp,0x10
c0008d2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d32:	68 00 00 e0 41       	push   0x41e00000
c0008d37:	6a 00                	push   0x0
c0008d39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d41:	e8 7a d7 01 00       	call   c00264c0 <__muldf3>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d51:	68 ff ff df 41       	push   0x41dfffff
c0008d56:	68 00 00 c0 ff       	push   0xffc00000
c0008d5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d63:	e8 25 e0 01 00       	call   c0026d8d <__gedf2>
c0008d68:	83 c4 10             	add    esp,0x10
c0008d6b:	85 c0                	test   eax,eax
c0008d6d:	78 09                	js     c0008d78 <src_float_to_int_array+0x76>
c0008d6f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d76:	eb 97                	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d78:	68 00 00 e0 c1       	push   0xc1e00000
c0008d7d:	6a 00                	push   0x0
c0008d7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d87:	e8 05 e0 01 00       	call   c0026d91 <__ledf2>
c0008d8c:	83 c4 10             	add    esp,0x10
c0008d8f:	85 c0                	test   eax,eax
c0008d91:	7f 0c                	jg     c0008d9f <src_float_to_int_array+0x9d>
c0008d93:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d9a:	e9 70 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d9f:	50                   	push   eax
c0008da0:	50                   	push   eax
c0008da1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da9:	e8 92 e1 01 00       	call   c0026f40 <lrint>
c0008dae:	83 c4 10             	add    esp,0x10
c0008db1:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008db4:	e9 56 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008db9:	83 c4 14             	add    esp,0x14
c0008dbc:	5b                   	pop    ebx
c0008dbd:	5e                   	pop    esi
c0008dbe:	c3                   	ret    

c0008dbf <linear_vari_process>:
c0008dbf:	55                   	push   ebp
c0008dc0:	31 d2                	xor    edx,edx
c0008dc2:	57                   	push   edi
c0008dc3:	56                   	push   esi
c0008dc4:	53                   	push   ebx
c0008dc5:	83 ec 3c             	sub    esp,0x3c
c0008dc8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dcc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dd0:	0f 8e d3 07 00 00    	jle    c00095a9 <linear_vari_process+0x7ea>
c0008dd6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dda:	ba 05 00 00 00       	mov    edx,0x5
c0008ddf:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008de2:	85 db                	test   ebx,ebx
c0008de4:	0f 84 bf 07 00 00    	je     c00095a9 <linear_vari_process+0x7ea>
c0008dea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ded:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008df1:	74 19                	je     c0008e0c <linear_vari_process+0x4d>
c0008df3:	31 d2                	xor    edx,edx
c0008df5:	39 c2                	cmp    edx,eax
c0008df7:	7d 0c                	jge    c0008e05 <linear_vari_process+0x46>
c0008df9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dfb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008dfe:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e02:	42                   	inc    edx
c0008e03:	eb f0                	jmp    c0008df5 <linear_vari_process+0x36>
c0008e05:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e0c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e0f:	0f af d0             	imul   edx,eax
c0008e12:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e15:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e19:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e20:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e23:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e2a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e2e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e3b:	68 00 00 70 3f       	push   0x3f700000
c0008e40:	6a 00                	push   0x0
c0008e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e4a:	e8 40 df 01 00       	call   c0026d8f <__ltdf2>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	ba 16 00 00 00       	mov    edx,0x16
c0008e57:	85 c0                	test   eax,eax
c0008e59:	0f 88 4a 07 00 00    	js     c00095a9 <linear_vari_process+0x7ea>
c0008e5f:	68 00 00 70 40       	push   0x40700000
c0008e64:	6a 00                	push   0x0
c0008e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6e:	e8 fe de 01 00       	call   c0026d71 <__gtdf2>
c0008e73:	83 c4 10             	add    esp,0x10
c0008e76:	ba 16 00 00 00       	mov    edx,0x16
c0008e7b:	85 c0                	test   eax,eax
c0008e7d:	0f 8f 26 07 00 00    	jg     c00095a9 <linear_vari_process+0x7ea>
c0008e83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e87:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e95:	68 00 00 f0 3f       	push   0x3ff00000
c0008e9a:	6a 00                	push   0x0
c0008e9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea4:	e8 e6 de 01 00       	call   c0026d8f <__ltdf2>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	0f 89 89 02 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008eb4:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008eb7:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eba:	0f 8d 7d 02 00 00    	jge    c000913d <linear_vari_process+0x37e>
c0008ec0:	83 ec 0c             	sub    esp,0xc
c0008ec3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008ec6:	e8 58 dc 01 00       	call   c0026b23 <__floatsidf>
c0008ecb:	83 c4 10             	add    esp,0x10
c0008ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ed1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ed5:	68 00 00 f0 3f       	push   0x3ff00000
c0008eda:	6a 00                	push   0x0
c0008edc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee4:	e8 5a cf 01 00       	call   c0025e43 <__adddf3>
c0008ee9:	83 c4 10             	add    esp,0x10
c0008eec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ef0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ef4:	52                   	push   edx
c0008ef5:	50                   	push   eax
c0008ef6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efe:	e8 bd d5 01 00       	call   c00264c0 <__muldf3>
c0008f03:	5d                   	pop    ebp
c0008f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f08:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f0c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f0f:	e8 0f dc 01 00       	call   c0026b23 <__floatsidf>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f1f:	52                   	push   edx
c0008f20:	50                   	push   eax
c0008f21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f29:	e8 15 cf 01 00       	call   c0025e43 <__adddf3>
c0008f2e:	59                   	pop    ecx
c0008f2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f33:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f37:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f3a:	e8 e4 db 01 00       	call   c0026b23 <__floatsidf>
c0008f3f:	83 c4 10             	add    esp,0x10
c0008f42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f4a:	52                   	push   edx
c0008f4b:	50                   	push   eax
c0008f4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f54:	e8 34 de 01 00       	call   c0026d8d <__gedf2>
c0008f59:	83 c4 10             	add    esp,0x10
c0008f5c:	85 c0                	test   eax,eax
c0008f5e:	0f 89 d9 01 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008f64:	85 ff                	test   edi,edi
c0008f66:	0f 8e f4 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008f6c:	83 ec 10             	sub    esp,0x10
c0008f6f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f72:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f75:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f7c:	ff 30                	push   DWORD PTR [eax]
c0008f7e:	e8 11 d5 01 00       	call   c0026494 <__subdf3>
c0008f83:	83 c4 18             	add    esp,0x18
c0008f86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8e:	52                   	push   edx
c0008f8f:	50                   	push   eax
c0008f90:	e8 8b df 01 00       	call   c0026f20 <fabs>
c0008f95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fa5:	68 23 42 92 0c       	push   0xc924223
c0008faa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb2:	e8 ba dd 01 00       	call   c0026d71 <__gtdf2>
c0008fb7:	83 c4 10             	add    esp,0x10
c0008fba:	85 c0                	test   eax,eax
c0008fbc:	0f 8e 9e 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008fc2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fc6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fd2:	52                   	push   edx
c0008fd3:	50                   	push   eax
c0008fd4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fd7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fda:	e8 b5 d4 01 00       	call   c0026494 <__subdf3>
c0008fdf:	59                   	pop    ecx
c0008fe0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fe4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fe8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008feb:	e8 33 db 01 00       	call   c0026b23 <__floatsidf>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ffb:	52                   	push   edx
c0008ffc:	50                   	push   eax
c0008ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009005:	e8 b6 d4 01 00       	call   c00264c0 <__muldf3>
c000900a:	5f                   	pop    edi
c000900b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000900f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009013:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009016:	e8 08 db 01 00       	call   c0026b23 <__floatsidf>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009022:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009026:	52                   	push   edx
c0009027:	50                   	push   eax
c0009028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000902c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009030:	e8 6f d7 01 00       	call   c00267a4 <__divdf3>
c0009035:	83 c4 10             	add    esp,0x10
c0009038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000903c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009040:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009044:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000904c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009050:	e8 ee cd 01 00       	call   c0025e43 <__adddf3>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000905c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009060:	31 ff                	xor    edi,edi
c0009062:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009065:	0f 8e 9d 00 00 00    	jle    c0009108 <linear_vari_process+0x349>
c000906b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000906e:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009072:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009075:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009079:	89 04 24             	mov    DWORD PTR [esp],eax
c000907c:	8b 06                	mov    eax,DWORD PTR [esi]
c000907e:	52                   	push   edx
c000907f:	52                   	push   edx
c0009080:	55                   	push   ebp
c0009081:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009084:	47                   	inc    edi
c0009085:	e8 4e c7 01 00       	call   c00257d8 <__subsf3>
c000908a:	89 04 24             	mov    DWORD PTR [esp],eax
c000908d:	e8 25 de 01 00       	call   c0026eb7 <__extendsfdf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009099:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000909d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ad:	e8 0e d4 01 00       	call   c00264c0 <__muldf3>
c00090b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090bd:	e8 f5 dd 01 00       	call   c0026eb7 <__extendsfdf2>
c00090c2:	83 c4 10             	add    esp,0x10
c00090c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090c9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090cd:	52                   	push   edx
c00090ce:	50                   	push   eax
c00090cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d7:	e8 67 cd 01 00       	call   c0025e43 <__adddf3>
c00090dc:	59                   	pop    ecx
c00090dd:	5d                   	pop    ebp
c00090de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ee:	e8 a0 dc 01 00       	call   c0026d93 <__truncdfsf2>
c00090f3:	83 c4 10             	add    esp,0x10
c00090f6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090f9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090fd:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009100:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009103:	e9 5a ff ff ff       	jmp    c0009062 <linear_vari_process+0x2a3>
c0009108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000910c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009110:	68 00 00 f0 3f       	push   0x3ff00000
c0009115:	6a 00                	push   0x0
c0009117:	e8 88 d6 01 00       	call   c00267a4 <__divdf3>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009122:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009126:	52                   	push   edx
c0009127:	50                   	push   eax
c0009128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	e8 0e cd 01 00       	call   c0025e43 <__adddf3>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	e9 50 fd ff ff       	jmp    c0008e8d <linear_vari_process+0xce>
c000913d:	50                   	push   eax
c000913e:	50                   	push   eax
c000913f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009147:	e8 f4 dd 01 00       	call   c0026f40 <lrint>
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	50                   	push   eax
c0009150:	e8 ce d9 01 00       	call   c0026b23 <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000915c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009166:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000916a:	e8 25 d3 01 00       	call   c0026494 <__subdf3>
c000916f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009173:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009177:	83 c4 20             	add    esp,0x20
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009182:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009186:	e8 04 dc 01 00       	call   c0026d8f <__ltdf2>
c000918b:	83 c4 10             	add    esp,0x10
c000918e:	85 c0                	test   eax,eax
c0009190:	79 1e                	jns    c00091b0 <linear_vari_process+0x3f1>
c0009192:	68 00 00 f0 3f       	push   0x3ff00000
c0009197:	6a 00                	push   0x0
c0009199:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000919d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a1:	e8 9d cc 01 00       	call   c0025e43 <__adddf3>
c00091a6:	83 c4 10             	add    esp,0x10
c00091a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00091ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091b3:	83 ec 10             	sub    esp,0x10
c00091b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c6:	e8 c9 d2 01 00       	call   c0026494 <__subdf3>
c00091cb:	83 c4 18             	add    esp,0x18
c00091ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091d6:	52                   	push   edx
c00091d7:	50                   	push   eax
c00091d8:	e8 63 dd 01 00       	call   c0026f40 <lrint>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	0f af f8             	imul   edi,eax
c00091e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091e6:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091e9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091ec:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091ef:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091f2:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091f6:	0f 8d 13 03 00 00    	jge    c000950f <linear_vari_process+0x750>
c00091fc:	83 ec 0c             	sub    esp,0xc
c00091ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009202:	e8 1c d9 01 00       	call   c0026b23 <__floatsidf>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000920e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009212:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009216:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000921a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009222:	e8 99 d2 01 00       	call   c00264c0 <__muldf3>
c0009227:	89 3c 24             	mov    DWORD PTR [esp],edi
c000922a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000922e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009232:	e8 ec d8 01 00       	call   c0026b23 <__floatsidf>
c0009237:	83 c4 10             	add    esp,0x10
c000923a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000923e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009242:	52                   	push   edx
c0009243:	50                   	push   eax
c0009244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000924c:	e8 f2 cb 01 00       	call   c0025e43 <__adddf3>
c0009251:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009254:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009258:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925c:	e8 c2 d8 01 00       	call   c0026b23 <__floatsidf>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009268:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926c:	52                   	push   edx
c000926d:	50                   	push   eax
c000926e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009276:	e8 14 db 01 00       	call   c0026d8f <__ltdf2>
c000927b:	83 c4 10             	add    esp,0x10
c000927e:	85 c0                	test   eax,eax
c0009280:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009284:	0f 89 85 02 00 00    	jns    c000950f <linear_vari_process+0x750>
c000928a:	85 c9                	test   ecx,ecx
c000928c:	0f 8e f5 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c0009292:	83 ec 10             	sub    esp,0x10
c0009295:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009298:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000929b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000929f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092a2:	ff 30                	push   DWORD PTR [eax]
c00092a4:	e8 eb d1 01 00       	call   c0026494 <__subdf3>
c00092a9:	83 c4 18             	add    esp,0x18
c00092ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b4:	52                   	push   edx
c00092b5:	50                   	push   eax
c00092b6:	e8 65 dc 01 00       	call   c0026f20 <fabs>
c00092bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c3:	83 c4 10             	add    esp,0x10
c00092c6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092cb:	68 23 42 92 0c       	push   0xc924223
c00092d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d8:	e8 94 da 01 00       	call   c0026d71 <__gtdf2>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	85 c0                	test   eax,eax
c00092e2:	0f 8e 9f 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c00092e8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00092f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092f9:	52                   	push   edx
c00092fa:	50                   	push   eax
c00092fb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092fe:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009301:	e8 8e d1 01 00       	call   c0026494 <__subdf3>
c0009306:	5f                   	pop    edi
c0009307:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000930b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000930f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009312:	e8 0c d8 01 00       	call   c0026b23 <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000931e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009322:	52                   	push   edx
c0009323:	50                   	push   eax
c0009324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000932c:	e8 8f d1 01 00       	call   c00264c0 <__muldf3>
c0009331:	5d                   	pop    ebp
c0009332:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009336:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000933a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000933d:	e8 e1 d7 01 00       	call   c0026b23 <__floatsidf>
c0009342:	83 c4 10             	add    esp,0x10
c0009345:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009349:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000934d:	52                   	push   edx
c000934e:	50                   	push   eax
c000934f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009357:	e8 48 d4 01 00       	call   c00267a4 <__divdf3>
c000935c:	83 c4 10             	add    esp,0x10
c000935f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009363:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009367:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009373:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009377:	e8 c7 ca 01 00       	call   c0025e43 <__adddf3>
c000937c:	83 c4 10             	add    esp,0x10
c000937f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009383:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009387:	31 ff                	xor    edi,edi
c0009389:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000938c:	39 f8                	cmp    eax,edi
c000938e:	0f 8e ac 00 00 00    	jle    c0009440 <linear_vari_process+0x681>
c0009394:	8b 16                	mov    edx,DWORD PTR [esi]
c0009396:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0009399:	29 c1                	sub    ecx,eax
c000939b:	89 c8                	mov    eax,ecx
c000939d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093a0:	01 f8                	add    eax,edi
c00093a2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093a6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093b3:	51                   	push   ecx
c00093b4:	01 f8                	add    eax,edi
c00093b6:	51                   	push   ecx
c00093b7:	47                   	inc    edi
c00093b8:	55                   	push   ebp
c00093b9:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093bc:	e8 17 c4 01 00       	call   c00257d8 <__subsf3>
c00093c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c4:	e8 ee da 01 00       	call   c0026eb7 <__extendsfdf2>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093d4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e4:	e8 d7 d0 01 00       	call   c00264c0 <__muldf3>
c00093e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093f4:	e8 be da 01 00       	call   c0026eb7 <__extendsfdf2>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009400:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009404:	52                   	push   edx
c0009405:	50                   	push   eax
c0009406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940e:	e8 30 ca 01 00       	call   c0025e43 <__adddf3>
c0009413:	5d                   	pop    ebp
c0009414:	59                   	pop    ecx
c0009415:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009419:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000941d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009421:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009425:	e8 69 d9 01 00       	call   c0026d93 <__truncdfsf2>
c000942a:	83 c4 10             	add    esp,0x10
c000942d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009431:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009435:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009438:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000943b:	e9 49 ff ff ff       	jmp    c0009389 <linear_vari_process+0x5ca>
c0009440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009448:	68 00 00 f0 3f       	push   0x3ff00000
c000944d:	6a 00                	push   0x0
c000944f:	e8 50 d3 01 00       	call   c00267a4 <__divdf3>
c0009454:	83 c4 10             	add    esp,0x10
c0009457:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000945f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009463:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946f:	e8 cf c9 01 00       	call   c0025e43 <__adddf3>
c0009474:	59                   	pop    ecx
c0009475:	5f                   	pop    edi
c0009476:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000947a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000947e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009486:	e8 b5 da 01 00       	call   c0026f40 <lrint>
c000948b:	83 ec 0c             	sub    esp,0xc
c000948e:	50                   	push   eax
c000948f:	e8 8f d6 01 00       	call   c0026b23 <__floatsidf>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000949b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000949f:	52                   	push   edx
c00094a0:	50                   	push   eax
c00094a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a9:	e8 e6 cf 01 00       	call   c0026494 <__subdf3>
c00094ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094b2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094b6:	83 c4 20             	add    esp,0x20
c00094b9:	6a 00                	push   0x0
c00094bb:	6a 00                	push   0x0
c00094bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c5:	e8 c5 d8 01 00       	call   c0026d8f <__ltdf2>
c00094ca:	83 c4 10             	add    esp,0x10
c00094cd:	85 c0                	test   eax,eax
c00094cf:	79 1e                	jns    c00094ef <linear_vari_process+0x730>
c00094d1:	68 00 00 f0 3f       	push   0x3ff00000
c00094d6:	6a 00                	push   0x0
c00094d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094e0:	e8 5e c9 01 00       	call   c0025e43 <__adddf3>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00094eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094f2:	83 ec 10             	sub    esp,0x10
c00094f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009501:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009505:	e8 8a cf 01 00       	call   c0026494 <__subdf3>
c000950a:	e9 bc fc ff ff       	jmp    c00091cb <linear_vari_process+0x40c>
c000950f:	39 fd                	cmp    ebp,edi
c0009511:	7d 38                	jge    c000954b <linear_vari_process+0x78c>
c0009513:	83 ec 0c             	sub    esp,0xc
c0009516:	89 f8                	mov    eax,edi
c0009518:	29 e8                	sub    eax,ebp
c000951a:	99                   	cdq    
c000951b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000951e:	50                   	push   eax
c000951f:	e8 ff d5 01 00       	call   c0026b23 <__floatsidf>
c0009524:	83 c4 10             	add    esp,0x10
c0009527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000952f:	52                   	push   edx
c0009530:	50                   	push   eax
c0009531:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009535:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009539:	e8 05 c9 01 00       	call   c0025e43 <__adddf3>
c000953e:	83 c4 10             	add    esp,0x10
c0009541:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009544:	89 04 24             	mov    DWORD PTR [esp],eax
c0009547:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000954b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000954f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009552:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009556:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009559:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000955c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000955f:	85 c0                	test   eax,eax
c0009561:	7f 29                	jg     c000958c <linear_vari_process+0x7cd>
c0009563:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000956b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000956f:	89 01                	mov    DWORD PTR [ecx],eax
c0009571:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009574:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009577:	99                   	cdq    
c0009578:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000957b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000957e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009581:	99                   	cdq    
c0009582:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009585:	31 d2                	xor    edx,edx
c0009587:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000958a:	eb 1d                	jmp    c00095a9 <linear_vari_process+0x7ea>
c000958c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000958f:	31 d2                	xor    edx,edx
c0009591:	29 c8                	sub    eax,ecx
c0009593:	c1 e0 02             	shl    eax,0x2
c0009596:	39 d1                	cmp    ecx,edx
c0009598:	7e c9                	jle    c0009563 <linear_vari_process+0x7a4>
c000959a:	8b 3e                	mov    edi,DWORD PTR [esi]
c000959c:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000959f:	83 c0 04             	add    eax,0x4
c00095a2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095a6:	42                   	inc    edx
c00095a7:	eb ed                	jmp    c0009596 <linear_vari_process+0x7d7>
c00095a9:	83 c4 3c             	add    esp,0x3c
c00095ac:	89 d0                	mov    eax,edx
c00095ae:	5b                   	pop    ebx
c00095af:	5e                   	pop    esi
c00095b0:	5f                   	pop    edi
c00095b1:	5d                   	pop    ebp
c00095b2:	c3                   	ret    

c00095b3 <linear_reset>:
c00095b3:	83 ec 0c             	sub    esp,0xc
c00095b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095ba:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095bd:	85 c0                	test   eax,eax
c00095bf:	74 20                	je     c00095e1 <linear_reset+0x2e>
c00095c1:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095c4:	83 c0 1c             	add    eax,0x1c
c00095c7:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095ca:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095d1:	c1 e2 02             	shl    edx,0x2
c00095d4:	51                   	push   ecx
c00095d5:	52                   	push   edx
c00095d6:	6a 00                	push   0x0
c00095d8:	50                   	push   eax
c00095d9:	e8 ad 70 ff ff       	call   c000068b <memset>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	83 c4 0c             	add    esp,0xc
c00095e4:	c3                   	ret    

c00095e5 <linear_get_name>:
c00095e5:	31 c0                	xor    eax,eax
c00095e7:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095ec:	75 05                	jne    c00095f3 <linear_get_name+0xe>
c00095ee:	b8 40 86 02 c0       	mov    eax,0xc0028640
c00095f3:	c3                   	ret    

c00095f4 <linear_get_description>:
c00095f4:	31 c0                	xor    eax,eax
c00095f6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095fb:	75 05                	jne    c0009602 <linear_get_description+0xe>
c00095fd:	b8 54 86 02 c0       	mov    eax,0xc0028654
c0009602:	c3                   	ret    

c0009603 <linear_set_converter>:
c0009603:	53                   	push   ebx
c0009604:	b8 0a 00 00 00       	mov    eax,0xa
c0009609:	83 ec 08             	sub    esp,0x8
c000960c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009610:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009615:	75 6e                	jne    c0009685 <linear_set_converter+0x82>
c0009617:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000961a:	85 c0                	test   eax,eax
c000961c:	74 13                	je     c0009631 <linear_set_converter+0x2e>
c000961e:	83 ec 0c             	sub    esp,0xc
c0009621:	50                   	push   eax
c0009622:	e8 bd 5e 00 00       	call   c000f4e4 <free>
c0009627:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000962e:	83 c4 10             	add    esp,0x10
c0009631:	50                   	push   eax
c0009632:	50                   	push   eax
c0009633:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009636:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000963d:	50                   	push   eax
c000963e:	6a 01                	push   0x1
c0009640:	e8 bf 5e 00 00       	call   c000f504 <calloc>
c0009645:	83 c4 10             	add    esp,0x10
c0009648:	89 c2                	mov    edx,eax
c000964a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000964d:	85 d2                	test   edx,edx
c000964f:	b8 01 00 00 00       	mov    eax,0x1
c0009654:	74 2f                	je     c0009685 <linear_set_converter+0x82>
c0009656:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009659:	83 ec 0c             	sub    esp,0xc
c000965c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000965f:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009665:	c7 43 24 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008dbf
c000966c:	c7 43 20 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008dbf
c0009673:	c7 43 28 b3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095b3
c000967a:	53                   	push   ebx
c000967b:	e8 33 ff ff ff       	call   c00095b3 <linear_reset>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	31 c0                	xor    eax,eax
c0009685:	83 c4 08             	add    esp,0x8
c0009688:	5b                   	pop    ebx
c0009689:	c3                   	ret    

c000968a <int_to_fp>:
c000968a:	c1 e0 0c             	shl    eax,0xc
c000968d:	c3                   	ret    

c000968e <fp_to_int>:
c000968e:	c1 f8 0c             	sar    eax,0xc
c0009691:	c3                   	ret    

c0009692 <fp_fraction_part>:
c0009692:	25 ff 0f 00 00       	and    eax,0xfff
c0009697:	c3                   	ret    

c0009698 <fp_to_double>:
c0009698:	83 ec 1c             	sub    esp,0x1c
c000969b:	e8 f2 ff ff ff       	call   c0009692 <fp_fraction_part>
c00096a0:	83 ec 0c             	sub    esp,0xc
c00096a3:	50                   	push   eax
c00096a4:	e8 7a d4 01 00       	call   c0026b23 <__floatsidf>
c00096a9:	83 c4 10             	add    esp,0x10
c00096ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b4:	68 00 00 30 3f       	push   0x3f300000
c00096b9:	6a 00                	push   0x0
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	e8 f8 cd 01 00       	call   c00264c0 <__muldf3>
c00096c8:	83 c4 2c             	add    esp,0x2c
c00096cb:	c3                   	ret    

c00096cc <calc_output_single>:
c00096cc:	55                   	push   ebp
c00096cd:	57                   	push   edi
c00096ce:	56                   	push   esi
c00096cf:	89 c6                	mov    esi,eax
c00096d1:	53                   	push   ebx
c00096d2:	89 d3                	mov    ebx,edx
c00096d4:	83 ec 4c             	sub    esp,0x4c
c00096d7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096db:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096de:	e8 a7 ff ff ff       	call   c000968a <int_to_fp>
c00096e3:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096ea:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096ee:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096f2:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096f5:	99                   	cdq    
c00096f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096fe:	f7 fb                	idiv   ebx
c0009700:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009708:	89 da                	mov    edx,ebx
c000970a:	0f af d0             	imul   edx,eax
c000970d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009711:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009715:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009719:	29 c2                	sub    edx,eax
c000971b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009722:	83 c5 04             	add    ebp,0x4
c0009725:	e8 6e ff ff ff       	call   c0009698 <fp_to_double>
c000972a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000972e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009736:	e8 53 ff ff ff       	call   c000968e <fp_to_int>
c000973b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000973e:	52                   	push   edx
c000973f:	52                   	push   edx
c0009740:	51                   	push   ecx
c0009741:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009745:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009749:	e8 8a c0 01 00       	call   c00257d8 <__subsf3>
c000974e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009751:	e8 61 d7 01 00       	call   c0026eb7 <__extendsfdf2>
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000975d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009761:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009765:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009769:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000976d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009771:	e8 4a cd 01 00       	call   c00264c0 <__muldf3>
c0009776:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000977a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000977e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009781:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009785:	e8 2d d7 01 00       	call   c0026eb7 <__extendsfdf2>
c000978a:	83 c4 10             	add    esp,0x10
c000978d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009795:	52                   	push   edx
c0009796:	50                   	push   eax
c0009797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979f:	e8 9f c6 01 00       	call   c0025e43 <__adddf3>
c00097a4:	59                   	pop    ecx
c00097a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097ad:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097b3:	e8 ff d6 01 00       	call   c0026eb7 <__extendsfdf2>
c00097b8:	83 c4 10             	add    esp,0x10
c00097bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097bf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097c3:	52                   	push   edx
c00097c4:	50                   	push   eax
c00097c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097cd:	e8 ee cc 01 00       	call   c00264c0 <__muldf3>
c00097d2:	83 c4 10             	add    esp,0x10
c00097d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097dd:	52                   	push   edx
c00097de:	50                   	push   eax
c00097df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e7:	e8 57 c6 01 00       	call   c0025e43 <__adddf3>
c00097ec:	83 c4 10             	add    esp,0x10
c00097ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097f7:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097fb:	0f 89 1d ff ff ff    	jns    c000971e <calc_output_single+0x52>
c0009801:	89 d9                	mov    ecx,ebx
c0009803:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009807:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000980b:	89 dd                	mov    ebp,ebx
c000980d:	29 c8                	sub    eax,ecx
c000980f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009817:	99                   	cdq    
c0009818:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009820:	f7 fb                	idiv   ebx
c0009822:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009826:	0f af e8             	imul   ebp,eax
c0009829:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000982d:	01 cd                	add    ebp,ecx
c000982f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009832:	89 e8                	mov    eax,ebp
c0009834:	83 ee 04             	sub    esi,0x4
c0009837:	e8 5c fe ff ff       	call   c0009698 <fp_to_double>
c000983c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009840:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009844:	89 e8                	mov    eax,ebp
c0009846:	29 dd                	sub    ebp,ebx
c0009848:	e8 41 fe ff ff       	call   c000968e <fp_to_int>
c000984d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009850:	52                   	push   edx
c0009851:	52                   	push   edx
c0009852:	51                   	push   ecx
c0009853:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009857:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000985b:	e8 78 bf 01 00       	call   c00257d8 <__subsf3>
c0009860:	89 04 24             	mov    DWORD PTR [esp],eax
c0009863:	e8 4f d6 01 00       	call   c0026eb7 <__extendsfdf2>
c0009868:	83 c4 10             	add    esp,0x10
c000986b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000986f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000987b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000987f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009883:	e8 38 cc 01 00       	call   c00264c0 <__muldf3>
c0009888:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000988c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009890:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009893:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009897:	e8 1b d6 01 00       	call   c0026eb7 <__extendsfdf2>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098a7:	52                   	push   edx
c00098a8:	50                   	push   eax
c00098a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098b1:	e8 8d c5 01 00       	call   c0025e43 <__adddf3>
c00098b6:	59                   	pop    ecx
c00098b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098bb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098bf:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098c5:	e8 ed d5 01 00       	call   c0026eb7 <__extendsfdf2>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098d5:	52                   	push   edx
c00098d6:	50                   	push   eax
c00098d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098df:	e8 dc cb 01 00       	call   c00264c0 <__muldf3>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098ef:	52                   	push   edx
c00098f0:	50                   	push   eax
c00098f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f9:	e8 45 c5 01 00       	call   c0025e43 <__adddf3>
c00098fe:	83 c4 10             	add    esp,0x10
c0009901:	85 ed                	test   ebp,ebp
c0009903:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009907:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000990b:	0f 8f 21 ff ff ff    	jg     c0009832 <calc_output_single+0x166>
c0009911:	52                   	push   edx
c0009912:	50                   	push   eax
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 23 c5 01 00       	call   c0025e43 <__adddf3>
c0009920:	83 c4 5c             	add    esp,0x5c
c0009923:	5b                   	pop    ebx
c0009924:	5e                   	pop    esi
c0009925:	5f                   	pop    edi
c0009926:	5d                   	pop    ebp
c0009927:	c3                   	ret    

c0009928 <calc_output_stereo>:
c0009928:	55                   	push   ebp
c0009929:	89 cd                	mov    ebp,ecx
c000992b:	57                   	push   edi
c000992c:	56                   	push   esi
c000992d:	53                   	push   ebx
c000992e:	89 c3                	mov    ebx,eax
c0009930:	83 ec 6c             	sub    esp,0x6c
c0009933:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009937:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000993e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009945:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009949:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000994d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009950:	e8 35 fd ff ff       	call   c000968a <int_to_fp>
c0009955:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000995d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009961:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009969:	29 c8                	sub    eax,ecx
c000996b:	99                   	cdq    
c000996c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009974:	0f af d0             	imul   edx,eax
c0009977:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000997a:	31 d2                	xor    edx,edx
c000997c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009980:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009984:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009987:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000998b:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c000998e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009992:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009996:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009999:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000999e:	29 c1                	sub    ecx,eax
c00099a0:	31 c0                	xor    eax,eax
c00099a2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099ad:	83 c7 08             	add    edi,0x8
c00099b0:	e8 e3 fc ff ff       	call   c0009698 <fp_to_double>
c00099b5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099c1:	e8 c8 fc ff ff       	call   c000968e <fp_to_int>
c00099c6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099c9:	52                   	push   edx
c00099ca:	52                   	push   edx
c00099cb:	51                   	push   ecx
c00099cc:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099d0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099d4:	e8 ff bd 01 00       	call   c00257d8 <__subsf3>
c00099d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00099dc:	e8 d6 d4 01 00       	call   c0026eb7 <__extendsfdf2>
c00099e1:	83 c4 10             	add    esp,0x10
c00099e4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099e8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099fc:	e8 bf ca 01 00       	call   c00264c0 <__muldf3>
c0009a01:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a05:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a0c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a10:	e8 a2 d4 01 00       	call   c0026eb7 <__extendsfdf2>
c0009a15:	83 c4 10             	add    esp,0x10
c0009a18:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a1c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a20:	52                   	push   edx
c0009a21:	50                   	push   eax
c0009a22:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a26:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a2a:	e8 14 c4 01 00       	call   c0025e43 <__adddf3>
c0009a2f:	59                   	pop    ecx
c0009a30:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a34:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a38:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a3e:	e8 74 d4 01 00       	call   c0026eb7 <__extendsfdf2>
c0009a43:	83 c4 10             	add    esp,0x10
c0009a46:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a4a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a56:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5e:	e8 5d ca 01 00       	call   c00264c0 <__muldf3>
c0009a63:	83 c4 10             	add    esp,0x10
c0009a66:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a6a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a6e:	52                   	push   edx
c0009a6f:	50                   	push   eax
c0009a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a78:	e8 c6 c3 01 00       	call   c0025e43 <__adddf3>
c0009a7d:	59                   	pop    ecx
c0009a7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a82:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a86:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a8c:	e8 26 d4 01 00       	call   c0026eb7 <__extendsfdf2>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a98:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aa8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aac:	e8 0f ca 01 00       	call   c00264c0 <__muldf3>
c0009ab1:	83 c4 10             	add    esp,0x10
c0009ab4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ab8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009abc:	52                   	push   edx
c0009abd:	50                   	push   eax
c0009abe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac6:	e8 78 c3 01 00       	call   c0025e43 <__adddf3>
c0009acb:	83 c4 10             	add    esp,0x10
c0009ace:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ad2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ada:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009ade:	0f 89 c5 fe ff ff    	jns    c00099a9 <calc_output_stereo+0x81>
c0009ae4:	29 e9                	sub    ecx,ebp
c0009ae6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009aea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009aee:	29 c8                	sub    eax,ecx
c0009af0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009af8:	99                   	cdq    
c0009af9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009afd:	31 d2                	xor    edx,edx
c0009aff:	0f af f8             	imul   edi,eax
c0009b02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b06:	40                   	inc    eax
c0009b07:	01 cf                	add    edi,ecx
c0009b09:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b0e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b12:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b1a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b1d:	31 c0                	xor    eax,eax
c0009b1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b23:	89 f8                	mov    eax,edi
c0009b25:	83 eb 08             	sub    ebx,0x8
c0009b28:	e8 6b fb ff ff       	call   c0009698 <fp_to_double>
c0009b2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b35:	89 f8                	mov    eax,edi
c0009b37:	e8 52 fb ff ff       	call   c000968e <fp_to_int>
c0009b3c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b3f:	52                   	push   edx
c0009b40:	52                   	push   edx
c0009b41:	55                   	push   ebp
c0009b42:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b46:	e8 8d bc 01 00       	call   c00257d8 <__subsf3>
c0009b4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b4e:	e8 64 d3 01 00       	call   c0026eb7 <__extendsfdf2>
c0009b53:	83 c4 10             	add    esp,0x10
c0009b56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6e:	e8 4d c9 01 00       	call   c00264c0 <__muldf3>
c0009b73:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7e:	e8 34 d3 01 00       	call   c0026eb7 <__extendsfdf2>
c0009b83:	83 c4 10             	add    esp,0x10
c0009b86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b8a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b8e:	52                   	push   edx
c0009b8f:	50                   	push   eax
c0009b90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b98:	e8 a6 c2 01 00       	call   c0025e43 <__adddf3>
c0009b9d:	59                   	pop    ecx
c0009b9e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ba2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ba6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bac:	e8 06 d3 01 00       	call   c0026eb7 <__extendsfdf2>
c0009bb1:	83 c4 10             	add    esp,0x10
c0009bb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bbc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bcc:	e8 ef c8 01 00       	call   c00264c0 <__muldf3>
c0009bd1:	83 c4 10             	add    esp,0x10
c0009bd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bdc:	52                   	push   edx
c0009bdd:	50                   	push   eax
c0009bde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be6:	e8 58 c2 01 00       	call   c0025e43 <__adddf3>
c0009beb:	5d                   	pop    ebp
c0009bec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009bf0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009bf4:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009bfa:	e8 b8 d2 01 00       	call   c0026eb7 <__extendsfdf2>
c0009bff:	83 c4 10             	add    esp,0x10
c0009c02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c06:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c12:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c16:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c1a:	e8 a1 c8 01 00       	call   c00264c0 <__muldf3>
c0009c1f:	83 c4 10             	add    esp,0x10
c0009c22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c26:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c2a:	52                   	push   edx
c0009c2b:	50                   	push   eax
c0009c2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c34:	e8 0a c2 01 00       	call   c0025e43 <__adddf3>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c48:	85 ff                	test   edi,edi
c0009c4a:	0f 8f d3 fe ff ff    	jg     c0009b23 <calc_output_stereo+0x1fb>
c0009c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c60:	e8 de c1 01 00       	call   c0025e43 <__adddf3>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c70:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c80:	e8 3b c8 01 00       	call   c00264c0 <__muldf3>
c0009c85:	59                   	pop    ecx
c0009c86:	5b                   	pop    ebx
c0009c87:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c97:	e8 f7 d0 01 00       	call   c0026d93 <__truncdfsf2>
c0009c9c:	83 c4 10             	add    esp,0x10
c0009c9f:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb8:	e8 86 c1 01 00       	call   c0025e43 <__adddf3>
c0009cbd:	83 c4 10             	add    esp,0x10
c0009cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ccc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd8:	e8 e3 c7 01 00       	call   c00264c0 <__muldf3>
c0009cdd:	5e                   	pop    esi
c0009cde:	5f                   	pop    edi
c0009cdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ce3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cef:	e8 9f d0 01 00       	call   c0026d93 <__truncdfsf2>
c0009cf4:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009cfb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cfe:	83 c4 7c             	add    esp,0x7c
c0009d01:	5b                   	pop    ebx
c0009d02:	5e                   	pop    esi
c0009d03:	5f                   	pop    edi
c0009d04:	5d                   	pop    ebp
c0009d05:	c3                   	ret    

c0009d06 <calc_output_quad>:
c0009d06:	55                   	push   ebp
c0009d07:	57                   	push   edi
c0009d08:	56                   	push   esi
c0009d09:	89 c6                	mov    esi,eax
c0009d0b:	53                   	push   ebx
c0009d0c:	83 ec 7c             	sub    esp,0x7c
c0009d0f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d13:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d17:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d1e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d2d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d30:	e8 55 f9 ff ff       	call   c000968a <int_to_fp>
c0009d35:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d38:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d3b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d43:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d47:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d4b:	99                   	cdq    
c0009d4c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d50:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d54:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d57:	31 d2                	xor    edx,edx
c0009d59:	0f af d8             	imul   ebx,eax
c0009d5c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d64:	0f af c7             	imul   eax,edi
c0009d67:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d6b:	29 c1                	sub    ecx,eax
c0009d6d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d8e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d92:	89 d8                	mov    eax,ebx
c0009d94:	83 c7 10             	add    edi,0x10
c0009d97:	e8 fc f8 ff ff       	call   c0009698 <fp_to_double>
c0009d9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009da0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da4:	89 d8                	mov    eax,ebx
c0009da6:	e8 e3 f8 ff ff       	call   c000968e <fp_to_int>
c0009dab:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009daf:	52                   	push   edx
c0009db0:	52                   	push   edx
c0009db1:	51                   	push   ecx
c0009db2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009db6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dba:	e8 19 ba 01 00       	call   c00257d8 <__subsf3>
c0009dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dc2:	e8 f0 d0 01 00       	call   c0026eb7 <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dda:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dde:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009de2:	e8 d9 c6 01 00       	call   c00264c0 <__muldf3>
c0009de7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009deb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009def:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009df2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009df6:	e8 bc d0 01 00       	call   c0026eb7 <__extendsfdf2>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e02:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e06:	52                   	push   edx
c0009e07:	50                   	push   eax
c0009e08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e10:	e8 2e c0 01 00       	call   c0025e43 <__adddf3>
c0009e15:	59                   	pop    ecx
c0009e16:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e1a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e1e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e24:	e8 8e d0 01 00       	call   c0026eb7 <__extendsfdf2>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e30:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e3c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e40:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e44:	e8 77 c6 01 00       	call   c00264c0 <__muldf3>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e50:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e54:	52                   	push   edx
c0009e55:	50                   	push   eax
c0009e56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5e:	e8 e0 bf 01 00       	call   c0025e43 <__adddf3>
c0009e63:	59                   	pop    ecx
c0009e64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e6c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e72:	e8 40 d0 01 00       	call   c0026eb7 <__extendsfdf2>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e7e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e8e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e92:	e8 29 c6 01 00       	call   c00264c0 <__muldf3>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e9e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ea2:	52                   	push   edx
c0009ea3:	50                   	push   eax
c0009ea4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eac:	e8 92 bf 01 00       	call   c0025e43 <__adddf3>
c0009eb1:	59                   	pop    ecx
c0009eb2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eb6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eba:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ec0:	e8 f2 cf 01 00       	call   c0026eb7 <__extendsfdf2>
c0009ec5:	83 c4 10             	add    esp,0x10
c0009ec8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ecc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009edc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ee0:	e8 db c5 01 00       	call   c00264c0 <__muldf3>
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ef0:	52                   	push   edx
c0009ef1:	50                   	push   eax
c0009ef2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ef6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009efa:	e8 44 bf 01 00       	call   c0025e43 <__adddf3>
c0009eff:	59                   	pop    ecx
c0009f00:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f04:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f08:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f0e:	e8 a4 cf 01 00       	call   c0026eb7 <__extendsfdf2>
c0009f13:	83 c4 10             	add    esp,0x10
c0009f16:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f1a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2e:	e8 8d c5 01 00       	call   c00264c0 <__muldf3>
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f3e:	52                   	push   edx
c0009f3f:	50                   	push   eax
c0009f40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f48:	e8 f6 be 01 00       	call   c0025e43 <__adddf3>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f54:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f58:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f5c:	0f 89 30 fe ff ff    	jns    c0009d92 <calc_output_quad+0x8c>
c0009f62:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f6a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f6e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f72:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f7a:	29 c8                	sub    eax,ecx
c0009f7c:	99                   	cdq    
c0009f7d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f81:	31 d2                	xor    edx,edx
c0009f83:	0f af d8             	imul   ebx,eax
c0009f86:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f8a:	40                   	inc    eax
c0009f8b:	01 cb                	add    ebx,ecx
c0009f8d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f92:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f96:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f9e:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fa1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fa9:	31 c0                	xor    eax,eax
c0009fab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009faf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fb7:	89 d8                	mov    eax,ebx
c0009fb9:	83 ee 10             	sub    esi,0x10
c0009fbc:	e8 d7 f6 ff ff       	call   c0009698 <fp_to_double>
c0009fc1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fc9:	89 d8                	mov    eax,ebx
c0009fcb:	e8 be f6 ff ff       	call   c000968e <fp_to_int>
c0009fd0:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fd4:	52                   	push   edx
c0009fd5:	52                   	push   edx
c0009fd6:	57                   	push   edi
c0009fd7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fdb:	e8 f8 b7 01 00       	call   c00257d8 <__subsf3>
c0009fe0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fe3:	e8 cf ce 01 00       	call   c0026eb7 <__extendsfdf2>
c0009fe8:	83 c4 10             	add    esp,0x10
c0009feb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fef:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ffb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a003:	e8 b8 c4 01 00       	call   c00264c0 <__muldf3>
c000a008:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a00b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a00f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a013:	e8 9f ce 01 00       	call   c0026eb7 <__extendsfdf2>
c000a018:	83 c4 10             	add    esp,0x10
c000a01b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a023:	52                   	push   edx
c000a024:	50                   	push   eax
c000a025:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a029:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02d:	e8 11 be 01 00       	call   c0025e43 <__adddf3>
c000a032:	59                   	pop    ecx
c000a033:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a037:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a03b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a041:	e8 71 ce 01 00       	call   c0026eb7 <__extendsfdf2>
c000a046:	83 c4 10             	add    esp,0x10
c000a049:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a04d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a059:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a061:	e8 5a c4 01 00       	call   c00264c0 <__muldf3>
c000a066:	83 c4 10             	add    esp,0x10
c000a069:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a071:	52                   	push   edx
c000a072:	50                   	push   eax
c000a073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07b:	e8 c3 bd 01 00       	call   c0025e43 <__adddf3>
c000a080:	5f                   	pop    edi
c000a081:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a085:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a089:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a08f:	e8 23 ce 01 00       	call   c0026eb7 <__extendsfdf2>
c000a094:	83 c4 10             	add    esp,0x10
c000a097:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a09b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ab:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0af:	e8 0c c4 01 00       	call   c00264c0 <__muldf3>
c000a0b4:	83 c4 10             	add    esp,0x10
c000a0b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0bf:	52                   	push   edx
c000a0c0:	50                   	push   eax
c000a0c1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c9:	e8 75 bd 01 00       	call   c0025e43 <__adddf3>
c000a0ce:	59                   	pop    ecx
c000a0cf:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0d3:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0d7:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0dd:	e8 d5 cd 01 00       	call   c0026eb7 <__extendsfdf2>
c000a0e2:	83 c4 10             	add    esp,0x10
c000a0e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0fd:	e8 be c3 01 00       	call   c00264c0 <__muldf3>
c000a102:	83 c4 10             	add    esp,0x10
c000a105:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a109:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10d:	52                   	push   edx
c000a10e:	50                   	push   eax
c000a10f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a113:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a117:	e8 27 bd 01 00       	call   c0025e43 <__adddf3>
c000a11c:	5f                   	pop    edi
c000a11d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a121:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a125:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a12b:	e8 87 cd 01 00       	call   c0026eb7 <__extendsfdf2>
c000a130:	83 c4 10             	add    esp,0x10
c000a133:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a137:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a13b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a143:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a147:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a14b:	e8 70 c3 01 00       	call   c00264c0 <__muldf3>
c000a150:	83 c4 10             	add    esp,0x10
c000a153:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a157:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a15b:	52                   	push   edx
c000a15c:	50                   	push   eax
c000a15d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a161:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a165:	e8 d9 bc 01 00       	call   c0025e43 <__adddf3>
c000a16a:	83 c4 10             	add    esp,0x10
c000a16d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a171:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a175:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a179:	85 db                	test   ebx,ebx
c000a17b:	0f 8f 36 fe ff ff    	jg     c0009fb7 <calc_output_quad+0x2b1>
c000a181:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a185:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a18d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a191:	e8 ad bc 01 00       	call   c0025e43 <__adddf3>
c000a196:	83 c4 10             	add    esp,0x10
c000a199:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a19d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b1:	e8 0a c3 01 00       	call   c00264c0 <__muldf3>
c000a1b6:	59                   	pop    ecx
c000a1b7:	5b                   	pop    ebx
c000a1b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c8:	e8 c6 cb 01 00       	call   c0026d93 <__truncdfsf2>
c000a1cd:	83 c4 10             	add    esp,0x10
c000a1d0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1d7:	89 06                	mov    DWORD PTR [esi],eax
c000a1d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e9:	e8 55 bc 01 00       	call   c0025e43 <__adddf3>
c000a1ee:	83 c4 10             	add    esp,0x10
c000a1f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a205:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a209:	e8 b2 c2 01 00       	call   c00264c0 <__muldf3>
c000a20e:	5e                   	pop    esi
c000a20f:	5f                   	pop    edi
c000a210:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a214:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a220:	e8 6e cb 01 00       	call   c0026d93 <__truncdfsf2>
c000a225:	83 c4 10             	add    esp,0x10
c000a228:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a22f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a232:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a236:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a23a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a23e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a242:	e8 fc bb 01 00       	call   c0025e43 <__adddf3>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a24e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a262:	e8 59 c2 01 00       	call   c00264c0 <__muldf3>
c000a267:	5d                   	pop    ebp
c000a268:	59                   	pop    ecx
c000a269:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a26d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a271:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a275:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a279:	e8 15 cb 01 00       	call   c0026d93 <__truncdfsf2>
c000a27e:	83 c4 10             	add    esp,0x10
c000a281:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a288:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a28b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a293:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a297:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a29b:	e8 a3 bb 01 00       	call   c0025e43 <__adddf3>
c000a2a0:	83 c4 10             	add    esp,0x10
c000a2a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2bb:	e8 00 c2 01 00       	call   c00264c0 <__muldf3>
c000a2c0:	5b                   	pop    ebx
c000a2c1:	5e                   	pop    esi
c000a2c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d2:	e8 bc ca 01 00       	call   c0026d93 <__truncdfsf2>
c000a2d7:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2de:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2e1:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2e7:	5b                   	pop    ebx
c000a2e8:	5e                   	pop    esi
c000a2e9:	5f                   	pop    edi
c000a2ea:	5d                   	pop    ebp
c000a2eb:	c3                   	ret    

c000a2ec <calc_output_hex>:
c000a2ec:	55                   	push   ebp
c000a2ed:	89 cd                	mov    ebp,ecx
c000a2ef:	57                   	push   edi
c000a2f0:	56                   	push   esi
c000a2f1:	53                   	push   ebx
c000a2f2:	89 c3                	mov    ebx,eax
c000a2f4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2fa:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2fd:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a304:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a30b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a30f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a313:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a316:	e8 6f f3 ff ff       	call   c000968a <int_to_fp>
c000a31b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a31e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a322:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a325:	29 c8                	sub    eax,ecx
c000a327:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a32b:	99                   	cdq    
c000a32c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a334:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a337:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a33f:	0f af f8             	imul   edi,eax
c000a342:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a345:	01 cf                	add    edi,ecx
c000a347:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a34b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a34e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a352:	0f af c2             	imul   eax,edx
c000a355:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a359:	29 c1                	sub    ecx,eax
c000a35b:	31 d2                	xor    edx,edx
c000a35d:	31 c0                	xor    eax,eax
c000a35f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a36a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a36e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a372:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a376:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a37a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a37e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	89 f8                	mov    eax,edi
c000a38c:	e8 07 f3 ff ff       	call   c0009698 <fp_to_double>
c000a391:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a395:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a399:	89 f8                	mov    eax,edi
c000a39b:	e8 ee f2 ff ff       	call   c000968e <fp_to_int>
c000a3a0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3a4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3a7:	52                   	push   edx
c000a3a8:	52                   	push   edx
c000a3a9:	51                   	push   ecx
c000a3aa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3ae:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3b5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3b9:	e8 1a b4 01 00       	call   c00257d8 <__subsf3>
c000a3be:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3c1:	e8 f1 ca 01 00       	call   c0026eb7 <__extendsfdf2>
c000a3c6:	83 c4 10             	add    esp,0x10
c000a3c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3e1:	e8 da c0 01 00       	call   c00264c0 <__muldf3>
c000a3e6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3ee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3f5:	e8 bd ca 01 00       	call   c0026eb7 <__extendsfdf2>
c000a3fa:	83 c4 10             	add    esp,0x10
c000a3fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a401:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a405:	52                   	push   edx
c000a406:	50                   	push   eax
c000a407:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40f:	e8 2f ba 01 00       	call   c0025e43 <__adddf3>
c000a414:	59                   	pop    ecx
c000a415:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a419:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a41d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a423:	e8 8f ca 01 00       	call   c0026eb7 <__extendsfdf2>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a42f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a43f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a443:	e8 78 c0 01 00       	call   c00264c0 <__muldf3>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a44f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a453:	52                   	push   edx
c000a454:	50                   	push   eax
c000a455:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a459:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a45d:	e8 e1 b9 01 00       	call   c0025e43 <__adddf3>
c000a462:	59                   	pop    ecx
c000a463:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a467:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a46b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a471:	e8 41 ca 01 00       	call   c0026eb7 <__extendsfdf2>
c000a476:	83 c4 10             	add    esp,0x10
c000a479:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a47d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a485:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a489:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a48d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a491:	e8 2a c0 01 00       	call   c00264c0 <__muldf3>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a49d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4a1:	52                   	push   edx
c000a4a2:	50                   	push   eax
c000a4a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ab:	e8 93 b9 01 00       	call   c0025e43 <__adddf3>
c000a4b0:	59                   	pop    ecx
c000a4b1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4b5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4b9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4bf:	e8 f3 c9 01 00       	call   c0026eb7 <__extendsfdf2>
c000a4c4:	83 c4 10             	add    esp,0x10
c000a4c7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4cb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4db:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4df:	e8 dc bf 01 00       	call   c00264c0 <__muldf3>
c000a4e4:	83 c4 10             	add    esp,0x10
c000a4e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ef:	52                   	push   edx
c000a4f0:	50                   	push   eax
c000a4f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f9:	e8 45 b9 01 00       	call   c0025e43 <__adddf3>
c000a4fe:	59                   	pop    ecx
c000a4ff:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a503:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a507:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a50d:	e8 a5 c9 01 00       	call   c0026eb7 <__extendsfdf2>
c000a512:	83 c4 10             	add    esp,0x10
c000a515:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a519:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a525:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a529:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a52d:	e8 8e bf 01 00       	call   c00264c0 <__muldf3>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a539:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a53d:	52                   	push   edx
c000a53e:	50                   	push   eax
c000a53f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a543:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a547:	e8 f7 b8 01 00       	call   c0025e43 <__adddf3>
c000a54c:	59                   	pop    ecx
c000a54d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a551:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a555:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a55b:	e8 57 c9 01 00       	call   c0026eb7 <__extendsfdf2>
c000a560:	83 c4 10             	add    esp,0x10
c000a563:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a567:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a573:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a577:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a57b:	e8 40 bf 01 00       	call   c00264c0 <__muldf3>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	83 c6 18             	add    esi,0x18
c000a586:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a58a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a58e:	52                   	push   edx
c000a58f:	50                   	push   eax
c000a590:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a594:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a598:	e8 a6 b8 01 00       	call   c0025e43 <__adddf3>
c000a59d:	59                   	pop    ecx
c000a59e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5a2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5a6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5ac:	e8 06 c9 01 00       	call   c0026eb7 <__extendsfdf2>
c000a5b1:	83 c4 10             	add    esp,0x10
c000a5b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5b8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5cc:	e8 ef be 01 00       	call   c00264c0 <__muldf3>
c000a5d1:	83 c4 10             	add    esp,0x10
c000a5d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5dc:	52                   	push   edx
c000a5dd:	50                   	push   eax
c000a5de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e6:	e8 58 b8 01 00       	call   c0025e43 <__adddf3>
c000a5eb:	83 c4 10             	add    esp,0x10
c000a5ee:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5f2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5f6:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5f9:	0f 89 8b fd ff ff    	jns    c000a38a <calc_output_hex+0x9e>
c000a5ff:	31 f6                	xor    esi,esi
c000a601:	31 ff                	xor    edi,edi
c000a603:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a607:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a60a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a60e:	29 e9                	sub    ecx,ebp
c000a610:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a614:	29 c8                	sub    eax,ecx
c000a616:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a619:	99                   	cdq    
c000a61a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a61e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a621:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a625:	0f af e8             	imul   ebp,eax
c000a628:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a62c:	40                   	inc    eax
c000a62d:	01 cd                	add    ebp,ecx
c000a62f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a634:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a638:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a63c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a640:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a643:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a647:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a64b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a64f:	89 e8                	mov    eax,ebp
c000a651:	e8 42 f0 ff ff       	call   c0009698 <fp_to_double>
c000a656:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a65a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a65e:	89 e8                	mov    eax,ebp
c000a660:	e8 29 f0 ff ff       	call   c000968e <fp_to_int>
c000a665:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a669:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a66c:	52                   	push   edx
c000a66d:	52                   	push   edx
c000a66e:	51                   	push   ecx
c000a66f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a676:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a67d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a681:	e8 52 b1 01 00       	call   c00257d8 <__subsf3>
c000a686:	89 04 24             	mov    DWORD PTR [esp],eax
c000a689:	e8 29 c8 01 00       	call   c0026eb7 <__extendsfdf2>
c000a68e:	83 c4 10             	add    esp,0x10
c000a691:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a695:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a9:	e8 12 be 01 00       	call   c00264c0 <__muldf3>
c000a6ae:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6b9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6bc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6c0:	e8 f2 c7 01 00       	call   c0026eb7 <__extendsfdf2>
c000a6c5:	83 c4 10             	add    esp,0x10
c000a6c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d0:	52                   	push   edx
c000a6d1:	50                   	push   eax
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6da:	e8 64 b7 01 00       	call   c0025e43 <__adddf3>
c000a6df:	59                   	pop    ecx
c000a6e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6e4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6e8:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6ee:	e8 c4 c7 01 00       	call   c0026eb7 <__extendsfdf2>
c000a6f3:	83 c4 10             	add    esp,0x10
c000a6f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a706:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70e:	e8 ad bd 01 00       	call   c00264c0 <__muldf3>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a71a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a71e:	52                   	push   edx
c000a71f:	50                   	push   eax
c000a720:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a724:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a728:	e8 16 b7 01 00       	call   c0025e43 <__adddf3>
c000a72d:	59                   	pop    ecx
c000a72e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a732:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a736:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a73c:	e8 76 c7 01 00       	call   c0026eb7 <__extendsfdf2>
c000a741:	83 c4 10             	add    esp,0x10
c000a744:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a748:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a74c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a754:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a758:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a75c:	e8 5f bd 01 00       	call   c00264c0 <__muldf3>
c000a761:	83 c4 10             	add    esp,0x10
c000a764:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a768:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a76c:	52                   	push   edx
c000a76d:	50                   	push   eax
c000a76e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a772:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a776:	e8 c8 b6 01 00       	call   c0025e43 <__adddf3>
c000a77b:	59                   	pop    ecx
c000a77c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a780:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a784:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a78a:	e8 28 c7 01 00       	call   c0026eb7 <__extendsfdf2>
c000a78f:	83 c4 10             	add    esp,0x10
c000a792:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a796:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a79a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7a6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7aa:	e8 11 bd 01 00       	call   c00264c0 <__muldf3>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ba:	52                   	push   edx
c000a7bb:	50                   	push   eax
c000a7bc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c4:	e8 7a b6 01 00       	call   c0025e43 <__adddf3>
c000a7c9:	59                   	pop    ecx
c000a7ca:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7ce:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7d2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7d8:	e8 da c6 01 00       	call   c0026eb7 <__extendsfdf2>
c000a7dd:	83 c4 10             	add    esp,0x10
c000a7e0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7e4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f8:	e8 c3 bc 01 00       	call   c00264c0 <__muldf3>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a804:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a808:	52                   	push   edx
c000a809:	50                   	push   eax
c000a80a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a80e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a812:	e8 2c b6 01 00       	call   c0025e43 <__adddf3>
c000a817:	59                   	pop    ecx
c000a818:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a81c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a820:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a826:	e8 8c c6 01 00       	call   c0026eb7 <__extendsfdf2>
c000a82b:	83 c4 10             	add    esp,0x10
c000a82e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a832:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a836:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a842:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a846:	e8 75 bc 01 00       	call   c00264c0 <__muldf3>
c000a84b:	83 c4 10             	add    esp,0x10
c000a84e:	83 eb 18             	sub    ebx,0x18
c000a851:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a855:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a859:	52                   	push   edx
c000a85a:	50                   	push   eax
c000a85b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a85f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a863:	e8 db b5 01 00       	call   c0025e43 <__adddf3>
c000a868:	59                   	pop    ecx
c000a869:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a86d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a871:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a877:	e8 3b c6 01 00       	call   c0026eb7 <__extendsfdf2>
c000a87c:	83 c4 10             	add    esp,0x10
c000a87f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a883:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a887:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a893:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a897:	e8 24 bc 01 00       	call   c00264c0 <__muldf3>
c000a89c:	83 c4 10             	add    esp,0x10
c000a89f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8a7:	52                   	push   edx
c000a8a8:	50                   	push   eax
c000a8a9:	57                   	push   edi
c000a8aa:	56                   	push   esi
c000a8ab:	e8 93 b5 01 00       	call   c0025e43 <__adddf3>
c000a8b0:	83 c4 10             	add    esp,0x10
c000a8b3:	89 c6                	mov    esi,eax
c000a8b5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8b8:	89 d7                	mov    edi,edx
c000a8ba:	85 ed                	test   ebp,ebp
c000a8bc:	0f 8f 8d fd ff ff    	jg     c000a64f <calc_output_hex+0x363>
c000a8c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8d2:	e8 6c b5 01 00       	call   c0025e43 <__adddf3>
c000a8d7:	83 c4 10             	add    esp,0x10
c000a8da:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f1:	e8 ca bb 01 00       	call   c00264c0 <__muldf3>
c000a8f6:	59                   	pop    ecx
c000a8f7:	5b                   	pop    ebx
c000a8f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a900:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a904:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a908:	e8 86 c4 01 00       	call   c0026d93 <__truncdfsf2>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a917:	89 03                	mov    DWORD PTR [ebx],eax
c000a919:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a91d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a921:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a925:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a929:	e8 15 b5 01 00       	call   c0025e43 <__adddf3>
c000a92e:	83 c4 10             	add    esp,0x10
c000a931:	89 04 24             	mov    DWORD PTR [esp],eax
c000a934:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a940:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a944:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a948:	e8 73 bb 01 00       	call   c00264c0 <__muldf3>
c000a94d:	5d                   	pop    ebp
c000a94e:	59                   	pop    ecx
c000a94f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a953:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a957:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95f:	e8 2f c4 01 00       	call   c0026d93 <__truncdfsf2>
c000a964:	83 c4 10             	add    esp,0x10
c000a967:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a96e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a971:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a975:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a979:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a97d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a981:	e8 bd b4 01 00       	call   c0025e43 <__adddf3>
c000a986:	83 c4 10             	add    esp,0x10
c000a989:	89 04 24             	mov    DWORD PTR [esp],eax
c000a98c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a99c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a0:	e8 1b bb 01 00       	call   c00264c0 <__muldf3>
c000a9a5:	5b                   	pop    ebx
c000a9a6:	5d                   	pop    ebp
c000a9a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b7:	e8 d7 c3 01 00       	call   c0026d93 <__truncdfsf2>
c000a9bc:	83 c4 10             	add    esp,0x10
c000a9bf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9c6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d9:	e8 65 b4 01 00       	call   c0025e43 <__adddf3>
c000a9de:	83 c4 10             	add    esp,0x10
c000a9e1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f8:	e8 c3 ba 01 00       	call   c00264c0 <__muldf3>
c000a9fd:	59                   	pop    ecx
c000a9fe:	5b                   	pop    ebx
c000a9ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0f:	e8 7f c3 01 00       	call   c0026d93 <__truncdfsf2>
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa1e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa31:	e8 0d b4 01 00       	call   c0025e43 <__adddf3>
c000aa36:	83 c4 10             	add    esp,0x10
c000aa39:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa50:	e8 6b ba 01 00       	call   c00264c0 <__muldf3>
c000aa55:	5d                   	pop    ebp
c000aa56:	59                   	pop    ecx
c000aa57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa67:	e8 27 c3 01 00       	call   c0026d93 <__truncdfsf2>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa76:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa79:	57                   	push   edi
c000aa7a:	56                   	push   esi
c000aa7b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa7f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa83:	e8 bb b3 01 00       	call   c0025e43 <__adddf3>
c000aa88:	83 c4 10             	add    esp,0x10
c000aa8b:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa92:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa2:	e8 19 ba 01 00       	call   c00264c0 <__muldf3>
c000aaa7:	5b                   	pop    ebx
c000aaa8:	5e                   	pop    esi
c000aaa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aab1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab9:	e8 d5 c2 01 00       	call   c0026d93 <__truncdfsf2>
c000aabe:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aac5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aac8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aace:	5b                   	pop    ebx
c000aacf:	5e                   	pop    esi
c000aad0:	5f                   	pop    edi
c000aad1:	5d                   	pop    ebp
c000aad2:	c3                   	ret    

c000aad3 <sinc_reset>:
c000aad3:	56                   	push   esi
c000aad4:	53                   	push   ebx
c000aad5:	51                   	push   ecx
c000aad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aada:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aadd:	85 db                	test   ebx,ebx
c000aadf:	74 59                	je     c000ab3a <sinc_reset+0x67>
c000aae1:	31 d2                	xor    edx,edx
c000aae3:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aaea:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aaed:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aaf0:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aaf7:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aafe:	31 c0                	xor    eax,eax
c000ab00:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab06:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab09:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab0c:	52                   	push   edx
c000ab0d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab10:	c1 e0 02             	shl    eax,0x2
c000ab13:	50                   	push   eax
c000ab14:	6a 00                	push   0x0
c000ab16:	56                   	push   esi
c000ab17:	e8 6f 5b ff ff       	call   c000068b <memset>
c000ab1c:	83 c4 0c             	add    esp,0xc
c000ab1f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab22:	c1 e0 02             	shl    eax,0x2
c000ab25:	50                   	push   eax
c000ab26:	68 aa 00 00 00       	push   0xaa
c000ab2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab2e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab31:	50                   	push   eax
c000ab32:	e8 54 5b ff ff       	call   c000068b <memset>
c000ab37:	83 c4 10             	add    esp,0x10
c000ab3a:	58                   	pop    eax
c000ab3b:	5b                   	pop    ebx
c000ab3c:	5e                   	pop    esi
c000ab3d:	c3                   	ret    

c000ab3e <calc_output_multi>:
c000ab3e:	55                   	push   ebp
c000ab3f:	57                   	push   edi
c000ab40:	56                   	push   esi
c000ab41:	89 c6                	mov    esi,eax
c000ab43:	53                   	push   ebx
c000ab44:	83 ec 4c             	sub    esp,0x4c
c000ab47:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab4b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab4f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab53:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab57:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab63:	8d 46 44             	lea    eax,[esi+0x44]
c000ab66:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab69:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab73:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab76:	e8 0f eb ff ff       	call   c000968a <int_to_fp>
c000ab7b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab7e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab82:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab86:	99                   	cdq    
c000ab87:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab8f:	0f af d0             	imul   edx,eax
c000ab92:	0f af c3             	imul   eax,ebx
c000ab95:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab99:	29 c1                	sub    ecx,eax
c000ab9b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab9f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000aba3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abae:	57                   	push   edi
c000abaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abb3:	6a 00                	push   0x0
c000abb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb9:	e8 cd 5a ff ff       	call   c000068b <memset>
c000abbe:	83 c4 10             	add    esp,0x10
c000abc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abc5:	89 df                	mov    edi,ebx
c000abc7:	e8 cc ea ff ff       	call   c0009698 <fp_to_double>
c000abcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abd8:	e8 b1 ea ff ff       	call   c000968e <fp_to_int>
c000abdd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abe0:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abe3:	51                   	push   ecx
c000abe4:	51                   	push   ecx
c000abe5:	55                   	push   ebp
c000abe6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abea:	e8 e9 ab 01 00       	call   c00257d8 <__subsf3>
c000abef:	89 04 24             	mov    DWORD PTR [esp],eax
c000abf2:	e8 c0 c2 01 00       	call   c0026eb7 <__extendsfdf2>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac0a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac0e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac12:	e8 a9 b8 01 00       	call   c00264c0 <__muldf3>
c000ac17:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac1e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac22:	e8 90 c2 01 00       	call   c0026eb7 <__extendsfdf2>
c000ac27:	83 c4 10             	add    esp,0x10
c000ac2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac32:	52                   	push   edx
c000ac33:	50                   	push   eax
c000ac34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac3c:	e8 02 b2 01 00       	call   c0025e43 <__adddf3>
c000ac41:	83 c4 10             	add    esp,0x10
c000ac44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac48:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac4c:	89 f8                	mov    eax,edi
c000ac4e:	b9 08 00 00 00       	mov    ecx,0x8
c000ac53:	99                   	cdq    
c000ac54:	f7 f9                	idiv   ecx
c000ac56:	4a                   	dec    edx
c000ac57:	83 fa 06             	cmp    edx,0x6
c000ac5a:	77 07                	ja     c000ac63 <calc_output_multi+0x125>
c000ac5c:	ff 24 95 84 86 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd797c]
c000ac63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac66:	4f                   	dec    edi
c000ac67:	83 ec 0c             	sub    esp,0xc
c000ac6a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac71:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac78:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac7c:	e8 36 c2 01 00       	call   c0026eb7 <__extendsfdf2>
c000ac81:	83 c4 10             	add    esp,0x10
c000ac84:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac88:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac9c:	e8 1f b8 01 00       	call   c00264c0 <__muldf3>
c000aca1:	83 c4 10             	add    esp,0x10
c000aca4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aca8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acac:	52                   	push   edx
c000acad:	50                   	push   eax
c000acae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acb1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000acb4:	e8 8a b1 01 00       	call   c0025e43 <__adddf3>
c000acb9:	83 c4 10             	add    esp,0x10
c000acbc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acbf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acc2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acc5:	4f                   	dec    edi
c000acc6:	83 ec 0c             	sub    esp,0xc
c000acc9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000accc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acd0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acd7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acdb:	e8 d7 c1 01 00       	call   c0026eb7 <__extendsfdf2>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acf3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acf7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acfb:	e8 c0 b7 01 00       	call   c00264c0 <__muldf3>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad07:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad0b:	52                   	push   edx
c000ad0c:	50                   	push   eax
c000ad0d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad10:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad13:	e8 2b b1 01 00       	call   c0025e43 <__adddf3>
c000ad18:	83 c4 10             	add    esp,0x10
c000ad1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad24:	4f                   	dec    edi
c000ad25:	83 ec 0c             	sub    esp,0xc
c000ad28:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad2f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad36:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad3a:	e8 78 c1 01 00       	call   c0026eb7 <__extendsfdf2>
c000ad3f:	83 c4 10             	add    esp,0x10
c000ad42:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad46:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad52:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad56:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad5a:	e8 61 b7 01 00       	call   c00264c0 <__muldf3>
c000ad5f:	83 c4 10             	add    esp,0x10
c000ad62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad6a:	52                   	push   edx
c000ad6b:	50                   	push   eax
c000ad6c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad6f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad72:	e8 cc b0 01 00       	call   c0025e43 <__adddf3>
c000ad77:	83 c4 10             	add    esp,0x10
c000ad7a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad7d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad83:	4f                   	dec    edi
c000ad84:	83 ec 0c             	sub    esp,0xc
c000ad87:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad8e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad95:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad99:	e8 19 c1 01 00       	call   c0026eb7 <__extendsfdf2>
c000ad9e:	83 c4 10             	add    esp,0x10
c000ada1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ada5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adb1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb9:	e8 02 b7 01 00       	call   c00264c0 <__muldf3>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adc5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adc9:	52                   	push   edx
c000adca:	50                   	push   eax
c000adcb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adce:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000add1:	e8 6d b0 01 00       	call   c0025e43 <__adddf3>
c000add6:	83 c4 10             	add    esp,0x10
c000add9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000addc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000addf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ade2:	4f                   	dec    edi
c000ade3:	83 ec 0c             	sub    esp,0xc
c000ade6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ade9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aded:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adf4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adf8:	e8 ba c0 01 00       	call   c0026eb7 <__extendsfdf2>
c000adfd:	83 c4 10             	add    esp,0x10
c000ae00:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae04:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae18:	e8 a3 b6 01 00       	call   c00264c0 <__muldf3>
c000ae1d:	83 c4 10             	add    esp,0x10
c000ae20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae24:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae28:	52                   	push   edx
c000ae29:	50                   	push   eax
c000ae2a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae2d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae30:	e8 0e b0 01 00       	call   c0025e43 <__adddf3>
c000ae35:	83 c4 10             	add    esp,0x10
c000ae38:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae3b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae41:	4f                   	dec    edi
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae4c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae53:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae57:	e8 5b c0 01 00       	call   c0026eb7 <__extendsfdf2>
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae63:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae73:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae77:	e8 44 b6 01 00       	call   c00264c0 <__muldf3>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae87:	52                   	push   edx
c000ae88:	50                   	push   eax
c000ae89:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae8c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae8f:	e8 af af 01 00       	call   c0025e43 <__adddf3>
c000ae94:	83 c4 10             	add    esp,0x10
c000ae97:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae9a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aea0:	4f                   	dec    edi
c000aea1:	83 ec 0c             	sub    esp,0xc
c000aea4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aea7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeab:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeb2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeb6:	e8 fc bf 01 00       	call   c0026eb7 <__extendsfdf2>
c000aebb:	83 c4 10             	add    esp,0x10
c000aebe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aec2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aece:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed6:	e8 e5 b5 01 00       	call   c00264c0 <__muldf3>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee6:	52                   	push   edx
c000aee7:	50                   	push   eax
c000aee8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeeb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeee:	e8 50 af 01 00       	call   c0025e43 <__adddf3>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aefc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeff:	4f                   	dec    edi
c000af00:	83 ec 0c             	sub    esp,0xc
c000af03:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af0a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af11:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af15:	e8 9d bf 01 00       	call   c0026eb7 <__extendsfdf2>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af21:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af35:	e8 86 b5 01 00       	call   c00264c0 <__muldf3>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af45:	52                   	push   edx
c000af46:	50                   	push   eax
c000af47:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af4a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af4d:	e8 f1 ae 01 00       	call   c0025e43 <__adddf3>
c000af52:	83 c4 10             	add    esp,0x10
c000af55:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af58:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af5b:	85 ff                	test   edi,edi
c000af5d:	0f 8f e9 fc ff ff    	jg     c000ac4c <calc_output_multi+0x10e>
c000af63:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af67:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af6b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af6f:	0f 89 4c fc ff ff    	jns    c000abc1 <calc_output_multi+0x83>
c000af75:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af7d:	29 c8                	sub    eax,ecx
c000af7f:	99                   	cdq    
c000af80:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af88:	0f af d0             	imul   edx,eax
c000af8b:	40                   	inc    eax
c000af8c:	01 d1                	add    ecx,edx
c000af8e:	0f af c3             	imul   eax,ebx
c000af91:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af95:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af9c:	55                   	push   ebp
c000af9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afa1:	6a 00                	push   0x0
c000afa3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afa7:	e8 df 56 ff ff       	call   c000068b <memset>
c000afac:	83 c4 10             	add    esp,0x10
c000afaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb3:	e8 e0 e6 ff ff       	call   c0009698 <fp_to_double>
c000afb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afc4:	e8 c5 e6 ff ff       	call   c000968e <fp_to_int>
c000afc9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afcc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afcf:	57                   	push   edi
c000afd0:	57                   	push   edi
c000afd1:	89 df                	mov    edi,ebx
c000afd3:	55                   	push   ebp
c000afd4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afd8:	e8 fb a7 01 00       	call   c00257d8 <__subsf3>
c000afdd:	89 04 24             	mov    DWORD PTR [esp],eax
c000afe0:	e8 d2 be 01 00       	call   c0026eb7 <__extendsfdf2>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000aff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000affc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b000:	e8 bb b4 01 00       	call   c00264c0 <__muldf3>
c000b005:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b008:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b00c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b010:	e8 a2 be 01 00       	call   c0026eb7 <__extendsfdf2>
c000b015:	83 c4 10             	add    esp,0x10
c000b018:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b01c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b020:	52                   	push   edx
c000b021:	50                   	push   eax
c000b022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02a:	e8 14 ae 01 00       	call   c0025e43 <__adddf3>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b036:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b03a:	89 f8                	mov    eax,edi
c000b03c:	b9 08 00 00 00       	mov    ecx,0x8
c000b041:	99                   	cdq    
c000b042:	f7 f9                	idiv   ecx
c000b044:	4a                   	dec    edx
c000b045:	83 fa 06             	cmp    edx,0x6
c000b048:	77 07                	ja     c000b051 <calc_output_multi+0x513>
c000b04a:	ff 24 95 a0 86 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7960]
c000b051:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b055:	4f                   	dec    edi
c000b056:	83 ec 0c             	sub    esp,0xc
c000b059:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b060:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b067:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06b:	e8 47 be 01 00       	call   c0026eb7 <__extendsfdf2>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b077:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b07b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b07f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b083:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b087:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b08b:	e8 30 b4 01 00       	call   c00264c0 <__muldf3>
c000b090:	83 c4 10             	add    esp,0x10
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09b:	52                   	push   edx
c000b09c:	50                   	push   eax
c000b09d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a3:	e8 9b ad 01 00       	call   c0025e43 <__adddf3>
c000b0a8:	83 c4 10             	add    esp,0x10
c000b0ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0b5:	4f                   	dec    edi
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cb:	e8 e7 bd 01 00       	call   c0026eb7 <__extendsfdf2>
c000b0d0:	83 c4 10             	add    esp,0x10
c000b0d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0eb:	e8 d0 b3 01 00       	call   c00264c0 <__muldf3>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0fb:	52                   	push   edx
c000b0fc:	50                   	push   eax
c000b0fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b100:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b103:	e8 3b ad 01 00       	call   c0025e43 <__adddf3>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 87 bd 01 00       	call   c0026eb7 <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b137:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b147:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b14b:	e8 70 b3 01 00       	call   c00264c0 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b157:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 db ac 01 00       	call   c0025e43 <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b175:	4f                   	dec    edi
c000b176:	83 ec 0c             	sub    esp,0xc
c000b179:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b17c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b180:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b187:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b18b:	e8 27 bd 01 00       	call   c0026eb7 <__extendsfdf2>
c000b190:	83 c4 10             	add    esp,0x10
c000b193:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b19b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1ab:	e8 10 b3 01 00       	call   c00264c0 <__muldf3>
c000b1b0:	83 c4 10             	add    esp,0x10
c000b1b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1bb:	52                   	push   edx
c000b1bc:	50                   	push   eax
c000b1bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1c0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1c3:	e8 7b ac 01 00       	call   c0025e43 <__adddf3>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1ce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1d5:	4f                   	dec    edi
c000b1d6:	83 ec 0c             	sub    esp,0xc
c000b1d9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1e0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1eb:	e8 c7 bc 01 00       	call   c0026eb7 <__extendsfdf2>
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b203:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b207:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b20b:	e8 b0 b2 01 00       	call   c00264c0 <__muldf3>
c000b210:	83 c4 10             	add    esp,0x10
c000b213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b217:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b21b:	52                   	push   edx
c000b21c:	50                   	push   eax
c000b21d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b220:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b223:	e8 1b ac 01 00       	call   c0025e43 <__adddf3>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b22e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b235:	4f                   	dec    edi
c000b236:	83 ec 0c             	sub    esp,0xc
c000b239:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b23c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b240:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b247:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b24b:	e8 67 bc 01 00       	call   c0026eb7 <__extendsfdf2>
c000b250:	83 c4 10             	add    esp,0x10
c000b253:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b25b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b263:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b267:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b26b:	e8 50 b2 01 00       	call   c00264c0 <__muldf3>
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b277:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b27b:	52                   	push   edx
c000b27c:	50                   	push   eax
c000b27d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b280:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b283:	e8 bb ab 01 00       	call   c0025e43 <__adddf3>
c000b288:	83 c4 10             	add    esp,0x10
c000b28b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b28e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b295:	4f                   	dec    edi
c000b296:	83 ec 0c             	sub    esp,0xc
c000b299:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b29c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2a0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2a7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2ab:	e8 07 bc 01 00       	call   c0026eb7 <__extendsfdf2>
c000b2b0:	83 c4 10             	add    esp,0x10
c000b2b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2cb:	e8 f0 b1 01 00       	call   c00264c0 <__muldf3>
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2db:	52                   	push   edx
c000b2dc:	50                   	push   eax
c000b2dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2e0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2e3:	e8 5b ab 01 00       	call   c0025e43 <__adddf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2ee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2f5:	4f                   	dec    edi
c000b2f6:	83 ec 0c             	sub    esp,0xc
c000b2f9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b300:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b307:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b30b:	e8 a7 bb 01 00       	call   c0026eb7 <__extendsfdf2>
c000b310:	83 c4 10             	add    esp,0x10
c000b313:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b317:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b31b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b323:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b327:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b32b:	e8 90 b1 01 00       	call   c00264c0 <__muldf3>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b337:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b33b:	52                   	push   edx
c000b33c:	50                   	push   eax
c000b33d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b340:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b343:	e8 fb aa 01 00       	call   c0025e43 <__adddf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b34e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b351:	85 ff                	test   edi,edi
c000b353:	0f 8f e1 fc ff ff    	jg     c000b03a <calc_output_multi+0x4fc>
c000b359:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b35d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b361:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b365:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b36a:	0f 8f 3f fc ff ff    	jg     c000afaf <calc_output_multi+0x471>
c000b370:	be 08 00 00 00       	mov    esi,0x8
c000b375:	89 d8                	mov    eax,ebx
c000b377:	99                   	cdq    
c000b378:	f7 fe                	idiv   esi
c000b37a:	4a                   	dec    edx
c000b37b:	83 fa 06             	cmp    edx,0x6
c000b37e:	77 07                	ja     c000b387 <calc_output_multi+0x849>
c000b380:	ff 24 95 bc 86 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7944]
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4b                   	dec    ebx
c000b38c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b390:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b393:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b397:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b39b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b39e:	e8 a0 aa 01 00       	call   c0025e43 <__adddf3>
c000b3a3:	83 c4 10             	add    esp,0x10
c000b3a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3be:	e8 fd b0 01 00       	call   c00264c0 <__muldf3>
c000b3c3:	5d                   	pop    ebp
c000b3c4:	59                   	pop    ecx
c000b3c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	e8 b9 b9 01 00       	call   c0026d93 <__truncdfsf2>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3e1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e8:	4b                   	dec    ebx
c000b3e9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3ed:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3f8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3fb:	e8 43 aa 01 00       	call   c0025e43 <__adddf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b407:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b40f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b41b:	e8 a0 b0 01 00       	call   c00264c0 <__muldf3>
c000b420:	59                   	pop    ecx
c000b421:	5f                   	pop    edi
c000b422:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b42a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b432:	e8 5c b9 01 00       	call   c0026d93 <__truncdfsf2>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b43e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b445:	4b                   	dec    ebx
c000b446:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b44a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b44d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b451:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b455:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b458:	e8 e6 a9 01 00       	call   c0025e43 <__adddf3>
c000b45d:	83 c4 10             	add    esp,0x10
c000b460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b478:	e8 43 b0 01 00       	call   c00264c0 <__muldf3>
c000b47d:	5f                   	pop    edi
c000b47e:	5d                   	pop    ebp
c000b47f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b483:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48f:	e8 ff b8 01 00       	call   c0026d93 <__truncdfsf2>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b49b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b49e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a2:	4b                   	dec    ebx
c000b4a3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4ae:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4b2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4b5:	e8 89 a9 01 00       	call   c0025e43 <__adddf3>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	e8 e6 af 01 00       	call   c00264c0 <__muldf3>
c000b4da:	5d                   	pop    ebp
c000b4db:	59                   	pop    ecx
c000b4dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ec:	e8 a2 b8 01 00       	call   c0026d93 <__truncdfsf2>
c000b4f1:	83 c4 10             	add    esp,0x10
c000b4f4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4f8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ff:	4b                   	dec    ebx
c000b500:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b504:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b50b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b50f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b512:	e8 2c a9 01 00       	call   c0025e43 <__adddf3>
c000b517:	83 c4 10             	add    esp,0x10
c000b51a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b51e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b532:	e8 89 af 01 00       	call   c00264c0 <__muldf3>
c000b537:	59                   	pop    ecx
c000b538:	5f                   	pop    edi
c000b539:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b53d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b549:	e8 45 b8 01 00       	call   c0026d93 <__truncdfsf2>
c000b54e:	83 c4 10             	add    esp,0x10
c000b551:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b555:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55c:	4b                   	dec    ebx
c000b55d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b561:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b568:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b56c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b56f:	e8 cf a8 01 00       	call   c0025e43 <__adddf3>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	e8 2c af 01 00       	call   c00264c0 <__muldf3>
c000b594:	5f                   	pop    edi
c000b595:	5d                   	pop    ebp
c000b596:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b59a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a6:	e8 e8 b7 01 00       	call   c0026d93 <__truncdfsf2>
c000b5ab:	83 c4 10             	add    esp,0x10
c000b5ae:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5b2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5b9:	4b                   	dec    ebx
c000b5ba:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5be:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5cc:	e8 72 a8 01 00       	call   c0025e43 <__adddf3>
c000b5d1:	83 c4 10             	add    esp,0x10
c000b5d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ec:	e8 cf ae 01 00       	call   c00264c0 <__muldf3>
c000b5f1:	5d                   	pop    ebp
c000b5f2:	59                   	pop    ecx
c000b5f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b603:	e8 8b b7 01 00       	call   c0026d93 <__truncdfsf2>
c000b608:	83 c4 10             	add    esp,0x10
c000b60b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b60f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b616:	4b                   	dec    ebx
c000b617:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b61e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b622:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b626:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b629:	e8 15 a8 01 00       	call   c0025e43 <__adddf3>
c000b62e:	83 c4 10             	add    esp,0x10
c000b631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	e8 72 ae 01 00       	call   c00264c0 <__muldf3>
c000b64e:	59                   	pop    ecx
c000b64f:	5f                   	pop    edi
c000b650:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b654:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b658:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b660:	e8 2e b7 01 00       	call   c0026d93 <__truncdfsf2>
c000b665:	83 c4 10             	add    esp,0x10
c000b668:	85 db                	test   ebx,ebx
c000b66a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b66e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b671:	0f 8f fe fc ff ff    	jg     c000b375 <calc_output_multi+0x837>
c000b677:	83 c4 4c             	add    esp,0x4c
c000b67a:	5b                   	pop    ebx
c000b67b:	5e                   	pop    esi
c000b67c:	5f                   	pop    edi
c000b67d:	5d                   	pop    ebp
c000b67e:	c3                   	ret    

c000b67f <double_to_fp>:
c000b67f:	83 ec 0c             	sub    esp,0xc
c000b682:	68 00 00 b0 40       	push   0x40b00000
c000b687:	6a 00                	push   0x0
c000b689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b68d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b691:	e8 2a ae 01 00       	call   c00264c0 <__muldf3>
c000b696:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b69a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b69e:	83 c4 1c             	add    esp,0x1c
c000b6a1:	e9 9a b8 01 00       	jmp    c0026f40 <lrint>

c000b6a6 <prepare_data>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	56                   	push   esi
c000b6a9:	53                   	push   ebx
c000b6aa:	83 ec 1c             	sub    esp,0x1c
c000b6ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6b1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6b5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6b9:	0f 89 57 01 00 00    	jns    c000b816 <prepare_data+0x170>
c000b6bf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6c2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6c5:	85 d2                	test   edx,edx
c000b6c7:	75 0d                	jne    c000b6d6 <prepare_data+0x30>
c000b6c9:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6cc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6cf:	29 d0                	sub    eax,edx
c000b6d1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6d4:	eb 44                	jmp    c000b71a <prepare_data+0x74>
c000b6d6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6d9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6dc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6df:	39 c1                	cmp    ecx,eax
c000b6e1:	7d 04                	jge    c000b6e7 <prepare_data+0x41>
c000b6e3:	29 d0                	sub    eax,edx
c000b6e5:	eb 2d                	jmp    c000b714 <prepare_data+0x6e>
c000b6e7:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6ed:	29 d7                	sub    edi,edx
c000b6ef:	01 f7                	add    edi,esi
c000b6f1:	51                   	push   ecx
c000b6f2:	29 f2                	sub    edx,esi
c000b6f4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6fb:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6fe:	51                   	push   ecx
c000b6ff:	52                   	push   edx
c000b700:	50                   	push   eax
c000b701:	e8 17 4f ff ff       	call   c000061d <memmove>
c000b706:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b709:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b70f:	29 f0                	sub    eax,esi
c000b711:	83 c4 10             	add    esp,0x10
c000b714:	29 f0                	sub    eax,esi
c000b716:	79 02                	jns    c000b71a <prepare_data+0x74>
c000b718:	31 c0                	xor    eax,eax
c000b71a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b71d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b720:	29 ef                	sub    edi,ebp
c000b722:	39 c7                	cmp    edi,eax
c000b724:	7e 02                	jle    c000b728 <prepare_data+0x82>
c000b726:	89 c7                	mov    edi,eax
c000b728:	89 f8                	mov    eax,edi
c000b72a:	99                   	cdq    
c000b72b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b72e:	b8 15 00 00 00       	mov    eax,0x15
c000b733:	29 d7                	sub    edi,edx
c000b735:	0f 88 dd 00 00 00    	js     c000b818 <prepare_data+0x172>
c000b73b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b73e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b741:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b744:	0f 8f ce 00 00 00    	jg     c000b818 <prepare_data+0x172>
c000b74a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b750:	50                   	push   eax
c000b751:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b758:	50                   	push   eax
c000b759:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b75d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b75f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b762:	50                   	push   eax
c000b763:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b766:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b76a:	50                   	push   eax
c000b76b:	e8 e5 4e ff ff       	call   c0000655 <memcpy>
c000b770:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b773:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b776:	01 fd                	add    ebp,edi
c000b778:	01 f9                	add    ecx,edi
c000b77a:	83 c4 10             	add    esp,0x10
c000b77d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b780:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b783:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b78a:	0f 85 86 00 00 00    	jne    c000b816 <prepare_data+0x170>
c000b790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b793:	89 e8                	mov    eax,ebp
c000b795:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b798:	29 c8                	sub    eax,ecx
c000b79a:	39 f8                	cmp    eax,edi
c000b79c:	7d 78                	jge    c000b816 <prepare_data+0x170>
c000b79e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7a2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7a6:	74 6e                	je     c000b816 <prepare_data+0x170>
c000b7a8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7af:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7b2:	29 ef                	sub    edi,ebp
c000b7b4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7b8:	7c 29                	jl     c000b7e3 <prepare_data+0x13d>
c000b7ba:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7bd:	29 f1                	sub    ecx,esi
c000b7bf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7c6:	55                   	push   ebp
c000b7c7:	50                   	push   eax
c000b7c8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7cb:	50                   	push   eax
c000b7cc:	52                   	push   edx
c000b7cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7d1:	e8 47 4e ff ff       	call   c000061d <memmove>
c000b7d6:	83 c4 10             	add    esp,0x10
c000b7d9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7dc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7e6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7e9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7ec:	83 c6 05             	add    esi,0x5
c000b7ef:	78 07                	js     c000b7f8 <prepare_data+0x152>
c000b7f1:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f4:	39 cf                	cmp    edi,ecx
c000b7f6:	7e 04                	jle    c000b7fc <prepare_data+0x156>
c000b7f8:	89 ce                	mov    esi,ecx
c000b7fa:	29 c6                	sub    esi,eax
c000b7fc:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7ff:	51                   	push   ecx
c000b800:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b807:	51                   	push   ecx
c000b808:	6a 00                	push   0x0
c000b80a:	50                   	push   eax
c000b80b:	e8 7b 4e ff ff       	call   c000068b <memset>
c000b810:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b813:	83 c4 10             	add    esp,0x10
c000b816:	31 c0                	xor    eax,eax
c000b818:	83 c4 1c             	add    esp,0x1c
c000b81b:	5b                   	pop    ebx
c000b81c:	5e                   	pop    esi
c000b81d:	5f                   	pop    edi
c000b81e:	5d                   	pop    ebp
c000b81f:	c3                   	ret    

c000b820 <sinc_multichan_vari_process>:
c000b820:	55                   	push   ebp
c000b821:	ba 05 00 00 00       	mov    edx,0x5
c000b826:	57                   	push   edi
c000b827:	56                   	push   esi
c000b828:	53                   	push   ebx
c000b829:	83 ec 4c             	sub    esp,0x4c
c000b82c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b830:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b834:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b837:	85 db                	test   ebx,ebx
c000b839:	0f 84 9b 06 00 00    	je     c000beda <sinc_multichan_vari_process+0x6ba>
c000b83f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b842:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b845:	0f af c5             	imul   eax,ebp
c000b848:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b84b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b84e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b855:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b85c:	0f af c5             	imul   eax,ebp
c000b85f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b862:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b865:	8b 06                	mov    eax,DWORD PTR [esi]
c000b867:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86f:	68 00 00 70 3f       	push   0x3f700000
c000b874:	6a 00                	push   0x0
c000b876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87e:	e8 0c b5 01 00       	call   c0026d8f <__ltdf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	ba 16 00 00 00       	mov    edx,0x16
c000b88b:	85 c0                	test   eax,eax
c000b88d:	0f 88 47 06 00 00    	js     c000beda <sinc_multichan_vari_process+0x6ba>
c000b893:	68 00 00 70 40       	push   0x40700000
c000b898:	6a 00                	push   0x0
c000b89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a2:	e8 ca b4 01 00       	call   c0026d71 <__gtdf2>
c000b8a7:	83 c4 10             	add    esp,0x10
c000b8aa:	ba 16 00 00 00       	mov    edx,0x16
c000b8af:	85 c0                	test   eax,eax
c000b8b1:	0f 8f 23 06 00 00    	jg     c000beda <sinc_multichan_vari_process+0x6ba>
c000b8b7:	83 ec 0c             	sub    esp,0xc
c000b8ba:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8bd:	e8 61 b2 01 00       	call   c0026b23 <__floatsidf>
c000b8c2:	83 c4 10             	add    esp,0x10
c000b8c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8cd:	68 00 00 00 40       	push   0x40000000
c000b8d2:	6a 00                	push   0x0
c000b8d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8dc:	e8 62 a5 01 00       	call   c0025e43 <__adddf3>
c000b8e1:	59                   	pop    ecx
c000b8e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8ed:	e8 31 b2 01 00       	call   c0026b23 <__floatsidf>
c000b8f2:	83 c4 10             	add    esp,0x10
c000b8f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8fd:	52                   	push   edx
c000b8fe:	50                   	push   eax
c000b8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b907:	e8 98 ae 01 00       	call   c00267a4 <__divdf3>
c000b90c:	83 c4 10             	add    esp,0x10
c000b90f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b913:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b917:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b91a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b91d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b921:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b929:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b92d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b931:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b935:	e8 37 b4 01 00       	call   c0026d71 <__gtdf2>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	85 c0                	test   eax,eax
c000b93f:	7e 2d                	jle    c000b96e <sinc_multichan_vari_process+0x14e>
c000b941:	68 00 00 f0 3f       	push   0x3ff00000
c000b946:	6a 00                	push   0x0
c000b948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b950:	e8 3a b4 01 00       	call   c0026d8f <__ltdf2>
c000b955:	83 c4 10             	add    esp,0x10
c000b958:	85 c0                	test   eax,eax
c000b95a:	79 4d                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b960:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b968:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96c:	eb 1b                	jmp    c000b989 <sinc_multichan_vari_process+0x169>
c000b96e:	68 00 00 f0 3f       	push   0x3ff00000
c000b973:	6a 00                	push   0x0
c000b975:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b979:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97d:	e8 0d b4 01 00       	call   c0026d8f <__ltdf2>
c000b982:	83 c4 10             	add    esp,0x10
c000b985:	85 c0                	test   eax,eax
c000b987:	79 20                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b98d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b995:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b999:	e8 06 ae 01 00       	call   c00267a4 <__divdf3>
c000b99e:	83 c4 10             	add    esp,0x10
c000b9a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9a9:	50                   	push   eax
c000b9aa:	50                   	push   eax
c000b9ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9b3:	e8 88 b5 01 00       	call   c0026f40 <lrint>
c000b9b8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9bb:	40                   	inc    eax
c000b9bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9c0:	0f af c5             	imul   eax,ebp
c000b9c3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9c7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9ce:	58                   	pop    eax
c000b9cf:	5a                   	pop    edx
c000b9d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d8:	e8 63 b5 01 00       	call   c0026f40 <lrint>
c000b9dd:	83 ec 0c             	sub    esp,0xc
c000b9e0:	50                   	push   eax
c000b9e1:	e8 3d b1 01 00       	call   c0026b23 <__floatsidf>
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9f1:	52                   	push   edx
c000b9f2:	50                   	push   eax
c000b9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9fb:	e8 94 aa 01 00       	call   c0026494 <__subdf3>
c000ba00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba08:	83 c4 20             	add    esp,0x20
c000ba0b:	6a 00                	push   0x0
c000ba0d:	6a 00                	push   0x0
c000ba0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba17:	e8 73 b3 01 00       	call   c0026d8f <__ltdf2>
c000ba1c:	83 c4 10             	add    esp,0x10
c000ba1f:	85 c0                	test   eax,eax
c000ba21:	79 1f                	jns    c000ba42 <sinc_multichan_vari_process+0x222>
c000ba23:	68 00 00 f0 3f       	push   0x3ff00000
c000ba28:	6a 00                	push   0x0
c000ba2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba32:	e8 0c a4 01 00       	call   c0025e43 <__adddf3>
c000ba37:	83 c4 10             	add    esp,0x10
c000ba3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba42:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba45:	83 ec 10             	sub    esp,0x10
c000ba48:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba4c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5f:	e8 30 aa 01 00       	call   c0026494 <__subdf3>
c000ba64:	83 c4 18             	add    esp,0x18
c000ba67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba6f:	52                   	push   edx
c000ba70:	50                   	push   eax
c000ba71:	e8 ca b4 01 00       	call   c0026f40 <lrint>
c000ba76:	0f af e8             	imul   ebp,eax
c000ba79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba7d:	01 e8                	add    eax,ebp
c000ba7f:	99                   	cdq    
c000ba80:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba83:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8e:	68 00 00 f0 3f       	push   0x3ff00000
c000ba93:	6a 00                	push   0x0
c000ba95:	e8 0a ad 01 00       	call   c00267a4 <__divdf3>
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000baa1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baa5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000baaa:	68 23 42 92 0c       	push   0xc924223
c000baaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab7:	e8 87 a3 01 00       	call   c0025e43 <__adddf3>
c000babc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bac0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bac4:	83 c4 20             	add    esp,0x20
c000bac7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bacf:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bad7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bada:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000badd:	7d 50                	jge    c000bb2f <sinc_multichan_vari_process+0x30f>
c000badf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bae2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bae5:	01 c8                	add    eax,ecx
c000bae7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000baea:	99                   	cdq    
c000baeb:	f7 f9                	idiv   ecx
c000baed:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000baf1:	7d 0c                	jge    c000baff <sinc_multichan_vari_process+0x2df>
c000baf3:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000baf6:	85 ed                	test   ebp,ebp
c000baf8:	79 6b                	jns    c000bb65 <sinc_multichan_vari_process+0x345>
c000bafa:	e9 e6 00 00 00       	jmp    c000bbe5 <sinc_multichan_vari_process+0x3c5>
c000baff:	50                   	push   eax
c000bb00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb04:	57                   	push   edi
c000bb05:	53                   	push   ebx
c000bb06:	e8 9b fb ff ff       	call   c000b6a6 <prepare_data>
c000bb0b:	83 c4 10             	add    esp,0x10
c000bb0e:	89 c2                	mov    edx,eax
c000bb10:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb13:	85 c0                	test   eax,eax
c000bb15:	0f 85 bf 03 00 00    	jne    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb1b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb21:	01 c8                	add    eax,ecx
c000bb23:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb26:	99                   	cdq    
c000bb27:	f7 f9                	idiv   ecx
c000bb29:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2d:	7c c4                	jl     c000baf3 <sinc_multichan_vari_process+0x2d3>
c000bb2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb37:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb3a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb45:	89 06                	mov    DWORD PTR [esi],eax
c000bb47:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb4a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb4d:	99                   	cdq    
c000bb4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb51:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb57:	99                   	cdq    
c000bb58:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb5b:	31 d2                	xor    edx,edx
c000bb5d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb60:	e9 75 03 00 00       	jmp    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb6b:	e8 b3 af 01 00       	call   c0026b23 <__floatsidf>
c000bb70:	83 c4 10             	add    esp,0x10
c000bb73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb8b:	e8 b3 a2 01 00       	call   c0025e43 <__adddf3>
c000bb90:	83 c4 10             	add    esp,0x10
c000bb93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb97:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbab:	e8 93 a2 01 00       	call   c0025e43 <__adddf3>
c000bbb0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbb7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbbb:	e8 63 af 01 00       	call   c0026b23 <__floatsidf>
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbcb:	52                   	push   edx
c000bbcc:	50                   	push   eax
c000bbcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd5:	e8 b3 b1 01 00       	call   c0026d8d <__gedf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	0f 89 4a ff ff ff    	jns    c000bb2f <sinc_multichan_vari_process+0x30f>
c000bbe5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbe9:	0f 8e ed 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bbef:	83 ec 10             	sub    esp,0x10
c000bbf2:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbf5:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbf8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbfb:	ff 36                	push   DWORD PTR [esi]
c000bbfd:	e8 92 a8 01 00       	call   c0026494 <__subdf3>
c000bc02:	83 c4 18             	add    esp,0x18
c000bc05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc0d:	52                   	push   edx
c000bc0e:	50                   	push   eax
c000bc0f:	e8 0c b3 01 00       	call   c0026f20 <fabs>
c000bc14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc1c:	83 c4 10             	add    esp,0x10
c000bc1f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc24:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc31:	e8 3b b1 01 00       	call   c0026d71 <__gtdf2>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	85 c0                	test   eax,eax
c000bc3b:	0f 8e 9b 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bc41:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc43:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc4a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc4e:	52                   	push   edx
c000bc4f:	50                   	push   eax
c000bc50:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc53:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc56:	e8 39 a8 01 00       	call   c0026494 <__subdf3>
c000bc5b:	59                   	pop    ecx
c000bc5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc60:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc64:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc67:	e8 b7 ae 01 00       	call   c0026b23 <__floatsidf>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc73:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc77:	52                   	push   edx
c000bc78:	50                   	push   eax
c000bc79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc81:	e8 3a a8 01 00       	call   c00264c0 <__muldf3>
c000bc86:	5d                   	pop    ebp
c000bc87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc8b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc8f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc92:	e8 8c ae 01 00       	call   c0026b23 <__floatsidf>
c000bc97:	83 c4 10             	add    esp,0x10
c000bc9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca2:	52                   	push   edx
c000bca3:	50                   	push   eax
c000bca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcac:	e8 f3 aa 01 00       	call   c00267a4 <__divdf3>
c000bcb1:	83 c4 10             	add    esp,0x10
c000bcb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcb8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bccc:	e8 72 a1 01 00       	call   c0025e43 <__adddf3>
c000bcd1:	83 c4 10             	add    esp,0x10
c000bcd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcdc:	83 ec 0c             	sub    esp,0xc
c000bcdf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bce2:	e8 3c ae 01 00       	call   c0026b23 <__floatsidf>
c000bce7:	83 c4 10             	add    esp,0x10
c000bcea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd02:	e8 88 b0 01 00       	call   c0026d8f <__ltdf2>
c000bd07:	83 c4 10             	add    esp,0x10
c000bd0a:	85 c0                	test   eax,eax
c000bd0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd14:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd18:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd1c:	78 10                	js     c000bd2e <sinc_multichan_vari_process+0x50e>
c000bd1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd2a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3e:	e8 7d a7 01 00       	call   c00264c0 <__muldf3>
c000bd43:	59                   	pop    ecx
c000bd44:	5d                   	pop    ebp
c000bd45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd55:	e8 25 f9 ff ff       	call   c000b67f <double_to_fp>
c000bd5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd5e:	89 c5                	mov    ebp,eax
c000bd60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6c:	e8 4f a7 01 00       	call   c00264c0 <__muldf3>
c000bd71:	83 c4 18             	add    esp,0x18
c000bd74:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd7c:	52                   	push   edx
c000bd7d:	50                   	push   eax
c000bd7e:	e8 fc f8 ff ff       	call   c000b67f <double_to_fp>
c000bd83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd86:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd8a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd8d:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd90:	50                   	push   eax
c000bd91:	50                   	push   eax
c000bd92:	50                   	push   eax
c000bd93:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd96:	e8 88 ad 01 00       	call   c0026b23 <__floatsidf>
c000bd9b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd9f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bda3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdaf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdb3:	e8 ec a9 01 00       	call   c00267a4 <__divdf3>
c000bdb8:	83 c4 1c             	add    esp,0x1c
c000bdbb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdbf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdc3:	52                   	push   edx
c000bdc4:	89 ea                	mov    edx,ebp
c000bdc6:	50                   	push   eax
c000bdc7:	89 d8                	mov    eax,ebx
c000bdc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdcc:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdd0:	e8 69 ed ff ff       	call   c000ab3e <calc_output_multi>
c000bdd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdd8:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bddb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bddf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bde3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdeb:	e8 b4 a9 01 00       	call   c00267a4 <__divdf3>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bdf7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be0b:	e8 33 a0 01 00       	call   c0025e43 <__adddf3>
c000be10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be18:	83 c4 28             	add    esp,0x28
c000be1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be23:	e8 18 b1 01 00       	call   c0026f40 <lrint>
c000be28:	83 ec 0c             	sub    esp,0xc
c000be2b:	50                   	push   eax
c000be2c:	e8 f2 ac 01 00       	call   c0026b23 <__floatsidf>
c000be31:	83 c4 10             	add    esp,0x10
c000be34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3c:	52                   	push   edx
c000be3d:	50                   	push   eax
c000be3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be46:	e8 49 a6 01 00       	call   c0026494 <__subdf3>
c000be4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be4f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be53:	83 c4 20             	add    esp,0x20
c000be56:	6a 00                	push   0x0
c000be58:	6a 00                	push   0x0
c000be5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be62:	e8 28 af 01 00       	call   c0026d8f <__ltdf2>
c000be67:	83 c4 10             	add    esp,0x10
c000be6a:	85 c0                	test   eax,eax
c000be6c:	79 20                	jns    c000be8e <sinc_multichan_vari_process+0x66e>
c000be6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 c0 9f 01 00       	call   c0025e43 <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bea7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000beab:	e8 e4 a5 01 00       	call   c0026494 <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 7e b0 01 00       	call   c0026f40 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	01 e8                	add    eax,ebp
c000bece:	99                   	cdq    
c000becf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bed2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed5:	e9 fd fb ff ff       	jmp    c000bad7 <sinc_multichan_vari_process+0x2b7>
c000beda:	83 c4 4c             	add    esp,0x4c
c000bedd:	89 d0                	mov    eax,edx
c000bedf:	5b                   	pop    ebx
c000bee0:	5e                   	pop    esi
c000bee1:	5f                   	pop    edi
c000bee2:	5d                   	pop    ebp
c000bee3:	c3                   	ret    

c000bee4 <sinc_hex_vari_process>:
c000bee4:	55                   	push   ebp
c000bee5:	ba 05 00 00 00       	mov    edx,0x5
c000beea:	57                   	push   edi
c000beeb:	56                   	push   esi
c000beec:	53                   	push   ebx
c000beed:	83 ec 4c             	sub    esp,0x4c
c000bef0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bef4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bef8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000befb:	85 db                	test   ebx,ebx
c000befd:	0f 84 9c 06 00 00    	je     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf03:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf06:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf09:	0f af c7             	imul   eax,edi
c000bf0c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf0f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf12:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf19:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf20:	0f af c7             	imul   eax,edi
c000bf23:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf26:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf2c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf34:	68 00 00 70 3f       	push   0x3f700000
c000bf39:	6a 00                	push   0x0
c000bf3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf43:	e8 47 ae 01 00       	call   c0026d8f <__ltdf2>
c000bf48:	83 c4 10             	add    esp,0x10
c000bf4b:	ba 16 00 00 00       	mov    edx,0x16
c000bf50:	85 c0                	test   eax,eax
c000bf52:	0f 88 47 06 00 00    	js     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf58:	68 00 00 70 40       	push   0x40700000
c000bf5d:	6a 00                	push   0x0
c000bf5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf67:	e8 05 ae 01 00       	call   c0026d71 <__gtdf2>
c000bf6c:	83 c4 10             	add    esp,0x10
c000bf6f:	ba 16 00 00 00       	mov    edx,0x16
c000bf74:	85 c0                	test   eax,eax
c000bf76:	0f 8f 23 06 00 00    	jg     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf82:	e8 9c ab 01 00       	call   c0026b23 <__floatsidf>
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf92:	68 00 00 00 40       	push   0x40000000
c000bf97:	6a 00                	push   0x0
c000bf99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfa1:	e8 9d 9e 01 00       	call   c0025e43 <__adddf3>
c000bfa6:	59                   	pop    ecx
c000bfa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfaf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfb2:	e8 6c ab 01 00       	call   c0026b23 <__floatsidf>
c000bfb7:	83 c4 10             	add    esp,0x10
c000bfba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfbe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfc2:	52                   	push   edx
c000bfc3:	50                   	push   eax
c000bfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfcc:	e8 d3 a7 01 00       	call   c00267a4 <__divdf3>
c000bfd1:	83 c4 10             	add    esp,0x10
c000bfd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfdc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfdf:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfe2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfe6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bffa:	e8 72 ad 01 00       	call   c0026d71 <__gtdf2>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	85 c0                	test   eax,eax
c000c004:	7e 2d                	jle    c000c033 <sinc_hex_vari_process+0x14f>
c000c006:	68 00 00 f0 3f       	push   0x3ff00000
c000c00b:	6a 00                	push   0x0
c000c00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c015:	e8 75 ad 01 00       	call   c0026d8f <__ltdf2>
c000c01a:	83 c4 10             	add    esp,0x10
c000c01d:	85 c0                	test   eax,eax
c000c01f:	79 4d                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c025:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c029:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c02d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c031:	eb 1b                	jmp    c000c04e <sinc_hex_vari_process+0x16a>
c000c033:	68 00 00 f0 3f       	push   0x3ff00000
c000c038:	6a 00                	push   0x0
c000c03a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c03e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c042:	e8 48 ad 01 00       	call   c0026d8f <__ltdf2>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	85 c0                	test   eax,eax
c000c04c:	79 20                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c04e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c052:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05e:	e8 41 a7 01 00       	call   c00267a4 <__divdf3>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c06a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06e:	50                   	push   eax
c000c06f:	50                   	push   eax
c000c070:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c074:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c078:	e8 c3 ae 01 00       	call   c0026f40 <lrint>
c000c07d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c080:	40                   	inc    eax
c000c081:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c085:	0f af c7             	imul   eax,edi
c000c088:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c08c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c093:	58                   	pop    eax
c000c094:	5a                   	pop    edx
c000c095:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c099:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c09d:	e8 9e ae 01 00       	call   c0026f40 <lrint>
c000c0a2:	83 ec 0c             	sub    esp,0xc
c000c0a5:	50                   	push   eax
c000c0a6:	e8 78 aa 01 00       	call   c0026b23 <__floatsidf>
c000c0ab:	83 c4 10             	add    esp,0x10
c000c0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0b6:	52                   	push   edx
c000c0b7:	50                   	push   eax
c000c0b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c0:	e8 cf a3 01 00       	call   c0026494 <__subdf3>
c000c0c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	83 c4 20             	add    esp,0x20
c000c0d0:	6a 00                	push   0x0
c000c0d2:	6a 00                	push   0x0
c000c0d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0dc:	e8 ae ac 01 00       	call   c0026d8f <__ltdf2>
c000c0e1:	83 c4 10             	add    esp,0x10
c000c0e4:	85 c0                	test   eax,eax
c000c0e6:	79 1f                	jns    c000c107 <sinc_hex_vari_process+0x223>
c000c0e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c0ed:	6a 00                	push   0x0
c000c0ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f7:	e8 47 9d 01 00       	call   c0025e43 <__adddf3>
c000c0fc:	83 c4 10             	add    esp,0x10
c000c0ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c103:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c107:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c10a:	83 ec 10             	sub    esp,0x10
c000c10d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c111:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c124:	e8 6b a3 01 00       	call   c0026494 <__subdf3>
c000c129:	83 c4 18             	add    esp,0x18
c000c12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c130:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c134:	52                   	push   edx
c000c135:	50                   	push   eax
c000c136:	e8 05 ae 01 00       	call   c0026f40 <lrint>
c000c13b:	0f af f8             	imul   edi,eax
c000c13e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c142:	01 f8                	add    eax,edi
c000c144:	99                   	cdq    
c000c145:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c148:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c14b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c14f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c153:	68 00 00 f0 3f       	push   0x3ff00000
c000c158:	6a 00                	push   0x0
c000c15a:	e8 45 a6 01 00       	call   c00267a4 <__divdf3>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c166:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c16a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c16f:	68 23 42 92 0c       	push   0xc924223
c000c174:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c17c:	e8 c2 9c 01 00       	call   c0025e43 <__adddf3>
c000c181:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c185:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c189:	83 c4 20             	add    esp,0x20
c000c18c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c194:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c19c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c19f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1a2:	7d 50                	jge    c000c1f4 <sinc_hex_vari_process+0x310>
c000c1a4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1a7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1aa:	01 c8                	add    eax,ecx
c000c1ac:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1af:	99                   	cdq    
c000c1b0:	f7 f9                	idiv   ecx
c000c1b2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1b6:	7d 0c                	jge    c000c1c4 <sinc_hex_vari_process+0x2e0>
c000c1b8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1bb:	85 ff                	test   edi,edi
c000c1bd:	79 6c                	jns    c000c22b <sinc_hex_vari_process+0x347>
c000c1bf:	e9 e7 00 00 00       	jmp    c000c2ab <sinc_hex_vari_process+0x3c7>
c000c1c4:	50                   	push   eax
c000c1c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1c9:	56                   	push   esi
c000c1ca:	53                   	push   ebx
c000c1cb:	e8 d6 f4 ff ff       	call   c000b6a6 <prepare_data>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	89 c2                	mov    edx,eax
c000c1d5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1d8:	85 c0                	test   eax,eax
c000c1da:	0f 85 bf 03 00 00    	jne    c000c59f <sinc_hex_vari_process+0x6bb>
c000c1e0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e6:	01 c8                	add    eax,ecx
c000c1e8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1eb:	99                   	cdq    
c000c1ec:	f7 f9                	idiv   ecx
c000c1ee:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1f2:	7c c4                	jl     c000c1b8 <sinc_hex_vari_process+0x2d4>
c000c1f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1fc:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1ff:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c206:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c20a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c20d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c210:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c213:	99                   	cdq    
c000c214:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c217:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c21a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c21d:	99                   	cdq    
c000c21e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c221:	31 d2                	xor    edx,edx
c000c223:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c226:	e9 74 03 00 00       	jmp    c000c59f <sinc_hex_vari_process+0x6bb>
c000c22b:	83 ec 0c             	sub    esp,0xc
c000c22e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c231:	e8 ed a8 01 00       	call   c0026b23 <__floatsidf>
c000c236:	83 c4 10             	add    esp,0x10
c000c239:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c23d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c241:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c249:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c251:	e8 ed 9b 01 00       	call   c0025e43 <__adddf3>
c000c256:	83 c4 10             	add    esp,0x10
c000c259:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c25d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c261:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c265:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c271:	e8 cd 9b 01 00       	call   c0025e43 <__adddf3>
c000c276:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c279:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c27d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c281:	e8 9d a8 01 00       	call   c0026b23 <__floatsidf>
c000c286:	83 c4 10             	add    esp,0x10
c000c289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c291:	52                   	push   edx
c000c292:	50                   	push   eax
c000c293:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c29b:	e8 ed aa 01 00       	call   c0026d8d <__gedf2>
c000c2a0:	83 c4 10             	add    esp,0x10
c000c2a3:	85 c0                	test   eax,eax
c000c2a5:	0f 89 49 ff ff ff    	jns    c000c1f4 <sinc_hex_vari_process+0x310>
c000c2ab:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2af:	0f 8e ef 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c2b5:	83 ec 10             	sub    esp,0x10
c000c2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2be:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2c1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2c4:	e8 cb a1 01 00       	call   c0026494 <__subdf3>
c000c2c9:	83 c4 18             	add    esp,0x18
c000c2cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d4:	52                   	push   edx
c000c2d5:	50                   	push   eax
c000c2d6:	e8 45 ac 01 00       	call   c0026f20 <fabs>
c000c2db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2e3:	83 c4 10             	add    esp,0x10
c000c2e6:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2eb:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f8:	e8 74 aa 01 00       	call   c0026d71 <__gtdf2>
c000c2fd:	83 c4 10             	add    esp,0x10
c000c300:	85 c0                	test   eax,eax
c000c302:	0f 8e 9c 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c308:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c30b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c30e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c312:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c316:	52                   	push   edx
c000c317:	50                   	push   eax
c000c318:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c31b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c31e:	e8 71 a1 01 00       	call   c0026494 <__subdf3>
c000c323:	59                   	pop    ecx
c000c324:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c328:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c32c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c32f:	e8 ef a7 01 00       	call   c0026b23 <__floatsidf>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c33f:	52                   	push   edx
c000c340:	50                   	push   eax
c000c341:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c345:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c349:	e8 72 a1 01 00       	call   c00264c0 <__muldf3>
c000c34e:	5f                   	pop    edi
c000c34f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c353:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c357:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c35a:	e8 c4 a7 01 00       	call   c0026b23 <__floatsidf>
c000c35f:	83 c4 10             	add    esp,0x10
c000c362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c36a:	52                   	push   edx
c000c36b:	50                   	push   eax
c000c36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c374:	e8 2b a4 01 00       	call   c00267a4 <__divdf3>
c000c379:	83 c4 10             	add    esp,0x10
c000c37c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c380:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c388:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c38c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c390:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c394:	e8 aa 9a 01 00       	call   c0025e43 <__adddf3>
c000c399:	83 c4 10             	add    esp,0x10
c000c39c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3aa:	e8 74 a7 01 00       	call   c0026b23 <__floatsidf>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ca:	e8 c0 a9 01 00       	call   c0026d8f <__ltdf2>
c000c3cf:	83 c4 10             	add    esp,0x10
c000c3d2:	85 c0                	test   eax,eax
c000c3d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3dc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3e0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3e4:	78 10                	js     c000c3f6 <sinc_hex_vari_process+0x512>
c000c3e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c406:	e8 b5 a0 01 00       	call   c00264c0 <__muldf3>
c000c40b:	59                   	pop    ecx
c000c40c:	5f                   	pop    edi
c000c40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c411:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c415:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c41d:	e8 5d f2 ff ff       	call   c000b67f <double_to_fp>
c000c422:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c426:	89 c7                	mov    edi,eax
c000c428:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c42c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c430:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c434:	e8 87 a0 01 00       	call   c00264c0 <__muldf3>
c000c439:	83 c4 18             	add    esp,0x18
c000c43c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c440:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c444:	52                   	push   edx
c000c445:	50                   	push   eax
c000c446:	e8 34 f2 ff ff       	call   c000b67f <double_to_fp>
c000c44b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c44e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c452:	83 c4 0c             	add    esp,0xc
c000c455:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c458:	8d 04 90             	lea    eax,[eax+edx*4]
c000c45b:	50                   	push   eax
c000c45c:	50                   	push   eax
c000c45d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c460:	e8 be a6 01 00       	call   c0026b23 <__floatsidf>
c000c465:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c469:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c46d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c471:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c475:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c479:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c47d:	e8 22 a3 01 00       	call   c00267a4 <__divdf3>
c000c482:	83 c4 18             	add    esp,0x18
c000c485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c48d:	52                   	push   edx
c000c48e:	89 fa                	mov    edx,edi
c000c490:	50                   	push   eax
c000c491:	89 d8                	mov    eax,ebx
c000c493:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c497:	e8 50 de ff ff       	call   c000a2ec <calc_output_hex>
c000c49c:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b0:	e8 ef a2 01 00       	call   c00267a4 <__divdf3>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4d0:	e8 6e 99 01 00       	call   c0025e43 <__adddf3>
c000c4d5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4d9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4dd:	83 c4 18             	add    esp,0x18
c000c4e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e8:	e8 53 aa 01 00       	call   c0026f40 <lrint>
c000c4ed:	83 ec 0c             	sub    esp,0xc
c000c4f0:	50                   	push   eax
c000c4f1:	e8 2d a6 01 00       	call   c0026b23 <__floatsidf>
c000c4f6:	83 c4 10             	add    esp,0x10
c000c4f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c501:	52                   	push   edx
c000c502:	50                   	push   eax
c000c503:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c507:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c50b:	e8 84 9f 01 00       	call   c0026494 <__subdf3>
c000c510:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c514:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c518:	83 c4 20             	add    esp,0x20
c000c51b:	6a 00                	push   0x0
c000c51d:	6a 00                	push   0x0
c000c51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c523:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c527:	e8 63 a8 01 00       	call   c0026d8f <__ltdf2>
c000c52c:	83 c4 10             	add    esp,0x10
c000c52f:	85 c0                	test   eax,eax
c000c531:	79 20                	jns    c000c553 <sinc_hex_vari_process+0x66f>
c000c533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 fb 98 01 00       	call   c0025e43 <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c56c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c570:	e8 1f 9f 01 00       	call   c0026494 <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c57c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 b9 a9 01 00       	call   c0026f40 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c58e:	83 c4 10             	add    esp,0x10
c000c591:	01 f8                	add    eax,edi
c000c593:	99                   	cdq    
c000c594:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c597:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c59a:	e9 fd fb ff ff       	jmp    c000c19c <sinc_hex_vari_process+0x2b8>
c000c59f:	83 c4 4c             	add    esp,0x4c
c000c5a2:	89 d0                	mov    eax,edx
c000c5a4:	5b                   	pop    ebx
c000c5a5:	5e                   	pop    esi
c000c5a6:	5f                   	pop    edi
c000c5a7:	5d                   	pop    ebp
c000c5a8:	c3                   	ret    

c000c5a9 <sinc_quad_vari_process>:
c000c5a9:	55                   	push   ebp
c000c5aa:	ba 05 00 00 00       	mov    edx,0x5
c000c5af:	57                   	push   edi
c000c5b0:	56                   	push   esi
c000c5b1:	53                   	push   ebx
c000c5b2:	83 ec 4c             	sub    esp,0x4c
c000c5b5:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5b9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5bd:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5c0:	85 db                	test   ebx,ebx
c000c5c2:	0f 84 9c 06 00 00    	je     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c5c8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5ce:	0f af c7             	imul   eax,edi
c000c5d1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5d4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5d7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5e5:	0f af c7             	imul   eax,edi
c000c5e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5eb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f9:	68 00 00 70 3f       	push   0x3f700000
c000c5fe:	6a 00                	push   0x0
c000c600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c608:	e8 82 a7 01 00       	call   c0026d8f <__ltdf2>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	ba 16 00 00 00       	mov    edx,0x16
c000c615:	85 c0                	test   eax,eax
c000c617:	0f 88 47 06 00 00    	js     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c61d:	68 00 00 70 40       	push   0x40700000
c000c622:	6a 00                	push   0x0
c000c624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62c:	e8 40 a7 01 00       	call   c0026d71 <__gtdf2>
c000c631:	83 c4 10             	add    esp,0x10
c000c634:	ba 16 00 00 00       	mov    edx,0x16
c000c639:	85 c0                	test   eax,eax
c000c63b:	0f 8f 23 06 00 00    	jg     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c641:	83 ec 0c             	sub    esp,0xc
c000c644:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c647:	e8 d7 a4 01 00       	call   c0026b23 <__floatsidf>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c653:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c657:	68 00 00 00 40       	push   0x40000000
c000c65c:	6a 00                	push   0x0
c000c65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c666:	e8 d8 97 01 00       	call   c0025e43 <__adddf3>
c000c66b:	59                   	pop    ecx
c000c66c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c670:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c674:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c677:	e8 a7 a4 01 00       	call   c0026b23 <__floatsidf>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c683:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c687:	52                   	push   edx
c000c688:	50                   	push   eax
c000c689:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c691:	e8 0e a1 01 00       	call   c00267a4 <__divdf3>
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c69d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6a1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6a4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bf:	e8 ad a6 01 00       	call   c0026d71 <__gtdf2>
c000c6c4:	83 c4 10             	add    esp,0x10
c000c6c7:	85 c0                	test   eax,eax
c000c6c9:	7e 2d                	jle    c000c6f8 <sinc_quad_vari_process+0x14f>
c000c6cb:	68 00 00 f0 3f       	push   0x3ff00000
c000c6d0:	6a 00                	push   0x0
c000c6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	e8 b0 a6 01 00       	call   c0026d8f <__ltdf2>
c000c6df:	83 c4 10             	add    esp,0x10
c000c6e2:	85 c0                	test   eax,eax
c000c6e4:	79 4d                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6f6:	eb 1b                	jmp    c000c713 <sinc_quad_vari_process+0x16a>
c000c6f8:	68 00 00 f0 3f       	push   0x3ff00000
c000c6fd:	6a 00                	push   0x0
c000c6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c707:	e8 83 a6 01 00       	call   c0026d8f <__ltdf2>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	85 c0                	test   eax,eax
c000c711:	79 20                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c713:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c717:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c71b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c71f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c723:	e8 7c a0 01 00       	call   c00267a4 <__divdf3>
c000c728:	83 c4 10             	add    esp,0x10
c000c72b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c733:	50                   	push   eax
c000c734:	50                   	push   eax
c000c735:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c739:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c73d:	e8 fe a7 01 00       	call   c0026f40 <lrint>
c000c742:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c745:	40                   	inc    eax
c000c746:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c74a:	0f af c7             	imul   eax,edi
c000c74d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c754:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c758:	58                   	pop    eax
c000c759:	5a                   	pop    edx
c000c75a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c762:	e8 d9 a7 01 00       	call   c0026f40 <lrint>
c000c767:	83 ec 0c             	sub    esp,0xc
c000c76a:	50                   	push   eax
c000c76b:	e8 b3 a3 01 00       	call   c0026b23 <__floatsidf>
c000c770:	83 c4 10             	add    esp,0x10
c000c773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c777:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c77b:	52                   	push   edx
c000c77c:	50                   	push   eax
c000c77d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c781:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c785:	e8 0a 9d 01 00       	call   c0026494 <__subdf3>
c000c78a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	83 c4 20             	add    esp,0x20
c000c795:	6a 00                	push   0x0
c000c797:	6a 00                	push   0x0
c000c799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a1:	e8 e9 a5 01 00       	call   c0026d8f <__ltdf2>
c000c7a6:	83 c4 10             	add    esp,0x10
c000c7a9:	85 c0                	test   eax,eax
c000c7ab:	79 1f                	jns    c000c7cc <sinc_quad_vari_process+0x223>
c000c7ad:	68 00 00 f0 3f       	push   0x3ff00000
c000c7b2:	6a 00                	push   0x0
c000c7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7bc:	e8 82 96 01 00       	call   c0025e43 <__adddf3>
c000c7c1:	83 c4 10             	add    esp,0x10
c000c7c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7cc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7cf:	83 ec 10             	sub    esp,0x10
c000c7d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7d6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e9:	e8 a6 9c 01 00       	call   c0026494 <__subdf3>
c000c7ee:	83 c4 18             	add    esp,0x18
c000c7f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7f9:	52                   	push   edx
c000c7fa:	50                   	push   eax
c000c7fb:	e8 40 a7 01 00       	call   c0026f40 <lrint>
c000c800:	0f af f8             	imul   edi,eax
c000c803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c807:	01 f8                	add    eax,edi
c000c809:	99                   	cdq    
c000c80a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c80d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c810:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c814:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c818:	68 00 00 f0 3f       	push   0x3ff00000
c000c81d:	6a 00                	push   0x0
c000c81f:	e8 80 9f 01 00       	call   c00267a4 <__divdf3>
c000c824:	83 c4 10             	add    esp,0x10
c000c827:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c82b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c82f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c834:	68 23 42 92 0c       	push   0xc924223
c000c839:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c83d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c841:	e8 fd 95 01 00       	call   c0025e43 <__adddf3>
c000c846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c84e:	83 c4 20             	add    esp,0x20
c000c851:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c859:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c861:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c864:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c867:	7d 50                	jge    c000c8b9 <sinc_quad_vari_process+0x310>
c000c869:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c86c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c86f:	01 c8                	add    eax,ecx
c000c871:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c874:	99                   	cdq    
c000c875:	f7 f9                	idiv   ecx
c000c877:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c87b:	7d 0c                	jge    c000c889 <sinc_quad_vari_process+0x2e0>
c000c87d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c880:	85 ff                	test   edi,edi
c000c882:	79 6c                	jns    c000c8f0 <sinc_quad_vari_process+0x347>
c000c884:	e9 e7 00 00 00       	jmp    c000c970 <sinc_quad_vari_process+0x3c7>
c000c889:	50                   	push   eax
c000c88a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c88e:	56                   	push   esi
c000c88f:	53                   	push   ebx
c000c890:	e8 11 ee ff ff       	call   c000b6a6 <prepare_data>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	89 c2                	mov    edx,eax
c000c89a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c89d:	85 c0                	test   eax,eax
c000c89f:	0f 85 bf 03 00 00    	jne    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8a5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8ab:	01 c8                	add    eax,ecx
c000c8ad:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8b0:	99                   	cdq    
c000c8b1:	f7 f9                	idiv   ecx
c000c8b3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b7:	7c c4                	jl     c000c87d <sinc_quad_vari_process+0x2d4>
c000c8b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8c1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8c4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8d2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8d8:	99                   	cdq    
c000c8d9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8dc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8df:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8e2:	99                   	cdq    
c000c8e3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8e6:	31 d2                	xor    edx,edx
c000c8e8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8eb:	e9 74 03 00 00       	jmp    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8f6:	e8 28 a2 01 00       	call   c0026b23 <__floatsidf>
c000c8fb:	83 c4 10             	add    esp,0x10
c000c8fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c902:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c906:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c912:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c916:	e8 28 95 01 00       	call   c0025e43 <__adddf3>
c000c91b:	83 c4 10             	add    esp,0x10
c000c91e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c922:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c926:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c932:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c936:	e8 08 95 01 00       	call   c0025e43 <__adddf3>
c000c93b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c93e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c942:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c946:	e8 d8 a1 01 00       	call   c0026b23 <__floatsidf>
c000c94b:	83 c4 10             	add    esp,0x10
c000c94e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c952:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c956:	52                   	push   edx
c000c957:	50                   	push   eax
c000c958:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c95c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c960:	e8 28 a4 01 00       	call   c0026d8d <__gedf2>
c000c965:	83 c4 10             	add    esp,0x10
c000c968:	85 c0                	test   eax,eax
c000c96a:	0f 89 49 ff ff ff    	jns    c000c8b9 <sinc_quad_vari_process+0x310>
c000c970:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c974:	0f 8e ef 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c97a:	83 ec 10             	sub    esp,0x10
c000c97d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c980:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c983:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c986:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c989:	e8 06 9b 01 00       	call   c0026494 <__subdf3>
c000c98e:	83 c4 18             	add    esp,0x18
c000c991:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c995:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c999:	52                   	push   edx
c000c99a:	50                   	push   eax
c000c99b:	e8 80 a5 01 00       	call   c0026f20 <fabs>
c000c9a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9a8:	83 c4 10             	add    esp,0x10
c000c9ab:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9b0:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bd:	e8 af a3 01 00       	call   c0026d71 <__gtdf2>
c000c9c2:	83 c4 10             	add    esp,0x10
c000c9c5:	85 c0                	test   eax,eax
c000c9c7:	0f 8e 9c 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c9cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9db:	52                   	push   edx
c000c9dc:	50                   	push   eax
c000c9dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9e0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9e3:	e8 ac 9a 01 00       	call   c0026494 <__subdf3>
c000c9e8:	59                   	pop    ecx
c000c9e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9ed:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9f1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9f4:	e8 2a a1 01 00       	call   c0026b23 <__floatsidf>
c000c9f9:	83 c4 10             	add    esp,0x10
c000c9fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca04:	52                   	push   edx
c000ca05:	50                   	push   eax
c000ca06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0e:	e8 ad 9a 01 00       	call   c00264c0 <__muldf3>
c000ca13:	5f                   	pop    edi
c000ca14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca18:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca1c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca1f:	e8 ff a0 01 00       	call   c0026b23 <__floatsidf>
c000ca24:	83 c4 10             	add    esp,0x10
c000ca27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca2f:	52                   	push   edx
c000ca30:	50                   	push   eax
c000ca31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca39:	e8 66 9d 01 00       	call   c00267a4 <__divdf3>
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca59:	e8 e5 93 01 00       	call   c0025e43 <__adddf3>
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca69:	83 ec 0c             	sub    esp,0xc
c000ca6c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca6f:	e8 af a0 01 00       	call   c0026b23 <__floatsidf>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8f:	e8 fb a2 01 00       	call   c0026d8f <__ltdf2>
c000ca94:	83 c4 10             	add    esp,0x10
c000ca97:	85 c0                	test   eax,eax
c000ca99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca9d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000caa1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000caa5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000caa9:	78 10                	js     c000cabb <sinc_quad_vari_process+0x512>
c000caab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cab3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cab7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cabb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cabf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cacb:	e8 f0 99 01 00       	call   c00264c0 <__muldf3>
c000cad0:	59                   	pop    ecx
c000cad1:	5f                   	pop    edi
c000cad2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cae2:	e8 98 eb ff ff       	call   c000b67f <double_to_fp>
c000cae7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caeb:	89 c7                	mov    edi,eax
c000caed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf9:	e8 c2 99 01 00       	call   c00264c0 <__muldf3>
c000cafe:	83 c4 18             	add    esp,0x18
c000cb01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb09:	52                   	push   edx
c000cb0a:	50                   	push   eax
c000cb0b:	e8 6f eb ff ff       	call   c000b67f <double_to_fp>
c000cb10:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb13:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb17:	83 c4 0c             	add    esp,0xc
c000cb1a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb1d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb20:	50                   	push   eax
c000cb21:	50                   	push   eax
c000cb22:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb25:	e8 f9 9f 01 00       	call   c0026b23 <__floatsidf>
c000cb2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb42:	e8 5d 9c 01 00       	call   c00267a4 <__divdf3>
c000cb47:	83 c4 18             	add    esp,0x18
c000cb4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb52:	52                   	push   edx
c000cb53:	89 fa                	mov    edx,edi
c000cb55:	50                   	push   eax
c000cb56:	89 d8                	mov    eax,ebx
c000cb58:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb5c:	e8 a5 d1 ff ff       	call   c0009d06 <calc_output_quad>
c000cb61:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb75:	e8 2a 9c 01 00       	call   c00267a4 <__divdf3>
c000cb7a:	83 c4 10             	add    esp,0x10
c000cb7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb95:	e8 a9 92 01 00       	call   c0025e43 <__adddf3>
c000cb9a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb9e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cba2:	83 c4 18             	add    esp,0x18
c000cba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbad:	e8 8e a3 01 00       	call   c0026f40 <lrint>
c000cbb2:	83 ec 0c             	sub    esp,0xc
c000cbb5:	50                   	push   eax
c000cbb6:	e8 68 9f 01 00       	call   c0026b23 <__floatsidf>
c000cbbb:	83 c4 10             	add    esp,0x10
c000cbbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc6:	52                   	push   edx
c000cbc7:	50                   	push   eax
c000cbc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbcc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbd0:	e8 bf 98 01 00       	call   c0026494 <__subdf3>
c000cbd5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbd9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbdd:	83 c4 20             	add    esp,0x20
c000cbe0:	6a 00                	push   0x0
c000cbe2:	6a 00                	push   0x0
c000cbe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbec:	e8 9e a1 01 00       	call   c0026d8f <__ltdf2>
c000cbf1:	83 c4 10             	add    esp,0x10
c000cbf4:	85 c0                	test   eax,eax
c000cbf6:	79 20                	jns    c000cc18 <sinc_quad_vari_process+0x66f>
c000cbf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 36 92 01 00       	call   c0025e43 <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc35:	e8 5a 98 01 00       	call   c0026494 <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 f4 a2 01 00       	call   c0026f40 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc53:	83 c4 10             	add    esp,0x10
c000cc56:	01 f8                	add    eax,edi
c000cc58:	99                   	cdq    
c000cc59:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc5c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5f:	e9 fd fb ff ff       	jmp    c000c861 <sinc_quad_vari_process+0x2b8>
c000cc64:	83 c4 4c             	add    esp,0x4c
c000cc67:	89 d0                	mov    eax,edx
c000cc69:	5b                   	pop    ebx
c000cc6a:	5e                   	pop    esi
c000cc6b:	5f                   	pop    edi
c000cc6c:	5d                   	pop    ebp
c000cc6d:	c3                   	ret    

c000cc6e <sinc_stereo_vari_process>:
c000cc6e:	55                   	push   ebp
c000cc6f:	ba 05 00 00 00       	mov    edx,0x5
c000cc74:	57                   	push   edi
c000cc75:	56                   	push   esi
c000cc76:	53                   	push   ebx
c000cc77:	83 ec 4c             	sub    esp,0x4c
c000cc7a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc7e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc82:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc85:	85 db                	test   ebx,ebx
c000cc87:	0f 84 9c 06 00 00    	je     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cc8d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc93:	0f af c7             	imul   eax,edi
c000cc96:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc99:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc9c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cca3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ccaa:	0f af c7             	imul   eax,edi
c000ccad:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ccb0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccb6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbe:	68 00 00 70 3f       	push   0x3f700000
c000ccc3:	6a 00                	push   0x0
c000ccc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccd:	e8 bd a0 01 00       	call   c0026d8f <__ltdf2>
c000ccd2:	83 c4 10             	add    esp,0x10
c000ccd5:	ba 16 00 00 00       	mov    edx,0x16
c000ccda:	85 c0                	test   eax,eax
c000ccdc:	0f 88 47 06 00 00    	js     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cce2:	68 00 00 70 40       	push   0x40700000
c000cce7:	6a 00                	push   0x0
c000cce9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf1:	e8 7b a0 01 00       	call   c0026d71 <__gtdf2>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	ba 16 00 00 00       	mov    edx,0x16
c000ccfe:	85 c0                	test   eax,eax
c000cd00:	0f 8f 23 06 00 00    	jg     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cd06:	83 ec 0c             	sub    esp,0xc
c000cd09:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd0c:	e8 12 9e 01 00       	call   c0026b23 <__floatsidf>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd1c:	68 00 00 00 40       	push   0x40000000
c000cd21:	6a 00                	push   0x0
c000cd23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd2b:	e8 13 91 01 00       	call   c0025e43 <__adddf3>
c000cd30:	59                   	pop    ecx
c000cd31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd35:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd39:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3c:	e8 e2 9d 01 00       	call   c0026b23 <__floatsidf>
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd4c:	52                   	push   edx
c000cd4d:	50                   	push   eax
c000cd4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd56:	e8 49 9a 01 00       	call   c00267a4 <__divdf3>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd66:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd69:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd84:	e8 e8 9f 01 00       	call   c0026d71 <__gtdf2>
c000cd89:	83 c4 10             	add    esp,0x10
c000cd8c:	85 c0                	test   eax,eax
c000cd8e:	7e 2d                	jle    c000cdbd <sinc_stereo_vari_process+0x14f>
c000cd90:	68 00 00 f0 3f       	push   0x3ff00000
c000cd95:	6a 00                	push   0x0
c000cd97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	e8 eb 9f 01 00       	call   c0026d8f <__ltdf2>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	85 c0                	test   eax,eax
c000cda9:	79 4d                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdbb:	eb 1b                	jmp    c000cdd8 <sinc_stereo_vari_process+0x16a>
c000cdbd:	68 00 00 f0 3f       	push   0x3ff00000
c000cdc2:	6a 00                	push   0x0
c000cdc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdcc:	e8 be 9f 01 00       	call   c0026d8f <__ltdf2>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	85 c0                	test   eax,eax
c000cdd6:	79 20                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cddc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cde0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde8:	e8 b7 99 01 00       	call   c00267a4 <__divdf3>
c000cded:	83 c4 10             	add    esp,0x10
c000cdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf8:	50                   	push   eax
c000cdf9:	50                   	push   eax
c000cdfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce02:	e8 39 a1 01 00       	call   c0026f40 <lrint>
c000ce07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce0a:	40                   	inc    eax
c000ce0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0f:	0f af c7             	imul   eax,edi
c000ce12:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce1d:	58                   	pop    eax
c000ce1e:	5a                   	pop    edx
c000ce1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce27:	e8 14 a1 01 00       	call   c0026f40 <lrint>
c000ce2c:	83 ec 0c             	sub    esp,0xc
c000ce2f:	50                   	push   eax
c000ce30:	e8 ee 9c 01 00       	call   c0026b23 <__floatsidf>
c000ce35:	83 c4 10             	add    esp,0x10
c000ce38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce40:	52                   	push   edx
c000ce41:	50                   	push   eax
c000ce42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce4a:	e8 45 96 01 00       	call   c0026494 <__subdf3>
c000ce4f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	83 c4 20             	add    esp,0x20
c000ce5a:	6a 00                	push   0x0
c000ce5c:	6a 00                	push   0x0
c000ce5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce66:	e8 24 9f 01 00       	call   c0026d8f <__ltdf2>
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	85 c0                	test   eax,eax
c000ce70:	79 1f                	jns    c000ce91 <sinc_stereo_vari_process+0x223>
c000ce72:	68 00 00 f0 3f       	push   0x3ff00000
c000ce77:	6a 00                	push   0x0
c000ce79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce81:	e8 bd 8f 01 00       	call   c0025e43 <__adddf3>
c000ce86:	83 c4 10             	add    esp,0x10
c000ce89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce91:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce94:	83 ec 10             	sub    esp,0x10
c000ce97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce9b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceae:	e8 e1 95 01 00       	call   c0026494 <__subdf3>
c000ceb3:	83 c4 18             	add    esp,0x18
c000ceb6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cebe:	52                   	push   edx
c000cebf:	50                   	push   eax
c000cec0:	e8 7b a0 01 00       	call   c0026f40 <lrint>
c000cec5:	0f af f8             	imul   edi,eax
c000cec8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cecc:	01 f8                	add    eax,edi
c000cece:	99                   	cdq    
c000cecf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ced2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ced5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ced9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cedd:	68 00 00 f0 3f       	push   0x3ff00000
c000cee2:	6a 00                	push   0x0
c000cee4:	e8 bb 98 01 00       	call   c00267a4 <__divdf3>
c000cee9:	83 c4 10             	add    esp,0x10
c000ceec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cef0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cef4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cef9:	68 23 42 92 0c       	push   0xc924223
c000cefe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf06:	e8 38 8f 01 00       	call   c0025e43 <__adddf3>
c000cf0b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf0f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf13:	83 c4 20             	add    esp,0x20
c000cf16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf1e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf29:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf2c:	7d 50                	jge    c000cf7e <sinc_stereo_vari_process+0x310>
c000cf2e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf31:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf34:	01 c8                	add    eax,ecx
c000cf36:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf39:	99                   	cdq    
c000cf3a:	f7 f9                	idiv   ecx
c000cf3c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf40:	7d 0c                	jge    c000cf4e <sinc_stereo_vari_process+0x2e0>
c000cf42:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf45:	85 ff                	test   edi,edi
c000cf47:	79 6c                	jns    c000cfb5 <sinc_stereo_vari_process+0x347>
c000cf49:	e9 e7 00 00 00       	jmp    c000d035 <sinc_stereo_vari_process+0x3c7>
c000cf4e:	50                   	push   eax
c000cf4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf53:	56                   	push   esi
c000cf54:	53                   	push   ebx
c000cf55:	e8 4c e7 ff ff       	call   c000b6a6 <prepare_data>
c000cf5a:	83 c4 10             	add    esp,0x10
c000cf5d:	89 c2                	mov    edx,eax
c000cf5f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf62:	85 c0                	test   eax,eax
c000cf64:	0f 85 bf 03 00 00    	jne    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cf6a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf70:	01 c8                	add    eax,ecx
c000cf72:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf75:	99                   	cdq    
c000cf76:	f7 f9                	idiv   ecx
c000cf78:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf7c:	7c c4                	jl     c000cf42 <sinc_stereo_vari_process+0x2d4>
c000cf7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf86:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf89:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf94:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf97:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf9d:	99                   	cdq    
c000cf9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfa1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfa4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfa7:	99                   	cdq    
c000cfa8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfab:	31 d2                	xor    edx,edx
c000cfad:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfb0:	e9 74 03 00 00       	jmp    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cfb5:	83 ec 0c             	sub    esp,0xc
c000cfb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfbb:	e8 63 9b 01 00       	call   c0026b23 <__floatsidf>
c000cfc0:	83 c4 10             	add    esp,0x10
c000cfc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfdb:	e8 63 8e 01 00       	call   c0025e43 <__adddf3>
c000cfe0:	83 c4 10             	add    esp,0x10
c000cfe3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cffb:	e8 43 8e 01 00       	call   c0025e43 <__adddf3>
c000d000:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d003:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d007:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d00b:	e8 13 9b 01 00       	call   c0026b23 <__floatsidf>
c000d010:	83 c4 10             	add    esp,0x10
c000d013:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d017:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d01b:	52                   	push   edx
c000d01c:	50                   	push   eax
c000d01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d025:	e8 63 9d 01 00       	call   c0026d8d <__gedf2>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	85 c0                	test   eax,eax
c000d02f:	0f 89 49 ff ff ff    	jns    c000cf7e <sinc_stereo_vari_process+0x310>
c000d035:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d039:	0f 8e ef 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d03f:	83 ec 10             	sub    esp,0x10
c000d042:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d045:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d048:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d04b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d04e:	e8 41 94 01 00       	call   c0026494 <__subdf3>
c000d053:	83 c4 18             	add    esp,0x18
c000d056:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d05a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05e:	52                   	push   edx
c000d05f:	50                   	push   eax
c000d060:	e8 bb 9e 01 00       	call   c0026f20 <fabs>
c000d065:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d069:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d06d:	83 c4 10             	add    esp,0x10
c000d070:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d075:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d07a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d07e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d082:	e8 ea 9c 01 00       	call   c0026d71 <__gtdf2>
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	85 c0                	test   eax,eax
c000d08c:	0f 8e 9c 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d092:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d095:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d09c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0a0:	52                   	push   edx
c000d0a1:	50                   	push   eax
c000d0a2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0a5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0a8:	e8 e7 93 01 00       	call   c0026494 <__subdf3>
c000d0ad:	59                   	pop    ecx
c000d0ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0b2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0b6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0b9:	e8 65 9a 01 00       	call   c0026b23 <__floatsidf>
c000d0be:	83 c4 10             	add    esp,0x10
c000d0c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0c9:	52                   	push   edx
c000d0ca:	50                   	push   eax
c000d0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0d3:	e8 e8 93 01 00       	call   c00264c0 <__muldf3>
c000d0d8:	5f                   	pop    edi
c000d0d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0dd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0e1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0e4:	e8 3a 9a 01 00       	call   c0026b23 <__floatsidf>
c000d0e9:	83 c4 10             	add    esp,0x10
c000d0ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0f4:	52                   	push   edx
c000d0f5:	50                   	push   eax
c000d0f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fe:	e8 a1 96 01 00       	call   c00267a4 <__divdf3>
c000d103:	83 c4 10             	add    esp,0x10
c000d106:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11e:	e8 20 8d 01 00       	call   c0025e43 <__adddf3>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d12e:	83 ec 0c             	sub    esp,0xc
c000d131:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d134:	e8 ea 99 01 00       	call   c0026b23 <__floatsidf>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d154:	e8 36 9c 01 00       	call   c0026d8f <__ltdf2>
c000d159:	83 c4 10             	add    esp,0x10
c000d15c:	85 c0                	test   eax,eax
c000d15e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d162:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d166:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d16a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d16e:	78 10                	js     c000d180 <sinc_stereo_vari_process+0x512>
c000d170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d174:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d178:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d17c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d180:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d188:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d18c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d190:	e8 2b 93 01 00       	call   c00264c0 <__muldf3>
c000d195:	59                   	pop    ecx
c000d196:	5f                   	pop    edi
c000d197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a7:	e8 d3 e4 ff ff       	call   c000b67f <double_to_fp>
c000d1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b0:	89 c7                	mov    edi,eax
c000d1b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1be:	e8 fd 92 01 00       	call   c00264c0 <__muldf3>
c000d1c3:	83 c4 18             	add    esp,0x18
c000d1c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1ce:	52                   	push   edx
c000d1cf:	50                   	push   eax
c000d1d0:	e8 aa e4 ff ff       	call   c000b67f <double_to_fp>
c000d1d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1dc:	83 c4 0c             	add    esp,0xc
c000d1df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1e2:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1e5:	50                   	push   eax
c000d1e6:	50                   	push   eax
c000d1e7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1ea:	e8 34 99 01 00       	call   c0026b23 <__floatsidf>
c000d1ef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1f3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d203:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d207:	e8 98 95 01 00       	call   c00267a4 <__divdf3>
c000d20c:	83 c4 18             	add    esp,0x18
c000d20f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d213:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d217:	52                   	push   edx
c000d218:	89 fa                	mov    edx,edi
c000d21a:	50                   	push   eax
c000d21b:	89 d8                	mov    eax,ebx
c000d21d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d221:	e8 02 c7 ff ff       	call   c0009928 <calc_output_stereo>
c000d226:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d22a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d232:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d236:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23a:	e8 65 95 01 00       	call   c00267a4 <__divdf3>
c000d23f:	83 c4 10             	add    esp,0x10
c000d242:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d246:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d252:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d256:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d25a:	e8 e4 8b 01 00       	call   c0025e43 <__adddf3>
c000d25f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d263:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d267:	83 c4 18             	add    esp,0x18
c000d26a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d272:	e8 c9 9c 01 00       	call   c0026f40 <lrint>
c000d277:	83 ec 0c             	sub    esp,0xc
c000d27a:	50                   	push   eax
c000d27b:	e8 a3 98 01 00       	call   c0026b23 <__floatsidf>
c000d280:	83 c4 10             	add    esp,0x10
c000d283:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28b:	52                   	push   edx
c000d28c:	50                   	push   eax
c000d28d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d291:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d295:	e8 fa 91 01 00       	call   c0026494 <__subdf3>
c000d29a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a2:	83 c4 20             	add    esp,0x20
c000d2a5:	6a 00                	push   0x0
c000d2a7:	6a 00                	push   0x0
c000d2a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b1:	e8 d9 9a 01 00       	call   c0026d8f <__ltdf2>
c000d2b6:	83 c4 10             	add    esp,0x10
c000d2b9:	85 c0                	test   eax,eax
c000d2bb:	79 20                	jns    c000d2dd <sinc_stereo_vari_process+0x66f>
c000d2bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 71 8b 01 00       	call   c0025e43 <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2fa:	e8 95 91 01 00       	call   c0026494 <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d306:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 2f 9c 01 00       	call   c0026f40 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d318:	83 c4 10             	add    esp,0x10
c000d31b:	01 f8                	add    eax,edi
c000d31d:	99                   	cdq    
c000d31e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d321:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d324:	e9 fd fb ff ff       	jmp    c000cf26 <sinc_stereo_vari_process+0x2b8>
c000d329:	83 c4 4c             	add    esp,0x4c
c000d32c:	89 d0                	mov    eax,edx
c000d32e:	5b                   	pop    ebx
c000d32f:	5e                   	pop    esi
c000d330:	5f                   	pop    edi
c000d331:	5d                   	pop    ebp
c000d332:	c3                   	ret    

c000d333 <sinc_mono_vari_process>:
c000d333:	55                   	push   ebp
c000d334:	ba 05 00 00 00       	mov    edx,0x5
c000d339:	57                   	push   edi
c000d33a:	56                   	push   esi
c000d33b:	53                   	push   ebx
c000d33c:	83 ec 4c             	sub    esp,0x4c
c000d33f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d343:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d347:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d34a:	85 db                	test   ebx,ebx
c000d34c:	0f 84 c1 06 00 00    	je     c000da13 <sinc_mono_vari_process+0x6e0>
c000d352:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d355:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d358:	0f af c7             	imul   eax,edi
c000d35b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d35e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d361:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d368:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d36f:	0f af c7             	imul   eax,edi
c000d372:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d375:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d379:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d37c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d37e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d382:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d386:	68 00 00 70 3f       	push   0x3f700000
c000d38b:	6a 00                	push   0x0
c000d38d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d395:	e8 f5 99 01 00       	call   c0026d8f <__ltdf2>
c000d39a:	83 c4 10             	add    esp,0x10
c000d39d:	ba 16 00 00 00       	mov    edx,0x16
c000d3a2:	85 c0                	test   eax,eax
c000d3a4:	0f 88 69 06 00 00    	js     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3aa:	68 00 00 70 40       	push   0x40700000
c000d3af:	6a 00                	push   0x0
c000d3b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b9:	e8 b3 99 01 00       	call   c0026d71 <__gtdf2>
c000d3be:	83 c4 10             	add    esp,0x10
c000d3c1:	ba 16 00 00 00       	mov    edx,0x16
c000d3c6:	85 c0                	test   eax,eax
c000d3c8:	0f 8f 45 06 00 00    	jg     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3ce:	83 ec 0c             	sub    esp,0xc
c000d3d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3d4:	e8 4a 97 01 00       	call   c0026b23 <__floatsidf>
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3e4:	68 00 00 00 40       	push   0x40000000
c000d3e9:	6a 00                	push   0x0
c000d3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3f3:	e8 4b 8a 01 00       	call   c0025e43 <__adddf3>
c000d3f8:	59                   	pop    ecx
c000d3f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3fd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d401:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d404:	e8 1a 97 01 00       	call   c0026b23 <__floatsidf>
c000d409:	83 c4 10             	add    esp,0x10
c000d40c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d410:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d414:	52                   	push   edx
c000d415:	50                   	push   eax
c000d416:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41e:	e8 81 93 01 00       	call   c00267a4 <__divdf3>
c000d423:	83 c4 10             	add    esp,0x10
c000d426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d42e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d431:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d44c:	e8 20 99 01 00       	call   c0026d71 <__gtdf2>
c000d451:	83 c4 10             	add    esp,0x10
c000d454:	85 c0                	test   eax,eax
c000d456:	7e 2d                	jle    c000d485 <sinc_mono_vari_process+0x152>
c000d458:	68 00 00 f0 3f       	push   0x3ff00000
c000d45d:	6a 00                	push   0x0
c000d45f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d467:	e8 23 99 01 00       	call   c0026d8f <__ltdf2>
c000d46c:	83 c4 10             	add    esp,0x10
c000d46f:	85 c0                	test   eax,eax
c000d471:	79 4d                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d477:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d47b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d47f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d483:	eb 1b                	jmp    c000d4a0 <sinc_mono_vari_process+0x16d>
c000d485:	68 00 00 f0 3f       	push   0x3ff00000
c000d48a:	6a 00                	push   0x0
c000d48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d494:	e8 f6 98 01 00       	call   c0026d8f <__ltdf2>
c000d499:	83 c4 10             	add    esp,0x10
c000d49c:	85 c0                	test   eax,eax
c000d49e:	79 20                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d4a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b0:	e8 ef 92 01 00       	call   c00267a4 <__divdf3>
c000d4b5:	83 c4 10             	add    esp,0x10
c000d4b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4c0:	50                   	push   eax
c000d4c1:	50                   	push   eax
c000d4c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ca:	e8 71 9a 01 00       	call   c0026f40 <lrint>
c000d4cf:	40                   	inc    eax
c000d4d0:	0f af c7             	imul   eax,edi
c000d4d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4d7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4db:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4e9:	58                   	pop    eax
c000d4ea:	5a                   	pop    edx
c000d4eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f3:	e8 48 9a 01 00       	call   c0026f40 <lrint>
c000d4f8:	83 ec 0c             	sub    esp,0xc
c000d4fb:	50                   	push   eax
c000d4fc:	e8 22 96 01 00       	call   c0026b23 <__floatsidf>
c000d501:	83 c4 10             	add    esp,0x10
c000d504:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d508:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d50c:	52                   	push   edx
c000d50d:	50                   	push   eax
c000d50e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d512:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d516:	e8 79 8f 01 00       	call   c0026494 <__subdf3>
c000d51b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d51f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d523:	83 c4 20             	add    esp,0x20
c000d526:	6a 00                	push   0x0
c000d528:	6a 00                	push   0x0
c000d52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d532:	e8 58 98 01 00       	call   c0026d8f <__ltdf2>
c000d537:	83 c4 10             	add    esp,0x10
c000d53a:	85 c0                	test   eax,eax
c000d53c:	79 1f                	jns    c000d55d <sinc_mono_vari_process+0x22a>
c000d53e:	68 00 00 f0 3f       	push   0x3ff00000
c000d543:	6a 00                	push   0x0
c000d545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d549:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d54d:	e8 f1 88 01 00       	call   c0025e43 <__adddf3>
c000d552:	83 c4 10             	add    esp,0x10
c000d555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d559:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d55d:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d560:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d563:	83 ec 10             	sub    esp,0x10
c000d566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d572:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d576:	e8 19 8f 01 00       	call   c0026494 <__subdf3>
c000d57b:	83 c4 18             	add    esp,0x18
c000d57e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d582:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d586:	52                   	push   edx
c000d587:	50                   	push   eax
c000d588:	e8 b3 99 01 00       	call   c0026f40 <lrint>
c000d58d:	0f af f8             	imul   edi,eax
c000d590:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d593:	31 ff                	xor    edi,edi
c000d595:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d59a:	99                   	cdq    
c000d59b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d59e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a9:	55                   	push   ebp
c000d5aa:	57                   	push   edi
c000d5ab:	e8 f4 91 01 00       	call   c00267a4 <__divdf3>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5bb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5c0:	68 23 42 92 0c       	push   0xc924223
c000d5c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5cd:	e8 71 88 01 00       	call   c0025e43 <__adddf3>
c000d5d2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5d6:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5da:	83 c4 20             	add    esp,0x20
c000d5dd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5e1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5e8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5eb:	7d 54                	jge    c000d641 <sinc_mono_vari_process+0x30e>
c000d5ed:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5f0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5f3:	01 c8                	add    eax,ecx
c000d5f5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5f8:	99                   	cdq    
c000d5f9:	f7 f9                	idiv   ecx
c000d5fb:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5ff:	7d 0c                	jge    c000d60d <sinc_mono_vari_process+0x2da>
c000d601:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d604:	85 ff                	test   edi,edi
c000d606:	79 73                	jns    c000d67b <sinc_mono_vari_process+0x348>
c000d608:	e9 ee 00 00 00       	jmp    c000d6fb <sinc_mono_vari_process+0x3c8>
c000d60d:	50                   	push   eax
c000d60e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d612:	56                   	push   esi
c000d613:	53                   	push   ebx
c000d614:	e8 8d e0 ff ff       	call   c000b6a6 <prepare_data>
c000d619:	89 c2                	mov    edx,eax
c000d61b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d625:	85 d2                	test   edx,edx
c000d627:	0f 85 e6 03 00 00    	jne    c000da13 <sinc_mono_vari_process+0x6e0>
c000d62d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d630:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d633:	01 c8                	add    eax,ecx
c000d635:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d638:	99                   	cdq    
c000d639:	f7 f9                	idiv   ecx
c000d63b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d63f:	7c c0                	jl     c000d601 <sinc_mono_vari_process+0x2ce>
c000d641:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d649:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d64d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d650:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d657:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d65b:	89 01                	mov    DWORD PTR [ecx],eax
c000d65d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d660:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d663:	99                   	cdq    
c000d664:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d66a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d66d:	99                   	cdq    
c000d66e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d671:	31 d2                	xor    edx,edx
c000d673:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d676:	e9 98 03 00 00       	jmp    c000da13 <sinc_mono_vari_process+0x6e0>
c000d67b:	83 ec 0c             	sub    esp,0xc
c000d67e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d681:	e8 9d 94 01 00       	call   c0026b23 <__floatsidf>
c000d686:	83 c4 10             	add    esp,0x10
c000d689:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d68d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d695:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d699:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d69d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6a1:	e8 9d 87 01 00       	call   c0025e43 <__adddf3>
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6c1:	e8 7d 87 01 00       	call   c0025e43 <__adddf3>
c000d6c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6cd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6d1:	e8 4d 94 01 00       	call   c0026b23 <__floatsidf>
c000d6d6:	83 c4 10             	add    esp,0x10
c000d6d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6e1:	52                   	push   edx
c000d6e2:	50                   	push   eax
c000d6e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6eb:	e8 81 96 01 00       	call   c0026d71 <__gtdf2>
c000d6f0:	83 c4 10             	add    esp,0x10
c000d6f3:	85 c0                	test   eax,eax
c000d6f5:	0f 8f 46 ff ff ff    	jg     c000d641 <sinc_mono_vari_process+0x30e>
c000d6fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6ff:	0f 8e f5 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d705:	83 ec 10             	sub    esp,0x10
c000d708:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d70b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d70e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d712:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d715:	ff 30                	push   DWORD PTR [eax]
c000d717:	e8 78 8d 01 00       	call   c0026494 <__subdf3>
c000d71c:	83 c4 18             	add    esp,0x18
c000d71f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d723:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d727:	52                   	push   edx
c000d728:	50                   	push   eax
c000d729:	e8 f2 97 01 00       	call   c0026f20 <fabs>
c000d72e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d732:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d736:	83 c4 10             	add    esp,0x10
c000d739:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d73e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d743:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d747:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d74b:	e8 21 96 01 00       	call   c0026d71 <__gtdf2>
c000d750:	83 c4 10             	add    esp,0x10
c000d753:	85 c0                	test   eax,eax
c000d755:	0f 8e 9f 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d75b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d75f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d762:	8b 00                	mov    eax,DWORD PTR [eax]
c000d764:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d768:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d76c:	52                   	push   edx
c000d76d:	50                   	push   eax
c000d76e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d771:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d774:	e8 1b 8d 01 00       	call   c0026494 <__subdf3>
c000d779:	5f                   	pop    edi
c000d77a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d77e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d782:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d785:	e8 99 93 01 00       	call   c0026b23 <__floatsidf>
c000d78a:	83 c4 10             	add    esp,0x10
c000d78d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d795:	52                   	push   edx
c000d796:	50                   	push   eax
c000d797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79f:	e8 1c 8d 01 00       	call   c00264c0 <__muldf3>
c000d7a4:	5d                   	pop    ebp
c000d7a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7ad:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7b0:	e8 6e 93 01 00       	call   c0026b23 <__floatsidf>
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7c0:	52                   	push   edx
c000d7c1:	50                   	push   eax
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	e8 d5 8f 01 00       	call   c00267a4 <__divdf3>
c000d7cf:	83 c4 10             	add    esp,0x10
c000d7d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ea:	e8 54 86 01 00       	call   c0025e43 <__adddf3>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7fa:	83 ec 0c             	sub    esp,0xc
c000d7fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d800:	e8 1e 93 01 00       	call   c0026b23 <__floatsidf>
c000d805:	83 c4 10             	add    esp,0x10
c000d808:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d80c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d820:	e8 6a 95 01 00       	call   c0026d8f <__ltdf2>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	85 c0                	test   eax,eax
c000d82a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d82e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d832:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d836:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d83a:	78 10                	js     c000d84c <sinc_mono_vari_process+0x519>
c000d83c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d840:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d848:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d84c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d850:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d854:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d858:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d85c:	e8 5f 8c 01 00       	call   c00264c0 <__muldf3>
c000d861:	59                   	pop    ecx
c000d862:	5f                   	pop    edi
c000d863:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d867:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d86b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d86f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d873:	e8 07 de ff ff       	call   c000b67f <double_to_fp>
c000d878:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d87c:	89 c7                	mov    edi,eax
c000d87e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d882:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d886:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d88a:	e8 31 8c 01 00       	call   c00264c0 <__muldf3>
c000d88f:	83 c4 18             	add    esp,0x18
c000d892:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d896:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d89a:	52                   	push   edx
c000d89b:	50                   	push   eax
c000d89c:	e8 de dd ff ff       	call   c000b67f <double_to_fp>
c000d8a1:	83 ec 0c             	sub    esp,0xc
c000d8a4:	89 c5                	mov    ebp,eax
c000d8a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8a9:	e8 75 92 01 00       	call   c0026b23 <__floatsidf>
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8b5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8b9:	52                   	push   edx
c000d8ba:	50                   	push   eax
c000d8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8c3:	e8 dc 8e 01 00       	call   c00267a4 <__divdf3>
c000d8c8:	83 c4 10             	add    esp,0x10
c000d8cb:	89 e9                	mov    ecx,ebp
c000d8cd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8d1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8d5:	89 d8                	mov    eax,ebx
c000d8d7:	89 fa                	mov    edx,edi
c000d8d9:	e8 ee bd ff ff       	call   c00096cc <calc_output_single>
c000d8de:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8e1:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8ec:	52                   	push   edx
c000d8ed:	50                   	push   eax
c000d8ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f6:	e8 c5 8b 01 00       	call   c00264c0 <__muldf3>
c000d8fb:	59                   	pop    ecx
c000d8fc:	59                   	pop    ecx
c000d8fd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d901:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d905:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d909:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d90d:	e8 81 94 01 00       	call   c0026d93 <__truncdfsf2>
c000d912:	83 c4 10             	add    esp,0x10
c000d915:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d918:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d91b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d91f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d923:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d927:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d92b:	e8 74 8e 01 00       	call   c00267a4 <__divdf3>
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d937:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d93b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d943:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d947:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d94b:	e8 f3 84 01 00       	call   c0025e43 <__adddf3>
c000d950:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d954:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d958:	83 c4 18             	add    esp,0x18
c000d95b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d963:	e8 d8 95 01 00       	call   c0026f40 <lrint>
c000d968:	83 ec 0c             	sub    esp,0xc
c000d96b:	50                   	push   eax
c000d96c:	e8 b2 91 01 00       	call   c0026b23 <__floatsidf>
c000d971:	83 c4 10             	add    esp,0x10
c000d974:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d978:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d97c:	52                   	push   edx
c000d97d:	50                   	push   eax
c000d97e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d982:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d986:	e8 09 8b 01 00       	call   c0026494 <__subdf3>
c000d98b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d98f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d993:	83 c4 20             	add    esp,0x20
c000d996:	6a 00                	push   0x0
c000d998:	6a 00                	push   0x0
c000d99a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d99e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9a2:	e8 e8 93 01 00       	call   c0026d8f <__ltdf2>
c000d9a7:	83 c4 10             	add    esp,0x10
c000d9aa:	85 c0                	test   eax,eax
c000d9ac:	79 20                	jns    c000d9ce <sinc_mono_vari_process+0x69b>
c000d9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9be:	e8 80 84 01 00       	call   c0025e43 <__adddf3>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9ce:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9d1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9d4:	83 ec 10             	sub    esp,0x10
c000d9d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e7:	e8 a8 8a 01 00       	call   c0026494 <__subdf3>
c000d9ec:	83 c4 18             	add    esp,0x18
c000d9ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9f7:	52                   	push   edx
c000d9f8:	50                   	push   eax
c000d9f9:	e8 42 95 01 00       	call   c0026f40 <lrint>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	0f af f8             	imul   edi,eax
c000da04:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da07:	99                   	cdq    
c000da08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da0e:	e9 d2 fb ff ff       	jmp    c000d5e5 <sinc_mono_vari_process+0x2b2>
c000da13:	83 c4 4c             	add    esp,0x4c
c000da16:	89 d0                	mov    eax,edx
c000da18:	5b                   	pop    ebx
c000da19:	5e                   	pop    esi
c000da1a:	5f                   	pop    edi
c000da1b:	5d                   	pop    ebp
c000da1c:	c3                   	ret    

c000da1d <sinc_get_name>:
c000da1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da21:	31 c0                	xor    eax,eax
c000da23:	83 fa 02             	cmp    edx,0x2
c000da26:	77 07                	ja     c000da2f <sinc_get_name+0x12>
c000da28:	8b 04 95 e4 86 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd791c]
c000da2f:	c3                   	ret    

c000da30 <sinc_get_description>:
c000da30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da34:	31 c0                	xor    eax,eax
c000da36:	83 fa 02             	cmp    edx,0x2
c000da39:	77 07                	ja     c000da42 <sinc_get_description+0x12>
c000da3b:	8b 04 95 d8 86 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7928]
c000da42:	c3                   	ret    

c000da43 <sinc_set_converter>:
c000da43:	53                   	push   ebx
c000da44:	81 ec 58 08 00 00    	sub    esp,0x858
c000da4a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da51:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da54:	85 c0                	test   eax,eax
c000da56:	74 13                	je     c000da6b <sinc_set_converter+0x28>
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	50                   	push   eax
c000da5c:	e8 83 1a 00 00       	call   c000f4e4 <free>
c000da61:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da68:	83 c4 10             	add    esp,0x10
c000da6b:	50                   	push   eax
c000da6c:	68 44 08 00 00       	push   0x844
c000da71:	6a 00                	push   0x0
c000da73:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da77:	50                   	push   eax
c000da78:	e8 0e 2c ff ff       	call   c000068b <memset>
c000da7d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da80:	83 c4 10             	add    esp,0x10
c000da83:	b8 0b 00 00 00       	mov    eax,0xb
c000da88:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da8e:	7f 6e                	jg     c000dafe <sinc_set_converter+0xbb>
c000da90:	83 fa 01             	cmp    edx,0x1
c000da93:	75 10                	jne    c000daa5 <sinc_set_converter+0x62>
c000da95:	c7 43 24 33 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d333
c000da9c:	c7 43 20 33 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d333
c000daa3:	eb 4d                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daa5:	83 fa 02             	cmp    edx,0x2
c000daa8:	75 10                	jne    c000daba <sinc_set_converter+0x77>
c000daaa:	c7 43 24 6e cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc6e
c000dab1:	c7 43 20 6e cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc6e
c000dab8:	eb 38                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daba:	83 fa 04             	cmp    edx,0x4
c000dabd:	75 10                	jne    c000dacf <sinc_set_converter+0x8c>
c000dabf:	c7 43 24 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5a9
c000dac6:	c7 43 20 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5a9
c000dacd:	eb 23                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dacf:	83 fa 06             	cmp    edx,0x6
c000dad2:	75 10                	jne    c000dae4 <sinc_set_converter+0xa1>
c000dad4:	c7 43 24 e4 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bee4
c000dadb:	c7 43 20 e4 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bee4
c000dae2:	eb 0e                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dae4:	c7 43 24 20 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b820
c000daeb:	c7 43 20 20 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b820
c000daf2:	c7 43 28 d3 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aad3
c000daf9:	b8 0a 00 00 00       	mov    eax,0xa
c000dafe:	81 c4 58 08 00 00    	add    esp,0x858
c000db04:	5b                   	pop    ebx
c000db05:	c3                   	ret    

c000db06 <zoh_vari_process>:
c000db06:	55                   	push   ebp
c000db07:	31 d2                	xor    edx,edx
c000db09:	57                   	push   edi
c000db0a:	56                   	push   esi
c000db0b:	53                   	push   ebx
c000db0c:	83 ec 3c             	sub    esp,0x3c
c000db0f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db13:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db17:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db1b:	0f 8e 80 06 00 00    	jle    c000e1a1 <zoh_vari_process+0x69b>
c000db21:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db24:	ba 05 00 00 00       	mov    edx,0x5
c000db29:	85 db                	test   ebx,ebx
c000db2b:	0f 84 70 06 00 00    	je     c000e1a1 <zoh_vari_process+0x69b>
c000db31:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db34:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db38:	74 19                	je     c000db53 <zoh_vari_process+0x4d>
c000db3a:	31 d2                	xor    edx,edx
c000db3c:	39 c2                	cmp    edx,eax
c000db3e:	7d 0c                	jge    c000db4c <zoh_vari_process+0x46>
c000db40:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db42:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db45:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db49:	42                   	inc    edx
c000db4a:	eb f0                	jmp    c000db3c <zoh_vari_process+0x36>
c000db4c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db53:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db56:	0f af d0             	imul   edx,eax
c000db59:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db5c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db67:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db71:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db74:	8b 07                	mov    eax,DWORD PTR [edi]
c000db76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db7e:	68 00 00 70 3f       	push   0x3f700000
c000db83:	6a 00                	push   0x0
c000db85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db8d:	e8 fd 91 01 00       	call   c0026d8f <__ltdf2>
c000db92:	83 c4 10             	add    esp,0x10
c000db95:	ba 16 00 00 00       	mov    edx,0x16
c000db9a:	85 c0                	test   eax,eax
c000db9c:	0f 88 ff 05 00 00    	js     c000e1a1 <zoh_vari_process+0x69b>
c000dba2:	68 00 00 70 40       	push   0x40700000
c000dba7:	6a 00                	push   0x0
c000dba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb1:	e8 bb 91 01 00       	call   c0026d71 <__gtdf2>
c000dbb6:	83 c4 10             	add    esp,0x10
c000dbb9:	ba 16 00 00 00       	mov    edx,0x16
c000dbbe:	85 c0                	test   eax,eax
c000dbc0:	0f 8f db 05 00 00    	jg     c000e1a1 <zoh_vari_process+0x69b>
c000dbc6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbc9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbd4:	68 00 00 f0 3f       	push   0x3ff00000
c000dbd9:	6a 00                	push   0x0
c000dbdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe3:	e8 a7 91 01 00       	call   c0026d8f <__ltdf2>
c000dbe8:	83 c4 10             	add    esp,0x10
c000dbeb:	85 c0                	test   eax,eax
c000dbed:	0f 89 da 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dbf3:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbf6:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbf9:	0f 8d ce 01 00 00    	jge    c000ddcd <zoh_vari_process+0x2c7>
c000dbff:	83 ec 0c             	sub    esp,0xc
c000dc02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc05:	e8 19 8f 01 00       	call   c0026b23 <__floatsidf>
c000dc0a:	83 c4 10             	add    esp,0x10
c000dc0d:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc10:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc24:	e8 97 88 01 00       	call   c00264c0 <__muldf3>
c000dc29:	59                   	pop    ecx
c000dc2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc35:	e8 e9 8e 01 00       	call   c0026b23 <__floatsidf>
c000dc3a:	83 c4 10             	add    esp,0x10
c000dc3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc45:	52                   	push   edx
c000dc46:	50                   	push   eax
c000dc47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4f:	e8 ef 81 01 00       	call   c0025e43 <__adddf3>
c000dc54:	59                   	pop    ecx
c000dc55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc59:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc5d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc60:	e8 be 8e 01 00       	call   c0026b23 <__floatsidf>
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc70:	52                   	push   edx
c000dc71:	50                   	push   eax
c000dc72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc7a:	e8 0e 91 01 00       	call   c0026d8d <__gedf2>
c000dc7f:	83 c4 10             	add    esp,0x10
c000dc82:	85 c0                	test   eax,eax
c000dc84:	0f 89 43 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dc8a:	85 ed                	test   ebp,ebp
c000dc8c:	0f 8e ec 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dc92:	83 ec 10             	sub    esp,0x10
c000dc95:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc98:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc9b:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc9e:	ff 37                	push   DWORD PTR [edi]
c000dca0:	e8 ef 87 01 00       	call   c0026494 <__subdf3>
c000dca5:	83 c4 18             	add    esp,0x18
c000dca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcb0:	52                   	push   edx
c000dcb1:	50                   	push   eax
c000dcb2:	e8 69 92 01 00       	call   c0026f20 <fabs>
c000dcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcc7:	68 23 42 92 0c       	push   0xc924223
c000dccc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd4:	e8 98 90 01 00       	call   c0026d71 <__gtdf2>
c000dcd9:	83 c4 10             	add    esp,0x10
c000dcdc:	85 c0                	test   eax,eax
c000dcde:	0f 8e 9a 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dce4:	8b 07                	mov    eax,DWORD PTR [edi]
c000dce6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dce9:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dcf0:	52                   	push   edx
c000dcf1:	50                   	push   eax
c000dcf2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcf5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcf8:	e8 97 87 01 00       	call   c0026494 <__subdf3>
c000dcfd:	59                   	pop    ecx
c000dcfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd02:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd09:	e8 15 8e 01 00       	call   c0026b23 <__floatsidf>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd19:	52                   	push   edx
c000dd1a:	50                   	push   eax
c000dd1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd23:	e8 98 87 01 00       	call   c00264c0 <__muldf3>
c000dd28:	5d                   	pop    ebp
c000dd29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd2d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd31:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd34:	e8 ea 8d 01 00       	call   c0026b23 <__floatsidf>
c000dd39:	83 c4 10             	add    esp,0x10
c000dd3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd44:	52                   	push   edx
c000dd45:	50                   	push   eax
c000dd46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4e:	e8 51 8a 01 00       	call   c00267a4 <__divdf3>
c000dd53:	83 c4 10             	add    esp,0x10
c000dd56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd5e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd62:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6e:	e8 d0 80 01 00       	call   c0025e43 <__adddf3>
c000dd73:	83 c4 10             	add    esp,0x10
c000dd76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd7e:	31 c0                	xor    eax,eax
c000dd80:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd83:	7e 13                	jle    c000dd98 <zoh_vari_process+0x292>
c000dd85:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd89:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd8c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd8f:	40                   	inc    eax
c000dd90:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd93:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd96:	eb e8                	jmp    c000dd80 <zoh_vari_process+0x27a>
c000dd98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dda0:	68 00 00 f0 3f       	push   0x3ff00000
c000dda5:	6a 00                	push   0x0
c000dda7:	e8 f8 89 01 00       	call   c00267a4 <__divdf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddb6:	52                   	push   edx
c000ddb7:	50                   	push   eax
c000ddb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc0:	e8 7e 80 01 00       	call   c0025e43 <__adddf3>
c000ddc5:	83 c4 10             	add    esp,0x10
c000ddc8:	e9 ff fd ff ff       	jmp    c000dbcc <zoh_vari_process+0xc6>
c000ddcd:	55                   	push   ebp
c000ddce:	55                   	push   ebp
c000ddcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd7:	e8 64 91 01 00       	call   c0026f40 <lrint>
c000dddc:	83 ec 0c             	sub    esp,0xc
c000dddf:	50                   	push   eax
c000dde0:	e8 3e 8d 01 00       	call   c0026b23 <__floatsidf>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddf0:	52                   	push   edx
c000ddf1:	50                   	push   eax
c000ddf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddfa:	e8 95 86 01 00       	call   c0026494 <__subdf3>
c000ddff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de07:	83 c4 20             	add    esp,0x20
c000de0a:	6a 00                	push   0x0
c000de0c:	6a 00                	push   0x0
c000de0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de16:	e8 74 8f 01 00       	call   c0026d8f <__ltdf2>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	85 c0                	test   eax,eax
c000de20:	79 1e                	jns    c000de40 <zoh_vari_process+0x33a>
c000de22:	68 00 00 f0 3f       	push   0x3ff00000
c000de27:	6a 00                	push   0x0
c000de29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de31:	e8 0d 80 01 00       	call   c0025e43 <__adddf3>
c000de36:	83 c4 10             	add    esp,0x10
c000de39:	89 04 24             	mov    DWORD PTR [esp],eax
c000de3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de40:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de43:	83 ec 10             	sub    esp,0x10
c000de46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de56:	e8 39 86 01 00       	call   c0026494 <__subdf3>
c000de5b:	83 c4 18             	add    esp,0x18
c000de5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de66:	52                   	push   edx
c000de67:	50                   	push   eax
c000de68:	e8 d3 90 01 00       	call   c0026f40 <lrint>
c000de6d:	83 c4 10             	add    esp,0x10
c000de70:	0f af e8             	imul   ebp,eax
c000de73:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de76:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de79:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de7d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de80:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de87:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de8a:	0f 8d 7a 02 00 00    	jge    c000e10a <zoh_vari_process+0x604>
c000de90:	83 ec 0c             	sub    esp,0xc
c000de93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de96:	e8 88 8c 01 00       	call   c0026b23 <__floatsidf>
c000de9b:	83 c4 10             	add    esp,0x10
c000de9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dea2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deaa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb6:	e8 05 86 01 00       	call   c00264c0 <__muldf3>
c000debb:	59                   	pop    ecx
c000debc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dec0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dec8:	e8 56 8c 01 00       	call   c0026b23 <__floatsidf>
c000decd:	83 c4 10             	add    esp,0x10
c000ded0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ded4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ded8:	52                   	push   edx
c000ded9:	50                   	push   eax
c000deda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dede:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dee2:	e8 5c 7f 01 00       	call   c0025e43 <__adddf3>
c000dee7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000deea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000deee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000def2:	e8 2c 8c 01 00       	call   c0026b23 <__floatsidf>
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000defe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df02:	52                   	push   edx
c000df03:	50                   	push   eax
c000df04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df0c:	e8 80 8e 01 00       	call   c0026d91 <__ledf2>
c000df11:	83 c4 10             	add    esp,0x10
c000df14:	85 c0                	test   eax,eax
c000df16:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df1a:	0f 8f ea 01 00 00    	jg     c000e10a <zoh_vari_process+0x604>
c000df20:	85 c9                	test   ecx,ecx
c000df22:	0f 8e ed 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df28:	83 ec 10             	sub    esp,0x10
c000df2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df31:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df34:	ff 37                	push   DWORD PTR [edi]
c000df36:	e8 59 85 01 00       	call   c0026494 <__subdf3>
c000df3b:	83 c4 18             	add    esp,0x18
c000df3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df46:	52                   	push   edx
c000df47:	50                   	push   eax
c000df48:	e8 d3 8f 01 00       	call   c0026f20 <fabs>
c000df4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df51:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df5d:	68 23 42 92 0c       	push   0xc924223
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6a:	e8 02 8e 01 00       	call   c0026d71 <__gtdf2>
c000df6f:	83 c4 10             	add    esp,0x10
c000df72:	85 c0                	test   eax,eax
c000df74:	0f 8e 9b 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df7a:	8b 07                	mov    eax,DWORD PTR [edi]
c000df7c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df87:	52                   	push   edx
c000df88:	50                   	push   eax
c000df89:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df8c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df8f:	e8 00 85 01 00       	call   c0026494 <__subdf3>
c000df94:	5d                   	pop    ebp
c000df95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df99:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df9d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfa0:	e8 7e 8b 01 00       	call   c0026b23 <__floatsidf>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfb0:	52                   	push   edx
c000dfb1:	50                   	push   eax
c000dfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfba:	e8 01 85 01 00       	call   c00264c0 <__muldf3>
c000dfbf:	59                   	pop    ecx
c000dfc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfc4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfc8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfcb:	e8 53 8b 01 00       	call   c0026b23 <__floatsidf>
c000dfd0:	83 c4 10             	add    esp,0x10
c000dfd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfdb:	52                   	push   edx
c000dfdc:	50                   	push   eax
c000dfdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe5:	e8 ba 87 01 00       	call   c00267a4 <__divdf3>
c000dfea:	83 c4 10             	add    esp,0x10
c000dfed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dff1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dff5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	e8 39 7e 01 00       	call   c0025e43 <__adddf3>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e011:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e015:	31 d2                	xor    edx,edx
c000e017:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e01a:	39 d0                	cmp    eax,edx
c000e01c:	7e 1d                	jle    c000e03b <zoh_vari_process+0x535>
c000e01e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e021:	29 c1                	sub    ecx,eax
c000e023:	89 c8                	mov    eax,ecx
c000e025:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e027:	01 d0                	add    eax,edx
c000e029:	42                   	inc    edx
c000e02a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e02d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e030:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e033:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e036:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e039:	eb dc                	jmp    c000e017 <zoh_vari_process+0x511>
c000e03b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	68 00 00 f0 3f       	push   0x3ff00000
c000e048:	6a 00                	push   0x0
c000e04a:	e8 55 87 01 00       	call   c00267a4 <__divdf3>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e05a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e05e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06a:	e8 d4 7d 01 00       	call   c0025e43 <__adddf3>
c000e06f:	5d                   	pop    ebp
c000e070:	59                   	pop    ecx
c000e071:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e075:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e07d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e081:	e8 ba 8e 01 00       	call   c0026f40 <lrint>
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	50                   	push   eax
c000e08a:	e8 94 8a 01 00       	call   c0026b23 <__floatsidf>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e09a:	52                   	push   edx
c000e09b:	50                   	push   eax
c000e09c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a4:	e8 eb 83 01 00       	call   c0026494 <__subdf3>
c000e0a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0b1:	83 c4 20             	add    esp,0x20
c000e0b4:	6a 00                	push   0x0
c000e0b6:	6a 00                	push   0x0
c000e0b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c0:	e8 ca 8c 01 00       	call   c0026d8f <__ltdf2>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	85 c0                	test   eax,eax
c000e0ca:	79 1e                	jns    c000e0ea <zoh_vari_process+0x5e4>
c000e0cc:	68 00 00 f0 3f       	push   0x3ff00000
c000e0d1:	6a 00                	push   0x0
c000e0d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0db:	e8 63 7d 01 00       	call   c0025e43 <__adddf3>
c000e0e0:	83 c4 10             	add    esp,0x10
c000e0e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0ea:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0ed:	83 ec 10             	sub    esp,0x10
c000e0f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e100:	e8 8f 83 01 00       	call   c0026494 <__subdf3>
c000e105:	e9 51 fd ff ff       	jmp    c000de5b <zoh_vari_process+0x355>
c000e10a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e10e:	7d 3a                	jge    c000e14a <zoh_vari_process+0x644>
c000e110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e114:	83 ec 0c             	sub    esp,0xc
c000e117:	29 e8                	sub    eax,ebp
c000e119:	99                   	cdq    
c000e11a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e11d:	50                   	push   eax
c000e11e:	e8 00 8a 01 00       	call   c0026b23 <__floatsidf>
c000e123:	83 c4 10             	add    esp,0x10
c000e126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e12e:	52                   	push   edx
c000e12f:	50                   	push   eax
c000e130:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e134:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e138:	e8 06 7d 01 00       	call   c0025e43 <__adddf3>
c000e13d:	83 c4 10             	add    esp,0x10
c000e140:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e143:	89 04 24             	mov    DWORD PTR [esp],eax
c000e146:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e14a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e14d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e151:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e154:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e157:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e15a:	85 c0                	test   eax,eax
c000e15c:	7f 25                	jg     c000e183 <zoh_vari_process+0x67d>
c000e15e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e166:	89 07                	mov    DWORD PTR [edi],eax
c000e168:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e16b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e16e:	99                   	cdq    
c000e16f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e172:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e175:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e178:	99                   	cdq    
c000e179:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e17c:	31 d2                	xor    edx,edx
c000e17e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e181:	eb 1e                	jmp    c000e1a1 <zoh_vari_process+0x69b>
c000e183:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e186:	31 d2                	xor    edx,edx
c000e188:	29 c8                	sub    eax,ecx
c000e18a:	c1 e0 02             	shl    eax,0x2
c000e18d:	39 d1                	cmp    ecx,edx
c000e18f:	7e cd                	jle    c000e15e <zoh_vari_process+0x658>
c000e191:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e193:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e197:	83 c0 04             	add    eax,0x4
c000e19a:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e19e:	42                   	inc    edx
c000e19f:	eb ec                	jmp    c000e18d <zoh_vari_process+0x687>
c000e1a1:	83 c4 3c             	add    esp,0x3c
c000e1a4:	89 d0                	mov    eax,edx
c000e1a6:	5b                   	pop    ebx
c000e1a7:	5e                   	pop    esi
c000e1a8:	5f                   	pop    edi
c000e1a9:	5d                   	pop    ebp
c000e1aa:	c3                   	ret    

c000e1ab <zoh_reset>:
c000e1ab:	83 ec 0c             	sub    esp,0xc
c000e1ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1b2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1b5:	85 c0                	test   eax,eax
c000e1b7:	74 20                	je     c000e1d9 <zoh_reset+0x2e>
c000e1b9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1bc:	83 c0 1c             	add    eax,0x1c
c000e1bf:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1c2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1c9:	c1 e2 02             	shl    edx,0x2
c000e1cc:	51                   	push   ecx
c000e1cd:	52                   	push   edx
c000e1ce:	6a 00                	push   0x0
c000e1d0:	50                   	push   eax
c000e1d1:	e8 b5 24 ff ff       	call   c000068b <memset>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	83 c4 0c             	add    esp,0xc
c000e1dc:	c3                   	ret    

c000e1dd <zoh_get_name>:
c000e1dd:	31 c0                	xor    eax,eax
c000e1df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e4:	75 05                	jne    c000e1eb <zoh_get_name+0xe>
c000e1e6:	b8 fe 87 02 c0       	mov    eax,0xc00287fe
c000e1eb:	c3                   	ret    

c000e1ec <zoh_get_description>:
c000e1ec:	31 c0                	xor    eax,eax
c000e1ee:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1f3:	75 05                	jne    c000e1fa <zoh_get_description+0xe>
c000e1f5:	b8 0f 88 02 c0       	mov    eax,0xc002880f
c000e1fa:	c3                   	ret    

c000e1fb <zoh_set_converter>:
c000e1fb:	53                   	push   ebx
c000e1fc:	b8 0a 00 00 00       	mov    eax,0xa
c000e201:	83 ec 08             	sub    esp,0x8
c000e204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e208:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e20d:	75 6e                	jne    c000e27d <zoh_set_converter+0x82>
c000e20f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e212:	85 c0                	test   eax,eax
c000e214:	74 13                	je     c000e229 <zoh_set_converter+0x2e>
c000e216:	83 ec 0c             	sub    esp,0xc
c000e219:	50                   	push   eax
c000e21a:	e8 c5 12 00 00       	call   c000f4e4 <free>
c000e21f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	50                   	push   eax
c000e22a:	50                   	push   eax
c000e22b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e22e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e235:	50                   	push   eax
c000e236:	6a 01                	push   0x1
c000e238:	e8 c7 12 00 00       	call   c000f504 <calloc>
c000e23d:	83 c4 10             	add    esp,0x10
c000e240:	89 c2                	mov    edx,eax
c000e242:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e245:	85 d2                	test   edx,edx
c000e247:	b8 01 00 00 00       	mov    eax,0x1
c000e24c:	74 2f                	je     c000e27d <zoh_set_converter+0x82>
c000e24e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e251:	83 ec 0c             	sub    esp,0xc
c000e254:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e257:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e25d:	c7 43 24 06 db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db06
c000e264:	c7 43 20 06 db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db06
c000e26b:	c7 43 28 ab e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1ab
c000e272:	53                   	push   ebx
c000e273:	e8 33 ff ff ff       	call   c000e1ab <zoh_reset>
c000e278:	83 c4 10             	add    esp,0x10
c000e27b:	31 c0                	xor    eax,eax
c000e27d:	83 c4 08             	add    esp,0x8
c000e280:	5b                   	pop    ebx
c000e281:	c3                   	ret    

c000e282 <CPU::current()>:
c000e282:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c000e287:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e28d:	90                   	nop
c000e28e:	c3                   	ret    

c000e28f <operator new(unsigned long)>:
c000e28f:	83 ec 0c             	sub    esp,0xc
c000e292:	83 ec 0c             	sub    esp,0xc
c000e295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e299:	e8 36 12 00 00       	call   c000f4d4 <malloc>
c000e29e:	83 c4 10             	add    esp,0x10
c000e2a1:	83 c4 0c             	add    esp,0xc
c000e2a4:	c3                   	ret    
c000e2a5:	90                   	nop

c000e2a6 <Computer::close(int, int, void*)>:
c000e2a6:	57                   	push   edi
c000e2a7:	56                   	push   esi
c000e2a8:	53                   	push   ebx
c000e2a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e2b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e2b5:	83 ec 0c             	sub    esp,0xc
c000e2b8:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e2be:	e8 27 59 00 00       	call   c0013bea <Device::closeAll()>
c000e2c3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e2c9:	83 c4 10             	add    esp,0x10
c000e2cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2ce:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e2d2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e2da:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e2de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e2:	5b                   	pop    ebx
c000e2e3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e2e6:	5e                   	pop    esi
c000e2e7:	5f                   	pop    edi
c000e2e8:	ff e0                	jmp    eax

c000e2ea <Computer::Computer()>:
c000e2ea:	83 ec 0c             	sub    esp,0xc
c000e2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f1:	83 ec 08             	sub    esp,0x8
c000e2f4:	68 46 88 02 c0       	push   0xc0028846
c000e2f9:	50                   	push   eax
c000e2fa:	e8 65 59 00 00       	call   c0013c64 <Device::Device(char const*)>
c000e2ff:	83 c4 10             	add    esp,0x10
c000e302:	ba 10 8a 02 c0       	mov    edx,0xc0028a10
c000e307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30b:	89 10                	mov    DWORD PTR [eax],edx
c000e30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e311:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e333:	83 ca 04             	or     edx,0x4
c000e336:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e340:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e346:	0f b6 d0             	movzx  edx,al
c000e349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e358:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e35e:	0f b6 d0             	movzx  edx,al
c000e361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e365:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e374:	8d 50 01             	lea    edx,[eax+0x1]
c000e377:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e37b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e381:	0f b6 d0             	movzx  edx,al
c000e384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e388:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e38c:	83 e1 3f             	and    ecx,0x3f
c000e38f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e397:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e39d:	0f b6 d0             	movzx  edx,al
c000e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3b5:	0f b6 d0             	movzx  edx,al
c000e3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3bc:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3cb:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3d2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e3d8:	0f b6 d0             	movzx  edx,al
c000e3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3df:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e3e3:	83 e1 3f             	and    ecx,0x3f
c000e3e6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3f4:	0f b6 d0             	movzx  edx,al
c000e3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3fb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e406:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e40c:	0f b6 d0             	movzx  edx,al
c000e40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e413:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e422:	8d 50 01             	lea    edx,[eax+0x1]
c000e425:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e429:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e42f:	0f b6 d0             	movzx  edx,al
c000e432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e436:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e43a:	83 e1 3f             	and    ecx,0x3f
c000e43d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e441:	90                   	nop
c000e442:	83 c4 0c             	add    esp,0xc
c000e445:	c3                   	ret    

c000e446 <Computer::setBootMessage(char const*)>:
c000e446:	c3                   	ret    
c000e447:	90                   	nop

c000e448 <Computer::start()>:
c000e448:	56                   	push   esi
c000e449:	53                   	push   ebx
c000e44a:	83 ec 10             	sub    esp,0x10
c000e44d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e451:	fb                   	sti    
c000e452:	68 3f 07 00 00       	push   0x73f
c000e457:	e8 78 10 00 00       	call   c000f4d4 <malloc>
c000e45c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e463:	89 c6                	mov    esi,eax
c000e465:	ff 35 94 dd 02 c0    	push   DWORD PTR ds:0xc002dd94
c000e46b:	68 4f 88 02 c0       	push   0xc002884f
c000e470:	6a 01                	push   0x1
c000e472:	50                   	push   eax
c000e473:	e8 ea e5 00 00       	call   c001ca62 <Process::Process(bool, char const*, Process*, char**)>
c000e478:	83 c4 20             	add    esp,0x20
c000e47b:	68 ff 00 00 00       	push   0xff
c000e480:	6a 00                	push   0x0
c000e482:	68 69 ee 00 c0       	push   0xc000ee69
c000e487:	56                   	push   esi
c000e488:	e8 d3 e8 00 00       	call   c001cd60 <Process::createThread(void (*)(void*), void*, int)>
c000e48d:	6a 7a                	push   0x7a
c000e48f:	6a 00                	push   0x0
c000e491:	68 be d5 01 c0       	push   0xc001d5be
c000e496:	ff 35 94 dd 02 c0    	push   DWORD PTR ds:0xc002dd94
c000e49c:	e8 bf e8 00 00       	call   c001cd60 <Process::createThread(void (*)(void*), void*, int)>
c000e4a1:	83 c4 20             	add    esp,0x20
c000e4a4:	a3 48 dd 02 c0       	mov    ds:0xc002dd48,eax
c000e4a9:	e8 91 f4 00 00       	call   c001d93f <Vm::initialise8086()>
c000e4ae:	c6 05 4d c8 02 c0 01 	mov    BYTE PTR ds:0xc002c84d,0x1
c000e4b5:	e8 26 45 00 00       	call   c00129e0 <initVFS()>
c000e4ba:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e4c0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4c2:	6a 00                	push   0x0
c000e4c4:	6a 00                	push   0x0
c000e4c6:	6a 00                	push   0x0
c000e4c8:	50                   	push   eax
c000e4c9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4cc:	e8 95 b1 00 00       	call   c0019666 <Krnl::loadSystemEnv()>
c000e4d1:	e8 34 cf 00 00       	call   c001b40a <setupSystemCalls()>
c000e4d6:	e8 17 50 00 00       	call   c00134f2 <loadClockSettings()>
c000e4db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4de:	e8 db 56 00 00       	call   c0013bbe <Device::loadDriversForAll()>
c000e4e3:	58                   	pop    eax
c000e4e4:	8b 1d 48 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c848
c000e4ea:	5a                   	pop    edx
c000e4eb:	6a 01                	push   0x1
c000e4ed:	68 5c 88 02 c0       	push   0xc002885c
c000e4f2:	e8 c3 e0 00 00       	call   c001c5ba <Thr::loadDLL(char const*, bool)>
c000e4f7:	59                   	pop    ecx
c000e4f8:	5e                   	pop    esi
c000e4f9:	53                   	push   ebx
c000e4fa:	50                   	push   eax
c000e4fb:	e8 c9 e2 00 00       	call   c001c7c9 <Thr::executeDLL(unsigned long, void*)>
c000e500:	c7 04 24 b8 9a 02 c0 	mov    DWORD PTR [esp],0xc0029ab8
c000e507:	e8 79 41 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	6a 02                	push   0x2
c000e514:	e8 ab eb 00 00       	call   c001d0c4 <blockTask(TaskState)>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	eb f1                	jmp    c000e50f <Computer::start()+0xc7>

c000e51e <firstTask()>:
c000e51e:	83 ec 18             	sub    esp,0x18
c000e521:	ff 35 48 c8 02 c0    	push   DWORD PTR ds:0xc002c848
c000e527:	e8 1c ff ff ff       	call   c000e448 <Computer::start()>

c000e52c <Computer::detectFeatures()>:
c000e52c:	55                   	push   ebp
c000e52d:	57                   	push   edi
c000e52e:	56                   	push   esi
c000e52f:	53                   	push   ebx
c000e530:	83 ec 1c             	sub    esp,0x1c
c000e533:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e537:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e541:	e8 53 1d ff ff       	call   c0000299 <detectCPUID>
c000e546:	85 c0                	test   eax,eax
c000e548:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e54e:	0f 95 c2             	setne  dl
c000e551:	83 e0 fd             	and    eax,0xfffffffd
c000e554:	d1 e2                	shl    edx,1
c000e556:	09 d0                	or     eax,edx
c000e558:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e55e:	a8 02                	test   al,0x2
c000e560:	75 46                	jne    c000e5a8 <Computer::detectFeatures()+0x7c>
c000e562:	f6 05 61 c8 02 c0 04 	test   BYTE PTR ds:0xc002c861,0x4
c000e569:	74 07                	je     c000e572 <Computer::detectFeatures()+0x46>
c000e56b:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e572:	e8 0f 6a 01 00       	call   c0024f86 <x87Detect>
c000e577:	83 e0 01             	and    eax,0x1
c000e57a:	c1 e0 04             	shl    eax,0x4
c000e57d:	88 c2                	mov    dl,al
c000e57f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e585:	83 e0 ef             	and    eax,0xffffffef
c000e588:	09 d0                	or     eax,edx
c000e58a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e590:	a8 10                	test   al,0x10
c000e592:	0f 85 2a 01 00 00    	jne    c000e6c2 <Computer::detectFeatures()+0x196>
c000e598:	84 c0                	test   al,al
c000e59a:	0f 88 45 01 00 00    	js     c000e6e5 <Computer::detectFeatures()+0x1b9>
c000e5a0:	83 c4 1c             	add    esp,0x1c
c000e5a3:	5b                   	pop    ebx
c000e5a4:	5e                   	pop    esi
c000e5a5:	5f                   	pop    edi
c000e5a6:	5d                   	pop    ebp
c000e5a7:	c3                   	ret    
c000e5a8:	83 ec 0c             	sub    esp,0xc
c000e5ab:	6a 20                	push   0x20
c000e5ad:	e8 76 9a 00 00       	call   c0018028 <CPU::cpuidCheckEDX(unsigned int)>
c000e5b2:	83 e0 01             	and    eax,0x1
c000e5b5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5bc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e5c2:	83 e0 f7             	and    eax,0xfffffff7
c000e5c5:	09 d0                	or     eax,edx
c000e5c7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e5cd:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e5d4:	e8 4f 9a 00 00       	call   c0018028 <CPU::cpuidCheckEDX(unsigned int)>
c000e5d9:	83 e0 01             	and    eax,0x1
c000e5dc:	88 c2                	mov    dl,al
c000e5de:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5e4:	83 e0 fe             	and    eax,0xfffffffe
c000e5e7:	09 d0                	or     eax,edx
c000e5e9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5ef:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e5f6:	e8 2d 9a 00 00       	call   c0018028 <CPU::cpuidCheckEDX(unsigned int)>
c000e5fb:	c1 e0 07             	shl    eax,0x7
c000e5fe:	88 c2                	mov    dl,al
c000e600:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e606:	83 e0 7f             	and    eax,0x7f
c000e609:	09 d0                	or     eax,edx
c000e60b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e611:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e618:	e8 0b 9a 00 00       	call   c0018028 <CPU::cpuidCheckEDX(unsigned int)>
c000e61d:	83 c4 10             	add    esp,0x10
c000e620:	83 e0 01             	and    eax,0x1
c000e623:	c1 e0 05             	shl    eax,0x5
c000e626:	88 c2                	mov    dl,al
c000e628:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e62e:	83 e0 df             	and    eax,0xffffffdf
c000e631:	09 d0                	or     eax,edx
c000e633:	f7 05 60 c8 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002c860,0x401
c000e63d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e643:	0f 84 c2 00 00 00    	je     c000e70b <Computer::detectFeatures()+0x1df>
c000e649:	83 e0 fe             	and    eax,0xfffffffe
c000e64c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e652:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e658:	88 c2                	mov    dl,al
c000e65a:	83 e2 09             	and    edx,0x9
c000e65d:	fe ca                	dec    dl
c000e65f:	75 09                	jne    c000e66a <Computer::detectFeatures()+0x13e>
c000e661:	83 e0 fe             	and    eax,0xfffffffe
c000e664:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e66a:	83 ec 0c             	sub    esp,0xc
c000e66d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e671:	50                   	push   eax
c000e672:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e676:	55                   	push   ebp
c000e677:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e67b:	57                   	push   edi
c000e67c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e680:	56                   	push   esi
c000e681:	68 00 00 00 80       	push   0x80000000
c000e686:	e8 19 99 00 00       	call   c0017fa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e68b:	83 c4 20             	add    esp,0x20
c000e68e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e695:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e699:	0f 86 c3 fe ff ff    	jbe    c000e562 <Computer::detectFeatures()+0x36>
c000e69f:	83 ec 0c             	sub    esp,0xc
c000e6a2:	50                   	push   eax
c000e6a3:	55                   	push   ebp
c000e6a4:	57                   	push   edi
c000e6a5:	56                   	push   esi
c000e6a6:	68 01 00 00 80       	push   0x80000001
c000e6ab:	e8 f4 98 00 00       	call   c0017fa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e6b0:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e6ba:	83 c4 20             	add    esp,0x20
c000e6bd:	e9 a0 fe ff ff       	jmp    c000e562 <Computer::detectFeatures()+0x36>
c000e6c2:	e8 79 68 01 00       	call   c0024f40 <absolutelyNoChanceInHell>
c000e6c7:	88 c2                	mov    dl,al
c000e6c9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6cf:	c1 e2 07             	shl    edx,0x7
c000e6d2:	83 e0 7f             	and    eax,0x7f
c000e6d5:	09 d0                	or     eax,edx
c000e6d7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6dd:	84 c0                	test   al,al
c000e6df:	0f 89 bb fe ff ff    	jns    c000e5a0 <Computer::detectFeatures()+0x74>
c000e6e5:	e8 36 68 01 00       	call   c0024f20 <avxDetect>
c000e6ea:	83 e0 01             	and    eax,0x1
c000e6ed:	c1 e0 05             	shl    eax,0x5
c000e6f0:	88 c2                	mov    dl,al
c000e6f2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6f8:	83 e0 df             	and    eax,0xffffffdf
c000e6fb:	09 d0                	or     eax,edx
c000e6fd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e703:	83 c4 1c             	add    esp,0x1c
c000e706:	5b                   	pop    ebx
c000e707:	5e                   	pop    esi
c000e708:	5f                   	pop    edi
c000e709:	5d                   	pop    ebp
c000e70a:	c3                   	ret    
c000e70b:	83 ec 0c             	sub    esp,0xc
c000e70e:	68 00 02 00 00       	push   0x200
c000e713:	e8 10 99 00 00       	call   c0018028 <CPU::cpuidCheckEDX(unsigned int)>
c000e718:	83 c4 10             	add    esp,0x10
c000e71b:	83 e0 01             	and    eax,0x1
c000e71e:	88 c2                	mov    dl,al
c000e720:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e726:	83 e0 fe             	and    eax,0xfffffffe
c000e729:	09 d0                	or     eax,edx
c000e72b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e731:	e9 1c ff ff ff       	jmp    c000e652 <Computer::detectFeatures()+0x126>

c000e736 <Computer::displayFeatures()>:
c000e736:	53                   	push   ebx
c000e737:	83 ec 14             	sub    esp,0x14
c000e73a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e73e:	68 7f 88 02 c0       	push   0xc002887f
c000e743:	e8 3d 3f 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000e748:	83 c4 10             	add    esp,0x10
c000e74b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e752:	0f 85 73 02 00 00    	jne    c000e9cb <Computer::displayFeatures()+0x295>
c000e758:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e75d:	83 ec 08             	sub    esp,0x8
c000e760:	50                   	push   eax
c000e761:	68 92 88 02 c0       	push   0xc0028892
c000e766:	e8 1a 3f 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000e76b:	83 c4 10             	add    esp,0x10
c000e76e:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e775:	0f 85 8c 02 00 00    	jne    c000ea07 <Computer::displayFeatures()+0x2d1>
c000e77b:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e780:	83 ec 08             	sub    esp,0x8
c000e783:	50                   	push   eax
c000e784:	68 a3 88 02 c0       	push   0xc00288a3
c000e789:	e8 f7 3e 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000e78e:	83 c4 10             	add    esp,0x10
c000e791:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e798:	0f 85 5f 02 00 00    	jne    c000e9fd <Computer::displayFeatures()+0x2c7>
c000e79e:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e7a3:	83 ec 08             	sub    esp,0x8
c000e7a6:	50                   	push   eax
c000e7a7:	68 b4 88 02 c0       	push   0xc00288b4
c000e7ac:	e8 d4 3e 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000e7b1:	83 c4 10             	add    esp,0x10
c000e7b4:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e7bb:	0f 85 32 02 00 00    	jne    c000e9f3 <Computer::displayFeatures()+0x2bd>
c000e7c1:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	50                   	push   eax
c000e7ca:	68 c5 88 02 c0       	push   0xc00288c5
c000e7cf:	e8 b1 3e 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000e7d4:	83 c4 10             	add    esp,0x10
c000e7d7:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e7de:	0f 85 05 02 00 00    	jne    c000e9e9 <Computer::displayFeatures()+0x2b3>
c000e7e4:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e7e9:	83 ec 08             	sub    esp,0x8
c000e7ec:	50                   	push   eax
c000e7ed:	68 d6 88 02 c0       	push   0xc00288d6
c000e7f2:	e8 8e 3e 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000e7f7:	83 c4 10             	add    esp,0x10
c000e7fa:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e801:	0f 85 d8 01 00 00    	jne    c000e9df <Computer::displayFeatures()+0x2a9>
c000e807:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e80c:	83 ec 08             	sub    esp,0x8
c000e80f:	50                   	push   eax
c000e810:	68 e7 88 02 c0       	push   0xc00288e7
c000e815:	e8 6b 3e 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000e81a:	83 c4 10             	add    esp,0x10
c000e81d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e824:	0f 85 ab 01 00 00    	jne    c000e9d5 <Computer::displayFeatures()+0x29f>
c000e82a:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e82f:	83 ec 08             	sub    esp,0x8
c000e832:	50                   	push   eax
c000e833:	68 f8 88 02 c0       	push   0xc00288f8
c000e838:	e8 48 3e 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000e83d:	83 c4 10             	add    esp,0x10
c000e840:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e847:	0f 88 1b 02 00 00    	js     c000ea68 <Computer::displayFeatures()+0x332>
c000e84d:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e852:	83 ec 08             	sub    esp,0x8
c000e855:	50                   	push   eax
c000e856:	68 09 89 02 c0       	push   0xc0028909
c000e85b:	e8 25 3e 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000e860:	83 c4 10             	add    esp,0x10
c000e863:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e86a:	0f 85 a1 01 00 00    	jne    c000ea11 <Computer::displayFeatures()+0x2db>
c000e870:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e875:	83 ec 08             	sub    esp,0x8
c000e878:	50                   	push   eax
c000e879:	68 1a 89 02 c0       	push   0xc002891a
c000e87e:	e8 02 3e 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000e883:	83 c4 10             	add    esp,0x10
c000e886:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e88d:	0f 85 cb 01 00 00    	jne    c000ea5e <Computer::displayFeatures()+0x328>
c000e893:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e898:	83 ec 08             	sub    esp,0x8
c000e89b:	50                   	push   eax
c000e89c:	68 2b 89 02 c0       	push   0xc002892b
c000e8a1:	e8 df 3d 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000e8a6:	83 c4 10             	add    esp,0x10
c000e8a9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e8b0:	0f 85 9e 01 00 00    	jne    c000ea54 <Computer::displayFeatures()+0x31e>
c000e8b6:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e8bb:	83 ec 08             	sub    esp,0x8
c000e8be:	50                   	push   eax
c000e8bf:	68 3c 89 02 c0       	push   0xc002893c
c000e8c4:	e8 bc 3d 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000e8c9:	83 c4 10             	add    esp,0x10
c000e8cc:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e8d3:	0f 85 71 01 00 00    	jne    c000ea4a <Computer::displayFeatures()+0x314>
c000e8d9:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e8de:	83 ec 08             	sub    esp,0x8
c000e8e1:	50                   	push   eax
c000e8e2:	68 4d 89 02 c0       	push   0xc002894d
c000e8e7:	e8 99 3d 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000e8ec:	83 c4 10             	add    esp,0x10
c000e8ef:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e8f6:	0f 85 44 01 00 00    	jne    c000ea40 <Computer::displayFeatures()+0x30a>
c000e8fc:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e901:	83 ec 08             	sub    esp,0x8
c000e904:	50                   	push   eax
c000e905:	68 5e 89 02 c0       	push   0xc002895e
c000e90a:	e8 76 3d 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000e90f:	83 c4 10             	add    esp,0x10
c000e912:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e919:	0f 85 17 01 00 00    	jne    c000ea36 <Computer::displayFeatures()+0x300>
c000e91f:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e924:	83 ec 08             	sub    esp,0x8
c000e927:	50                   	push   eax
c000e928:	68 6f 89 02 c0       	push   0xc002896f
c000e92d:	e8 53 3d 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000e932:	83 c4 10             	add    esp,0x10
c000e935:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e93c:	0f 85 ea 00 00 00    	jne    c000ea2c <Computer::displayFeatures()+0x2f6>
c000e942:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e947:	83 ec 08             	sub    esp,0x8
c000e94a:	50                   	push   eax
c000e94b:	68 80 89 02 c0       	push   0xc0028980
c000e950:	e8 30 3d 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000e955:	83 c4 10             	add    esp,0x10
c000e958:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e95f:	0f 88 0d 01 00 00    	js     c000ea72 <Computer::displayFeatures()+0x33c>
c000e965:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e96a:	83 ec 08             	sub    esp,0x8
c000e96d:	50                   	push   eax
c000e96e:	68 91 89 02 c0       	push   0xc0028991
c000e973:	e8 0d 3d 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000e978:	83 c4 10             	add    esp,0x10
c000e97b:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e982:	0f 85 9a 00 00 00    	jne    c000ea22 <Computer::displayFeatures()+0x2ec>
c000e988:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e98d:	83 ec 08             	sub    esp,0x8
c000e990:	50                   	push   eax
c000e991:	68 a2 89 02 c0       	push   0xc00289a2
c000e996:	e8 ea 3c 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000e99b:	83 c4 10             	add    esp,0x10
c000e99e:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e9a5:	75 74                	jne    c000ea1b <Computer::displayFeatures()+0x2e5>
c000e9a7:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e9ac:	83 ec 08             	sub    esp,0x8
c000e9af:	50                   	push   eax
c000e9b0:	68 b3 89 02 c0       	push   0xc00289b3
c000e9b5:	e8 cb 3c 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000e9ba:	c7 44 24 20 5b a1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a15b
c000e9c2:	83 c4 18             	add    esp,0x18
c000e9c5:	5b                   	pop    ebx
c000e9c6:	e9 ba 3c 00 00       	jmp    c0012685 <Dbg::kprintf(char const*, ...)>
c000e9cb:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000e9d0:	e9 88 fd ff ff       	jmp    c000e75d <Computer::displayFeatures()+0x27>
c000e9d5:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000e9da:	e9 50 fe ff ff       	jmp    c000e82f <Computer::displayFeatures()+0xf9>
c000e9df:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000e9e4:	e9 23 fe ff ff       	jmp    c000e80c <Computer::displayFeatures()+0xd6>
c000e9e9:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000e9ee:	e9 f6 fd ff ff       	jmp    c000e7e9 <Computer::displayFeatures()+0xb3>
c000e9f3:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000e9f8:	e9 c9 fd ff ff       	jmp    c000e7c6 <Computer::displayFeatures()+0x90>
c000e9fd:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea02:	e9 9c fd ff ff       	jmp    c000e7a3 <Computer::displayFeatures()+0x6d>
c000ea07:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea0c:	e9 6f fd ff ff       	jmp    c000e780 <Computer::displayFeatures()+0x4a>
c000ea11:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea16:	e9 5a fe ff ff       	jmp    c000e875 <Computer::displayFeatures()+0x13f>
c000ea1b:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea20:	eb 8a                	jmp    c000e9ac <Computer::displayFeatures()+0x276>
c000ea22:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea27:	e9 61 ff ff ff       	jmp    c000e98d <Computer::displayFeatures()+0x257>
c000ea2c:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea31:	e9 11 ff ff ff       	jmp    c000e947 <Computer::displayFeatures()+0x211>
c000ea36:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea3b:	e9 e4 fe ff ff       	jmp    c000e924 <Computer::displayFeatures()+0x1ee>
c000ea40:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea45:	e9 b7 fe ff ff       	jmp    c000e901 <Computer::displayFeatures()+0x1cb>
c000ea4a:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea4f:	e9 8a fe ff ff       	jmp    c000e8de <Computer::displayFeatures()+0x1a8>
c000ea54:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea59:	e9 5d fe ff ff       	jmp    c000e8bb <Computer::displayFeatures()+0x185>
c000ea5e:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea63:	e9 30 fe ff ff       	jmp    c000e898 <Computer::displayFeatures()+0x162>
c000ea68:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea6d:	e9 e0 fd ff ff       	jmp    c000e852 <Computer::displayFeatures()+0x11c>
c000ea72:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea77:	e9 ee fe ff ff       	jmp    c000e96a <Computer::displayFeatures()+0x234>

c000ea7c <Computer::rdmsr(unsigned int)>:
c000ea7c:	83 ec 0c             	sub    esp,0xc
c000ea7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea83:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea8a:	74 0a                	je     c000ea96 <Computer::rdmsr(unsigned int)+0x1a>
c000ea8c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea90:	0f 32                	rdmsr  
c000ea92:	83 c4 0c             	add    esp,0xc
c000ea95:	c3                   	ret    
c000ea96:	83 ec 0c             	sub    esp,0xc
c000ea99:	68 c4 89 02 c0       	push   0xc00289c4
c000ea9e:	e8 fc ac 00 00       	call   c001979f <Krnl::panic(char const*)>
c000eaa3:	83 c4 10             	add    esp,0x10
c000eaa6:	eb e4                	jmp    c000ea8c <Computer::rdmsr(unsigned int)+0x10>

c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eaa8:	57                   	push   edi
c000eaa9:	56                   	push   esi
c000eaaa:	52                   	push   edx
c000eaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaaf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eab3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eab7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eabe:	74 0e                	je     c000eace <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eac0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eac4:	89 f0                	mov    eax,esi
c000eac6:	89 fa                	mov    edx,edi
c000eac8:	0f 30                	wrmsr  
c000eaca:	58                   	pop    eax
c000eacb:	5e                   	pop    esi
c000eacc:	5f                   	pop    edi
c000eacd:	c3                   	ret    
c000eace:	83 ec 0c             	sub    esp,0xc
c000ead1:	68 ca 89 02 c0       	push   0xc00289ca
c000ead6:	e8 c4 ac 00 00       	call   c001979f <Krnl::panic(char const*)>
c000eadb:	83 c4 10             	add    esp,0x10
c000eade:	eb e0                	jmp    c000eac0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eae0 <Computer::nmiEnabled()>:
c000eae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eae4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eaea:	c3                   	ret    
c000eaeb:	90                   	nop

c000eaec <Computer::readCMOS(unsigned char)>:
c000eaec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eaf0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eaf7:	19 c0                	sbb    eax,eax
c000eaf9:	83 e0 80             	and    eax,0xffffff80
c000eafc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eb00:	e6 70                	out    0x70,al
c000eb02:	e4 71                	in     al,0x71
c000eb04:	c3                   	ret    
c000eb05:	90                   	nop

c000eb06 <Computer::enableNMI(bool)>:
c000eb06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb0e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eb14:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eb1c:	eb ce                	jmp    c000eaec <Computer::readCMOS(unsigned char)>

c000eb1e <Computer::open(int, int, void*)>:
c000eb1e:	56                   	push   esi
c000eb1f:	53                   	push   ebx
c000eb20:	83 ec 10             	sub    esp,0x10
c000eb23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb27:	f6 05 60 c8 02 c0 04 	test   BYTE PTR ds:0xc002c860,0x4
c000eb2e:	68 68 22 00 00       	push   0x2268
c000eb33:	0f 94 05 84 b7 02 c0 	sete   BYTE PTR ds:0xc002b784
c000eb3a:	e8 95 09 00 00       	call   c000f4d4 <malloc>
c000eb3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb42:	89 c6                	mov    esi,eax
c000eb44:	e8 eb 8a 00 00       	call   c0017634 <ACPI::ACPI()>
c000eb49:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eb4f:	58                   	pop    eax
c000eb50:	5a                   	pop    edx
c000eb51:	56                   	push   esi
c000eb52:	53                   	push   ebx
c000eb53:	e8 1c 4f 00 00       	call   c0013a74 <Device::addChild(Device*)>
c000eb58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb5b:	e8 cc f9 ff ff       	call   c000e52c <Computer::detectFeatures()>
c000eb60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb63:	e8 ce fb ff ff       	call   c000e736 <Computer::displayFeatures()>
c000eb68:	59                   	pop    ecx
c000eb69:	5e                   	pop    esi
c000eb6a:	6a 01                	push   0x1
c000eb6c:	53                   	push   ebx
c000eb6d:	e8 94 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000eb72:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eb79:	e8 56 09 00 00       	call   c000f4d4 <malloc>
c000eb7e:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb81:	89 c6                	mov    esi,eax
c000eb83:	e8 58 95 00 00       	call   c00180e0 <CPU::CPU()>
c000eb88:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eb8e:	58                   	pop    eax
c000eb8f:	5a                   	pop    edx
c000eb90:	56                   	push   esi
c000eb91:	53                   	push   ebx
c000eb92:	e8 dd 4e 00 00       	call   c0013a74 <Device::addChild(Device*)>
c000eb97:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eb9d:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eba3:	6a 00                	push   0x0
c000eba5:	6a 00                	push   0x0
c000eba7:	50                   	push   eax
c000eba8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebab:	83 c4 20             	add    esp,0x20
c000ebae:	e8 33 54 00 00       	call   c0013fe6 <setupFPU()>
c000ebb3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ebb9:	85 c0                	test   eax,eax
c000ebbb:	74 1f                	je     c000ebdc <Computer::open(int, int, void*)+0xbe>
c000ebbd:	83 ec 08             	sub    esp,0x8
c000ebc0:	50                   	push   eax
c000ebc1:	53                   	push   ebx
c000ebc2:	e8 ad 4e 00 00       	call   c0013a74 <Device::addChild(Device*)>
c000ebc7:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ebcd:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebcf:	6a 00                	push   0x0
c000ebd1:	6a 00                	push   0x0
c000ebd3:	6a 00                	push   0x0
c000ebd5:	50                   	push   eax
c000ebd6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebd9:	83 c4 20             	add    esp,0x20
c000ebdc:	83 ec 0c             	sub    esp,0xc
c000ebdf:	68 1e e5 00 c0       	push   0xc000e51e
c000ebe4:	e8 77 e2 00 00       	call   c001ce60 <setupMultitasking(void (*)())>
c000ebe9:	83 c4 14             	add    esp,0x14
c000ebec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebf1:	5b                   	pop    ebx
c000ebf2:	5e                   	pop    esi
c000ebf3:	c3                   	ret    

c000ebf4 <Computer::disableNMI()>:
c000ebf4:	6a 00                	push   0x0
c000ebf6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ebfa:	e8 07 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000ebff:	58                   	pop    eax
c000ec00:	5a                   	pop    edx
c000ec01:	c3                   	ret    

c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ec02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec06:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec0d:	19 c0                	sbb    eax,eax
c000ec0f:	83 e0 80             	and    eax,0xffffff80
c000ec12:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec16:	e6 70                	out    0x70,al
c000ec18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec1c:	e6 71                	out    0x71,al
c000ec1e:	c3                   	ret    
c000ec1f:	90                   	nop

c000ec20 <Computer::handleNMI()>:
c000ec20:	56                   	push   esi
c000ec21:	53                   	push   ebx
c000ec22:	83 ec 10             	sub    esp,0x10
c000ec25:	e4 92                	in     al,0x92
c000ec27:	89 c6                	mov    esi,eax
c000ec29:	e4 61                	in     al,0x61
c000ec2b:	68 d0 89 02 c0       	push   0xc00289d0
c000ec30:	88 c3                	mov    bl,al
c000ec32:	e8 4e 3a 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000ec37:	83 c4 10             	add    esp,0x10
c000ec3a:	83 e6 10             	and    esi,0x10
c000ec3d:	75 0d                	jne    c000ec4c <Computer::handleNMI()+0x2c>
c000ec3f:	f6 c3 40             	test   bl,0x40
c000ec42:	75 1d                	jne    c000ec61 <Computer::handleNMI()+0x41>
c000ec44:	84 db                	test   bl,bl
c000ec46:	78 2d                	js     c000ec75 <Computer::handleNMI()+0x55>
c000ec48:	58                   	pop    eax
c000ec49:	5b                   	pop    ebx
c000ec4a:	5e                   	pop    esi
c000ec4b:	c3                   	ret    
c000ec4c:	83 ec 0c             	sub    esp,0xc
c000ec4f:	68 e1 89 02 c0       	push   0xc00289e1
c000ec54:	e8 46 ab 00 00       	call   c001979f <Krnl::panic(char const*)>
c000ec59:	83 c4 10             	add    esp,0x10
c000ec5c:	f6 c3 40             	test   bl,0x40
c000ec5f:	74 e3                	je     c000ec44 <Computer::handleNMI()+0x24>
c000ec61:	83 ec 0c             	sub    esp,0xc
c000ec64:	68 ee 89 02 c0       	push   0xc00289ee
c000ec69:	e8 31 ab 00 00       	call   c001979f <Krnl::panic(char const*)>
c000ec6e:	83 c4 10             	add    esp,0x10
c000ec71:	84 db                	test   bl,bl
c000ec73:	79 d3                	jns    c000ec48 <Computer::handleNMI()+0x28>
c000ec75:	c7 44 24 10 f8 89 02 c0 	mov    DWORD PTR [esp+0x10],0xc00289f8
c000ec7d:	5a                   	pop    edx
c000ec7e:	5b                   	pop    ebx
c000ec7f:	5e                   	pop    esi
c000ec80:	e9 1a ab 00 00       	jmp    c001979f <Krnl::panic(char const*)>
c000ec85:	90                   	nop

c000ec86 <Computer::setDiskActivityLight(int, bool)>:
c000ec86:	56                   	push   esi
c000ec87:	53                   	push   ebx
c000ec88:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec8c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec91:	77 1b                	ja     c000ecae <Computer::setDiskActivityLight(int, bool)+0x28>
c000ec93:	e4 92                	in     al,0x92
c000ec95:	bb 40 00 00 00       	mov    ebx,0x40
c000ec9a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ec9e:	89 da                	mov    edx,ebx
c000eca0:	d3 e2                	shl    edx,cl
c000eca2:	89 f1                	mov    ecx,esi
c000eca4:	f7 d2                	not    edx
c000eca6:	d3 e3                	shl    ebx,cl
c000eca8:	21 d0                	and    eax,edx
c000ecaa:	09 d8                	or     eax,ebx
c000ecac:	e6 92                	out    0x92,al
c000ecae:	5b                   	pop    ebx
c000ecaf:	5e                   	pop    esi
c000ecb0:	c3                   	ret    
c000ecb1:	90                   	nop

c000ecb2 <GDTEntry::setBase(unsigned int)>:
c000ecb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecb6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ecba:	89 c1                	mov    ecx,eax
c000ecbc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecc0:	c1 e9 10             	shr    ecx,0x10
c000ecc3:	c1 e8 18             	shr    eax,0x18
c000ecc6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecc9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000eccc:	c3                   	ret    
c000eccd:	90                   	nop

c000ecce <GDTEntry::setLimit(unsigned int)>:
c000ecce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecd6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecd9:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecdc:	83 e2 f0             	and    edx,0xfffffff0
c000ecdf:	c1 e8 10             	shr    eax,0x10
c000ece2:	83 e0 0f             	and    eax,0xf
c000ece5:	09 d0                	or     eax,edx
c000ece7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ecea:	c3                   	ret    
c000eceb:	90                   	nop

c000ecec <GDT::GDT()>:
c000ecec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecf0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecfa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed00:	90                   	nop
c000ed01:	c3                   	ret    

c000ed02 <GDT::addEntry(GDTEntry)>:
c000ed02:	53                   	push   ebx
c000ed03:	83 ec 0c             	sub    esp,0xc
c000ed06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed0c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ed13:	52                   	push   edx
c000ed14:	50                   	push   eax
c000ed15:	68 34 8a 02 c0       	push   0xc0028a34
c000ed1a:	e8 66 39 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000ed1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ed25:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ed29:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ed2d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ed31:	8d 50 01             	lea    edx,[eax+0x1]
c000ed34:	c1 e0 03             	shl    eax,0x3
c000ed37:	89 13                	mov    DWORD PTR [ebx],edx
c000ed39:	83 c4 18             	add    esp,0x18
c000ed3c:	5b                   	pop    ebx
c000ed3d:	c3                   	ret    

c000ed3e <GDT::getNumberOfEntries()>:
c000ed3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed42:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed44:	c3                   	ret    
c000ed45:	90                   	nop

c000ed46 <GDT::flush()>:
c000ed46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed4a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed4c:	83 c0 04             	add    eax,0x4
c000ed4f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed56:	a3 52 c8 02 c0       	mov    ds:0xc002c852,eax
c000ed5b:	66 89 15 50 c8 02 c0 	mov    WORD PTR ds:0xc002c850,dx
c000ed62:	e9 96 16 ff ff       	jmp    c00003fd <loadGDT>
c000ed67:	90                   	nop

c000ed68 <GDT::setup()>:
c000ed68:	55                   	push   ebp
c000ed69:	57                   	push   edi
c000ed6a:	56                   	push   esi
c000ed6b:	53                   	push   ebx
c000ed6c:	83 ec 3c             	sub    esp,0x3c
c000ed6f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ed73:	6a 00                	push   0x0
c000ed75:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ed79:	53                   	push   ebx
c000ed7a:	e8 33 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed7f:	6a 00                	push   0x0
c000ed81:	53                   	push   ebx
c000ed82:	e8 47 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000ed87:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ed8f:	6a 00                	push   0x0
c000ed91:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ed95:	53                   	push   ebx
c000ed96:	e8 17 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed9b:	68 ff ff ff 00       	push   0xffffff
c000eda0:	53                   	push   ebx
c000eda1:	e8 28 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000eda6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edaa:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edaf:	0d 00 9a c0 00       	or     eax,0xc09a00
c000edb4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edb8:	83 c4 20             	add    esp,0x20
c000edbb:	6a 00                	push   0x0
c000edbd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000edc1:	53                   	push   ebx
c000edc2:	e8 eb fe ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000edc7:	68 ff ff ff 00       	push   0xffffff
c000edcc:	53                   	push   ebx
c000edcd:	e8 fc fe ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000edd2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edd6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edda:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000edde:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ede2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ede6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edeb:	0d 00 92 c0 00       	or     eax,0xc09200
c000edf0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edf4:	89 d8                	mov    eax,ebx
c000edf6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000edfa:	80 cc 60             	or     ah,0x60
c000edfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee01:	83 c4 0c             	add    esp,0xc
c000ee04:	89 f8                	mov    eax,edi
c000ee06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee0a:	80 cc 60             	or     ah,0x60
c000ee0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee11:	89 c7                	mov    edi,eax
c000ee13:	55                   	push   ebp
c000ee14:	e8 e9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee19:	83 c4 0c             	add    esp,0xc
c000ee1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee20:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee24:	55                   	push   ebp
c000ee25:	e8 d8 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee2a:	83 c4 0c             	add    esp,0xc
c000ee2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee35:	55                   	push   ebp
c000ee36:	e8 c7 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee3b:	83 c4 0c             	add    esp,0xc
c000ee3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee46:	53                   	push   ebx
c000ee47:	51                   	push   ecx
c000ee48:	55                   	push   ebp
c000ee49:	e8 b4 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee4e:	83 c4 0c             	add    esp,0xc
c000ee51:	57                   	push   edi
c000ee52:	56                   	push   esi
c000ee53:	55                   	push   ebp
c000ee54:	e8 a9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee59:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee5c:	e8 e5 fe ff ff       	call   c000ed46 <GDT::flush()>
c000ee61:	83 c4 4c             	add    esp,0x4c
c000ee64:	5b                   	pop    ebx
c000ee65:	5e                   	pop    esi
c000ee66:	5f                   	pop    edi
c000ee67:	5d                   	pop    ebp
c000ee68:	c3                   	ret    

c000ee69 <idleFunction(void*)>:
c000ee69:	53                   	push   ebx
c000ee6a:	83 ec 08             	sub    esp,0x8
c000ee6d:	e8 be dd 00 00       	call   c001cc30 <unlockScheduler()>
c000ee72:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c000ee77:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ee7d:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ee84:	74 3c                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee86:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee8d:	74 33                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee8f:	31 db                	xor    ebx,ebx
c000ee91:	52                   	push   edx
c000ee92:	52                   	push   edx
c000ee93:	68 e1 00 00 00       	push   0xe1
c000ee98:	50                   	push   eax
c000ee99:	e8 de fb ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c000ee9e:	53                   	push   ebx
c000ee9f:	83 e0 02             	and    eax,0x2
c000eea2:	50                   	push   eax
c000eea3:	68 e1 00 00 00       	push   0xe1
c000eea8:	ff 35 48 c8 02 c0    	push   DWORD PTR ds:0xc002c848
c000eeae:	e8 f5 fb ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eeb3:	83 c4 20             	add    esp,0x20
c000eeb6:	e8 79 13 ff ff       	call   c0000234 <doTPAUSE>
c000eebb:	e8 00 81 01 00       	call   c0026fc0 <idleCommon()>
c000eec0:	eb f4                	jmp    c000eeb6 <idleFunction(void*)+0x4d>
c000eec2:	fb                   	sti    
c000eec3:	f4                   	hlt    
c000eec4:	e8 f7 80 01 00       	call   c0026fc0 <idleCommon()>
c000eec9:	eb f7                	jmp    c000eec2 <idleFunction(void*)+0x59>
c000eecb:	90                   	nop

c000eecc <IDTEntry::IDTEntry(bool)>:
c000eecc:	83 ec 04             	sub    esp,0x4
c000eecf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eed3:	88 04 24             	mov    BYTE PTR [esp],al
c000eed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeda:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeec:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeef:	83 e2 f0             	and    edx,0xfffffff0
c000eef2:	83 ca 0e             	or     edx,0xe
c000eef5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eefc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeff:	83 e2 ef             	and    edx,0xffffffef
c000ef02:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef05:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ef09:	74 04                	je     c000ef0f <IDTEntry::IDTEntry(bool)+0x43>
c000ef0b:	b2 03                	mov    dl,0x3
c000ef0d:	eb 02                	jmp    c000ef11 <IDTEntry::IDTEntry(bool)+0x45>
c000ef0f:	b2 00                	mov    dl,0x0
c000ef11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef15:	83 e2 03             	and    edx,0x3
c000ef18:	88 d1                	mov    cl,dl
c000ef1a:	c1 e1 05             	shl    ecx,0x5
c000ef1d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef20:	83 e2 9f             	and    edx,0xffffff9f
c000ef23:	09 ca                	or     edx,ecx
c000ef25:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef2c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef2f:	83 ca 80             	or     edx,0xffffff80
c000ef32:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef35:	90                   	nop
c000ef36:	83 c4 04             	add    esp,0x4
c000ef39:	c3                   	ret    

c000ef3a <IDTEntry::setOffset(unsigned int)>:
c000ef3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef42:	66 89 02             	mov    WORD PTR [edx],ax
c000ef45:	c1 e8 10             	shr    eax,0x10
c000ef48:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef4c:	c3                   	ret    
c000ef4d:	90                   	nop

c000ef4e <IDT::IDT()>:
c000ef4e:	90                   	nop
c000ef4f:	c3                   	ret    

c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef54:	83 c0 30             	add    eax,0x30
c000ef57:	c3                   	ret    

c000ef58 <IDT::addEntry(IDTEntry, int)>:
c000ef58:	53                   	push   ebx
c000ef59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef69:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef6c:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef70:	5b                   	pop    ebx
c000ef71:	c3                   	ret    

c000ef72 <IDT::addEntry(int, void (*)(), bool)>:
c000ef72:	53                   	push   ebx
c000ef73:	83 ec 10             	sub    esp,0x10
c000ef76:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef7b:	50                   	push   eax
c000ef7c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef80:	53                   	push   ebx
c000ef81:	e8 46 ff ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000ef86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef8a:	53                   	push   ebx
c000ef8b:	e8 aa ff ff ff       	call   c000ef3a <IDTEntry::setOffset(unsigned int)>
c000ef90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efa0:	e8 b3 ff ff ff       	call   c000ef58 <IDT::addEntry(IDTEntry, int)>
c000efa5:	83 c4 30             	add    esp,0x30
c000efa8:	5b                   	pop    ebx
c000efa9:	c3                   	ret    

c000efaa <IDT::flush()>:
c000efaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efae:	66 c7 05 58 c8 02 c0 ff 07 	mov    WORD PTR ds:0xc002c858,0x7ff
c000efb7:	a3 5a c8 02 c0       	mov    ds:0xc002c85a,eax
c000efbc:	0f 01 1d 58 c8 02 c0 	lidtd  ds:0xc002c858
c000efc3:	c3                   	ret    

c000efc4 <IDT::setup()>:
c000efc4:	57                   	push   edi
c000efc5:	56                   	push   esi
c000efc6:	53                   	push   ebx
c000efc7:	83 ec 10             	sub    esp,0x10
c000efca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efce:	6a 00                	push   0x0
c000efd0:	68 1d 04 00 c0       	push   0xc000041d
c000efd5:	6a 00                	push   0x0
c000efd7:	53                   	push   ebx
c000efd8:	e8 95 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efdd:	6a 00                	push   0x0
c000efdf:	68 2d 04 00 c0       	push   0xc000042d
c000efe4:	6a 01                	push   0x1
c000efe6:	53                   	push   ebx
c000efe7:	e8 86 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efec:	83 c4 20             	add    esp,0x20
c000efef:	6a 00                	push   0x0
c000eff1:	68 37 04 00 c0       	push   0xc0000437
c000eff6:	6a 02                	push   0x2
c000eff8:	53                   	push   ebx
c000eff9:	e8 74 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000effe:	6a 00                	push   0x0
c000f000:	68 41 04 00 c0       	push   0xc0000441
c000f005:	6a 03                	push   0x3
c000f007:	53                   	push   ebx
c000f008:	e8 65 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f00d:	83 c4 20             	add    esp,0x20
c000f010:	6a 00                	push   0x0
c000f012:	68 4b 04 00 c0       	push   0xc000044b
c000f017:	6a 04                	push   0x4
c000f019:	53                   	push   ebx
c000f01a:	e8 53 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f01f:	6a 00                	push   0x0
c000f021:	68 55 04 00 c0       	push   0xc0000455
c000f026:	6a 05                	push   0x5
c000f028:	53                   	push   ebx
c000f029:	e8 44 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f02e:	83 c4 20             	add    esp,0x20
c000f031:	6a 00                	push   0x0
c000f033:	68 5f 04 00 c0       	push   0xc000045f
c000f038:	6a 06                	push   0x6
c000f03a:	53                   	push   ebx
c000f03b:	e8 32 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f040:	6a 00                	push   0x0
c000f042:	68 69 04 00 c0       	push   0xc0000469
c000f047:	6a 07                	push   0x7
c000f049:	53                   	push   ebx
c000f04a:	e8 23 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f04f:	83 c4 20             	add    esp,0x20
c000f052:	6a 00                	push   0x0
c000f054:	68 73 04 00 c0       	push   0xc0000473
c000f059:	6a 08                	push   0x8
c000f05b:	53                   	push   ebx
c000f05c:	e8 11 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f061:	6a 00                	push   0x0
c000f063:	68 7b 04 00 c0       	push   0xc000047b
c000f068:	6a 09                	push   0x9
c000f06a:	53                   	push   ebx
c000f06b:	e8 02 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f070:	83 c4 20             	add    esp,0x20
c000f073:	6a 00                	push   0x0
c000f075:	68 85 04 00 c0       	push   0xc0000485
c000f07a:	6a 0a                	push   0xa
c000f07c:	53                   	push   ebx
c000f07d:	e8 f0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f082:	6a 00                	push   0x0
c000f084:	68 8d 04 00 c0       	push   0xc000048d
c000f089:	6a 0b                	push   0xb
c000f08b:	53                   	push   ebx
c000f08c:	e8 e1 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f091:	83 c4 20             	add    esp,0x20
c000f094:	6a 00                	push   0x0
c000f096:	68 95 04 00 c0       	push   0xc0000495
c000f09b:	6a 0c                	push   0xc
c000f09d:	53                   	push   ebx
c000f09e:	e8 cf fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0a3:	6a 00                	push   0x0
c000f0a5:	68 9d 04 00 c0       	push   0xc000049d
c000f0aa:	6a 0d                	push   0xd
c000f0ac:	53                   	push   ebx
c000f0ad:	e8 c0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0b2:	83 c4 20             	add    esp,0x20
c000f0b5:	6a 00                	push   0x0
c000f0b7:	68 a5 04 00 c0       	push   0xc00004a5
c000f0bc:	6a 0e                	push   0xe
c000f0be:	53                   	push   ebx
c000f0bf:	e8 ae fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0c4:	6a 00                	push   0x0
c000f0c6:	68 ad 04 00 c0       	push   0xc00004ad
c000f0cb:	6a 0f                	push   0xf
c000f0cd:	53                   	push   ebx
c000f0ce:	e8 9f fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0d3:	83 c4 20             	add    esp,0x20
c000f0d6:	6a 00                	push   0x0
c000f0d8:	68 b7 04 00 c0       	push   0xc00004b7
c000f0dd:	6a 10                	push   0x10
c000f0df:	53                   	push   ebx
c000f0e0:	e8 8d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0e5:	6a 00                	push   0x0
c000f0e7:	68 c1 04 00 c0       	push   0xc00004c1
c000f0ec:	6a 11                	push   0x11
c000f0ee:	53                   	push   ebx
c000f0ef:	e8 7e fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0f4:	83 c4 20             	add    esp,0x20
c000f0f7:	6a 00                	push   0x0
c000f0f9:	68 cb 04 00 c0       	push   0xc00004cb
c000f0fe:	6a 12                	push   0x12
c000f100:	53                   	push   ebx
c000f101:	e8 6c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f106:	6a 01                	push   0x1
c000f108:	68 65 05 00 c0       	push   0xc0000565
c000f10d:	6a 60                	push   0x60
c000f10f:	53                   	push   ebx
c000f110:	e8 5d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f115:	83 c4 20             	add    esp,0x20
c000f118:	6a 00                	push   0x0
c000f11a:	68 6c 05 00 c0       	push   0xc000056c
c000f11f:	6a 20                	push   0x20
c000f121:	53                   	push   ebx
c000f122:	e8 4b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f127:	6a 00                	push   0x0
c000f129:	68 57 05 00 c0       	push   0xc0000557
c000f12e:	6a 21                	push   0x21
c000f130:	53                   	push   ebx
c000f131:	e8 3c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f136:	83 c4 20             	add    esp,0x20
c000f139:	6a 00                	push   0x0
c000f13b:	68 5e 05 00 c0       	push   0xc000055e
c000f140:	6a 22                	push   0x22
c000f142:	53                   	push   ebx
c000f143:	e8 2a fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f148:	6a 00                	push   0x0
c000f14a:	68 d5 04 00 c0       	push   0xc00004d5
c000f14f:	6a 23                	push   0x23
c000f151:	53                   	push   ebx
c000f152:	e8 1b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f157:	83 c4 20             	add    esp,0x20
c000f15a:	6a 00                	push   0x0
c000f15c:	68 df 04 00 c0       	push   0xc00004df
c000f161:	6a 24                	push   0x24
c000f163:	53                   	push   ebx
c000f164:	e8 09 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f169:	6a 00                	push   0x0
c000f16b:	68 e9 04 00 c0       	push   0xc00004e9
c000f170:	6a 25                	push   0x25
c000f172:	53                   	push   ebx
c000f173:	e8 fa fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f178:	83 c4 20             	add    esp,0x20
c000f17b:	6a 00                	push   0x0
c000f17d:	68 f3 04 00 c0       	push   0xc00004f3
c000f182:	6a 26                	push   0x26
c000f184:	53                   	push   ebx
c000f185:	e8 e8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f18a:	6a 00                	push   0x0
c000f18c:	68 fd 04 00 c0       	push   0xc00004fd
c000f191:	6a 27                	push   0x27
c000f193:	53                   	push   ebx
c000f194:	e8 d9 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f199:	83 c4 20             	add    esp,0x20
c000f19c:	6a 00                	push   0x0
c000f19e:	68 07 05 00 c0       	push   0xc0000507
c000f1a3:	6a 28                	push   0x28
c000f1a5:	53                   	push   ebx
c000f1a6:	e8 c7 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ab:	6a 00                	push   0x0
c000f1ad:	68 11 05 00 c0       	push   0xc0000511
c000f1b2:	6a 29                	push   0x29
c000f1b4:	53                   	push   ebx
c000f1b5:	e8 b8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ba:	83 c4 20             	add    esp,0x20
c000f1bd:	6a 00                	push   0x0
c000f1bf:	68 1b 05 00 c0       	push   0xc000051b
c000f1c4:	6a 2a                	push   0x2a
c000f1c6:	53                   	push   ebx
c000f1c7:	e8 a6 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1cc:	6a 00                	push   0x0
c000f1ce:	68 25 05 00 c0       	push   0xc0000525
c000f1d3:	6a 2b                	push   0x2b
c000f1d5:	53                   	push   ebx
c000f1d6:	e8 97 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1db:	83 c4 20             	add    esp,0x20
c000f1de:	6a 00                	push   0x0
c000f1e0:	68 2f 05 00 c0       	push   0xc000052f
c000f1e5:	6a 2c                	push   0x2c
c000f1e7:	53                   	push   ebx
c000f1e8:	e8 85 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ed:	6a 00                	push   0x0
c000f1ef:	68 39 05 00 c0       	push   0xc0000539
c000f1f4:	6a 2d                	push   0x2d
c000f1f6:	53                   	push   ebx
c000f1f7:	e8 76 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1fc:	83 c4 20             	add    esp,0x20
c000f1ff:	6a 00                	push   0x0
c000f201:	68 43 05 00 c0       	push   0xc0000543
c000f206:	6a 2e                	push   0x2e
c000f208:	53                   	push   ebx
c000f209:	e8 64 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f20e:	6a 00                	push   0x0
c000f210:	68 4d 05 00 c0       	push   0xc000054d
c000f215:	6a 2f                	push   0x2f
c000f217:	53                   	push   ebx
c000f218:	e8 55 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f21d:	83 c4 20             	add    esp,0x20
c000f220:	6a 00                	push   0x0
c000f222:	68 a2 05 00 c0       	push   0xc00005a2
c000f227:	6a 30                	push   0x30
c000f229:	53                   	push   ebx
c000f22a:	e8 43 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f22f:	6a 00                	push   0x0
c000f231:	68 ac 05 00 c0       	push   0xc00005ac
c000f236:	6a 31                	push   0x31
c000f238:	53                   	push   ebx
c000f239:	e8 34 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f23e:	83 c4 20             	add    esp,0x20
c000f241:	6a 00                	push   0x0
c000f243:	68 b6 05 00 c0       	push   0xc00005b6
c000f248:	6a 32                	push   0x32
c000f24a:	53                   	push   ebx
c000f24b:	e8 22 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f250:	6a 00                	push   0x0
c000f252:	68 c0 05 00 c0       	push   0xc00005c0
c000f257:	6a 33                	push   0x33
c000f259:	53                   	push   ebx
c000f25a:	e8 13 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f25f:	83 c4 20             	add    esp,0x20
c000f262:	6a 00                	push   0x0
c000f264:	68 ca 05 00 c0       	push   0xc00005ca
c000f269:	6a 34                	push   0x34
c000f26b:	53                   	push   ebx
c000f26c:	e8 01 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f271:	6a 00                	push   0x0
c000f273:	68 d4 05 00 c0       	push   0xc00005d4
c000f278:	6a 35                	push   0x35
c000f27a:	53                   	push   ebx
c000f27b:	e8 f2 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f280:	83 c4 20             	add    esp,0x20
c000f283:	6a 00                	push   0x0
c000f285:	68 de 05 00 c0       	push   0xc00005de
c000f28a:	6a 36                	push   0x36
c000f28c:	53                   	push   ebx
c000f28d:	e8 e0 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f292:	6a 00                	push   0x0
c000f294:	68 e8 05 00 c0       	push   0xc00005e8
c000f299:	6a 37                	push   0x37
c000f29b:	53                   	push   ebx
c000f29c:	e8 d1 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f2a1:	83 c4 20             	add    esp,0x20
c000f2a4:	e8 7c 25 00 00       	call   c0011825 <Virt::getAKernelVAS()>
c000f2a9:	52                   	push   edx
c000f2aa:	6a 03                	push   0x3
c000f2ac:	6a 02                	push   0x2
c000f2ae:	50                   	push   eax
c000f2af:	e8 ac 2b 00 00       	call   c0011e60 <VAS::allocatePages(int, int)>
c000f2b4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2bb:	89 c6                	mov    esi,eax
c000f2bd:	e8 12 02 00 00       	call   c000f4d4 <malloc>
c000f2c2:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2cb:	89 c7                	mov    edi,eax
c000f2cd:	e8 f4 1c 00 00       	call   c0010fc6 <TSS::TSS()>
c000f2d2:	83 c4 0c             	add    esp,0xc
c000f2d5:	68 73 04 00 c0       	push   0xc0000473
c000f2da:	56                   	push   esi
c000f2db:	57                   	push   edi
c000f2dc:	e8 25 1d 00 00       	call   c0011006 <TSS::setup(unsigned long, unsigned long)>
c000f2e1:	59                   	pop    ecx
c000f2e2:	89 c6                	mov    esi,eax
c000f2e4:	5f                   	pop    edi
c000f2e5:	6a 00                	push   0x0
c000f2e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2eb:	50                   	push   eax
c000f2ec:	e8 db fb ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000f2f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2f5:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2fa:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f301:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f307:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f30b:	80 ce 05             	or     dh,0x5
c000f30e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f311:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f315:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f319:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f31c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f31f:	e8 86 fc ff ff       	call   c000efaa <IDT::flush()>
c000f324:	83 c4 20             	add    esp,0x20
c000f327:	5b                   	pop    ebx
c000f328:	5e                   	pop    esi
c000f329:	5f                   	pop    edi
c000f32a:	c3                   	ret    

c000f32b <sbrk>:
c000f32b:	55                   	push   ebp
c000f32c:	57                   	push   edi
c000f32d:	56                   	push   esi
c000f32e:	53                   	push   ebx
c000f32f:	83 ec 1c             	sub    esp,0x1c
c000f332:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f336:	85 c0                	test   eax,eax
c000f338:	74 3e                	je     c000f378 <sbrk+0x4d>
c000f33a:	78 43                	js     c000f37f <sbrk+0x54>
c000f33c:	8b 15 48 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c848
c000f342:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f348:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f34e:	83 e2 01             	and    edx,0x1
c000f351:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f355:	8b 0d 6c b7 02 c0    	mov    ecx,DWORD PTR ds:0xc002b76c
c000f35b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f35f:	05 ff 0f 00 00       	add    eax,0xfff
c000f364:	89 c2                	mov    edx,eax
c000f366:	78 2f                	js     c000f397 <sbrk+0x6c>
c000f368:	c1 fa 0c             	sar    edx,0xc
c000f36b:	89 d7                	mov    edi,edx
c000f36d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f371:	be 00 00 00 00       	mov    esi,0x0
c000f376:	eb 36                	jmp    c000f3ae <sbrk+0x83>
c000f378:	a1 6c b7 02 c0       	mov    eax,ds:0xc002b76c
c000f37d:	eb 74                	jmp    c000f3f3 <sbrk+0xc8>
c000f37f:	83 ec 08             	sub    esp,0x8
c000f382:	50                   	push   eax
c000f383:	68 50 8a 02 c0       	push   0xc0028a50
c000f388:	e8 f8 32 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000f38d:	83 c4 10             	add    esp,0x10
c000f390:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f395:	eb 5c                	jmp    c000f3f3 <sbrk+0xc8>
c000f397:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f39d:	eb c9                	jmp    c000f368 <sbrk+0x3d>
c000f39f:	81 05 6c b7 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002b76c,0x1000
c000f3a9:	46                   	inc    esi
c000f3aa:	39 f7                	cmp    edi,esi
c000f3ac:	74 34                	je     c000f3e2 <sbrk+0xb7>
c000f3ae:	e8 72 24 00 00       	call   c0011825 <Virt::getAKernelVAS()>
c000f3b3:	89 c3                	mov    ebx,eax
c000f3b5:	8b 2d 6c b7 02 c0    	mov    ebp,DWORD PTR ds:0xc002b76c
c000f3bb:	e8 ec 05 00 00       	call   c000f9ac <Phys::allocatePage()>
c000f3c0:	68 01 04 00 00       	push   0x401
c000f3c5:	55                   	push   ebp
c000f3c6:	50                   	push   eax
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 93 29 00 00       	call   c0011d60 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3cd:	83 c4 10             	add    esp,0x10
c000f3d0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3d5:	74 c8                	je     c000f39f <sbrk+0x74>
c000f3d7:	8b 1d 6c b7 02 c0    	mov    ebx,DWORD PTR ds:0xc002b76c
c000f3dd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f3e0:	eb bd                	jmp    c000f39f <sbrk+0x74>
c000f3e2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3e7:	75 12                	jne    c000f3fb <sbrk+0xd0>
c000f3e9:	0f 20 d8             	mov    eax,cr3
c000f3ec:	0f 22 d8             	mov    cr3,eax
c000f3ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3f3:	83 c4 1c             	add    esp,0x1c
c000f3f6:	5b                   	pop    ebx
c000f3f7:	5e                   	pop    esi
c000f3f8:	5f                   	pop    edi
c000f3f9:	5d                   	pop    ebp
c000f3fa:	c3                   	ret    
c000f3fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f3ff:	89 cb                	mov    ebx,ecx
c000f401:	c1 eb 0a             	shr    ebx,0xa
c000f404:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f40a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f410:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f414:	c1 e0 0c             	shl    eax,0xc
c000f417:	01 c8                	add    eax,ecx
c000f419:	c1 e8 0a             	shr    eax,0xa
c000f41c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f421:	2d 00 00 40 00       	sub    eax,0x400000
c000f426:	39 c3                	cmp    ebx,eax
c000f428:	77 c5                	ja     c000f3ef <sbrk+0xc4>
c000f42a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f42d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f433:	39 d8                	cmp    eax,ebx
c000f435:	73 f3                	jae    c000f42a <sbrk+0xff>
c000f437:	eb b6                	jmp    c000f3ef <sbrk+0xc4>

c000f439 <mmap>:
c000f439:	83 ec 18             	sub    esp,0x18
c000f43c:	68 80 8a 02 c0       	push   0xc0028a80
c000f441:	e8 59 a3 00 00       	call   c001979f <Krnl::panic(char const*)>
c000f446:	b8 00 00 00 00       	mov    eax,0x0
c000f44b:	83 c4 1c             	add    esp,0x1c
c000f44e:	c3                   	ret    

c000f44f <munmap>:
c000f44f:	83 ec 18             	sub    esp,0x18
c000f452:	68 85 8a 02 c0       	push   0xc0028a85
c000f457:	e8 43 a3 00 00       	call   c001979f <Krnl::panic(char const*)>
c000f45c:	b8 00 00 00 00       	mov    eax,0x0
c000f461:	83 c4 1c             	add    esp,0x1c
c000f464:	c3                   	ret    

c000f465 <liballoc_lock()>:
c000f465:	83 ec 0c             	sub    esp,0xc
c000f468:	e8 c1 d7 00 00       	call   c001cc2e <lockScheduler()>
c000f46d:	b8 00 00 00 00       	mov    eax,0x0
c000f472:	83 c4 0c             	add    esp,0xc
c000f475:	c3                   	ret    

c000f476 <liballoc_unlock()>:
c000f476:	83 ec 0c             	sub    esp,0xc
c000f479:	e8 b2 d7 00 00       	call   c001cc30 <unlockScheduler()>
c000f47e:	b8 00 00 00 00       	mov    eax,0x0
c000f483:	83 c4 0c             	add    esp,0xc
c000f486:	c3                   	ret    

c000f487 <liballoc_alloc(int)>:
c000f487:	83 ec 0c             	sub    esp,0xc
c000f48a:	e8 96 23 00 00       	call   c0011825 <Virt::getAKernelVAS()>
c000f48f:	83 ec 04             	sub    esp,0x4
c000f492:	6a 01                	push   0x1
c000f494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f498:	50                   	push   eax
c000f499:	e8 c2 29 00 00       	call   c0011e60 <VAS::allocatePages(int, int)>
c000f49e:	83 c4 1c             	add    esp,0x1c
c000f4a1:	c3                   	ret    

c000f4a2 <liballoc_free(void*, int)>:
c000f4a2:	83 ec 0c             	sub    esp,0xc
c000f4a5:	e8 7b 23 00 00       	call   c0011825 <Virt::getAKernelVAS()>
c000f4aa:	83 ec 08             	sub    esp,0x8
c000f4ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4b1:	50                   	push   eax
c000f4b2:	e8 65 26 00 00       	call   c0011b1c <VAS::freeAllocatedPages(unsigned long)>
c000f4b7:	b8 00 00 00 00       	mov    eax,0x0
c000f4bc:	83 c4 1c             	add    esp,0x1c
c000f4bf:	c3                   	ret    

c000f4c0 <realloc>:
c000f4c0:	83 ec 14             	sub    esp,0x14
c000f4c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4cb:	e8 34 1f ff ff       	call   c0001404 <dlrealloc>
c000f4d0:	83 c4 1c             	add    esp,0x1c
c000f4d3:	c3                   	ret    

c000f4d4 <malloc>:
c000f4d4:	83 ec 18             	sub    esp,0x18
c000f4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4db:	e8 e7 19 ff ff       	call   c0000ec7 <dlmalloc>
c000f4e0:	83 c4 1c             	add    esp,0x1c
c000f4e3:	c3                   	ret    

c000f4e4 <free>:
c000f4e4:	83 ec 18             	sub    esp,0x18
c000f4e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4eb:	e8 7c 16 ff ff       	call   c0000b6c <dlfree>
c000f4f0:	83 c4 1c             	add    esp,0x1c
c000f4f3:	c3                   	ret    

c000f4f4 <rfree>:
c000f4f4:	83 ec 18             	sub    esp,0x18
c000f4f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4fb:	e8 6c 16 ff ff       	call   c0000b6c <dlfree>
c000f500:	83 c4 1c             	add    esp,0x1c
c000f503:	c3                   	ret    

c000f504 <calloc>:
c000f504:	56                   	push   esi
c000f505:	53                   	push   ebx
c000f506:	83 ec 10             	sub    esp,0x10
c000f509:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f50d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f512:	53                   	push   ebx
c000f513:	e8 bc ff ff ff       	call   c000f4d4 <malloc>
c000f518:	89 c6                	mov    esi,eax
c000f51a:	83 c4 0c             	add    esp,0xc
c000f51d:	53                   	push   ebx
c000f51e:	6a 00                	push   0x0
c000f520:	50                   	push   eax
c000f521:	e8 65 11 ff ff       	call   c000068b <memset>
c000f526:	89 f0                	mov    eax,esi
c000f528:	83 c4 14             	add    esp,0x14
c000f52b:	5b                   	pop    ebx
c000f52c:	5e                   	pop    esi
c000f52d:	c3                   	ret    

c000f52e <hwTextMode_loadInData(VgaText*)>:
c000f52e:	55                   	push   ebp
c000f52f:	a1 80 b7 02 c0       	mov    eax,ds:0xc002b780
c000f534:	57                   	push   edi
c000f535:	56                   	push   esi
c000f536:	53                   	push   ebx
c000f537:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f53b:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f541:	85 d2                	test   edx,edx
c000f543:	7e 2f                	jle    c000f574 <hwTextMode_loadInData(VgaText*)+0x46>
c000f545:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f54b:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f54e:	31 f6                	xor    esi,esi
c000f550:	29 fd                	sub    ebp,edi
c000f552:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f555:	31 c0                	xor    eax,eax
c000f557:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f55b:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f55f:	40                   	inc    eax
c000f560:	83 f8 50             	cmp    eax,0x50
c000f563:	75 f2                	jne    c000f557 <hwTextMode_loadInData(VgaText*)+0x29>
c000f565:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f56b:	46                   	inc    esi
c000f56c:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f572:	7f de                	jg     c000f552 <hwTextMode_loadInData(VgaText*)+0x24>
c000f574:	5b                   	pop    ebx
c000f575:	5e                   	pop    esi
c000f576:	5f                   	pop    edi
c000f577:	5d                   	pop    ebp
c000f578:	c3                   	ret    

c000f579 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f579:	57                   	push   edi
c000f57a:	8b 15 80 b7 02 c0    	mov    edx,DWORD PTR ds:0xc002b780
c000f580:	56                   	push   esi
c000f581:	8d b2 a0 00 00 00    	lea    esi,[edx+0xa0]
c000f587:	53                   	push   ebx
c000f588:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f58c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f590:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f596:	8b bb d8 0f 00 00    	mov    edi,DWORD PTR [ebx+0xfd8]
c000f59c:	c1 e0 04             	shl    eax,0x4
c000f59f:	83 e7 0f             	and    edi,0xf
c000f5a2:	0f b6 c0             	movzx  eax,al
c000f5a5:	41                   	inc    ecx
c000f5a6:	09 f8                	or     eax,edi
c000f5a8:	83 c2 02             	add    edx,0x2
c000f5ab:	0f b6 79 ff          	movzx  edi,BYTE PTR [ecx-0x1]
c000f5af:	c1 e0 08             	shl    eax,0x8
c000f5b2:	09 f8                	or     eax,edi
c000f5b4:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f5b8:	39 f2                	cmp    edx,esi
c000f5ba:	75 d4                	jne    c000f590 <hwTextMode_loadInTitle(VgaText*, char*)+0x17>
c000f5bc:	5b                   	pop    ebx
c000f5bd:	5e                   	pop    esi
c000f5be:	5f                   	pop    edi
c000f5bf:	c3                   	ret    

c000f5c0 <hwTextMode_scrollScreen(VgaText*)>:
c000f5c0:	55                   	push   ebp
c000f5c1:	bd 02 00 00 00       	mov    ebp,0x2
c000f5c6:	57                   	push   edi
c000f5c7:	56                   	push   esi
c000f5c8:	53                   	push   ebx
c000f5c9:	83 ec 1c             	sub    esp,0x1c
c000f5cc:	a1 80 b7 02 c0       	mov    eax,ds:0xc002b780
c000f5d1:	05 a0 00 00 00       	add    eax,0xa0
c000f5d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f5da:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f5de:	31 c0                	xor    eax,eax
c000f5e0:	eb 0b                	jmp    c000f5ed <hwTextMode_scrollScreen(VgaText*)+0x2d>
c000f5e2:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f5e8:	74 57                	je     c000f641 <hwTextMode_scrollScreen(VgaText*)+0x81>
c000f5ea:	43                   	inc    ebx
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f5f3:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f5f9:	88 13                	mov    BYTE PTR [ebx],dl
c000f5fb:	8d 70 01             	lea    esi,[eax+0x1]
c000f5fe:	83 fd 18             	cmp    ebp,0x18
c000f601:	75 df                	jne    c000f5e2 <hwTextMode_scrollScreen(VgaText*)+0x22>
c000f603:	a8 01                	test   al,0x1
c000f605:	75 13                	jne    c000f61a <hwTextMode_scrollScreen(VgaText*)+0x5a>
c000f607:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f60a:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f610:	75 d8                	jne    c000f5ea <hwTextMode_scrollScreen(VgaText*)+0x2a>
c000f612:	83 c4 1c             	add    esp,0x1c
c000f615:	5b                   	pop    ebx
c000f616:	5e                   	pop    esi
c000f617:	5f                   	pop    edi
c000f618:	5d                   	pop    ebp
c000f619:	c3                   	ret    
c000f61a:	83 ec 08             	sub    esp,0x8
c000f61d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f621:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f628:	50                   	push   eax
c000f629:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f62d:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f634:	50                   	push   eax
c000f635:	e8 b6 0b 00 00       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c000f63a:	83 c4 10             	add    esp,0x10
c000f63d:	88 07                	mov    BYTE PTR [edi],al
c000f63f:	eb c9                	jmp    c000f60a <hwTextMode_scrollScreen(VgaText*)+0x4a>
c000f641:	45                   	inc    ebp
c000f642:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f64a:	eb 8e                	jmp    c000f5da <hwTextMode_scrollScreen(VgaText*)+0x1a>

c000f64c <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f64c:	56                   	push   esi
c000f64d:	53                   	push   ebx
c000f64e:	83 ec 0c             	sub    esp,0xc
c000f651:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f655:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f659:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f65e:	50                   	push   eax
c000f65f:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f664:	50                   	push   eax
c000f665:	e8 86 0b 00 00       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c000f66a:	5a                   	pop    edx
c000f66b:	0f b6 c0             	movzx  eax,al
c000f66e:	59                   	pop    ecx
c000f66f:	50                   	push   eax
c000f670:	89 f0                	mov    eax,esi
c000f672:	0f be f0             	movsx  esi,al
c000f675:	56                   	push   esi
c000f676:	e8 2f 0c 00 00       	call   c00102aa <VgaText::combineCharAndColour(char, unsigned char)>
c000f67b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f67f:	ba 19 00 00 00       	mov    edx,0x19
c000f684:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f68a:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f68d:	8d 14 92             	lea    edx,[edx+edx*4]
c000f690:	c1 e1 04             	shl    ecx,0x4
c000f693:	c1 e2 04             	shl    edx,0x4
c000f696:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f69a:	01 ca                	add    edx,ecx
c000f69c:	8b 0d 80 b7 02 c0    	mov    ecx,DWORD PTR ds:0xc002b780
c000f6a2:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000f6a6:	83 c4 14             	add    esp,0x14
c000f6a9:	5b                   	pop    ebx
c000f6aa:	5e                   	pop    esi
c000f6ab:	c3                   	ret    

c000f6ac <hwTextMode_showCursor(VgaText*, bool)>:
c000f6ac:	56                   	push   esi
c000f6ad:	53                   	push   ebx
c000f6ae:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f6b3:	74 38                	je     c000f6ed <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f6b5:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f6ba:	b0 0a                	mov    al,0xa
c000f6bc:	89 da                	mov    edx,ebx
c000f6be:	ee                   	out    dx,al
c000f6bf:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f6c4:	89 ca                	mov    edx,ecx
c000f6c6:	ec                   	in     al,dx
c000f6c7:	b2 0f                	mov    dl,0xf
c000f6c9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f6cd:	83 e0 c0             	and    eax,0xffffffc0
c000f6d0:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f6d6:	09 d0                	or     eax,edx
c000f6d8:	89 ca                	mov    edx,ecx
c000f6da:	ee                   	out    dx,al
c000f6db:	b0 0b                	mov    al,0xb
c000f6dd:	89 da                	mov    edx,ebx
c000f6df:	ee                   	out    dx,al
c000f6e0:	89 ca                	mov    edx,ecx
c000f6e2:	ec                   	in     al,dx
c000f6e3:	83 e0 e0             	and    eax,0xffffffe0
c000f6e6:	83 c8 0f             	or     eax,0xf
c000f6e9:	ee                   	out    dx,al
c000f6ea:	5b                   	pop    ebx
c000f6eb:	5e                   	pop    esi
c000f6ec:	c3                   	ret    
c000f6ed:	b0 0a                	mov    al,0xa
c000f6ef:	ba d4 03 00 00       	mov    edx,0x3d4
c000f6f4:	ee                   	out    dx,al
c000f6f5:	b0 20                	mov    al,0x20
c000f6f7:	ba d5 03 00 00       	mov    edx,0x3d5
c000f6fc:	ee                   	out    dx,al
c000f6fd:	5b                   	pop    ebx
c000f6fe:	5e                   	pop    esi
c000f6ff:	c3                   	ret    

c000f700 <hwTextMode_update(VgaText*)>:
c000f700:	c3                   	ret    

c000f701 <hwTextMode_updateCursor(VgaText*)>:
c000f701:	56                   	push   esi
c000f702:	b9 19 00 00 00       	mov    ecx,0x19
c000f707:	53                   	push   ebx
c000f708:	be d4 03 00 00       	mov    esi,0x3d4
c000f70d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f711:	89 f2                	mov    edx,esi
c000f713:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f719:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f71f:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f722:	c1 e1 04             	shl    ecx,0x4
c000f725:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f72b:	b0 0f                	mov    al,0xf
c000f72d:	ee                   	out    dx,al
c000f72e:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f733:	88 c8                	mov    al,cl
c000f735:	89 da                	mov    edx,ebx
c000f737:	ee                   	out    dx,al
c000f738:	b0 0e                	mov    al,0xe
c000f73a:	89 f2                	mov    edx,esi
c000f73c:	ee                   	out    dx,al
c000f73d:	89 c8                	mov    eax,ecx
c000f73f:	89 da                	mov    edx,ebx
c000f741:	66 c1 e8 08          	shr    ax,0x8
c000f745:	ee                   	out    dx,al
c000f746:	5b                   	pop    ebx
c000f747:	5e                   	pop    esi
c000f748:	c3                   	ret    

c000f749 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f749:	ba da 03 00 00       	mov    edx,0x3da
c000f74e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f753:	75 18                	jne    c000f76d <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f755:	ec                   	in     al,dx
c000f756:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f75b:	b0 30                	mov    al,0x30
c000f75d:	89 ca                	mov    edx,ecx
c000f75f:	ee                   	out    dx,al
c000f760:	ba c1 03 00 00       	mov    edx,0x3c1
c000f765:	ec                   	in     al,dx
c000f766:	83 c8 08             	or     eax,0x8
c000f769:	89 ca                	mov    edx,ecx
c000f76b:	ee                   	out    dx,al
c000f76c:	c3                   	ret    
c000f76d:	ec                   	in     al,dx
c000f76e:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f773:	b0 30                	mov    al,0x30
c000f775:	89 ca                	mov    edx,ecx
c000f777:	ee                   	out    dx,al
c000f778:	ba c1 03 00 00       	mov    edx,0x3c1
c000f77d:	ec                   	in     al,dx
c000f77e:	83 e0 f7             	and    eax,0xfffffff7
c000f781:	89 ca                	mov    edx,ecx
c000f783:	ee                   	out    dx,al
c000f784:	c3                   	ret    

c000f785 <setupTextMode()>:
c000f785:	a1 10 04 00 00       	mov    eax,ds:0x410
c000f78a:	83 e0 30             	and    eax,0x30
c000f78d:	66 83 f8 30          	cmp    ax,0x30
c000f791:	74 11                	je     c000f7a4 <setupTextMode()+0x1f>
c000f793:	81 2d 80 b7 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002b780,0x8000
c000f79d:	c6 05 e0 c8 02 c0 01 	mov    BYTE PTR ds:0xc002c8e0,0x1
c000f7a4:	66 c7 05 00 00 0b c2 44 02 	mov    WORD PTR ds:0xc20b0000,0x244
c000f7ad:	66 c7 05 02 00 0b c2 02 42 	mov    WORD PTR ds:0xc20b0002,0x4202
c000f7b6:	66 c7 05 04 00 0b c2 44 02 	mov    WORD PTR ds:0xc20b0004,0x244
c000f7bf:	66 c7 05 06 00 0b c2 02 42 	mov    WORD PTR ds:0xc20b0006,0x4202
c000f7c8:	66 c7 05 08 00 0b c2 44 02 	mov    WORD PTR ds:0xc20b0008,0x244
c000f7d1:	66 c7 05 0a 00 0b c2 02 42 	mov    WORD PTR ds:0xc20b000a,0x4202
c000f7da:	eb fe                	jmp    c000f7da <setupTextMode()+0x55>

c000f7dc <kernel_main>:
c000f7dc:	83 ec 0c             	sub    esp,0xc
c000f7df:	e8 66 08 00 00       	call   c001004a <installVgaTextImplementation()>
c000f7e4:	e8 9c ff ff ff       	call   c000f785 <setupTextMode()>

c000f7e9 <Phys::allocateDMA(unsigned long)>:
c000f7e9:	55                   	push   ebp
c000f7ea:	31 d2                	xor    edx,edx
c000f7ec:	57                   	push   edi
c000f7ed:	31 ed                	xor    ebp,ebp
c000f7ef:	56                   	push   esi
c000f7f0:	31 c9                	xor    ecx,ecx
c000f7f2:	53                   	push   ebx
c000f7f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7f7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7fd:	31 c0                	xor    eax,eax
c000f7ff:	c1 ee 0c             	shr    esi,0xc
c000f802:	eb 17                	jmp    c000f81b <Phys::allocateDMA(unsigned long)+0x32>
c000f804:	85 c9                	test   ecx,ecx
c000f806:	75 04                	jne    c000f80c <Phys::allocateDMA(unsigned long)+0x23>
c000f808:	89 d5                	mov    ebp,edx
c000f80a:	89 d0                	mov    eax,edx
c000f80c:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f80f:	39 de                	cmp    esi,ebx
c000f811:	74 20                	je     c000f833 <Phys::allocateDMA(unsigned long)+0x4a>
c000f813:	42                   	inc    edx
c000f814:	89 d9                	mov    ecx,ebx
c000f816:	83 fa 2f             	cmp    edx,0x2f
c000f819:	7f 11                	jg     c000f82c <Phys::allocateDMA(unsigned long)+0x43>
c000f81b:	80 ba a0 c8 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd3760],0x0
c000f822:	74 e0                	je     c000f804 <Phys::allocateDMA(unsigned long)+0x1b>
c000f824:	31 c9                	xor    ecx,ecx
c000f826:	42                   	inc    edx
c000f827:	83 fa 2f             	cmp    edx,0x2f
c000f82a:	7e ef                	jle    c000f81b <Phys::allocateDMA(unsigned long)+0x32>
c000f82c:	5b                   	pop    ebx
c000f82d:	31 c0                	xor    eax,eax
c000f82f:	5e                   	pop    esi
c000f830:	5f                   	pop    edi
c000f831:	5d                   	pop    ebp
c000f832:	c3                   	ret    
c000f833:	8d 14 30             	lea    edx,[eax+esi*1]
c000f836:	89 d7                	mov    edi,edx
c000f838:	4f                   	dec    edi
c000f839:	79 03                	jns    c000f83e <Phys::allocateDMA(unsigned long)+0x55>
c000f83b:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f83e:	c1 ff 04             	sar    edi,0x4
c000f841:	89 c2                	mov    edx,eax
c000f843:	c1 fa 04             	sar    edx,0x4
c000f846:	39 fa                	cmp    edx,edi
c000f848:	75 2f                	jne    c000f879 <Phys::allocateDMA(unsigned long)+0x90>
c000f84a:	85 db                	test   ebx,ebx
c000f84c:	74 1a                	je     c000f868 <Phys::allocateDMA(unsigned long)+0x7f>
c000f84e:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c000f853:	8d 90 a0 c8 02 c0    	lea    edx,[eax-0x3ffd3760]
c000f859:	f7 d6                	not    esi
c000f85b:	29 c6                	sub    esi,eax
c000f85d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f860:	42                   	inc    edx
c000f861:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f864:	39 d9                	cmp    ecx,ebx
c000f866:	7f f5                	jg     c000f85d <Phys::allocateDMA(unsigned long)+0x74>
c000f868:	85 ff                	test   edi,edi
c000f86a:	74 13                	je     c000f87f <Phys::allocateDMA(unsigned long)+0x96>
c000f86c:	5b                   	pop    ebx
c000f86d:	05 50 20 0c 00       	add    eax,0xc2050
c000f872:	5e                   	pop    esi
c000f873:	c1 e0 0c             	shl    eax,0xc
c000f876:	5f                   	pop    edi
c000f877:	5d                   	pop    ebp
c000f878:	c3                   	ret    
c000f879:	89 ea                	mov    edx,ebp
c000f87b:	31 c9                	xor    ecx,ecx
c000f87d:	eb a7                	jmp    c000f826 <Phys::allocateDMA(unsigned long)+0x3d>
c000f87f:	5b                   	pop    ebx
c000f880:	c1 e0 0c             	shl    eax,0xc
c000f883:	5e                   	pop    esi
c000f884:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f889:	5f                   	pop    edi
c000f88a:	5d                   	pop    ebp
c000f88b:	c3                   	ret    

c000f88c <Phys::freeDMA(unsigned long, unsigned long)>:
c000f88c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f894:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f89a:	c1 e9 0c             	shr    ecx,0xc
c000f89d:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f8a2:	76 25                	jbe    c000f8c9 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f8a4:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f8a9:	c1 e8 0c             	shr    eax,0xc
c000f8ac:	8d 50 10             	lea    edx,[eax+0x10]
c000f8af:	85 c9                	test   ecx,ecx
c000f8b1:	74 15                	je     c000f8c8 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f8b3:	8d 82 a0 c8 02 c0    	lea    eax,[edx-0x3ffd3760]
c000f8b9:	8d 94 11 a0 c8 02 c0 	lea    edx,[ecx+edx*1-0x3ffd3760]
c000f8c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8c3:	40                   	inc    eax
c000f8c4:	39 d0                	cmp    eax,edx
c000f8c6:	75 f8                	jne    c000f8c0 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f8c8:	c3                   	ret    
c000f8c9:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8cf:	c1 ea 0c             	shr    edx,0xc
c000f8d2:	eb db                	jmp    c000f8af <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f8d4 <Phys::setPageState(unsigned long, bool)>:
c000f8d4:	56                   	push   esi
c000f8d5:	ba 01 00 00 00       	mov    edx,0x1
c000f8da:	53                   	push   ebx
c000f8db:	8b 35 70 b7 02 c0    	mov    esi,DWORD PTR ds:0xc002b770
c000f8e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8e9:	89 c8                	mov    eax,ecx
c000f8eb:	83 e1 07             	and    ecx,0x7
c000f8ee:	c1 e8 03             	shr    eax,0x3
c000f8f1:	d3 e3                	shl    ebx,cl
c000f8f3:	01 c6                	add    esi,eax
c000f8f5:	d3 e2                	shl    edx,cl
c000f8f7:	f7 d2                	not    edx
c000f8f9:	20 16                	and    BYTE PTR [esi],dl
c000f8fb:	03 05 70 b7 02 c0    	add    eax,DWORD PTR ds:0xc002b770
c000f901:	08 18                	or     BYTE PTR [eax],bl
c000f903:	5b                   	pop    ebx
c000f904:	5e                   	pop    esi
c000f905:	c3                   	ret    

c000f906 <Phys::getPageState(unsigned long)>:
c000f906:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f90a:	8b 15 70 b7 02 c0    	mov    edx,DWORD PTR ds:0xc002b770
c000f910:	89 c8                	mov    eax,ecx
c000f912:	83 e1 07             	and    ecx,0x7
c000f915:	c1 e8 03             	shr    eax,0x3
c000f918:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f91c:	d3 f8                	sar    eax,cl
c000f91e:	83 e0 01             	and    eax,0x1
c000f921:	c3                   	ret    

c000f922 <Phys::freePage(unsigned long)>:
c000f922:	53                   	push   ebx
c000f923:	83 ec 08             	sub    esp,0x8
c000f926:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f92a:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f930:	76 57                	jbe    c000f989 <Phys::freePage(unsigned long)+0x67>
c000f932:	c1 eb 0c             	shr    ebx,0xc
c000f935:	53                   	push   ebx
c000f936:	e8 cb ff ff ff       	call   c000f906 <Phys::getPageState(unsigned long)>
c000f93b:	5a                   	pop    edx
c000f93c:	84 c0                	test   al,al
c000f93e:	74 5b                	je     c000f99b <Phys::freePage(unsigned long)+0x79>
c000f940:	a1 8c c8 02 c0       	mov    eax,ds:0xc002c88c
c000f945:	48                   	dec    eax
c000f946:	a3 8c c8 02 c0       	mov    ds:0xc002c88c,eax
c000f94b:	8d 04 80             	lea    eax,[eax+eax*4]
c000f94e:	8d 04 80             	lea    eax,[eax+eax*4]
c000f951:	c1 e0 02             	shl    eax,0x2
c000f954:	99                   	cdq    
c000f955:	f7 3d 90 c8 02 c0    	idiv   DWORD PTR ds:0xc002c890
c000f95b:	39 05 88 c8 02 c0    	cmp    DWORD PTR ds:0xc002c888,eax
c000f961:	75 13                	jne    c000f976 <Phys::freePage(unsigned long)+0x54>
c000f963:	83 ec 08             	sub    esp,0x8
c000f966:	6a 00                	push   0x0
c000f968:	53                   	push   ebx
c000f969:	e8 66 ff ff ff       	call   c000f8d4 <Phys::setPageState(unsigned long, bool)>
c000f96e:	83 c4 10             	add    esp,0x10
c000f971:	83 c4 08             	add    esp,0x8
c000f974:	5b                   	pop    ebx
c000f975:	c3                   	ret    
c000f976:	83 ec 0c             	sub    esp,0xc
c000f979:	a3 88 c8 02 c0       	mov    ds:0xc002c888,eax
c000f97e:	50                   	push   eax
c000f97f:	e8 6e 0a 00 00       	call   c00103f2 <VgaText::updateRAMUsageDisplay(int)>
c000f984:	83 c4 10             	add    esp,0x10
c000f987:	eb da                	jmp    c000f963 <Phys::freePage(unsigned long)+0x41>
c000f989:	68 00 10 00 00       	push   0x1000
c000f98e:	53                   	push   ebx
c000f98f:	e8 f8 fe ff ff       	call   c000f88c <Phys::freeDMA(unsigned long, unsigned long)>
c000f994:	59                   	pop    ecx
c000f995:	5b                   	pop    ebx
c000f996:	83 c4 08             	add    esp,0x8
c000f999:	5b                   	pop    ebx
c000f99a:	c3                   	ret    
c000f99b:	c7 44 24 10 8c 8a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028a8c
c000f9a3:	83 c4 08             	add    esp,0x8
c000f9a6:	5b                   	pop    ebx
c000f9a7:	e9 f3 9d 00 00       	jmp    c001979f <Krnl::panic(char const*)>

c000f9ac <Phys::allocatePage()>:
c000f9ac:	56                   	push   esi
c000f9ad:	53                   	push   ebx
c000f9ae:	51                   	push   ecx
c000f9af:	8b 35 80 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c880
c000f9b5:	89 f3                	mov    ebx,esi
c000f9b7:	eb 0a                	jmp    c000f9c3 <Phys::allocatePage()+0x17>
c000f9b9:	89 1d 80 c8 02 c0    	mov    DWORD PTR ds:0xc002c880,ebx
c000f9bf:	39 de                	cmp    esi,ebx
c000f9c1:	74 24                	je     c000f9e7 <Phys::allocatePage()+0x3b>
c000f9c3:	53                   	push   ebx
c000f9c4:	e8 3d ff ff ff       	call   c000f906 <Phys::getPageState(unsigned long)>
c000f9c9:	5a                   	pop    edx
c000f9ca:	84 c0                	test   al,al
c000f9cc:	74 5a                	je     c000fa28 <Phys::allocatePage()+0x7c>
c000f9ce:	43                   	inc    ebx
c000f9cf:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f9d5:	75 e2                	jne    c000f9b9 <Phys::allocatePage()+0xd>
c000f9d7:	31 db                	xor    ebx,ebx
c000f9d9:	c7 05 80 c8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c880,0x0
c000f9e3:	39 de                	cmp    esi,ebx
c000f9e5:	75 dc                	jne    c000f9c3 <Phys::allocatePage()+0x17>
c000f9e7:	83 ec 0c             	sub    esp,0xc
c000f9ea:	68 a2 8a 02 c0       	push   0xc0028aa2
c000f9ef:	e8 91 2c 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000f9f4:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000f9fb:	e8 e9 fd ff ff       	call   c000f7e9 <Phys::allocateDMA(unsigned long)>
c000fa00:	83 c4 10             	add    esp,0x10
c000fa03:	85 c0                	test   eax,eax
c000fa05:	75 56                	jne    c000fa5d <Phys::allocatePage()+0xb1>
c000fa07:	83 ec 0c             	sub    esp,0xc
c000fa0a:	68 b3 8a 02 c0       	push   0xc0028ab3
c000fa0f:	e8 8b 9d 00 00       	call   c001979f <Krnl::panic(char const*)>
c000fa14:	83 c4 10             	add    esp,0x10
c000fa17:	8b 1d 80 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c880
c000fa1d:	53                   	push   ebx
c000fa1e:	e8 e3 fe ff ff       	call   c000f906 <Phys::getPageState(unsigned long)>
c000fa23:	5a                   	pop    edx
c000fa24:	84 c0                	test   al,al
c000fa26:	75 a6                	jne    c000f9ce <Phys::allocatePage()+0x22>
c000fa28:	6a 01                	push   0x1
c000fa2a:	53                   	push   ebx
c000fa2b:	e8 a4 fe ff ff       	call   c000f8d4 <Phys::setPageState(unsigned long, bool)>
c000fa30:	a1 8c c8 02 c0       	mov    eax,ds:0xc002c88c
c000fa35:	59                   	pop    ecx
c000fa36:	40                   	inc    eax
c000fa37:	5b                   	pop    ebx
c000fa38:	a3 8c c8 02 c0       	mov    ds:0xc002c88c,eax
c000fa3d:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa40:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa43:	c1 e0 02             	shl    eax,0x2
c000fa46:	99                   	cdq    
c000fa47:	f7 3d 90 c8 02 c0    	idiv   DWORD PTR ds:0xc002c890
c000fa4d:	39 05 88 c8 02 c0    	cmp    DWORD PTR ds:0xc002c888,eax
c000fa53:	75 0c                	jne    c000fa61 <Phys::allocatePage()+0xb5>
c000fa55:	a1 80 c8 02 c0       	mov    eax,ds:0xc002c880
c000fa5a:	c1 e0 0c             	shl    eax,0xc
c000fa5d:	5a                   	pop    edx
c000fa5e:	5b                   	pop    ebx
c000fa5f:	5e                   	pop    esi
c000fa60:	c3                   	ret    
c000fa61:	83 ec 0c             	sub    esp,0xc
c000fa64:	a3 88 c8 02 c0       	mov    ds:0xc002c888,eax
c000fa69:	50                   	push   eax
c000fa6a:	e8 83 09 00 00       	call   c00103f2 <VgaText::updateRAMUsageDisplay(int)>
c000fa6f:	83 c4 10             	add    esp,0x10
c000fa72:	eb e1                	jmp    c000fa55 <Phys::allocatePage()+0xa9>

c000fa74 <Phys::allocateContiguousPages(int)>:
c000fa74:	57                   	push   edi
c000fa75:	56                   	push   esi
c000fa76:	53                   	push   ebx
c000fa77:	31 db                	xor    ebx,ebx
c000fa79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fa7d:	e8 ac d1 00 00       	call   c001cc2e <lockScheduler()>
c000fa82:	85 db                	test   ebx,ebx
c000fa84:	75 11                	jne    c000fa97 <Phys::allocateContiguousPages(int)+0x23>
c000fa86:	e8 21 ff ff ff       	call   c000f9ac <Phys::allocatePage()>
c000fa8b:	83 ff 01             	cmp    edi,0x1
c000fa8e:	89 c6                	mov    esi,eax
c000fa90:	74 21                	je     c000fab3 <Phys::allocateContiguousPages(int)+0x3f>
c000fa92:	bb 01 00 00 00       	mov    ebx,0x1
c000fa97:	e8 10 ff ff ff       	call   c000f9ac <Phys::allocatePage()>
c000fa9c:	89 da                	mov    edx,ebx
c000fa9e:	c1 e2 0c             	shl    edx,0xc
c000faa1:	01 f2                	add    edx,esi
c000faa3:	39 c2                	cmp    edx,eax
c000faa5:	74 17                	je     c000fabe <Phys::allocateContiguousPages(int)+0x4a>
c000faa7:	bb 01 00 00 00       	mov    ebx,0x1
c000faac:	89 c6                	mov    esi,eax
c000faae:	83 ff 01             	cmp    edi,0x1
c000fab1:	75 e4                	jne    c000fa97 <Phys::allocateContiguousPages(int)+0x23>
c000fab3:	e8 78 d1 00 00       	call   c001cc30 <unlockScheduler()>
c000fab8:	89 f0                	mov    eax,esi
c000faba:	5b                   	pop    ebx
c000fabb:	5e                   	pop    esi
c000fabc:	5f                   	pop    edi
c000fabd:	c3                   	ret    
c000fabe:	43                   	inc    ebx
c000fabf:	39 fb                	cmp    ebx,edi
c000fac1:	75 bf                	jne    c000fa82 <Phys::allocateContiguousPages(int)+0xe>
c000fac3:	e8 68 d1 00 00       	call   c001cc30 <unlockScheduler()>
c000fac8:	89 f0                	mov    eax,esi
c000faca:	5b                   	pop    ebx
c000facb:	5e                   	pop    esi
c000facc:	5f                   	pop    edi
c000facd:	c3                   	ret    

c000face <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000face:	56                   	push   esi
c000facf:	53                   	push   ebx
c000fad0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fad4:	39 1d 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,ebx
c000fada:	73 06                	jae    c000fae2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fadc:	89 1d 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,ebx
c000fae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fae6:	c1 eb 0c             	shr    ebx,0xc
c000fae9:	c1 e8 0c             	shr    eax,0xc
c000faec:	39 d8                	cmp    eax,ebx
c000faee:	73 13                	jae    c000fb03 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000faf0:	6a 00                	push   0x0
c000faf2:	8d 70 01             	lea    esi,[eax+0x1]
c000faf5:	50                   	push   eax
c000faf6:	e8 d9 fd ff ff       	call   c000f8d4 <Phys::setPageState(unsigned long, bool)>
c000fafb:	5a                   	pop    edx
c000fafc:	89 f0                	mov    eax,esi
c000fafe:	59                   	pop    ecx
c000faff:	39 f3                	cmp    ebx,esi
c000fb01:	75 ed                	jne    c000faf0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fb03:	5b                   	pop    ebx
c000fb04:	5e                   	pop    esi
c000fb05:	c3                   	ret    

c000fb06 <Phys::physicalMemorySetup(unsigned int)>:
c000fb06:	55                   	push   ebp
c000fb07:	57                   	push   edi
c000fb08:	56                   	push   esi
c000fb09:	53                   	push   ebx
c000fb0a:	31 db                	xor    ebx,ebx
c000fb0c:	83 ec 40             	sub    esp,0x40
c000fb0f:	6a 30                	push   0x30
c000fb11:	6a 00                	push   0x0
c000fb13:	68 a0 c8 02 c0       	push   0xc002c8a0
c000fb18:	e8 6e 0b ff ff       	call   c000068b <memset>
c000fb1d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb21:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb26:	05 00 10 00 00       	add    eax,0x1000
c000fb2b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb2f:	83 c4 10             	add    esp,0x10
c000fb32:	83 ec 08             	sub    esp,0x8
c000fb35:	6a 01                	push   0x1
c000fb37:	53                   	push   ebx
c000fb38:	43                   	inc    ebx
c000fb39:	e8 96 fd ff ff       	call   c000f8d4 <Phys::setPageState(unsigned long, bool)>
c000fb3e:	83 c4 10             	add    esp,0x10
c000fb41:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb47:	75 e9                	jne    c000fb32 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fb49:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb50:	66 85 c0             	test   ax,ax
c000fb53:	0f 84 8e 01 00 00    	je     c000fce7 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fb59:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fb65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb69:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb6e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb72:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fb7a:	eb 15                	jmp    c000fb91 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fb7c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fb80:	83 c3 18             	add    ebx,0x18
c000fb83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb87:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fb8b:	0f 84 66 01 00 00    	je     c000fcf7 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fb91:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fb94:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fb97:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fb9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb9e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fba2:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fba4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fba7:	01 f0                	add    eax,esi
c000fba9:	55                   	push   ebp
c000fbaa:	11 fa                	adc    edx,edi
c000fbac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbb0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fbb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fbb8:	56                   	push   esi
c000fbb9:	68 ec 8a 02 c0       	push   0xc0028aec
c000fbbe:	e8 c2 2a 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000fbc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbc7:	83 c4 10             	add    esp,0x10
c000fbca:	09 f8                	or     eax,edi
c000fbcc:	0f 85 25 01 00 00    	jne    c000fcf7 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fbd2:	4d                   	dec    ebp
c000fbd3:	75 a7                	jne    c000fb7c <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fbd5:	ba 00 00 08 00       	mov    edx,0x80000
c000fbda:	89 c1                	mov    ecx,eax
c000fbdc:	39 f2                	cmp    edx,esi
c000fbde:	19 f9                	sbb    ecx,edi
c000fbe0:	0f 82 a7 00 00 00    	jb     c000fc8d <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fbe6:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fbea:	89 c1                	mov    ecx,eax
c000fbec:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fbf0:	0f 83 97 00 00 00    	jae    c000fc8d <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fbf6:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fbfb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fbff:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc03:	39 fa                	cmp    edx,edi
c000fc05:	19 e8                	sbb    eax,ebp
c000fc07:	0f 82 14 01 00 00    	jb     c000fd21 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fc0d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc11:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc15:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fc1b:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc20:	83 d5 ff             	adc    ebp,0xffffffff
c000fc23:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc27:	31 c0                	xor    eax,eax
c000fc29:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fc2d:	39 fa                	cmp    edx,edi
c000fc2f:	89 c1                	mov    ecx,eax
c000fc31:	19 e9                	sbb    ecx,ebp
c000fc33:	0f 83 43 ff ff ff    	jae    c000fb7c <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fc39:	be 00 00 08 00       	mov    esi,0x80000
c000fc3e:	50                   	push   eax
c000fc3f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fc43:	57                   	push   edi
c000fc44:	56                   	push   esi
c000fc45:	68 10 8b 02 c0       	push   0xc0028b10
c000fc4a:	e8 36 2a 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000fc4f:	5a                   	pop    edx
c000fc50:	59                   	pop    ecx
c000fc51:	57                   	push   edi
c000fc52:	56                   	push   esi
c000fc53:	e8 76 fe ff ff       	call   c000face <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc58:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc5c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc60:	83 c4 0c             	add    esp,0xc
c000fc63:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc67:	03 05 90 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c890
c000fc6d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc74:	a3 90 c8 02 c0       	mov    ds:0xc002c890,eax
c000fc79:	52                   	push   edx
c000fc7a:	50                   	push   eax
c000fc7b:	68 cf 8a 02 c0       	push   0xc0028acf
c000fc80:	e8 00 2a 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c000fc85:	83 c4 10             	add    esp,0x10
c000fc88:	e9 ef fe ff ff       	jmp    c000fb7c <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fc8d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fc91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fc95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fc99:	39 ea                	cmp    edx,ebp
c000fc9b:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fc9f:	0f 82 d7 fe ff ff    	jb     c000fb7c <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fca5:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcaa:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fcae:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fcb2:	0f 83 c4 fe ff ff    	jae    c000fb7c <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fcb8:	39 ee                	cmp    esi,ebp
c000fcba:	89 f8                	mov    eax,edi
c000fcbc:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fcc0:	0f 83 78 ff ff ff    	jae    c000fc3e <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fcc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fcce:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcd2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fcd6:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fcda:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fcde:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fce2:	e9 57 ff ff ff       	jmp    c000fc3e <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fce7:	83 ec 0c             	sub    esp,0xc
c000fcea:	68 c1 8a 02 c0       	push   0xc0028ac1
c000fcef:	e8 ab 9a 00 00       	call   c001979f <Krnl::panic(char const*)>
c000fcf4:	83 c4 10             	add    esp,0x10
c000fcf7:	bb 40 01 00 00       	mov    ebx,0x140
c000fcfc:	83 ec 08             	sub    esp,0x8
c000fcff:	6a 00                	push   0x0
c000fd01:	53                   	push   ebx
c000fd02:	43                   	inc    ebx
c000fd03:	e8 cc fb ff ff       	call   c000f8d4 <Phys::setPageState(unsigned long, bool)>
c000fd08:	ff 05 90 c8 02 c0    	inc    DWORD PTR ds:0xc002c890
c000fd0e:	83 c4 10             	add    esp,0x10
c000fd11:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd17:	75 e3                	jne    c000fcfc <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fd19:	83 c4 3c             	add    esp,0x3c
c000fd1c:	5b                   	pop    ebx
c000fd1d:	5e                   	pop    esi
c000fd1e:	5f                   	pop    edi
c000fd1f:	5d                   	pop    ebp
c000fd20:	c3                   	ret    
c000fd21:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fd29:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fd31:	e9 d7 fe ff ff       	jmp    c000fc0d <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fd36 <Pipe::isAtty()>:
c000fd36:	31 c0                	xor    eax,eax
c000fd38:	c3                   	ret    
c000fd39:	90                   	nop

c000fd3a <Pipe::~Pipe()>:
c000fd3a:	83 ec 0c             	sub    esp,0xc
c000fd3d:	ba 7c 8b 02 c0       	mov    edx,0xc0028b7c
c000fd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd46:	89 10                	mov    DWORD PTR [eax],edx
c000fd48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd4c:	83 ec 0c             	sub    esp,0xc
c000fd4f:	50                   	push   eax
c000fd50:	e8 df 16 00 00       	call   c0011434 <UnixFile::~UnixFile()>
c000fd55:	83 c4 10             	add    esp,0x10
c000fd58:	90                   	nop
c000fd59:	83 c4 0c             	add    esp,0xc
c000fd5c:	c3                   	ret    
c000fd5d:	90                   	nop

c000fd5e <Pipe::~Pipe()>:
c000fd5e:	83 ec 0c             	sub    esp,0xc
c000fd61:	83 ec 0c             	sub    esp,0xc
c000fd64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd68:	e8 cd ff ff ff       	call   c000fd3a <Pipe::~Pipe()>
c000fd6d:	83 c4 10             	add    esp,0x10
c000fd70:	83 ec 08             	sub    esp,0x8
c000fd73:	6a 20                	push   0x20
c000fd75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd79:	e8 27 28 00 00       	call   c00125a5 <operator delete(void*, unsigned long)>
c000fd7e:	83 c4 10             	add    esp,0x10
c000fd81:	83 c4 0c             	add    esp,0xc
c000fd84:	c3                   	ret    
c000fd85:	90                   	nop

c000fd86 <Pipe::read(unsigned long long, void*, int*)>:
c000fd86:	55                   	push   ebp
c000fd87:	57                   	push   edi
c000fd88:	56                   	push   esi
c000fd89:	53                   	push   ebx
c000fd8a:	83 ec 1c             	sub    esp,0x1c
c000fd8d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fd91:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fd95:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fd99:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fd9c:	89 c8                	mov    eax,ecx
c000fd9e:	99                   	cdq    
c000fd9f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fda3:	74 19                	je     c000fdbe <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fda5:	39 f9                	cmp    ecx,edi
c000fda7:	89 d1                	mov    ecx,edx
c000fda9:	19 f1                	sbb    ecx,esi
c000fdab:	73 11                	jae    c000fdbe <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fdad:	e8 7c ce 00 00       	call   c001cc2e <lockScheduler()>
c000fdb2:	e8 b3 d1 00 00       	call   c001cf6a <schedule()>
c000fdb7:	e8 74 ce 00 00       	call   c001cc30 <unlockScheduler()>
c000fdbc:	eb db                	jmp    c000fd99 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdbe:	39 f8                	cmp    eax,edi
c000fdc0:	89 d1                	mov    ecx,edx
c000fdc2:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fdc6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fdca:	19 f1                	sbb    ecx,esi
c000fdcc:	73 08                	jae    c000fdd6 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fdce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fdd2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fdd6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fdd9:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fddc:	29 c6                	sub    esi,eax
c000fdde:	89 f1                	mov    ecx,esi
c000fde0:	c1 f9 1f             	sar    ecx,0x1f
c000fde3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000fde7:	89 ca                	mov    edx,ecx
c000fde9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fded:	19 d1                	sbb    ecx,edx
c000fdef:	73 04                	jae    c000fdf5 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fdf1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fdf5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fdf9:	89 fd                	mov    ebp,edi
c000fdfb:	29 f5                	sub    ebp,esi
c000fdfd:	85 f6                	test   esi,esi
c000fdff:	74 12                	je     c000fe13 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fe01:	52                   	push   edx
c000fe02:	56                   	push   esi
c000fe03:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fe06:	50                   	push   eax
c000fe07:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fe0b:	e8 45 08 ff ff       	call   c0000655 <memcpy>
c000fe10:	83 c4 10             	add    esp,0x10
c000fe13:	85 ed                	test   ebp,ebp
c000fe15:	74 12                	je     c000fe29 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fe17:	50                   	push   eax
c000fe18:	55                   	push   ebp
c000fe19:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000fe1c:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fe20:	56                   	push   esi
c000fe21:	e8 2f 08 ff ff       	call   c0000655 <memcpy>
c000fe26:	83 c4 10             	add    esp,0x10
c000fe29:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fe2c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe2f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe32:	99                   	cdq    
c000fe33:	89 f7                	mov    edi,esi
c000fe35:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fe39:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fe3d:	c1 ff 1f             	sar    edi,0x1f
c000fe40:	57                   	push   edi
c000fe41:	56                   	push   esi
c000fe42:	52                   	push   edx
c000fe43:	50                   	push   eax
c000fe44:	e8 73 55 01 00       	call   c00253bc <__umoddi3>
c000fe49:	83 c4 10             	add    esp,0x10
c000fe4c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe4f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe54:	75 10                	jne    c000fe66 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000fe56:	83 ec 0c             	sub    esp,0xc
c000fe59:	68 39 8b 02 c0       	push   0xc0028b39
c000fe5e:	e8 3c 99 00 00       	call   c001979f <Krnl::panic(char const*)>
c000fe63:	83 c4 10             	add    esp,0x10
c000fe66:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe6e:	89 10                	mov    DWORD PTR [eax],edx
c000fe70:	83 c4 1c             	add    esp,0x1c
c000fe73:	31 c0                	xor    eax,eax
c000fe75:	5b                   	pop    ebx
c000fe76:	5e                   	pop    esi
c000fe77:	5f                   	pop    edi
c000fe78:	5d                   	pop    ebp
c000fe79:	c3                   	ret    

c000fe7a <Pipe::write(unsigned long long, void*, int*)>:
c000fe7a:	55                   	push   ebp
c000fe7b:	57                   	push   edi
c000fe7c:	56                   	push   esi
c000fe7d:	53                   	push   ebx
c000fe7e:	83 ec 1c             	sub    esp,0x1c
c000fe81:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fe85:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fe89:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fe8d:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe90:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000fe93:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000fe96:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe9a:	89 de                	mov    esi,ebx
c000fe9c:	89 df                	mov    edi,ebx
c000fe9e:	c1 ff 1f             	sar    edi,0x1f
c000fea1:	01 c6                	add    esi,eax
c000fea3:	89 c8                	mov    eax,ecx
c000fea5:	11 d7                	adc    edi,edx
c000fea7:	99                   	cdq    
c000fea8:	39 f1                	cmp    ecx,esi
c000feaa:	89 d0                	mov    eax,edx
c000feac:	19 f8                	sbb    eax,edi
c000feae:	b8 01 00 00 00       	mov    eax,0x1
c000feb3:	0f 82 80 00 00 00    	jb     c000ff39 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000feb9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000febc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000febf:	01 d8                	add    eax,ebx
c000fec1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000fec5:	99                   	cdq    
c000fec6:	f7 f9                	idiv   ecx
c000fec8:	29 d1                	sub    ecx,edx
c000feca:	89 d7                	mov    edi,edx
c000fecc:	89 c8                	mov    eax,ecx
c000fece:	99                   	cdq    
c000fecf:	39 ce                	cmp    esi,ecx
c000fed1:	19 d3                	sbb    ebx,edx
c000fed3:	bb 00 00 00 00       	mov    ebx,0x0
c000fed8:	72 04                	jb     c000fede <Pipe::write(unsigned long long, void*, int*)+0x64>
c000feda:	89 f3                	mov    ebx,esi
c000fedc:	29 cb                	sub    ebx,ecx
c000fede:	89 f1                	mov    ecx,esi
c000fee0:	29 d9                	sub    ecx,ebx
c000fee2:	74 1a                	je     c000fefe <Pipe::write(unsigned long long, void*, int*)+0x84>
c000fee4:	52                   	push   edx
c000fee5:	51                   	push   ecx
c000fee6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000feea:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000feee:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fef1:	57                   	push   edi
c000fef2:	e8 5e 07 ff ff       	call   c0000655 <memcpy>
c000fef7:	83 c4 10             	add    esp,0x10
c000fefa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fefe:	85 db                	test   ebx,ebx
c000ff00:	74 12                	je     c000ff14 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000ff02:	50                   	push   eax
c000ff03:	53                   	push   ebx
c000ff04:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000ff08:	51                   	push   ecx
c000ff09:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ff0c:	e8 44 07 ff ff       	call   c0000655 <memcpy>
c000ff11:	83 c4 10             	add    esp,0x10
c000ff14:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000ff17:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff1c:	75 10                	jne    c000ff2e <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000ff1e:	83 ec 0c             	sub    esp,0xc
c000ff21:	68 55 8b 02 c0       	push   0xc0028b55
c000ff26:	e8 74 98 00 00       	call   c001979f <Krnl::panic(char const*)>
c000ff2b:	83 c4 10             	add    esp,0x10
c000ff2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff32:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ff35:	89 38                	mov    DWORD PTR [eax],edi
c000ff37:	31 c0                	xor    eax,eax
c000ff39:	83 c4 1c             	add    esp,0x1c
c000ff3c:	5b                   	pop    ebx
c000ff3d:	5e                   	pop    esi
c000ff3e:	5f                   	pop    edi
c000ff3f:	5d                   	pop    ebp
c000ff40:	c3                   	ret    
c000ff41:	90                   	nop

c000ff42 <Pipe::Pipe(int)>:
c000ff42:	83 ec 0c             	sub    esp,0xc
c000ff45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff49:	83 ec 08             	sub    esp,0x8
c000ff4c:	6a 00                	push   0x0
c000ff4e:	50                   	push   eax
c000ff4f:	e8 fe 12 00 00       	call   c0011252 <UnixFile::UnixFile(int)>
c000ff54:	83 c4 10             	add    esp,0x10
c000ff57:	ba 7c 8b 02 c0       	mov    edx,0xc0028b7c
c000ff5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff60:	89 10                	mov    DWORD PTR [eax],edx
c000ff62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff6a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff71:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ff78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff7c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ff83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff87:	83 ec 0c             	sub    esp,0xc
c000ff8a:	50                   	push   eax
c000ff8b:	e8 44 f5 ff ff       	call   c000f4d4 <malloc>
c000ff90:	83 c4 10             	add    esp,0x10
c000ff93:	89 c2                	mov    edx,eax
c000ff95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff99:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ff9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa0:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ffa4:	90                   	nop
c000ffa5:	83 c4 0c             	add    esp,0xc
c000ffa8:	c3                   	ret    
c000ffa9:	90                   	nop

c000ffaa <VgaText::isAtty()>:
c000ffaa:	b0 01                	mov    al,0x1
c000ffac:	c3                   	ret    
c000ffad:	90                   	nop

c000ffae <VgaText::~VgaText()>:
c000ffae:	83 ec 0c             	sub    esp,0xc
c000ffb1:	ba 38 8c 02 c0       	mov    edx,0xc0028c38
c000ffb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffba:	89 10                	mov    DWORD PTR [eax],edx
c000ffbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc0:	83 ec 0c             	sub    esp,0xc
c000ffc3:	50                   	push   eax
c000ffc4:	e8 6b 14 00 00       	call   c0011434 <UnixFile::~UnixFile()>
c000ffc9:	83 c4 10             	add    esp,0x10
c000ffcc:	90                   	nop
c000ffcd:	83 c4 0c             	add    esp,0xc
c000ffd0:	c3                   	ret    
c000ffd1:	90                   	nop

c000ffd2 <VgaText::~VgaText()>:
c000ffd2:	83 ec 0c             	sub    esp,0xc
c000ffd5:	83 ec 0c             	sub    esp,0xc
c000ffd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffdc:	e8 cd ff ff ff       	call   c000ffae <VgaText::~VgaText()>
c000ffe1:	83 c4 10             	add    esp,0x10
c000ffe4:	83 ec 08             	sub    esp,0x8
c000ffe7:	68 60 12 00 00       	push   0x1260
c000ffec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fff0:	e8 b0 25 00 00       	call   c00125a5 <operator delete(void*, unsigned long)>
c000fff5:	83 c4 10             	add    esp,0x10
c000fff8:	83 c4 0c             	add    esp,0xc
c000fffb:	c3                   	ret    

c000fffc <VgaText::read(unsigned long long, void*, int*)>:
c000fffc:	83 ec 10             	sub    esp,0x10
c000ffff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010003:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010007:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001000b:	e8 a9 58 00 00       	call   c00158b9 <readKeyboard(VgaText*, char*, unsigned long)>
c0010010:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010014:	89 02                	mov    DWORD PTR [edx],eax
c0010016:	31 c0                	xor    eax,eax
c0010018:	83 c4 1c             	add    esp,0x1c
c001001b:	c3                   	ret    

c001001c <setTerminalScrollLock(bool)>:
c001001c:	c3                   	ret    

c001001d <addToTerminalCycle(VgaText*)>:
c001001d:	8b 15 20 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c920
c0010023:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010027:	85 d2                	test   edx,edx
c0010029:	75 0c                	jne    c0010037 <addToTerminalCycle(VgaText*)+0x1a>
c001002b:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010031:	a3 20 c9 02 c0       	mov    ds:0xc002c920,eax
c0010036:	c3                   	ret    
c0010037:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001003d:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010043:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010049:	c3                   	ret    

c001004a <installVgaTextImplementation()>:
c001004a:	83 ec 10             	sub    esp,0x10
c001004d:	6a 20                	push   0x20
c001004f:	6a 00                	push   0x0
c0010051:	68 00 c9 02 c0       	push   0xc002c900
c0010056:	e8 30 06 ff ff       	call   c000068b <memset>
c001005b:	83 c4 1c             	add    esp,0x1c
c001005e:	c3                   	ret    

c001005f <scrollTerminalScrollLock(int)>:
c001005f:	c3                   	ret    

c0010060 <VgaText::load()>:
c0010060:	53                   	push   ebx
c0010061:	31 c0                	xor    eax,eax
c0010063:	83 ec 58             	sub    esp,0x58
c0010066:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001006a:	89 e2                	mov    edx,esp
c001006c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010070:	40                   	inc    eax
c0010071:	83 f8 50             	cmp    eax,0x50
c0010074:	75 f6                	jne    c001006c <VgaText::load()+0xc>
c0010076:	31 c0                	xor    eax,eax
c0010078:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c001007f:	84 c9                	test   cl,cl
c0010081:	74 06                	je     c0010089 <VgaText::load()+0x29>
c0010083:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010086:	40                   	inc    eax
c0010087:	eb ef                	jmp    c0010078 <VgaText::load()+0x18>
c0010089:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c001008f:	85 c0                	test   eax,eax
c0010091:	74 09                	je     c001009c <VgaText::load()+0x3c>
c0010093:	51                   	push   ecx
c0010094:	51                   	push   ecx
c0010095:	52                   	push   edx
c0010096:	53                   	push   ebx
c0010097:	ff d0                	call   eax
c0010099:	83 c4 10             	add    esp,0x10
c001009c:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00100a2:	85 c0                	test   eax,eax
c00100a4:	74 09                	je     c00100af <VgaText::load()+0x4f>
c00100a6:	83 ec 0c             	sub    esp,0xc
c00100a9:	53                   	push   ebx
c00100aa:	ff d0                	call   eax
c00100ac:	83 c4 10             	add    esp,0x10
c00100af:	83 c4 58             	add    esp,0x58
c00100b2:	5b                   	pop    ebx
c00100b3:	c3                   	ret    

c00100b4 <VgaText::updateCursor()>:
c00100b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100b8:	39 05 24 c9 02 c0    	cmp    DWORD PTR ds:0xc002c924,eax
c00100be:	75 0c                	jne    c00100cc <VgaText::updateCursor()+0x18>
c00100c0:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00100c6:	85 c0                	test   eax,eax
c00100c8:	74 02                	je     c00100cc <VgaText::updateCursor()+0x18>
c00100ca:	ff e0                	jmp    eax
c00100cc:	c3                   	ret    
c00100cd:	90                   	nop

c00100ce <VgaText::showCursor(bool)>:
c00100ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100d6:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00100dc:	c3                   	ret    
c00100dd:	90                   	nop

c00100de <VgaText::disableBlink(bool)>:
c00100de:	56                   	push   esi
c00100df:	53                   	push   ebx
c00100e0:	51                   	push   ecx
c00100e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00100e9:	39 1d 24 c9 02 c0    	cmp    DWORD PTR ds:0xc002c924,ebx
c00100ef:	75 18                	jne    c0010109 <VgaText::disableBlink(bool)+0x2b>
c00100f1:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00100f7:	85 c0                	test   eax,eax
c00100f9:	74 0e                	je     c0010109 <VgaText::disableBlink(bool)+0x2b>
c00100fb:	89 f1                	mov    ecx,esi
c00100fd:	52                   	push   edx
c00100fe:	52                   	push   edx
c00100ff:	0f b6 d1             	movzx  edx,cl
c0010102:	52                   	push   edx
c0010103:	53                   	push   ebx
c0010104:	ff d0                	call   eax
c0010106:	83 c4 10             	add    esp,0x10
c0010109:	89 f0                	mov    eax,esi
c001010b:	83 f0 01             	xor    eax,0x1
c001010e:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010114:	58                   	pop    eax
c0010115:	5b                   	pop    ebx
c0010116:	5e                   	pop    esi
c0010117:	c3                   	ret    

c0010118 <VgaText::doANSI_SGR(int)>:
c0010118:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001011c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010120:	85 d2                	test   edx,edx
c0010122:	75 14                	jne    c0010138 <VgaText::doANSI_SGR(int)+0x20>
c0010124:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c001012a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010130:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010136:	eb 65                	jmp    c001019d <VgaText::doANSI_SGR(int)+0x85>
c0010138:	83 fa 07             	cmp    edx,0x7
c001013b:	75 14                	jne    c0010151 <VgaText::doANSI_SGR(int)+0x39>
c001013d:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010143:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010149:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c001014f:	eb 4c                	jmp    c001019d <VgaText::doANSI_SGR(int)+0x85>
c0010151:	83 fa 1b             	cmp    edx,0x1b
c0010154:	74 ce                	je     c0010124 <VgaText::doANSI_SGR(int)+0xc>
c0010156:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010159:	83 f9 07             	cmp    ecx,0x7
c001015c:	77 09                	ja     c0010167 <VgaText::doANSI_SGR(int)+0x4f>
c001015e:	8b 14 8d a0 b7 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4860]
c0010165:	eb 20                	jmp    c0010187 <VgaText::doANSI_SGR(int)+0x6f>
c0010167:	8d 4a d8             	lea    ecx,[edx-0x28]
c001016a:	83 f9 07             	cmp    ecx,0x7
c001016d:	77 09                	ja     c0010178 <VgaText::doANSI_SGR(int)+0x60>
c001016f:	8b 14 8d a0 b7 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4860]
c0010176:	eb 25                	jmp    c001019d <VgaText::doANSI_SGR(int)+0x85>
c0010178:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001017b:	83 f9 07             	cmp    ecx,0x7
c001017e:	77 0e                	ja     c001018e <VgaText::doANSI_SGR(int)+0x76>
c0010180:	8b 14 95 58 b6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd49a8]
c0010187:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001018d:	c3                   	ret    
c001018e:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010191:	83 f9 07             	cmp    ecx,0x7
c0010194:	77 0d                	ja     c00101a3 <VgaText::doANSI_SGR(int)+0x8b>
c0010196:	8b 14 95 30 b6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd49d0]
c001019d:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00101a3:	c3                   	ret    

c00101a4 <VgaText::setDefaultBgColour(VgaColour)>:
c00101a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ac:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00101b2:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00101b8:	c3                   	ret    
c00101b9:	90                   	nop

c00101ba <VgaText::setDefaultFgColour(VgaColour)>:
c00101ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101c2:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00101c8:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00101ce:	c3                   	ret    
c00101cf:	90                   	nop

c00101d0 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00101d0:	53                   	push   ebx
c00101d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101d5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00101d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00101dd:	51                   	push   ecx
c00101de:	e8 c1 ff ff ff       	call   c00101a4 <VgaText::setDefaultBgColour(VgaColour)>
c00101e3:	58                   	pop    eax
c00101e4:	5a                   	pop    edx
c00101e5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00101e9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101ed:	5b                   	pop    ebx
c00101ee:	eb ca                	jmp    c00101ba <VgaText::setDefaultFgColour(VgaColour)>

c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>:
c00101f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00101f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101f8:	b0 02                	mov    al,0x2
c00101fa:	80 3d e0 c8 02 c0 00 	cmp    BYTE PTR ds:0xc002c8e0,0x0
c0010201:	75 0a                	jne    c001020d <VgaText::combineColours(unsigned char, unsigned char)+0x1d>
c0010203:	83 e2 0f             	and    edx,0xf
c0010206:	c1 e1 04             	shl    ecx,0x4
c0010209:	88 c8                	mov    al,cl
c001020b:	09 d0                	or     eax,edx
c001020d:	c3                   	ret    

c001020e <VgaText::scrollScreen()>:
c001020e:	55                   	push   ebp
c001020f:	57                   	push   edi
c0010210:	bf 01 00 00 00       	mov    edi,0x1
c0010215:	56                   	push   esi
c0010216:	53                   	push   ebx
c0010217:	83 ec 0c             	sub    esp,0xc
c001021a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001021e:	69 f7 a0 00 00 00    	imul   esi,edi,0xa0
c0010224:	31 ed                	xor    ebp,ebp
c0010226:	01 de                	add    esi,ebx
c0010228:	8a 46 0c             	mov    al,BYTE PTR [esi+0xc]
c001022b:	83 ff 17             	cmp    edi,0x17
c001022e:	88 86 6c ff ff ff    	mov    BYTE PTR [esi-0x94],al
c0010234:	75 28                	jne    c001025e <VgaText::scrollScreen()+0x50>
c0010236:	f7 c5 01 00 00 00    	test   ebp,0x1
c001023c:	74 1c                	je     c001025a <VgaText::scrollScreen()+0x4c>
c001023e:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010245:	50                   	push   eax
c0010246:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001024d:	50                   	push   eax
c001024e:	e8 9d ff ff ff       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010253:	5a                   	pop    edx
c0010254:	59                   	pop    ecx
c0010255:	88 46 0c             	mov    BYTE PTR [esi+0xc],al
c0010258:	eb 04                	jmp    c001025e <VgaText::scrollScreen()+0x50>
c001025a:	c6 46 0c 20          	mov    BYTE PTR [esi+0xc],0x20
c001025e:	45                   	inc    ebp
c001025f:	46                   	inc    esi
c0010260:	81 fd a0 00 00 00    	cmp    ebp,0xa0
c0010266:	75 c0                	jne    c0010228 <VgaText::scrollScreen()+0x1a>
c0010268:	47                   	inc    edi
c0010269:	83 ff 18             	cmp    edi,0x18
c001026c:	75 b0                	jne    c001021e <VgaText::scrollScreen()+0x10>
c001026e:	39 1d 24 c9 02 c0    	cmp    DWORD PTR ds:0xc002c924,ebx
c0010274:	75 24                	jne    c001029a <VgaText::scrollScreen()+0x8c>
c0010276:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001027d:	74 08                	je     c0010287 <VgaText::scrollScreen()+0x79>
c001027f:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010285:	eb 13                	jmp    c001029a <VgaText::scrollScreen()+0x8c>
c0010287:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001028d:	85 c0                	test   eax,eax
c001028f:	74 09                	je     c001029a <VgaText::scrollScreen()+0x8c>
c0010291:	83 ec 0c             	sub    esp,0xc
c0010294:	53                   	push   ebx
c0010295:	ff d0                	call   eax
c0010297:	83 c4 10             	add    esp,0x10
c001029a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001029e:	83 c4 0c             	add    esp,0xc
c00102a1:	5b                   	pop    ebx
c00102a2:	5e                   	pop    esi
c00102a3:	5f                   	pop    edi
c00102a4:	5d                   	pop    ebp
c00102a5:	e9 0a fe ff ff       	jmp    c00100b4 <VgaText::updateCursor()>

c00102aa <VgaText::combineCharAndColour(char, unsigned char)>:
c00102aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00102af:	c1 e0 08             	shl    eax,0x8
c00102b2:	89 c2                	mov    edx,eax
c00102b4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00102b9:	09 d0                	or     eax,edx
c00102bb:	c3                   	ret    

c00102bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00102bc:	53                   	push   ebx
c00102bd:	83 ec 08             	sub    esp,0x8
c00102c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102c4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102c9:	50                   	push   eax
c00102ca:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102cf:	50                   	push   eax
c00102d0:	e8 1b ff ff ff       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c00102d5:	5a                   	pop    edx
c00102d6:	0f b6 c0             	movzx  eax,al
c00102d9:	59                   	pop    ecx
c00102da:	0f be 4c 24 14       	movsx  ecx,BYTE PTR [esp+0x14]
c00102df:	50                   	push   eax
c00102e0:	51                   	push   ecx
c00102e1:	e8 c4 ff ff ff       	call   c00102aa <VgaText::combineCharAndColour(char, unsigned char)>
c00102e6:	5a                   	pop    edx
c00102e7:	5a                   	pop    edx
c00102e8:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00102ee:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00102f2:	0f b7 d2             	movzx  edx,dx
c00102f5:	66 89 44 53 0c       	mov    WORD PTR [ebx+edx*2+0xc],ax
c00102fa:	39 1d 24 c9 02 c0    	cmp    DWORD PTR ds:0xc002c924,ebx
c0010300:	75 14                	jne    c0010316 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010302:	8b 83 18 10 00 00    	mov    eax,DWORD PTR [ebx+0x1018]
c0010308:	85 c0                	test   eax,eax
c001030a:	74 0a                	je     c0010316 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001030c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010310:	83 c4 08             	add    esp,0x8
c0010313:	5b                   	pop    ebx
c0010314:	ff e0                	jmp    eax
c0010316:	83 c4 08             	add    esp,0x8
c0010319:	5b                   	pop    ebx
c001031a:	c3                   	ret    
c001031b:	90                   	nop

c001031c <VgaText::getCursorX()>:
c001031c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010320:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010326:	c3                   	ret    
c0010327:	90                   	nop

c0010328 <VgaText::getCursorY()>:
c0010328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001032c:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010332:	c3                   	ret    
c0010333:	90                   	nop

c0010334 <VgaText::setCursor(int, int)>:
c0010334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010338:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001033c:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010342:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010346:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001034c:	e9 63 fd ff ff       	jmp    c00100b4 <VgaText::updateCursor()>
c0010351:	90                   	nop

c0010352 <VgaText::setCursorX(int)>:
c0010352:	83 ec 10             	sub    esp,0x10
c0010355:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010359:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001035f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010363:	50                   	push   eax
c0010364:	e8 cb ff ff ff       	call   c0010334 <VgaText::setCursor(int, int)>
c0010369:	83 c4 1c             	add    esp,0x1c
c001036c:	c3                   	ret    
c001036d:	90                   	nop

c001036e <VgaText::setCursorY(int)>:
c001036e:	83 ec 10             	sub    esp,0x10
c0010371:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010375:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010379:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001037f:	50                   	push   eax
c0010380:	e8 af ff ff ff       	call   c0010334 <VgaText::setCursor(int, int)>
c0010385:	83 c4 1c             	add    esp,0x1c
c0010388:	c3                   	ret    
c0010389:	90                   	nop

c001038a <VgaText::incrementCursor(bool)>:
c001038a:	56                   	push   esi
c001038b:	53                   	push   ebx
c001038c:	51                   	push   ecx
c001038d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010391:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010395:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001039b:	40                   	inc    eax
c001039c:	83 f8 50             	cmp    eax,0x50
c001039f:	74 08                	je     c00103a9 <VgaText::incrementCursor(bool)+0x1f>
c00103a1:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00103a7:	eb 33                	jmp    c00103dc <VgaText::incrementCursor(bool)+0x52>
c00103a9:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00103af:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00103b9:	8d 50 01             	lea    edx,[eax+0x1]
c00103bc:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00103c2:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00103c8:	75 12                	jne    c00103dc <VgaText::incrementCursor(bool)+0x52>
c00103ca:	83 ec 0c             	sub    esp,0xc
c00103cd:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00103d3:	53                   	push   ebx
c00103d4:	e8 35 fe ff ff       	call   c001020e <VgaText::scrollScreen()>
c00103d9:	83 c4 10             	add    esp,0x10
c00103dc:	89 f0                	mov    eax,esi
c00103de:	84 c0                	test   al,al
c00103e0:	74 0c                	je     c00103ee <VgaText::incrementCursor(bool)+0x64>
c00103e2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103e6:	5a                   	pop    edx
c00103e7:	5b                   	pop    ebx
c00103e8:	5e                   	pop    esi
c00103e9:	e9 c6 fc ff ff       	jmp    c00100b4 <VgaText::updateCursor()>
c00103ee:	58                   	pop    eax
c00103ef:	5b                   	pop    ebx
c00103f0:	5e                   	pop    esi
c00103f1:	c3                   	ret    

c00103f2 <VgaText::updateRAMUsageDisplay(int)>:
c00103f2:	56                   	push   esi
c00103f3:	8b 35 80 b7 02 c0    	mov    esi,DWORD PTR ds:0xc002b780
c00103f9:	53                   	push   ebx
c00103fa:	6a 0f                	push   0xf
c00103fc:	6a 00                	push   0x0
c00103fe:	e8 ed fd ff ff       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010403:	5a                   	pop    edx
c0010404:	0f b6 c0             	movzx  eax,al
c0010407:	59                   	pop    ecx
c0010408:	b9 0a 00 00 00       	mov    ecx,0xa
c001040d:	50                   	push   eax
c001040e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010412:	99                   	cdq    
c0010413:	f7 f9                	idiv   ecx
c0010415:	89 d3                	mov    ebx,edx
c0010417:	83 c0 30             	add    eax,0x30
c001041a:	83 c3 30             	add    ebx,0x30
c001041d:	0f be c0             	movsx  eax,al
c0010420:	0f b6 db             	movzx  ebx,bl
c0010423:	50                   	push   eax
c0010424:	e8 81 fe ff ff       	call   c00102aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010429:	5a                   	pop    edx
c001042a:	59                   	pop    ecx
c001042b:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010432:	6a 0f                	push   0xf
c0010434:	6a 00                	push   0x0
c0010436:	e8 b5 fd ff ff       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c001043b:	5a                   	pop    edx
c001043c:	0f b6 c0             	movzx  eax,al
c001043f:	59                   	pop    ecx
c0010440:	50                   	push   eax
c0010441:	53                   	push   ebx
c0010442:	e8 63 fe ff ff       	call   c00102aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010447:	5b                   	pop    ebx
c0010448:	5a                   	pop    edx
c0010449:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010450:	6a 0f                	push   0xf
c0010452:	6a 00                	push   0x0
c0010454:	e8 97 fd ff ff       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010459:	59                   	pop    ecx
c001045a:	0f b6 c0             	movzx  eax,al
c001045d:	5b                   	pop    ebx
c001045e:	50                   	push   eax
c001045f:	6a 25                	push   0x25
c0010461:	e8 44 fe ff ff       	call   c00102aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010466:	5a                   	pop    edx
c0010467:	59                   	pop    ecx
c0010468:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c001046f:	5b                   	pop    ebx
c0010470:	5e                   	pop    esi
c0010471:	c3                   	ret    

c0010472 <VgaText::updateDiskUsage()>:
c0010472:	55                   	push   ebp
c0010473:	57                   	push   edi
c0010474:	8b 3d 80 b7 02 c0    	mov    edi,DWORD PTR ds:0xc002b780
c001047a:	56                   	push   esi
c001047b:	53                   	push   ebx
c001047c:	bb 0a 00 00 00       	mov    ebx,0xa
c0010481:	6a 0f                	push   0xf
c0010483:	6a 00                	push   0x0
c0010485:	e8 66 fd ff ff       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c001048a:	5a                   	pop    edx
c001048b:	8b 35 88 eb 02 c0    	mov    esi,DWORD PTR ds:0xc002eb88
c0010491:	59                   	pop    ecx
c0010492:	0f b6 c0             	movzx  eax,al
c0010495:	b9 10 27 00 00       	mov    ecx,0x2710
c001049a:	50                   	push   eax
c001049b:	89 f0                	mov    eax,esi
c001049d:	99                   	cdq    
c001049e:	f7 f9                	idiv   ecx
c00104a0:	99                   	cdq    
c00104a1:	f7 fb                	idiv   ebx
c00104a3:	83 c2 30             	add    edx,0x30
c00104a6:	0f b6 d2             	movzx  edx,dl
c00104a9:	52                   	push   edx
c00104aa:	e8 fb fd ff ff       	call   c00102aa <VgaText::combineCharAndColour(char, unsigned char)>
c00104af:	5d                   	pop    ebp
c00104b0:	5a                   	pop    edx
c00104b1:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00104b5:	6a 0f                	push   0xf
c00104b7:	6a 00                	push   0x0
c00104b9:	e8 32 fd ff ff       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c00104be:	59                   	pop    ecx
c00104bf:	0f b6 c0             	movzx  eax,al
c00104c2:	5d                   	pop    ebp
c00104c3:	bd e8 03 00 00       	mov    ebp,0x3e8
c00104c8:	50                   	push   eax
c00104c9:	89 f0                	mov    eax,esi
c00104cb:	99                   	cdq    
c00104cc:	f7 fd                	idiv   ebp
c00104ce:	99                   	cdq    
c00104cf:	f7 fb                	idiv   ebx
c00104d1:	8d 42 30             	lea    eax,[edx+0x30]
c00104d4:	0f b6 c0             	movzx  eax,al
c00104d7:	50                   	push   eax
c00104d8:	e8 cd fd ff ff       	call   c00102aa <VgaText::combineCharAndColour(char, unsigned char)>
c00104dd:	5a                   	pop    edx
c00104de:	59                   	pop    ecx
c00104df:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00104e6:	6a 0f                	push   0xf
c00104e8:	6a 00                	push   0x0
c00104ea:	e8 01 fd ff ff       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c00104ef:	5a                   	pop    edx
c00104f0:	0f b6 c0             	movzx  eax,al
c00104f3:	59                   	pop    ecx
c00104f4:	b9 64 00 00 00       	mov    ecx,0x64
c00104f9:	50                   	push   eax
c00104fa:	89 f0                	mov    eax,esi
c00104fc:	99                   	cdq    
c00104fd:	f7 f9                	idiv   ecx
c00104ff:	99                   	cdq    
c0010500:	f7 fb                	idiv   ebx
c0010502:	8d 42 30             	lea    eax,[edx+0x30]
c0010505:	0f b6 c0             	movzx  eax,al
c0010508:	50                   	push   eax
c0010509:	e8 9c fd ff ff       	call   c00102aa <VgaText::combineCharAndColour(char, unsigned char)>
c001050e:	5a                   	pop    edx
c001050f:	59                   	pop    ecx
c0010510:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010517:	6a 0f                	push   0xf
c0010519:	6a 00                	push   0x0
c001051b:	e8 d0 fc ff ff       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010520:	5a                   	pop    edx
c0010521:	0f b6 c0             	movzx  eax,al
c0010524:	59                   	pop    ecx
c0010525:	50                   	push   eax
c0010526:	89 f0                	mov    eax,esi
c0010528:	99                   	cdq    
c0010529:	f7 fb                	idiv   ebx
c001052b:	89 d6                	mov    esi,edx
c001052d:	99                   	cdq    
c001052e:	f7 fb                	idiv   ebx
c0010530:	8d 42 30             	lea    eax,[edx+0x30]
c0010533:	0f b6 c0             	movzx  eax,al
c0010536:	50                   	push   eax
c0010537:	e8 6e fd ff ff       	call   c00102aa <VgaText::combineCharAndColour(char, unsigned char)>
c001053c:	5a                   	pop    edx
c001053d:	59                   	pop    ecx
c001053e:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010545:	6a 0f                	push   0xf
c0010547:	6a 00                	push   0x0
c0010549:	e8 a2 fc ff ff       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c001054e:	5a                   	pop    edx
c001054f:	0f b6 c0             	movzx  eax,al
c0010552:	59                   	pop    ecx
c0010553:	50                   	push   eax
c0010554:	8d 46 30             	lea    eax,[esi+0x30]
c0010557:	0f b6 f0             	movzx  esi,al
c001055a:	56                   	push   esi
c001055b:	e8 4a fd ff ff       	call   c00102aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010560:	5e                   	pop    esi
c0010561:	5a                   	pop    edx
c0010562:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010569:	6a 0f                	push   0xf
c001056b:	6a 00                	push   0x0
c001056d:	e8 7e fc ff ff       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010572:	59                   	pop    ecx
c0010573:	0f b6 c0             	movzx  eax,al
c0010576:	5e                   	pop    esi
c0010577:	b9 10 27 00 00       	mov    ecx,0x2710
c001057c:	8b 35 84 eb 02 c0    	mov    esi,DWORD PTR ds:0xc002eb84
c0010582:	50                   	push   eax
c0010583:	89 f0                	mov    eax,esi
c0010585:	99                   	cdq    
c0010586:	f7 f9                	idiv   ecx
c0010588:	99                   	cdq    
c0010589:	f7 fb                	idiv   ebx
c001058b:	8d 42 30             	lea    eax,[edx+0x30]
c001058e:	0f b6 c0             	movzx  eax,al
c0010591:	50                   	push   eax
c0010592:	e8 13 fd ff ff       	call   c00102aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010597:	5a                   	pop    edx
c0010598:	59                   	pop    ecx
c0010599:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c00105a0:	6a 0f                	push   0xf
c00105a2:	6a 00                	push   0x0
c00105a4:	e8 47 fc ff ff       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c00105a9:	5a                   	pop    edx
c00105aa:	0f b6 c0             	movzx  eax,al
c00105ad:	59                   	pop    ecx
c00105ae:	50                   	push   eax
c00105af:	89 f0                	mov    eax,esi
c00105b1:	99                   	cdq    
c00105b2:	f7 fd                	idiv   ebp
c00105b4:	99                   	cdq    
c00105b5:	f7 fb                	idiv   ebx
c00105b7:	83 c2 30             	add    edx,0x30
c00105ba:	0f b6 d2             	movzx  edx,dl
c00105bd:	52                   	push   edx
c00105be:	e8 e7 fc ff ff       	call   c00102aa <VgaText::combineCharAndColour(char, unsigned char)>
c00105c3:	5d                   	pop    ebp
c00105c4:	5a                   	pop    edx
c00105c5:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c00105cc:	6a 0f                	push   0xf
c00105ce:	6a 00                	push   0x0
c00105d0:	e8 1b fc ff ff       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c00105d5:	59                   	pop    ecx
c00105d6:	0f b6 c0             	movzx  eax,al
c00105d9:	5d                   	pop    ebp
c00105da:	b9 64 00 00 00       	mov    ecx,0x64
c00105df:	50                   	push   eax
c00105e0:	89 f0                	mov    eax,esi
c00105e2:	99                   	cdq    
c00105e3:	f7 f9                	idiv   ecx
c00105e5:	99                   	cdq    
c00105e6:	f7 fb                	idiv   ebx
c00105e8:	83 c2 30             	add    edx,0x30
c00105eb:	0f b6 d2             	movzx  edx,dl
c00105ee:	52                   	push   edx
c00105ef:	e8 b6 fc ff ff       	call   c00102aa <VgaText::combineCharAndColour(char, unsigned char)>
c00105f4:	5a                   	pop    edx
c00105f5:	59                   	pop    ecx
c00105f6:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c00105fd:	6a 0f                	push   0xf
c00105ff:	6a 00                	push   0x0
c0010601:	e8 ea fb ff ff       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010606:	5d                   	pop    ebp
c0010607:	0f b6 c0             	movzx  eax,al
c001060a:	5a                   	pop    edx
c001060b:	50                   	push   eax
c001060c:	89 f0                	mov    eax,esi
c001060e:	99                   	cdq    
c001060f:	f7 fb                	idiv   ebx
c0010611:	89 d6                	mov    esi,edx
c0010613:	99                   	cdq    
c0010614:	f7 fb                	idiv   ebx
c0010616:	8d 42 30             	lea    eax,[edx+0x30]
c0010619:	0f b6 c0             	movzx  eax,al
c001061c:	50                   	push   eax
c001061d:	e8 88 fc ff ff       	call   c00102aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010622:	59                   	pop    ecx
c0010623:	5b                   	pop    ebx
c0010624:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c001062b:	6a 0f                	push   0xf
c001062d:	6a 00                	push   0x0
c001062f:	e8 bc fb ff ff       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010634:	5d                   	pop    ebp
c0010635:	0f b6 c0             	movzx  eax,al
c0010638:	5a                   	pop    edx
c0010639:	50                   	push   eax
c001063a:	8d 46 30             	lea    eax,[esi+0x30]
c001063d:	0f b6 f0             	movzx  esi,al
c0010640:	56                   	push   esi
c0010641:	e8 64 fc ff ff       	call   c00102aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010646:	59                   	pop    ecx
c0010647:	5b                   	pop    ebx
c0010648:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c001064f:	5b                   	pop    ebx
c0010650:	5e                   	pop    esi
c0010651:	5f                   	pop    edi
c0010652:	5d                   	pop    ebp
c0010653:	c3                   	ret    

c0010654 <VgaText::updateTitle()>:
c0010654:	53                   	push   ebx
c0010655:	31 c0                	xor    eax,eax
c0010657:	83 ec 58             	sub    esp,0x58
c001065a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001065e:	89 e1                	mov    ecx,esp
c0010660:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010664:	40                   	inc    eax
c0010665:	83 f8 50             	cmp    eax,0x50
c0010668:	75 f6                	jne    c0010660 <VgaText::updateTitle()+0xc>
c001066a:	31 c0                	xor    eax,eax
c001066c:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010673:	84 db                	test   bl,bl
c0010675:	74 06                	je     c001067d <VgaText::updateTitle()+0x29>
c0010677:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001067a:	40                   	inc    eax
c001067b:	eb ef                	jmp    c001066c <VgaText::updateTitle()+0x18>
c001067d:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010683:	85 c0                	test   eax,eax
c0010685:	74 09                	je     c0010690 <VgaText::updateTitle()+0x3c>
c0010687:	53                   	push   ebx
c0010688:	53                   	push   ebx
c0010689:	51                   	push   ecx
c001068a:	52                   	push   edx
c001068b:	ff d0                	call   eax
c001068d:	83 c4 10             	add    esp,0x10
c0010690:	e8 dd fd ff ff       	call   c0010472 <VgaText::updateDiskUsage()>
c0010695:	83 c4 58             	add    esp,0x58
c0010698:	5b                   	pop    ebx
c0010699:	c3                   	ret    

c001069a <VgaText::setTitleTextColour(VgaColour)>:
c001069a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001069e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106a2:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00106a8:	eb aa                	jmp    c0010654 <VgaText::updateTitle()>

c00106aa <VgaText::setTitleColour(VgaColour)>:
c00106aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106b2:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00106b8:	eb 9a                	jmp    c0010654 <VgaText::updateTitle()>

c00106ba <VgaText::setTitle(char*)>:
c00106ba:	53                   	push   ebx
c00106bb:	83 ec 10             	sub    esp,0x10
c00106be:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106c6:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00106cc:	50                   	push   eax
c00106cd:	e8 58 00 ff ff       	call   c000072a <strcpy>
c00106d2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00106d6:	83 c4 18             	add    esp,0x18
c00106d9:	5b                   	pop    ebx
c00106da:	e9 75 ff ff ff       	jmp    c0010654 <VgaText::updateTitle()>
c00106df:	90                   	nop

c00106e0 <VgaText::decrementCursor(bool)>:
c00106e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00106e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00106e8:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00106ee:	85 c0                	test   eax,eax
c00106f0:	74 07                	je     c00106f9 <VgaText::decrementCursor(bool)+0x19>
c00106f2:	48                   	dec    eax
c00106f3:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c00106f9:	84 c9                	test   cl,cl
c00106fb:	74 09                	je     c0010706 <VgaText::decrementCursor(bool)+0x26>
c00106fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010701:	e9 ae f9 ff ff       	jmp    c00100b4 <VgaText::updateCursor()>
c0010706:	c3                   	ret    
c0010707:	90                   	nop

c0010708 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010708:	53                   	push   ebx
c0010709:	83 ec 08             	sub    esp,0x8
c001070c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010710:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010714:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010718:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001071c:	3c 07                	cmp    al,0x7
c001071e:	75 2a                	jne    c001074a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010720:	a1 cc c9 02 c0       	mov    eax,ds:0xc002c9cc
c0010725:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001072d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010735:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001073d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010741:	83 c4 08             	add    esp,0x8
c0010744:	5b                   	pop    ebx
c0010745:	e9 3a 2d 00 00       	jmp    c0013484 <Buzzer::beep(int, int, bool)>
c001074a:	3c 0d                	cmp    al,0xd
c001074c:	75 0c                	jne    c001075a <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c001074e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010758:	eb 3b                	jmp    c0010795 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c001075a:	3c 0a                	cmp    al,0xa
c001075c:	75 40                	jne    c001079e <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c001075e:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010764:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001076e:	8d 50 01             	lea    edx,[eax+0x1]
c0010771:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010777:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001077d:	75 12                	jne    c0010791 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c001077f:	83 ec 0c             	sub    esp,0xc
c0010782:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010788:	53                   	push   ebx
c0010789:	e8 80 fa ff ff       	call   c001020e <VgaText::scrollScreen()>
c001078e:	83 c4 10             	add    esp,0x10
c0010791:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010795:	83 c4 08             	add    esp,0x8
c0010798:	5b                   	pop    ebx
c0010799:	e9 16 f9 ff ff       	jmp    c00100b4 <VgaText::updateCursor()>
c001079e:	3c 08                	cmp    al,0x8
c00107a0:	75 31                	jne    c00107d3 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00107a2:	50                   	push   eax
c00107a3:	50                   	push   eax
c00107a4:	6a 01                	push   0x1
c00107a6:	53                   	push   ebx
c00107a7:	e8 34 ff ff ff       	call   c00106e0 <VgaText::decrementCursor(bool)>
c00107ac:	5a                   	pop    edx
c00107ad:	59                   	pop    ecx
c00107ae:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00107b4:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00107ba:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00107c0:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00107c6:	6a 20                	push   0x20
c00107c8:	53                   	push   ebx
c00107c9:	e8 ee fa ff ff       	call   c00102bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107ce:	83 c4 28             	add    esp,0x28
c00107d1:	5b                   	pop    ebx
c00107d2:	c3                   	ret    
c00107d3:	83 ec 08             	sub    esp,0x8
c00107d6:	0f be c0             	movsx  eax,al
c00107d9:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00107df:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00107e5:	51                   	push   ecx
c00107e6:	52                   	push   edx
c00107e7:	50                   	push   eax
c00107e8:	53                   	push   ebx
c00107e9:	e8 ce fa ff ff       	call   c00102bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107ee:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00107f2:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00107fa:	83 c4 28             	add    esp,0x28
c00107fd:	5b                   	pop    ebx
c00107fe:	e9 87 fb ff ff       	jmp    c001038a <VgaText::incrementCursor(bool)>
c0010803:	90                   	nop

c0010804 <VgaText::isShowingCursor()>:
c0010804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010808:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c001080e:	c3                   	ret    
c001080f:	90                   	nop

c0010810 <VgaText::isBlinkDisabled()>:
c0010810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010814:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c001081a:	83 f0 01             	xor    eax,0x1
c001081d:	c3                   	ret    

c001081e <VgaText::setCursorHeight(int)>:
c001081e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010822:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010826:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c001082c:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010833:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010837:	e9 92 f8 ff ff       	jmp    c00100ce <VgaText::showCursor(bool)>

c001083c <VgaText::getCursorHeight()>:
c001083c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010840:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010846:	c3                   	ret    

c0010847 <setActiveTerminal(VgaText*)>:
c0010847:	53                   	push   ebx
c0010848:	83 ec 08             	sub    esp,0x8
c001084b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001084f:	85 db                	test   ebx,ebx
c0010851:	75 11                	jne    c0010864 <setActiveTerminal(VgaText*)+0x1d>
c0010853:	c7 44 24 10 90 8b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028b90
c001085b:	83 c4 08             	add    esp,0x8
c001085e:	5b                   	pop    ebx
c001085f:	e9 3b 8f 00 00       	jmp    c001979f <Krnl::panic(char const*)>
c0010864:	50                   	push   eax
c0010865:	50                   	push   eax
c0010866:	53                   	push   ebx
c0010867:	68 9e 8b 02 c0       	push   0xc0028b9e
c001086c:	e8 14 1e 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0010871:	a1 24 c9 02 c0       	mov    eax,ds:0xc002c924
c0010876:	83 c4 10             	add    esp,0x10
c0010879:	85 c0                	test   eax,eax
c001087b:	74 0c                	je     c0010889 <setActiveTerminal(VgaText*)+0x42>
c001087d:	83 ec 0c             	sub    esp,0xc
c0010880:	50                   	push   eax
c0010881:	e8 2e f8 ff ff       	call   c00100b4 <VgaText::updateCursor()>
c0010886:	83 c4 10             	add    esp,0x10
c0010889:	89 1d 24 c9 02 c0    	mov    DWORD PTR ds:0xc002c924,ebx
c001088f:	51                   	push   ecx
c0010890:	51                   	push   ecx
c0010891:	53                   	push   ebx
c0010892:	68 b6 8b 02 c0       	push   0xc0028bb6
c0010897:	e8 e9 1d 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001089c:	83 c4 0c             	add    esp,0xc
c001089f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00108a5:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00108ab:	53                   	push   ebx
c00108ac:	e8 83 fa ff ff       	call   c0010334 <VgaText::setCursor(int, int)>
c00108b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108b4:	e8 57 ff ff ff       	call   c0010810 <VgaText::isBlinkDisabled()>
c00108b9:	5a                   	pop    edx
c00108ba:	0f b6 c0             	movzx  eax,al
c00108bd:	59                   	pop    ecx
c00108be:	50                   	push   eax
c00108bf:	53                   	push   ebx
c00108c0:	e8 19 f8 ff ff       	call   c00100de <VgaText::disableBlink(bool)>
c00108c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108c8:	e8 6f ff ff ff       	call   c001083c <VgaText::getCursorHeight()>
c00108cd:	5a                   	pop    edx
c00108ce:	59                   	pop    ecx
c00108cf:	50                   	push   eax
c00108d0:	53                   	push   ebx
c00108d1:	e8 48 ff ff ff       	call   c001081e <VgaText::setCursorHeight(int)>
c00108d6:	83 c4 10             	add    esp,0x10
c00108d9:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00108e0:	75 0a                	jne    c00108ec <setActiveTerminal(VgaText*)+0xa5>
c00108e2:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c00108ec:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108f0:	83 c4 08             	add    esp,0x8
c00108f3:	5b                   	pop    ebx
c00108f4:	e9 67 f7 ff ff       	jmp    c0010060 <VgaText::load()>

c00108f9 <doTerminalCycle()>:
c00108f9:	83 ec 18             	sub    esp,0x18
c00108fc:	a1 20 c9 02 c0       	mov    eax,ds:0xc002c920
c0010901:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010907:	50                   	push   eax
c0010908:	a3 20 c9 02 c0       	mov    ds:0xc002c920,eax
c001090d:	e8 35 ff ff ff       	call   c0010847 <setActiveTerminal(VgaText*)>
c0010912:	83 c4 1c             	add    esp,0x1c
c0010915:	c3                   	ret    

c0010916 <VgaText::doUpdate()>:
c0010916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001091a:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010920:	85 c0                	test   eax,eax
c0010922:	74 02                	je     c0010926 <VgaText::doUpdate()+0x10>
c0010924:	ff e0                	jmp    eax
c0010926:	c3                   	ret    
c0010927:	90                   	nop

c0010928 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010928:	55                   	push   ebp
c0010929:	57                   	push   edi
c001092a:	56                   	push   esi
c001092b:	53                   	push   ebx
c001092c:	83 ec 1c             	sub    esp,0x1c
c001092f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010933:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010938:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c001093f:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010942:	50                   	push   eax
c0010943:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010948:	50                   	push   eax
c0010949:	e8 a2 f8 ff ff       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c001094e:	59                   	pop    ecx
c001094f:	0f b6 c0             	movzx  eax,al
c0010952:	5b                   	pop    ebx
c0010953:	31 c9                	xor    ecx,ecx
c0010955:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001095d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010961:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010967:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001096b:	0f b7 db             	movzx  ebx,bx
c001096e:	01 db                	add    ebx,ebx
c0010970:	01 fb                	add    ebx,edi
c0010972:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010975:	84 c0                	test   al,al
c0010977:	0f 84 38 01 00 00    	je     c0010ab5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c001097d:	3c 0d                	cmp    al,0xd
c001097f:	75 0f                	jne    c0010990 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010981:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c001098b:	e9 1f 01 00 00       	jmp    c0010aaf <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010990:	3c 0a                	cmp    al,0xa
c0010992:	75 5b                	jne    c00109ef <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010994:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c001099a:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00109a4:	8d 48 01             	lea    ecx,[eax+0x1]
c00109a7:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00109ad:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c00109b3:	75 12                	jne    c00109c7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00109b5:	83 ec 0c             	sub    esp,0xc
c00109b8:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c00109be:	55                   	push   ebp
c00109bf:	e8 4a f8 ff ff       	call   c001020e <VgaText::scrollScreen()>
c00109c4:	83 c4 10             	add    esp,0x10
c00109c7:	83 ec 0c             	sub    esp,0xc
c00109ca:	55                   	push   ebp
c00109cb:	e8 e4 f6 ff ff       	call   c00100b4 <VgaText::updateCursor()>
c00109d0:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00109d8:	83 c4 10             	add    esp,0x10
c00109db:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00109e1:	31 c9                	xor    ecx,ecx
c00109e3:	0f b7 db             	movzx  ebx,bx
c00109e6:	01 db                	add    ebx,ebx
c00109e8:	01 fb                	add    ebx,edi
c00109ea:	e9 c0 00 00 00       	jmp    c0010aaf <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00109ef:	3c 08                	cmp    al,0x8
c00109f1:	75 4e                	jne    c0010a41 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c00109f3:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00109f7:	53                   	push   ebx
c00109f8:	53                   	push   ebx
c00109f9:	6a 01                	push   0x1
c00109fb:	55                   	push   ebp
c00109fc:	e8 df fc ff ff       	call   c00106e0 <VgaText::decrementCursor(bool)>
c0010a01:	58                   	pop    eax
c0010a02:	5a                   	pop    edx
c0010a03:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010a09:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010a0f:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010a15:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010a1b:	6a 20                	push   0x20
c0010a1d:	55                   	push   ebp
c0010a1e:	e8 99 f8 ff ff       	call   c00102bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a23:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010a2b:	83 c4 20             	add    esp,0x20
c0010a2e:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010a34:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010a38:	0f b7 db             	movzx  ebx,bx
c0010a3b:	01 db                	add    ebx,ebx
c0010a3d:	01 fb                	add    ebx,edi
c0010a3f:	eb 6e                	jmp    c0010aaf <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010a41:	51                   	push   ecx
c0010a42:	51                   	push   ecx
c0010a43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010a47:	50                   	push   eax
c0010a48:	e8 5d f8 ff ff       	call   c00102aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010a4d:	83 c4 10             	add    esp,0x10
c0010a50:	66 89 03             	mov    WORD PTR [ebx],ax
c0010a53:	39 2d 24 c9 02 c0    	cmp    DWORD PTR ds:0xc002c924,ebp
c0010a59:	75 2a                	jne    c0010a85 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a5b:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010a61:	85 c0                	test   eax,eax
c0010a63:	74 20                	je     c0010a85 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a65:	52                   	push   edx
c0010a66:	52                   	push   edx
c0010a67:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010a6d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010a73:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a77:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a7b:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010a7e:	51                   	push   ecx
c0010a7f:	55                   	push   ebp
c0010a80:	ff d0                	call   eax
c0010a82:	83 c4 20             	add    esp,0x20
c0010a85:	83 c3 02             	add    ebx,0x2
c0010a88:	50                   	push   eax
c0010a89:	50                   	push   eax
c0010a8a:	6a 00                	push   0x0
c0010a8c:	55                   	push   ebp
c0010a8d:	e8 f8 f8 ff ff       	call   c001038a <VgaText::incrementCursor(bool)>
c0010a92:	83 c4 10             	add    esp,0x10
c0010a95:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010a9c:	75 0f                	jne    c0010aad <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010a9e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010aa6:	0f b7 db             	movzx  ebx,bx
c0010aa9:	01 db                	add    ebx,ebx
c0010aab:	01 fb                	add    ebx,edi
c0010aad:	b1 01                	mov    cl,0x1
c0010aaf:	46                   	inc    esi
c0010ab0:	e9 bd fe ff ff       	jmp    c0010972 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010ab5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010ab9:	83 ec 0c             	sub    esp,0xc
c0010abc:	55                   	push   ebp
c0010abd:	e8 f2 f5 ff ff       	call   c00100b4 <VgaText::updateCursor()>
c0010ac2:	83 c4 10             	add    esp,0x10
c0010ac5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010ac9:	84 c9                	test   cl,cl
c0010acb:	74 0c                	je     c0010ad9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010acd:	83 ec 0c             	sub    esp,0xc
c0010ad0:	55                   	push   ebp
c0010ad1:	e8 40 fe ff ff       	call   c0010916 <VgaText::doUpdate()>
c0010ad6:	83 c4 10             	add    esp,0x10
c0010ad9:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010ae0:	83 c4 1c             	add    esp,0x1c
c0010ae3:	5b                   	pop    ebx
c0010ae4:	5e                   	pop    esi
c0010ae5:	5f                   	pop    edi
c0010ae6:	5d                   	pop    ebp
c0010ae7:	c3                   	ret    

c0010ae8 <VgaText::clearScreen()>:
c0010ae8:	57                   	push   edi
c0010ae9:	56                   	push   esi
c0010aea:	31 f6                	xor    esi,esi
c0010aec:	53                   	push   ebx
c0010aed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010af1:	52                   	push   edx
c0010af2:	6a 00                	push   0x0
c0010af4:	6a 00                	push   0x0
c0010af6:	53                   	push   ebx
c0010af7:	e8 38 f8 ff ff       	call   c0010334 <VgaText::setCursor(int, int)>
c0010afc:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010b03:	83 c4 10             	add    esp,0x10
c0010b06:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010b0c:	7e 26                	jle    c0010b34 <VgaText::clearScreen()+0x4c>
c0010b0e:	31 ff                	xor    edi,edi
c0010b10:	50                   	push   eax
c0010b11:	50                   	push   eax
c0010b12:	56                   	push   esi
c0010b13:	57                   	push   edi
c0010b14:	47                   	inc    edi
c0010b15:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010b1b:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010b21:	6a 20                	push   0x20
c0010b23:	53                   	push   ebx
c0010b24:	e8 93 f7 ff ff       	call   c00102bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010b29:	83 c4 20             	add    esp,0x20
c0010b2c:	83 ff 50             	cmp    edi,0x50
c0010b2f:	75 df                	jne    c0010b10 <VgaText::clearScreen()+0x28>
c0010b31:	46                   	inc    esi
c0010b32:	eb d2                	jmp    c0010b06 <VgaText::clearScreen()+0x1e>
c0010b34:	83 ec 0c             	sub    esp,0xc
c0010b37:	53                   	push   ebx
c0010b38:	e8 d9 fd ff ff       	call   c0010916 <VgaText::doUpdate()>
c0010b3d:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010b44:	83 c4 10             	add    esp,0x10
c0010b47:	5b                   	pop    ebx
c0010b48:	5e                   	pop    esi
c0010b49:	5f                   	pop    edi
c0010b4a:	c3                   	ret    
c0010b4b:	90                   	nop

c0010b4c <VgaText::putchar(char)>:
c0010b4c:	56                   	push   esi
c0010b4d:	53                   	push   ebx
c0010b4e:	83 ec 14             	sub    esp,0x14
c0010b51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b55:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b59:	3c 5b                	cmp    al,0x5b
c0010b5b:	75 21                	jne    c0010b7e <VgaText::putchar(char)+0x32>
c0010b5d:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010b64:	74 28                	je     c0010b8e <VgaText::putchar(char)+0x42>
c0010b66:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010b6f:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010b79:	e9 e2 00 00 00       	jmp    c0010c60 <VgaText::putchar(char)+0x114>
c0010b7e:	3c 1b                	cmp    al,0x1b
c0010b80:	75 0c                	jne    c0010b8e <VgaText::putchar(char)+0x42>
c0010b82:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010b89:	e9 d2 00 00 00       	jmp    c0010c60 <VgaText::putchar(char)+0x114>
c0010b8e:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010b94:	84 c9                	test   cl,cl
c0010b96:	0f 84 ab 00 00 00    	je     c0010c47 <VgaText::putchar(char)+0xfb>
c0010b9c:	8d 50 c0             	lea    edx,[eax-0x40]
c0010b9f:	80 fa 3e             	cmp    dl,0x3e
c0010ba2:	0f 87 82 00 00 00    	ja     c0010c2a <VgaText::putchar(char)+0xde>
c0010ba8:	3c 6d                	cmp    al,0x6d
c0010baa:	75 4d                	jne    c0010bf9 <VgaText::putchar(char)+0xad>
c0010bac:	31 f6                	xor    esi,esi
c0010bae:	31 d2                	xor    edx,edx
c0010bb0:	31 c0                	xor    eax,eax
c0010bb2:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010bb8:	7e 30                	jle    c0010bea <VgaText::putchar(char)+0x9e>
c0010bba:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010bc2:	80 fa 3b             	cmp    dl,0x3b
c0010bc5:	75 17                	jne    c0010bde <VgaText::putchar(char)+0x92>
c0010bc7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010bcb:	50                   	push   eax
c0010bcc:	53                   	push   ebx
c0010bcd:	e8 46 f5 ff ff       	call   c0010118 <VgaText::doANSI_SGR(int)>
c0010bd2:	59                   	pop    ecx
c0010bd3:	31 d2                	xor    edx,edx
c0010bd5:	58                   	pop    eax
c0010bd6:	31 c0                	xor    eax,eax
c0010bd8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010bdc:	eb 09                	jmp    c0010be7 <VgaText::putchar(char)+0x9b>
c0010bde:	6b c0 0a             	imul   eax,eax,0xa
c0010be1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010be5:	88 ca                	mov    dl,cl
c0010be7:	46                   	inc    esi
c0010be8:	eb c8                	jmp    c0010bb2 <VgaText::putchar(char)+0x66>
c0010bea:	84 d2                	test   dl,dl
c0010bec:	74 31                	je     c0010c1f <VgaText::putchar(char)+0xd3>
c0010bee:	50                   	push   eax
c0010bef:	53                   	push   ebx
c0010bf0:	e8 23 f5 ff ff       	call   c0010118 <VgaText::doANSI_SGR(int)>
c0010bf5:	58                   	pop    eax
c0010bf6:	5a                   	pop    edx
c0010bf7:	eb 26                	jmp    c0010c1f <VgaText::putchar(char)+0xd3>
c0010bf9:	3c 4a                	cmp    al,0x4a
c0010bfb:	75 22                	jne    c0010c1f <VgaText::putchar(char)+0xd3>
c0010bfd:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010c04:	75 19                	jne    c0010c1f <VgaText::putchar(char)+0xd3>
c0010c06:	83 ec 0c             	sub    esp,0xc
c0010c09:	53                   	push   ebx
c0010c0a:	e8 d9 fe ff ff       	call   c0010ae8 <VgaText::clearScreen()>
c0010c0f:	83 c4 0c             	add    esp,0xc
c0010c12:	6a 00                	push   0x0
c0010c14:	6a 00                	push   0x0
c0010c16:	53                   	push   ebx
c0010c17:	e8 18 f7 ff ff       	call   c0010334 <VgaText::setCursor(int, int)>
c0010c1c:	83 c4 10             	add    esp,0x10
c0010c1f:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010c28:	eb 36                	jmp    c0010c60 <VgaText::putchar(char)+0x114>
c0010c2a:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010c30:	83 fa 0e             	cmp    edx,0xe
c0010c33:	7f 2b                	jg     c0010c60 <VgaText::putchar(char)+0x114>
c0010c35:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010c38:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010c3e:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010c45:	eb 19                	jmp    c0010c60 <VgaText::putchar(char)+0x114>
c0010c47:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c4d:	0f be c0             	movsx  eax,al
c0010c50:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c56:	50                   	push   eax
c0010c57:	53                   	push   ebx
c0010c58:	e8 ab fa ff ff       	call   c0010708 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010c5d:	83 c4 10             	add    esp,0x10
c0010c60:	83 c4 14             	add    esp,0x14
c0010c63:	5b                   	pop    ebx
c0010c64:	5e                   	pop    esi
c0010c65:	c3                   	ret    

c0010c66 <VgaText::puts(char const*)>:
c0010c66:	53                   	push   ebx
c0010c67:	83 ec 08             	sub    esp,0x8
c0010c6a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c6e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010c71:	84 c0                	test   al,al
c0010c73:	74 12                	je     c0010c87 <VgaText::puts(char const*)+0x21>
c0010c75:	43                   	inc    ebx
c0010c76:	51                   	push   ecx
c0010c77:	51                   	push   ecx
c0010c78:	50                   	push   eax
c0010c79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c7d:	e8 ca fe ff ff       	call   c0010b4c <VgaText::putchar(char)>
c0010c82:	83 c4 10             	add    esp,0x10
c0010c85:	eb e7                	jmp    c0010c6e <VgaText::puts(char const*)+0x8>
c0010c87:	83 c4 08             	add    esp,0x8
c0010c8a:	5b                   	pop    ebx
c0010c8b:	c3                   	ret    

c0010c8c <VgaText::putx(unsigned int)>:
c0010c8c:	57                   	push   edi
c0010c8d:	b9 11 00 00 00       	mov    ecx,0x11
c0010c92:	56                   	push   esi
c0010c93:	be d2 8b 02 c0       	mov    esi,0xc0028bd2
c0010c98:	53                   	push   ebx
c0010c99:	83 ec 20             	sub    esp,0x20
c0010c9c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010ca0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010ca4:	fc                   	cld    
c0010ca5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ca7:	be 08 00 00 00       	mov    esi,0x8
c0010cac:	50                   	push   eax
c0010cad:	50                   	push   eax
c0010cae:	89 d8                	mov    eax,ebx
c0010cb0:	c1 e3 04             	shl    ebx,0x4
c0010cb3:	c1 e8 1c             	shr    eax,0x1c
c0010cb6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010cbb:	50                   	push   eax
c0010cbc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010cc0:	e8 87 fe ff ff       	call   c0010b4c <VgaText::putchar(char)>
c0010cc5:	83 c4 10             	add    esp,0x10
c0010cc8:	4e                   	dec    esi
c0010cc9:	75 e1                	jne    c0010cac <VgaText::putx(unsigned int)+0x20>
c0010ccb:	83 c4 20             	add    esp,0x20
c0010cce:	5b                   	pop    ebx
c0010ccf:	5e                   	pop    esi
c0010cd0:	5f                   	pop    edi
c0010cd1:	c3                   	ret    

c0010cd2 <VgaText::VgaText(char const*)>:
c0010cd2:	57                   	push   edi
c0010cd3:	56                   	push   esi
c0010cd4:	53                   	push   ebx
c0010cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cd9:	83 ec 08             	sub    esp,0x8
c0010cdc:	6a 00                	push   0x0
c0010cde:	50                   	push   eax
c0010cdf:	e8 6e 05 00 00       	call   c0011252 <UnixFile::UnixFile(int)>
c0010ce4:	83 c4 10             	add    esp,0x10
c0010ce7:	ba 38 8c 02 c0       	mov    edx,0xc0028c38
c0010cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf0:	89 10                	mov    DWORD PTR [eax],edx
c0010cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf6:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d04:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d12:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010d19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d1d:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d28:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d36:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d44:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d4f:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d5a:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010d60:	bb 00 c9 02 c0       	mov    ebx,0xc002c900
c0010d65:	b8 08 00 00 00       	mov    eax,0x8
c0010d6a:	fc                   	cld    
c0010d6b:	89 d7                	mov    edi,edx
c0010d6d:	89 de                	mov    esi,ebx
c0010d6f:	89 c1                	mov    ecx,eax
c0010d71:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d77:	05 1e 10 00 00       	add    eax,0x101e
c0010d7c:	83 ec 08             	sub    esp,0x8
c0010d7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d83:	50                   	push   eax
c0010d84:	e8 a1 f9 fe ff       	call   c000072a <strcpy>
c0010d89:	83 c4 10             	add    esp,0x10
c0010d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d90:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d9e:	83 c0 0c             	add    eax,0xc
c0010da1:	83 ec 04             	sub    esp,0x4
c0010da4:	68 00 0f 00 00       	push   0xf00
c0010da9:	6a 00                	push   0x0
c0010dab:	50                   	push   eax
c0010dac:	e8 da f8 fe ff       	call   c000068b <memset>
c0010db1:	83 c4 10             	add    esp,0x10
c0010db4:	83 ec 04             	sub    esp,0x4
c0010db7:	6a 00                	push   0x0
c0010db9:	6a 07                	push   0x7
c0010dbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dbf:	e8 0c f4 ff ff       	call   c00101d0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010dc4:	83 c4 10             	add    esp,0x10
c0010dc7:	83 ec 08             	sub    esp,0x8
c0010dca:	6a 02                	push   0x2
c0010dcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dd0:	e8 49 fa ff ff       	call   c001081e <VgaText::setCursorHeight(int)>
c0010dd5:	83 c4 10             	add    esp,0x10
c0010dd8:	83 ec 04             	sub    esp,0x4
c0010ddb:	6a 00                	push   0x0
c0010ddd:	6a 00                	push   0x0
c0010ddf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010de3:	e8 4c f5 ff ff       	call   c0010334 <VgaText::setCursor(int, int)>
c0010de8:	83 c4 10             	add    esp,0x10
c0010deb:	83 ec 08             	sub    esp,0x8
c0010dee:	6a 01                	push   0x1
c0010df0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010df4:	e8 d5 f2 ff ff       	call   c00100ce <VgaText::showCursor(bool)>
c0010df9:	83 c4 10             	add    esp,0x10
c0010dfc:	83 ec 08             	sub    esp,0x8
c0010dff:	6a 01                	push   0x1
c0010e01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e05:	e8 d4 f2 ff ff       	call   c00100de <VgaText::disableBlink(bool)>
c0010e0a:	83 c4 10             	add    esp,0x10
c0010e0d:	83 ec 0c             	sub    esp,0xc
c0010e10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e14:	e8 cf fc ff ff       	call   c0010ae8 <VgaText::clearScreen()>
c0010e19:	83 c4 10             	add    esp,0x10
c0010e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e20:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010e27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e2b:	05 9e 10 00 00       	add    eax,0x109e
c0010e30:	83 ec 04             	sub    esp,0x4
c0010e33:	68 96 00 00 00       	push   0x96
c0010e38:	6a 00                	push   0x0
c0010e3a:	50                   	push   eax
c0010e3b:	e8 4b f8 fe ff       	call   c000068b <memset>
c0010e40:	83 c4 10             	add    esp,0x10
c0010e43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e47:	05 34 11 00 00       	add    eax,0x1134
c0010e4c:	83 ec 04             	sub    esp,0x4
c0010e4f:	68 2c 01 00 00       	push   0x12c
c0010e54:	6a 00                	push   0x0
c0010e56:	50                   	push   eax
c0010e57:	e8 2f f8 fe ff       	call   c000068b <memset>
c0010e5c:	83 c4 10             	add    esp,0x10
c0010e5f:	90                   	nop
c0010e60:	5b                   	pop    ebx
c0010e61:	5e                   	pop    esi
c0010e62:	5f                   	pop    edi
c0010e63:	c3                   	ret    

c0010e64 <VgaText::receiveKey(unsigned char)>:
c0010e64:	55                   	push   ebp
c0010e65:	57                   	push   edi
c0010e66:	56                   	push   esi
c0010e67:	53                   	push   ebx
c0010e68:	83 ec 1c             	sub    esp,0x1c
c0010e6b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010e6f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e73:	84 db                	test   bl,bl
c0010e75:	0f 84 c9 00 00 00    	je     c0010f44 <VgaText::receiveKey(unsigned char)+0xe0>
c0010e7b:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010e81:	80 fb 08             	cmp    bl,0x8
c0010e84:	75 2c                	jne    c0010eb2 <VgaText::receiveKey(unsigned char)+0x4e>
c0010e86:	83 ec 0c             	sub    esp,0xc
c0010e89:	57                   	push   edi
c0010e8a:	e8 19 f8 fe ff       	call   c00006a8 <strlen>
c0010e8f:	83 c4 10             	add    esp,0x10
c0010e92:	85 c0                	test   eax,eax
c0010e94:	74 41                	je     c0010ed7 <VgaText::receiveKey(unsigned char)+0x73>
c0010e96:	50                   	push   eax
c0010e97:	50                   	push   eax
c0010e98:	6a 08                	push   0x8
c0010e9a:	56                   	push   esi
c0010e9b:	e8 ac fc ff ff       	call   c0010b4c <VgaText::putchar(char)>
c0010ea0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ea3:	e8 00 f8 fe ff       	call   c00006a8 <strlen>
c0010ea8:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010eb0:	eb 22                	jmp    c0010ed4 <VgaText::receiveKey(unsigned char)+0x70>
c0010eb2:	0f be c3             	movsx  eax,bl
c0010eb5:	52                   	push   edx
c0010eb6:	52                   	push   edx
c0010eb7:	50                   	push   eax
c0010eb8:	56                   	push   esi
c0010eb9:	e8 8e fc ff ff       	call   c0010b4c <VgaText::putchar(char)>
c0010ebe:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010ec2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010ec7:	59                   	pop    ecx
c0010ec8:	5d                   	pop    ebp
c0010ec9:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010ecd:	50                   	push   eax
c0010ece:	57                   	push   edi
c0010ecf:	e8 0d f9 fe ff       	call   c00007e1 <strcat>
c0010ed4:	83 c4 10             	add    esp,0x10
c0010ed7:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010ede:	75 05                	jne    c0010ee5 <VgaText::receiveKey(unsigned char)+0x81>
c0010ee0:	80 fb 0a             	cmp    bl,0xa
c0010ee3:	75 53                	jne    c0010f38 <VgaText::receiveKey(unsigned char)+0xd4>
c0010ee5:	83 ec 0c             	sub    esp,0xc
c0010ee8:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010eee:	53                   	push   ebx
c0010eef:	e8 b4 f7 fe ff       	call   c00006a8 <strlen>
c0010ef4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ef7:	89 c5                	mov    ebp,eax
c0010ef9:	e8 aa f7 fe ff       	call   c00006a8 <strlen>
c0010efe:	83 c4 10             	add    esp,0x10
c0010f01:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010f05:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010f0a:	76 10                	jbe    c0010f1c <VgaText::receiveKey(unsigned char)+0xb8>
c0010f0c:	83 ec 0c             	sub    esp,0xc
c0010f0f:	68 e3 8b 02 c0       	push   0xc0028be3
c0010f14:	e8 86 88 00 00       	call   c001979f <Krnl::panic(char const*)>
c0010f19:	83 c4 10             	add    esp,0x10
c0010f1c:	50                   	push   eax
c0010f1d:	50                   	push   eax
c0010f1e:	57                   	push   edi
c0010f1f:	53                   	push   ebx
c0010f20:	e8 bc f8 fe ff       	call   c00007e1 <strcat>
c0010f25:	83 c4 0c             	add    esp,0xc
c0010f28:	68 96 00 00 00       	push   0x96
c0010f2d:	6a 00                	push   0x0
c0010f2f:	57                   	push   edi
c0010f30:	e8 56 f7 fe ff       	call   c000068b <memset>
c0010f35:	83 c4 10             	add    esp,0x10
c0010f38:	83 ec 0c             	sub    esp,0xc
c0010f3b:	56                   	push   esi
c0010f3c:	e8 d5 f9 ff ff       	call   c0010916 <VgaText::doUpdate()>
c0010f41:	83 c4 10             	add    esp,0x10
c0010f44:	83 c4 1c             	add    esp,0x1c
c0010f47:	5b                   	pop    ebx
c0010f48:	5e                   	pop    esi
c0010f49:	5f                   	pop    edi
c0010f4a:	5d                   	pop    ebp
c0010f4b:	c3                   	ret    

c0010f4c <VgaText::write(unsigned long long, void*, int*)>:
c0010f4c:	55                   	push   ebp
c0010f4d:	57                   	push   edi
c0010f4e:	56                   	push   esi
c0010f4f:	53                   	push   ebx
c0010f50:	83 ec 0c             	sub    esp,0xc
c0010f53:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010f57:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010f5b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010f5f:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010f66:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010f69:	39 eb                	cmp    ebx,ebp
c0010f6b:	74 13                	je     c0010f80 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010f6d:	43                   	inc    ebx
c0010f6e:	50                   	push   eax
c0010f6f:	50                   	push   eax
c0010f70:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010f74:	50                   	push   eax
c0010f75:	56                   	push   esi
c0010f76:	e8 d1 fb ff ff       	call   c0010b4c <VgaText::putchar(char)>
c0010f7b:	83 c4 10             	add    esp,0x10
c0010f7e:	eb e9                	jmp    c0010f69 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010f80:	83 ec 0c             	sub    esp,0xc
c0010f83:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010f8a:	56                   	push   esi
c0010f8b:	e8 86 f9 ff ff       	call   c0010916 <VgaText::doUpdate()>
c0010f90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f94:	89 38                	mov    DWORD PTR [eax],edi
c0010f96:	83 c4 1c             	add    esp,0x1c
c0010f99:	31 c0                	xor    eax,eax
c0010f9b:	5b                   	pop    ebx
c0010f9c:	5e                   	pop    esi
c0010f9d:	5f                   	pop    edi
c0010f9e:	5d                   	pop    ebp
c0010f9f:	c3                   	ret    

c0010fa0 <newTerminal(char*)>:
c0010fa0:	83 ec 28             	sub    esp,0x28
c0010fa3:	68 60 12 00 00       	push   0x1260
c0010fa8:	e8 27 e5 ff ff       	call   c000f4d4 <malloc>
c0010fad:	5a                   	pop    edx
c0010fae:	59                   	pop    ecx
c0010faf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010fb3:	50                   	push   eax
c0010fb4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fb8:	e8 15 fd ff ff       	call   c0010cd2 <VgaText::VgaText(char const*)>
c0010fbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fc1:	83 c4 2c             	add    esp,0x2c
c0010fc4:	c3                   	ret    
c0010fc5:	90                   	nop

c0010fc6 <TSS::TSS()>:
c0010fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010fd1:	90                   	nop
c0010fd2:	c3                   	ret    
c0010fd3:	90                   	nop

c0010fd4 <TSS::setESP(unsigned long)>:
c0010fd4:	55                   	push   ebp
c0010fd5:	89 e5                	mov    ebp,esp
c0010fd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fdd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010fe0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fe3:	90                   	nop
c0010fe4:	5d                   	pop    ebp
c0010fe5:	c3                   	ret    

c0010fe6 <TSS::flush()>:
c0010fe6:	55                   	push   ebp
c0010fe7:	89 e5                	mov    ebp,esp
c0010fe9:	83 ec 10             	sub    esp,0x10
c0010fec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fef:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ff1:	83 c8 03             	or     eax,0x3
c0010ff4:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010ff8:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010ffc:	66 89 d0             	mov    ax,dx
c0010fff:	0f 00 d8             	ltr    ax
c0011002:	90                   	nop
c0011003:	c9                   	leave  
c0011004:	c3                   	ret    
c0011005:	90                   	nop

c0011006 <TSS::setup(unsigned long, unsigned long)>:
c0011006:	55                   	push   ebp
c0011007:	89 e5                	mov    ebp,esp
c0011009:	83 ec 18             	sub    esp,0x18
c001100c:	83 ec 0c             	sub    esp,0xc
c001100f:	6a 68                	push   0x68
c0011011:	e8 be e4 ff ff       	call   c000f4d4 <malloc>
c0011016:	83 c4 10             	add    esp,0x10
c0011019:	89 c2                	mov    edx,eax
c001101b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001101e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011024:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011027:	83 ec 04             	sub    esp,0x4
c001102a:	6a 68                	push   0x68
c001102c:	6a 00                	push   0x0
c001102e:	50                   	push   eax
c001102f:	e8 57 f6 fe ff       	call   c000068b <memset>
c0011034:	83 c4 10             	add    esp,0x10
c0011037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001103a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001103d:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011043:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011046:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011049:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001104f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011052:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011055:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011058:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001105b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001105e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011061:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001106a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001106d:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011073:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011076:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011079:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001107f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011082:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011085:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001108b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001108e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011091:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001109a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001109d:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00110a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110a9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00110ac:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00110af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110b5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00110b8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00110bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110c1:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00110c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110ce:	0f 20 da             	mov    edx,cr3
c00110d1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00110d4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00110d7:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00110da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110dd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110e0:	83 ec 08             	sub    esp,0x8
c00110e3:	50                   	push   eax
c00110e4:	8d 45 ec             	lea    eax,[ebp-0x14]
c00110e7:	50                   	push   eax
c00110e8:	e8 c5 db ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c00110ed:	83 c4 10             	add    esp,0x10
c00110f0:	83 ec 08             	sub    esp,0x8
c00110f3:	6a 68                	push   0x68
c00110f5:	8d 45 ec             	lea    eax,[ebp-0x14]
c00110f8:	50                   	push   eax
c00110f9:	e8 d0 db ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c00110fe:	83 c4 10             	add    esp,0x10
c0011101:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011105:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011108:	83 e0 0f             	and    eax,0xf
c001110b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001110e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011111:	83 c8 40             	or     eax,0x40
c0011114:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011117:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001111c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011122:	05 78 01 00 00       	add    eax,0x178
c0011127:	83 ec 04             	sub    esp,0x4
c001112a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001112d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011130:	50                   	push   eax
c0011131:	e8 cc db ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c0011136:	83 c4 10             	add    esp,0x10
c0011139:	89 c2                	mov    edx,eax
c001113b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001113e:	89 10                	mov    DWORD PTR [eax],edx
c0011140:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0011145:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001114b:	05 78 01 00 00       	add    eax,0x178
c0011150:	83 ec 0c             	sub    esp,0xc
c0011153:	50                   	push   eax
c0011154:	e8 ed db ff ff       	call   c000ed46 <GDT::flush()>
c0011159:	83 c4 10             	add    esp,0x10
c001115c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001115f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011161:	83 ec 08             	sub    esp,0x8
c0011164:	50                   	push   eax
c0011165:	68 4c 8c 02 c0       	push   0xc0028c4c
c001116a:	e8 16 15 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001116f:	83 c4 10             	add    esp,0x10
c0011172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011175:	8b 00                	mov    eax,DWORD PTR [eax]
c0011177:	c9                   	leave  
c0011178:	c3                   	ret    
c0011179:	90                   	nop

c001117a <ReservedFilename::read(unsigned long long, void*, int*)>:
c001117a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001117e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011182:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011185:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001118a:	75 08                	jne    c0011194 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001118c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011192:	eb 38                	jmp    c00111cc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011194:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011199:	75 17                	jne    c00111b2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001119b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00111a3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00111a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00111ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111af:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00111b2:	89 c1                	mov    ecx,eax
c00111b4:	83 e1 fd             	and    ecx,0xfffffffd
c00111b7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00111bd:	74 cd                	je     c001118c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00111bf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00111c4:	83 e0 ef             	and    eax,0xffffffef
c00111c7:	83 f8 08             	cmp    eax,0x8
c00111ca:	76 c0                	jbe    c001118c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00111cc:	31 c0                	xor    eax,eax
c00111ce:	c3                   	ret    
c00111cf:	90                   	nop

c00111d0 <ReservedFilename::isAtty()>:
c00111d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111d4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00111d7:	31 c0                	xor    eax,eax
c00111d9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00111df:	74 09                	je     c00111ea <ReservedFilename::isAtty()+0x1a>
c00111e1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00111e7:	0f 94 c0             	sete   al
c00111ea:	c3                   	ret    
c00111eb:	90                   	nop

c00111ec <ReservedFilename::write(unsigned long long, void*, int*)>:
c00111ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00111f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00111fb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011200:	75 08                	jne    c001120a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011202:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011208:	eb 3d                	jmp    c0011247 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001120a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001120f:	75 17                	jne    c0011228 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011211:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011216:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011219:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001121f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011221:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011225:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011228:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001122d:	75 04                	jne    c0011233 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001122f:	89 0a                	mov    DWORD PTR [edx],ecx
c0011231:	eb 14                	jmp    c0011247 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011233:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011238:	74 c8                	je     c0011202 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001123a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001123f:	83 e0 ef             	and    eax,0xffffffef
c0011242:	83 f8 08             	cmp    eax,0x8
c0011245:	76 bb                	jbe    c0011202 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011247:	31 c0                	xor    eax,eax
c0011249:	c3                   	ret    

c001124a <UnixFile::getFileDescriptor()>:
c001124a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001124e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011251:	c3                   	ret    

c0011252 <UnixFile::UnixFile(int)>:
c0011252:	53                   	push   ebx
c0011253:	83 ec 28             	sub    esp,0x28
c0011256:	ba 38 8d 02 c0       	mov    edx,0xc0028d38
c001125b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001125f:	89 10                	mov    DWORD PTR [eax],edx
c0011261:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011269:	0f 8f 8c 01 00 00    	jg     c00113fb <UnixFile::UnixFile(int)+0x1a9>
c001126f:	a1 e0 b7 02 c0       	mov    eax,ds:0xc002b7e0
c0011274:	8d 50 01             	lea    edx,[eax+0x1]
c0011277:	89 15 e0 b7 02 c0    	mov    DWORD PTR ds:0xc002b7e0,edx
c001127d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011281:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011284:	83 ec 08             	sub    esp,0x8
c0011287:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001128b:	68 b8 c9 02 c0       	push   0xc002c9b8
c0011290:	e8 9b 5d 01 00       	call   c0027030 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011295:	83 c4 10             	add    esp,0x10
c0011298:	a0 b4 c9 02 c0       	mov    al,ds:0xc002c9b4
c001129d:	83 f0 01             	xor    eax,0x1
c00112a0:	84 c0                	test   al,al
c00112a2:	0f 84 54 01 00 00    	je     c00113fc <UnixFile::UnixFile(int)+0x1aa>
c00112a8:	c6 05 b4 c9 02 c0 01 	mov    BYTE PTR ds:0xc002c9b4,0x1
c00112af:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00112b7:	83 ec 0c             	sub    esp,0xc
c00112ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112be:	e8 11 e2 ff ff       	call   c000f4d4 <malloc>
c00112c3:	83 c4 10             	add    esp,0x10
c00112c6:	89 c3                	mov    ebx,eax
c00112c8:	83 ec 08             	sub    esp,0x8
c00112cb:	68 03 ff ff 0f       	push   0xfffff03
c00112d0:	53                   	push   ebx
c00112d1:	e8 2c 01 00 00       	call   c0011402 <ReservedFilename::ReservedFilename(int)>
c00112d6:	83 c4 10             	add    esp,0x10
c00112d9:	89 1d ac c9 02 c0    	mov    DWORD PTR ds:0xc002c9ac,ebx
c00112df:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00112e7:	83 ec 0c             	sub    esp,0xc
c00112ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ee:	e8 e1 e1 ff ff       	call   c000f4d4 <malloc>
c00112f3:	83 c4 10             	add    esp,0x10
c00112f6:	89 c3                	mov    ebx,eax
c00112f8:	83 ec 08             	sub    esp,0x8
c00112fb:	68 01 ff ff 0f       	push   0xfffff01
c0011300:	53                   	push   ebx
c0011301:	e8 fc 00 00 00       	call   c0011402 <ReservedFilename::ReservedFilename(int)>
c0011306:	83 c4 10             	add    esp,0x10
c0011309:	89 1d b0 c9 02 c0    	mov    DWORD PTR ds:0xc002c9b0,ebx
c001130f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011317:	83 ec 0c             	sub    esp,0xc
c001131a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001131e:	e8 b1 e1 ff ff       	call   c000f4d4 <malloc>
c0011323:	83 c4 10             	add    esp,0x10
c0011326:	89 c3                	mov    ebx,eax
c0011328:	83 ec 08             	sub    esp,0x8
c001132b:	68 00 ff ff 0f       	push   0xfffff00
c0011330:	53                   	push   ebx
c0011331:	e8 cc 00 00 00       	call   c0011402 <ReservedFilename::ReservedFilename(int)>
c0011336:	83 c4 10             	add    esp,0x10
c0011339:	89 1d a4 c9 02 c0    	mov    DWORD PTR ds:0xc002c9a4,ebx
c001133f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011347:	83 ec 0c             	sub    esp,0xc
c001134a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001134e:	e8 81 e1 ff ff       	call   c000f4d4 <malloc>
c0011353:	83 c4 10             	add    esp,0x10
c0011356:	89 c3                	mov    ebx,eax
c0011358:	83 ec 08             	sub    esp,0x8
c001135b:	68 02 ff ff 0f       	push   0xfffff02
c0011360:	53                   	push   ebx
c0011361:	e8 9c 00 00 00       	call   c0011402 <ReservedFilename::ReservedFilename(int)>
c0011366:	83 c4 10             	add    esp,0x10
c0011369:	89 1d a8 c9 02 c0    	mov    DWORD PTR ds:0xc002c9a8,ebx
c001136f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011377:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001137c:	7f 7e                	jg     c00113fc <UnixFile::UnixFile(int)+0x1aa>
c001137e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011386:	83 ec 0c             	sub    esp,0xc
c0011389:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001138d:	e8 42 e1 ff ff       	call   c000f4d4 <malloc>
c0011392:	83 c4 10             	add    esp,0x10
c0011395:	89 c3                	mov    ebx,eax
c0011397:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001139b:	05 10 ff ff 0f       	add    eax,0xfffff10
c00113a0:	83 ec 08             	sub    esp,0x8
c00113a3:	50                   	push   eax
c00113a4:	53                   	push   ebx
c00113a5:	e8 58 00 00 00       	call   c0011402 <ReservedFilename::ReservedFilename(int)>
c00113aa:	83 c4 10             	add    esp,0x10
c00113ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113b1:	89 1c 85 80 c9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3680],ebx
c00113b8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00113c0:	83 ec 0c             	sub    esp,0xc
c00113c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00113c7:	e8 08 e1 ff ff       	call   c000f4d4 <malloc>
c00113cc:	83 c4 10             	add    esp,0x10
c00113cf:	89 c3                	mov    ebx,eax
c00113d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113d5:	05 20 ff ff 0f       	add    eax,0xfffff20
c00113da:	83 ec 08             	sub    esp,0x8
c00113dd:	50                   	push   eax
c00113de:	53                   	push   ebx
c00113df:	e8 1e 00 00 00       	call   c0011402 <ReservedFilename::ReservedFilename(int)>
c00113e4:	83 c4 10             	add    esp,0x10
c00113e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113eb:	89 1c 85 40 c9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd36c0],ebx
c00113f2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00113f6:	e9 7c ff ff ff       	jmp    c0011377 <UnixFile::UnixFile(int)+0x125>
c00113fb:	90                   	nop
c00113fc:	83 c4 28             	add    esp,0x28
c00113ff:	5b                   	pop    ebx
c0011400:	c3                   	ret    
c0011401:	90                   	nop

c0011402 <ReservedFilename::ReservedFilename(int)>:
c0011402:	83 ec 0c             	sub    esp,0xc
c0011405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011409:	83 ec 08             	sub    esp,0x8
c001140c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011410:	50                   	push   eax
c0011411:	e8 3c fe ff ff       	call   c0011252 <UnixFile::UnixFile(int)>
c0011416:	83 c4 10             	add    esp,0x10
c0011419:	ba 54 8d 02 c0       	mov    edx,0xc0028d54
c001141e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011422:	89 10                	mov    DWORD PTR [eax],edx
c0011424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011428:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001142c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001142f:	90                   	nop
c0011430:	83 c4 0c             	add    esp,0xc
c0011433:	c3                   	ret    

c0011434 <UnixFile::~UnixFile()>:
c0011434:	83 ec 1c             	sub    esp,0x1c
c0011437:	ba 38 8d 02 c0       	mov    edx,0xc0028d38
c001143c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011440:	89 10                	mov    DWORD PTR [eax],edx
c0011442:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011446:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011449:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001144e:	7f 73                	jg     c00114c3 <UnixFile::~UnixFile()+0x8f>
c0011450:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011458:	83 ec 0c             	sub    esp,0xc
c001145b:	68 b8 c9 02 c0       	push   0xc002c9b8
c0011460:	e8 9f 5c 01 00       	call   c0027104 <LinkedList<UnixFile>::getFirstElement()>
c0011465:	83 c4 10             	add    esp,0x10
c0011468:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001146c:	83 ec 0c             	sub    esp,0xc
c001146f:	68 b8 c9 02 c0       	push   0xc002c9b8
c0011474:	e8 93 5c 01 00       	call   c002710c <LinkedList<UnixFile>::removeFirst()>
c0011479:	83 c4 10             	add    esp,0x10
c001147c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011480:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011484:	74 40                	je     c00114c6 <UnixFile::~UnixFile()+0x92>
c0011486:	83 ec 08             	sub    esp,0x8
c0011489:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001148d:	68 b8 c9 02 c0       	push   0xc002c9b8
c0011492:	e8 99 5b 01 00       	call   c0027030 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011497:	83 c4 10             	add    esp,0x10
c001149a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001149e:	8d 50 01             	lea    edx,[eax+0x1]
c00114a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00114a5:	3d 88 13 00 00       	cmp    eax,0x1388
c00114aa:	0f 94 c0             	sete   al
c00114ad:	84 c0                	test   al,al
c00114af:	74 a7                	je     c0011458 <UnixFile::~UnixFile()+0x24>
c00114b1:	83 ec 0c             	sub    esp,0xc
c00114b4:	68 10 8d 02 c0       	push   0xc0028d10
c00114b9:	e8 e1 82 00 00       	call   c001979f <Krnl::panic(char const*)>
c00114be:	83 c4 10             	add    esp,0x10
c00114c1:	eb 95                	jmp    c0011458 <UnixFile::~UnixFile()+0x24>
c00114c3:	90                   	nop
c00114c4:	eb 01                	jmp    c00114c7 <UnixFile::~UnixFile()+0x93>
c00114c6:	90                   	nop
c00114c7:	90                   	nop
c00114c8:	83 c4 1c             	add    esp,0x1c
c00114cb:	c3                   	ret    

c00114cc <UnixFile::~UnixFile()>:
c00114cc:	83 ec 0c             	sub    esp,0xc
c00114cf:	83 ec 0c             	sub    esp,0xc
c00114d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114d6:	e8 59 ff ff ff       	call   c0011434 <UnixFile::~UnixFile()>
c00114db:	83 c4 10             	add    esp,0x10
c00114de:	83 ec 08             	sub    esp,0x8
c00114e1:	6a 0c                	push   0xc
c00114e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114e7:	e8 b9 10 00 00       	call   c00125a5 <operator delete(void*, unsigned long)>
c00114ec:	83 c4 10             	add    esp,0x10
c00114ef:	83 c4 0c             	add    esp,0xc
c00114f2:	c3                   	ret    
c00114f3:	90                   	nop

c00114f4 <ReservedFilename::~ReservedFilename()>:
c00114f4:	83 ec 0c             	sub    esp,0xc
c00114f7:	ba 54 8d 02 c0       	mov    edx,0xc0028d54
c00114fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011500:	89 10                	mov    DWORD PTR [eax],edx
c0011502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011506:	83 ec 0c             	sub    esp,0xc
c0011509:	50                   	push   eax
c001150a:	e8 25 ff ff ff       	call   c0011434 <UnixFile::~UnixFile()>
c001150f:	83 c4 10             	add    esp,0x10
c0011512:	90                   	nop
c0011513:	83 c4 0c             	add    esp,0xc
c0011516:	c3                   	ret    
c0011517:	90                   	nop

c0011518 <ReservedFilename::~ReservedFilename()>:
c0011518:	83 ec 0c             	sub    esp,0xc
c001151b:	83 ec 0c             	sub    esp,0xc
c001151e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011522:	e8 cd ff ff ff       	call   c00114f4 <ReservedFilename::~ReservedFilename()>
c0011527:	83 c4 10             	add    esp,0x10
c001152a:	83 ec 08             	sub    esp,0x8
c001152d:	6a 0c                	push   0xc
c001152f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011533:	e8 6d 10 00 00       	call   c00125a5 <operator delete(void*, unsigned long)>
c0011538:	83 c4 10             	add    esp,0x10
c001153b:	83 c4 0c             	add    esp,0xc
c001153e:	c3                   	ret    

c001153f <getFromFileDescriptor(int)>:
c001153f:	53                   	push   ebx
c0011540:	83 ec 08             	sub    esp,0x8
c0011543:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011547:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001154d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011553:	7f 2c                	jg     c0011581 <getFromFileDescriptor(int)+0x42>
c0011555:	83 ec 0c             	sub    esp,0xc
c0011558:	68 b8 c9 02 c0       	push   0xc002c9b8
c001155d:	e8 a2 5b 01 00       	call   c0027104 <LinkedList<UnixFile>::getFirstElement()>
c0011562:	83 c4 10             	add    esp,0x10
c0011565:	85 c0                	test   eax,eax
c0011567:	75 04                	jne    c001156d <getFromFileDescriptor(int)+0x2e>
c0011569:	31 c0                	xor    eax,eax
c001156b:	eb 6e                	jmp    c00115db <getFromFileDescriptor(int)+0x9c>
c001156d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011570:	74 69                	je     c00115db <getFromFileDescriptor(int)+0x9c>
c0011572:	52                   	push   edx
c0011573:	52                   	push   edx
c0011574:	50                   	push   eax
c0011575:	68 b8 c9 02 c0       	push   0xc002c9b8
c001157a:	e8 2f 5c 01 00       	call   c00271ae <LinkedList<UnixFile>::getNext(UnixFile*)>
c001157f:	eb e1                	jmp    c0011562 <getFromFileDescriptor(int)+0x23>
c0011581:	a1 ac c9 02 c0       	mov    eax,ds:0xc002c9ac
c0011586:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001158c:	74 4d                	je     c00115db <getFromFileDescriptor(int)+0x9c>
c001158e:	a1 b0 c9 02 c0       	mov    eax,ds:0xc002c9b0
c0011593:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011599:	74 40                	je     c00115db <getFromFileDescriptor(int)+0x9c>
c001159b:	a1 a8 c9 02 c0       	mov    eax,ds:0xc002c9a8
c00115a0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00115a6:	74 33                	je     c00115db <getFromFileDescriptor(int)+0x9c>
c00115a8:	a1 a4 c9 02 c0       	mov    eax,ds:0xc002c9a4
c00115ad:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00115b3:	74 26                	je     c00115db <getFromFileDescriptor(int)+0x9c>
c00115b5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00115bb:	83 f8 08             	cmp    eax,0x8
c00115be:	77 09                	ja     c00115c9 <getFromFileDescriptor(int)+0x8a>
c00115c0:	8b 04 85 80 c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3680]
c00115c7:	eb 12                	jmp    c00115db <getFromFileDescriptor(int)+0x9c>
c00115c9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00115cf:	83 fb 08             	cmp    ebx,0x8
c00115d2:	77 95                	ja     c0011569 <getFromFileDescriptor(int)+0x2a>
c00115d4:	8b 04 9d 40 c9 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd36c0]
c00115db:	83 c4 08             	add    esp,0x8
c00115de:	5b                   	pop    ebx
c00115df:	c3                   	ret    

c00115e0 <__static_initialization_and_destruction_0(int, int)>:
c00115e0:	83 ec 0c             	sub    esp,0xc
c00115e3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00115e8:	75 34                	jne    c001161e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00115ea:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00115f2:	75 2a                	jne    c001161e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00115f4:	83 ec 0c             	sub    esp,0xc
c00115f7:	68 b8 c9 02 c0       	push   0xc002c9b8
c00115fc:	e8 d7 59 01 00       	call   c0026fd8 <LinkedList<UnixFile>::LinkedList()>
c0011601:	83 c4 10             	add    esp,0x10
c0011604:	83 ec 04             	sub    esp,0x4
c0011607:	68 68 b7 02 c0       	push   0xc002b768
c001160c:	68 b8 c9 02 c0       	push   0xc002c9b8
c0011611:	68 d6 6f 02 c0       	push   0xc0026fd6
c0011616:	e8 04 0f 00 00       	call   c001251f <__cxa_atexit>
c001161b:	83 c4 10             	add    esp,0x10
c001161e:	90                   	nop
c001161f:	83 c4 0c             	add    esp,0xc
c0011622:	c3                   	ret    

c0011623 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011623:	83 ec 0c             	sub    esp,0xc
c0011626:	83 ec 08             	sub    esp,0x8
c0011629:	68 ff ff 00 00       	push   0xffff
c001162e:	6a 01                	push   0x1
c0011630:	e8 ab ff ff ff       	call   c00115e0 <__static_initialization_and_destruction_0(int, int)>
c0011635:	83 c4 10             	add    esp,0x10
c0011638:	83 c4 0c             	add    esp,0xc
c001163b:	c3                   	ret    

c001163c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001163c:	53                   	push   ebx
c001163d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011641:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011645:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001164b:	89 c8                	mov    eax,ecx
c001164d:	d1 e8                	shr    eax,1
c001164f:	03 05 e8 b7 02 c0    	add    eax,DWORD PTR ds:0xc002b7e8
c0011655:	83 e1 01             	and    ecx,0x1
c0011658:	8a 10                	mov    dl,BYTE PTR [eax]
c001165a:	75 09                	jne    c0011665 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001165c:	83 e2 f0             	and    edx,0xfffffff0
c001165f:	09 da                	or     edx,ebx
c0011661:	88 10                	mov    BYTE PTR [eax],dl
c0011663:	5b                   	pop    ebx
c0011664:	c3                   	ret    
c0011665:	c1 e3 04             	shl    ebx,0x4
c0011668:	83 e2 0f             	and    edx,0xf
c001166b:	09 da                	or     edx,ebx
c001166d:	88 10                	mov    BYTE PTR [eax],dl
c001166f:	5b                   	pop    ebx
c0011670:	c3                   	ret    

c0011671 <Virt::getPageState(unsigned long)>:
c0011671:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011675:	8b 0d e8 b7 02 c0    	mov    ecx,DWORD PTR ds:0xc002b7e8
c001167b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011681:	89 d0                	mov    eax,edx
c0011683:	d1 e8                	shr    eax,1
c0011685:	83 e2 01             	and    edx,0x1
c0011688:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001168b:	75 04                	jne    c0011691 <Virt::getPageState(unsigned long)+0x20>
c001168d:	83 e0 0f             	and    eax,0xf
c0011690:	c3                   	ret    
c0011691:	c0 e8 04             	shr    al,0x4
c0011694:	c3                   	ret    

c0011695 <Virt::allocateKernelVirtualPages(int)>:
c0011695:	55                   	push   ebp
c0011696:	31 ed                	xor    ebp,ebp
c0011698:	57                   	push   edi
c0011699:	56                   	push   esi
c001169a:	53                   	push   ebx
c001169b:	31 db                	xor    ebx,ebx
c001169d:	83 ec 1c             	sub    esp,0x1c
c00116a0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00116a4:	8b 3d e4 b7 02 c0    	mov    edi,DWORD PTR ds:0xc002b7e4
c00116aa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00116af:	57                   	push   edi
c00116b0:	e8 bc ff ff ff       	call   c0011671 <Virt::getPageState(unsigned long)>
c00116b5:	5a                   	pop    edx
c00116b6:	84 c0                	test   al,al
c00116b8:	75 3a                	jne    c00116f4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00116ba:	85 db                	test   ebx,ebx
c00116bc:	75 02                	jne    c00116c0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00116be:	89 fd                	mov    ebp,edi
c00116c0:	43                   	inc    ebx
c00116c1:	39 f3                	cmp    ebx,esi
c00116c3:	74 5a                	je     c001171f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00116c5:	47                   	inc    edi
c00116c6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00116cc:	76 31                	jbe    c00116ff <Virt::allocateKernelVirtualPages(int)+0x6a>
c00116ce:	c7 05 e4 b7 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002b7e4,0xc8000
c00116d8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00116dd:	75 28                	jne    c0011707 <Virt::allocateKernelVirtualPages(int)+0x72>
c00116df:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00116e4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00116e9:	57                   	push   edi
c00116ea:	e8 82 ff ff ff       	call   c0011671 <Virt::getPageState(unsigned long)>
c00116ef:	5a                   	pop    edx
c00116f0:	84 c0                	test   al,al
c00116f2:	74 c6                	je     c00116ba <Virt::allocateKernelVirtualPages(int)+0x25>
c00116f4:	31 db                	xor    ebx,ebx
c00116f6:	47                   	inc    edi
c00116f7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00116fd:	77 cf                	ja     c00116ce <Virt::allocateKernelVirtualPages(int)+0x39>
c00116ff:	89 3d e4 b7 02 c0    	mov    DWORD PTR ds:0xc002b7e4,edi
c0011705:	eb a8                	jmp    c00116af <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011707:	83 ec 0c             	sub    esp,0xc
c001170a:	68 68 8d 02 c0       	push   0xc0028d68
c001170f:	e8 8b 80 00 00       	call   c001979f <Krnl::panic(char const*)>
c0011714:	8b 3d e4 b7 02 c0    	mov    edi,DWORD PTR ds:0xc002b7e4
c001171a:	83 c4 10             	add    esp,0x10
c001171d:	eb 90                	jmp    c00116af <Virt::allocateKernelVirtualPages(int)+0x1a>
c001171f:	89 2d e4 b7 02 c0    	mov    DWORD PTR ds:0xc002b7e4,ebp
c0011725:	4b                   	dec    ebx
c0011726:	74 5f                	je     c0011787 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011728:	85 f6                	test   esi,esi
c001172a:	74 3d                	je     c0011769 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001172c:	89 e8                	mov    eax,ebp
c001172e:	31 db                	xor    ebx,ebx
c0011730:	8d 7e ff             	lea    edi,[esi-0x1]
c0011733:	eb 14                	jmp    c0011749 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011735:	6a 01                	push   0x1
c0011737:	43                   	inc    ebx
c0011738:	50                   	push   eax
c0011739:	e8 fe fe ff ff       	call   c001163c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001173e:	58                   	pop    eax
c001173f:	39 f3                	cmp    ebx,esi
c0011741:	5a                   	pop    edx
c0011742:	74 25                	je     c0011769 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011744:	a1 e4 b7 02 c0       	mov    eax,ds:0xc002b7e4
c0011749:	8d 50 01             	lea    edx,[eax+0x1]
c001174c:	85 db                	test   ebx,ebx
c001174e:	89 15 e4 b7 02 c0    	mov    DWORD PTR ds:0xc002b7e4,edx
c0011754:	74 20                	je     c0011776 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011756:	39 df                	cmp    edi,ebx
c0011758:	75 db                	jne    c0011735 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001175a:	6a 03                	push   0x3
c001175c:	43                   	inc    ebx
c001175d:	50                   	push   eax
c001175e:	e8 d9 fe ff ff       	call   c001163c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011763:	59                   	pop    ecx
c0011764:	39 f3                	cmp    ebx,esi
c0011766:	58                   	pop    eax
c0011767:	75 db                	jne    c0011744 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011769:	83 c4 1c             	add    esp,0x1c
c001176c:	89 e8                	mov    eax,ebp
c001176e:	5b                   	pop    ebx
c001176f:	c1 e0 0c             	shl    eax,0xc
c0011772:	5e                   	pop    esi
c0011773:	5f                   	pop    edi
c0011774:	5d                   	pop    ebp
c0011775:	c3                   	ret    
c0011776:	6a 02                	push   0x2
c0011778:	bb 01 00 00 00       	mov    ebx,0x1
c001177d:	50                   	push   eax
c001177e:	e8 b9 fe ff ff       	call   c001163c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011783:	58                   	pop    eax
c0011784:	5a                   	pop    edx
c0011785:	eb bd                	jmp    c0011744 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011787:	6a 04                	push   0x4
c0011789:	8d 45 01             	lea    eax,[ebp+0x1]
c001178c:	55                   	push   ebp
c001178d:	a3 e4 b7 02 c0       	mov    ds:0xc002b7e4,eax
c0011792:	e8 a5 fe ff ff       	call   c001163c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011797:	59                   	pop    ecx
c0011798:	89 e8                	mov    eax,ebp
c001179a:	5b                   	pop    ebx
c001179b:	c1 e0 0c             	shl    eax,0xc
c001179e:	83 c4 1c             	add    esp,0x1c
c00117a1:	5b                   	pop    ebx
c00117a2:	5e                   	pop    esi
c00117a3:	5f                   	pop    edi
c00117a4:	5d                   	pop    ebp
c00117a5:	c3                   	ret    

c00117a6 <Virt::virtualMemorySetup()>:
c00117a6:	53                   	push   ebx
c00117a7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117ac:	83 ec 08             	sub    esp,0x8
c00117af:	6a 0f                	push   0xf
c00117b1:	53                   	push   ebx
c00117b2:	43                   	inc    ebx
c00117b3:	e8 84 fe ff ff       	call   c001163c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117b8:	59                   	pop    ecx
c00117b9:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00117bf:	58                   	pop    eax
c00117c0:	75 ed                	jne    c00117af <Virt::virtualMemorySetup()+0x9>
c00117c2:	83 ec 08             	sub    esp,0x8
c00117c5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117ca:	68 00 00 00 c8       	push   0xc8000000
c00117cf:	68 ef 8e 02 c0       	push   0xc0028eef
c00117d4:	e8 ac 0e 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00117d9:	58                   	pop    eax
c00117da:	5a                   	pop    edx
c00117db:	68 00 f0 ff ef       	push   0xeffff000
c00117e0:	68 03 8f 02 c0       	push   0xc0028f03
c00117e5:	e8 9b 0e 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00117ea:	83 c4 10             	add    esp,0x10
c00117ed:	83 ec 08             	sub    esp,0x8
c00117f0:	6a 00                	push   0x0
c00117f2:	53                   	push   ebx
c00117f3:	43                   	inc    ebx
c00117f4:	e8 43 fe ff ff       	call   c001163c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117f9:	83 c4 10             	add    esp,0x10
c00117fc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011802:	75 e9                	jne    c00117ed <Virt::virtualMemorySetup()+0x47>
c0011804:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011809:	83 ec 08             	sub    esp,0x8
c001180c:	6a 0f                	push   0xf
c001180e:	53                   	push   ebx
c001180f:	43                   	inc    ebx
c0011810:	e8 27 fe ff ff       	call   c001163c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011815:	83 c4 10             	add    esp,0x10
c0011818:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001181e:	75 e9                	jne    c0011809 <Virt::virtualMemorySetup()+0x63>
c0011820:	83 c4 08             	add    esp,0x8
c0011823:	5b                   	pop    ebx
c0011824:	c3                   	ret    

c0011825 <Virt::getAKernelVAS()>:
c0011825:	a1 c4 c9 02 c0       	mov    eax,ds:0xc002c9c4
c001182a:	c3                   	ret    

c001182b <Virt::setupPageSwapping(int)>:
c001182b:	57                   	push   edi
c001182c:	56                   	push   esi
c001182d:	53                   	push   ebx
c001182e:	83 ec 1c             	sub    esp,0x1c
c0011831:	68 14 01 00 00       	push   0x114
c0011836:	e8 99 dc ff ff       	call   c000f4d4 <malloc>
c001183b:	83 c4 0c             	add    esp,0xc
c001183e:	89 c6                	mov    esi,eax
c0011840:	ff 35 94 dd 02 c0    	push   DWORD PTR ds:0xc002dd94
c0011846:	68 17 8f 02 c0       	push   0xc0028f17
c001184b:	50                   	push   eax
c001184c:	e8 63 13 00 00       	call   c0012bb4 <File::File(char const*, Process*)>
c0011851:	89 34 24             	mov    DWORD PTR [esp],esi
c0011854:	e8 37 15 00 00       	call   c0012d90 <File::unlink()>
c0011859:	58                   	pop    eax
c001185a:	5a                   	pop    edx
c001185b:	6a 12                	push   0x12
c001185d:	56                   	push   esi
c001185e:	e8 b5 13 00 00       	call   c0012c18 <File::open(FileOpenMode)>
c0011863:	83 c4 10             	add    esp,0x10
c0011866:	85 c0                	test   eax,eax
c0011868:	0f 85 ca 00 00 00    	jne    c0011938 <Virt::setupPageSwapping(int)+0x10d>
c001186e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011872:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001187a:	c1 e3 08             	shl    ebx,0x8
c001187d:	83 ec 0c             	sub    esp,0xc
c0011880:	68 00 00 01 00       	push   0x10000
c0011885:	e8 4a dc ff ff       	call   c000f4d4 <malloc>
c001188a:	83 c4 0c             	add    esp,0xc
c001188d:	89 c7                	mov    edi,eax
c001188f:	68 00 00 01 00       	push   0x10000
c0011894:	6a 00                	push   0x0
c0011896:	50                   	push   eax
c0011897:	e8 ef ed fe ff       	call   c000068b <memset>
c001189c:	83 c4 10             	add    esp,0x10
c001189f:	85 db                	test   ebx,ebx
c00118a1:	79 03                	jns    c00118a6 <Virt::setupPageSwapping(int)+0x7b>
c00118a3:	83 c3 0f             	add    ebx,0xf
c00118a6:	c1 fb 04             	sar    ebx,0x4
c00118a9:	4b                   	dec    ebx
c00118aa:	83 fb ff             	cmp    ebx,0xffffffff
c00118ad:	74 4b                	je     c00118fa <Virt::setupPageSwapping(int)+0xcf>
c00118af:	83 ec 0c             	sub    esp,0xc
c00118b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00118b4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00118b8:	52                   	push   edx
c00118b9:	57                   	push   edi
c00118ba:	6a 00                	push   0x0
c00118bc:	68 00 00 01 00       	push   0x10000
c00118c1:	56                   	push   esi
c00118c2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00118c5:	83 c4 20             	add    esp,0x20
c00118c8:	85 c0                	test   eax,eax
c00118ca:	75 59                	jne    c0011925 <Virt::setupPageSwapping(int)+0xfa>
c00118cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118d0:	3d 00 00 01 00       	cmp    eax,0x10000
c00118d5:	74 d2                	je     c00118a9 <Virt::setupPageSwapping(int)+0x7e>
c00118d7:	83 ec 08             	sub    esp,0x8
c00118da:	4b                   	dec    ebx
c00118db:	50                   	push   eax
c00118dc:	68 6a 8f 02 c0       	push   0xc0028f6a
c00118e1:	e8 9f 0d 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00118e6:	c7 04 24 73 8f 02 c0 	mov    DWORD PTR [esp],0xc0028f73
c00118ed:	e8 ad 7e 00 00       	call   c001979f <Krnl::panic(char const*)>
c00118f2:	83 c4 10             	add    esp,0x10
c00118f5:	83 fb ff             	cmp    ebx,0xffffffff
c00118f8:	75 b5                	jne    c00118af <Virt::setupPageSwapping(int)+0x84>
c00118fa:	83 ec 0c             	sub    esp,0xc
c00118fd:	56                   	push   esi
c00118fe:	e8 73 13 00 00       	call   c0012c76 <File::close()>
c0011903:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011906:	e8 e9 db ff ff       	call   c000f4f4 <rfree>
c001190b:	83 c4 10             	add    esp,0x10
c001190e:	85 f6                	test   esi,esi
c0011910:	74 0c                	je     c001191e <Virt::setupPageSwapping(int)+0xf3>
c0011912:	83 ec 0c             	sub    esp,0xc
c0011915:	8b 06                	mov    eax,DWORD PTR [esi]
c0011917:	56                   	push   esi
c0011918:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001191b:	83 c4 10             	add    esp,0x10
c001191e:	83 c4 10             	add    esp,0x10
c0011921:	5b                   	pop    ebx
c0011922:	5e                   	pop    esi
c0011923:	5f                   	pop    edi
c0011924:	c3                   	ret    
c0011925:	83 ec 08             	sub    esp,0x8
c0011928:	50                   	push   eax
c0011929:	68 52 8f 02 c0       	push   0xc0028f52
c001192e:	e8 52 0d 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0011933:	83 c4 10             	add    esp,0x10
c0011936:	eb 94                	jmp    c00118cc <Virt::setupPageSwapping(int)+0xa1>
c0011938:	83 ec 08             	sub    esp,0x8
c001193b:	50                   	push   eax
c001193c:	68 2e 8f 02 c0       	push   0xc0028f2e
c0011941:	e8 3f 0d 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0011946:	c7 04 24 37 8f 02 c0 	mov    DWORD PTR [esp],0xc0028f37
c001194d:	e8 4d 7e 00 00       	call   c001979f <Krnl::panic(char const*)>
c0011952:	83 c4 10             	add    esp,0x10
c0011955:	e9 14 ff ff ff       	jmp    c001186e <Virt::setupPageSwapping(int)+0x43>

c001195a <VAS::VAS()>:
c001195a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001195e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011965:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011969:	a3 c4 c9 02 c0       	mov    ds:0xc002c9c4,eax
c001196e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011972:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001197a:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001197d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011981:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011988:	90                   	nop
c0011989:	c3                   	ret    

c001198a <VAS::VAS(VAS*)>:
c001198a:	83 ec 0c             	sub    esp,0xc
c001198d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011991:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011998:	83 ec 0c             	sub    esp,0xc
c001199b:	68 88 8d 02 c0       	push   0xc0028d88
c00119a0:	e8 fa 7d 00 00       	call   c001979f <Krnl::panic(char const*)>
c00119a5:	83 c4 10             	add    esp,0x10
c00119a8:	90                   	nop
c00119a9:	83 c4 0c             	add    esp,0xc
c00119ac:	c3                   	ret    
c00119ad:	90                   	nop

c00119ae <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00119ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119b2:	89 c2                	mov    edx,eax
c00119b4:	c1 e8 0a             	shr    eax,0xa
c00119b7:	c1 ea 16             	shr    edx,0x16
c00119ba:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00119bf:	19 c9                	sbb    ecx,ecx
c00119c1:	c1 e2 0c             	shl    edx,0xc
c00119c4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00119ca:	25 fc 0f 00 00       	and    eax,0xffc
c00119cf:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00119d6:	01 d0                	add    eax,edx
c00119d8:	c3                   	ret    
c00119d9:	90                   	nop

c00119da <VAS::getPageTableEntry(unsigned long)>:
c00119da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00119de:	89 ca                	mov    edx,ecx
c00119e0:	c1 e9 0a             	shr    ecx,0xa
c00119e3:	c1 ea 16             	shr    edx,0x16
c00119e6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00119ec:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00119f2:	c1 e0 0c             	shl    eax,0xc
c00119f5:	8d 04 08             	lea    eax,[eax+ecx*1]
c00119f8:	c3                   	ret    

c00119f9 <Virt::freeKernelVirtualPages(unsigned long)>:
c00119f9:	57                   	push   edi
c00119fa:	56                   	push   esi
c00119fb:	be 01 00 00 00       	mov    esi,0x1
c0011a00:	53                   	push   ebx
c0011a01:	83 ec 10             	sub    esp,0x10
c0011a04:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a08:	c1 eb 0c             	shr    ebx,0xc
c0011a0b:	eb 3f                	jmp    c0011a4c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011a0d:	e8 13 fe ff ff       	call   c0011825 <Virt::getAKernelVAS()>
c0011a12:	83 ec 08             	sub    esp,0x8
c0011a15:	57                   	push   edi
c0011a16:	50                   	push   eax
c0011a17:	e8 be ff ff ff       	call   c00119da <VAS::getPageTableEntry(unsigned long)>
c0011a1c:	83 c4 10             	add    esp,0x10
c0011a1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a21:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a25:	f6 c4 04             	test   ah,0x4
c0011a28:	75 5f                	jne    c0011a89 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011a2a:	80 fa 04             	cmp    dl,0x4
c0011a2d:	74 78                	je     c0011aa7 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011a2f:	80 fa 02             	cmp    dl,0x2
c0011a32:	0f 84 88 00 00 00    	je     c0011ac0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011a38:	80 fa 03             	cmp    dl,0x3
c0011a3b:	0f 84 ad 00 00 00    	je     c0011aee <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011a41:	fe ca                	dec    dl
c0011a43:	0f 84 92 00 00 00    	je     c0011adb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a49:	43                   	inc    ebx
c0011a4a:	31 f6                	xor    esi,esi
c0011a4c:	53                   	push   ebx
c0011a4d:	e8 1f fc ff ff       	call   c0011671 <Virt::getPageState(unsigned long)>
c0011a52:	5f                   	pop    edi
c0011a53:	89 df                	mov    edi,ebx
c0011a55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011a59:	c1 e7 0c             	shl    edi,0xc
c0011a5c:	84 c0                	test   al,al
c0011a5e:	75 ad                	jne    c0011a0d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011a60:	83 ec 0c             	sub    esp,0xc
c0011a63:	68 79 8f 02 c0       	push   0xc0028f79
c0011a68:	e8 32 7d 00 00       	call   c001979f <Krnl::panic(char const*)>
c0011a6d:	e8 b3 fd ff ff       	call   c0011825 <Virt::getAKernelVAS()>
c0011a72:	5a                   	pop    edx
c0011a73:	59                   	pop    ecx
c0011a74:	57                   	push   edi
c0011a75:	50                   	push   eax
c0011a76:	e8 5f ff ff ff       	call   c00119da <VAS::getPageTableEntry(unsigned long)>
c0011a7b:	83 c4 10             	add    esp,0x10
c0011a7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a80:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a84:	f6 c4 04             	test   ah,0x4
c0011a87:	74 c0                	je     c0011a49 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a89:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011a8d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a92:	83 ec 0c             	sub    esp,0xc
c0011a95:	50                   	push   eax
c0011a96:	e8 87 de ff ff       	call   c000f922 <Phys::freePage(unsigned long)>
c0011a9b:	83 c4 10             	add    esp,0x10
c0011a9e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011aa2:	80 fa 04             	cmp    dl,0x4
c0011aa5:	75 88                	jne    c0011a2f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011aa7:	89 f0                	mov    eax,esi
c0011aa9:	84 c0                	test   al,al
c0011aab:	75 47                	jne    c0011af4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011aad:	c7 44 24 20 ac 8d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0028dac
c0011ab5:	83 c4 10             	add    esp,0x10
c0011ab8:	5b                   	pop    ebx
c0011ab9:	5e                   	pop    esi
c0011aba:	5f                   	pop    edi
c0011abb:	e9 df 7c 00 00       	jmp    c001979f <Krnl::panic(char const*)>
c0011ac0:	89 f0                	mov    eax,esi
c0011ac2:	84 c0                	test   al,al
c0011ac4:	75 15                	jne    c0011adb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ac6:	83 ec 0c             	sub    esp,0xc
c0011ac9:	68 95 8f 02 c0       	push   0xc0028f95
c0011ace:	e8 cc 7c 00 00       	call   c001979f <Krnl::panic(char const*)>
c0011ad3:	83 c4 10             	add    esp,0x10
c0011ad6:	e9 6e ff ff ff       	jmp    c0011a49 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011adb:	83 ec 08             	sub    esp,0x8
c0011ade:	6a 00                	push   0x0
c0011ae0:	53                   	push   ebx
c0011ae1:	e8 56 fb ff ff       	call   c001163c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ae6:	83 c4 10             	add    esp,0x10
c0011ae9:	e9 5b ff ff ff       	jmp    c0011a49 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011aee:	89 f0                	mov    eax,esi
c0011af0:	84 c0                	test   al,al
c0011af2:	75 15                	jne    c0011b09 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011af4:	83 ec 08             	sub    esp,0x8
c0011af7:	6a 00                	push   0x0
c0011af9:	53                   	push   ebx
c0011afa:	e8 3d fb ff ff       	call   c001163c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011aff:	83 c4 10             	add    esp,0x10
c0011b02:	83 c4 10             	add    esp,0x10
c0011b05:	5b                   	pop    ebx
c0011b06:	5e                   	pop    esi
c0011b07:	5f                   	pop    edi
c0011b08:	c3                   	ret    
c0011b09:	c7 44 24 20 b1 8f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0028fb1
c0011b11:	83 c4 10             	add    esp,0x10
c0011b14:	5b                   	pop    ebx
c0011b15:	5e                   	pop    esi
c0011b16:	5f                   	pop    edi
c0011b17:	e9 83 7c 00 00       	jmp    c001979f <Krnl::panic(char const*)>

c0011b1c <VAS::freeAllocatedPages(unsigned long)>:
c0011b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b24:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011b28:	74 09                	je     c0011b33 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011b2a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011b2e:	e9 c6 fe ff ff       	jmp    c00119f9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011b33:	c7 44 24 04 d0 8d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028dd0
c0011b3b:	e9 45 0b 00 00       	jmp    c0012685 <Dbg::kprintf(char const*, ...)>

c0011b40 <VAS::virtualToPhysical(unsigned long)>:
c0011b40:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b44:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b48:	e8 8d fe ff ff       	call   c00119da <VAS::getPageTableEntry(unsigned long)>
c0011b4d:	5a                   	pop    edx
c0011b4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b50:	59                   	pop    ecx
c0011b51:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b56:	c3                   	ret    
c0011b57:	90                   	nop

c0011b58 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011b58:	55                   	push   ebp
c0011b59:	57                   	push   edi
c0011b5a:	56                   	push   esi
c0011b5b:	53                   	push   ebx
c0011b5c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011b60:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011b64:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011b68:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b6c:	85 db                	test   ebx,ebx
c0011b6e:	7e 22                	jle    c0011b92 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011b70:	c1 e3 0c             	shl    ebx,0xc
c0011b73:	01 f3                	add    ebx,esi
c0011b75:	56                   	push   esi
c0011b76:	81 c6 00 10 00 00    	add    esi,0x1000
c0011b7c:	55                   	push   ebp
c0011b7d:	e8 58 fe ff ff       	call   c00119da <VAS::getPageTableEntry(unsigned long)>
c0011b82:	5a                   	pop    edx
c0011b83:	59                   	pop    ecx
c0011b84:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011b86:	21 f9                	and    ecx,edi
c0011b88:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011b8c:	39 f3                	cmp    ebx,esi
c0011b8e:	89 08                	mov    DWORD PTR [eax],ecx
c0011b90:	75 e3                	jne    c0011b75 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011b92:	5b                   	pop    ebx
c0011b93:	5e                   	pop    esi
c0011b94:	5f                   	pop    edi
c0011b95:	5d                   	pop    ebp
c0011b96:	c3                   	ret    
c0011b97:	90                   	nop

c0011b98 <VAS::setToWriteCombining(unsigned long, int)>:
c0011b98:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0011b9d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ba3:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011baa:	75 01                	jne    c0011bad <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011bac:	c3                   	ret    
c0011bad:	68 80 00 00 00       	push   0x80
c0011bb2:	6a ff                	push   0xffffffff
c0011bb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bc0:	e8 93 ff ff ff       	call   c0011b58 <VAS::reflagRange(unsigned long, int, int, int)>
c0011bc5:	83 c4 14             	add    esp,0x14
c0011bc8:	c3                   	ret    
c0011bc9:	90                   	nop

c0011bca <VAS::mapOtherVASIn(bool, VAS*)>:
c0011bca:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011bcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bd3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011bd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bda:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011bdd:	19 c0                	sbb    eax,eax
c0011bdf:	83 ca 03             	or     edx,0x3
c0011be2:	83 e0 fc             	and    eax,0xfffffffc
c0011be5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011bec:	0f 20 d8             	mov    eax,cr3
c0011bef:	0f 22 d8             	mov    cr3,eax
c0011bf2:	c3                   	ret    
c0011bf3:	90                   	nop

c0011bf4 <VAS::~VAS()>:
c0011bf4:	83 ec 2c             	sub    esp,0x2c
c0011bf7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011bff:	e8 2a b0 00 00       	call   c001cc2e <lockScheduler()>
c0011c04:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c09:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c0b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c0e:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c14:	83 ec 04             	sub    esp,0x4
c0011c17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011c1b:	6a 01                	push   0x1
c0011c1d:	50                   	push   eax
c0011c1e:	e8 a7 ff ff ff       	call   c0011bca <VAS::mapOtherVASIn(bool, VAS*)>
c0011c23:	83 c4 10             	add    esp,0x10
c0011c26:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011c2e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011c36:	0f 8f d7 00 00 00    	jg     c0011d13 <VAS::~VAS()+0x11f>
c0011c3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c40:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011c43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011c47:	c1 e2 02             	shl    edx,0x2
c0011c4a:	01 d0                	add    eax,edx
c0011c4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c4e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c56:	83 e0 01             	and    eax,0x1
c0011c59:	0f 84 ab 00 00 00    	je     c0011d0a <VAS::~VAS()+0x116>
c0011c5f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011c67:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011c6f:	7f 75                	jg     c0011ce6 <VAS::~VAS()+0xf2>
c0011c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c75:	c1 e0 0a             	shl    eax,0xa
c0011c78:	89 c2                	mov    edx,eax
c0011c7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c7e:	01 d0                	add    eax,edx
c0011c80:	c1 e0 0c             	shl    eax,0xc
c0011c83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c87:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c8e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c91:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c97:	83 ec 04             	sub    esp,0x4
c0011c9a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011c9e:	6a 01                	push   0x1
c0011ca0:	50                   	push   eax
c0011ca1:	e8 08 fd ff ff       	call   c00119ae <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011ca6:	83 c4 10             	add    esp,0x10
c0011ca9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011cad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011cb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cb3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011cb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cbb:	25 01 04 00 00       	and    eax,0x401
c0011cc0:	3d 01 04 00 00       	cmp    eax,0x401
c0011cc5:	75 19                	jne    c0011ce0 <VAS::~VAS()+0xec>
c0011cc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ccb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cd0:	83 ec 0c             	sub    esp,0xc
c0011cd3:	50                   	push   eax
c0011cd4:	e8 49 dc ff ff       	call   c000f922 <Phys::freePage(unsigned long)>
c0011cd9:	83 c4 10             	add    esp,0x10
c0011cdc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ce0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011ce4:	eb 81                	jmp    c0011c67 <VAS::~VAS()+0x73>
c0011ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cea:	25 00 04 00 00       	and    eax,0x400
c0011cef:	74 19                	je     c0011d0a <VAS::~VAS()+0x116>
c0011cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cf5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cfa:	83 ec 0c             	sub    esp,0xc
c0011cfd:	50                   	push   eax
c0011cfe:	e8 1f dc ff ff       	call   c000f922 <Phys::freePage(unsigned long)>
c0011d03:	83 c4 10             	add    esp,0x10
c0011d06:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011d0a:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011d0e:	e9 1b ff ff ff       	jmp    c0011c2e <VAS::~VAS()+0x3a>
c0011d13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d1a:	83 ec 0c             	sub    esp,0xc
c0011d1d:	50                   	push   eax
c0011d1e:	e8 d6 fc ff ff       	call   c00119f9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d23:	83 c4 10             	add    esp,0x10
c0011d26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d2d:	83 ec 0c             	sub    esp,0xc
c0011d30:	50                   	push   eax
c0011d31:	e8 ec db ff ff       	call   c000f922 <Phys::freePage(unsigned long)>
c0011d36:	83 c4 10             	add    esp,0x10
c0011d39:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011d3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d41:	c1 e0 02             	shl    eax,0x2
c0011d44:	83 ec 08             	sub    esp,0x8
c0011d47:	50                   	push   eax
c0011d48:	68 f4 8d 02 c0       	push   0xc0028df4
c0011d4d:	e8 33 09 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0011d52:	83 c4 10             	add    esp,0x10
c0011d55:	e8 d6 ae 00 00       	call   c001cc30 <unlockScheduler()>
c0011d5a:	90                   	nop
c0011d5b:	83 c4 2c             	add    esp,0x2c
c0011d5e:	c3                   	ret    
c0011d5f:	90                   	nop

c0011d60 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011d60:	55                   	push   ebp
c0011d61:	57                   	push   edi
c0011d62:	56                   	push   esi
c0011d63:	53                   	push   ebx
c0011d64:	83 ec 1c             	sub    esp,0x1c
c0011d67:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011d6b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d6f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011d75:	77 08                	ja     c0011d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011d77:	0f 20 d8             	mov    eax,cr3
c0011d7a:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011d7d:	75 47                	jne    c0011dc6 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011d7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d83:	09 d8                	or     eax,ebx
c0011d85:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d8a:	75 57                	jne    c0011de3 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011d8c:	89 de                	mov    esi,ebx
c0011d8e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d91:	c1 ee 16             	shr    esi,0x16
c0011d94:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011d9b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011d9f:	74 54                	je     c0011df5 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011da1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011da5:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011dab:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011daf:	c1 e6 0c             	shl    esi,0xc
c0011db2:	c1 eb 0a             	shr    ebx,0xa
c0011db5:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011dbb:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011dbe:	83 c4 1c             	add    esp,0x1c
c0011dc1:	5b                   	pop    ebx
c0011dc2:	5e                   	pop    esi
c0011dc3:	5f                   	pop    edi
c0011dc4:	5d                   	pop    ebp
c0011dc5:	c3                   	ret    
c0011dc6:	83 ec 0c             	sub    esp,0xc
c0011dc9:	68 14 8e 02 c0       	push   0xc0028e14
c0011dce:	e8 b2 08 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0011dd3:	83 c4 10             	add    esp,0x10
c0011dd6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dda:	09 d8                	or     eax,ebx
c0011ddc:	a9 ff 0f 00 00       	test   eax,0xfff
c0011de1:	74 a9                	je     c0011d8c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011de3:	83 ec 0c             	sub    esp,0xc
c0011de6:	68 7c 8e 02 c0       	push   0xc0028e7c
c0011deb:	e8 af 79 00 00       	call   c001979f <Krnl::panic(char const*)>
c0011df0:	83 c4 10             	add    esp,0x10
c0011df3:	eb 97                	jmp    c0011d8c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011df5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011df9:	e8 ae db ff ff       	call   c000f9ac <Phys::allocatePage()>
c0011dfe:	89 c5                	mov    ebp,eax
c0011e00:	e8 20 fa ff ff       	call   c0011825 <Virt::getAKernelVAS()>
c0011e05:	83 ec 0c             	sub    esp,0xc
c0011e08:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011e0c:	6a 01                	push   0x1
c0011e0e:	e8 82 f8 ff ff       	call   c0011695 <Virt::allocateKernelVirtualPages(int)>
c0011e13:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e1a:	6a 01                	push   0x1
c0011e1c:	50                   	push   eax
c0011e1d:	55                   	push   ebp
c0011e1e:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e24:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e28:	51                   	push   ecx
c0011e29:	e8 26 02 00 00       	call   c0012054 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e2e:	83 c4 1c             	add    esp,0x1c
c0011e31:	68 00 10 00 00       	push   0x1000
c0011e36:	6a 00                	push   0x0
c0011e38:	50                   	push   eax
c0011e39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e3d:	e8 49 e8 fe ff       	call   c000068b <memset>
c0011e42:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e46:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e49:	e8 ab fb ff ff       	call   c00119f9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e4e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e52:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e55:	83 c4 10             	add    esp,0x10
c0011e58:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011e5b:	e9 41 ff ff ff       	jmp    c0011da1 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011e60 <VAS::allocatePages(int, int)>:
c0011e60:	55                   	push   ebp
c0011e61:	57                   	push   edi
c0011e62:	56                   	push   esi
c0011e63:	53                   	push   ebx
c0011e64:	83 ec 1c             	sub    esp,0x1c
c0011e67:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e6b:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0011e70:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e76:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e7c:	83 e0 01             	and    eax,0x1
c0011e7f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011e83:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e87:	0f 85 cc 00 00 00    	jne    c0011f59 <VAS::allocatePages(int, int)+0xf9>
c0011e8d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e94:	85 c0                	test   eax,eax
c0011e96:	0f 84 a1 00 00 00    	je     c0011f3d <VAS::allocatePages(int, int)+0xdd>
c0011e9c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011ea0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ea4:	c1 e6 0c             	shl    esi,0xc
c0011ea7:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011eab:	85 c0                	test   eax,eax
c0011ead:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011eb0:	7e 33                	jle    c0011ee5 <VAS::allocatePages(int, int)+0x85>
c0011eb2:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011eb6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011eba:	81 cd 00 04 00 00    	or     ebp,0x400
c0011ec0:	e8 e7 da ff ff       	call   c000f9ac <Phys::allocatePage()>
c0011ec5:	55                   	push   ebp
c0011ec6:	53                   	push   ebx
c0011ec7:	50                   	push   eax
c0011ec8:	57                   	push   edi
c0011ec9:	e8 92 fe ff ff       	call   c0011d60 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ece:	83 c4 10             	add    esp,0x10
c0011ed1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ed6:	74 03                	je     c0011edb <VAS::allocatePages(int, int)+0x7b>
c0011ed8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011edb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ee1:	39 de                	cmp    esi,ebx
c0011ee3:	75 db                	jne    c0011ec0 <VAS::allocatePages(int, int)+0x60>
c0011ee5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011eea:	75 12                	jne    c0011efe <VAS::allocatePages(int, int)+0x9e>
c0011eec:	0f 20 d8             	mov    eax,cr3
c0011eef:	0f 22 d8             	mov    cr3,eax
c0011ef2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ef6:	83 c4 1c             	add    esp,0x1c
c0011ef9:	5b                   	pop    ebx
c0011efa:	5e                   	pop    esi
c0011efb:	5f                   	pop    edi
c0011efc:	5d                   	pop    ebp
c0011efd:	c3                   	ret    
c0011efe:	c1 ee 0a             	shr    esi,0xa
c0011f01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f05:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011f0b:	c1 eb 0a             	shr    ebx,0xa
c0011f0e:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011f14:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f1a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011f20:	39 c3                	cmp    ebx,eax
c0011f22:	77 ce                	ja     c0011ef2 <VAS::allocatePages(int, int)+0x92>
c0011f24:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f27:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f2d:	39 d8                	cmp    eax,ebx
c0011f2f:	73 f3                	jae    c0011f24 <VAS::allocatePages(int, int)+0xc4>
c0011f31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f35:	83 c4 1c             	add    esp,0x1c
c0011f38:	5b                   	pop    ebx
c0011f39:	5e                   	pop    esi
c0011f3a:	5f                   	pop    edi
c0011f3b:	5d                   	pop    ebp
c0011f3c:	c3                   	ret    
c0011f3d:	83 ec 0c             	sub    esp,0xc
c0011f40:	68 a0 8e 02 c0       	push   0xc0028ea0
c0011f45:	e8 55 78 00 00       	call   c001979f <Krnl::panic(char const*)>
c0011f4a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f51:	83 c4 10             	add    esp,0x10
c0011f54:	e9 43 ff ff ff       	jmp    c0011e9c <VAS::allocatePages(int, int)+0x3c>
c0011f59:	83 ec 0c             	sub    esp,0xc
c0011f5c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f60:	e8 30 f7 ff ff       	call   c0011695 <Virt::allocateKernelVirtualPages(int)>
c0011f65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f69:	83 c4 10             	add    esp,0x10
c0011f6c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011f71:	0f 87 9b 00 00 00    	ja     c0012012 <VAS::allocatePages(int, int)+0x1b2>
c0011f77:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f7b:	85 d2                	test   edx,edx
c0011f7d:	7e 3c                	jle    c0011fbb <VAS::allocatePages(int, int)+0x15b>
c0011f7f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011f83:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011f87:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f8b:	c1 e5 0c             	shl    ebp,0xc
c0011f8e:	81 ce 00 04 00 00    	or     esi,0x400
c0011f94:	01 dd                	add    ebp,ebx
c0011f96:	e8 11 da ff ff       	call   c000f9ac <Phys::allocatePage()>
c0011f9b:	56                   	push   esi
c0011f9c:	53                   	push   ebx
c0011f9d:	50                   	push   eax
c0011f9e:	57                   	push   edi
c0011f9f:	e8 bc fd ff ff       	call   c0011d60 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011fa4:	83 c4 10             	add    esp,0x10
c0011fa7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fac:	74 03                	je     c0011fb1 <VAS::allocatePages(int, int)+0x151>
c0011fae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fb1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fb7:	39 dd                	cmp    ebp,ebx
c0011fb9:	75 db                	jne    c0011f96 <VAS::allocatePages(int, int)+0x136>
c0011fbb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fc0:	0f 84 26 ff ff ff    	je     c0011eec <VAS::allocatePages(int, int)+0x8c>
c0011fc6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011fca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fce:	89 d3                	mov    ebx,edx
c0011fd0:	c1 e0 0c             	shl    eax,0xc
c0011fd3:	c1 eb 0a             	shr    ebx,0xa
c0011fd6:	01 d0                	add    eax,edx
c0011fd8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011fde:	c1 e8 0a             	shr    eax,0xa
c0011fe1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011fe7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fec:	2d 00 00 40 00       	sub    eax,0x400000
c0011ff1:	39 c3                	cmp    ebx,eax
c0011ff3:	0f 87 f9 fe ff ff    	ja     c0011ef2 <VAS::allocatePages(int, int)+0x92>
c0011ff9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ffc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012002:	39 d8                	cmp    eax,ebx
c0012004:	73 f3                	jae    c0011ff9 <VAS::allocatePages(int, int)+0x199>
c0012006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001200a:	83 c4 1c             	add    esp,0x1c
c001200d:	5b                   	pop    ebx
c001200e:	5e                   	pop    esi
c001200f:	5f                   	pop    edi
c0012010:	5d                   	pop    ebp
c0012011:	c3                   	ret    
c0012012:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0012017:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001201d:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012024:	0f 84 4d ff ff ff    	je     c0011f77 <VAS::allocatePages(int, int)+0x117>
c001202a:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012032:	e9 40 ff ff ff       	jmp    c0011f77 <VAS::allocatePages(int, int)+0x117>
c0012037:	90                   	nop

c0012038 <VAS::setCPUSpecific(unsigned long)>:
c0012038:	83 ec 0c             	sub    esp,0xc
c001203b:	6a 05                	push   0x5
c001203d:	68 00 00 40 c2       	push   0xc2400000
c0012042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001204a:	e8 11 fd ff ff       	call   c0011d60 <VAS::mapPage(unsigned long, unsigned long, int)>
c001204f:	83 c4 1c             	add    esp,0x1c
c0012052:	c3                   	ret    
c0012053:	90                   	nop

c0012054 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012054:	55                   	push   ebp
c0012055:	57                   	push   edi
c0012056:	56                   	push   esi
c0012057:	53                   	push   ebx
c0012058:	83 ec 1c             	sub    esp,0x1c
c001205b:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0012060:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012064:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001206a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001206e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012074:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012078:	83 e0 01             	and    eax,0x1
c001207b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001207f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012083:	85 c0                	test   eax,eax
c0012085:	7e 39                	jle    c00120c0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012087:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001208b:	89 f3                	mov    ebx,esi
c001208d:	c1 e0 0c             	shl    eax,0xc
c0012090:	01 f0                	add    eax,esi
c0012092:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012096:	55                   	push   ebp
c0012097:	53                   	push   ebx
c0012098:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001209c:	29 f0                	sub    eax,esi
c001209e:	01 d8                	add    eax,ebx
c00120a0:	50                   	push   eax
c00120a1:	57                   	push   edi
c00120a2:	e8 b9 fc ff ff       	call   c0011d60 <VAS::mapPage(unsigned long, unsigned long, int)>
c00120a7:	83 c4 10             	add    esp,0x10
c00120aa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120af:	74 03                	je     c00120b4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00120b1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120b4:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120ba:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00120be:	75 d6                	jne    c0012096 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00120c0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120c5:	75 10                	jne    c00120d7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00120c7:	0f 20 d8             	mov    eax,cr3
c00120ca:	0f 22 d8             	mov    cr3,eax
c00120cd:	83 c4 1c             	add    esp,0x1c
c00120d0:	89 f0                	mov    eax,esi
c00120d2:	5b                   	pop    ebx
c00120d3:	5e                   	pop    esi
c00120d4:	5f                   	pop    edi
c00120d5:	5d                   	pop    ebp
c00120d6:	c3                   	ret    
c00120d7:	89 f3                	mov    ebx,esi
c00120d9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120dd:	c1 eb 0a             	shr    ebx,0xa
c00120e0:	c1 e0 0c             	shl    eax,0xc
c00120e3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00120e9:	01 f0                	add    eax,esi
c00120eb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00120f1:	c1 e8 0a             	shr    eax,0xa
c00120f4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120f9:	2d 00 00 40 00       	sub    eax,0x400000
c00120fe:	39 c3                	cmp    ebx,eax
c0012100:	77 cb                	ja     c00120cd <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012102:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012105:	81 c3 00 10 00 00    	add    ebx,0x1000
c001210b:	39 d8                	cmp    eax,ebx
c001210d:	73 f3                	jae    c0012102 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001210f:	83 c4 1c             	add    esp,0x1c
c0012112:	89 f0                	mov    eax,esi
c0012114:	5b                   	pop    ebx
c0012115:	5e                   	pop    esi
c0012116:	5f                   	pop    edi
c0012117:	5d                   	pop    ebp
c0012118:	c3                   	ret    
c0012119:	90                   	nop

c001211a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001211a:	55                   	push   ebp
c001211b:	57                   	push   edi
c001211c:	56                   	push   esi
c001211d:	53                   	push   ebx
c001211e:	83 ec 1c             	sub    esp,0x1c
c0012121:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012125:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012129:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001212d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012131:	a9 ff 0f 00 00       	test   eax,0xfff
c0012136:	75 4a                	jne    c0012182 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012138:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001213c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001213f:	c1 eb 16             	shr    ebx,0x16
c0012142:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012149:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001214d:	74 4d                	je     c001219c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001214f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012153:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012157:	c1 e8 0a             	shr    eax,0xa
c001215a:	80 fa 01             	cmp    dl,0x1
c001215d:	19 d2                	sbb    edx,edx
c001215f:	c1 e3 0c             	shl    ebx,0xc
c0012162:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012166:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001216c:	25 fc 0f 00 00       	and    eax,0xffc
c0012171:	01 d8                	add    eax,ebx
c0012173:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001217a:	83 c4 1c             	add    esp,0x1c
c001217d:	5b                   	pop    ebx
c001217e:	5e                   	pop    esi
c001217f:	5f                   	pop    edi
c0012180:	5d                   	pop    ebp
c0012181:	c3                   	ret    
c0012182:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012186:	83 ec 0c             	sub    esp,0xc
c0012189:	68 cc 8e 02 c0       	push   0xc0028ecc
c001218e:	e8 0c 76 00 00       	call   c001979f <Krnl::panic(char const*)>
c0012193:	83 c4 10             	add    esp,0x10
c0012196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001219a:	eb 9c                	jmp    c0012138 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001219c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00121a0:	e8 07 d8 ff ff       	call   c000f9ac <Phys::allocatePage()>
c00121a5:	89 c5                	mov    ebp,eax
c00121a7:	e8 79 f6 ff ff       	call   c0011825 <Virt::getAKernelVAS()>
c00121ac:	83 ec 0c             	sub    esp,0xc
c00121af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121b3:	6a 01                	push   0x1
c00121b5:	e8 db f4 ff ff       	call   c0011695 <Virt::allocateKernelVirtualPages(int)>
c00121ba:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00121c1:	6a 01                	push   0x1
c00121c3:	50                   	push   eax
c00121c4:	55                   	push   ebp
c00121c5:	81 cd 07 04 00 00    	or     ebp,0x407
c00121cb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00121cf:	51                   	push   ecx
c00121d0:	e8 7f fe ff ff       	call   c0012054 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00121d5:	83 c4 1c             	add    esp,0x1c
c00121d8:	68 00 10 00 00       	push   0x1000
c00121dd:	6a 00                	push   0x0
c00121df:	50                   	push   eax
c00121e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121e4:	e8 a2 e4 fe ff       	call   c000068b <memset>
c00121e9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00121ed:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00121f0:	e8 04 f8 ff ff       	call   c00119f9 <Virt::freeKernelVirtualPages(unsigned long)>
c00121f5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00121f8:	83 c4 10             	add    esp,0x10
c00121fb:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00121fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012202:	e9 48 ff ff ff       	jmp    c001214f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012207:	90                   	nop

c0012208 <VAS::VAS(bool)>:
c0012208:	53                   	push   ebx
c0012209:	83 ec 28             	sub    esp,0x28
c001220c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012210:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012214:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012218:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001221f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012223:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012227:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001222a:	e8 7d d7 ff ff       	call   c000f9ac <Phys::allocatePage()>
c001222f:	89 c2                	mov    edx,eax
c0012231:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012235:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012238:	e8 e8 f5 ff ff       	call   c0011825 <Virt::getAKernelVAS()>
c001223d:	89 c3                	mov    ebx,eax
c001223f:	83 ec 0c             	sub    esp,0xc
c0012242:	6a 01                	push   0x1
c0012244:	e8 4c f4 ff ff       	call   c0011695 <Virt::allocateKernelVirtualPages(int)>
c0012249:	83 c4 10             	add    esp,0x10
c001224c:	89 c2                	mov    edx,eax
c001224e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012252:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012255:	83 ec 0c             	sub    esp,0xc
c0012258:	6a 03                	push   0x3
c001225a:	6a 01                	push   0x1
c001225c:	52                   	push   edx
c001225d:	50                   	push   eax
c001225e:	53                   	push   ebx
c001225f:	e8 f0 fd ff ff       	call   c0012054 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012264:	83 c4 20             	add    esp,0x20
c0012267:	89 c2                	mov    edx,eax
c0012269:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001226d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012270:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012278:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012280:	7f 1c                	jg     c001229e <VAS::VAS(bool)+0x96>
c0012282:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012286:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012289:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001228d:	c1 e2 02             	shl    edx,0x2
c0012290:	01 d0                	add    eax,edx
c0012292:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012298:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001229c:	eb da                	jmp    c0012278 <VAS::VAS(bool)+0x70>
c001229e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00122a6:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00122ae:	7f 7a                	jg     c001232a <VAS::VAS(bool)+0x122>
c00122b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122b4:	2d 00 02 00 00       	sub    eax,0x200
c00122b9:	c1 e0 0c             	shl    eax,0xc
c00122bc:	83 c8 03             	or     eax,0x3
c00122bf:	89 c2                	mov    edx,eax
c00122c1:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c00122c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122cc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122d2:	83 e0 10             	and    eax,0x10
c00122d5:	84 c0                	test   al,al
c00122d7:	74 07                	je     c00122e0 <VAS::VAS(bool)+0xd8>
c00122d9:	b8 00 01 00 00       	mov    eax,0x100
c00122de:	eb 05                	jmp    c00122e5 <VAS::VAS(bool)+0xdd>
c00122e0:	b8 00 00 00 00       	mov    eax,0x0
c00122e5:	09 d0                	or     eax,edx
c00122e7:	89 c1                	mov    ecx,eax
c00122e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122ed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122f4:	c1 e2 02             	shl    edx,0x2
c00122f7:	01 d0                	add    eax,edx
c00122f9:	89 ca                	mov    edx,ecx
c00122fb:	89 10                	mov    DWORD PTR [eax],edx
c00122fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012301:	2d 40 03 00 00       	sub    eax,0x340
c0012306:	83 f8 7f             	cmp    eax,0x7f
c0012309:	77 16                	ja     c0012321 <VAS::VAS(bool)+0x119>
c001230b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001230f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012312:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012316:	c1 e2 02             	shl    edx,0x2
c0012319:	01 d0                	add    eax,edx
c001231b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012321:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012325:	e9 7c ff ff ff       	jmp    c00122a6 <VAS::VAS(bool)+0x9e>
c001232a:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001232f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012335:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001233b:	83 e0 10             	and    eax,0x10
c001233e:	84 c0                	test   al,al
c0012340:	74 07                	je     c0012349 <VAS::VAS(bool)+0x141>
c0012342:	b8 03 41 00 00       	mov    eax,0x4103
c0012347:	eb 05                	jmp    c001234e <VAS::VAS(bool)+0x146>
c0012349:	b8 03 40 00 00       	mov    eax,0x4003
c001234e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012352:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012355:	81 c2 20 0c 00 00    	add    edx,0xc20
c001235b:	89 02                	mov    DWORD PTR [edx],eax
c001235d:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0012362:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012368:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001236e:	83 ec 08             	sub    esp,0x8
c0012371:	50                   	push   eax
c0012372:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012376:	e8 bd fc ff ff       	call   c0012038 <VAS::setCPUSpecific(unsigned long)>
c001237b:	83 c4 10             	add    esp,0x10
c001237e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012382:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012385:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001238a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012390:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012396:	83 e0 10             	and    eax,0x10
c0012399:	84 c0                	test   al,al
c001239b:	74 07                	je     c00123a4 <VAS::VAS(bool)+0x19c>
c001239d:	b8 00 01 00 00       	mov    eax,0x100
c00123a2:	eb 05                	jmp    c00123a9 <VAS::VAS(bool)+0x1a1>
c00123a4:	b8 00 00 00 00       	mov    eax,0x0
c00123a9:	09 c2                	or     edx,eax
c00123ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00123b2:	05 fc 0f 00 00       	add    eax,0xffc
c00123b7:	83 ca 03             	or     edx,0x3
c00123ba:	89 10                	mov    DWORD PTR [eax],edx
c00123bc:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c00123c1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123c7:	83 ec 0c             	sub    esp,0xc
c00123ca:	50                   	push   eax
c00123cb:	e8 90 19 00 00       	call   c0013d60 <Device::getName()>
c00123d0:	83 c4 10             	add    esp,0x10
c00123d3:	83 ec 08             	sub    esp,0x8
c00123d6:	68 cb 8f 02 c0       	push   0xc0028fcb
c00123db:	50                   	push   eax
c00123dc:	e8 9a e3 fe ff       	call   c000077b <strcmp>
c00123e1:	83 c4 10             	add    esp,0x10
c00123e4:	85 c0                	test   eax,eax
c00123e6:	0f 94 c0             	sete   al
c00123e9:	84 c0                	test   al,al
c00123eb:	74 70                	je     c001245d <VAS::VAS(bool)+0x255>
c00123ed:	e8 1f a8 00 00       	call   c001cc11 <disableIRQs()>
c00123f2:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c00123f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123fd:	05 7c 09 00 00       	add    eax,0x97c
c0012402:	83 ec 0c             	sub    esp,0xc
c0012405:	50                   	push   eax
c0012406:	e8 45 cb ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001240b:	83 c4 10             	add    esp,0x10
c001240e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012413:	89 c3                	mov    ebx,eax
c0012415:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001241a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012420:	05 7c 09 00 00       	add    eax,0x97c
c0012425:	83 ec 0c             	sub    esp,0xc
c0012428:	50                   	push   eax
c0012429:	e8 22 cb ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001242e:	83 c4 10             	add    esp,0x10
c0012431:	83 ec 08             	sub    esp,0x8
c0012434:	50                   	push   eax
c0012435:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012439:	e8 9c f5 ff ff       	call   c00119da <VAS::getPageTableEntry(unsigned long)>
c001243e:	83 c4 10             	add    esp,0x10
c0012441:	8b 00                	mov    eax,DWORD PTR [eax]
c0012443:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012448:	6a 11                	push   0x11
c001244a:	53                   	push   ebx
c001244b:	50                   	push   eax
c001244c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012450:	e8 0b f9 ff ff       	call   c0011d60 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012455:	83 c4 10             	add    esp,0x10
c0012458:	e8 c2 a7 00 00       	call   c001cc1f <enableIRQs()>
c001245d:	90                   	nop
c001245e:	83 c4 28             	add    esp,0x28
c0012461:	5b                   	pop    ebx
c0012462:	c3                   	ret    

c0012463 <mapVASFirstTime>:
c0012463:	55                   	push   ebp
c0012464:	57                   	push   edi
c0012465:	56                   	push   esi
c0012466:	53                   	push   ebx
c0012467:	83 ec 0c             	sub    esp,0xc
c001246a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001246f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012472:	4a                   	dec    edx
c0012473:	0f 84 8e 00 00 00    	je     c0012507 <mapVASFirstTime+0xa4>
c0012479:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001247c:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001247f:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012484:	c1 e5 15             	shl    ebp,0x15
c0012487:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c001248c:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012492:	29 eb                	sub    ebx,ebp
c0012494:	29 ee                	sub    esi,ebp
c0012496:	e8 11 d5 ff ff       	call   c000f9ac <Phys::allocatePage()>
c001249b:	83 ec 0c             	sub    esp,0xc
c001249e:	68 03 04 00 00       	push   0x403
c00124a3:	6a 01                	push   0x1
c00124a5:	53                   	push   ebx
c00124a6:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00124ac:	50                   	push   eax
c00124ad:	57                   	push   edi
c00124ae:	e8 a1 fb ff ff       	call   c0012054 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124b3:	83 c4 20             	add    esp,0x20
c00124b6:	39 f3                	cmp    ebx,esi
c00124b8:	75 dc                	jne    c0012496 <mapVASFirstTime+0x33>
c00124ba:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00124bf:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00124c4:	29 ee                	sub    esi,ebp
c00124c6:	29 e8                	sub    eax,ebp
c00124c8:	89 c5                	mov    ebp,eax
c00124ca:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00124ce:	19 db                	sbb    ebx,ebx
c00124d0:	e8 d7 d4 ff ff       	call   c000f9ac <Phys::allocatePage()>
c00124d5:	83 e3 04             	and    ebx,0x4
c00124d8:	83 ec 0c             	sub    esp,0xc
c00124db:	81 c3 03 04 00 00    	add    ebx,0x403
c00124e1:	53                   	push   ebx
c00124e2:	6a 01                	push   0x1
c00124e4:	56                   	push   esi
c00124e5:	81 ee 00 10 00 00    	sub    esi,0x1000
c00124eb:	50                   	push   eax
c00124ec:	57                   	push   edi
c00124ed:	e8 62 fb ff ff       	call   c0012054 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124f2:	83 c4 20             	add    esp,0x20
c00124f5:	39 f5                	cmp    ebp,esi
c00124f7:	75 d1                	jne    c00124ca <mapVASFirstTime+0x67>
c00124f9:	0f 20 d8             	mov    eax,cr3
c00124fc:	0f 22 d8             	mov    cr3,eax
c00124ff:	83 c4 0c             	add    esp,0xc
c0012502:	5b                   	pop    ebx
c0012503:	5e                   	pop    esi
c0012504:	5f                   	pop    edi
c0012505:	5d                   	pop    ebp
c0012506:	c3                   	ret    
c0012507:	83 ec 0c             	sub    esp,0xc
c001250a:	68 d9 8f 02 c0       	push   0xc0028fd9
c001250f:	e8 71 01 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0012514:	83 c4 10             	add    esp,0x10
c0012517:	83 c4 0c             	add    esp,0xc
c001251a:	5b                   	pop    ebx
c001251b:	5e                   	pop    esi
c001251c:	5f                   	pop    edi
c001251d:	5d                   	pop    ebp
c001251e:	c3                   	ret    

c001251f <__cxa_atexit>:
c001251f:	31 c0                	xor    eax,eax
c0012521:	c3                   	ret    

c0012522 <__cxa_finalize>:
c0012522:	c3                   	ret    

c0012523 <__stack_chk_fail>:
c0012523:	55                   	push   ebp
c0012524:	89 e5                	mov    ebp,esp
c0012526:	83 ec 14             	sub    esp,0x14
c0012529:	68 f2 8f 02 c0       	push   0xc0028ff2
c001252e:	e8 52 01 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0012533:	58                   	pop    eax
c0012534:	5a                   	pop    edx
c0012535:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012538:	68 42 90 02 c0       	push   0xc0029042
c001253d:	e8 43 01 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0012542:	59                   	pop    ecx
c0012543:	58                   	pop    eax
c0012544:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012547:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001254a:	68 42 90 02 c0       	push   0xc0029042
c001254f:	e8 31 01 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0012554:	5a                   	pop    edx
c0012555:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012558:	59                   	pop    ecx
c0012559:	8b 00                	mov    eax,DWORD PTR [eax]
c001255b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001255e:	68 42 90 02 c0       	push   0xc0029042
c0012563:	e8 1d 01 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0012568:	5a                   	pop    edx
c0012569:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001256c:	59                   	pop    ecx
c001256d:	8b 00                	mov    eax,DWORD PTR [eax]
c001256f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012571:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012574:	68 42 90 02 c0       	push   0xc0029042
c0012579:	e8 07 01 00 00       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001257e:	c7 04 24 4a 90 02 c0 	mov    DWORD PTR [esp],0xc002904a
c0012585:	e8 15 72 00 00       	call   c001979f <Krnl::panic(char const*)>
c001258a:	83 c4 10             	add    esp,0x10
c001258d:	c9                   	leave  
c001258e:	c3                   	ret    

c001258f <__cxa_pure_virtual>:
c001258f:	83 ec 18             	sub    esp,0x18
c0012592:	68 62 90 02 c0       	push   0xc0029062
c0012597:	e8 03 72 00 00       	call   c001979f <Krnl::panic(char const*)>
c001259c:	83 c4 1c             	add    esp,0x1c
c001259f:	c3                   	ret    

c00125a0 <operator new[](unsigned long)>:
c00125a0:	e9 2f cf ff ff       	jmp    c000f4d4 <malloc>

c00125a5 <operator delete(void*, unsigned long)>:
c00125a5:	e9 4a cf ff ff       	jmp    c000f4f4 <rfree>

c00125aa <operator delete[](void*)>:
c00125aa:	e9 45 cf ff ff       	jmp    c000f4f4 <rfree>

c00125af <operator delete[](void*, unsigned long)>:
c00125af:	e9 40 cf ff ff       	jmp    c000f4f4 <rfree>

c00125b4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00125b4:	57                   	push   edi
c00125b5:	b9 3f 00 00 00       	mov    ecx,0x3f
c00125ba:	56                   	push   esi
c00125bb:	be 78 90 02 c0       	mov    esi,0xc0029078
c00125c0:	53                   	push   ebx
c00125c1:	83 ec 40             	sub    esp,0x40
c00125c4:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00125c8:	8d 7c 24 01          	lea    edi,[esp+0x1]
c00125cc:	fc                   	cld    
c00125cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00125cf:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00125d3:	83 f9 3e             	cmp    ecx,0x3e
c00125d6:	7e 05                	jle    c00125dd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00125d8:	b9 3e 00 00 00       	mov    ecx,0x3e
c00125dd:	89 df                	mov    edi,ebx
c00125df:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00125e3:	eb 02                	jmp    c00125e7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00125e5:	89 c7                	mov    edi,eax
c00125e7:	31 d2                	xor    edx,edx
c00125e9:	46                   	inc    esi
c00125ea:	89 f8                	mov    eax,edi
c00125ec:	f7 f1                	div    ecx
c00125ee:	39 cf                	cmp    edi,ecx
c00125f0:	73 f3                	jae    c00125e5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00125f2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00125f5:	eb 02                	jmp    c00125f9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00125f7:	89 c3                	mov    ebx,eax
c00125f9:	31 d2                	xor    edx,edx
c00125fb:	4e                   	dec    esi
c00125fc:	89 d8                	mov    eax,ebx
c00125fe:	f7 f1                	div    ecx
c0012600:	39 cb                	cmp    ebx,ecx
c0012602:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012606:	88 16                	mov    BYTE PTR [esi],dl
c0012608:	73 ed                	jae    c00125f7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c001260a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001260e:	83 c4 40             	add    esp,0x40
c0012611:	5b                   	pop    ebx
c0012612:	5e                   	pop    esi
c0012613:	5f                   	pop    edi
c0012614:	c3                   	ret    

c0012615 <Dbg::logc(char)>:
c0012615:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012619:	ba fd 03 00 00       	mov    edx,0x3fd
c001261e:	ec                   	in     al,dx
c001261f:	a8 20                	test   al,0x20
c0012621:	74 fb                	je     c001261e <Dbg::logc(char)+0x9>
c0012623:	ba f8 03 00 00       	mov    edx,0x3f8
c0012628:	88 c8                	mov    al,cl
c001262a:	ee                   	out    dx,al
c001262b:	c3                   	ret    

c001262c <Dbg::logs(char*)>:
c001262c:	53                   	push   ebx
c001262d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012631:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012634:	84 c0                	test   al,al
c0012636:	74 0f                	je     c0012647 <Dbg::logs(char*)+0x1b>
c0012638:	50                   	push   eax
c0012639:	43                   	inc    ebx
c001263a:	e8 d6 ff ff ff       	call   c0012615 <Dbg::logc(char)>
c001263f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012642:	5a                   	pop    edx
c0012643:	84 c0                	test   al,al
c0012645:	75 f1                	jne    c0012638 <Dbg::logs(char*)+0xc>
c0012647:	5b                   	pop    ebx
c0012648:	c3                   	ret    

c0012649 <Dbg::logWriteInt(unsigned int)>:
c0012649:	83 ec 10             	sub    esp,0x10
c001264c:	6a 0a                	push   0xa
c001264e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012652:	50                   	push   eax
c0012653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012657:	e8 58 ff ff ff       	call   c00125b4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001265c:	50                   	push   eax
c001265d:	e8 ca ff ff ff       	call   c001262c <Dbg::logs(char*)>
c0012662:	83 c4 20             	add    esp,0x20
c0012665:	c3                   	ret    

c0012666 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012666:	83 ec 10             	sub    esp,0x10
c0012669:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001266d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012671:	50                   	push   eax
c0012672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012676:	e8 39 ff ff ff       	call   c00125b4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001267b:	50                   	push   eax
c001267c:	e8 ab ff ff ff       	call   c001262c <Dbg::logs(char*)>
c0012681:	83 c4 20             	add    esp,0x20
c0012684:	c3                   	ret    

c0012685 <Dbg::kprintf(char const*, ...)>:
c0012685:	55                   	push   ebp
c0012686:	57                   	push   edi
c0012687:	56                   	push   esi
c0012688:	53                   	push   ebx
c0012689:	83 ec 0c             	sub    esp,0xc
c001268c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012690:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012694:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012698:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001269b:	84 c0                	test   al,al
c001269d:	74 4a                	je     c00126e9 <Dbg::kprintf(char const*, ...)+0x64>
c001269f:	31 db                	xor    ebx,ebx
c00126a1:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00126a4:	3c 25                	cmp    al,0x25
c00126a6:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00126a9:	0f 85 e4 00 00 00    	jne    c0012793 <Dbg::kprintf(char const*, ...)+0x10e>
c00126af:	83 c3 02             	add    ebx,0x2
c00126b2:	8a 07                	mov    al,BYTE PTR [edi]
c00126b4:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00126b7:	83 e8 25             	sub    eax,0x25
c00126ba:	3c 53                	cmp    al,0x53
c00126bc:	0f 87 ba 00 00 00    	ja     c001277c <Dbg::kprintf(char const*, ...)+0xf7>
c00126c2:	0f b6 c0             	movzx  eax,al
c00126c5:	ff 24 85 b8 90 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6f48]
c00126cc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126d0:	89 c8                	mov    eax,ecx
c00126d2:	83 c1 04             	add    ecx,0x4
c00126d5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00126d9:	ff 30                	push   DWORD PTR [eax]
c00126db:	e8 4c ff ff ff       	call   c001262c <Dbg::logs(char*)>
c00126e0:	58                   	pop    eax
c00126e1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00126e5:	84 c0                	test   al,al
c00126e7:	75 b8                	jne    c00126a1 <Dbg::kprintf(char const*, ...)+0x1c>
c00126e9:	83 c4 0c             	add    esp,0xc
c00126ec:	5b                   	pop    ebx
c00126ed:	5e                   	pop    esi
c00126ee:	5f                   	pop    edi
c00126ef:	5d                   	pop    ebp
c00126f0:	c3                   	ret    
c00126f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126f5:	89 d0                	mov    eax,edx
c00126f7:	83 c2 04             	add    edx,0x4
c00126fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00126fe:	ff 30                	push   DWORD PTR [eax]
c0012700:	e8 44 ff ff ff       	call   c0012649 <Dbg::logWriteInt(unsigned int)>
c0012705:	58                   	pop    eax
c0012706:	eb d9                	jmp    c00126e1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012708:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001270c:	89 d0                	mov    eax,edx
c001270e:	83 c2 04             	add    edx,0x4
c0012711:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012714:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012718:	50                   	push   eax
c0012719:	e8 f7 fe ff ff       	call   c0012615 <Dbg::logc(char)>
c001271e:	58                   	pop    eax
c001271f:	eb c0                	jmp    c00126e1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012721:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012725:	89 c8                	mov    eax,ecx
c0012727:	83 c1 04             	add    ecx,0x4
c001272a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001272e:	ff 30                	push   DWORD PTR [eax]
c0012730:	e8 14 ff ff ff       	call   c0012649 <Dbg::logWriteInt(unsigned int)>
c0012735:	5f                   	pop    edi
c0012736:	eb a9                	jmp    c00126e1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012738:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001273c:	89 c8                	mov    eax,ecx
c001273e:	83 c1 04             	add    ecx,0x4
c0012741:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012745:	6a 10                	push   0x10
c0012747:	ff 30                	push   DWORD PTR [eax]
c0012749:	e8 18 ff ff ff       	call   c0012666 <Dbg::logWriteIntBase(unsigned int, int)>
c001274e:	59                   	pop    ecx
c001274f:	5f                   	pop    edi
c0012750:	eb 8f                	jmp    c00126e1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012752:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012756:	89 d0                	mov    eax,edx
c0012758:	83 c2 08             	add    edx,0x8
c001275b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001275f:	6a 10                	push   0x10
c0012761:	ff 30                	push   DWORD PTR [eax]
c0012763:	e8 fe fe ff ff       	call   c0012666 <Dbg::logWriteIntBase(unsigned int, int)>
c0012768:	58                   	pop    eax
c0012769:	5a                   	pop    edx
c001276a:	e9 72 ff ff ff       	jmp    c00126e1 <Dbg::kprintf(char const*, ...)+0x5c>
c001276f:	6a 25                	push   0x25
c0012771:	e8 9f fe ff ff       	call   c0012615 <Dbg::logc(char)>
c0012776:	58                   	pop    eax
c0012777:	e9 65 ff ff ff       	jmp    c00126e1 <Dbg::kprintf(char const*, ...)+0x5c>
c001277c:	6a 25                	push   0x25
c001277e:	e8 92 fe ff ff       	call   c0012615 <Dbg::logc(char)>
c0012783:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012786:	50                   	push   eax
c0012787:	e8 89 fe ff ff       	call   c0012615 <Dbg::logc(char)>
c001278c:	5a                   	pop    edx
c001278d:	59                   	pop    ecx
c001278e:	e9 4e ff ff ff       	jmp    c00126e1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012793:	50                   	push   eax
c0012794:	89 eb                	mov    ebx,ebp
c0012796:	e8 7a fe ff ff       	call   c0012615 <Dbg::logc(char)>
c001279b:	89 fd                	mov    ebp,edi
c001279d:	58                   	pop    eax
c001279e:	e9 3e ff ff ff       	jmp    c00126e1 <Dbg::kprintf(char const*, ...)+0x5c>
c00127a3:	90                   	nop

c00127a4 <File::read(unsigned long long, void*, int*)>:
c00127a4:	53                   	push   ebx
c00127a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127a9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127ad:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127b4:	3c 19                	cmp    al,0x19
c00127b6:	77 35                	ja     c00127ed <File::read(unsigned long long, void*, int*)+0x49>
c00127b8:	8b 04 85 60 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd31a0]
c00127bf:	85 c0                	test   eax,eax
c00127c1:	74 2a                	je     c00127ed <File::read(unsigned long long, void*, int*)+0x49>
c00127c3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00127c9:	85 c0                	test   eax,eax
c00127cb:	74 20                	je     c00127ed <File::read(unsigned long long, void*, int*)+0x49>
c00127cd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127d1:	74 21                	je     c00127f4 <File::read(unsigned long long, void*, int*)+0x50>
c00127d3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00127d5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00127d9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00127df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127e7:	5b                   	pop    ebx
c00127e8:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00127eb:	ff e0                	jmp    eax
c00127ed:	b8 0b 00 00 00       	mov    eax,0xb
c00127f2:	eb 05                	jmp    c00127f9 <File::read(unsigned long long, void*, int*)+0x55>
c00127f4:	b8 05 00 00 00       	mov    eax,0x5
c00127f9:	5b                   	pop    ebx
c00127fa:	c3                   	ret    
c00127fb:	90                   	nop

c00127fc <File::write(unsigned long long, void*, int*)>:
c00127fc:	53                   	push   ebx
c00127fd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012801:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012805:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001280c:	3c 19                	cmp    al,0x19
c001280e:	77 35                	ja     c0012845 <File::write(unsigned long long, void*, int*)+0x49>
c0012810:	8b 04 85 60 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd31a0]
c0012817:	85 c0                	test   eax,eax
c0012819:	74 2a                	je     c0012845 <File::write(unsigned long long, void*, int*)+0x49>
c001281b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012821:	85 c0                	test   eax,eax
c0012823:	74 20                	je     c0012845 <File::write(unsigned long long, void*, int*)+0x49>
c0012825:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012829:	74 21                	je     c001284c <File::write(unsigned long long, void*, int*)+0x50>
c001282b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001282d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012831:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012837:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001283b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001283f:	5b                   	pop    ebx
c0012840:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012843:	ff e0                	jmp    eax
c0012845:	b8 0b 00 00 00       	mov    eax,0xb
c001284a:	eb 05                	jmp    c0012851 <File::write(unsigned long long, void*, int*)+0x55>
c001284c:	b8 05 00 00 00       	mov    eax,0x5
c0012851:	5b                   	pop    ebx
c0012852:	c3                   	ret    
c0012853:	90                   	nop

c0012854 <Directory::read(unsigned long long, void*, int*)>:
c0012854:	53                   	push   ebx
c0012855:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012859:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001285d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012864:	3c 19                	cmp    al,0x19
c0012866:	77 35                	ja     c001289d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012868:	8b 04 85 60 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd31a0]
c001286f:	85 c0                	test   eax,eax
c0012871:	74 2a                	je     c001289d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012873:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012879:	85 c0                	test   eax,eax
c001287b:	74 20                	je     c001289d <Directory::read(unsigned long long, void*, int*)+0x49>
c001287d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012881:	74 21                	je     c00128a4 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012883:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012885:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012889:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001288f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012893:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012897:	5b                   	pop    ebx
c0012898:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001289b:	ff e0                	jmp    eax
c001289d:	b8 0b 00 00 00       	mov    eax,0xb
c00128a2:	eb 05                	jmp    c00128a9 <Directory::read(unsigned long long, void*, int*)+0x55>
c00128a4:	b8 05 00 00 00       	mov    eax,0x5
c00128a9:	5b                   	pop    ebx
c00128aa:	c3                   	ret    
c00128ab:	90                   	nop

c00128ac <Directory::write(unsigned long long, void*, int*)>:
c00128ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128b0:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00128b7:	b8 0b 00 00 00       	mov    eax,0xb
c00128bc:	80 fa 19             	cmp    dl,0x19
c00128bf:	77 18                	ja     c00128d9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00128c1:	8b 14 95 60 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd31a0]
c00128c8:	85 d2                	test   edx,edx
c00128ca:	74 0d                	je     c00128d9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00128cc:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00128d3:	19 c0                	sbb    eax,eax
c00128d5:	83 e0 0a             	and    eax,0xa
c00128d8:	40                   	inc    eax
c00128d9:	c3                   	ret    

c00128da <File::isAtty()>:
c00128da:	31 c0                	xor    eax,eax
c00128dc:	c3                   	ret    
c00128dd:	90                   	nop

c00128de <Directory::isAtty()>:
c00128de:	31 c0                	xor    eax,eax
c00128e0:	c3                   	ret    
c00128e1:	90                   	nop

c00128e2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00128e2:	b8 0a 00 00 00       	mov    eax,0xa
c00128e7:	c3                   	ret    

c00128e8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00128e8:	b8 0a 00 00 00       	mov    eax,0xa
c00128ed:	c3                   	ret    

c00128ee <File::~File()>:
c00128ee:	83 ec 0c             	sub    esp,0xc
c00128f1:	ba 74 92 02 c0       	mov    edx,0xc0029274
c00128f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128fa:	89 10                	mov    DWORD PTR [eax],edx
c00128fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012900:	83 ec 0c             	sub    esp,0xc
c0012903:	50                   	push   eax
c0012904:	e8 2b eb ff ff       	call   c0011434 <UnixFile::~UnixFile()>
c0012909:	83 c4 10             	add    esp,0x10
c001290c:	90                   	nop
c001290d:	83 c4 0c             	add    esp,0xc
c0012910:	c3                   	ret    
c0012911:	90                   	nop

c0012912 <File::~File()>:
c0012912:	83 ec 0c             	sub    esp,0xc
c0012915:	83 ec 0c             	sub    esp,0xc
c0012918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001291c:	e8 cd ff ff ff       	call   c00128ee <File::~File()>
c0012921:	83 c4 10             	add    esp,0x10
c0012924:	83 ec 08             	sub    esp,0x8
c0012927:	68 14 01 00 00       	push   0x114
c001292c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012930:	e8 70 fc ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0012935:	83 c4 10             	add    esp,0x10
c0012938:	83 c4 0c             	add    esp,0xc
c001293b:	c3                   	ret    

c001293c <Directory::~Directory()>:
c001293c:	83 ec 0c             	sub    esp,0xc
c001293f:	ba 90 92 02 c0       	mov    edx,0xc0029290
c0012944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012948:	89 10                	mov    DWORD PTR [eax],edx
c001294a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001294e:	83 ec 0c             	sub    esp,0xc
c0012951:	50                   	push   eax
c0012952:	e8 dd ea ff ff       	call   c0011434 <UnixFile::~UnixFile()>
c0012957:	83 c4 10             	add    esp,0x10
c001295a:	90                   	nop
c001295b:	83 c4 0c             	add    esp,0xc
c001295e:	c3                   	ret    
c001295f:	90                   	nop

c0012960 <Directory::~Directory()>:
c0012960:	83 ec 0c             	sub    esp,0xc
c0012963:	83 ec 0c             	sub    esp,0xc
c0012966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001296a:	e8 cd ff ff ff       	call   c001293c <Directory::~Directory()>
c001296f:	83 c4 10             	add    esp,0x10
c0012972:	83 ec 08             	sub    esp,0x8
c0012975:	68 14 01 00 00       	push   0x114
c001297a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001297e:	e8 22 fc ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0012983:	83 c4 10             	add    esp,0x10
c0012986:	83 c4 0c             	add    esp,0xc
c0012989:	c3                   	ret    

c001298a <Filesystem::Filesystem()>:
c001298a:	ba 10 92 02 c0       	mov    edx,0xc0029210
c001298f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012993:	89 10                	mov    DWORD PTR [eax],edx
c0012995:	8b 15 c8 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c9c8
c001299b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001299f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00129a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129a6:	a3 c8 c9 02 c0       	mov    ds:0xc002c9c8,eax
c00129ab:	90                   	nop
c00129ac:	c3                   	ret    
c00129ad:	90                   	nop

c00129ae <Filesystem::~Filesystem()>:
c00129ae:	ba 10 92 02 c0       	mov    edx,0xc0029210
c00129b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129b7:	89 10                	mov    DWORD PTR [eax],edx
c00129b9:	90                   	nop
c00129ba:	c3                   	ret    
c00129bb:	90                   	nop

c00129bc <Filesystem::~Filesystem()>:
c00129bc:	83 ec 0c             	sub    esp,0xc
c00129bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00129c3:	e8 e6 ff ff ff       	call   c00129ae <Filesystem::~Filesystem()>
c00129c8:	83 c4 04             	add    esp,0x4
c00129cb:	83 ec 08             	sub    esp,0x8
c00129ce:	6a 08                	push   0x8
c00129d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129d4:	e8 cc fb ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c00129d9:	83 c4 10             	add    esp,0x10
c00129dc:	83 c4 0c             	add    esp,0xc
c00129df:	c3                   	ret    

c00129e0 <initVFS()>:
c00129e0:	83 ec 18             	sub    esp,0x18
c00129e3:	6a 08                	push   0x8
c00129e5:	e8 ea ca ff ff       	call   c000f4d4 <malloc>
c00129ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00129ed:	e8 b0 d3 00 00       	call   c001fda2 <FAT::FAT()>
c00129f2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00129f9:	e8 d6 ca ff ff       	call   c000f4d4 <malloc>
c00129fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a01:	e8 12 e6 00 00       	call   c0021018 <ISO9660::ISO9660()>
c0012a06:	83 c4 1c             	add    esp,0x1c
c0012a09:	c3                   	ret    

c0012a0a <standardiseFiles(char*, char const*, char const*)>:
c0012a0a:	55                   	push   ebp
c0012a0b:	57                   	push   edi
c0012a0c:	56                   	push   esi
c0012a0d:	53                   	push   ebx
c0012a0e:	81 ec 10 04 00 00    	sub    esp,0x410
c0012a14:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012a1b:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012a22:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012a29:	68 00 04 00 00       	push   0x400
c0012a2e:	6a 00                	push   0x0
c0012a30:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012a34:	56                   	push   esi
c0012a35:	e8 51 dc fe ff       	call   c000068b <memset>
c0012a3a:	83 c4 10             	add    esp,0x10
c0012a3d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012a41:	75 0b                	jne    c0012a4e <standardiseFiles(char*, char const*, char const*)+0x44>
c0012a43:	50                   	push   eax
c0012a44:	50                   	push   eax
c0012a45:	57                   	push   edi
c0012a46:	56                   	push   esi
c0012a47:	e8 de dc fe ff       	call   c000072a <strcpy>
c0012a4c:	eb 41                	jmp    c0012a8f <standardiseFiles(char*, char const*, char const*)+0x85>
c0012a4e:	8a 07                	mov    al,BYTE PTR [edi]
c0012a50:	3c 5c                	cmp    al,0x5c
c0012a52:	74 04                	je     c0012a58 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012a54:	3c 2f                	cmp    al,0x2f
c0012a56:	75 18                	jne    c0012a70 <standardiseFiles(char*, char const*, char const*)+0x66>
c0012a58:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012a5b:	3c 60                	cmp    al,0x60
c0012a5d:	7e 03                	jle    c0012a62 <standardiseFiles(char*, char const*, char const*)+0x58>
c0012a5f:	83 e8 20             	sub    eax,0x20
c0012a62:	88 04 24             	mov    BYTE PTR [esp],al
c0012a65:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a6c:	50                   	push   eax
c0012a6d:	50                   	push   eax
c0012a6e:	eb 18                	jmp    c0012a88 <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012a70:	50                   	push   eax
c0012a71:	50                   	push   eax
c0012a72:	55                   	push   ebp
c0012a73:	56                   	push   esi
c0012a74:	e8 b1 dc fe ff       	call   c000072a <strcpy>
c0012a79:	5a                   	pop    edx
c0012a7a:	59                   	pop    ecx
c0012a7b:	68 86 a6 02 c0       	push   0xc002a686
c0012a80:	56                   	push   esi
c0012a81:	e8 5b dd fe ff       	call   c00007e1 <strcat>
c0012a86:	5d                   	pop    ebp
c0012a87:	58                   	pop    eax
c0012a88:	57                   	push   edi
c0012a89:	56                   	push   esi
c0012a8a:	e8 52 dd fe ff       	call   c00007e1 <strcat>
c0012a8f:	83 c4 10             	add    esp,0x10
c0012a92:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012a95:	3c 60                	cmp    al,0x60
c0012a97:	7e 03                	jle    c0012a9c <standardiseFiles(char*, char const*, char const*)+0x92>
c0012a99:	83 e8 20             	sub    eax,0x20
c0012a9c:	88 04 24             	mov    BYTE PTR [esp],al
c0012a9f:	88 03                	mov    BYTE PTR [ebx],al
c0012aa1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012aa8:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012aae:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012ab2:	bf 03 00 00 00       	mov    edi,0x3
c0012ab7:	b8 03 00 00 00       	mov    eax,0x3
c0012abc:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012abf:	84 d2                	test   dl,dl
c0012ac1:	0f 84 91 00 00 00    	je     c0012b58 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012ac7:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012aca:	80 fa 5c             	cmp    dl,0x5c
c0012acd:	74 05                	je     c0012ad4 <standardiseFiles(char*, char const*, char const*)+0xca>
c0012acf:	80 fa 2f             	cmp    dl,0x2f
c0012ad2:	75 12                	jne    c0012ae6 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012ad4:	89 c5                	mov    ebp,eax
c0012ad6:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012adb:	74 09                	je     c0012ae6 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012add:	40                   	inc    eax
c0012ade:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012ae2:	89 cf                	mov    edi,ecx
c0012ae4:	eb d6                	jmp    c0012abc <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012ae6:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012aeb:	75 5b                	jne    c0012b48 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012aed:	80 fa 2e             	cmp    dl,0x2e
c0012af0:	75 56                	jne    c0012b48 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012af2:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012af6:	74 19                	je     c0012b11 <standardiseFiles(char*, char const*, char const*)+0x107>
c0012af8:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012afd:	74 53                	je     c0012b52 <standardiseFiles(char*, char const*, char const*)+0x148>
c0012aff:	89 f9                	mov    ecx,edi
c0012b01:	41                   	inc    ecx
c0012b02:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b05:	80 fa 2f             	cmp    dl,0x2f
c0012b08:	74 f7                	je     c0012b01 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b0a:	80 fa 5c             	cmp    dl,0x5c
c0012b0d:	74 f2                	je     c0012b01 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b0f:	eb d1                	jmp    c0012ae2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b11:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b16:	74 3a                	je     c0012b52 <standardiseFiles(char*, char const*, char const*)+0x148>
c0012b18:	83 f8 03             	cmp    eax,0x3
c0012b1b:	74 c5                	je     c0012ae2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b1d:	41                   	inc    ecx
c0012b1e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b21:	80 fa 2f             	cmp    dl,0x2f
c0012b24:	74 f7                	je     c0012b1d <standardiseFiles(char*, char const*, char const*)+0x113>
c0012b26:	80 fa 5c             	cmp    dl,0x5c
c0012b29:	74 f2                	je     c0012b1d <standardiseFiles(char*, char const*, char const*)+0x113>
c0012b2b:	48                   	dec    eax
c0012b2c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b30:	75 06                	jne    c0012b38 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b32:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b36:	eb f3                	jmp    c0012b2b <standardiseFiles(char*, char const*, char const*)+0x121>
c0012b38:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b3c:	74 07                	je     c0012b45 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012b3e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b42:	48                   	dec    eax
c0012b43:	eb f3                	jmp    c0012b38 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b45:	40                   	inc    eax
c0012b46:	eb 9a                	jmp    c0012ae2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b48:	80 fa 2f             	cmp    dl,0x2f
c0012b4b:	74 95                	je     c0012ae2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b4d:	80 fa 5c             	cmp    dl,0x5c
c0012b50:	74 90                	je     c0012ae2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b52:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012b55:	40                   	inc    eax
c0012b56:	eb 8a                	jmp    c0012ae2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b58:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b5c:	83 ec 0c             	sub    esp,0xc
c0012b5f:	53                   	push   ebx
c0012b60:	e8 43 db fe ff       	call   c00006a8 <strlen>
c0012b65:	83 c4 10             	add    esp,0x10
c0012b68:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012b6d:	75 26                	jne    c0012b95 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012b6f:	83 ec 0c             	sub    esp,0xc
c0012b72:	53                   	push   ebx
c0012b73:	e8 30 db fe ff       	call   c00006a8 <strlen>
c0012b78:	83 c4 10             	add    esp,0x10
c0012b7b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012b80:	74 26                	je     c0012ba8 <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012b82:	83 ec 0c             	sub    esp,0xc
c0012b85:	53                   	push   ebx
c0012b86:	e8 1d db fe ff       	call   c00006a8 <strlen>
c0012b8b:	83 c4 10             	add    esp,0x10
c0012b8e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012b93:	eb c7                	jmp    c0012b5c <standardiseFiles(char*, char const*, char const*)+0x152>
c0012b95:	83 ec 0c             	sub    esp,0xc
c0012b98:	53                   	push   ebx
c0012b99:	e8 0a db fe ff       	call   c00006a8 <strlen>
c0012b9e:	83 c4 10             	add    esp,0x10
c0012ba1:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012ba6:	74 c7                	je     c0012b6f <standardiseFiles(char*, char const*, char const*)+0x165>
c0012ba8:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012bae:	5b                   	pop    ebx
c0012baf:	5e                   	pop    esi
c0012bb0:	5f                   	pop    edi
c0012bb1:	5d                   	pop    ebp
c0012bb2:	c3                   	ret    
c0012bb3:	90                   	nop

c0012bb4 <File::File(char const*, Process*)>:
c0012bb4:	83 ec 0c             	sub    esp,0xc
c0012bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bbb:	83 ec 08             	sub    esp,0x8
c0012bbe:	6a 00                	push   0x0
c0012bc0:	50                   	push   eax
c0012bc1:	e8 8c e6 ff ff       	call   c0011252 <UnixFile::UnixFile(int)>
c0012bc6:	83 c4 10             	add    esp,0x10
c0012bc9:	ba 74 92 02 c0       	mov    edx,0xc0029274
c0012bce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bd2:	89 10                	mov    DWORD PTR [eax],edx
c0012bd4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012bd8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012be2:	83 c0 0d             	add    eax,0xd
c0012be5:	83 ec 04             	sub    esp,0x4
c0012be8:	52                   	push   edx
c0012be9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bed:	50                   	push   eax
c0012bee:	e8 17 fe ff ff       	call   c0012a0a <standardiseFiles(char*, char const*, char const*)>
c0012bf3:	83 c4 10             	add    esp,0x10
c0012bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bfa:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012bfd:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c04:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c0e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012c12:	90                   	nop
c0012c13:	83 c4 0c             	add    esp,0xc
c0012c16:	c3                   	ret    
c0012c17:	90                   	nop

c0012c18 <File::open(FileOpenMode)>:
c0012c18:	53                   	push   ebx
c0012c19:	b8 0b 00 00 00       	mov    eax,0xb
c0012c1e:	83 ec 08             	sub    esp,0x8
c0012c21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c25:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012c2c:	80 fa 19             	cmp    dl,0x19
c0012c2f:	77 40                	ja     c0012c71 <File::open(FileOpenMode)+0x59>
c0012c31:	8b 14 95 60 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd31a0]
c0012c38:	85 d2                	test   edx,edx
c0012c3a:	74 35                	je     c0012c71 <File::open(FileOpenMode)+0x59>
c0012c3c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c42:	85 d2                	test   edx,edx
c0012c44:	74 2b                	je     c0012c71 <File::open(FileOpenMode)+0x59>
c0012c46:	b8 06 00 00 00       	mov    eax,0x6
c0012c4b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012c4f:	75 20                	jne    c0012c71 <File::open(FileOpenMode)+0x59>
c0012c51:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c53:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012c59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c5d:	51                   	push   ecx
c0012c5e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012c61:	51                   	push   ecx
c0012c62:	52                   	push   edx
c0012c63:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012c66:	83 c4 10             	add    esp,0x10
c0012c69:	85 c0                	test   eax,eax
c0012c6b:	75 04                	jne    c0012c71 <File::open(FileOpenMode)+0x59>
c0012c6d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012c71:	83 c4 08             	add    esp,0x8
c0012c74:	5b                   	pop    ebx
c0012c75:	c3                   	ret    

c0012c76 <File::close()>:
c0012c76:	53                   	push   ebx
c0012c77:	b8 0b 00 00 00       	mov    eax,0xb
c0012c7c:	83 ec 08             	sub    esp,0x8
c0012c7f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012c83:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012c8a:	80 fa 19             	cmp    dl,0x19
c0012c8d:	77 41                	ja     c0012cd0 <File::close()+0x5a>
c0012c8f:	8b 1c 95 60 ce 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd31a0]
c0012c96:	85 db                	test   ebx,ebx
c0012c98:	74 36                	je     c0012cd0 <File::close()+0x5a>
c0012c9a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012ca1:	74 2d                	je     c0012cd0 <File::close()+0x5a>
c0012ca3:	b8 05 00 00 00       	mov    eax,0x5
c0012ca8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012cac:	74 22                	je     c0012cd0 <File::close()+0x5a>
c0012cae:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012cb2:	8b 04 95 60 ce 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd31a0]
c0012cb9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012cbf:	53                   	push   ebx
c0012cc0:	53                   	push   ebx
c0012cc1:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cc3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012cc9:	50                   	push   eax
c0012cca:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012ccd:	83 c4 10             	add    esp,0x10
c0012cd0:	83 c4 08             	add    esp,0x8
c0012cd3:	5b                   	pop    ebx
c0012cd4:	c3                   	ret    
c0012cd5:	90                   	nop

c0012cd6 <File::seek(unsigned long long)>:
c0012cd6:	56                   	push   esi
c0012cd7:	53                   	push   ebx
c0012cd8:	b8 0b 00 00 00       	mov    eax,0xb
c0012cdd:	51                   	push   ecx
c0012cde:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012ce2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012ce6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012ced:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012cf1:	80 fa 19             	cmp    dl,0x19
c0012cf4:	77 31                	ja     c0012d27 <File::seek(unsigned long long)+0x51>
c0012cf6:	8b 14 95 60 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd31a0]
c0012cfd:	85 d2                	test   edx,edx
c0012cff:	74 26                	je     c0012d27 <File::seek(unsigned long long)+0x51>
c0012d01:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d07:	85 d2                	test   edx,edx
c0012d09:	74 1c                	je     c0012d27 <File::seek(unsigned long long)+0x51>
c0012d0b:	b8 05 00 00 00       	mov    eax,0x5
c0012d10:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012d14:	74 11                	je     c0012d27 <File::seek(unsigned long long)+0x51>
c0012d16:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d18:	53                   	push   ebx
c0012d19:	51                   	push   ecx
c0012d1a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012d20:	52                   	push   edx
c0012d21:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012d24:	83 c4 10             	add    esp,0x10
c0012d27:	5a                   	pop    edx
c0012d28:	5b                   	pop    ebx
c0012d29:	5e                   	pop    esi
c0012d2a:	c3                   	ret    
c0012d2b:	90                   	nop

c0012d2c <File::tell(unsigned long long*)>:
c0012d2c:	83 ec 0c             	sub    esp,0xc
c0012d2f:	b8 0b 00 00 00       	mov    eax,0xb
c0012d34:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d38:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d3f:	80 fa 19             	cmp    dl,0x19
c0012d42:	77 34                	ja     c0012d78 <File::tell(unsigned long long*)+0x4c>
c0012d44:	8b 14 95 60 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd31a0]
c0012d4b:	85 d2                	test   edx,edx
c0012d4d:	74 29                	je     c0012d78 <File::tell(unsigned long long*)+0x4c>
c0012d4f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d55:	85 d2                	test   edx,edx
c0012d57:	74 1f                	je     c0012d78 <File::tell(unsigned long long*)+0x4c>
c0012d59:	b8 05 00 00 00       	mov    eax,0x5
c0012d5e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d62:	74 14                	je     c0012d78 <File::tell(unsigned long long*)+0x4c>
c0012d64:	50                   	push   eax
c0012d65:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d6b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d71:	52                   	push   edx
c0012d72:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012d75:	83 c4 10             	add    esp,0x10
c0012d78:	83 c4 0c             	add    esp,0xc
c0012d7b:	c3                   	ret    

c0012d7c <File::rewind()>:
c0012d7c:	83 ec 10             	sub    esp,0x10
c0012d7f:	6a 00                	push   0x0
c0012d81:	6a 00                	push   0x0
c0012d83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d87:	e8 4a ff ff ff       	call   c0012cd6 <File::seek(unsigned long long)>
c0012d8c:	83 c4 1c             	add    esp,0x1c
c0012d8f:	c3                   	ret    

c0012d90 <File::unlink()>:
c0012d90:	83 ec 0c             	sub    esp,0xc
c0012d93:	b8 0b 00 00 00       	mov    eax,0xb
c0012d98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d9c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012da3:	80 f9 19             	cmp    cl,0x19
c0012da6:	77 2f                	ja     c0012dd7 <File::unlink()+0x47>
c0012da8:	8b 0c 8d 60 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd31a0]
c0012daf:	85 c9                	test   ecx,ecx
c0012db1:	74 24                	je     c0012dd7 <File::unlink()+0x47>
c0012db3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012db9:	85 c9                	test   ecx,ecx
c0012dbb:	74 1a                	je     c0012dd7 <File::unlink()+0x47>
c0012dbd:	b8 06 00 00 00       	mov    eax,0x6
c0012dc2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dc6:	75 0f                	jne    c0012dd7 <File::unlink()+0x47>
c0012dc8:	83 c2 0d             	add    edx,0xd
c0012dcb:	50                   	push   eax
c0012dcc:	50                   	push   eax
c0012dcd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012dcf:	52                   	push   edx
c0012dd0:	51                   	push   ecx
c0012dd1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012dd4:	83 c4 10             	add    esp,0x10
c0012dd7:	83 c4 0c             	add    esp,0xc
c0012dda:	c3                   	ret    
c0012ddb:	90                   	nop

c0012ddc <File::rename(char const*)>:
c0012ddc:	83 ec 0c             	sub    esp,0xc
c0012ddf:	b8 0b 00 00 00       	mov    eax,0xb
c0012de4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012de8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012def:	80 f9 19             	cmp    cl,0x19
c0012df2:	77 32                	ja     c0012e26 <File::rename(char const*)+0x4a>
c0012df4:	8b 0c 8d 60 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd31a0]
c0012dfb:	85 c9                	test   ecx,ecx
c0012dfd:	74 27                	je     c0012e26 <File::rename(char const*)+0x4a>
c0012dff:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e05:	85 c9                	test   ecx,ecx
c0012e07:	74 1d                	je     c0012e26 <File::rename(char const*)+0x4a>
c0012e09:	b8 06 00 00 00       	mov    eax,0x6
c0012e0e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e12:	75 12                	jne    c0012e26 <File::rename(char const*)+0x4a>
c0012e14:	83 c2 0d             	add    edx,0xd
c0012e17:	50                   	push   eax
c0012e18:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e1e:	52                   	push   edx
c0012e1f:	51                   	push   ecx
c0012e20:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012e23:	83 c4 10             	add    esp,0x10
c0012e26:	83 c4 0c             	add    esp,0xc
c0012e29:	c3                   	ret    

c0012e2a <File::chfatattr(unsigned char, unsigned char)>:
c0012e2a:	57                   	push   edi
c0012e2b:	b8 0b 00 00 00       	mov    eax,0xb
c0012e30:	56                   	push   esi
c0012e31:	53                   	push   ebx
c0012e32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e36:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012e3a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e41:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012e45:	80 f9 19             	cmp    cl,0x19
c0012e48:	77 37                	ja     c0012e81 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e4a:	8b 0c 8d 60 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd31a0]
c0012e51:	85 c9                	test   ecx,ecx
c0012e53:	74 2c                	je     c0012e81 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e55:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e5b:	85 c9                	test   ecx,ecx
c0012e5d:	74 22                	je     c0012e81 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e5f:	b8 06 00 00 00       	mov    eax,0x6
c0012e64:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e68:	75 17                	jne    c0012e81 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e6a:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012e6c:	89 f0                	mov    eax,esi
c0012e6e:	83 c2 0d             	add    edx,0xd
c0012e71:	0f b6 f0             	movzx  esi,al
c0012e74:	0f b6 db             	movzx  ebx,bl
c0012e77:	56                   	push   esi
c0012e78:	53                   	push   ebx
c0012e79:	52                   	push   edx
c0012e7a:	51                   	push   ecx
c0012e7b:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012e7e:	83 c4 10             	add    esp,0x10
c0012e81:	5b                   	pop    ebx
c0012e82:	5e                   	pop    esi
c0012e83:	5f                   	pop    edi
c0012e84:	c3                   	ret    
c0012e85:	90                   	nop

c0012e86 <File::exists()>:
c0012e86:	83 ec 0c             	sub    esp,0xc
c0012e89:	31 c0                	xor    eax,eax
c0012e8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e8f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e96:	80 f9 19             	cmp    cl,0x19
c0012e99:	77 24                	ja     c0012ebf <File::exists()+0x39>
c0012e9b:	8b 0c 8d 60 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd31a0]
c0012ea2:	85 c9                	test   ecx,ecx
c0012ea4:	74 19                	je     c0012ebf <File::exists()+0x39>
c0012ea6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012eac:	85 c9                	test   ecx,ecx
c0012eae:	74 0f                	je     c0012ebf <File::exists()+0x39>
c0012eb0:	83 c2 0d             	add    edx,0xd
c0012eb3:	50                   	push   eax
c0012eb4:	50                   	push   eax
c0012eb5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012eb7:	52                   	push   edx
c0012eb8:	51                   	push   ecx
c0012eb9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012ebc:	83 c4 10             	add    esp,0x10
c0012ebf:	83 c4 0c             	add    esp,0xc
c0012ec2:	c3                   	ret    
c0012ec3:	90                   	nop

c0012ec4 <File::stat(unsigned long long*, bool*)>:
c0012ec4:	56                   	push   esi
c0012ec5:	53                   	push   ebx
c0012ec6:	50                   	push   eax
c0012ec7:	b8 0b 00 00 00       	mov    eax,0xb
c0012ecc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ed0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012ed4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012edb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012edf:	80 f9 19             	cmp    cl,0x19
c0012ee2:	77 3d                	ja     c0012f21 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ee4:	8b 0c 8d 60 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd31a0]
c0012eeb:	85 c9                	test   ecx,ecx
c0012eed:	74 32                	je     c0012f21 <File::stat(unsigned long long*, bool*)+0x5d>
c0012eef:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ef5:	85 c9                	test   ecx,ecx
c0012ef7:	74 28                	je     c0012f21 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ef9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012efb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012eff:	74 13                	je     c0012f14 <File::stat(unsigned long long*, bool*)+0x50>
c0012f01:	83 ec 04             	sub    esp,0x4
c0012f04:	56                   	push   esi
c0012f05:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012f0b:	51                   	push   ecx
c0012f0c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012f0f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012f12:	eb 0a                	jmp    c0012f1e <File::stat(unsigned long long*, bool*)+0x5a>
c0012f14:	53                   	push   ebx
c0012f15:	83 c2 0d             	add    edx,0xd
c0012f18:	56                   	push   esi
c0012f19:	52                   	push   edx
c0012f1a:	51                   	push   ecx
c0012f1b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012f1e:	83 c4 10             	add    esp,0x10
c0012f21:	5a                   	pop    edx
c0012f22:	5b                   	pop    ebx
c0012f23:	5e                   	pop    esi
c0012f24:	c3                   	ret    

c0012f25 <getcwd(Process*, char*, int)>:
c0012f25:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f29:	31 c0                	xor    eax,eax
c0012f2b:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012f2e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012f32:	7d 15                	jge    c0012f49 <getcwd(Process*, char*, int)+0x24>
c0012f34:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f38:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012f3f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012f42:	84 c9                	test   cl,cl
c0012f44:	74 06                	je     c0012f4c <getcwd(Process*, char*, int)+0x27>
c0012f46:	40                   	inc    eax
c0012f47:	eb e2                	jmp    c0012f2b <getcwd(Process*, char*, int)+0x6>
c0012f49:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012f4c:	31 c0                	xor    eax,eax
c0012f4e:	c3                   	ret    

c0012f4f <setcwd(Process*, char*)>:
c0012f4f:	55                   	push   ebp
c0012f50:	57                   	push   edi
c0012f51:	56                   	push   esi
c0012f52:	53                   	push   ebx
c0012f53:	81 ec 20 02 00 00    	sub    esp,0x220
c0012f59:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012f60:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012f66:	57                   	push   edi
c0012f67:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012f6e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012f72:	56                   	push   esi
c0012f73:	e8 92 fa ff ff       	call   c0012a0a <standardiseFiles(char*, char const*, char const*)>
c0012f78:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f7b:	e8 28 d7 fe ff       	call   c00006a8 <strlen>
c0012f80:	83 c4 10             	add    esp,0x10
c0012f83:	83 f8 02             	cmp    eax,0x2
c0012f86:	77 17                	ja     c0012f9f <setcwd(Process*, char*)+0x50>
c0012f88:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012f8d:	83 e8 41             	sub    eax,0x41
c0012f90:	83 f8 19             	cmp    eax,0x19
c0012f93:	76 24                	jbe    c0012fb9 <setcwd(Process*, char*)+0x6a>
c0012f95:	b8 03 00 00 00       	mov    eax,0x3
c0012f9a:	e9 e0 00 00 00       	jmp    c001307f <setcwd(Process*, char*)+0x130>
c0012f9f:	83 ec 0c             	sub    esp,0xc
c0012fa2:	56                   	push   esi
c0012fa3:	e8 00 d7 fe ff       	call   c00006a8 <strlen>
c0012fa8:	83 c4 10             	add    esp,0x10
c0012fab:	83 f8 03             	cmp    eax,0x3
c0012fae:	75 34                	jne    c0012fe4 <setcwd(Process*, char*)+0x95>
c0012fb0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012fb5:	75 2d                	jne    c0012fe4 <setcwd(Process*, char*)+0x95>
c0012fb7:	eb cf                	jmp    c0012f88 <setcwd(Process*, char*)+0x39>
c0012fb9:	8b 14 85 60 ce 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd31a0]
c0012fc0:	b8 05 00 00 00       	mov    eax,0x5
c0012fc5:	85 d2                	test   edx,edx
c0012fc7:	0f 84 b2 00 00 00    	je     c001307f <setcwd(Process*, char*)+0x130>
c0012fcd:	b8 06 00 00 00       	mov    eax,0x6
c0012fd2:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012fd9:	0f 85 92 00 00 00    	jne    c0013071 <setcwd(Process*, char*)+0x122>
c0012fdf:	e9 9b 00 00 00       	jmp    c001307f <setcwd(Process*, char*)+0x130>
c0012fe4:	83 ec 0c             	sub    esp,0xc
c0012fe7:	68 14 01 00 00       	push   0x114
c0012fec:	e8 e3 c4 ff ff       	call   c000f4d4 <malloc>
c0012ff1:	83 c4 0c             	add    esp,0xc
c0012ff4:	89 c3                	mov    ebx,eax
c0012ff6:	55                   	push   ebp
c0012ff7:	56                   	push   esi
c0012ff8:	50                   	push   eax
c0012ff9:	e8 b6 fb ff ff       	call   c0012bb4 <File::File(char const*, Process*)>
c0012ffe:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013003:	83 c4 0c             	add    esp,0xc
c0013006:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001300a:	50                   	push   eax
c001300b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001300f:	50                   	push   eax
c0013010:	53                   	push   ebx
c0013011:	e8 ae fe ff ff       	call   c0012ec4 <File::stat(unsigned long long*, bool*)>
c0013016:	83 c4 10             	add    esp,0x10
c0013019:	83 f8 02             	cmp    eax,0x2
c001301c:	74 04                	je     c0013022 <setcwd(Process*, char*)+0xd3>
c001301e:	85 c0                	test   eax,eax
c0013020:	74 1c                	je     c001303e <setcwd(Process*, char*)+0xef>
c0013022:	b8 01 00 00 00       	mov    eax,0x1
c0013027:	85 db                	test   ebx,ebx
c0013029:	74 54                	je     c001307f <setcwd(Process*, char*)+0x130>
c001302b:	83 ec 0c             	sub    esp,0xc
c001302e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013030:	53                   	push   ebx
c0013031:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013034:	83 c4 10             	add    esp,0x10
c0013037:	b8 01 00 00 00       	mov    eax,0x1
c001303c:	eb 41                	jmp    c001307f <setcwd(Process*, char*)+0x130>
c001303e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013043:	75 1c                	jne    c0013061 <setcwd(Process*, char*)+0x112>
c0013045:	b8 02 00 00 00       	mov    eax,0x2
c001304a:	85 db                	test   ebx,ebx
c001304c:	74 31                	je     c001307f <setcwd(Process*, char*)+0x130>
c001304e:	83 ec 0c             	sub    esp,0xc
c0013051:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013053:	53                   	push   ebx
c0013054:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013057:	83 c4 10             	add    esp,0x10
c001305a:	b8 02 00 00 00       	mov    eax,0x2
c001305f:	eb 1e                	jmp    c001307f <setcwd(Process*, char*)+0x130>
c0013061:	85 db                	test   ebx,ebx
c0013063:	74 0c                	je     c0013071 <setcwd(Process*, char*)+0x122>
c0013065:	83 ec 0c             	sub    esp,0xc
c0013068:	8b 03                	mov    eax,DWORD PTR [ebx]
c001306a:	53                   	push   ebx
c001306b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001306e:	83 c4 10             	add    esp,0x10
c0013071:	50                   	push   eax
c0013072:	50                   	push   eax
c0013073:	56                   	push   esi
c0013074:	57                   	push   edi
c0013075:	e8 b0 d6 fe ff       	call   c000072a <strcpy>
c001307a:	83 c4 10             	add    esp,0x10
c001307d:	31 c0                	xor    eax,eax
c001307f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013085:	5b                   	pop    ebx
c0013086:	5e                   	pop    esi
c0013087:	5f                   	pop    edi
c0013088:	5d                   	pop    ebp
c0013089:	c3                   	ret    

c001308a <Directory::Directory(char const*, Process*)>:
c001308a:	83 ec 0c             	sub    esp,0xc
c001308d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013091:	83 ec 08             	sub    esp,0x8
c0013094:	6a 00                	push   0x0
c0013096:	50                   	push   eax
c0013097:	e8 b6 e1 ff ff       	call   c0011252 <UnixFile::UnixFile(int)>
c001309c:	83 c4 10             	add    esp,0x10
c001309f:	ba 90 92 02 c0       	mov    edx,0xc0029290
c00130a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130a8:	89 10                	mov    DWORD PTR [eax],edx
c00130aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130ae:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00130b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b8:	83 c0 0d             	add    eax,0xd
c00130bb:	83 ec 04             	sub    esp,0x4
c00130be:	52                   	push   edx
c00130bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130c3:	50                   	push   eax
c00130c4:	e8 41 f9 ff ff       	call   c0012a0a <standardiseFiles(char*, char const*, char const*)>
c00130c9:	83 c4 10             	add    esp,0x10
c00130cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00130d3:	8d 50 bf             	lea    edx,[eax-0x41]
c00130d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130da:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00130e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00130e8:	90                   	nop
c00130e9:	83 c4 0c             	add    esp,0xc
c00130ec:	c3                   	ret    
c00130ed:	90                   	nop

c00130ee <Directory::open()>:
c00130ee:	53                   	push   ebx
c00130ef:	b8 0b 00 00 00       	mov    eax,0xb
c00130f4:	83 ec 08             	sub    esp,0x8
c00130f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130fb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013102:	80 fa 19             	cmp    dl,0x19
c0013105:	77 3d                	ja     c0013144 <Directory::open()+0x56>
c0013107:	8b 14 95 60 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd31a0]
c001310e:	85 d2                	test   edx,edx
c0013110:	74 32                	je     c0013144 <Directory::open()+0x56>
c0013112:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013118:	85 d2                	test   edx,edx
c001311a:	74 28                	je     c0013144 <Directory::open()+0x56>
c001311c:	b8 06 00 00 00       	mov    eax,0x6
c0013121:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013125:	75 1d                	jne    c0013144 <Directory::open()+0x56>
c0013127:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001312d:	50                   	push   eax
c001312e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013130:	51                   	push   ecx
c0013131:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013134:	51                   	push   ecx
c0013135:	52                   	push   edx
c0013136:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013139:	83 c4 10             	add    esp,0x10
c001313c:	85 c0                	test   eax,eax
c001313e:	75 04                	jne    c0013144 <Directory::open()+0x56>
c0013140:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013144:	83 c4 08             	add    esp,0x8
c0013147:	5b                   	pop    ebx
c0013148:	c3                   	ret    
c0013149:	90                   	nop

c001314a <Directory::close()>:
c001314a:	53                   	push   ebx
c001314b:	b8 0b 00 00 00       	mov    eax,0xb
c0013150:	83 ec 08             	sub    esp,0x8
c0013153:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013157:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001315e:	80 fa 19             	cmp    dl,0x19
c0013161:	77 41                	ja     c00131a4 <Directory::close()+0x5a>
c0013163:	8b 1c 95 60 ce 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd31a0]
c001316a:	85 db                	test   ebx,ebx
c001316c:	74 36                	je     c00131a4 <Directory::close()+0x5a>
c001316e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013175:	74 2d                	je     c00131a4 <Directory::close()+0x5a>
c0013177:	b8 05 00 00 00       	mov    eax,0x5
c001317c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013180:	74 22                	je     c00131a4 <Directory::close()+0x5a>
c0013182:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013186:	8b 04 95 60 ce 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd31a0]
c001318d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013193:	53                   	push   ebx
c0013194:	53                   	push   ebx
c0013195:	8b 10                	mov    edx,DWORD PTR [eax]
c0013197:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001319d:	50                   	push   eax
c001319e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00131a1:	83 c4 10             	add    esp,0x10
c00131a4:	83 c4 08             	add    esp,0x8
c00131a7:	5b                   	pop    ebx
c00131a8:	c3                   	ret    
c00131a9:	90                   	nop

c00131aa <Directory::unlink()>:
c00131aa:	83 ec 0c             	sub    esp,0xc
c00131ad:	b8 0b 00 00 00       	mov    eax,0xb
c00131b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131b6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131bd:	80 f9 19             	cmp    cl,0x19
c00131c0:	77 2f                	ja     c00131f1 <Directory::unlink()+0x47>
c00131c2:	8b 0c 8d 60 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd31a0]
c00131c9:	85 c9                	test   ecx,ecx
c00131cb:	74 24                	je     c00131f1 <Directory::unlink()+0x47>
c00131cd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131d3:	85 c9                	test   ecx,ecx
c00131d5:	74 1a                	je     c00131f1 <Directory::unlink()+0x47>
c00131d7:	b8 06 00 00 00       	mov    eax,0x6
c00131dc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131e0:	75 0f                	jne    c00131f1 <Directory::unlink()+0x47>
c00131e2:	83 c2 0d             	add    edx,0xd
c00131e5:	50                   	push   eax
c00131e6:	50                   	push   eax
c00131e7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131e9:	52                   	push   edx
c00131ea:	51                   	push   ecx
c00131eb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00131ee:	83 c4 10             	add    esp,0x10
c00131f1:	83 c4 0c             	add    esp,0xc
c00131f4:	c3                   	ret    
c00131f5:	90                   	nop

c00131f6 <Directory::rename(char const*)>:
c00131f6:	83 ec 0c             	sub    esp,0xc
c00131f9:	b8 0b 00 00 00       	mov    eax,0xb
c00131fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013202:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013209:	80 f9 19             	cmp    cl,0x19
c001320c:	77 32                	ja     c0013240 <Directory::rename(char const*)+0x4a>
c001320e:	8b 0c 8d 60 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd31a0]
c0013215:	85 c9                	test   ecx,ecx
c0013217:	74 27                	je     c0013240 <Directory::rename(char const*)+0x4a>
c0013219:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001321f:	85 c9                	test   ecx,ecx
c0013221:	74 1d                	je     c0013240 <Directory::rename(char const*)+0x4a>
c0013223:	b8 06 00 00 00       	mov    eax,0x6
c0013228:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001322c:	75 12                	jne    c0013240 <Directory::rename(char const*)+0x4a>
c001322e:	83 c2 0d             	add    edx,0xd
c0013231:	50                   	push   eax
c0013232:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013234:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013238:	52                   	push   edx
c0013239:	51                   	push   ecx
c001323a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001323d:	83 c4 10             	add    esp,0x10
c0013240:	83 c4 0c             	add    esp,0xc
c0013243:	c3                   	ret    

c0013244 <Directory::exists()>:
c0013244:	83 ec 0c             	sub    esp,0xc
c0013247:	31 c0                	xor    eax,eax
c0013249:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001324d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013254:	80 f9 19             	cmp    cl,0x19
c0013257:	77 24                	ja     c001327d <Directory::exists()+0x39>
c0013259:	8b 0c 8d 60 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd31a0]
c0013260:	85 c9                	test   ecx,ecx
c0013262:	74 19                	je     c001327d <Directory::exists()+0x39>
c0013264:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001326a:	85 c9                	test   ecx,ecx
c001326c:	74 0f                	je     c001327d <Directory::exists()+0x39>
c001326e:	83 c2 0d             	add    edx,0xd
c0013271:	50                   	push   eax
c0013272:	50                   	push   eax
c0013273:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013275:	52                   	push   edx
c0013276:	51                   	push   ecx
c0013277:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001327a:	83 c4 10             	add    esp,0x10
c001327d:	83 c4 0c             	add    esp,0xc
c0013280:	c3                   	ret    
c0013281:	90                   	nop

c0013282 <Directory::read(dirent*)>:
c0013282:	83 ec 1c             	sub    esp,0x1c
c0013285:	b8 0b 00 00 00       	mov    eax,0xb
c001328a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001328e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013295:	80 fa 19             	cmp    dl,0x19
c0013298:	77 30                	ja     c00132ca <Directory::read(dirent*)+0x48>
c001329a:	8b 14 95 60 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd31a0]
c00132a1:	85 d2                	test   edx,edx
c00132a3:	74 25                	je     c00132ca <Directory::read(dirent*)+0x48>
c00132a5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00132ac:	74 1c                	je     c00132ca <Directory::read(dirent*)+0x48>
c00132ae:	83 ec 0c             	sub    esp,0xc
c00132b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132b3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00132b7:	52                   	push   edx
c00132b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00132bc:	6a 00                	push   0x0
c00132be:	68 10 01 00 00       	push   0x110
c00132c3:	51                   	push   ecx
c00132c4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00132c7:	83 c4 20             	add    esp,0x20
c00132ca:	83 c4 1c             	add    esp,0x1c
c00132cd:	c3                   	ret    

c00132ce <Directory::create()>:
c00132ce:	83 ec 0c             	sub    esp,0xc
c00132d1:	b8 0b 00 00 00       	mov    eax,0xb
c00132d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132da:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132e1:	80 f9 19             	cmp    cl,0x19
c00132e4:	77 2f                	ja     c0013315 <Directory::create()+0x47>
c00132e6:	8b 0c 8d 60 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd31a0]
c00132ed:	85 c9                	test   ecx,ecx
c00132ef:	74 24                	je     c0013315 <Directory::create()+0x47>
c00132f1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132f7:	85 c9                	test   ecx,ecx
c00132f9:	74 1a                	je     c0013315 <Directory::create()+0x47>
c00132fb:	b8 06 00 00 00       	mov    eax,0x6
c0013300:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013304:	75 0f                	jne    c0013315 <Directory::create()+0x47>
c0013306:	83 c2 0d             	add    edx,0xd
c0013309:	50                   	push   eax
c001330a:	50                   	push   eax
c001330b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001330d:	52                   	push   edx
c001330e:	51                   	push   ecx
c001330f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013312:	83 c4 10             	add    esp,0x10
c0013315:	83 c4 0c             	add    esp,0xc
c0013318:	c3                   	ret    
c0013319:	90                   	nop

c001331a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001331a:	b8 0a 00 00 00       	mov    eax,0xa
c001331f:	c3                   	ret    

c0013320 <Bus::Bus(char const*)>:
c0013320:	83 ec 0c             	sub    esp,0xc
c0013323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013327:	83 ec 08             	sub    esp,0x8
c001332a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001332e:	50                   	push   eax
c001332f:	e8 30 09 00 00       	call   c0013c64 <Device::Device(char const*)>
c0013334:	83 c4 10             	add    esp,0x10
c0013337:	ba ac 92 02 c0       	mov    edx,0xc00292ac
c001333c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013340:	89 10                	mov    DWORD PTR [eax],edx
c0013342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013346:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013350:	90                   	nop
c0013351:	83 c4 0c             	add    esp,0xc
c0013354:	c3                   	ret    
c0013355:	90                   	nop

c0013356 <Bus::~Bus()>:
c0013356:	83 ec 0c             	sub    esp,0xc
c0013359:	ba ac 92 02 c0       	mov    edx,0xc00292ac
c001335e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013362:	89 10                	mov    DWORD PTR [eax],edx
c0013364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013368:	83 ec 0c             	sub    esp,0xc
c001336b:	50                   	push   eax
c001336c:	e8 d5 05 00 00       	call   c0013946 <Device::~Device()>
c0013371:	83 c4 10             	add    esp,0x10
c0013374:	90                   	nop
c0013375:	83 c4 0c             	add    esp,0xc
c0013378:	c3                   	ret    
c0013379:	90                   	nop

c001337a <Bus::~Bus()>:
c001337a:	83 ec 0c             	sub    esp,0xc
c001337d:	83 ec 0c             	sub    esp,0xc
c0013380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013384:	e8 cd ff ff ff       	call   c0013356 <Bus::~Bus()>
c0013389:	83 c4 10             	add    esp,0x10
c001338c:	83 ec 08             	sub    esp,0x8
c001338f:	68 58 01 00 00       	push   0x158
c0013394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013398:	e8 08 f2 ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c001339d:	83 c4 10             	add    esp,0x10
c00133a0:	83 c4 0c             	add    esp,0xc
c00133a3:	c3                   	ret    

c00133a4 <Buzzer::Buzzer(char const*)>:
c00133a4:	83 ec 0c             	sub    esp,0xc
c00133a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ab:	83 ec 08             	sub    esp,0x8
c00133ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133b2:	50                   	push   eax
c00133b3:	e8 ac 08 00 00       	call   c0013c64 <Device::Device(char const*)>
c00133b8:	83 c4 10             	add    esp,0x10
c00133bb:	ba d8 92 02 c0       	mov    edx,0xc00292d8
c00133c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c4:	89 10                	mov    DWORD PTR [eax],edx
c00133c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ca:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00133d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133d8:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00133e2:	90                   	nop
c00133e3:	83 c4 0c             	add    esp,0xc
c00133e6:	c3                   	ret    
c00133e7:	90                   	nop

c00133e8 <Buzzer::~Buzzer()>:
c00133e8:	83 ec 0c             	sub    esp,0xc
c00133eb:	ba d8 92 02 c0       	mov    edx,0xc00292d8
c00133f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f4:	89 10                	mov    DWORD PTR [eax],edx
c00133f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fa:	83 ec 0c             	sub    esp,0xc
c00133fd:	50                   	push   eax
c00133fe:	e8 43 05 00 00       	call   c0013946 <Device::~Device()>
c0013403:	83 c4 10             	add    esp,0x10
c0013406:	90                   	nop
c0013407:	83 c4 0c             	add    esp,0xc
c001340a:	c3                   	ret    
c001340b:	90                   	nop

c001340c <Buzzer::~Buzzer()>:
c001340c:	83 ec 0c             	sub    esp,0xc
c001340f:	83 ec 0c             	sub    esp,0xc
c0013412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013416:	e8 cd ff ff ff       	call   c00133e8 <Buzzer::~Buzzer()>
c001341b:	83 c4 10             	add    esp,0x10
c001341e:	83 ec 08             	sub    esp,0x8
c0013421:	68 5c 01 00 00       	push   0x15c
c0013426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001342a:	e8 76 f1 ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c001342f:	83 c4 10             	add    esp,0x10
c0013432:	83 c4 0c             	add    esp,0xc
c0013435:	c3                   	ret    

c0013436 <Buzzer::stop()>:
c0013436:	83 ec 14             	sub    esp,0x14
c0013439:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001343d:	8b 10                	mov    edx,DWORD PTR [eax]
c001343f:	6a 00                	push   0x0
c0013441:	50                   	push   eax
c0013442:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013445:	83 c4 1c             	add    esp,0x1c
c0013448:	c3                   	ret    

c0013449 <beepThread(void*)>:
c0013449:	53                   	push   ebx
c001344a:	83 ec 08             	sub    esp,0x8
c001344d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013451:	e8 da 97 00 00       	call   c001cc30 <unlockScheduler()>
c0013456:	b8 40 42 0f 00       	mov    eax,0xf4240
c001345b:	52                   	push   edx
c001345c:	52                   	push   edx
c001345d:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013463:	52                   	push   edx
c0013464:	50                   	push   eax
c0013465:	e8 14 9d 00 00       	call   c001d17e <nanoSleep(unsigned long long)>
c001346a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001346d:	e8 c4 ff ff ff       	call   c0013436 <Buzzer::stop()>
c0013472:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001347a:	83 c4 18             	add    esp,0x18
c001347d:	5b                   	pop    ebx
c001347e:	e9 41 9c 00 00       	jmp    c001d0c4 <blockTask(TaskState)>
c0013483:	90                   	nop

c0013484 <Buzzer::beep(int, int, bool)>:
c0013484:	57                   	push   edi
c0013485:	56                   	push   esi
c0013486:	53                   	push   ebx
c0013487:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001348b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001348f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013493:	52                   	push   edx
c0013494:	52                   	push   edx
c0013495:	8b 06                	mov    eax,DWORD PTR [esi]
c0013497:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001349b:	56                   	push   esi
c001349c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001349f:	83 c4 10             	add    esp,0x10
c00134a2:	89 f8                	mov    eax,edi
c00134a4:	84 c0                	test   al,al
c00134a6:	74 1f                	je     c00134c7 <Buzzer::beep(int, int, bool)+0x43>
c00134a8:	50                   	push   eax
c00134a9:	50                   	push   eax
c00134aa:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00134b0:	99                   	cdq    
c00134b1:	52                   	push   edx
c00134b2:	50                   	push   eax
c00134b3:	e8 c6 9c 00 00       	call   c001d17e <nanoSleep(unsigned long long)>
c00134b8:	83 c4 10             	add    esp,0x10
c00134bb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00134bf:	5b                   	pop    ebx
c00134c0:	5e                   	pop    esi
c00134c1:	5f                   	pop    edi
c00134c2:	e9 6f ff ff ff       	jmp    c0013436 <Buzzer::stop()>
c00134c7:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00134cd:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00134d2:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00134da:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00134de:	c7 44 24 14 49 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013449
c00134e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134ea:	5b                   	pop    ebx
c00134eb:	5e                   	pop    esi
c00134ec:	5f                   	pop    edi
c00134ed:	e9 6e 98 00 00       	jmp    c001cd60 <Process::createThread(void (*)(void*), void*, int)>

c00134f2 <loadClockSettings()>:
c00134f2:	c7 05 d4 c9 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002c9d4,0xa
c00134fc:	c6 05 d1 c9 02 c0 00 	mov    BYTE PTR ds:0xc002c9d1,0x0
c0013503:	c6 05 d0 c9 02 c0 01 	mov    BYTE PTR ds:0xc002c9d0,0x1
c001350a:	c3                   	ret    
c001350b:	90                   	nop

c001350c <Clock::Clock(char const*)>:
c001350c:	83 ec 0c             	sub    esp,0xc
c001350f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013513:	83 ec 08             	sub    esp,0x8
c0013516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001351a:	50                   	push   eax
c001351b:	e8 44 07 00 00       	call   c0013c64 <Device::Device(char const*)>
c0013520:	83 c4 10             	add    esp,0x10
c0013523:	ba 08 93 02 c0       	mov    edx,0xc0029308
c0013528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001352c:	89 10                	mov    DWORD PTR [eax],edx
c001352e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013532:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001353c:	90                   	nop
c001353d:	83 c4 0c             	add    esp,0xc
c0013540:	c3                   	ret    
c0013541:	90                   	nop

c0013542 <Clock::~Clock()>:
c0013542:	83 ec 0c             	sub    esp,0xc
c0013545:	ba 08 93 02 c0       	mov    edx,0xc0029308
c001354a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001354e:	89 10                	mov    DWORD PTR [eax],edx
c0013550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013554:	83 ec 0c             	sub    esp,0xc
c0013557:	50                   	push   eax
c0013558:	e8 e9 03 00 00       	call   c0013946 <Device::~Device()>
c001355d:	83 c4 10             	add    esp,0x10
c0013560:	90                   	nop
c0013561:	83 c4 0c             	add    esp,0xc
c0013564:	c3                   	ret    
c0013565:	90                   	nop

c0013566 <Clock::~Clock()>:
c0013566:	83 ec 0c             	sub    esp,0xc
c0013569:	83 ec 0c             	sub    esp,0xc
c001356c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013570:	e8 cd ff ff ff       	call   c0013542 <Clock::~Clock()>
c0013575:	83 c4 10             	add    esp,0x10
c0013578:	83 ec 08             	sub    esp,0x8
c001357b:	68 58 01 00 00       	push   0x158
c0013580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013584:	e8 1c f0 ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0013589:	83 c4 10             	add    esp,0x10
c001358c:	83 c4 0c             	add    esp,0xc
c001358f:	c3                   	ret    

c0013590 <Clock::timeInSecondsLocal()>:
c0013590:	53                   	push   ebx
c0013591:	83 ec 14             	sub    esp,0x14
c0013594:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013598:	8b 10                	mov    edx,DWORD PTR [eax]
c001359a:	50                   	push   eax
c001359b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001359e:	0f b6 0d d0 c9 02 c0 	movzx  ecx,BYTE PTR ds:0xc002c9d0
c00135a5:	03 0d d4 c9 02 c0    	add    ecx,DWORD PTR ds:0xc002c9d4
c00135ab:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00135b1:	89 cb                	mov    ebx,ecx
c00135b3:	c1 fb 1f             	sar    ebx,0x1f
c00135b6:	01 c8                	add    eax,ecx
c00135b8:	11 da                	adc    edx,ebx
c00135ba:	83 c4 10             	add    esp,0x10
c00135bd:	31 c9                	xor    ecx,ecx
c00135bf:	80 3d d1 c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c9d1,0x0
c00135c6:	74 05                	je     c00135cd <Clock::timeInSecondsLocal()+0x3d>
c00135c8:	b9 08 07 00 00       	mov    ecx,0x708
c00135cd:	31 db                	xor    ebx,ebx
c00135cf:	01 c8                	add    eax,ecx
c00135d1:	11 da                	adc    edx,ebx
c00135d3:	83 c4 08             	add    esp,0x8
c00135d6:	5b                   	pop    ebx
c00135d7:	c3                   	ret    

c00135d8 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00135d8:	57                   	push   edi
c00135d9:	56                   	push   esi
c00135da:	53                   	push   ebx
c00135db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00135e3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135e5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00135e9:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00135ec:	0f b6 05 d0 c9 02 c0 	movzx  eax,BYTE PTR ds:0xc002c9d0
c00135f3:	03 05 d4 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c9d4
c00135f9:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00135ff:	99                   	cdq    
c0013600:	29 c6                	sub    esi,eax
c0013602:	19 d7                	sbb    edi,edx
c0013604:	89 f0                	mov    eax,esi
c0013606:	89 fa                	mov    edx,edi
c0013608:	31 f6                	xor    esi,esi
c001360a:	80 3d d1 c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c9d1,0x0
c0013611:	74 05                	je     c0013618 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013613:	be 08 07 00 00       	mov    esi,0x708
c0013618:	31 ff                	xor    edi,edi
c001361a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001361e:	29 f0                	sub    eax,esi
c0013620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013624:	19 fa                	sbb    edx,edi
c0013626:	89 d8                	mov    eax,ebx
c0013628:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001362c:	5b                   	pop    ebx
c001362d:	5e                   	pop    esi
c001362e:	5f                   	pop    edi
c001362f:	ff e0                	jmp    eax

c0013631 <datetimeToSeconds(datetime_t)>:
c0013631:	55                   	push   ebp
c0013632:	57                   	push   edi
c0013633:	56                   	push   esi
c0013634:	53                   	push   ebx
c0013635:	83 ec 14             	sub    esp,0x14
c0013638:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001363c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013640:	89 d3                	mov    ebx,edx
c0013642:	0f b6 c6             	movzx  eax,dh
c0013645:	c1 eb 10             	shr    ebx,0x10
c0013648:	48                   	dec    eax
c0013649:	66 81 eb 6c 07       	sub    bx,0x76c
c001364e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013652:	0f b6 f5             	movzx  esi,ch
c0013655:	89 cf                	mov    edi,ecx
c0013657:	6b f6 3c             	imul   esi,esi,0x3c
c001365a:	c1 ef 10             	shr    edi,0x10
c001365d:	0f b6 c9             	movzx  ecx,cl
c0013660:	89 f8                	mov    eax,edi
c0013662:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013668:	0f b6 f8             	movzx  edi,al
c001366b:	0f b6 d2             	movzx  edx,dl
c001366e:	01 fe                	add    esi,edi
c0013670:	01 f1                	add    ecx,esi
c0013672:	0f b7 f3             	movzx  esi,bx
c0013675:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013679:	c1 f9 1f             	sar    ecx,0x1f
c001367c:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013681:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013685:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001368a:	8b 0c 8d 40 93 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6cc0]
c0013691:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013695:	76 29                	jbe    c00136c0 <datetimeToSeconds(datetime_t)+0x8f>
c0013697:	f6 c3 03             	test   bl,0x3
c001369a:	75 24                	jne    c00136c0 <datetimeToSeconds(datetime_t)+0x8f>
c001369c:	31 d2                	xor    edx,edx
c001369e:	bf 64 00 00 00       	mov    edi,0x64
c00136a3:	89 d8                	mov    eax,ebx
c00136a5:	66 f7 f7             	div    di
c00136a8:	66 85 d2             	test   dx,dx
c00136ab:	75 12                	jne    c00136bf <datetimeToSeconds(datetime_t)+0x8e>
c00136ad:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00136b3:	bf 90 01 00 00       	mov    edi,0x190
c00136b8:	99                   	cdq    
c00136b9:	f7 ff                	idiv   edi
c00136bb:	85 d2                	test   edx,edx
c00136bd:	75 01                	jne    c00136c0 <datetimeToSeconds(datetime_t)+0x8f>
c00136bf:	41                   	inc    ecx
c00136c0:	66 83 fb 46          	cmp    bx,0x46
c00136c4:	76 45                	jbe    c001370b <datetimeToSeconds(datetime_t)+0xda>
c00136c6:	bb 46 00 00 00       	mov    ebx,0x46
c00136cb:	bf 64 00 00 00       	mov    edi,0x64
c00136d0:	bd 90 01 00 00       	mov    ebp,0x190
c00136d5:	b8 6d 01 00 00       	mov    eax,0x16d
c00136da:	f6 c3 03             	test   bl,0x3
c00136dd:	75 23                	jne    c0013702 <datetimeToSeconds(datetime_t)+0xd1>
c00136df:	89 d8                	mov    eax,ebx
c00136e1:	99                   	cdq    
c00136e2:	f7 ff                	idiv   edi
c00136e4:	b8 6e 01 00 00       	mov    eax,0x16e
c00136e9:	85 d2                	test   edx,edx
c00136eb:	75 15                	jne    c0013702 <datetimeToSeconds(datetime_t)+0xd1>
c00136ed:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00136f3:	99                   	cdq    
c00136f4:	f7 fd                	idiv   ebp
c00136f6:	83 fa 01             	cmp    edx,0x1
c00136f9:	19 c0                	sbb    eax,eax
c00136fb:	f7 d0                	not    eax
c00136fd:	05 6e 01 00 00       	add    eax,0x16e
c0013702:	01 c1                	add    ecx,eax
c0013704:	43                   	inc    ebx
c0013705:	39 f3                	cmp    ebx,esi
c0013707:	7c cc                	jl     c00136d5 <datetimeToSeconds(datetime_t)+0xa4>
c0013709:	eb 35                	jmp    c0013740 <datetimeToSeconds(datetime_t)+0x10f>
c001370b:	74 33                	je     c0013740 <datetimeToSeconds(datetime_t)+0x10f>
c001370d:	b8 45 00 00 00       	mov    eax,0x45
c0013712:	89 c2                	mov    edx,eax
c0013714:	83 e2 03             	and    edx,0x3
c0013717:	39 f0                	cmp    eax,esi
c0013719:	7e 0f                	jle    c001372a <datetimeToSeconds(datetime_t)+0xf9>
c001371b:	83 fa 01             	cmp    edx,0x1
c001371e:	19 d2                	sbb    edx,edx
c0013720:	48                   	dec    eax
c0013721:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013728:	eb e8                	jmp    c0013712 <datetimeToSeconds(datetime_t)+0xe1>
c001372a:	b8 6d 01 00 00       	mov    eax,0x16d
c001372f:	85 d2                	test   edx,edx
c0013731:	75 0b                	jne    c001373e <datetimeToSeconds(datetime_t)+0x10d>
c0013733:	66 83 fb 01          	cmp    bx,0x1
c0013737:	19 c0                	sbb    eax,eax
c0013739:	05 6e 01 00 00       	add    eax,0x16e
c001373e:	29 c1                	sub    ecx,eax
c0013740:	b8 80 51 01 00       	mov    eax,0x15180
c0013745:	f7 e9                	imul   ecx
c0013747:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001374b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001374f:	83 c4 14             	add    esp,0x14
c0013752:	5b                   	pop    ebx
c0013753:	5e                   	pop    esi
c0013754:	5f                   	pop    edi
c0013755:	5d                   	pop    ebp
c0013756:	c3                   	ret    
c0013757:	90                   	nop

c0013758 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013758:	57                   	push   edi
c0013759:	56                   	push   esi
c001375a:	53                   	push   ebx
c001375b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001375f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013761:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013764:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013768:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001376c:	e8 c0 fe ff ff       	call   c0013631 <datetimeToSeconds(datetime_t)>
c0013771:	59                   	pop    ecx
c0013772:	0f b6 0d d0 c9 02 c0 	movzx  ecx,BYTE PTR ds:0xc002c9d0
c0013779:	5b                   	pop    ebx
c001377a:	03 0d d4 c9 02 c0    	add    ecx,DWORD PTR ds:0xc002c9d4
c0013780:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013786:	89 cb                	mov    ebx,ecx
c0013788:	c1 fb 1f             	sar    ebx,0x1f
c001378b:	29 c8                	sub    eax,ecx
c001378d:	19 da                	sbb    edx,ebx
c001378f:	31 c9                	xor    ecx,ecx
c0013791:	80 3d d1 c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c9d1,0x0
c0013798:	74 05                	je     c001379f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001379a:	b9 08 07 00 00       	mov    ecx,0x708
c001379f:	31 db                	xor    ebx,ebx
c00137a1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00137a5:	29 c8                	sub    eax,ecx
c00137a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00137ab:	19 da                	sbb    edx,ebx
c00137ad:	89 f8                	mov    eax,edi
c00137af:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00137b3:	5b                   	pop    ebx
c00137b4:	5e                   	pop    esi
c00137b5:	5f                   	pop    edi
c00137b6:	ff e0                	jmp    eax

c00137b8 <secondsToDatetime(unsigned long long)>:
c00137b8:	55                   	push   ebp
c00137b9:	57                   	push   edi
c00137ba:	56                   	push   esi
c00137bb:	53                   	push   ebx
c00137bc:	83 ec 1c             	sub    esp,0x1c
c00137bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00137c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00137c7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00137cb:	6a 00                	push   0x0
c00137cd:	68 80 51 01 00       	push   0x15180
c00137d2:	55                   	push   ebp
c00137d3:	57                   	push   edi
c00137d4:	e8 e3 1a 01 00       	call   c00252bc <__udivdi3>
c00137d9:	83 c4 10             	add    esp,0x10
c00137dc:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00137e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137e6:	6a 00                	push   0x0
c00137e8:	68 80 51 01 00       	push   0x15180
c00137ed:	55                   	push   ebp
c00137ee:	57                   	push   edi
c00137ef:	bf 10 0e 00 00       	mov    edi,0xe10
c00137f4:	e8 c3 1b 01 00       	call   c00253bc <__umoddi3>
c00137f9:	83 c4 10             	add    esp,0x10
c00137fc:	99                   	cdq    
c00137fd:	f7 ff                	idiv   edi
c00137ff:	bf 3c 00 00 00       	mov    edi,0x3c
c0013804:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013807:	89 d0                	mov    eax,edx
c0013809:	99                   	cdq    
c001380a:	f7 ff                	idiv   edi
c001380c:	85 db                	test   ebx,ebx
c001380e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013811:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013814:	79 11                	jns    c0013827 <secondsToDatetime(unsigned long long)+0x6f>
c0013816:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001381a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013820:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013825:	eb 07                	jmp    c001382e <secondsToDatetime(unsigned long long)+0x76>
c0013827:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001382c:	89 d8                	mov    eax,ebx
c001382e:	bf b4 05 00 00       	mov    edi,0x5b4
c0013833:	99                   	cdq    
c0013834:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013839:	f7 f9                	idiv   ecx
c001383b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013840:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013844:	31 d2                	xor    edx,edx
c0013846:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001384e:	01 c3                	add    ebx,eax
c0013850:	89 d8                	mov    eax,ebx
c0013852:	f7 f1                	div    ecx
c0013854:	31 d2                	xor    edx,edx
c0013856:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013859:	89 d8                	mov    eax,ebx
c001385b:	f7 f7                	div    edi
c001385d:	31 d2                	xor    edx,edx
c001385f:	29 c1                	sub    ecx,eax
c0013861:	89 d8                	mov    eax,ebx
c0013863:	f7 f5                	div    ebp
c0013865:	bd 6d 01 00 00       	mov    ebp,0x16d
c001386a:	29 c1                	sub    ecx,eax
c001386c:	31 d2                	xor    edx,edx
c001386e:	89 c8                	mov    eax,ecx
c0013870:	f7 f5                	div    ebp
c0013872:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013877:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001387b:	31 d2                	xor    edx,edx
c001387d:	89 c8                	mov    eax,ecx
c001387f:	f7 f5                	div    ebp
c0013881:	31 d2                	xor    edx,edx
c0013883:	01 c3                	add    ebx,eax
c0013885:	89 c8                	mov    eax,ecx
c0013887:	f7 f7                	div    edi
c0013889:	bf 99 00 00 00       	mov    edi,0x99
c001388e:	29 c3                	sub    ebx,eax
c0013890:	31 d2                	xor    edx,edx
c0013892:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001389a:	29 c3                	sub    ebx,eax
c001389c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001389f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00138a2:	bb 05 00 00 00       	mov    ebx,0x5
c00138a7:	83 c1 02             	add    ecx,0x2
c00138aa:	89 c8                	mov    eax,ecx
c00138ac:	f7 f7                	div    edi
c00138ae:	31 d2                	xor    edx,edx
c00138b0:	89 c7                	mov    edi,eax
c00138b2:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00138b8:	83 c0 02             	add    eax,0x2
c00138bb:	f7 f3                	div    ebx
c00138bd:	89 eb                	mov    ebx,ebp
c00138bf:	29 c3                	sub    ebx,eax
c00138c1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00138c7:	88 1e                	mov    BYTE PTR [esi],bl
c00138c9:	19 c0                	sbb    eax,eax
c00138cb:	31 d2                	xor    edx,edx
c00138cd:	83 e0 0c             	and    eax,0xc
c00138d0:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00138d4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00138dc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00138e0:	83 f9 01             	cmp    ecx,0x1
c00138e3:	0f 96 c2             	setbe  dl
c00138e6:	41                   	inc    ecx
c00138e7:	01 d0                	add    eax,edx
c00138e9:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00138ec:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00138f0:	83 c4 1c             	add    esp,0x1c
c00138f3:	89 f0                	mov    eax,esi
c00138f5:	5b                   	pop    ebx
c00138f6:	5e                   	pop    esi
c00138f7:	5f                   	pop    edi
c00138f8:	5d                   	pop    ebp
c00138f9:	c2 04 00             	ret    0x4

c00138fc <Clock::timeInDatetimeLocal()>:
c00138fc:	53                   	push   ebx
c00138fd:	83 ec 14             	sub    esp,0x14
c0013900:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013904:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013908:	e8 83 fc ff ff       	call   c0013590 <Clock::timeInSecondsLocal()>
c001390d:	83 c4 0c             	add    esp,0xc
c0013910:	52                   	push   edx
c0013911:	50                   	push   eax
c0013912:	53                   	push   ebx
c0013913:	e8 a0 fe ff ff       	call   c00137b8 <secondsToDatetime(unsigned long long)>
c0013918:	89 d8                	mov    eax,ebx
c001391a:	83 c4 14             	add    esp,0x14
c001391d:	5b                   	pop    ebx
c001391e:	c2 04 00             	ret    0x4
c0013921:	90                   	nop

c0013922 <Device::hibernate()>:
c0013922:	c3                   	ret    
c0013923:	90                   	nop

c0013924 <Device::wake()>:
c0013924:	c3                   	ret    
c0013925:	90                   	nop

c0013926 <Device::detect()>:
c0013926:	c3                   	ret    
c0013927:	90                   	nop

c0013928 <Device::disableLegacy()>:
c0013928:	c3                   	ret    
c0013929:	90                   	nop

c001392a <Device::powerSaving(PowerSavingLevel)>:
c001392a:	c3                   	ret    
c001392b:	90                   	nop

c001392c <DriverlessDevice::close(int, int, void*)>:
c001392c:	31 c0                	xor    eax,eax
c001392e:	c3                   	ret    
c001392f:	90                   	nop

c0013930 <DriverlessDevice::detect()>:
c0013930:	c3                   	ret    
c0013931:	90                   	nop

c0013932 <DriverlessDevice::open(int, int, void*)>:
c0013932:	83 ec 18             	sub    esp,0x18
c0013935:	68 70 93 02 c0       	push   0xc0029370
c001393a:	e8 60 5e 00 00       	call   c001979f <Krnl::panic(char const*)>
c001393f:	83 c8 ff             	or     eax,0xffffffff
c0013942:	83 c4 1c             	add    esp,0x1c
c0013945:	c3                   	ret    

c0013946 <Device::~Device()>:
c0013946:	ba 98 93 02 c0       	mov    edx,0xc0029398
c001394b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001394f:	89 10                	mov    DWORD PTR [eax],edx
c0013951:	90                   	nop
c0013952:	c3                   	ret    
c0013953:	90                   	nop

c0013954 <Device::~Device()>:
c0013954:	83 ec 0c             	sub    esp,0xc
c0013957:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001395b:	e8 e6 ff ff ff       	call   c0013946 <Device::~Device()>
c0013960:	83 c4 04             	add    esp,0x4
c0013963:	83 ec 08             	sub    esp,0x8
c0013966:	68 58 01 00 00       	push   0x158
c001396b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001396f:	e8 31 ec ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0013974:	83 c4 10             	add    esp,0x10
c0013977:	83 c4 0c             	add    esp,0xc
c001397a:	c3                   	ret    
c001397b:	90                   	nop

c001397c <Device::findAndLoadDriver()>:
c001397c:	c3                   	ret    
c001397d:	90                   	nop

c001397e <Device::preOpenPCI(PCIDeviceInfo)>:
c001397e:	57                   	push   edi
c001397f:	b9 09 00 00 00       	mov    ecx,0x9
c0013984:	56                   	push   esi
c0013985:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013989:	8d 74 24 10          	lea    esi,[esp+0x10]
c001398d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013997:	81 c7 18 01 00 00    	add    edi,0x118
c001399d:	fc                   	cld    
c001399e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00139a0:	5e                   	pop    esi
c00139a1:	5f                   	pop    edi
c00139a2:	c3                   	ret    
c00139a3:	90                   	nop

c00139a4 <Device::preOpenACPI(void*, char*, char*)>:
c00139a4:	56                   	push   esi
c00139a5:	53                   	push   ebx
c00139a6:	83 ec 08             	sub    esp,0x8
c00139a9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00139ad:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00139b1:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00139bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139bf:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00139c5:	6a 1e                	push   0x1e
c00139c7:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00139cd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00139d1:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00139d7:	50                   	push   eax
c00139d8:	e8 78 cc fe ff       	call   c0000655 <memcpy>
c00139dd:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00139e1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00139e5:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00139ed:	83 c4 14             	add    esp,0x14
c00139f0:	5b                   	pop    ebx
c00139f1:	5e                   	pop    esi
c00139f2:	e9 5e cc fe ff       	jmp    c0000655 <memcpy>
c00139f7:	90                   	nop

c00139f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00139f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139fc:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a01:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a08:	75 0b                	jne    c0013a15 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013a0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a0c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a10:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013a13:	eb 1e                	jmp    c0013a33 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013a15:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0013a1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a20:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a26:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a28:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a30:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013a33:	ff e0                	jmp    eax
c0013a35:	90                   	nop

c0013a36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013a36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a3a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a3f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a46:	75 0b                	jne    c0013a53 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013a48:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a4a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a4e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013a51:	eb 1e                	jmp    c0013a71 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013a53:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0013a58:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a5e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a66:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a6e:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013a71:	ff e0                	jmp    eax
c0013a73:	90                   	nop

c0013a74 <Device::addChild(Device*)>:
c0013a74:	53                   	push   ebx
c0013a75:	83 ec 08             	sub    esp,0x8
c0013a78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a80:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013a86:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013a8c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013a8e:	85 d2                	test   edx,edx
c0013a90:	74 04                	je     c0013a96 <Device::addChild(Device*)+0x22>
c0013a92:	89 d3                	mov    ebx,edx
c0013a94:	eb f6                	jmp    c0013a8c <Device::addChild(Device*)+0x18>
c0013a96:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013a99:	83 ec 0c             	sub    esp,0xc
c0013a9c:	6a 08                	push   0x8
c0013a9e:	e8 31 ba ff ff       	call   c000f4d4 <malloc>
c0013aa3:	89 03                	mov    DWORD PTR [ebx],eax
c0013aa5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013aab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ab2:	83 c4 18             	add    esp,0x18
c0013ab5:	5b                   	pop    ebx
c0013ab6:	c3                   	ret    
c0013ab7:	90                   	nop

c0013ab8 <Device::removeAllChildren()>:
c0013ab8:	56                   	push   esi
c0013ab9:	53                   	push   ebx
c0013aba:	52                   	push   edx
c0013abb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013abf:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013ac5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ac8:	74 17                	je     c0013ae1 <Device::removeAllChildren()+0x29>
c0013aca:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013acd:	85 c0                	test   eax,eax
c0013acf:	74 0c                	je     c0013add <Device::removeAllChildren()+0x25>
c0013ad1:	83 ec 0c             	sub    esp,0xc
c0013ad4:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ad6:	50                   	push   eax
c0013ad7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013ada:	83 c4 10             	add    esp,0x10
c0013add:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013adf:	eb e4                	jmp    c0013ac5 <Device::removeAllChildren()+0xd>
c0013ae1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013aed:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013af3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013afa:	58                   	pop    eax
c0013afb:	5b                   	pop    ebx
c0013afc:	5e                   	pop    esi
c0013afd:	c3                   	ret    

c0013afe <Device::hibernateAll()>:
c0013afe:	53                   	push   ebx
c0013aff:	83 ec 14             	sub    esp,0x14
c0013b02:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b08:	53                   	push   ebx
c0013b09:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013b0c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b12:	83 c4 10             	add    esp,0x10
c0013b15:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b18:	74 0f                	je     c0013b29 <Device::hibernateAll()+0x2b>
c0013b1a:	83 ec 0c             	sub    esp,0xc
c0013b1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b20:	e8 d9 ff ff ff       	call   c0013afe <Device::hibernateAll()>
c0013b25:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b27:	eb e9                	jmp    c0013b12 <Device::hibernateAll()+0x14>
c0013b29:	83 c4 08             	add    esp,0x8
c0013b2c:	5b                   	pop    ebx
c0013b2d:	c3                   	ret    

c0013b2e <Device::wakeAll()>:
c0013b2e:	53                   	push   ebx
c0013b2f:	83 ec 14             	sub    esp,0x14
c0013b32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b38:	53                   	push   ebx
c0013b39:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013b3c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b42:	83 c4 10             	add    esp,0x10
c0013b45:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b48:	74 0f                	je     c0013b59 <Device::wakeAll()+0x2b>
c0013b4a:	83 ec 0c             	sub    esp,0xc
c0013b4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b50:	e8 d9 ff ff ff       	call   c0013b2e <Device::wakeAll()>
c0013b55:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b57:	eb e9                	jmp    c0013b42 <Device::wakeAll()+0x14>
c0013b59:	83 c4 08             	add    esp,0x8
c0013b5c:	5b                   	pop    ebx
c0013b5d:	c3                   	ret    

c0013b5e <Device::detectAll()>:
c0013b5e:	53                   	push   ebx
c0013b5f:	83 ec 14             	sub    esp,0x14
c0013b62:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b66:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b68:	53                   	push   ebx
c0013b69:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013b6c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b72:	83 c4 10             	add    esp,0x10
c0013b75:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b78:	74 0f                	je     c0013b89 <Device::detectAll()+0x2b>
c0013b7a:	83 ec 0c             	sub    esp,0xc
c0013b7d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b80:	e8 d9 ff ff ff       	call   c0013b5e <Device::detectAll()>
c0013b85:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b87:	eb e9                	jmp    c0013b72 <Device::detectAll()+0x14>
c0013b89:	83 c4 08             	add    esp,0x8
c0013b8c:	5b                   	pop    ebx
c0013b8d:	c3                   	ret    

c0013b8e <Device::disableLegacyAll()>:
c0013b8e:	53                   	push   ebx
c0013b8f:	83 ec 14             	sub    esp,0x14
c0013b92:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b98:	53                   	push   ebx
c0013b99:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013b9c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ba2:	83 c4 10             	add    esp,0x10
c0013ba5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ba8:	74 0f                	je     c0013bb9 <Device::disableLegacyAll()+0x2b>
c0013baa:	83 ec 0c             	sub    esp,0xc
c0013bad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bb0:	e8 d9 ff ff ff       	call   c0013b8e <Device::disableLegacyAll()>
c0013bb5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bb7:	eb e9                	jmp    c0013ba2 <Device::disableLegacyAll()+0x14>
c0013bb9:	83 c4 08             	add    esp,0x8
c0013bbc:	5b                   	pop    ebx
c0013bbd:	c3                   	ret    

c0013bbe <Device::loadDriversForAll()>:
c0013bbe:	53                   	push   ebx
c0013bbf:	83 ec 08             	sub    esp,0x8
c0013bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bc6:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013bcc:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013bce:	85 db                	test   ebx,ebx
c0013bd0:	74 12                	je     c0013be4 <Device::loadDriversForAll()+0x26>
c0013bd2:	83 ec 0c             	sub    esp,0xc
c0013bd5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013bd8:	e8 e1 ff ff ff       	call   c0013bbe <Device::loadDriversForAll()>
c0013bdd:	83 c4 10             	add    esp,0x10
c0013be0:	89 d8                	mov    eax,ebx
c0013be2:	eb e8                	jmp    c0013bcc <Device::loadDriversForAll()+0xe>
c0013be4:	83 c4 08             	add    esp,0x8
c0013be7:	5b                   	pop    ebx
c0013be8:	c3                   	ret    
c0013be9:	90                   	nop

c0013bea <Device::closeAll()>:
c0013bea:	53                   	push   ebx
c0013beb:	83 ec 08             	sub    esp,0x8
c0013bee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013bf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bf4:	6a 00                	push   0x0
c0013bf6:	6a 00                	push   0x0
c0013bf8:	6a 00                	push   0x0
c0013bfa:	53                   	push   ebx
c0013bfb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bfe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c04:	83 c4 10             	add    esp,0x10
c0013c07:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c0a:	74 0f                	je     c0013c1b <Device::closeAll()+0x31>
c0013c0c:	83 ec 0c             	sub    esp,0xc
c0013c0f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c12:	e8 d3 ff ff ff       	call   c0013bea <Device::closeAll()>
c0013c17:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c19:	eb e9                	jmp    c0013c04 <Device::closeAll()+0x1a>
c0013c1b:	83 c4 08             	add    esp,0x8
c0013c1e:	5b                   	pop    ebx
c0013c1f:	c3                   	ret    

c0013c20 <Device::powerSavingAll(PowerSavingLevel)>:
c0013c20:	56                   	push   esi
c0013c21:	53                   	push   ebx
c0013c22:	83 ec 0c             	sub    esp,0xc
c0013c25:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013c2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c2f:	56                   	push   esi
c0013c30:	53                   	push   ebx
c0013c31:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013c34:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c3a:	83 c4 10             	add    esp,0x10
c0013c3d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c40:	74 0f                	je     c0013c51 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013c42:	52                   	push   edx
c0013c43:	52                   	push   edx
c0013c44:	56                   	push   esi
c0013c45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c48:	e8 d3 ff ff ff       	call   c0013c20 <Device::powerSavingAll(PowerSavingLevel)>
c0013c4d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c4f:	eb e9                	jmp    c0013c3a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013c51:	58                   	pop    eax
c0013c52:	5b                   	pop    ebx
c0013c53:	5e                   	pop    esi
c0013c54:	c3                   	ret    
c0013c55:	90                   	nop

c0013c56 <Device::setName(char const*)>:
c0013c56:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013c5e:	e9 c7 ca fe ff       	jmp    c000072a <strcpy>
c0013c63:	90                   	nop

c0013c64 <Device::Device(char const*)>:
c0013c64:	83 ec 1c             	sub    esp,0x1c
c0013c67:	ba 98 93 02 c0       	mov    edx,0xc0029398
c0013c6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c70:	89 10                	mov    DWORD PTR [eax],edx
c0013c72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c76:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013c80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c84:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c92:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013c9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ca0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013caa:	83 ec 08             	sub    esp,0x8
c0013cad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cb5:	e8 9c ff ff ff       	call   c0013c56 <Device::setName(char const*)>
c0013cba:	83 c4 10             	add    esp,0x10
c0013cbd:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013cc5:	83 ec 0c             	sub    esp,0xc
c0013cc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ccc:	e8 03 b8 ff ff       	call   c000f4d4 <malloc>
c0013cd1:	83 c4 10             	add    esp,0x10
c0013cd4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013cda:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ce1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013ce5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013ceb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cef:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013cf5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013cfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cff:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d05:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d10:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013d17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d1b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013d22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d26:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d34:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d42:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d50:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013d5a:	90                   	nop
c0013d5b:	83 c4 1c             	add    esp,0x1c
c0013d5e:	c3                   	ret    
c0013d5f:	90                   	nop

c0013d60 <Device::getName()>:
c0013d60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d64:	05 d0 00 00 00       	add    eax,0xd0
c0013d69:	c3                   	ret    

c0013d6a <DriverlessDevice::DriverlessDevice(char const*)>:
c0013d6a:	83 ec 0c             	sub    esp,0xc
c0013d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d71:	83 ec 08             	sub    esp,0x8
c0013d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d78:	50                   	push   eax
c0013d79:	e8 e6 fe ff ff       	call   c0013c64 <Device::Device(char const*)>
c0013d7e:	83 c4 10             	add    esp,0x10
c0013d81:	ba c4 93 02 c0       	mov    edx,0xc00293c4
c0013d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d8a:	89 10                	mov    DWORD PTR [eax],edx
c0013d8c:	90                   	nop
c0013d8d:	83 c4 0c             	add    esp,0xc
c0013d90:	c3                   	ret    
c0013d91:	90                   	nop

c0013d92 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013d92:	57                   	push   edi
c0013d93:	56                   	push   esi
c0013d94:	53                   	push   ebx
c0013d95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d99:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d9d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013da1:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013da7:	75 0c                	jne    c0013db5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013da9:	52                   	push   edx
c0013daa:	52                   	push   edx
c0013dab:	53                   	push   ebx
c0013dac:	56                   	push   esi
c0013dad:	e8 48 34 01 00       	call   c00271fa <LinkedList<Device>::addElement(Device*)>
c0013db2:	83 c4 10             	add    esp,0x10
c0013db5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dbb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dbe:	74 12                	je     c0013dd2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013dc0:	50                   	push   eax
c0013dc1:	57                   	push   edi
c0013dc2:	56                   	push   esi
c0013dc3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dc6:	e8 c7 ff ff ff       	call   c0013d92 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013dcb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dcd:	83 c4 10             	add    esp,0x10
c0013dd0:	eb e9                	jmp    c0013dbb <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013dd2:	5b                   	pop    ebx
c0013dd3:	5e                   	pop    esi
c0013dd4:	5f                   	pop    edi
c0013dd5:	c3                   	ret    

c0013dd6 <getDevicesOfType(DeviceType)>:
c0013dd6:	53                   	push   ebx
c0013dd7:	83 ec 14             	sub    esp,0x14
c0013dda:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dde:	53                   	push   ebx
c0013ddf:	e8 f2 34 01 00       	call   c00272d6 <LinkedList<Device>::LinkedList()>
c0013de4:	83 c4 0c             	add    esp,0xc
c0013de7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013deb:	53                   	push   ebx
c0013dec:	ff 35 48 c8 02 c0    	push   DWORD PTR ds:0xc002c848
c0013df2:	e8 9b ff ff ff       	call   c0013d92 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013df7:	89 d8                	mov    eax,ebx
c0013df9:	83 c4 18             	add    esp,0x18
c0013dfc:	5b                   	pop    ebx
c0013dfd:	c2 04 00             	ret    0x4

c0013e00 <HardDiskController::HardDiskController(char const*)>:
c0013e00:	83 ec 0c             	sub    esp,0xc
c0013e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e07:	83 ec 08             	sub    esp,0x8
c0013e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e0e:	50                   	push   eax
c0013e0f:	e8 50 fe ff ff       	call   c0013c64 <Device::Device(char const*)>
c0013e14:	83 c4 10             	add    esp,0x10
c0013e17:	ba f0 93 02 c0       	mov    edx,0xc00293f0
c0013e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e20:	89 10                	mov    DWORD PTR [eax],edx
c0013e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e26:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013e30:	90                   	nop
c0013e31:	83 c4 0c             	add    esp,0xc
c0013e34:	c3                   	ret    
c0013e35:	90                   	nop

c0013e36 <HardDiskController::~HardDiskController()>:
c0013e36:	83 ec 0c             	sub    esp,0xc
c0013e39:	ba f0 93 02 c0       	mov    edx,0xc00293f0
c0013e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e42:	89 10                	mov    DWORD PTR [eax],edx
c0013e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e48:	83 ec 0c             	sub    esp,0xc
c0013e4b:	50                   	push   eax
c0013e4c:	e8 f5 fa ff ff       	call   c0013946 <Device::~Device()>
c0013e51:	83 c4 10             	add    esp,0x10
c0013e54:	90                   	nop
c0013e55:	83 c4 0c             	add    esp,0xc
c0013e58:	c3                   	ret    
c0013e59:	90                   	nop

c0013e5a <HardDiskController::~HardDiskController()>:
c0013e5a:	83 ec 0c             	sub    esp,0xc
c0013e5d:	83 ec 0c             	sub    esp,0xc
c0013e60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e64:	e8 cd ff ff ff       	call   c0013e36 <HardDiskController::~HardDiskController()>
c0013e69:	83 c4 10             	add    esp,0x10
c0013e6c:	83 ec 08             	sub    esp,0x8
c0013e6f:	68 58 01 00 00       	push   0x158
c0013e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e78:	e8 28 e7 ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0013e7d:	83 c4 10             	add    esp,0x10
c0013e80:	83 c4 0c             	add    esp,0xc
c0013e83:	c3                   	ret    

c0013e84 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013e84:	83 ec 0c             	sub    esp,0xc
c0013e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e8b:	83 ec 08             	sub    esp,0x8
c0013e8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e92:	50                   	push   eax
c0013e93:	e8 cc fd ff ff       	call   c0013c64 <Device::Device(char const*)>
c0013e98:	83 c4 10             	add    esp,0x10
c0013e9b:	ba 1c 94 02 c0       	mov    edx,0xc002941c
c0013ea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea4:	89 10                	mov    DWORD PTR [eax],edx
c0013ea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eaa:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eb5:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec0:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ece:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ed2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013edc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ee6:	90                   	nop
c0013ee7:	83 c4 0c             	add    esp,0xc
c0013eea:	c3                   	ret    
c0013eeb:	90                   	nop

c0013eec <PhysicalDisk::startCache()>:
c0013eec:	56                   	push   esi
c0013eed:	53                   	push   ebx
c0013eee:	83 ec 10             	sub    esp,0x10
c0013ef1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ef5:	6a 30                	push   0x30
c0013ef7:	e8 d8 b5 ff ff       	call   c000f4d4 <malloc>
c0013efc:	89 c6                	mov    esi,eax
c0013efe:	58                   	pop    eax
c0013eff:	5a                   	pop    edx
c0013f00:	53                   	push   ebx
c0013f01:	56                   	push   esi
c0013f02:	e8 dd 25 00 00       	call   c00164e4 <VCache::VCache(PhysicalDisk*)>
c0013f07:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013f0d:	83 c4 14             	add    esp,0x14
c0013f10:	5b                   	pop    ebx
c0013f11:	5e                   	pop    esi
c0013f12:	c3                   	ret    
c0013f13:	90                   	nop

c0013f14 <PhysicalDisk::~PhysicalDisk()>:
c0013f14:	83 ec 0c             	sub    esp,0xc
c0013f17:	ba 1c 94 02 c0       	mov    edx,0xc002941c
c0013f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f20:	89 10                	mov    DWORD PTR [eax],edx
c0013f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f26:	83 ec 0c             	sub    esp,0xc
c0013f29:	50                   	push   eax
c0013f2a:	e8 17 fa ff ff       	call   c0013946 <Device::~Device()>
c0013f2f:	83 c4 10             	add    esp,0x10
c0013f32:	90                   	nop
c0013f33:	83 c4 0c             	add    esp,0xc
c0013f36:	c3                   	ret    
c0013f37:	90                   	nop

c0013f38 <PhysicalDisk::~PhysicalDisk()>:
c0013f38:	83 ec 0c             	sub    esp,0xc
c0013f3b:	83 ec 0c             	sub    esp,0xc
c0013f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f42:	e8 cd ff ff ff       	call   c0013f14 <PhysicalDisk::~PhysicalDisk()>
c0013f47:	83 c4 10             	add    esp,0x10
c0013f4a:	83 ec 08             	sub    esp,0x8
c0013f4d:	68 6c 01 00 00       	push   0x16c
c0013f52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f56:	e8 4a e6 ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0013f5b:	83 c4 10             	add    esp,0x10
c0013f5e:	83 c4 0c             	add    esp,0xc
c0013f61:	c3                   	ret    

c0013f62 <FPU::FPU(char const*)>:
c0013f62:	83 ec 0c             	sub    esp,0xc
c0013f65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f69:	83 ec 08             	sub    esp,0x8
c0013f6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f70:	50                   	push   eax
c0013f71:	e8 ee fc ff ff       	call   c0013c64 <Device::Device(char const*)>
c0013f76:	83 c4 10             	add    esp,0x10
c0013f79:	ba 5c 94 02 c0       	mov    edx,0xc002945c
c0013f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f82:	89 10                	mov    DWORD PTR [eax],edx
c0013f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f88:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013f92:	90                   	nop
c0013f93:	83 c4 0c             	add    esp,0xc
c0013f96:	c3                   	ret    
c0013f97:	90                   	nop

c0013f98 <FPU::~FPU()>:
c0013f98:	83 ec 0c             	sub    esp,0xc
c0013f9b:	ba 5c 94 02 c0       	mov    edx,0xc002945c
c0013fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fa4:	89 10                	mov    DWORD PTR [eax],edx
c0013fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013faa:	83 ec 0c             	sub    esp,0xc
c0013fad:	50                   	push   eax
c0013fae:	e8 93 f9 ff ff       	call   c0013946 <Device::~Device()>
c0013fb3:	83 c4 10             	add    esp,0x10
c0013fb6:	90                   	nop
c0013fb7:	83 c4 0c             	add    esp,0xc
c0013fba:	c3                   	ret    
c0013fbb:	90                   	nop

c0013fbc <FPU::~FPU()>:
c0013fbc:	83 ec 0c             	sub    esp,0xc
c0013fbf:	83 ec 0c             	sub    esp,0xc
c0013fc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fc6:	e8 cd ff ff ff       	call   c0013f98 <FPU::~FPU()>
c0013fcb:	83 c4 10             	add    esp,0x10
c0013fce:	83 ec 08             	sub    esp,0x8
c0013fd1:	68 58 01 00 00       	push   0x158
c0013fd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fda:	e8 c6 e5 ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0013fdf:	83 c4 10             	add    esp,0x10
c0013fe2:	83 c4 0c             	add    esp,0xc
c0013fe5:	c3                   	ret    

c0013fe6 <setupFPU()>:
c0013fe6:	53                   	push   ebx
c0013fe7:	83 ec 08             	sub    esp,0x8
c0013fea:	8b 15 48 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c848
c0013ff0:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013ff7:	74 19                	je     c0014012 <setupFPU()+0x2c>
c0013ff9:	83 ec 0c             	sub    esp,0xc
c0013ffc:	68 58 01 00 00       	push   0x158
c0014001:	e8 ce b4 ff ff       	call   c000f4d4 <malloc>
c0014006:	89 c3                	mov    ebx,eax
c0014008:	89 04 24             	mov    DWORD PTR [esp],eax
c001400b:	e8 30 fe 00 00       	call   c0023e40 <AVX::AVX()>
c0014010:	eb 5b                	jmp    c001406d <setupFPU()+0x87>
c0014012:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014018:	84 c0                	test   al,al
c001401a:	79 19                	jns    c0014035 <setupFPU()+0x4f>
c001401c:	83 ec 0c             	sub    esp,0xc
c001401f:	68 58 01 00 00       	push   0x158
c0014024:	e8 ab b4 ff ff       	call   c000f4d4 <malloc>
c0014029:	89 c3                	mov    ebx,eax
c001402b:	89 04 24             	mov    DWORD PTR [esp],eax
c001402e:	e8 33 ff 00 00       	call   c0023f66 <SSE::SSE()>
c0014033:	eb 38                	jmp    c001406d <setupFPU()+0x87>
c0014035:	a8 20                	test   al,0x20
c0014037:	74 19                	je     c0014052 <setupFPU()+0x6c>
c0014039:	83 ec 0c             	sub    esp,0xc
c001403c:	68 58 01 00 00       	push   0x158
c0014041:	e8 8e b4 ff ff       	call   c000f4d4 <malloc>
c0014046:	89 c3                	mov    ebx,eax
c0014048:	89 04 24             	mov    DWORD PTR [esp],eax
c001404b:	e8 80 fe 00 00       	call   c0023ed0 <MMX::MMX()>
c0014050:	eb 1b                	jmp    c001406d <setupFPU()+0x87>
c0014052:	a8 10                	test   al,0x10
c0014054:	74 1c                	je     c0014072 <setupFPU()+0x8c>
c0014056:	83 ec 0c             	sub    esp,0xc
c0014059:	68 58 01 00 00       	push   0x158
c001405e:	e8 71 b4 ff ff       	call   c000f4d4 <malloc>
c0014063:	89 c3                	mov    ebx,eax
c0014065:	89 04 24             	mov    DWORD PTR [esp],eax
c0014068:	e8 87 ff 00 00       	call   c0023ff4 <x87::x87()>
c001406d:	83 c4 10             	add    esp,0x10
c0014070:	eb 24                	jmp    c0014096 <setupFPU()+0xb0>
c0014072:	83 e0 ef             	and    eax,0xffffffef
c0014075:	83 ec 0c             	sub    esp,0xc
c0014078:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001407e:	68 48 94 02 c0       	push   0xc0029448
c0014083:	e8 fd e5 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0014088:	0f 20 c0             	mov    eax,cr0
c001408b:	83 c8 04             	or     eax,0x4
c001408e:	0f 22 c0             	mov    cr0,eax
c0014091:	31 db                	xor    ebx,ebx
c0014093:	83 c4 10             	add    esp,0x10
c0014096:	89 d8                	mov    eax,ebx
c0014098:	83 c4 08             	add    esp,0x8
c001409b:	5b                   	pop    ebx
c001409c:	c3                   	ret    
c001409d:	90                   	nop

c001409e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001409e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00140a6:	c1 e0 04             	shl    eax,0x4
c00140a9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00140ad:	8d 50 10             	lea    edx,[eax+0x10]
c00140b0:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00140b6:	74 08                	je     c00140c0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00140b8:	83 c0 04             	add    eax,0x4
c00140bb:	39 d0                	cmp    eax,edx
c00140bd:	75 f1                	jne    c00140b0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00140bf:	c3                   	ret    
c00140c0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00140ca:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00140d4:	eb e2                	jmp    c00140b8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00140d6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00140d6:	57                   	push   edi
c00140d7:	31 c0                	xor    eax,eax
c00140d9:	56                   	push   esi
c00140da:	53                   	push   ebx
c00140db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00140df:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140e3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00140e7:	89 da                	mov    edx,ebx
c00140e9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00140ed:	c1 e2 04             	shl    edx,0x4
c00140f0:	01 ca                	add    edx,ecx
c00140f2:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00140fa:	74 16                	je     c0014112 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00140fc:	40                   	inc    eax
c00140fd:	83 f8 04             	cmp    eax,0x4
c0014100:	75 f0                	jne    c00140f2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014102:	c7 44 24 10 8c 94 02 c0 	mov    DWORD PTR [esp+0x10],0xc002948c
c001410a:	5b                   	pop    ebx
c001410b:	5e                   	pop    esi
c001410c:	5f                   	pop    edi
c001410d:	e9 8d 56 00 00       	jmp    c001979f <Krnl::panic(char const*)>
c0014112:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014115:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014118:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001411e:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014124:	5b                   	pop    ebx
c0014125:	5e                   	pop    esi
c0014126:	5f                   	pop    edi
c0014127:	c3                   	ret    

c0014128 <doubleFault(regs*, void*)>:
c0014128:	55                   	push   ebp
c0014129:	89 e5                	mov    ebp,esp
c001412b:	83 ec 08             	sub    esp,0x8
c001412e:	83 ec 0c             	sub    esp,0xc
c0014131:	68 c7 94 02 c0       	push   0xc00294c7
c0014136:	e8 64 56 00 00       	call   c001979f <Krnl::panic(char const*)>
c001413b:	83 c4 10             	add    esp,0x10
c001413e:	90                   	nop
c001413f:	c9                   	leave  
c0014140:	c3                   	ret    
c0014141:	90                   	nop

c0014142 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014142:	56                   	push   esi
c0014143:	53                   	push   ebx
c0014144:	50                   	push   eax
c0014145:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014149:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001414d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014152:	75 35                	jne    c0014189 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014154:	8d 43 20             	lea    eax,[ebx+0x20]
c0014157:	31 d2                	xor    edx,edx
c0014159:	89 c1                	mov    ecx,eax
c001415b:	c1 e1 04             	shl    ecx,0x4
c001415e:	01 f1                	add    ecx,esi
c0014160:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014168:	74 3e                	je     c00141a8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001416a:	42                   	inc    edx
c001416b:	83 fa 04             	cmp    edx,0x4
c001416e:	75 f0                	jne    c0014160 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014170:	83 ec 0c             	sub    esp,0xc
c0014173:	68 0c 95 02 c0       	push   0xc002950c
c0014178:	e8 22 56 00 00       	call   c001979f <Krnl::panic(char const*)>
c001417d:	83 c4 10             	add    esp,0x10
c0014180:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014185:	5a                   	pop    edx
c0014186:	5b                   	pop    ebx
c0014187:	5e                   	pop    esi
c0014188:	c3                   	ret    
c0014189:	83 ec 0c             	sub    esp,0xc
c001418c:	56                   	push   esi
c001418d:	e8 ce fb ff ff       	call   c0013d60 <Device::getName()>
c0014192:	83 c4 10             	add    esp,0x10
c0014195:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014198:	75 ba                	jne    c0014154 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001419a:	83 fb 0f             	cmp    ebx,0xf
c001419d:	7f 29                	jg     c00141c8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001419f:	0f b6 9b a0 ba 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd4560]
c00141a6:	eb ac                	jmp    c0014154 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141a8:	8d 04 82             	lea    eax,[edx+eax*4]
c00141ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00141af:	8d 04 86             	lea    eax,[esi+eax*4]
c00141b2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00141b8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141bc:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00141c2:	89 d8                	mov    eax,ebx
c00141c4:	5a                   	pop    edx
c00141c5:	5b                   	pop    ebx
c00141c6:	5e                   	pop    esi
c00141c7:	c3                   	ret    
c00141c8:	83 ec 0c             	sub    esp,0xc
c00141cb:	68 d4 94 02 c0       	push   0xc00294d4
c00141d0:	e8 ca 55 00 00       	call   c001979f <Krnl::panic(char const*)>
c00141d5:	83 c4 10             	add    esp,0x10
c00141d8:	e9 77 ff ff ff       	jmp    c0014154 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141dd:	90                   	nop

c00141de <InterruptController::clearAllHandlers(int, bool)>:
c00141de:	56                   	push   esi
c00141df:	53                   	push   ebx
c00141e0:	52                   	push   edx
c00141e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00141e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00141e9:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00141ee:	75 61                	jne    c0014251 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00141f0:	8d 46 20             	lea    eax,[esi+0x20]
c00141f3:	c1 e6 04             	shl    esi,0x4
c00141f6:	c1 e0 04             	shl    eax,0x4
c00141f9:	01 de                	add    esi,ebx
c00141fb:	01 d8                	add    eax,ebx
c00141fd:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014207:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014211:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001421b:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014225:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001422f:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014239:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014243:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c001424d:	58                   	pop    eax
c001424e:	5b                   	pop    ebx
c001424f:	5e                   	pop    esi
c0014250:	c3                   	ret    
c0014251:	83 ec 0c             	sub    esp,0xc
c0014254:	53                   	push   ebx
c0014255:	e8 06 fb ff ff       	call   c0013d60 <Device::getName()>
c001425a:	83 c4 10             	add    esp,0x10
c001425d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014260:	75 8e                	jne    c00141f0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014262:	83 fe 0f             	cmp    esi,0xf
c0014265:	7f 09                	jg     c0014270 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014267:	0f b6 b6 a0 ba 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd4560]
c001426e:	eb 80                	jmp    c00141f0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014270:	83 ec 0c             	sub    esp,0xc
c0014273:	68 48 95 02 c0       	push   0xc0029548
c0014278:	e8 22 55 00 00       	call   c001979f <Krnl::panic(char const*)>
c001427d:	83 c4 10             	add    esp,0x10
c0014280:	e9 6b ff ff ff       	jmp    c00141f0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014285:	90                   	nop

c0014286 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014286:	56                   	push   esi
c0014287:	53                   	push   ebx
c0014288:	52                   	push   edx
c0014289:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001428d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014291:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014296:	75 3a                	jne    c00142d2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014298:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001429c:	8d 50 20             	lea    edx,[eax+0x20]
c001429f:	c1 e2 04             	shl    edx,0x4
c00142a2:	8d 04 16             	lea    eax,[esi+edx*1]
c00142a5:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00142a9:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00142af:	74 0b                	je     c00142bc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00142b1:	83 c0 04             	add    eax,0x4
c00142b4:	39 d0                	cmp    eax,edx
c00142b6:	75 f1                	jne    c00142a9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00142b8:	58                   	pop    eax
c00142b9:	5b                   	pop    ebx
c00142ba:	5e                   	pop    esi
c00142bb:	c3                   	ret    
c00142bc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00142c6:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00142d0:	eb df                	jmp    c00142b1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00142d2:	83 ec 0c             	sub    esp,0xc
c00142d5:	56                   	push   esi
c00142d6:	e8 85 fa ff ff       	call   c0013d60 <Device::getName()>
c00142db:	83 c4 10             	add    esp,0x10
c00142de:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00142e1:	75 b5                	jne    c0014298 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00142e3:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00142e8:	7f 11                	jg     c00142fb <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00142ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142ee:	0f b6 80 a0 ba 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd4560]
c00142f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00142f9:	eb 9d                	jmp    c0014298 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00142fb:	83 ec 0c             	sub    esp,0xc
c00142fe:	68 48 95 02 c0       	push   0xc0029548
c0014303:	e8 97 54 00 00       	call   c001979f <Krnl::panic(char const*)>
c0014308:	83 c4 10             	add    esp,0x10
c001430b:	eb 8b                	jmp    c0014298 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c001430d <nmiHandler(regs*, void*)>:
c001430d:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0014312:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014316:	e9 05 a9 ff ff       	jmp    c000ec20 <Computer::handleNMI()>

c001431b <int_handler>:
c001431b:	55                   	push   ebp
c001431c:	57                   	push   edi
c001431d:	56                   	push   esi
c001431e:	53                   	push   ebx
c001431f:	83 ec 0c             	sub    esp,0xc
c0014322:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014326:	80 3d 80 d3 02 c0 00 	cmp    BYTE PTR ds:0xc002d380,0x0
c001432d:	74 0b                	je     c001433a <int_handler+0x1f>
c001432f:	fa                   	cli    
c0014330:	f4                   	hlt    
c0014331:	80 3d 80 d3 02 c0 00 	cmp    BYTE PTR ds:0xc002d380,0x0
c0014338:	75 f5                	jne    c001432f <int_handler+0x14>
c001433a:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001433f:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014342:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014348:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001434e:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014351:	83 f8 17             	cmp    eax,0x17
c0014354:	77 13                	ja     c0014369 <int_handler+0x4e>
c0014356:	83 ec 08             	sub    esp,0x8
c0014359:	8b 17                	mov    edx,DWORD PTR [edi]
c001435b:	8d 43 e0             	lea    eax,[ebx-0x20]
c001435e:	0f b6 c0             	movzx  eax,al
c0014361:	50                   	push   eax
c0014362:	57                   	push   edi
c0014363:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014366:	83 c4 10             	add    esp,0x10
c0014369:	83 c3 15             	add    ebx,0x15
c001436c:	c1 e3 04             	shl    ebx,0x4
c001436f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014373:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001437a:	31 db                	xor    ebx,ebx
c001437c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014380:	85 c0                	test   eax,eax
c0014382:	74 13                	je     c0014397 <int_handler+0x7c>
c0014384:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014387:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001438b:	74 1c                	je     c00143a9 <int_handler+0x8e>
c001438d:	83 ec 08             	sub    esp,0x8
c0014390:	52                   	push   edx
c0014391:	56                   	push   esi
c0014392:	ff d0                	call   eax
c0014394:	83 c4 10             	add    esp,0x10
c0014397:	43                   	inc    ebx
c0014398:	83 fb 04             	cmp    ebx,0x4
c001439b:	75 df                	jne    c001437c <int_handler+0x61>
c001439d:	83 c4 0c             	add    esp,0xc
c00143a0:	31 c0                	xor    eax,eax
c00143a2:	5b                   	pop    ebx
c00143a3:	31 d2                	xor    edx,edx
c00143a5:	5e                   	pop    esi
c00143a6:	5f                   	pop    edi
c00143a7:	5d                   	pop    ebp
c00143a8:	c3                   	ret    
c00143a9:	83 ec 08             	sub    esp,0x8
c00143ac:	52                   	push   edx
c00143ad:	56                   	push   esi
c00143ae:	ff d0                	call   eax
c00143b0:	83 c4 10             	add    esp,0x10
c00143b3:	83 c4 0c             	add    esp,0xc
c00143b6:	5b                   	pop    ebx
c00143b7:	5e                   	pop    esi
c00143b8:	5f                   	pop    edi
c00143b9:	5d                   	pop    ebp
c00143ba:	c3                   	ret    
c00143bb:	90                   	nop

c00143bc <InterruptController::InterruptController(char const*)>:
c00143bc:	83 ec 1c             	sub    esp,0x1c
c00143bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143c3:	83 ec 08             	sub    esp,0x8
c00143c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00143ca:	50                   	push   eax
c00143cb:	e8 94 f8 ff ff       	call   c0013c64 <Device::Device(char const*)>
c00143d0:	83 c4 10             	add    esp,0x10
c00143d3:	ba 7c 97 02 c0       	mov    edx,0xc002977c
c00143d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143dc:	89 10                	mov    DWORD PTR [eax],edx
c00143de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143e2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00143ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00143f4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00143fc:	7f 5e                	jg     c001445c <InterruptController::InterruptController(char const*)+0xa0>
c00143fe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014406:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c001440b:	7f 49                	jg     c0014456 <InterruptController::InterruptController(char const*)+0x9a>
c001440d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014411:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014415:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001441c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014420:	01 ca                	add    edx,ecx
c0014422:	83 c2 54             	add    edx,0x54
c0014425:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001442d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014431:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014435:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001443c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014440:	01 ca                	add    edx,ecx
c0014442:	81 c2 54 04 00 00    	add    edx,0x454
c0014448:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014450:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014454:	eb b0                	jmp    c0014406 <InterruptController::InterruptController(char const*)+0x4a>
c0014456:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001445a:	eb 98                	jmp    c00143f4 <InterruptController::InterruptController(char const*)+0x38>
c001445c:	90                   	nop
c001445d:	83 c4 1c             	add    esp,0x1c
c0014460:	c3                   	ret    
c0014461:	90                   	nop

c0014462 <InterruptController::~InterruptController()>:
c0014462:	83 ec 0c             	sub    esp,0xc
c0014465:	ba 7c 97 02 c0       	mov    edx,0xc002977c
c001446a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001446e:	89 10                	mov    DWORD PTR [eax],edx
c0014470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014474:	83 ec 0c             	sub    esp,0xc
c0014477:	50                   	push   eax
c0014478:	e8 c9 f4 ff ff       	call   c0013946 <Device::~Device()>
c001447d:	83 c4 10             	add    esp,0x10
c0014480:	90                   	nop
c0014481:	83 c4 0c             	add    esp,0xc
c0014484:	c3                   	ret    
c0014485:	90                   	nop

c0014486 <InterruptController::~InterruptController()>:
c0014486:	83 ec 0c             	sub    esp,0xc
c0014489:	83 ec 0c             	sub    esp,0xc
c001448c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014490:	e8 cd ff ff ff       	call   c0014462 <InterruptController::~InterruptController()>
c0014495:	83 c4 10             	add    esp,0x10
c0014498:	83 ec 08             	sub    esp,0x8
c001449b:	68 58 21 00 00       	push   0x2158
c00144a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144a4:	e8 fc e0 ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c00144a9:	83 c4 10             	add    esp,0x10
c00144ac:	83 c4 0c             	add    esp,0xc
c00144af:	c3                   	ret    

c00144b0 <displayDebugInfo(regs*)>:
c00144b0:	55                   	push   ebp
c00144b1:	57                   	push   edi
c00144b2:	56                   	push   esi
c00144b3:	53                   	push   ebx
c00144b4:	83 ec 24             	sub    esp,0x24
c00144b7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00144bb:	0f 20 c2             	mov    edx,cr0
c00144be:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00144c2:	0f 20 d7             	mov    edi,cr2
c00144c5:	0f 20 de             	mov    esi,cr3
c00144c8:	0f 20 e5             	mov    ebp,cr4
c00144cb:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00144ce:	68 82 95 02 c0       	push   0xc0029582
c00144d3:	e8 ad e1 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00144d8:	58                   	pop    eax
c00144d9:	5a                   	pop    edx
c00144da:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00144dd:	68 8d 95 02 c0       	push   0xc002958d
c00144e2:	e8 9e e1 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00144e7:	59                   	pop    ecx
c00144e8:	58                   	pop    eax
c00144e9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00144ec:	68 98 95 02 c0       	push   0xc0029598
c00144f1:	e8 8f e1 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00144f6:	58                   	pop    eax
c00144f7:	5a                   	pop    edx
c00144f8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00144fb:	68 a3 95 02 c0       	push   0xc00295a3
c0014500:	e8 80 e1 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0014505:	59                   	pop    ecx
c0014506:	58                   	pop    eax
c0014507:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001450a:	68 ae 95 02 c0       	push   0xc00295ae
c001450f:	e8 71 e1 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0014514:	58                   	pop    eax
c0014515:	5a                   	pop    edx
c0014516:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014519:	68 b9 95 02 c0       	push   0xc00295b9
c001451e:	e8 62 e1 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0014523:	59                   	pop    ecx
c0014524:	58                   	pop    eax
c0014525:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014528:	68 c4 95 02 c0       	push   0xc00295c4
c001452d:	e8 53 e1 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0014532:	58                   	pop    eax
c0014533:	5a                   	pop    edx
c0014534:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014537:	68 cf 95 02 c0       	push   0xc00295cf
c001453c:	e8 44 e1 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0014541:	59                   	pop    ecx
c0014542:	58                   	pop    eax
c0014543:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014546:	68 da 95 02 c0       	push   0xc00295da
c001454b:	e8 35 e1 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0014550:	58                   	pop    eax
c0014551:	5a                   	pop    edx
c0014552:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014555:	68 e9 95 02 c0       	push   0xc00295e9
c001455a:	e8 26 e1 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001455f:	59                   	pop    ecx
c0014560:	58                   	pop    eax
c0014561:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014564:	68 f4 95 02 c0       	push   0xc00295f4
c0014569:	e8 17 e1 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001456e:	58                   	pop    eax
c001456f:	5a                   	pop    edx
c0014570:	57                   	push   edi
c0014571:	68 ff 95 02 c0       	push   0xc00295ff
c0014576:	e8 0a e1 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001457b:	59                   	pop    ecx
c001457c:	58                   	pop    eax
c001457d:	56                   	push   esi
c001457e:	68 0a 96 02 c0       	push   0xc002960a
c0014583:	e8 fd e0 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0014588:	58                   	pop    eax
c0014589:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001458e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014594:	e8 ae c2 ff ff       	call   c0010847 <setActiveTerminal(VgaText*)>
c0014599:	58                   	pop    eax
c001459a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001459d:	5a                   	pop    edx
c001459e:	c1 e0 05             	shl    eax,0x5
c00145a1:	05 00 b8 02 c0       	add    eax,0xc002b800
c00145a6:	50                   	push   eax
c00145a7:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00145ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145b2:	e8 af c6 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c00145b7:	59                   	pop    ecx
c00145b8:	58                   	pop    eax
c00145b9:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00145be:	68 15 96 02 c0       	push   0xc0029615
c00145c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145c9:	e8 98 c6 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c00145ce:	58                   	pop    eax
c00145cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145d4:	5a                   	pop    edx
c00145d5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00145d8:	83 c0 0c             	add    eax,0xc
c00145db:	50                   	push   eax
c00145dc:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00145e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145e7:	e8 7a c6 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c00145ec:	59                   	pop    ecx
c00145ed:	58                   	pop    eax
c00145ee:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00145f3:	68 1e 96 02 c0       	push   0xc002961e
c00145f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145fe:	e8 63 c6 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c0014603:	58                   	pop    eax
c0014604:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014609:	5a                   	pop    edx
c001460a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001460d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014613:	e8 74 c6 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c0014618:	59                   	pop    ecx
c0014619:	58                   	pop    eax
c001461a:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001461f:	68 26 96 02 c0       	push   0xc0029626
c0014624:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001462a:	e8 37 c6 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c001462f:	58                   	pop    eax
c0014630:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014635:	5a                   	pop    edx
c0014636:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014639:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001463f:	e8 48 c6 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c0014644:	59                   	pop    ecx
c0014645:	58                   	pop    eax
c0014646:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001464b:	68 2e 96 02 c0       	push   0xc002962e
c0014650:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014656:	e8 0b c6 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c001465b:	58                   	pop    eax
c001465c:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014661:	5a                   	pop    edx
c0014662:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014665:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001466b:	e8 1c c6 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c0014670:	59                   	pop    ecx
c0014671:	58                   	pop    eax
c0014672:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014677:	68 36 96 02 c0       	push   0xc0029636
c001467c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014682:	e8 df c5 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c0014687:	58                   	pop    eax
c0014688:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001468d:	5a                   	pop    edx
c001468e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014691:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014697:	e8 f0 c5 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c001469c:	59                   	pop    ecx
c001469d:	58                   	pop    eax
c001469e:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00146a3:	68 3e 96 02 c0       	push   0xc002963e
c00146a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146ae:	e8 b3 c5 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c00146b3:	58                   	pop    eax
c00146b4:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00146b9:	5a                   	pop    edx
c00146ba:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00146bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146c3:	e8 c4 c5 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c00146c8:	59                   	pop    ecx
c00146c9:	58                   	pop    eax
c00146ca:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00146cf:	68 46 96 02 c0       	push   0xc0029646
c00146d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146da:	e8 87 c5 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c00146df:	58                   	pop    eax
c00146e0:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00146e5:	5a                   	pop    edx
c00146e6:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00146e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146ef:	e8 98 c5 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c00146f4:	59                   	pop    ecx
c00146f5:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00146fa:	5b                   	pop    ebx
c00146fb:	68 4e 96 02 c0       	push   0xc002964e
c0014700:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014706:	e8 5b c5 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c001470b:	58                   	pop    eax
c001470c:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014711:	5a                   	pop    edx
c0014712:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014716:	52                   	push   edx
c0014717:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001471d:	e8 6a c5 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c0014722:	59                   	pop    ecx
c0014723:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014728:	5b                   	pop    ebx
c0014729:	68 57 96 02 c0       	push   0xc0029657
c001472e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014734:	e8 2d c5 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c0014739:	58                   	pop    eax
c001473a:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001473f:	5a                   	pop    edx
c0014740:	57                   	push   edi
c0014741:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014747:	e8 40 c5 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c001474c:	59                   	pop    ecx
c001474d:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014752:	5b                   	pop    ebx
c0014753:	68 5f 96 02 c0       	push   0xc002965f
c0014758:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001475e:	e8 03 c5 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c0014763:	5f                   	pop    edi
c0014764:	58                   	pop    eax
c0014765:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001476a:	56                   	push   esi
c001476b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014771:	e8 16 c5 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c0014776:	58                   	pop    eax
c0014777:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001477c:	5a                   	pop    edx
c001477d:	68 67 96 02 c0       	push   0xc0029667
c0014782:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014788:	e8 d9 c4 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c001478d:	59                   	pop    ecx
c001478e:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014793:	5b                   	pop    ebx
c0014794:	55                   	push   ebp
c0014795:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001479b:	e8 ec c4 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c00147a0:	5e                   	pop    esi
c00147a1:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00147a6:	5f                   	pop    edi
c00147a7:	68 6f 96 02 c0       	push   0xc002966f
c00147ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b2:	e8 af c4 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c00147b7:	0f 21 c0             	mov    eax,db0
c00147ba:	5d                   	pop    ebp
c00147bb:	5a                   	pop    edx
c00147bc:	50                   	push   eax
c00147bd:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00147c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147c8:	e8 bf c4 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c00147cd:	59                   	pop    ecx
c00147ce:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00147d3:	5b                   	pop    ebx
c00147d4:	68 78 96 02 c0       	push   0xc0029678
c00147d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147df:	e8 82 c4 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c00147e4:	0f 21 c8             	mov    eax,db1
c00147e7:	5e                   	pop    esi
c00147e8:	5f                   	pop    edi
c00147e9:	50                   	push   eax
c00147ea:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00147ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147f5:	e8 92 c4 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c00147fa:	5d                   	pop    ebp
c00147fb:	58                   	pop    eax
c00147fc:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014801:	68 80 96 02 c0       	push   0xc0029680
c0014806:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001480c:	e8 55 c4 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c0014811:	0f 21 d0             	mov    eax,db2
c0014814:	5a                   	pop    edx
c0014815:	59                   	pop    ecx
c0014816:	50                   	push   eax
c0014817:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001481c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014822:	e8 65 c4 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c0014827:	5b                   	pop    ebx
c0014828:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001482d:	5e                   	pop    esi
c001482e:	68 88 96 02 c0       	push   0xc0029688
c0014833:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014839:	e8 28 c4 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c001483e:	0f 21 d8             	mov    eax,db3
c0014841:	5f                   	pop    edi
c0014842:	5d                   	pop    ebp
c0014843:	50                   	push   eax
c0014844:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014849:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001484f:	e8 38 c4 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c0014854:	58                   	pop    eax
c0014855:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001485a:	5a                   	pop    edx
c001485b:	68 90 96 02 c0       	push   0xc0029690
c0014860:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014866:	e8 fb c3 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c001486b:	0f 21 f0             	mov    eax,db6
c001486e:	59                   	pop    ecx
c001486f:	5b                   	pop    ebx
c0014870:	50                   	push   eax
c0014871:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014876:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001487c:	e8 0b c4 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c0014881:	5e                   	pop    esi
c0014882:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014887:	5f                   	pop    edi
c0014888:	68 98 96 02 c0       	push   0xc0029698
c001488d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014893:	e8 ce c3 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c0014898:	0f 21 f8             	mov    eax,db7
c001489b:	5d                   	pop    ebp
c001489c:	5a                   	pop    edx
c001489d:	50                   	push   eax
c001489e:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00148a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a9:	e8 de c3 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c00148ae:	fa                   	cli    
c00148af:	f4                   	hlt    
c00148b0:	83 c4 10             	add    esp,0x10
c00148b3:	eb fe                	jmp    c00148b3 <displayDebugInfo(regs*)+0x403>

c00148b5 <x87EmulHandler(regs*, void*)>:
c00148b5:	53                   	push   ebx
c00148b6:	83 ec 14             	sub    esp,0x14
c00148b9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148bd:	53                   	push   ebx
c00148be:	e8 ff 9f 00 00       	call   c001e8c2 <Vm::x87Handler(regs*)>
c00148c3:	83 c4 10             	add    esp,0x10
c00148c6:	84 c0                	test   al,al
c00148c8:	74 05                	je     c00148cf <x87EmulHandler(regs*, void*)+0x1a>
c00148ca:	83 c4 08             	add    esp,0x8
c00148cd:	5b                   	pop    ebx
c00148ce:	c3                   	ret    
c00148cf:	83 ec 0c             	sub    esp,0xc
c00148d2:	68 a0 96 02 c0       	push   0xc00296a0
c00148d7:	e8 a9 dd ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00148dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148df:	e8 cc fb ff ff       	call   c00144b0 <displayDebugInfo(regs*)>

c00148e4 <gpFault(regs*, void*)>:
c00148e4:	53                   	push   ebx
c00148e5:	83 ec 14             	sub    esp,0x14
c00148e8:	c7 05 f0 c9 02 c0 3f dc 01 c0 	mov    DWORD PTR ds:0xc002c9f0,0xc001dc3f
c00148f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148f6:	53                   	push   ebx
c00148f7:	e8 43 93 00 00       	call   c001dc3f <Vm::faultHandler(regs*)>
c00148fc:	83 c4 10             	add    esp,0x10
c00148ff:	84 c0                	test   al,al
c0014901:	74 05                	je     c0014908 <gpFault(regs*, void*)+0x24>
c0014903:	83 c4 08             	add    esp,0x8
c0014906:	5b                   	pop    ebx
c0014907:	c3                   	ret    
c0014908:	83 ec 0c             	sub    esp,0xc
c001490b:	68 b6 96 02 c0       	push   0xc00296b6
c0014910:	e8 70 dd ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0014915:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014918:	e8 93 fb ff ff       	call   c00144b0 <displayDebugInfo(regs*)>

c001491d <pgFault(regs*, void*)>:
c001491d:	83 ec 18             	sub    esp,0x18
c0014920:	68 d1 96 02 c0       	push   0xc00296d1
c0014925:	e8 5b dd ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001492a:	58                   	pop    eax
c001492b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001492f:	e8 7c fb ff ff       	call   c00144b0 <displayDebugInfo(regs*)>

c0014934 <otherISRHandler(regs*, void*)>:
c0014934:	53                   	push   ebx
c0014935:	83 ec 0c             	sub    esp,0xc
c0014938:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001493c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001493f:	50                   	push   eax
c0014940:	50                   	push   eax
c0014941:	68 de 96 02 c0       	push   0xc00296de
c0014946:	e8 3a dd ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001494b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001494e:	e8 5d fb ff ff       	call   c00144b0 <displayDebugInfo(regs*)>

c0014953 <opcodeFault(regs*, void*)>:
c0014953:	55                   	push   ebp
c0014954:	89 e5                	mov    ebp,esp
c0014956:	56                   	push   esi
c0014957:	53                   	push   ebx
c0014958:	83 ec 40             	sub    esp,0x40
c001495b:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0014960:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014966:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001496c:	84 c0                	test   al,al
c001496e:	74 24                	je     c0014994 <opcodeFault(regs*, void*)+0x41>
c0014970:	83 ec 0c             	sub    esp,0xc
c0014973:	68 fc 96 02 c0       	push   0xc00296fc
c0014978:	e8 08 dd ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001497d:	83 c4 10             	add    esp,0x10
c0014980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014983:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014986:	8d 50 19             	lea    edx,[eax+0x19]
c0014989:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001498c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001498f:	e9 77 05 00 00       	jmp    c0014f0b <opcodeFault(regs*, void*)+0x5b8>
c0014994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014997:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001499a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001499d:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00149a1:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00149a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149ab:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00149ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149b1:	8a 00                	mov    al,BYTE PTR [eax]
c00149b3:	3c f0                	cmp    al,0xf0
c00149b5:	75 17                	jne    c00149ce <opcodeFault(regs*, void*)+0x7b>
c00149b7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149c0:	8d 50 01             	lea    edx,[eax+0x1]
c00149c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149c9:	e9 da 00 00 00       	jmp    c0014aa8 <opcodeFault(regs*, void*)+0x155>
c00149ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149d1:	8a 00                	mov    al,BYTE PTR [eax]
c00149d3:	3c f2                	cmp    al,0xf2
c00149d5:	74 09                	je     c00149e0 <opcodeFault(regs*, void*)+0x8d>
c00149d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149da:	8a 00                	mov    al,BYTE PTR [eax]
c00149dc:	3c f3                	cmp    al,0xf3
c00149de:	75 1b                	jne    c00149fb <opcodeFault(regs*, void*)+0xa8>
c00149e0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149e4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149ea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149ed:	8d 50 01             	lea    edx,[eax+0x1]
c00149f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149f3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149f6:	e9 ad 00 00 00       	jmp    c0014aa8 <opcodeFault(regs*, void*)+0x155>
c00149fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149fe:	8a 00                	mov    al,BYTE PTR [eax]
c0014a00:	3c 66                	cmp    al,0x66
c0014a02:	75 1f                	jne    c0014a23 <opcodeFault(regs*, void*)+0xd0>
c0014a04:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a08:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014a0c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a12:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a15:	8d 50 01             	lea    edx,[eax+0x1]
c0014a18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a1b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a1e:	e9 85 00 00 00       	jmp    c0014aa8 <opcodeFault(regs*, void*)+0x155>
c0014a23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a26:	8a 00                	mov    al,BYTE PTR [eax]
c0014a28:	3c 67                	cmp    al,0x67
c0014a2a:	75 18                	jne    c0014a44 <opcodeFault(regs*, void*)+0xf1>
c0014a2c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a30:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a36:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a39:	8d 50 01             	lea    edx,[eax+0x1]
c0014a3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a3f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a42:	eb 64                	jmp    c0014aa8 <opcodeFault(regs*, void*)+0x155>
c0014a44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a47:	8a 00                	mov    al,BYTE PTR [eax]
c0014a49:	3c 2e                	cmp    al,0x2e
c0014a4b:	74 09                	je     c0014a56 <opcodeFault(regs*, void*)+0x103>
c0014a4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a50:	8a 00                	mov    al,BYTE PTR [eax]
c0014a52:	3c 3e                	cmp    al,0x3e
c0014a54:	75 18                	jne    c0014a6e <opcodeFault(regs*, void*)+0x11b>
c0014a56:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a5a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a60:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a63:	8d 50 01             	lea    edx,[eax+0x1]
c0014a66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a69:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a6c:	eb 3a                	jmp    c0014aa8 <opcodeFault(regs*, void*)+0x155>
c0014a6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a71:	8a 00                	mov    al,BYTE PTR [eax]
c0014a73:	3c 36                	cmp    al,0x36
c0014a75:	74 1b                	je     c0014a92 <opcodeFault(regs*, void*)+0x13f>
c0014a77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a7a:	8a 00                	mov    al,BYTE PTR [eax]
c0014a7c:	3c 26                	cmp    al,0x26
c0014a7e:	74 12                	je     c0014a92 <opcodeFault(regs*, void*)+0x13f>
c0014a80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a83:	8a 00                	mov    al,BYTE PTR [eax]
c0014a85:	3c 64                	cmp    al,0x64
c0014a87:	74 09                	je     c0014a92 <opcodeFault(regs*, void*)+0x13f>
c0014a89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a8c:	8a 00                	mov    al,BYTE PTR [eax]
c0014a8e:	3c 65                	cmp    al,0x65
c0014a90:	75 16                	jne    c0014aa8 <opcodeFault(regs*, void*)+0x155>
c0014a92:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a96:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a9c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a9f:	8d 50 01             	lea    edx,[eax+0x1]
c0014aa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014aa8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aab:	8a 00                	mov    al,BYTE PTR [eax]
c0014aad:	3c 0f                	cmp    al,0xf
c0014aaf:	0f 85 ad 00 00 00    	jne    c0014b62 <opcodeFault(regs*, void*)+0x20f>
c0014ab5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ab8:	40                   	inc    eax
c0014ab9:	8a 00                	mov    al,BYTE PTR [eax]
c0014abb:	3c c2                	cmp    al,0xc2
c0014abd:	74 0e                	je     c0014acd <opcodeFault(regs*, void*)+0x17a>
c0014abf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ac2:	40                   	inc    eax
c0014ac3:	8a 00                	mov    al,BYTE PTR [eax]
c0014ac5:	3c c3                	cmp    al,0xc3
c0014ac7:	0f 85 95 00 00 00    	jne    c0014b62 <opcodeFault(regs*, void*)+0x20f>
c0014acd:	83 ec 0c             	sub    esp,0xc
c0014ad0:	68 1f 97 02 c0       	push   0xc002971f
c0014ad5:	e8 ab db ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0014ada:	83 c4 10             	add    esp,0x10
c0014add:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ae3:	8d 50 01             	lea    edx,[eax+0x1]
c0014ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014aec:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014aef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014af2:	8a 00                	mov    al,BYTE PTR [eax]
c0014af4:	8d 50 fe             	lea    edx,[eax-0x2]
c0014af7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014afa:	88 10                	mov    BYTE PTR [eax],dl
c0014afc:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014aff:	50                   	push   eax
c0014b00:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014b03:	50                   	push   eax
c0014b04:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014b07:	50                   	push   eax
c0014b08:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014b0b:	e8 c0 44 00 00       	call   c0018fd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014b10:	83 c4 10             	add    esp,0x10
c0014b13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b16:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b19:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b1c:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014b1f:	01 d0                	add    eax,edx
c0014b21:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014b24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b27:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b2a:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b2d:	48                   	dec    eax
c0014b2e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014b31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b34:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014b37:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b3d:	83 ec 04             	sub    esp,0x4
c0014b40:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014b43:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014b46:	50                   	push   eax
c0014b47:	e8 1d b6 fe ff       	call   c0000169 <voodooXADD>
c0014b4c:	83 c4 10             	add    esp,0x10
c0014b4f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014b52:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014b55:	01 c2                	add    edx,eax
c0014b57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b5a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b5d:	e9 a9 03 00 00       	jmp    c0014f0b <opcodeFault(regs*, void*)+0x5b8>
c0014b62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b65:	8a 00                	mov    al,BYTE PTR [eax]
c0014b67:	3c 0f                	cmp    al,0xf
c0014b69:	0f 85 8b 01 00 00    	jne    c0014cfa <opcodeFault(regs*, void*)+0x3a7>
c0014b6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b72:	40                   	inc    eax
c0014b73:	8a 00                	mov    al,BYTE PTR [eax]
c0014b75:	3c c7                	cmp    al,0xc7
c0014b77:	0f 86 7d 01 00 00    	jbe    c0014cfa <opcodeFault(regs*, void*)+0x3a7>
c0014b7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b80:	40                   	inc    eax
c0014b81:	8a 00                	mov    al,BYTE PTR [eax]
c0014b83:	3c cf                	cmp    al,0xcf
c0014b85:	0f 87 6f 01 00 00    	ja     c0014cfa <opcodeFault(regs*, void*)+0x3a7>
c0014b8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b8e:	40                   	inc    eax
c0014b8f:	8a 00                	mov    al,BYTE PTR [eax]
c0014b91:	83 c0 38             	add    eax,0x38
c0014b94:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014b97:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014b9b:	75 0b                	jne    c0014ba8 <opcodeFault(regs*, void*)+0x255>
c0014b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014ba3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ba6:	eb 75                	jmp    c0014c1d <opcodeFault(regs*, void*)+0x2ca>
c0014ba8:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014bac:	75 0b                	jne    c0014bb9 <opcodeFault(regs*, void*)+0x266>
c0014bae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014bb4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bb7:	eb 64                	jmp    c0014c1d <opcodeFault(regs*, void*)+0x2ca>
c0014bb9:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014bbd:	75 0b                	jne    c0014bca <opcodeFault(regs*, void*)+0x277>
c0014bbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014bc5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bc8:	eb 53                	jmp    c0014c1d <opcodeFault(regs*, void*)+0x2ca>
c0014bca:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014bce:	75 0b                	jne    c0014bdb <opcodeFault(regs*, void*)+0x288>
c0014bd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014bd6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bd9:	eb 42                	jmp    c0014c1d <opcodeFault(regs*, void*)+0x2ca>
c0014bdb:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014bdf:	75 0b                	jne    c0014bec <opcodeFault(regs*, void*)+0x299>
c0014be1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014be4:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014be7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bea:	eb 31                	jmp    c0014c1d <opcodeFault(regs*, void*)+0x2ca>
c0014bec:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014bf0:	75 0b                	jne    c0014bfd <opcodeFault(regs*, void*)+0x2aa>
c0014bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014bf8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bfb:	eb 20                	jmp    c0014c1d <opcodeFault(regs*, void*)+0x2ca>
c0014bfd:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014c01:	75 0b                	jne    c0014c0e <opcodeFault(regs*, void*)+0x2bb>
c0014c03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c06:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014c09:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c0c:	eb 0f                	jmp    c0014c1d <opcodeFault(regs*, void*)+0x2ca>
c0014c0e:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014c12:	75 09                	jne    c0014c1d <opcodeFault(regs*, void*)+0x2ca>
c0014c14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c17:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014c1a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c1d:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014c21:	74 10                	je     c0014c33 <opcodeFault(regs*, void*)+0x2e0>
c0014c23:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014c2a:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014c31:	eb 2d                	jmp    c0014c60 <opcodeFault(regs*, void*)+0x30d>
c0014c33:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c36:	c1 e0 18             	shl    eax,0x18
c0014c39:	89 c2                	mov    edx,eax
c0014c3b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c3e:	c1 e0 08             	shl    eax,0x8
c0014c41:	25 00 00 ff 00       	and    eax,0xff0000
c0014c46:	09 c2                	or     edx,eax
c0014c48:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c4b:	c1 e8 08             	shr    eax,0x8
c0014c4e:	25 00 ff 00 00       	and    eax,0xff00
c0014c53:	09 c2                	or     edx,eax
c0014c55:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c58:	c1 e8 18             	shr    eax,0x18
c0014c5b:	09 d0                	or     eax,edx
c0014c5d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c60:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c64:	75 0b                	jne    c0014c71 <opcodeFault(regs*, void*)+0x31e>
c0014c66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c69:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c6c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014c6f:	eb 75                	jmp    c0014ce6 <opcodeFault(regs*, void*)+0x393>
c0014c71:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c75:	75 0b                	jne    c0014c82 <opcodeFault(regs*, void*)+0x32f>
c0014c77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c7a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c7d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014c80:	eb 64                	jmp    c0014ce6 <opcodeFault(regs*, void*)+0x393>
c0014c82:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014c86:	75 0b                	jne    c0014c93 <opcodeFault(regs*, void*)+0x340>
c0014c88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c8b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c8e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014c91:	eb 53                	jmp    c0014ce6 <opcodeFault(regs*, void*)+0x393>
c0014c93:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014c97:	75 0b                	jne    c0014ca4 <opcodeFault(regs*, void*)+0x351>
c0014c99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c9c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c9f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014ca2:	eb 42                	jmp    c0014ce6 <opcodeFault(regs*, void*)+0x393>
c0014ca4:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014ca8:	75 0b                	jne    c0014cb5 <opcodeFault(regs*, void*)+0x362>
c0014caa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cad:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cb0:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014cb3:	eb 31                	jmp    c0014ce6 <opcodeFault(regs*, void*)+0x393>
c0014cb5:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014cb9:	75 0b                	jne    c0014cc6 <opcodeFault(regs*, void*)+0x373>
c0014cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cbe:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cc1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014cc4:	eb 20                	jmp    c0014ce6 <opcodeFault(regs*, void*)+0x393>
c0014cc6:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014cca:	75 0b                	jne    c0014cd7 <opcodeFault(regs*, void*)+0x384>
c0014ccc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ccf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cd2:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014cd5:	eb 0f                	jmp    c0014ce6 <opcodeFault(regs*, void*)+0x393>
c0014cd7:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014cdb:	75 09                	jne    c0014ce6 <opcodeFault(regs*, void*)+0x393>
c0014cdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ce3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014ce6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cec:	8d 50 02             	lea    edx,[eax+0x2]
c0014cef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cf5:	e9 11 02 00 00       	jmp    c0014f0b <opcodeFault(regs*, void*)+0x5b8>
c0014cfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cfd:	8a 00                	mov    al,BYTE PTR [eax]
c0014cff:	3c 0f                	cmp    al,0xf
c0014d01:	0f 85 76 01 00 00    	jne    c0014e7d <opcodeFault(regs*, void*)+0x52a>
c0014d07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d0a:	40                   	inc    eax
c0014d0b:	8a 00                	mov    al,BYTE PTR [eax]
c0014d0d:	3c c7                	cmp    al,0xc7
c0014d0f:	0f 85 68 01 00 00    	jne    c0014e7d <opcodeFault(regs*, void*)+0x52a>
c0014d15:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d1b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d1e:	8d 50 01             	lea    edx,[eax+0x1]
c0014d21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d24:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d27:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014d2a:	50                   	push   eax
c0014d2b:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014d2e:	50                   	push   eax
c0014d2f:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014d32:	50                   	push   eax
c0014d33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d36:	e8 95 42 00 00       	call   c0018fd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d3b:	83 c4 10             	add    esp,0x10
c0014d3e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014d41:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014d44:	83 f0 01             	xor    eax,0x1
c0014d47:	84 c0                	test   al,al
c0014d49:	0f 84 2e 01 00 00    	je     c0014e7d <opcodeFault(regs*, void*)+0x52a>
c0014d4f:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014d52:	3c 01                	cmp    al,0x1
c0014d54:	0f 85 23 01 00 00    	jne    c0014e7d <opcodeFault(regs*, void*)+0x52a>
c0014d5a:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014d5d:	83 f0 01             	xor    eax,0x1
c0014d60:	84 c0                	test   al,al
c0014d62:	0f 84 15 01 00 00    	je     c0014e7d <opcodeFault(regs*, void*)+0x52a>
c0014d68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d6e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d71:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014d78:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014d7b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014d7e:	89 c2                	mov    edx,eax
c0014d80:	b8 00 00 00 00       	mov    eax,0x0
c0014d85:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d88:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014d8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d91:	ba 00 00 00 00       	mov    edx,0x0
c0014d96:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014d99:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014d9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d9f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014da2:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014da5:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014dac:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014daf:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014db2:	89 c2                	mov    edx,eax
c0014db4:	b8 00 00 00 00       	mov    eax,0x0
c0014db9:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014dbc:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014dbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014dc5:	ba 00 00 00 00       	mov    edx,0x0
c0014dca:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014dcd:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014dd0:	e8 59 7e 00 00       	call   c001cc2e <lockScheduler()>
c0014dd5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014dd8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014ddb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ddd:	89 c1                	mov    ecx,eax
c0014ddf:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014de2:	89 cb                	mov    ebx,ecx
c0014de4:	89 d0                	mov    eax,edx
c0014de6:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014de9:	89 c6                	mov    esi,eax
c0014deb:	89 f0                	mov    eax,esi
c0014ded:	09 d8                	or     eax,ebx
c0014def:	85 c0                	test   eax,eax
c0014df1:	75 21                	jne    c0014e14 <opcodeFault(regs*, void*)+0x4c1>
c0014df3:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014df6:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014df9:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014dfc:	89 01                	mov    DWORD PTR [ecx],eax
c0014dfe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014e01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e04:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e07:	83 c8 40             	or     eax,0x40
c0014e0a:	89 c2                	mov    edx,eax
c0014e0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e0f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e12:	eb 3e                	jmp    c0014e52 <opcodeFault(regs*, void*)+0x4ff>
c0014e14:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014e17:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014e1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e1c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e1f:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e22:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014e25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e28:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e2b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e2e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e31:	89 d0                	mov    eax,edx
c0014e33:	31 d2                	xor    edx,edx
c0014e35:	89 c3                	mov    ebx,eax
c0014e37:	89 d6                	mov    esi,edx
c0014e39:	89 da                	mov    edx,ebx
c0014e3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e44:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e47:	83 e0 bf             	and    eax,0xffffffbf
c0014e4a:	89 c2                	mov    edx,eax
c0014e4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e4f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e52:	e8 d9 7d 00 00       	call   c001cc30 <unlockScheduler()>
c0014e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e5d:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014e60:	01 c2                	add    edx,eax
c0014e62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e65:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e68:	83 ec 0c             	sub    esp,0xc
c0014e6b:	68 2e 97 02 c0       	push   0xc002972e
c0014e70:	e8 10 d8 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0014e75:	83 c4 10             	add    esp,0x10
c0014e78:	e9 8e 00 00 00       	jmp    c0014f0b <opcodeFault(regs*, void*)+0x5b8>
c0014e7d:	83 ec 0c             	sub    esp,0xc
c0014e80:	68 41 97 02 c0       	push   0xc0029741
c0014e85:	e8 fb d7 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0014e8a:	83 c4 10             	add    esp,0x10
c0014e8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e90:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e96:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e99:	c1 e0 04             	shl    eax,0x4
c0014e9c:	01 d0                	add    eax,edx
c0014e9e:	83 c0 03             	add    eax,0x3
c0014ea1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ea3:	0f b6 d8             	movzx  ebx,al
c0014ea6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea9:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014eac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eaf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014eb2:	c1 e0 04             	shl    eax,0x4
c0014eb5:	01 d0                	add    eax,edx
c0014eb7:	83 c0 02             	add    eax,0x2
c0014eba:	8a 00                	mov    al,BYTE PTR [eax]
c0014ebc:	0f b6 c8             	movzx  ecx,al
c0014ebf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ec5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ecb:	c1 e0 04             	shl    eax,0x4
c0014ece:	01 d0                	add    eax,edx
c0014ed0:	40                   	inc    eax
c0014ed1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ed3:	0f b6 d0             	movzx  edx,al
c0014ed6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed9:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014edc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014edf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ee2:	c1 e0 04             	shl    eax,0x4
c0014ee5:	01 f0                	add    eax,esi
c0014ee7:	8a 00                	mov    al,BYTE PTR [eax]
c0014ee9:	0f b6 c0             	movzx  eax,al
c0014eec:	83 ec 0c             	sub    esp,0xc
c0014eef:	53                   	push   ebx
c0014ef0:	51                   	push   ecx
c0014ef1:	52                   	push   edx
c0014ef2:	50                   	push   eax
c0014ef3:	68 54 97 02 c0       	push   0xc0029754
c0014ef8:	e8 88 d7 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0014efd:	83 c4 20             	add    esp,0x20
c0014f00:	83 ec 0c             	sub    esp,0xc
c0014f03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f06:	e8 a5 f5 ff ff       	call   c00144b0 <displayDebugInfo(regs*)>
c0014f0b:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014f0e:	5b                   	pop    ebx
c0014f0f:	5e                   	pop    esi
c0014f10:	5d                   	pop    ebp
c0014f11:	c3                   	ret    

c0014f12 <displayProgramFault(char const*)>:
c0014f12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f17:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f1a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f20:	85 c0                	test   eax,eax
c0014f22:	74 15                	je     c0014f39 <displayProgramFault(char const*)+0x27>
c0014f24:	83 ec 0c             	sub    esp,0xc
c0014f27:	6a 04                	push   0x4
c0014f29:	6a 0f                	push   0xf
c0014f2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f2f:	50                   	push   eax
c0014f30:	e8 f3 b9 ff ff       	call   c0010928 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014f35:	83 c4 1c             	add    esp,0x1c
c0014f38:	c3                   	ret    
c0014f39:	c3                   	ret    

c0014f3a <setupInterruptController()>:
c0014f3a:	55                   	push   ebp
c0014f3b:	89 e5                	mov    ebp,esp
c0014f3d:	53                   	push   ebx
c0014f3e:	83 ec 24             	sub    esp,0x24
c0014f41:	b8 00 00 00 00       	mov    eax,0x0
c0014f46:	85 c0                	test   eax,eax
c0014f48:	0f 95 c0             	setne  al
c0014f4b:	84 c0                	test   al,al
c0014f4d:	74 5b                	je     c0014faa <setupInterruptController()+0x70>
c0014f4f:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0014f56:	83 ec 0c             	sub    esp,0xc
c0014f59:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0014f5c:	e8 73 a5 ff ff       	call   c000f4d4 <malloc>
c0014f61:	83 c4 10             	add    esp,0x10
c0014f64:	89 c3                	mov    ebx,eax
c0014f66:	83 ec 0c             	sub    esp,0xc
c0014f69:	53                   	push   ebx
c0014f6a:	e8 c3 f2 00 00       	call   c0024232 <APIC::APIC()>
c0014f6f:	83 c4 10             	add    esp,0x10
c0014f72:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014f75:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014f78:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014f7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f7d:	83 c0 08             	add    eax,0x8
c0014f80:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f82:	6a 00                	push   0x0
c0014f84:	6a 00                	push   0x0
c0014f86:	6a 00                	push   0x0
c0014f88:	52                   	push   edx
c0014f89:	ff d0                	call   eax
c0014f8b:	83 c4 10             	add    esp,0x10
c0014f8e:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0014f93:	83 ec 08             	sub    esp,0x8
c0014f96:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014f99:	50                   	push   eax
c0014f9a:	e8 d5 ea ff ff       	call   c0013a74 <Device::addChild(Device*)>
c0014f9f:	83 c4 10             	add    esp,0x10
c0014fa2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014fa5:	e9 52 03 00 00       	jmp    c00152fc <setupInterruptController()+0x3c2>
c0014faa:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0014faf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014fb5:	83 e0 01             	and    eax,0x1
c0014fb8:	84 c0                	test   al,al
c0014fba:	0f 95 c0             	setne  al
c0014fbd:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014fc0:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0014fc7:	83 ec 0c             	sub    esp,0xc
c0014fca:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014fcd:	e8 02 a5 ff ff       	call   c000f4d4 <malloc>
c0014fd2:	83 c4 10             	add    esp,0x10
c0014fd5:	89 c3                	mov    ebx,eax
c0014fd7:	83 ec 0c             	sub    esp,0xc
c0014fda:	53                   	push   ebx
c0014fdb:	e8 aa f7 00 00       	call   c002478a <PIC::PIC()>
c0014fe0:	83 c4 10             	add    esp,0x10
c0014fe3:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014fe6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014fe9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fec:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fee:	83 c0 08             	add    eax,0x8
c0014ff1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ff3:	6a 00                	push   0x0
c0014ff5:	6a 00                	push   0x0
c0014ff7:	6a 00                	push   0x0
c0014ff9:	52                   	push   edx
c0014ffa:	ff d0                	call   eax
c0014ffc:	83 c4 10             	add    esp,0x10
c0014fff:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015003:	74 73                	je     c0015078 <setupInterruptController()+0x13e>
c0015005:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015008:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001500b:	8b 00                	mov    eax,DWORD PTR [eax]
c001500d:	83 c0 0c             	add    eax,0xc
c0015010:	8b 00                	mov    eax,DWORD PTR [eax]
c0015012:	6a 00                	push   0x0
c0015014:	6a 00                	push   0x0
c0015016:	6a 00                	push   0x0
c0015018:	52                   	push   edx
c0015019:	ff d0                	call   eax
c001501b:	83 c4 10             	add    esp,0x10
c001501e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015022:	74 15                	je     c0015039 <setupInterruptController()+0xff>
c0015024:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015027:	8b 00                	mov    eax,DWORD PTR [eax]
c0015029:	83 c0 04             	add    eax,0x4
c001502c:	8b 00                	mov    eax,DWORD PTR [eax]
c001502e:	83 ec 0c             	sub    esp,0xc
c0015031:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015034:	ff d0                	call   eax
c0015036:	83 c4 10             	add    esp,0x10
c0015039:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015040:	83 ec 0c             	sub    esp,0xc
c0015043:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015046:	e8 89 a4 ff ff       	call   c000f4d4 <malloc>
c001504b:	83 c4 10             	add    esp,0x10
c001504e:	89 c3                	mov    ebx,eax
c0015050:	83 ec 0c             	sub    esp,0xc
c0015053:	53                   	push   ebx
c0015054:	e8 d9 f1 00 00       	call   c0024232 <APIC::APIC()>
c0015059:	83 c4 10             	add    esp,0x10
c001505c:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001505f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015062:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015065:	8b 00                	mov    eax,DWORD PTR [eax]
c0015067:	83 c0 08             	add    eax,0x8
c001506a:	8b 00                	mov    eax,DWORD PTR [eax]
c001506c:	6a 00                	push   0x0
c001506e:	6a 00                	push   0x0
c0015070:	6a 00                	push   0x0
c0015072:	52                   	push   edx
c0015073:	ff d0                	call   eax
c0015075:	83 c4 10             	add    esp,0x10
c0015078:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001507d:	83 ec 08             	sub    esp,0x8
c0015080:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015083:	50                   	push   eax
c0015084:	e8 eb e9 ff ff       	call   c0013a74 <Device::addChild(Device*)>
c0015089:	83 c4 10             	add    esp,0x10
c001508c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001508f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015091:	83 c0 24             	add    eax,0x24
c0015094:	8b 00                	mov    eax,DWORD PTR [eax]
c0015096:	6a 00                	push   0x0
c0015098:	68 34 49 01 c0       	push   0xc0014934
c001509d:	6a 00                	push   0x0
c001509f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150a2:	ff d0                	call   eax
c00150a4:	83 c4 10             	add    esp,0x10
c00150a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ac:	83 c0 24             	add    eax,0x24
c00150af:	8b 00                	mov    eax,DWORD PTR [eax]
c00150b1:	6a 00                	push   0x0
c00150b3:	68 34 49 01 c0       	push   0xc0014934
c00150b8:	6a 01                	push   0x1
c00150ba:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150bd:	ff d0                	call   eax
c00150bf:	83 c4 10             	add    esp,0x10
c00150c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00150c7:	83 c0 24             	add    eax,0x24
c00150ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00150cc:	6a 00                	push   0x0
c00150ce:	68 0d 43 01 c0       	push   0xc001430d
c00150d3:	6a 02                	push   0x2
c00150d5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150d8:	ff d0                	call   eax
c00150da:	83 c4 10             	add    esp,0x10
c00150dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00150e2:	83 c0 24             	add    eax,0x24
c00150e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00150e7:	6a 00                	push   0x0
c00150e9:	68 34 49 01 c0       	push   0xc0014934
c00150ee:	6a 03                	push   0x3
c00150f0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150f3:	ff d0                	call   eax
c00150f5:	83 c4 10             	add    esp,0x10
c00150f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00150fd:	83 c0 24             	add    eax,0x24
c0015100:	8b 00                	mov    eax,DWORD PTR [eax]
c0015102:	6a 00                	push   0x0
c0015104:	68 34 49 01 c0       	push   0xc0014934
c0015109:	6a 04                	push   0x4
c001510b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001510e:	ff d0                	call   eax
c0015110:	83 c4 10             	add    esp,0x10
c0015113:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015116:	8b 00                	mov    eax,DWORD PTR [eax]
c0015118:	83 c0 24             	add    eax,0x24
c001511b:	8b 00                	mov    eax,DWORD PTR [eax]
c001511d:	6a 00                	push   0x0
c001511f:	68 34 49 01 c0       	push   0xc0014934
c0015124:	6a 05                	push   0x5
c0015126:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015129:	ff d0                	call   eax
c001512b:	83 c4 10             	add    esp,0x10
c001512e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015131:	8b 00                	mov    eax,DWORD PTR [eax]
c0015133:	83 c0 24             	add    eax,0x24
c0015136:	8b 00                	mov    eax,DWORD PTR [eax]
c0015138:	6a 00                	push   0x0
c001513a:	68 53 49 01 c0       	push   0xc0014953
c001513f:	6a 06                	push   0x6
c0015141:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015144:	ff d0                	call   eax
c0015146:	83 c4 10             	add    esp,0x10
c0015149:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001514c:	8b 00                	mov    eax,DWORD PTR [eax]
c001514e:	83 c0 24             	add    eax,0x24
c0015151:	8b 00                	mov    eax,DWORD PTR [eax]
c0015153:	6a 00                	push   0x0
c0015155:	68 b5 48 01 c0       	push   0xc00148b5
c001515a:	6a 07                	push   0x7
c001515c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001515f:	ff d0                	call   eax
c0015161:	83 c4 10             	add    esp,0x10
c0015164:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015167:	8b 00                	mov    eax,DWORD PTR [eax]
c0015169:	83 c0 24             	add    eax,0x24
c001516c:	8b 00                	mov    eax,DWORD PTR [eax]
c001516e:	6a 00                	push   0x0
c0015170:	68 28 41 01 c0       	push   0xc0014128
c0015175:	6a 08                	push   0x8
c0015177:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001517a:	ff d0                	call   eax
c001517c:	83 c4 10             	add    esp,0x10
c001517f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015182:	8b 00                	mov    eax,DWORD PTR [eax]
c0015184:	83 c0 24             	add    eax,0x24
c0015187:	8b 00                	mov    eax,DWORD PTR [eax]
c0015189:	6a 00                	push   0x0
c001518b:	68 34 49 01 c0       	push   0xc0014934
c0015190:	6a 09                	push   0x9
c0015192:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015195:	ff d0                	call   eax
c0015197:	83 c4 10             	add    esp,0x10
c001519a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001519d:	8b 00                	mov    eax,DWORD PTR [eax]
c001519f:	83 c0 24             	add    eax,0x24
c00151a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a4:	6a 00                	push   0x0
c00151a6:	68 34 49 01 c0       	push   0xc0014934
c00151ab:	6a 0a                	push   0xa
c00151ad:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151b0:	ff d0                	call   eax
c00151b2:	83 c4 10             	add    esp,0x10
c00151b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ba:	83 c0 24             	add    eax,0x24
c00151bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00151bf:	6a 00                	push   0x0
c00151c1:	68 34 49 01 c0       	push   0xc0014934
c00151c6:	6a 0b                	push   0xb
c00151c8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151cb:	ff d0                	call   eax
c00151cd:	83 c4 10             	add    esp,0x10
c00151d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d5:	83 c0 24             	add    eax,0x24
c00151d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00151da:	6a 00                	push   0x0
c00151dc:	68 34 49 01 c0       	push   0xc0014934
c00151e1:	6a 0c                	push   0xc
c00151e3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151e6:	ff d0                	call   eax
c00151e8:	83 c4 10             	add    esp,0x10
c00151eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f0:	83 c0 24             	add    eax,0x24
c00151f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f5:	6a 00                	push   0x0
c00151f7:	68 e4 48 01 c0       	push   0xc00148e4
c00151fc:	6a 0d                	push   0xd
c00151fe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015201:	ff d0                	call   eax
c0015203:	83 c4 10             	add    esp,0x10
c0015206:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015209:	8b 00                	mov    eax,DWORD PTR [eax]
c001520b:	83 c0 24             	add    eax,0x24
c001520e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015210:	6a 00                	push   0x0
c0015212:	68 1d 49 01 c0       	push   0xc001491d
c0015217:	6a 0e                	push   0xe
c0015219:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001521c:	ff d0                	call   eax
c001521e:	83 c4 10             	add    esp,0x10
c0015221:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015224:	8b 00                	mov    eax,DWORD PTR [eax]
c0015226:	83 c0 24             	add    eax,0x24
c0015229:	8b 00                	mov    eax,DWORD PTR [eax]
c001522b:	6a 00                	push   0x0
c001522d:	68 34 49 01 c0       	push   0xc0014934
c0015232:	6a 0f                	push   0xf
c0015234:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015237:	ff d0                	call   eax
c0015239:	83 c4 10             	add    esp,0x10
c001523c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001523f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015241:	83 c0 24             	add    eax,0x24
c0015244:	8b 00                	mov    eax,DWORD PTR [eax]
c0015246:	6a 00                	push   0x0
c0015248:	68 34 49 01 c0       	push   0xc0014934
c001524d:	6a 10                	push   0x10
c001524f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015252:	ff d0                	call   eax
c0015254:	83 c4 10             	add    esp,0x10
c0015257:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001525a:	8b 00                	mov    eax,DWORD PTR [eax]
c001525c:	83 c0 24             	add    eax,0x24
c001525f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015261:	6a 00                	push   0x0
c0015263:	68 34 49 01 c0       	push   0xc0014934
c0015268:	6a 11                	push   0x11
c001526a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001526d:	ff d0                	call   eax
c001526f:	83 c4 10             	add    esp,0x10
c0015272:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015275:	8b 00                	mov    eax,DWORD PTR [eax]
c0015277:	83 c0 24             	add    eax,0x24
c001527a:	8b 00                	mov    eax,DWORD PTR [eax]
c001527c:	6a 00                	push   0x0
c001527e:	68 34 49 01 c0       	push   0xc0014934
c0015283:	6a 12                	push   0x12
c0015285:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015288:	ff d0                	call   eax
c001528a:	83 c4 10             	add    esp,0x10
c001528d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015290:	8b 00                	mov    eax,DWORD PTR [eax]
c0015292:	83 c0 24             	add    eax,0x24
c0015295:	8b 00                	mov    eax,DWORD PTR [eax]
c0015297:	6a 00                	push   0x0
c0015299:	68 34 49 01 c0       	push   0xc0014934
c001529e:	6a 13                	push   0x13
c00152a0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152a3:	ff d0                	call   eax
c00152a5:	83 c4 10             	add    esp,0x10
c00152a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ad:	83 c0 24             	add    eax,0x24
c00152b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b2:	6a 00                	push   0x0
c00152b4:	68 34 49 01 c0       	push   0xc0014934
c00152b9:	6a 14                	push   0x14
c00152bb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152be:	ff d0                	call   eax
c00152c0:	83 c4 10             	add    esp,0x10
c00152c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c8:	83 c0 24             	add    eax,0x24
c00152cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00152cd:	6a 00                	push   0x0
c00152cf:	68 34 49 01 c0       	push   0xc0014934
c00152d4:	6a 1e                	push   0x1e
c00152d6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152d9:	ff d0                	call   eax
c00152db:	83 c4 10             	add    esp,0x10
c00152de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e3:	83 c0 24             	add    eax,0x24
c00152e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e8:	6a 00                	push   0x0
c00152ea:	68 c3 b5 01 c0       	push   0xc001b5c3
c00152ef:	6a 60                	push   0x60
c00152f1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152f4:	ff d0                	call   eax
c00152f6:	83 c4 10             	add    esp,0x10
c00152f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152fc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00152ff:	c9                   	leave  
c0015300:	c3                   	ret    
c0015301:	90                   	nop

c0015302 <InterruptController::convertLegacyIRQNumber(int)>:
c0015302:	55                   	push   ebp
c0015303:	89 e5                	mov    ebp,esp
c0015305:	83 ec 08             	sub    esp,0x8
c0015308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001530b:	83 ec 0c             	sub    esp,0xc
c001530e:	50                   	push   eax
c001530f:	e8 4c ea ff ff       	call   c0013d60 <Device::getName()>
c0015314:	83 c4 10             	add    esp,0x10
c0015317:	8a 00                	mov    al,BYTE PTR [eax]
c0015319:	3c 41                	cmp    al,0x41
c001531b:	0f 94 c0             	sete   al
c001531e:	84 c0                	test   al,al
c0015320:	74 28                	je     c001534a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015322:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015326:	7f 12                	jg     c001533a <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015328:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001532b:	05 a0 ba 02 c0       	add    eax,0xc002baa0
c0015330:	8a 00                	mov    al,BYTE PTR [eax]
c0015332:	0f b6 c0             	movzx  eax,al
c0015335:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015338:	eb 10                	jmp    c001534a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001533a:	83 ec 0c             	sub    esp,0xc
c001533d:	68 d4 94 02 c0       	push   0xc00294d4
c0015342:	e8 58 44 00 00       	call   c001979f <Krnl::panic(char const*)>
c0015347:	83 c4 10             	add    esp,0x10
c001534a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001534d:	c9                   	leave  
c001534e:	c3                   	ret    
c001534f:	90                   	nop

c0015350 <startGUI(void*)>:
c0015350:	55                   	push   ebp
c0015351:	89 e5                	mov    ebp,esp
c0015353:	53                   	push   ebx
c0015354:	83 ec 04             	sub    esp,0x4
c0015357:	e8 d4 78 00 00       	call   c001cc30 <unlockScheduler()>
c001535c:	8b 1d 48 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c848
c0015362:	83 ec 08             	sub    esp,0x8
c0015365:	6a 01                	push   0x1
c0015367:	68 bc 97 02 c0       	push   0xc00297bc
c001536c:	e8 49 72 00 00       	call   c001c5ba <Thr::loadDLL(char const*, bool)>
c0015371:	83 c4 10             	add    esp,0x10
c0015374:	83 ec 08             	sub    esp,0x8
c0015377:	53                   	push   ebx
c0015378:	50                   	push   eax
c0015379:	e8 4b 74 00 00       	call   c001c7c9 <Thr::executeDLL(unsigned long, void*)>
c001537e:	83 c4 10             	add    esp,0x10
c0015381:	8b 1d 48 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c848
c0015387:	83 ec 08             	sub    esp,0x8
c001538a:	6a 01                	push   0x1
c001538c:	68 d6 97 02 c0       	push   0xc00297d6
c0015391:	e8 24 72 00 00       	call   c001c5ba <Thr::loadDLL(char const*, bool)>
c0015396:	83 c4 10             	add    esp,0x10
c0015399:	83 ec 08             	sub    esp,0x8
c001539c:	53                   	push   ebx
c001539d:	50                   	push   eax
c001539e:	e8 26 74 00 00       	call   c001c7c9 <Thr::executeDLL(unsigned long, void*)>
c00153a3:	83 c4 10             	add    esp,0x10
c00153a6:	90                   	nop
c00153a7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00153aa:	c9                   	leave  
c00153ab:	c3                   	ret    

c00153ac <startGUIVESA(void*)>:
c00153ac:	55                   	push   ebp
c00153ad:	89 e5                	mov    ebp,esp
c00153af:	53                   	push   ebx
c00153b0:	83 ec 04             	sub    esp,0x4
c00153b3:	e8 78 78 00 00       	call   c001cc30 <unlockScheduler()>
c00153b8:	8b 1d 48 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c848
c00153be:	83 ec 08             	sub    esp,0x8
c00153c1:	6a 01                	push   0x1
c00153c3:	68 f0 97 02 c0       	push   0xc00297f0
c00153c8:	e8 ed 71 00 00       	call   c001c5ba <Thr::loadDLL(char const*, bool)>
c00153cd:	83 c4 10             	add    esp,0x10
c00153d0:	83 ec 08             	sub    esp,0x8
c00153d3:	53                   	push   ebx
c00153d4:	50                   	push   eax
c00153d5:	e8 ef 73 00 00       	call   c001c7c9 <Thr::executeDLL(unsigned long, void*)>
c00153da:	83 c4 10             	add    esp,0x10
c00153dd:	8b 1d 48 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c848
c00153e3:	83 ec 08             	sub    esp,0x8
c00153e6:	6a 01                	push   0x1
c00153e8:	68 d6 97 02 c0       	push   0xc00297d6
c00153ed:	e8 c8 71 00 00       	call   c001c5ba <Thr::loadDLL(char const*, bool)>
c00153f2:	83 c4 10             	add    esp,0x10
c00153f5:	83 ec 08             	sub    esp,0x8
c00153f8:	53                   	push   ebx
c00153f9:	50                   	push   eax
c00153fa:	e8 ca 73 00 00       	call   c001c7c9 <Thr::executeDLL(unsigned long, void*)>
c00153ff:	83 c4 10             	add    esp,0x10
c0015402:	90                   	nop
c0015403:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015406:	c9                   	leave  
c0015407:	c3                   	ret    

c0015408 <sendKeyToTerminal(unsigned char)>:
c0015408:	55                   	push   ebp
c0015409:	89 e5                	mov    ebp,esp
c001540b:	83 ec 28             	sub    esp,0x28
c001540e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015411:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015414:	a1 24 c9 02 c0       	mov    eax,ds:0xc002c924
c0015419:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001541d:	83 ec 08             	sub    esp,0x8
c0015420:	52                   	push   edx
c0015421:	50                   	push   eax
c0015422:	e8 3d ba ff ff       	call   c0010e64 <VgaText::receiveKey(unsigned char)>
c0015427:	83 c4 10             	add    esp,0x10
c001542a:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001542e:	75 41                	jne    c0015471 <sendKeyToTerminal(unsigned char)+0x69>
c0015430:	e8 20 78 00 00       	call   c001cc55 <lockStuff()>
c0015435:	a1 00 ca 02 c0       	mov    eax,ds:0xc002ca00
c001543a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001543d:	c7 05 00 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca00,0x0
c0015447:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001544b:	74 1f                	je     c001546c <sendKeyToTerminal(unsigned char)+0x64>
c001544d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015450:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015453:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015456:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015459:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001545c:	83 ec 0c             	sub    esp,0xc
c001545f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015462:	e8 df 7d 00 00       	call   c001d246 <unblockTask(ThreadControlBlock*)>
c0015467:	83 c4 10             	add    esp,0x10
c001546a:	eb db                	jmp    c0015447 <sendKeyToTerminal(unsigned char)+0x3f>
c001546c:	e8 7e 7b 00 00       	call   c001cfef <unlockStuff()>
c0015471:	90                   	nop
c0015472:	c9                   	leave  
c0015473:	c3                   	ret    

c0015474 <sendKeyboardToken(KeyboardToken)>:
c0015474:	55                   	push   ebp
c0015475:	89 e5                	mov    ebp,esp
c0015477:	83 ec 18             	sub    esp,0x18
c001547a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001547d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015480:	0f b7 c0             	movzx  eax,ax
c0015483:	83 f2 01             	xor    edx,0x1
c0015486:	88 90 20 ca 02 c0    	mov    BYTE PTR [eax-0x3ffd35e0],dl
c001548c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001548f:	66 3d 03 02          	cmp    ax,0x203
c0015493:	75 07                	jne    c001549c <sendKeyboardToken(KeyboardToken)+0x28>
c0015495:	a0 20 cb 02 c0       	mov    al,ds:0xc002cb20
c001549a:	84 c0                	test   al,al
c001549c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00154a0:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00154a3:	a0 28 ce 02 c0       	mov    al,ds:0xc002ce28
c00154a8:	38 c2                	cmp    dl,al
c00154aa:	74 1c                	je     c00154c8 <sendKeyboardToken(KeyboardToken)+0x54>
c00154ac:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00154af:	a2 28 ce 02 c0       	mov    ds:0xc002ce28,al
c00154b4:	a0 28 ce 02 c0       	mov    al,ds:0xc002ce28
c00154b9:	0f b6 c0             	movzx  eax,al
c00154bc:	83 ec 0c             	sub    esp,0xc
c00154bf:	50                   	push   eax
c00154c0:	e8 57 ab ff ff       	call   c001001c <setTerminalScrollLock(bool)>
c00154c5:	83 c4 10             	add    esp,0x10
c00154c8:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00154cb:	84 c0                	test   al,al
c00154cd:	0f 84 ae 00 00 00    	je     c0015581 <sendKeyboardToken(KeyboardToken)+0x10d>
c00154d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d6:	66 3d 10 03          	cmp    ax,0x310
c00154da:	75 06                	jne    c00154e2 <sendKeyboardToken(KeyboardToken)+0x6e>
c00154dc:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00154e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e5:	66 3d 11 03          	cmp    ax,0x311
c00154e9:	75 06                	jne    c00154f1 <sendKeyboardToken(KeyboardToken)+0x7d>
c00154eb:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00154f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f4:	66 3d 12 03          	cmp    ax,0x312
c00154f8:	75 06                	jne    c0015500 <sendKeyboardToken(KeyboardToken)+0x8c>
c00154fa:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015500:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015503:	66 3d 13 03          	cmp    ax,0x313
c0015507:	75 06                	jne    c001550f <sendKeyboardToken(KeyboardToken)+0x9b>
c0015509:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001550f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015512:	66 3d 14 03          	cmp    ax,0x314
c0015516:	75 06                	jne    c001551e <sendKeyboardToken(KeyboardToken)+0xaa>
c0015518:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001551e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015521:	66 3d 15 03          	cmp    ax,0x315
c0015525:	75 06                	jne    c001552d <sendKeyboardToken(KeyboardToken)+0xb9>
c0015527:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001552d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015530:	66 3d 16 03          	cmp    ax,0x316
c0015534:	75 06                	jne    c001553c <sendKeyboardToken(KeyboardToken)+0xc8>
c0015536:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001553c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001553f:	66 3d 17 03          	cmp    ax,0x317
c0015543:	75 06                	jne    c001554b <sendKeyboardToken(KeyboardToken)+0xd7>
c0015545:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001554b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554e:	66 3d 18 03          	cmp    ax,0x318
c0015552:	75 06                	jne    c001555a <sendKeyboardToken(KeyboardToken)+0xe6>
c0015554:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001555a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555d:	66 3d 19 03          	cmp    ax,0x319
c0015561:	75 06                	jne    c0015569 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015563:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556c:	66 3d 1a 03          	cmp    ax,0x31a
c0015570:	0f 85 c9 00 00 00    	jne    c001563f <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015576:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001557c:	e9 be 00 00 00       	jmp    c001563f <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015584:	66 3d 10 03          	cmp    ax,0x310
c0015588:	75 0a                	jne    c0015594 <sendKeyboardToken(KeyboardToken)+0x120>
c001558a:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015590:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015597:	66 3d 11 03          	cmp    ax,0x311
c001559b:	75 0a                	jne    c00155a7 <sendKeyboardToken(KeyboardToken)+0x133>
c001559d:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00155a3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155aa:	66 3d 12 03          	cmp    ax,0x312
c00155ae:	75 0a                	jne    c00155ba <sendKeyboardToken(KeyboardToken)+0x146>
c00155b0:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00155b6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155bd:	66 3d 13 03          	cmp    ax,0x313
c00155c1:	75 0a                	jne    c00155cd <sendKeyboardToken(KeyboardToken)+0x159>
c00155c3:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00155c9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d0:	66 3d 14 03          	cmp    ax,0x314
c00155d4:	75 0a                	jne    c00155e0 <sendKeyboardToken(KeyboardToken)+0x16c>
c00155d6:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00155dc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e3:	66 3d 15 03          	cmp    ax,0x315
c00155e7:	75 0a                	jne    c00155f3 <sendKeyboardToken(KeyboardToken)+0x17f>
c00155e9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00155ef:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f6:	66 3d 16 03          	cmp    ax,0x316
c00155fa:	75 0a                	jne    c0015606 <sendKeyboardToken(KeyboardToken)+0x192>
c00155fc:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015602:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015606:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015609:	66 3d 17 03          	cmp    ax,0x317
c001560d:	75 0a                	jne    c0015619 <sendKeyboardToken(KeyboardToken)+0x1a5>
c001560f:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015615:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561c:	66 3d 18 03          	cmp    ax,0x318
c0015620:	75 0a                	jne    c001562c <sendKeyboardToken(KeyboardToken)+0x1b8>
c0015622:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015628:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001562c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562f:	66 3d 19 03          	cmp    ax,0x319
c0015633:	75 0a                	jne    c001563f <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015635:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001563b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001563f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015642:	66 3d 00 02          	cmp    ax,0x200
c0015646:	75 2c                	jne    c0015674 <sendKeyboardToken(KeyboardToken)+0x200>
c0015648:	a0 20 ce 02 c0       	mov    al,ds:0xc002ce20
c001564d:	83 f0 01             	xor    eax,0x1
c0015650:	84 c0                	test   al,al
c0015652:	74 20                	je     c0015674 <sendKeyboardToken(KeyboardToken)+0x200>
c0015654:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0015659:	6a 01                	push   0x1
c001565b:	6a 00                	push   0x0
c001565d:	68 50 53 01 c0       	push   0xc0015350
c0015662:	50                   	push   eax
c0015663:	e8 f8 76 00 00       	call   c001cd60 <Process::createThread(void (*)(void*), void*, int)>
c0015668:	83 c4 10             	add    esp,0x10
c001566b:	c6 05 20 ce 02 c0 01 	mov    BYTE PTR ds:0xc002ce20,0x1
c0015672:	eb 33                	jmp    c00156a7 <sendKeyboardToken(KeyboardToken)+0x233>
c0015674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015677:	66 3d 01 02          	cmp    ax,0x201
c001567b:	75 2a                	jne    c00156a7 <sendKeyboardToken(KeyboardToken)+0x233>
c001567d:	a0 20 ce 02 c0       	mov    al,ds:0xc002ce20
c0015682:	83 f0 01             	xor    eax,0x1
c0015685:	84 c0                	test   al,al
c0015687:	74 1e                	je     c00156a7 <sendKeyboardToken(KeyboardToken)+0x233>
c0015689:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001568e:	6a 01                	push   0x1
c0015690:	6a 00                	push   0x0
c0015692:	68 ac 53 01 c0       	push   0xc00153ac
c0015697:	50                   	push   eax
c0015698:	e8 c3 76 00 00       	call   c001cd60 <Process::createThread(void (*)(void*), void*, int)>
c001569d:	83 c4 10             	add    esp,0x10
c00156a0:	c6 05 20 ce 02 c0 01 	mov    BYTE PTR ds:0xc002ce20,0x1
c00156a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156aa:	66 3d 1d 03          	cmp    ax,0x31d
c00156ae:	75 06                	jne    c00156b6 <sendKeyboardToken(KeyboardToken)+0x242>
c00156b0:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00156b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b9:	66 3d 1c 03          	cmp    ax,0x31c
c00156bd:	75 06                	jne    c00156c5 <sendKeyboardToken(KeyboardToken)+0x251>
c00156bf:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00156c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c8:	66 3d 1b 03          	cmp    ax,0x31b
c00156cc:	75 06                	jne    c00156d4 <sendKeyboardToken(KeyboardToken)+0x260>
c00156ce:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00156d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d7:	66 3d 1e 03          	cmp    ax,0x31e
c00156db:	75 06                	jne    c00156e3 <sendKeyboardToken(KeyboardToken)+0x26f>
c00156dd:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00156e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e6:	66 3d 1f 03          	cmp    ax,0x31f
c00156ea:	75 06                	jne    c00156f2 <sendKeyboardToken(KeyboardToken)+0x27e>
c00156ec:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00156f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f5:	66 3d 1a 03          	cmp    ax,0x31a
c00156f9:	75 06                	jne    c0015701 <sendKeyboardToken(KeyboardToken)+0x28d>
c00156fb:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015701:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015705:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015708:	83 f0 01             	xor    eax,0x1
c001570b:	84 c0                	test   al,al
c001570d:	74 77                	je     c0015786 <sendKeyboardToken(KeyboardToken)+0x312>
c001570f:	a0 21 cb 02 c0       	mov    al,ds:0xc002cb21
c0015714:	84 c0                	test   al,al
c0015716:	74 41                	je     c0015759 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0015718:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001571c:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015720:	74 2b                	je     c001574d <sendKeyboardToken(KeyboardToken)+0x2d9>
c0015722:	8b 15 24 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002ce24
c0015728:	89 d0                	mov    eax,edx
c001572a:	c1 e0 02             	shl    eax,0x2
c001572d:	01 d0                	add    eax,edx
c001572f:	01 c0                	add    eax,eax
c0015731:	a3 24 ce 02 c0       	mov    ds:0xc002ce24,eax
c0015736:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015739:	0f b7 c0             	movzx  eax,ax
c001573c:	8d 50 d0             	lea    edx,[eax-0x30]
c001573f:	a1 24 ce 02 c0       	mov    eax,ds:0xc002ce24
c0015744:	01 d0                	add    eax,edx
c0015746:	a3 24 ce 02 c0       	mov    ds:0xc002ce24,eax
c001574b:	eb 6d                	jmp    c00157ba <sendKeyboardToken(KeyboardToken)+0x346>
c001574d:	c7 05 24 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce24,0x0
c0015757:	eb 61                	jmp    c00157ba <sendKeyboardToken(KeyboardToken)+0x346>
c0015759:	a1 24 ce 02 c0       	mov    eax,ds:0xc002ce24
c001575e:	85 c0                	test   eax,eax
c0015760:	74 18                	je     c001577a <sendKeyboardToken(KeyboardToken)+0x306>
c0015762:	a1 24 ce 02 c0       	mov    eax,ds:0xc002ce24
c0015767:	0f b6 c0             	movzx  eax,al
c001576a:	83 ec 0c             	sub    esp,0xc
c001576d:	50                   	push   eax
c001576e:	e8 95 fc ff ff       	call   c0015408 <sendKeyToTerminal(unsigned char)>
c0015773:	83 c4 10             	add    esp,0x10
c0015776:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001577a:	c7 05 24 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce24,0x0
c0015784:	eb 34                	jmp    c00157ba <sendKeyboardToken(KeyboardToken)+0x346>
c0015786:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015789:	66 3d 01 01          	cmp    ax,0x101
c001578d:	75 2b                	jne    c00157ba <sendKeyboardToken(KeyboardToken)+0x346>
c001578f:	a1 24 ce 02 c0       	mov    eax,ds:0xc002ce24
c0015794:	85 c0                	test   eax,eax
c0015796:	74 18                	je     c00157b0 <sendKeyboardToken(KeyboardToken)+0x33c>
c0015798:	a1 24 ce 02 c0       	mov    eax,ds:0xc002ce24
c001579d:	0f b6 c0             	movzx  eax,al
c00157a0:	83 ec 0c             	sub    esp,0xc
c00157a3:	50                   	push   eax
c00157a4:	e8 5f fc ff ff       	call   c0015408 <sendKeyToTerminal(unsigned char)>
c00157a9:	83 c4 10             	add    esp,0x10
c00157ac:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00157b0:	c7 05 24 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce24,0x0
c00157ba:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00157bd:	83 f0 01             	xor    eax,0x1
c00157c0:	84 c0                	test   al,al
c00157c2:	74 4c                	je     c0015810 <sendKeyboardToken(KeyboardToken)+0x39c>
c00157c4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00157c7:	83 f0 01             	xor    eax,0x1
c00157ca:	84 c0                	test   al,al
c00157cc:	74 42                	je     c0015810 <sendKeyboardToken(KeyboardToken)+0x39c>
c00157ce:	a0 20 cb 02 c0       	mov    al,ds:0xc002cb20
c00157d3:	83 f0 01             	xor    eax,0x1
c00157d6:	84 c0                	test   al,al
c00157d8:	74 36                	je     c0015810 <sendKeyboardToken(KeyboardToken)+0x39c>
c00157da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157dd:	66 83 f8 1f          	cmp    ax,0x1f
c00157e1:	76 09                	jbe    c00157ec <sendKeyboardToken(KeyboardToken)+0x378>
c00157e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e6:	66 83 f8 7e          	cmp    ax,0x7e
c00157ea:	76 12                	jbe    c00157fe <sendKeyboardToken(KeyboardToken)+0x38a>
c00157ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ef:	66 83 f8 0a          	cmp    ax,0xa
c00157f3:	74 09                	je     c00157fe <sendKeyboardToken(KeyboardToken)+0x38a>
c00157f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f8:	66 83 f8 08          	cmp    ax,0x8
c00157fc:	75 12                	jne    c0015810 <sendKeyboardToken(KeyboardToken)+0x39c>
c00157fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015801:	0f b6 c0             	movzx  eax,al
c0015804:	83 ec 0c             	sub    esp,0xc
c0015807:	50                   	push   eax
c0015808:	e8 fb fb ff ff       	call   c0015408 <sendKeyToTerminal(unsigned char)>
c001580d:	83 c4 10             	add    esp,0x10
c0015810:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015813:	83 f0 01             	xor    eax,0x1
c0015816:	84 c0                	test   al,al
c0015818:	74 4f                	je     c0015869 <sendKeyboardToken(KeyboardToken)+0x3f5>
c001581a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001581d:	83 f0 01             	xor    eax,0x1
c0015820:	84 c0                	test   al,al
c0015822:	74 45                	je     c0015869 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015824:	a0 20 cb 02 c0       	mov    al,ds:0xc002cb20
c0015829:	84 c0                	test   al,al
c001582b:	74 3c                	je     c0015869 <sendKeyboardToken(KeyboardToken)+0x3f5>
c001582d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015830:	66 83 f8 3f          	cmp    ax,0x3f
c0015834:	76 33                	jbe    c0015869 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015839:	66 83 f8 7f          	cmp    ax,0x7f
c001583d:	77 2a                	ja     c0015869 <sendKeyboardToken(KeyboardToken)+0x3f5>
c001583f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015842:	88 c2                	mov    dl,al
c0015844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015847:	66 83 f8 5f          	cmp    ax,0x5f
c001584b:	76 04                	jbe    c0015851 <sendKeyboardToken(KeyboardToken)+0x3dd>
c001584d:	b0 20                	mov    al,0x20
c001584f:	eb 02                	jmp    c0015853 <sendKeyboardToken(KeyboardToken)+0x3df>
c0015851:	b0 00                	mov    al,0x0
c0015853:	29 c2                	sub    edx,eax
c0015855:	88 d0                	mov    al,dl
c0015857:	83 e8 40             	sub    eax,0x40
c001585a:	0f b6 c0             	movzx  eax,al
c001585d:	83 ec 0c             	sub    esp,0xc
c0015860:	50                   	push   eax
c0015861:	e8 a2 fb ff ff       	call   c0015408 <sendKeyToTerminal(unsigned char)>
c0015866:	83 c4 10             	add    esp,0x10
c0015869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586c:	66 3d 00 03          	cmp    ax,0x300
c0015870:	75 0f                	jne    c0015881 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015872:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015875:	83 f0 01             	xor    eax,0x1
c0015878:	84 c0                	test   al,al
c001587a:	74 05                	je     c0015881 <sendKeyboardToken(KeyboardToken)+0x40d>
c001587c:	e8 78 b0 ff ff       	call   c00108f9 <doTerminalCycle()>
c0015881:	90                   	nop
c0015882:	c9                   	leave  
c0015883:	c3                   	ret    

c0015884 <clearInternalKeybuffer(VgaText*)>:
c0015884:	55                   	push   ebp
c0015885:	89 e5                	mov    ebp,esp
c0015887:	83 ec 08             	sub    esp,0x8
c001588a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588d:	05 34 11 00 00       	add    eax,0x1134
c0015892:	83 ec 0c             	sub    esp,0xc
c0015895:	50                   	push   eax
c0015896:	e8 0d ae fe ff       	call   c00006a8 <strlen>
c001589b:	83 c4 10             	add    esp,0x10
c001589e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00158a1:	81 c2 34 11 00 00    	add    edx,0x1134
c00158a7:	83 ec 04             	sub    esp,0x4
c00158aa:	50                   	push   eax
c00158ab:	6a 00                	push   0x0
c00158ad:	52                   	push   edx
c00158ae:	e8 d8 ad fe ff       	call   c000068b <memset>
c00158b3:	83 c4 10             	add    esp,0x10
c00158b6:	90                   	nop
c00158b7:	c9                   	leave  
c00158b8:	c3                   	ret    

c00158b9 <readKeyboard(VgaText*, char*, unsigned long)>:
c00158b9:	55                   	push   ebp
c00158ba:	89 e5                	mov    ebp,esp
c00158bc:	83 ec 18             	sub    esp,0x18
c00158bf:	fb                   	sti    
c00158c0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00158c7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00158cb:	0f 84 8a 00 00 00    	je     c001595b <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00158d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d4:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00158da:	84 c0                	test   al,al
c00158dc:	75 11                	jne    c00158ef <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00158de:	e8 4b 73 00 00       	call   c001cc2e <lockScheduler()>
c00158e3:	e8 82 76 00 00       	call   c001cf6a <schedule()>
c00158e8:	e8 43 73 00 00       	call   c001cc30 <unlockScheduler()>
c00158ed:	eb e2                	jmp    c00158d1 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00158ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00158f2:	8d 50 01             	lea    edx,[eax+0x1]
c00158f5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00158f8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00158fb:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015901:	88 10                	mov    BYTE PTR [eax],dl
c0015903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015906:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001590c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001590f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015912:	05 34 11 00 00       	add    eax,0x1134
c0015917:	83 ec 0c             	sub    esp,0xc
c001591a:	50                   	push   eax
c001591b:	e8 88 ad fe ff       	call   c00006a8 <strlen>
c0015920:	83 c4 10             	add    esp,0x10
c0015923:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015926:	81 c2 34 11 00 00    	add    edx,0x1134
c001592c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001592f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015932:	81 c2 34 11 00 00    	add    edx,0x1134
c0015938:	83 ec 04             	sub    esp,0x4
c001593b:	50                   	push   eax
c001593c:	51                   	push   ecx
c001593d:	52                   	push   edx
c001593e:	e8 da ac fe ff       	call   c000061d <memmove>
c0015943:	83 c4 10             	add    esp,0x10
c0015946:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015949:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001594c:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015950:	0f 85 71 ff ff ff    	jne    c00158c7 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015956:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015959:	eb 03                	jmp    c001595e <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001595b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001595e:	c9                   	leave  
c001595f:	c3                   	ret    

c0015960 <Keyboard::Keyboard(char const*)>:
c0015960:	83 ec 0c             	sub    esp,0xc
c0015963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015967:	83 ec 08             	sub    esp,0x8
c001596a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001596e:	50                   	push   eax
c001596f:	e8 f0 e2 ff ff       	call   c0013c64 <Device::Device(char const*)>
c0015974:	83 c4 10             	add    esp,0x10
c0015977:	ba 14 98 02 c0       	mov    edx,0xc0029814
c001597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015980:	89 10                	mov    DWORD PTR [eax],edx
c0015982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015986:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015990:	c6 05 04 ca 02 c0 01 	mov    BYTE PTR ds:0xc002ca04,0x1
c0015997:	90                   	nop
c0015998:	83 c4 0c             	add    esp,0xc
c001599b:	c3                   	ret    

c001599c <Keyboard::~Keyboard()>:
c001599c:	83 ec 0c             	sub    esp,0xc
c001599f:	ba 14 98 02 c0       	mov    edx,0xc0029814
c00159a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159a8:	89 10                	mov    DWORD PTR [eax],edx
c00159aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159ae:	83 ec 0c             	sub    esp,0xc
c00159b1:	50                   	push   eax
c00159b2:	e8 8f df ff ff       	call   c0013946 <Device::~Device()>
c00159b7:	83 c4 10             	add    esp,0x10
c00159ba:	90                   	nop
c00159bb:	83 c4 0c             	add    esp,0xc
c00159be:	c3                   	ret    
c00159bf:	90                   	nop

c00159c0 <Keyboard::~Keyboard()>:
c00159c0:	83 ec 0c             	sub    esp,0xc
c00159c3:	83 ec 0c             	sub    esp,0xc
c00159c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159ca:	e8 cd ff ff ff       	call   c001599c <Keyboard::~Keyboard()>
c00159cf:	83 c4 10             	add    esp,0x10
c00159d2:	83 ec 08             	sub    esp,0x8
c00159d5:	68 5c 01 00 00       	push   0x15c
c00159da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159de:	e8 c2 cb ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c00159e3:	83 c4 10             	add    esp,0x10
c00159e6:	83 c4 0c             	add    esp,0xc
c00159e9:	c3                   	ret    

c00159ea <LogicalDisk::close(int, int, void*)>:
c00159ea:	83 c8 ff             	or     eax,0xffffffff
c00159ed:	c3                   	ret    

c00159ee <LogicalDisk::~LogicalDisk()>:
c00159ee:	83 ec 0c             	sub    esp,0xc
c00159f1:	ba c4 98 02 c0       	mov    edx,0xc00298c4
c00159f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159fa:	89 10                	mov    DWORD PTR [eax],edx
c00159fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a00:	83 ec 0c             	sub    esp,0xc
c0015a03:	50                   	push   eax
c0015a04:	e8 3d df ff ff       	call   c0013946 <Device::~Device()>
c0015a09:	83 c4 10             	add    esp,0x10
c0015a0c:	90                   	nop
c0015a0d:	83 c4 0c             	add    esp,0xc
c0015a10:	c3                   	ret    
c0015a11:	90                   	nop

c0015a12 <LogicalDisk::~LogicalDisk()>:
c0015a12:	83 ec 0c             	sub    esp,0xc
c0015a15:	83 ec 0c             	sub    esp,0xc
c0015a18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a1c:	e8 cd ff ff ff       	call   c00159ee <LogicalDisk::~LogicalDisk()>
c0015a21:	83 c4 10             	add    esp,0x10
c0015a24:	83 ec 08             	sub    esp,0x8
c0015a27:	68 74 01 00 00       	push   0x174
c0015a2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a30:	e8 70 cb ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0015a35:	83 c4 10             	add    esp,0x10
c0015a38:	83 c4 0c             	add    esp,0xc
c0015a3b:	c3                   	ret    

c0015a3c <LogicalDisk::open(int, int, void*)>:
c0015a3c:	83 ec 18             	sub    esp,0x18
c0015a3f:	68 40 98 02 c0       	push   0xc0029840
c0015a44:	e8 56 3d 00 00       	call   c001979f <Krnl::panic(char const*)>
c0015a49:	83 c8 ff             	or     eax,0xffffffff
c0015a4c:	83 c4 1c             	add    esp,0x1c
c0015a4f:	c3                   	ret    

c0015a50 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015a50:	53                   	push   ebx
c0015a51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015a55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015a59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015a5d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015a63:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015a69:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015a6f:	77 10                	ja     c0015a81 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015a71:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015a77:	89 d3                	mov    ebx,edx
c0015a79:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015a7f:	72 05                	jb     c0015a86 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015a81:	83 c8 ff             	or     eax,0xffffffff
c0015a84:	89 c2                	mov    edx,eax
c0015a86:	5b                   	pop    ebx
c0015a87:	c3                   	ret    

c0015a88 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015a88:	56                   	push   esi
c0015a89:	83 c8 ff             	or     eax,0xffffffff
c0015a8c:	53                   	push   ebx
c0015a8d:	89 c2                	mov    edx,eax
c0015a8f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015a93:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015a97:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015a9b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015aa1:	77 27                	ja     c0015aca <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015aa3:	89 d8                	mov    eax,ebx
c0015aa5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015aab:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015ab1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ab6:	89 c2                	mov    edx,eax
c0015ab8:	73 10                	jae    c0015aca <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015aba:	89 c8                	mov    eax,ecx
c0015abc:	89 da                	mov    edx,ebx
c0015abe:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015ac4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015aca:	5b                   	pop    ebx
c0015acb:	5e                   	pop    esi
c0015acc:	c3                   	ret    
c0015acd:	90                   	nop

c0015ace <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015ace:	83 ec 1c             	sub    esp,0x1c
c0015ad1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015ad5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015ad9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015add:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ae1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015ae5:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ae8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015aec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015af0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015af4:	83 ec 08             	sub    esp,0x8
c0015af7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015afb:	50                   	push   eax
c0015afc:	e8 63 e1 ff ff       	call   c0013c64 <Device::Device(char const*)>
c0015b01:	83 c4 10             	add    esp,0x10
c0015b04:	ba c4 98 02 c0       	mov    edx,0xc00298c4
c0015b09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b0d:	89 10                	mov    DWORD PTR [eax],edx
c0015b0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b13:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015b1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b1e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015b25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b29:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015b33:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015b37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015b3f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015b45:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015b4b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015b4f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015b52:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015b56:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015b5c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015b62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b66:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b6a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015b70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b74:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015b7e:	90                   	nop
c0015b7f:	83 c4 1c             	add    esp,0x1c
c0015b82:	c3                   	ret    
c0015b83:	90                   	nop

c0015b84 <LogicalDisk::assignDriveLetter()>:
c0015b84:	55                   	push   ebp
c0015b85:	57                   	push   edi
c0015b86:	56                   	push   esi
c0015b87:	53                   	push   ebx
c0015b88:	83 ec 14             	sub    esp,0x14
c0015b8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015b8f:	8b 3d 40 ce 02 c0    	mov    edi,DWORD PTR ds:0xc002ce40
c0015b95:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015b9b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015b9f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015ba5:	8b 3d 44 ce 02 c0    	mov    edi,DWORD PTR ds:0xc002ce44
c0015bab:	3c 01                	cmp    al,0x1
c0015bad:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015bb1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015bb5:	19 c0                	sbb    eax,eax
c0015bb7:	83 e0 02             	and    eax,0x2
c0015bba:	83 c0 41             	add    eax,0x41
c0015bbd:	0f be e8             	movsx  ebp,al
c0015bc0:	3c 43                	cmp    al,0x43
c0015bc2:	75 10                	jne    c0015bd4 <LogicalDisk::assignDriveLetter()+0x50>
c0015bc4:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015bcb:	75 5d                	jne    c0015c2a <LogicalDisk::assignDriveLetter()+0xa6>
c0015bcd:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015bd2:	75 56                	jne    c0015c2a <LogicalDisk::assignDriveLetter()+0xa6>
c0015bd4:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015bd7:	ba 01 00 00 00       	mov    edx,0x1
c0015bdc:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015be0:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015be4:	d3 e2                	shl    edx,cl
c0015be6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015bea:	89 d7                	mov    edi,edx
c0015bec:	89 d6                	mov    esi,edx
c0015bee:	c1 ff 1f             	sar    edi,0x1f
c0015bf1:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015bf5:	21 f9                	and    ecx,edi
c0015bf7:	09 d1                	or     ecx,edx
c0015bf9:	75 2f                	jne    c0015c2a <LogicalDisk::assignDriveLetter()+0xa6>
c0015bfb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015bff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015c03:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015c09:	09 f2                	or     edx,esi
c0015c0b:	89 15 40 ce 02 c0    	mov    DWORD PTR ds:0xc002ce40,edx
c0015c11:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c15:	09 fa                	or     edx,edi
c0015c17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015c1b:	89 15 44 ce 02 c0    	mov    DWORD PTR ds:0xc002ce44,edx
c0015c21:	89 1c bd 60 ce 02 c0 	mov    DWORD PTR [edi*4-0x3ffd31a0],ebx
c0015c28:	eb 08                	jmp    c0015c32 <LogicalDisk::assignDriveLetter()+0xae>
c0015c2a:	45                   	inc    ebp
c0015c2b:	40                   	inc    eax
c0015c2c:	3c 5b                	cmp    al,0x5b
c0015c2e:	75 90                	jne    c0015bc0 <LogicalDisk::assignDriveLetter()+0x3c>
c0015c30:	31 c0                	xor    eax,eax
c0015c32:	83 c4 14             	add    esp,0x14
c0015c35:	5b                   	pop    ebx
c0015c36:	5e                   	pop    esi
c0015c37:	5f                   	pop    edi
c0015c38:	5d                   	pop    ebp
c0015c39:	c3                   	ret    

c0015c3a <LogicalDisk::mount()>:
c0015c3a:	56                   	push   esi
c0015c3b:	53                   	push   ebx
c0015c3c:	51                   	push   ecx
c0015c3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015c41:	8b 1d c8 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9c8
c0015c47:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015c51:	85 db                	test   ebx,ebx
c0015c53:	74 50                	je     c0015ca5 <LogicalDisk::mount()+0x6b>
c0015c55:	e8 bf 6f 00 00       	call   c001cc19 <getIRQNestingLevel()>
c0015c5a:	52                   	push   edx
c0015c5b:	52                   	push   edx
c0015c5c:	50                   	push   eax
c0015c5d:	68 64 98 02 c0       	push   0xc0029864
c0015c62:	e8 1e ca ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0015c67:	83 c4 0c             	add    esp,0xc
c0015c6a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015c71:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015c73:	83 e8 41             	sub    eax,0x41
c0015c76:	50                   	push   eax
c0015c77:	56                   	push   esi
c0015c78:	53                   	push   ebx
c0015c79:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015c7c:	83 c4 10             	add    esp,0x10
c0015c7f:	84 c0                	test   al,al
c0015c81:	74 08                	je     c0015c8b <LogicalDisk::mount()+0x51>
c0015c83:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015c89:	eb 1c                	jmp    c0015ca7 <LogicalDisk::mount()+0x6d>
c0015c8b:	e8 89 6f 00 00       	call   c001cc19 <getIRQNestingLevel()>
c0015c90:	51                   	push   ecx
c0015c91:	51                   	push   ecx
c0015c92:	50                   	push   eax
c0015c93:	68 7f 98 02 c0       	push   0xc002987f
c0015c98:	e8 e8 c9 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0015c9d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015ca0:	83 c4 10             	add    esp,0x10
c0015ca3:	eb ac                	jmp    c0015c51 <LogicalDisk::mount()+0x17>
c0015ca5:	31 c0                	xor    eax,eax
c0015ca7:	5a                   	pop    edx
c0015ca8:	5b                   	pop    ebx
c0015ca9:	5e                   	pop    esi
c0015caa:	c3                   	ret    
c0015cab:	90                   	nop

c0015cac <LogicalDisk::unmount()>:
c0015cac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015cb0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015cba:	c3                   	ret    
c0015cbb:	90                   	nop

c0015cbc <LogicalDisk::unassignDriveLetter()>:
c0015cbc:	57                   	push   edi
c0015cbd:	56                   	push   esi
c0015cbe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015cc2:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015cc9:	84 c9                	test   cl,cl
c0015ccb:	75 0f                	jne    c0015cdc <LogicalDisk::unassignDriveLetter()+0x20>
c0015ccd:	c7 44 24 0c 9a 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc002989a
c0015cd5:	5e                   	pop    esi
c0015cd6:	5f                   	pop    edi
c0015cd7:	e9 c3 3a 00 00       	jmp    c001979f <Krnl::panic(char const*)>
c0015cdc:	83 e9 41             	sub    ecx,0x41
c0015cdf:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015ce6:	b8 01 00 00 00       	mov    eax,0x1
c0015ceb:	c7 04 8d 60 ce 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd31a0],0x0
c0015cf6:	d3 e0                	shl    eax,cl
c0015cf8:	89 c7                	mov    edi,eax
c0015cfa:	f7 d0                	not    eax
c0015cfc:	c1 ff 1f             	sar    edi,0x1f
c0015cff:	21 05 40 ce 02 c0    	and    DWORD PTR ds:0xc002ce40,eax
c0015d05:	89 fe                	mov    esi,edi
c0015d07:	f7 d6                	not    esi
c0015d09:	21 35 44 ce 02 c0    	and    DWORD PTR ds:0xc002ce44,esi
c0015d0f:	5e                   	pop    esi
c0015d10:	5f                   	pop    edi
c0015d11:	c3                   	ret    

c0015d12 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015d12:	57                   	push   edi
c0015d13:	56                   	push   esi
c0015d14:	53                   	push   ebx
c0015d15:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015d19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d1d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d25:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015d2b:	77 41                	ja     c0015d6e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015d2d:	99                   	cdq    
c0015d2e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015d34:	01 c8                	add    eax,ecx
c0015d36:	11 da                	adc    edx,ebx
c0015d38:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015d3e:	19 d7                	sbb    edi,edx
c0015d40:	72 33                	jb     c0015d75 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015d42:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015d48:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015d4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015d52:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015d56:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015d5c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015d66:	5b                   	pop    ebx
c0015d67:	5e                   	pop    esi
c0015d68:	5f                   	pop    edi
c0015d69:	e9 f8 09 00 00       	jmp    c0016766 <VCache::read(unsigned long long, int, void*)>
c0015d6e:	b8 05 00 00 00       	mov    eax,0x5
c0015d73:	eb 05                	jmp    c0015d7a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015d75:	b8 07 00 00 00       	mov    eax,0x7
c0015d7a:	5b                   	pop    ebx
c0015d7b:	5e                   	pop    esi
c0015d7c:	5f                   	pop    edi
c0015d7d:	c3                   	ret    

c0015d7e <LogicalDisk::write(unsigned long long, int, void*)>:
c0015d7e:	57                   	push   edi
c0015d7f:	56                   	push   esi
c0015d80:	53                   	push   ebx
c0015d81:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015d85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d89:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d91:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015d97:	77 41                	ja     c0015dda <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015d99:	99                   	cdq    
c0015d9a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015da0:	01 c8                	add    eax,ecx
c0015da2:	11 da                	adc    edx,ebx
c0015da4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015daa:	19 d7                	sbb    edi,edx
c0015dac:	72 33                	jb     c0015de1 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015dae:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015db4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015dba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015dbe:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015dc2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015dc8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015dce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015dd2:	5b                   	pop    ebx
c0015dd3:	5e                   	pop    esi
c0015dd4:	5f                   	pop    edi
c0015dd5:	e9 a8 08 00 00       	jmp    c0016682 <VCache::write(unsigned long long, int, void*)>
c0015dda:	b8 05 00 00 00       	mov    eax,0x5
c0015ddf:	eb 05                	jmp    c0015de6 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015de1:	b8 07 00 00 00       	mov    eax,0x7
c0015de6:	5b                   	pop    ebx
c0015de7:	5e                   	pop    esi
c0015de8:	5f                   	pop    edi
c0015de9:	c3                   	ret    

c0015dea <Mouse::Mouse(char const*)>:
c0015dea:	83 ec 0c             	sub    esp,0xc
c0015ded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015df1:	83 ec 08             	sub    esp,0x8
c0015df4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015df8:	50                   	push   eax
c0015df9:	e8 66 de ff ff       	call   c0013c64 <Device::Device(char const*)>
c0015dfe:	83 c4 10             	add    esp,0x10
c0015e01:	ba f0 98 02 c0       	mov    edx,0xc00298f0
c0015e06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e0a:	89 10                	mov    DWORD PTR [eax],edx
c0015e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e10:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015e1a:	90                   	nop
c0015e1b:	83 c4 0c             	add    esp,0xc
c0015e1e:	c3                   	ret    
c0015e1f:	90                   	nop

c0015e20 <Mouse::~Mouse()>:
c0015e20:	83 ec 0c             	sub    esp,0xc
c0015e23:	ba f0 98 02 c0       	mov    edx,0xc00298f0
c0015e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e2c:	89 10                	mov    DWORD PTR [eax],edx
c0015e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e32:	83 ec 0c             	sub    esp,0xc
c0015e35:	50                   	push   eax
c0015e36:	e8 0b db ff ff       	call   c0013946 <Device::~Device()>
c0015e3b:	83 c4 10             	add    esp,0x10
c0015e3e:	90                   	nop
c0015e3f:	83 c4 0c             	add    esp,0xc
c0015e42:	c3                   	ret    
c0015e43:	90                   	nop

c0015e44 <Mouse::~Mouse()>:
c0015e44:	83 ec 0c             	sub    esp,0xc
c0015e47:	83 ec 0c             	sub    esp,0xc
c0015e4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e4e:	e8 cd ff ff ff       	call   c0015e20 <Mouse::~Mouse()>
c0015e53:	83 c4 10             	add    esp,0x10
c0015e56:	83 ec 08             	sub    esp,0x8
c0015e59:	68 58 01 00 00       	push   0x158
c0015e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e62:	e8 3e c7 ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0015e67:	83 c4 10             	add    esp,0x10
c0015e6a:	83 c4 0c             	add    esp,0xc
c0015e6d:	c3                   	ret    

c0015e6e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015e6e:	55                   	push   ebp
c0015e6f:	57                   	push   edi
c0015e70:	56                   	push   esi
c0015e71:	53                   	push   ebx
c0015e72:	81 ec 28 01 00 00    	sub    esp,0x128
c0015e78:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015e7f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015e86:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015e8d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015e94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015e98:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015e9c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015ea3:	e8 b8 de ff ff       	call   c0013d60 <Device::getName()>
c0015ea8:	5a                   	pop    edx
c0015ea9:	59                   	pop    ecx
c0015eaa:	50                   	push   eax
c0015eab:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015eaf:	55                   	push   ebp
c0015eb0:	e8 75 a8 fe ff       	call   c000072a <strcpy>
c0015eb5:	5b                   	pop    ebx
c0015eb6:	58                   	pop    eax
c0015eb7:	68 14 99 02 c0       	push   0xc0029914
c0015ebc:	55                   	push   ebp
c0015ebd:	e8 1f a9 fe ff       	call   c00007e1 <strcat>
c0015ec2:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015ec9:	e8 06 96 ff ff       	call   c000f4d4 <malloc>
c0015ece:	83 c4 0c             	add    esp,0xc
c0015ed1:	89 c3                	mov    ebx,eax
c0015ed3:	57                   	push   edi
c0015ed4:	56                   	push   esi
c0015ed5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ed9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015edd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015ee4:	55                   	push   ebp
c0015ee5:	50                   	push   eax
c0015ee6:	e8 e3 fb ff ff       	call   c0015ace <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015eeb:	83 c4 14             	add    esp,0x14
c0015eee:	53                   	push   ebx
c0015eef:	e8 90 fc ff ff       	call   c0015b84 <LogicalDisk::assignDriveLetter()>
c0015ef4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ef7:	e8 3e fd ff ff       	call   c0015c3a <LogicalDisk::mount()>
c0015efc:	58                   	pop    eax
c0015efd:	5a                   	pop    edx
c0015efe:	53                   	push   ebx
c0015eff:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015f06:	e8 69 db ff ff       	call   c0013a74 <Device::addChild(Device*)>
c0015f0b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015f11:	5b                   	pop    ebx
c0015f12:	5e                   	pop    esi
c0015f13:	5f                   	pop    edi
c0015f14:	5d                   	pop    ebp
c0015f15:	c3                   	ret    

c0015f16 <createPartitionsForDisk(PhysicalDisk*)>:
c0015f16:	55                   	push   ebp
c0015f17:	57                   	push   edi
c0015f18:	56                   	push   esi
c0015f19:	53                   	push   ebx
c0015f1a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015f20:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015f27:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015f2d:	3d 00 02 00 00       	cmp    eax,0x200
c0015f32:	74 27                	je     c0015f5b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015f34:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015f3a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015f40:	83 ec 10             	sub    esp,0x10
c0015f43:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015f47:	99                   	cdq    
c0015f48:	c1 e6 0a             	shl    esi,0xa
c0015f4b:	52                   	push   edx
c0015f4c:	89 fd                	mov    ebp,edi
c0015f4e:	50                   	push   eax
c0015f4f:	55                   	push   ebp
c0015f50:	56                   	push   esi
c0015f51:	e8 66 f3 00 00       	call   c00252bc <__udivdi3>
c0015f56:	e9 b1 00 00 00       	jmp    c001600c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015f5b:	83 ec 0c             	sub    esp,0xc
c0015f5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f60:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015f64:	56                   	push   esi
c0015f65:	6a 01                	push   0x1
c0015f67:	6a 00                	push   0x0
c0015f69:	6a 00                	push   0x0
c0015f6b:	53                   	push   ebx
c0015f6c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015f6f:	83 c4 20             	add    esp,0x20
c0015f72:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015f7a:	75 0a                	jne    c0015f86 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015f7c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015f84:	74 2c                	je     c0015fb2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015f86:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015f8c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015f92:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015f98:	83 ec 10             	sub    esp,0x10
c0015f9b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015f9f:	89 f7                	mov    edi,esi
c0015fa1:	c1 e0 0a             	shl    eax,0xa
c0015fa4:	c1 ff 1f             	sar    edi,0x1f
c0015fa7:	57                   	push   edi
c0015fa8:	56                   	push   esi
c0015fa9:	52                   	push   edx
c0015faa:	50                   	push   eax
c0015fab:	e8 0c f3 00 00       	call   c00252bc <__udivdi3>
c0015fb0:	eb 5a                	jmp    c001600c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015fb2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015fb9:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015fc0:	83 e1 7f             	and    ecx,0x7f
c0015fc3:	83 e0 7f             	and    eax,0x7f
c0015fc6:	01 c1                	add    ecx,eax
c0015fc8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015fcf:	83 e0 7f             	and    eax,0x7f
c0015fd2:	01 c1                	add    ecx,eax
c0015fd4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015fdb:	83 e0 7f             	and    eax,0x7f
c0015fde:	00 c1                	add    cl,al
c0015fe0:	74 41                	je     c0016023 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015fe2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015fe8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015fee:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015ff4:	83 ec 10             	sub    esp,0x10
c0015ff7:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015ffb:	89 f7                	mov    edi,esi
c0015ffd:	c1 e0 0a             	shl    eax,0xa
c0016000:	c1 ff 1f             	sar    edi,0x1f
c0016003:	57                   	push   edi
c0016004:	56                   	push   esi
c0016005:	52                   	push   edx
c0016006:	50                   	push   eax
c0016007:	e8 b0 f2 00 00       	call   c00252bc <__udivdi3>
c001600c:	83 c4 14             	add    esp,0x14
c001600f:	52                   	push   edx
c0016010:	50                   	push   eax
c0016011:	6a 00                	push   0x0
c0016013:	6a 00                	push   0x0
c0016015:	53                   	push   ebx
c0016016:	e8 53 fe ff ff       	call   c0015e6e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001601b:	83 c4 20             	add    esp,0x20
c001601e:	e9 79 01 00 00       	jmp    c001619c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016023:	89 f0                	mov    eax,esi
c0016025:	31 f6                	xor    esi,esi
c0016027:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001602e:	75 02                	jne    c0016032 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016030:	89 f1                	mov    ecx,esi
c0016032:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016039:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016040:	c1 e2 08             	shl    edx,0x8
c0016043:	c1 e7 10             	shl    edi,0x10
c0016046:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001604e:	09 fa                	or     edx,edi
c0016050:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016058:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001605f:	83 c0 10             	add    eax,0x10
c0016062:	09 fa                	or     edx,edi
c0016064:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001606b:	c1 e7 18             	shl    edi,0x18
c001606e:	09 fa                	or     edx,edi
c0016070:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016077:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001607b:	c1 e7 10             	shl    edi,0x10
c001607e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016085:	c1 e2 08             	shl    edx,0x8
c0016088:	09 fa                	or     edx,edi
c001608a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016091:	09 fa                	or     edx,edi
c0016093:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001609a:	c1 e7 18             	shl    edi,0x18
c001609d:	09 fa                	or     edx,edi
c001609f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00160a3:	46                   	inc    esi
c00160a4:	83 fe 04             	cmp    esi,0x4
c00160a7:	0f 85 7a ff ff ff    	jne    c0016027 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00160ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160b1:	83 f0 01             	xor    eax,0x1
c00160b4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00160b8:	75 57                	jne    c0016111 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00160ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00160be:	83 f0 01             	xor    eax,0x1
c00160c1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00160c5:	75 4a                	jne    c0016111 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00160c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00160cb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00160d3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00160db:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00160e1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00160e7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00160ed:	0f a4 c2 0a          	shld   edx,eax,0xa
c00160f1:	89 f7                	mov    edi,esi
c00160f3:	c1 e0 0a             	shl    eax,0xa
c00160f6:	c1 ff 1f             	sar    edi,0x1f
c00160f9:	57                   	push   edi
c00160fa:	56                   	push   esi
c00160fb:	52                   	push   edx
c00160fc:	50                   	push   eax
c00160fd:	e8 ba f1 00 00       	call   c00252bc <__udivdi3>
c0016102:	83 c4 10             	add    esp,0x10
c0016105:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016109:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001610d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016111:	84 c9                	test   cl,cl
c0016113:	74 53                	je     c0016168 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016115:	0f b6 c9             	movzx  ecx,cl
c0016118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001611c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016120:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016124:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016128:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001612c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016130:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016134:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016138:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001613c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016140:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016144:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016148:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001614c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016150:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016154:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016158:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001615c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016160:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016164:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016168:	31 ed                	xor    ebp,ebp
c001616a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001616e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016172:	89 f8                	mov    eax,edi
c0016174:	09 f0                	or     eax,esi
c0016176:	74 1e                	je     c0016196 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016178:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001617c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016180:	89 d1                	mov    ecx,edx
c0016182:	09 c1                	or     ecx,eax
c0016184:	74 10                	je     c0016196 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016186:	83 ec 0c             	sub    esp,0xc
c0016189:	57                   	push   edi
c001618a:	56                   	push   esi
c001618b:	52                   	push   edx
c001618c:	50                   	push   eax
c001618d:	53                   	push   ebx
c001618e:	e8 db fc ff ff       	call   c0015e6e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016193:	83 c4 20             	add    esp,0x20
c0016196:	45                   	inc    ebp
c0016197:	83 fd 04             	cmp    ebp,0x4
c001619a:	75 ce                	jne    c001616a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001619c:	81 c4 5c 02 00 00    	add    esp,0x25c
c00161a2:	5b                   	pop    ebx
c00161a3:	5e                   	pop    esi
c00161a4:	5f                   	pop    edi
c00161a5:	5d                   	pop    ebp
c00161a6:	c3                   	ret    
c00161a7:	90                   	nop

c00161a8 <Serial::Serial(char const*)>:
c00161a8:	83 ec 0c             	sub    esp,0xc
c00161ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161af:	83 ec 08             	sub    esp,0x8
c00161b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161b6:	50                   	push   eax
c00161b7:	e8 a8 da ff ff       	call   c0013c64 <Device::Device(char const*)>
c00161bc:	83 c4 10             	add    esp,0x10
c00161bf:	ba 28 99 02 c0       	mov    edx,0xc0029928
c00161c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161c8:	89 10                	mov    DWORD PTR [eax],edx
c00161ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161ce:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00161d8:	90                   	nop
c00161d9:	83 c4 0c             	add    esp,0xc
c00161dc:	c3                   	ret    
c00161dd:	90                   	nop

c00161de <Serial::~Serial()>:
c00161de:	83 ec 0c             	sub    esp,0xc
c00161e1:	ba 28 99 02 c0       	mov    edx,0xc0029928
c00161e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161ea:	89 10                	mov    DWORD PTR [eax],edx
c00161ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161f0:	83 ec 0c             	sub    esp,0xc
c00161f3:	50                   	push   eax
c00161f4:	e8 4d d7 ff ff       	call   c0013946 <Device::~Device()>
c00161f9:	83 c4 10             	add    esp,0x10
c00161fc:	90                   	nop
c00161fd:	83 c4 0c             	add    esp,0xc
c0016200:	c3                   	ret    
c0016201:	90                   	nop

c0016202 <Serial::~Serial()>:
c0016202:	83 ec 0c             	sub    esp,0xc
c0016205:	83 ec 0c             	sub    esp,0xc
c0016208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001620c:	e8 cd ff ff ff       	call   c00161de <Serial::~Serial()>
c0016211:	83 c4 10             	add    esp,0x10
c0016214:	83 ec 08             	sub    esp,0x8
c0016217:	68 58 01 00 00       	push   0x158
c001621c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016220:	e8 80 c3 ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0016225:	83 c4 10             	add    esp,0x10
c0016228:	83 c4 0c             	add    esp,0xc
c001622b:	c3                   	ret    

c001622c <Timer::Timer(char const*)>:
c001622c:	83 ec 0c             	sub    esp,0xc
c001622f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016233:	83 ec 08             	sub    esp,0x8
c0016236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001623a:	50                   	push   eax
c001623b:	e8 24 da ff ff       	call   c0013c64 <Device::Device(char const*)>
c0016240:	83 c4 10             	add    esp,0x10
c0016243:	ba 6c 99 02 c0       	mov    edx,0xc002996c
c0016248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001624c:	89 10                	mov    DWORD PTR [eax],edx
c001624e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016252:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001625c:	90                   	nop
c001625d:	83 c4 0c             	add    esp,0xc
c0016260:	c3                   	ret    
c0016261:	90                   	nop

c0016262 <Timer::~Timer()>:
c0016262:	83 ec 0c             	sub    esp,0xc
c0016265:	ba 6c 99 02 c0       	mov    edx,0xc002996c
c001626a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001626e:	89 10                	mov    DWORD PTR [eax],edx
c0016270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016274:	83 ec 0c             	sub    esp,0xc
c0016277:	50                   	push   eax
c0016278:	e8 c9 d6 ff ff       	call   c0013946 <Device::~Device()>
c001627d:	83 c4 10             	add    esp,0x10
c0016280:	90                   	nop
c0016281:	83 c4 0c             	add    esp,0xc
c0016284:	c3                   	ret    
c0016285:	90                   	nop

c0016286 <Timer::~Timer()>:
c0016286:	83 ec 0c             	sub    esp,0xc
c0016289:	83 ec 0c             	sub    esp,0xc
c001628c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016290:	e8 cd ff ff ff       	call   c0016262 <Timer::~Timer()>
c0016295:	83 c4 10             	add    esp,0x10
c0016298:	83 ec 08             	sub    esp,0x8
c001629b:	68 5c 01 00 00       	push   0x15c
c00162a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162a4:	e8 fc c2 ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c00162a9:	83 c4 10             	add    esp,0x10
c00162ac:	83 c4 0c             	add    esp,0xc
c00162af:	c3                   	ret    

c00162b0 <Timer::read()>:
c00162b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162b4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00162ba:	c3                   	ret    

c00162bb <timerHandler(unsigned long long)>:
c00162bb:	55                   	push   ebp
c00162bc:	57                   	push   edi
c00162bd:	56                   	push   esi
c00162be:	53                   	push   ebx
c00162bf:	83 ec 0c             	sub    esp,0xc
c00162c2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00162c6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00162ca:	01 35 d0 ce 02 c0    	add    DWORD PTR ds:0xc002ced0,esi
c00162d0:	11 3d d4 ce 02 c0    	adc    DWORD PTR ds:0xc002ced4,edi
c00162d6:	80 3d 4d c8 02 c0 00 	cmp    BYTE PTR ds:0xc002c84d,0x0
c00162dd:	0f 84 07 01 00 00    	je     c00163ea <timerHandler(unsigned long long)+0x12f>
c00162e3:	e8 6d 69 00 00       	call   c001cc55 <lockStuff()>
c00162e8:	83 ec 0c             	sub    esp,0xc
c00162eb:	68 7c dd 02 c0       	push   0xc002dd7c
c00162f0:	e8 39 10 01 00       	call   c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162f5:	c7 04 24 7c dd 02 c0 	mov    DWORD PTR [esp],0xc002dd7c
c00162fc:	89 c3                	mov    ebx,eax
c00162fe:	e8 33 10 01 00       	call   c0027336 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016303:	83 c4 10             	add    esp,0x10
c0016306:	84 c0                	test   al,al
c0016308:	74 60                	je     c001636a <timerHandler(unsigned long long)+0xaf>
c001630a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016310:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016313:	85 c0                	test   eax,eax
c0016315:	0f 85 91 00 00 00    	jne    c00163ac <timerHandler(unsigned long long)+0xf1>
c001631b:	e9 be 00 00 00       	jmp    c00163de <timerHandler(unsigned long long)+0x123>
c0016320:	83 ec 0c             	sub    esp,0xc
c0016323:	55                   	push   ebp
c0016324:	e8 1d 6f 00 00       	call   c001d246 <unblockTask(ThreadControlBlock*)>
c0016329:	83 c4 10             	add    esp,0x10
c001632c:	39 eb                	cmp    ebx,ebp
c001632e:	75 12                	jne    c0016342 <timerHandler(unsigned long long)+0x87>
c0016330:	83 ec 0c             	sub    esp,0xc
c0016333:	68 7c dd 02 c0       	push   0xc002dd7c
c0016338:	e8 f1 0f 01 00       	call   c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001633d:	89 c3                	mov    ebx,eax
c001633f:	83 c4 10             	add    esp,0x10
c0016342:	83 ec 0c             	sub    esp,0xc
c0016345:	68 7c dd 02 c0       	push   0xc002dd7c
c001634a:	e8 e7 0f 01 00       	call   c0027336 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001634f:	83 c4 10             	add    esp,0x10
c0016352:	84 c0                	test   al,al
c0016354:	75 b4                	jne    c001630a <timerHandler(unsigned long long)+0x4f>
c0016356:	83 ec 0c             	sub    esp,0xc
c0016359:	68 7c dd 02 c0       	push   0xc002dd7c
c001635e:	e8 cb 0f 01 00       	call   c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016363:	83 c4 10             	add    esp,0x10
c0016366:	39 d8                	cmp    eax,ebx
c0016368:	74 a0                	je     c001630a <timerHandler(unsigned long long)+0x4f>
c001636a:	83 ec 0c             	sub    esp,0xc
c001636d:	68 7c dd 02 c0       	push   0xc002dd7c
c0016372:	e8 b7 0f 01 00       	call   c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016377:	c7 04 24 7c dd 02 c0 	mov    DWORD PTR [esp],0xc002dd7c
c001637e:	89 c5                	mov    ebp,eax
c0016380:	e8 cd 0f 01 00       	call   c0027352 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016385:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016388:	83 c4 10             	add    esp,0x10
c001638b:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001638e:	39 15 d0 ce 02 c0    	cmp    DWORD PTR ds:0xc002ced0,edx
c0016394:	a1 d4 ce 02 c0       	mov    eax,ds:0xc002ced4
c0016399:	19 c8                	sbb    eax,ecx
c001639b:	73 83                	jae    c0016320 <timerHandler(unsigned long long)+0x65>
c001639d:	50                   	push   eax
c001639e:	50                   	push   eax
c001639f:	55                   	push   ebp
c00163a0:	68 7c dd 02 c0       	push   0xc002dd7c
c00163a5:	e8 56 10 01 00       	call   c0027400 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00163aa:	eb 93                	jmp    c001633f <timerHandler(unsigned long long)+0x84>
c00163ac:	80 3d 4c c8 02 c0 00 	cmp    BYTE PTR ds:0xc002c84c,0x0
c00163b3:	74 29                	je     c00163de <timerHandler(unsigned long long)+0x123>
c00163b5:	39 c6                	cmp    esi,eax
c00163b7:	bb 00 00 00 00       	mov    ebx,0x0
c00163bc:	19 df                	sbb    edi,ebx
c00163be:	72 19                	jb     c00163d9 <timerHandler(unsigned long long)+0x11e>
c00163c0:	e8 69 68 00 00       	call   c001cc2e <lockScheduler()>
c00163c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163ca:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00163cd:	e8 98 6b 00 00       	call   c001cf6a <schedule()>
c00163d2:	e8 59 68 00 00       	call   c001cc30 <unlockScheduler()>
c00163d7:	eb 05                	jmp    c00163de <timerHandler(unsigned long long)+0x123>
c00163d9:	29 f0                	sub    eax,esi
c00163db:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00163de:	83 c4 0c             	add    esp,0xc
c00163e1:	5b                   	pop    ebx
c00163e2:	5e                   	pop    esi
c00163e3:	5f                   	pop    edi
c00163e4:	5d                   	pop    ebp
c00163e5:	e9 05 6c 00 00       	jmp    c001cfef <unlockStuff()>
c00163ea:	83 c4 0c             	add    esp,0xc
c00163ed:	5b                   	pop    ebx
c00163ee:	5e                   	pop    esi
c00163ef:	5f                   	pop    edi
c00163f0:	5d                   	pop    ebp
c00163f1:	c3                   	ret    

c00163f2 <setupTimer(int)>:
c00163f2:	57                   	push   edi
c00163f3:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c00163f8:	56                   	push   esi
c00163f9:	53                   	push   ebx
c00163fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00163fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016404:	83 ec 0c             	sub    esp,0xc
c0016407:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001640d:	e8 4e d9 ff ff       	call   c0013d60 <Device::getName()>
c0016412:	83 c4 10             	add    esp,0x10
c0016415:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016418:	0f 85 8d 00 00 00    	jne    c00164ab <setupTimer(int)+0xb9>
c001641e:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0016423:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001642a:	74 7f                	je     c00164ab <setupTimer(int)+0xb9>
c001642c:	83 ec 0c             	sub    esp,0xc
c001642f:	68 5c 01 00 00       	push   0x15c
c0016434:	e8 9b 90 ff ff       	call   c000f4d4 <malloc>
c0016439:	89 04 24             	mov    DWORD PTR [esp],eax
c001643c:	89 c3                	mov    ebx,eax
c001643e:	e8 51 ea 00 00       	call   c0024e94 <PIT::PIT()>
c0016443:	59                   	pop    ecx
c0016444:	5f                   	pop    edi
c0016445:	53                   	push   ebx
c0016446:	ff 35 48 c8 02 c0    	push   DWORD PTR ds:0xc002c848
c001644c:	e8 23 d6 ff ff       	call   c0013a74 <Device::addChild(Device*)>
c0016451:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016453:	6a 00                	push   0x0
c0016455:	6a 00                	push   0x0
c0016457:	56                   	push   esi
c0016458:	53                   	push   ebx
c0016459:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001645c:	83 c4 14             	add    esp,0x14
c001645f:	68 60 01 00 00       	push   0x160
c0016464:	e8 6b 90 ff ff       	call   c000f4d4 <malloc>
c0016469:	89 04 24             	mov    DWORD PTR [esp],eax
c001646c:	89 c7                	mov    edi,eax
c001646e:	e8 d1 e8 00 00       	call   c0024d44 <APICTimer::APICTimer()>
c0016473:	6a 00                	push   0x0
c0016475:	6a 00                	push   0x0
c0016477:	56                   	push   esi
c0016478:	57                   	push   edi
c0016479:	e8 c8 e7 00 00       	call   c0024c46 <APICTimer::open(int, int, void*)>
c001647e:	83 c4 20             	add    esp,0x20
c0016481:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016483:	6a 00                	push   0x0
c0016485:	6a 00                	push   0x0
c0016487:	6a 00                	push   0x0
c0016489:	53                   	push   ebx
c001648a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001648d:	58                   	pop    eax
c001648e:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0016493:	5a                   	pop    edx
c0016494:	57                   	push   edi
c0016495:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001649b:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00164a1:	e8 ce d5 ff ff       	call   c0013a74 <Device::addChild(Device*)>
c00164a6:	83 c4 10             	add    esp,0x10
c00164a9:	eb 33                	jmp    c00164de <setupTimer(int)+0xec>
c00164ab:	83 ec 0c             	sub    esp,0xc
c00164ae:	68 5c 01 00 00       	push   0x15c
c00164b3:	e8 1c 90 ff ff       	call   c000f4d4 <malloc>
c00164b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00164bb:	89 c3                	mov    ebx,eax
c00164bd:	e8 d2 e9 00 00       	call   c0024e94 <PIT::PIT()>
c00164c2:	58                   	pop    eax
c00164c3:	5a                   	pop    edx
c00164c4:	53                   	push   ebx
c00164c5:	ff 35 48 c8 02 c0    	push   DWORD PTR ds:0xc002c848
c00164cb:	e8 a4 d5 ff ff       	call   c0013a74 <Device::addChild(Device*)>
c00164d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00164d2:	6a 00                	push   0x0
c00164d4:	6a 00                	push   0x0
c00164d6:	56                   	push   esi
c00164d7:	53                   	push   ebx
c00164d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00164db:	83 c4 20             	add    esp,0x20
c00164de:	89 d8                	mov    eax,ebx
c00164e0:	5b                   	pop    ebx
c00164e1:	5e                   	pop    esi
c00164e2:	5f                   	pop    edi
c00164e3:	c3                   	ret    

c00164e4 <VCache::VCache(PhysicalDisk*)>:
c00164e4:	53                   	push   ebx
c00164e5:	83 ec 18             	sub    esp,0x18
c00164e8:	ba 9c 99 02 c0       	mov    edx,0xc002999c
c00164ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164f1:	89 10                	mov    DWORD PTR [eax],edx
c00164f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164f7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00164fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016502:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016509:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001650d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016514:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001651b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001651f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016526:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001652d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016531:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016538:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001653c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016540:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016548:	83 ec 0c             	sub    esp,0xc
c001654b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001654f:	e8 80 8f ff ff       	call   c000f4d4 <malloc>
c0016554:	83 c4 10             	add    esp,0x10
c0016557:	89 c3                	mov    ebx,eax
c0016559:	83 ec 0c             	sub    esp,0xc
c001655c:	53                   	push   ebx
c001655d:	e8 ec 67 00 00       	call   c001cd4e <Mutex::Mutex()>
c0016562:	83 c4 10             	add    esp,0x10
c0016565:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016569:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001656c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016570:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016574:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016577:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001657b:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016582:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016586:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001658c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016590:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016593:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016597:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001659d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00165a3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165a7:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00165aa:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00165ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b1:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00165b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00165b9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00165bf:	c1 e0 06             	shl    eax,0x6
c00165c2:	83 ec 0c             	sub    esp,0xc
c00165c5:	50                   	push   eax
c00165c6:	e8 09 8f ff ff       	call   c000f4d4 <malloc>
c00165cb:	83 c4 10             	add    esp,0x10
c00165ce:	89 c2                	mov    edx,eax
c00165d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165d4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00165d7:	90                   	nop
c00165d8:	83 c4 18             	add    esp,0x18
c00165db:	5b                   	pop    ebx
c00165dc:	c3                   	ret    
c00165dd:	90                   	nop

c00165de <VCache::writeWriteBuffer()>:
c00165de:	53                   	push   ebx
c00165df:	83 ec 14             	sub    esp,0x14
c00165e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00165e6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00165e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00165eb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00165ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00165f1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00165f4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00165f7:	50                   	push   eax
c00165f8:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00165fb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016602:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016609:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001660d:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016614:	83 c4 28             	add    esp,0x28
c0016617:	5b                   	pop    ebx
c0016618:	c3                   	ret    
c0016619:	90                   	nop

c001661a <VCache::~VCache()>:
c001661a:	83 ec 0c             	sub    esp,0xc
c001661d:	ba 9c 99 02 c0       	mov    edx,0xc002999c
c0016622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016626:	89 10                	mov    DWORD PTR [eax],edx
c0016628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001662c:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001662f:	84 c0                	test   al,al
c0016631:	74 0f                	je     c0016642 <VCache::~VCache()+0x28>
c0016633:	83 ec 0c             	sub    esp,0xc
c0016636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001663a:	e8 9f ff ff ff       	call   c00165de <VCache::writeWriteBuffer()>
c001663f:	83 c4 10             	add    esp,0x10
c0016642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016646:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016649:	83 ec 0c             	sub    esp,0xc
c001664c:	50                   	push   eax
c001664d:	e8 92 8e ff ff       	call   c000f4e4 <free>
c0016652:	83 c4 10             	add    esp,0x10
c0016655:	90                   	nop
c0016656:	83 c4 0c             	add    esp,0xc
c0016659:	c3                   	ret    

c001665a <VCache::~VCache()>:
c001665a:	83 ec 0c             	sub    esp,0xc
c001665d:	83 ec 0c             	sub    esp,0xc
c0016660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016664:	e8 b1 ff ff ff       	call   c001661a <VCache::~VCache()>
c0016669:	83 c4 10             	add    esp,0x10
c001666c:	83 ec 08             	sub    esp,0x8
c001666f:	6a 30                	push   0x30
c0016671:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016675:	e8 2b bf ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c001667a:	83 c4 10             	add    esp,0x10
c001667d:	83 c4 0c             	add    esp,0xc
c0016680:	c3                   	ret    
c0016681:	90                   	nop

c0016682 <VCache::write(unsigned long long, int, void*)>:
c0016682:	55                   	push   ebp
c0016683:	57                   	push   edi
c0016684:	56                   	push   esi
c0016685:	53                   	push   ebx
c0016686:	83 ec 28             	sub    esp,0x28
c0016689:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001668d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016691:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016695:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016699:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001669c:	e8 0f 6b 00 00       	call   c001d1b0 <Semaphore::acquire()>
c00166a1:	83 c4 10             	add    esp,0x10
c00166a4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00166a8:	74 66                	je     c0016710 <VCache::write(unsigned long long, int, void*)+0x8e>
c00166aa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00166ad:	99                   	cdq    
c00166ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166b2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00166b5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00166b8:	89 c1                	mov    ecx,eax
c00166ba:	89 d0                	mov    eax,edx
c00166bc:	31 f1                	xor    ecx,esi
c00166be:	31 f8                	xor    eax,edi
c00166c0:	89 ca                	mov    edx,ecx
c00166c2:	09 c2                	or     edx,eax
c00166c4:	75 3e                	jne    c0016704 <VCache::write(unsigned long long, int, void*)+0x82>
c00166c6:	83 fd 01             	cmp    ebp,0x1
c00166c9:	75 39                	jne    c0016704 <VCache::write(unsigned long long, int, void*)+0x82>
c00166cb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00166ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00166d4:	51                   	push   ecx
c00166d5:	50                   	push   eax
c00166d6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166da:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00166de:	0f af c8             	imul   ecx,eax
c00166e1:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00166e4:	51                   	push   ecx
c00166e5:	e8 6b 9f fe ff       	call   c0000655 <memcpy>
c00166ea:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00166ed:	83 c4 10             	add    esp,0x10
c00166f0:	40                   	inc    eax
c00166f1:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00166f4:	83 f8 40             	cmp    eax,0x40
c00166f7:	75 57                	jne    c0016750 <VCache::write(unsigned long long, int, void*)+0xce>
c00166f9:	83 ec 0c             	sub    esp,0xc
c00166fc:	53                   	push   ebx
c00166fd:	e8 dc fe ff ff       	call   c00165de <VCache::writeWriteBuffer()>
c0016702:	eb 34                	jmp    c0016738 <VCache::write(unsigned long long, int, void*)+0xb6>
c0016704:	83 ec 0c             	sub    esp,0xc
c0016707:	53                   	push   ebx
c0016708:	e8 d1 fe ff ff       	call   c00165de <VCache::writeWriteBuffer()>
c001670d:	83 c4 10             	add    esp,0x10
c0016710:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016713:	83 fd 3f             	cmp    ebp,0x3f
c0016716:	7f 25                	jg     c001673d <VCache::write(unsigned long long, int, void*)+0xbb>
c0016718:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001671b:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001671e:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016721:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016725:	52                   	push   edx
c0016726:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001672c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016730:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016733:	e8 1d 9f fe ff       	call   c0000655 <memcpy>
c0016738:	83 c4 10             	add    esp,0x10
c001673b:	eb 13                	jmp    c0016750 <VCache::write(unsigned long long, int, void*)+0xce>
c001673d:	83 ec 0c             	sub    esp,0xc
c0016740:	8b 10                	mov    edx,DWORD PTR [eax]
c0016742:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016746:	55                   	push   ebp
c0016747:	57                   	push   edi
c0016748:	56                   	push   esi
c0016749:	50                   	push   eax
c001674a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001674d:	83 c4 20             	add    esp,0x20
c0016750:	83 ec 0c             	sub    esp,0xc
c0016753:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016756:	e8 03 70 00 00       	call   c001d75e <Semaphore::release()>
c001675b:	83 c4 2c             	add    esp,0x2c
c001675e:	31 c0                	xor    eax,eax
c0016760:	5b                   	pop    ebx
c0016761:	5e                   	pop    esi
c0016762:	5f                   	pop    edi
c0016763:	5d                   	pop    ebp
c0016764:	c3                   	ret    
c0016765:	90                   	nop

c0016766 <VCache::read(unsigned long long, int, void*)>:
c0016766:	57                   	push   edi
c0016767:	56                   	push   esi
c0016768:	53                   	push   ebx
c0016769:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001676d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016771:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016775:	83 ec 0c             	sub    esp,0xc
c0016778:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001677b:	e8 30 6a 00 00       	call   c001d1b0 <Semaphore::acquire()>
c0016780:	83 c4 10             	add    esp,0x10
c0016783:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016787:	74 0c                	je     c0016795 <VCache::read(unsigned long long, int, void*)+0x2f>
c0016789:	83 ec 0c             	sub    esp,0xc
c001678c:	53                   	push   ebx
c001678d:	e8 4c fe ff ff       	call   c00165de <VCache::writeWriteBuffer()>
c0016792:	83 c4 10             	add    esp,0x10
c0016795:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016798:	83 ec 0c             	sub    esp,0xc
c001679b:	8b 10                	mov    edx,DWORD PTR [eax]
c001679d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167a5:	57                   	push   edi
c00167a6:	56                   	push   esi
c00167a7:	50                   	push   eax
c00167a8:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00167ab:	83 c4 14             	add    esp,0x14
c00167ae:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00167b1:	e8 a8 6f 00 00       	call   c001d75e <Semaphore::release()>
c00167b6:	83 c4 10             	add    esp,0x10
c00167b9:	31 c0                	xor    eax,eax
c00167bb:	5b                   	pop    ebx
c00167bc:	5e                   	pop    esi
c00167bd:	5f                   	pop    edi
c00167be:	c3                   	ret    
c00167bf:	90                   	nop

c00167c0 <Video::putrect(int, int, int, int, unsigned int)>:
c00167c0:	55                   	push   ebp
c00167c1:	57                   	push   edi
c00167c2:	56                   	push   esi
c00167c3:	53                   	push   ebx
c00167c4:	83 ec 1c             	sub    esp,0x1c
c00167c7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00167cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00167cf:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00167d3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00167d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00167db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167df:	01 df                	add    edi,ebx
c00167e1:	39 fb                	cmp    ebx,edi
c00167e3:	7d 1f                	jge    c0016804 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00167e5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00167e9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00167ed:	7d 12                	jge    c0016801 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00167ef:	8b 16                	mov    edx,DWORD PTR [esi]
c00167f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00167f5:	53                   	push   ebx
c00167f6:	55                   	push   ebp
c00167f7:	45                   	inc    ebp
c00167f8:	56                   	push   esi
c00167f9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00167fc:	83 c4 10             	add    esp,0x10
c00167ff:	eb e8                	jmp    c00167e9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016801:	43                   	inc    ebx
c0016802:	eb dd                	jmp    c00167e1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016804:	83 c4 1c             	add    esp,0x1c
c0016807:	5b                   	pop    ebx
c0016808:	5e                   	pop    esi
c0016809:	5f                   	pop    edi
c001680a:	5d                   	pop    ebp
c001680b:	c3                   	ret    

c001680c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001680c:	55                   	push   ebp
c001680d:	57                   	push   edi
c001680e:	31 ff                	xor    edi,edi
c0016810:	56                   	push   esi
c0016811:	53                   	push   ebx
c0016812:	83 ec 1c             	sub    esp,0x1c
c0016815:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016819:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001681d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016824:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016829:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001682d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016831:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016835:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016838:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001683c:	01 f9                	add    ecx,edi
c001683e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016842:	7d 2f                	jge    c0016873 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016844:	31 f6                	xor    esi,esi
c0016846:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001684a:	01 f2                	add    edx,esi
c001684c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016850:	7d 1a                	jge    c001686c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016852:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016855:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016858:	46                   	inc    esi
c0016859:	51                   	push   ecx
c001685a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001685e:	52                   	push   edx
c001685f:	55                   	push   ebp
c0016860:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016863:	83 c4 10             	add    esp,0x10
c0016866:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001686a:	eb da                	jmp    c0016846 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001686c:	47                   	inc    edi
c001686d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016871:	eb c5                	jmp    c0016838 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016873:	83 c4 1c             	add    esp,0x1c
c0016876:	5b                   	pop    ebx
c0016877:	5e                   	pop    esi
c0016878:	5f                   	pop    edi
c0016879:	5d                   	pop    ebp
c001687a:	c3                   	ret    
c001687b:	90                   	nop

c001687c <Video::blit(unsigned int*, int, int, int, int)>:
c001687c:	55                   	push   ebp
c001687d:	57                   	push   edi
c001687e:	56                   	push   esi
c001687f:	53                   	push   ebx
c0016880:	83 ec 1c             	sub    esp,0x1c
c0016883:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016887:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001688b:	85 c0                	test   eax,eax
c001688d:	79 02                	jns    c0016891 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001688f:	31 c0                	xor    eax,eax
c0016891:	c1 e0 02             	shl    eax,0x2
c0016894:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016898:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001689c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00168a0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00168a4:	39 d8                	cmp    eax,ebx
c00168a6:	7e 49                	jle    c00168f1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00168a8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00168ae:	7c 41                	jl     c00168f1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00168b0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00168b4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00168b8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00168bc:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00168c0:	39 f9                	cmp    ecx,edi
c00168c2:	7e 22                	jle    c00168e6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00168c4:	83 c5 04             	add    ebp,0x4
c00168c7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00168cd:	7c 14                	jl     c00168e3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00168cf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00168d1:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00168d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00168d8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00168dc:	56                   	push   esi
c00168dd:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00168e0:	83 c4 10             	add    esp,0x10
c00168e3:	47                   	inc    edi
c00168e4:	eb d2                	jmp    c00168b8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00168e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00168ea:	43                   	inc    ebx
c00168eb:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00168ef:	eb ab                	jmp    c001689c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00168f1:	83 c4 1c             	add    esp,0x1c
c00168f4:	5b                   	pop    ebx
c00168f5:	5e                   	pop    esi
c00168f6:	5f                   	pop    edi
c00168f7:	5d                   	pop    ebp
c00168f8:	c3                   	ret    
c00168f9:	90                   	nop

c00168fa <Video::clearScreen(unsigned int)>:
c00168fa:	57                   	push   edi
c00168fb:	56                   	push   esi
c00168fc:	53                   	push   ebx
c00168fd:	31 db                	xor    ebx,ebx
c00168ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016903:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016909:	7e 1f                	jle    c001692a <Video::clearScreen(unsigned int)+0x30>
c001690b:	31 ff                	xor    edi,edi
c001690d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016913:	7e 12                	jle    c0016927 <Video::clearScreen(unsigned int)+0x2d>
c0016915:	8b 06                	mov    eax,DWORD PTR [esi]
c0016917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001691b:	53                   	push   ebx
c001691c:	57                   	push   edi
c001691d:	47                   	inc    edi
c001691e:	56                   	push   esi
c001691f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016922:	83 c4 10             	add    esp,0x10
c0016925:	eb e6                	jmp    c001690d <Video::clearScreen(unsigned int)+0x13>
c0016927:	43                   	inc    ebx
c0016928:	eb d9                	jmp    c0016903 <Video::clearScreen(unsigned int)+0x9>
c001692a:	5b                   	pop    ebx
c001692b:	5e                   	pop    esi
c001692c:	5f                   	pop    edi
c001692d:	c3                   	ret    

c001692e <Video::putpixel(int, int, unsigned int)>:
c001692e:	c7 44 24 04 a4 99 02 c0 	mov    DWORD PTR [esp+0x4],0xc00299a4
c0016936:	e9 64 2e 00 00       	jmp    c001979f <Krnl::panic(char const*)>
c001693b:	90                   	nop

c001693c <Video::Video(char const*)>:
c001693c:	83 ec 0c             	sub    esp,0xc
c001693f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016943:	83 ec 08             	sub    esp,0x8
c0016946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001694a:	50                   	push   eax
c001694b:	e8 14 d3 ff ff       	call   c0013c64 <Device::Device(char const*)>
c0016950:	83 c4 10             	add    esp,0x10
c0016953:	ba 28 9a 02 c0       	mov    edx,0xc0029a28
c0016958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001695c:	89 10                	mov    DWORD PTR [eax],edx
c001695e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016962:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001696c:	90                   	nop
c001696d:	83 c4 0c             	add    esp,0xc
c0016970:	c3                   	ret    
c0016971:	90                   	nop

c0016972 <Video::~Video()>:
c0016972:	83 ec 0c             	sub    esp,0xc
c0016975:	ba 28 9a 02 c0       	mov    edx,0xc0029a28
c001697a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001697e:	89 10                	mov    DWORD PTR [eax],edx
c0016980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016984:	83 ec 0c             	sub    esp,0xc
c0016987:	50                   	push   eax
c0016988:	e8 b9 cf ff ff       	call   c0013946 <Device::~Device()>
c001698d:	83 c4 10             	add    esp,0x10
c0016990:	90                   	nop
c0016991:	83 c4 0c             	add    esp,0xc
c0016994:	c3                   	ret    
c0016995:	90                   	nop

c0016996 <Video::~Video()>:
c0016996:	83 ec 0c             	sub    esp,0xc
c0016999:	83 ec 0c             	sub    esp,0xc
c001699c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169a0:	e8 cd ff ff ff       	call   c0016972 <Video::~Video()>
c00169a5:	83 c4 10             	add    esp,0x10
c00169a8:	83 ec 08             	sub    esp,0x8
c00169ab:	68 64 01 00 00       	push   0x164
c00169b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169b4:	e8 ec bb ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c00169b9:	83 c4 10             	add    esp,0x10
c00169bc:	83 c4 0c             	add    esp,0xc
c00169bf:	c3                   	ret    

c00169c0 <Video::isMonochrome()>:
c00169c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00169c4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00169ca:	c3                   	ret    
c00169cb:	90                   	nop

c00169cc <Video::getWidth()>:
c00169cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00169d0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00169d6:	c3                   	ret    
c00169d7:	90                   	nop

c00169d8 <Video::getHeight()>:
c00169d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00169dc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169e2:	c3                   	ret    
c00169e3:	90                   	nop

c00169e4 <Video::drawCursor(int, int, unsigned char*, int)>:
c00169e4:	55                   	push   ebp
c00169e5:	57                   	push   edi
c00169e6:	56                   	push   esi
c00169e7:	53                   	push   ebx
c00169e8:	83 ec 2c             	sub    esp,0x2c
c00169eb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00169ef:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00169f3:	83 f8 01             	cmp    eax,0x1
c00169f6:	19 c9                	sbb    ecx,ecx
c00169f8:	31 db                	xor    ebx,ebx
c00169fa:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00169fe:	89 cd                	mov    ebp,ecx
c0016a00:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016a08:	f7 d5                	not    ebp
c0016a0a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016a10:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016a14:	01 d8                	add    eax,ebx
c0016a16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a1a:	56                   	push   esi
c0016a1b:	e8 b8 ff ff ff       	call   c00169d8 <Video::getHeight()>
c0016a20:	59                   	pop    ecx
c0016a21:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016a25:	7e 70                	jle    c0016a97 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016a27:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016a2b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016a2f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016a32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016a36:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016a3a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016a41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a45:	89 f8                	mov    eax,edi
c0016a47:	83 c0 20             	add    eax,0x20
c0016a4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016a4e:	56                   	push   esi
c0016a4f:	e8 78 ff ff ff       	call   c00169cc <Video::getWidth()>
c0016a54:	5a                   	pop    edx
c0016a55:	39 c7                	cmp    edi,eax
c0016a57:	7d 34                	jge    c0016a8d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016a59:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016a5e:	74 05                	je     c0016a65 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016a60:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a62:	55                   	push   ebp
c0016a63:	eb 0d                	jmp    c0016a72 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016a65:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016a6a:	74 12                	je     c0016a7e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016a6c:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a72:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a76:	57                   	push   edi
c0016a77:	56                   	push   esi
c0016a78:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016a7b:	83 c4 10             	add    esp,0x10
c0016a7e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016a82:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016a86:	47                   	inc    edi
c0016a87:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016a8b:	75 c1                	jne    c0016a4e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016a8d:	43                   	inc    ebx
c0016a8e:	83 fb 20             	cmp    ebx,0x20
c0016a91:	0f 85 79 ff ff ff    	jne    c0016a10 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016a97:	83 c4 2c             	add    esp,0x2c
c0016a9a:	5b                   	pop    ebx
c0016a9b:	5e                   	pop    esi
c0016a9c:	5f                   	pop    edi
c0016a9d:	5d                   	pop    ebp
c0016a9e:	c3                   	ret    
c0016a9f:	90                   	nop

c0016aa0 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016aa0:	55                   	push   ebp
c0016aa1:	57                   	push   edi
c0016aa2:	56                   	push   esi
c0016aa3:	53                   	push   ebx
c0016aa4:	83 ec 28             	sub    esp,0x28
c0016aa7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016aab:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016aaf:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016ab3:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016ab7:	c1 e7 08             	shl    edi,0x8
c0016aba:	01 c7                	add    edi,eax
c0016abc:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016ac0:	c1 e0 08             	shl    eax,0x8
c0016ac3:	01 d0                	add    eax,edx
c0016ac5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ac9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016acd:	0f af c7             	imul   eax,edi
c0016ad0:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016ad7:	50                   	push   eax
c0016ad8:	e8 f7 89 ff ff       	call   c000f4d4 <malloc>
c0016add:	83 c4 10             	add    esp,0x10
c0016ae0:	89 c5                	mov    ebp,eax
c0016ae2:	85 c0                	test   eax,eax
c0016ae4:	75 15                	jne    c0016afb <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016ae6:	83 ec 0c             	sub    esp,0xc
c0016ae9:	68 c5 99 02 c0       	push   0xc00299c5
c0016aee:	e8 92 bb ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0016af3:	83 c4 10             	add    esp,0x10
c0016af6:	e9 1c 01 00 00       	jmp    c0016c17 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016afb:	be 12 00 00 00       	mov    esi,0x12
c0016b00:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016b04:	74 11                	je     c0016b17 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016b06:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016b0a:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016b0e:	c1 fe 03             	sar    esi,0x3
c0016b11:	0f af f0             	imul   esi,eax
c0016b14:	83 c6 12             	add    esi,0x12
c0016b17:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016b1b:	74 04                	je     c0016b21 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016b1d:	85 ff                	test   edi,edi
c0016b1f:	75 12                	jne    c0016b33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016b21:	83 ec 0c             	sub    esp,0xc
c0016b24:	68 dc 99 02 c0       	push   0xc00299dc
c0016b29:	e8 57 bb ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0016b2e:	e9 ce 00 00 00       	jmp    c0016c01 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016b33:	52                   	push   edx
c0016b34:	52                   	push   edx
c0016b35:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016b39:	50                   	push   eax
c0016b3a:	68 f1 99 02 c0       	push   0xc00299f1
c0016b3f:	e8 41 bb ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0016b44:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016b48:	83 c4 10             	add    esp,0x10
c0016b4b:	80 fa 02             	cmp    dl,0x2
c0016b4e:	0f 85 98 00 00 00    	jne    c0016bec <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016b54:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016b59:	75 10                	jne    c0016b6b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016b5b:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016b5f:	75 0a                	jne    c0016b6b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016b61:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016b64:	83 e8 18             	sub    eax,0x18
c0016b67:	a8 f7                	test   al,0xf7
c0016b69:	74 0a                	je     c0016b75 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016b6b:	83 ec 0c             	sub    esp,0xc
c0016b6e:	68 fe 99 02 c0       	push   0xc00299fe
c0016b73:	eb 7f                	jmp    c0016bf4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016b75:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016b7d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016b85:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016b89:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016b91:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016b95:	75 0c                	jne    c0016ba3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016b97:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016b9c:	c1 e0 18             	shl    eax,0x18
c0016b9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ba3:	41                   	inc    ecx
c0016ba4:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016ba9:	c1 e2 10             	shl    edx,0x10
c0016bac:	89 d0                	mov    eax,edx
c0016bae:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016bb3:	c1 e2 08             	shl    edx,0x8
c0016bb6:	09 c2                	or     edx,eax
c0016bb8:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016bbc:	09 c2                	or     edx,eax
c0016bbe:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016bc2:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016bc6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016bca:	c1 f8 03             	sar    eax,0x3
c0016bcd:	01 c6                	add    esi,eax
c0016bcf:	89 c8                	mov    eax,ecx
c0016bd1:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016bd5:	39 c7                	cmp    edi,eax
c0016bd7:	7f b0                	jg     c0016b89 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016bd9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016bdd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016be1:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016be4:	7e 22                	jle    c0016c08 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016be6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016bea:	eb 99                	jmp    c0016b85 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016bec:	50                   	push   eax
c0016bed:	50                   	push   eax
c0016bee:	52                   	push   edx
c0016bef:	68 0c 9a 02 c0       	push   0xc0029a0c
c0016bf4:	e8 8c ba ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0016bf9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016bfc:	e8 e3 88 ff ff       	call   c000f4e4 <free>
c0016c01:	83 c4 10             	add    esp,0x10
c0016c04:	31 ed                	xor    ebp,ebp
c0016c06:	eb 0f                	jmp    c0016c17 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016c08:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016c0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016c0f:	89 38                	mov    DWORD PTR [eax],edi
c0016c11:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016c15:	89 08                	mov    DWORD PTR [eax],ecx
c0016c17:	83 c4 1c             	add    esp,0x1c
c0016c1a:	89 e8                	mov    eax,ebp
c0016c1c:	5b                   	pop    ebx
c0016c1d:	5e                   	pop    esi
c0016c1e:	5f                   	pop    edi
c0016c1f:	5d                   	pop    ebp
c0016c20:	c3                   	ret    
c0016c21:	90                   	nop

c0016c22 <Video::putTGA(int, int, unsigned char*, int)>:
c0016c22:	55                   	push   ebp
c0016c23:	57                   	push   edi
c0016c24:	56                   	push   esi
c0016c25:	53                   	push   ebx
c0016c26:	83 ec 28             	sub    esp,0x28
c0016c29:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016c2d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c31:	50                   	push   eax
c0016c32:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c36:	50                   	push   eax
c0016c37:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016c3b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016c3f:	56                   	push   esi
c0016c40:	e8 5b fe ff ff       	call   c0016aa0 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016c45:	83 c4 20             	add    esp,0x20
c0016c48:	85 c0                	test   eax,eax
c0016c4a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016c4e:	74 35                	je     c0016c85 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016c50:	89 c7                	mov    edi,eax
c0016c52:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016c56:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016c5a:	39 d8                	cmp    eax,ebx
c0016c5c:	7e 27                	jle    c0016c85 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016c5e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c62:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c66:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016c6a:	39 e8                	cmp    eax,ebp
c0016c6c:	7e 14                	jle    c0016c82 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016c6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0016c70:	83 c7 04             	add    edi,0x4
c0016c73:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016c76:	53                   	push   ebx
c0016c77:	55                   	push   ebp
c0016c78:	45                   	inc    ebp
c0016c79:	56                   	push   esi
c0016c7a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016c7d:	83 c4 10             	add    esp,0x10
c0016c80:	eb e0                	jmp    c0016c62 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016c82:	43                   	inc    ebx
c0016c83:	eb cd                	jmp    c0016c52 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016c85:	83 c4 1c             	add    esp,0x1c
c0016c88:	5b                   	pop    ebx
c0016c89:	5e                   	pop    esi
c0016c8a:	5f                   	pop    edi
c0016c8b:	5d                   	pop    ebp
c0016c8c:	c3                   	ret    
c0016c8d:	90                   	nop

c0016c8e <ACPI::close(int, int, void*)>:
c0016c8e:	83 ec 1c             	sub    esp,0x1c
c0016c91:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016c99:	74 0a                	je     c0016ca5 <ACPI::close(int, int, void*)+0x17>
c0016c9b:	b8 00 00 00 00       	mov    eax,0x0
c0016ca0:	e9 9a 00 00 00       	jmp    c0016d3f <ACPI::close(int, int, void*)+0xb1>
c0016ca5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016caa:	75 37                	jne    c0016ce3 <ACPI::close(int, int, void*)+0x55>
c0016cac:	83 ec 0c             	sub    esp,0xc
c0016caf:	68 68 9a 02 c0       	push   0xc0029a68
c0016cb4:	e8 cc b9 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0016cb9:	83 c4 10             	add    esp,0x10
c0016cbc:	a1 e8 ce 02 c0       	mov    eax,ds:0xc002cee8
c0016cc1:	85 c0                	test   eax,eax
c0016cc3:	74 07                	je     c0016ccc <ACPI::close(int, int, void*)+0x3e>
c0016cc5:	a1 e8 ce 02 c0       	mov    eax,ds:0xc002cee8
c0016cca:	ff d0                	call   eax
c0016ccc:	83 ec 0c             	sub    esp,0xc
c0016ccf:	68 3c 9b 02 c0       	push   0xc0029b3c
c0016cd4:	e8 c6 2a 00 00       	call   c001979f <Krnl::panic(char const*)>
c0016cd9:	83 c4 10             	add    esp,0x10
c0016cdc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016ce1:	eb 5c                	jmp    c0016d3f <ACPI::close(int, int, void*)+0xb1>
c0016ce3:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016ce8:	75 50                	jne    c0016d3a <ACPI::close(int, int, void*)+0xac>
c0016cea:	a1 e4 ce 02 c0       	mov    eax,ds:0xc002cee4
c0016cef:	85 c0                	test   eax,eax
c0016cf1:	74 07                	je     c0016cfa <ACPI::close(int, int, void*)+0x6c>
c0016cf3:	a1 e4 ce 02 c0       	mov    eax,ds:0xc002cee4
c0016cf8:	ff d0                	call   eax
c0016cfa:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016cff:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016d04:	83 e0 02             	and    eax,0x2
c0016d07:	74 1c                	je     c0016d25 <ACPI::close(int, int, void*)+0x97>
c0016d09:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016d10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d14:	89 c2                	mov    edx,eax
c0016d16:	ec                   	in     al,dx
c0016d17:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016d1b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016d1f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016d23:	eb da                	jmp    c0016cff <ACPI::close(int, int, void*)+0x71>
c0016d25:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016d2c:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016d31:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016d35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016d39:	ee                   	out    dx,al
c0016d3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016d3f:	83 c4 1c             	add    esp,0x1c
c0016d42:	c3                   	ret    

c0016d43 <findRSDP()>:
c0016d43:	83 ec 1c             	sub    esp,0x1c
c0016d46:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0016d4b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016d51:	83 e0 04             	and    eax,0x4
c0016d54:	84 c0                	test   al,al
c0016d56:	75 07                	jne    c0016d5f <findRSDP()+0x1c>
c0016d58:	b8 00 00 00 00       	mov    eax,0x0
c0016d5d:	eb 6a                	jmp    c0016dc9 <findRSDP()+0x86>
c0016d5f:	a1 90 c8 02 c0       	mov    eax,ds:0xc002c890
c0016d64:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016d69:	7f 1b                	jg     c0016d86 <findRSDP()+0x43>
c0016d6b:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0016d70:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016d76:	83 e2 fb             	and    edx,0xfffffffb
c0016d79:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016d7f:	b8 00 00 00 00       	mov    eax,0x0
c0016d84:	eb 43                	jmp    c0016dc9 <findRSDP()+0x86>
c0016d86:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016d8e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016d96:	77 2c                	ja     c0016dc4 <findRSDP()+0x81>
c0016d98:	83 ec 04             	sub    esp,0x4
c0016d9b:	6a 08                	push   0x8
c0016d9d:	68 75 9a 02 c0       	push   0xc0029a75
c0016da2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016da6:	e8 47 98 fe ff       	call   c00005f2 <memcmp>
c0016dab:	83 c4 10             	add    esp,0x10
c0016dae:	85 c0                	test   eax,eax
c0016db0:	0f 94 c0             	sete   al
c0016db3:	84 c0                	test   al,al
c0016db5:	74 06                	je     c0016dbd <findRSDP()+0x7a>
c0016db7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dbb:	eb 0c                	jmp    c0016dc9 <findRSDP()+0x86>
c0016dbd:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016dc2:	eb ca                	jmp    c0016d8e <findRSDP()+0x4b>
c0016dc4:	b8 00 00 00 00       	mov    eax,0x0
c0016dc9:	83 c4 1c             	add    esp,0x1c
c0016dcc:	c3                   	ret    

c0016dcd <loadACPITables(unsigned char*)>:
c0016dcd:	56                   	push   esi
c0016dce:	53                   	push   ebx
c0016dcf:	83 ec 44             	sub    esp,0x44
c0016dd2:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0016dd7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016ddd:	83 e0 04             	and    eax,0x4
c0016de0:	84 c0                	test   al,al
c0016de2:	0f 84 05 02 00 00    	je     c0016fed <loadACPITables(unsigned char*)+0x220>
c0016de8:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c0016ded:	84 c0                	test   al,al
c0016def:	74 75                	je     c0016e66 <loadACPITables(unsigned char*)+0x99>
c0016df1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016df5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016df9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016dfd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016e00:	83 e8 24             	sub    eax,0x24
c0016e03:	c1 e8 03             	shr    eax,0x3
c0016e06:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016e0a:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016e12:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e16:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016e1a:	0f 8d b2 00 00 00    	jge    c0016ed2 <loadACPITables(unsigned char*)+0x105>
c0016e20:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e24:	83 c0 24             	add    eax,0x24
c0016e27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016e2b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016e2f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016e33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e37:	c1 e0 03             	shl    eax,0x3
c0016e3a:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016e3e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e42:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016e45:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e47:	89 c1                	mov    ecx,eax
c0016e49:	a1 ec ce 02 c0       	mov    eax,ds:0xc002ceec
c0016e4e:	8d 50 01             	lea    edx,[eax+0x1]
c0016e51:	89 15 ec ce 02 c0    	mov    DWORD PTR ds:0xc002ceec,edx
c0016e57:	89 ca                	mov    edx,ecx
c0016e59:	89 14 c5 04 cf 02 c0 	mov    DWORD PTR [eax*8-0x3ffd30fc],edx
c0016e60:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016e64:	eb ac                	jmp    c0016e12 <loadACPITables(unsigned char*)+0x45>
c0016e66:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016e6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016e75:	83 e8 24             	sub    eax,0x24
c0016e78:	c1 e8 02             	shr    eax,0x2
c0016e7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e7f:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016e87:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016e8b:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016e8f:	7d 41                	jge    c0016ed2 <loadACPITables(unsigned char*)+0x105>
c0016e91:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e95:	83 c0 24             	add    eax,0x24
c0016e98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016ea0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ea4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ea8:	c1 e0 02             	shl    eax,0x2
c0016eab:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016eaf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016eb3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016eb5:	a1 ec ce 02 c0       	mov    eax,ds:0xc002ceec
c0016eba:	8d 50 01             	lea    edx,[eax+0x1]
c0016ebd:	89 15 ec ce 02 c0    	mov    DWORD PTR ds:0xc002ceec,edx
c0016ec3:	89 ca                	mov    edx,ecx
c0016ec5:	89 14 c5 04 cf 02 c0 	mov    DWORD PTR [eax*8-0x3ffd30fc],edx
c0016ecc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016ed0:	eb b5                	jmp    c0016e87 <loadACPITables(unsigned char*)+0xba>
c0016ed2:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016eda:	a1 ec ce 02 c0       	mov    eax,ds:0xc002ceec
c0016edf:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016ee3:	0f 8d 05 01 00 00    	jge    c0016fee <loadACPITables(unsigned char*)+0x221>
c0016ee9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016eed:	8b 04 c5 04 cf 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd30fc]
c0016ef4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016efc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f04:	25 ff 0f 00 00       	and    eax,0xfff
c0016f09:	89 c6                	mov    esi,eax
c0016f0b:	e8 15 a9 ff ff       	call   c0011825 <Virt::getAKernelVAS()>
c0016f10:	89 c3                	mov    ebx,eax
c0016f12:	83 ec 0c             	sub    esp,0xc
c0016f15:	6a 01                	push   0x1
c0016f17:	e8 79 a7 ff ff       	call   c0011695 <Virt::allocateKernelVirtualPages(int)>
c0016f1c:	83 c4 10             	add    esp,0x10
c0016f1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f23:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016f29:	83 ec 0c             	sub    esp,0xc
c0016f2c:	6a 01                	push   0x1
c0016f2e:	6a 01                	push   0x1
c0016f30:	50                   	push   eax
c0016f31:	52                   	push   edx
c0016f32:	53                   	push   ebx
c0016f33:	e8 1c b1 ff ff       	call   c0012054 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016f38:	83 c4 20             	add    esp,0x20
c0016f3b:	09 f0                	or     eax,esi
c0016f3d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f41:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f45:	c1 e0 03             	shl    eax,0x3
c0016f48:	05 00 cf 02 c0       	add    eax,0xc002cf00
c0016f4d:	83 ec 04             	sub    esp,0x4
c0016f50:	6a 04                	push   0x4
c0016f52:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f56:	50                   	push   eax
c0016f57:	e8 f9 96 fe ff       	call   c0000655 <memcpy>
c0016f5c:	83 c4 10             	add    esp,0x10
c0016f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016f66:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f6e:	05 00 10 00 00       	add    eax,0x1000
c0016f73:	c1 e8 0c             	shr    eax,0xc
c0016f76:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f7e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f85:	25 ff 0f 00 00       	and    eax,0xfff
c0016f8a:	89 c6                	mov    esi,eax
c0016f8c:	e8 94 a8 ff ff       	call   c0011825 <Virt::getAKernelVAS()>
c0016f91:	89 c3                	mov    ebx,eax
c0016f93:	83 ec 0c             	sub    esp,0xc
c0016f96:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016f9a:	e8 f6 a6 ff ff       	call   c0011695 <Virt::allocateKernelVirtualPages(int)>
c0016f9f:	83 c4 10             	add    esp,0x10
c0016fa2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016fa6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016fac:	83 ec 0c             	sub    esp,0xc
c0016faf:	6a 01                	push   0x1
c0016fb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016fb5:	50                   	push   eax
c0016fb6:	52                   	push   edx
c0016fb7:	53                   	push   ebx
c0016fb8:	e8 97 b0 ff ff       	call   c0012054 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016fbd:	83 c4 20             	add    esp,0x20
c0016fc0:	09 f0                	or     eax,esi
c0016fc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016fc6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016fc9:	83 ec 0c             	sub    esp,0xc
c0016fcc:	50                   	push   eax
c0016fcd:	e8 27 aa ff ff       	call   c00119f9 <Virt::freeKernelVirtualPages(unsigned long)>
c0016fd2:	83 c4 10             	add    esp,0x10
c0016fd5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016fdd:	89 14 c5 04 cf 02 c0 	mov    DWORD PTR [eax*8-0x3ffd30fc],edx
c0016fe4:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0016fe8:	e9 ed fe ff ff       	jmp    c0016eda <loadACPITables(unsigned char*)+0x10d>
c0016fed:	90                   	nop
c0016fee:	83 c4 44             	add    esp,0x44
c0016ff1:	5b                   	pop    ebx
c0016ff2:	5e                   	pop    esi
c0016ff3:	c3                   	ret    

c0016ff4 <findRSDT(unsigned char*)>:
c0016ff4:	56                   	push   esi
c0016ff5:	53                   	push   ebx
c0016ff6:	83 ec 44             	sub    esp,0x44
c0016ff9:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0016ffe:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017004:	83 e0 04             	and    eax,0x4
c0017007:	84 c0                	test   al,al
c0017009:	75 0a                	jne    c0017015 <findRSDT(unsigned char*)+0x21>
c001700b:	b8 00 00 00 00       	mov    eax,0x0
c0017010:	e9 f7 00 00 00       	jmp    c001710c <findRSDT(unsigned char*)+0x118>
c0017015:	83 ec 04             	sub    esp,0x4
c0017018:	6a 24                	push   0x24
c001701a:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001701e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017022:	50                   	push   eax
c0017023:	e8 2d 96 fe ff       	call   c0000655 <memcpy>
c0017028:	83 c4 10             	add    esp,0x10
c001702b:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001702f:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017033:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001703b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001703f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017043:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017047:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001704b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001704f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017053:	25 ff 0f 00 00       	and    eax,0xfff
c0017058:	89 c6                	mov    esi,eax
c001705a:	e8 c6 a7 ff ff       	call   c0011825 <Virt::getAKernelVAS()>
c001705f:	89 c3                	mov    ebx,eax
c0017061:	83 ec 0c             	sub    esp,0xc
c0017064:	6a 02                	push   0x2
c0017066:	e8 2a a6 ff ff       	call   c0011695 <Virt::allocateKernelVirtualPages(int)>
c001706b:	83 c4 10             	add    esp,0x10
c001706e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017072:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017078:	83 ec 0c             	sub    esp,0xc
c001707b:	6a 01                	push   0x1
c001707d:	6a 02                	push   0x2
c001707f:	50                   	push   eax
c0017080:	52                   	push   edx
c0017081:	53                   	push   ebx
c0017082:	e8 cd af ff ff       	call   c0012054 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017087:	83 c4 20             	add    esp,0x20
c001708a:	09 f0                	or     eax,esi
c001708c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017090:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017094:	25 ff 0f 00 00       	and    eax,0xfff
c0017099:	89 c6                	mov    esi,eax
c001709b:	e8 85 a7 ff ff       	call   c0011825 <Virt::getAKernelVAS()>
c00170a0:	89 c3                	mov    ebx,eax
c00170a2:	83 ec 0c             	sub    esp,0xc
c00170a5:	6a 02                	push   0x2
c00170a7:	e8 e9 a5 ff ff       	call   c0011695 <Virt::allocateKernelVirtualPages(int)>
c00170ac:	83 c4 10             	add    esp,0x10
c00170af:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00170b3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00170b9:	83 ec 0c             	sub    esp,0xc
c00170bc:	6a 01                	push   0x1
c00170be:	6a 02                	push   0x2
c00170c0:	50                   	push   eax
c00170c1:	52                   	push   edx
c00170c2:	53                   	push   ebx
c00170c3:	e8 8c af ff ff       	call   c0012054 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00170c8:	83 c4 20             	add    esp,0x20
c00170cb:	09 f0                	or     eax,esi
c00170cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00170d1:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00170d6:	75 11                	jne    c00170e9 <findRSDT(unsigned char*)+0xf5>
c00170d8:	c6 05 00 d1 02 c0 00 	mov    BYTE PTR ds:0xc002d100,0x0
c00170df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00170e3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00170e7:	eb 1f                	jmp    c0017108 <findRSDT(unsigned char*)+0x114>
c00170e9:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00170ee:	75 11                	jne    c0017101 <findRSDT(unsigned char*)+0x10d>
c00170f0:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c00170f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170fb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00170ff:	eb 07                	jmp    c0017108 <findRSDT(unsigned char*)+0x114>
c0017101:	b8 00 00 00 00       	mov    eax,0x0
c0017106:	eb 04                	jmp    c001710c <findRSDT(unsigned char*)+0x118>
c0017108:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001710c:	83 c4 44             	add    esp,0x44
c001710f:	5b                   	pop    ebx
c0017110:	5e                   	pop    esi
c0017111:	c3                   	ret    

c0017112 <findDataTable(unsigned char*, char*)>:
c0017112:	83 ec 1c             	sub    esp,0x1c
c0017115:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001711a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017120:	83 e0 04             	and    eax,0x4
c0017123:	84 c0                	test   al,al
c0017125:	75 07                	jne    c001712e <findDataTable(unsigned char*, char*)+0x1c>
c0017127:	b8 00 00 00 00       	mov    eax,0x0
c001712c:	eb 7c                	jmp    c00171aa <findDataTable(unsigned char*, char*)+0x98>
c001712e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017136:	a1 ec ce 02 c0       	mov    eax,ds:0xc002ceec
c001713b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001713f:	7d 3a                	jge    c001717b <findDataTable(unsigned char*, char*)+0x69>
c0017141:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017145:	c1 e0 03             	shl    eax,0x3
c0017148:	05 00 cf 02 c0       	add    eax,0xc002cf00
c001714d:	83 ec 04             	sub    esp,0x4
c0017150:	6a 04                	push   0x4
c0017152:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017156:	50                   	push   eax
c0017157:	e8 96 94 fe ff       	call   c00005f2 <memcmp>
c001715c:	83 c4 10             	add    esp,0x10
c001715f:	85 c0                	test   eax,eax
c0017161:	0f 94 c0             	sete   al
c0017164:	84 c0                	test   al,al
c0017166:	74 0d                	je     c0017175 <findDataTable(unsigned char*, char*)+0x63>
c0017168:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001716c:	8b 04 c5 04 cf 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd30fc]
c0017173:	eb 35                	jmp    c00171aa <findDataTable(unsigned char*, char*)+0x98>
c0017175:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017179:	eb bb                	jmp    c0017136 <findDataTable(unsigned char*, char*)+0x24>
c001717b:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c0017180:	84 c0                	test   al,al
c0017182:	74 07                	je     c001718b <findDataTable(unsigned char*, char*)+0x79>
c0017184:	b8 58 00 00 00       	mov    eax,0x58
c0017189:	eb 05                	jmp    c0017190 <findDataTable(unsigned char*, char*)+0x7e>
c001718b:	b8 52 00 00 00       	mov    eax,0x52
c0017190:	83 ec 04             	sub    esp,0x4
c0017193:	50                   	push   eax
c0017194:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017198:	68 60 9b 02 c0       	push   0xc0029b60
c001719d:	e8 e3 b4 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00171a2:	83 c4 10             	add    esp,0x10
c00171a5:	b8 00 00 00 00       	mov    eax,0x0
c00171aa:	83 c4 1c             	add    esp,0x1c
c00171ad:	c3                   	ret    

c00171ae <scanMADT()>:
c00171ae:	53                   	push   ebx
c00171af:	83 ec 38             	sub    esp,0x38
c00171b2:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c00171b7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00171bd:	83 e0 04             	and    eax,0x4
c00171c0:	84 c0                	test   al,al
c00171c2:	0f 84 63 04 00 00    	je     c001762b <scanMADT()+0x47d>
c00171c8:	e8 76 fb ff ff       	call   c0016d43 <findRSDP()>
c00171cd:	a3 0c d1 02 c0       	mov    ds:0xc002d10c,eax
c00171d2:	a1 0c d1 02 c0       	mov    eax,ds:0xc002d10c
c00171d7:	85 c0                	test   eax,eax
c00171d9:	75 19                	jne    c00171f4 <scanMADT()+0x46>
c00171db:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c00171e0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00171e6:	83 e2 fb             	and    edx,0xfffffffb
c00171e9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00171ef:	e9 3b 04 00 00       	jmp    c001762f <scanMADT()+0x481>
c00171f4:	a1 0c d1 02 c0       	mov    eax,ds:0xc002d10c
c00171f9:	83 ec 0c             	sub    esp,0xc
c00171fc:	50                   	push   eax
c00171fd:	e8 f2 fd ff ff       	call   c0016ff4 <findRSDT(unsigned char*)>
c0017202:	83 c4 10             	add    esp,0x10
c0017205:	a3 08 d1 02 c0       	mov    ds:0xc002d108,eax
c001720a:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c001720f:	85 c0                	test   eax,eax
c0017211:	75 19                	jne    c001722c <scanMADT()+0x7e>
c0017213:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0017218:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001721e:	83 e2 fb             	and    edx,0xfffffffb
c0017221:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017227:	e9 03 04 00 00       	jmp    c001762f <scanMADT()+0x481>
c001722c:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0017231:	83 ec 0c             	sub    esp,0xc
c0017234:	50                   	push   eax
c0017235:	e8 93 fb ff ff       	call   c0016dcd <loadACPITables(unsigned char*)>
c001723a:	83 c4 10             	add    esp,0x10
c001723d:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0017242:	83 ec 08             	sub    esp,0x8
c0017245:	68 7e 9a 02 c0       	push   0xc0029a7e
c001724a:	50                   	push   eax
c001724b:	e8 c2 fe ff ff       	call   c0017112 <findDataTable(unsigned char*, char*)>
c0017250:	83 c4 10             	add    esp,0x10
c0017253:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017257:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001725c:	75 19                	jne    c0017277 <scanMADT()+0xc9>
c001725e:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0017263:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017269:	83 e2 fe             	and    edx,0xfffffffe
c001726c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017272:	e9 b8 03 00 00       	jmp    c001762f <scanMADT()+0x481>
c0017277:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001727f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017283:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017286:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001728a:	0f 87 9f 03 00 00    	ja     c001762f <scanMADT()+0x481>
c0017290:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017298:	0f 87 91 03 00 00    	ja     c001762f <scanMADT()+0x481>
c001729e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172a2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00172a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172aa:	8d 50 01             	lea    edx,[eax+0x1]
c00172ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00172b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00172b5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00172b9:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00172bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172c1:	8d 50 01             	lea    edx,[eax+0x1]
c00172c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00172c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00172cc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00172d0:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00172d4:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00172d9:	0f 86 4f 03 00 00    	jbe    c001762e <scanMADT()+0x480>
c00172df:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00172e4:	75 57                	jne    c001733d <scanMADT()+0x18f>
c00172e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172ea:	8d 50 01             	lea    edx,[eax+0x1]
c00172ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00172f1:	8a 15 00 d3 02 c0    	mov    dl,BYTE PTR ds:0xc002d300
c00172f7:	0f b6 d2             	movzx  edx,dl
c00172fa:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00172fe:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017302:	88 82 40 d3 02 c0    	mov    BYTE PTR [edx-0x3ffd2cc0],al
c0017308:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001730c:	8d 50 01             	lea    edx,[eax+0x1]
c001730f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017313:	8a 15 00 d3 02 c0    	mov    dl,BYTE PTR ds:0xc002d300
c0017319:	8d 4a 01             	lea    ecx,[edx+0x1]
c001731c:	88 0d 00 d3 02 c0    	mov    BYTE PTR ds:0xc002d300,cl
c0017322:	0f b6 d2             	movzx  edx,dl
c0017325:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017329:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001732d:	88 82 20 d3 02 c0    	mov    BYTE PTR [edx-0x3ffd2ce0],al
c0017333:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017338:	e9 da 02 00 00       	jmp    c0017617 <scanMADT()+0x469>
c001733d:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017342:	0f 85 14 01 00 00    	jne    c001745c <scanMADT()+0x2ae>
c0017348:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001734c:	8d 50 01             	lea    edx,[eax+0x1]
c001734f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017353:	8a 15 c0 d1 02 c0    	mov    dl,BYTE PTR ds:0xc002d1c0
c0017359:	0f b6 d2             	movzx  edx,dl
c001735c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017360:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017364:	88 82 e0 d1 02 c0    	mov    BYTE PTR [edx-0x3ffd2e20],al
c001736a:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001736e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017372:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017376:	01 d0                	add    eax,edx
c0017378:	83 c0 2c             	add    eax,0x2c
c001737b:	8a 00                	mov    al,BYTE PTR [eax]
c001737d:	0f b6 d0             	movzx  edx,al
c0017380:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017384:	8d 48 01             	lea    ecx,[eax+0x1]
c0017387:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001738b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001738f:	0f b6 c0             	movzx  eax,al
c0017392:	c1 e0 08             	shl    eax,0x8
c0017395:	89 d1                	mov    ecx,edx
c0017397:	09 c1                	or     ecx,eax
c0017399:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001739d:	8d 50 02             	lea    edx,[eax+0x2]
c00173a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173a4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00173a8:	0f b6 c0             	movzx  eax,al
c00173ab:	c1 e0 10             	shl    eax,0x10
c00173ae:	09 c1                	or     ecx,eax
c00173b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173b4:	8d 50 03             	lea    edx,[eax+0x3]
c00173b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173bb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00173bf:	0f b6 c0             	movzx  eax,al
c00173c2:	c1 e0 18             	shl    eax,0x18
c00173c5:	09 c1                	or     ecx,eax
c00173c7:	89 ca                	mov    edx,ecx
c00173c9:	a0 c0 d1 02 c0       	mov    al,ds:0xc002d1c0
c00173ce:	0f b6 c0             	movzx  eax,al
c00173d1:	89 14 85 00 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2e00],edx
c00173d8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00173dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173e5:	01 d0                	add    eax,edx
c00173e7:	83 c0 2c             	add    eax,0x2c
c00173ea:	8a 00                	mov    al,BYTE PTR [eax]
c00173ec:	0f b6 d0             	movzx  edx,al
c00173ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173f3:	8d 48 01             	lea    ecx,[eax+0x1]
c00173f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173fa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00173fe:	0f b6 c0             	movzx  eax,al
c0017401:	c1 e0 08             	shl    eax,0x8
c0017404:	89 d1                	mov    ecx,edx
c0017406:	09 c1                	or     ecx,eax
c0017408:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001740c:	8d 50 02             	lea    edx,[eax+0x2]
c001740f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017413:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017417:	0f b6 c0             	movzx  eax,al
c001741a:	c1 e0 10             	shl    eax,0x10
c001741d:	09 c1                	or     ecx,eax
c001741f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017423:	8d 50 03             	lea    edx,[eax+0x3]
c0017426:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001742a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001742e:	0f b6 c0             	movzx  eax,al
c0017431:	c1 e0 18             	shl    eax,0x18
c0017434:	09 c1                	or     ecx,eax
c0017436:	89 ca                	mov    edx,ecx
c0017438:	a0 c0 d1 02 c0       	mov    al,ds:0xc002d1c0
c001743d:	0f b6 c0             	movzx  eax,al
c0017440:	89 14 85 80 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2d80],edx
c0017447:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001744c:	a0 c0 d1 02 c0       	mov    al,ds:0xc002d1c0
c0017451:	40                   	inc    eax
c0017452:	a2 c0 d1 02 c0       	mov    ds:0xc002d1c0,al
c0017457:	e9 bb 01 00 00       	jmp    c0017617 <scanMADT()+0x469>
c001745c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017461:	0f 85 e9 00 00 00    	jne    c0017550 <scanMADT()+0x3a2>
c0017467:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001746b:	8d 50 01             	lea    edx,[eax+0x1]
c001746e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017472:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017476:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001747a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001747e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017482:	8d 50 01             	lea    edx,[eax+0x1]
c0017485:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017489:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001748d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017491:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017495:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017499:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001749d:	01 d0                	add    eax,edx
c001749f:	83 c0 2c             	add    eax,0x2c
c00174a2:	8a 00                	mov    al,BYTE PTR [eax]
c00174a4:	0f b6 d0             	movzx  edx,al
c00174a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174ab:	8d 48 01             	lea    ecx,[eax+0x1]
c00174ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174b2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00174b6:	0f b6 c0             	movzx  eax,al
c00174b9:	c1 e0 08             	shl    eax,0x8
c00174bc:	89 d1                	mov    ecx,edx
c00174be:	09 c1                	or     ecx,eax
c00174c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174c4:	8d 50 02             	lea    edx,[eax+0x2]
c00174c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174cb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174cf:	0f b6 c0             	movzx  eax,al
c00174d2:	c1 e0 10             	shl    eax,0x10
c00174d5:	09 c1                	or     ecx,eax
c00174d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174db:	8d 50 03             	lea    edx,[eax+0x3]
c00174de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174e2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174e6:	0f b6 c0             	movzx  eax,al
c00174e9:	c1 e0 18             	shl    eax,0x18
c00174ec:	09 c8                	or     eax,ecx
c00174ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00174f2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00174f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174ff:	01 d0                	add    eax,edx
c0017501:	83 c0 2c             	add    eax,0x2c
c0017504:	8a 00                	mov    al,BYTE PTR [eax]
c0017506:	0f b6 c0             	movzx  eax,al
c0017509:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001750d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017510:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017514:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017518:	0f b6 d2             	movzx  edx,dl
c001751b:	c1 e2 08             	shl    edx,0x8
c001751e:	09 d0                	or     eax,edx
c0017520:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017525:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001752a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001752f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017533:	88 90 a0 ba 02 c0    	mov    BYTE PTR [eax-0x3ffd4560],dl
c0017539:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001753e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017543:	66 89 84 12 a0 d1 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd2e60],ax
c001754b:	e9 c7 00 00 00       	jmp    c0017617 <scanMADT()+0x469>
c0017550:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017555:	0f 85 b0 00 00 00    	jne    c001760b <scanMADT()+0x45d>
c001755b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001755f:	8d 50 01             	lea    edx,[eax+0x1]
c0017562:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017566:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001756a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001756e:	0f b6 c0             	movzx  eax,al
c0017571:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017575:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017579:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001757d:	01 d0                	add    eax,edx
c001757f:	83 c0 2c             	add    eax,0x2c
c0017582:	8a 00                	mov    al,BYTE PTR [eax]
c0017584:	0f b6 d0             	movzx  edx,al
c0017587:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001758b:	8d 48 01             	lea    ecx,[eax+0x1]
c001758e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017592:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017596:	0f b6 c0             	movzx  eax,al
c0017599:	c1 e0 08             	shl    eax,0x8
c001759c:	09 d0                	or     eax,edx
c001759e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175a2:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00175a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175ab:	8d 50 01             	lea    edx,[eax+0x1]
c00175ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175b6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00175ba:	0f b6 c0             	movzx  eax,al
c00175bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c5:	c1 e0 08             	shl    eax,0x8
c00175c8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00175cc:	89 c1                	mov    ecx,eax
c00175ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175d2:	c1 e0 18             	shl    eax,0x18
c00175d5:	89 c3                	mov    ebx,eax
c00175d7:	a1 10 d1 02 c0       	mov    eax,ds:0xc002d110
c00175dc:	8d 50 01             	lea    edx,[eax+0x1]
c00175df:	89 15 10 d1 02 c0    	mov    DWORD PTR ds:0xc002d110,edx
c00175e5:	09 d9                	or     ecx,ebx
c00175e7:	89 ca                	mov    edx,ecx
c00175e9:	89 14 85 20 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2ee0],edx
c00175f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00175f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00175f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175fc:	68 90 9b 02 c0       	push   0xc0029b90
c0017601:	e8 7f b0 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0017606:	83 c4 10             	add    esp,0x10
c0017609:	eb 0c                	jmp    c0017617 <scanMADT()+0x469>
c001760b:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017610:	75 05                	jne    c0017617 <scanMADT()+0x469>
c0017612:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017617:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001761c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017620:	01 d0                	add    eax,edx
c0017622:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017626:	e9 54 fc ff ff       	jmp    c001727f <scanMADT()+0xd1>
c001762b:	90                   	nop
c001762c:	eb 01                	jmp    c001762f <scanMADT()+0x481>
c001762e:	90                   	nop
c001762f:	83 c4 38             	add    esp,0x38
c0017632:	5b                   	pop    ebx
c0017633:	c3                   	ret    

c0017634 <ACPI::ACPI()>:
c0017634:	83 ec 0c             	sub    esp,0xc
c0017637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001763b:	83 ec 08             	sub    esp,0x8
c001763e:	68 83 9a 02 c0       	push   0xc0029a83
c0017643:	50                   	push   eax
c0017644:	e8 1b c6 ff ff       	call   c0013c64 <Device::Device(char const*)>
c0017649:	83 c4 10             	add    esp,0x10
c001764c:	ba 68 9c 02 c0       	mov    edx,0xc0029c68
c0017651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017655:	89 10                	mov    DWORD PTR [eax],edx
c0017657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001765b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017666:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0017670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017674:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c001767e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017682:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0017689:	e8 20 fb ff ff       	call   c00171ae <scanMADT()>
c001768e:	90                   	nop
c001768f:	83 c4 0c             	add    esp,0xc
c0017692:	c3                   	ret    
c0017693:	90                   	nop

c0017694 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017694:	83 ec 2c             	sub    esp,0x2c
c0017697:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001769b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001769f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00176a3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00176a7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00176ac:	88 d0                	mov    al,dl
c00176ae:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00176b2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00176b7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00176bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176c3:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00176c9:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00176cd:	0f 8d 97 00 00 00    	jge    c001776a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00176d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00176db:	83 c2 2a             	add    edx,0x2a
c00176de:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00176e2:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00176e7:	75 78                	jne    c0017761 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00176e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00176f1:	83 c2 2a             	add    edx,0x2a
c00176f4:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00176f8:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00176fc:	75 63                	jne    c0017761 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00176fe:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017703:	74 3a                	je     c001773f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017705:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017709:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001770d:	83 c2 2a             	add    edx,0x2a
c0017710:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017714:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017718:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001771b:	39 c2                	cmp    edx,eax
c001771d:	74 10                	je     c001772f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001771f:	83 ec 0c             	sub    esp,0xc
c0017722:	68 cc 9b 02 c0       	push   0xc0029bcc
c0017727:	e8 73 20 00 00       	call   c001979f <Krnl::panic(char const*)>
c001772c:	83 c4 10             	add    esp,0x10
c001772f:	83 ec 0c             	sub    esp,0xc
c0017732:	68 88 9a 02 c0       	push   0xc0029a88
c0017737:	e8 63 20 00 00       	call   c001979f <Krnl::panic(char const*)>
c001773c:	83 c4 10             	add    esp,0x10
c001773f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017743:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017747:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001774b:	83 c2 2a             	add    edx,0x2a
c001774e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017752:	8b 02                	mov    eax,DWORD PTR [edx]
c0017754:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017757:	89 01                	mov    DWORD PTR [ecx],eax
c0017759:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001775c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017761:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017765:	e9 55 ff ff ff       	jmp    c00176bf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001776a:	90                   	nop
c001776b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001776f:	83 c4 2c             	add    esp,0x2c
c0017772:	c2 04 00             	ret    0x4
c0017775:	90                   	nop

c0017776 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017776:	56                   	push   esi
c0017777:	53                   	push   ebx
c0017778:	83 ec 14             	sub    esp,0x14
c001777b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001777f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017783:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017787:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001778c:	88 c8                	mov    al,cl
c001778e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017792:	88 d0                	mov    al,dl
c0017794:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017798:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001779c:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c00177a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177a6:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c00177ac:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c00177b1:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00177b6:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00177bb:	83 ec 04             	sub    esp,0x4
c00177be:	56                   	push   esi
c00177bf:	53                   	push   ebx
c00177c0:	51                   	push   ecx
c00177c1:	52                   	push   edx
c00177c2:	50                   	push   eax
c00177c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00177c7:	68 fc 9b 02 c0       	push   0xc0029bfc
c00177cc:	e8 b4 ae ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00177d1:	83 c4 20             	add    esp,0x20
c00177d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177d8:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00177de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177e2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00177e5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00177e9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00177ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177f1:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00177f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00177fb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00177fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017802:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017807:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001780b:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017811:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017815:	8d 48 01             	lea    ecx,[eax+0x1]
c0017818:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001781c:	83 c2 2a             	add    edx,0x2a
c001781f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017823:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017827:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001782d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017831:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017834:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017838:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001783c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017840:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017846:	8d 50 01             	lea    edx,[eax+0x1]
c0017849:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001784d:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0017853:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017857:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001785d:	3d 00 08 00 00       	cmp    eax,0x800
c0017862:	75 10                	jne    c0017874 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0017864:	83 ec 0c             	sub    esp,0xc
c0017867:	68 97 9a 02 c0       	push   0xc0029a97
c001786c:	e8 2e 1f 00 00       	call   c001979f <Krnl::panic(char const*)>
c0017871:	83 c4 10             	add    esp,0x10
c0017874:	90                   	nop
c0017875:	83 c4 14             	add    esp,0x14
c0017878:	5b                   	pop    ebx
c0017879:	5e                   	pop    esi
c001787a:	c3                   	ret    
c001787b:	90                   	nop

c001787c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001787c:	b8 00 00 00 00       	mov    eax,0x0
c0017881:	c3                   	ret    

c0017882 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017882:	83 ec 1c             	sub    esp,0x1c
c0017885:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017889:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001788c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017890:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0017895:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001789a:	83 ec 08             	sub    esp,0x8
c001789d:	52                   	push   edx
c001789e:	50                   	push   eax
c001789f:	e8 48 72 ff ff       	call   c000eaec <Computer::readCMOS(unsigned char)>
c00178a4:	83 c4 10             	add    esp,0x10
c00178a7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00178ab:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c00178b0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00178b5:	83 ec 04             	sub    esp,0x4
c00178b8:	6a 01                	push   0x1
c00178ba:	52                   	push   edx
c00178bb:	50                   	push   eax
c00178bc:	e8 41 73 ff ff       	call   c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>
c00178c1:	83 c4 10             	add    esp,0x10
c00178c4:	90                   	nop
c00178c5:	83 c4 1c             	add    esp,0x1c
c00178c8:	c3                   	ret    
c00178c9:	90                   	nop

c00178ca <ACPI::open(int, int, void*)>:
c00178ca:	53                   	push   ebx
c00178cb:	83 ec 28             	sub    esp,0x28
c00178ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178d2:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00178d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178dd:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00178e3:	84 c0                	test   al,al
c00178e5:	74 67                	je     c001794e <ACPI::open(int, int, void*)+0x84>
c00178e7:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c00178ef:	83 ec 0c             	sub    esp,0xc
c00178f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178f6:	e8 d9 7b ff ff       	call   c000f4d4 <malloc>
c00178fb:	83 c4 10             	add    esp,0x10
c00178fe:	89 c3                	mov    ebx,eax
c0017900:	83 ec 0c             	sub    esp,0xc
c0017903:	53                   	push   ebx
c0017904:	e8 47 9e 00 00       	call   c0021750 <PCI::PCI()>
c0017909:	83 c4 10             	add    esp,0x10
c001790c:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0017910:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017914:	83 ec 08             	sub    esp,0x8
c0017917:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001791b:	50                   	push   eax
c001791c:	e8 53 c1 ff ff       	call   c0013a74 <Device::addChild(Device*)>
c0017921:	83 c4 10             	add    esp,0x10
c0017924:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017928:	8b 00                	mov    eax,DWORD PTR [eax]
c001792a:	83 c0 08             	add    eax,0x8
c001792d:	8b 00                	mov    eax,DWORD PTR [eax]
c001792f:	6a 00                	push   0x0
c0017931:	6a 00                	push   0x0
c0017933:	6a 00                	push   0x0
c0017935:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017939:	ff d0                	call   eax
c001793b:	83 c4 10             	add    esp,0x10
c001793e:	83 ec 0c             	sub    esp,0xc
c0017941:	68 b4 9a 02 c0       	push   0xc0029ab4
c0017946:	e8 3a ad ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001794b:	83 c4 10             	add    esp,0x10
c001794e:	83 ec 0c             	sub    esp,0xc
c0017951:	68 bf 9a 02 c0       	push   0xc0029abf
c0017956:	e8 9f 41 00 00       	call   c001bafa <Thr::loadKernelSymbolTable(char const*)>
c001795b:	83 c4 10             	add    esp,0x10
c001795e:	8b 1d 48 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c848
c0017964:	83 ec 08             	sub    esp,0x8
c0017967:	6a 01                	push   0x1
c0017969:	68 dd 9a 02 c0       	push   0xc0029add
c001796e:	e8 47 4c 00 00       	call   c001c5ba <Thr::loadDLL(char const*, bool)>
c0017973:	83 c4 10             	add    esp,0x10
c0017976:	83 ec 08             	sub    esp,0x8
c0017979:	53                   	push   ebx
c001797a:	50                   	push   eax
c001797b:	e8 49 4e 00 00       	call   c001c7c9 <Thr::executeDLL(unsigned long, void*)>
c0017980:	83 c4 10             	add    esp,0x10
c0017983:	8b 1d 48 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c848
c0017989:	83 ec 08             	sub    esp,0x8
c001798c:	6a 01                	push   0x1
c001798e:	68 fa 9a 02 c0       	push   0xc0029afa
c0017993:	e8 22 4c 00 00       	call   c001c5ba <Thr::loadDLL(char const*, bool)>
c0017998:	83 c4 10             	add    esp,0x10
c001799b:	83 ec 08             	sub    esp,0x8
c001799e:	53                   	push   ebx
c001799f:	50                   	push   eax
c00179a0:	e8 24 4e 00 00       	call   c001c7c9 <Thr::executeDLL(unsigned long, void*)>
c00179a5:	83 c4 10             	add    esp,0x10
c00179a8:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c00179ad:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179b3:	83 e0 04             	and    eax,0x4
c00179b6:	84 c0                	test   al,al
c00179b8:	0f 84 d6 00 00 00    	je     c0017a94 <ACPI::open(int, int, void*)+0x1ca>
c00179be:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c00179c6:	83 ec 0c             	sub    esp,0xc
c00179c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179cd:	e8 02 7b ff ff       	call   c000f4d4 <malloc>
c00179d2:	83 c4 10             	add    esp,0x10
c00179d5:	89 c3                	mov    ebx,eax
c00179d7:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00179dc:	83 ec 04             	sub    esp,0x4
c00179df:	50                   	push   eax
c00179e0:	68 17 9b 02 c0       	push   0xc0029b17
c00179e5:	53                   	push   ebx
c00179e6:	e8 c9 b1 ff ff       	call   c0012bb4 <File::File(char const*, Process*)>
c00179eb:	83 c4 10             	add    esp,0x10
c00179ee:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00179f2:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00179f7:	74 17                	je     c0017a10 <ACPI::open(int, int, void*)+0x146>
c00179f9:	83 ec 0c             	sub    esp,0xc
c00179fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a00:	e8 81 b4 ff ff       	call   c0012e86 <File::exists()>
c0017a05:	83 c4 10             	add    esp,0x10
c0017a08:	84 c0                	test   al,al
c0017a0a:	74 04                	je     c0017a10 <ACPI::open(int, int, void*)+0x146>
c0017a0c:	b0 01                	mov    al,0x1
c0017a0e:	eb 02                	jmp    c0017a12 <ACPI::open(int, int, void*)+0x148>
c0017a10:	b0 00                	mov    al,0x0
c0017a12:	84 c0                	test   al,al
c0017a14:	74 25                	je     c0017a3b <ACPI::open(int, int, void*)+0x171>
c0017a16:	8b 1d 48 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c848
c0017a1c:	83 ec 08             	sub    esp,0x8
c0017a1f:	6a 01                	push   0x1
c0017a21:	68 17 9b 02 c0       	push   0xc0029b17
c0017a26:	e8 8f 4b 00 00       	call   c001c5ba <Thr::loadDLL(char const*, bool)>
c0017a2b:	83 c4 10             	add    esp,0x10
c0017a2e:	83 ec 08             	sub    esp,0x8
c0017a31:	53                   	push   ebx
c0017a32:	50                   	push   eax
c0017a33:	e8 91 4d 00 00       	call   c001c7c9 <Thr::executeDLL(unsigned long, void*)>
c0017a38:	83 c4 10             	add    esp,0x10
c0017a3b:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017a40:	74 1e                	je     c0017a60 <ACPI::open(int, int, void*)+0x196>
c0017a42:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017a47:	74 17                	je     c0017a60 <ACPI::open(int, int, void*)+0x196>
c0017a49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a4f:	83 c0 08             	add    eax,0x8
c0017a52:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a54:	83 ec 0c             	sub    esp,0xc
c0017a57:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a5b:	ff d0                	call   eax
c0017a5d:	83 c4 10             	add    esp,0x10
c0017a60:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0017a65:	83 ec 08             	sub    esp,0x8
c0017a68:	68 34 9b 02 c0       	push   0xc0029b34
c0017a6d:	50                   	push   eax
c0017a6e:	e8 9f f6 ff ff       	call   c0017112 <findDataTable(unsigned char*, char*)>
c0017a73:	83 c4 10             	add    esp,0x10
c0017a76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a7a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017a7f:	74 13                	je     c0017a94 <ACPI::open(int, int, void*)+0x1ca>
c0017a81:	83 ec 08             	sub    esp,0x8
c0017a84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a88:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017a8c:	e8 f1 fd ff ff       	call   c0017882 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017a91:	83 c4 10             	add    esp,0x10
c0017a94:	b8 00 00 00 00       	mov    eax,0x0
c0017a99:	83 c4 28             	add    esp,0x28
c0017a9c:	5b                   	pop    ebx
c0017a9d:	c3                   	ret    

c0017a9e <ACPI::sleep()>:
c0017a9e:	83 ec 0c             	sub    esp,0xc
c0017aa1:	a1 e0 ce 02 c0       	mov    eax,ds:0xc002cee0
c0017aa6:	85 c0                	test   eax,eax
c0017aa8:	74 07                	je     c0017ab1 <ACPI::sleep()+0x13>
c0017aaa:	a1 e0 ce 02 c0       	mov    eax,ds:0xc002cee0
c0017aaf:	ff d0                	call   eax
c0017ab1:	90                   	nop
c0017ab2:	83 c4 0c             	add    esp,0xc
c0017ab5:	c3                   	ret    

c0017ab6 <CPU::close(int, int, void*)>:
c0017ab6:	31 c0                	xor    eax,eax
c0017ab8:	c3                   	ret    
c0017ab9:	90                   	nop

c0017aba <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017aba:	55                   	push   ebp
c0017abb:	57                   	push   edi
c0017abc:	56                   	push   esi
c0017abd:	53                   	push   ebx
c0017abe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017ac2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ac6:	89 ce                	mov    esi,ecx
c0017ac8:	89 d5                	mov    ebp,edx
c0017aca:	80 f9 04             	cmp    cl,0x4
c0017acd:	75 28                	jne    c0017af7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017acf:	8d 42 f9             	lea    eax,[edx-0x7]
c0017ad2:	3c 03                	cmp    al,0x3
c0017ad4:	0f 86 63 01 00 00    	jbe    c0017c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017ada:	80 fa 03             	cmp    dl,0x3
c0017add:	0f 84 5a 01 00 00    	je     c0017c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017ae3:	8d 7a f2             	lea    edi,[edx-0xe]
c0017ae6:	b8 70 bc 02 c0       	mov    eax,0xc002bc70
c0017aeb:	89 fb                	mov    ebx,edi
c0017aed:	80 fb 01             	cmp    bl,0x1
c0017af0:	77 4e                	ja     c0017b40 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017af2:	e9 52 01 00 00       	jmp    c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017af7:	80 f9 05             	cmp    cl,0x5
c0017afa:	75 4d                	jne    c0017b49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017afc:	b8 80 bc 02 c0       	mov    eax,0xc002bc80
c0017b01:	80 fa 03             	cmp    dl,0x3
c0017b04:	0f 86 3f 01 00 00    	jbe    c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b0a:	8d 7a fa             	lea    edi,[edx-0x6]
c0017b0d:	b8 90 bc 02 c0       	mov    eax,0xc002bc90
c0017b12:	89 fb                	mov    ebx,edi
c0017b14:	80 fb 01             	cmp    bl,0x1
c0017b17:	0f 86 2c 01 00 00    	jbe    c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b1d:	b8 a0 bc 02 c0       	mov    eax,0xc002bca0
c0017b22:	80 fa 08             	cmp    dl,0x8
c0017b25:	0f 84 1e 01 00 00    	je     c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b2b:	89 d7                	mov    edi,edx
c0017b2d:	b8 b0 bc 02 c0       	mov    eax,0xc002bcb0
c0017b32:	83 e7 fb             	and    edi,0xfffffffb
c0017b35:	89 fb                	mov    ebx,edi
c0017b37:	80 fb 09             	cmp    bl,0x9
c0017b3a:	0f 84 09 01 00 00    	je     c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b40:	31 c0                	xor    eax,eax
c0017b42:	89 eb                	mov    ebx,ebp
c0017b44:	0f b6 fb             	movzx  edi,bl
c0017b47:	eb 30                	jmp    c0017b79 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017b49:	31 c0                	xor    eax,eax
c0017b4b:	80 f9 06             	cmp    cl,0x6
c0017b4e:	75 f2                	jne    c0017b42 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017b50:	80 fa 0a             	cmp    dl,0xa
c0017b53:	77 ed                	ja     c0017b42 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017b55:	bf de 05 00 00       	mov    edi,0x5de
c0017b5a:	0f a3 d7             	bt     edi,edx
c0017b5d:	73 e3                	jae    c0017b42 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017b5f:	b8 c0 bc 02 c0       	mov    eax,0xc002bcc0
c0017b64:	e9 e0 00 00 00       	jmp    c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b69:	39 c7                	cmp    edi,eax
c0017b6b:	0f 84 d3 00 00 00    	je     c0017c44 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017b71:	40                   	inc    eax
c0017b72:	3d d0 00 00 00       	cmp    eax,0xd0
c0017b77:	74 09                	je     c0017b82 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017b79:	89 f3                	mov    ebx,esi
c0017b7b:	80 fb 0f             	cmp    bl,0xf
c0017b7e:	75 f1                	jne    c0017b71 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017b80:	eb e7                	jmp    c0017b69 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017b82:	80 f9 10             	cmp    cl,0x10
c0017b85:	75 14                	jne    c0017b9b <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017b87:	8d 42 fc             	lea    eax,[edx-0x4]
c0017b8a:	83 e0 fb             	and    eax,0xfffffffb
c0017b8d:	3c 02                	cmp    al,0x2
c0017b8f:	76 34                	jbe    c0017bc5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017b91:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017b96:	80 fa 02             	cmp    dl,0x2
c0017b99:	eb 24                	jmp    c0017bbf <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017b9b:	80 f9 11             	cmp    cl,0x11
c0017b9e:	75 13                	jne    c0017bb3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017ba0:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017ba5:	80 fa 03             	cmp    dl,0x3
c0017ba8:	0f 85 9b 00 00 00    	jne    c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bae:	e9 91 00 00 00       	jmp    c0017c44 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017bb3:	80 f9 12             	cmp    cl,0x12
c0017bb6:	75 14                	jne    c0017bcc <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017bb8:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017bbd:	fe ca                	dec    dl
c0017bbf:	0f 85 84 00 00 00    	jne    c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bc5:	b8 e0 bc 02 c0       	mov    eax,0xc002bce0
c0017bca:	eb 7d                	jmp    c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bcc:	80 f9 14             	cmp    cl,0x14
c0017bcf:	75 12                	jne    c0017be3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017bd1:	4a                   	dec    edx
c0017bd2:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017bd7:	80 fa 01             	cmp    dl,0x1
c0017bda:	77 6d                	ja     c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bdc:	b8 f0 bc 02 c0       	mov    eax,0xc002bcf0
c0017be1:	eb 66                	jmp    c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017be3:	80 f9 15             	cmp    cl,0x15
c0017be6:	75 31                	jne    c0017c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017be8:	b8 00 bd 02 c0       	mov    eax,0xc002bd00
c0017bed:	80 fa 01             	cmp    dl,0x1
c0017bf0:	74 57                	je     c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bf2:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017bf7:	80 fa 13             	cmp    dl,0x13
c0017bfa:	76 0c                	jbe    c0017c08 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017bfc:	80 fa 30             	cmp    dl,0x30
c0017bff:	75 48                	jne    c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c01:	b8 20 bd 02 c0       	mov    eax,0xc002bd20
c0017c06:	eb 41                	jmp    c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c08:	b9 04 00 09 00       	mov    ecx,0x90004
c0017c0d:	0f a3 d1             	bt     ecx,edx
c0017c10:	73 37                	jae    c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c12:	b8 10 bd 02 c0       	mov    eax,0xc002bd10
c0017c17:	eb 30                	jmp    c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c19:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017c1e:	80 f9 16             	cmp    cl,0x16
c0017c21:	75 26                	jne    c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c23:	b8 30 bd 02 c0       	mov    eax,0xc002bd30
c0017c28:	84 d2                	test   dl,dl
c0017c2a:	74 1d                	je     c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c2c:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017c31:	80 fa 30             	cmp    dl,0x30
c0017c34:	75 13                	jne    c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c36:	b8 40 bd 02 c0       	mov    eax,0xc002bd40
c0017c3b:	eb 0c                	jmp    c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c3d:	b8 60 bc 02 c0       	mov    eax,0xc002bc60
c0017c42:	eb 05                	jmp    c0017c49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c44:	b8 d0 bc 02 c0       	mov    eax,0xc002bcd0
c0017c49:	5b                   	pop    ebx
c0017c4a:	5e                   	pop    esi
c0017c4b:	5f                   	pop    edi
c0017c4c:	5d                   	pop    ebp
c0017c4d:	c3                   	ret    

c0017c4e <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017c4e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017c52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c56:	80 f9 04             	cmp    cl,0x4
c0017c59:	75 6b                	jne    c0017cc6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017c5b:	b8 c0 ba 02 c0       	mov    eax,0xc002bac0
c0017c60:	80 fa 01             	cmp    dl,0x1
c0017c63:	0f 86 92 02 00 00    	jbe    c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c69:	b8 d0 ba 02 c0       	mov    eax,0xc002bad0
c0017c6e:	80 fa 02             	cmp    dl,0x2
c0017c71:	0f 84 84 02 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c77:	b8 e0 ba 02 c0       	mov    eax,0xc002bae0
c0017c7c:	80 fa 03             	cmp    dl,0x3
c0017c7f:	0f 84 76 02 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c85:	b8 f0 ba 02 c0       	mov    eax,0xc002baf0
c0017c8a:	80 fa 04             	cmp    dl,0x4
c0017c8d:	0f 84 68 02 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c93:	b8 00 bb 02 c0       	mov    eax,0xc002bb00
c0017c98:	80 fa 05             	cmp    dl,0x5
c0017c9b:	0f 84 5a 02 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ca1:	b8 e0 ba 02 c0       	mov    eax,0xc002bae0
c0017ca6:	80 fa 07             	cmp    dl,0x7
c0017ca9:	0f 84 4c 02 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017caf:	83 ea 08             	sub    edx,0x8
c0017cb2:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017cb7:	80 fa 01             	cmp    dl,0x1
c0017cba:	0f 87 3b 02 00 00    	ja     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cc0:	b8 10 bb 02 c0       	mov    eax,0xc002bb10
c0017cc5:	c3                   	ret    
c0017cc6:	80 f9 05             	cmp    cl,0x5
c0017cc9:	75 45                	jne    c0017d10 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017ccb:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017cce:	b8 20 bb 02 c0       	mov    eax,0xc002bb20
c0017cd3:	80 f9 02             	cmp    cl,0x2
c0017cd6:	0f 86 1f 02 00 00    	jbe    c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cdc:	80 fa 04             	cmp    dl,0x4
c0017cdf:	0f 84 f3 01 00 00    	je     c0017ed8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017ce5:	80 fa 07             	cmp    dl,0x7
c0017ce8:	0f 84 0d 02 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cee:	b8 30 bb 02 c0       	mov    eax,0xc002bb30
c0017cf3:	80 fa 08             	cmp    dl,0x8
c0017cf6:	0f 84 ff 01 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cfc:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017d01:	80 fa 09             	cmp    dl,0x9
c0017d04:	0f 85 f1 01 00 00    	jne    c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d0a:	b8 40 bb 02 c0       	mov    eax,0xc002bb40
c0017d0f:	c3                   	ret    
c0017d10:	80 f9 06             	cmp    cl,0x6
c0017d13:	0f 85 85 01 00 00    	jne    c0017e9e <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017d19:	b8 50 bb 02 c0       	mov    eax,0xc002bb50
c0017d1e:	80 fa 01             	cmp    dl,0x1
c0017d21:	0f 84 d4 01 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d27:	8d 42 fb             	lea    eax,[edx-0x5]
c0017d2a:	3c 01                	cmp    al,0x1
c0017d2c:	0f 86 ac 01 00 00    	jbe    c0017ede <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017d32:	80 fa 03             	cmp    dl,0x3
c0017d35:	0f 84 a3 01 00 00    	je     c0017ede <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017d3b:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017d3e:	b8 70 bb 02 c0       	mov    eax,0xc002bb70
c0017d43:	80 f9 01             	cmp    cl,0x1
c0017d46:	0f 86 af 01 00 00    	jbe    c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d4c:	80 fa 09             	cmp    dl,0x9
c0017d4f:	0f 84 8f 01 00 00    	je     c0017ee4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0017d55:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017d58:	80 f9 01             	cmp    cl,0x1
c0017d5b:	0f 86 9a 01 00 00    	jbe    c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d61:	b8 80 bb 02 c0       	mov    eax,0xc002bb80
c0017d66:	80 fa 0d             	cmp    dl,0xd
c0017d69:	0f 84 8c 01 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d6f:	b8 90 bb 02 c0       	mov    eax,0xc002bb90
c0017d74:	80 fa 0e             	cmp    dl,0xe
c0017d77:	0f 84 7e 01 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d7d:	b8 a0 bb 02 c0       	mov    eax,0xc002bba0
c0017d82:	80 fa 0f             	cmp    dl,0xf
c0017d85:	0f 84 70 01 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d8b:	b8 80 bb 02 c0       	mov    eax,0xc002bb80
c0017d90:	80 fa 15             	cmp    dl,0x15
c0017d93:	0f 84 62 01 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d99:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017d9c:	b8 a0 bb 02 c0       	mov    eax,0xc002bba0
c0017da1:	80 f9 01             	cmp    cl,0x1
c0017da4:	0f 86 51 01 00 00    	jbe    c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017daa:	80 fa 1a             	cmp    dl,0x1a
c0017dad:	0f 84 37 01 00 00    	je     c0017eea <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017db3:	80 fa 1c             	cmp    dl,0x1c
c0017db6:	0f 84 34 01 00 00    	je     c0017ef0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017dbc:	80 fa 1d             	cmp    dl,0x1d
c0017dbf:	0f 84 36 01 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dc5:	b8 d0 bb 02 c0       	mov    eax,0xc002bbd0
c0017dca:	80 fa 25             	cmp    dl,0x25
c0017dcd:	0f 84 28 01 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dd3:	8d 4a da             	lea    ecx,[edx-0x26]
c0017dd6:	b8 c0 bb 02 c0       	mov    eax,0xc002bbc0
c0017ddb:	80 f9 01             	cmp    cl,0x1
c0017dde:	0f 86 17 01 00 00    	jbe    c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017de4:	b8 e0 bb 02 c0       	mov    eax,0xc002bbe0
c0017de9:	80 fa 2a             	cmp    dl,0x2a
c0017dec:	0f 84 09 01 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017df2:	b8 d0 bb 02 c0       	mov    eax,0xc002bbd0
c0017df7:	80 fa 2c             	cmp    dl,0x2c
c0017dfa:	0f 84 fb 00 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e00:	b8 e0 bb 02 c0       	mov    eax,0xc002bbe0
c0017e05:	80 fa 2d             	cmp    dl,0x2d
c0017e08:	0f 84 ed 00 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e0e:	b8 b0 bb 02 c0       	mov    eax,0xc002bbb0
c0017e13:	80 fa 2e             	cmp    dl,0x2e
c0017e16:	0f 84 df 00 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e1c:	b8 d0 bb 02 c0       	mov    eax,0xc002bbd0
c0017e21:	80 fa 2f             	cmp    dl,0x2f
c0017e24:	0f 84 d1 00 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e2a:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017e2d:	b8 c0 bb 02 c0       	mov    eax,0xc002bbc0
c0017e32:	80 f9 01             	cmp    cl,0x1
c0017e35:	0f 86 c0 00 00 00    	jbe    c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e3b:	b8 f0 bb 02 c0       	mov    eax,0xc002bbf0
c0017e40:	80 fa 37             	cmp    dl,0x37
c0017e43:	0f 84 b2 00 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e49:	b8 00 bc 02 c0       	mov    eax,0xc002bc00
c0017e4e:	80 fa 3a             	cmp    dl,0x3a
c0017e51:	0f 84 a4 00 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e57:	b8 10 bc 02 c0       	mov    eax,0xc002bc10
c0017e5c:	80 fa 3c             	cmp    dl,0x3c
c0017e5f:	0f 84 96 00 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e65:	b8 20 bc 02 c0       	mov    eax,0xc002bc20
c0017e6a:	80 fa 3d             	cmp    dl,0x3d
c0017e6d:	0f 84 88 00 00 00    	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e73:	b8 00 bc 02 c0       	mov    eax,0xc002bc00
c0017e78:	80 fa 3e             	cmp    dl,0x3e
c0017e7b:	74 7e                	je     c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e7d:	8d 42 bb             	lea    eax,[edx-0x45]
c0017e80:	3c 01                	cmp    al,0x1
c0017e82:	76 72                	jbe    c0017ef6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017e84:	80 fa 3f             	cmp    dl,0x3f
c0017e87:	74 6d                	je     c0017ef6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017e89:	80 fa 4a             	cmp    dl,0x4a
c0017e8c:	74 0a                	je     c0017e98 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017e8e:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017e93:	80 fa 4d             	cmp    dl,0x4d
c0017e96:	75 63                	jne    c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e98:	b8 f0 bb 02 c0       	mov    eax,0xc002bbf0
c0017e9d:	c3                   	ret    
c0017e9e:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017ea3:	80 f9 0b             	cmp    cl,0xb
c0017ea6:	75 0a                	jne    c0017eb2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017ea8:	fe ca                	dec    dl
c0017eaa:	75 4f                	jne    c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eac:	b8 30 bc 02 c0       	mov    eax,0xc002bc30
c0017eb1:	c3                   	ret    
c0017eb2:	80 f9 0f             	cmp    cl,0xf
c0017eb5:	75 44                	jne    c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eb7:	b8 40 bc 02 c0       	mov    eax,0xc002bc40
c0017ebc:	80 fa 02             	cmp    dl,0x2
c0017ebf:	76 3a                	jbe    c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ec1:	8d 42 fd             	lea    eax,[edx-0x3]
c0017ec4:	3c 01                	cmp    al,0x1
c0017ec6:	76 0a                	jbe    c0017ed2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017ec8:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017ecd:	80 fa 06             	cmp    dl,0x6
c0017ed0:	75 29                	jne    c0017efb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ed2:	b8 50 bc 02 c0       	mov    eax,0xc002bc50
c0017ed7:	c3                   	ret    
c0017ed8:	b8 30 bb 02 c0       	mov    eax,0xc002bb30
c0017edd:	c3                   	ret    
c0017ede:	b8 60 bb 02 c0       	mov    eax,0xc002bb60
c0017ee3:	c3                   	ret    
c0017ee4:	b8 80 bb 02 c0       	mov    eax,0xc002bb80
c0017ee9:	c3                   	ret    
c0017eea:	b8 b0 bb 02 c0       	mov    eax,0xc002bbb0
c0017eef:	c3                   	ret    
c0017ef0:	b8 c0 bb 02 c0       	mov    eax,0xc002bbc0
c0017ef5:	c3                   	ret    
c0017ef6:	b8 10 bc 02 c0       	mov    eax,0xc002bc10
c0017efb:	c3                   	ret    

c0017efc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0017efc:	60                   	pusha  
c0017efd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f09:	9c                   	pushf  
c0017f0a:	fa                   	cli    
c0017f0b:	0f 09                	wbinvd 
c0017f0d:	0f 30                	wrmsr  
c0017f0f:	9d                   	popf   
c0017f10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017f14:	89 02                	mov    DWORD PTR [edx],eax
c0017f16:	61                   	popa   
c0017f17:	c3                   	ret    

c0017f18 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0017f18:	60                   	pusha  
c0017f19:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f1d:	9c                   	pushf  
c0017f1e:	fa                   	cli    
c0017f1f:	0f 09                	wbinvd 
c0017f21:	31 c0                	xor    eax,eax
c0017f23:	31 d2                	xor    edx,edx
c0017f25:	0f 32                	rdmsr  
c0017f27:	9d                   	popf   
c0017f28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f2c:	89 02                	mov    DWORD PTR [edx],eax
c0017f2e:	61                   	popa   
c0017f2f:	c3                   	ret    

c0017f30 <CPU::AMD_K6_writeback(int, int, int)>:
c0017f30:	56                   	push   esi
c0017f31:	53                   	push   ebx
c0017f32:	83 ec 10             	sub    esp,0x10
c0017f35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f39:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0017f3e:	75 5d                	jne    c0017f9d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017f40:	83 f8 08             	cmp    eax,0x8
c0017f43:	75 09                	jne    c0017f4e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0017f45:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0017f4a:	7e 13                	jle    c0017f5f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017f4c:	eb 30                	jmp    c0017f7e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017f4e:	83 f8 06             	cmp    eax,0x6
c0017f51:	7c 4a                	jl     c0017f9d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017f53:	83 f8 07             	cmp    eax,0x7
c0017f56:	7e 07                	jle    c0017f5f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017f58:	83 f8 09             	cmp    eax,0x9
c0017f5b:	74 21                	je     c0017f7e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017f5d:	eb 3e                	jmp    c0017f9d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017f5f:	89 e6                	mov    esi,esp
c0017f61:	8b 1d 84 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c884
c0017f67:	56                   	push   esi
c0017f68:	c1 eb 15             	shr    ebx,0x15
c0017f6b:	68 82 00 00 c0       	push   0xc0000082
c0017f70:	83 e3 7e             	and    ebx,0x7e
c0017f73:	e8 a0 ff ff ff       	call   c0017f18 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017f78:	56                   	push   esi
c0017f79:	6a 00                	push   0x0
c0017f7b:	53                   	push   ebx
c0017f7c:	eb 12                	jmp    c0017f90 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0017f7e:	89 e3                	mov    ebx,esp
c0017f80:	53                   	push   ebx
c0017f81:	68 82 00 00 c0       	push   0xc0000082
c0017f86:	e8 8d ff ff ff       	call   c0017f18 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017f8b:	53                   	push   ebx
c0017f8c:	6a 00                	push   0x0
c0017f8e:	6a 00                	push   0x0
c0017f90:	68 82 00 00 c0       	push   0xc0000082
c0017f95:	e8 62 ff ff ff       	call   c0017efc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0017f9a:	83 c4 18             	add    esp,0x18
c0017f9d:	83 c4 10             	add    esp,0x10
c0017fa0:	5b                   	pop    ebx
c0017fa1:	5e                   	pop    esi
c0017fa2:	c3                   	ret    
c0017fa3:	90                   	nop

c0017fa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017fa4:	55                   	push   ebp
c0017fa5:	57                   	push   edi
c0017fa6:	56                   	push   esi
c0017fa7:	53                   	push   ebx
c0017fa8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fac:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017fb0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017fb4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017fb8:	39 05 60 bd 02 c0    	cmp    DWORD PTR ds:0xc002bd60,eax
c0017fbe:	75 23                	jne    c0017fe3 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017fc0:	a1 6c d3 02 c0       	mov    eax,ds:0xc002d36c
c0017fc5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017fc9:	89 06                	mov    DWORD PTR [esi],eax
c0017fcb:	a1 68 d3 02 c0       	mov    eax,ds:0xc002d368
c0017fd0:	89 07                	mov    DWORD PTR [edi],eax
c0017fd2:	a1 64 d3 02 c0       	mov    eax,ds:0xc002d364
c0017fd7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017fda:	a1 60 d3 02 c0       	mov    eax,ds:0xc002d360
c0017fdf:	89 02                	mov    DWORD PTR [edx],eax
c0017fe1:	eb 3f                	jmp    c0018022 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0017fe3:	31 c9                	xor    ecx,ecx
c0017fe5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fe9:	0f a2                	cpuid  
c0017feb:	89 06                	mov    DWORD PTR [esi],eax
c0017fed:	89 1f                	mov    DWORD PTR [edi],ebx
c0017fef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ff3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0017ff6:	89 10                	mov    DWORD PTR [eax],edx
c0017ff8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ffc:	a3 60 bd 02 c0       	mov    ds:0xc002bd60,eax
c0018001:	8b 06                	mov    eax,DWORD PTR [esi]
c0018003:	a3 6c d3 02 c0       	mov    ds:0xc002d36c,eax
c0018008:	8b 07                	mov    eax,DWORD PTR [edi]
c001800a:	a3 68 d3 02 c0       	mov    ds:0xc002d368,eax
c001800f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018012:	a3 64 d3 02 c0       	mov    ds:0xc002d364,eax
c0018017:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001801b:	8b 00                	mov    eax,DWORD PTR [eax]
c001801d:	a3 60 d3 02 c0       	mov    ds:0xc002d360,eax
c0018022:	5b                   	pop    ebx
c0018023:	5e                   	pop    esi
c0018024:	5f                   	pop    edi
c0018025:	5d                   	pop    ebp
c0018026:	c3                   	ret    
c0018027:	90                   	nop

c0018028 <CPU::cpuidCheckEDX(unsigned int)>:
c0018028:	83 ec 10             	sub    esp,0x10
c001802b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001802f:	50                   	push   eax
c0018030:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018034:	50                   	push   eax
c0018035:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018039:	50                   	push   eax
c001803a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001803e:	50                   	push   eax
c001803f:	6a 01                	push   0x1
c0018041:	e8 5e ff ff ff       	call   c0017fa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018046:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001804a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001804e:	0f 95 c0             	setne  al
c0018051:	83 c4 24             	add    esp,0x24
c0018054:	c3                   	ret    
c0018055:	90                   	nop

c0018056 <CPU::cpuidCheckECX(unsigned int)>:
c0018056:	83 ec 10             	sub    esp,0x10
c0018059:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001805d:	50                   	push   eax
c001805e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018062:	50                   	push   eax
c0018063:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018067:	50                   	push   eax
c0018068:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001806c:	50                   	push   eax
c001806d:	6a 01                	push   0x1
c001806f:	e8 30 ff ff ff       	call   c0017fa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018074:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018078:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001807c:	0f 95 c0             	setne  al
c001807f:	83 c4 24             	add    esp,0x24
c0018082:	c3                   	ret    
c0018083:	90                   	nop

c0018084 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018084:	83 ec 10             	sub    esp,0x10
c0018087:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001808b:	50                   	push   eax
c001808c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018090:	50                   	push   eax
c0018091:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018095:	50                   	push   eax
c0018096:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001809a:	50                   	push   eax
c001809b:	6a 07                	push   0x7
c001809d:	e8 02 ff ff ff       	call   c0017fa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00180a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180a6:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00180aa:	0f 95 c0             	setne  al
c00180ad:	83 c4 24             	add    esp,0x24
c00180b0:	c3                   	ret    
c00180b1:	90                   	nop

c00180b2 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00180b2:	83 ec 10             	sub    esp,0x10
c00180b5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180b9:	50                   	push   eax
c00180ba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180be:	50                   	push   eax
c00180bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180c3:	50                   	push   eax
c00180c4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180c8:	50                   	push   eax
c00180c9:	6a 07                	push   0x7
c00180cb:	e8 d4 fe ff ff       	call   c0017fa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00180d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180d4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00180d8:	0f 95 c0             	setne  al
c00180db:	83 c4 24             	add    esp,0x24
c00180de:	c3                   	ret    
c00180df:	90                   	nop

c00180e0 <CPU::CPU()>:
c00180e0:	83 ec 0c             	sub    esp,0xc
c00180e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180e7:	83 ec 08             	sub    esp,0x8
c00180ea:	68 7e 9f 02 c0       	push   0xc0029f7e
c00180ef:	50                   	push   eax
c00180f0:	e8 6f bb ff ff       	call   c0013c64 <Device::Device(char const*)>
c00180f5:	83 c4 10             	add    esp,0x10
c00180f8:	ba 58 a0 02 c0       	mov    edx,0xc002a058
c00180fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018101:	89 10                	mov    DWORD PTR [eax],edx
c0018103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018107:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018115:	05 78 01 00 00       	add    eax,0x178
c001811a:	83 ec 0c             	sub    esp,0xc
c001811d:	50                   	push   eax
c001811e:	e8 c9 6b ff ff       	call   c000ecec <GDT::GDT()>
c0018123:	83 c4 10             	add    esp,0x10
c0018126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001812a:	05 7c 09 00 00       	add    eax,0x97c
c001812f:	83 ec 0c             	sub    esp,0xc
c0018132:	50                   	push   eax
c0018133:	e8 16 6e ff ff       	call   c000ef4e <IDT::IDT()>
c0018138:	83 c4 10             	add    esp,0x10
c001813b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001813f:	05 7c 11 00 00       	add    eax,0x117c
c0018144:	83 ec 0c             	sub    esp,0xc
c0018147:	50                   	push   eax
c0018148:	e8 79 8e ff ff       	call   c0010fc6 <TSS::TSS()>
c001814d:	83 c4 10             	add    esp,0x10
c0018150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018154:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001815b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001815f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018169:	90                   	nop
c001816a:	83 c4 0c             	add    esp,0xc
c001816d:	c3                   	ret    

c001816e <CPU::displayFeatures()>:
c001816e:	53                   	push   ebx
c001816f:	83 ec 10             	sub    esp,0x10
c0018172:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018176:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001817c:	68 8c 9c 02 c0       	push   0xc0029c8c
c0018181:	e8 ff a4 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0018186:	59                   	pop    ecx
c0018187:	58                   	pop    eax
c0018188:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001818e:	50                   	push   eax
c001818f:	68 9d 9c 02 c0       	push   0xc0029c9d
c0018194:	e8 ec a4 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0018199:	58                   	pop    eax
c001819a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181a0:	5a                   	pop    edx
c00181a1:	c1 e8 0e             	shr    eax,0xe
c00181a4:	0f b6 c0             	movzx  eax,al
c00181a7:	50                   	push   eax
c00181a8:	68 ae 9c 02 c0       	push   0xc0029cae
c00181ad:	e8 d3 a4 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00181b2:	59                   	pop    ecx
c00181b3:	58                   	pop    eax
c00181b4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181ba:	66 c1 e8 06          	shr    ax,0x6
c00181be:	0f b6 c0             	movzx  eax,al
c00181c1:	50                   	push   eax
c00181c2:	68 bf 9c 02 c0       	push   0xc0029cbf
c00181c7:	e8 b9 a4 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00181cc:	c7 04 24 5b a1 02 c0 	mov    DWORD PTR [esp],0xc002a15b
c00181d3:	e8 ad a4 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00181d8:	83 c4 10             	add    esp,0x10
c00181db:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c00181e0:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00181e7:	74 05                	je     c00181ee <CPU::displayFeatures()+0x80>
c00181e9:	b8 78 88 02 c0       	mov    eax,0xc0028878
c00181ee:	52                   	push   edx
c00181ef:	52                   	push   edx
c00181f0:	50                   	push   eax
c00181f1:	68 d0 9c 02 c0       	push   0xc0029cd0
c00181f6:	e8 8a a4 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00181fb:	83 c4 10             	add    esp,0x10
c00181fe:	b8 78 88 02 c0       	mov    eax,0xc0028878
c0018203:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c001820a:	78 05                	js     c0018211 <CPU::displayFeatures()+0xa3>
c001820c:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c0018211:	51                   	push   ecx
c0018212:	51                   	push   ecx
c0018213:	50                   	push   eax
c0018214:	68 e7 9c 02 c0       	push   0xc0029ce7
c0018219:	e8 67 a4 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001821e:	83 c4 10             	add    esp,0x10
c0018221:	b8 78 88 02 c0       	mov    eax,0xc0028878
c0018226:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001822d:	75 05                	jne    c0018234 <CPU::displayFeatures()+0xc6>
c001822f:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c0018234:	52                   	push   edx
c0018235:	52                   	push   edx
c0018236:	50                   	push   eax
c0018237:	68 fe 9c 02 c0       	push   0xc0029cfe
c001823c:	e8 44 a4 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0018241:	83 c4 10             	add    esp,0x10
c0018244:	b8 78 88 02 c0       	mov    eax,0xc0028878
c0018249:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018250:	75 05                	jne    c0018257 <CPU::displayFeatures()+0xe9>
c0018252:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c0018257:	51                   	push   ecx
c0018258:	51                   	push   ecx
c0018259:	50                   	push   eax
c001825a:	68 15 9d 02 c0       	push   0xc0029d15
c001825f:	e8 21 a4 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0018264:	83 c4 10             	add    esp,0x10
c0018267:	b8 78 88 02 c0       	mov    eax,0xc0028878
c001826c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018273:	75 05                	jne    c001827a <CPU::displayFeatures()+0x10c>
c0018275:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c001827a:	52                   	push   edx
c001827b:	52                   	push   edx
c001827c:	50                   	push   eax
c001827d:	68 2c 9d 02 c0       	push   0xc0029d2c
c0018282:	e8 fe a3 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0018287:	83 c4 10             	add    esp,0x10
c001828a:	b8 78 88 02 c0       	mov    eax,0xc0028878
c001828f:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018296:	75 05                	jne    c001829d <CPU::displayFeatures()+0x12f>
c0018298:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c001829d:	51                   	push   ecx
c001829e:	51                   	push   ecx
c001829f:	50                   	push   eax
c00182a0:	68 43 9d 02 c0       	push   0xc0029d43
c00182a5:	e8 db a3 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00182aa:	83 c4 10             	add    esp,0x10
c00182ad:	b8 78 88 02 c0       	mov    eax,0xc0028878
c00182b2:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00182b9:	75 05                	jne    c00182c0 <CPU::displayFeatures()+0x152>
c00182bb:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c00182c0:	52                   	push   edx
c00182c1:	52                   	push   edx
c00182c2:	50                   	push   eax
c00182c3:	68 5a 9d 02 c0       	push   0xc0029d5a
c00182c8:	e8 b8 a3 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00182cd:	83 c4 10             	add    esp,0x10
c00182d0:	b8 78 88 02 c0       	mov    eax,0xc0028878
c00182d5:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00182dc:	75 05                	jne    c00182e3 <CPU::displayFeatures()+0x175>
c00182de:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c00182e3:	51                   	push   ecx
c00182e4:	51                   	push   ecx
c00182e5:	50                   	push   eax
c00182e6:	68 71 9d 02 c0       	push   0xc0029d71
c00182eb:	e8 95 a3 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00182f0:	83 c4 10             	add    esp,0x10
c00182f3:	b8 78 88 02 c0       	mov    eax,0xc0028878
c00182f8:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00182ff:	75 05                	jne    c0018306 <CPU::displayFeatures()+0x198>
c0018301:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c0018306:	52                   	push   edx
c0018307:	52                   	push   edx
c0018308:	50                   	push   eax
c0018309:	68 88 9d 02 c0       	push   0xc0029d88
c001830e:	e8 72 a3 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0018313:	83 c4 10             	add    esp,0x10
c0018316:	b8 78 88 02 c0       	mov    eax,0xc0028878
c001831b:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018322:	75 05                	jne    c0018329 <CPU::displayFeatures()+0x1bb>
c0018324:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c0018329:	51                   	push   ecx
c001832a:	51                   	push   ecx
c001832b:	50                   	push   eax
c001832c:	68 9f 9d 02 c0       	push   0xc0029d9f
c0018331:	e8 4f a3 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0018336:	83 c4 10             	add    esp,0x10
c0018339:	b8 78 88 02 c0       	mov    eax,0xc0028878
c001833e:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018345:	75 05                	jne    c001834c <CPU::displayFeatures()+0x1de>
c0018347:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c001834c:	52                   	push   edx
c001834d:	52                   	push   edx
c001834e:	50                   	push   eax
c001834f:	68 b6 9d 02 c0       	push   0xc0029db6
c0018354:	e8 2c a3 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0018359:	83 c4 10             	add    esp,0x10
c001835c:	b8 78 88 02 c0       	mov    eax,0xc0028878
c0018361:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018368:	75 05                	jne    c001836f <CPU::displayFeatures()+0x201>
c001836a:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c001836f:	51                   	push   ecx
c0018370:	51                   	push   ecx
c0018371:	50                   	push   eax
c0018372:	68 cd 9d 02 c0       	push   0xc0029dcd
c0018377:	e8 09 a3 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001837c:	83 c4 10             	add    esp,0x10
c001837f:	b8 78 88 02 c0       	mov    eax,0xc0028878
c0018384:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001838b:	75 05                	jne    c0018392 <CPU::displayFeatures()+0x224>
c001838d:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c0018392:	52                   	push   edx
c0018393:	52                   	push   edx
c0018394:	50                   	push   eax
c0018395:	68 e4 9d 02 c0       	push   0xc0029de4
c001839a:	e8 e6 a2 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001839f:	83 c4 10             	add    esp,0x10
c00183a2:	b8 78 88 02 c0       	mov    eax,0xc0028878
c00183a7:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00183ae:	78 05                	js     c00183b5 <CPU::displayFeatures()+0x247>
c00183b0:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c00183b5:	51                   	push   ecx
c00183b6:	51                   	push   ecx
c00183b7:	50                   	push   eax
c00183b8:	68 fb 9d 02 c0       	push   0xc0029dfb
c00183bd:	e8 c3 a2 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00183c2:	83 c4 10             	add    esp,0x10
c00183c5:	b8 78 88 02 c0       	mov    eax,0xc0028878
c00183ca:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00183d1:	75 05                	jne    c00183d8 <CPU::displayFeatures()+0x26a>
c00183d3:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c00183d8:	52                   	push   edx
c00183d9:	52                   	push   edx
c00183da:	50                   	push   eax
c00183db:	68 12 9e 02 c0       	push   0xc0029e12
c00183e0:	e8 a0 a2 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00183e5:	83 c4 18             	add    esp,0x18
c00183e8:	5b                   	pop    ebx
c00183e9:	c3                   	ret    

c00183ea <CPU::detectFeatures()>:
c00183ea:	55                   	push   ebp
c00183eb:	57                   	push   edi
c00183ec:	56                   	push   esi
c00183ed:	53                   	push   ebx
c00183ee:	83 ec 50             	sub    esp,0x50
c00183f1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00183f5:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00183ff:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018406:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001840c:	6a 0d                	push   0xd
c001840e:	6a 00                	push   0x0
c0018410:	57                   	push   edi
c0018411:	e8 75 82 fe ff       	call   c000068b <memset>
c0018416:	83 c4 10             	add    esp,0x10
c0018419:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001841e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018425:	0f 84 20 09 00 00    	je     c0018d4b <CPU::detectFeatures()+0x961>
c001842b:	83 ec 0c             	sub    esp,0xc
c001842e:	6a 10                	push   0x10
c0018430:	e8 f3 fb ff ff       	call   c0018028 <CPU::cpuidCheckEDX(unsigned int)>
c0018435:	83 e0 01             	and    eax,0x1
c0018438:	8d 14 00             	lea    edx,[eax+eax*1]
c001843b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018441:	83 e0 fd             	and    eax,0xfffffffd
c0018444:	09 d0                	or     eax,edx
c0018446:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001844c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018453:	e8 d0 fb ff ff       	call   c0018028 <CPU::cpuidCheckEDX(unsigned int)>
c0018458:	83 e0 01             	and    eax,0x1
c001845b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018462:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018468:	83 e0 fb             	and    eax,0xfffffffb
c001846b:	09 d0                	or     eax,edx
c001846d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018473:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001847a:	e8 a9 fb ff ff       	call   c0018028 <CPU::cpuidCheckEDX(unsigned int)>
c001847f:	83 e0 01             	and    eax,0x1
c0018482:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018489:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001848f:	83 e0 f7             	and    eax,0xfffffff7
c0018492:	09 d0                	or     eax,edx
c0018494:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001849a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00184a1:	e8 82 fb ff ff       	call   c0018028 <CPU::cpuidCheckEDX(unsigned int)>
c00184a6:	83 e0 01             	and    eax,0x1
c00184a9:	c1 e0 04             	shl    eax,0x4
c00184ac:	88 c2                	mov    dl,al
c00184ae:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00184b4:	83 e0 ef             	and    eax,0xffffffef
c00184b7:	09 d0                	or     eax,edx
c00184b9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00184bf:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00184c6:	e8 5d fb ff ff       	call   c0018028 <CPU::cpuidCheckEDX(unsigned int)>
c00184cb:	83 e0 01             	and    eax,0x1
c00184ce:	c1 e0 05             	shl    eax,0x5
c00184d1:	88 c2                	mov    dl,al
c00184d3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00184d9:	83 e0 df             	and    eax,0xffffffdf
c00184dc:	09 d0                	or     eax,edx
c00184de:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00184e4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00184eb:	e8 38 fb ff ff       	call   c0018028 <CPU::cpuidCheckEDX(unsigned int)>
c00184f0:	83 e0 01             	and    eax,0x1
c00184f3:	8d 14 00             	lea    edx,[eax+eax*1]
c00184f6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00184fc:	83 e0 fd             	and    eax,0xfffffffd
c00184ff:	09 d0                	or     eax,edx
c0018501:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018507:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001850e:	e8 15 fb ff ff       	call   c0018028 <CPU::cpuidCheckEDX(unsigned int)>
c0018513:	83 e0 01             	and    eax,0x1
c0018516:	c1 e0 06             	shl    eax,0x6
c0018519:	88 c2                	mov    dl,al
c001851b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018521:	83 e0 bf             	and    eax,0xffffffbf
c0018524:	09 d0                	or     eax,edx
c0018526:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001852c:	58                   	pop    eax
c001852d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018531:	56                   	push   esi
c0018532:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018536:	55                   	push   ebp
c0018537:	8d 44 24 28          	lea    eax,[esp+0x28]
c001853b:	50                   	push   eax
c001853c:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018540:	52                   	push   edx
c0018541:	6a 00                	push   0x0
c0018543:	e8 5c fa ff ff       	call   c0017fa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018548:	83 c4 1c             	add    esp,0x1c
c001854b:	6a 04                	push   0x4
c001854d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018551:	50                   	push   eax
c0018552:	57                   	push   edi
c0018553:	e8 fd 80 fe ff       	call   c0000655 <memcpy>
c0018558:	83 c4 0c             	add    esp,0xc
c001855b:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018561:	6a 04                	push   0x4
c0018563:	56                   	push   esi
c0018564:	50                   	push   eax
c0018565:	e8 eb 80 fe ff       	call   c0000655 <memcpy>
c001856a:	83 c4 0c             	add    esp,0xc
c001856d:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018573:	6a 04                	push   0x4
c0018575:	55                   	push   ebp
c0018576:	50                   	push   eax
c0018577:	e8 d9 80 fe ff       	call   c0000655 <memcpy>
c001857c:	58                   	pop    eax
c001857d:	5a                   	pop    edx
c001857e:	68 29 9e 02 c0       	push   0xc0029e29
c0018583:	57                   	push   edi
c0018584:	e8 f2 81 fe ff       	call   c000077b <strcmp>
c0018589:	83 c4 10             	add    esp,0x10
c001858c:	85 c0                	test   eax,eax
c001858e:	75 0f                	jne    c001859f <CPU::detectFeatures()+0x1b5>
c0018590:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001859a:	e9 22 02 00 00       	jmp    c00187c1 <CPU::detectFeatures()+0x3d7>
c001859f:	50                   	push   eax
c00185a0:	50                   	push   eax
c00185a1:	68 36 9e 02 c0       	push   0xc0029e36
c00185a6:	57                   	push   edi
c00185a7:	e8 cf 81 fe ff       	call   c000077b <strcmp>
c00185ac:	83 c4 10             	add    esp,0x10
c00185af:	85 c0                	test   eax,eax
c00185b1:	74 dd                	je     c0018590 <CPU::detectFeatures()+0x1a6>
c00185b3:	51                   	push   ecx
c00185b4:	51                   	push   ecx
c00185b5:	68 43 9e 02 c0       	push   0xc0029e43
c00185ba:	57                   	push   edi
c00185bb:	e8 bb 81 fe ff       	call   c000077b <strcmp>
c00185c0:	83 c4 10             	add    esp,0x10
c00185c3:	85 c0                	test   eax,eax
c00185c5:	74 2a                	je     c00185f1 <CPU::detectFeatures()+0x207>
c00185c7:	52                   	push   edx
c00185c8:	52                   	push   edx
c00185c9:	68 50 9e 02 c0       	push   0xc0029e50
c00185ce:	57                   	push   edi
c00185cf:	e8 a7 81 fe ff       	call   c000077b <strcmp>
c00185d4:	83 c4 10             	add    esp,0x10
c00185d7:	85 c0                	test   eax,eax
c00185d9:	74 16                	je     c00185f1 <CPU::detectFeatures()+0x207>
c00185db:	50                   	push   eax
c00185dc:	50                   	push   eax
c00185dd:	68 5d 9e 02 c0       	push   0xc0029e5d
c00185e2:	57                   	push   edi
c00185e3:	e8 93 81 fe ff       	call   c000077b <strcmp>
c00185e8:	83 c4 10             	add    esp,0x10
c00185eb:	85 c0                	test   eax,eax
c00185ed:	74 48                	je     c0018637 <CPU::detectFeatures()+0x24d>
c00185ef:	eb 0f                	jmp    c0018600 <CPU::detectFeatures()+0x216>
c00185f1:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00185fb:	e9 c1 01 00 00       	jmp    c00187c1 <CPU::detectFeatures()+0x3d7>
c0018600:	50                   	push   eax
c0018601:	50                   	push   eax
c0018602:	68 6a 9e 02 c0       	push   0xc0029e6a
c0018607:	57                   	push   edi
c0018608:	e8 6e 81 fe ff       	call   c000077b <strcmp>
c001860d:	83 c4 10             	add    esp,0x10
c0018610:	85 c0                	test   eax,eax
c0018612:	74 23                	je     c0018637 <CPU::detectFeatures()+0x24d>
c0018614:	50                   	push   eax
c0018615:	50                   	push   eax
c0018616:	68 77 9e 02 c0       	push   0xc0029e77
c001861b:	57                   	push   edi
c001861c:	e8 5a 81 fe ff       	call   c000077b <strcmp>
c0018621:	83 c4 10             	add    esp,0x10
c0018624:	85 c0                	test   eax,eax
c0018626:	75 1e                	jne    c0018646 <CPU::detectFeatures()+0x25c>
c0018628:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018632:	e9 8a 01 00 00       	jmp    c00187c1 <CPU::detectFeatures()+0x3d7>
c0018637:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018641:	e9 7b 01 00 00       	jmp    c00187c1 <CPU::detectFeatures()+0x3d7>
c0018646:	50                   	push   eax
c0018647:	50                   	push   eax
c0018648:	68 84 9e 02 c0       	push   0xc0029e84
c001864d:	57                   	push   edi
c001864e:	e8 28 81 fe ff       	call   c000077b <strcmp>
c0018653:	83 c4 10             	add    esp,0x10
c0018656:	85 c0                	test   eax,eax
c0018658:	75 0f                	jne    c0018669 <CPU::detectFeatures()+0x27f>
c001865a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018664:	e9 58 01 00 00       	jmp    c00187c1 <CPU::detectFeatures()+0x3d7>
c0018669:	50                   	push   eax
c001866a:	50                   	push   eax
c001866b:	68 43 9e 02 c0       	push   0xc0029e43
c0018670:	57                   	push   edi
c0018671:	e8 05 81 fe ff       	call   c000077b <strcmp>
c0018676:	83 c4 10             	add    esp,0x10
c0018679:	85 c0                	test   eax,eax
c001867b:	75 0f                	jne    c001868c <CPU::detectFeatures()+0x2a2>
c001867d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018687:	e9 35 01 00 00       	jmp    c00187c1 <CPU::detectFeatures()+0x3d7>
c001868c:	50                   	push   eax
c001868d:	50                   	push   eax
c001868e:	68 91 9e 02 c0       	push   0xc0029e91
c0018693:	57                   	push   edi
c0018694:	e8 e2 80 fe ff       	call   c000077b <strcmp>
c0018699:	83 c4 10             	add    esp,0x10
c001869c:	85 c0                	test   eax,eax
c001869e:	75 0f                	jne    c00186af <CPU::detectFeatures()+0x2c5>
c00186a0:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00186aa:	e9 12 01 00 00       	jmp    c00187c1 <CPU::detectFeatures()+0x3d7>
c00186af:	51                   	push   ecx
c00186b0:	51                   	push   ecx
c00186b1:	68 9e 9e 02 c0       	push   0xc0029e9e
c00186b6:	57                   	push   edi
c00186b7:	e8 bf 80 fe ff       	call   c000077b <strcmp>
c00186bc:	83 c4 10             	add    esp,0x10
c00186bf:	85 c0                	test   eax,eax
c00186c1:	75 0f                	jne    c00186d2 <CPU::detectFeatures()+0x2e8>
c00186c3:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00186cd:	e9 ef 00 00 00       	jmp    c00187c1 <CPU::detectFeatures()+0x3d7>
c00186d2:	52                   	push   edx
c00186d3:	52                   	push   edx
c00186d4:	68 ab 9e 02 c0       	push   0xc0029eab
c00186d9:	57                   	push   edi
c00186da:	e8 9c 80 fe ff       	call   c000077b <strcmp>
c00186df:	83 c4 10             	add    esp,0x10
c00186e2:	85 c0                	test   eax,eax
c00186e4:	75 0f                	jne    c00186f5 <CPU::detectFeatures()+0x30b>
c00186e6:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00186f0:	e9 cc 00 00 00       	jmp    c00187c1 <CPU::detectFeatures()+0x3d7>
c00186f5:	50                   	push   eax
c00186f6:	50                   	push   eax
c00186f7:	68 b8 9e 02 c0       	push   0xc0029eb8
c00186fc:	57                   	push   edi
c00186fd:	e8 79 80 fe ff       	call   c000077b <strcmp>
c0018702:	83 c4 10             	add    esp,0x10
c0018705:	85 c0                	test   eax,eax
c0018707:	75 0f                	jne    c0018718 <CPU::detectFeatures()+0x32e>
c0018709:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018713:	e9 a9 00 00 00       	jmp    c00187c1 <CPU::detectFeatures()+0x3d7>
c0018718:	50                   	push   eax
c0018719:	50                   	push   eax
c001871a:	68 c5 9e 02 c0       	push   0xc0029ec5
c001871f:	57                   	push   edi
c0018720:	e8 56 80 fe ff       	call   c000077b <strcmp>
c0018725:	83 c4 10             	add    esp,0x10
c0018728:	85 c0                	test   eax,eax
c001872a:	75 0f                	jne    c001873b <CPU::detectFeatures()+0x351>
c001872c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018736:	e9 86 00 00 00       	jmp    c00187c1 <CPU::detectFeatures()+0x3d7>
c001873b:	50                   	push   eax
c001873c:	50                   	push   eax
c001873d:	68 d2 9e 02 c0       	push   0xc0029ed2
c0018742:	57                   	push   edi
c0018743:	e8 33 80 fe ff       	call   c000077b <strcmp>
c0018748:	83 c4 10             	add    esp,0x10
c001874b:	85 c0                	test   eax,eax
c001874d:	75 0c                	jne    c001875b <CPU::detectFeatures()+0x371>
c001874f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018759:	eb 66                	jmp    c00187c1 <CPU::detectFeatures()+0x3d7>
c001875b:	50                   	push   eax
c001875c:	50                   	push   eax
c001875d:	68 df 9e 02 c0       	push   0xc0029edf
c0018762:	57                   	push   edi
c0018763:	e8 13 80 fe ff       	call   c000077b <strcmp>
c0018768:	83 c4 10             	add    esp,0x10
c001876b:	85 c0                	test   eax,eax
c001876d:	75 0c                	jne    c001877b <CPU::detectFeatures()+0x391>
c001876f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018779:	eb 46                	jmp    c00187c1 <CPU::detectFeatures()+0x3d7>
c001877b:	50                   	push   eax
c001877c:	50                   	push   eax
c001877d:	68 ec 9e 02 c0       	push   0xc0029eec
c0018782:	57                   	push   edi
c0018783:	e8 f3 7f fe ff       	call   c000077b <strcmp>
c0018788:	83 c4 10             	add    esp,0x10
c001878b:	85 c0                	test   eax,eax
c001878d:	74 e0                	je     c001876f <CPU::detectFeatures()+0x385>
c001878f:	50                   	push   eax
c0018790:	50                   	push   eax
c0018791:	68 f9 9e 02 c0       	push   0xc0029ef9
c0018796:	57                   	push   edi
c0018797:	e8 df 7f fe ff       	call   c000077b <strcmp>
c001879c:	83 c4 10             	add    esp,0x10
c001879f:	85 c0                	test   eax,eax
c00187a1:	74 cc                	je     c001876f <CPU::detectFeatures()+0x385>
c00187a3:	51                   	push   ecx
c00187a4:	51                   	push   ecx
c00187a5:	68 06 9f 02 c0       	push   0xc0029f06
c00187aa:	57                   	push   edi
c00187ab:	e8 cb 7f fe ff       	call   c000077b <strcmp>
c00187b0:	83 c4 10             	add    esp,0x10
c00187b3:	85 c0                	test   eax,eax
c00187b5:	74 b8                	je     c001876f <CPU::detectFeatures()+0x385>
c00187b7:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00187c1:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00187c6:	0f 86 be 00 00 00    	jbe    c001888a <CPU::detectFeatures()+0x4a0>
c00187cc:	83 ec 0c             	sub    esp,0xc
c00187cf:	68 80 00 00 00       	push   0x80
c00187d4:	e8 ab f8 ff ff       	call   c0018084 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00187d9:	83 e0 01             	and    eax,0x1
c00187dc:	c1 e0 06             	shl    eax,0x6
c00187df:	88 c2                	mov    dl,al
c00187e1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00187e7:	83 e0 bf             	and    eax,0xffffffbf
c00187ea:	09 d0                	or     eax,edx
c00187ec:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00187f2:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00187f9:	e8 86 f8 ff ff       	call   c0018084 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00187fe:	83 e0 01             	and    eax,0x1
c0018801:	c1 e0 04             	shl    eax,0x4
c0018804:	88 c2                	mov    dl,al
c0018806:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001880c:	83 e0 ef             	and    eax,0xffffffef
c001880f:	09 d0                	or     eax,edx
c0018811:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018817:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001881e:	e8 61 f8 ff ff       	call   c0018084 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018823:	c1 e0 07             	shl    eax,0x7
c0018826:	88 c2                	mov    dl,al
c0018828:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001882e:	83 e0 7f             	and    eax,0x7f
c0018831:	09 d0                	or     eax,edx
c0018833:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018839:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018840:	e8 6d f8 ff ff       	call   c00180b2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018845:	83 e0 01             	and    eax,0x1
c0018848:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001884f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018855:	83 e0 f7             	and    eax,0xfffffff7
c0018858:	09 d0                	or     eax,edx
c001885a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018860:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018867:	e8 46 f8 ff ff       	call   c00180b2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001886c:	83 c4 10             	add    esp,0x10
c001886f:	83 e0 01             	and    eax,0x1
c0018872:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018879:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001887f:	83 e0 fb             	and    eax,0xfffffffb
c0018882:	09 d0                	or     eax,edx
c0018884:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001888a:	83 ec 0c             	sub    esp,0xc
c001888d:	56                   	push   esi
c001888e:	55                   	push   ebp
c001888f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018893:	57                   	push   edi
c0018894:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018898:	50                   	push   eax
c0018899:	6a 01                	push   0x1
c001889b:	e8 04 f7 ff ff       	call   c0017fa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188a0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00188a4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00188aa:	88 ca                	mov    dl,cl
c00188ac:	83 e0 f0             	and    eax,0xfffffff0
c00188af:	83 e2 0f             	and    edx,0xf
c00188b2:	09 d0                	or     eax,edx
c00188b4:	88 ca                	mov    dl,cl
c00188b6:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00188bc:	c0 ea 04             	shr    dl,0x4
c00188bf:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00188c3:	0f b6 c2             	movzx  eax,dl
c00188c6:	83 c4 20             	add    esp,0x20
c00188c9:	c1 e0 06             	shl    eax,0x6
c00188cc:	89 c5                	mov    ebp,eax
c00188ce:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00188d4:	66 25 3f c0          	and    ax,0xc03f
c00188d8:	09 e8                	or     eax,ebp
c00188da:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00188e1:	89 c8                	mov    eax,ecx
c00188e3:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00188e9:	c1 e8 08             	shr    eax,0x8
c00188ec:	83 e2 3f             	and    edx,0x3f
c00188ef:	83 e0 0f             	and    eax,0xf
c00188f2:	89 c5                	mov    ebp,eax
c00188f4:	c1 e5 06             	shl    ebp,0x6
c00188f7:	09 d5                	or     ebp,edx
c00188f9:	89 ea                	mov    edx,ebp
c00188fb:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018901:	88 c2                	mov    dl,al
c0018903:	c0 ea 02             	shr    dl,0x2
c0018906:	89 d5                	mov    ebp,edx
c0018908:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001890e:	83 e2 c0             	and    edx,0xffffffc0
c0018911:	09 d5                	or     ebp,edx
c0018913:	89 ea                	mov    edx,ebp
c0018915:	89 cd                	mov    ebp,ecx
c0018917:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001891d:	c1 ed 0c             	shr    ebp,0xc
c0018920:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018926:	83 e5 03             	and    ebp,0x3
c0018929:	83 e2 cf             	and    edx,0xffffffcf
c001892c:	c1 e5 04             	shl    ebp,0x4
c001892f:	09 d5                	or     ebp,edx
c0018931:	3c 06                	cmp    al,0x6
c0018933:	89 ea                	mov    edx,ebp
c0018935:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001893b:	74 04                	je     c0018941 <CPU::detectFeatures()+0x557>
c001893d:	3c 0f                	cmp    al,0xf
c001893f:	75 5c                	jne    c001899d <CPU::detectFeatures()+0x5b3>
c0018941:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018945:	89 cd                	mov    ebp,ecx
c0018947:	c1 ed 10             	shr    ebp,0x10
c001894a:	c1 e5 04             	shl    ebp,0x4
c001894d:	09 ea                	or     edx,ebp
c001894f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018955:	0f b6 d2             	movzx  edx,dl
c0018958:	66 81 e5 3f c0       	and    bp,0xc03f
c001895d:	c1 e2 06             	shl    edx,0x6
c0018960:	09 ea                	or     edx,ebp
c0018962:	3c 0f                	cmp    al,0xf
c0018964:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001896b:	75 30                	jne    c001899d <CPU::detectFeatures()+0x5b3>
c001896d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018973:	c1 e9 14             	shr    ecx,0x14
c0018976:	83 e0 3f             	and    eax,0x3f
c0018979:	83 c1 0f             	add    ecx,0xf
c001897c:	88 ca                	mov    dl,cl
c001897e:	c0 e9 02             	shr    cl,0x2
c0018981:	c1 e2 06             	shl    edx,0x6
c0018984:	09 d0                	or     eax,edx
c0018986:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001898c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018992:	83 e0 c0             	and    eax,0xffffffc0
c0018995:	09 c1                	or     ecx,eax
c0018997:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001899d:	83 ec 0c             	sub    esp,0xc
c00189a0:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00189a7:	56                   	push   esi
c00189a8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189ac:	50                   	push   eax
c00189ad:	57                   	push   edi
c00189ae:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00189b2:	55                   	push   ebp
c00189b3:	68 00 00 00 80       	push   0x80000000
c00189b8:	e8 e7 f5 ff ff       	call   c0017fa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189bd:	83 c4 20             	add    esp,0x20
c00189c0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00189c8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00189cc:	76 1e                	jbe    c00189ec <CPU::detectFeatures()+0x602>
c00189ce:	83 ec 0c             	sub    esp,0xc
c00189d1:	56                   	push   esi
c00189d2:	50                   	push   eax
c00189d3:	57                   	push   edi
c00189d4:	55                   	push   ebp
c00189d5:	68 01 00 00 80       	push   0x80000001
c00189da:	e8 c5 f5 ff ff       	call   c0017fa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189df:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00189e9:	83 c4 20             	add    esp,0x20
c00189ec:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00189f2:	83 f8 01             	cmp    eax,0x1
c00189f5:	75 6f                	jne    c0018a66 <CPU::detectFeatures()+0x67c>
c00189f7:	51                   	push   ecx
c00189f8:	51                   	push   ecx
c00189f9:	68 12 9f 02 c0       	push   0xc0029f12
c00189fe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018a02:	56                   	push   esi
c0018a03:	e8 22 7d fe ff       	call   c000072a <strcpy>
c0018a08:	5f                   	pop    edi
c0018a09:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a0f:	5d                   	pop    ebp
c0018a10:	66 c1 e8 06          	shr    ax,0x6
c0018a14:	0f b6 c0             	movzx  eax,al
c0018a17:	50                   	push   eax
c0018a18:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a1e:	c1 e8 0e             	shr    eax,0xe
c0018a21:	0f b6 c0             	movzx  eax,al
c0018a24:	50                   	push   eax
c0018a25:	e8 24 f2 ff ff       	call   c0017c4e <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018a2a:	5a                   	pop    edx
c0018a2b:	59                   	pop    ecx
c0018a2c:	50                   	push   eax
c0018a2d:	56                   	push   esi
c0018a2e:	e8 ae 7d fe ff       	call   c00007e1 <strcat>
c0018a33:	5f                   	pop    edi
c0018a34:	5d                   	pop    ebp
c0018a35:	56                   	push   esi
c0018a36:	53                   	push   ebx
c0018a37:	e8 1a b2 ff ff       	call   c0013c56 <Device::setName(char const*)>
c0018a3c:	58                   	pop    eax
c0018a3d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018a43:	5a                   	pop    edx
c0018a44:	68 19 9f 02 c0       	push   0xc0029f19
c0018a49:	50                   	push   eax
c0018a4a:	e8 2c 7d fe ff       	call   c000077b <strcmp>
c0018a4f:	83 c4 10             	add    esp,0x10
c0018a52:	85 c0                	test   eax,eax
c0018a54:	0f 85 71 03 00 00    	jne    c0018dcb <CPU::detectFeatures()+0x9e1>
c0018a5a:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018a61:	e9 65 03 00 00       	jmp    c0018dcb <CPU::detectFeatures()+0x9e1>
c0018a66:	83 f8 02             	cmp    eax,0x2
c0018a69:	0f 85 b5 00 00 00    	jne    c0018b24 <CPU::detectFeatures()+0x73a>
c0018a6f:	57                   	push   edi
c0018a70:	57                   	push   edi
c0018a71:	68 2b 9f 02 c0       	push   0xc0029f2b
c0018a76:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018a7a:	56                   	push   esi
c0018a7b:	e8 aa 7c fe ff       	call   c000072a <strcpy>
c0018a80:	5d                   	pop    ebp
c0018a81:	58                   	pop    eax
c0018a82:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a88:	66 c1 e8 06          	shr    ax,0x6
c0018a8c:	0f b6 c0             	movzx  eax,al
c0018a8f:	50                   	push   eax
c0018a90:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a96:	c1 e8 0e             	shr    eax,0xe
c0018a99:	0f b6 c0             	movzx  eax,al
c0018a9c:	50                   	push   eax
c0018a9d:	e8 18 f0 ff ff       	call   c0017aba <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018aa2:	5a                   	pop    edx
c0018aa3:	59                   	pop    ecx
c0018aa4:	50                   	push   eax
c0018aa5:	56                   	push   esi
c0018aa6:	e8 36 7d fe ff       	call   c00007e1 <strcat>
c0018aab:	5f                   	pop    edi
c0018aac:	5d                   	pop    ebp
c0018aad:	56                   	push   esi
c0018aae:	53                   	push   ebx
c0018aaf:	e8 a2 b1 ff ff       	call   c0013c56 <Device::setName(char const*)>
c0018ab4:	58                   	pop    eax
c0018ab5:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018abb:	5a                   	pop    edx
c0018abc:	68 30 9f 02 c0       	push   0xc0029f30
c0018ac1:	50                   	push   eax
c0018ac2:	e8 b4 7c fe ff       	call   c000077b <strcmp>
c0018ac7:	83 c4 10             	add    esp,0x10
c0018aca:	85 c0                	test   eax,eax
c0018acc:	75 20                	jne    c0018aee <CPU::detectFeatures()+0x704>
c0018ace:	8b 15 48 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c848
c0018ad4:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018ada:	a8 01                	test   al,0x1
c0018adc:	74 10                	je     c0018aee <CPU::detectFeatures()+0x704>
c0018ade:	83 e0 fe             	and    eax,0xfffffffe
c0018ae1:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018ae7:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018aee:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018af4:	c1 e8 0e             	shr    eax,0xe
c0018af7:	3c 05                	cmp    al,0x5
c0018af9:	0f 85 cc 02 00 00    	jne    c0018dcb <CPU::detectFeatures()+0x9e1>
c0018aff:	56                   	push   esi
c0018b00:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018b06:	83 e0 0f             	and    eax,0xf
c0018b09:	50                   	push   eax
c0018b0a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b10:	66 c1 e8 06          	shr    ax,0x6
c0018b14:	0f b6 c0             	movzx  eax,al
c0018b17:	50                   	push   eax
c0018b18:	6a 05                	push   0x5
c0018b1a:	e8 11 f4 ff ff       	call   c0017f30 <CPU::AMD_K6_writeback(int, int, int)>
c0018b1f:	e9 1f 02 00 00       	jmp    c0018d43 <CPU::detectFeatures()+0x959>
c0018b24:	8d 50 fd             	lea    edx,[eax-0x3]
c0018b27:	83 fa 01             	cmp    edx,0x1
c0018b2a:	76 09                	jbe    c0018b35 <CPU::detectFeatures()+0x74b>
c0018b2c:	83 f8 06             	cmp    eax,0x6
c0018b2f:	0f 85 91 01 00 00    	jne    c0018cc6 <CPU::detectFeatures()+0x8dc>
c0018b35:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018b3b:	c1 ea 0e             	shr    edx,0xe
c0018b3e:	80 fa 05             	cmp    dl,0x5
c0018b41:	75 7b                	jne    c0018bbe <CPU::detectFeatures()+0x7d4>
c0018b43:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018b49:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018b4e:	66 81 fa 00 01       	cmp    dx,0x100
c0018b53:	75 0c                	jne    c0018b61 <CPU::detectFeatures()+0x777>
c0018b55:	51                   	push   ecx
c0018b56:	51                   	push   ecx
c0018b57:	68 37 9f 02 c0       	push   0xc0029f37
c0018b5c:	e9 dc 01 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x953>
c0018b61:	66 81 fa 00 02       	cmp    dx,0x200
c0018b66:	75 0c                	jne    c0018b74 <CPU::detectFeatures()+0x78a>
c0018b68:	52                   	push   edx
c0018b69:	52                   	push   edx
c0018b6a:	68 4a 9f 02 c0       	push   0xc0029f4a
c0018b6f:	e9 c9 01 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x953>
c0018b74:	66 81 fa 40 02       	cmp    dx,0x240
c0018b79:	75 0c                	jne    c0018b87 <CPU::detectFeatures()+0x79d>
c0018b7b:	50                   	push   eax
c0018b7c:	50                   	push   eax
c0018b7d:	68 5c 9f 02 c0       	push   0xc0029f5c
c0018b82:	e9 b6 01 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x953>
c0018b87:	83 f8 06             	cmp    eax,0x6
c0018b8a:	75 0c                	jne    c0018b98 <CPU::detectFeatures()+0x7ae>
c0018b8c:	50                   	push   eax
c0018b8d:	50                   	push   eax
c0018b8e:	68 6e 9f 02 c0       	push   0xc0029f6e
c0018b93:	e9 a5 01 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x953>
c0018b98:	83 f8 04             	cmp    eax,0x4
c0018b9b:	75 0c                	jne    c0018ba9 <CPU::detectFeatures()+0x7bf>
c0018b9d:	50                   	push   eax
c0018b9e:	50                   	push   eax
c0018b9f:	68 7a 9f 02 c0       	push   0xc0029f7a
c0018ba4:	e9 94 01 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x953>
c0018ba9:	83 f8 03             	cmp    eax,0x3
c0018bac:	0f 85 19 02 00 00    	jne    c0018dcb <CPU::detectFeatures()+0x9e1>
c0018bb2:	50                   	push   eax
c0018bb3:	50                   	push   eax
c0018bb4:	68 82 9f 02 c0       	push   0xc0029f82
c0018bb9:	e9 7f 01 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x953>
c0018bbe:	80 fa 06             	cmp    dl,0x6
c0018bc1:	0f 85 db 00 00 00    	jne    c0018ca2 <CPU::detectFeatures()+0x8b8>
c0018bc7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018bcd:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018bd2:	66 81 fa 80 01       	cmp    dx,0x180
c0018bd7:	75 0c                	jne    c0018be5 <CPU::detectFeatures()+0x7fb>
c0018bd9:	50                   	push   eax
c0018bda:	50                   	push   eax
c0018bdb:	68 8d 9f 02 c0       	push   0xc0029f8d
c0018be0:	e9 58 01 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x953>
c0018be5:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018beb:	66 f7 c1 80 ff       	test   cx,0xff80
c0018bf0:	75 0c                	jne    c0018bfe <CPU::detectFeatures()+0x814>
c0018bf2:	50                   	push   eax
c0018bf3:	50                   	push   eax
c0018bf4:	68 9d 9f 02 c0       	push   0xc0029f9d
c0018bf9:	e9 3f 01 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x953>
c0018bfe:	66 81 fa 40 02       	cmp    dx,0x240
c0018c03:	75 0c                	jne    c0018c11 <CPU::detectFeatures()+0x827>
c0018c05:	55                   	push   ebp
c0018c06:	55                   	push   ebp
c0018c07:	68 a4 9f 02 c0       	push   0xc0029fa4
c0018c0c:	e9 2c 01 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x953>
c0018c11:	66 81 fa 80 02       	cmp    dx,0x280
c0018c16:	75 0c                	jne    c0018c24 <CPU::detectFeatures()+0x83a>
c0018c18:	57                   	push   edi
c0018c19:	57                   	push   edi
c0018c1a:	68 ad 9f 02 c0       	push   0xc0029fad
c0018c1f:	e9 19 01 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x953>
c0018c24:	66 81 fa 40 03       	cmp    dx,0x340
c0018c29:	74 ed                	je     c0018c18 <CPU::detectFeatures()+0x82e>
c0018c2b:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018c30:	75 0c                	jne    c0018c3e <CPU::detectFeatures()+0x854>
c0018c32:	56                   	push   esi
c0018c33:	56                   	push   esi
c0018c34:	68 b4 9f 02 c0       	push   0xc0029fb4
c0018c39:	e9 ff 00 00 00       	jmp    c0018d3d <CPU::detectFeatures()+0x953>
c0018c3e:	83 f8 06             	cmp    eax,0x6
c0018c41:	0f 84 45 ff ff ff    	je     c0018b8c <CPU::detectFeatures()+0x7a2>
c0018c47:	83 f8 04             	cmp    eax,0x4
c0018c4a:	0f 84 4d ff ff ff    	je     c0018b9d <CPU::detectFeatures()+0x7b3>
c0018c50:	83 f8 03             	cmp    eax,0x3
c0018c53:	0f 85 72 01 00 00    	jne    c0018dcb <CPU::detectFeatures()+0x9e1>
c0018c59:	51                   	push   ecx
c0018c5a:	51                   	push   ecx
c0018c5b:	68 bd 9f 02 c0       	push   0xc0029fbd
c0018c60:	53                   	push   ebx
c0018c61:	e8 f0 af ff ff       	call   c0013c56 <Device::setName(char const*)>
c0018c66:	b1 c1                	mov    cl,0xc1
c0018c68:	88 c8                	mov    al,cl
c0018c6a:	e6 22                	out    0x22,al
c0018c6c:	e4 23                	in     al,0x23
c0018c6e:	88 c2                	mov    dl,al
c0018c70:	88 c8                	mov    al,cl
c0018c72:	e6 22                	out    0x22,al
c0018c74:	88 d0                	mov    al,dl
c0018c76:	83 c8 10             	or     eax,0x10
c0018c79:	e6 23                	out    0x23,al
c0018c7b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018c82:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018c85:	89 d0                	mov    eax,edx
c0018c87:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018c8d:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018c91:	40                   	inc    eax
c0018c92:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018c98:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018c9d:	e9 a1 00 00 00       	jmp    c0018d43 <CPU::detectFeatures()+0x959>
c0018ca2:	83 f8 06             	cmp    eax,0x6
c0018ca5:	0f 84 e1 fe ff ff    	je     c0018b8c <CPU::detectFeatures()+0x7a2>
c0018cab:	83 f8 04             	cmp    eax,0x4
c0018cae:	0f 84 e9 fe ff ff    	je     c0018b9d <CPU::detectFeatures()+0x7b3>
c0018cb4:	83 f8 03             	cmp    eax,0x3
c0018cb7:	0f 85 0e 01 00 00    	jne    c0018dcb <CPU::detectFeatures()+0x9e1>
c0018cbd:	52                   	push   edx
c0018cbe:	52                   	push   edx
c0018cbf:	68 c8 9f 02 c0       	push   0xc0029fc8
c0018cc4:	eb 77                	jmp    c0018d3d <CPU::detectFeatures()+0x953>
c0018cc6:	83 f8 07             	cmp    eax,0x7
c0018cc9:	75 09                	jne    c0018cd4 <CPU::detectFeatures()+0x8ea>
c0018ccb:	50                   	push   eax
c0018ccc:	50                   	push   eax
c0018ccd:	68 d2 9f 02 c0       	push   0xc0029fd2
c0018cd2:	eb 69                	jmp    c0018d3d <CPU::detectFeatures()+0x953>
c0018cd4:	83 f8 0a             	cmp    eax,0xa
c0018cd7:	75 09                	jne    c0018ce2 <CPU::detectFeatures()+0x8f8>
c0018cd9:	50                   	push   eax
c0018cda:	50                   	push   eax
c0018cdb:	68 dd 9f 02 c0       	push   0xc0029fdd
c0018ce0:	eb 5b                	jmp    c0018d3d <CPU::detectFeatures()+0x953>
c0018ce2:	83 f8 0b             	cmp    eax,0xb
c0018ce5:	75 09                	jne    c0018cf0 <CPU::detectFeatures()+0x906>
c0018ce7:	50                   	push   eax
c0018ce8:	50                   	push   eax
c0018ce9:	68 e5 9f 02 c0       	push   0xc0029fe5
c0018cee:	eb 4d                	jmp    c0018d3d <CPU::detectFeatures()+0x953>
c0018cf0:	83 f8 08             	cmp    eax,0x8
c0018cf3:	75 09                	jne    c0018cfe <CPU::detectFeatures()+0x914>
c0018cf5:	50                   	push   eax
c0018cf6:	50                   	push   eax
c0018cf7:	68 ee 9f 02 c0       	push   0xc0029fee
c0018cfc:	eb 3f                	jmp    c0018d3d <CPU::detectFeatures()+0x953>
c0018cfe:	83 f8 09             	cmp    eax,0x9
c0018d01:	75 09                	jne    c0018d0c <CPU::detectFeatures()+0x922>
c0018d03:	50                   	push   eax
c0018d04:	50                   	push   eax
c0018d05:	68 f6 9f 02 c0       	push   0xc0029ff6
c0018d0a:	eb 31                	jmp    c0018d3d <CPU::detectFeatures()+0x953>
c0018d0c:	83 f8 05             	cmp    eax,0x5
c0018d0f:	75 09                	jne    c0018d1a <CPU::detectFeatures()+0x930>
c0018d11:	50                   	push   eax
c0018d12:	50                   	push   eax
c0018d13:	68 fe 9f 02 c0       	push   0xc0029ffe
c0018d18:	eb 23                	jmp    c0018d3d <CPU::detectFeatures()+0x953>
c0018d1a:	83 f8 0c             	cmp    eax,0xc
c0018d1d:	75 09                	jne    c0018d28 <CPU::detectFeatures()+0x93e>
c0018d1f:	55                   	push   ebp
c0018d20:	55                   	push   ebp
c0018d21:	68 0c a0 02 c0       	push   0xc002a00c
c0018d26:	eb 15                	jmp    c0018d3d <CPU::detectFeatures()+0x953>
c0018d28:	83 f8 0d             	cmp    eax,0xd
c0018d2b:	75 09                	jne    c0018d36 <CPU::detectFeatures()+0x94c>
c0018d2d:	57                   	push   edi
c0018d2e:	57                   	push   edi
c0018d2f:	68 17 a0 02 c0       	push   0xc002a017
c0018d34:	eb 07                	jmp    c0018d3d <CPU::detectFeatures()+0x953>
c0018d36:	56                   	push   esi
c0018d37:	56                   	push   esi
c0018d38:	68 2b a0 02 c0       	push   0xc002a02b
c0018d3d:	53                   	push   ebx
c0018d3e:	e8 13 af ff ff       	call   c0013c56 <Device::setName(char const*)>
c0018d43:	83 c4 10             	add    esp,0x10
c0018d46:	e9 80 00 00 00       	jmp    c0018dcb <CPU::detectFeatures()+0x9e1>
c0018d4b:	51                   	push   ecx
c0018d4c:	51                   	push   ecx
c0018d4d:	68 77 9e 02 c0       	push   0xc0029e77
c0018d52:	57                   	push   edi
c0018d53:	e8 d2 79 fe ff       	call   c000072a <strcpy>
c0018d58:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018d62:	e8 fc 74 fe ff       	call   c0000263 <is486>
c0018d67:	83 c4 10             	add    esp,0x10
c0018d6a:	85 c0                	test   eax,eax
c0018d6c:	74 2b                	je     c0018d99 <CPU::detectFeatures()+0x9af>
c0018d6e:	52                   	push   edx
c0018d6f:	52                   	push   edx
c0018d70:	68 37 a0 02 c0       	push   0xc002a037
c0018d75:	53                   	push   ebx
c0018d76:	e8 db ae ff ff       	call   c0013c56 <Device::setName(char const*)>
c0018d7b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018d82:	0f 20 c0             	mov    eax,cr0
c0018d85:	83 e0 14             	and    eax,0x14
c0018d88:	83 c4 10             	add    esp,0x10
c0018d8b:	83 f8 04             	cmp    eax,0x4
c0018d8e:	75 1f                	jne    c0018daf <CPU::detectFeatures()+0x9c5>
c0018d90:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018d97:	eb 32                	jmp    c0018dcb <CPU::detectFeatures()+0x9e1>
c0018d99:	50                   	push   eax
c0018d9a:	50                   	push   eax
c0018d9b:	68 42 a0 02 c0       	push   0xc002a042
c0018da0:	53                   	push   ebx
c0018da1:	e8 b0 ae ff ff       	call   c0013c56 <Device::setName(char const*)>
c0018da6:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018dad:	eb d3                	jmp    c0018d82 <CPU::detectFeatures()+0x998>
c0018daf:	e8 8a 74 fe ff       	call   c000023e <hasLegacyFPU>
c0018db4:	83 e0 01             	and    eax,0x1
c0018db7:	8d 14 00             	lea    edx,[eax+eax*1]
c0018dba:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018dc0:	83 e0 fd             	and    eax,0xfffffffd
c0018dc3:	09 d0                	or     eax,edx
c0018dc5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018dcb:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018dd2:	83 c4 4c             	add    esp,0x4c
c0018dd5:	5b                   	pop    ebx
c0018dd6:	5e                   	pop    esi
c0018dd7:	5f                   	pop    edi
c0018dd8:	5d                   	pop    ebp
c0018dd9:	c3                   	ret    

c0018dda <CPU::setupSMEP()>:
c0018dda:	0f 20 e0             	mov    eax,cr4
c0018ddd:	0d 00 00 10 00       	or     eax,0x100000
c0018de2:	0f 22 e0             	mov    cr4,eax
c0018de5:	c3                   	ret    

c0018de6 <CPU::setupUMIP()>:
c0018de6:	0f 20 e0             	mov    eax,cr4
c0018de9:	80 cc 08             	or     ah,0x8
c0018dec:	0f 22 e0             	mov    cr4,eax
c0018def:	c3                   	ret    

c0018df0 <CPU::setupTSC()>:
c0018df0:	0f 20 e0             	mov    eax,cr4
c0018df3:	83 c8 04             	or     eax,0x4
c0018df6:	0f 22 e0             	mov    cr4,eax
c0018df9:	c3                   	ret    

c0018dfa <CPU::setupLargePages()>:
c0018dfa:	0f 20 e0             	mov    eax,cr4
c0018dfd:	83 c8 10             	or     eax,0x10
c0018e00:	0f 22 e0             	mov    cr4,eax
c0018e03:	c3                   	ret    

c0018e04 <CPU::setupPAT()>:
c0018e04:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0018e09:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018e10:	74 2c                	je     c0018e3e <CPU::setupPAT()+0x3a>
c0018e12:	53                   	push   ebx
c0018e13:	83 ec 10             	sub    esp,0x10
c0018e16:	68 77 02 00 00       	push   0x277
c0018e1b:	50                   	push   eax
c0018e1c:	e8 5b 5c ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c0018e21:	83 e2 f8             	and    edx,0xfffffff8
c0018e24:	83 ca 01             	or     edx,0x1
c0018e27:	52                   	push   edx
c0018e28:	50                   	push   eax
c0018e29:	68 77 02 00 00       	push   0x277
c0018e2e:	ff 35 48 c8 02 c0    	push   DWORD PTR ds:0xc002c848
c0018e34:	e8 6f 5c ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018e39:	83 c4 28             	add    esp,0x28
c0018e3c:	5b                   	pop    ebx
c0018e3d:	c3                   	ret    
c0018e3e:	c3                   	ret    
c0018e3f:	90                   	nop

c0018e40 <CPU::setupMTRR()>:
c0018e40:	c3                   	ret    
c0018e41:	90                   	nop

c0018e42 <CPU::setupGlobalPages()>:
c0018e42:	0f 20 e0             	mov    eax,cr4
c0018e45:	0c 80                	or     al,0x80
c0018e47:	0f 22 e0             	mov    cr4,eax
c0018e4a:	c3                   	ret    
c0018e4b:	90                   	nop

c0018e4c <CPU::allowUsermodeDataAccess()>:
c0018e4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e50:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018e57:	74 03                	je     c0018e5c <CPU::allowUsermodeDataAccess()+0x10>
c0018e59:	0f 01 cb             	stac   
c0018e5c:	c3                   	ret    
c0018e5d:	90                   	nop

c0018e5e <CPU::prohibitUsermodeDataAccess()>:
c0018e5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e62:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018e69:	74 03                	je     c0018e6e <CPU::prohibitUsermodeDataAccess()+0x10>
c0018e6b:	0f 01 ca             	clac   
c0018e6e:	c3                   	ret    
c0018e6f:	90                   	nop

c0018e70 <CPU::setupSMAP()>:
c0018e70:	0f 20 e0             	mov    eax,cr4
c0018e73:	0d 00 00 20 00       	or     eax,0x200000
c0018e78:	0f 22 e0             	mov    cr4,eax
c0018e7b:	eb e1                	jmp    c0018e5e <CPU::prohibitUsermodeDataAccess()>
c0018e7d:	90                   	nop

c0018e7e <CPU::setupFeatures()>:
c0018e7e:	83 ec 0c             	sub    esp,0xc
c0018e81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e85:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018e8c:	74 07                	je     c0018e95 <CPU::setupFeatures()+0x17>
c0018e8e:	52                   	push   edx
c0018e8f:	e8 46 ff ff ff       	call   c0018dda <CPU::setupSMEP()>
c0018e94:	58                   	pop    eax
c0018e95:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0018e9c:	74 07                	je     c0018ea5 <CPU::setupFeatures()+0x27>
c0018e9e:	52                   	push   edx
c0018e9f:	e8 cc ff ff ff       	call   c0018e70 <CPU::setupSMAP()>
c0018ea4:	58                   	pop    eax
c0018ea5:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0018eac:	74 07                	je     c0018eb5 <CPU::setupFeatures()+0x37>
c0018eae:	52                   	push   edx
c0018eaf:	e8 32 ff ff ff       	call   c0018de6 <CPU::setupUMIP()>
c0018eb4:	58                   	pop    eax
c0018eb5:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0018ebc:	74 07                	je     c0018ec5 <CPU::setupFeatures()+0x47>
c0018ebe:	52                   	push   edx
c0018ebf:	e8 2c ff ff ff       	call   c0018df0 <CPU::setupTSC()>
c0018ec4:	58                   	pop    eax
c0018ec5:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0018ecc:	74 07                	je     c0018ed5 <CPU::setupFeatures()+0x57>
c0018ece:	52                   	push   edx
c0018ecf:	e8 26 ff ff ff       	call   c0018dfa <CPU::setupLargePages()>
c0018ed4:	59                   	pop    ecx
c0018ed5:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0018edc:	74 07                	je     c0018ee5 <CPU::setupFeatures()+0x67>
c0018ede:	52                   	push   edx
c0018edf:	e8 5e ff ff ff       	call   c0018e42 <CPU::setupGlobalPages()>
c0018ee4:	58                   	pop    eax
c0018ee5:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0018eec:	74 0c                	je     c0018efa <CPU::setupFeatures()+0x7c>
c0018eee:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018ef2:	83 c4 0c             	add    esp,0xc
c0018ef5:	e9 0a ff ff ff       	jmp    c0018e04 <CPU::setupPAT()>
c0018efa:	83 c4 0c             	add    esp,0xc
c0018efd:	c3                   	ret    

c0018efe <CPU::open(int, int, void*)>:
c0018efe:	57                   	push   edi
c0018eff:	56                   	push   esi
c0018f00:	53                   	push   ebx
c0018f01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018f05:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018f09:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018f0f:	83 ec 0c             	sub    esp,0xc
c0018f12:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0018f18:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0018f1e:	50                   	push   eax
c0018f1f:	e8 44 5e ff ff       	call   c000ed68 <GDT::setup()>
c0018f24:	83 c4 0c             	add    esp,0xc
c0018f27:	6a 00                	push   0x0
c0018f29:	68 ef be ad de       	push   0xdeadbeef
c0018f2e:	57                   	push   edi
c0018f2f:	e8 d2 80 ff ff       	call   c0011006 <TSS::setup(unsigned long, unsigned long)>
c0018f34:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018f37:	e8 aa 80 ff ff       	call   c0010fe6 <TSS::flush()>
c0018f3c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0018f42:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f45:	e8 7a 60 ff ff       	call   c000efc4 <IDT::setup()>
c0018f4a:	b8 00 04 00 00       	mov    eax,0x400
c0018f4f:	0f 23 f8             	mov    db7,eax
c0018f52:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0018f5c:	e8 4b 6a ff ff       	call   c000f9ac <Phys::allocatePage()>
c0018f61:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0018f67:	89 30                	mov    DWORD PTR [eax],esi
c0018f69:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0018f6f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018f72:	58                   	pop    eax
c0018f73:	5a                   	pop    edx
c0018f74:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0018f7a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018f7e:	e8 b5 90 ff ff       	call   c0012038 <VAS::setCPUSpecific(unsigned long)>
c0018f83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f86:	e8 5f f4 ff ff       	call   c00183ea <CPU::detectFeatures()>
c0018f8b:	e8 aa bf ff ff       	call   c0014f3a <setupInterruptController()>
c0018f90:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0018f96:	a1 60 c8 02 c0       	mov    eax,ds:0xc002c860
c0018f9b:	83 e0 10             	and    eax,0x10
c0018f9e:	83 f8 01             	cmp    eax,0x1
c0018fa1:	19 c0                	sbb    eax,eax
c0018fa3:	83 e0 46             	and    eax,0x46
c0018fa6:	83 c0 1e             	add    eax,0x1e
c0018fa9:	89 04 24             	mov    DWORD PTR [esp],eax
c0018fac:	e8 41 d4 ff ff       	call   c00163f2 <setupTimer(int)>
c0018fb1:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0018fb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018fba:	e8 bf fe ff ff       	call   c0018e7e <CPU::setupFeatures()>
c0018fbf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018fc2:	e8 a7 f1 ff ff       	call   c001816e <CPU::displayFeatures()>
c0018fc7:	83 c4 10             	add    esp,0x10
c0018fca:	31 c0                	xor    eax,eax
c0018fcc:	5b                   	pop    ebx
c0018fcd:	5e                   	pop    esi
c0018fce:	5f                   	pop    edi
c0018fcf:	c3                   	ret    

c0018fd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0018fd0:	57                   	push   edi
c0018fd1:	56                   	push   esi
c0018fd2:	53                   	push   ebx
c0018fd3:	51                   	push   ecx
c0018fd4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018fd8:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0018fdb:	0f 02 c0             	lar    eax,ax
c0018fde:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0018fe1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018fe5:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0018fe8:	88 ca                	mov    dl,cl
c0018fea:	c0 ea 06             	shr    dl,0x6
c0018fed:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0018ff1:	89 ca                	mov    edx,ecx
c0018ff3:	66 c1 ea 03          	shr    dx,0x3
c0018ff7:	83 e2 07             	and    edx,0x7
c0018ffa:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0018fff:	88 17                	mov    BYTE PTR [edi],dl
c0019001:	0f 84 a6 01 00 00    	je     c00191ad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019007:	83 e1 07             	and    ecx,0x7
c001900a:	80 f9 04             	cmp    cl,0x4
c001900d:	0f 84 98 00 00 00    	je     c00190ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019013:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019018:	0f 95 c0             	setne  al
c001901b:	80 f9 05             	cmp    cl,0x5
c001901e:	0f 95 c2             	setne  dl
c0019021:	08 c2                	or     dl,al
c0019023:	74 79                	je     c001909e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019025:	84 c9                	test   cl,cl
c0019027:	75 05                	jne    c001902e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019029:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001902c:	eb 3c                	jmp    c001906a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001902e:	80 f9 01             	cmp    cl,0x1
c0019031:	75 05                	jne    c0019038 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019033:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019036:	eb 32                	jmp    c001906a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019038:	80 f9 02             	cmp    cl,0x2
c001903b:	75 05                	jne    c0019042 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001903d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019040:	eb 28                	jmp    c001906a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019042:	31 c0                	xor    eax,eax
c0019044:	80 f9 03             	cmp    cl,0x3
c0019047:	75 05                	jne    c001904e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019049:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001904c:	eb 1c                	jmp    c001906a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001904e:	80 f9 05             	cmp    cl,0x5
c0019051:	75 05                	jne    c0019058 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019053:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019056:	eb 12                	jmp    c001906a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019058:	80 f9 06             	cmp    cl,0x6
c001905b:	75 05                	jne    c0019062 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001905d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019060:	eb 08                	jmp    c001906a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019062:	80 f9 07             	cmp    cl,0x7
c0019065:	75 03                	jne    c001906a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019067:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001906a:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001906f:	75 10                	jne    c0019081 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019071:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019075:	b9 03 00 00 00       	mov    ecx,0x3
c001907a:	01 d0                	add    eax,edx
c001907c:	e9 37 01 00 00       	jmp    c00191b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019081:	b9 02 00 00 00       	mov    ecx,0x2
c0019086:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001908b:	0f 85 27 01 00 00    	jne    c00191b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019091:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019094:	b9 06 00 00 00       	mov    ecx,0x6
c0019099:	e9 1a 01 00 00       	jmp    c00191b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001909e:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00190a1:	b9 06 00 00 00       	mov    ecx,0x6
c00190a6:	e9 0f 01 00 00       	jmp    c00191ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00190ab:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00190ae:	88 ca                	mov    dl,cl
c00190b0:	c0 ea 06             	shr    dl,0x6
c00190b3:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00190b7:	89 ca                	mov    edx,ecx
c00190b9:	66 c1 ea 03          	shr    dx,0x3
c00190bd:	83 e2 07             	and    edx,0x7
c00190c0:	80 e1 07             	and    cl,0x7
c00190c3:	75 05                	jne    c00190ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00190c5:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00190c8:	eb 4c                	jmp    c0019116 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00190ca:	80 f9 01             	cmp    cl,0x1
c00190cd:	75 05                	jne    c00190d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00190cf:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00190d2:	eb 42                	jmp    c0019116 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00190d4:	80 f9 02             	cmp    cl,0x2
c00190d7:	75 05                	jne    c00190de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00190d9:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00190dc:	eb 38                	jmp    c0019116 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00190de:	80 f9 03             	cmp    cl,0x3
c00190e1:	75 05                	jne    c00190e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00190e3:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00190e6:	eb 2e                	jmp    c0019116 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00190e8:	80 f9 04             	cmp    cl,0x4
c00190eb:	75 12                	jne    c00190ff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00190ed:	f6 c4 60             	test   ah,0x60
c00190f0:	75 08                	jne    c00190fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00190f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00190f5:	8d 78 14             	lea    edi,[eax+0x14]
c00190f8:	eb 1c                	jmp    c0019116 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00190fa:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00190fd:	eb 17                	jmp    c0019116 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00190ff:	80 f9 05             	cmp    cl,0x5
c0019102:	75 05                	jne    c0019109 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019104:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019107:	eb 0d                	jmp    c0019116 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019109:	80 f9 06             	cmp    cl,0x6
c001910c:	75 05                	jne    c0019113 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001910e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019111:	eb 03                	jmp    c0019116 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019113:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019116:	84 d2                	test   dl,dl
c0019118:	75 05                	jne    c001911f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001911a:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001911d:	eb 3c                	jmp    c001915b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001911f:	80 fa 01             	cmp    dl,0x1
c0019122:	75 05                	jne    c0019129 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019124:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019127:	eb 32                	jmp    c001915b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019129:	80 fa 02             	cmp    dl,0x2
c001912c:	75 05                	jne    c0019133 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001912e:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019131:	eb 28                	jmp    c001915b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019133:	80 fa 03             	cmp    dl,0x3
c0019136:	75 05                	jne    c001913d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019138:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001913b:	eb 1e                	jmp    c001915b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001913d:	31 c0                	xor    eax,eax
c001913f:	80 fa 04             	cmp    dl,0x4
c0019142:	74 17                	je     c001915b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019144:	80 fa 05             	cmp    dl,0x5
c0019147:	75 05                	jne    c001914e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019149:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001914c:	eb 0d                	jmp    c001915b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001914e:	80 fa 06             	cmp    dl,0x6
c0019151:	75 05                	jne    c0019158 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019153:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019156:	eb 03                	jmp    c001915b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019158:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001915b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019160:	0f 94 c2             	sete   dl
c0019163:	80 f9 05             	cmp    cl,0x5
c0019166:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001916a:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001916f:	d3 e0                	shl    eax,cl
c0019171:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019175:	74 0a                	je     c0019181 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019177:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001917a:	b9 07 00 00 00       	mov    ecx,0x7
c001917f:	eb 37                	jmp    c00191b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019181:	01 f8                	add    eax,edi
c0019183:	b9 03 00 00 00       	mov    ecx,0x3
c0019188:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001918d:	74 2b                	je     c00191ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001918f:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019194:	75 0d                	jne    c00191a3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019196:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001919a:	01 c8                	add    eax,ecx
c001919c:	b9 04 00 00 00       	mov    ecx,0x4
c00191a1:	eb 17                	jmp    c00191ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191a3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00191a6:	b9 07 00 00 00       	mov    ecx,0x7
c00191ab:	eb 0d                	jmp    c00191ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191ad:	b9 02 00 00 00       	mov    ecx,0x2
c00191b2:	b2 01                	mov    dl,0x1
c00191b4:	31 c0                	xor    eax,eax
c00191b6:	eb 02                	jmp    c00191ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191b8:	31 d2                	xor    edx,edx
c00191ba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00191be:	89 0b                	mov    DWORD PTR [ebx],ecx
c00191c0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00191c4:	88 11                	mov    BYTE PTR [ecx],dl
c00191c6:	5a                   	pop    edx
c00191c7:	5b                   	pop    ebx
c00191c8:	5e                   	pop    esi
c00191c9:	5f                   	pop    edi
c00191ca:	c3                   	ret    
c00191cb:	90                   	nop

c00191cc <EnvVarContainer::getEnv(char const*)>:
c00191cc:	57                   	push   edi
c00191cd:	56                   	push   esi
c00191ce:	53                   	push   ebx
c00191cf:	31 db                	xor    ebx,ebx
c00191d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00191d5:	39 1e                	cmp    DWORD PTR [esi],ebx
c00191d7:	7e 2b                	jle    c0019204 <EnvVarContainer::getEnv(char const*)+0x38>
c00191d9:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00191e0:	50                   	push   eax
c00191e1:	50                   	push   eax
c00191e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00191e5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00191e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00191ec:	e8 8a 75 fe ff       	call   c000077b <strcmp>
c00191f1:	83 c4 10             	add    esp,0x10
c00191f4:	85 c0                	test   eax,eax
c00191f6:	75 09                	jne    c0019201 <EnvVarContainer::getEnv(char const*)+0x35>
c00191f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00191fb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00191ff:	eb 05                	jmp    c0019206 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019201:	43                   	inc    ebx
c0019202:	eb d1                	jmp    c00191d5 <EnvVarContainer::getEnv(char const*)+0x9>
c0019204:	31 c0                	xor    eax,eax
c0019206:	5b                   	pop    ebx
c0019207:	5e                   	pop    esi
c0019208:	5f                   	pop    edi
c0019209:	c3                   	ret    

c001920a <EnvVarContainer::setEnv(char const*, char const*)>:
c001920a:	57                   	push   edi
c001920b:	56                   	push   esi
c001920c:	53                   	push   ebx
c001920d:	83 ec 1c             	sub    esp,0x1c
c0019210:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019214:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019218:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001921c:	57                   	push   edi
c001921d:	e8 86 74 fe ff       	call   c00006a8 <strlen>
c0019222:	40                   	inc    eax
c0019223:	89 04 24             	mov    DWORD PTR [esp],eax
c0019226:	e8 a9 62 ff ff       	call   c000f4d4 <malloc>
c001922b:	89 34 24             	mov    DWORD PTR [esp],esi
c001922e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019232:	e8 71 74 fe ff       	call   c00006a8 <strlen>
c0019237:	40                   	inc    eax
c0019238:	89 04 24             	mov    DWORD PTR [esp],eax
c001923b:	e8 94 62 ff ff       	call   c000f4d4 <malloc>
c0019240:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019243:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019247:	e8 5c 74 fe ff       	call   c00006a8 <strlen>
c001924c:	83 c4 0c             	add    esp,0xc
c001924f:	40                   	inc    eax
c0019250:	50                   	push   eax
c0019251:	6a 00                	push   0x0
c0019253:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019257:	e8 2f 74 fe ff       	call   c000068b <memset>
c001925c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001925f:	e8 44 74 fe ff       	call   c00006a8 <strlen>
c0019264:	83 c4 0c             	add    esp,0xc
c0019267:	40                   	inc    eax
c0019268:	50                   	push   eax
c0019269:	57                   	push   edi
c001926a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001926e:	e8 e2 73 fe ff       	call   c0000655 <memcpy>
c0019273:	89 34 24             	mov    DWORD PTR [esp],esi
c0019276:	e8 2d 74 fe ff       	call   c00006a8 <strlen>
c001927b:	83 c4 0c             	add    esp,0xc
c001927e:	40                   	inc    eax
c001927f:	50                   	push   eax
c0019280:	6a 00                	push   0x0
c0019282:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019286:	e8 00 74 fe ff       	call   c000068b <memset>
c001928b:	89 34 24             	mov    DWORD PTR [esp],esi
c001928e:	e8 15 74 fe ff       	call   c00006a8 <strlen>
c0019293:	83 c4 0c             	add    esp,0xc
c0019296:	40                   	inc    eax
c0019297:	50                   	push   eax
c0019298:	56                   	push   esi
c0019299:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001929d:	e8 b3 73 fe ff       	call   c0000655 <memcpy>
c00192a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00192a4:	40                   	inc    eax
c00192a5:	89 03                	mov    DWORD PTR [ebx],eax
c00192a7:	c1 e0 03             	shl    eax,0x3
c00192aa:	5a                   	pop    edx
c00192ab:	59                   	pop    ecx
c00192ac:	50                   	push   eax
c00192ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00192b0:	e8 0b 62 ff ff       	call   c000f4c0 <realloc>
c00192b5:	83 c4 0c             	add    esp,0xc
c00192b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00192bb:	6a 08                	push   0x8
c00192bd:	8d 54 24 10          	lea    edx,[esp+0x10]
c00192c1:	52                   	push   edx
c00192c2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00192c4:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c00192c8:	50                   	push   eax
c00192c9:	e8 87 73 fe ff       	call   c0000655 <memcpy>
c00192ce:	83 c4 20             	add    esp,0x20
c00192d1:	5b                   	pop    ebx
c00192d2:	5e                   	pop    esi
c00192d3:	5f                   	pop    edi
c00192d4:	c3                   	ret    
c00192d5:	90                   	nop

c00192d6 <EnvVarContainer::deleteEnv(char const*)>:
c00192d6:	c3                   	ret    
c00192d7:	90                   	nop

c00192d8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00192d8:	55                   	push   ebp
c00192d9:	57                   	push   edi
c00192da:	56                   	push   esi
c00192db:	53                   	push   ebx
c00192dc:	81 ec 38 01 00 00    	sub    esp,0x138
c00192e2:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c00192e9:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c00192f0:	68 14 01 00 00       	push   0x114
c00192f5:	e8 da 61 ff ff       	call   c000f4d4 <malloc>
c00192fa:	83 c4 0c             	add    esp,0xc
c00192fd:	89 c7                	mov    edi,eax
c00192ff:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019302:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019309:	50                   	push   eax
c001930a:	e8 a5 98 ff ff       	call   c0012bb4 <File::File(char const*, Process*)>
c001930f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019312:	e8 6f 9b ff ff       	call   c0012e86 <File::exists()>
c0019317:	83 c4 10             	add    esp,0x10
c001931a:	84 c0                	test   al,al
c001931c:	75 31                	jne    c001934f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001931e:	51                   	push   ecx
c001931f:	51                   	push   ecx
c0019320:	6a 12                	push   0x12
c0019322:	57                   	push   edi
c0019323:	e8 f0 98 ff ff       	call   c0012c18 <File::open(FileOpenMode)>
c0019328:	8b 07                	mov    eax,DWORD PTR [edi]
c001932a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001932d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019330:	e8 73 73 fe ff       	call   c00006a8 <strlen>
c0019335:	5a                   	pop    edx
c0019336:	31 d2                	xor    edx,edx
c0019338:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001933c:	51                   	push   ecx
c001933d:	55                   	push   ebp
c001933e:	52                   	push   edx
c001933f:	50                   	push   eax
c0019340:	57                   	push   edi
c0019341:	ff d3                	call   ebx
c0019343:	83 c4 14             	add    esp,0x14
c0019346:	57                   	push   edi
c0019347:	e8 2a 99 ff ff       	call   c0012c76 <File::close()>
c001934c:	83 c4 10             	add    esp,0x10
c001934f:	31 db                	xor    ebx,ebx
c0019351:	50                   	push   eax
c0019352:	31 ed                	xor    ebp,ebp
c0019354:	68 00 01 00 00       	push   0x100
c0019359:	6a 00                	push   0x0
c001935b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001935f:	50                   	push   eax
c0019360:	e8 26 73 fe ff       	call   c000068b <memset>
c0019365:	58                   	pop    eax
c0019366:	5a                   	pop    edx
c0019367:	6a 01                	push   0x1
c0019369:	57                   	push   edi
c001936a:	e8 a9 98 ff ff       	call   c0012c18 <File::open(FileOpenMode)>
c001936f:	83 c4 10             	add    esp,0x10
c0019372:	83 ec 0c             	sub    esp,0xc
c0019375:	8b 07                	mov    eax,DWORD PTR [edi]
c0019377:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001937b:	51                   	push   ecx
c001937c:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019380:	52                   	push   edx
c0019381:	6a 00                	push   0x0
c0019383:	6a 01                	push   0x1
c0019385:	57                   	push   edi
c0019386:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019389:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001938d:	83 c4 20             	add    esp,0x20
c0019390:	3c 0d                	cmp    al,0xd
c0019392:	0f 84 12 01 00 00    	je     c00194aa <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019398:	85 db                	test   ebx,ebx
c001939a:	0f 84 fd 00 00 00    	je     c001949d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00193a0:	3c 0a                	cmp    al,0xa
c00193a2:	74 13                	je     c00193b7 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00193a4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00193a9:	74 0c                	je     c00193b7 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00193ab:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c00193b1:	0f 8e e6 00 00 00    	jle    c001949d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00193b7:	83 ec 0c             	sub    esp,0xc
c00193ba:	8d 53 01             	lea    edx,[ebx+0x1]
c00193bd:	29 dd                	sub    ebp,ebx
c00193bf:	52                   	push   edx
c00193c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00193c4:	e8 0b 61 ff ff       	call   c000f4d4 <malloc>
c00193c9:	8d 4d 04             	lea    ecx,[ebp+0x4]
c00193cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00193d0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00193d3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00193d7:	e8 f8 60 ff ff       	call   c000f4d4 <malloc>
c00193dc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00193e0:	83 c4 0c             	add    esp,0xc
c00193e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00193e7:	52                   	push   edx
c00193e8:	6a 00                	push   0x0
c00193ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00193ee:	e8 98 72 fe ff       	call   c000068b <memset>
c00193f3:	83 c4 0c             	add    esp,0xc
c00193f6:	53                   	push   ebx
c00193f7:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00193fb:	55                   	push   ebp
c00193fc:	01 eb                	add    ebx,ebp
c00193fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019402:	e8 4e 72 fe ff       	call   c0000655 <memcpy>
c0019407:	83 c4 0c             	add    esp,0xc
c001940a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001940e:	51                   	push   ecx
c001940f:	6a 00                	push   0x0
c0019411:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019415:	e8 71 72 fe ff       	call   c000068b <memset>
c001941a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001941d:	e8 86 72 fe ff       	call   c00006a8 <strlen>
c0019422:	83 c4 0c             	add    esp,0xc
c0019425:	50                   	push   eax
c0019426:	53                   	push   ebx
c0019427:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001942b:	e8 25 72 fe ff       	call   c0000655 <memcpy>
c0019430:	5b                   	pop    ebx
c0019431:	58                   	pop    eax
c0019432:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019436:	68 7c a0 02 c0       	push   0xc002a07c
c001943b:	e8 45 92 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0019440:	8b 06                	mov    eax,DWORD PTR [esi]
c0019442:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019445:	40                   	inc    eax
c0019446:	83 c4 10             	add    esp,0x10
c0019449:	89 06                	mov    DWORD PTR [esi],eax
c001944b:	85 d2                	test   edx,edx
c001944d:	75 0c                	jne    c001945b <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001944f:	83 ec 0c             	sub    esp,0xc
c0019452:	6a 08                	push   0x8
c0019454:	e8 7b 60 ff ff       	call   c000f4d4 <malloc>
c0019459:	eb 0c                	jmp    c0019467 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001945b:	c1 e0 03             	shl    eax,0x3
c001945e:	51                   	push   ecx
c001945f:	51                   	push   ecx
c0019460:	50                   	push   eax
c0019461:	52                   	push   edx
c0019462:	e8 59 60 ff ff       	call   c000f4c0 <realloc>
c0019467:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001946a:	83 c4 10             	add    esp,0x10
c001946d:	31 db                	xor    ebx,ebx
c001946f:	52                   	push   edx
c0019470:	6a 08                	push   0x8
c0019472:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019476:	50                   	push   eax
c0019477:	8b 16                	mov    edx,DWORD PTR [esi]
c0019479:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001947c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019480:	50                   	push   eax
c0019481:	e8 cf 71 fe ff       	call   c0000655 <memcpy>
c0019486:	83 c4 0c             	add    esp,0xc
c0019489:	68 00 01 00 00       	push   0x100
c001948e:	6a 00                	push   0x0
c0019490:	55                   	push   ebp
c0019491:	31 ed                	xor    ebp,ebp
c0019493:	e8 f3 71 fe ff       	call   c000068b <memset>
c0019498:	83 c4 10             	add    esp,0x10
c001949b:	eb 0d                	jmp    c00194aa <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001949d:	3c 3d                	cmp    al,0x3d
c001949f:	74 07                	je     c00194a8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00194a1:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c00194a5:	45                   	inc    ebp
c00194a6:	eb 02                	jmp    c00194aa <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00194a8:	89 eb                	mov    ebx,ebp
c00194aa:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00194af:	0f 85 bd fe ff ff    	jne    c0019372 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c00194b5:	50                   	push   eax
c00194b6:	50                   	push   eax
c00194b7:	ff 36                	push   DWORD PTR [esi]
c00194b9:	68 8a a0 02 c0       	push   0xc002a08a
c00194be:	e8 c2 91 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00194c3:	81 c4 3c 01 00 00    	add    esp,0x13c
c00194c9:	5b                   	pop    ebx
c00194ca:	5e                   	pop    esi
c00194cb:	5f                   	pop    edi
c00194cc:	5d                   	pop    ebp
c00194cd:	c3                   	ret    

c00194ce <EnvVarContainer::__loadSystem()>:
c00194ce:	83 ec 10             	sub    esp,0x10
c00194d1:	68 80 bd 02 c0       	push   0xc002bd80
c00194d6:	68 b5 a0 02 c0       	push   0xc002a0b5
c00194db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00194df:	e8 f4 fd ff ff       	call   c00192d8 <EnvVarContainer::loadFrom(char const*, char const*)>
c00194e4:	83 c4 1c             	add    esp,0x1c
c00194e7:	c3                   	ret    

c00194e8 <EnvVarContainer::__loadUser()>:
c00194e8:	c3                   	ret    
c00194e9:	90                   	nop

c00194ea <EnvVarContainer::EnvVarContainer(Process*)>:
c00194ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00194f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00194fc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00194ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019503:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001950a:	90                   	nop
c001950b:	c3                   	ret    

c001950c <EnvVarContainer::~EnvVarContainer()>:
c001950c:	83 ec 0c             	sub    esp,0xc
c001950f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019513:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019516:	85 c0                	test   eax,eax
c0019518:	74 1d                	je     c0019537 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001951a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001951e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019520:	85 c0                	test   eax,eax
c0019522:	74 13                	je     c0019537 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019528:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001952b:	83 ec 0c             	sub    esp,0xc
c001952e:	50                   	push   eax
c001952f:	e8 b0 5f ff ff       	call   c000f4e4 <free>
c0019534:	83 c4 10             	add    esp,0x10
c0019537:	90                   	nop
c0019538:	83 c4 0c             	add    esp,0xc
c001953b:	c3                   	ret    

c001953c <Krnl::getEnv(Process*, char const*)>:
c001953c:	53                   	push   ebx
c001953d:	83 ec 08             	sub    esp,0x8
c0019540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019544:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019548:	39 05 94 dd 02 c0    	cmp    DWORD PTR ds:0xc002dd94,eax
c001954e:	74 04                	je     c0019554 <Krnl::getEnv(Process*, char const*)+0x18>
c0019550:	85 c0                	test   eax,eax
c0019552:	75 0b                	jne    c001955f <Krnl::getEnv(Process*, char const*)+0x23>
c0019554:	a1 70 d3 02 c0       	mov    eax,ds:0xc002d370
c0019559:	85 c0                	test   eax,eax
c001955b:	75 19                	jne    c0019576 <Krnl::getEnv(Process*, char const*)+0x3a>
c001955d:	eb 27                	jmp    c0019586 <Krnl::getEnv(Process*, char const*)+0x4a>
c001955f:	52                   	push   edx
c0019560:	52                   	push   edx
c0019561:	53                   	push   ebx
c0019562:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019568:	e8 5f fc ff ff       	call   c00191cc <EnvVarContainer::getEnv(char const*)>
c001956d:	83 c4 10             	add    esp,0x10
c0019570:	85 c0                	test   eax,eax
c0019572:	75 28                	jne    c001959c <Krnl::getEnv(Process*, char const*)+0x60>
c0019574:	eb de                	jmp    c0019554 <Krnl::getEnv(Process*, char const*)+0x18>
c0019576:	52                   	push   edx
c0019577:	52                   	push   edx
c0019578:	53                   	push   ebx
c0019579:	50                   	push   eax
c001957a:	e8 4d fc ff ff       	call   c00191cc <EnvVarContainer::getEnv(char const*)>
c001957f:	83 c4 10             	add    esp,0x10
c0019582:	85 c0                	test   eax,eax
c0019584:	75 16                	jne    c001959c <Krnl::getEnv(Process*, char const*)+0x60>
c0019586:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001958a:	a1 74 d3 02 c0       	mov    eax,ds:0xc002d374
c001958f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019593:	83 c4 08             	add    esp,0x8
c0019596:	5b                   	pop    ebx
c0019597:	e9 30 fc ff ff       	jmp    c00191cc <EnvVarContainer::getEnv(char const*)>
c001959c:	83 c4 08             	add    esp,0x8
c001959f:	5b                   	pop    ebx
c00195a0:	c3                   	ret    

c00195a1 <Krnl::setEnvSystem(char const*, char const*)>:
c00195a1:	83 ec 10             	sub    esp,0x10
c00195a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195ac:	ff 35 74 d3 02 c0    	push   DWORD PTR ds:0xc002d374
c00195b2:	e8 53 fc ff ff       	call   c001920a <EnvVarContainer::setEnv(char const*, char const*)>
c00195b7:	83 c4 1c             	add    esp,0x1c
c00195ba:	c3                   	ret    

c00195bb <Krnl::setEnvUser(char const*, char const*)>:
c00195bb:	a1 70 d3 02 c0       	mov    eax,ds:0xc002d370
c00195c0:	85 c0                	test   eax,eax
c00195c2:	74 15                	je     c00195d9 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00195c4:	83 ec 10             	sub    esp,0x10
c00195c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195cf:	50                   	push   eax
c00195d0:	e8 35 fc ff ff       	call   c001920a <EnvVarContainer::setEnv(char const*, char const*)>
c00195d5:	83 c4 1c             	add    esp,0x1c
c00195d8:	c3                   	ret    
c00195d9:	c3                   	ret    

c00195da <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00195da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195de:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c00195e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00195e8:	e9 1d fc ff ff       	jmp    c001920a <EnvVarContainer::setEnv(char const*, char const*)>

c00195ed <Krnl::deleteEnvSystem(char const*)>:
c00195ed:	c3                   	ret    

c00195ee <Krnl::deleteEnvUser(char const*)>:
c00195ee:	c3                   	ret    

c00195ef <Krnl::deleteEnvProcess(Process*, char const*)>:
c00195ef:	c3                   	ret    

c00195f0 <Krnl::newProcessEnv(Process*)>:
c00195f0:	83 ec 28             	sub    esp,0x28
c00195f3:	6a 0c                	push   0xc
c00195f5:	e8 da 5e ff ff       	call   c000f4d4 <malloc>
c00195fa:	5a                   	pop    edx
c00195fb:	59                   	pop    ecx
c00195fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019600:	50                   	push   eax
c0019601:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019605:	e8 e0 fe ff ff       	call   c00194ea <EnvVarContainer::EnvVarContainer(Process*)>
c001960a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001960e:	83 c4 2c             	add    esp,0x2c
c0019611:	c3                   	ret    

c0019612 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019612:	56                   	push   esi
c0019613:	53                   	push   ebx
c0019614:	83 ec 10             	sub    esp,0x10
c0019617:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001961b:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c0019621:	6a 0c                	push   0xc
c0019623:	e8 ac 5e ff ff       	call   c000f4d4 <malloc>
c0019628:	89 c3                	mov    ebx,eax
c001962a:	58                   	pop    eax
c001962b:	5a                   	pop    edx
c001962c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019630:	53                   	push   ebx
c0019631:	e8 b4 fe ff ff       	call   c00194ea <EnvVarContainer::EnvVarContainer(Process*)>
c0019636:	8b 06                	mov    eax,DWORD PTR [esi]
c0019638:	89 03                	mov    DWORD PTR [ebx],eax
c001963a:	c1 e0 03             	shl    eax,0x3
c001963d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019640:	e8 8f 5e ff ff       	call   c000f4d4 <malloc>
c0019645:	83 c4 0c             	add    esp,0xc
c0019648:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001964b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001964d:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019654:	52                   	push   edx
c0019655:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019658:	50                   	push   eax
c0019659:	e8 f7 6f fe ff       	call   c0000655 <memcpy>
c001965e:	89 d8                	mov    eax,ebx
c0019660:	83 c4 14             	add    esp,0x14
c0019663:	5b                   	pop    ebx
c0019664:	5e                   	pop    esi
c0019665:	c3                   	ret    

c0019666 <Krnl::loadSystemEnv()>:
c0019666:	53                   	push   ebx
c0019667:	83 ec 14             	sub    esp,0x14
c001966a:	6a 0c                	push   0xc
c001966c:	e8 63 5e ff ff       	call   c000f4d4 <malloc>
c0019671:	89 c3                	mov    ebx,eax
c0019673:	58                   	pop    eax
c0019674:	5a                   	pop    edx
c0019675:	ff 35 94 dd 02 c0    	push   DWORD PTR ds:0xc002dd94
c001967b:	53                   	push   ebx
c001967c:	e8 69 fe ff ff       	call   c00194ea <EnvVarContainer::EnvVarContainer(Process*)>
c0019681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019684:	89 1d 74 d3 02 c0    	mov    DWORD PTR ds:0xc002d374,ebx
c001968a:	e8 3f fe ff ff       	call   c00194ce <EnvVarContainer::__loadSystem()>
c001968f:	83 c4 18             	add    esp,0x18
c0019692:	5b                   	pop    ebx
c0019693:	c3                   	ret    

c0019694 <Krnl::loadUserEnv()>:
c0019694:	53                   	push   ebx
c0019695:	83 ec 14             	sub    esp,0x14
c0019698:	6a 0c                	push   0xc
c001969a:	e8 35 5e ff ff       	call   c000f4d4 <malloc>
c001969f:	89 c3                	mov    ebx,eax
c00196a1:	58                   	pop    eax
c00196a2:	5a                   	pop    edx
c00196a3:	ff 35 94 dd 02 c0    	push   DWORD PTR ds:0xc002dd94
c00196a9:	53                   	push   ebx
c00196aa:	e8 3b fe ff ff       	call   c00194ea <EnvVarContainer::EnvVarContainer(Process*)>
c00196af:	89 1d 70 d3 02 c0    	mov    DWORD PTR ds:0xc002d370,ebx
c00196b5:	83 c4 18             	add    esp,0x18
c00196b8:	5b                   	pop    ebx
c00196b9:	c3                   	ret    

c00196ba <Krnl::flushEnv()>:
c00196ba:	c3                   	ret    

c00196bb <Krnl::getProcessTotalEnvCount(Process*)>:
c00196bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196bf:	8b 15 70 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d370
c00196c5:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c00196cb:	a1 74 d3 02 c0       	mov    eax,ds:0xc002d374
c00196d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00196d2:	03 01                	add    eax,DWORD PTR [ecx]
c00196d4:	85 d2                	test   edx,edx
c00196d6:	74 02                	je     c00196da <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00196d8:	03 02                	add    eax,DWORD PTR [edx]
c00196da:	c3                   	ret    

c00196db <Krnl::getProcessEnvPair(Process*, int)>:
c00196db:	57                   	push   edi
c00196dc:	8b 0d 70 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d370
c00196e2:	56                   	push   esi
c00196e3:	85 c9                	test   ecx,ecx
c00196e5:	53                   	push   ebx
c00196e6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00196ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00196ee:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c00196f4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00196f8:	8b 02                	mov    eax,DWORD PTR [edx]
c00196fa:	75 47                	jne    c0019743 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c00196fc:	39 c3                	cmp    ebx,eax
c00196fe:	7c 47                	jl     c0019747 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c0019700:	8b 15 74 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d374
c0019706:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019708:	01 c1                	add    ecx,eax
c001970a:	39 d9                	cmp    ecx,ebx
c001970c:	7e 6c                	jle    c001977a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001970e:	51                   	push   ecx
c001970f:	89 d9                	mov    ecx,ebx
c0019711:	29 c1                	sub    ecx,eax
c0019713:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019716:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001971a:	53                   	push   ebx
c001971b:	68 d7 a0 02 c0       	push   0xc002a0d7
c0019720:	e8 60 8f ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0019725:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001972b:	2b 18                	sub    ebx,DWORD PTR [eax]
c001972d:	a1 74 d3 02 c0       	mov    eax,ds:0xc002d374
c0019732:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019735:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019739:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001973c:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001973f:	89 06                	mov    DWORD PTR [esi],eax
c0019741:	eb 51                	jmp    c0019794 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c0019743:	39 c3                	cmp    ebx,eax
c0019745:	7d 05                	jge    c001974c <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019747:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001974a:	eb 20                	jmp    c001976c <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001974c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001974e:	8d 14 07             	lea    edx,[edi+eax*1]
c0019751:	39 da                	cmp    edx,ebx
c0019753:	7e 04                	jle    c0019759 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019755:	29 c3                	sub    ebx,eax
c0019757:	eb 10                	jmp    c0019769 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c0019759:	8b 0d 74 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d374
c001975f:	03 11                	add    edx,DWORD PTR [ecx]
c0019761:	39 da                	cmp    edx,ebx
c0019763:	7e 15                	jle    c001977a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019765:	29 c3                	sub    ebx,eax
c0019767:	29 fb                	sub    ebx,edi
c0019769:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001976c:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019770:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019773:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019776:	89 06                	mov    DWORD PTR [esi],eax
c0019778:	eb 1d                	jmp    c0019797 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001977a:	83 ec 0c             	sub    esp,0xc
c001977d:	68 eb a0 02 c0       	push   0xc002a0eb
c0019782:	e8 18 00 00 00       	call   c001979f <Krnl::panic(char const*)>
c0019787:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001978d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019794:	83 c4 10             	add    esp,0x10
c0019797:	89 f0                	mov    eax,esi
c0019799:	5b                   	pop    ebx
c001979a:	5e                   	pop    esi
c001979b:	5f                   	pop    edi
c001979c:	c2 04 00             	ret    0x4

c001979f <Krnl::panic(char const*)>:
c001979f:	55                   	push   ebp
c00197a0:	89 e5                	mov    ebp,esp
c00197a2:	53                   	push   ebx
c00197a3:	50                   	push   eax
c00197a4:	a1 7c d3 02 c0       	mov    eax,ds:0xc002d37c
c00197a9:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00197ac:	85 c0                	test   eax,eax
c00197ae:	74 02                	je     c00197b2 <Krnl::panic(char const*)+0x13>
c00197b0:	ff d0                	call   eax
c00197b2:	fa                   	cli    
c00197b3:	c6 05 80 d3 02 c0 01 	mov    BYTE PTR ds:0xc002d380,0x1
c00197ba:	83 ec 08             	sub    esp,0x8
c00197bd:	c6 05 84 b7 02 c0 00 	mov    BYTE PTR ds:0xc002b784,0x0
c00197c4:	53                   	push   ebx
c00197c5:	68 05 a1 02 c0       	push   0xc002a105
c00197ca:	e8 b6 8e ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00197cf:	58                   	pop    eax
c00197d0:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00197d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00197db:	e8 67 70 ff ff       	call   c0010847 <setActiveTerminal(VgaText*)>
c00197e0:	83 c4 0c             	add    esp,0xc
c00197e3:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00197e8:	6a 01                	push   0x1
c00197ea:	6a 0f                	push   0xf
c00197ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00197f2:	e8 d9 69 ff ff       	call   c00101d0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00197f7:	5a                   	pop    edx
c00197f8:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00197fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019803:	e8 e0 72 ff ff       	call   c0010ae8 <VgaText::clearScreen()>
c0019808:	59                   	pop    ecx
c0019809:	58                   	pop    eax
c001980a:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001980f:	68 1e a1 02 c0       	push   0xc002a11e
c0019814:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001981a:	e8 47 74 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c001981f:	58                   	pop    eax
c0019820:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019825:	5a                   	pop    edx
c0019826:	68 c4 a1 02 c0       	push   0xc002a1c4
c001982b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019831:	e8 30 74 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c0019836:	59                   	pop    ecx
c0019837:	58                   	pop    eax
c0019838:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001983d:	68 3a a1 02 c0       	push   0xc002a13a
c0019842:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019848:	e8 19 74 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c001984d:	58                   	pop    eax
c001984e:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019853:	5a                   	pop    edx
c0019854:	53                   	push   ebx
c0019855:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001985b:	e8 06 74 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c0019860:	59                   	pop    ecx
c0019861:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019866:	5b                   	pop    ebx
c0019867:	68 5a a1 02 c0       	push   0xc002a15a
c001986c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019872:	e8 ef 73 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c0019877:	58                   	pop    eax
c0019878:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001987d:	5a                   	pop    edx
c001987e:	68 00 a2 02 c0       	push   0xc002a200
c0019883:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019889:	e8 d8 73 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c001988e:	59                   	pop    ecx
c001988f:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019894:	5b                   	pop    ebx
c0019895:	68 3a a1 02 c0       	push   0xc002a13a
c001989a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198a0:	e8 c1 73 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c00198a5:	58                   	pop    eax
c00198a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00198ab:	5a                   	pop    edx
c00198ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00198af:	83 c0 0c             	add    eax,0xc
c00198b2:	50                   	push   eax
c00198b3:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00198b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198be:	e8 a3 73 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c00198c3:	59                   	pop    ecx
c00198c4:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00198c9:	5b                   	pop    ebx
c00198ca:	68 59 a1 02 c0       	push   0xc002a159
c00198cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198d5:	e8 8c 73 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c00198da:	58                   	pop    eax
c00198db:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00198e0:	5a                   	pop    edx
c00198e1:	68 2c a2 02 c0       	push   0xc002a22c
c00198e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198ec:	e8 75 73 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c00198f1:	59                   	pop    ecx
c00198f2:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00198f7:	5b                   	pop    ebx
c00198f8:	68 6c a2 02 c0       	push   0xc002a26c
c00198fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019903:	e8 5e 73 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c0019908:	58                   	pop    eax
c0019909:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001990e:	5a                   	pop    edx
c001990f:	68 45 a1 02 c0       	push   0xc002a145
c0019914:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001991a:	e8 47 73 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c001991f:	59                   	pop    ecx
c0019920:	5b                   	pop    ebx
c0019921:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019924:	68 5d a1 02 c0       	push   0xc002a15d
c0019929:	e8 57 8d ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001992e:	58                   	pop    eax
c001992f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019932:	5a                   	pop    edx
c0019933:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019936:	68 66 a1 02 c0       	push   0xc002a166
c001993b:	e8 45 8d ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0019940:	59                   	pop    ecx
c0019941:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019944:	5b                   	pop    ebx
c0019945:	8b 00                	mov    eax,DWORD PTR [eax]
c0019947:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001994a:	68 6f a1 02 c0       	push   0xc002a16f
c001994f:	e8 31 8d ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0019954:	58                   	pop    eax
c0019955:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001995a:	5a                   	pop    edx
c001995b:	68 b0 a2 02 c0       	push   0xc002a2b0
c0019960:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019966:	e8 fb 72 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c001996b:	59                   	pop    ecx
c001996c:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019971:	5b                   	pop    ebx
c0019972:	68 78 a1 02 c0       	push   0xc002a178
c0019977:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001997d:	e8 e4 72 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c0019982:	0f 20 c0             	mov    eax,cr0
c0019985:	5a                   	pop    edx
c0019986:	59                   	pop    ecx
c0019987:	50                   	push   eax
c0019988:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001998d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019993:	e8 f4 72 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c0019998:	5b                   	pop    ebx
c0019999:	58                   	pop    eax
c001999a:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001999f:	68 82 a1 02 c0       	push   0xc002a182
c00199a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199aa:	e8 b7 72 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c00199af:	0f 20 d0             	mov    eax,cr2
c00199b2:	5a                   	pop    edx
c00199b3:	59                   	pop    ecx
c00199b4:	50                   	push   eax
c00199b5:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00199ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199c0:	e8 c7 72 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c00199c5:	5b                   	pop    ebx
c00199c6:	58                   	pop    eax
c00199c7:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00199cc:	68 8c a1 02 c0       	push   0xc002a18c
c00199d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199d7:	e8 8a 72 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c00199dc:	0f 20 d8             	mov    eax,cr3
c00199df:	5a                   	pop    edx
c00199e0:	59                   	pop    ecx
c00199e1:	50                   	push   eax
c00199e2:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00199e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199ed:	e8 9a 72 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c00199f2:	5b                   	pop    ebx
c00199f3:	58                   	pop    eax
c00199f4:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00199f9:	68 9f a1 02 c0       	push   0xc002a19f
c00199fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a04:	e8 5d 72 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c0019a09:	0f 20 e0             	mov    eax,cr4
c0019a0c:	5a                   	pop    edx
c0019a0d:	59                   	pop    ecx
c0019a0e:	50                   	push   eax
c0019a0f:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019a14:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a1a:	e8 6d 72 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c0019a1f:	5b                   	pop    ebx
c0019a20:	58                   	pop    eax
c0019a21:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019a26:	68 a9 a1 02 c0       	push   0xc002a1a9
c0019a2b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a31:	e8 30 72 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c0019a36:	5a                   	pop    edx
c0019a37:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019a3c:	59                   	pop    ecx
c0019a3d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019a43:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019a46:	50                   	push   eax
c0019a47:	e8 40 72 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c0019a4c:	5b                   	pop    ebx
c0019a4d:	58                   	pop    eax
c0019a4e:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019a53:	68 c0 a1 02 c0       	push   0xc002a1c0
c0019a58:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a5e:	e8 03 72 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c0019a63:	5a                   	pop    edx
c0019a64:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019a69:	59                   	pop    ecx
c0019a6a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019a70:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019a73:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019a76:	50                   	push   eax
c0019a77:	e8 10 72 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c0019a7c:	5b                   	pop    ebx
c0019a7d:	58                   	pop    eax
c0019a7e:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019a83:	68 c0 a1 02 c0       	push   0xc002a1c0
c0019a88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a8e:	e8 d3 71 ff ff       	call   c0010c66 <VgaText::puts(char const*)>
c0019a93:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019a98:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019a9b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019aa1:	8b 12                	mov    edx,DWORD PTR [edx]
c0019aa3:	59                   	pop    ecx
c0019aa4:	5b                   	pop    ebx
c0019aa5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019aa8:	50                   	push   eax
c0019aa9:	e8 de 71 ff ff       	call   c0010c8c <VgaText::putx(unsigned int)>
c0019aae:	83 c4 10             	add    esp,0x10
c0019ab1:	b2 fe                	mov    dl,0xfe
c0019ab3:	e4 60                	in     al,0x60
c0019ab5:	3c 1c                	cmp    al,0x1c
c0019ab7:	74 04                	je     c0019abd <Krnl::panic(char const*)+0x31e>
c0019ab9:	3c 5a                	cmp    al,0x5a
c0019abb:	75 f6                	jne    c0019ab3 <Krnl::panic(char const*)+0x314>
c0019abd:	e4 64                	in     al,0x64
c0019abf:	a8 02                	test   al,0x2
c0019ac1:	75 fa                	jne    c0019abd <Krnl::panic(char const*)+0x31e>
c0019ac3:	88 d0                	mov    al,dl
c0019ac5:	e6 64                	out    0x64,al
c0019ac7:	fa                   	cli    
c0019ac8:	f4                   	hlt    
c0019ac9:	eb e8                	jmp    c0019ab3 <Krnl::panic(char const*)+0x314>

c0019acb <Net::switchEndian16(unsigned short)>:
c0019acb:	83 ec 04             	sub    esp,0x4
c0019ace:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ad2:	66 89 04 24          	mov    WORD PTR [esp],ax
c0019ad6:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019ada:	c1 f8 08             	sar    eax,0x8
c0019add:	89 c2                	mov    edx,eax
c0019adf:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019ae3:	c1 e0 08             	shl    eax,0x8
c0019ae6:	09 d0                	or     eax,edx
c0019ae8:	83 c4 04             	add    esp,0x4
c0019aeb:	c3                   	ret    

c0019aec <Net::switchEndian32(unsigned int)>:
c0019aec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019af0:	c1 e8 18             	shr    eax,0x18
c0019af3:	89 c2                	mov    edx,eax
c0019af5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019af9:	c1 e0 08             	shl    eax,0x8
c0019afc:	25 00 00 ff 00       	and    eax,0xff0000
c0019b01:	09 c2                	or     edx,eax
c0019b03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b07:	c1 e8 08             	shr    eax,0x8
c0019b0a:	25 00 ff 00 00       	and    eax,0xff00
c0019b0f:	09 c2                	or     edx,eax
c0019b11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b15:	c1 e0 18             	shl    eax,0x18
c0019b18:	09 d0                	or     eax,edx
c0019b1a:	c3                   	ret    

c0019b1b <Net::crc32Calc(unsigned char*, int)>:
c0019b1b:	83 ec 10             	sub    esp,0x10
c0019b1e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019b23:	75 07                	jne    c0019b2c <Net::crc32Calc(unsigned char*, int)+0x11>
c0019b25:	b8 00 00 00 00       	mov    eax,0x0
c0019b2a:	eb 7c                	jmp    c0019ba8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019b2c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0019b31:	7f 07                	jg     c0019b3a <Net::crc32Calc(unsigned char*, int)+0x1f>
c0019b33:	b8 00 00 00 00       	mov    eax,0x0
c0019b38:	eb 6e                	jmp    c0019ba8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019b3a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0019b42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019b4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b4e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019b52:	7d 4e                	jge    c0019ba2 <Net::crc32Calc(unsigned char*, int)+0x87>
c0019b54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019b58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b5c:	01 d0                	add    eax,edx
c0019b5e:	8a 00                	mov    al,BYTE PTR [eax]
c0019b60:	0f b6 c0             	movzx  eax,al
c0019b63:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0019b67:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019b6f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0019b74:	7f 26                	jg     c0019b9c <Net::crc32Calc(unsigned char*, int)+0x81>
c0019b76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b7a:	83 e0 01             	and    eax,0x1
c0019b7d:	74 0d                	je     c0019b8c <Net::crc32Calc(unsigned char*, int)+0x71>
c0019b7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b83:	d1 e8                	shr    eax,1
c0019b85:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0019b8a:	eb 06                	jmp    c0019b92 <Net::crc32Calc(unsigned char*, int)+0x77>
c0019b8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b90:	d1 e8                	shr    eax,1
c0019b92:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019b96:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019b9a:	eb d3                	jmp    c0019b6f <Net::crc32Calc(unsigned char*, int)+0x54>
c0019b9c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0019ba0:	eb a8                	jmp    c0019b4a <Net::crc32Calc(unsigned char*, int)+0x2f>
c0019ba2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ba6:	f7 d0                	not    eax
c0019ba8:	83 c4 10             	add    esp,0x10
c0019bab:	c3                   	ret    

c0019bac <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0019bac:	83 ec 1c             	sub    esp,0x1c
c0019baf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019bb7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019bbf:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c0019bc4:	7f 14                	jg     c0019bda <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c0019bc6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bca:	8d 50 01             	lea    edx,[eax+0x1]
c0019bcd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019bd1:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0019bd4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019bd8:	eb e5                	jmp    c0019bbf <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c0019bda:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bde:	8d 50 01             	lea    edx,[eax+0x1]
c0019be1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019be5:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0019be8:	83 ec 04             	sub    esp,0x4
c0019beb:	6a 06                	push   0x6
c0019bed:	8d 44 24 36          	lea    eax,[esp+0x36]
c0019bf1:	50                   	push   eax
c0019bf2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019bf6:	e8 5a 6a fe ff       	call   c0000655 <memcpy>
c0019bfb:	83 c4 10             	add    esp,0x10
c0019bfe:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019c03:	83 ec 04             	sub    esp,0x4
c0019c06:	6a 06                	push   0x6
c0019c08:	8d 44 24 30          	lea    eax,[esp+0x30]
c0019c0c:	50                   	push   eax
c0019c0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019c11:	e8 3f 6a fe ff       	call   c0000655 <memcpy>
c0019c16:	83 c4 10             	add    esp,0x10
c0019c19:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019c1e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019c22:	0f b7 c0             	movzx  eax,ax
c0019c25:	c1 f8 08             	sar    eax,0x8
c0019c28:	89 c1                	mov    ecx,eax
c0019c2a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c2e:	8d 50 01             	lea    edx,[eax+0x1]
c0019c31:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019c35:	88 ca                	mov    dl,cl
c0019c37:	88 10                	mov    BYTE PTR [eax],dl
c0019c39:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019c3d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c41:	8d 48 01             	lea    ecx,[eax+0x1]
c0019c44:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0019c48:	88 10                	mov    BYTE PTR [eax],dl
c0019c4a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019c4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c52:	83 ec 04             	sub    esp,0x4
c0019c55:	52                   	push   edx
c0019c56:	50                   	push   eax
c0019c57:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019c5b:	e8 f5 69 fe ff       	call   c0000655 <memcpy>
c0019c60:	83 c4 10             	add    esp,0x10
c0019c63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019c67:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0019c6b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c6f:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0019c73:	83 ec 08             	sub    esp,0x8
c0019c76:	50                   	push   eax
c0019c77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019c7b:	e8 9b fe ff ff       	call   c0019b1b <Net::crc32Calc(unsigned char*, int)>
c0019c80:	83 c4 10             	add    esp,0x10
c0019c83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019c87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c8b:	c1 e8 18             	shr    eax,0x18
c0019c8e:	89 c1                	mov    ecx,eax
c0019c90:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c94:	8d 50 01             	lea    edx,[eax+0x1]
c0019c97:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019c9b:	88 ca                	mov    dl,cl
c0019c9d:	88 10                	mov    BYTE PTR [eax],dl
c0019c9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ca3:	c1 e8 10             	shr    eax,0x10
c0019ca6:	89 c1                	mov    ecx,eax
c0019ca8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cac:	8d 50 01             	lea    edx,[eax+0x1]
c0019caf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019cb3:	88 ca                	mov    dl,cl
c0019cb5:	88 10                	mov    BYTE PTR [eax],dl
c0019cb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cbb:	c1 e8 08             	shr    eax,0x8
c0019cbe:	89 c1                	mov    ecx,eax
c0019cc0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cc4:	8d 50 01             	lea    edx,[eax+0x1]
c0019cc7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019ccb:	88 ca                	mov    dl,cl
c0019ccd:	88 10                	mov    BYTE PTR [eax],dl
c0019ccf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cd3:	8d 50 01             	lea    edx,[eax+0x1]
c0019cd6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019cda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019cde:	88 10                	mov    BYTE PTR [eax],dl
c0019ce0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019ce4:	83 c4 1c             	add    esp,0x1c
c0019ce7:	c3                   	ret    

c0019ce8 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0019ce8:	83 ec 2c             	sub    esp,0x2c
c0019ceb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019cef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cf3:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c0019cf8:	83 ec 04             	sub    esp,0x4
c0019cfb:	6a 06                	push   0x6
c0019cfd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019d01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019d05:	83 c0 0e             	add    eax,0xe
c0019d08:	50                   	push   eax
c0019d09:	e8 47 69 fe ff       	call   c0000655 <memcpy>
c0019d0e:	83 c4 10             	add    esp,0x10
c0019d11:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019d16:	83 ec 04             	sub    esp,0x4
c0019d19:	6a 06                	push   0x6
c0019d1b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019d1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019d23:	83 c0 08             	add    eax,0x8
c0019d26:	50                   	push   eax
c0019d27:	e8 29 69 fe ff       	call   c0000655 <memcpy>
c0019d2c:	83 c4 10             	add    esp,0x10
c0019d2f:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019d34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019d38:	8d 50 01             	lea    edx,[eax+0x1]
c0019d3b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019d3f:	8a 00                	mov    al,BYTE PTR [eax]
c0019d41:	0f b6 c0             	movzx  eax,al
c0019d44:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0019d49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019d4d:	8d 50 01             	lea    edx,[eax+0x1]
c0019d50:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019d54:	8a 00                	mov    al,BYTE PTR [eax]
c0019d56:	0f b6 c0             	movzx  eax,al
c0019d59:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0019d5e:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0019d63:	c1 e0 08             	shl    eax,0x8
c0019d66:	89 c2                	mov    edx,eax
c0019d68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019d6c:	09 d0                	or     eax,edx
c0019d6e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019d72:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0019d76:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c0019d7b:	75 3a                	jne    c0019db7 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019d7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019d81:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019d84:	66 3d dc 05          	cmp    ax,0x5dc
c0019d88:	77 10                	ja     c0019d9a <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c0019d8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019d8e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019d91:	0f b7 c0             	movzx  eax,ax
c0019d94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0019d98:	eb 1d                	jmp    c0019db7 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019d9a:	83 ec 0c             	sub    esp,0xc
c0019d9d:	68 d8 a2 02 c0       	push   0xc002a2d8
c0019da2:	e8 de 88 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0019da7:	83 c4 10             	add    esp,0x10
c0019daa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019dae:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0019db2:	e9 c0 00 00 00       	jmp    c0019e77 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c0019db7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019dbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019dbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0019dc1:	83 ec 04             	sub    esp,0x4
c0019dc4:	52                   	push   edx
c0019dc5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019dc9:	50                   	push   eax
c0019dca:	e8 86 68 fe ff       	call   c0000655 <memcpy>
c0019dcf:	83 c4 10             	add    esp,0x10
c0019dd2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019dd6:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0019dda:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019dde:	8d 50 01             	lea    edx,[eax+0x1]
c0019de1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019de5:	8a 00                	mov    al,BYTE PTR [eax]
c0019de7:	0f b6 c0             	movzx  eax,al
c0019dea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019dee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019df2:	8d 50 01             	lea    edx,[eax+0x1]
c0019df5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019df9:	8a 00                	mov    al,BYTE PTR [eax]
c0019dfb:	0f b6 c0             	movzx  eax,al
c0019dfe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019e02:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e06:	8d 50 01             	lea    edx,[eax+0x1]
c0019e09:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e0d:	8a 00                	mov    al,BYTE PTR [eax]
c0019e0f:	0f b6 c0             	movzx  eax,al
c0019e12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019e16:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e1a:	8d 50 01             	lea    edx,[eax+0x1]
c0019e1d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e21:	8a 00                	mov    al,BYTE PTR [eax]
c0019e23:	0f b6 c0             	movzx  eax,al
c0019e26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019e2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019e2e:	c1 e0 18             	shl    eax,0x18
c0019e31:	89 c2                	mov    edx,eax
c0019e33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e37:	c1 e0 10             	shl    eax,0x10
c0019e3a:	09 c2                	or     edx,eax
c0019e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e40:	c1 e0 08             	shl    eax,0x8
c0019e43:	09 d0                	or     eax,edx
c0019e45:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0019e49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019e4d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e51:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0019e55:	83 e8 04             	sub    eax,0x4
c0019e58:	83 ec 08             	sub    esp,0x8
c0019e5b:	50                   	push   eax
c0019e5c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019e60:	e8 b6 fc ff ff       	call   c0019b1b <Net::crc32Calc(unsigned char*, int)>
c0019e65:	83 c4 10             	add    esp,0x10
c0019e68:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019e6c:	0f 94 c2             	sete   dl
c0019e6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e73:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0019e76:	90                   	nop
c0019e77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e7b:	83 c4 2c             	add    esp,0x2c
c0019e7e:	c2 04 00             	ret    0x4

c0019e81 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0019e81:	55                   	push   ebp
c0019e82:	57                   	push   edi
c0019e83:	56                   	push   esi
c0019e84:	53                   	push   ebx
c0019e85:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019e8b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0019e92:	8a 1e                	mov    bl,BYTE PTR [esi]
c0019e94:	8d 6e 01             	lea    ebp,[esi+0x1]
c0019e97:	80 fb 40             	cmp    bl,0x40
c0019e9a:	75 1b                	jne    c0019eb7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0019e9c:	8a 16                	mov    dl,BYTE PTR [esi]
c0019e9e:	84 d2                	test   dl,dl
c0019ea0:	0f 84 f1 00 00 00    	je     c0019f97 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019ea6:	8d 46 01             	lea    eax,[esi+0x1]
c0019ea9:	80 fa 3a             	cmp    dl,0x3a
c0019eac:	74 04                	je     c0019eb2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0019eae:	89 c6                	mov    esi,eax
c0019eb0:	eb ea                	jmp    c0019e9c <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0019eb2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019eb5:	89 c6                	mov    esi,eax
c0019eb7:	50                   	push   eax
c0019eb8:	6a 40                	push   0x40
c0019eba:	6a 00                	push   0x0
c0019ebc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019ec0:	50                   	push   eax
c0019ec1:	e8 c5 67 fe ff       	call   c000068b <memset>
c0019ec6:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0019ecd:	31 c0                	xor    eax,eax
c0019ecf:	83 c4 10             	add    esp,0x10
c0019ed2:	8a 0f                	mov    cl,BYTE PTR [edi]
c0019ed4:	84 c9                	test   cl,cl
c0019ed6:	0f 84 bb 00 00 00    	je     c0019f97 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019edc:	3d c7 00 00 00       	cmp    eax,0xc7
c0019ee1:	0f 8f b0 00 00 00    	jg     c0019f97 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019ee7:	80 f9 0a             	cmp    cl,0xa
c0019eea:	0f 85 98 00 00 00    	jne    c0019f88 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0019ef0:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0019ef5:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0019ef9:	a8 df                	test   al,0xdf
c0019efb:	0f 94 c1             	sete   cl
c0019efe:	3c 23                	cmp    al,0x23
c0019f00:	0f 94 c2             	sete   dl
c0019f03:	08 d1                	or     cl,dl
c0019f05:	75 4a                	jne    c0019f51 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019f07:	8d 50 f7             	lea    edx,[eax-0x9]
c0019f0a:	80 fa 01             	cmp    dl,0x1
c0019f0d:	76 42                	jbe    c0019f51 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019f0f:	3c 5b                	cmp    al,0x5b
c0019f11:	75 42                	jne    c0019f55 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0019f13:	80 fb 40             	cmp    bl,0x40
c0019f16:	75 39                	jne    c0019f51 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019f18:	83 ec 0c             	sub    esp,0xc
c0019f1b:	8d 54 24 65          	lea    edx,[esp+0x65]
c0019f1f:	52                   	push   edx
c0019f20:	e8 83 67 fe ff       	call   c00006a8 <strlen>
c0019f25:	83 c4 10             	add    esp,0x10
c0019f28:	83 f8 3f             	cmp    eax,0x3f
c0019f2b:	77 6a                	ja     c0019f97 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019f2d:	50                   	push   eax
c0019f2e:	50                   	push   eax
c0019f2f:	8d 54 24 61          	lea    edx,[esp+0x61]
c0019f33:	52                   	push   edx
c0019f34:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019f38:	52                   	push   edx
c0019f39:	e8 ec 67 fe ff       	call   c000072a <strcpy>
c0019f3e:	58                   	pop    eax
c0019f3f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019f43:	52                   	push   edx
c0019f44:	e8 5f 67 fe ff       	call   c00006a8 <strlen>
c0019f49:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0019f4e:	83 c4 10             	add    esp,0x10
c0019f51:	31 d2                	xor    edx,edx
c0019f53:	eb 3a                	jmp    c0019f8f <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0019f55:	80 fb 40             	cmp    bl,0x40
c0019f58:	74 06                	je     c0019f60 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0019f5a:	8d 44 24 58          	lea    eax,[esp+0x58]
c0019f5e:	eb 20                	jmp    c0019f80 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0019f60:	50                   	push   eax
c0019f61:	50                   	push   eax
c0019f62:	55                   	push   ebp
c0019f63:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019f67:	50                   	push   eax
c0019f68:	e8 0e 68 fe ff       	call   c000077b <strcmp>
c0019f6d:	83 c4 10             	add    esp,0x10
c0019f70:	85 c0                	test   eax,eax
c0019f72:	75 dd                	jne    c0019f51 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019f74:	eb e4                	jmp    c0019f5a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0019f76:	8d 50 01             	lea    edx,[eax+0x1]
c0019f79:	80 f9 3d             	cmp    cl,0x3d
c0019f7c:	74 1d                	je     c0019f9b <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0019f7e:	89 d0                	mov    eax,edx
c0019f80:	8a 08                	mov    cl,BYTE PTR [eax]
c0019f82:	84 c9                	test   cl,cl
c0019f84:	75 f0                	jne    c0019f76 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0019f86:	eb 0f                	jmp    c0019f97 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019f88:	8d 50 01             	lea    edx,[eax+0x1]
c0019f8b:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0019f8f:	47                   	inc    edi
c0019f90:	89 d0                	mov    eax,edx
c0019f92:	e9 3b ff ff ff       	jmp    c0019ed2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0019f97:	31 c0                	xor    eax,eax
c0019f99:	eb 33                	jmp    c0019fce <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0019f9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019f9f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019fa2:	50                   	push   eax
c0019fa3:	50                   	push   eax
c0019fa4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0019fa8:	50                   	push   eax
c0019fa9:	56                   	push   esi
c0019faa:	e8 cc 67 fe ff       	call   c000077b <strcmp>
c0019faf:	83 c4 10             	add    esp,0x10
c0019fb2:	85 c0                	test   eax,eax
c0019fb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019fb8:	75 97                	jne    c0019f51 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019fba:	51                   	push   ecx
c0019fbb:	51                   	push   ecx
c0019fbc:	52                   	push   edx
c0019fbd:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0019fc4:	e8 61 67 fe ff       	call   c000072a <strcpy>
c0019fc9:	83 c4 10             	add    esp,0x10
c0019fcc:	b0 01                	mov    al,0x1
c0019fce:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019fd4:	5b                   	pop    ebx
c0019fd5:	5e                   	pop    esi
c0019fd6:	5f                   	pop    edi
c0019fd7:	5d                   	pop    ebp
c0019fd8:	c3                   	ret    

c0019fd9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0019fd9:	57                   	push   edi
c0019fda:	56                   	push   esi
c0019fdb:	53                   	push   ebx
c0019fdc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019fe2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0019fe9:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0019ff0:	53                   	push   ebx
c0019ff1:	e8 b2 66 fe ff       	call   c00006a8 <strlen>
c0019ff6:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ff9:	89 c7                	mov    edi,eax
c0019ffb:	e8 a8 66 fe ff       	call   c00006a8 <strlen>
c001a000:	83 c4 10             	add    esp,0x10
c001a003:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a007:	3d ff 00 00 00       	cmp    eax,0xff
c001a00c:	0f 87 d3 00 00 00    	ja     c001a0e5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a012:	57                   	push   edi
c001a013:	57                   	push   edi
c001a014:	56                   	push   esi
c001a015:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a019:	56                   	push   esi
c001a01a:	e8 0b 67 fe ff       	call   c000072a <strcpy>
c001a01f:	58                   	pop    eax
c001a020:	5a                   	pop    edx
c001a021:	68 86 a6 02 c0       	push   0xc002a686
c001a026:	56                   	push   esi
c001a027:	e8 b5 67 fe ff       	call   c00007e1 <strcat>
c001a02c:	59                   	pop    ecx
c001a02d:	5f                   	pop    edi
c001a02e:	53                   	push   ebx
c001a02f:	56                   	push   esi
c001a030:	e8 ac 67 fe ff       	call   c00007e1 <strcat>
c001a035:	58                   	pop    eax
c001a036:	5a                   	pop    edx
c001a037:	68 24 a3 02 c0       	push   0xc002a324
c001a03c:	56                   	push   esi
c001a03d:	e8 9f 67 fe ff       	call   c00007e1 <strcat>
c001a042:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a049:	e8 86 54 ff ff       	call   c000f4d4 <malloc>
c001a04e:	83 c4 0c             	add    esp,0xc
c001a051:	89 c3                	mov    ebx,eax
c001a053:	ff 35 94 dd 02 c0    	push   DWORD PTR ds:0xc002dd94
c001a059:	56                   	push   esi
c001a05a:	50                   	push   eax
c001a05b:	e8 54 8b ff ff       	call   c0012bb4 <File::File(char const*, Process*)>
c001a060:	83 c4 10             	add    esp,0x10
c001a063:	85 db                	test   ebx,ebx
c001a065:	74 7e                	je     c001a0e5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a067:	51                   	push   ecx
c001a068:	51                   	push   ecx
c001a069:	6a 01                	push   0x1
c001a06b:	53                   	push   ebx
c001a06c:	e8 a7 8b ff ff       	call   c0012c18 <File::open(FileOpenMode)>
c001a071:	83 c4 10             	add    esp,0x10
c001a074:	85 c0                	test   eax,eax
c001a076:	74 08                	je     c001a080 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a078:	83 ec 0c             	sub    esp,0xc
c001a07b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a07d:	53                   	push   ebx
c001a07e:	eb 5f                	jmp    c001a0df <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a080:	52                   	push   edx
c001a081:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a085:	50                   	push   eax
c001a086:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a08a:	50                   	push   eax
c001a08b:	53                   	push   ebx
c001a08c:	e8 33 8e ff ff       	call   c0012ec4 <File::stat(unsigned long long*, bool*)>
c001a091:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a095:	83 c4 10             	add    esp,0x10
c001a098:	89 c1                	mov    ecx,eax
c001a09a:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a09e:	74 31                	je     c001a0d1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a0a0:	83 ec 0c             	sub    esp,0xc
c001a0a3:	50                   	push   eax
c001a0a4:	e8 2b 54 ff ff       	call   c000f4d4 <malloc>
c001a0a9:	89 c6                	mov    esi,eax
c001a0ab:	58                   	pop    eax
c001a0ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0ae:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a0b2:	52                   	push   edx
c001a0b3:	56                   	push   esi
c001a0b4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0b8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0bc:	53                   	push   ebx
c001a0bd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a0c0:	83 c4 20             	add    esp,0x20
c001a0c3:	85 c0                	test   eax,eax
c001a0c5:	75 0a                	jne    c001a0d1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a0c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a0cb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a0cf:	74 18                	je     c001a0e9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a0d1:	83 ec 0c             	sub    esp,0xc
c001a0d4:	53                   	push   ebx
c001a0d5:	e8 9c 8b ff ff       	call   c0012c76 <File::close()>
c001a0da:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a0e2:	83 c4 10             	add    esp,0x10
c001a0e5:	31 c0                	xor    eax,eax
c001a0e7:	eb 3b                	jmp    c001a124 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a0e9:	83 ec 0c             	sub    esp,0xc
c001a0ec:	53                   	push   ebx
c001a0ed:	e8 84 8b ff ff       	call   c0012c76 <File::close()>
c001a0f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a0fa:	83 c4 0c             	add    esp,0xc
c001a0fd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a104:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a10b:	56                   	push   esi
c001a10c:	e8 70 fd ff ff       	call   c0019e81 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a111:	89 34 24             	mov    DWORD PTR [esp],esi
c001a114:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a118:	e8 c7 53 ff ff       	call   c000f4e4 <free>
c001a11d:	83 c4 10             	add    esp,0x10
c001a120:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a124:	81 c4 20 01 00 00    	add    esp,0x120
c001a12a:	5b                   	pop    ebx
c001a12b:	5e                   	pop    esi
c001a12c:	5f                   	pop    edi
c001a12d:	c3                   	ret    

c001a12e <Reg::getLine(char*, char*, char*)>:
c001a12e:	57                   	push   edi
c001a12f:	56                   	push   esi
c001a130:	53                   	push   ebx
c001a131:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a135:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a139:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a13d:	57                   	push   edi
c001a13e:	56                   	push   esi
c001a13f:	53                   	push   ebx
c001a140:	68 29 a3 02 c0       	push   0xc002a329
c001a145:	e8 8f fe ff ff       	call   c0019fd9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a14a:	83 c4 10             	add    esp,0x10
c001a14d:	84 c0                	test   al,al
c001a14f:	75 10                	jne    c001a161 <Reg::getLine(char*, char*, char*)+0x33>
c001a151:	57                   	push   edi
c001a152:	56                   	push   esi
c001a153:	53                   	push   ebx
c001a154:	68 4e a3 02 c0       	push   0xc002a34e
c001a159:	e8 7b fe ff ff       	call   c0019fd9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a15e:	83 c4 10             	add    esp,0x10
c001a161:	5b                   	pop    ebx
c001a162:	5e                   	pop    esi
c001a163:	5f                   	pop    edi
c001a164:	c3                   	ret    

c001a165 <Reg::readInt(char*, char*, int*)>:
c001a165:	55                   	push   ebp
c001a166:	57                   	push   edi
c001a167:	56                   	push   esi
c001a168:	53                   	push   ebx
c001a169:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a16f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a173:	57                   	push   edi
c001a174:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a17b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a182:	e8 a7 ff ff ff       	call   c001a12e <Reg::getLine(char*, char*, char*)>
c001a187:	83 c4 10             	add    esp,0x10
c001a18a:	84 c0                	test   al,al
c001a18c:	0f 84 b3 00 00 00    	je     c001a245 <Reg::readInt(char*, char*, int*)+0xe0>
c001a192:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a196:	80 fa 2b             	cmp    dl,0x2b
c001a199:	74 0c                	je     c001a1a7 <Reg::readInt(char*, char*, int*)+0x42>
c001a19b:	80 fa 2d             	cmp    dl,0x2d
c001a19e:	75 0e                	jne    c001a1ae <Reg::readInt(char*, char*, int*)+0x49>
c001a1a0:	ba 01 00 00 00       	mov    edx,0x1
c001a1a5:	eb 0b                	jmp    c001a1b2 <Reg::readInt(char*, char*, int*)+0x4d>
c001a1a7:	ba 01 00 00 00       	mov    edx,0x1
c001a1ac:	eb 02                	jmp    c001a1b0 <Reg::readInt(char*, char*, int*)+0x4b>
c001a1ae:	31 d2                	xor    edx,edx
c001a1b0:	31 c0                	xor    eax,eax
c001a1b2:	be 0a 00 00 00       	mov    esi,0xa
c001a1b7:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a1bc:	75 20                	jne    c001a1de <Reg::readInt(char*, char*, int*)+0x79>
c001a1be:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a1c2:	80 f9 78             	cmp    cl,0x78
c001a1c5:	75 0a                	jne    c001a1d1 <Reg::readInt(char*, char*, int*)+0x6c>
c001a1c7:	83 c2 02             	add    edx,0x2
c001a1ca:	be 10 00 00 00       	mov    esi,0x10
c001a1cf:	eb 0d                	jmp    c001a1de <Reg::readInt(char*, char*, int*)+0x79>
c001a1d1:	80 f9 62             	cmp    cl,0x62
c001a1d4:	75 08                	jne    c001a1de <Reg::readInt(char*, char*, int*)+0x79>
c001a1d6:	83 c2 02             	add    edx,0x2
c001a1d9:	be 02 00 00 00       	mov    esi,0x2
c001a1de:	01 d7                	add    edi,edx
c001a1e0:	31 d2                	xor    edx,edx
c001a1e2:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a1e4:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a1e8:	80 fb 0d             	cmp    bl,0xd
c001a1eb:	0f 94 c3             	sete   bl
c001a1ee:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a1f3:	0f 94 c1             	sete   cl
c001a1f6:	08 cb                	or     bl,cl
c001a1f8:	75 3a                	jne    c001a234 <Reg::readInt(char*, char*, int*)+0xcf>
c001a1fa:	0f af d6             	imul   edx,esi
c001a1fd:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a202:	83 fe 10             	cmp    esi,0x10
c001a205:	75 26                	jne    c001a22d <Reg::readInt(char*, char*, int*)+0xc8>
c001a207:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a20b:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a20e:	89 e9                	mov    ecx,ebp
c001a210:	80 f9 05             	cmp    cl,0x5
c001a213:	77 06                	ja     c001a21b <Reg::readInt(char*, char*, int*)+0xb6>
c001a215:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a219:	eb 16                	jmp    c001a231 <Reg::readInt(char*, char*, int*)+0xcc>
c001a21b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a21f:	83 e9 61             	sub    ecx,0x61
c001a222:	80 f9 05             	cmp    cl,0x5
c001a225:	77 06                	ja     c001a22d <Reg::readInt(char*, char*, int*)+0xc8>
c001a227:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a22b:	eb 04                	jmp    c001a231 <Reg::readInt(char*, char*, int*)+0xcc>
c001a22d:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a231:	47                   	inc    edi
c001a232:	eb ae                	jmp    c001a1e2 <Reg::readInt(char*, char*, int*)+0x7d>
c001a234:	84 c0                	test   al,al
c001a236:	74 02                	je     c001a23a <Reg::readInt(char*, char*, int*)+0xd5>
c001a238:	f7 da                	neg    edx
c001a23a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a241:	89 10                	mov    DWORD PTR [eax],edx
c001a243:	88 d8                	mov    al,bl
c001a245:	81 c4 ec 00 00 00    	add    esp,0xec
c001a24b:	5b                   	pop    ebx
c001a24c:	5e                   	pop    esi
c001a24d:	5f                   	pop    edi
c001a24e:	5d                   	pop    ebp
c001a24f:	c3                   	ret    

c001a250 <Reg::readString(char*, char*, char*, int)>:
c001a250:	57                   	push   edi
c001a251:	56                   	push   esi
c001a252:	53                   	push   ebx
c001a253:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a259:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a260:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a264:	57                   	push   edi
c001a265:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a26c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a273:	e8 b6 fe ff ff       	call   c001a12e <Reg::getLine(char*, char*, char*)>
c001a278:	83 c4 10             	add    esp,0x10
c001a27b:	89 c6                	mov    esi,eax
c001a27d:	84 c0                	test   al,al
c001a27f:	74 44                	je     c001a2c5 <Reg::readString(char*, char*, char*, int)+0x75>
c001a281:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a288:	31 c0                	xor    eax,eax
c001a28a:	4a                   	dec    edx
c001a28b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a28e:	84 c9                	test   cl,cl
c001a290:	74 0f                	je     c001a2a1 <Reg::readString(char*, char*, char*, int)+0x51>
c001a292:	39 c2                	cmp    edx,eax
c001a294:	7e 0b                	jle    c001a2a1 <Reg::readString(char*, char*, char*, int)+0x51>
c001a296:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a299:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a29e:	40                   	inc    eax
c001a29f:	eb ea                	jmp    c001a28b <Reg::readString(char*, char*, char*, int)+0x3b>
c001a2a1:	83 ec 0c             	sub    esp,0xc
c001a2a4:	53                   	push   ebx
c001a2a5:	e8 fe 63 fe ff       	call   c00006a8 <strlen>
c001a2aa:	83 c4 10             	add    esp,0x10
c001a2ad:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a2b2:	75 11                	jne    c001a2c5 <Reg::readString(char*, char*, char*, int)+0x75>
c001a2b4:	83 ec 0c             	sub    esp,0xc
c001a2b7:	53                   	push   ebx
c001a2b8:	e8 eb 63 fe ff       	call   c00006a8 <strlen>
c001a2bd:	83 c4 10             	add    esp,0x10
c001a2c0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a2c5:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a2cb:	89 f0                	mov    eax,esi
c001a2cd:	5b                   	pop    ebx
c001a2ce:	5e                   	pop    esi
c001a2cf:	5f                   	pop    edi
c001a2d0:	c3                   	ret    

c001a2d1 <Reg::readBool(char*, char*, bool*)>:
c001a2d1:	83 ec 20             	sub    esp,0x20
c001a2d4:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a2d8:	50                   	push   eax
c001a2d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2e1:	e8 7f fe ff ff       	call   c001a165 <Reg::readInt(char*, char*, int*)>
c001a2e6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a2eb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a2ef:	0f 95 02             	setne  BYTE PTR [edx]
c001a2f2:	83 c4 2c             	add    esp,0x2c
c001a2f5:	c3                   	ret    

c001a2f6 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a2f6:	53                   	push   ebx
c001a2f7:	83 ec 1c             	sub    esp,0x1c
c001a2fa:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a2fe:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a302:	50                   	push   eax
c001a303:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a307:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a30b:	e8 c1 ff ff ff       	call   c001a2d1 <Reg::readBool(char*, char*, bool*)>
c001a310:	83 c4 10             	add    esp,0x10
c001a313:	84 c0                	test   al,al
c001a315:	74 04                	je     c001a31b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a317:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a31b:	88 d8                	mov    al,bl
c001a31d:	83 c4 18             	add    esp,0x18
c001a320:	5b                   	pop    ebx
c001a321:	c3                   	ret    

c001a322 <Reg::readIntWithDefault(char*, char*, int)>:
c001a322:	53                   	push   ebx
c001a323:	83 ec 1c             	sub    esp,0x1c
c001a326:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a32a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a32e:	50                   	push   eax
c001a32f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a333:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a337:	e8 29 fe ff ff       	call   c001a165 <Reg::readInt(char*, char*, int*)>
c001a33c:	83 c4 10             	add    esp,0x10
c001a33f:	84 c0                	test   al,al
c001a341:	74 04                	je     c001a347 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001a343:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a347:	89 d8                	mov    eax,ebx
c001a349:	83 c4 18             	add    esp,0x18
c001a34c:	5b                   	pop    ebx
c001a34d:	c3                   	ret    

c001a34e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001a34e:	57                   	push   edi
c001a34f:	56                   	push   esi
c001a350:	53                   	push   ebx
c001a351:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a355:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a359:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a35d:	56                   	push   esi
c001a35e:	53                   	push   ebx
c001a35f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a363:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a367:	e8 e4 fe ff ff       	call   c001a250 <Reg::readString(char*, char*, char*, int)>
c001a36c:	83 c4 10             	add    esp,0x10
c001a36f:	84 c0                	test   al,al
c001a371:	75 1b                	jne    c001a38e <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001a373:	50                   	push   eax
c001a374:	56                   	push   esi
c001a375:	4e                   	dec    esi
c001a376:	6a 00                	push   0x0
c001a378:	53                   	push   ebx
c001a379:	e8 0d 63 fe ff       	call   c000068b <memset>
c001a37e:	83 c4 0c             	add    esp,0xc
c001a381:	56                   	push   esi
c001a382:	57                   	push   edi
c001a383:	53                   	push   ebx
c001a384:	89 fb                	mov    ebx,edi
c001a386:	e8 ca 62 fe ff       	call   c0000655 <memcpy>
c001a38b:	83 c4 10             	add    esp,0x10
c001a38e:	89 d8                	mov    eax,ebx
c001a390:	5b                   	pop    ebx
c001a391:	5e                   	pop    esi
c001a392:	5f                   	pop    edi
c001a393:	c3                   	ret    

c001a394 <Sys::exit(regs*)>:
c001a394:	83 ec 18             	sub    esp,0x18
c001a397:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a39b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a39e:	e8 ce 32 00 00       	call   c001d671 <terminateTask(int)>
c001a3a3:	83 c8 ff             	or     eax,0xffffffff
c001a3a6:	83 c4 1c             	add    esp,0x1c
c001a3a9:	89 c2                	mov    edx,eax
c001a3ab:	c3                   	ret    

c001a3ac <Sys::getCwd(regs*)>:
c001a3ac:	83 ec 10             	sub    esp,0x10
c001a3af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a3b3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a3b6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a3b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a3be:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a3c1:	e8 5f 8b ff ff       	call   c0012f25 <getcwd(Process*, char*, int)>
c001a3c6:	83 c4 1c             	add    esp,0x1c
c001a3c9:	99                   	cdq    
c001a3ca:	c3                   	ret    

c001a3cb <Sys::getPID(regs*)>:
c001a3cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a3d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a3d3:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3d5:	99                   	cdq    
c001a3d6:	c3                   	ret    

c001a3d7 <Sys::loadDLL(regs*)>:
c001a3d7:	56                   	push   esi
c001a3d8:	53                   	push   ebx
c001a3d9:	31 d2                	xor    edx,edx
c001a3db:	51                   	push   ecx
c001a3dc:	b8 01 00 00 00       	mov    eax,0x1
c001a3e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a3e5:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001a3e9:	0f 84 8c 00 00 00    	je     c001a47b <Sys::loadDLL(regs*)+0xa4>
c001a3ef:	83 ec 0c             	sub    esp,0xc
c001a3f2:	68 14 01 00 00       	push   0x114
c001a3f7:	e8 d8 50 ff ff       	call   c000f4d4 <malloc>
c001a3fc:	83 c4 0c             	add    esp,0xc
c001a3ff:	89 c3                	mov    ebx,eax
c001a401:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a406:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a409:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a40c:	53                   	push   ebx
c001a40d:	e8 a2 87 ff ff       	call   c0012bb4 <File::File(char const*, Process*)>
c001a412:	83 c4 10             	add    esp,0x10
c001a415:	31 d2                	xor    edx,edx
c001a417:	b8 02 00 00 00       	mov    eax,0x2
c001a41c:	85 db                	test   ebx,ebx
c001a41e:	74 5b                	je     c001a47b <Sys::loadDLL(regs*)+0xa4>
c001a420:	83 ec 0c             	sub    esp,0xc
c001a423:	53                   	push   ebx
c001a424:	e8 5d 8a ff ff       	call   c0012e86 <File::exists()>
c001a429:	83 c4 10             	add    esp,0x10
c001a42c:	84 c0                	test   al,al
c001a42e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a430:	75 11                	jne    c001a443 <Sys::loadDLL(regs*)+0x6c>
c001a432:	83 ec 0c             	sub    esp,0xc
c001a435:	53                   	push   ebx
c001a436:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a439:	83 c4 10             	add    esp,0x10
c001a43c:	b8 03 00 00 00       	mov    eax,0x3
c001a441:	eb 36                	jmp    c001a479 <Sys::loadDLL(regs*)+0xa2>
c001a443:	83 ec 0c             	sub    esp,0xc
c001a446:	53                   	push   ebx
c001a447:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a44a:	58                   	pop    eax
c001a44b:	5a                   	pop    edx
c001a44c:	6a 00                	push   0x0
c001a44e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a451:	e8 64 21 00 00       	call   c001c5ba <Thr::loadDLL(char const*, bool)>
c001a456:	83 c4 10             	add    esp,0x10
c001a459:	89 c1                	mov    ecx,eax
c001a45b:	31 d2                	xor    edx,edx
c001a45d:	b8 04 00 00 00       	mov    eax,0x4
c001a462:	85 c9                	test   ecx,ecx
c001a464:	74 15                	je     c001a47b <Sys::loadDLL(regs*)+0xa4>
c001a466:	53                   	push   ebx
c001a467:	53                   	push   ebx
c001a468:	ff 35 48 c8 02 c0    	push   DWORD PTR ds:0xc002c848
c001a46e:	51                   	push   ecx
c001a46f:	e8 55 23 00 00       	call   c001c7c9 <Thr::executeDLL(unsigned long, void*)>
c001a474:	83 c4 10             	add    esp,0x10
c001a477:	31 c0                	xor    eax,eax
c001a479:	31 d2                	xor    edx,edx
c001a47b:	59                   	pop    ecx
c001a47c:	5b                   	pop    ebx
c001a47d:	5e                   	pop    esi
c001a47e:	c3                   	ret    

c001a47f <Sys::read(regs*)>:
c001a47f:	57                   	push   edi
c001a480:	56                   	push   esi
c001a481:	53                   	push   ebx
c001a482:	83 ec 10             	sub    esp,0x10
c001a485:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a489:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a48c:	83 f8 02             	cmp    eax,0x2
c001a48f:	77 10                	ja     c001a4a1 <Sys::read(regs*)+0x22>
c001a491:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a496:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a499:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a49f:	eb 0e                	jmp    c001a4af <Sys::read(regs*)+0x30>
c001a4a1:	83 ec 0c             	sub    esp,0xc
c001a4a4:	50                   	push   eax
c001a4a5:	e8 95 70 ff ff       	call   c001153f <getFromFileDescriptor(int)>
c001a4aa:	83 c4 10             	add    esp,0x10
c001a4ad:	89 c1                	mov    ecx,eax
c001a4af:	83 c8 ff             	or     eax,0xffffffff
c001a4b2:	85 c9                	test   ecx,ecx
c001a4b4:	89 c2                	mov    edx,eax
c001a4b6:	74 28                	je     c001a4e0 <Sys::read(regs*)+0x61>
c001a4b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a4c0:	31 ff                	xor    edi,edi
c001a4c2:	83 ec 0c             	sub    esp,0xc
c001a4c5:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a4c7:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a4cb:	52                   	push   edx
c001a4cc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a4cf:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a4d2:	57                   	push   edi
c001a4d3:	56                   	push   esi
c001a4d4:	51                   	push   ecx
c001a4d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a4d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a4dc:	83 c4 20             	add    esp,0x20
c001a4df:	99                   	cdq    
c001a4e0:	83 c4 10             	add    esp,0x10
c001a4e3:	5b                   	pop    ebx
c001a4e4:	5e                   	pop    esi
c001a4e5:	5f                   	pop    edi
c001a4e6:	c3                   	ret    

c001a4e7 <Sys::sbrk(regs*)>:
c001a4e7:	56                   	push   esi
c001a4e8:	53                   	push   ebx
c001a4e9:	50                   	push   eax
c001a4ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a4f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a4f6:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001a4f9:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001a4ff:	85 db                	test   ebx,ebx
c001a501:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001a504:	74 02                	je     c001a508 <Sys::sbrk(regs*)+0x21>
c001a506:	79 06                	jns    c001a50e <Sys::sbrk(regs*)+0x27>
c001a508:	89 f0                	mov    eax,esi
c001a50a:	31 d2                	xor    edx,edx
c001a50c:	eb 2a                	jmp    c001a538 <Sys::sbrk(regs*)+0x51>
c001a50e:	83 c8 ff             	or     eax,0xffffffff
c001a511:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001a517:	89 c2                	mov    edx,eax
c001a519:	77 1d                	ja     c001a538 <Sys::sbrk(regs*)+0x51>
c001a51b:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001a521:	50                   	push   eax
c001a522:	c1 ea 0c             	shr    edx,0xc
c001a525:	68 07 04 00 00       	push   0x407
c001a52a:	52                   	push   edx
c001a52b:	51                   	push   ecx
c001a52c:	e8 2f 79 ff ff       	call   c0011e60 <VAS::allocatePages(int, int)>
c001a531:	89 f0                	mov    eax,esi
c001a533:	31 d2                	xor    edx,edx
c001a535:	83 c4 10             	add    esp,0x10
c001a538:	59                   	pop    ecx
c001a539:	5b                   	pop    ebx
c001a53a:	5e                   	pop    esi
c001a53b:	c3                   	ret    

c001a53c <Sys::setCwd(regs*)>:
c001a53c:	83 ec 14             	sub    esp,0x14
c001a53f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a543:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a546:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a54b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a54e:	e8 fc 89 ff ff       	call   c0012f4f <setcwd(Process*, char*)>
c001a553:	83 c4 1c             	add    esp,0x1c
c001a556:	99                   	cdq    
c001a557:	c3                   	ret    

c001a558 <Sys::write(regs*)>:
c001a558:	57                   	push   edi
c001a559:	56                   	push   esi
c001a55a:	53                   	push   ebx
c001a55b:	83 ec 10             	sub    esp,0x10
c001a55e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a562:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a565:	83 f8 02             	cmp    eax,0x2
c001a568:	77 10                	ja     c001a57a <Sys::write(regs*)+0x22>
c001a56a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a56f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a572:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a578:	eb 0e                	jmp    c001a588 <Sys::write(regs*)+0x30>
c001a57a:	83 ec 0c             	sub    esp,0xc
c001a57d:	50                   	push   eax
c001a57e:	e8 bc 6f ff ff       	call   c001153f <getFromFileDescriptor(int)>
c001a583:	83 c4 10             	add    esp,0x10
c001a586:	89 c1                	mov    ecx,eax
c001a588:	83 c8 ff             	or     eax,0xffffffff
c001a58b:	85 c9                	test   ecx,ecx
c001a58d:	89 c2                	mov    edx,eax
c001a58f:	74 28                	je     c001a5b9 <Sys::write(regs*)+0x61>
c001a591:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a599:	31 ff                	xor    edi,edi
c001a59b:	83 ec 0c             	sub    esp,0xc
c001a59e:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a5a0:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a5a4:	52                   	push   edx
c001a5a5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a5a8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a5ab:	57                   	push   edi
c001a5ac:	56                   	push   esi
c001a5ad:	51                   	push   ecx
c001a5ae:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a5b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a5b5:	83 c4 20             	add    esp,0x20
c001a5b8:	99                   	cdq    
c001a5b9:	83 c4 10             	add    esp,0x10
c001a5bc:	5b                   	pop    ebx
c001a5bd:	5e                   	pop    esi
c001a5be:	5f                   	pop    edi
c001a5bf:	c3                   	ret    

c001a5c0 <Sys::yield(regs*)>:
c001a5c0:	57                   	push   edi
c001a5c1:	56                   	push   esi
c001a5c2:	53                   	push   ebx
c001a5c3:	e8 66 26 00 00       	call   c001cc2e <lockScheduler()>
c001a5c8:	e8 9d 29 00 00       	call   c001cf6a <schedule()>
c001a5cd:	e8 5e 26 00 00       	call   c001cc30 <unlockScheduler()>
c001a5d2:	8b 35 d0 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ced0
c001a5d8:	8b 3d d4 ce 02 c0    	mov    edi,DWORD PTR ds:0xc002ced4
c001a5de:	89 f0                	mov    eax,esi
c001a5e0:	89 fb                	mov    ebx,edi
c001a5e2:	89 f1                	mov    ecx,esi
c001a5e4:	c1 e0 07             	shl    eax,0x7
c001a5e7:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001a5eb:	25 80 30 0f 00       	and    eax,0xf3080
c001a5f0:	c1 eb 17             	shr    ebx,0x17
c001a5f3:	31 c8                	xor    eax,ecx
c001a5f5:	89 da                	mov    edx,ebx
c001a5f7:	5b                   	pop    ebx
c001a5f8:	5e                   	pop    esi
c001a5f9:	5f                   	pop    edi
c001a5fa:	c3                   	ret    

c001a5fb <sysCallSeekDir(regs*)>:
c001a5fb:	31 c0                	xor    eax,eax
c001a5fd:	31 d2                	xor    edx,edx
c001a5ff:	c3                   	ret    

c001a600 <sysCallTellDir(regs*)>:
c001a600:	31 c0                	xor    eax,eax
c001a602:	31 d2                	xor    edx,edx
c001a604:	c3                   	ret    

c001a605 <sysCallVerify(regs*)>:
c001a605:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a609:	31 d2                	xor    edx,edx
c001a60b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a60e:	c3                   	ret    

c001a60f <sysCallGetArgc(regs*)>:
c001a60f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a614:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a617:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001a61d:	99                   	cdq    
c001a61e:	c3                   	ret    

c001a61f <sysFormatDisk(regs*)>:
c001a61f:	56                   	push   esi
c001a620:	53                   	push   ebx
c001a621:	53                   	push   ebx
c001a622:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a626:	8b 1d c8 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9c8
c001a62c:	eb 25                	jmp    c001a653 <sysFormatDisk(regs*)+0x34>
c001a62e:	83 ec 0c             	sub    esp,0xc
c001a631:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a634:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a636:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001a639:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a63c:	50                   	push   eax
c001a63d:	ff 34 85 60 ce 02 c0 	push   DWORD PTR [eax*4-0x3ffd31a0]
c001a644:	53                   	push   ebx
c001a645:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001a648:	83 c4 20             	add    esp,0x20
c001a64b:	83 f8 08             	cmp    eax,0x8
c001a64e:	75 12                	jne    c001a662 <sysFormatDisk(regs*)+0x43>
c001a650:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001a653:	85 db                	test   ebx,ebx
c001a655:	75 d7                	jne    c001a62e <sysFormatDisk(regs*)+0xf>
c001a657:	59                   	pop    ecx
c001a658:	b8 03 00 00 00       	mov    eax,0x3
c001a65d:	31 d2                	xor    edx,edx
c001a65f:	5b                   	pop    ebx
c001a660:	5e                   	pop    esi
c001a661:	c3                   	ret    
c001a662:	85 c0                	test   eax,eax
c001a664:	74 1b                	je     c001a681 <sysFormatDisk(regs*)+0x62>
c001a666:	83 f8 09             	cmp    eax,0x9
c001a669:	74 0b                	je     c001a676 <sysFormatDisk(regs*)+0x57>
c001a66b:	59                   	pop    ecx
c001a66c:	b8 02 00 00 00       	mov    eax,0x2
c001a671:	31 d2                	xor    edx,edx
c001a673:	5b                   	pop    ebx
c001a674:	5e                   	pop    esi
c001a675:	c3                   	ret    
c001a676:	59                   	pop    ecx
c001a677:	b8 01 00 00 00       	mov    eax,0x1
c001a67c:	31 d2                	xor    edx,edx
c001a67e:	5b                   	pop    ebx
c001a67f:	5e                   	pop    esi
c001a680:	c3                   	ret    
c001a681:	59                   	pop    ecx
c001a682:	31 c0                	xor    eax,eax
c001a684:	31 d2                	xor    edx,edx
c001a686:	5b                   	pop    ebx
c001a687:	5e                   	pop    esi
c001a688:	c3                   	ret    

c001a689 <sysSetDiskVolumeLabel(regs*)>:
c001a689:	56                   	push   esi
c001a68a:	53                   	push   ebx
c001a68b:	53                   	push   ebx
c001a68c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a690:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a693:	83 f8 19             	cmp    eax,0x19
c001a696:	77 29                	ja     c001a6c1 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a698:	8b 0c 85 60 ce 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd31a0]
c001a69f:	85 c9                	test   ecx,ecx
c001a6a1:	74 1e                	je     c001a6c1 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a6a3:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001a6a6:	85 d2                	test   edx,edx
c001a6a8:	74 17                	je     c001a6c1 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a6aa:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001a6b0:	8b 33                	mov    esi,DWORD PTR [ebx]
c001a6b2:	52                   	push   edx
c001a6b3:	50                   	push   eax
c001a6b4:	51                   	push   ecx
c001a6b5:	53                   	push   ebx
c001a6b6:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001a6b9:	83 c4 10             	add    esp,0x10
c001a6bc:	99                   	cdq    
c001a6bd:	59                   	pop    ecx
c001a6be:	5b                   	pop    ebx
c001a6bf:	5e                   	pop    esi
c001a6c0:	c3                   	ret    
c001a6c1:	59                   	pop    ecx
c001a6c2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a6c7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a6cc:	5b                   	pop    ebx
c001a6cd:	5e                   	pop    esi
c001a6ce:	c3                   	ret    

c001a6cf <sysGetDiskVolumeLabel(regs*)>:
c001a6cf:	57                   	push   edi
c001a6d0:	56                   	push   esi
c001a6d1:	53                   	push   ebx
c001a6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6d6:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a6d9:	83 fa 19             	cmp    edx,0x19
c001a6dc:	77 34                	ja     c001a712 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a6de:	8b 0c 95 60 ce 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd31a0]
c001a6e5:	85 c9                	test   ecx,ecx
c001a6e7:	74 29                	je     c001a712 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a6e9:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a6ec:	85 db                	test   ebx,ebx
c001a6ee:	74 22                	je     c001a712 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a6f0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001a6f3:	85 c0                	test   eax,eax
c001a6f5:	74 1b                	je     c001a712 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a6f7:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001a6fd:	83 ec 0c             	sub    esp,0xc
c001a700:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a702:	50                   	push   eax
c001a703:	53                   	push   ebx
c001a704:	52                   	push   edx
c001a705:	51                   	push   ecx
c001a706:	56                   	push   esi
c001a707:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001a70a:	83 c4 20             	add    esp,0x20
c001a70d:	99                   	cdq    
c001a70e:	5b                   	pop    ebx
c001a70f:	5e                   	pop    esi
c001a710:	5f                   	pop    edi
c001a711:	c3                   	ret    
c001a712:	5b                   	pop    ebx
c001a713:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a718:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a71d:	5e                   	pop    esi
c001a71e:	5f                   	pop    edi
c001a71f:	c3                   	ret    

c001a720 <sysShutdown(regs*)>:
c001a720:	83 ec 0c             	sub    esp,0xc
c001a723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a727:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a72a:	85 c0                	test   eax,eax
c001a72c:	74 18                	je     c001a746 <sysShutdown(regs*)+0x26>
c001a72e:	83 f8 01             	cmp    eax,0x1
c001a731:	74 38                	je     c001a76b <sysShutdown(regs*)+0x4b>
c001a733:	83 f8 02             	cmp    eax,0x2
c001a736:	74 24                	je     c001a75c <sysShutdown(regs*)+0x3c>
c001a738:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a73d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a742:	83 c4 0c             	add    esp,0xc
c001a745:	c3                   	ret    
c001a746:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001a74b:	8b 10                	mov    edx,DWORD PTR [eax]
c001a74d:	6a 00                	push   0x0
c001a74f:	6a 00                	push   0x0
c001a751:	6a 00                	push   0x0
c001a753:	50                   	push   eax
c001a754:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a757:	83 c4 10             	add    esp,0x10
c001a75a:	eb dc                	jmp    c001a738 <sysShutdown(regs*)+0x18>
c001a75c:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001a761:	8b 10                	mov    edx,DWORD PTR [eax]
c001a763:	6a 00                	push   0x0
c001a765:	6a 00                	push   0x0
c001a767:	6a 01                	push   0x1
c001a769:	eb e8                	jmp    c001a753 <sysShutdown(regs*)+0x33>
c001a76b:	a1 e0 ce 02 c0       	mov    eax,ds:0xc002cee0
c001a770:	85 c0                	test   eax,eax
c001a772:	74 02                	je     c001a776 <sysShutdown(regs*)+0x56>
c001a774:	ff d0                	call   eax
c001a776:	31 c0                	xor    eax,eax
c001a778:	31 d2                	xor    edx,edx
c001a77a:	83 c4 0c             	add    esp,0xc
c001a77d:	c3                   	ret    

c001a77e <sysCallRealpath(regs*)>:
c001a77e:	83 ec 0c             	sub    esp,0xc
c001a781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a785:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001a788:	85 d2                	test   edx,edx
c001a78a:	74 07                	je     c001a793 <sysCallRealpath(regs*)+0x15>
c001a78c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a78f:	85 c0                	test   eax,eax
c001a791:	75 0b                	jne    c001a79e <sysCallRealpath(regs*)+0x20>
c001a793:	b8 01 00 00 00       	mov    eax,0x1
c001a798:	31 d2                	xor    edx,edx
c001a79a:	83 c4 0c             	add    esp,0xc
c001a79d:	c3                   	ret    
c001a79e:	51                   	push   ecx
c001a79f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a7a5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a7a8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001a7ae:	51                   	push   ecx
c001a7af:	52                   	push   edx
c001a7b0:	50                   	push   eax
c001a7b1:	e8 54 82 ff ff       	call   c0012a0a <standardiseFiles(char*, char const*, char const*)>
c001a7b6:	83 c4 10             	add    esp,0x10
c001a7b9:	31 c0                	xor    eax,eax
c001a7bb:	31 d2                	xor    edx,edx
c001a7bd:	83 c4 0c             	add    esp,0xc
c001a7c0:	c3                   	ret    

c001a7c1 <sysCallReadDir(regs*)>:
c001a7c1:	53                   	push   ebx
c001a7c2:	83 ec 18             	sub    esp,0x18
c001a7c5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a7c9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a7cc:	83 f8 02             	cmp    eax,0x2
c001a7cf:	76 53                	jbe    c001a824 <sysCallReadDir(regs*)+0x63>
c001a7d1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a7d4:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001a7da:	77 4f                	ja     c001a82b <sysCallReadDir(regs*)+0x6a>
c001a7dc:	83 ec 0c             	sub    esp,0xc
c001a7df:	50                   	push   eax
c001a7e0:	e8 5a 6d ff ff       	call   c001153f <getFromFileDescriptor(int)>
c001a7e5:	83 c4 10             	add    esp,0x10
c001a7e8:	85 c0                	test   eax,eax
c001a7ea:	74 50                	je     c001a83c <sysCallReadDir(regs*)+0x7b>
c001a7ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a7f4:	83 ec 0c             	sub    esp,0xc
c001a7f7:	8b 10                	mov    edx,DWORD PTR [eax]
c001a7f9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001a7fd:	51                   	push   ecx
c001a7fe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a801:	6a 00                	push   0x0
c001a803:	68 10 01 00 00       	push   0x110
c001a808:	50                   	push   eax
c001a809:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a80c:	83 c4 20             	add    esp,0x20
c001a80f:	85 c0                	test   eax,eax
c001a811:	74 38                	je     c001a84b <sysCallReadDir(regs*)+0x8a>
c001a813:	83 f8 07             	cmp    eax,0x7
c001a816:	74 0c                	je     c001a824 <sysCallReadDir(regs*)+0x63>
c001a818:	b8 02 00 00 00       	mov    eax,0x2
c001a81d:	31 d2                	xor    edx,edx
c001a81f:	83 c4 18             	add    esp,0x18
c001a822:	5b                   	pop    ebx
c001a823:	c3                   	ret    
c001a824:	b8 01 00 00 00       	mov    eax,0x1
c001a829:	eb f2                	jmp    c001a81d <sysCallReadDir(regs*)+0x5c>
c001a82b:	83 ec 08             	sub    esp,0x8
c001a82e:	52                   	push   edx
c001a82f:	68 6c a3 02 c0       	push   0xc002a36c
c001a834:	e8 4c 7e ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001a839:	83 c4 10             	add    esp,0x10
c001a83c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a841:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a846:	83 c4 18             	add    esp,0x18
c001a849:	5b                   	pop    ebx
c001a84a:	c3                   	ret    
c001a84b:	31 c0                	xor    eax,eax
c001a84d:	eb ce                	jmp    c001a81d <sysCallReadDir(regs*)+0x5c>

c001a84f <sysCallIsATTY(regs*)>:
c001a84f:	83 ec 0c             	sub    esp,0xc
c001a852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a856:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a859:	83 f8 02             	cmp    eax,0x2
c001a85c:	76 07                	jbe    c001a865 <sysCallIsATTY(regs*)+0x16>
c001a85e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a863:	75 26                	jne    c001a88b <sysCallIsATTY(regs*)+0x3c>
c001a865:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a86a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a86d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a873:	85 c0                	test   eax,eax
c001a875:	74 24                	je     c001a89b <sysCallIsATTY(regs*)+0x4c>
c001a877:	83 ec 0c             	sub    esp,0xc
c001a87a:	8b 10                	mov    edx,DWORD PTR [eax]
c001a87c:	50                   	push   eax
c001a87d:	ff 12                	call   DWORD PTR [edx]
c001a87f:	31 d2                	xor    edx,edx
c001a881:	0f b6 c0             	movzx  eax,al
c001a884:	83 c4 10             	add    esp,0x10
c001a887:	83 c4 0c             	add    esp,0xc
c001a88a:	c3                   	ret    
c001a88b:	83 ec 0c             	sub    esp,0xc
c001a88e:	50                   	push   eax
c001a88f:	e8 ab 6c ff ff       	call   c001153f <getFromFileDescriptor(int)>
c001a894:	83 c4 10             	add    esp,0x10
c001a897:	85 c0                	test   eax,eax
c001a899:	75 dc                	jne    c001a877 <sysCallIsATTY(regs*)+0x28>
c001a89b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a8a0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a8a5:	83 c4 0c             	add    esp,0xc
c001a8a8:	c3                   	ret    

c001a8a9 <sysCallSeek(regs*)>:
c001a8a9:	53                   	push   ebx
c001a8aa:	83 ec 08             	sub    esp,0x8
c001a8ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a8b1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a8b4:	83 f8 02             	cmp    eax,0x2
c001a8b7:	76 4a                	jbe    c001a903 <sysCallSeek(regs*)+0x5a>
c001a8b9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a8be:	77 32                	ja     c001a8f2 <sysCallSeek(regs*)+0x49>
c001a8c0:	83 ec 0c             	sub    esp,0xc
c001a8c3:	50                   	push   eax
c001a8c4:	e8 76 6c ff ff       	call   c001153f <getFromFileDescriptor(int)>
c001a8c9:	83 c4 0c             	add    esp,0xc
c001a8cc:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001a8cf:	31 db                	xor    ebx,ebx
c001a8d1:	53                   	push   ebx
c001a8d2:	51                   	push   ecx
c001a8d3:	50                   	push   eax
c001a8d4:	e8 fd 83 ff ff       	call   c0012cd6 <File::seek(unsigned long long)>
c001a8d9:	83 c4 10             	add    esp,0x10
c001a8dc:	85 c0                	test   eax,eax
c001a8de:	0f 95 c0             	setne  al
c001a8e1:	31 d2                	xor    edx,edx
c001a8e3:	0f b6 c0             	movzx  eax,al
c001a8e6:	f7 d8                	neg    eax
c001a8e8:	83 d2 00             	adc    edx,0x0
c001a8eb:	83 c4 08             	add    esp,0x8
c001a8ee:	f7 da                	neg    edx
c001a8f0:	5b                   	pop    ebx
c001a8f1:	c3                   	ret    
c001a8f2:	83 ec 08             	sub    esp,0x8
c001a8f5:	50                   	push   eax
c001a8f6:	68 db a3 02 c0       	push   0xc002a3db
c001a8fb:	e8 85 7d ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001a900:	83 c4 10             	add    esp,0x10
c001a903:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a908:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a90d:	83 c4 08             	add    esp,0x8
c001a910:	5b                   	pop    ebx
c001a911:	c3                   	ret    

c001a912 <sysCallTell(regs*)>:
c001a912:	53                   	push   ebx
c001a913:	83 ec 08             	sub    esp,0x8
c001a916:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a91a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a91d:	83 f8 02             	cmp    eax,0x2
c001a920:	76 5e                	jbe    c001a980 <sysCallTell(regs*)+0x6e>
c001a922:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a927:	77 2d                	ja     c001a956 <sysCallTell(regs*)+0x44>
c001a929:	83 ec 0c             	sub    esp,0xc
c001a92c:	50                   	push   eax
c001a92d:	e8 0d 6c ff ff       	call   c001153f <getFromFileDescriptor(int)>
c001a932:	5a                   	pop    edx
c001a933:	59                   	pop    ecx
c001a934:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a937:	50                   	push   eax
c001a938:	e8 ef 83 ff ff       	call   c0012d2c <File::tell(unsigned long long*)>
c001a93d:	83 c4 10             	add    esp,0x10
c001a940:	85 c0                	test   eax,eax
c001a942:	0f 95 c0             	setne  al
c001a945:	31 d2                	xor    edx,edx
c001a947:	0f b6 c0             	movzx  eax,al
c001a94a:	f7 d8                	neg    eax
c001a94c:	83 d2 00             	adc    edx,0x0
c001a94f:	83 c4 08             	add    esp,0x8
c001a952:	f7 da                	neg    edx
c001a954:	5b                   	pop    ebx
c001a955:	c3                   	ret    
c001a956:	83 ec 08             	sub    esp,0x8
c001a959:	50                   	push   eax
c001a95a:	68 f5 a3 02 c0       	push   0xc002a3f5
c001a95f:	e8 21 7d ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001a964:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a967:	83 c4 10             	add    esp,0x10
c001a96a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a970:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a977:	31 d2                	xor    edx,edx
c001a979:	31 c0                	xor    eax,eax
c001a97b:	83 c4 08             	add    esp,0x8
c001a97e:	5b                   	pop    ebx
c001a97f:	c3                   	ret    
c001a980:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a985:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a98a:	83 c4 08             	add    esp,0x8
c001a98d:	5b                   	pop    ebx
c001a98e:	c3                   	ret    

c001a98f <sysCallSize(regs*)>:
c001a98f:	53                   	push   ebx
c001a990:	83 ec 18             	sub    esp,0x18
c001a993:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a997:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a99a:	83 f8 02             	cmp    eax,0x2
c001a99d:	76 64                	jbe    c001aa03 <sysCallSize(regs*)+0x74>
c001a99f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a9a4:	77 33                	ja     c001a9d9 <sysCallSize(regs*)+0x4a>
c001a9a6:	83 ec 0c             	sub    esp,0xc
c001a9a9:	50                   	push   eax
c001a9aa:	e8 90 6b ff ff       	call   c001153f <getFromFileDescriptor(int)>
c001a9af:	83 c4 0c             	add    esp,0xc
c001a9b2:	8d 54 24 13          	lea    edx,[esp+0x13]
c001a9b6:	52                   	push   edx
c001a9b7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a9ba:	50                   	push   eax
c001a9bb:	e8 04 85 ff ff       	call   c0012ec4 <File::stat(unsigned long long*, bool*)>
c001a9c0:	83 c4 10             	add    esp,0x10
c001a9c3:	85 c0                	test   eax,eax
c001a9c5:	0f 95 c0             	setne  al
c001a9c8:	31 d2                	xor    edx,edx
c001a9ca:	0f b6 c0             	movzx  eax,al
c001a9cd:	f7 d8                	neg    eax
c001a9cf:	83 d2 00             	adc    edx,0x0
c001a9d2:	83 c4 18             	add    esp,0x18
c001a9d5:	f7 da                	neg    edx
c001a9d7:	5b                   	pop    ebx
c001a9d8:	c3                   	ret    
c001a9d9:	83 ec 08             	sub    esp,0x8
c001a9dc:	50                   	push   eax
c001a9dd:	68 0f a4 02 c0       	push   0xc002a40f
c001a9e2:	e8 9e 7c ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001a9e7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a9ea:	83 c4 10             	add    esp,0x10
c001a9ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a9f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a9fa:	31 d2                	xor    edx,edx
c001a9fc:	31 c0                	xor    eax,eax
c001a9fe:	83 c4 18             	add    esp,0x18
c001aa01:	5b                   	pop    ebx
c001aa02:	c3                   	ret    
c001aa03:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aa08:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aa0d:	83 c4 18             	add    esp,0x18
c001aa10:	5b                   	pop    ebx
c001aa11:	c3                   	ret    

c001aa12 <sysCallSizeFromFilename(regs*)>:
c001aa12:	57                   	push   edi
c001aa13:	56                   	push   esi
c001aa14:	53                   	push   ebx
c001aa15:	83 ec 20             	sub    esp,0x20
c001aa18:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001aa1c:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001aa1f:	83 fb 02             	cmp    ebx,0x2
c001aa22:	0f 86 99 00 00 00    	jbe    c001aac1 <sysCallSizeFromFilename(regs*)+0xaf>
c001aa28:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001aa2e:	77 65                	ja     c001aa95 <sysCallSizeFromFilename(regs*)+0x83>
c001aa30:	83 ec 0c             	sub    esp,0xc
c001aa33:	68 14 01 00 00       	push   0x114
c001aa38:	e8 97 4a ff ff       	call   c000f4d4 <malloc>
c001aa3d:	83 c4 0c             	add    esp,0xc
c001aa40:	89 c6                	mov    esi,eax
c001aa42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa47:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aa4a:	53                   	push   ebx
c001aa4b:	56                   	push   esi
c001aa4c:	e8 63 81 ff ff       	call   c0012bb4 <File::File(char const*, Process*)>
c001aa51:	83 c4 0c             	add    esp,0xc
c001aa54:	8d 44 24 23          	lea    eax,[esp+0x23]
c001aa58:	50                   	push   eax
c001aa59:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001aa5c:	56                   	push   esi
c001aa5d:	e8 62 84 ff ff       	call   c0012ec4 <File::stat(unsigned long long*, bool*)>
c001aa62:	83 c4 10             	add    esp,0x10
c001aa65:	85 f6                	test   esi,esi
c001aa67:	74 14                	je     c001aa7d <sysCallSizeFromFilename(regs*)+0x6b>
c001aa69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aa6d:	8b 16                	mov    edx,DWORD PTR [esi]
c001aa6f:	83 ec 0c             	sub    esp,0xc
c001aa72:	56                   	push   esi
c001aa73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001aa76:	83 c4 10             	add    esp,0x10
c001aa79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa7d:	85 c0                	test   eax,eax
c001aa7f:	0f 95 c0             	setne  al
c001aa82:	31 d2                	xor    edx,edx
c001aa84:	0f b6 c0             	movzx  eax,al
c001aa87:	f7 d8                	neg    eax
c001aa89:	83 d2 00             	adc    edx,0x0
c001aa8c:	83 c4 20             	add    esp,0x20
c001aa8f:	f7 da                	neg    edx
c001aa91:	5b                   	pop    ebx
c001aa92:	5e                   	pop    esi
c001aa93:	5f                   	pop    edi
c001aa94:	c3                   	ret    
c001aa95:	83 ec 08             	sub    esp,0x8
c001aa98:	53                   	push   ebx
c001aa99:	68 0f a4 02 c0       	push   0xc002a40f
c001aa9e:	e8 e2 7b ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001aaa3:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001aaa6:	83 c4 10             	add    esp,0x10
c001aaa9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001aaaf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001aab6:	31 d2                	xor    edx,edx
c001aab8:	83 c4 20             	add    esp,0x20
c001aabb:	31 c0                	xor    eax,eax
c001aabd:	5b                   	pop    ebx
c001aabe:	5e                   	pop    esi
c001aabf:	5f                   	pop    edi
c001aac0:	c3                   	ret    
c001aac1:	83 c4 20             	add    esp,0x20
c001aac4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aac9:	5b                   	pop    ebx
c001aaca:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aacf:	5e                   	pop    esi
c001aad0:	5f                   	pop    edi
c001aad1:	c3                   	ret    

c001aad2 <sysCallClose(regs*)>:
c001aad2:	53                   	push   ebx
c001aad3:	83 ec 08             	sub    esp,0x8
c001aad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aada:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001aadd:	83 f8 02             	cmp    eax,0x2
c001aae0:	76 50                	jbe    c001ab32 <sysCallClose(regs*)+0x60>
c001aae2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001aae7:	74 58                	je     c001ab41 <sysCallClose(regs*)+0x6f>
c001aae9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aaee:	74 60                	je     c001ab50 <sysCallClose(regs*)+0x7e>
c001aaf0:	77 2f                	ja     c001ab21 <sysCallClose(regs*)+0x4f>
c001aaf2:	83 ec 0c             	sub    esp,0xc
c001aaf5:	50                   	push   eax
c001aaf6:	e8 44 6a ff ff       	call   c001153f <getFromFileDescriptor(int)>
c001aafb:	89 c3                	mov    ebx,eax
c001aafd:	89 04 24             	mov    DWORD PTR [esp],eax
c001ab00:	e8 71 81 ff ff       	call   c0012c76 <File::close()>
c001ab05:	83 c4 10             	add    esp,0x10
c001ab08:	85 db                	test   ebx,ebx
c001ab0a:	74 0c                	je     c001ab18 <sysCallClose(regs*)+0x46>
c001ab0c:	83 ec 0c             	sub    esp,0xc
c001ab0f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab11:	53                   	push   ebx
c001ab12:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab15:	83 c4 10             	add    esp,0x10
c001ab18:	31 c0                	xor    eax,eax
c001ab1a:	31 d2                	xor    edx,edx
c001ab1c:	83 c4 08             	add    esp,0x8
c001ab1f:	5b                   	pop    ebx
c001ab20:	c3                   	ret    
c001ab21:	83 ec 08             	sub    esp,0x8
c001ab24:	50                   	push   eax
c001ab25:	68 90 a3 02 c0       	push   0xc002a390
c001ab2a:	e8 56 7b ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001ab2f:	83 c4 10             	add    esp,0x10
c001ab32:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ab37:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ab3c:	83 c4 08             	add    esp,0x8
c001ab3f:	5b                   	pop    ebx
c001ab40:	c3                   	ret    
c001ab41:	83 ec 0c             	sub    esp,0xc
c001ab44:	68 2a a4 02 c0       	push   0xc002a42a
c001ab49:	e8 37 7b ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001ab4e:	eb c5                	jmp    c001ab15 <sysCallClose(regs*)+0x43>
c001ab50:	83 ec 0c             	sub    esp,0xc
c001ab53:	68 38 a4 02 c0       	push   0xc002a438
c001ab58:	eb ef                	jmp    c001ab49 <sysCallClose(regs*)+0x77>

c001ab5a <sysCallOpenDir(regs*)>:
c001ab5a:	56                   	push   esi
c001ab5b:	53                   	push   ebx
c001ab5c:	53                   	push   ebx
c001ab5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab61:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001ab64:	85 f6                	test   esi,esi
c001ab66:	74 59                	je     c001abc1 <sysCallOpenDir(regs*)+0x67>
c001ab68:	83 ec 0c             	sub    esp,0xc
c001ab6b:	68 14 01 00 00       	push   0x114
c001ab70:	e8 5f 49 ff ff       	call   c000f4d4 <malloc>
c001ab75:	83 c4 0c             	add    esp,0xc
c001ab78:	89 c6                	mov    esi,eax
c001ab7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab7f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ab82:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ab85:	56                   	push   esi
c001ab86:	e8 ff 84 ff ff       	call   c001308a <Directory::Directory(char const*, Process*)>
c001ab8b:	83 c4 10             	add    esp,0x10
c001ab8e:	85 f6                	test   esi,esi
c001ab90:	74 2f                	je     c001abc1 <sysCallOpenDir(regs*)+0x67>
c001ab92:	83 ec 0c             	sub    esp,0xc
c001ab95:	56                   	push   esi
c001ab96:	e8 53 85 ff ff       	call   c00130ee <Directory::open()>
c001ab9b:	83 c4 10             	add    esp,0x10
c001ab9e:	85 c0                	test   eax,eax
c001aba0:	75 1f                	jne    c001abc1 <sysCallOpenDir(regs*)+0x67>
c001aba2:	83 ec 0c             	sub    esp,0xc
c001aba5:	56                   	push   esi
c001aba6:	e8 9f 66 ff ff       	call   c001124a <UnixFile::getFileDescriptor()>
c001abab:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001abae:	83 c4 10             	add    esp,0x10
c001abb1:	89 02                	mov    DWORD PTR [edx],eax
c001abb3:	c1 f8 1f             	sar    eax,0x1f
c001abb6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001abb9:	31 c0                	xor    eax,eax
c001abbb:	59                   	pop    ecx
c001abbc:	31 d2                	xor    edx,edx
c001abbe:	5b                   	pop    ebx
c001abbf:	5e                   	pop    esi
c001abc0:	c3                   	ret    
c001abc1:	59                   	pop    ecx
c001abc2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001abc7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001abcc:	5b                   	pop    ebx
c001abcd:	5e                   	pop    esi
c001abce:	c3                   	ret    

c001abcf <sysCallCloseDir(regs*)>:
c001abcf:	53                   	push   ebx
c001abd0:	83 ec 08             	sub    esp,0x8
c001abd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abd7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001abda:	83 f8 02             	cmp    eax,0x2
c001abdd:	76 47                	jbe    c001ac26 <sysCallCloseDir(regs*)+0x57>
c001abdf:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001abe4:	77 2f                	ja     c001ac15 <sysCallCloseDir(regs*)+0x46>
c001abe6:	83 ec 0c             	sub    esp,0xc
c001abe9:	50                   	push   eax
c001abea:	e8 50 69 ff ff       	call   c001153f <getFromFileDescriptor(int)>
c001abef:	89 c3                	mov    ebx,eax
c001abf1:	89 04 24             	mov    DWORD PTR [esp],eax
c001abf4:	e8 51 85 ff ff       	call   c001314a <Directory::close()>
c001abf9:	83 c4 10             	add    esp,0x10
c001abfc:	85 db                	test   ebx,ebx
c001abfe:	74 0c                	je     c001ac0c <sysCallCloseDir(regs*)+0x3d>
c001ac00:	83 ec 0c             	sub    esp,0xc
c001ac03:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac05:	53                   	push   ebx
c001ac06:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac09:	83 c4 10             	add    esp,0x10
c001ac0c:	31 c0                	xor    eax,eax
c001ac0e:	31 d2                	xor    edx,edx
c001ac10:	83 c4 08             	add    esp,0x8
c001ac13:	5b                   	pop    ebx
c001ac14:	c3                   	ret    
c001ac15:	83 ec 08             	sub    esp,0x8
c001ac18:	50                   	push   eax
c001ac19:	68 b8 a3 02 c0       	push   0xc002a3b8
c001ac1e:	e8 62 7a ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001ac23:	83 c4 10             	add    esp,0x10
c001ac26:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ac2b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ac30:	83 c4 08             	add    esp,0x8
c001ac33:	5b                   	pop    ebx
c001ac34:	c3                   	ret    

c001ac35 <sysCallMakeDir(regs*)>:
c001ac35:	56                   	push   esi
c001ac36:	53                   	push   ebx
c001ac37:	83 ec 10             	sub    esp,0x10
c001ac3a:	68 14 01 00 00       	push   0x114
c001ac3f:	e8 90 48 ff ff       	call   c000f4d4 <malloc>
c001ac44:	83 c4 0c             	add    esp,0xc
c001ac47:	89 c3                	mov    ebx,eax
c001ac49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac4e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ac51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac55:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ac58:	53                   	push   ebx
c001ac59:	e8 2c 84 ff ff       	call   c001308a <Directory::Directory(char const*, Process*)>
c001ac5e:	83 c4 10             	add    esp,0x10
c001ac61:	85 db                	test   ebx,ebx
c001ac63:	74 32                	je     c001ac97 <sysCallMakeDir(regs*)+0x62>
c001ac65:	83 ec 0c             	sub    esp,0xc
c001ac68:	53                   	push   ebx
c001ac69:	e8 60 86 ff ff       	call   c00132ce <Directory::create()>
c001ac6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac71:	89 c6                	mov    esi,eax
c001ac73:	e8 d2 84 ff ff       	call   c001314a <Directory::close()>
c001ac78:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac7d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac80:	83 c4 10             	add    esp,0x10
c001ac83:	31 c0                	xor    eax,eax
c001ac85:	59                   	pop    ecx
c001ac86:	85 f6                	test   esi,esi
c001ac88:	5b                   	pop    ebx
c001ac89:	0f 95 c0             	setne  al
c001ac8c:	5e                   	pop    esi
c001ac8d:	31 d2                	xor    edx,edx
c001ac8f:	f7 d8                	neg    eax
c001ac91:	83 d2 00             	adc    edx,0x0
c001ac94:	f7 da                	neg    edx
c001ac96:	c3                   	ret    
c001ac97:	59                   	pop    ecx
c001ac98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ac9d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aca2:	5b                   	pop    ebx
c001aca3:	5e                   	pop    esi
c001aca4:	c3                   	ret    

c001aca5 <sysCallWait(regs*)>:
c001aca5:	83 ec 10             	sub    esp,0x10
c001aca8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acac:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001acaf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001acb2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001acb5:	e8 2b 24 00 00       	call   c001d0e5 <waitTask(int, int*, int)>
c001acba:	83 c4 1c             	add    esp,0x1c
c001acbd:	99                   	cdq    
c001acbe:	c3                   	ret    

c001acbf <sysCallNotImpl(regs*)>:
c001acbf:	83 ec 18             	sub    esp,0x18
c001acc2:	68 46 a4 02 c0       	push   0xc002a446
c001acc7:	e8 d3 ea ff ff       	call   c001979f <Krnl::panic(char const*)>
c001accc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001acd1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001acd6:	83 c4 1c             	add    esp,0x1c
c001acd9:	c3                   	ret    

c001acda <sysPanic(regs*)>:
c001acda:	83 ec 18             	sub    esp,0x18
c001acdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ace1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ace4:	e8 b6 ea ff ff       	call   c001979f <Krnl::panic(char const*)>
c001ace9:	c7 04 24 60 a4 02 c0 	mov    DWORD PTR [esp],0xc002a460
c001acf0:	e8 aa ea ff ff       	call   c001979f <Krnl::panic(char const*)>
c001acf5:	b8 01 00 00 00       	mov    eax,0x1
c001acfa:	31 d2                	xor    edx,edx
c001acfc:	83 c4 1c             	add    esp,0x1c
c001acff:	c3                   	ret    

c001ad00 <sysCallRmdir(regs*)>:
c001ad00:	56                   	push   esi
c001ad01:	53                   	push   ebx
c001ad02:	83 ec 20             	sub    esp,0x20
c001ad05:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ad09:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ad0c:	68 14 01 00 00       	push   0x114
c001ad11:	e8 be 47 ff ff       	call   c000f4d4 <malloc>
c001ad16:	83 c4 0c             	add    esp,0xc
c001ad19:	89 c3                	mov    ebx,eax
c001ad1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad20:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad23:	56                   	push   esi
c001ad24:	53                   	push   ebx
c001ad25:	e8 8a 7e ff ff       	call   c0012bb4 <File::File(char const*, Process*)>
c001ad2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad2d:	e8 5e 80 ff ff       	call   c0012d90 <File::unlink()>
c001ad32:	83 c4 10             	add    esp,0x10
c001ad35:	85 db                	test   ebx,ebx
c001ad37:	74 14                	je     c001ad4d <sysCallRmdir(regs*)+0x4d>
c001ad39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad3d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ad3f:	83 ec 0c             	sub    esp,0xc
c001ad42:	53                   	push   ebx
c001ad43:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ad46:	83 c4 10             	add    esp,0x10
c001ad49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad4d:	85 c0                	test   eax,eax
c001ad4f:	0f 95 c0             	setne  al
c001ad52:	31 d2                	xor    edx,edx
c001ad54:	0f b6 c0             	movzx  eax,al
c001ad57:	f7 d8                	neg    eax
c001ad59:	83 d2 00             	adc    edx,0x0
c001ad5c:	83 c4 14             	add    esp,0x14
c001ad5f:	f7 da                	neg    edx
c001ad61:	5b                   	pop    ebx
c001ad62:	5e                   	pop    esi
c001ad63:	c3                   	ret    

c001ad64 <sysCallUnlink(regs*)>:
c001ad64:	56                   	push   esi
c001ad65:	53                   	push   ebx
c001ad66:	83 ec 20             	sub    esp,0x20
c001ad69:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ad6d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ad70:	68 14 01 00 00       	push   0x114
c001ad75:	e8 5a 47 ff ff       	call   c000f4d4 <malloc>
c001ad7a:	83 c4 0c             	add    esp,0xc
c001ad7d:	89 c3                	mov    ebx,eax
c001ad7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad84:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad87:	56                   	push   esi
c001ad88:	53                   	push   ebx
c001ad89:	e8 26 7e ff ff       	call   c0012bb4 <File::File(char const*, Process*)>
c001ad8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad91:	e8 fa 7f ff ff       	call   c0012d90 <File::unlink()>
c001ad96:	83 c4 10             	add    esp,0x10
c001ad99:	85 db                	test   ebx,ebx
c001ad9b:	74 14                	je     c001adb1 <sysCallUnlink(regs*)+0x4d>
c001ad9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ada1:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ada3:	83 ec 0c             	sub    esp,0xc
c001ada6:	53                   	push   ebx
c001ada7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001adaa:	83 c4 10             	add    esp,0x10
c001adad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adb1:	85 c0                	test   eax,eax
c001adb3:	0f 95 c0             	setne  al
c001adb6:	31 d2                	xor    edx,edx
c001adb8:	0f b6 c0             	movzx  eax,al
c001adbb:	f7 d8                	neg    eax
c001adbd:	83 d2 00             	adc    edx,0x0
c001adc0:	83 c4 14             	add    esp,0x14
c001adc3:	f7 da                	neg    edx
c001adc5:	5b                   	pop    ebx
c001adc6:	5e                   	pop    esi
c001adc7:	c3                   	ret    

c001adc8 <sysCallGetArgv(regs*)>:
c001adc8:	83 ec 0c             	sub    esp,0xc
c001adcb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001adcf:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001add2:	85 c0                	test   eax,eax
c001add4:	78 2b                	js     c001ae01 <sysCallGetArgv(regs*)+0x39>
c001add6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001addc:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001addf:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001ade5:	7d 1a                	jge    c001ae01 <sysCallGetArgv(regs*)+0x39>
c001ade7:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001adee:	85 c0                	test   eax,eax
c001adf0:	74 17                	je     c001ae09 <sysCallGetArgv(regs*)+0x41>
c001adf2:	83 ec 08             	sub    esp,0x8
c001adf5:	50                   	push   eax
c001adf6:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001adf9:	e8 2c 59 fe ff       	call   c000072a <strcpy>
c001adfe:	83 c4 10             	add    esp,0x10
c001ae01:	31 c0                	xor    eax,eax
c001ae03:	31 d2                	xor    edx,edx
c001ae05:	83 c4 0c             	add    esp,0xc
c001ae08:	c3                   	ret    
c001ae09:	b8 01 00 00 00       	mov    eax,0x1
c001ae0e:	31 d2                	xor    edx,edx
c001ae10:	83 c4 0c             	add    esp,0xc
c001ae13:	c3                   	ret    

c001ae14 <sysCallTTYName(regs*)>:
c001ae14:	56                   	push   esi
c001ae15:	53                   	push   ebx
c001ae16:	53                   	push   ebx
c001ae17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae1b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001ae1e:	85 c0                	test   eax,eax
c001ae20:	74 5f                	je     c001ae81 <sysCallTTYName(regs*)+0x6d>
c001ae22:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001ae25:	83 f8 02             	cmp    eax,0x2
c001ae28:	77 3e                	ja     c001ae68 <sysCallTTYName(regs*)+0x54>
c001ae2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae2f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae32:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001ae38:	85 db                	test   ebx,ebx
c001ae3a:	74 45                	je     c001ae81 <sysCallTTYName(regs*)+0x6d>
c001ae3c:	83 ec 0c             	sub    esp,0xc
c001ae3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae41:	53                   	push   ebx
c001ae42:	ff 10                	call   DWORD PTR [eax]
c001ae44:	83 c4 10             	add    esp,0x10
c001ae47:	84 c0                	test   al,al
c001ae49:	74 41                	je     c001ae8c <sysCallTTYName(regs*)+0x78>
c001ae4b:	83 ec 08             	sub    esp,0x8
c001ae4e:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001ae54:	53                   	push   ebx
c001ae55:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001ae58:	e8 cd 58 fe ff       	call   c000072a <strcpy>
c001ae5d:	83 c4 10             	add    esp,0x10
c001ae60:	31 c0                	xor    eax,eax
c001ae62:	59                   	pop    ecx
c001ae63:	31 d2                	xor    edx,edx
c001ae65:	5b                   	pop    ebx
c001ae66:	5e                   	pop    esi
c001ae67:	c3                   	ret    
c001ae68:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ae6d:	74 bb                	je     c001ae2a <sysCallTTYName(regs*)+0x16>
c001ae6f:	83 ec 0c             	sub    esp,0xc
c001ae72:	50                   	push   eax
c001ae73:	e8 c7 66 ff ff       	call   c001153f <getFromFileDescriptor(int)>
c001ae78:	83 c4 10             	add    esp,0x10
c001ae7b:	89 c3                	mov    ebx,eax
c001ae7d:	85 db                	test   ebx,ebx
c001ae7f:	75 bb                	jne    c001ae3c <sysCallTTYName(regs*)+0x28>
c001ae81:	59                   	pop    ecx
c001ae82:	b8 01 00 00 00       	mov    eax,0x1
c001ae87:	31 d2                	xor    edx,edx
c001ae89:	5b                   	pop    ebx
c001ae8a:	5e                   	pop    esi
c001ae8b:	c3                   	ret    
c001ae8c:	59                   	pop    ecx
c001ae8d:	b8 02 00 00 00       	mov    eax,0x2
c001ae92:	31 d2                	xor    edx,edx
c001ae94:	5b                   	pop    ebx
c001ae95:	5e                   	pop    esi
c001ae96:	c3                   	ret    

c001ae97 <sysCallUSleep(regs*)>:
c001ae97:	83 ec 14             	sub    esp,0x14
c001ae9a:	b8 e8 03 00 00       	mov    eax,0x3e8
c001ae9f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aea3:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001aeaa:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001aead:	01 ca                	add    edx,ecx
c001aeaf:	52                   	push   edx
c001aeb0:	50                   	push   eax
c001aeb1:	e8 c8 22 00 00       	call   c001d17e <nanoSleep(unsigned long long)>
c001aeb6:	31 c0                	xor    eax,eax
c001aeb8:	31 d2                	xor    edx,edx
c001aeba:	83 c4 1c             	add    esp,0x1c
c001aebd:	c3                   	ret    

c001aebe <sysCallSpawn(regs*)>:
c001aebe:	56                   	push   esi
c001aebf:	53                   	push   ebx
c001aec0:	53                   	push   ebx
c001aec1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aec5:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001aec8:	85 f6                	test   esi,esi
c001aeca:	75 08                	jne    c001aed4 <sysCallSpawn(regs*)+0x16>
c001aecc:	59                   	pop    ecx
c001aecd:	31 c0                	xor    eax,eax
c001aecf:	31 d2                	xor    edx,edx
c001aed1:	5b                   	pop    ebx
c001aed2:	5e                   	pop    esi
c001aed3:	c3                   	ret    
c001aed4:	83 ec 0c             	sub    esp,0xc
c001aed7:	68 3f 07 00 00       	push   0x73f
c001aedc:	e8 f3 45 ff ff       	call   c000f4d4 <malloc>
c001aee1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aee4:	89 c6                	mov    esi,eax
c001aee6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aeeb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aeee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001aef1:	56                   	push   esi
c001aef2:	e8 87 19 00 00       	call   c001c87e <Process::Process(char const*, Process*, char**)>
c001aef7:	83 c4 20             	add    esp,0x20
c001aefa:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001af01:	75 c9                	jne    c001aecc <sysCallSpawn(regs*)+0xe>
c001af03:	83 ec 0c             	sub    esp,0xc
c001af06:	56                   	push   esi
c001af07:	e8 38 1f 00 00       	call   c001ce44 <Process::createUserThread()>
c001af0c:	8b 06                	mov    eax,DWORD PTR [esi]
c001af0e:	83 c4 10             	add    esp,0x10
c001af11:	99                   	cdq    
c001af12:	59                   	pop    ecx
c001af13:	5b                   	pop    ebx
c001af14:	5e                   	pop    esi
c001af15:	c3                   	ret    

c001af16 <sysCallGetEnv(regs*)>:
c001af16:	57                   	push   edi
c001af17:	56                   	push   esi
c001af18:	53                   	push   ebx
c001af19:	83 ec 1c             	sub    esp,0x1c
c001af1c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001af20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af25:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001af28:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001af2b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001af2e:	e8 88 e7 ff ff       	call   c00196bb <Krnl::getProcessTotalEnvCount(Process*)>
c001af33:	83 c4 10             	add    esp,0x10
c001af36:	39 c7                	cmp    edi,eax
c001af38:	7c 14                	jl     c001af4e <sysCallGetEnv(regs*)+0x38>
c001af3a:	85 f6                	test   esi,esi
c001af3c:	75 0b                	jne    c001af49 <sysCallGetEnv(regs*)+0x33>
c001af3e:	83 c4 10             	add    esp,0x10
c001af41:	31 c0                	xor    eax,eax
c001af43:	5b                   	pop    ebx
c001af44:	31 d2                	xor    edx,edx
c001af46:	5e                   	pop    esi
c001af47:	5f                   	pop    edi
c001af48:	c3                   	ret    
c001af49:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001af4c:	eb f0                	jmp    c001af3e <sysCallGetEnv(regs*)+0x28>
c001af4e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001af52:	52                   	push   edx
c001af53:	57                   	push   edi
c001af54:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001af5a:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001af5d:	50                   	push   eax
c001af5e:	e8 78 e7 ff ff       	call   c00196db <Krnl::getProcessEnvPair(Process*, int)>
c001af63:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001af66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af6a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001af6e:	83 c4 0c             	add    esp,0xc
c001af71:	85 c9                	test   ecx,ecx
c001af73:	75 23                	jne    c001af98 <sysCallGetEnv(regs*)+0x82>
c001af75:	83 ec 0c             	sub    esp,0xc
c001af78:	50                   	push   eax
c001af79:	e8 2a 57 fe ff       	call   c00006a8 <strlen>
c001af7e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001af81:	89 c3                	mov    ebx,eax
c001af83:	e8 20 57 fe ff       	call   c00006a8 <strlen>
c001af88:	83 c4 10             	add    esp,0x10
c001af8b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001af8f:	83 c4 10             	add    esp,0x10
c001af92:	31 d2                	xor    edx,edx
c001af94:	5b                   	pop    ebx
c001af95:	5e                   	pop    esi
c001af96:	5f                   	pop    edi
c001af97:	c3                   	ret    
c001af98:	83 ec 08             	sub    esp,0x8
c001af9b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001af9e:	50                   	push   eax
c001af9f:	56                   	push   esi
c001afa0:	e8 85 57 fe ff       	call   c000072a <strcpy>
c001afa5:	58                   	pop    eax
c001afa6:	5a                   	pop    edx
c001afa7:	68 6f a4 02 c0       	push   0xc002a46f
c001afac:	56                   	push   esi
c001afad:	e8 2f 58 fe ff       	call   c00007e1 <strcat>
c001afb2:	59                   	pop    ecx
c001afb3:	5b                   	pop    ebx
c001afb4:	57                   	push   edi
c001afb5:	56                   	push   esi
c001afb6:	e8 26 58 fe ff       	call   c00007e1 <strcat>
c001afbb:	83 c4 10             	add    esp,0x10
c001afbe:	e9 7b ff ff ff       	jmp    c001af3e <sysCallGetEnv(regs*)+0x28>

c001afc3 <sysAppSettings(regs*)>:
c001afc3:	53                   	push   ebx
c001afc4:	83 ec 08             	sub    esp,0x8
c001afc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afcb:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001afce:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001afd4:	25 e0 1f 00 00       	and    eax,0x1fe0
c001afd9:	66 3d c0 09          	cmp    ax,0x9c0
c001afdd:	75 2f                	jne    c001b00e <sysAppSettings(regs*)+0x4b>
c001afdf:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001afe5:	83 e0 1f             	and    eax,0x1f
c001afe8:	3c 01                	cmp    al,0x1
c001afea:	74 2e                	je     c001b01a <sysAppSettings(regs*)+0x57>
c001afec:	3c 07                	cmp    al,0x7
c001afee:	0f 84 bd 00 00 00    	je     c001b0b1 <sysAppSettings(regs*)+0xee>
c001aff4:	84 c0                	test   al,al
c001aff6:	0f 84 dc 00 00 00    	je     c001b0d8 <sysAppSettings(regs*)+0x115>
c001affc:	3c 08                	cmp    al,0x8
c001affe:	74 6d                	je     c001b06d <sysAppSettings(regs*)+0xaa>
c001b000:	0f b6 c0             	movzx  eax,al
c001b003:	83 c4 08             	add    esp,0x8
c001b006:	05 e8 03 00 00       	add    eax,0x3e8
c001b00b:	5b                   	pop    ebx
c001b00c:	99                   	cdq    
c001b00d:	c3                   	ret    
c001b00e:	b8 01 00 00 00       	mov    eax,0x1
c001b013:	31 d2                	xor    edx,edx
c001b015:	83 c4 08             	add    esp,0x8
c001b018:	5b                   	pop    ebx
c001b019:	c3                   	ret    
c001b01a:	51                   	push   ecx
c001b01b:	68 00 01 00 00       	push   0x100
c001b020:	6a 00                	push   0x0
c001b022:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b027:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b02a:	83 c0 0c             	add    eax,0xc
c001b02d:	50                   	push   eax
c001b02e:	e8 58 56 fe ff       	call   c000068b <memset>
c001b033:	83 c4 0c             	add    esp,0xc
c001b036:	68 ff 00 00 00       	push   0xff
c001b03b:	53                   	push   ebx
c001b03c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b041:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b044:	83 c0 0c             	add    eax,0xc
c001b047:	50                   	push   eax
c001b048:	e8 08 56 fe ff       	call   c0000655 <memcpy>
c001b04d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b052:	5b                   	pop    ebx
c001b053:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b056:	5a                   	pop    edx
c001b057:	8d 50 0c             	lea    edx,[eax+0xc]
c001b05a:	52                   	push   edx
c001b05b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b061:	e8 54 56 ff ff       	call   c00106ba <VgaText::setTitle(char*)>
c001b066:	83 c4 10             	add    esp,0x10
c001b069:	31 c0                	xor    eax,eax
c001b06b:	eb a6                	jmp    c001b013 <sysAppSettings(regs*)+0x50>
c001b06d:	83 ec 08             	sub    esp,0x8
c001b070:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b076:	83 e0 0f             	and    eax,0xf
c001b079:	50                   	push   eax
c001b07a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b07f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b082:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b088:	e8 1d 56 ff ff       	call   c00106aa <VgaText::setTitleColour(VgaColour)>
c001b08d:	58                   	pop    eax
c001b08e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b094:	5a                   	pop    edx
c001b095:	c1 e8 04             	shr    eax,0x4
c001b098:	83 e0 0f             	and    eax,0xf
c001b09b:	50                   	push   eax
c001b09c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b0aa:	e8 eb 55 ff ff       	call   c001069a <VgaText::setTitleTextColour(VgaColour)>
c001b0af:	eb b5                	jmp    c001b066 <sysAppSettings(regs*)+0xa3>
c001b0b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0b9:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b0bf:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b0c5:	c0 e8 06             	shr    al,0x6
c001b0c8:	83 e0 01             	and    eax,0x1
c001b0cb:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b0d1:	31 c0                	xor    eax,eax
c001b0d3:	e9 3b ff ff ff       	jmp    c001b013 <sysAppSettings(regs*)+0x50>
c001b0d8:	b8 02 00 00 00       	mov    eax,0x2
c001b0dd:	e9 31 ff ff ff       	jmp    c001b013 <sysAppSettings(regs*)+0x50>

c001b0e2 <sysSetFatAttrib(regs*)>:
c001b0e2:	57                   	push   edi
c001b0e3:	56                   	push   esi
c001b0e4:	53                   	push   ebx
c001b0e5:	83 ec 1c             	sub    esp,0x1c
c001b0e8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b0ec:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b0ef:	68 14 01 00 00       	push   0x114
c001b0f4:	e8 db 43 ff ff       	call   c000f4d4 <malloc>
c001b0f9:	83 c4 0c             	add    esp,0xc
c001b0fc:	89 c3                	mov    ebx,eax
c001b0fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b103:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b106:	57                   	push   edi
c001b107:	53                   	push   ebx
c001b108:	e8 a7 7a ff ff       	call   c0012bb4 <File::File(char const*, Process*)>
c001b10d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b110:	83 c4 0c             	add    esp,0xc
c001b113:	0f b6 d4             	movzx  edx,ah
c001b116:	0f b6 c0             	movzx  eax,al
c001b119:	52                   	push   edx
c001b11a:	50                   	push   eax
c001b11b:	53                   	push   ebx
c001b11c:	e8 09 7d ff ff       	call   c0012e2a <File::chfatattr(unsigned char, unsigned char)>
c001b121:	83 c4 10             	add    esp,0x10
c001b124:	85 db                	test   ebx,ebx
c001b126:	74 14                	je     c001b13c <sysSetFatAttrib(regs*)+0x5a>
c001b128:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b12c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b12e:	83 ec 0c             	sub    esp,0xc
c001b131:	53                   	push   ebx
c001b132:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b135:	83 c4 10             	add    esp,0x10
c001b138:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b13c:	85 c0                	test   eax,eax
c001b13e:	0f 95 c0             	setne  al
c001b141:	31 d2                	xor    edx,edx
c001b143:	0f b6 c0             	movzx  eax,al
c001b146:	f7 d8                	neg    eax
c001b148:	83 d2 00             	adc    edx,0x0
c001b14b:	83 c4 10             	add    esp,0x10
c001b14e:	f7 da                	neg    edx
c001b150:	5b                   	pop    ebx
c001b151:	5e                   	pop    esi
c001b152:	5f                   	pop    edi
c001b153:	c3                   	ret    

c001b154 <sysPipe(regs*)>:
c001b154:	57                   	push   edi
c001b155:	56                   	push   esi
c001b156:	53                   	push   ebx
c001b157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b15b:	83 ec 0c             	sub    esp,0xc
c001b15e:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b161:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b164:	6a 20                	push   0x20
c001b166:	e8 69 43 ff ff       	call   c000f4d4 <malloc>
c001b16b:	89 c3                	mov    ebx,eax
c001b16d:	58                   	pop    eax
c001b16e:	5a                   	pop    edx
c001b16f:	68 00 50 00 00       	push   0x5000
c001b174:	53                   	push   ebx
c001b175:	e8 c8 4d ff ff       	call   c000ff42 <Pipe::Pipe(int)>
c001b17a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b17d:	e8 c8 60 ff ff       	call   c001124a <UnixFile::getFileDescriptor()>
c001b182:	89 07                	mov    DWORD PTR [edi],eax
c001b184:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b187:	e8 be 60 ff ff       	call   c001124a <UnixFile::getFileDescriptor()>
c001b18c:	83 c4 10             	add    esp,0x10
c001b18f:	89 06                	mov    DWORD PTR [esi],eax
c001b191:	31 d2                	xor    edx,edx
c001b193:	5b                   	pop    ebx
c001b194:	31 c0                	xor    eax,eax
c001b196:	5e                   	pop    esi
c001b197:	5f                   	pop    edi
c001b198:	c3                   	ret    

c001b199 <sysGetUnixTime(regs*)>:
c001b199:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001b19e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b1a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b1a8:	e9 e3 83 ff ff       	jmp    c0013590 <Clock::timeInSecondsLocal()>

c001b1ad <string_ends_with(char const*, char const*)>:
c001b1ad:	57                   	push   edi
c001b1ae:	56                   	push   esi
c001b1af:	53                   	push   ebx
c001b1b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b1b4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b1b8:	83 ec 0c             	sub    esp,0xc
c001b1bb:	53                   	push   ebx
c001b1bc:	e8 e7 54 fe ff       	call   c00006a8 <strlen>
c001b1c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b1c4:	89 c6                	mov    esi,eax
c001b1c6:	e8 dd 54 fe ff       	call   c00006a8 <strlen>
c001b1cb:	83 c4 10             	add    esp,0x10
c001b1ce:	39 c6                	cmp    esi,eax
c001b1d0:	7d 06                	jge    c001b1d8 <string_ends_with(char const*, char const*)+0x2b>
c001b1d2:	5b                   	pop    ebx
c001b1d3:	31 c0                	xor    eax,eax
c001b1d5:	5e                   	pop    esi
c001b1d6:	5f                   	pop    edi
c001b1d7:	c3                   	ret    
c001b1d8:	83 ec 08             	sub    esp,0x8
c001b1db:	29 c6                	sub    esi,eax
c001b1dd:	57                   	push   edi
c001b1de:	01 f3                	add    ebx,esi
c001b1e0:	53                   	push   ebx
c001b1e1:	e8 95 55 fe ff       	call   c000077b <strcmp>
c001b1e6:	83 c4 10             	add    esp,0x10
c001b1e9:	85 c0                	test   eax,eax
c001b1eb:	5b                   	pop    ebx
c001b1ec:	0f 94 c0             	sete   al
c001b1ef:	5e                   	pop    esi
c001b1f0:	0f b6 c0             	movzx  eax,al
c001b1f3:	5f                   	pop    edi
c001b1f4:	c3                   	ret    

c001b1f5 <sysCallOpen(regs*)>:
c001b1f5:	56                   	push   esi
c001b1f6:	53                   	push   ebx
c001b1f7:	81 ec 04 01 00 00    	sub    esp,0x104
c001b1fd:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001b204:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001b207:	85 c9                	test   ecx,ecx
c001b209:	0f 84 b3 00 00 00    	je     c001b2c2 <sysCallOpen(regs*)+0xcd>
c001b20f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b212:	85 c0                	test   eax,eax
c001b214:	0f 84 a8 00 00 00    	je     c001b2c2 <sysCallOpen(regs*)+0xcd>
c001b21a:	52                   	push   edx
c001b21b:	68 71 a4 02 c0       	push   0xc002a471
c001b220:	50                   	push   eax
c001b221:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b225:	56                   	push   esi
c001b226:	e8 df 77 ff ff       	call   c0012a0a <standardiseFiles(char*, char const*, char const*)>
c001b22b:	89 34 24             	mov    DWORD PTR [esp],esi
c001b22e:	e8 75 54 fe ff       	call   c00006a8 <strlen>
c001b233:	83 c4 10             	add    esp,0x10
c001b236:	48                   	dec    eax
c001b237:	74 1d                	je     c001b256 <sysCallOpen(regs*)+0x61>
c001b239:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001b23c:	eb 0f                	jmp    c001b24d <sysCallOpen(regs*)+0x58>
c001b23e:	80 fa 3a             	cmp    dl,0x3a
c001b241:	74 0f                	je     c001b252 <sysCallOpen(regs*)+0x5d>
c001b243:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001b247:	48                   	dec    eax
c001b248:	74 0c                	je     c001b256 <sysCallOpen(regs*)+0x61>
c001b24a:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001b24d:	80 fa 2e             	cmp    dl,0x2e
c001b250:	75 ec                	jne    c001b23e <sysCallOpen(regs*)+0x49>
c001b252:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001b256:	83 ec 08             	sub    esp,0x8
c001b259:	68 75 a4 02 c0       	push   0xc002a475
c001b25e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b261:	e8 47 ff ff ff       	call   c001b1ad <string_ends_with(char const*, char const*)>
c001b266:	83 c4 10             	add    esp,0x10
c001b269:	85 c0                	test   eax,eax
c001b26b:	75 17                	jne    c001b284 <sysCallOpen(regs*)+0x8f>
c001b26d:	83 ec 08             	sub    esp,0x8
c001b270:	68 96 a4 02 c0       	push   0xc002a496
c001b275:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b278:	e8 30 ff ff ff       	call   c001b1ad <string_ends_with(char const*, char const*)>
c001b27d:	83 c4 10             	add    esp,0x10
c001b280:	85 c0                	test   eax,eax
c001b282:	74 51                	je     c001b2d5 <sysCallOpen(regs*)+0xe0>
c001b284:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b287:	83 ec 08             	sub    esp,0x8
c001b28a:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001b290:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b297:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b29a:	ff 30                	push   DWORD PTR [eax]
c001b29c:	68 7a a4 02 c0       	push   0xc002a47a
c001b2a1:	e8 df 73 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001b2a6:	c7 04 24 89 a4 02 c0 	mov    DWORD PTR [esp],0xc002a489
c001b2ad:	e8 d3 73 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001b2b2:	83 c4 10             	add    esp,0x10
c001b2b5:	81 c4 04 01 00 00    	add    esp,0x104
c001b2bb:	31 c0                	xor    eax,eax
c001b2bd:	31 d2                	xor    edx,edx
c001b2bf:	5b                   	pop    ebx
c001b2c0:	5e                   	pop    esi
c001b2c1:	c3                   	ret    
c001b2c2:	81 c4 04 01 00 00    	add    esp,0x104
c001b2c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2cd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2d2:	5b                   	pop    ebx
c001b2d3:	5e                   	pop    esi
c001b2d4:	c3                   	ret    
c001b2d5:	83 ec 08             	sub    esp,0x8
c001b2d8:	68 76 a4 02 c0       	push   0xc002a476
c001b2dd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b2e0:	e8 96 54 fe ff       	call   c000077b <strcmp>
c001b2e5:	83 c4 10             	add    esp,0x10
c001b2e8:	85 c0                	test   eax,eax
c001b2ea:	74 98                	je     c001b284 <sysCallOpen(regs*)+0x8f>
c001b2ec:	83 ec 08             	sub    esp,0x8
c001b2ef:	68 75 a4 02 c0       	push   0xc002a475
c001b2f4:	56                   	push   esi
c001b2f5:	e8 b3 fe ff ff       	call   c001b1ad <string_ends_with(char const*, char const*)>
c001b2fa:	83 c4 10             	add    esp,0x10
c001b2fd:	85 c0                	test   eax,eax
c001b2ff:	75 83                	jne    c001b284 <sysCallOpen(regs*)+0x8f>
c001b301:	83 ec 08             	sub    esp,0x8
c001b304:	68 9b a4 02 c0       	push   0xc002a49b
c001b309:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b30c:	e8 9c fe ff ff       	call   c001b1ad <string_ends_with(char const*, char const*)>
c001b311:	83 c4 10             	add    esp,0x10
c001b314:	85 c0                	test   eax,eax
c001b316:	0f 85 d9 00 00 00    	jne    c001b3f5 <sysCallOpen(regs*)+0x200>
c001b31c:	83 ec 08             	sub    esp,0x8
c001b31f:	68 a0 a4 02 c0       	push   0xc002a4a0
c001b324:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b327:	e8 81 fe ff ff       	call   c001b1ad <string_ends_with(char const*, char const*)>
c001b32c:	83 c4 10             	add    esp,0x10
c001b32f:	85 c0                	test   eax,eax
c001b331:	0f 85 be 00 00 00    	jne    c001b3f5 <sysCallOpen(regs*)+0x200>
c001b337:	83 ec 08             	sub    esp,0x8
c001b33a:	68 9c a4 02 c0       	push   0xc002a49c
c001b33f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b342:	e8 34 54 fe ff       	call   c000077b <strcmp>
c001b347:	83 c4 10             	add    esp,0x10
c001b34a:	85 c0                	test   eax,eax
c001b34c:	0f 84 a3 00 00 00    	je     c001b3f5 <sysCallOpen(regs*)+0x200>
c001b352:	83 ec 08             	sub    esp,0x8
c001b355:	68 9b a4 02 c0       	push   0xc002a49b
c001b35a:	56                   	push   esi
c001b35b:	e8 4d fe ff ff       	call   c001b1ad <string_ends_with(char const*, char const*)>
c001b360:	83 c4 10             	add    esp,0x10
c001b363:	85 c0                	test   eax,eax
c001b365:	0f 85 8a 00 00 00    	jne    c001b3f5 <sysCallOpen(regs*)+0x200>
c001b36b:	83 ec 0c             	sub    esp,0xc
c001b36e:	68 14 01 00 00       	push   0x114
c001b373:	e8 5c 41 ff ff       	call   c000f4d4 <malloc>
c001b378:	83 c4 0c             	add    esp,0xc
c001b37b:	89 c6                	mov    esi,eax
c001b37d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b382:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b385:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b388:	56                   	push   esi
c001b389:	e8 26 78 ff ff       	call   c0012bb4 <File::File(char const*, Process*)>
c001b38e:	83 c4 10             	add    esp,0x10
c001b391:	85 f6                	test   esi,esi
c001b393:	0f 84 29 ff ff ff    	je     c001b2c2 <sysCallOpen(regs*)+0xcd>
c001b399:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b39c:	0f b6 c2             	movzx  eax,dl
c001b39f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001b3a2:	89 d0                	mov    eax,edx
c001b3a4:	83 e0 01             	and    eax,0x1
c001b3a7:	f6 c2 02             	test   dl,0x2
c001b3aa:	74 03                	je     c001b3af <sysCallOpen(regs*)+0x1ba>
c001b3ac:	83 c8 02             	or     eax,0x2
c001b3af:	f6 c2 04             	test   dl,0x4
c001b3b2:	74 03                	je     c001b3b7 <sysCallOpen(regs*)+0x1c2>
c001b3b4:	83 c8 04             	or     eax,0x4
c001b3b7:	f6 c2 08             	test   dl,0x8
c001b3ba:	74 03                	je     c001b3bf <sysCallOpen(regs*)+0x1ca>
c001b3bc:	83 c8 0a             	or     eax,0xa
c001b3bf:	83 e2 10             	and    edx,0x10
c001b3c2:	74 03                	je     c001b3c7 <sysCallOpen(regs*)+0x1d2>
c001b3c4:	83 c8 12             	or     eax,0x12
c001b3c7:	83 ec 08             	sub    esp,0x8
c001b3ca:	50                   	push   eax
c001b3cb:	56                   	push   esi
c001b3cc:	e8 47 78 ff ff       	call   c0012c18 <File::open(FileOpenMode)>
c001b3d1:	83 c4 10             	add    esp,0x10
c001b3d4:	85 c0                	test   eax,eax
c001b3d6:	0f 85 e6 fe ff ff    	jne    c001b2c2 <sysCallOpen(regs*)+0xcd>
c001b3dc:	83 ec 0c             	sub    esp,0xc
c001b3df:	56                   	push   esi
c001b3e0:	e8 65 5e ff ff       	call   c001124a <UnixFile::getFileDescriptor()>
c001b3e5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b3e8:	89 02                	mov    DWORD PTR [edx],eax
c001b3ea:	c1 f8 1f             	sar    eax,0x1f
c001b3ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b3f0:	e9 bd fe ff ff       	jmp    c001b2b2 <sysCallOpen(regs*)+0xbd>
c001b3f5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3f8:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001b3fe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b405:	e9 ab fe ff ff       	jmp    c001b2b5 <sysCallOpen(regs*)+0xc0>

c001b40a <setupSystemCalls()>:
c001b40a:	c7 05 a0 d3 02 c0 c0 a5 01 c0 	mov    DWORD PTR ds:0xc002d3a0,0xc001a5c0
c001b414:	c7 05 a4 d3 02 c0 94 a3 01 c0 	mov    DWORD PTR ds:0xc002d3a4,0xc001a394
c001b41e:	c7 05 a8 d3 02 c0 e7 a4 01 c0 	mov    DWORD PTR ds:0xc002d3a8,0xc001a4e7
c001b428:	c7 05 ac d3 02 c0 58 a5 01 c0 	mov    DWORD PTR ds:0xc002d3ac,0xc001a558
c001b432:	c7 05 b0 d3 02 c0 7f a4 01 c0 	mov    DWORD PTR ds:0xc002d3b0,0xc001a47f
c001b43c:	c7 05 b4 d3 02 c0 cb a3 01 c0 	mov    DWORD PTR ds:0xc002d3b4,0xc001a3cb
c001b446:	c7 05 b8 d3 02 c0 ac a3 01 c0 	mov    DWORD PTR ds:0xc002d3b8,0xc001a3ac
c001b450:	c7 05 bc d3 02 c0 3c a5 01 c0 	mov    DWORD PTR ds:0xc002d3bc,0xc001a53c
c001b45a:	c7 05 c4 d3 02 c0 d2 aa 01 c0 	mov    DWORD PTR ds:0xc002d3c4,0xc001aad2
c001b464:	c7 05 c0 d3 02 c0 f5 b1 01 c0 	mov    DWORD PTR ds:0xc002d3c0,0xc001b1f5
c001b46e:	c7 05 c8 d3 02 c0 5a ab 01 c0 	mov    DWORD PTR ds:0xc002d3c8,0xc001ab5a
c001b478:	c7 05 cc d3 02 c0 c1 a7 01 c0 	mov    DWORD PTR ds:0xc002d3cc,0xc001a7c1
c001b482:	c7 05 d0 d3 02 c0 fb a5 01 c0 	mov    DWORD PTR ds:0xc002d3d0,0xc001a5fb
c001b48c:	c7 05 d4 d3 02 c0 00 a6 01 c0 	mov    DWORD PTR ds:0xc002d3d4,0xc001a600
c001b496:	c7 05 d8 d3 02 c0 35 ac 01 c0 	mov    DWORD PTR ds:0xc002d3d8,0xc001ac35
c001b4a0:	c7 05 dc d3 02 c0 cf ab 01 c0 	mov    DWORD PTR ds:0xc002d3dc,0xc001abcf
c001b4aa:	c7 05 e0 d3 02 c0 a9 a8 01 c0 	mov    DWORD PTR ds:0xc002d3e0,0xc001a8a9
c001b4b4:	c7 05 e4 d3 02 c0 12 a9 01 c0 	mov    DWORD PTR ds:0xc002d3e4,0xc001a912
c001b4be:	c7 05 e8 d3 02 c0 8f a9 01 c0 	mov    DWORD PTR ds:0xc002d3e8,0xc001a98f
c001b4c8:	c7 05 ec d3 02 c0 05 a6 01 c0 	mov    DWORD PTR ds:0xc002d3ec,0xc001a605
c001b4d2:	c7 05 f0 d3 02 c0 a5 ac 01 c0 	mov    DWORD PTR ds:0xc002d3f0,0xc001aca5
c001b4dc:	c7 05 f4 d3 02 c0 bf ac 01 c0 	mov    DWORD PTR ds:0xc002d3f4,0xc001acbf
c001b4e6:	c7 05 f8 d3 02 c0 bf ac 01 c0 	mov    DWORD PTR ds:0xc002d3f8,0xc001acbf
c001b4f0:	c7 05 fc d3 02 c0 00 ad 01 c0 	mov    DWORD PTR ds:0xc002d3fc,0xc001ad00
c001b4fa:	c7 05 00 d4 02 c0 64 ad 01 c0 	mov    DWORD PTR ds:0xc002d400,0xc001ad64
c001b504:	c7 05 04 d4 02 c0 0f a6 01 c0 	mov    DWORD PTR ds:0xc002d404,0xc001a60f
c001b50e:	c7 05 08 d4 02 c0 c8 ad 01 c0 	mov    DWORD PTR ds:0xc002d408,0xc001adc8
c001b518:	c7 05 0c d4 02 c0 7e a7 01 c0 	mov    DWORD PTR ds:0xc002d40c,0xc001a77e
c001b522:	c7 05 10 d4 02 c0 14 ae 01 c0 	mov    DWORD PTR ds:0xc002d410,0xc001ae14
c001b52c:	c7 05 14 d4 02 c0 4f a8 01 c0 	mov    DWORD PTR ds:0xc002d414,0xc001a84f
c001b536:	c7 05 18 d4 02 c0 97 ae 01 c0 	mov    DWORD PTR ds:0xc002d418,0xc001ae97
c001b540:	c7 05 1c d4 02 c0 12 aa 01 c0 	mov    DWORD PTR ds:0xc002d41c,0xc001aa12
c001b54a:	c7 05 20 d4 02 c0 be ae 01 c0 	mov    DWORD PTR ds:0xc002d420,0xc001aebe
c001b554:	c7 05 24 d4 02 c0 16 af 01 c0 	mov    DWORD PTR ds:0xc002d424,0xc001af16
c001b55e:	c7 05 28 d4 02 c0 c3 af 01 c0 	mov    DWORD PTR ds:0xc002d428,0xc001afc3
c001b568:	c7 05 2c d4 02 c0 1f a6 01 c0 	mov    DWORD PTR ds:0xc002d42c,0xc001a61f
c001b572:	c7 05 30 d4 02 c0 89 a6 01 c0 	mov    DWORD PTR ds:0xc002d430,0xc001a689
c001b57c:	c7 05 34 d4 02 c0 cf a6 01 c0 	mov    DWORD PTR ds:0xc002d434,0xc001a6cf
c001b586:	c7 05 38 d4 02 c0 e2 b0 01 c0 	mov    DWORD PTR ds:0xc002d438,0xc001b0e2
c001b590:	c7 05 3c d4 02 c0 da ac 01 c0 	mov    DWORD PTR ds:0xc002d43c,0xc001acda
c001b59a:	c7 05 40 d4 02 c0 20 a7 01 c0 	mov    DWORD PTR ds:0xc002d440,0xc001a720
c001b5a4:	c7 05 44 d4 02 c0 54 b1 01 c0 	mov    DWORD PTR ds:0xc002d444,0xc001b154
c001b5ae:	c7 05 48 d4 02 c0 99 b1 01 c0 	mov    DWORD PTR ds:0xc002d448,0xc001b199
c001b5b8:	c7 05 4c d4 02 c0 d7 a3 01 c0 	mov    DWORD PTR ds:0xc002d44c,0xc001a3d7
c001b5c2:	c3                   	ret    

c001b5c3 <systemCall(regs*, void*)>:
c001b5c3:	53                   	push   ebx
c001b5c4:	83 ec 08             	sub    esp,0x8
c001b5c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5cb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001b5ce:	83 f8 7f             	cmp    eax,0x7f
c001b5d1:	77 16                	ja     c001b5e9 <systemCall(regs*, void*)+0x26>
c001b5d3:	8b 14 85 a0 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2c60]
c001b5da:	85 d2                	test   edx,edx
c001b5dc:	74 0b                	je     c001b5e9 <systemCall(regs*, void*)+0x26>
c001b5de:	83 ec 0c             	sub    esp,0xc
c001b5e1:	53                   	push   ebx
c001b5e2:	ff d2                	call   edx
c001b5e4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001b5e7:	eb 0d                	jmp    c001b5f6 <systemCall(regs*, void*)+0x33>
c001b5e9:	52                   	push   edx
c001b5ea:	52                   	push   edx
c001b5eb:	50                   	push   eax
c001b5ec:	68 a5 a4 02 c0       	push   0xc002a4a5
c001b5f1:	e8 8f 70 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001b5f6:	83 c4 10             	add    esp,0x10
c001b5f9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b5fe:	31 d2                	xor    edx,edx
c001b600:	83 c4 08             	add    esp,0x8
c001b603:	5b                   	pop    ebx
c001b604:	c3                   	ret    

c001b605 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001b605:	55                   	push   ebp
c001b606:	89 e5                	mov    ebp,esp
c001b608:	57                   	push   edi
c001b609:	56                   	push   esi
c001b60a:	53                   	push   ebx
c001b60b:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001b611:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001b614:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001b617:	85 c0                	test   eax,eax
c001b619:	0f 95 c1             	setne  cl
c001b61c:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001b620:	0f 94 c2             	sete   dl
c001b623:	84 d1                	test   cl,dl
c001b625:	74 26                	je     c001b64d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b627:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001b62e:	74 1d                	je     c001b64d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b630:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001b633:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001b639:	89 d6                	mov    esi,edx
c001b63b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001b641:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001b647:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001b64a:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001b64d:	83 ec 0c             	sub    esp,0xc
c001b650:	05 ff 0f 00 00       	add    eax,0xfff
c001b655:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001b658:	6a 01                	push   0x1
c001b65a:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001b660:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001b666:	e8 2a 60 ff ff       	call   c0011695 <Virt::allocateKernelVirtualPages(int)>
c001b66b:	83 c4 10             	add    esp,0x10
c001b66e:	89 c6                	mov    esi,eax
c001b670:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001b676:	0f 86 21 01 00 00    	jbe    c001b79d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001b67c:	c1 eb 0c             	shr    ebx,0xc
c001b67f:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001b689:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001b68f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b692:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b695:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001b69b:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001b69e:	29 d8                	sub    eax,ebx
c001b6a0:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001b6a6:	0f 83 f4 00 00 00    	jae    c001b7a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001b6ac:	83 ec 0c             	sub    esp,0xc
c001b6af:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001b6b5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001b6b8:	3d 00 10 00 00       	cmp    eax,0x1000
c001b6bd:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001b6bf:	52                   	push   edx
c001b6c0:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001b6c6:	52                   	push   edx
c001b6c7:	76 05                	jbe    c001b6ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001b6c9:	b8 00 10 00 00       	mov    eax,0x1000
c001b6ce:	31 d2                	xor    edx,edx
c001b6d0:	52                   	push   edx
c001b6d1:	50                   	push   eax
c001b6d2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001b6d5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b6d8:	83 c4 20             	add    esp,0x20
c001b6db:	85 c0                	test   eax,eax
c001b6dd:	74 1f                	je     c001b6fe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001b6df:	51                   	push   ecx
c001b6e0:	51                   	push   ecx
c001b6e1:	50                   	push   eax
c001b6e2:	68 b9 a4 02 c0       	push   0xc002a4b9
c001b6e7:	e8 99 6f ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001b6ec:	89 34 24             	mov    DWORD PTR [esp],esi
c001b6ef:	e8 05 63 ff ff       	call   c00119f9 <Virt::freeKernelVirtualPages(unsigned long)>
c001b6f4:	83 c4 10             	add    esp,0x10
c001b6f7:	31 c0                	xor    eax,eax
c001b6f9:	e9 7c 01 00 00       	jmp    c001b87a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001b6fe:	e8 2b 15 00 00       	call   c001cc2e <lockScheduler()>
c001b703:	e8 a4 42 ff ff       	call   c000f9ac <Phys::allocatePage()>
c001b708:	6a 07                	push   0x7
c001b70a:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001b710:	56                   	push   esi
c001b711:	50                   	push   eax
c001b712:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b718:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b71b:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b721:	e8 3a 66 ff ff       	call   c0011d60 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b726:	83 c4 0c             	add    esp,0xc
c001b729:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b72f:	6a 00                	push   0x0
c001b731:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b737:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b73a:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b740:	e8 85 64 ff ff       	call   c0011bca <VAS::mapOtherVASIn(bool, VAS*)>
c001b745:	58                   	pop    eax
c001b746:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001b74c:	5a                   	pop    edx
c001b74d:	68 07 04 00 00       	push   0x407
c001b752:	53                   	push   ebx
c001b753:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b759:	50                   	push   eax
c001b75a:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b760:	6a 00                	push   0x0
c001b762:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b767:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b76a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b770:	e8 a5 69 ff ff       	call   c001211a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b775:	83 c4 1c             	add    esp,0x1c
c001b778:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001b77e:	68 00 10 00 00       	push   0x1000
c001b783:	50                   	push   eax
c001b784:	56                   	push   esi
c001b785:	e8 cb 4e fe ff       	call   c0000655 <memcpy>
c001b78a:	e8 a1 14 00 00       	call   c001cc30 <unlockScheduler()>
c001b78f:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001b795:	83 c4 10             	add    esp,0x10
c001b798:	e9 f5 fe ff ff       	jmp    c001b692 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001b79d:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b7a0:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001b7aa:	0f 86 bc 00 00 00    	jbe    c001b86c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001b7b0:	e8 79 14 00 00       	call   c001cc2e <lockScheduler()>
c001b7b5:	51                   	push   ecx
c001b7b6:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b7bc:	6a 00                	push   0x0
c001b7be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7c6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b7cc:	e8 f9 63 ff ff       	call   c0011bca <VAS::mapOtherVASIn(bool, VAS*)>
c001b7d1:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001b7d7:	83 c4 10             	add    esp,0x10
c001b7da:	c1 e8 0c             	shr    eax,0xc
c001b7dd:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001b7e7:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001b7ed:	e8 ba 41 ff ff       	call   c000f9ac <Phys::allocatePage()>
c001b7f2:	6a 07                	push   0x7
c001b7f4:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001b7fa:	56                   	push   esi
c001b7fb:	50                   	push   eax
c001b7fc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b802:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b805:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001b80b:	e8 50 65 ff ff       	call   c0011d60 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b810:	58                   	pop    eax
c001b811:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001b817:	5a                   	pop    edx
c001b818:	68 07 04 00 00       	push   0x407
c001b81d:	53                   	push   ebx
c001b81e:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b824:	50                   	push   eax
c001b825:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b82b:	6a 00                	push   0x0
c001b82d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b832:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b835:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b83b:	e8 da 68 ff ff       	call   c001211a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b840:	83 c4 1c             	add    esp,0x1c
c001b843:	68 00 10 00 00       	push   0x1000
c001b848:	6a 00                	push   0x0
c001b84a:	56                   	push   esi
c001b84b:	e8 3b 4e fe ff       	call   c000068b <memset>
c001b850:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001b856:	83 c4 10             	add    esp,0x10
c001b859:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001b85f:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001b865:	77 86                	ja     c001b7ed <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001b867:	e8 c4 13 00 00       	call   c001cc30 <unlockScheduler()>
c001b86c:	83 ec 0c             	sub    esp,0xc
c001b86f:	56                   	push   esi
c001b870:	e8 84 61 ff ff       	call   c00119f9 <Virt::freeKernelVirtualPages(unsigned long)>
c001b875:	83 c4 10             	add    esp,0x10
c001b878:	b0 01                	mov    al,0x1
c001b87a:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b87d:	5b                   	pop    ebx
c001b87e:	5e                   	pop    esi
c001b87f:	5f                   	pop    edi
c001b880:	5d                   	pop    ebp
c001b881:	c3                   	ret    

c001b882 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001b882:	55                   	push   ebp
c001b883:	57                   	push   edi
c001b884:	56                   	push   esi
c001b885:	53                   	push   ebx
c001b886:	83 ec 48             	sub    esp,0x48
c001b889:	68 14 01 00 00       	push   0x114
c001b88e:	e8 41 3c ff ff       	call   c000f4d4 <malloc>
c001b893:	83 c4 0c             	add    esp,0xc
c001b896:	89 c6                	mov    esi,eax
c001b898:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001b89c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b8a0:	50                   	push   eax
c001b8a1:	e8 0e 73 ff ff       	call   c0012bb4 <File::File(char const*, Process*)>
c001b8a6:	58                   	pop    eax
c001b8a7:	5a                   	pop    edx
c001b8a8:	6a 01                	push   0x1
c001b8aa:	56                   	push   esi
c001b8ab:	e8 68 73 ff ff       	call   c0012c18 <File::open(FileOpenMode)>
c001b8b0:	83 c4 10             	add    esp,0x10
c001b8b3:	85 c0                	test   eax,eax
c001b8b5:	0f 85 47 01 00 00    	jne    c001ba02 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b8bb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b8c3:	83 ec 0c             	sub    esp,0xc
c001b8c6:	6a 34                	push   0x34
c001b8c8:	e8 07 3c ff ff       	call   c000f4d4 <malloc>
c001b8cd:	89 c3                	mov    ebx,eax
c001b8cf:	58                   	pop    eax
c001b8d0:	8b 06                	mov    eax,DWORD PTR [esi]
c001b8d2:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001b8d6:	57                   	push   edi
c001b8d7:	53                   	push   ebx
c001b8d8:	6a 00                	push   0x0
c001b8da:	6a 34                	push   0x34
c001b8dc:	56                   	push   esi
c001b8dd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b8e0:	83 c4 20             	add    esp,0x20
c001b8e3:	85 c0                	test   eax,eax
c001b8e5:	0f 85 17 01 00 00    	jne    c001ba02 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b8eb:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001b8f1:	0f 85 0b 01 00 00    	jne    c001ba02 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b8f7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8fa:	85 c0                	test   eax,eax
c001b8fc:	0f 84 00 01 00 00    	je     c001ba02 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b902:	31 d2                	xor    edx,edx
c001b904:	55                   	push   ebp
c001b905:	52                   	push   edx
c001b906:	50                   	push   eax
c001b907:	56                   	push   esi
c001b908:	e8 c9 73 ff ff       	call   c0012cd6 <File::seek(unsigned long long)>
c001b90d:	83 c4 10             	add    esp,0x10
c001b910:	85 c0                	test   eax,eax
c001b912:	0f 85 ea 00 00 00    	jne    c001ba02 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b918:	83 ec 0c             	sub    esp,0xc
c001b91b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001b91e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001b922:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b926:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001b92a:	0f af c2             	imul   eax,edx
c001b92d:	50                   	push   eax
c001b92e:	e8 a1 3b ff ff       	call   c000f4d4 <malloc>
c001b933:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001b935:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b939:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b93c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b940:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001b944:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001b948:	0f af c2             	imul   eax,edx
c001b94b:	99                   	cdq    
c001b94c:	52                   	push   edx
c001b94d:	50                   	push   eax
c001b94e:	56                   	push   esi
c001b94f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b952:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001b955:	83 c4 20             	add    esp,0x20
c001b958:	85 c0                	test   eax,eax
c001b95a:	0f 84 a2 00 00 00    	je     c001ba02 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b960:	31 d2                	xor    edx,edx
c001b962:	51                   	push   ecx
c001b963:	52                   	push   edx
c001b964:	50                   	push   eax
c001b965:	56                   	push   esi
c001b966:	e8 6b 73 ff ff       	call   c0012cd6 <File::seek(unsigned long long)>
c001b96b:	83 c4 10             	add    esp,0x10
c001b96e:	85 c0                	test   eax,eax
c001b970:	0f 85 8c 00 00 00    	jne    c001ba02 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b976:	83 ec 0c             	sub    esp,0xc
c001b979:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001b97d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001b981:	31 ed                	xor    ebp,ebp
c001b983:	0f af c2             	imul   eax,edx
c001b986:	50                   	push   eax
c001b987:	e8 48 3b ff ff       	call   c000f4d4 <malloc>
c001b98c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001b98e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b992:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b995:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b999:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001b99d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001b9a1:	0f af c2             	imul   eax,edx
c001b9a4:	99                   	cdq    
c001b9a5:	52                   	push   edx
c001b9a6:	50                   	push   eax
c001b9a7:	56                   	push   esi
c001b9a8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b9ab:	83 c4 20             	add    esp,0x20
c001b9ae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b9b6:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001b9ba:	0f 86 80 00 00 00    	jbe    c001ba40 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001b9c0:	0f b7 fd             	movzx  edi,bp
c001b9c3:	c1 e7 05             	shl    edi,0x5
c001b9c6:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001b9ca:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001b9cd:	75 6b                	jne    c001ba3a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001b9cf:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001b9d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b9d6:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001b9d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b9dd:	52                   	push   edx
c001b9de:	31 d2                	xor    edx,edx
c001b9e0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001b9e3:	52                   	push   edx
c001b9e4:	50                   	push   eax
c001b9e5:	56                   	push   esi
c001b9e6:	e8 eb 72 ff ff       	call   c0012cd6 <File::seek(unsigned long long)>
c001b9eb:	83 c4 10             	add    esp,0x10
c001b9ee:	85 c0                	test   eax,eax
c001b9f0:	74 17                	je     c001ba09 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001b9f2:	83 ec 0c             	sub    esp,0xc
c001b9f5:	68 e4 a4 02 c0       	push   0xc002a4e4
c001b9fa:	e8 86 6c ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001b9ff:	83 c4 10             	add    esp,0x10
c001ba02:	31 c0                	xor    eax,eax
c001ba04:	e9 87 00 00 00       	jmp    c001ba90 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001ba09:	83 ec 0c             	sub    esp,0xc
c001ba0c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ba0f:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ba12:	50                   	push   eax
c001ba13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ba17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ba1b:	56                   	push   esi
c001ba1c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ba20:	e8 e0 fb ff ff       	call   c001b605 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001ba25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ba29:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ba2d:	83 c4 20             	add    esp,0x20
c001ba30:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ba34:	73 04                	jae    c001ba3a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ba36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ba3a:	45                   	inc    ebp
c001ba3b:	e9 76 ff ff ff       	jmp    c001b9b6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ba40:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ba44:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ba48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba4c:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001ba52:	83 ec 0c             	sub    esp,0xc
c001ba55:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001ba5b:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ba60:	05 00 10 00 00       	add    eax,0x1000
c001ba65:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ba68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba6c:	e8 73 3a ff ff       	call   c000f4e4 <free>
c001ba71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba74:	e8 6b 3a ff ff       	call   c000f4e4 <free>
c001ba79:	58                   	pop    eax
c001ba7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ba7e:	e8 61 3a ff ff       	call   c000f4e4 <free>
c001ba83:	89 34 24             	mov    DWORD PTR [esp],esi
c001ba86:	e8 eb 71 ff ff       	call   c0012c76 <File::close()>
c001ba8b:	83 c4 10             	add    esp,0x10
c001ba8e:	b0 01                	mov    al,0x1
c001ba90:	83 c4 3c             	add    esp,0x3c
c001ba93:	5b                   	pop    ebx
c001ba94:	5e                   	pop    esi
c001ba95:	5f                   	pop    edi
c001ba96:	5d                   	pop    ebp
c001ba97:	c3                   	ret    

c001ba98 <Thr::runtimeReferenceHelper()>:
c001ba98:	83 ec 18             	sub    esp,0x18
c001ba9b:	68 ec a4 02 c0       	push   0xc002a4ec
c001baa0:	e8 e0 6b ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001baa5:	fa                   	cli    
c001baa6:	83 c4 10             	add    esp,0x10
c001baa9:	eb fe                	jmp    c001baa9 <Thr::runtimeReferenceHelper()+0x11>

c001baab <Thr::getAddressOfKernelSymbol(char const*)>:
c001baab:	57                   	push   edi
c001baac:	56                   	push   esi
c001baad:	53                   	push   ebx
c001baae:	31 db                	xor    ebx,ebx
c001bab0:	39 1d 40 dd 02 c0    	cmp    DWORD PTR ds:0xc002dd40,ebx
c001bab6:	7e 3c                	jle    c001baf4 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001bab8:	8b 34 9d c0 dc 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2340]
c001babf:	31 ff                	xor    edi,edi
c001bac1:	39 3c 9d c0 db 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2440],edi
c001bac8:	7e 27                	jle    c001baf1 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001baca:	50                   	push   eax
c001bacb:	50                   	push   eax
c001bacc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bad0:	8b 06                	mov    eax,DWORD PTR [esi]
c001bad2:	03 04 9d 40 dc 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd23c0]
c001bad9:	50                   	push   eax
c001bada:	e8 9c 4c fe ff       	call   c000077b <strcmp>
c001badf:	83 c4 10             	add    esp,0x10
c001bae2:	85 c0                	test   eax,eax
c001bae4:	75 05                	jne    c001baeb <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001bae6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001bae9:	eb 0b                	jmp    c001baf6 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001baeb:	83 c6 10             	add    esi,0x10
c001baee:	47                   	inc    edi
c001baef:	eb d0                	jmp    c001bac1 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001baf1:	43                   	inc    ebx
c001baf2:	eb bc                	jmp    c001bab0 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001baf4:	31 c0                	xor    eax,eax
c001baf6:	5b                   	pop    ebx
c001baf7:	5e                   	pop    esi
c001baf8:	5f                   	pop    edi
c001baf9:	c3                   	ret    

c001bafa <Thr::loadKernelSymbolTable(char const*)>:
c001bafa:	55                   	push   ebp
c001bafb:	57                   	push   edi
c001bafc:	56                   	push   esi
c001bafd:	53                   	push   ebx
c001bafe:	83 ec 68             	sub    esp,0x68
c001bb01:	8b 35 94 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd94
c001bb07:	68 14 01 00 00       	push   0x114
c001bb0c:	e8 c3 39 ff ff       	call   c000f4d4 <malloc>
c001bb11:	83 c4 0c             	add    esp,0xc
c001bb14:	89 c3                	mov    ebx,eax
c001bb16:	56                   	push   esi
c001bb17:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001bb1b:	50                   	push   eax
c001bb1c:	e8 93 70 ff ff       	call   c0012bb4 <File::File(char const*, Process*)>
c001bb21:	5e                   	pop    esi
c001bb22:	5f                   	pop    edi
c001bb23:	6a 01                	push   0x1
c001bb25:	53                   	push   ebx
c001bb26:	e8 ed 70 ff ff       	call   c0012c18 <File::open(FileOpenMode)>
c001bb2b:	83 c4 10             	add    esp,0x10
c001bb2e:	31 d2                	xor    edx,edx
c001bb30:	85 c0                	test   eax,eax
c001bb32:	0f 85 74 02 00 00    	jne    c001bdac <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bb38:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001bb40:	83 ec 0c             	sub    esp,0xc
c001bb43:	6a 34                	push   0x34
c001bb45:	e8 8a 39 ff ff       	call   c000f4d4 <malloc>
c001bb4a:	59                   	pop    ecx
c001bb4b:	89 c7                	mov    edi,eax
c001bb4d:	8d 74 24 34          	lea    esi,[esp+0x34]
c001bb51:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb53:	56                   	push   esi
c001bb54:	57                   	push   edi
c001bb55:	6a 00                	push   0x0
c001bb57:	6a 34                	push   0x34
c001bb59:	53                   	push   ebx
c001bb5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bb5d:	83 c4 20             	add    esp,0x20
c001bb60:	85 c0                	test   eax,eax
c001bb62:	74 17                	je     c001bb7b <Thr::loadKernelSymbolTable(char const*)+0x81>
c001bb64:	83 ec 0c             	sub    esp,0xc
c001bb67:	68 0e a5 02 c0       	push   0xc002a50e
c001bb6c:	e8 2e dc ff ff       	call   c001979f <Krnl::panic(char const*)>
c001bb71:	83 c4 10             	add    esp,0x10
c001bb74:	31 d2                	xor    edx,edx
c001bb76:	e9 31 02 00 00       	jmp    c001bdac <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bb7b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001bb81:	75 e1                	jne    c001bb64 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bb83:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001bb86:	85 c0                	test   eax,eax
c001bb88:	74 da                	je     c001bb64 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bb8a:	52                   	push   edx
c001bb8b:	31 d2                	xor    edx,edx
c001bb8d:	52                   	push   edx
c001bb8e:	50                   	push   eax
c001bb8f:	53                   	push   ebx
c001bb90:	e8 41 71 ff ff       	call   c0012cd6 <File::seek(unsigned long long)>
c001bb95:	83 c4 10             	add    esp,0x10
c001bb98:	85 c0                	test   eax,eax
c001bb9a:	75 c8                	jne    c001bb64 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bb9c:	83 ec 0c             	sub    esp,0xc
c001bb9f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bba3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bba7:	31 ed                	xor    ebp,ebp
c001bba9:	0f af c2             	imul   eax,edx
c001bbac:	50                   	push   eax
c001bbad:	e8 22 39 ff ff       	call   c000f4d4 <malloc>
c001bbb2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001bbb4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bbb8:	89 34 24             	mov    DWORD PTR [esp],esi
c001bbbb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bbbf:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bbc3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bbc7:	0f af c2             	imul   eax,edx
c001bbca:	99                   	cdq    
c001bbcb:	52                   	push   edx
c001bbcc:	50                   	push   eax
c001bbcd:	53                   	push   ebx
c001bbce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bbd1:	83 c4 20             	add    esp,0x20
c001bbd4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001bbdc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bbe4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bbec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bbf4:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001bbf8:	0f 86 aa 00 00 00    	jbe    c001bca8 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001bbfe:	0f b7 f5             	movzx  esi,bp
c001bc01:	6b f6 28             	imul   esi,esi,0x28
c001bc04:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001bc08:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001bc0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bc0f:	50                   	push   eax
c001bc10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bc14:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001bc18:	8b 16                	mov    edx,DWORD PTR [esi]
c001bc1a:	6b c0 28             	imul   eax,eax,0x28
c001bc1d:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001bc21:	89 d0                	mov    eax,edx
c001bc23:	31 d2                	xor    edx,edx
c001bc25:	52                   	push   edx
c001bc26:	50                   	push   eax
c001bc27:	53                   	push   ebx
c001bc28:	e8 a9 70 ff ff       	call   c0012cd6 <File::seek(unsigned long long)>
c001bc2d:	83 c4 0c             	add    esp,0xc
c001bc30:	6a 20                	push   0x20
c001bc32:	6a 00                	push   0x0
c001bc34:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bc38:	52                   	push   edx
c001bc39:	e8 4d 4a fe ff       	call   c000068b <memset>
c001bc3e:	58                   	pop    eax
c001bc3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc41:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001bc45:	51                   	push   ecx
c001bc46:	8d 54 24 40          	lea    edx,[esp+0x40]
c001bc4a:	52                   	push   edx
c001bc4b:	6a 00                	push   0x0
c001bc4d:	6a 1f                	push   0x1f
c001bc4f:	53                   	push   ebx
c001bc50:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bc53:	83 c4 18             	add    esp,0x18
c001bc56:	68 25 a5 02 c0       	push   0xc002a525
c001bc5b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bc5f:	52                   	push   edx
c001bc60:	e8 16 4b fe ff       	call   c000077b <strcmp>
c001bc65:	83 c4 10             	add    esp,0x10
c001bc68:	85 c0                	test   eax,eax
c001bc6a:	75 0f                	jne    c001bc7b <Thr::loadKernelSymbolTable(char const*)+0x181>
c001bc6c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bc6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bc73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc7b:	50                   	push   eax
c001bc7c:	50                   	push   eax
c001bc7d:	68 2d a5 02 c0       	push   0xc002a52d
c001bc82:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001bc86:	50                   	push   eax
c001bc87:	e8 ef 4a fe ff       	call   c000077b <strcmp>
c001bc8c:	83 c4 10             	add    esp,0x10
c001bc8f:	85 c0                	test   eax,eax
c001bc91:	75 0f                	jne    c001bca2 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001bc93:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bc96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bc9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bca2:	45                   	inc    ebp
c001bca3:	e9 4c ff ff ff       	jmp    c001bbf4 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001bca8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bcad:	75 10                	jne    c001bcbf <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001bcaf:	83 ec 0c             	sub    esp,0xc
c001bcb2:	68 35 a5 02 c0       	push   0xc002a535
c001bcb7:	e8 e3 da ff ff       	call   c001979f <Krnl::panic(char const*)>
c001bcbc:	83 c4 10             	add    esp,0x10
c001bcbf:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001bcc4:	75 10                	jne    c001bcd6 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001bcc6:	83 ec 0c             	sub    esp,0xc
c001bcc9:	68 35 a5 02 c0       	push   0xc002a535
c001bcce:	e8 cc da ff ff       	call   c001979f <Krnl::panic(char const*)>
c001bcd3:	83 c4 10             	add    esp,0x10
c001bcd6:	31 d2                	xor    edx,edx
c001bcd8:	50                   	push   eax
c001bcd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcdd:	52                   	push   edx
c001bcde:	50                   	push   eax
c001bcdf:	53                   	push   ebx
c001bce0:	e8 f1 6f ff ff       	call   c0012cd6 <File::seek(unsigned long long)>
c001bce5:	5a                   	pop    edx
c001bce6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bcea:	e8 e5 37 ff ff       	call   c000f4d4 <malloc>
c001bcef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bcf3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bcf7:	31 c9                	xor    ecx,ecx
c001bcf9:	5e                   	pop    esi
c001bcfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bcfc:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001bd00:	55                   	push   ebp
c001bd01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bd05:	51                   	push   ecx
c001bd06:	52                   	push   edx
c001bd07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001bd0b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001bd0f:	53                   	push   ebx
c001bd10:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bd13:	83 c4 14             	add    esp,0x14
c001bd16:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bd1a:	e8 b5 37 ff ff       	call   c000f4d4 <malloc>
c001bd1f:	89 c6                	mov    esi,eax
c001bd21:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd23:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bd26:	56                   	push   esi
c001bd27:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bd2b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bd2f:	51                   	push   ecx
c001bd30:	52                   	push   edx
c001bd31:	53                   	push   ebx
c001bd32:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bd35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bd39:	8b 15 40 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd40
c001bd3f:	83 c4 1c             	add    esp,0x1c
c001bd42:	c1 e8 04             	shr    eax,0x4
c001bd45:	89 04 95 c0 db 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2440],eax
c001bd4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd50:	31 d2                	xor    edx,edx
c001bd52:	52                   	push   edx
c001bd53:	50                   	push   eax
c001bd54:	53                   	push   ebx
c001bd55:	e8 7c 6f ff ff       	call   c0012cd6 <File::seek(unsigned long long)>
c001bd5a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001bd5c:	31 d2                	xor    edx,edx
c001bd5e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bd61:	56                   	push   esi
c001bd62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bd66:	52                   	push   edx
c001bd67:	50                   	push   eax
c001bd68:	53                   	push   ebx
c001bd69:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bd6c:	83 c4 14             	add    esp,0x14
c001bd6f:	53                   	push   ebx
c001bd70:	e8 01 6f ff ff       	call   c0012c76 <File::close()>
c001bd75:	5d                   	pop    ebp
c001bd76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bd7a:	e8 65 37 ff ff       	call   c000f4e4 <free>
c001bd7f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bd82:	e8 5d 37 ff ff       	call   c000f4e4 <free>
c001bd87:	a1 40 dd 02 c0       	mov    eax,ds:0xc002dd40
c001bd8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bd90:	8d 50 01             	lea    edx,[eax+0x1]
c001bd93:	89 0c 85 c0 dc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2340],ecx
c001bd9a:	89 15 40 dd 02 c0    	mov    DWORD PTR ds:0xc002dd40,edx
c001bda0:	89 34 85 40 dc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd23c0],esi
c001bda7:	83 c4 10             	add    esp,0x10
c001bdaa:	b2 01                	mov    dl,0x1
c001bdac:	83 c4 5c             	add    esp,0x5c
c001bdaf:	88 d0                	mov    al,dl
c001bdb1:	5b                   	pop    ebx
c001bdb2:	5e                   	pop    esi
c001bdb3:	5f                   	pop    edi
c001bdb4:	5d                   	pop    ebp
c001bdb5:	c3                   	ret    

c001bdb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001bdb6:	55                   	push   ebp
c001bdb7:	57                   	push   edi
c001bdb8:	56                   	push   esi
c001bdb9:	53                   	push   ebx
c001bdba:	81 ec 68 03 00 00    	sub    esp,0x368
c001bdc0:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001bdc7:	8b 1d 94 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd94
c001bdcd:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001bdd1:	68 14 01 00 00       	push   0x114
c001bdd6:	e8 f9 36 ff ff       	call   c000f4d4 <malloc>
c001bddb:	83 c4 0c             	add    esp,0xc
c001bdde:	89 c5                	mov    ebp,eax
c001bde0:	53                   	push   ebx
c001bde1:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001bde8:	50                   	push   eax
c001bde9:	e8 c6 6d ff ff       	call   c0012bb4 <File::File(char const*, Process*)>
c001bdee:	58                   	pop    eax
c001bdef:	5a                   	pop    edx
c001bdf0:	6a 01                	push   0x1
c001bdf2:	55                   	push   ebp
c001bdf3:	e8 20 6e ff ff       	call   c0012c18 <File::open(FileOpenMode)>
c001bdf8:	83 c4 10             	add    esp,0x10
c001bdfb:	85 c0                	test   eax,eax
c001bdfd:	0f 85 f2 06 00 00    	jne    c001c4f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001be03:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001be0b:	83 ec 0c             	sub    esp,0xc
c001be0e:	6a 34                	push   0x34
c001be10:	e8 bf 36 ff ff       	call   c000f4d4 <malloc>
c001be15:	89 c7                	mov    edi,eax
c001be17:	58                   	pop    eax
c001be18:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001be1b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001be1f:	53                   	push   ebx
c001be20:	57                   	push   edi
c001be21:	6a 00                	push   0x0
c001be23:	6a 34                	push   0x34
c001be25:	55                   	push   ebp
c001be26:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001be29:	83 c4 20             	add    esp,0x20
c001be2c:	85 c0                	test   eax,eax
c001be2e:	0f 85 c1 06 00 00    	jne    c001c4f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001be34:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001be3a:	0f 85 b5 06 00 00    	jne    c001c4f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001be40:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001be43:	85 c0                	test   eax,eax
c001be45:	0f 84 aa 06 00 00    	je     c001c4f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001be4b:	31 d2                	xor    edx,edx
c001be4d:	56                   	push   esi
c001be4e:	52                   	push   edx
c001be4f:	50                   	push   eax
c001be50:	55                   	push   ebp
c001be51:	e8 80 6e ff ff       	call   c0012cd6 <File::seek(unsigned long long)>
c001be56:	83 c4 10             	add    esp,0x10
c001be59:	85 c0                	test   eax,eax
c001be5b:	0f 85 94 06 00 00    	jne    c001c4f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001be61:	83 ec 0c             	sub    esp,0xc
c001be64:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001be67:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001be6b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001be6f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001be73:	0f af c2             	imul   eax,edx
c001be76:	50                   	push   eax
c001be77:	e8 58 36 ff ff       	call   c000f4d4 <malloc>
c001be7c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001be7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001be83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be8a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001be8e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001be92:	0f af c2             	imul   eax,edx
c001be95:	99                   	cdq    
c001be96:	52                   	push   edx
c001be97:	50                   	push   eax
c001be98:	55                   	push   ebp
c001be99:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001be9c:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001be9f:	83 c4 20             	add    esp,0x20
c001bea2:	85 c0                	test   eax,eax
c001bea4:	0f 84 4b 06 00 00    	je     c001c4f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001beaa:	31 d2                	xor    edx,edx
c001beac:	51                   	push   ecx
c001bead:	52                   	push   edx
c001beae:	50                   	push   eax
c001beaf:	55                   	push   ebp
c001beb0:	e8 21 6e ff ff       	call   c0012cd6 <File::seek(unsigned long long)>
c001beb5:	83 c4 10             	add    esp,0x10
c001beb8:	85 c0                	test   eax,eax
c001beba:	0f 85 35 06 00 00    	jne    c001c4f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bec0:	83 ec 0c             	sub    esp,0xc
c001bec3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001bec7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001becb:	31 f6                	xor    esi,esi
c001becd:	0f af c2             	imul   eax,edx
c001bed0:	50                   	push   eax
c001bed1:	e8 fe 35 ff ff       	call   c000f4d4 <malloc>
c001bed6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001bed9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001bedd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bee0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bee4:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001bee8:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001beec:	0f af c2             	imul   eax,edx
c001beef:	99                   	cdq    
c001bef0:	52                   	push   edx
c001bef1:	50                   	push   eax
c001bef2:	55                   	push   ebp
c001bef3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bef6:	83 c4 20             	add    esp,0x20
c001bef9:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001befd:	0f 86 8a 00 00 00    	jbe    c001bf8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001bf03:	0f b7 de             	movzx  ebx,si
c001bf06:	c1 e3 05             	shl    ebx,0x5
c001bf09:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001bf0d:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001bf10:	75 75                	jne    c001bf87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001bf12:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001bf15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf19:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bf1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bf20:	52                   	push   edx
c001bf21:	31 d2                	xor    edx,edx
c001bf23:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001bf26:	52                   	push   edx
c001bf27:	50                   	push   eax
c001bf28:	55                   	push   ebp
c001bf29:	e8 a8 6d ff ff       	call   c0012cd6 <File::seek(unsigned long long)>
c001bf2e:	83 c4 10             	add    esp,0x10
c001bf31:	85 c0                	test   eax,eax
c001bf33:	0f 85 bc 05 00 00    	jne    c001c4f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf39:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001bf40:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001bf43:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001bf47:	31 d2                	xor    edx,edx
c001bf49:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001bf4d:	83 ec 0c             	sub    esp,0xc
c001bf50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bf54:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001bf5b:	50                   	push   eax
c001bf5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bf60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bf64:	52                   	push   edx
c001bf65:	50                   	push   eax
c001bf66:	55                   	push   ebp
c001bf67:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bf6a:	83 c4 1c             	add    esp,0x1c
c001bf6d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bf70:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001bf73:	50                   	push   eax
c001bf74:	6a 00                	push   0x0
c001bf76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf7a:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001bf7e:	50                   	push   eax
c001bf7f:	e8 07 47 fe ff       	call   c000068b <memset>
c001bf84:	83 c4 10             	add    esp,0x10
c001bf87:	46                   	inc    esi
c001bf88:	e9 6c ff ff ff       	jmp    c001bef9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001bf8d:	31 db                	xor    ebx,ebx
c001bf8f:	50                   	push   eax
c001bf90:	68 00 01 00 00       	push   0x100
c001bf95:	6a 00                	push   0x0
c001bf97:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001bf9b:	50                   	push   eax
c001bf9c:	e8 ea 46 fe ff       	call   c000068b <memset>
c001bfa1:	83 c4 0c             	add    esp,0xc
c001bfa4:	68 00 01 00 00       	push   0x100
c001bfa9:	6a 00                	push   0x0
c001bfab:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001bfb2:	50                   	push   eax
c001bfb3:	e8 d3 46 fe ff       	call   c000068b <memset>
c001bfb8:	83 c4 10             	add    esp,0x10
c001bfbb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bfc3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001bfcb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001bfd3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bfdb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001bfe3:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001bfe7:	0f 86 30 01 00 00    	jbe    c001c11d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001bfed:	0f b7 f3             	movzx  esi,bx
c001bff0:	6b f6 28             	imul   esi,esi,0x28
c001bff3:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001bff7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001bffa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bffe:	50                   	push   eax
c001bfff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c003:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c007:	8b 06                	mov    eax,DWORD PTR [esi]
c001c009:	6b d2 28             	imul   edx,edx,0x28
c001c00c:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c010:	31 d2                	xor    edx,edx
c001c012:	52                   	push   edx
c001c013:	50                   	push   eax
c001c014:	55                   	push   ebp
c001c015:	e8 bc 6c ff ff       	call   c0012cd6 <File::seek(unsigned long long)>
c001c01a:	83 c4 0c             	add    esp,0xc
c001c01d:	6a 20                	push   0x20
c001c01f:	6a 00                	push   0x0
c001c021:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c028:	51                   	push   ecx
c001c029:	e8 5d 46 fe ff       	call   c000068b <memset>
c001c02e:	58                   	pop    eax
c001c02f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c032:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c036:	52                   	push   edx
c001c037:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c03e:	51                   	push   ecx
c001c03f:	6a 00                	push   0x0
c001c041:	6a 1f                	push   0x1f
c001c043:	55                   	push   ebp
c001c044:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c047:	83 c4 1c             	add    esp,0x1c
c001c04a:	6a 09                	push   0x9
c001c04c:	68 4f a5 02 c0       	push   0xc002a54f
c001c051:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c058:	51                   	push   ecx
c001c059:	e8 94 45 fe ff       	call   c00005f2 <memcmp>
c001c05e:	83 c4 10             	add    esp,0x10
c001c061:	85 c0                	test   eax,eax
c001c063:	75 21                	jne    c001c086 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c065:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c069:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c06d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c071:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c075:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c078:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c07f:	89 c8                	mov    eax,ecx
c001c081:	40                   	inc    eax
c001c082:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c086:	50                   	push   eax
c001c087:	6a 09                	push   0x9
c001c089:	68 59 a5 02 c0       	push   0xc002a559
c001c08e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c095:	50                   	push   eax
c001c096:	e8 57 45 fe ff       	call   c00005f2 <memcmp>
c001c09b:	83 c4 10             	add    esp,0x10
c001c09e:	85 c0                	test   eax,eax
c001c0a0:	75 21                	jne    c001c0c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0a6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c0aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c0ae:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c0b2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c0b5:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c0bc:	89 c8                	mov    eax,ecx
c001c0be:	40                   	inc    eax
c001c0bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c0c3:	50                   	push   eax
c001c0c4:	50                   	push   eax
c001c0c5:	68 25 a5 02 c0       	push   0xc002a525
c001c0ca:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c0d1:	50                   	push   eax
c001c0d2:	e8 a4 46 fe ff       	call   c000077b <strcmp>
c001c0d7:	83 c4 10             	add    esp,0x10
c001c0da:	85 c0                	test   eax,eax
c001c0dc:	75 0f                	jne    c001c0ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c0de:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c0e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c0e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c0ed:	50                   	push   eax
c001c0ee:	50                   	push   eax
c001c0ef:	68 2d a5 02 c0       	push   0xc002a52d
c001c0f4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c0fb:	50                   	push   eax
c001c0fc:	e8 7a 46 fe ff       	call   c000077b <strcmp>
c001c101:	83 c4 10             	add    esp,0x10
c001c104:	85 c0                	test   eax,eax
c001c106:	75 0f                	jne    c001c117 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c108:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c10b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c10f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c113:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c117:	43                   	inc    ebx
c001c118:	e9 c6 fe ff ff       	jmp    c001bfe3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c11d:	31 d2                	xor    edx,edx
c001c11f:	50                   	push   eax
c001c120:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c124:	52                   	push   edx
c001c125:	50                   	push   eax
c001c126:	55                   	push   ebp
c001c127:	e8 aa 6b ff ff       	call   c0012cd6 <File::seek(unsigned long long)>
c001c12c:	5a                   	pop    edx
c001c12d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c131:	e8 9e 33 ff ff       	call   c000f4d4 <malloc>
c001c136:	31 d2                	xor    edx,edx
c001c138:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001c13c:	59                   	pop    ecx
c001c13d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c140:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c144:	53                   	push   ebx
c001c145:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c149:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c14d:	52                   	push   edx
c001c14e:	50                   	push   eax
c001c14f:	55                   	push   ebp
c001c150:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c153:	83 c4 14             	add    esp,0x14
c001c156:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c15a:	e8 75 33 ff ff       	call   c000f4d4 <malloc>
c001c15f:	31 d2                	xor    edx,edx
c001c161:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c165:	83 c4 0c             	add    esp,0xc
c001c168:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c16c:	52                   	push   edx
c001c16d:	50                   	push   eax
c001c16e:	55                   	push   ebp
c001c16f:	e8 62 6b ff ff       	call   c0012cd6 <File::seek(unsigned long long)>
c001c174:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c177:	31 d2                	xor    edx,edx
c001c179:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c17c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c180:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c184:	52                   	push   edx
c001c185:	50                   	push   eax
c001c186:	55                   	push   ebp
c001c187:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c18a:	83 c4 20             	add    esp,0x20
c001c18d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c195:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c199:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001c19d:	0f 84 56 03 00 00    	je     c001c4f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001c1a3:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001c1aa:	31 d2                	xor    edx,edx
c001c1ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c1b0:	c1 e8 03             	shr    eax,0x3
c001c1b3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001c1b7:	50                   	push   eax
c001c1b8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c1bc:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001c1c0:	52                   	push   edx
c001c1c1:	50                   	push   eax
c001c1c2:	55                   	push   ebp
c001c1c3:	e8 0e 6b ff ff       	call   c0012cd6 <File::seek(unsigned long long)>
c001c1c8:	58                   	pop    eax
c001c1c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c1cd:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001c1d4:	e8 fb 32 ff ff       	call   c000f4d4 <malloc>
c001c1d9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c1dc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c1e0:	31 d2                	xor    edx,edx
c001c1e2:	58                   	pop    eax
c001c1e3:	8d 44 24 58          	lea    eax,[esp+0x58]
c001c1e7:	50                   	push   eax
c001c1e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c1ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c1f0:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001c1f7:	52                   	push   edx
c001c1f8:	50                   	push   eax
c001c1f9:	55                   	push   ebp
c001c1fa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c1fd:	83 c4 20             	add    esp,0x20
c001c200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c208:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001c20c:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001c210:	0f 8d c7 02 00 00    	jge    c001c4dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001c216:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c21a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c21e:	31 db                	xor    ebx,ebx
c001c220:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001c223:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c227:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c22b:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001c22f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c233:	c1 e8 08             	shr    eax,0x8
c001c236:	89 c6                	mov    esi,eax
c001c238:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c23c:	c1 e6 04             	shl    esi,0x4
c001c23f:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001c243:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c246:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c24a:	85 c0                	test   eax,eax
c001c24c:	0f 85 17 01 00 00    	jne    c001c369 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c252:	83 ec 0c             	sub    esp,0xc
c001c255:	b3 01                	mov    bl,0x1
c001c257:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c25b:	03 06                	add    eax,DWORD PTR [esi]
c001c25d:	50                   	push   eax
c001c25e:	e8 48 f8 ff ff       	call   c001baab <Thr::getAddressOfKernelSymbol(char const*)>
c001c263:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c267:	83 c4 10             	add    esp,0x10
c001c26a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c26f:	0f 85 f4 00 00 00    	jne    c001c369 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c275:	50                   	push   eax
c001c276:	50                   	push   eax
c001c277:	68 63 a5 02 c0       	push   0xc002a563
c001c27c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c280:	03 06                	add    eax,DWORD PTR [esi]
c001c282:	50                   	push   eax
c001c283:	e8 f3 44 fe ff       	call   c000077b <strcmp>
c001c288:	83 c4 10             	add    esp,0x10
c001c28b:	85 c0                	test   eax,eax
c001c28d:	75 0a                	jne    c001c299 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001c28f:	b8 bc 52 02 c0       	mov    eax,0xc00252bc
c001c294:	e9 ca 00 00 00       	jmp    c001c363 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c299:	50                   	push   eax
c001c29a:	50                   	push   eax
c001c29b:	68 6d a5 02 c0       	push   0xc002a56d
c001c2a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c2a4:	03 06                	add    eax,DWORD PTR [esi]
c001c2a6:	50                   	push   eax
c001c2a7:	e8 cf 44 fe ff       	call   c000077b <strcmp>
c001c2ac:	83 c4 10             	add    esp,0x10
c001c2af:	85 c0                	test   eax,eax
c001c2b1:	75 0a                	jne    c001c2bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001c2b3:	b8 f0 4f 02 c0       	mov    eax,0xc0024ff0
c001c2b8:	e9 a6 00 00 00       	jmp    c001c363 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c2bd:	53                   	push   ebx
c001c2be:	53                   	push   ebx
c001c2bf:	68 76 a5 02 c0       	push   0xc002a576
c001c2c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c2c8:	03 06                	add    eax,DWORD PTR [esi]
c001c2ca:	50                   	push   eax
c001c2cb:	e8 ab 44 fe ff       	call   c000077b <strcmp>
c001c2d0:	83 c4 10             	add    esp,0x10
c001c2d3:	85 c0                	test   eax,eax
c001c2d5:	75 0a                	jne    c001c2e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001c2d7:	b8 bc 53 02 c0       	mov    eax,0xc00253bc
c001c2dc:	e9 82 00 00 00       	jmp    c001c363 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c2e1:	51                   	push   ecx
c001c2e2:	51                   	push   ecx
c001c2e3:	68 80 a5 02 c0       	push   0xc002a580
c001c2e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c2ec:	03 06                	add    eax,DWORD PTR [esi]
c001c2ee:	50                   	push   eax
c001c2ef:	e8 87 44 fe ff       	call   c000077b <strcmp>
c001c2f4:	83 c4 10             	add    esp,0x10
c001c2f7:	85 c0                	test   eax,eax
c001c2f9:	74 63                	je     c001c35e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001c2fb:	50                   	push   eax
c001c2fc:	50                   	push   eax
c001c2fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c301:	03 06                	add    eax,DWORD PTR [esi]
c001c303:	50                   	push   eax
c001c304:	68 89 a5 02 c0       	push   0xc002a589
c001c309:	e8 77 63 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001c30e:	58                   	pop    eax
c001c30f:	5a                   	pop    edx
c001c310:	68 a3 a5 02 c0       	push   0xc002a5a3
c001c315:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001c31c:	53                   	push   ebx
c001c31d:	e8 08 44 fe ff       	call   c000072a <strcpy>
c001c322:	59                   	pop    ecx
c001c323:	58                   	pop    eax
c001c324:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c328:	03 06                	add    eax,DWORD PTR [esi]
c001c32a:	50                   	push   eax
c001c32b:	53                   	push   ebx
c001c32c:	e8 b0 44 fe ff       	call   c00007e1 <strcat>
c001c331:	58                   	pop    eax
c001c332:	5a                   	pop    edx
c001c333:	68 39 a6 02 c0       	push   0xc002a639
c001c338:	53                   	push   ebx
c001c339:	e8 a3 44 fe ff       	call   c00007e1 <strcat>
c001c33e:	83 c4 10             	add    esp,0x10
c001c341:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c346:	0f 84 4b 01 00 00    	je     c001c497 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c34c:	83 ec 0c             	sub    esp,0xc
c001c34f:	53                   	push   ebx
c001c350:	e8 4a d4 ff ff       	call   c001979f <Krnl::panic(char const*)>
c001c355:	83 c4 10             	add    esp,0x10
c001c358:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001c35c:	eb 0b                	jmp    c001c369 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c35e:	b8 3c 51 02 c0       	mov    eax,0xc002513c
c001c363:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c367:	b3 01                	mov    bl,0x1
c001c369:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001c36e:	0f 85 80 00 00 00    	jne    c001c3f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001c374:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001c37b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c37f:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001c383:	01 ce                	add    esi,ecx
c001c385:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c38d:	8b 06                	mov    eax,DWORD PTR [esi]
c001c38f:	0f 94 c2             	sete   dl
c001c392:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c39a:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001c39f:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001c3a3:	84 db                	test   bl,bl
c001c3a5:	74 31                	je     c001c3d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001c3a7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c3ab:	01 c3                	add    ebx,eax
c001c3ad:	84 d2                	test   dl,dl
c001c3af:	75 0a                	jne    c001c3bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001c3b1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c3b5:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c3b9:	76 32                	jbe    c001c3ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c3bb:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c3c0:	0f 84 d1 00 00 00    	je     c001c497 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c3c6:	83 ec 0c             	sub    esp,0xc
c001c3c9:	68 ba a5 02 c0       	push   0xc002a5ba
c001c3ce:	e8 cc d3 ff ff       	call   c001979f <Krnl::panic(char const*)>
c001c3d3:	83 c4 10             	add    esp,0x10
c001c3d6:	eb 15                	jmp    c001c3ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c3d8:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001c3db:	84 d2                	test   dl,dl
c001c3dd:	75 0e                	jne    c001c3ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c3df:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c3e3:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c3e7:	77 04                	ja     c001c3ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c3e9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001c3ed:	89 1e                	mov    DWORD PTR [esi],ebx
c001c3ef:	e9 e0 00 00 00       	jmp    c001c4d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c3f4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001c3f9:	75 6e                	jne    c001c469 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001c3fb:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001c402:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001c406:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001c40a:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c412:	74 17                	je     c001c42b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c414:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c41c:	74 0d                	je     c001c42b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c41e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c422:	83 e8 04             	sub    eax,0x4
c001c425:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c429:	76 17                	jbe    c001c442 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001c42b:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c430:	74 65                	je     c001c497 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c432:	83 ec 0c             	sub    esp,0xc
c001c435:	68 d6 a5 02 c0       	push   0xc002a5d6
c001c43a:	e8 60 d3 ff ff       	call   c001979f <Krnl::panic(char const*)>
c001c43f:	83 c4 10             	add    esp,0x10
c001c442:	8b 16                	mov    edx,DWORD PTR [esi]
c001c444:	84 db                	test   bl,bl
c001c446:	74 13                	je     c001c45b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001c448:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c44c:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001c453:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c457:	01 d0                	add    eax,edx
c001c459:	eb 06                	jmp    c001c461 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001c45b:	89 d0                	mov    eax,edx
c001c45d:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c461:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c465:	89 06                	mov    DWORD PTR [esi],eax
c001c467:	eb 6b                	jmp    c001c4d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c469:	50                   	push   eax
c001c46a:	50                   	push   eax
c001c46b:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001c470:	50                   	push   eax
c001c471:	68 f2 a5 02 c0       	push   0xc002a5f2
c001c476:	e8 0a 62 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001c47b:	83 c4 10             	add    esp,0x10
c001c47e:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c483:	74 12                	je     c001c497 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c485:	83 ec 0c             	sub    esp,0xc
c001c488:	68 fd a5 02 c0       	push   0xc002a5fd
c001c48d:	e8 0d d3 ff ff       	call   c001979f <Krnl::panic(char const*)>
c001c492:	83 c4 10             	add    esp,0x10
c001c495:	eb 3d                	jmp    c001c4d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c497:	83 ec 0c             	sub    esp,0xc
c001c49a:	55                   	push   ebp
c001c49b:	e8 d6 67 ff ff       	call   c0012c76 <File::close()>
c001c4a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c4a3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c4a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c4a9:	59                   	pop    ecx
c001c4aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c4ae:	e8 31 30 ff ff       	call   c000f4e4 <free>
c001c4b3:	5b                   	pop    ebx
c001c4b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c4b8:	e8 27 30 ff ff       	call   c000f4e4 <free>
c001c4bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c4c0:	e8 1f 30 ff ff       	call   c000f4e4 <free>
c001c4c5:	5e                   	pop    esi
c001c4c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c4ca:	e8 15 30 ff ff       	call   c000f4e4 <free>
c001c4cf:	83 c4 10             	add    esp,0x10
c001c4d2:	eb 21                	jmp    c001c4f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c4d4:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001c4d8:	e9 2b fd ff ff       	jmp    c001c208 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001c4dd:	83 ec 0c             	sub    esp,0xc
c001c4e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c4e4:	e8 fb 2f ff ff       	call   c000f4e4 <free>
c001c4e9:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001c4ed:	83 c4 10             	add    esp,0x10
c001c4f0:	e9 a0 fc ff ff       	jmp    c001c195 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001c4f5:	31 c0                	xor    eax,eax
c001c4f7:	eb 33                	jmp    c001c52c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001c4f9:	83 ec 0c             	sub    esp,0xc
c001c4fc:	55                   	push   ebp
c001c4fd:	e8 74 67 ff ff       	call   c0012c76 <File::close()>
c001c502:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c505:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c508:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c50b:	58                   	pop    eax
c001c50c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c510:	e8 cf 2f ff ff       	call   c000f4e4 <free>
c001c515:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c518:	e8 c7 2f ff ff       	call   c000f4e4 <free>
c001c51d:	5a                   	pop    edx
c001c51e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c522:	e8 bd 2f ff ff       	call   c000f4e4 <free>
c001c527:	83 c4 10             	add    esp,0x10
c001c52a:	b0 01                	mov    al,0x1
c001c52c:	81 c4 5c 03 00 00    	add    esp,0x35c
c001c532:	5b                   	pop    ebx
c001c533:	5e                   	pop    esi
c001c534:	5f                   	pop    edi
c001c535:	5d                   	pop    ebp
c001c536:	c3                   	ret    

c001c537 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001c537:	56                   	push   esi
c001c538:	31 d2                	xor    edx,edx
c001c53a:	53                   	push   ebx
c001c53b:	8b 1d a0 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a0
c001c541:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c545:	39 d3                	cmp    ebx,edx
c001c547:	7e 1b                	jle    c001c564 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001c549:	8b 04 95 c0 d7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2840]
c001c550:	39 c8                	cmp    eax,ecx
c001c552:	77 0d                	ja     c001c561 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001c554:	8b 34 95 c0 d5 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd2a40]
c001c55b:	01 c6                	add    esi,eax
c001c55d:	39 ce                	cmp    esi,ecx
c001c55f:	77 05                	ja     c001c566 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001c561:	42                   	inc    edx
c001c562:	eb e1                	jmp    c001c545 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001c564:	31 c0                	xor    eax,eax
c001c566:	5b                   	pop    ebx
c001c567:	5e                   	pop    esi
c001c568:	c3                   	ret    

c001c569 <Thr::getDriverNameFromAddress(unsigned long)>:
c001c569:	53                   	push   ebx
c001c56a:	31 c0                	xor    eax,eax
c001c56c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c570:	8b 1d a0 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a0
c001c576:	39 c3                	cmp    ebx,eax
c001c578:	7e 22                	jle    c001c59c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001c57a:	8b 14 85 c0 d7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2840]
c001c581:	39 ca                	cmp    edx,ecx
c001c583:	77 14                	ja     c001c599 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c585:	03 14 85 c0 d5 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd2a40]
c001c58c:	39 ca                	cmp    edx,ecx
c001c58e:	76 09                	jbe    c001c599 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c590:	8b 04 85 c0 d9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2640]
c001c597:	eb 05                	jmp    c001c59e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001c599:	40                   	inc    eax
c001c59a:	eb da                	jmp    c001c576 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001c59c:	31 c0                	xor    eax,eax
c001c59e:	5b                   	pop    ebx
c001c59f:	c3                   	ret    

c001c5a0 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001c5a0:	53                   	push   ebx
c001c5a1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c5a5:	53                   	push   ebx
c001c5a6:	e8 8c ff ff ff       	call   c001c537 <Thr::getDriverBaseFromAddress(unsigned long)>
c001c5ab:	5a                   	pop    edx
c001c5ac:	31 d2                	xor    edx,edx
c001c5ae:	85 c0                	test   eax,eax
c001c5b0:	74 04                	je     c001c5b6 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001c5b2:	89 da                	mov    edx,ebx
c001c5b4:	29 c2                	sub    edx,eax
c001c5b6:	89 d0                	mov    eax,edx
c001c5b8:	5b                   	pop    ebx
c001c5b9:	c3                   	ret    

c001c5ba <Thr::loadDLL(char const*, bool)>:
c001c5ba:	55                   	push   ebp
c001c5bb:	57                   	push   edi
c001c5bc:	56                   	push   esi
c001c5bd:	53                   	push   ebx
c001c5be:	81 ec 34 01 00 00    	sub    esp,0x134
c001c5c4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c5cb:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001c5d2:	56                   	push   esi
c001c5d3:	68 15 a6 02 c0       	push   0xc002a615
c001c5d8:	e8 a8 60 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001c5dd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c5e4:	e8 eb 2e ff ff       	call   c000f4d4 <malloc>
c001c5e9:	83 c4 0c             	add    esp,0xc
c001c5ec:	89 c3                	mov    ebx,eax
c001c5ee:	ff 35 94 dd 02 c0    	push   DWORD PTR ds:0xc002dd94
c001c5f4:	56                   	push   esi
c001c5f5:	50                   	push   eax
c001c5f6:	e8 b9 65 ff ff       	call   c0012bb4 <File::File(char const*, Process*)>
c001c5fb:	83 c4 10             	add    esp,0x10
c001c5fe:	85 db                	test   ebx,ebx
c001c600:	75 3c                	jne    c001c63e <Thr::loadDLL(char const*, bool)+0x84>
c001c602:	89 e8                	mov    eax,ebp
c001c604:	84 c0                	test   al,al
c001c606:	0f 84 b0 01 00 00    	je     c001c7bc <Thr::loadDLL(char const*, bool)+0x202>
c001c60c:	50                   	push   eax
c001c60d:	50                   	push   eax
c001c60e:	68 26 a6 02 c0       	push   0xc002a626
c001c613:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001c617:	57                   	push   edi
c001c618:	e8 0d 41 fe ff       	call   c000072a <strcpy>
c001c61d:	58                   	pop    eax
c001c61e:	5a                   	pop    edx
c001c61f:	56                   	push   esi
c001c620:	57                   	push   edi
c001c621:	e8 bb 41 fe ff       	call   c00007e1 <strcat>
c001c626:	59                   	pop    ecx
c001c627:	58                   	pop    eax
c001c628:	68 39 a6 02 c0       	push   0xc002a639
c001c62d:	57                   	push   edi
c001c62e:	e8 ae 41 fe ff       	call   c00007e1 <strcat>
c001c633:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c636:	e8 64 d1 ff ff       	call   c001979f <Krnl::panic(char const*)>
c001c63b:	83 c4 10             	add    esp,0x10
c001c63e:	50                   	push   eax
c001c63f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001c643:	50                   	push   eax
c001c644:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c648:	50                   	push   eax
c001c649:	53                   	push   ebx
c001c64a:	e8 75 68 ff ff       	call   c0012ec4 <File::stat(unsigned long long*, bool*)>
c001c64f:	83 c4 10             	add    esp,0x10
c001c652:	85 db                	test   ebx,ebx
c001c654:	74 0c                	je     c001c662 <Thr::loadDLL(char const*, bool)+0xa8>
c001c656:	83 ec 0c             	sub    esp,0xc
c001c659:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c65b:	53                   	push   ebx
c001c65c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c65f:	83 c4 10             	add    esp,0x10
c001c662:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001c667:	75 0a                	jne    c001c673 <Thr::loadDLL(char const*, bool)+0xb9>
c001c669:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c66d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001c671:	75 3c                	jne    c001c6af <Thr::loadDLL(char const*, bool)+0xf5>
c001c673:	89 e8                	mov    eax,ebp
c001c675:	84 c0                	test   al,al
c001c677:	0f 84 3d 01 00 00    	je     c001c7ba <Thr::loadDLL(char const*, bool)+0x200>
c001c67d:	50                   	push   eax
c001c67e:	50                   	push   eax
c001c67f:	68 26 a6 02 c0       	push   0xc002a626
c001c684:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001c688:	53                   	push   ebx
c001c689:	e8 9c 40 fe ff       	call   c000072a <strcpy>
c001c68e:	58                   	pop    eax
c001c68f:	5a                   	pop    edx
c001c690:	56                   	push   esi
c001c691:	53                   	push   ebx
c001c692:	e8 4a 41 fe ff       	call   c00007e1 <strcat>
c001c697:	59                   	pop    ecx
c001c698:	5f                   	pop    edi
c001c699:	68 39 a6 02 c0       	push   0xc002a639
c001c69e:	53                   	push   ebx
c001c69f:	e8 3d 41 fe ff       	call   c00007e1 <strcat>
c001c6a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c6a7:	e8 f3 d0 ff ff       	call   c001979f <Krnl::panic(char const*)>
c001c6ac:	83 c4 10             	add    esp,0x10
c001c6af:	e8 71 51 ff ff       	call   c0011825 <Virt::getAKernelVAS()>
c001c6b4:	51                   	push   ecx
c001c6b5:	6a 03                	push   0x3
c001c6b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c6bb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c6bf:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001c6c5:	83 d3 00             	adc    ebx,0x0
c001c6c8:	89 ca                	mov    edx,ecx
c001c6ca:	89 d1                	mov    ecx,edx
c001c6cc:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001c6d0:	51                   	push   ecx
c001c6d1:	50                   	push   eax
c001c6d2:	e8 89 57 ff ff       	call   c0011e60 <VAS::allocatePages(int, int)>
c001c6d7:	89 34 24             	mov    DWORD PTR [esp],esi
c001c6da:	89 c3                	mov    ebx,eax
c001c6dc:	e8 c7 3f fe ff       	call   c00006a8 <strlen>
c001c6e1:	8b 3d a0 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d5a0
c001c6e7:	40                   	inc    eax
c001c6e8:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6eb:	e8 e4 2d ff ff       	call   c000f4d4 <malloc>
c001c6f0:	89 04 bd c0 d9 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2640],eax
c001c6f7:	5f                   	pop    edi
c001c6f8:	58                   	pop    eax
c001c6f9:	a1 a0 d5 02 c0       	mov    eax,ds:0xc002d5a0
c001c6fe:	56                   	push   esi
c001c6ff:	ff 34 85 c0 d9 02 c0 	push   DWORD PTR [eax*4-0x3ffd2640]
c001c706:	e8 1f 40 fe ff       	call   c000072a <strcpy>
c001c70b:	a1 a0 d5 02 c0       	mov    eax,ds:0xc002d5a0
c001c710:	8d 50 01             	lea    edx,[eax+0x1]
c001c713:	89 1c 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],ebx
c001c71a:	89 15 a0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a0,edx
c001c720:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c724:	83 c4 0c             	add    esp,0xc
c001c727:	89 14 85 c0 d5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a40],edx
c001c72e:	6a 01                	push   0x1
c001c730:	53                   	push   ebx
c001c731:	56                   	push   esi
c001c732:	e8 7f f6 ff ff       	call   c001bdb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001c737:	83 c4 10             	add    esp,0x10
c001c73a:	89 c7                	mov    edi,eax
c001c73c:	fe c8                	dec    al
c001c73e:	74 16                	je     c001c756 <Thr::loadDLL(char const*, bool)+0x19c>
c001c740:	89 e8                	mov    eax,ebp
c001c742:	84 c0                	test   al,al
c001c744:	74 10                	je     c001c756 <Thr::loadDLL(char const*, bool)+0x19c>
c001c746:	83 ec 0c             	sub    esp,0xc
c001c749:	68 3b a6 02 c0       	push   0xc002a63b
c001c74e:	e8 4c d0 ff ff       	call   c001979f <Krnl::panic(char const*)>
c001c753:	83 c4 10             	add    esp,0x10
c001c756:	31 f6                	xor    esi,esi
c001c758:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c75c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c760:	05 ff 0f 00 00       	add    eax,0xfff
c001c765:	83 d2 00             	adc    edx,0x0
c001c768:	0f ac d0 0c          	shrd   eax,edx,0xc
c001c76c:	c1 ea 0c             	shr    edx,0xc
c001c76f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c773:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c777:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001c77b:	ba 00 00 00 00       	mov    edx,0x0
c001c780:	89 d0                	mov    eax,edx
c001c782:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001c786:	73 2c                	jae    c001c7b4 <Thr::loadDLL(char const*, bool)+0x1fa>
c001c788:	e8 98 50 ff ff       	call   c0011825 <Virt::getAKernelVAS()>
c001c78d:	89 f5                	mov    ebp,esi
c001c78f:	c1 e5 0c             	shl    ebp,0xc
c001c792:	52                   	push   edx
c001c793:	01 dd                	add    ebp,ebx
c001c795:	52                   	push   edx
c001c796:	55                   	push   ebp
c001c797:	50                   	push   eax
c001c798:	e8 3d 52 ff ff       	call   c00119da <VAS::getPageTableEntry(unsigned long)>
c001c79d:	83 c4 10             	add    esp,0x10
c001c7a0:	f6 00 60             	test   BYTE PTR [eax],0x60
c001c7a3:	75 0c                	jne    c001c7b1 <Thr::loadDLL(char const*, bool)+0x1f7>
c001c7a5:	83 ec 0c             	sub    esp,0xc
c001c7a8:	55                   	push   ebp
c001c7a9:	e8 74 31 ff ff       	call   c000f922 <Phys::freePage(unsigned long)>
c001c7ae:	83 c4 10             	add    esp,0x10
c001c7b1:	46                   	inc    esi
c001c7b2:	eb a4                	jmp    c001c758 <Thr::loadDLL(char const*, bool)+0x19e>
c001c7b4:	89 f8                	mov    eax,edi
c001c7b6:	84 c0                	test   al,al
c001c7b8:	75 02                	jne    c001c7bc <Thr::loadDLL(char const*, bool)+0x202>
c001c7ba:	31 db                	xor    ebx,ebx
c001c7bc:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c7c2:	89 d8                	mov    eax,ebx
c001c7c4:	5b                   	pop    ebx
c001c7c5:	5e                   	pop    esi
c001c7c6:	5f                   	pop    edi
c001c7c7:	5d                   	pop    ebp
c001c7c8:	c3                   	ret    

c001c7c9 <Thr::executeDLL(unsigned long, void*)>:
c001c7c9:	56                   	push   esi
c001c7ca:	53                   	push   ebx
c001c7cb:	51                   	push   ecx
c001c7cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7d0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c7d4:	85 db                	test   ebx,ebx
c001c7d6:	75 10                	jne    c001c7e8 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001c7d8:	83 ec 0c             	sub    esp,0xc
c001c7db:	68 5a a6 02 c0       	push   0xc002a65a
c001c7e0:	e8 ba cf ff ff       	call   c001979f <Krnl::panic(char const*)>
c001c7e5:	83 c4 10             	add    esp,0x10
c001c7e8:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001c7ec:	89 d8                	mov    eax,ebx
c001c7ee:	5a                   	pop    edx
c001c7ef:	5b                   	pop    ebx
c001c7f0:	5e                   	pop    esi
c001c7f1:	ff e0                	jmp    eax
c001c7f3:	90                   	nop

c001c7f4 <changeTSS>:
c001c7f4:	83 ec 14             	sub    esp,0x14
c001c7f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7fc:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001c7ff:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001c804:	c1 e2 15             	shl    edx,0x15
c001c807:	29 d0                	sub    eax,edx
c001c809:	50                   	push   eax
c001c80a:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001c80f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c815:	05 7c 11 00 00       	add    eax,0x117c
c001c81a:	50                   	push   eax
c001c81b:	e8 b4 47 ff ff       	call   c0010fd4 <TSS::setESP(unsigned long)>
c001c820:	83 c4 1c             	add    esp,0x1c
c001c823:	c3                   	ret    

c001c824 <Process::addArgs(char**)>:
c001c824:	57                   	push   edi
c001c825:	56                   	push   esi
c001c826:	53                   	push   ebx
c001c827:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c82b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c82f:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001c839:	85 ff                	test   edi,edi
c001c83b:	74 3d                	je     c001c87a <Process::addArgs(char**)+0x56>
c001c83d:	8b 07                	mov    eax,DWORD PTR [edi]
c001c83f:	85 c0                	test   eax,eax
c001c841:	74 37                	je     c001c87a <Process::addArgs(char**)+0x56>
c001c843:	31 db                	xor    ebx,ebx
c001c845:	83 ec 0c             	sub    esp,0xc
c001c848:	50                   	push   eax
c001c849:	e8 5a 3e fe ff       	call   c00006a8 <strlen>
c001c84e:	40                   	inc    eax
c001c84f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c852:	e8 7d 2c ff ff       	call   c000f4d4 <malloc>
c001c857:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001c85e:	5a                   	pop    edx
c001c85f:	59                   	pop    ecx
c001c860:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001c863:	43                   	inc    ebx
c001c864:	50                   	push   eax
c001c865:	e8 c0 3e fe ff       	call   c000072a <strcpy>
c001c86a:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001c870:	83 c4 10             	add    esp,0x10
c001c873:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c876:	85 c0                	test   eax,eax
c001c878:	75 cb                	jne    c001c845 <Process::addArgs(char**)+0x21>
c001c87a:	5b                   	pop    ebx
c001c87b:	5e                   	pop    esi
c001c87c:	5f                   	pop    edi
c001c87d:	c3                   	ret    

c001c87e <Process::Process(char const*, Process*, char**)>:
c001c87e:	56                   	push   esi
c001c87f:	53                   	push   ebx
c001c880:	83 ec 14             	sub    esp,0x14
c001c883:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c887:	05 0c 02 00 00       	add    eax,0x20c
c001c88c:	bb 07 00 00 00       	mov    ebx,0x7
c001c891:	89 c6                	mov    esi,eax
c001c893:	85 db                	test   ebx,ebx
c001c895:	78 12                	js     c001c8a9 <Process::Process(char const*, Process*, char**)+0x2b>
c001c897:	83 ec 0c             	sub    esp,0xc
c001c89a:	56                   	push   esi
c001c89b:	e8 d2 ac 00 00       	call   c0027572 <ThreadControlBlock::ThreadControlBlock()>
c001c8a0:	83 c4 10             	add    esp,0x10
c001c8a3:	83 c6 63             	add    esi,0x63
c001c8a6:	4b                   	dec    ebx
c001c8a7:	eb ea                	jmp    c001c893 <Process::Process(char const*, Process*, char**)+0x15>
c001c8a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8ad:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001c8b4:	83 ec 0c             	sub    esp,0xc
c001c8b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c8bb:	e8 30 cd ff ff       	call   c00195f0 <Krnl::newProcessEnv(Process*)>
c001c8c0:	83 c4 10             	add    esp,0x10
c001c8c3:	89 c2                	mov    edx,eax
c001c8c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8c9:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001c8cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8d3:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001c8dc:	a1 d0 bd 02 c0       	mov    eax,ds:0xc002bdd0
c001c8e1:	8d 50 01             	lea    edx,[eax+0x1]
c001c8e4:	89 15 d0 bd 02 c0    	mov    DWORD PTR ds:0xc002bdd0,edx
c001c8ea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c8ee:	89 02                	mov    DWORD PTR [edx],eax
c001c8f0:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001c8f8:	83 ec 0c             	sub    esp,0xc
c001c8fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c8ff:	e8 d0 2b ff ff       	call   c000f4d4 <malloc>
c001c904:	83 c4 10             	add    esp,0x10
c001c907:	89 c3                	mov    ebx,eax
c001c909:	83 ec 08             	sub    esp,0x8
c001c90c:	6a 00                	push   0x0
c001c90e:	53                   	push   ebx
c001c90f:	e8 f4 58 ff ff       	call   c0012208 <VAS::VAS(bool)>
c001c914:	83 c4 10             	add    esp,0x10
c001c917:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c91b:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001c921:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c925:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c92f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c933:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c937:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001c93d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c941:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c947:	85 c0                	test   eax,eax
c001c949:	74 42                	je     c001c98d <Process::Process(char const*, Process*, char**)+0x10f>
c001c94b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c94f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c955:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c95b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c95f:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001c965:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c969:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c96f:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001c975:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c979:	05 0c 01 00 00       	add    eax,0x10c
c001c97e:	83 ec 08             	sub    esp,0x8
c001c981:	52                   	push   edx
c001c982:	50                   	push   eax
c001c983:	e8 a2 3d fe ff       	call   c000072a <strcpy>
c001c988:	83 c4 10             	add    esp,0x10
c001c98b:	eb 63                	jmp    c001c9f0 <Process::Process(char const*, Process*, char**)+0x172>
c001c98d:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001c995:	83 ec 0c             	sub    esp,0xc
c001c998:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c99c:	e8 33 2b ff ff       	call   c000f4d4 <malloc>
c001c9a1:	83 c4 10             	add    esp,0x10
c001c9a4:	89 c3                	mov    ebx,eax
c001c9a6:	83 ec 08             	sub    esp,0x8
c001c9a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c9ad:	53                   	push   ebx
c001c9ae:	e8 1f 43 ff ff       	call   c0010cd2 <VgaText::VgaText(char const*)>
c001c9b3:	83 c4 10             	add    esp,0x10
c001c9b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9ba:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001c9c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9c4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c9ca:	83 ec 0c             	sub    esp,0xc
c001c9cd:	50                   	push   eax
c001c9ce:	e8 4a 36 ff ff       	call   c001001d <addToTerminalCycle(VgaText*)>
c001c9d3:	83 c4 10             	add    esp,0x10
c001c9d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9da:	05 0c 01 00 00       	add    eax,0x10c
c001c9df:	83 ec 08             	sub    esp,0x8
c001c9e2:	68 84 a6 02 c0       	push   0xc002a684
c001c9e7:	50                   	push   eax
c001c9e8:	e8 3d 3d fe ff       	call   c000072a <strcpy>
c001c9ed:	83 c4 10             	add    esp,0x10
c001c9f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9f4:	83 c0 0c             	add    eax,0xc
c001c9f7:	83 ec 08             	sub    esp,0x8
c001c9fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c9fe:	50                   	push   eax
c001c9ff:	e8 26 3d fe ff       	call   c000072a <strcpy>
c001ca04:	83 c4 10             	add    esp,0x10
c001ca07:	83 ec 08             	sub    esp,0x8
c001ca0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ca0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca12:	e8 0d fe ff ff       	call   c001c824 <Process::addArgs(char**)>
c001ca17:	83 c4 10             	add    esp,0x10
c001ca1a:	83 ec 08             	sub    esp,0x8
c001ca1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca25:	e8 58 ee ff ff       	call   c001b882 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001ca2a:	83 c4 10             	add    esp,0x10
c001ca2d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ca31:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ca35:	83 f0 01             	xor    eax,0x1
c001ca38:	88 c2                	mov    dl,al
c001ca3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca3e:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001ca44:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ca49:	83 ec 08             	sub    esp,0x8
c001ca4c:	50                   	push   eax
c001ca4d:	68 80 a7 02 c0       	push   0xc002a780
c001ca52:	e8 2e 5c ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001ca57:	83 c4 10             	add    esp,0x10
c001ca5a:	90                   	nop
c001ca5b:	83 c4 14             	add    esp,0x14
c001ca5e:	5b                   	pop    ebx
c001ca5f:	5e                   	pop    esi
c001ca60:	c3                   	ret    
c001ca61:	90                   	nop

c001ca62 <Process::Process(bool, char const*, Process*, char**)>:
c001ca62:	56                   	push   esi
c001ca63:	53                   	push   ebx
c001ca64:	83 ec 24             	sub    esp,0x24
c001ca67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ca6b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ca6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ca73:	05 0c 02 00 00       	add    eax,0x20c
c001ca78:	bb 07 00 00 00       	mov    ebx,0x7
c001ca7d:	89 c6                	mov    esi,eax
c001ca7f:	85 db                	test   ebx,ebx
c001ca81:	78 12                	js     c001ca95 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001ca83:	83 ec 0c             	sub    esp,0xc
c001ca86:	56                   	push   esi
c001ca87:	e8 e6 aa 00 00       	call   c0027572 <ThreadControlBlock::ThreadControlBlock()>
c001ca8c:	83 c4 10             	add    esp,0x10
c001ca8f:	83 c6 63             	add    esi,0x63
c001ca92:	4b                   	dec    ebx
c001ca93:	eb ea                	jmp    c001ca7f <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001ca95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ca99:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001caa0:	83 ec 0c             	sub    esp,0xc
c001caa3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001caa7:	e8 44 cb ff ff       	call   c00195f0 <Krnl::newProcessEnv(Process*)>
c001caac:	83 c4 10             	add    esp,0x10
c001caaf:	89 c2                	mov    edx,eax
c001cab1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cab5:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001cabb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cabf:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001cac8:	a1 d0 bd 02 c0       	mov    eax,ds:0xc002bdd0
c001cacd:	8d 50 01             	lea    edx,[eax+0x1]
c001cad0:	89 15 d0 bd 02 c0    	mov    DWORD PTR ds:0xc002bdd0,edx
c001cad6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cada:	89 02                	mov    DWORD PTR [edx],eax
c001cadc:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001cae4:	83 ec 0c             	sub    esp,0xc
c001cae7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001caeb:	e8 e4 29 ff ff       	call   c000f4d4 <malloc>
c001caf0:	83 c4 10             	add    esp,0x10
c001caf3:	89 c3                	mov    ebx,eax
c001caf5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cafa:	83 ec 08             	sub    esp,0x8
c001cafd:	50                   	push   eax
c001cafe:	53                   	push   ebx
c001caff:	e8 04 57 ff ff       	call   c0012208 <VAS::VAS(bool)>
c001cb04:	83 c4 10             	add    esp,0x10
c001cb07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb0b:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001cb11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb15:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cb1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb23:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cb27:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001cb2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb31:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cb37:	85 c0                	test   eax,eax
c001cb39:	74 42                	je     c001cb7d <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001cb3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb3f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cb45:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001cb4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb4f:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001cb55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb59:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cb5f:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cb65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb69:	05 0c 01 00 00       	add    eax,0x10c
c001cb6e:	83 ec 08             	sub    esp,0x8
c001cb71:	52                   	push   edx
c001cb72:	50                   	push   eax
c001cb73:	e8 b2 3b fe ff       	call   c000072a <strcpy>
c001cb78:	83 c4 10             	add    esp,0x10
c001cb7b:	eb 63                	jmp    c001cbe0 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001cb7d:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001cb85:	83 ec 0c             	sub    esp,0xc
c001cb88:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cb8c:	e8 43 29 ff ff       	call   c000f4d4 <malloc>
c001cb91:	83 c4 10             	add    esp,0x10
c001cb94:	89 c3                	mov    ebx,eax
c001cb96:	83 ec 08             	sub    esp,0x8
c001cb99:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001cb9d:	53                   	push   ebx
c001cb9e:	e8 2f 41 ff ff       	call   c0010cd2 <VgaText::VgaText(char const*)>
c001cba3:	83 c4 10             	add    esp,0x10
c001cba6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbaa:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001cbb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbb4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cbba:	83 ec 0c             	sub    esp,0xc
c001cbbd:	50                   	push   eax
c001cbbe:	e8 5a 34 ff ff       	call   c001001d <addToTerminalCycle(VgaText*)>
c001cbc3:	83 c4 10             	add    esp,0x10
c001cbc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbca:	05 0c 01 00 00       	add    eax,0x10c
c001cbcf:	83 ec 08             	sub    esp,0x8
c001cbd2:	68 84 a6 02 c0       	push   0xc002a684
c001cbd7:	50                   	push   eax
c001cbd8:	e8 4d 3b fe ff       	call   c000072a <strcpy>
c001cbdd:	83 c4 10             	add    esp,0x10
c001cbe0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbe4:	83 c0 0c             	add    eax,0xc
c001cbe7:	83 ec 08             	sub    esp,0x8
c001cbea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001cbee:	50                   	push   eax
c001cbef:	e8 36 3b fe ff       	call   c000072a <strcpy>
c001cbf4:	83 c4 10             	add    esp,0x10
c001cbf7:	83 ec 08             	sub    esp,0x8
c001cbfa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cbfe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc02:	e8 1d fc ff ff       	call   c001c824 <Process::addArgs(char**)>
c001cc07:	83 c4 10             	add    esp,0x10
c001cc0a:	90                   	nop
c001cc0b:	83 c4 24             	add    esp,0x24
c001cc0e:	5b                   	pop    ebx
c001cc0f:	5e                   	pop    esi
c001cc10:	c3                   	ret    

c001cc11 <disableIRQs()>:
c001cc11:	fa                   	cli    
c001cc12:	ff 05 6c dd 02 c0    	inc    DWORD PTR ds:0xc002dd6c
c001cc18:	c3                   	ret    

c001cc19 <getIRQNestingLevel()>:
c001cc19:	a1 6c dd 02 c0       	mov    eax,ds:0xc002dd6c
c001cc1e:	c3                   	ret    

c001cc1f <enableIRQs()>:
c001cc1f:	a1 6c dd 02 c0       	mov    eax,ds:0xc002dd6c
c001cc24:	48                   	dec    eax
c001cc25:	a3 6c dd 02 c0       	mov    ds:0xc002dd6c,eax
c001cc2a:	75 01                	jne    c001cc2d <enableIRQs()+0xe>
c001cc2c:	fb                   	sti    
c001cc2d:	c3                   	ret    

c001cc2e <lockScheduler()>:
c001cc2e:	eb e1                	jmp    c001cc11 <disableIRQs()>

c001cc30 <unlockScheduler()>:
c001cc30:	eb ed                	jmp    c001cc1f <enableIRQs()>

c001cc32 <userModeEntryPoint(void*)>:
c001cc32:	83 ec 0c             	sub    esp,0xc
c001cc35:	e8 f6 ff ff ff       	call   c001cc30 <unlockScheduler()>
c001cc3a:	fb                   	sti    
c001cc3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc40:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc43:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001cc49:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cc4d:	83 c4 0c             	add    esp,0xc
c001cc50:	e9 8a 36 fe ff       	jmp    c00002df <goToUsermode>

c001cc55 <lockStuff()>:
c001cc55:	e8 b7 ff ff ff       	call   c001cc11 <disableIRQs()>
c001cc5a:	ff 05 68 dd 02 c0    	inc    DWORD PTR ds:0xc002dd68
c001cc60:	c3                   	ret    

c001cc61 <taskStartupFunction>:
c001cc61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc66:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001cc69:	c3                   	ret    

c001cc6a <updateTimeUsed()>:
c001cc6a:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001cc6f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cc75:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001cc7c:	74 50                	je     c001ccce <updateTimeUsed()+0x64>
c001cc7e:	57                   	push   edi
c001cc7f:	56                   	push   esi
c001cc80:	53                   	push   ebx
c001cc81:	0f 31                	rdtsc  
c001cc83:	89 c1                	mov    ecx,eax
c001cc85:	a3 a8 dd 02 c0       	mov    ds:0xc002dda8,eax
c001cc8a:	2b 0d 98 dd 02 c0    	sub    ecx,DWORD PTR ds:0xc002dd98
c001cc90:	89 d3                	mov    ebx,edx
c001cc92:	89 0d a0 dd 02 c0    	mov    DWORD PTR ds:0xc002dda0,ecx
c001cc98:	1b 1d 9c dd 02 c0    	sbb    ebx,DWORD PTR ds:0xc002dd9c
c001cc9e:	a3 98 dd 02 c0       	mov    ds:0xc002dd98,eax
c001cca3:	89 1d a4 dd 02 c0    	mov    DWORD PTR ds:0xc002dda4,ebx
c001cca9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ccae:	89 15 ac dd 02 c0    	mov    DWORD PTR ds:0xc002ddac,edx
c001ccb4:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001ccb7:	89 15 9c dd 02 c0    	mov    DWORD PTR ds:0xc002dd9c,edx
c001ccbd:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001ccc0:	01 f1                	add    ecx,esi
c001ccc2:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001ccc5:	11 fb                	adc    ebx,edi
c001ccc7:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001ccca:	5b                   	pop    ebx
c001cccb:	5e                   	pop    esi
c001cccc:	5f                   	pop    edi
c001cccd:	c3                   	ret    
c001ccce:	c3                   	ret    

c001cccf <switchToThread(ThreadControlBlock*)>:
c001cccf:	53                   	push   ebx
c001ccd0:	83 ec 08             	sub    esp,0x8
c001ccd3:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001ccd8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ccdc:	85 c0                	test   eax,eax
c001ccde:	75 30                	jne    c001cd10 <switchToThread(ThreadControlBlock*)+0x41>
c001cce0:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001cce3:	3c ff                	cmp    al,0xff
c001cce5:	74 25                	je     c001cd0c <switchToThread(ThreadControlBlock*)+0x3d>
c001cce7:	0f b6 d0             	movzx  edx,al
c001ccea:	b8 84 03 00 00       	mov    eax,0x384
c001ccef:	29 d0                	sub    eax,edx
c001ccf1:	c1 e0 10             	shl    eax,0x10
c001ccf4:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001ccf7:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001ccfa:	e8 6b ff ff ff       	call   c001cc6a <updateTimeUsed()>
c001ccff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001cd03:	83 c4 08             	add    esp,0x8
c001cd06:	5b                   	pop    ebx
c001cd07:	e9 0b 36 fe ff       	jmp    c0000317 <switchToThreadASM>
c001cd0c:	31 c0                	xor    eax,eax
c001cd0e:	eb e7                	jmp    c001ccf7 <switchToThread(ThreadControlBlock*)+0x28>
c001cd10:	c7 05 64 dd 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002dd64,0x1
c001cd1a:	83 c4 08             	add    esp,0x8
c001cd1d:	5b                   	pop    ebx
c001cd1e:	c3                   	ret    
c001cd1f:	90                   	nop

c001cd20 <Semaphore::Semaphore(int)>:
c001cd20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cd28:	89 10                	mov    DWORD PTR [eax],edx
c001cd2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd2e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cd35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cd40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd44:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cd4b:	90                   	nop
c001cd4c:	c3                   	ret    
c001cd4d:	90                   	nop

c001cd4e <Mutex::Mutex()>:
c001cd4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd52:	6a 01                	push   0x1
c001cd54:	50                   	push   eax
c001cd55:	e8 c6 ff ff ff       	call   c001cd20 <Semaphore::Semaphore(int)>
c001cd5a:	83 c4 08             	add    esp,0x8
c001cd5d:	90                   	nop
c001cd5e:	c3                   	ret    
c001cd5f:	90                   	nop

c001cd60 <Process::createThread(void (*)(void*), void*, int)>:
c001cd60:	55                   	push   ebp
c001cd61:	31 c9                	xor    ecx,ecx
c001cd63:	57                   	push   edi
c001cd64:	56                   	push   esi
c001cd65:	53                   	push   ebx
c001cd66:	83 ec 1c             	sub    esp,0x1c
c001cd69:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cd6d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001cd74:	89 f2                	mov    edx,esi
c001cd76:	0f b7 c2             	movzx  eax,dx
c001cd79:	83 e2 01             	and    edx,0x1
c001cd7c:	74 14                	je     c001cd92 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001cd7e:	d1 f8                	sar    eax,1
c001cd80:	41                   	inc    ecx
c001cd81:	89 c2                	mov    edx,eax
c001cd83:	83 f9 10             	cmp    ecx,0x10
c001cd86:	75 ee                	jne    c001cd76 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001cd88:	83 c4 1c             	add    esp,0x1c
c001cd8b:	31 c0                	xor    eax,eax
c001cd8d:	5b                   	pop    ebx
c001cd8e:	5e                   	pop    esi
c001cd8f:	5f                   	pop    edi
c001cd90:	5d                   	pop    ebp
c001cd91:	c3                   	ret    
c001cd92:	83 ec 08             	sub    esp,0x8
c001cd95:	b8 01 00 00 00       	mov    eax,0x1
c001cd9a:	d3 e0                	shl    eax,cl
c001cd9c:	09 c6                	or     esi,eax
c001cd9e:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001cda4:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001cdab:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001cdae:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001cdb1:	01 ce                	add    esi,ecx
c001cdb3:	89 f0                	mov    eax,esi
c001cdb5:	c1 e0 05             	shl    eax,0x5
c001cdb8:	01 c6                	add    esi,eax
c001cdba:	8d 04 33             	lea    eax,[ebx+esi*1]
c001cdbd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001cdc3:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001cdc9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001cdcd:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001cdd3:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001cdd9:	89 ca                	mov    edx,ecx
c001cddb:	f7 da                	neg    edx
c001cddd:	c1 e2 15             	shl    edx,0x15
c001cde0:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001cde6:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001cdec:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001cdf0:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001cdfa:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001ce00:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ce04:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001ce0a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001ce14:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001ce1e:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001ce25:	50                   	push   eax
c001ce26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce2a:	68 88 dd 02 c0       	push   0xc002dd88
c001ce2f:	e8 cc a5 00 00       	call   c0027400 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ce34:	83 c4 10             	add    esp,0x10
c001ce37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce3b:	83 c4 1c             	add    esp,0x1c
c001ce3e:	5b                   	pop    ebx
c001ce3f:	5e                   	pop    esi
c001ce40:	5f                   	pop    edi
c001ce41:	5d                   	pop    ebp
c001ce42:	c3                   	ret    
c001ce43:	90                   	nop

c001ce44 <Process::createUserThread()>:
c001ce44:	83 ec 0c             	sub    esp,0xc
c001ce47:	68 80 00 00 00       	push   0x80
c001ce4c:	6a 00                	push   0x0
c001ce4e:	68 32 cc 01 c0       	push   0xc001cc32
c001ce53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce57:	e8 04 ff ff ff       	call   c001cd60 <Process::createThread(void (*)(void*), void*, int)>
c001ce5c:	83 c4 1c             	add    esp,0x1c
c001ce5f:	c3                   	ret    

c001ce60 <setupMultitasking(void (*)())>:
c001ce60:	56                   	push   esi
c001ce61:	53                   	push   ebx
c001ce62:	53                   	push   ebx
c001ce63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce67:	eb 10                	jmp    c001ce79 <setupMultitasking(void (*)())+0x19>
c001ce69:	83 ec 0c             	sub    esp,0xc
c001ce6c:	68 88 dd 02 c0       	push   0xc002dd88
c001ce71:	e8 dc a4 00 00       	call   c0027352 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ce76:	83 c4 10             	add    esp,0x10
c001ce79:	83 ec 0c             	sub    esp,0xc
c001ce7c:	68 88 dd 02 c0       	push   0xc002dd88
c001ce81:	e8 b0 a4 00 00       	call   c0027336 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ce86:	83 c4 10             	add    esp,0x10
c001ce89:	84 c0                	test   al,al
c001ce8b:	74 dc                	je     c001ce69 <setupMultitasking(void (*)())+0x9>
c001ce8d:	83 ec 0c             	sub    esp,0xc
c001ce90:	68 3f 07 00 00       	push   0x73f
c001ce95:	e8 3a 26 ff ff       	call   c000f4d4 <malloc>
c001ce9a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001cea1:	89 c3                	mov    ebx,eax
c001cea3:	6a 00                	push   0x0
c001cea5:	68 88 a6 02 c0       	push   0xc002a688
c001ceaa:	6a 01                	push   0x1
c001ceac:	50                   	push   eax
c001cead:	e8 b0 fb ff ff       	call   c001ca62 <Process::Process(bool, char const*, Process*, char**)>
c001ceb2:	83 c4 18             	add    esp,0x18
c001ceb5:	89 1d 94 dd 02 c0    	mov    DWORD PTR ds:0xc002dd94,ebx
c001cebb:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001cec1:	68 a8 a7 02 c0       	push   0xc002a7a8
c001cec6:	e8 ba 57 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001cecb:	58                   	pop    eax
c001cecc:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001ced2:	e8 70 39 ff ff       	call   c0010847 <setActiveTerminal(VgaText*)>
c001ced7:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001cedf:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001cee5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cee8:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001cef2:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001cef8:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001cefe:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001cf08:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001cf12:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001cf1c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001cf22:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001cf28:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001cf32:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001cf38:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001cf42:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001cf48:	5a                   	pop    edx
c001cf49:	59                   	pop    ecx
c001cf4a:	68 84 a6 02 c0       	push   0xc002a684
c001cf4f:	50                   	push   eax
c001cf50:	e8 d5 37 fe ff       	call   c000072a <strcpy>
c001cf55:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001cf5c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001cf60:	83 c4 14             	add    esp,0x14
c001cf63:	5b                   	pop    ebx
c001cf64:	5e                   	pop    esi
c001cf65:	e9 9f 33 fe ff       	jmp    c0000309 <switchToThreadASMFirstTime>

c001cf6a <schedule()>:
c001cf6a:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001cf6f:	85 c0                	test   eax,eax
c001cf71:	74 0b                	je     c001cf7e <schedule()+0x14>
c001cf73:	c7 05 64 dd 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002dd64,0x1
c001cf7d:	c3                   	ret    
c001cf7e:	53                   	push   ebx
c001cf7f:	83 ec 14             	sub    esp,0x14
c001cf82:	68 88 dd 02 c0       	push   0xc002dd88
c001cf87:	e8 aa a3 00 00       	call   c0027336 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cf8c:	83 c4 10             	add    esp,0x10
c001cf8f:	84 c0                	test   al,al
c001cf91:	75 38                	jne    c001cfcb <schedule()+0x61>
c001cf93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf98:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cf9b:	4a                   	dec    edx
c001cf9c:	74 32                	je     c001cfd0 <schedule()+0x66>
c001cf9e:	83 ec 0c             	sub    esp,0xc
c001cfa1:	68 88 dd 02 c0       	push   0xc002dd88
c001cfa6:	e8 83 a3 00 00       	call   c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cfab:	c7 04 24 88 dd 02 c0 	mov    DWORD PTR [esp],0xc002dd88
c001cfb2:	89 c3                	mov    ebx,eax
c001cfb4:	e8 99 a3 00 00       	call   c0027352 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cfb9:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001cfc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfc3:	e8 07 fd ff ff       	call   c001cccf <switchToThread(ThreadControlBlock*)>
c001cfc8:	83 c4 10             	add    esp,0x10
c001cfcb:	83 c4 08             	add    esp,0x8
c001cfce:	5b                   	pop    ebx
c001cfcf:	c3                   	ret    
c001cfd0:	83 ec 08             	sub    esp,0x8
c001cfd3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001cfda:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001cfe0:	68 88 dd 02 c0       	push   0xc002dd88
c001cfe5:	e8 16 a4 00 00       	call   c0027400 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cfea:	83 c4 10             	add    esp,0x10
c001cfed:	eb af                	jmp    c001cf9e <schedule()+0x34>

c001cfef <unlockStuff()>:
c001cfef:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001cff4:	48                   	dec    eax
c001cff5:	a3 68 dd 02 c0       	mov    ds:0xc002dd68,eax
c001cffa:	75 09                	jne    c001d005 <unlockStuff()+0x16>
c001cffc:	a1 64 dd 02 c0       	mov    eax,ds:0xc002dd64
c001d001:	85 c0                	test   eax,eax
c001d003:	75 05                	jne    c001d00a <unlockStuff()+0x1b>
c001d005:	e9 15 fc ff ff       	jmp    c001cc1f <enableIRQs()>
c001d00a:	83 ec 0c             	sub    esp,0xc
c001d00d:	c7 05 64 dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dd64,0x0
c001d017:	e8 4e ff ff ff       	call   c001cf6a <schedule()>
c001d01c:	83 c4 0c             	add    esp,0xc
c001d01f:	e9 fb fb ff ff       	jmp    c001cc1f <enableIRQs()>

c001d024 <Semaphore::tryAcquire()>:
c001d024:	83 ec 0c             	sub    esp,0xc
c001d027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d02b:	e8 25 fc ff ff       	call   c001cc55 <lockStuff()>
c001d030:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d033:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d035:	7c 0b                	jl     c001d042 <Semaphore::tryAcquire()+0x1e>
c001d037:	e8 b3 ff ff ff       	call   c001cfef <unlockStuff()>
c001d03c:	31 c0                	xor    eax,eax
c001d03e:	83 c4 0c             	add    esp,0xc
c001d041:	c3                   	ret    
c001d042:	42                   	inc    edx
c001d043:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d046:	e8 a4 ff ff ff       	call   c001cfef <unlockStuff()>
c001d04b:	b0 01                	mov    al,0x1
c001d04d:	83 c4 0c             	add    esp,0xc
c001d050:	c3                   	ret    
c001d051:	90                   	nop

c001d052 <Semaphore::assertLocked(char const*)>:
c001d052:	83 ec 0c             	sub    esp,0xc
c001d055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d059:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d05d:	e8 f3 fb ff ff       	call   c001cc55 <lockStuff()>
c001d062:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d064:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d067:	7c 05                	jl     c001d06e <Semaphore::assertLocked(char const*)+0x1c>
c001d069:	83 c4 0c             	add    esp,0xc
c001d06c:	eb 81                	jmp    c001cfef <unlockStuff()>
c001d06e:	83 ec 0c             	sub    esp,0xc
c001d071:	52                   	push   edx
c001d072:	e8 28 c7 ff ff       	call   c001979f <Krnl::panic(char const*)>
c001d077:	83 c4 10             	add    esp,0x10
c001d07a:	83 c4 0c             	add    esp,0xc
c001d07d:	e9 6d ff ff ff       	jmp    c001cfef <unlockStuff()>

c001d082 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d082:	83 ec 0c             	sub    esp,0xc
c001d085:	e8 8f fb ff ff       	call   c001cc19 <getIRQNestingLevel()>
c001d08a:	83 ec 08             	sub    esp,0x8
c001d08d:	50                   	push   eax
c001d08e:	68 dc a7 02 c0       	push   0xc002a7dc
c001d093:	e8 ed 55 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001d098:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d09c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0a1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d0a4:	e8 c1 fe ff ff       	call   c001cf6a <schedule()>
c001d0a9:	e8 82 fb ff ff       	call   c001cc30 <unlockScheduler()>
c001d0ae:	e8 66 fb ff ff       	call   c001cc19 <getIRQNestingLevel()>
c001d0b3:	5a                   	pop    edx
c001d0b4:	59                   	pop    ecx
c001d0b5:	50                   	push   eax
c001d0b6:	68 10 a8 02 c0       	push   0xc002a810
c001d0bb:	e8 c5 55 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001d0c0:	83 c4 1c             	add    esp,0x1c
c001d0c3:	c3                   	ret    

c001d0c4 <blockTask(TaskState)>:
c001d0c4:	83 ec 0c             	sub    esp,0xc
c001d0c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d0cb:	e8 5e fb ff ff       	call   c001cc2e <lockScheduler()>
c001d0d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0d5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d0d8:	e8 8d fe ff ff       	call   c001cf6a <schedule()>
c001d0dd:	83 c4 0c             	add    esp,0xc
c001d0e0:	e9 4b fb ff ff       	jmp    c001cc30 <unlockScheduler()>

c001d0e5 <waitTask(int, int*, int)>:
c001d0e5:	83 ec 18             	sub    esp,0x18
c001d0e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d0f1:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d0f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d0f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0fd:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d100:	6a 07                	push   0x7
c001d102:	e8 bd ff ff ff       	call   c001d0c4 <blockTask(TaskState)>
c001d107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d10c:	83 c4 10             	add    esp,0x10
c001d10f:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d112:	85 d2                	test   edx,edx
c001d114:	74 0a                	je     c001d120 <waitTask(int, int*, int)+0x3b>
c001d116:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d119:	89 02                	mov    DWORD PTR [edx],eax
c001d11b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d120:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d123:	83 c4 0c             	add    esp,0xc
c001d126:	c3                   	ret    

c001d127 <nanoSleepUntil(unsigned long long)>:
c001d127:	83 ec 0c             	sub    esp,0xc
c001d12a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d12e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d132:	3b 05 d0 ce 02 c0    	cmp    eax,DWORD PTR ds:0xc002ced0
c001d138:	89 d1                	mov    ecx,edx
c001d13a:	1b 0d d4 ce 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ced4
c001d140:	73 04                	jae    c001d146 <nanoSleepUntil(unsigned long long)+0x1f>
c001d142:	83 c4 0c             	add    esp,0xc
c001d145:	c3                   	ret    
c001d146:	e8 0a fb ff ff       	call   c001cc55 <lockStuff()>
c001d14b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d151:	83 ec 08             	sub    esp,0x8
c001d154:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d157:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d15a:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d160:	68 7c dd 02 c0       	push   0xc002dd7c
c001d165:	e8 96 a2 00 00       	call   c0027400 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d16a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d171:	e8 4e ff ff ff       	call   c001d0c4 <blockTask(TaskState)>
c001d176:	83 c4 1c             	add    esp,0x1c
c001d179:	e9 71 fe ff ff       	jmp    c001cfef <unlockStuff()>

c001d17e <nanoSleep(unsigned long long)>:
c001d17e:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c001d183:	8b 15 d4 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002ced4
c001d189:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001d18d:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001d191:	eb 94                	jmp    c001d127 <nanoSleepUntil(unsigned long long)>

c001d193 <sleep(unsigned long long)>:
c001d193:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001d19b:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001d1a0:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001d1a4:	01 ca                	add    edx,ecx
c001d1a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1aa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d1ae:	eb ce                	jmp    c001d17e <nanoSleep(unsigned long long)>

c001d1b0 <Semaphore::acquire()>:
c001d1b0:	83 ec 0c             	sub    esp,0xc
c001d1b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1b7:	e8 99 fa ff ff       	call   c001cc55 <lockStuff()>
c001d1bc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d1bf:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d1c1:	7d 0c                	jge    c001d1cf <Semaphore::acquire()+0x1f>
c001d1c3:	42                   	inc    edx
c001d1c4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d1c7:	83 c4 0c             	add    esp,0xc
c001d1ca:	e9 20 fe ff ff       	jmp    c001cfef <unlockStuff()>
c001d1cf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d1d5:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001d1dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d1df:	85 d2                	test   edx,edx
c001d1e1:	74 2a                	je     c001d20d <Semaphore::acquire()+0x5d>
c001d1e3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d1e6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d1ec:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001d1ef:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d1f5:	83 ec 0c             	sub    esp,0xc
c001d1f8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d1fb:	6a 05                	push   0x5
c001d1fd:	e8 c2 fe ff ff       	call   c001d0c4 <blockTask(TaskState)>
c001d202:	83 c4 10             	add    esp,0x10
c001d205:	83 c4 0c             	add    esp,0xc
c001d208:	e9 e2 fd ff ff       	jmp    c001cfef <unlockStuff()>
c001d20d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d213:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d216:	eb d7                	jmp    c001d1ef <Semaphore::acquire()+0x3f>

c001d218 <taskReturned>:
c001d218:	83 ec 18             	sub    esp,0x18
c001d21b:	68 44 a8 02 c0       	push   0xc002a844
c001d220:	e8 7a c5 ff ff       	call   c001979f <Krnl::panic(char const*)>
c001d225:	83 c4 10             	add    esp,0x10
c001d228:	83 ec 0c             	sub    esp,0xc
c001d22b:	6a 02                	push   0x2
c001d22d:	e8 92 fe ff ff       	call   c001d0c4 <blockTask(TaskState)>
c001d232:	e8 f7 f9 ff ff       	call   c001cc2e <lockScheduler()>
c001d237:	e8 2e fd ff ff       	call   c001cf6a <schedule()>
c001d23c:	e8 ef f9 ff ff       	call   c001cc30 <unlockScheduler()>
c001d241:	83 c4 10             	add    esp,0x10
c001d244:	eb e2                	jmp    c001d228 <taskReturned+0x10>

c001d246 <unblockTask(ThreadControlBlock*)>:
c001d246:	53                   	push   ebx
c001d247:	83 ec 08             	sub    esp,0x8
c001d24a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d24e:	e8 db f9 ff ff       	call   c001cc2e <lockScheduler()>
c001d253:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d256:	85 c0                	test   eax,eax
c001d258:	74 5c                	je     c001d2b6 <unblockTask(ThreadControlBlock*)+0x70>
c001d25a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d25d:	48                   	dec    eax
c001d25e:	74 31                	je     c001d291 <unblockTask(ThreadControlBlock*)+0x4b>
c001d260:	83 ec 0c             	sub    esp,0xc
c001d263:	68 88 dd 02 c0       	push   0xc002dd88
c001d268:	e8 c1 a0 00 00       	call   c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d26d:	83 c4 10             	add    esp,0x10
c001d270:	85 c0                	test   eax,eax
c001d272:	75 17                	jne    c001d28b <unblockTask(ThreadControlBlock*)+0x45>
c001d274:	eb 65                	jmp    c001d2db <unblockTask(ThreadControlBlock*)+0x95>
c001d276:	83 ec 08             	sub    esp,0x8
c001d279:	50                   	push   eax
c001d27a:	68 88 dd 02 c0       	push   0xc002dd88
c001d27f:	e8 84 a3 00 00       	call   c0027608 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001d284:	83 c4 10             	add    esp,0x10
c001d287:	85 c0                	test   eax,eax
c001d289:	74 50                	je     c001d2db <unblockTask(ThreadControlBlock*)+0x95>
c001d28b:	39 c3                	cmp    ebx,eax
c001d28d:	75 e7                	jne    c001d276 <unblockTask(ThreadControlBlock*)+0x30>
c001d28f:	eb 1c                	jmp    c001d2ad <unblockTask(ThreadControlBlock*)+0x67>
c001d291:	83 ec 0c             	sub    esp,0xc
c001d294:	68 34 a9 02 c0       	push   0xc002a934
c001d299:	e8 e7 53 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001d29e:	c7 04 24 c0 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8c0
c001d2a5:	e8 db 53 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001d2aa:	83 c4 10             	add    esp,0x10
c001d2ad:	83 c4 08             	add    esp,0x8
c001d2b0:	5b                   	pop    ebx
c001d2b1:	e9 7a f9 ff ff       	jmp    c001cc30 <unlockScheduler()>
c001d2b6:	83 ec 0c             	sub    esp,0xc
c001d2b9:	68 78 a8 02 c0       	push   0xc002a878
c001d2be:	e8 c2 53 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001d2c3:	c7 04 24 c0 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8c0
c001d2ca:	e8 b6 53 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001d2cf:	83 c4 10             	add    esp,0x10
c001d2d2:	83 c4 08             	add    esp,0x8
c001d2d5:	5b                   	pop    ebx
c001d2d6:	e9 55 f9 ff ff       	jmp    c001cc30 <unlockScheduler()>
c001d2db:	83 ec 08             	sub    esp,0x8
c001d2de:	53                   	push   ebx
c001d2df:	68 88 dd 02 c0       	push   0xc002dd88
c001d2e4:	e8 17 a1 00 00       	call   c0027400 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d2e9:	83 c4 10             	add    esp,0x10
c001d2ec:	83 c4 08             	add    esp,0x8
c001d2ef:	5b                   	pop    ebx
c001d2f0:	e9 3b f9 ff ff       	jmp    c001cc30 <unlockScheduler()>

c001d2f5 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001d2f5:	55                   	push   ebp
c001d2f6:	57                   	push   edi
c001d2f7:	56                   	push   esi
c001d2f8:	53                   	push   ebx
c001d2f9:	83 ec 1c             	sub    esp,0x1c
c001d2fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d300:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d303:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001d309:	85 ff                	test   edi,edi
c001d30b:	7e 20                	jle    c001d32d <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001d30d:	31 f6                	xor    esi,esi
c001d30f:	83 ec 0c             	sub    esp,0xc
c001d312:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001d319:	46                   	inc    esi
c001d31a:	e8 c5 21 ff ff       	call   c000f4e4 <free>
c001d31f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d322:	83 c4 10             	add    esp,0x10
c001d325:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001d32b:	7f e2                	jg     c001d30f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001d32d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d337:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001d33c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001d33f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d342:	d3 c0                	rol    eax,cl
c001d344:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001d34b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d34e:	89 f7                	mov    edi,esi
c001d350:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001d358:	0f 85 74 01 00 00    	jne    c001d4d2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001d35e:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001d364:	85 ed                	test   ebp,ebp
c001d366:	74 1b                	je     c001d383 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001d368:	83 ec 0c             	sub    esp,0xc
c001d36b:	55                   	push   ebp
c001d36c:	e8 9b c1 ff ff       	call   c001950c <EnvVarContainer::~EnvVarContainer()>
c001d371:	59                   	pop    ecx
c001d372:	5e                   	pop    esi
c001d373:	6a 0c                	push   0xc
c001d375:	55                   	push   ebp
c001d376:	e8 2a 52 ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c001d37b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d37e:	83 c4 10             	add    esp,0x10
c001d381:	89 f7                	mov    edi,esi
c001d383:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d389:	85 c0                	test   eax,eax
c001d38b:	0f 84 aa 00 00 00    	je     c001d43b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d391:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001d394:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d398:	31 c9                	xor    ecx,ecx
c001d39a:	eb 10                	jmp    c001d3ac <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001d39c:	41                   	inc    ecx
c001d39d:	83 f9 10             	cmp    ecx,0x10
c001d3a0:	0f 84 95 00 00 00    	je     c001d43b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d3a6:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d3ac:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001d3b3:	d3 fa                	sar    edx,cl
c001d3b5:	83 e2 01             	and    edx,0x1
c001d3b8:	74 e2                	je     c001d39c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d3ba:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d3bd:	01 ca                	add    edx,ecx
c001d3bf:	89 d5                	mov    ebp,edx
c001d3c1:	c1 e5 05             	shl    ebp,0x5
c001d3c4:	01 ea                	add    edx,ebp
c001d3c6:	01 d0                	add    eax,edx
c001d3c8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001d3ce:	83 fd 07             	cmp    ebp,0x7
c001d3d1:	75 c9                	jne    c001d39c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d3d3:	05 40 02 00 00       	add    eax,0x240
c001d3d8:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001d3db:	83 fd ff             	cmp    ebp,0xffffffff
c001d3de:	0f 8c 08 01 00 00    	jl     c001d4ec <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001d3e4:	0f 84 b9 01 00 00    	je     c001d5a3 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001d3ea:	85 ed                	test   ebp,ebp
c001d3ec:	0f 84 a0 01 00 00    	je     c001d592 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001d3f2:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001d3f4:	75 a6                	jne    c001d39c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d3f6:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d3fc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d400:	01 d0                	add    eax,edx
c001d402:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d406:	83 ec 0c             	sub    esp,0xc
c001d409:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001d40f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d412:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d418:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001d41f:	50                   	push   eax
c001d420:	e8 21 fe ff ff       	call   c001d246 <unblockTask(ThreadControlBlock*)>
c001d425:	83 c4 10             	add    esp,0x10
c001d428:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d42b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d42f:	89 f7                	mov    edi,esi
c001d431:	41                   	inc    ecx
c001d432:	83 f9 10             	cmp    ecx,0x10
c001d435:	0f 85 6b ff ff ff    	jne    c001d3a6 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001d43b:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001d441:	85 c0                	test   eax,eax
c001d443:	74 5d                	je     c001d4a2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d445:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001d44b:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001d451:	74 4f                	je     c001d4a2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d453:	83 ec 0c             	sub    esp,0xc
c001d456:	68 88 dd 02 c0       	push   0xc002dd88
c001d45b:	e8 ce 9e 00 00       	call   c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d460:	c7 04 24 88 dd 02 c0 	mov    DWORD PTR [esp],0xc002dd88
c001d467:	89 c7                	mov    edi,eax
c001d469:	e8 c8 9e 00 00       	call   c0027336 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d46e:	83 c4 10             	add    esp,0x10
c001d471:	84 c0                	test   al,al
c001d473:	0f 84 e4 00 00 00    	je     c001d55d <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001d479:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d47c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d482:	85 d2                	test   edx,edx
c001d484:	74 0f                	je     c001d495 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001d486:	83 ec 0c             	sub    esp,0xc
c001d489:	8b 02                	mov    eax,DWORD PTR [edx]
c001d48b:	52                   	push   edx
c001d48c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d48f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d492:	83 c4 10             	add    esp,0x10
c001d495:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001d49f:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d4a2:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001d4a8:	85 db                	test   ebx,ebx
c001d4aa:	74 16                	je     c001d4c2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001d4ac:	83 ec 0c             	sub    esp,0xc
c001d4af:	53                   	push   ebx
c001d4b0:	e8 3f 47 ff ff       	call   c0011bf4 <VAS::~VAS()>
c001d4b5:	58                   	pop    eax
c001d4b6:	5a                   	pop    edx
c001d4b7:	6a 10                	push   0x10
c001d4b9:	53                   	push   ebx
c001d4ba:	e8 e6 50 ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c001d4bf:	83 c4 10             	add    esp,0x10
c001d4c2:	83 ec 0c             	sub    esp,0xc
c001d4c5:	68 8f a6 02 c0       	push   0xc002a68f
c001d4ca:	e8 b6 51 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001d4cf:	83 c4 10             	add    esp,0x10
c001d4d2:	83 ec 08             	sub    esp,0x8
c001d4d5:	68 3f 07 00 00       	push   0x73f
c001d4da:	68 9d a6 02 c0       	push   0xc002a69d
c001d4df:	e8 a1 51 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001d4e4:	83 c4 2c             	add    esp,0x2c
c001d4e7:	5b                   	pop    ebx
c001d4e8:	5e                   	pop    esi
c001d4e9:	5f                   	pop    edi
c001d4ea:	5d                   	pop    ebp
c001d4eb:	c3                   	ret    
c001d4ec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d4f0:	83 ec 0c             	sub    esp,0xc
c001d4f3:	68 78 a9 02 c0       	push   0xc002a978
c001d4f8:	e8 a2 c2 ff ff       	call   c001979f <Krnl::panic(char const*)>
c001d4fd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d500:	83 c4 10             	add    esp,0x10
c001d503:	89 f7                	mov    edi,esi
c001d505:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d509:	e9 8e fe ff ff       	jmp    c001d39c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d50e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d514:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001d51a:	75 1c                	jne    c001d538 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d51c:	83 ec 0c             	sub    esp,0xc
c001d51f:	68 e0 a9 02 c0       	push   0xc002a9e0
c001d524:	e8 5c 51 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001d529:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001d530:	e8 8f fb ff ff       	call   c001d0c4 <blockTask(TaskState)>
c001d535:	83 c4 10             	add    esp,0x10
c001d538:	83 ec 08             	sub    esp,0x8
c001d53b:	56                   	push   esi
c001d53c:	68 88 dd 02 c0       	push   0xc002dd88
c001d541:	e8 ba 9e 00 00       	call   c0027400 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d546:	c7 04 24 88 dd 02 c0 	mov    DWORD PTR [esp],0xc002dd88
c001d54d:	e8 dc 9d 00 00       	call   c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d552:	83 c4 10             	add    esp,0x10
c001d555:	39 f8                	cmp    eax,edi
c001d557:	0f 84 1c ff ff ff    	je     c001d479 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001d55d:	83 ec 0c             	sub    esp,0xc
c001d560:	68 88 dd 02 c0       	push   0xc002dd88
c001d565:	e8 c4 9d 00 00       	call   c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d56a:	c7 04 24 88 dd 02 c0 	mov    DWORD PTR [esp],0xc002dd88
c001d571:	89 c6                	mov    esi,eax
c001d573:	e8 da 9d 00 00       	call   c0027352 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d578:	83 c4 10             	add    esp,0x10
c001d57b:	39 f3                	cmp    ebx,esi
c001d57d:	74 b9                	je     c001d538 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d57f:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001d582:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d585:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001d58b:	75 ab                	jne    c001d538 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d58d:	e9 7c ff ff ff       	jmp    c001d50e <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001d592:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d596:	83 ec 0c             	sub    esp,0xc
c001d599:	68 ac a9 02 c0       	push   0xc002a9ac
c001d59e:	e9 55 ff ff ff       	jmp    c001d4f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001d5a3:	8b 36                	mov    esi,DWORD PTR [esi]
c001d5a5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d5a9:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001d5ac:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d5af:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001d5b5:	01 d7                	add    edi,edx
c001d5b7:	89 f8                	mov    eax,edi
c001d5b9:	e9 44 fe ff ff       	jmp    c001d402 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001d5be <cleanerTaskFunction(void*)>:
c001d5be:	53                   	push   ebx
c001d5bf:	83 ec 08             	sub    esp,0x8
c001d5c2:	e8 69 f6 ff ff       	call   c001cc30 <unlockScheduler()>
c001d5c7:	e8 62 f6 ff ff       	call   c001cc2e <lockScheduler()>
c001d5cc:	80 3d 4c dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dd4c,0x0
c001d5d3:	0f 85 8e 00 00 00    	jne    c001d667 <cleanerTaskFunction(void*)+0xa9>
c001d5d9:	83 ec 0c             	sub    esp,0xc
c001d5dc:	6a 02                	push   0x2
c001d5de:	e8 9f fa ff ff       	call   c001d082 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d5e3:	83 c4 10             	add    esp,0x10
c001d5e6:	c6 05 4c dd 02 c0 00 	mov    BYTE PTR ds:0xc002dd4c,0x0
c001d5ed:	e8 63 f6 ff ff       	call   c001cc55 <lockStuff()>
c001d5f2:	e8 37 f6 ff ff       	call   c001cc2e <lockScheduler()>
c001d5f7:	83 ec 0c             	sub    esp,0xc
c001d5fa:	68 70 dd 02 c0       	push   0xc002dd70
c001d5ff:	e8 32 9d 00 00       	call   c0027336 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d604:	83 c4 10             	add    esp,0x10
c001d607:	84 c0                	test   al,al
c001d609:	75 40                	jne    c001d64b <cleanerTaskFunction(void*)+0x8d>
c001d60b:	83 ec 0c             	sub    esp,0xc
c001d60e:	68 70 dd 02 c0       	push   0xc002dd70
c001d613:	e8 16 9d 00 00       	call   c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d618:	c7 04 24 70 dd 02 c0 	mov    DWORD PTR [esp],0xc002dd70
c001d61f:	89 c3                	mov    ebx,eax
c001d621:	e8 2c 9d 00 00       	call   c0027352 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d626:	c7 04 24 b3 a6 02 c0 	mov    DWORD PTR [esp],0xc002a6b3
c001d62d:	e8 53 50 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001d632:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d635:	e8 bb fc ff ff       	call   c001d2f5 <cleanupTerminatedTask(ThreadControlBlock*)>
c001d63a:	c7 04 24 cc a6 02 c0 	mov    DWORD PTR [esp],0xc002a6cc
c001d641:	e8 3f 50 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001d646:	83 c4 10             	add    esp,0x10
c001d649:	eb ac                	jmp    c001d5f7 <cleanerTaskFunction(void*)+0x39>
c001d64b:	e8 e0 f5 ff ff       	call   c001cc30 <unlockScheduler()>
c001d650:	e8 9a f9 ff ff       	call   c001cfef <unlockStuff()>
c001d655:	e8 d4 f5 ff ff       	call   c001cc2e <lockScheduler()>
c001d65a:	80 3d 4c dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dd4c,0x0
c001d661:	0f 84 72 ff ff ff    	je     c001d5d9 <cleanerTaskFunction(void*)+0x1b>
c001d667:	e8 c4 f5 ff ff       	call   c001cc30 <unlockScheduler()>
c001d66c:	e9 75 ff ff ff       	jmp    c001d5e6 <cleanerTaskFunction(void*)+0x28>

c001d671 <terminateTask(int)>:
c001d671:	83 ec 14             	sub    esp,0x14
c001d674:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d679:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d67c:	83 c0 0c             	add    eax,0xc
c001d67f:	50                   	push   eax
c001d680:	68 08 aa 02 c0       	push   0xc002aa08
c001d685:	e8 fb 4f ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001d68a:	e8 c6 f5 ff ff       	call   c001cc55 <lockStuff()>
c001d68f:	e8 9a f5 ff ff       	call   c001cc2e <lockScheduler()>
c001d694:	c7 04 24 df a6 02 c0 	mov    DWORD PTR [esp],0xc002a6df
c001d69b:	e8 e5 4f ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001d6a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d6a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6a9:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001d6ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6b1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001d6b4:	5a                   	pop    edx
c001d6b5:	59                   	pop    ecx
c001d6b6:	50                   	push   eax
c001d6b7:	68 70 dd 02 c0       	push   0xc002dd70
c001d6bc:	e8 3f 9d 00 00       	call   c0027400 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d6c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6c6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001d6cd:	c7 04 24 f9 a6 02 c0 	mov    DWORD PTR [esp],0xc002a6f9
c001d6d4:	e8 ac 4f ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001d6d9:	83 c4 10             	add    esp,0x10
c001d6dc:	a1 48 dd 02 c0       	mov    eax,ds:0xc002dd48
c001d6e1:	85 c0                	test   eax,eax
c001d6e3:	74 5a                	je     c001d73f <terminateTask(int)+0xce>
c001d6e5:	83 ec 0c             	sub    esp,0xc
c001d6e8:	68 13 a7 02 c0       	push   0xc002a713
c001d6ed:	e8 93 4f ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001d6f2:	58                   	pop    eax
c001d6f3:	c6 05 4c dd 02 c0 01 	mov    BYTE PTR ds:0xc002dd4c,0x1
c001d6fa:	ff 35 48 dd 02 c0    	push   DWORD PTR ds:0xc002dd48
c001d700:	e8 41 fb ff ff       	call   c001d246 <unblockTask(ThreadControlBlock*)>
c001d705:	c7 04 24 2d a7 02 c0 	mov    DWORD PTR [esp],0xc002a72d
c001d70c:	e8 74 4f ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001d711:	83 c4 10             	add    esp,0x10
c001d714:	e8 17 f5 ff ff       	call   c001cc30 <unlockScheduler()>
c001d719:	e8 d1 f8 ff ff       	call   c001cfef <unlockStuff()>
c001d71e:	83 ec 0c             	sub    esp,0xc
c001d721:	68 65 a7 02 c0       	push   0xc002a765
c001d726:	e8 5a 4f ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001d72b:	83 c4 10             	add    esp,0x10
c001d72e:	e8 fb f4 ff ff       	call   c001cc2e <lockScheduler()>
c001d733:	e8 32 f8 ff ff       	call   c001cf6a <schedule()>
c001d738:	e8 f3 f4 ff ff       	call   c001cc30 <unlockScheduler()>
c001d73d:	eb ef                	jmp    c001d72e <terminateTask(int)+0xbd>
c001d73f:	83 ec 0c             	sub    esp,0xc
c001d742:	68 47 a7 02 c0       	push   0xc002a747
c001d747:	e8 39 4f ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001d74c:	83 c4 10             	add    esp,0x10
c001d74f:	eb c3                	jmp    c001d714 <terminateTask(int)+0xa3>

c001d751 <Thr::terminateFromIRQ(int)>:
c001d751:	83 ec 18             	sub    esp,0x18
c001d754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d758:	e8 14 ff ff ff       	call   c001d671 <terminateTask(int)>
c001d75d:	90                   	nop

c001d75e <Semaphore::release()>:
c001d75e:	83 ec 0c             	sub    esp,0xc
c001d761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d765:	e8 eb f4 ff ff       	call   c001cc55 <lockStuff()>
c001d76a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d76d:	85 d2                	test   edx,edx
c001d76f:	74 1a                	je     c001d78b <Semaphore::release()+0x2d>
c001d771:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001d774:	83 ec 0c             	sub    esp,0xc
c001d777:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001d77a:	52                   	push   edx
c001d77b:	e8 c6 fa ff ff       	call   c001d246 <unblockTask(ThreadControlBlock*)>
c001d780:	83 c4 10             	add    esp,0x10
c001d783:	83 c4 0c             	add    esp,0xc
c001d786:	e9 64 f8 ff ff       	jmp    c001cfef <unlockStuff()>
c001d78b:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001d78e:	83 c4 0c             	add    esp,0xc
c001d791:	e9 59 f8 ff ff       	jmp    c001cfef <unlockStuff()>

c001d796 <__static_initialization_and_destruction_0(int, int)>:
c001d796:	83 ec 0c             	sub    esp,0xc
c001d799:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001d79e:	0f 85 88 00 00 00    	jne    c001d82c <__static_initialization_and_destruction_0(int, int)+0x96>
c001d7a4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001d7ac:	75 7e                	jne    c001d82c <__static_initialization_and_destruction_0(int, int)+0x96>
c001d7ae:	83 ec 0c             	sub    esp,0xc
c001d7b1:	68 88 dd 02 c0       	push   0xc002dd88
c001d7b6:	e8 f5 9d 00 00       	call   c00275b0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d7bb:	83 c4 10             	add    esp,0x10
c001d7be:	83 ec 04             	sub    esp,0x4
c001d7c1:	68 68 b7 02 c0       	push   0xc002b768
c001d7c6:	68 88 dd 02 c0       	push   0xc002dd88
c001d7cb:	68 70 75 02 c0       	push   0xc0027570
c001d7d0:	e8 4a 4d ff ff       	call   c001251f <__cxa_atexit>
c001d7d5:	83 c4 10             	add    esp,0x10
c001d7d8:	83 ec 0c             	sub    esp,0xc
c001d7db:	68 7c dd 02 c0       	push   0xc002dd7c
c001d7e0:	e8 cb 9d 00 00       	call   c00275b0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d7e5:	83 c4 10             	add    esp,0x10
c001d7e8:	83 ec 04             	sub    esp,0x4
c001d7eb:	68 68 b7 02 c0       	push   0xc002b768
c001d7f0:	68 7c dd 02 c0       	push   0xc002dd7c
c001d7f5:	68 70 75 02 c0       	push   0xc0027570
c001d7fa:	e8 20 4d ff ff       	call   c001251f <__cxa_atexit>
c001d7ff:	83 c4 10             	add    esp,0x10
c001d802:	83 ec 0c             	sub    esp,0xc
c001d805:	68 70 dd 02 c0       	push   0xc002dd70
c001d80a:	e8 a1 9d 00 00       	call   c00275b0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d80f:	83 c4 10             	add    esp,0x10
c001d812:	83 ec 04             	sub    esp,0x4
c001d815:	68 68 b7 02 c0       	push   0xc002b768
c001d81a:	68 70 dd 02 c0       	push   0xc002dd70
c001d81f:	68 70 75 02 c0       	push   0xc0027570
c001d824:	e8 f6 4c ff ff       	call   c001251f <__cxa_atexit>
c001d829:	83 c4 10             	add    esp,0x10
c001d82c:	90                   	nop
c001d82d:	83 c4 0c             	add    esp,0xc
c001d830:	c3                   	ret    

c001d831 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001d831:	83 ec 0c             	sub    esp,0xc
c001d834:	83 ec 08             	sub    esp,0x8
c001d837:	68 ff ff 00 00       	push   0xffff
c001d83c:	6a 01                	push   0x1
c001d83e:	e8 53 ff ff ff       	call   c001d796 <__static_initialization_and_destruction_0(int, int)>
c001d843:	83 c4 10             	add    esp,0x10
c001d846:	83 c4 0c             	add    esp,0xc
c001d849:	c3                   	ret    

c001d84a <Vm::inbv(unsigned short)>:
c001d84a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d84e:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d853:	75 06                	jne    c001d85b <Vm::inbv(unsigned short)+0x11>
c001d855:	a0 cc dd 02 c0       	mov    al,ds:0xc002ddcc
c001d85a:	c3                   	ret    
c001d85b:	ec                   	in     al,dx
c001d85c:	c3                   	ret    

c001d85d <Vm::outbv(unsigned short, unsigned char)>:
c001d85d:	53                   	push   ebx
c001d85e:	83 ec 08             	sub    esp,0x8
c001d861:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d865:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d869:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d86e:	75 38                	jne    c001d8a8 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001d870:	0f b6 c3             	movzx  eax,bl
c001d873:	51                   	push   ecx
c001d874:	51                   	push   ecx
c001d875:	50                   	push   eax
c001d876:	68 27 aa 02 c0       	push   0xc002aa27
c001d87b:	e8 05 4e ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001d880:	8b 15 cc dd 02 c0    	mov    edx,DWORD PTR ds:0xc002ddcc
c001d886:	83 c4 10             	add    esp,0x10
c001d889:	8d 42 01             	lea    eax,[edx+0x1]
c001d88c:	88 9a e0 dd 02 c0    	mov    BYTE PTR [edx-0x3ffd2220],bl
c001d892:	a3 cc dd 02 c0       	mov    ds:0xc002ddcc,eax
c001d897:	83 f8 20             	cmp    eax,0x20
c001d89a:	75 0f                	jne    c001d8ab <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001d89c:	c7 05 cc dd 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002ddcc,0x1f
c001d8a6:	eb 03                	jmp    c001d8ab <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001d8a8:	88 d8                	mov    al,bl
c001d8aa:	ee                   	out    dx,al
c001d8ab:	83 c4 08             	add    esp,0x8
c001d8ae:	5b                   	pop    ebx
c001d8af:	c3                   	ret    

c001d8b0 <Vm::realToLinear(unsigned short, unsigned short)>:
c001d8b0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d8b5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d8ba:	c1 e0 04             	shl    eax,0x4
c001d8bd:	01 d0                	add    eax,edx
c001d8bf:	c3                   	ret    

c001d8c0 <Vm::getSegment(unsigned int)>:
c001d8c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8c4:	c1 e8 10             	shr    eax,0x10
c001d8c7:	c3                   	ret    

c001d8c8 <Vm::getOffset(unsigned int)>:
c001d8c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8cc:	c3                   	ret    

c001d8cd <Vm::mainloop2()>:
c001d8cd:	83 ec 0c             	sub    esp,0xc
c001d8d0:	e8 59 f3 ff ff       	call   c001cc2e <lockScheduler()>
c001d8d5:	83 ec 0c             	sub    esp,0xc
c001d8d8:	c6 05 c5 dd 02 c0 01 	mov    BYTE PTR ds:0xc002ddc5,0x1
c001d8df:	6a 02                	push   0x2
c001d8e1:	e8 9c f7 ff ff       	call   c001d082 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d8e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d8eb:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001d8ef:	52                   	push   edx
c001d8f0:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001d8f4:	52                   	push   edx
c001d8f5:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001d8f9:	52                   	push   edx
c001d8fa:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001d8fe:	50                   	push   eax
c001d8ff:	e8 ab 29 fe ff       	call   c00002af <goToVM86>
c001d904:	83 c4 2c             	add    esp,0x2c
c001d907:	c3                   	ret    

c001d908 <Vm::mainVm8086Loop(void*)>:
c001d908:	83 ec 0c             	sub    esp,0xc
c001d90b:	e8 20 f3 ff ff       	call   c001cc30 <unlockScheduler()>
c001d910:	83 c4 0c             	add    esp,0xc
c001d913:	eb b8                	jmp    c001d8cd <Vm::mainloop2()>

c001d915 <Vm::mainloop3(unsigned long)>:
c001d915:	53                   	push   ebx
c001d916:	83 ec 08             	sub    esp,0x8
c001d919:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d91d:	e8 0c f3 ff ff       	call   c001cc2e <lockScheduler()>
c001d922:	83 ec 0c             	sub    esp,0xc
c001d925:	89 1d c0 dd 02 c0    	mov    DWORD PTR ds:0xc002ddc0,ebx
c001d92b:	6a 02                	push   0x2
c001d92d:	c6 05 c4 dd 02 c0 01 	mov    BYTE PTR ds:0xc002ddc4,0x1
c001d934:	e8 49 f7 ff ff       	call   c001d082 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d939:	83 c4 18             	add    esp,0x18
c001d93c:	5b                   	pop    ebx
c001d93d:	eb 8e                	jmp    c001d8cd <Vm::mainloop2()>

c001d93f <Vm::initialise8086()>:
c001d93f:	83 ec 0c             	sub    esp,0xc
c001d942:	68 80 00 00 00       	push   0x80
c001d947:	6a 00                	push   0x0
c001d949:	68 08 d9 01 c0       	push   0xc001d908
c001d94e:	ff 35 94 dd 02 c0    	push   DWORD PTR ds:0xc002dd94
c001d954:	e8 07 f4 ff ff       	call   c001cd60 <Process::createThread(void (*)(void*), void*, int)>
c001d959:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001d960:	a3 c8 dd 02 c0       	mov    ds:0xc002ddc8,eax
c001d965:	68 00 01 00 00       	push   0x100
c001d96a:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001d96f:	6a 00                	push   0x0
c001d971:	6a 00                	push   0x0
c001d973:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001d979:	e8 d6 46 ff ff       	call   c0012054 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001d97e:	83 c4 2c             	add    esp,0x2c
c001d981:	c3                   	ret    

c001d982 <Vm::finish8086()>:
c001d982:	53                   	push   ebx
c001d983:	83 ec 08             	sub    esp,0x8
c001d986:	e8 a3 f2 ff ff       	call   c001cc2e <lockScheduler()>
c001d98b:	80 3d c4 dd 02 c0 00 	cmp    BYTE PTR ds:0xc002ddc4,0x0
c001d992:	75 0c                	jne    c001d9a0 <Vm::finish8086()+0x1e>
c001d994:	e8 d1 f5 ff ff       	call   c001cf6a <schedule()>
c001d999:	e8 92 f2 ff ff       	call   c001cc30 <unlockScheduler()>
c001d99e:	eb e6                	jmp    c001d986 <Vm::finish8086()+0x4>
c001d9a0:	83 ec 0c             	sub    esp,0xc
c001d9a3:	8b 1d c0 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002ddc0
c001d9a9:	ff 35 c8 dd 02 c0    	push   DWORD PTR ds:0xc002ddc8
c001d9af:	c6 05 c4 dd 02 c0 00 	mov    BYTE PTR ds:0xc002ddc4,0x0
c001d9b6:	e8 8b f8 ff ff       	call   c001d246 <unblockTask(ThreadControlBlock*)>
c001d9bb:	e8 70 f2 ff ff       	call   c001cc30 <unlockScheduler()>
c001d9c0:	89 d8                	mov    eax,ebx
c001d9c2:	83 c4 18             	add    esp,0x18
c001d9c5:	5b                   	pop    ebx
c001d9c6:	c3                   	ret    

c001d9c7 <Vm::getOutput8086(unsigned char*)>:
c001d9c7:	83 ec 10             	sub    esp,0x10
c001d9ca:	ff 35 cc dd 02 c0    	push   DWORD PTR ds:0xc002ddcc
c001d9d0:	68 e0 dd 02 c0       	push   0xc002dde0
c001d9d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d9d9:	e8 77 2c fe ff       	call   c0000655 <memcpy>
c001d9de:	a1 cc dd 02 c0       	mov    eax,ds:0xc002ddcc
c001d9e3:	c7 05 cc dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ddcc,0x0
c001d9ed:	83 c4 1c             	add    esp,0x1c
c001d9f0:	c3                   	ret    

c001d9f1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001d9f1:	55                   	push   ebp
c001d9f2:	57                   	push   edi
c001d9f3:	56                   	push   esi
c001d9f4:	53                   	push   ebx
c001d9f5:	83 ec 2c             	sub    esp,0x2c
c001d9f8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d9fc:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001da00:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001da04:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001da08:	e8 21 f2 ff ff       	call   c001cc2e <lockScheduler()>
c001da0d:	a0 c5 dd 02 c0       	mov    al,ds:0xc002ddc5
c001da12:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001da16:	84 c0                	test   al,al
c001da18:	75 0c                	jne    c001da26 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001da1a:	e8 4b f5 ff ff       	call   c001cf6a <schedule()>
c001da1f:	e8 0c f2 ff ff       	call   c001cc30 <unlockScheduler()>
c001da24:	eb e2                	jmp    c001da08 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001da26:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c001da2b:	c7 05 cc dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ddcc,0x0
c001da35:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001da39:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001da3d:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001da41:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001da45:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001da49:	50                   	push   eax
c001da4a:	6a 20                	push   0x20
c001da4c:	6a 00                	push   0x0
c001da4e:	68 e0 dd 02 c0       	push   0xc002dde0
c001da53:	e8 33 2c fe ff       	call   c000068b <memset>
c001da58:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001da5f:	e8 70 1a ff ff       	call   c000f4d4 <malloc>
c001da64:	83 c4 0c             	add    esp,0xc
c001da67:	89 c7                	mov    edi,eax
c001da69:	ff 35 94 dd 02 c0    	push   DWORD PTR ds:0xc002dd94
c001da6f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001da73:	50                   	push   eax
c001da74:	e8 3b 51 ff ff       	call   c0012bb4 <File::File(char const*, Process*)>
c001da79:	83 c4 10             	add    esp,0x10
c001da7c:	85 ff                	test   edi,edi
c001da7e:	75 0a                	jne    c001da8a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001da80:	83 ec 0c             	sub    esp,0xc
c001da83:	68 43 aa 02 c0       	push   0xc002aa43
c001da88:	eb 27                	jmp    c001dab1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001da8a:	50                   	push   eax
c001da8b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001da8f:	50                   	push   eax
c001da90:	8d 44 24 20          	lea    eax,[esp+0x20]
c001da94:	50                   	push   eax
c001da95:	57                   	push   edi
c001da96:	e8 29 54 ff ff       	call   c0012ec4 <File::stat(unsigned long long*, bool*)>
c001da9b:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001daa0:	83 c4 10             	add    esp,0x10
c001daa3:	89 e8                	mov    eax,ebp
c001daa5:	84 c0                	test   al,al
c001daa7:	74 19                	je     c001dac2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001daa9:	83 ec 0c             	sub    esp,0xc
c001daac:	68 57 aa 02 c0       	push   0xc002aa57
c001dab1:	e8 e9 bc ff ff       	call   c001979f <Krnl::panic(char const*)>
c001dab6:	31 ed                	xor    ebp,ebp
c001dab8:	e8 73 f1 ff ff       	call   c001cc30 <unlockScheduler()>
c001dabd:	83 c4 10             	add    esp,0x10
c001dac0:	eb 75                	jmp    c001db37 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dac2:	50                   	push   eax
c001dac3:	50                   	push   eax
c001dac4:	6a 01                	push   0x1
c001dac6:	57                   	push   edi
c001dac7:	e8 4c 51 ff ff       	call   c0012c18 <File::open(FileOpenMode)>
c001dacc:	83 c4 10             	add    esp,0x10
c001dacf:	85 c0                	test   eax,eax
c001dad1:	74 17                	je     c001daea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001dad3:	83 ec 0c             	sub    esp,0xc
c001dad6:	68 70 aa 02 c0       	push   0xc002aa70
c001dadb:	e8 bf bc ff ff       	call   c001979f <Krnl::panic(char const*)>
c001dae0:	e8 4b f1 ff ff       	call   c001cc30 <unlockScheduler()>
c001dae5:	83 c4 10             	add    esp,0x10
c001dae8:	eb 4d                	jmp    c001db37 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001daea:	0f b7 f6             	movzx  esi,si
c001daed:	50                   	push   eax
c001daee:	0f b7 db             	movzx  ebx,bx
c001daf1:	50                   	push   eax
c001daf2:	56                   	push   esi
c001daf3:	53                   	push   ebx
c001daf4:	e8 b7 fd ff ff       	call   c001d8b0 <Vm::realToLinear(unsigned short, unsigned short)>
c001daf9:	5a                   	pop    edx
c001dafa:	8b 17                	mov    edx,DWORD PTR [edi]
c001dafc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001db00:	51                   	push   ecx
c001db01:	50                   	push   eax
c001db02:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001db06:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001db0a:	57                   	push   edi
c001db0b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001db0e:	83 c4 14             	add    esp,0x14
c001db11:	57                   	push   edi
c001db12:	e8 5f 51 ff ff       	call   c0012c76 <File::close()>
c001db17:	c6 05 c5 dd 02 c0 00 	mov    BYTE PTR ds:0xc002ddc5,0x0
c001db1e:	e8 0d f1 ff ff       	call   c001cc30 <unlockScheduler()>
c001db23:	59                   	pop    ecx
c001db24:	ff 35 c8 dd 02 c0    	push   DWORD PTR ds:0xc002ddc8
c001db2a:	e8 17 f7 ff ff       	call   c001d246 <unblockTask(ThreadControlBlock*)>
c001db2f:	83 c4 10             	add    esp,0x10
c001db32:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001db37:	83 c4 2c             	add    esp,0x2c
c001db3a:	89 e8                	mov    eax,ebp
c001db3c:	5b                   	pop    ebx
c001db3d:	5e                   	pop    esi
c001db3e:	5f                   	pop    edi
c001db3f:	5d                   	pop    ebp
c001db40:	c3                   	ret    

c001db41 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001db41:	57                   	push   edi
c001db42:	56                   	push   esi
c001db43:	53                   	push   ebx
c001db44:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db4c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001db50:	83 e8 06             	sub    eax,0x6
c001db53:	0f b7 c0             	movzx  eax,ax
c001db56:	50                   	push   eax
c001db57:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001db5c:	50                   	push   eax
c001db5d:	e8 4e fd ff ff       	call   c001d8b0 <Vm::realToLinear(unsigned short, unsigned short)>
c001db62:	5a                   	pop    edx
c001db63:	5e                   	pop    esi
c001db64:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001db67:	8d 56 fa             	lea    edx,[esi-0x6]
c001db6a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001db70:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001db73:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001db76:	83 c2 02             	add    edx,0x2
c001db79:	66 89 10             	mov    WORD PTR [eax],dx
c001db7c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001db7f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001db83:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001db86:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001db8a:	89 d6                	mov    esi,edx
c001db8c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001db92:	66 81 e6 ff fd       	and    si,0xfdff
c001db97:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001db9b:	74 07                	je     c001dba4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001db9d:	89 d6                	mov    esi,edx
c001db9f:	66 81 ce 00 02       	or     si,0x200
c001dba4:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001dba8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbad:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001dbb1:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001dbb9:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001dbbc:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001dbc4:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dbc7:	5b                   	pop    ebx
c001dbc8:	5e                   	pop    esi
c001dbc9:	5f                   	pop    edi
c001dbca:	c3                   	ret    

c001dbcb <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001dbcb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dbd0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dbd5:	c1 e0 04             	shl    eax,0x4
c001dbd8:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001dbdb:	c3                   	ret    

c001dbdc <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001dbdc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dbe1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dbe6:	c1 e0 04             	shl    eax,0x4
c001dbe9:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001dbed:	c3                   	ret    

c001dbee <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001dbee:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dbf3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dbf8:	c1 e0 04             	shl    eax,0x4
c001dbfb:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001dbfe:	c3                   	ret    

c001dbff <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001dbff:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dc04:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dc09:	c1 e0 04             	shl    eax,0x4
c001dc0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dc10:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001dc13:	c3                   	ret    

c001dc14 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001dc14:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dc19:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dc1e:	c1 e0 04             	shl    eax,0x4
c001dc21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dc25:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001dc29:	c3                   	ret    

c001dc2a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001dc2a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dc2f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dc34:	c1 e0 04             	shl    eax,0x4
c001dc37:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dc3b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001dc3e:	c3                   	ret    

c001dc3f <Vm::faultHandler(regs*)>:
c001dc3f:	55                   	push   ebp
c001dc40:	57                   	push   edi
c001dc41:	56                   	push   esi
c001dc42:	53                   	push   ebx
c001dc43:	83 ec 1c             	sub    esp,0x1c
c001dc46:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dc4a:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001dc4d:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001dc50:	0f b7 c1             	movzx  eax,cx
c001dc53:	50                   	push   eax
c001dc54:	0f b7 c3             	movzx  eax,bx
c001dc57:	c1 e3 04             	shl    ebx,0x4
c001dc5a:	50                   	push   eax
c001dc5b:	e8 50 fc ff ff       	call   c001d8b0 <Vm::realToLinear(unsigned short, unsigned short)>
c001dc60:	5a                   	pop    edx
c001dc61:	89 c5                	mov    ebp,eax
c001dc63:	5e                   	pop    esi
c001dc64:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001dc68:	50                   	push   eax
c001dc69:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001dc6d:	50                   	push   eax
c001dc6e:	e8 3d fc ff ff       	call   c001d8b0 <Vm::realToLinear(unsigned short, unsigned short)>
c001dc73:	01 cb                	add    ebx,ecx
c001dc75:	89 c6                	mov    esi,eax
c001dc77:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001dc7b:	50                   	push   eax
c001dc7c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dc80:	50                   	push   eax
c001dc81:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001dc85:	50                   	push   eax
c001dc86:	55                   	push   ebp
c001dc87:	53                   	push   ebx
c001dc88:	b3 06                	mov    bl,0x6
c001dc8a:	68 89 aa 02 c0       	push   0xc002aa89
c001dc8f:	e8 f1 49 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001dc94:	83 c4 20             	add    esp,0x20
c001dc97:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001dc9c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001dca1:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001dca5:	3c 9d                	cmp    al,0x9d
c001dca7:	0f 84 d7 02 00 00    	je     c001df84 <Vm::faultHandler(regs*)+0x345>
c001dcad:	0f 87 a3 00 00 00    	ja     c001dd56 <Vm::faultHandler(regs*)+0x117>
c001dcb3:	3c 66                	cmp    al,0x66
c001dcb5:	0f 84 15 02 00 00    	je     c001ded0 <Vm::faultHandler(regs*)+0x291>
c001dcbb:	77 5f                	ja     c001dd1c <Vm::faultHandler(regs*)+0xdd>
c001dcbd:	3c 36                	cmp    al,0x36
c001dcbf:	0f 84 f1 01 00 00    	je     c001deb6 <Vm::faultHandler(regs*)+0x277>
c001dcc5:	77 28                	ja     c001dcef <Vm::faultHandler(regs*)+0xb0>
c001dcc7:	3c 26                	cmp    al,0x26
c001dcc9:	0f 84 99 01 00 00    	je     c001de68 <Vm::faultHandler(regs*)+0x229>
c001dccf:	3c 2e                	cmp    al,0x2e
c001dcd1:	0f 85 3b 07 00 00    	jne    c001e412 <Vm::faultHandler(regs*)+0x7d3>
c001dcd7:	83 ec 0c             	sub    esp,0xc
c001dcda:	31 db                	xor    ebx,ebx
c001dcdc:	68 9e aa 02 c0       	push   0xc002aa9e
c001dce1:	e8 9f 49 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001dce6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dce9:	83 c4 10             	add    esp,0x10
c001dcec:	45                   	inc    ebp
c001dced:	eb b2                	jmp    c001dca1 <Vm::faultHandler(regs*)+0x62>
c001dcef:	3c 64                	cmp    al,0x64
c001dcf1:	0f 84 8b 01 00 00    	je     c001de82 <Vm::faultHandler(regs*)+0x243>
c001dcf7:	0f 87 9f 01 00 00    	ja     c001de9c <Vm::faultHandler(regs*)+0x25d>
c001dcfd:	3c 3e                	cmp    al,0x3e
c001dcff:	0f 85 0d 07 00 00    	jne    c001e412 <Vm::faultHandler(regs*)+0x7d3>
c001dd05:	83 ec 0c             	sub    esp,0xc
c001dd08:	b3 01                	mov    bl,0x1
c001dd0a:	68 a2 aa 02 c0       	push   0xc002aaa2
c001dd0f:	e8 71 49 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001dd14:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dd17:	83 c4 10             	add    esp,0x10
c001dd1a:	eb d0                	jmp    c001dcec <Vm::faultHandler(regs*)+0xad>
c001dd1c:	3c 6d                	cmp    al,0x6d
c001dd1e:	0f 84 af 03 00 00    	je     c001e0d3 <Vm::faultHandler(regs*)+0x494>
c001dd24:	77 15                	ja     c001dd3b <Vm::faultHandler(regs*)+0xfc>
c001dd26:	3c 67                	cmp    al,0x67
c001dd28:	0f 84 bf 01 00 00    	je     c001deed <Vm::faultHandler(regs*)+0x2ae>
c001dd2e:	3c 6c                	cmp    al,0x6c
c001dd30:	0f 84 3f 03 00 00    	je     c001e075 <Vm::faultHandler(regs*)+0x436>
c001dd36:	e9 d7 06 00 00       	jmp    c001e412 <Vm::faultHandler(regs*)+0x7d3>
c001dd3b:	3c 6f                	cmp    al,0x6f
c001dd3d:	0f 84 a4 04 00 00    	je     c001e1e7 <Vm::faultHandler(regs*)+0x5a8>
c001dd43:	0f 82 11 04 00 00    	jb     c001e15a <Vm::faultHandler(regs*)+0x51b>
c001dd49:	3c 9c                	cmp    al,0x9c
c001dd4b:	0f 84 ba 01 00 00    	je     c001df0b <Vm::faultHandler(regs*)+0x2cc>
c001dd51:	e9 bc 06 00 00       	jmp    c001e412 <Vm::faultHandler(regs*)+0x7d3>
c001dd56:	3c ec                	cmp    al,0xec
c001dd58:	0f 84 24 06 00 00    	je     c001e382 <Vm::faultHandler(regs*)+0x743>
c001dd5e:	0f 87 93 00 00 00    	ja     c001ddf7 <Vm::faultHandler(regs*)+0x1b8>
c001dd64:	3c e4                	cmp    al,0xe4
c001dd66:	0f 84 5c 05 00 00    	je     c001e2c8 <Vm::faultHandler(regs*)+0x689>
c001dd6c:	77 6a                	ja     c001ddd8 <Vm::faultHandler(regs*)+0x199>
c001dd6e:	3c cd                	cmp    al,0xcd
c001dd70:	0f 84 7e 02 00 00    	je     c001dff4 <Vm::faultHandler(regs*)+0x3b5>
c001dd76:	3c cf                	cmp    al,0xcf
c001dd78:	0f 85 94 06 00 00    	jne    c001e412 <Vm::faultHandler(regs*)+0x7d3>
c001dd7e:	83 ec 0c             	sub    esp,0xc
c001dd81:	68 e6 aa 02 c0       	push   0xc002aae6
c001dd86:	e8 fa 48 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001dd8b:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001dd8e:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001dd91:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001dd95:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001dd98:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001dd9c:	0d 00 02 02 00       	or     eax,0x20200
c001dda1:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001dda4:	56                   	push   esi
c001dda5:	53                   	push   ebx
c001dda6:	52                   	push   edx
c001dda7:	68 ec aa 02 c0       	push   0xc002aaec
c001ddac:	e8 d4 48 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001ddb1:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ddb5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ddbb:	66 c1 e8 09          	shr    ax,0x9
c001ddbf:	83 e0 01             	and    eax,0x1
c001ddc2:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ddc5:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ddc8:	83 c0 06             	add    eax,0x6
c001ddcb:	25 ff ff 00 00       	and    eax,0xffff
c001ddd0:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ddd3:	e9 95 02 00 00       	jmp    c001e06d <Vm::faultHandler(regs*)+0x42e>
c001ddd8:	3c e6                	cmp    al,0xe6
c001ddda:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ddde:	0f 84 4e 05 00 00    	je     c001e332 <Vm::faultHandler(regs*)+0x6f3>
c001dde4:	0f 82 0a 05 00 00    	jb     c001e2f4 <Vm::faultHandler(regs*)+0x6b5>
c001ddea:	3c e7                	cmp    al,0xe7
c001ddec:	0f 84 69 05 00 00    	je     c001e35b <Vm::faultHandler(regs*)+0x71c>
c001ddf2:	e9 1b 06 00 00       	jmp    c001e412 <Vm::faultHandler(regs*)+0x7d3>
c001ddf7:	3c ef                	cmp    al,0xef
c001ddf9:	0f 84 e6 05 00 00    	je     c001e3e5 <Vm::faultHandler(regs*)+0x7a6>
c001ddff:	77 37                	ja     c001de38 <Vm::faultHandler(regs*)+0x1f9>
c001de01:	3c ed                	cmp    al,0xed
c001de03:	0f 84 a3 05 00 00    	je     c001e3ac <Vm::faultHandler(regs*)+0x76d>
c001de09:	3c ee                	cmp    al,0xee
c001de0b:	0f 85 01 06 00 00    	jne    c001e412 <Vm::faultHandler(regs*)+0x7d3>
c001de11:	52                   	push   edx
c001de12:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001de15:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001de18:	68 87 ab 02 c0       	push   0xc002ab87
c001de1d:	e8 63 48 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001de22:	59                   	pop    ecx
c001de23:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001de27:	5b                   	pop    ebx
c001de28:	50                   	push   eax
c001de29:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001de2d:	50                   	push   eax
c001de2e:	e8 2a fa ff ff       	call   c001d85d <Vm::outbv(unsigned short, unsigned char)>
c001de33:	e9 a5 05 00 00       	jmp    c001e3dd <Vm::faultHandler(regs*)+0x79e>
c001de38:	3c fa                	cmp    al,0xfa
c001de3a:	0f 84 f7 01 00 00    	je     c001e037 <Vm::faultHandler(regs*)+0x3f8>
c001de40:	3c fb                	cmp    al,0xfb
c001de42:	0f 84 0a 02 00 00    	je     c001e052 <Vm::faultHandler(regs*)+0x413>
c001de48:	3c f3                	cmp    al,0xf3
c001de4a:	0f 85 c2 05 00 00    	jne    c001e412 <Vm::faultHandler(regs*)+0x7d3>
c001de50:	83 ec 0c             	sub    esp,0xc
c001de53:	68 bf aa 02 c0       	push   0xc002aabf
c001de58:	e8 28 48 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001de5d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001de60:	83 c4 10             	add    esp,0x10
c001de63:	e9 84 fe ff ff       	jmp    c001dcec <Vm::faultHandler(regs*)+0xad>
c001de68:	83 ec 0c             	sub    esp,0xc
c001de6b:	b3 02                	mov    bl,0x2
c001de6d:	68 9a aa 02 c0       	push   0xc002aa9a
c001de72:	e8 0e 48 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001de77:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001de7a:	83 c4 10             	add    esp,0x10
c001de7d:	e9 6a fe ff ff       	jmp    c001dcec <Vm::faultHandler(regs*)+0xad>
c001de82:	83 ec 0c             	sub    esp,0xc
c001de85:	b3 03                	mov    bl,0x3
c001de87:	68 a6 aa 02 c0       	push   0xc002aaa6
c001de8c:	e8 f4 47 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001de91:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001de94:	83 c4 10             	add    esp,0x10
c001de97:	e9 50 fe ff ff       	jmp    c001dcec <Vm::faultHandler(regs*)+0xad>
c001de9c:	83 ec 0c             	sub    esp,0xc
c001de9f:	b3 04                	mov    bl,0x4
c001dea1:	68 aa aa 02 c0       	push   0xc002aaaa
c001dea6:	e8 da 47 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001deab:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001deae:	83 c4 10             	add    esp,0x10
c001deb1:	e9 36 fe ff ff       	jmp    c001dcec <Vm::faultHandler(regs*)+0xad>
c001deb6:	83 ec 0c             	sub    esp,0xc
c001deb9:	b3 05                	mov    bl,0x5
c001debb:	68 ae aa 02 c0       	push   0xc002aaae
c001dec0:	e8 c0 47 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001dec5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dec8:	83 c4 10             	add    esp,0x10
c001decb:	e9 1c fe ff ff       	jmp    c001dcec <Vm::faultHandler(regs*)+0xad>
c001ded0:	83 ec 0c             	sub    esp,0xc
c001ded3:	68 b2 aa 02 c0       	push   0xc002aab2
c001ded8:	e8 a8 47 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001dedd:	83 c4 10             	add    esp,0x10
c001dee0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dee3:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001dee8:	e9 ff fd ff ff       	jmp    c001dcec <Vm::faultHandler(regs*)+0xad>
c001deed:	50                   	push   eax
c001deee:	50                   	push   eax
c001deef:	6a 01                	push   0x1
c001def1:	68 b7 aa 02 c0       	push   0xc002aab7
c001def6:	e8 8a 47 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001defb:	83 c4 10             	add    esp,0x10
c001defe:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df01:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001df06:	e9 e1 fd ff ff       	jmp    c001dcec <Vm::faultHandler(regs*)+0xad>
c001df0b:	83 ec 0c             	sub    esp,0xc
c001df0e:	68 c5 aa 02 c0       	push   0xc002aac5
c001df13:	e8 6d 47 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001df18:	83 c4 10             	add    esp,0x10
c001df1b:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001df1e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001df23:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001df26:	74 2f                	je     c001df57 <Vm::faultHandler(regs*)+0x318>
c001df28:	83 ea 04             	sub    edx,0x4
c001df2b:	25 ff 0d 00 00       	and    eax,0xdff
c001df30:	81 e2 ff ff 00 00    	and    edx,0xffff
c001df36:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001df39:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001df3c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001df42:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001df46:	0f 84 bf 04 00 00    	je     c001e40b <Vm::faultHandler(regs*)+0x7cc>
c001df4c:	80 cc 02             	or     ah,0x2
c001df4f:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001df52:	e9 b4 04 00 00       	jmp    c001e40b <Vm::faultHandler(regs*)+0x7cc>
c001df57:	83 ea 02             	sub    edx,0x2
c001df5a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001df60:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001df63:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001df67:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001df6d:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001df71:	74 05                	je     c001df78 <Vm::faultHandler(regs*)+0x339>
c001df73:	80 cc 02             	or     ah,0x2
c001df76:	eb 03                	jmp    c001df7b <Vm::faultHandler(regs*)+0x33c>
c001df78:	80 e4 fd             	and    ah,0xfd
c001df7b:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001df7f:	e9 87 04 00 00       	jmp    c001e40b <Vm::faultHandler(regs*)+0x7cc>
c001df84:	83 ec 0c             	sub    esp,0xc
c001df87:	68 cc aa 02 c0       	push   0xc002aacc
c001df8c:	e8 f4 46 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001df91:	83 c4 10             	add    esp,0x10
c001df94:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001df99:	74 28                	je     c001dfc3 <Vm::faultHandler(regs*)+0x384>
c001df9b:	8b 06                	mov    eax,DWORD PTR [esi]
c001df9d:	25 ff 0d 00 00       	and    eax,0xdff
c001dfa2:	0d 00 02 02 00       	or     eax,0x20200
c001dfa7:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001dfaa:	8b 06                	mov    eax,DWORD PTR [esi]
c001dfac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dfb2:	c1 e8 09             	shr    eax,0x9
c001dfb5:	83 e0 01             	and    eax,0x1
c001dfb8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001dfbb:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001dfbe:	83 c0 04             	add    eax,0x4
c001dfc1:	eb 24                	jmp    c001dfe7 <Vm::faultHandler(regs*)+0x3a8>
c001dfc3:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001dfc6:	0d 00 02 02 00       	or     eax,0x20200
c001dfcb:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001dfce:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dfd1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dfd7:	66 c1 e8 09          	shr    ax,0x9
c001dfdb:	83 e0 01             	and    eax,0x1
c001dfde:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001dfe1:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001dfe4:	83 c0 02             	add    eax,0x2
c001dfe7:	25 ff ff 00 00       	and    eax,0xffff
c001dfec:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001dfef:	e9 17 04 00 00       	jmp    c001e40b <Vm::faultHandler(regs*)+0x7cc>
c001dff4:	53                   	push   ebx
c001dff5:	53                   	push   ebx
c001dff6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dffa:	50                   	push   eax
c001dffb:	68 d2 aa 02 c0       	push   0xc002aad2
c001e000:	e8 80 46 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001e005:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e009:	83 c4 10             	add    esp,0x10
c001e00c:	3c ee                	cmp    al,0xee
c001e00e:	75 10                	jne    c001e020 <Vm::faultHandler(regs*)+0x3e1>
c001e010:	83 ec 0c             	sub    esp,0xc
c001e013:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e016:	e8 fa f8 ff ff       	call   c001d915 <Vm::mainloop3(unsigned long)>
c001e01b:	e9 c0 03 00 00       	jmp    c001e3e0 <Vm::faultHandler(regs*)+0x7a1>
c001e020:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e024:	83 ec 0c             	sub    esp,0xc
c001e027:	53                   	push   ebx
c001e028:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e02c:	53                   	push   ebx
c001e02d:	55                   	push   ebp
c001e02e:	50                   	push   eax
c001e02f:	57                   	push   edi
c001e030:	e8 0c fb ff ff       	call   c001db41 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e035:	eb 36                	jmp    c001e06d <Vm::faultHandler(regs*)+0x42e>
c001e037:	83 ec 0c             	sub    esp,0xc
c001e03a:	68 dc aa 02 c0       	push   0xc002aadc
c001e03f:	e8 41 46 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001e044:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e049:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e04d:	e9 8b 03 00 00       	jmp    c001e3dd <Vm::faultHandler(regs*)+0x79e>
c001e052:	83 ec 0c             	sub    esp,0xc
c001e055:	68 e1 aa 02 c0       	push   0xc002aae1
c001e05a:	e8 26 46 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001e05f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e064:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e068:	e9 70 03 00 00       	jmp    c001e3dd <Vm::faultHandler(regs*)+0x79e>
c001e06d:	83 c4 20             	add    esp,0x20
c001e070:	e9 99 03 00 00       	jmp    c001e40e <Vm::faultHandler(regs*)+0x7cf>
c001e075:	83 ec 0c             	sub    esp,0xc
c001e078:	68 1f ab 02 c0       	push   0xc002ab1f
c001e07d:	e8 03 46 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001e082:	83 c4 10             	add    esp,0x10
c001e085:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e088:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e08d:	74 0d                	je     c001e09c <Vm::faultHandler(regs*)+0x45d>
c001e08f:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e096:	0f 87 9e 01 00 00    	ja     c001e23a <Vm::faultHandler(regs*)+0x5fb>
c001e09c:	83 ec 0c             	sub    esp,0xc
c001e09f:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e0a3:	0f b7 db             	movzx  ebx,bx
c001e0a6:	50                   	push   eax
c001e0a7:	e8 9e f7 ff ff       	call   c001d84a <Vm::inbv(unsigned short)>
c001e0ac:	83 c4 0c             	add    esp,0xc
c001e0af:	0f b6 c0             	movzx  eax,al
c001e0b2:	50                   	push   eax
c001e0b3:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e0b7:	50                   	push   eax
c001e0b8:	53                   	push   ebx
c001e0b9:	e8 41 fb ff ff       	call   c001dbff <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e0be:	83 c4 10             	add    esp,0x10
c001e0c1:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e0c4:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e0c8:	74 03                	je     c001e0cd <Vm::faultHandler(regs*)+0x48e>
c001e0ca:	48                   	dec    eax
c001e0cb:	eb 01                	jmp    c001e0ce <Vm::faultHandler(regs*)+0x48f>
c001e0cd:	40                   	inc    eax
c001e0ce:	0f b7 c0             	movzx  eax,ax
c001e0d1:	eb 7f                	jmp    c001e152 <Vm::faultHandler(regs*)+0x513>
c001e0d3:	83 ec 0c             	sub    esp,0xc
c001e0d6:	68 51 ab 02 c0       	push   0xc002ab51
c001e0db:	e8 a5 45 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001e0e0:	83 c4 10             	add    esp,0x10
c001e0e3:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e0e6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e0eb:	74 0d                	je     c001e0fa <Vm::faultHandler(regs*)+0x4bb>
c001e0ed:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e0f4:	0f 87 40 01 00 00    	ja     c001e23a <Vm::faultHandler(regs*)+0x5fb>
c001e0fa:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e0fd:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e101:	0f b7 db             	movzx  ebx,bx
c001e104:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e109:	74 20                	je     c001e12b <Vm::faultHandler(regs*)+0x4ec>
c001e10b:	ed                   	in     eax,dx
c001e10c:	51                   	push   ecx
c001e10d:	50                   	push   eax
c001e10e:	56                   	push   esi
c001e10f:	53                   	push   ebx
c001e110:	e8 15 fb ff ff       	call   c001dc2a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e115:	83 c4 10             	add    esp,0x10
c001e118:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e11b:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e11f:	74 05                	je     c001e126 <Vm::faultHandler(regs*)+0x4e7>
c001e121:	83 e8 04             	sub    eax,0x4
c001e124:	eb 27                	jmp    c001e14d <Vm::faultHandler(regs*)+0x50e>
c001e126:	83 c0 04             	add    eax,0x4
c001e129:	eb 22                	jmp    c001e14d <Vm::faultHandler(regs*)+0x50e>
c001e12b:	66 ed                	in     ax,dx
c001e12d:	0f b7 c0             	movzx  eax,ax
c001e130:	52                   	push   edx
c001e131:	50                   	push   eax
c001e132:	56                   	push   esi
c001e133:	53                   	push   ebx
c001e134:	e8 db fa ff ff       	call   c001dc14 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e139:	83 c4 10             	add    esp,0x10
c001e13c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e13f:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e143:	74 05                	je     c001e14a <Vm::faultHandler(regs*)+0x50b>
c001e145:	83 e8 02             	sub    eax,0x2
c001e148:	eb 03                	jmp    c001e14d <Vm::faultHandler(regs*)+0x50e>
c001e14a:	83 c0 02             	add    eax,0x2
c001e14d:	25 ff ff 00 00       	and    eax,0xffff
c001e152:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e155:	e9 b1 02 00 00       	jmp    c001e40b <Vm::faultHandler(regs*)+0x7cc>
c001e15a:	83 ec 0c             	sub    esp,0xc
c001e15d:	4b                   	dec    ebx
c001e15e:	68 57 ab 02 c0       	push   0xc002ab57
c001e163:	e8 1d 45 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001e168:	83 c4 10             	add    esp,0x10
c001e16b:	80 fb 05             	cmp    bl,0x5
c001e16e:	77 0a                	ja     c001e17a <Vm::faultHandler(regs*)+0x53b>
c001e170:	0f b6 db             	movzx  ebx,bl
c001e173:	ff 24 9d c8 ab 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5438]
c001e17a:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e17e:	eb 1b                	jmp    c001e19b <Vm::faultHandler(regs*)+0x55c>
c001e180:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e184:	eb 15                	jmp    c001e19b <Vm::faultHandler(regs*)+0x55c>
c001e186:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e18a:	eb 0f                	jmp    c001e19b <Vm::faultHandler(regs*)+0x55c>
c001e18c:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e190:	eb 09                	jmp    c001e19b <Vm::faultHandler(regs*)+0x55c>
c001e192:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e195:	eb 04                	jmp    c001e19b <Vm::faultHandler(regs*)+0x55c>
c001e197:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e19b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e1a0:	74 0d                	je     c001e1af <Vm::faultHandler(regs*)+0x570>
c001e1a2:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001e1a9:	0f 87 8b 00 00 00    	ja     c001e23a <Vm::faultHandler(regs*)+0x5fb>
c001e1af:	53                   	push   ebx
c001e1b0:	53                   	push   ebx
c001e1b1:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001e1b5:	52                   	push   edx
c001e1b6:	50                   	push   eax
c001e1b7:	e8 0f fa ff ff       	call   c001dbcb <Vm::readByteFromReal(unsigned short, unsigned short)>
c001e1bc:	5e                   	pop    esi
c001e1bd:	0f b6 c0             	movzx  eax,al
c001e1c0:	5d                   	pop    ebp
c001e1c1:	50                   	push   eax
c001e1c2:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e1c6:	50                   	push   eax
c001e1c7:	e8 91 f6 ff ff       	call   c001d85d <Vm::outbv(unsigned short, unsigned char)>
c001e1cc:	83 c4 10             	add    esp,0x10
c001e1cf:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001e1d2:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e1d6:	74 03                	je     c001e1db <Vm::faultHandler(regs*)+0x59c>
c001e1d8:	48                   	dec    eax
c001e1d9:	eb 01                	jmp    c001e1dc <Vm::faultHandler(regs*)+0x59d>
c001e1db:	40                   	inc    eax
c001e1dc:	0f b7 c0             	movzx  eax,ax
c001e1df:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001e1e2:	e9 24 02 00 00       	jmp    c001e40b <Vm::faultHandler(regs*)+0x7cc>
c001e1e7:	83 ec 0c             	sub    esp,0xc
c001e1ea:	4b                   	dec    ebx
c001e1eb:	68 57 ab 02 c0       	push   0xc002ab57
c001e1f0:	e8 90 44 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001e1f5:	83 c4 10             	add    esp,0x10
c001e1f8:	80 fb 05             	cmp    bl,0x5
c001e1fb:	77 0a                	ja     c001e207 <Vm::faultHandler(regs*)+0x5c8>
c001e1fd:	0f b6 db             	movzx  ebx,bl
c001e200:	ff 24 9d e0 ab 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5420]
c001e207:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e20b:	eb 1b                	jmp    c001e228 <Vm::faultHandler(regs*)+0x5e9>
c001e20d:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e211:	eb 15                	jmp    c001e228 <Vm::faultHandler(regs*)+0x5e9>
c001e213:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e217:	eb 0f                	jmp    c001e228 <Vm::faultHandler(regs*)+0x5e9>
c001e219:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e21d:	eb 09                	jmp    c001e228 <Vm::faultHandler(regs*)+0x5e9>
c001e21f:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e222:	eb 04                	jmp    c001e228 <Vm::faultHandler(regs*)+0x5e9>
c001e224:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e228:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001e22b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e230:	74 39                	je     c001e26b <Vm::faultHandler(regs*)+0x62c>
c001e232:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001e238:	76 31                	jbe    c001e26b <Vm::faultHandler(regs*)+0x62c>
c001e23a:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e23e:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e242:	51                   	push   ecx
c001e243:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e247:	51                   	push   ecx
c001e248:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e24c:	51                   	push   ecx
c001e24d:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e251:	51                   	push   ecx
c001e252:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e256:	52                   	push   edx
c001e257:	50                   	push   eax
c001e258:	50                   	push   eax
c001e259:	68 24 ab 02 c0       	push   0xc002ab24
c001e25e:	e8 22 44 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001e263:	83 c4 20             	add    esp,0x20
c001e266:	e9 fb 01 00 00       	jmp    c001e466 <Vm::faultHandler(regs*)+0x827>
c001e26b:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001e26e:	0f b7 d3             	movzx  edx,bx
c001e271:	81 e6 00 04 00 00    	and    esi,0x400
c001e277:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001e27a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e27f:	74 1d                	je     c001e29e <Vm::faultHandler(regs*)+0x65f>
c001e281:	51                   	push   ecx
c001e282:	51                   	push   ecx
c001e283:	52                   	push   edx
c001e284:	50                   	push   eax
c001e285:	e8 64 f9 ff ff       	call   c001dbee <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001e28a:	83 c4 10             	add    esp,0x10
c001e28d:	89 ea                	mov    edx,ebp
c001e28f:	ef                   	out    dx,eax
c001e290:	85 f6                	test   esi,esi
c001e292:	74 05                	je     c001e299 <Vm::faultHandler(regs*)+0x65a>
c001e294:	83 eb 04             	sub    ebx,0x4
c001e297:	eb 21                	jmp    c001e2ba <Vm::faultHandler(regs*)+0x67b>
c001e299:	83 c3 04             	add    ebx,0x4
c001e29c:	eb 1c                	jmp    c001e2ba <Vm::faultHandler(regs*)+0x67b>
c001e29e:	51                   	push   ecx
c001e29f:	51                   	push   ecx
c001e2a0:	52                   	push   edx
c001e2a1:	50                   	push   eax
c001e2a2:	e8 35 f9 ff ff       	call   c001dbdc <Vm::readWordFromReal(unsigned short, unsigned short)>
c001e2a7:	83 c4 10             	add    esp,0x10
c001e2aa:	89 ea                	mov    edx,ebp
c001e2ac:	66 ef                	out    dx,ax
c001e2ae:	85 f6                	test   esi,esi
c001e2b0:	74 05                	je     c001e2b7 <Vm::faultHandler(regs*)+0x678>
c001e2b2:	83 eb 02             	sub    ebx,0x2
c001e2b5:	eb 03                	jmp    c001e2ba <Vm::faultHandler(regs*)+0x67b>
c001e2b7:	83 c3 02             	add    ebx,0x2
c001e2ba:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001e2c0:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001e2c3:	e9 43 01 00 00       	jmp    c001e40b <Vm::faultHandler(regs*)+0x7cc>
c001e2c8:	53                   	push   ebx
c001e2c9:	53                   	push   ebx
c001e2ca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e2ce:	50                   	push   eax
c001e2cf:	68 5d ab 02 c0       	push   0xc002ab5d
c001e2d4:	e8 ac 43 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001e2d9:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e2e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e2e4:	89 04 24             	mov    DWORD PTR [esp],eax
c001e2e7:	e8 5e f5 ff ff       	call   c001d84a <Vm::inbv(unsigned short)>
c001e2ec:	0f b6 c0             	movzx  eax,al
c001e2ef:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e2f2:	eb 5e                	jmp    c001e352 <Vm::faultHandler(regs*)+0x713>
c001e2f4:	51                   	push   ecx
c001e2f5:	51                   	push   ecx
c001e2f6:	53                   	push   ebx
c001e2f7:	68 63 ab 02 c0       	push   0xc002ab63
c001e2fc:	e8 84 43 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001e301:	83 c4 10             	add    esp,0x10
c001e304:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e309:	74 07                	je     c001e312 <Vm::faultHandler(regs*)+0x6d3>
c001e30b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e30f:	ed                   	in     eax,dx
c001e310:	eb 14                	jmp    c001e326 <Vm::faultHandler(regs*)+0x6e7>
c001e312:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001e315:	66 31 db             	xor    bx,bx
c001e318:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001e31b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e31f:	66 ed                	in     ax,dx
c001e321:	0f b7 c0             	movzx  eax,ax
c001e324:	09 d8                	or     eax,ebx
c001e326:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e329:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e32d:	e9 dc 00 00 00       	jmp    c001e40e <Vm::faultHandler(regs*)+0x7cf>
c001e332:	50                   	push   eax
c001e333:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e336:	53                   	push   ebx
c001e337:	68 69 ab 02 c0       	push   0xc002ab69
c001e33c:	e8 44 43 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001e341:	58                   	pop    eax
c001e342:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e346:	5a                   	pop    edx
c001e347:	50                   	push   eax
c001e348:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e34c:	50                   	push   eax
c001e34d:	e8 0b f5 ff ff       	call   c001d85d <Vm::outbv(unsigned short, unsigned char)>
c001e352:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e356:	e9 85 00 00 00       	jmp    c001e3e0 <Vm::faultHandler(regs*)+0x7a1>
c001e35b:	50                   	push   eax
c001e35c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e35f:	53                   	push   ebx
c001e360:	68 72 ab 02 c0       	push   0xc002ab72
c001e365:	e8 1b 43 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001e36a:	83 c4 10             	add    esp,0x10
c001e36d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e371:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e376:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e379:	74 03                	je     c001e37e <Vm::faultHandler(regs*)+0x73f>
c001e37b:	ef                   	out    dx,eax
c001e37c:	eb ab                	jmp    c001e329 <Vm::faultHandler(regs*)+0x6ea>
c001e37e:	66 ef                	out    dx,ax
c001e380:	eb a7                	jmp    c001e329 <Vm::faultHandler(regs*)+0x6ea>
c001e382:	55                   	push   ebp
c001e383:	55                   	push   ebp
c001e384:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e387:	68 7b ab 02 c0       	push   0xc002ab7b
c001e38c:	e8 f4 42 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001e391:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e398:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e39c:	89 04 24             	mov    DWORD PTR [esp],eax
c001e39f:	e8 a6 f4 ff ff       	call   c001d84a <Vm::inbv(unsigned short)>
c001e3a4:	0f b6 c0             	movzx  eax,al
c001e3a7:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e3aa:	eb 31                	jmp    c001e3dd <Vm::faultHandler(regs*)+0x79e>
c001e3ac:	56                   	push   esi
c001e3ad:	56                   	push   esi
c001e3ae:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e3b1:	68 81 ab 02 c0       	push   0xc002ab81
c001e3b6:	e8 ca 42 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001e3bb:	83 c4 10             	add    esp,0x10
c001e3be:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e3c1:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e3c6:	74 03                	je     c001e3cb <Vm::faultHandler(regs*)+0x78c>
c001e3c8:	ed                   	in     eax,dx
c001e3c9:	eb 0d                	jmp    c001e3d8 <Vm::faultHandler(regs*)+0x799>
c001e3cb:	66 ed                	in     ax,dx
c001e3cd:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001e3d0:	0f b7 c0             	movzx  eax,ax
c001e3d3:	66 31 d2             	xor    dx,dx
c001e3d6:	09 d0                	or     eax,edx
c001e3d8:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e3db:	eb 2e                	jmp    c001e40b <Vm::faultHandler(regs*)+0x7cc>
c001e3dd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e3e0:	83 c4 10             	add    esp,0x10
c001e3e3:	eb 29                	jmp    c001e40e <Vm::faultHandler(regs*)+0x7cf>
c001e3e5:	50                   	push   eax
c001e3e6:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e3e9:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e3ec:	68 90 ab 02 c0       	push   0xc002ab90
c001e3f1:	e8 8f 42 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001e3f6:	83 c4 10             	add    esp,0x10
c001e3f9:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e3fc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e401:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e404:	74 03                	je     c001e409 <Vm::faultHandler(regs*)+0x7ca>
c001e406:	ef                   	out    dx,eax
c001e407:	eb 02                	jmp    c001e40b <Vm::faultHandler(regs*)+0x7cc>
c001e409:	66 ef                	out    dx,ax
c001e40b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e40e:	b0 01                	mov    al,0x1
c001e410:	eb 56                	jmp    c001e468 <Vm::faultHandler(regs*)+0x829>
c001e412:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e416:	51                   	push   ecx
c001e417:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e41b:	51                   	push   ecx
c001e41c:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e420:	51                   	push   ecx
c001e421:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e425:	51                   	push   ecx
c001e426:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e42a:	52                   	push   edx
c001e42b:	50                   	push   eax
c001e42c:	50                   	push   eax
c001e42d:	68 99 ab 02 c0       	push   0xc002ab99
c001e432:	e8 4e 42 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001e437:	83 c4 20             	add    esp,0x20
c001e43a:	83 ec 0c             	sub    esp,0xc
c001e43d:	6a 60                	push   0x60
c001e43f:	e8 06 f4 ff ff       	call   c001d84a <Vm::inbv(unsigned short)>
c001e444:	83 c4 10             	add    esp,0x10
c001e447:	3c 1c                	cmp    al,0x1c
c001e449:	74 04                	je     c001e44f <Vm::faultHandler(regs*)+0x810>
c001e44b:	3c 5a                	cmp    al,0x5a
c001e44d:	75 eb                	jne    c001e43a <Vm::faultHandler(regs*)+0x7fb>
c001e44f:	3c 1c                	cmp    al,0x1c
c001e451:	74 04                	je     c001e457 <Vm::faultHandler(regs*)+0x818>
c001e453:	3c 5a                	cmp    al,0x5a
c001e455:	75 0f                	jne    c001e466 <Vm::faultHandler(regs*)+0x827>
c001e457:	83 ec 0c             	sub    esp,0xc
c001e45a:	6a 60                	push   0x60
c001e45c:	e8 e9 f3 ff ff       	call   c001d84a <Vm::inbv(unsigned short)>
c001e461:	83 c4 10             	add    esp,0x10
c001e464:	eb e9                	jmp    c001e44f <Vm::faultHandler(regs*)+0x810>
c001e466:	31 c0                	xor    eax,eax
c001e468:	83 c4 1c             	add    esp,0x1c
c001e46b:	5b                   	pop    ebx
c001e46c:	5e                   	pop    esi
c001e46d:	5f                   	pop    edi
c001e46e:	5d                   	pop    ebp
c001e46f:	c3                   	ret    

c001e470 <Vm::fpuInternalTo32(unsigned long long)>:
c001e470:	57                   	push   edi
c001e471:	56                   	push   esi
c001e472:	53                   	push   ebx
c001e473:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e47b:	89 d6                	mov    esi,edx
c001e47d:	89 d7                	mov    edi,edx
c001e47f:	89 c1                	mov    ecx,eax
c001e481:	c1 ef 14             	shr    edi,0x14
c001e484:	89 d3                	mov    ebx,edx
c001e486:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001e48c:	31 d2                	xor    edx,edx
c001e48e:	89 f8                	mov    eax,edi
c001e490:	81 e6 00 00 00 80    	and    esi,0x80000000
c001e496:	bf ff 00 00 00       	mov    edi,0xff
c001e49b:	05 80 fc ff ff       	add    eax,0xfffffc80
c001e4a0:	83 d2 ff             	adc    edx,0xffffffff
c001e4a3:	39 c7                	cmp    edi,eax
c001e4a5:	bf 00 00 00 00       	mov    edi,0x0
c001e4aa:	19 d7                	sbb    edi,edx
c001e4ac:	72 15                	jb     c001e4c3 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001e4ae:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001e4b2:	c1 e0 17             	shl    eax,0x17
c001e4b5:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001e4bb:	09 f1                	or     ecx,esi
c001e4bd:	09 c1                	or     ecx,eax
c001e4bf:	89 cf                	mov    edi,ecx
c001e4c1:	eb 02                	jmp    c001e4c5 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001e4c3:	31 ff                	xor    edi,edi
c001e4c5:	89 f8                	mov    eax,edi
c001e4c7:	5b                   	pop    ebx
c001e4c8:	5e                   	pop    esi
c001e4c9:	5f                   	pop    edi
c001e4ca:	c3                   	ret    

c001e4cb <Vm::fpuInternalTo64(unsigned long long)>:
c001e4cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e4d3:	c3                   	ret    

c001e4d4 <Vm::fpu32ToInternal(unsigned int)>:
c001e4d4:	57                   	push   edi
c001e4d5:	31 ff                	xor    edi,edi
c001e4d7:	56                   	push   esi
c001e4d8:	53                   	push   ebx
c001e4d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e4dd:	89 cb                	mov    ebx,ecx
c001e4df:	89 ce                	mov    esi,ecx
c001e4e1:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001e4e7:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001e4ed:	c1 e9 17             	shr    ecx,0x17
c001e4f0:	89 f0                	mov    eax,esi
c001e4f2:	0f b6 d1             	movzx  edx,cl
c001e4f5:	81 c2 80 03 00 00    	add    edx,0x380
c001e4fb:	89 d1                	mov    ecx,edx
c001e4fd:	89 fa                	mov    edx,edi
c001e4ff:	c1 e1 14             	shl    ecx,0x14
c001e502:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001e506:	c1 e0 1d             	shl    eax,0x1d
c001e509:	89 d7                	mov    edi,edx
c001e50b:	89 c6                	mov    esi,eax
c001e50d:	89 ca                	mov    edx,ecx
c001e50f:	89 f0                	mov    eax,esi
c001e511:	09 fa                	or     edx,edi
c001e513:	09 da                	or     edx,ebx
c001e515:	5b                   	pop    ebx
c001e516:	5e                   	pop    esi
c001e517:	5f                   	pop    edi
c001e518:	c3                   	ret    

c001e519 <Vm::fpu64ToInternal(unsigned long long)>:
c001e519:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e51d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e521:	c3                   	ret    

c001e522 <Vm::fpuFloatToLong(unsigned long long)>:
c001e522:	57                   	push   edi
c001e523:	31 c0                	xor    eax,eax
c001e525:	56                   	push   esi
c001e526:	31 d2                	xor    edx,edx
c001e528:	53                   	push   ebx
c001e529:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e52d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e531:	89 d9                	mov    ecx,ebx
c001e533:	c1 e9 14             	shr    ecx,0x14
c001e536:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001e53c:	89 cf                	mov    edi,ecx
c001e53e:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001e544:	78 33                	js     c001e579 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e546:	89 d9                	mov    ecx,ebx
c001e548:	89 f0                	mov    eax,esi
c001e54a:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e550:	81 c9 00 00 10 00    	or     ecx,0x100000
c001e556:	89 ca                	mov    edx,ecx
c001e558:	b9 34 00 00 00       	mov    ecx,0x34
c001e55d:	29 f9                	sub    ecx,edi
c001e55f:	0f ad d0             	shrd   eax,edx,cl
c001e562:	d3 fa                	sar    edx,cl
c001e564:	f6 c1 20             	test   cl,0x20
c001e567:	74 05                	je     c001e56e <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001e569:	89 d0                	mov    eax,edx
c001e56b:	c1 fa 1f             	sar    edx,0x1f
c001e56e:	85 db                	test   ebx,ebx
c001e570:	79 07                	jns    c001e579 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e572:	f7 d8                	neg    eax
c001e574:	83 d2 00             	adc    edx,0x0
c001e577:	f7 da                	neg    edx
c001e579:	5b                   	pop    ebx
c001e57a:	5e                   	pop    esi
c001e57b:	5f                   	pop    edi
c001e57c:	c3                   	ret    

c001e57d <Vm::fpuULongToFloat(unsigned long long)>:
c001e57d:	57                   	push   edi
c001e57e:	31 c9                	xor    ecx,ecx
c001e580:	56                   	push   esi
c001e581:	53                   	push   ebx
c001e582:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e586:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e58a:	0f ba e7 14          	bt     edi,0x14
c001e58e:	72 07                	jb     c001e597 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001e590:	01 f6                	add    esi,esi
c001e592:	11 ff                	adc    edi,edi
c001e594:	41                   	inc    ecx
c001e595:	eb f3                	jmp    c001e58a <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001e597:	89 fa                	mov    edx,edi
c001e599:	89 f0                	mov    eax,esi
c001e59b:	bb 33 04 00 00       	mov    ebx,0x433
c001e5a0:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001e5a6:	29 cb                	sub    ebx,ecx
c001e5a8:	89 d9                	mov    ecx,ebx
c001e5aa:	5b                   	pop    ebx
c001e5ab:	c1 e1 14             	shl    ecx,0x14
c001e5ae:	5e                   	pop    esi
c001e5af:	09 ca                	or     edx,ecx
c001e5b1:	5f                   	pop    edi
c001e5b2:	c3                   	ret    

c001e5b3 <Vm::fpuLongToFloat(long long)>:
c001e5b3:	56                   	push   esi
c001e5b4:	31 c0                	xor    eax,eax
c001e5b6:	53                   	push   ebx
c001e5b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e5bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e5bf:	39 c8                	cmp    eax,ecx
c001e5c1:	19 d8                	sbb    eax,ebx
c001e5c3:	7d 04                	jge    c001e5c9 <Vm::fpuLongToFloat(long long)+0x16>
c001e5c5:	31 f6                	xor    esi,esi
c001e5c7:	eb 0c                	jmp    c001e5d5 <Vm::fpuLongToFloat(long long)+0x22>
c001e5c9:	f7 d9                	neg    ecx
c001e5cb:	be 01 00 00 00       	mov    esi,0x1
c001e5d0:	83 d3 00             	adc    ebx,0x0
c001e5d3:	f7 db                	neg    ebx
c001e5d5:	31 c0                	xor    eax,eax
c001e5d7:	0f ba e3 14          	bt     ebx,0x14
c001e5db:	72 07                	jb     c001e5e4 <Vm::fpuLongToFloat(long long)+0x31>
c001e5dd:	01 c9                	add    ecx,ecx
c001e5df:	11 db                	adc    ebx,ebx
c001e5e1:	40                   	inc    eax
c001e5e2:	eb f3                	jmp    c001e5d7 <Vm::fpuLongToFloat(long long)+0x24>
c001e5e4:	ba 33 04 00 00       	mov    edx,0x433
c001e5e9:	29 c2                	sub    edx,eax
c001e5eb:	89 c8                	mov    eax,ecx
c001e5ed:	c1 e2 14             	shl    edx,0x14
c001e5f0:	89 d9                	mov    ecx,ebx
c001e5f2:	89 f3                	mov    ebx,esi
c001e5f4:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e5fa:	09 ca                	or     edx,ecx
c001e5fc:	84 db                	test   bl,bl
c001e5fe:	74 06                	je     c001e606 <Vm::fpuLongToFloat(long long)+0x53>
c001e600:	81 ca 00 00 00 80    	or     edx,0x80000000
c001e606:	5b                   	pop    ebx
c001e607:	5e                   	pop    esi
c001e608:	c3                   	ret    

c001e609 <Vm::fpuGet0()>:
c001e609:	31 c0                	xor    eax,eax
c001e60b:	31 d2                	xor    edx,edx
c001e60d:	c3                   	ret    

c001e60e <Vm::fpuGet1()>:
c001e60e:	b8 01 00 00 00       	mov    eax,0x1
c001e613:	31 d2                	xor    edx,edx
c001e615:	c3                   	ret    

c001e616 <Vm::fpuGetPi()>:
c001e616:	b8 03 00 00 00       	mov    eax,0x3
c001e61b:	31 d2                	xor    edx,edx
c001e61d:	c3                   	ret    

c001e61e <Vm::fpuGetLog2E()>:
c001e61e:	83 ec 18             	sub    esp,0x18
c001e621:	68 f8 ab 02 c0       	push   0xc002abf8
c001e626:	e8 74 b1 ff ff       	call   c001979f <Krnl::panic(char const*)>
c001e62b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e630:	31 d2                	xor    edx,edx
c001e632:	83 c4 1c             	add    esp,0x1c
c001e635:	c3                   	ret    

c001e636 <Vm::fpuGetLogE2()>:
c001e636:	83 ec 18             	sub    esp,0x18
c001e639:	68 04 ac 02 c0       	push   0xc002ac04
c001e63e:	e8 5c b1 ff ff       	call   c001979f <Krnl::panic(char const*)>
c001e643:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e648:	31 d2                	xor    edx,edx
c001e64a:	83 c4 1c             	add    esp,0x1c
c001e64d:	c3                   	ret    

c001e64e <Vm::fpuGetLog210()>:
c001e64e:	83 ec 18             	sub    esp,0x18
c001e651:	68 10 ac 02 c0       	push   0xc002ac10
c001e656:	e8 44 b1 ff ff       	call   c001979f <Krnl::panic(char const*)>
c001e65b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e660:	31 d2                	xor    edx,edx
c001e662:	83 c4 1c             	add    esp,0x1c
c001e665:	c3                   	ret    

c001e666 <Vm::fpuGetLog102()>:
c001e666:	83 ec 18             	sub    esp,0x18
c001e669:	68 1d ac 02 c0       	push   0xc002ac1d
c001e66e:	e8 2c b1 ff ff       	call   c001979f <Krnl::panic(char const*)>
c001e673:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e678:	31 d2                	xor    edx,edx
c001e67a:	83 c4 1c             	add    esp,0x1c
c001e67d:	c3                   	ret    

c001e67e <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001e67e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e682:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e68a:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001e68e:	0f 92 c0             	setb   al
c001e691:	c3                   	ret    

c001e692 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001e692:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e69a:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001e69e:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001e6a2:	09 c2                	or     edx,eax
c001e6a4:	0f 94 c0             	sete   al
c001e6a7:	c3                   	ret    

c001e6a8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001e6a8:	57                   	push   edi
c001e6a9:	56                   	push   esi
c001e6aa:	53                   	push   ebx
c001e6ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e6af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e6b3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001e6b7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e6bb:	57                   	push   edi
c001e6bc:	56                   	push   esi
c001e6bd:	53                   	push   ebx
c001e6be:	51                   	push   ecx
c001e6bf:	e8 ce ff ff ff       	call   c001e692 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001e6c4:	83 c4 10             	add    esp,0x10
c001e6c7:	88 c2                	mov    dl,al
c001e6c9:	31 c0                	xor    eax,eax
c001e6cb:	84 d2                	test   dl,dl
c001e6cd:	75 0c                	jne    c001e6db <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001e6cf:	57                   	push   edi
c001e6d0:	56                   	push   esi
c001e6d1:	53                   	push   ebx
c001e6d2:	51                   	push   ecx
c001e6d3:	e8 a6 ff ff ff       	call   c001e67e <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001e6d8:	83 c4 10             	add    esp,0x10
c001e6db:	83 e0 01             	and    eax,0x1
c001e6de:	5b                   	pop    ebx
c001e6df:	88 c1                	mov    cl,al
c001e6e1:	83 e2 01             	and    edx,0x1
c001e6e4:	a0 01 de 02 c0       	mov    al,ds:0xc002de01
c001e6e9:	c1 e2 06             	shl    edx,0x6
c001e6ec:	83 e0 ba             	and    eax,0xffffffba
c001e6ef:	5e                   	pop    esi
c001e6f0:	09 c8                	or     eax,ecx
c001e6f2:	5f                   	pop    edi
c001e6f3:	09 d0                	or     eax,edx
c001e6f5:	a2 01 de 02 c0       	mov    ds:0xc002de01,al
c001e6fa:	c3                   	ret    

c001e6fb <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001e6fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e6ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e703:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001e707:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001e70b:	c3                   	ret    

c001e70c <Vm::fpuAbs(unsigned long long)>:
c001e70c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e710:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e714:	c3                   	ret    

c001e715 <Vm::fpuChs(unsigned long long)>:
c001e715:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e719:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e71d:	f7 d8                	neg    eax
c001e71f:	83 d2 00             	adc    edx,0x0
c001e722:	f7 da                	neg    edx
c001e724:	c3                   	ret    

c001e725 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001e725:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001e729:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001e72e:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001e732:	eb c7                	jmp    c001e6fb <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001e734 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001e734:	53                   	push   ebx
c001e735:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e739:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e73d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e741:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e745:	0f af ca             	imul   ecx,edx
c001e748:	0f af d8             	imul   ebx,eax
c001e74b:	f7 e2                	mul    edx
c001e74d:	01 d9                	add    ecx,ebx
c001e74f:	5b                   	pop    ebx
c001e750:	01 ca                	add    edx,ecx
c001e752:	c3                   	ret    

c001e753 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001e753:	83 ec 0c             	sub    esp,0xc
c001e756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e75a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e75e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e766:	e8 51 6b 00 00       	call   c00252bc <__udivdi3>
c001e76b:	83 c4 1c             	add    esp,0x1c
c001e76e:	c3                   	ret    

c001e76f <Vm::fpuSquare(unsigned long long)>:
c001e76f:	50                   	push   eax
c001e770:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e774:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e778:	52                   	push   edx
c001e779:	50                   	push   eax
c001e77a:	52                   	push   edx
c001e77b:	50                   	push   eax
c001e77c:	e8 b3 ff ff ff       	call   c001e734 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e781:	83 c4 14             	add    esp,0x14
c001e784:	c3                   	ret    

c001e785 <Vm::fpuGetReg(int)>:
c001e785:	83 ec 0c             	sub    esp,0xc
c001e788:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e78d:	76 10                	jbe    c001e79f <Vm::fpuGetReg(int)+0x1a>
c001e78f:	83 ec 0c             	sub    esp,0xc
c001e792:	68 2a ac 02 c0       	push   0xc002ac2a
c001e797:	e8 03 b0 ff ff       	call   c001979f <Krnl::panic(char const*)>
c001e79c:	83 c4 10             	add    esp,0x10
c001e79f:	a0 01 de 02 c0       	mov    al,ds:0xc002de01
c001e7a4:	b9 08 00 00 00       	mov    ecx,0x8
c001e7a9:	c0 e8 03             	shr    al,0x3
c001e7ac:	83 e0 07             	and    eax,0x7
c001e7af:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e7b3:	99                   	cdq    
c001e7b4:	f7 f9                	idiv   ecx
c001e7b6:	8b 04 d5 04 de 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd21fc]
c001e7bd:	8b 14 d5 08 de 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd21f8]
c001e7c4:	83 c4 0c             	add    esp,0xc
c001e7c7:	c3                   	ret    

c001e7c8 <Vm::fpuSetReg(int, unsigned long long)>:
c001e7c8:	57                   	push   edi
c001e7c9:	56                   	push   esi
c001e7ca:	52                   	push   edx
c001e7cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001e7cf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e7d3:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e7d8:	76 10                	jbe    c001e7ea <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001e7da:	83 ec 0c             	sub    esp,0xc
c001e7dd:	68 3d ac 02 c0       	push   0xc002ac3d
c001e7e2:	e8 b8 af ff ff       	call   c001979f <Krnl::panic(char const*)>
c001e7e7:	83 c4 10             	add    esp,0x10
c001e7ea:	a0 01 de 02 c0       	mov    al,ds:0xc002de01
c001e7ef:	b9 08 00 00 00       	mov    ecx,0x8
c001e7f4:	c0 e8 03             	shr    al,0x3
c001e7f7:	83 e0 07             	and    eax,0x7
c001e7fa:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e7fe:	99                   	cdq    
c001e7ff:	f7 f9                	idiv   ecx
c001e801:	89 34 d5 04 de 02 c0 	mov    DWORD PTR [edx*8-0x3ffd21fc],esi
c001e808:	89 3c d5 08 de 02 c0 	mov    DWORD PTR [edx*8-0x3ffd21f8],edi
c001e80f:	58                   	pop    eax
c001e810:	5e                   	pop    esi
c001e811:	5f                   	pop    edi
c001e812:	c3                   	ret    

c001e813 <Vm::fpuPush(unsigned long long)>:
c001e813:	a0 01 de 02 c0       	mov    al,ds:0xc002de01
c001e818:	c0 e8 03             	shr    al,0x3
c001e81b:	83 e0 07             	and    eax,0x7
c001e81e:	83 c0 07             	add    eax,0x7
c001e821:	88 c2                	mov    dl,al
c001e823:	83 e0 07             	and    eax,0x7
c001e826:	83 e2 07             	and    edx,0x7
c001e829:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001e830:	8a 15 01 de 02 c0    	mov    dl,BYTE PTR ds:0xc002de01
c001e836:	83 e2 c7             	and    edx,0xffffffc7
c001e839:	09 ca                	or     edx,ecx
c001e83b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e83f:	88 15 01 de 02 c0    	mov    BYTE PTR ds:0xc002de01,dl
c001e845:	89 0c c5 08 de 02 c0 	mov    DWORD PTR [eax*8-0x3ffd21f8],ecx
c001e84c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e850:	89 14 c5 04 de 02 c0 	mov    DWORD PTR [eax*8-0x3ffd21fc],edx
c001e857:	a1 44 de 02 c0       	mov    eax,ds:0xc002de44
c001e85c:	83 f8 08             	cmp    eax,0x8
c001e85f:	75 08                	jne    c001e869 <Vm::fpuPush(unsigned long long)+0x56>
c001e861:	80 0d 00 de 02 c0 40 	or     BYTE PTR ds:0xc002de00,0x40
c001e868:	c3                   	ret    
c001e869:	40                   	inc    eax
c001e86a:	a3 44 de 02 c0       	mov    ds:0xc002de44,eax
c001e86f:	c3                   	ret    

c001e870 <Vm::fpuPop()>:
c001e870:	8a 0d 01 de 02 c0    	mov    cl,BYTE PTR ds:0xc002de01
c001e876:	53                   	push   ebx
c001e877:	c0 e9 03             	shr    cl,0x3
c001e87a:	8a 1d 01 de 02 c0    	mov    bl,BYTE PTR ds:0xc002de01
c001e880:	83 e1 07             	and    ecx,0x7
c001e883:	83 e3 c7             	and    ebx,0xffffffc7
c001e886:	8b 04 cd 04 de 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd21fc]
c001e88d:	8b 14 cd 08 de 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd21f8]
c001e894:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001e89b:	83 e1 38             	and    ecx,0x38
c001e89e:	09 d9                	or     ecx,ebx
c001e8a0:	88 0d 01 de 02 c0    	mov    BYTE PTR ds:0xc002de01,cl
c001e8a6:	8b 0d 44 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de44
c001e8ac:	85 c9                	test   ecx,ecx
c001e8ae:	74 09                	je     c001e8b9 <Vm::fpuPop()+0x49>
c001e8b0:	49                   	dec    ecx
c001e8b1:	89 0d 44 de 02 c0    	mov    DWORD PTR ds:0xc002de44,ecx
c001e8b7:	eb 07                	jmp    c001e8c0 <Vm::fpuPop()+0x50>
c001e8b9:	80 0d 00 de 02 c0 40 	or     BYTE PTR ds:0xc002de00,0x40
c001e8c0:	5b                   	pop    ebx
c001e8c1:	c3                   	ret    

c001e8c2 <Vm::x87Handler(regs*)>:
c001e8c2:	55                   	push   ebp
c001e8c3:	57                   	push   edi
c001e8c4:	56                   	push   esi
c001e8c5:	53                   	push   ebx
c001e8c6:	83 ec 1c             	sub    esp,0x1c
c001e8c9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e8cd:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001e8d2:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001e8d5:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001e8dd:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001e8e1:	50                   	push   eax
c001e8e2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001e8e6:	50                   	push   eax
c001e8e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e8eb:	50                   	push   eax
c001e8ec:	53                   	push   ebx
c001e8ed:	e8 de a6 ff ff       	call   c0018fd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001e8f2:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001e8f5:	83 c4 10             	add    esp,0x10
c001e8f8:	89 c6                	mov    esi,eax
c001e8fa:	80 fa d9             	cmp    dl,0xd9
c001e8fd:	0f 85 52 01 00 00    	jne    c001ea55 <Vm::x87Handler(regs*)+0x193>
c001e903:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e907:	8d 50 20             	lea    edx,[eax+0x20]
c001e90a:	80 fa 0e             	cmp    dl,0xe
c001e90d:	0f 87 86 00 00 00    	ja     c001e999 <Vm::x87Handler(regs*)+0xd7>
c001e913:	0f b6 d2             	movzx  edx,dl
c001e916:	ff 24 95 50 ac 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd53b0]
c001e91d:	e8 e7 fc ff ff       	call   c001e609 <Vm::fpuGet0()>
c001e922:	eb 05                	jmp    c001e929 <Vm::x87Handler(regs*)+0x67>
c001e924:	e8 e5 fc ff ff       	call   c001e60e <Vm::fpuGet1()>
c001e929:	57                   	push   edi
c001e92a:	57                   	push   edi
c001e92b:	52                   	push   edx
c001e92c:	50                   	push   eax
c001e92d:	e8 e1 fe ff ff       	call   c001e813 <Vm::fpuPush(unsigned long long)>
c001e932:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e936:	83 c4 10             	add    esp,0x10
c001e939:	b0 01                	mov    al,0x1
c001e93b:	e9 e3 09 00 00       	jmp    c001f323 <Vm::x87Handler(regs*)+0xa61>
c001e940:	83 ec 0c             	sub    esp,0xc
c001e943:	6a 00                	push   0x0
c001e945:	e8 3b fe ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001e94a:	59                   	pop    ecx
c001e94b:	5e                   	pop    esi
c001e94c:	52                   	push   edx
c001e94d:	50                   	push   eax
c001e94e:	e8 c2 fd ff ff       	call   c001e715 <Vm::fpuChs(unsigned long long)>
c001e953:	eb 13                	jmp    c001e968 <Vm::x87Handler(regs*)+0xa6>
c001e955:	83 ec 0c             	sub    esp,0xc
c001e958:	6a 00                	push   0x0
c001e95a:	e8 26 fe ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001e95f:	5f                   	pop    edi
c001e960:	5d                   	pop    ebp
c001e961:	52                   	push   edx
c001e962:	50                   	push   eax
c001e963:	e8 a4 fd ff ff       	call   c001e70c <Vm::fpuAbs(unsigned long long)>
c001e968:	83 c4 0c             	add    esp,0xc
c001e96b:	52                   	push   edx
c001e96c:	50                   	push   eax
c001e96d:	6a 00                	push   0x0
c001e96f:	e8 54 fe ff ff       	call   c001e7c8 <Vm::fpuSetReg(int, unsigned long long)>
c001e974:	eb bc                	jmp    c001e932 <Vm::x87Handler(regs*)+0x70>
c001e976:	e8 d3 fc ff ff       	call   c001e64e <Vm::fpuGetLog210()>
c001e97b:	eb ac                	jmp    c001e929 <Vm::x87Handler(regs*)+0x67>
c001e97d:	e8 9c fc ff ff       	call   c001e61e <Vm::fpuGetLog2E()>
c001e982:	eb a5                	jmp    c001e929 <Vm::x87Handler(regs*)+0x67>
c001e984:	e8 8d fc ff ff       	call   c001e616 <Vm::fpuGetPi()>
c001e989:	eb 9e                	jmp    c001e929 <Vm::x87Handler(regs*)+0x67>
c001e98b:	e8 d6 fc ff ff       	call   c001e666 <Vm::fpuGetLog102()>
c001e990:	eb 97                	jmp    c001e929 <Vm::x87Handler(regs*)+0x67>
c001e992:	e8 9f fc ff ff       	call   c001e636 <Vm::fpuGetLogE2()>
c001e997:	eb 90                	jmp    c001e929 <Vm::x87Handler(regs*)+0x67>
c001e999:	8d 50 40             	lea    edx,[eax+0x40]
c001e99c:	80 fa 07             	cmp    dl,0x7
c001e99f:	77 15                	ja     c001e9b6 <Vm::x87Handler(regs*)+0xf4>
c001e9a1:	83 ec 0c             	sub    esp,0xc
c001e9a4:	2d c0 00 00 00       	sub    eax,0xc0
c001e9a9:	50                   	push   eax
c001e9aa:	e8 d6 fd ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001e9af:	59                   	pop    ecx
c001e9b0:	5e                   	pop    esi
c001e9b1:	e9 75 ff ff ff       	jmp    c001e92b <Vm::x87Handler(regs*)+0x69>
c001e9b6:	8d 50 38             	lea    edx,[eax+0x38]
c001e9b9:	80 fa 07             	cmp    dl,0x7
c001e9bc:	77 3c                	ja     c001e9fa <Vm::x87Handler(regs*)+0x138>
c001e9be:	83 ec 0c             	sub    esp,0xc
c001e9c1:	2d c8 00 00 00       	sub    eax,0xc8
c001e9c6:	50                   	push   eax
c001e9c7:	e8 b9 fd ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001e9cc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e9d3:	89 c6                	mov    esi,eax
c001e9d5:	89 d7                	mov    edi,edx
c001e9d7:	e8 a9 fd ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001e9dc:	83 c4 0c             	add    esp,0xc
c001e9df:	52                   	push   edx
c001e9e0:	50                   	push   eax
c001e9e1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e9e5:	2d c8 00 00 00       	sub    eax,0xc8
c001e9ea:	50                   	push   eax
c001e9eb:	e8 d8 fd ff ff       	call   c001e7c8 <Vm::fpuSetReg(int, unsigned long long)>
c001e9f0:	83 c4 0c             	add    esp,0xc
c001e9f3:	57                   	push   edi
c001e9f4:	56                   	push   esi
c001e9f5:	e9 73 ff ff ff       	jmp    c001e96d <Vm::x87Handler(regs*)+0xab>
c001e9fa:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e9fe:	84 d2                	test   dl,dl
c001ea00:	75 0f                	jne    c001ea11 <Vm::x87Handler(regs*)+0x14f>
c001ea02:	83 ec 0c             	sub    esp,0xc
c001ea05:	ff 36                	push   DWORD PTR [esi]
c001ea07:	e8 c8 fa ff ff       	call   c001e4d4 <Vm::fpu32ToInternal(unsigned int)>
c001ea0c:	e9 bf 00 00 00       	jmp    c001ead0 <Vm::x87Handler(regs*)+0x20e>
c001ea11:	80 fa 03             	cmp    dl,0x3
c001ea14:	75 13                	jne    c001ea29 <Vm::x87Handler(regs*)+0x167>
c001ea16:	e8 55 fe ff ff       	call   c001e870 <Vm::fpuPop()>
c001ea1b:	55                   	push   ebp
c001ea1c:	55                   	push   ebp
c001ea1d:	52                   	push   edx
c001ea1e:	50                   	push   eax
c001ea1f:	e8 4c fa ff ff       	call   c001e470 <Vm::fpuInternalTo32(unsigned long long)>
c001ea24:	e9 88 00 00 00       	jmp    c001eab1 <Vm::x87Handler(regs*)+0x1ef>
c001ea29:	80 fa 05             	cmp    dl,0x5
c001ea2c:	75 0e                	jne    c001ea3c <Vm::x87Handler(regs*)+0x17a>
c001ea2e:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ea31:	66 a3 02 de 02 c0    	mov    ds:0xc002de02,ax
c001ea37:	e9 df 00 00 00       	jmp    c001eb1b <Vm::x87Handler(regs*)+0x259>
c001ea3c:	31 c0                	xor    eax,eax
c001ea3e:	80 fa 07             	cmp    dl,0x7
c001ea41:	0f 85 dc 08 00 00    	jne    c001f323 <Vm::x87Handler(regs*)+0xa61>
c001ea47:	66 a1 02 de 02 c0    	mov    ax,ds:0xc002de02
c001ea4d:	66 89 06             	mov    WORD PTR [esi],ax
c001ea50:	e9 c6 00 00 00       	jmp    c001eb1b <Vm::x87Handler(regs*)+0x259>
c001ea55:	80 fa d8             	cmp    dl,0xd8
c001ea58:	0f 84 c9 00 00 00    	je     c001eb27 <Vm::x87Handler(regs*)+0x265>
c001ea5e:	80 fa dc             	cmp    dl,0xdc
c001ea61:	0f 84 0d 02 00 00    	je     c001ec74 <Vm::x87Handler(regs*)+0x3b2>
c001ea67:	80 fa de             	cmp    dl,0xde
c001ea6a:	0f 84 cd 02 00 00    	je     c001ed3d <Vm::x87Handler(regs*)+0x47b>
c001ea70:	80 fa dd             	cmp    dl,0xdd
c001ea73:	0f 84 5f 04 00 00    	je     c001eed8 <Vm::x87Handler(regs*)+0x616>
c001ea79:	80 fa da             	cmp    dl,0xda
c001ea7c:	0f 84 24 05 00 00    	je     c001efa6 <Vm::x87Handler(regs*)+0x6e4>
c001ea82:	80 fa df             	cmp    dl,0xdf
c001ea85:	0f 84 68 05 00 00    	je     c001eff3 <Vm::x87Handler(regs*)+0x731>
c001ea8b:	31 c0                	xor    eax,eax
c001ea8d:	80 fa db             	cmp    dl,0xdb
c001ea90:	0f 85 8d 08 00 00    	jne    c001f323 <Vm::x87Handler(regs*)+0xa61>
c001ea96:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ea9a:	80 fa 03             	cmp    dl,0x3
c001ea9d:	0f 85 70 06 00 00    	jne    c001f113 <Vm::x87Handler(regs*)+0x851>
c001eaa3:	e8 c8 fd ff ff       	call   c001e870 <Vm::fpuPop()>
c001eaa8:	55                   	push   ebp
c001eaa9:	55                   	push   ebp
c001eaaa:	52                   	push   edx
c001eaab:	50                   	push   eax
c001eaac:	e8 71 fa ff ff       	call   c001e522 <Vm::fpuFloatToLong(unsigned long long)>
c001eab1:	83 c4 10             	add    esp,0x10
c001eab4:	89 06                	mov    DWORD PTR [esi],eax
c001eab6:	eb 63                	jmp    c001eb1b <Vm::x87Handler(regs*)+0x259>
c001eab8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eabc:	84 d2                	test   dl,dl
c001eabe:	0f 85 e6 05 00 00    	jne    c001f0aa <Vm::x87Handler(regs*)+0x7e8>
c001eac4:	57                   	push   edi
c001eac5:	57                   	push   edi
c001eac6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001eac9:	ff 36                	push   DWORD PTR [esi]
c001eacb:	e8 49 fa ff ff       	call   c001e519 <Vm::fpu64ToInternal(unsigned long long)>
c001ead0:	5e                   	pop    esi
c001ead1:	5f                   	pop    edi
c001ead2:	52                   	push   edx
c001ead3:	50                   	push   eax
c001ead4:	e8 3a fd ff ff       	call   c001e813 <Vm::fpuPush(unsigned long long)>
c001ead9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eadd:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001eae0:	e9 51 fe ff ff       	jmp    c001e936 <Vm::x87Handler(regs*)+0x74>
c001eae5:	80 fa 03             	cmp    dl,0x3
c001eae8:	0f 85 d7 06 00 00    	jne    c001f1c5 <Vm::x87Handler(regs*)+0x903>
c001eaee:	57                   	push   edi
c001eaef:	57                   	push   edi
c001eaf0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001eaf3:	ff 36                	push   DWORD PTR [esi]
c001eaf5:	e8 1f fa ff ff       	call   c001e519 <Vm::fpu64ToInternal(unsigned long long)>
c001eafa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eb01:	89 c6                	mov    esi,eax
c001eb03:	89 d7                	mov    edi,edx
c001eb05:	e8 7b fc ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001eb0a:	57                   	push   edi
c001eb0b:	56                   	push   esi
c001eb0c:	52                   	push   edx
c001eb0d:	50                   	push   eax
c001eb0e:	e8 95 fb ff ff       	call   c001e6a8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001eb13:	83 c4 20             	add    esp,0x20
c001eb16:	e8 55 fd ff ff       	call   c001e870 <Vm::fpuPop()>
c001eb1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb1f:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001eb22:	e9 12 fe ff ff       	jmp    c001e939 <Vm::x87Handler(regs*)+0x77>
c001eb27:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eb2b:	8d 50 40             	lea    edx,[eax+0x40]
c001eb2e:	80 fa 07             	cmp    dl,0x7
c001eb31:	77 29                	ja     c001eb5c <Vm::x87Handler(regs*)+0x29a>
c001eb33:	83 ec 0c             	sub    esp,0xc
c001eb36:	2d c0 00 00 00       	sub    eax,0xc0
c001eb3b:	50                   	push   eax
c001eb3c:	e8 44 fc ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001eb41:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eb48:	89 c6                	mov    esi,eax
c001eb4a:	89 d7                	mov    edi,edx
c001eb4c:	e8 34 fc ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001eb51:	57                   	push   edi
c001eb52:	56                   	push   esi
c001eb53:	52                   	push   edx
c001eb54:	50                   	push   eax
c001eb55:	e8 a1 fb ff ff       	call   c001e6fb <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001eb5a:	eb 2f                	jmp    c001eb8b <Vm::x87Handler(regs*)+0x2c9>
c001eb5c:	8d 50 38             	lea    edx,[eax+0x38]
c001eb5f:	80 fa 07             	cmp    dl,0x7
c001eb62:	77 2f                	ja     c001eb93 <Vm::x87Handler(regs*)+0x2d1>
c001eb64:	83 ec 0c             	sub    esp,0xc
c001eb67:	2d c8 00 00 00       	sub    eax,0xc8
c001eb6c:	50                   	push   eax
c001eb6d:	e8 13 fc ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001eb72:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eb79:	89 c6                	mov    esi,eax
c001eb7b:	89 d7                	mov    edi,edx
c001eb7d:	e8 03 fc ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001eb82:	57                   	push   edi
c001eb83:	56                   	push   esi
c001eb84:	52                   	push   edx
c001eb85:	50                   	push   eax
c001eb86:	e8 a9 fb ff ff       	call   c001e734 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001eb8b:	83 c4 1c             	add    esp,0x1c
c001eb8e:	e9 d8 fd ff ff       	jmp    c001e96b <Vm::x87Handler(regs*)+0xa9>
c001eb93:	8d 50 30             	lea    edx,[eax+0x30]
c001eb96:	80 fa 07             	cmp    dl,0x7
c001eb99:	77 0d                	ja     c001eba8 <Vm::x87Handler(regs*)+0x2e6>
c001eb9b:	83 ec 0c             	sub    esp,0xc
c001eb9e:	2d d0 00 00 00       	sub    eax,0xd0
c001eba3:	e9 99 03 00 00       	jmp    c001ef41 <Vm::x87Handler(regs*)+0x67f>
c001eba8:	8d 50 28             	lea    edx,[eax+0x28]
c001ebab:	80 fa 07             	cmp    dl,0x7
c001ebae:	77 0d                	ja     c001ebbd <Vm::x87Handler(regs*)+0x2fb>
c001ebb0:	83 ec 0c             	sub    esp,0xc
c001ebb3:	2d d8 00 00 00       	sub    eax,0xd8
c001ebb8:	e9 c0 03 00 00       	jmp    c001ef7d <Vm::x87Handler(regs*)+0x6bb>
c001ebbd:	8d 50 20             	lea    edx,[eax+0x20]
c001ebc0:	80 fa 07             	cmp    dl,0x7
c001ebc3:	77 1b                	ja     c001ebe0 <Vm::x87Handler(regs*)+0x31e>
c001ebc5:	83 ec 0c             	sub    esp,0xc
c001ebc8:	2d e0 00 00 00       	sub    eax,0xe0
c001ebcd:	50                   	push   eax
c001ebce:	e8 b2 fb ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ebd3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ebda:	89 c6                	mov    esi,eax
c001ebdc:	89 d7                	mov    edi,edx
c001ebde:	eb 22                	jmp    c001ec02 <Vm::x87Handler(regs*)+0x340>
c001ebe0:	8d 50 18             	lea    edx,[eax+0x18]
c001ebe3:	80 fa 07             	cmp    dl,0x7
c001ebe6:	77 2d                	ja     c001ec15 <Vm::x87Handler(regs*)+0x353>
c001ebe8:	83 ec 0c             	sub    esp,0xc
c001ebeb:	6a 00                	push   0x0
c001ebed:	e8 93 fb ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ebf2:	89 c6                	mov    esi,eax
c001ebf4:	89 d7                	mov    edi,edx
c001ebf6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ebfa:	2d e8 00 00 00       	sub    eax,0xe8
c001ebff:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec02:	e8 7e fb ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ec07:	57                   	push   edi
c001ec08:	56                   	push   esi
c001ec09:	52                   	push   edx
c001ec0a:	50                   	push   eax
c001ec0b:	e8 15 fb ff ff       	call   c001e725 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ec10:	e9 76 ff ff ff       	jmp    c001eb8b <Vm::x87Handler(regs*)+0x2c9>
c001ec15:	8d 50 10             	lea    edx,[eax+0x10]
c001ec18:	80 fa 07             	cmp    dl,0x7
c001ec1b:	77 1b                	ja     c001ec38 <Vm::x87Handler(regs*)+0x376>
c001ec1d:	83 ec 0c             	sub    esp,0xc
c001ec20:	2d f0 00 00 00       	sub    eax,0xf0
c001ec25:	50                   	push   eax
c001ec26:	e8 5a fb ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ec2b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec32:	89 c6                	mov    esi,eax
c001ec34:	89 d7                	mov    edi,edx
c001ec36:	eb 22                	jmp    c001ec5a <Vm::x87Handler(regs*)+0x398>
c001ec38:	3c f7                	cmp    al,0xf7
c001ec3a:	0f 86 d1 03 00 00    	jbe    c001f011 <Vm::x87Handler(regs*)+0x74f>
c001ec40:	83 ec 0c             	sub    esp,0xc
c001ec43:	6a 00                	push   0x0
c001ec45:	e8 3b fb ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ec4a:	89 c6                	mov    esi,eax
c001ec4c:	89 d7                	mov    edi,edx
c001ec4e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ec52:	2d f8 00 00 00       	sub    eax,0xf8
c001ec57:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec5a:	e8 26 fb ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ec5f:	57                   	push   edi
c001ec60:	56                   	push   esi
c001ec61:	52                   	push   edx
c001ec62:	50                   	push   eax
c001ec63:	e8 eb fa ff ff       	call   c001e753 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ec68:	83 c4 1c             	add    esp,0x1c
c001ec6b:	52                   	push   edx
c001ec6c:	50                   	push   eax
c001ec6d:	6a 00                	push   0x0
c001ec6f:	e9 51 02 00 00       	jmp    c001eec5 <Vm::x87Handler(regs*)+0x603>
c001ec74:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ec78:	8d 50 40             	lea    edx,[eax+0x40]
c001ec7b:	80 fa 07             	cmp    dl,0x7
c001ec7e:	77 37                	ja     c001ecb7 <Vm::x87Handler(regs*)+0x3f5>
c001ec80:	83 ec 0c             	sub    esp,0xc
c001ec83:	2d c0 00 00 00       	sub    eax,0xc0
c001ec88:	50                   	push   eax
c001ec89:	e8 f7 fa ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ec8e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec95:	89 c6                	mov    esi,eax
c001ec97:	89 d7                	mov    edi,edx
c001ec99:	e8 e7 fa ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ec9e:	57                   	push   edi
c001ec9f:	56                   	push   esi
c001eca0:	52                   	push   edx
c001eca1:	50                   	push   eax
c001eca2:	e8 54 fa ff ff       	call   c001e6fb <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001eca7:	83 c4 1c             	add    esp,0x1c
c001ecaa:	52                   	push   edx
c001ecab:	50                   	push   eax
c001ecac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ecb0:	2d c0 00 00 00       	sub    eax,0xc0
c001ecb5:	eb 3d                	jmp    c001ecf4 <Vm::x87Handler(regs*)+0x432>
c001ecb7:	8d 50 38             	lea    edx,[eax+0x38]
c001ecba:	80 fa 07             	cmp    dl,0x7
c001ecbd:	77 3b                	ja     c001ecfa <Vm::x87Handler(regs*)+0x438>
c001ecbf:	83 ec 0c             	sub    esp,0xc
c001ecc2:	2d c8 00 00 00       	sub    eax,0xc8
c001ecc7:	50                   	push   eax
c001ecc8:	e8 b8 fa ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001eccd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ecd4:	89 c6                	mov    esi,eax
c001ecd6:	89 d7                	mov    edi,edx
c001ecd8:	e8 a8 fa ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ecdd:	57                   	push   edi
c001ecde:	56                   	push   esi
c001ecdf:	52                   	push   edx
c001ece0:	50                   	push   eax
c001ece1:	e8 4e fa ff ff       	call   c001e734 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ece6:	83 c4 1c             	add    esp,0x1c
c001ece9:	52                   	push   edx
c001ecea:	50                   	push   eax
c001eceb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ecef:	2d c8 00 00 00       	sub    eax,0xc8
c001ecf4:	50                   	push   eax
c001ecf5:	e9 75 fc ff ff       	jmp    c001e96f <Vm::x87Handler(regs*)+0xad>
c001ecfa:	83 c0 18             	add    eax,0x18
c001ecfd:	3c 07                	cmp    al,0x7
c001ecff:	0f 87 3b 04 00 00    	ja     c001f140 <Vm::x87Handler(regs*)+0x87e>
c001ed05:	83 ec 0c             	sub    esp,0xc
c001ed08:	6a 00                	push   0x0
c001ed0a:	e8 76 fa ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ed0f:	89 c6                	mov    esi,eax
c001ed11:	89 d7                	mov    edi,edx
c001ed13:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed17:	2d e8 00 00 00       	sub    eax,0xe8
c001ed1c:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed1f:	e8 61 fa ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ed24:	57                   	push   edi
c001ed25:	56                   	push   esi
c001ed26:	52                   	push   edx
c001ed27:	50                   	push   eax
c001ed28:	e8 f8 f9 ff ff       	call   c001e725 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ed2d:	83 c4 1c             	add    esp,0x1c
c001ed30:	52                   	push   edx
c001ed31:	50                   	push   eax
c001ed32:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed36:	2d e8 00 00 00       	sub    eax,0xe8
c001ed3b:	eb b7                	jmp    c001ecf4 <Vm::x87Handler(regs*)+0x432>
c001ed3d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed41:	8d 50 40             	lea    edx,[eax+0x40]
c001ed44:	80 fa 07             	cmp    dl,0x7
c001ed47:	77 3a                	ja     c001ed83 <Vm::x87Handler(regs*)+0x4c1>
c001ed49:	83 ec 0c             	sub    esp,0xc
c001ed4c:	2d c0 00 00 00       	sub    eax,0xc0
c001ed51:	50                   	push   eax
c001ed52:	e8 2e fa ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ed57:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ed5e:	89 c6                	mov    esi,eax
c001ed60:	89 d7                	mov    edi,edx
c001ed62:	e8 1e fa ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ed67:	57                   	push   edi
c001ed68:	56                   	push   esi
c001ed69:	52                   	push   edx
c001ed6a:	50                   	push   eax
c001ed6b:	e8 8b f9 ff ff       	call   c001e6fb <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ed70:	83 c4 1c             	add    esp,0x1c
c001ed73:	52                   	push   edx
c001ed74:	50                   	push   eax
c001ed75:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed79:	2d c0 00 00 00       	sub    eax,0xc0
c001ed7e:	e9 9e 01 00 00       	jmp    c001ef21 <Vm::x87Handler(regs*)+0x65f>
c001ed83:	8d 50 20             	lea    edx,[eax+0x20]
c001ed86:	80 fa 07             	cmp    dl,0x7
c001ed89:	77 3a                	ja     c001edc5 <Vm::x87Handler(regs*)+0x503>
c001ed8b:	83 ec 0c             	sub    esp,0xc
c001ed8e:	2d e0 00 00 00       	sub    eax,0xe0
c001ed93:	50                   	push   eax
c001ed94:	e8 ec f9 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ed99:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eda0:	89 c6                	mov    esi,eax
c001eda2:	89 d7                	mov    edi,edx
c001eda4:	e8 dc f9 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001eda9:	57                   	push   edi
c001edaa:	56                   	push   esi
c001edab:	52                   	push   edx
c001edac:	50                   	push   eax
c001edad:	e8 73 f9 ff ff       	call   c001e725 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001edb2:	83 c4 1c             	add    esp,0x1c
c001edb5:	52                   	push   edx
c001edb6:	50                   	push   eax
c001edb7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edbb:	2d e0 00 00 00       	sub    eax,0xe0
c001edc0:	e9 5c 01 00 00       	jmp    c001ef21 <Vm::x87Handler(regs*)+0x65f>
c001edc5:	8d 50 18             	lea    edx,[eax+0x18]
c001edc8:	80 fa 07             	cmp    dl,0x7
c001edcb:	77 3b                	ja     c001ee08 <Vm::x87Handler(regs*)+0x546>
c001edcd:	83 ec 0c             	sub    esp,0xc
c001edd0:	6a 00                	push   0x0
c001edd2:	e8 ae f9 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001edd7:	89 c6                	mov    esi,eax
c001edd9:	89 d7                	mov    edi,edx
c001eddb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eddf:	2d e8 00 00 00       	sub    eax,0xe8
c001ede4:	89 04 24             	mov    DWORD PTR [esp],eax
c001ede7:	e8 99 f9 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001edec:	57                   	push   edi
c001eded:	56                   	push   esi
c001edee:	52                   	push   edx
c001edef:	50                   	push   eax
c001edf0:	e8 30 f9 ff ff       	call   c001e725 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001edf5:	83 c4 1c             	add    esp,0x1c
c001edf8:	52                   	push   edx
c001edf9:	50                   	push   eax
c001edfa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edfe:	2d e8 00 00 00       	sub    eax,0xe8
c001ee03:	e9 19 01 00 00       	jmp    c001ef21 <Vm::x87Handler(regs*)+0x65f>
c001ee08:	8d 50 38             	lea    edx,[eax+0x38]
c001ee0b:	80 fa 07             	cmp    dl,0x7
c001ee0e:	77 37                	ja     c001ee47 <Vm::x87Handler(regs*)+0x585>
c001ee10:	83 ec 0c             	sub    esp,0xc
c001ee13:	2d c8 00 00 00       	sub    eax,0xc8
c001ee18:	50                   	push   eax
c001ee19:	e8 67 f9 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ee1e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee25:	89 c6                	mov    esi,eax
c001ee27:	89 d7                	mov    edi,edx
c001ee29:	e8 57 f9 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ee2e:	57                   	push   edi
c001ee2f:	56                   	push   esi
c001ee30:	52                   	push   edx
c001ee31:	50                   	push   eax
c001ee32:	e8 fd f8 ff ff       	call   c001e734 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ee37:	83 c4 1c             	add    esp,0x1c
c001ee3a:	52                   	push   edx
c001ee3b:	50                   	push   eax
c001ee3c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee40:	2d c8 00 00 00       	sub    eax,0xc8
c001ee45:	eb 7d                	jmp    c001eec4 <Vm::x87Handler(regs*)+0x602>
c001ee47:	3c f7                	cmp    al,0xf7
c001ee49:	76 38                	jbe    c001ee83 <Vm::x87Handler(regs*)+0x5c1>
c001ee4b:	83 ec 0c             	sub    esp,0xc
c001ee4e:	6a 00                	push   0x0
c001ee50:	e8 30 f9 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ee55:	89 c6                	mov    esi,eax
c001ee57:	89 d7                	mov    edi,edx
c001ee59:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee5d:	2d f8 00 00 00       	sub    eax,0xf8
c001ee62:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee65:	e8 1b f9 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ee6a:	57                   	push   edi
c001ee6b:	56                   	push   esi
c001ee6c:	52                   	push   edx
c001ee6d:	50                   	push   eax
c001ee6e:	e8 e0 f8 ff ff       	call   c001e753 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ee73:	83 c4 1c             	add    esp,0x1c
c001ee76:	52                   	push   edx
c001ee77:	50                   	push   eax
c001ee78:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee7c:	2d f8 00 00 00       	sub    eax,0xf8
c001ee81:	eb 41                	jmp    c001eec4 <Vm::x87Handler(regs*)+0x602>
c001ee83:	8d 50 10             	lea    edx,[eax+0x10]
c001ee86:	80 fa 07             	cmp    dl,0x7
c001ee89:	0f 87 5a 01 00 00    	ja     c001efe9 <Vm::x87Handler(regs*)+0x727>
c001ee8f:	83 ec 0c             	sub    esp,0xc
c001ee92:	2d f0 00 00 00       	sub    eax,0xf0
c001ee97:	50                   	push   eax
c001ee98:	e8 e8 f8 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ee9d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eea4:	89 c6                	mov    esi,eax
c001eea6:	89 d7                	mov    edi,edx
c001eea8:	e8 d8 f8 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001eead:	57                   	push   edi
c001eeae:	56                   	push   esi
c001eeaf:	52                   	push   edx
c001eeb0:	50                   	push   eax
c001eeb1:	e8 9d f8 ff ff       	call   c001e753 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001eeb6:	83 c4 1c             	add    esp,0x1c
c001eeb9:	52                   	push   edx
c001eeba:	50                   	push   eax
c001eebb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eebf:	2d f0 00 00 00       	sub    eax,0xf0
c001eec4:	50                   	push   eax
c001eec5:	e8 fe f8 ff ff       	call   c001e7c8 <Vm::fpuSetReg(int, unsigned long long)>
c001eeca:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001eece:	e8 9d f9 ff ff       	call   c001e870 <Vm::fpuPop()>
c001eed3:	e9 5e fa ff ff       	jmp    c001e936 <Vm::x87Handler(regs*)+0x74>
c001eed8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eedc:	8d 50 30             	lea    edx,[eax+0x30]
c001eedf:	80 fa 07             	cmp    dl,0x7
c001eee2:	77 1d                	ja     c001ef01 <Vm::x87Handler(regs*)+0x63f>
c001eee4:	83 ec 0c             	sub    esp,0xc
c001eee7:	6a 00                	push   0x0
c001eee9:	e8 97 f8 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001eeee:	83 c4 0c             	add    esp,0xc
c001eef1:	52                   	push   edx
c001eef2:	50                   	push   eax
c001eef3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eef7:	2d d0 00 00 00       	sub    eax,0xd0
c001eefc:	e9 f3 fd ff ff       	jmp    c001ecf4 <Vm::x87Handler(regs*)+0x432>
c001ef01:	8d 50 28             	lea    edx,[eax+0x28]
c001ef04:	80 fa 07             	cmp    dl,0x7
c001ef07:	77 28                	ja     c001ef31 <Vm::x87Handler(regs*)+0x66f>
c001ef09:	83 ec 0c             	sub    esp,0xc
c001ef0c:	6a 00                	push   0x0
c001ef0e:	e8 72 f8 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ef13:	83 c4 0c             	add    esp,0xc
c001ef16:	52                   	push   edx
c001ef17:	50                   	push   eax
c001ef18:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef1c:	2d d8 00 00 00       	sub    eax,0xd8
c001ef21:	50                   	push   eax
c001ef22:	e8 a1 f8 ff ff       	call   c001e7c8 <Vm::fpuSetReg(int, unsigned long long)>
c001ef27:	e8 44 f9 ff ff       	call   c001e870 <Vm::fpuPop()>
c001ef2c:	e9 01 fa ff ff       	jmp    c001e932 <Vm::x87Handler(regs*)+0x70>
c001ef31:	8d 50 20             	lea    edx,[eax+0x20]
c001ef34:	80 fa 07             	cmp    dl,0x7
c001ef37:	77 30                	ja     c001ef69 <Vm::x87Handler(regs*)+0x6a7>
c001ef39:	83 ec 0c             	sub    esp,0xc
c001ef3c:	2d e0 00 00 00       	sub    eax,0xe0
c001ef41:	50                   	push   eax
c001ef42:	e8 3e f8 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ef47:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef4e:	89 c6                	mov    esi,eax
c001ef50:	89 d7                	mov    edi,edx
c001ef52:	e8 2e f8 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ef57:	57                   	push   edi
c001ef58:	56                   	push   esi
c001ef59:	52                   	push   edx
c001ef5a:	50                   	push   eax
c001ef5b:	e8 48 f7 ff ff       	call   c001e6a8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ef60:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ef64:	e9 54 02 00 00       	jmp    c001f1bd <Vm::x87Handler(regs*)+0x8fb>
c001ef69:	8d 50 18             	lea    edx,[eax+0x18]
c001ef6c:	80 fa 07             	cmp    dl,0x7
c001ef6f:	0f 87 43 fb ff ff    	ja     c001eab8 <Vm::x87Handler(regs*)+0x1f6>
c001ef75:	83 ec 0c             	sub    esp,0xc
c001ef78:	2d e8 00 00 00       	sub    eax,0xe8
c001ef7d:	50                   	push   eax
c001ef7e:	e8 02 f8 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ef83:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef8a:	89 c6                	mov    esi,eax
c001ef8c:	89 d7                	mov    edi,edx
c001ef8e:	e8 f2 f7 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001ef93:	57                   	push   edi
c001ef94:	56                   	push   esi
c001ef95:	52                   	push   edx
c001ef96:	50                   	push   eax
c001ef97:	e8 0c f7 ff ff       	call   c001e6a8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ef9c:	83 c4 20             	add    esp,0x20
c001ef9f:	e8 cc f8 ff ff       	call   c001e870 <Vm::fpuPop()>
c001efa4:	eb 62                	jmp    c001f008 <Vm::x87Handler(regs*)+0x746>
c001efa6:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001efaa:	0f 85 0f 01 00 00    	jne    c001f0bf <Vm::x87Handler(regs*)+0x7fd>
c001efb0:	83 ec 0c             	sub    esp,0xc
c001efb3:	6a 01                	push   0x1
c001efb5:	e8 cb f7 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001efba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001efc1:	89 c6                	mov    esi,eax
c001efc3:	89 d7                	mov    edi,edx
c001efc5:	e8 bb f7 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001efca:	57                   	push   edi
c001efcb:	56                   	push   esi
c001efcc:	52                   	push   edx
c001efcd:	50                   	push   eax
c001efce:	e8 d5 f6 ff ff       	call   c001e6a8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001efd3:	83 c4 20             	add    esp,0x20
c001efd6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001efda:	e8 91 f8 ff ff       	call   c001e870 <Vm::fpuPop()>
c001efdf:	e8 8c f8 ff ff       	call   c001e870 <Vm::fpuPop()>
c001efe4:	e9 50 f9 ff ff       	jmp    c001e939 <Vm::x87Handler(regs*)+0x77>
c001efe9:	3c d9                	cmp    al,0xd9
c001efeb:	0f 85 b5 02 00 00    	jne    c001f2a6 <Vm::x87Handler(regs*)+0x9e4>
c001eff1:	eb bd                	jmp    c001efb0 <Vm::x87Handler(regs*)+0x6ee>
c001eff3:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001eff7:	0f 85 ea 02 00 00    	jne    c001f2e7 <Vm::x87Handler(regs*)+0xa25>
c001effd:	0f b7 05 00 de 02 c0 	movzx  eax,WORD PTR ds:0xc002de00
c001f004:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f008:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f00c:	e9 28 f9 ff ff       	jmp    c001e939 <Vm::x87Handler(regs*)+0x77>
c001f011:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f015:	84 d2                	test   dl,dl
c001f017:	75 0f                	jne    c001f028 <Vm::x87Handler(regs*)+0x766>
c001f019:	83 ec 0c             	sub    esp,0xc
c001f01c:	ff 36                	push   DWORD PTR [esi]
c001f01e:	e8 b1 f4 ff ff       	call   c001e4d4 <Vm::fpu32ToInternal(unsigned int)>
c001f023:	e9 2c 01 00 00       	jmp    c001f154 <Vm::x87Handler(regs*)+0x892>
c001f028:	80 fa 01             	cmp    dl,0x1
c001f02b:	75 0f                	jne    c001f03c <Vm::x87Handler(regs*)+0x77a>
c001f02d:	83 ec 0c             	sub    esp,0xc
c001f030:	ff 36                	push   DWORD PTR [esi]
c001f032:	e8 9d f4 ff ff       	call   c001e4d4 <Vm::fpu32ToInternal(unsigned int)>
c001f037:	e9 81 02 00 00       	jmp    c001f2bd <Vm::x87Handler(regs*)+0x9fb>
c001f03c:	80 fa 04             	cmp    dl,0x4
c001f03f:	75 0f                	jne    c001f050 <Vm::x87Handler(regs*)+0x78e>
c001f041:	83 ec 0c             	sub    esp,0xc
c001f044:	ff 36                	push   DWORD PTR [esi]
c001f046:	e8 89 f4 ff ff       	call   c001e4d4 <Vm::fpu32ToInternal(unsigned int)>
c001f04b:	e9 86 01 00 00       	jmp    c001f1d6 <Vm::x87Handler(regs*)+0x914>
c001f050:	80 fa 05             	cmp    dl,0x5
c001f053:	75 1b                	jne    c001f070 <Vm::x87Handler(regs*)+0x7ae>
c001f055:	83 ec 0c             	sub    esp,0xc
c001f058:	6a 00                	push   0x0
c001f05a:	e8 26 f7 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001f05f:	89 c7                	mov    edi,eax
c001f061:	89 d5                	mov    ebp,edx
c001f063:	58                   	pop    eax
c001f064:	ff 36                	push   DWORD PTR [esi]
c001f066:	e8 69 f4 ff ff       	call   c001e4d4 <Vm::fpu32ToInternal(unsigned int)>
c001f06b:	e9 a3 01 00 00       	jmp    c001f213 <Vm::x87Handler(regs*)+0x951>
c001f070:	80 fa 06             	cmp    dl,0x6
c001f073:	75 0f                	jne    c001f084 <Vm::x87Handler(regs*)+0x7c2>
c001f075:	83 ec 0c             	sub    esp,0xc
c001f078:	ff 36                	push   DWORD PTR [esi]
c001f07a:	e8 55 f4 ff ff       	call   c001e4d4 <Vm::fpu32ToInternal(unsigned int)>
c001f07f:	e9 ae 01 00 00       	jmp    c001f232 <Vm::x87Handler(regs*)+0x970>
c001f084:	31 c0                	xor    eax,eax
c001f086:	80 fa 07             	cmp    dl,0x7
c001f089:	0f 85 94 02 00 00    	jne    c001f323 <Vm::x87Handler(regs*)+0xa61>
c001f08f:	83 ec 0c             	sub    esp,0xc
c001f092:	6a 00                	push   0x0
c001f094:	e8 ec f6 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001f099:	89 c7                	mov    edi,eax
c001f09b:	89 d5                	mov    ebp,edx
c001f09d:	58                   	pop    eax
c001f09e:	ff 36                	push   DWORD PTR [esi]
c001f0a0:	e8 2f f4 ff ff       	call   c001e4d4 <Vm::fpu32ToInternal(unsigned int)>
c001f0a5:	e9 cb 01 00 00       	jmp    c001f275 <Vm::x87Handler(regs*)+0x9b3>
c001f0aa:	80 fa 03             	cmp    dl,0x3
c001f0ad:	0f 85 d3 01 00 00    	jne    c001f286 <Vm::x87Handler(regs*)+0x9c4>
c001f0b3:	e8 b8 f7 ff ff       	call   c001e870 <Vm::fpuPop()>
c001f0b8:	51                   	push   ecx
c001f0b9:	51                   	push   ecx
c001f0ba:	e9 de 01 00 00       	jmp    c001f29d <Vm::x87Handler(regs*)+0x9db>
c001f0bf:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f0c3:	80 fa 01             	cmp    dl,0x1
c001f0c6:	75 09                	jne    c001f0d1 <Vm::x87Handler(regs*)+0x80f>
c001f0c8:	57                   	push   edi
c001f0c9:	57                   	push   edi
c001f0ca:	8b 06                	mov    eax,DWORD PTR [esi]
c001f0cc:	e9 e3 01 00 00       	jmp    c001f2b4 <Vm::x87Handler(regs*)+0x9f2>
c001f0d1:	80 fa 04             	cmp    dl,0x4
c001f0d4:	75 12                	jne    c001f0e8 <Vm::x87Handler(regs*)+0x826>
c001f0d6:	31 d2                	xor    edx,edx
c001f0d8:	51                   	push   ecx
c001f0d9:	51                   	push   ecx
c001f0da:	8b 06                	mov    eax,DWORD PTR [esi]
c001f0dc:	52                   	push   edx
c001f0dd:	50                   	push   eax
c001f0de:	e8 d0 f4 ff ff       	call   c001e5b3 <Vm::fpuLongToFloat(long long)>
c001f0e3:	e9 ee 00 00 00       	jmp    c001f1d6 <Vm::x87Handler(regs*)+0x914>
c001f0e8:	31 c0                	xor    eax,eax
c001f0ea:	80 fa 07             	cmp    dl,0x7
c001f0ed:	0f 85 30 02 00 00    	jne    c001f323 <Vm::x87Handler(regs*)+0xa61>
c001f0f3:	83 ec 0c             	sub    esp,0xc
c001f0f6:	6a 00                	push   0x0
c001f0f8:	e8 88 f6 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001f0fd:	89 c7                	mov    edi,eax
c001f0ff:	89 d5                	mov    ebp,edx
c001f101:	58                   	pop    eax
c001f102:	8b 06                	mov    eax,DWORD PTR [esi]
c001f104:	5a                   	pop    edx
c001f105:	31 d2                	xor    edx,edx
c001f107:	52                   	push   edx
c001f108:	50                   	push   eax
c001f109:	e8 a5 f4 ff ff       	call   c001e5b3 <Vm::fpuLongToFloat(long long)>
c001f10e:	e9 62 01 00 00       	jmp    c001f275 <Vm::x87Handler(regs*)+0x9b3>
c001f113:	84 d2                	test   dl,dl
c001f115:	75 0d                	jne    c001f124 <Vm::x87Handler(regs*)+0x862>
c001f117:	31 d2                	xor    edx,edx
c001f119:	55                   	push   ebp
c001f11a:	55                   	push   ebp
c001f11b:	8b 06                	mov    eax,DWORD PTR [esi]
c001f11d:	52                   	push   edx
c001f11e:	50                   	push   eax
c001f11f:	e9 d3 01 00 00       	jmp    c001f2f7 <Vm::x87Handler(regs*)+0xa35>
c001f124:	31 c0                	xor    eax,eax
c001f126:	80 fa 02             	cmp    dl,0x2
c001f129:	0f 85 f4 01 00 00    	jne    c001f323 <Vm::x87Handler(regs*)+0xa61>
c001f12f:	83 ec 0c             	sub    esp,0xc
c001f132:	6a 00                	push   0x0
c001f134:	e8 4c f6 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001f139:	59                   	pop    ecx
c001f13a:	5f                   	pop    edi
c001f13b:	e9 6a f9 ff ff       	jmp    c001eaaa <Vm::x87Handler(regs*)+0x1e8>
c001f140:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f144:	84 d2                	test   dl,dl
c001f146:	75 2a                	jne    c001f172 <Vm::x87Handler(regs*)+0x8b0>
c001f148:	50                   	push   eax
c001f149:	50                   	push   eax
c001f14a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f14d:	ff 36                	push   DWORD PTR [esi]
c001f14f:	e8 c5 f3 ff ff       	call   c001e519 <Vm::fpu64ToInternal(unsigned long long)>
c001f154:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f15b:	89 c6                	mov    esi,eax
c001f15d:	89 d7                	mov    edi,edx
c001f15f:	e8 21 f6 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001f164:	57                   	push   edi
c001f165:	56                   	push   esi
c001f166:	52                   	push   edx
c001f167:	50                   	push   eax
c001f168:	e8 8e f5 ff ff       	call   c001e6fb <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f16d:	e9 64 01 00 00       	jmp    c001f2d6 <Vm::x87Handler(regs*)+0xa14>
c001f172:	80 fa 01             	cmp    dl,0x1
c001f175:	75 11                	jne    c001f188 <Vm::x87Handler(regs*)+0x8c6>
c001f177:	50                   	push   eax
c001f178:	50                   	push   eax
c001f179:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f17c:	ff 36                	push   DWORD PTR [esi]
c001f17e:	e8 96 f3 ff ff       	call   c001e519 <Vm::fpu64ToInternal(unsigned long long)>
c001f183:	e9 35 01 00 00       	jmp    c001f2bd <Vm::x87Handler(regs*)+0x9fb>
c001f188:	80 fa 02             	cmp    dl,0x2
c001f18b:	0f 85 54 f9 ff ff    	jne    c001eae5 <Vm::x87Handler(regs*)+0x223>
c001f191:	55                   	push   ebp
c001f192:	55                   	push   ebp
c001f193:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f196:	ff 36                	push   DWORD PTR [esi]
c001f198:	e8 7c f3 ff ff       	call   c001e519 <Vm::fpu64ToInternal(unsigned long long)>
c001f19d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f1a4:	89 c6                	mov    esi,eax
c001f1a6:	89 d7                	mov    edi,edx
c001f1a8:	e8 d8 f5 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001f1ad:	57                   	push   edi
c001f1ae:	56                   	push   esi
c001f1af:	52                   	push   edx
c001f1b0:	50                   	push   eax
c001f1b1:	e8 f2 f4 ff ff       	call   c001e6a8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f1b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f1ba:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f1bd:	83 c4 20             	add    esp,0x20
c001f1c0:	e9 74 f7 ff ff       	jmp    c001e939 <Vm::x87Handler(regs*)+0x77>
c001f1c5:	80 fa 04             	cmp    dl,0x4
c001f1c8:	75 2a                	jne    c001f1f4 <Vm::x87Handler(regs*)+0x932>
c001f1ca:	51                   	push   ecx
c001f1cb:	51                   	push   ecx
c001f1cc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f1cf:	ff 36                	push   DWORD PTR [esi]
c001f1d1:	e8 43 f3 ff ff       	call   c001e519 <Vm::fpu64ToInternal(unsigned long long)>
c001f1d6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f1dd:	89 c6                	mov    esi,eax
c001f1df:	89 d7                	mov    edi,edx
c001f1e1:	e8 9f f5 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001f1e6:	57                   	push   edi
c001f1e7:	56                   	push   esi
c001f1e8:	52                   	push   edx
c001f1e9:	50                   	push   eax
c001f1ea:	e8 36 f5 ff ff       	call   c001e725 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f1ef:	e9 e2 00 00 00       	jmp    c001f2d6 <Vm::x87Handler(regs*)+0xa14>
c001f1f4:	80 fa 05             	cmp    dl,0x5
c001f1f7:	75 28                	jne    c001f221 <Vm::x87Handler(regs*)+0x95f>
c001f1f9:	83 ec 0c             	sub    esp,0xc
c001f1fc:	6a 00                	push   0x0
c001f1fe:	e8 82 f5 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001f203:	89 c7                	mov    edi,eax
c001f205:	89 d5                	mov    ebp,edx
c001f207:	58                   	pop    eax
c001f208:	5a                   	pop    edx
c001f209:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f20c:	ff 36                	push   DWORD PTR [esi]
c001f20e:	e8 06 f3 ff ff       	call   c001e519 <Vm::fpu64ToInternal(unsigned long long)>
c001f213:	83 c4 10             	add    esp,0x10
c001f216:	55                   	push   ebp
c001f217:	57                   	push   edi
c001f218:	52                   	push   edx
c001f219:	50                   	push   eax
c001f21a:	e8 06 f5 ff ff       	call   c001e725 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f21f:	eb 60                	jmp    c001f281 <Vm::x87Handler(regs*)+0x9bf>
c001f221:	80 fa 06             	cmp    dl,0x6
c001f224:	75 2a                	jne    c001f250 <Vm::x87Handler(regs*)+0x98e>
c001f226:	51                   	push   ecx
c001f227:	51                   	push   ecx
c001f228:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f22b:	ff 36                	push   DWORD PTR [esi]
c001f22d:	e8 e7 f2 ff ff       	call   c001e519 <Vm::fpu64ToInternal(unsigned long long)>
c001f232:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f239:	89 c6                	mov    esi,eax
c001f23b:	89 d7                	mov    edi,edx
c001f23d:	e8 43 f5 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001f242:	57                   	push   edi
c001f243:	56                   	push   esi
c001f244:	52                   	push   edx
c001f245:	50                   	push   eax
c001f246:	e8 08 f5 ff ff       	call   c001e753 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f24b:	e9 86 00 00 00       	jmp    c001f2d6 <Vm::x87Handler(regs*)+0xa14>
c001f250:	31 c0                	xor    eax,eax
c001f252:	80 fa 07             	cmp    dl,0x7
c001f255:	0f 85 c8 00 00 00    	jne    c001f323 <Vm::x87Handler(regs*)+0xa61>
c001f25b:	83 ec 0c             	sub    esp,0xc
c001f25e:	6a 00                	push   0x0
c001f260:	e8 20 f5 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001f265:	89 c7                	mov    edi,eax
c001f267:	89 d5                	mov    ebp,edx
c001f269:	58                   	pop    eax
c001f26a:	5a                   	pop    edx
c001f26b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f26e:	ff 36                	push   DWORD PTR [esi]
c001f270:	e8 a4 f2 ff ff       	call   c001e519 <Vm::fpu64ToInternal(unsigned long long)>
c001f275:	83 c4 10             	add    esp,0x10
c001f278:	55                   	push   ebp
c001f279:	57                   	push   edi
c001f27a:	52                   	push   edx
c001f27b:	50                   	push   eax
c001f27c:	e8 d2 f4 ff ff       	call   c001e753 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f281:	83 c4 0c             	add    esp,0xc
c001f284:	eb 53                	jmp    c001f2d9 <Vm::x87Handler(regs*)+0xa17>
c001f286:	31 c0                	xor    eax,eax
c001f288:	80 fa 02             	cmp    dl,0x2
c001f28b:	0f 85 92 00 00 00    	jne    c001f323 <Vm::x87Handler(regs*)+0xa61>
c001f291:	83 ec 0c             	sub    esp,0xc
c001f294:	6a 00                	push   0x0
c001f296:	e8 ea f4 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001f29b:	59                   	pop    ecx
c001f29c:	5f                   	pop    edi
c001f29d:	52                   	push   edx
c001f29e:	50                   	push   eax
c001f29f:	e8 27 f2 ff ff       	call   c001e4cb <Vm::fpuInternalTo64(unsigned long long)>
c001f2a4:	eb 70                	jmp    c001f316 <Vm::x87Handler(regs*)+0xa54>
c001f2a6:	31 c0                	xor    eax,eax
c001f2a8:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001f2ad:	75 74                	jne    c001f323 <Vm::x87Handler(regs*)+0xa61>
c001f2af:	50                   	push   eax
c001f2b0:	50                   	push   eax
c001f2b1:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f2b4:	31 d2                	xor    edx,edx
c001f2b6:	52                   	push   edx
c001f2b7:	50                   	push   eax
c001f2b8:	e8 f6 f2 ff ff       	call   c001e5b3 <Vm::fpuLongToFloat(long long)>
c001f2bd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2c4:	89 c6                	mov    esi,eax
c001f2c6:	89 d7                	mov    edi,edx
c001f2c8:	e8 b8 f4 ff ff       	call   c001e785 <Vm::fpuGetReg(int)>
c001f2cd:	57                   	push   edi
c001f2ce:	56                   	push   esi
c001f2cf:	52                   	push   edx
c001f2d0:	50                   	push   eax
c001f2d1:	e8 5e f4 ff ff       	call   c001e734 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f2d6:	83 c4 1c             	add    esp,0x1c
c001f2d9:	52                   	push   edx
c001f2da:	50                   	push   eax
c001f2db:	6a 00                	push   0x0
c001f2dd:	e8 e6 f4 ff ff       	call   c001e7c8 <Vm::fpuSetReg(int, unsigned long long)>
c001f2e2:	e9 f2 f7 ff ff       	jmp    c001ead9 <Vm::x87Handler(regs*)+0x217>
c001f2e7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f2eb:	80 fa 05             	cmp    dl,0x5
c001f2ee:	75 11                	jne    c001f301 <Vm::x87Handler(regs*)+0xa3f>
c001f2f0:	55                   	push   ebp
c001f2f1:	55                   	push   ebp
c001f2f2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f2f5:	ff 36                	push   DWORD PTR [esi]
c001f2f7:	e8 81 f2 ff ff       	call   c001e57d <Vm::fpuULongToFloat(unsigned long long)>
c001f2fc:	e9 cf f7 ff ff       	jmp    c001ead0 <Vm::x87Handler(regs*)+0x20e>
c001f301:	31 c0                	xor    eax,eax
c001f303:	80 fa 07             	cmp    dl,0x7
c001f306:	75 1b                	jne    c001f323 <Vm::x87Handler(regs*)+0xa61>
c001f308:	e8 63 f5 ff ff       	call   c001e870 <Vm::fpuPop()>
c001f30d:	51                   	push   ecx
c001f30e:	51                   	push   ecx
c001f30f:	52                   	push   edx
c001f310:	50                   	push   eax
c001f311:	e8 0c f2 ff ff       	call   c001e522 <Vm::fpuFloatToLong(unsigned long long)>
c001f316:	83 c4 10             	add    esp,0x10
c001f319:	89 06                	mov    DWORD PTR [esi],eax
c001f31b:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001f31e:	e9 f8 f7 ff ff       	jmp    c001eb1b <Vm::x87Handler(regs*)+0x259>
c001f323:	83 c4 1c             	add    esp,0x1c
c001f326:	5b                   	pop    ebx
c001f327:	5e                   	pop    esi
c001f328:	5f                   	pop    edi
c001f329:	5d                   	pop    ebp
c001f32a:	c3                   	ret    

c001f32b <__static_initialization_and_destruction_0(int, int)>:
c001f32b:	83 ec 0c             	sub    esp,0xc
c001f32e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f333:	75 1a                	jne    c001f34f <__static_initialization_and_destruction_0(int, int)+0x24>
c001f335:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f33d:	75 10                	jne    c001f34f <__static_initialization_and_destruction_0(int, int)+0x24>
c001f33f:	83 ec 0c             	sub    esp,0xc
c001f342:	68 00 de 02 c0       	push   0xc002de00
c001f347:	e8 c4 82 00 00       	call   c0027610 <Vm::_FPUState::_FPUState()>
c001f34c:	83 c4 10             	add    esp,0x10
c001f34f:	90                   	nop
c001f350:	83 c4 0c             	add    esp,0xc
c001f353:	c3                   	ret    

c001f354 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001f354:	83 ec 0c             	sub    esp,0xc
c001f357:	83 ec 08             	sub    esp,0x8
c001f35a:	68 ff ff 00 00       	push   0xffff
c001f35f:	6a 01                	push   0x1
c001f361:	e8 c5 ff ff ff       	call   c001f32b <__static_initialization_and_destruction_0(int, int)>
c001f366:	83 c4 10             	add    esp,0x10
c001f369:	83 c4 0c             	add    esp,0xc
c001f36c:	c3                   	ret    
c001f36d:	90                   	nop

c001f36e <FAT::getName()>:
c001f36e:	b8 8c ac 02 c0       	mov    eax,0xc002ac8c
c001f373:	c3                   	ret    

c001f374 <FAT::tell(void*, unsigned long long*)>:
c001f374:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f379:	75 06                	jne    c001f381 <FAT::tell(void*, unsigned long long*)+0xd>
c001f37b:	b8 04 00 00 00       	mov    eax,0x4
c001f380:	c3                   	ret    
c001f381:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f386:	75 06                	jne    c001f38e <FAT::tell(void*, unsigned long long*)+0x1a>
c001f388:	b8 04 00 00 00       	mov    eax,0x4
c001f38d:	c3                   	ret    
c001f38e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f392:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001f395:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001f398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f39c:	89 01                	mov    DWORD PTR [ecx],eax
c001f39e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f3a1:	b8 00 00 00 00       	mov    eax,0x0
c001f3a6:	c3                   	ret    
c001f3a7:	90                   	nop

c001f3a8 <FAT::stat(void*, unsigned long long*)>:
c001f3a8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f3ad:	75 06                	jne    c001f3b5 <FAT::stat(void*, unsigned long long*)+0xd>
c001f3af:	b8 04 00 00 00       	mov    eax,0x4
c001f3b4:	c3                   	ret    
c001f3b5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f3ba:	75 06                	jne    c001f3c2 <FAT::stat(void*, unsigned long long*)+0x1a>
c001f3bc:	b8 04 00 00 00       	mov    eax,0x4
c001f3c1:	c3                   	ret    
c001f3c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f3c6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f3c9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f3cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f3d0:	89 01                	mov    DWORD PTR [ecx],eax
c001f3d2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f3d5:	b8 00 00 00 00       	mov    eax,0x0
c001f3da:	c3                   	ret    
c001f3db:	90                   	nop

c001f3dc <FAT::~FAT()>:
c001f3dc:	83 ec 0c             	sub    esp,0xc
c001f3df:	ba 10 ad 02 c0       	mov    edx,0xc002ad10
c001f3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3e8:	89 10                	mov    DWORD PTR [eax],edx
c001f3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3ee:	83 ec 0c             	sub    esp,0xc
c001f3f1:	50                   	push   eax
c001f3f2:	e8 b7 35 ff ff       	call   c00129ae <Filesystem::~Filesystem()>
c001f3f7:	83 c4 10             	add    esp,0x10
c001f3fa:	90                   	nop
c001f3fb:	83 c4 0c             	add    esp,0xc
c001f3fe:	c3                   	ret    
c001f3ff:	90                   	nop

c001f400 <FAT::~FAT()>:
c001f400:	83 ec 0c             	sub    esp,0xc
c001f403:	83 ec 0c             	sub    esp,0xc
c001f406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f40a:	e8 cd ff ff ff       	call   c001f3dc <FAT::~FAT()>
c001f40f:	83 c4 10             	add    esp,0x10
c001f412:	83 ec 08             	sub    esp,0x8
c001f415:	6a 08                	push   0x8
c001f417:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f41b:	e8 85 31 ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c001f420:	83 c4 10             	add    esp,0x10
c001f423:	83 c4 0c             	add    esp,0xc
c001f426:	c3                   	ret    
c001f427:	90                   	nop

c001f428 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001f428:	83 ec 1c             	sub    esp,0x1c
c001f42b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001f432:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001f437:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f43b:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c001f442:	83 f8 ff             	cmp    eax,0xffffffff
c001f445:	75 34                	jne    c001f47b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001f447:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f44b:	88 c2                	mov    dl,al
c001f44d:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001f452:	01 d0                	add    eax,edx
c001f454:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f458:	8b 15 60 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de60
c001f45e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f462:	89 14 85 80 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2180],edx
c001f469:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001f46e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f472:	89 14 85 00 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2100],edx
c001f479:	eb 17                	jmp    c001f492 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001f47b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f47f:	88 c2                	mov    dl,al
c001f481:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f485:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c001f48c:	01 d0                	add    eax,edx
c001f48e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f492:	83 ec 04             	sub    esp,0x4
c001f495:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f499:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f49d:	8d 44 24 15          	lea    eax,[esp+0x15]
c001f4a1:	50                   	push   eax
c001f4a2:	e8 41 76 fe ff       	call   c0006ae8 <f_getlabel>
c001f4a7:	83 c4 10             	add    esp,0x10
c001f4aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f4ae:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f4b3:	75 07                	jne    c001f4bc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001f4b5:	b8 00 00 00 00       	mov    eax,0x0
c001f4ba:	eb 05                	jmp    c001f4c1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001f4bc:	b8 01 00 00 00       	mov    eax,0x1
c001f4c1:	83 c4 1c             	add    esp,0x1c
c001f4c4:	c3                   	ret    
c001f4c5:	90                   	nop

c001f4c6 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001f4c6:	57                   	push   edi
c001f4c7:	83 ec 58             	sub    esp,0x58
c001f4ca:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001f4d2:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f4d6:	b9 0f 00 00 00       	mov    ecx,0xf
c001f4db:	b8 00 00 00 00       	mov    eax,0x0
c001f4e0:	fc                   	cld    
c001f4e1:	89 d7                	mov    edi,edx
c001f4e3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f4e5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f4e9:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c001f4f0:	83 f8 ff             	cmp    eax,0xffffffff
c001f4f3:	75 34                	jne    c001f529 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001f4f5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f4f9:	88 c2                	mov    dl,al
c001f4fb:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001f500:	01 d0                	add    eax,edx
c001f502:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f506:	8b 15 60 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de60
c001f50c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f510:	89 14 85 80 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2180],edx
c001f517:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001f51c:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001f520:	89 14 85 00 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2100],edx
c001f527:	eb 17                	jmp    c001f540 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001f529:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f52d:	88 c2                	mov    dl,al
c001f52f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f533:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c001f53a:	01 d0                	add    eax,edx
c001f53c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f540:	83 ec 08             	sub    esp,0x8
c001f543:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001f547:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f54b:	50                   	push   eax
c001f54c:	e8 90 12 fe ff       	call   c00007e1 <strcat>
c001f551:	83 c4 10             	add    esp,0x10
c001f554:	83 ec 0c             	sub    esp,0xc
c001f557:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f55b:	50                   	push   eax
c001f55c:	e8 75 77 fe ff       	call   c0006cd6 <f_setlabel>
c001f561:	83 c4 10             	add    esp,0x10
c001f564:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f568:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001f56d:	75 07                	jne    c001f576 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001f56f:	b8 00 00 00 00       	mov    eax,0x0
c001f574:	eb 05                	jmp    c001f57b <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001f576:	b8 01 00 00 00       	mov    eax,0x1
c001f57b:	83 c4 58             	add    esp,0x58
c001f57e:	5f                   	pop    edi
c001f57f:	c3                   	ret    

c001f580 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001f580:	83 ec 2c             	sub    esp,0x2c
c001f583:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001f58b:	83 ec 08             	sub    esp,0x8
c001f58e:	68 b0 ac 02 c0       	push   0xc002acb0
c001f593:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f597:	e8 df 11 fe ff       	call   c000077b <strcmp>
c001f59c:	83 c4 10             	add    esp,0x10
c001f59f:	85 c0                	test   eax,eax
c001f5a1:	0f 94 c0             	sete   al
c001f5a4:	84 c0                	test   al,al
c001f5a6:	74 0d                	je     c001f5b5 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001f5a8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f5b0:	e9 a6 00 00 00       	jmp    c001f65b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f5b5:	83 ec 08             	sub    esp,0x8
c001f5b8:	68 a2 ac 02 c0       	push   0xc002aca2
c001f5bd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f5c1:	e8 b5 11 fe ff       	call   c000077b <strcmp>
c001f5c6:	83 c4 10             	add    esp,0x10
c001f5c9:	85 c0                	test   eax,eax
c001f5cb:	0f 94 c0             	sete   al
c001f5ce:	84 c0                	test   al,al
c001f5d0:	74 0a                	je     c001f5dc <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001f5d2:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f5da:	eb 7f                	jmp    c001f65b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f5dc:	83 ec 08             	sub    esp,0x8
c001f5df:	68 a8 ac 02 c0       	push   0xc002aca8
c001f5e4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f5e8:	e8 8e 11 fe ff       	call   c000077b <strcmp>
c001f5ed:	83 c4 10             	add    esp,0x10
c001f5f0:	85 c0                	test   eax,eax
c001f5f2:	0f 94 c0             	sete   al
c001f5f5:	84 c0                	test   al,al
c001f5f7:	74 0a                	je     c001f603 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001f5f9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f601:	eb 58                	jmp    c001f65b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f603:	83 ec 08             	sub    esp,0x8
c001f606:	68 2c 7d 02 c0       	push   0xc0027d2c
c001f60b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f60f:	e8 67 11 fe ff       	call   c000077b <strcmp>
c001f614:	83 c4 10             	add    esp,0x10
c001f617:	85 c0                	test   eax,eax
c001f619:	0f 94 c0             	sete   al
c001f61c:	84 c0                	test   al,al
c001f61e:	74 0a                	je     c001f62a <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001f620:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001f628:	eb 31                	jmp    c001f65b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f62a:	83 ec 08             	sub    esp,0x8
c001f62d:	68 ae ac 02 c0       	push   0xc002acae
c001f632:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f636:	e8 40 11 fe ff       	call   c000077b <strcmp>
c001f63b:	83 c4 10             	add    esp,0x10
c001f63e:	85 c0                	test   eax,eax
c001f640:	0f 94 c0             	sete   al
c001f643:	84 c0                	test   al,al
c001f645:	74 0a                	je     c001f651 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001f647:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001f64f:	eb 0a                	jmp    c001f65b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f651:	b8 08 00 00 00       	mov    eax,0x8
c001f656:	e9 04 01 00 00       	jmp    c001f75f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f65b:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001f662:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001f667:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f66b:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c001f672:	83 f8 ff             	cmp    eax,0xffffffff
c001f675:	75 34                	jne    c001f6ab <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001f677:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f67b:	88 c2                	mov    dl,al
c001f67d:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001f682:	01 d0                	add    eax,edx
c001f684:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f688:	8b 15 60 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de60
c001f68e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f692:	89 14 85 80 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2180],edx
c001f699:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001f69e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f6a2:	89 14 85 00 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2100],edx
c001f6a9:	eb 17                	jmp    c001f6c2 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001f6ab:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f6af:	88 c2                	mov    dl,al
c001f6b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f6b5:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c001f6bc:	01 d0                	add    eax,edx
c001f6be:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f6c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f6c6:	88 04 24             	mov    BYTE PTR [esp],al
c001f6c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001f6cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6d1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f6d9:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001f6de:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f6e6:	83 ec 0c             	sub    esp,0xc
c001f6e9:	68 00 20 00 00       	push   0x2000
c001f6ee:	e8 e1 fd fe ff       	call   c000f4d4 <malloc>
c001f6f3:	83 c4 10             	add    esp,0x10
c001f6f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f6fa:	68 00 20 00 00       	push   0x2000
c001f6ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f703:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f707:	50                   	push   eax
c001f708:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001f70c:	50                   	push   eax
c001f70d:	e8 0f 7a fe ff       	call   c0007121 <f_mkfs>
c001f712:	83 c4 10             	add    esp,0x10
c001f715:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f719:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f71e:	75 07                	jne    c001f727 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001f720:	b8 00 00 00 00       	mov    eax,0x0
c001f725:	eb 38                	jmp    c001f75f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f727:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001f72c:	75 17                	jne    c001f745 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001f72e:	83 ec 0c             	sub    esp,0xc
c001f731:	68 e0 ac 02 c0       	push   0xc002ace0
c001f736:	e8 4a 2f ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001f73b:	83 c4 10             	add    esp,0x10
c001f73e:	b8 09 00 00 00       	mov    eax,0x9
c001f743:	eb 1a                	jmp    c001f75f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f745:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f749:	83 ec 08             	sub    esp,0x8
c001f74c:	50                   	push   eax
c001f74d:	68 b4 ac 02 c0       	push   0xc002acb4
c001f752:	e8 2e 2f ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c001f757:	83 c4 10             	add    esp,0x10
c001f75a:	b8 01 00 00 00       	mov    eax,0x1
c001f75f:	83 c4 2c             	add    esp,0x2c
c001f762:	c3                   	ret    
c001f763:	90                   	nop

c001f764 <FAT::tryMount(LogicalDisk*, int)>:
c001f764:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001f76a:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001f76f:	83 f8 14             	cmp    eax,0x14
c001f772:	75 17                	jne    c001f78b <FAT::tryMount(LogicalDisk*, int)+0x27>
c001f774:	83 ec 0c             	sub    esp,0xc
c001f777:	68 c6 ac 02 c0       	push   0xc002acc6
c001f77c:	e8 1e a0 ff ff       	call   c001979f <Krnl::panic(char const*)>
c001f781:	83 c4 10             	add    esp,0x10
c001f784:	b0 00                	mov    al,0x0
c001f786:	e9 d7 01 00 00       	jmp    c001f962 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f78b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001f792:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f798:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f79e:	3d 00 02 00 00       	cmp    eax,0x200
c001f7a3:	74 07                	je     c001f7ac <FAT::tryMount(LogicalDisk*, int)+0x48>
c001f7a5:	b0 00                	mov    al,0x0
c001f7a7:	e9 b6 01 00 00       	jmp    c001f962 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f7ac:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001f7b4:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f7bb:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c001f7c2:	83 f8 ff             	cmp    eax,0xffffffff
c001f7c5:	74 07                	je     c001f7ce <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001f7c7:	b0 01                	mov    al,0x1
c001f7c9:	e9 94 01 00 00       	jmp    c001f962 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f7ce:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001f7d8:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001f7e0:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001f7e7:	88 c2                	mov    dl,al
c001f7e9:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001f7ee:	01 d0                	add    eax,edx
c001f7f0:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001f7f7:	8b 15 60 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de60
c001f7fd:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f804:	89 14 85 80 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2180],edx
c001f80b:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001f810:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001f817:	89 14 85 00 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2100],edx
c001f81e:	83 ec 0c             	sub    esp,0xc
c001f821:	68 54 02 00 00       	push   0x254
c001f826:	e8 a9 fc fe ff       	call   c000f4d4 <malloc>
c001f82b:	83 c4 10             	add    esp,0x10
c001f82e:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001f835:	83 ec 04             	sub    esp,0x4
c001f838:	6a 00                	push   0x0
c001f83a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f841:	50                   	push   eax
c001f842:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f849:	e8 91 54 fe ff       	call   c0004cdf <f_mount>
c001f84e:	83 c4 10             	add    esp,0x10
c001f851:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001f858:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001f860:	74 19                	je     c001f87b <FAT::tryMount(LogicalDisk*, int)+0x117>
c001f862:	83 ec 0c             	sub    esp,0xc
c001f865:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f86c:	e8 83 fc fe ff       	call   c000f4f4 <rfree>
c001f871:	83 c4 10             	add    esp,0x10
c001f874:	b0 00                	mov    al,0x0
c001f876:	e9 e7 00 00 00       	jmp    c001f962 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f87b:	83 ec 04             	sub    esp,0x4
c001f87e:	68 00 01 00 00       	push   0x100
c001f883:	6a 00                	push   0x0
c001f885:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f88c:	50                   	push   eax
c001f88d:	e8 f9 0d fe ff       	call   c000068b <memset>
c001f892:	83 c4 10             	add    esp,0x10
c001f895:	83 ec 08             	sub    esp,0x8
c001f898:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f89f:	50                   	push   eax
c001f8a0:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f8a7:	50                   	push   eax
c001f8a8:	e8 34 0f fe ff       	call   c00007e1 <strcat>
c001f8ad:	83 c4 10             	add    esp,0x10
c001f8b0:	83 ec 08             	sub    esp,0x8
c001f8b3:	68 d4 ac 02 c0       	push   0xc002acd4
c001f8b8:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f8bf:	50                   	push   eax
c001f8c0:	e8 1c 0f fe ff       	call   c00007e1 <strcat>
c001f8c5:	83 c4 10             	add    esp,0x10
c001f8c8:	83 ec 04             	sub    esp,0x4
c001f8cb:	6a 01                	push   0x1
c001f8cd:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001f8d4:	50                   	push   eax
c001f8d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f8d9:	50                   	push   eax
c001f8da:	e8 62 54 fe ff       	call   c0004d41 <f_open>
c001f8df:	83 c4 10             	add    esp,0x10
c001f8e2:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001f8e9:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001f8f0:	85 c0                	test   eax,eax
c001f8f2:	74 0a                	je     c001f8fe <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001f8f4:	78 2d                	js     c001f923 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001f8f6:	83 e8 04             	sub    eax,0x4
c001f8f9:	83 f8 01             	cmp    eax,0x1
c001f8fc:	77 25                	ja     c001f923 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001f8fe:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001f906:	83 ec 0c             	sub    esp,0xc
c001f909:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f90d:	50                   	push   eax
c001f90e:	e8 80 5f fe ff       	call   c0005893 <f_close>
c001f913:	83 c4 10             	add    esp,0x10
c001f916:	90                   	nop
c001f917:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001f91f:	74 3a                	je     c001f95b <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001f921:	eb 2d                	jmp    c001f950 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001f923:	83 ec 0c             	sub    esp,0xc
c001f926:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f92d:	e8 c2 fb fe ff       	call   c000f4f4 <rfree>
c001f932:	83 c4 10             	add    esp,0x10
c001f935:	83 ec 04             	sub    esp,0x4
c001f938:	6a 00                	push   0x0
c001f93a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f941:	50                   	push   eax
c001f942:	6a 00                	push   0x0
c001f944:	e8 96 53 fe ff       	call   c0004cdf <f_mount>
c001f949:	83 c4 10             	add    esp,0x10
c001f94c:	b0 00                	mov    al,0x0
c001f94e:	eb 12                	jmp    c001f962 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f950:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001f955:	40                   	inc    eax
c001f956:	a3 60 de 02 c0       	mov    ds:0xc002de60,eax
c001f95b:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001f962:	81 c4 6c 03 00 00    	add    esp,0x36c
c001f968:	c3                   	ret    
c001f969:	90                   	nop

c001f96a <FAT::readDir(void*, unsigned long, void*, int*)>:
c001f96a:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001f970:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001f978:	74 0a                	je     c001f984 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001f97a:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001f982:	75 0a                	jne    c001f98e <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001f984:	b8 04 00 00 00       	mov    eax,0x4
c001f989:	e9 db 00 00 00       	jmp    c001fa69 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001f98e:	83 ec 08             	sub    esp,0x8
c001f991:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f998:	50                   	push   eax
c001f999:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001f9a0:	e8 f8 64 fe ff       	call   c0005e9d <f_readdir>
c001f9a5:	83 c4 10             	add    esp,0x10
c001f9a8:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001f9af:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001f9b5:	83 ec 0c             	sub    esp,0xc
c001f9b8:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001f9bf:	83 c0 1a             	add    eax,0x1a
c001f9c2:	50                   	push   eax
c001f9c3:	e8 e0 0c fe ff       	call   c00006a8 <strlen>
c001f9c8:	83 c4 10             	add    esp,0x10
c001f9cb:	ba 00 00 00 00       	mov    edx,0x0
c001f9d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f9d4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f9d8:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001f9df:	0f b6 c0             	movzx  eax,al
c001f9e2:	83 e0 10             	and    eax,0x10
c001f9e5:	74 07                	je     c001f9ee <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001f9e7:	b8 02 00 00 00       	mov    eax,0x2
c001f9ec:	eb 05                	jmp    c001f9f3 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001f9ee:	b8 01 00 00 00       	mov    eax,0x1
c001f9f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f9f7:	83 ec 08             	sub    esp,0x8
c001f9fa:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fa01:	83 c0 1a             	add    eax,0x1a
c001fa04:	50                   	push   eax
c001fa05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fa09:	83 c0 10             	add    eax,0x10
c001fa0c:	50                   	push   eax
c001fa0d:	e8 18 0d fe ff       	call   c000072a <strcpy>
c001fa12:	83 c4 10             	add    esp,0x10
c001fa15:	83 ec 04             	sub    esp,0x4
c001fa18:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001fa1f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fa23:	50                   	push   eax
c001fa24:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001fa2b:	e8 25 0c fe ff       	call   c0000655 <memcpy>
c001fa30:	83 c4 10             	add    esp,0x10
c001fa33:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001fa3a:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001fa40:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001fa47:	84 c0                	test   al,al
c001fa49:	75 07                	jne    c001fa52 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001fa4b:	b8 07 00 00 00       	mov    eax,0x7
c001fa50:	eb 17                	jmp    c001fa69 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fa52:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001fa59:	85 c0                	test   eax,eax
c001fa5b:	75 07                	jne    c001fa64 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001fa5d:	b8 00 00 00 00       	mov    eax,0x0
c001fa62:	eb 05                	jmp    c001fa69 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fa64:	b8 01 00 00 00       	mov    eax,0x1
c001fa69:	81 c4 3c 02 00 00    	add    esp,0x23c
c001fa6f:	c3                   	ret    

c001fa70 <FAT::read(void*, unsigned long, void*, int*)>:
c001fa70:	83 ec 1c             	sub    esp,0x1c
c001fa73:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fa78:	74 07                	je     c001fa81 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001fa7a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fa7f:	75 07                	jne    c001fa88 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001fa81:	b8 04 00 00 00       	mov    eax,0x4
c001fa86:	eb 3d                	jmp    c001fac5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fa88:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fa8c:	50                   	push   eax
c001fa8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fa91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fa95:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fa99:	e8 df 56 fe ff       	call   c000517d <f_read>
c001fa9e:	83 c4 10             	add    esp,0x10
c001faa1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001faa5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001faa9:	89 c2                	mov    edx,eax
c001faab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001faaf:	89 10                	mov    DWORD PTR [eax],edx
c001fab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fab5:	85 c0                	test   eax,eax
c001fab7:	75 07                	jne    c001fac0 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001fab9:	b8 00 00 00 00       	mov    eax,0x0
c001fabe:	eb 05                	jmp    c001fac5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fac0:	b8 01 00 00 00       	mov    eax,0x1
c001fac5:	83 c4 1c             	add    esp,0x1c
c001fac8:	c3                   	ret    
c001fac9:	90                   	nop

c001faca <FAT::write(void*, unsigned long, void*, int*)>:
c001faca:	83 ec 1c             	sub    esp,0x1c
c001facd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fad2:	74 07                	je     c001fadb <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001fad4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fad9:	75 07                	jne    c001fae2 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001fadb:	b8 04 00 00 00       	mov    eax,0x4
c001fae0:	eb 3d                	jmp    c001fb1f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fae2:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fae6:	50                   	push   eax
c001fae7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001faeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001faef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001faf3:	e8 05 59 fe ff       	call   c00053fd <f_write>
c001faf8:	83 c4 10             	add    esp,0x10
c001fafb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001faff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb03:	89 c2                	mov    edx,eax
c001fb05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fb09:	89 10                	mov    DWORD PTR [eax],edx
c001fb0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb0f:	85 c0                	test   eax,eax
c001fb11:	75 07                	jne    c001fb1a <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001fb13:	b8 00 00 00 00       	mov    eax,0x0
c001fb18:	eb 05                	jmp    c001fb1f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fb1a:	b8 01 00 00 00       	mov    eax,0x1
c001fb1f:	83 c4 1c             	add    esp,0x1c
c001fb22:	c3                   	ret    
c001fb23:	90                   	nop

c001fb24 <FAT::close(void*)>:
c001fb24:	83 ec 1c             	sub    esp,0x1c
c001fb27:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fb2c:	75 07                	jne    c001fb35 <FAT::close(void*)+0x11>
c001fb2e:	b8 04 00 00 00       	mov    eax,0x4
c001fb33:	eb 36                	jmp    c001fb6b <FAT::close(void*)+0x47>
c001fb35:	83 ec 0c             	sub    esp,0xc
c001fb38:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fb3c:	e8 52 5d fe ff       	call   c0005893 <f_close>
c001fb41:	83 c4 10             	add    esp,0x10
c001fb44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb48:	83 ec 0c             	sub    esp,0xc
c001fb4b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fb4f:	e8 90 f9 fe ff       	call   c000f4e4 <free>
c001fb54:	83 c4 10             	add    esp,0x10
c001fb57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb5b:	85 c0                	test   eax,eax
c001fb5d:	75 07                	jne    c001fb66 <FAT::close(void*)+0x42>
c001fb5f:	b8 00 00 00 00       	mov    eax,0x0
c001fb64:	eb 05                	jmp    c001fb6b <FAT::close(void*)+0x47>
c001fb66:	b8 01 00 00 00       	mov    eax,0x1
c001fb6b:	83 c4 1c             	add    esp,0x1c
c001fb6e:	c3                   	ret    
c001fb6f:	90                   	nop

c001fb70 <FAT::closeDir(void*)>:
c001fb70:	83 ec 1c             	sub    esp,0x1c
c001fb73:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fb78:	75 07                	jne    c001fb81 <FAT::closeDir(void*)+0x11>
c001fb7a:	b8 04 00 00 00       	mov    eax,0x4
c001fb7f:	eb 36                	jmp    c001fbb7 <FAT::closeDir(void*)+0x47>
c001fb81:	83 ec 0c             	sub    esp,0xc
c001fb84:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fb88:	e8 ee 62 fe ff       	call   c0005e7b <f_closedir>
c001fb8d:	83 c4 10             	add    esp,0x10
c001fb90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb94:	83 ec 0c             	sub    esp,0xc
c001fb97:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fb9b:	e8 44 f9 fe ff       	call   c000f4e4 <free>
c001fba0:	83 c4 10             	add    esp,0x10
c001fba3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fba7:	85 c0                	test   eax,eax
c001fba9:	75 07                	jne    c001fbb2 <FAT::closeDir(void*)+0x42>
c001fbab:	b8 00 00 00 00       	mov    eax,0x0
c001fbb0:	eb 05                	jmp    c001fbb7 <FAT::closeDir(void*)+0x47>
c001fbb2:	b8 01 00 00 00       	mov    eax,0x1
c001fbb7:	83 c4 1c             	add    esp,0x1c
c001fbba:	c3                   	ret    
c001fbbb:	90                   	nop

c001fbbc <FAT::seek(void*, unsigned long long)>:
c001fbbc:	83 ec 2c             	sub    esp,0x2c
c001fbbf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fbc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fbc7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fbcb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbcf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001fbd4:	75 07                	jne    c001fbdd <FAT::seek(void*, unsigned long long)+0x21>
c001fbd6:	b8 04 00 00 00       	mov    eax,0x4
c001fbdb:	eb 2f                	jmp    c001fc0c <FAT::seek(void*, unsigned long long)+0x50>
c001fbdd:	83 ec 04             	sub    esp,0x4
c001fbe0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fbe4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fbe8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001fbec:	e8 d1 5c fe ff       	call   c00058c2 <f_lseek>
c001fbf1:	83 c4 10             	add    esp,0x10
c001fbf4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fbf8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fbfc:	85 c0                	test   eax,eax
c001fbfe:	75 07                	jne    c001fc07 <FAT::seek(void*, unsigned long long)+0x4b>
c001fc00:	b8 00 00 00 00       	mov    eax,0x0
c001fc05:	eb 05                	jmp    c001fc0c <FAT::seek(void*, unsigned long long)+0x50>
c001fc07:	b8 01 00 00 00       	mov    eax,0x1
c001fc0c:	83 c4 2c             	add    esp,0x2c
c001fc0f:	c3                   	ret    

c001fc10 <fatWrapperReadDisk>:
c001fc10:	83 ec 1c             	sub    esp,0x1c
c001fc13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fc17:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fc1b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fc1f:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fc26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fc2a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fc2f:	8b 04 85 60 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd31a0]
c001fc36:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fc3a:	83 ec 0c             	sub    esp,0xc
c001fc3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc41:	52                   	push   edx
c001fc42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fc46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fc4a:	50                   	push   eax
c001fc4b:	e8 c2 60 ff ff       	call   c0015d12 <LogicalDisk::read(unsigned long long, int, void*)>
c001fc50:	83 c4 20             	add    esp,0x20
c001fc53:	83 c4 1c             	add    esp,0x1c
c001fc56:	c3                   	ret    

c001fc57 <fatWrapperWriteDisk>:
c001fc57:	83 ec 1c             	sub    esp,0x1c
c001fc5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fc5e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fc62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fc66:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc69:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fc6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fc71:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fc76:	8b 04 85 60 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd31a0]
c001fc7d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fc81:	83 ec 0c             	sub    esp,0xc
c001fc84:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc88:	52                   	push   edx
c001fc89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fc8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fc91:	50                   	push   eax
c001fc92:	e8 e7 60 ff ff       	call   c0015d7e <LogicalDisk::write(unsigned long long, int, void*)>
c001fc97:	83 c4 20             	add    esp,0x20
c001fc9a:	83 c4 1c             	add    esp,0x1c
c001fc9d:	c3                   	ret    

c001fc9e <fatWrapperIoctl>:
c001fc9e:	53                   	push   ebx
c001fc9f:	83 ec 28             	sub    esp,0x28
c001fca2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fca6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001fcaa:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001fcae:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001fcb2:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001fcb7:	75 31                	jne    c001fcea <fatWrapperIoctl+0x4c>
c001fcb9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fcbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fcc1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fcc6:	8b 04 85 60 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd31a0]
c001fccd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fcd3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fcd9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fcdd:	66 89 02             	mov    WORD PTR [edx],ax
c001fce0:	b8 00 00 00 00       	mov    eax,0x0
c001fce5:	e9 b2 00 00 00       	jmp    c001fd9c <fatWrapperIoctl+0xfe>
c001fcea:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001fcef:	75 6a                	jne    c001fd5b <fatWrapperIoctl+0xbd>
c001fcf1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fcf5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fcf9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fcfe:	8b 04 85 60 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd31a0]
c001fd05:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fd0b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001fd11:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001fd17:	89 c8                	mov    eax,ecx
c001fd19:	89 da                	mov    edx,ebx
c001fd1b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001fd1f:	c1 e0 0a             	shl    eax,0xa
c001fd22:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001fd27:	8b 0c 8d 60 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd31a0]
c001fd2e:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001fd34:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001fd3a:	89 cb                	mov    ebx,ecx
c001fd3c:	c1 fb 1f             	sar    ebx,0x1f
c001fd3f:	53                   	push   ebx
c001fd40:	51                   	push   ecx
c001fd41:	52                   	push   edx
c001fd42:	50                   	push   eax
c001fd43:	e8 74 55 00 00       	call   c00252bc <__udivdi3>
c001fd48:	83 c4 10             	add    esp,0x10
c001fd4b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fd4f:	89 01                	mov    DWORD PTR [ecx],eax
c001fd51:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fd54:	b8 00 00 00 00       	mov    eax,0x0
c001fd59:	eb 41                	jmp    c001fd9c <fatWrapperIoctl+0xfe>
c001fd5b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001fd60:	75 07                	jne    c001fd69 <fatWrapperIoctl+0xcb>
c001fd62:	b8 00 00 00 00       	mov    eax,0x0
c001fd67:	eb 33                	jmp    c001fd9c <fatWrapperIoctl+0xfe>
c001fd69:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001fd6e:	75 19                	jne    c001fd89 <fatWrapperIoctl+0xeb>
c001fd70:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fd74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fd78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fd7c:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fd82:	b8 00 00 00 00       	mov    eax,0x0
c001fd87:	eb 13                	jmp    c001fd9c <fatWrapperIoctl+0xfe>
c001fd89:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001fd8e:	75 07                	jne    c001fd97 <fatWrapperIoctl+0xf9>
c001fd90:	b8 00 00 00 00       	mov    eax,0x0
c001fd95:	eb 05                	jmp    c001fd9c <fatWrapperIoctl+0xfe>
c001fd97:	b8 04 00 00 00       	mov    eax,0x4
c001fd9c:	83 c4 28             	add    esp,0x28
c001fd9f:	5b                   	pop    ebx
c001fda0:	c3                   	ret    
c001fda1:	90                   	nop

c001fda2 <FAT::FAT()>:
c001fda2:	83 ec 1c             	sub    esp,0x1c
c001fda5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fda9:	83 ec 0c             	sub    esp,0xc
c001fdac:	50                   	push   eax
c001fdad:	e8 d8 2b ff ff       	call   c001298a <Filesystem::Filesystem()>
c001fdb2:	83 c4 10             	add    esp,0x10
c001fdb5:	ba 10 ad 02 c0       	mov    edx,0xc002ad10
c001fdba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fdbe:	89 10                	mov    DWORD PTR [eax],edx
c001fdc0:	c7 05 60 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de60,0x0
c001fdca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fdd2:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001fdd7:	7f 15                	jg     c001fdee <FAT::FAT()+0x4c>
c001fdd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fddd:	c7 04 85 80 de 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd2180],0xffffffff
c001fde8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fdec:	eb e4                	jmp    c001fdd2 <FAT::FAT()+0x30>
c001fdee:	90                   	nop
c001fdef:	83 c4 1c             	add    esp,0x1c
c001fdf2:	c3                   	ret    
c001fdf3:	90                   	nop

c001fdf4 <FAT::fixFilepath(char*)>:
c001fdf4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fdf8:	8a 00                	mov    al,BYTE PTR [eax]
c001fdfa:	3c 40                	cmp    al,0x40
c001fdfc:	7e 2c                	jle    c001fe2a <FAT::fixFilepath(char*)+0x36>
c001fdfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe02:	8a 00                	mov    al,BYTE PTR [eax]
c001fe04:	83 e8 41             	sub    eax,0x41
c001fe07:	88 c2                	mov    dl,al
c001fe09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe0d:	88 10                	mov    BYTE PTR [eax],dl
c001fe0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe13:	8a 00                	mov    al,BYTE PTR [eax]
c001fe15:	0f be c0             	movsx  eax,al
c001fe18:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c001fe1f:	83 c0 30             	add    eax,0x30
c001fe22:	88 c2                	mov    dl,al
c001fe24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe28:	88 10                	mov    BYTE PTR [eax],dl
c001fe2a:	90                   	nop
c001fe2b:	c3                   	ret    

c001fe2c <FAT::open(char const*, void**, FileOpenMode)>:
c001fe2c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001fe32:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001fe3a:	74 0a                	je     c001fe46 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001fe3c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001fe44:	75 0a                	jne    c001fe50 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001fe46:	b8 04 00 00 00       	mov    eax,0x4
c001fe4b:	e9 fd 00 00 00       	jmp    c001ff4d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001fe50:	83 ec 08             	sub    esp,0x8
c001fe53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001fe5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fe5e:	50                   	push   eax
c001fe5f:	e8 c6 08 fe ff       	call   c000072a <strcpy>
c001fe64:	83 c4 10             	add    esp,0x10
c001fe67:	83 ec 08             	sub    esp,0x8
c001fe6a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001fe6e:	50                   	push   eax
c001fe6f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001fe76:	e8 79 ff ff ff       	call   c001fdf4 <FAT::fixFilepath(char*)>
c001fe7b:	83 c4 10             	add    esp,0x10
c001fe7e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001fe86:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001fe8d:	83 e0 01             	and    eax,0x1
c001fe90:	74 08                	je     c001fe9a <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001fe92:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001fe9a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001fea1:	83 e0 04             	and    eax,0x4
c001fea4:	74 10                	je     c001feb6 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001fea6:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001feae:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001feb6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001febd:	83 e0 02             	and    eax,0x2
c001fec0:	74 08                	je     c001feca <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001fec2:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001feca:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001fed1:	83 e0 08             	and    eax,0x8
c001fed4:	74 08                	je     c001fede <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001fed6:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001fede:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001fee5:	83 e0 10             	and    eax,0x10
c001fee8:	74 08                	je     c001fef2 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001feea:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001fef2:	83 ec 0c             	sub    esp,0xc
c001fef5:	68 50 02 00 00       	push   0x250
c001fefa:	e8 d5 f5 fe ff       	call   c000f4d4 <malloc>
c001feff:	83 c4 10             	add    esp,0x10
c001ff02:	89 c2                	mov    edx,eax
c001ff04:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ff0b:	89 10                	mov    DWORD PTR [eax],edx
c001ff0d:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001ff15:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ff1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff1e:	83 ec 04             	sub    esp,0x4
c001ff21:	52                   	push   edx
c001ff22:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ff26:	52                   	push   edx
c001ff27:	50                   	push   eax
c001ff28:	e8 14 4e fe ff       	call   c0004d41 <f_open>
c001ff2d:	83 c4 10             	add    esp,0x10
c001ff30:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001ff37:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001ff3f:	74 07                	je     c001ff48 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001ff41:	b8 01 00 00 00       	mov    eax,0x1
c001ff46:	eb 05                	jmp    c001ff4d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001ff48:	b8 00 00 00 00       	mov    eax,0x0
c001ff4d:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ff53:	c3                   	ret    

c001ff54 <FAT::openDir(char const*, void**)>:
c001ff54:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ff5a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ff62:	74 0a                	je     c001ff6e <FAT::openDir(char const*, void**)+0x1a>
c001ff64:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ff6c:	75 07                	jne    c001ff75 <FAT::openDir(char const*, void**)+0x21>
c001ff6e:	b8 04 00 00 00       	mov    eax,0x4
c001ff73:	eb 7d                	jmp    c001fff2 <FAT::openDir(char const*, void**)+0x9e>
c001ff75:	83 ec 08             	sub    esp,0x8
c001ff78:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ff7f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ff83:	50                   	push   eax
c001ff84:	e8 a1 07 fe ff       	call   c000072a <strcpy>
c001ff89:	83 c4 10             	add    esp,0x10
c001ff8c:	83 ec 08             	sub    esp,0x8
c001ff8f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ff93:	50                   	push   eax
c001ff94:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ff9b:	e8 54 fe ff ff       	call   c001fdf4 <FAT::fixFilepath(char*)>
c001ffa0:	83 c4 10             	add    esp,0x10
c001ffa3:	83 ec 0c             	sub    esp,0xc
c001ffa6:	6a 4c                	push   0x4c
c001ffa8:	e8 27 f5 fe ff       	call   c000f4d4 <malloc>
c001ffad:	83 c4 10             	add    esp,0x10
c001ffb0:	89 c2                	mov    edx,eax
c001ffb2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ffb9:	89 10                	mov    DWORD PTR [eax],edx
c001ffbb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ffc2:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffc4:	83 ec 08             	sub    esp,0x8
c001ffc7:	8d 54 24 14          	lea    edx,[esp+0x14]
c001ffcb:	52                   	push   edx
c001ffcc:	50                   	push   eax
c001ffcd:	e8 a7 5d fe ff       	call   c0005d79 <f_opendir>
c001ffd2:	83 c4 10             	add    esp,0x10
c001ffd5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ffdc:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001ffe4:	74 07                	je     c001ffed <FAT::openDir(char const*, void**)+0x99>
c001ffe6:	b8 01 00 00 00       	mov    eax,0x1
c001ffeb:	eb 05                	jmp    c001fff2 <FAT::openDir(char const*, void**)+0x9e>
c001ffed:	b8 00 00 00 00       	mov    eax,0x0
c001fff2:	81 c4 1c 01 00 00    	add    esp,0x11c
c001fff8:	c3                   	ret    
c001fff9:	90                   	nop

c001fffa <FAT::stat(char const*, unsigned long long*, bool*)>:
c001fffa:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020000:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020008:	75 0a                	jne    c0020014 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c002000a:	b8 04 00 00 00       	mov    eax,0x4
c002000f:	e9 c9 00 00 00       	jmp    c00200dd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020014:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c002001c:	75 0a                	jne    c0020028 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c002001e:	b8 04 00 00 00       	mov    eax,0x4
c0020023:	e9 b5 00 00 00       	jmp    c00200dd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020028:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020030:	75 0a                	jne    c002003c <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020032:	b8 04 00 00 00       	mov    eax,0x4
c0020037:	e9 a1 00 00 00       	jmp    c00200dd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002003c:	83 ec 08             	sub    esp,0x8
c002003f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020046:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002004d:	50                   	push   eax
c002004e:	e8 d7 06 fe ff       	call   c000072a <strcpy>
c0020053:	83 c4 10             	add    esp,0x10
c0020056:	83 ec 08             	sub    esp,0x8
c0020059:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020060:	50                   	push   eax
c0020061:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020068:	e8 87 fd ff ff       	call   c001fdf4 <FAT::fixFilepath(char*)>
c002006d:	83 c4 10             	add    esp,0x10
c0020070:	83 ec 08             	sub    esp,0x8
c0020073:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020077:	50                   	push   eax
c0020078:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002007f:	50                   	push   eax
c0020080:	e8 b3 5e fe ff       	call   c0005f38 <f_stat>
c0020085:	83 c4 10             	add    esp,0x10
c0020088:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002008f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020096:	85 c0                	test   eax,eax
c0020098:	74 07                	je     c00200a1 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002009a:	83 f8 04             	cmp    eax,0x4
c002009d:	74 32                	je     c00200d1 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002009f:	eb 37                	jmp    c00200d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00200a1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00200a5:	0f b6 c0             	movzx  eax,al
c00200a8:	83 e0 10             	and    eax,0x10
c00200ab:	0f 95 c2             	setne  dl
c00200ae:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00200b5:	88 10                	mov    BYTE PTR [eax],dl
c00200b7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00200ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00200be:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00200c5:	89 01                	mov    DWORD PTR [ecx],eax
c00200c7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00200ca:	b8 00 00 00 00       	mov    eax,0x0
c00200cf:	eb 0c                	jmp    c00200dd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00200d1:	b8 02 00 00 00       	mov    eax,0x2
c00200d6:	eb 05                	jmp    c00200dd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00200d8:	b8 01 00 00 00       	mov    eax,0x1
c00200dd:	81 c4 2c 02 00 00    	add    esp,0x22c
c00200e3:	c3                   	ret    

c00200e4 <FAT::unlink(char const*)>:
c00200e4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00200ea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00200f2:	75 07                	jne    c00200fb <FAT::unlink(char const*)+0x17>
c00200f4:	b8 04 00 00 00       	mov    eax,0x4
c00200f9:	eb 5c                	jmp    c0020157 <FAT::unlink(char const*)+0x73>
c00200fb:	83 ec 08             	sub    esp,0x8
c00200fe:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020105:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020109:	50                   	push   eax
c002010a:	e8 1b 06 fe ff       	call   c000072a <strcpy>
c002010f:	83 c4 10             	add    esp,0x10
c0020112:	83 ec 08             	sub    esp,0x8
c0020115:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020119:	50                   	push   eax
c002011a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020121:	e8 ce fc ff ff       	call   c001fdf4 <FAT::fixFilepath(char*)>
c0020126:	83 c4 10             	add    esp,0x10
c0020129:	83 ec 0c             	sub    esp,0xc
c002012c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020130:	50                   	push   eax
c0020131:	e8 54 61 fe ff       	call   c000628a <f_unlink>
c0020136:	83 c4 10             	add    esp,0x10
c0020139:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020140:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020147:	85 c0                	test   eax,eax
c0020149:	75 07                	jne    c0020152 <FAT::unlink(char const*)+0x6e>
c002014b:	b8 00 00 00 00       	mov    eax,0x0
c0020150:	eb 05                	jmp    c0020157 <FAT::unlink(char const*)+0x73>
c0020152:	b8 01 00 00 00       	mov    eax,0x1
c0020157:	81 c4 1c 01 00 00    	add    esp,0x11c
c002015d:	c3                   	ret    

c002015e <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c002015e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020164:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c002016b:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020172:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020176:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002017a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020182:	75 0a                	jne    c002018e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020184:	b8 04 00 00 00       	mov    eax,0x4
c0020189:	e9 1c 01 00 00       	jmp    c00202aa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002018e:	83 ec 08             	sub    esp,0x8
c0020191:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020198:	8d 44 24 24          	lea    eax,[esp+0x24]
c002019c:	50                   	push   eax
c002019d:	e8 88 05 fe ff       	call   c000072a <strcpy>
c00201a2:	83 c4 10             	add    esp,0x10
c00201a5:	83 ec 08             	sub    esp,0x8
c00201a8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00201ac:	50                   	push   eax
c00201ad:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00201b4:	e8 3b fc ff ff       	call   c001fdf4 <FAT::fixFilepath(char*)>
c00201b9:	83 c4 10             	add    esp,0x10
c00201bc:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00201c4:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00201cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00201d1:	83 e0 01             	and    eax,0x1
c00201d4:	74 08                	je     c00201de <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00201d6:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00201de:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00201e3:	83 e0 02             	and    eax,0x2
c00201e6:	74 08                	je     c00201f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00201e8:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00201f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00201f5:	83 e0 04             	and    eax,0x4
c00201f8:	74 08                	je     c0020202 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00201fa:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020202:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020207:	83 e0 08             	and    eax,0x8
c002020a:	74 08                	je     c0020214 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c002020c:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020214:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020219:	83 e0 01             	and    eax,0x1
c002021c:	74 08                	je     c0020226 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c002021e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020226:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002022b:	83 e0 02             	and    eax,0x2
c002022e:	74 08                	je     c0020238 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020230:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020238:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002023d:	83 e0 04             	and    eax,0x4
c0020240:	74 08                	je     c002024a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020242:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c002024a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002024f:	83 e0 08             	and    eax,0x8
c0020252:	74 08                	je     c002025c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020254:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c002025c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020263:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c002026a:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020272:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002027a:	83 ec 04             	sub    esp,0x4
c002027d:	52                   	push   edx
c002027e:	50                   	push   eax
c002027f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020283:	50                   	push   eax
c0020284:	e8 a3 66 fe ff       	call   c000692c <f_chmod>
c0020289:	83 c4 10             	add    esp,0x10
c002028c:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020293:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002029a:	85 c0                	test   eax,eax
c002029c:	75 07                	jne    c00202a5 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002029e:	b8 00 00 00 00       	mov    eax,0x0
c00202a3:	eb 05                	jmp    c00202aa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00202a5:	b8 01 00 00 00       	mov    eax,0x1
c00202aa:	81 c4 2c 01 00 00    	add    esp,0x12c
c00202b0:	c3                   	ret    
c00202b1:	90                   	nop

c00202b2 <FAT::rename(char const*, char const*)>:
c00202b2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00202b8:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00202c0:	74 0a                	je     c00202cc <FAT::rename(char const*, char const*)+0x1a>
c00202c2:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00202ca:	75 0a                	jne    c00202d6 <FAT::rename(char const*, char const*)+0x24>
c00202cc:	b8 04 00 00 00       	mov    eax,0x4
c00202d1:	e9 98 00 00 00       	jmp    c002036e <FAT::rename(char const*, char const*)+0xbc>
c00202d6:	83 ec 08             	sub    esp,0x8
c00202d9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00202e0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00202e7:	50                   	push   eax
c00202e8:	e8 3d 04 fe ff       	call   c000072a <strcpy>
c00202ed:	83 c4 10             	add    esp,0x10
c00202f0:	83 ec 08             	sub    esp,0x8
c00202f3:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00202fa:	50                   	push   eax
c00202fb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020302:	e8 ed fa ff ff       	call   c001fdf4 <FAT::fixFilepath(char*)>
c0020307:	83 c4 10             	add    esp,0x10
c002030a:	83 ec 08             	sub    esp,0x8
c002030d:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020314:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020318:	50                   	push   eax
c0020319:	e8 0c 04 fe ff       	call   c000072a <strcpy>
c002031e:	83 c4 10             	add    esp,0x10
c0020321:	83 ec 08             	sub    esp,0x8
c0020324:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020328:	50                   	push   eax
c0020329:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020330:	e8 bf fa ff ff       	call   c001fdf4 <FAT::fixFilepath(char*)>
c0020335:	83 c4 10             	add    esp,0x10
c0020338:	83 ec 08             	sub    esp,0x8
c002033b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002033f:	50                   	push   eax
c0020340:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020347:	50                   	push   eax
c0020348:	e8 ec 62 fe ff       	call   c0006639 <f_rename>
c002034d:	83 c4 10             	add    esp,0x10
c0020350:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020357:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002035e:	85 c0                	test   eax,eax
c0020360:	75 07                	jne    c0020369 <FAT::rename(char const*, char const*)+0xb7>
c0020362:	b8 00 00 00 00       	mov    eax,0x0
c0020367:	eb 05                	jmp    c002036e <FAT::rename(char const*, char const*)+0xbc>
c0020369:	b8 01 00 00 00       	mov    eax,0x1
c002036e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020374:	c3                   	ret    
c0020375:	90                   	nop

c0020376 <FAT::mkdir(char const*)>:
c0020376:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002037c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020384:	75 07                	jne    c002038d <FAT::mkdir(char const*)+0x17>
c0020386:	b8 04 00 00 00       	mov    eax,0x4
c002038b:	eb 5c                	jmp    c00203e9 <FAT::mkdir(char const*)+0x73>
c002038d:	83 ec 08             	sub    esp,0x8
c0020390:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020397:	8d 44 24 18          	lea    eax,[esp+0x18]
c002039b:	50                   	push   eax
c002039c:	e8 89 03 fe ff       	call   c000072a <strcpy>
c00203a1:	83 c4 10             	add    esp,0x10
c00203a4:	83 ec 08             	sub    esp,0x8
c00203a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00203ab:	50                   	push   eax
c00203ac:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00203b3:	e8 3c fa ff ff       	call   c001fdf4 <FAT::fixFilepath(char*)>
c00203b8:	83 c4 10             	add    esp,0x10
c00203bb:	83 ec 0c             	sub    esp,0xc
c00203be:	8d 44 24 18          	lea    eax,[esp+0x18]
c00203c2:	50                   	push   eax
c00203c3:	e8 45 60 fe ff       	call   c000640d <f_mkdir>
c00203c8:	83 c4 10             	add    esp,0x10
c00203cb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00203d2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00203d9:	85 c0                	test   eax,eax
c00203db:	75 07                	jne    c00203e4 <FAT::mkdir(char const*)+0x6e>
c00203dd:	b8 00 00 00 00       	mov    eax,0x0
c00203e2:	eb 05                	jmp    c00203e9 <FAT::mkdir(char const*)+0x73>
c00203e4:	b8 01 00 00 00       	mov    eax,0x1
c00203e9:	81 c4 1c 01 00 00    	add    esp,0x11c
c00203ef:	c3                   	ret    

c00203f0 <FAT::exists(char const*)>:
c00203f0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00203f6:	83 ec 08             	sub    esp,0x8
c00203f9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020400:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020404:	50                   	push   eax
c0020405:	e8 20 03 fe ff       	call   c000072a <strcpy>
c002040a:	83 c4 10             	add    esp,0x10
c002040d:	83 ec 08             	sub    esp,0x8
c0020410:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020414:	50                   	push   eax
c0020415:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002041c:	e8 d3 f9 ff ff       	call   c001fdf4 <FAT::fixFilepath(char*)>
c0020421:	83 c4 10             	add    esp,0x10
c0020424:	83 ec 08             	sub    esp,0x8
c0020427:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002042e:	50                   	push   eax
c002042f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020433:	50                   	push   eax
c0020434:	e8 ff 5a fe ff       	call   c0005f38 <f_stat>
c0020439:	83 c4 10             	add    esp,0x10
c002043c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020443:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002044a:	85 c0                	test   eax,eax
c002044c:	75 04                	jne    c0020452 <FAT::exists(char const*)+0x62>
c002044e:	b0 01                	mov    al,0x1
c0020450:	eb 02                	jmp    c0020454 <FAT::exists(char const*)+0x64>
c0020452:	b0 00                	mov    al,0x0
c0020454:	81 c4 2c 02 00 00    	add    esp,0x22c
c002045a:	c3                   	ret    
c002045b:	90                   	nop

c002045c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002045c:	b8 08 00 00 00       	mov    eax,0x8
c0020461:	c3                   	ret    

c0020462 <ISO9660::seek(void*, unsigned long long)>:
c0020462:	53                   	push   ebx
c0020463:	b8 04 00 00 00       	mov    eax,0x4
c0020468:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002046c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020470:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020474:	85 d2                	test   edx,edx
c0020476:	74 17                	je     c002048f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020478:	89 c8                	mov    eax,ecx
c002047a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002047d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020480:	b8 01 00 00 00       	mov    eax,0x1
c0020485:	73 08                	jae    c002048f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020487:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002048a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002048d:	31 c0                	xor    eax,eax
c002048f:	5b                   	pop    ebx
c0020490:	c3                   	ret    
c0020491:	90                   	nop

c0020492 <ISO9660::tell(void*, unsigned long long*)>:
c0020492:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020496:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002049a:	85 d2                	test   edx,edx
c002049c:	74 12                	je     c00204b0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002049e:	85 c0                	test   eax,eax
c00204a0:	74 0e                	je     c00204b0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00204a2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00204a5:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00204a8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00204ab:	89 10                	mov    DWORD PTR [eax],edx
c00204ad:	31 c0                	xor    eax,eax
c00204af:	c3                   	ret    
c00204b0:	b8 04 00 00 00       	mov    eax,0x4
c00204b5:	c3                   	ret    

c00204b6 <ISO9660::getName()>:
c00204b6:	b8 6c ad 02 c0       	mov    eax,0xc002ad6c
c00204bb:	c3                   	ret    

c00204bc <ISO9660::stat(void*, unsigned long long*)>:
c00204bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00204c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204c4:	85 d2                	test   edx,edx
c00204c6:	74 12                	je     c00204da <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00204c8:	85 c0                	test   eax,eax
c00204ca:	74 0e                	je     c00204da <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00204cc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00204cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00204d2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00204d5:	89 10                	mov    DWORD PTR [eax],edx
c00204d7:	31 c0                	xor    eax,eax
c00204d9:	c3                   	ret    
c00204da:	b8 04 00 00 00       	mov    eax,0x4
c00204df:	c3                   	ret    

c00204e0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00204e0:	b8 01 00 00 00       	mov    eax,0x1
c00204e5:	c3                   	ret    

c00204e6 <ISO9660::unlink(char const*)>:
c00204e6:	b8 01 00 00 00       	mov    eax,0x1
c00204eb:	c3                   	ret    

c00204ec <ISO9660::write(void*, unsigned long, void*, int*)>:
c00204ec:	b8 01 00 00 00       	mov    eax,0x1
c00204f1:	c3                   	ret    

c00204f2 <ISO9660::rename(char const*, char const*)>:
c00204f2:	b8 01 00 00 00       	mov    eax,0x1
c00204f7:	c3                   	ret    

c00204f8 <ISO9660::mkdir(char const*)>:
c00204f8:	b8 01 00 00 00       	mov    eax,0x1
c00204fd:	c3                   	ret    

c00204fe <ISO9660::close(void*)>:
c00204fe:	83 ec 0c             	sub    esp,0xc
c0020501:	b8 04 00 00 00       	mov    eax,0x4
c0020506:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002050a:	85 d2                	test   edx,edx
c002050c:	74 0e                	je     c002051c <ISO9660::close(void*)+0x1e>
c002050e:	83 ec 0c             	sub    esp,0xc
c0020511:	52                   	push   edx
c0020512:	e8 cd ef fe ff       	call   c000f4e4 <free>
c0020517:	83 c4 10             	add    esp,0x10
c002051a:	31 c0                	xor    eax,eax
c002051c:	83 c4 0c             	add    esp,0xc
c002051f:	c3                   	ret    

c0020520 <ISO9660::closeDir(void*)>:
c0020520:	83 ec 0c             	sub    esp,0xc
c0020523:	b8 04 00 00 00       	mov    eax,0x4
c0020528:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002052c:	85 d2                	test   edx,edx
c002052e:	74 0e                	je     c002053e <ISO9660::closeDir(void*)+0x1e>
c0020530:	83 ec 0c             	sub    esp,0xc
c0020533:	52                   	push   edx
c0020534:	e8 ab ef fe ff       	call   c000f4e4 <free>
c0020539:	83 c4 10             	add    esp,0x10
c002053c:	31 c0                	xor    eax,eax
c002053e:	83 c4 0c             	add    esp,0xc
c0020541:	c3                   	ret    

c0020542 <ISO9660::~ISO9660()>:
c0020542:	83 ec 0c             	sub    esp,0xc
c0020545:	ba c0 ad 02 c0       	mov    edx,0xc002adc0
c002054a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002054e:	89 10                	mov    DWORD PTR [eax],edx
c0020550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020554:	83 ec 0c             	sub    esp,0xc
c0020557:	50                   	push   eax
c0020558:	e8 51 24 ff ff       	call   c00129ae <Filesystem::~Filesystem()>
c002055d:	83 c4 10             	add    esp,0x10
c0020560:	90                   	nop
c0020561:	83 c4 0c             	add    esp,0xc
c0020564:	c3                   	ret    
c0020565:	90                   	nop

c0020566 <ISO9660::~ISO9660()>:
c0020566:	83 ec 0c             	sub    esp,0xc
c0020569:	83 ec 0c             	sub    esp,0xc
c002056c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020570:	e8 cd ff ff ff       	call   c0020542 <ISO9660::~ISO9660()>
c0020575:	83 c4 10             	add    esp,0x10
c0020578:	83 ec 08             	sub    esp,0x8
c002057b:	6a 08                	push   0x8
c002057d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020581:	e8 1f 20 ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0020586:	83 c4 10             	add    esp,0x10
c0020589:	83 c4 0c             	add    esp,0xc
c002058c:	c3                   	ret    

c002058d <__memmem(unsigned char*, int, unsigned char*, int)>:
c002058d:	55                   	push   ebp
c002058e:	31 c9                	xor    ecx,ecx
c0020590:	57                   	push   edi
c0020591:	56                   	push   esi
c0020592:	53                   	push   ebx
c0020593:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020597:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002059b:	89 eb                	mov    ebx,ebp
c002059d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00205a1:	39 ce                	cmp    esi,ecx
c00205a3:	7e 17                	jle    c00205bc <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00205a5:	31 d2                	xor    edx,edx
c00205a7:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00205ab:	7d 13                	jge    c00205c0 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00205ad:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00205b1:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00205b4:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00205b7:	75 0d                	jne    c00205c6 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00205b9:	42                   	inc    edx
c00205ba:	eb eb                	jmp    c00205a7 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00205bc:	31 c0                	xor    eax,eax
c00205be:	eb 0a                	jmp    c00205ca <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00205c0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00205c4:	eb 04                	jmp    c00205ca <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00205c6:	41                   	inc    ecx
c00205c7:	43                   	inc    ebx
c00205c8:	eb d7                	jmp    c00205a1 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00205ca:	5b                   	pop    ebx
c00205cb:	5e                   	pop    esi
c00205cc:	5f                   	pop    edi
c00205cd:	5d                   	pop    ebp
c00205ce:	c3                   	ret    

c00205cf <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00205cf:	56                   	push   esi
c00205d0:	53                   	push   ebx
c00205d1:	52                   	push   edx
c00205d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00205d6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00205da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00205de:	39 0d 60 df 02 c0    	cmp    DWORD PTR ds:0xc002df60,ecx
c00205e4:	75 08                	jne    c00205ee <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00205e6:	38 05 d4 bd 02 c0    	cmp    BYTE PTR ds:0xc002bdd4,al
c00205ec:	74 2b                	je     c0020619 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00205ee:	83 ec 0c             	sub    esp,0xc
c00205f1:	a2 d4 bd 02 c0       	mov    ds:0xc002bdd4,al
c00205f6:	68 80 df 02 c0       	push   0xc002df80
c00205fb:	0f be c0             	movsx  eax,al
c00205fe:	6a 01                	push   0x1
c0020600:	89 0d 60 df 02 c0    	mov    DWORD PTR ds:0xc002df60,ecx
c0020606:	31 db                	xor    ebx,ebx
c0020608:	53                   	push   ebx
c0020609:	51                   	push   ecx
c002060a:	ff 34 85 5c cd 02 c0 	push   DWORD PTR [eax*4-0x3ffd32a4]
c0020611:	e8 fc 56 ff ff       	call   c0015d12 <LogicalDisk::read(unsigned long long, int, void*)>
c0020616:	83 c4 20             	add    esp,0x20
c0020619:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0020621:	c7 44 24 14 80 df 02 c0 	mov    DWORD PTR [esp+0x14],0xc002df80
c0020629:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002062d:	58                   	pop    eax
c002062e:	5b                   	pop    ebx
c002062f:	5e                   	pop    esi
c0020630:	e9 20 00 fe ff       	jmp    c0000655 <memcpy>
c0020635:	90                   	nop

c0020636 <ISO9660::tryMount(LogicalDisk*, int)>:
c0020636:	81 ec 10 08 00 00    	sub    esp,0x810
c002063c:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0020643:	83 c0 41             	add    eax,0x41
c0020646:	0f be c0             	movsx  eax,al
c0020649:	50                   	push   eax
c002064a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002064e:	50                   	push   eax
c002064f:	6a 10                	push   0x10
c0020651:	e8 79 ff ff ff       	call   c00205cf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020656:	83 c4 10             	add    esp,0x10
c0020659:	31 c0                	xor    eax,eax
c002065b:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0020660:	75 1d                	jne    c002067f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020662:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0020667:	75 16                	jne    c002067f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020669:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002066e:	75 0f                	jne    c002067f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020670:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0020675:	75 08                	jne    c002067f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020677:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002067c:	0f 94 c0             	sete   al
c002067f:	81 c4 0c 08 00 00    	add    esp,0x80c
c0020685:	c3                   	ret    

c0020686 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0020686:	55                   	push   ebp
c0020687:	57                   	push   edi
c0020688:	56                   	push   esi
c0020689:	53                   	push   ebx
c002068a:	81 ec 34 08 00 00    	sub    esp,0x834
c0020690:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c0020697:	55                   	push   ebp
c0020698:	68 87 ad 02 c0       	push   0xc002ad87
c002069d:	e8 e3 1f ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00206a2:	83 c4 10             	add    esp,0x10
c00206a5:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c00206ad:	0f 84 06 02 00 00    	je     c00208b9 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c00206b3:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00206bb:	0f 84 f8 01 00 00    	je     c00208b9 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c00206c1:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c00206c8:	b8 01 00 00 00       	mov    eax,0x1
c00206cd:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c00206d1:	0f 85 e7 01 00 00    	jne    c00208be <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c00206d7:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c00206da:	31 d2                	xor    edx,edx
c00206dc:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c00206df:	89 e9                	mov    ecx,ebp
c00206e1:	89 d3                	mov    ebx,edx
c00206e3:	01 f1                	add    ecx,esi
c00206e5:	11 fb                	adc    ebx,edi
c00206e7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00206eb:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00206ef:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c00206f6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00206f9:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c00206fc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020700:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020704:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020708:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002070c:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c0020710:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0020714:	72 19                	jb     c002072f <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c0020716:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002071a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002071e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020722:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0020725:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020729:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002072d:	eb 13                	jmp    c0020742 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c002072f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020737:	29 f0                	sub    eax,esi
c0020739:	19 fa                	sbb    edx,edi
c002073b:	89 04 24             	mov    DWORD PTR [esp],eax
c002073e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020742:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c0020749:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002074c:	8b 00                	mov    eax,DWORD PTR [eax]
c002074e:	53                   	push   ebx
c002074f:	0f a4 c2 0b          	shld   edx,eax,0xb
c0020753:	c1 e0 0b             	shl    eax,0xb
c0020756:	01 c6                	add    esi,eax
c0020758:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002075f:	11 d7                	adc    edi,edx
c0020761:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0020765:	89 fa                	mov    edx,edi
c0020767:	50                   	push   eax
c0020768:	8d 44 24 28          	lea    eax,[esp+0x28]
c002076c:	50                   	push   eax
c002076d:	89 f0                	mov    eax,esi
c002076f:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020773:	50                   	push   eax
c0020774:	e8 56 fe ff ff       	call   c00205cf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020779:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020780:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020784:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020787:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c002078b:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0020791:	83 c4 10             	add    esp,0x10
c0020794:	b8 00 08 00 00       	mov    eax,0x800
c0020799:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c002079d:	29 d0                	sub    eax,edx
c002079f:	39 c1                	cmp    ecx,eax
c00207a1:	83 db 00             	sbb    ebx,0x0
c00207a4:	7d 19                	jge    c00207bf <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c00207a6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00207ab:	75 16                	jne    c00207c3 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c00207ad:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00207b4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00207ba:	e9 f6 00 00 00       	jmp    c00208b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c00207bf:	89 c5                	mov    ebp,eax
c00207c1:	eb 03                	jmp    c00207c6 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c00207c3:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00207c6:	51                   	push   ecx
c00207c7:	55                   	push   ebp
c00207c8:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c00207cc:	50                   	push   eax
c00207cd:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c00207d4:	e8 7c fe fd ff       	call   c0000655 <memcpy>
c00207d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00207dd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00207e1:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c00207e8:	01 e8                	add    eax,ebp
c00207ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00207ee:	89 e8                	mov    eax,ebp
c00207f0:	99                   	cdq    
c00207f1:	01 ee                	add    esi,ebp
c00207f3:	11 d7                	adc    edi,edx
c00207f5:	29 e9                	sub    ecx,ebp
c00207f7:	19 d3                	sbb    ebx,edx
c00207f9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00207fd:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0020801:	83 c4 10             	add    esp,0x10
c0020804:	b8 ff 07 00 00       	mov    eax,0x7ff
c0020809:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002080c:	b8 00 00 00 00       	mov    eax,0x0
c0020811:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020815:	7d 3f                	jge    c0020856 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0020817:	52                   	push   edx
c0020818:	89 fa                	mov    edx,edi
c002081a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020821:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0020825:	50                   	push   eax
c0020826:	89 f0                	mov    eax,esi
c0020828:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002082c:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020830:	50                   	push   eax
c0020831:	e8 99 fd ff ff       	call   c00205cf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020836:	81 c6 00 08 00 00    	add    esi,0x800
c002083c:	83 d7 00             	adc    edi,0x0
c002083f:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0020847:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002084f:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0020854:	eb ab                	jmp    c0020801 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c0020856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002085a:	0b 04 24             	or     eax,DWORD PTR [esp]
c002085d:	74 34                	je     c0020893 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c002085f:	89 fa                	mov    edx,edi
c0020861:	50                   	push   eax
c0020862:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020869:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c002086d:	50                   	push   eax
c002086e:	89 f0                	mov    eax,esi
c0020870:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0020874:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020878:	55                   	push   ebp
c0020879:	50                   	push   eax
c002087a:	e8 50 fd ff ff       	call   c00205cf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002087f:	83 c4 0c             	add    esp,0xc
c0020882:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0020886:	55                   	push   ebp
c0020887:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002088b:	e8 c5 fd fd ff       	call   c0000655 <memcpy>
c0020890:	83 c4 10             	add    esp,0x10
c0020893:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002089a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002089e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00208a2:	89 38                	mov    DWORD PTR [eax],edi
c00208a4:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c00208ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208af:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c00208b2:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c00208b5:	31 c0                	xor    eax,eax
c00208b7:	eb 05                	jmp    c00208be <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c00208b9:	b8 04 00 00 00       	mov    eax,0x4
c00208be:	81 c4 2c 08 00 00    	add    esp,0x82c
c00208c4:	5b                   	pop    ebx
c00208c5:	5e                   	pop    esi
c00208c6:	5f                   	pop    edi
c00208c7:	5d                   	pop    ebp
c00208c8:	c3                   	ret    
c00208c9:	90                   	nop

c00208ca <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00208ca:	55                   	push   ebp
c00208cb:	57                   	push   edi
c00208cc:	56                   	push   esi
c00208cd:	53                   	push   ebx
c00208ce:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00208d4:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c00208db:	85 f6                	test   esi,esi
c00208dd:	0f 84 64 02 00 00    	je     c0020b47 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00208e3:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00208eb:	0f 84 56 02 00 00    	je     c0020b47 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00208f1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00208f4:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c00208f7:	75 0a                	jne    c0020903 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00208f9:	b8 07 00 00 00       	mov    eax,0x7
c00208fe:	e9 49 02 00 00       	jmp    c0020b4c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020903:	50                   	push   eax
c0020904:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020908:	50                   	push   eax
c0020909:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020910:	53                   	push   ebx
c0020911:	8b 06                	mov    eax,DWORD PTR [esi]
c0020913:	c1 e0 0b             	shl    eax,0xb
c0020916:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0020919:	c1 e8 0b             	shr    eax,0xb
c002091c:	50                   	push   eax
c002091d:	e8 ad fc ff ff       	call   c00205cf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020922:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020925:	83 c4 10             	add    esp,0x10
c0020928:	89 c1                	mov    ecx,eax
c002092a:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c002092d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0020933:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0020936:	84 db                	test   bl,bl
c0020938:	0f 85 90 00 00 00    	jne    c00209ce <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c002093e:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0020944:	81 e7 ff 07 00 00    	and    edi,0x7ff
c002094a:	29 c7                	sub    edi,eax
c002094c:	89 fb                	mov    ebx,edi
c002094e:	c1 fb 1f             	sar    ebx,0x1f
c0020951:	01 f8                	add    eax,edi
c0020953:	11 da                	adc    edx,ebx
c0020955:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020959:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002095d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0020960:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0020963:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020966:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020969:	89 04 24             	mov    DWORD PTR [esp],eax
c002096c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020970:	89 d8                	mov    eax,ebx
c0020972:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020975:	ba 00 00 00 00       	mov    edx,0x0
c002097a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002097e:	b8 00 00 00 00       	mov    eax,0x0
c0020983:	73 0b                	jae    c0020990 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0020985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020988:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002098c:	29 f8                	sub    eax,edi
c002098e:	19 da                	sbb    edx,ebx
c0020990:	89 d3                	mov    ebx,edx
c0020992:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020995:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020998:	09 c3                	or     ebx,eax
c002099a:	0f 84 59 ff ff ff    	je     c00208f9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00209a0:	55                   	push   ebp
c00209a1:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00209a5:	50                   	push   eax
c00209a6:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00209ad:	53                   	push   ebx
c00209ae:	8b 06                	mov    eax,DWORD PTR [esi]
c00209b0:	c1 e0 0b             	shl    eax,0xb
c00209b3:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c00209b7:	c1 e8 0b             	shr    eax,0xb
c00209ba:	50                   	push   eax
c00209bb:	e8 0f fc ff ff       	call   c00205cf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00209c0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00209c3:	83 c4 10             	add    esp,0x10
c00209c6:	25 ff 07 00 00       	and    eax,0x7ff
c00209cb:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00209ce:	57                   	push   edi
c00209cf:	6a 28                	push   0x28
c00209d1:	6a 00                	push   0x0
c00209d3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00209d7:	50                   	push   eax
c00209d8:	e8 ae fc fd ff       	call   c000068b <memset>
c00209dd:	31 d2                	xor    edx,edx
c00209df:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00209e2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00209e8:	89 f8                	mov    eax,edi
c00209ea:	83 c0 21             	add    eax,0x21
c00209ed:	83 d2 00             	adc    edx,0x0
c00209f0:	89 c7                	mov    edi,eax
c00209f2:	89 d5                	mov    ebp,edx
c00209f4:	83 c4 10             	add    esp,0x10
c00209f7:	31 c9                	xor    ecx,ecx
c00209f9:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0020a00:	83 f9 28             	cmp    ecx,0x28
c0020a03:	88 04 24             	mov    BYTE PTR [esp],al
c0020a06:	0f 94 c2             	sete   dl
c0020a09:	88 d0                	mov    al,dl
c0020a0b:	ba ff 07 00 00       	mov    edx,0x7ff
c0020a10:	39 fa                	cmp    edx,edi
c0020a12:	ba 00 00 00 00       	mov    edx,0x0
c0020a17:	19 ea                	sbb    edx,ebp
c0020a19:	0f 92 c2             	setb   dl
c0020a1c:	09 c2                	or     edx,eax
c0020a1e:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0020a22:	0f 94 c0             	sete   al
c0020a25:	08 d0                	or     al,dl
c0020a27:	75 16                	jne    c0020a3f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020a29:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0020a2d:	74 10                	je     c0020a3f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020a2f:	8a 04 24             	mov    al,BYTE PTR [esp]
c0020a32:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0020a36:	41                   	inc    ecx
c0020a37:	83 c7 01             	add    edi,0x1
c0020a3a:	83 d5 00             	adc    ebp,0x0
c0020a3d:	eb ba                	jmp    c00209f9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0020a3f:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0020a46:	83 ec 0c             	sub    esp,0xc
c0020a49:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020a4d:	57                   	push   edi
c0020a4e:	e8 55 fc fd ff       	call   c00006a8 <strlen>
c0020a53:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0020a5b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020a5f:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0020a66:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020a69:	5a                   	pop    edx
c0020a6a:	25 ff 07 00 00       	and    eax,0x7ff
c0020a6f:	01 c8                	add    eax,ecx
c0020a71:	59                   	pop    ecx
c0020a72:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0020a78:	83 e0 02             	and    eax,0x2
c0020a7b:	3c 01                	cmp    al,0x1
c0020a7d:	19 c0                	sbb    eax,eax
c0020a7f:	83 c0 02             	add    eax,0x2
c0020a82:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020a86:	57                   	push   edi
c0020a87:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0020a8b:	50                   	push   eax
c0020a8c:	e8 99 fc fd ff       	call   c000072a <strcpy>
c0020a91:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0020a95:	83 c4 10             	add    esp,0x10
c0020a98:	84 c0                	test   al,al
c0020a9a:	75 21                	jne    c0020abd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0020a9c:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0020aa4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020aac:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020ab4:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0020abb:	eb 28                	jmp    c0020ae5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020abd:	fe c8                	dec    al
c0020abf:	75 24                	jne    c0020ae5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020ac1:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0020ac9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020ad1:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020ad9:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0020ae0:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0020ae5:	0f b6 fb             	movzx  edi,bl
c0020ae8:	31 db                	xor    ebx,ebx
c0020aea:	50                   	push   eax
c0020aeb:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0020af2:	8d 44 24 48          	lea    eax,[esp+0x48]
c0020af6:	50                   	push   eax
c0020af7:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0020afe:	e8 52 fb fd ff       	call   c0000655 <memcpy>
c0020b03:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0020b0a:	89 f9                	mov    ecx,edi
c0020b0c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020b12:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0020b15:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020b18:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0020b1b:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020b1e:	83 c4 10             	add    esp,0x10
c0020b21:	39 c7                	cmp    edi,eax
c0020b23:	89 df                	mov    edi,ebx
c0020b25:	19 d7                	sbb    edi,edx
c0020b27:	72 10                	jb     c0020b39 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0020b29:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0020b30:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0020b37:	eb 0a                	jmp    c0020b43 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0020b39:	29 c8                	sub    eax,ecx
c0020b3b:	19 da                	sbb    edx,ebx
c0020b3d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020b40:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020b43:	31 c0                	xor    eax,eax
c0020b45:	eb 05                	jmp    c0020b4c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020b47:	b8 04 00 00 00       	mov    eax,0x4
c0020b4c:	81 c4 5c 09 00 00    	add    esp,0x95c
c0020b52:	5b                   	pop    ebx
c0020b53:	5e                   	pop    esi
c0020b54:	5f                   	pop    edi
c0020b55:	5d                   	pop    ebp
c0020b56:	c3                   	ret    

c0020b57 <readRoot(unsigned int*, unsigned int*, char)>:
c0020b57:	81 ec 40 08 00 00    	sub    esp,0x840
c0020b5d:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0020b65:	50                   	push   eax
c0020b66:	8d 44 24 38          	lea    eax,[esp+0x38]
c0020b6a:	50                   	push   eax
c0020b6b:	6a 10                	push   0x10
c0020b6d:	e8 5d fa ff ff       	call   c00205cf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020b72:	83 c4 0c             	add    esp,0xc
c0020b75:	6a 22                	push   0x22
c0020b77:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0020b7e:	50                   	push   eax
c0020b7f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020b83:	50                   	push   eax
c0020b84:	e8 cc fa fd ff       	call   c0000655 <memcpy>
c0020b89:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020b90:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020b94:	89 10                	mov    DWORD PTR [eax],edx
c0020b96:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020b9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020ba1:	89 10                	mov    DWORD PTR [eax],edx
c0020ba3:	b0 01                	mov    al,0x1
c0020ba5:	81 c4 4c 08 00 00    	add    esp,0x84c
c0020bab:	c3                   	ret    

c0020bac <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0020bac:	55                   	push   ebp
c0020bad:	57                   	push   edi
c0020bae:	56                   	push   esi
c0020baf:	53                   	push   ebx
c0020bb0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020bb6:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0020bbd:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0020bc4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020bc8:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0020bcc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0020bd0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020bd4:	75 03                	jne    c0020bd9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020bd6:	83 c3 02             	add    ebx,0x2
c0020bd9:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0020bdc:	75 03                	jne    c0020be1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0020bde:	43                   	inc    ebx
c0020bdf:	eb f8                	jmp    c0020bd9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020be1:	51                   	push   ecx
c0020be2:	68 00 01 00 00       	push   0x100
c0020be7:	6a 00                	push   0x0
c0020be9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020bed:	50                   	push   eax
c0020bee:	e8 98 fa fd ff       	call   c000068b <memset>
c0020bf3:	83 c4 10             	add    esp,0x10
c0020bf6:	31 d2                	xor    edx,edx
c0020bf8:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020bfb:	84 c0                	test   al,al
c0020bfd:	74 21                	je     c0020c20 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0020bff:	3c 2f                	cmp    al,0x2f
c0020c01:	75 0b                	jne    c0020c0e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0020c03:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0020c07:	bd 01 00 00 00       	mov    ebp,0x1
c0020c0c:	eb 14                	jmp    c0020c22 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0020c0e:	8d 48 9f             	lea    ecx,[eax-0x61]
c0020c11:	80 f9 19             	cmp    cl,0x19
c0020c14:	77 03                	ja     c0020c19 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020c16:	83 e8 20             	sub    eax,0x20
c0020c19:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0020c1d:	42                   	inc    edx
c0020c1e:	eb d8                	jmp    c0020bf8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0020c20:	31 ed                	xor    ebp,ebp
c0020c22:	83 ec 0c             	sub    esp,0xc
c0020c25:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0020c2c:	e8 a3 e8 fe ff       	call   c000f4d4 <malloc>
c0020c31:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0020c38:	89 c6                	mov    esi,eax
c0020c3a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0020c40:	c1 ef 0b             	shr    edi,0xb
c0020c43:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0020c4a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0020c4e:	83 c4 10             	add    esp,0x10
c0020c51:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0020c56:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020c5a:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0020c61:	74 28                	je     c0020c8b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0020c63:	52                   	push   edx
c0020c64:	57                   	push   edi
c0020c65:	50                   	push   eax
c0020c66:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020c6a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0020c71:	e8 59 f9 ff ff       	call   c00205cf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020c76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c7a:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0020c81:	05 00 08 00 00       	add    eax,0x800
c0020c86:	83 c4 10             	add    esp,0x10
c0020c89:	eb cb                	jmp    c0020c56 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0020c8b:	83 ec 0c             	sub    esp,0xc
c0020c8e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0020c92:	57                   	push   edi
c0020c93:	e8 10 fa fd ff       	call   c00006a8 <strlen>
c0020c98:	50                   	push   eax
c0020c99:	57                   	push   edi
c0020c9a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0020ca1:	56                   	push   esi
c0020ca2:	e8 e6 f8 ff ff       	call   c002058d <__memmem(unsigned char*, int, unsigned char*, int)>
c0020ca7:	83 c4 20             	add    esp,0x20
c0020caa:	85 c0                	test   eax,eax
c0020cac:	75 13                	jne    c0020cc1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0020cae:	83 ec 0c             	sub    esp,0xc
c0020cb1:	56                   	push   esi
c0020cb2:	e8 2d e8 fe ff       	call   c000f4e4 <free>
c0020cb7:	83 c4 10             	add    esp,0x10
c0020cba:	31 c0                	xor    eax,eax
c0020cbc:	e9 b3 00 00 00       	jmp    c0020d74 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020cc1:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0020cc5:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0020cc9:	c1 e7 08             	shl    edi,0x8
c0020ccc:	c1 e2 10             	shl    edx,0x10
c0020ccf:	09 d7                	or     edi,edx
c0020cd1:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0020cd5:	09 d7                	or     edi,edx
c0020cd7:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0020cdb:	c1 e2 18             	shl    edx,0x18
c0020cde:	09 d7                	or     edi,edx
c0020ce0:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0020ce4:	89 d1                	mov    ecx,edx
c0020ce6:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0020cea:	c1 e1 08             	shl    ecx,0x8
c0020ced:	c1 e2 10             	shl    edx,0x10
c0020cf0:	09 ca                	or     edx,ecx
c0020cf2:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0020cf6:	09 ca                	or     edx,ecx
c0020cf8:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0020cfc:	c1 e1 18             	shl    ecx,0x18
c0020cff:	09 ca                	or     edx,ecx
c0020d01:	89 e9                	mov    ecx,ebp
c0020d03:	84 c9                	test   cl,cl
c0020d05:	74 3c                	je     c0020d43 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0020d07:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020d0b:	83 ec 0c             	sub    esp,0xc
c0020d0e:	56                   	push   esi
c0020d0f:	e8 d0 e7 fe ff       	call   c000f4e4 <free>
c0020d14:	83 c4 0c             	add    esp,0xc
c0020d17:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020d1e:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0020d23:	50                   	push   eax
c0020d24:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020d2b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020d32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020d36:	52                   	push   edx
c0020d37:	57                   	push   edi
c0020d38:	53                   	push   ebx
c0020d39:	e8 6e fe ff ff       	call   c0020bac <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020d3e:	83 c4 20             	add    esp,0x20
c0020d41:	eb 31                	jmp    c0020d74 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020d43:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0020d46:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0020d4d:	d0 e8                	shr    al,1
c0020d4f:	89 3b                	mov    DWORD PTR [ebx],edi
c0020d51:	83 e0 01             	and    eax,0x1
c0020d54:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0020d5b:	83 ec 0c             	sub    esp,0xc
c0020d5e:	89 13                	mov    DWORD PTR [ebx],edx
c0020d60:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0020d67:	89 03                	mov    DWORD PTR [ebx],eax
c0020d69:	56                   	push   esi
c0020d6a:	e8 75 e7 fe ff       	call   c000f4e4 <free>
c0020d6f:	83 c4 10             	add    esp,0x10
c0020d72:	b0 01                	mov    al,0x1
c0020d74:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020d7a:	5b                   	pop    ebx
c0020d7b:	5e                   	pop    esi
c0020d7c:	5f                   	pop    edi
c0020d7d:	5d                   	pop    ebp
c0020d7e:	c3                   	ret    

c0020d7f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0020d7f:	55                   	push   ebp
c0020d80:	57                   	push   edi
c0020d81:	56                   	push   esi
c0020d82:	53                   	push   ebx
c0020d83:	83 ec 20             	sub    esp,0x20
c0020d86:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020d8a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020d8e:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020d92:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020d9a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020da2:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0020da7:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0020dad:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0020db3:	57                   	push   edi
c0020db4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020db8:	50                   	push   eax
c0020db9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020dbd:	50                   	push   eax
c0020dbe:	e8 94 fd ff ff       	call   c0020b57 <readRoot(unsigned int*, unsigned int*, char)>
c0020dc3:	5a                   	pop    edx
c0020dc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020dc8:	e8 db f8 fd ff       	call   c00006a8 <strlen>
c0020dcd:	83 c4 10             	add    esp,0x10
c0020dd0:	83 f8 03             	cmp    eax,0x3
c0020dd3:	77 17                	ja     c0020dec <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020dd5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020dd9:	89 03                	mov    DWORD PTR [ebx],eax
c0020ddb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ddf:	89 06                	mov    DWORD PTR [esi],eax
c0020de1:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0020de8:	b0 01                	mov    al,0x1
c0020dea:	eb 19                	jmp    c0020e05 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0020dec:	50                   	push   eax
c0020ded:	55                   	push   ebp
c0020dee:	57                   	push   edi
c0020def:	56                   	push   esi
c0020df0:	53                   	push   ebx
c0020df1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020df5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020df9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020dfd:	e8 aa fd ff ff       	call   c0020bac <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020e02:	83 c4 20             	add    esp,0x20
c0020e05:	83 c4 1c             	add    esp,0x1c
c0020e08:	5b                   	pop    ebx
c0020e09:	5e                   	pop    esi
c0020e0a:	5f                   	pop    edi
c0020e0b:	5d                   	pop    ebp
c0020e0c:	c3                   	ret    
c0020e0d:	90                   	nop

c0020e0e <ISO9660::open(char const*, void**, FileOpenMode)>:
c0020e0e:	57                   	push   edi
c0020e0f:	56                   	push   esi
c0020e10:	53                   	push   ebx
c0020e11:	83 ec 10             	sub    esp,0x10
c0020e14:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020e18:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020e1c:	85 ff                	test   edi,edi
c0020e1e:	74 7b                	je     c0020e9b <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020e20:	85 f6                	test   esi,esi
c0020e22:	74 77                	je     c0020e9b <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020e24:	83 ec 0c             	sub    esp,0xc
c0020e27:	6a 1c                	push   0x1c
c0020e29:	e8 a6 e6 fe ff       	call   c000f4d4 <malloc>
c0020e2e:	89 07                	mov    DWORD PTR [edi],eax
c0020e30:	89 c3                	mov    ebx,eax
c0020e32:	58                   	pop    eax
c0020e33:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e37:	50                   	push   eax
c0020e38:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0020e3b:	50                   	push   eax
c0020e3c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020e40:	50                   	push   eax
c0020e41:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020e45:	50                   	push   eax
c0020e46:	56                   	push   esi
c0020e47:	e8 33 ff ff ff       	call   c0020d7f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020e4c:	83 c4 20             	add    esp,0x20
c0020e4f:	84 c0                	test   al,al
c0020e51:	74 07                	je     c0020e5a <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c0020e53:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020e58:	74 0b                	je     c0020e65 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0020e5a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0020e5e:	b8 01 00 00 00       	mov    eax,0x1
c0020e63:	eb 3b                	jmp    c0020ea0 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020e65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020e69:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0020e6d:	89 03                	mov    DWORD PTR [ebx],eax
c0020e6f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0020e76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e7a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0020e81:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020e88:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0020e8b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0020e92:	8a 06                	mov    al,BYTE PTR [esi]
c0020e94:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0020e97:	31 c0                	xor    eax,eax
c0020e99:	eb 05                	jmp    c0020ea0 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020e9b:	b8 04 00 00 00       	mov    eax,0x4
c0020ea0:	83 c4 10             	add    esp,0x10
c0020ea3:	5b                   	pop    ebx
c0020ea4:	5e                   	pop    esi
c0020ea5:	5f                   	pop    edi
c0020ea6:	c3                   	ret    
c0020ea7:	90                   	nop

c0020ea8 <ISO9660::exists(char const*)>:
c0020ea8:	83 ec 28             	sub    esp,0x28
c0020eab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020eaf:	8d 54 24 18          	lea    edx,[esp+0x18]
c0020eb3:	52                   	push   edx
c0020eb4:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0020eb7:	52                   	push   edx
c0020eb8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020ebc:	52                   	push   edx
c0020ebd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020ec1:	52                   	push   edx
c0020ec2:	50                   	push   eax
c0020ec3:	e8 b7 fe ff ff       	call   c0020d7f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020ec8:	83 c4 3c             	add    esp,0x3c
c0020ecb:	c3                   	ret    

c0020ecc <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0020ecc:	56                   	push   esi
c0020ecd:	53                   	push   ebx
c0020ece:	83 ec 14             	sub    esp,0x14
c0020ed1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0020ed5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0020ed9:	85 db                	test   ebx,ebx
c0020edb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020edf:	0f 94 c2             	sete   dl
c0020ee2:	85 f6                	test   esi,esi
c0020ee4:	0f 94 c0             	sete   al
c0020ee7:	08 c2                	or     dl,al
c0020ee9:	75 68                	jne    c0020f53 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0020eeb:	85 c9                	test   ecx,ecx
c0020eed:	74 64                	je     c0020f53 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0020eef:	83 ec 0c             	sub    esp,0xc
c0020ef2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0020ef5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ef9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020eff:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020f06:	50                   	push   eax
c0020f07:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0020f0a:	50                   	push   eax
c0020f0b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f0f:	50                   	push   eax
c0020f10:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f14:	50                   	push   eax
c0020f15:	51                   	push   ecx
c0020f16:	e8 64 fe ff ff       	call   c0020d7f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020f1b:	83 c4 20             	add    esp,0x20
c0020f1e:	ba 01 00 00 00       	mov    edx,0x1
c0020f23:	84 c0                	test   al,al
c0020f25:	74 31                	je     c0020f58 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0020f27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f2b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020f32:	89 03                	mov    DWORD PTR [ebx],eax
c0020f34:	ba 00 00 00 00       	mov    edx,0x0
c0020f39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f3d:	85 c0                	test   eax,eax
c0020f3f:	0f 95 06             	setne  BYTE PTR [esi]
c0020f42:	74 14                	je     c0020f58 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0020f44:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020f4a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020f51:	eb 05                	jmp    c0020f58 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0020f53:	ba 04 00 00 00       	mov    edx,0x4
c0020f58:	83 c4 14             	add    esp,0x14
c0020f5b:	89 d0                	mov    eax,edx
c0020f5d:	5b                   	pop    ebx
c0020f5e:	5e                   	pop    esi
c0020f5f:	c3                   	ret    

c0020f60 <ISO9660::openDir(char const*, void**)>:
c0020f60:	57                   	push   edi
c0020f61:	56                   	push   esi
c0020f62:	53                   	push   ebx
c0020f63:	83 ec 10             	sub    esp,0x10
c0020f66:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020f6a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020f6e:	85 ff                	test   edi,edi
c0020f70:	0f 84 95 00 00 00    	je     c002100b <ISO9660::openDir(char const*, void**)+0xab>
c0020f76:	85 f6                	test   esi,esi
c0020f78:	0f 84 8d 00 00 00    	je     c002100b <ISO9660::openDir(char const*, void**)+0xab>
c0020f7e:	83 ec 0c             	sub    esp,0xc
c0020f81:	6a 1c                	push   0x1c
c0020f83:	e8 4c e5 fe ff       	call   c000f4d4 <malloc>
c0020f88:	89 07                	mov    DWORD PTR [edi],eax
c0020f8a:	89 c3                	mov    ebx,eax
c0020f8c:	59                   	pop    ecx
c0020f8d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f91:	50                   	push   eax
c0020f92:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0020f95:	50                   	push   eax
c0020f96:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f9a:	50                   	push   eax
c0020f9b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f9f:	50                   	push   eax
c0020fa0:	56                   	push   esi
c0020fa1:	e8 d9 fd ff ff       	call   c0020d7f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020fa6:	83 c4 20             	add    esp,0x20
c0020fa9:	84 c0                	test   al,al
c0020fab:	74 07                	je     c0020fb4 <ISO9660::openDir(char const*, void**)+0x54>
c0020fad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020fb2:	75 21                	jne    c0020fd5 <ISO9660::openDir(char const*, void**)+0x75>
c0020fb4:	0f b6 c0             	movzx  eax,al
c0020fb7:	52                   	push   edx
c0020fb8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020fbc:	50                   	push   eax
c0020fbd:	68 9a ad 02 c0       	push   0xc002ad9a
c0020fc2:	e8 be 16 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0020fc7:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0020fcb:	83 c4 10             	add    esp,0x10
c0020fce:	b8 01 00 00 00       	mov    eax,0x1
c0020fd3:	eb 3b                	jmp    c0021010 <ISO9660::openDir(char const*, void**)+0xb0>
c0020fd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020fd9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0020fdd:	89 03                	mov    DWORD PTR [ebx],eax
c0020fdf:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0020fe6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fea:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0020ff1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020ff8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0020ffb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021002:	8a 06                	mov    al,BYTE PTR [esi]
c0021004:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021007:	31 c0                	xor    eax,eax
c0021009:	eb 05                	jmp    c0021010 <ISO9660::openDir(char const*, void**)+0xb0>
c002100b:	b8 04 00 00 00       	mov    eax,0x4
c0021010:	83 c4 10             	add    esp,0x10
c0021013:	5b                   	pop    ebx
c0021014:	5e                   	pop    esi
c0021015:	5f                   	pop    edi
c0021016:	c3                   	ret    
c0021017:	90                   	nop

c0021018 <ISO9660::ISO9660()>:
c0021018:	83 ec 0c             	sub    esp,0xc
c002101b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002101f:	83 ec 0c             	sub    esp,0xc
c0021022:	50                   	push   eax
c0021023:	e8 62 19 ff ff       	call   c001298a <Filesystem::Filesystem()>
c0021028:	83 c4 10             	add    esp,0x10
c002102b:	ba c0 ad 02 c0       	mov    edx,0xc002adc0
c0021030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021034:	89 10                	mov    DWORD PTR [eax],edx
c0021036:	90                   	nop
c0021037:	83 c4 0c             	add    esp,0xc
c002103a:	c3                   	ret    
c002103b:	90                   	nop

c002103c <SoundChannel::~SoundChannel()>:
c002103c:	83 ec 0c             	sub    esp,0xc
c002103f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021043:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021046:	83 ec 0c             	sub    esp,0xc
c0021049:	50                   	push   eax
c002104a:	e8 95 e4 fe ff       	call   c000f4e4 <free>
c002104f:	83 c4 10             	add    esp,0x10
c0021052:	90                   	nop
c0021053:	83 c4 0c             	add    esp,0xc
c0021056:	c3                   	ret    
c0021057:	90                   	nop

c0021058 <SoundChannel::setSpeed(float)>:
c0021058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002105c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021060:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021063:	c3                   	ret    

c0021064 <SoundChannel::getSpeed()>:
c0021064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021068:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c002106b:	c3                   	ret    

c002106c <SoundChannel::setVolume(int)>:
c002106c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021070:	83 f8 64             	cmp    eax,0x64
c0021073:	7e 05                	jle    c002107a <SoundChannel::setVolume(int)+0xe>
c0021075:	b8 64 00 00 00       	mov    eax,0x64
c002107a:	85 c0                	test   eax,eax
c002107c:	79 02                	jns    c0021080 <SoundChannel::setVolume(int)+0x14>
c002107e:	31 c0                	xor    eax,eax
c0021080:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021084:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0021087:	c3                   	ret    

c0021088 <SoundChannel::getVolume()>:
c0021088:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002108c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c002108f:	c3                   	ret    

c0021090 <SoundChannel::pause()>:
c0021090:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021094:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0021098:	c3                   	ret    
c0021099:	90                   	nop

c002109a <SoundChannel::SoundChannel(int, int, int, int)>:
c002109a:	83 ec 1c             	sub    esp,0x1c
c002109d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00210a1:	e8 ea ff ff ff       	call   c0021090 <SoundChannel::pause()>
c00210a6:	83 c4 04             	add    esp,0x4
c00210a9:	6a 50                	push   0x50
c00210ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00210af:	e8 b8 ff ff ff       	call   c002106c <SoundChannel::setVolume(int)>
c00210b4:	83 c4 08             	add    esp,0x8
c00210b7:	a1 38 ae 02 c0       	mov    eax,ds:0xc002ae38
c00210bc:	50                   	push   eax
c00210bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00210c1:	e8 92 ff ff ff       	call   c0021058 <SoundChannel::setSpeed(float)>
c00210c6:	83 c4 08             	add    esp,0x8
c00210c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00210cd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00210d1:	89 10                	mov    DWORD PTR [eax],edx
c00210d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00210d7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00210db:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00210de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00210e2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00210e6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00210e9:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00210ee:	75 23                	jne    c0021113 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00210f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00210f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00210f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00210fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00210fd:	0f af c2             	imul   eax,edx
c0021100:	85 c0                	test   eax,eax
c0021102:	79 03                	jns    c0021107 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0021104:	83 c0 03             	add    eax,0x3
c0021107:	c1 f8 02             	sar    eax,0x2
c002110a:	05 a0 0f 00 00       	add    eax,0xfa0
c002110f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021113:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021117:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002111b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002111e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021122:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021129:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002112d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021134:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021138:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002113b:	c1 e0 02             	shl    eax,0x2
c002113e:	83 ec 0c             	sub    esp,0xc
c0021141:	50                   	push   eax
c0021142:	e8 8d e3 fe ff       	call   c000f4d4 <malloc>
c0021147:	83 c4 10             	add    esp,0x10
c002114a:	89 c2                	mov    edx,eax
c002114c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021150:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021153:	83 ec 04             	sub    esp,0x4
c0021156:	8d 44 24 08          	lea    eax,[esp+0x8]
c002115a:	50                   	push   eax
c002115b:	6a 01                	push   0x1
c002115d:	6a 04                	push   0x4
c002115f:	e8 eb 77 fe ff       	call   c000894f <src_new>
c0021164:	83 c4 10             	add    esp,0x10
c0021167:	89 c2                	mov    edx,eax
c0021169:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002116d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021174:	85 c0                	test   eax,eax
c0021176:	74 10                	je     c0021188 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0021178:	83 ec 0c             	sub    esp,0xc
c002117b:	68 1c ae 02 c0       	push   0xc002ae1c
c0021180:	e8 1a 86 ff ff       	call   c001979f <Krnl::panic(char const*)>
c0021185:	83 c4 10             	add    esp,0x10
c0021188:	a0 80 eb 02 c0       	mov    al,ds:0xc002eb80
c002118d:	83 f0 01             	xor    eax,0x1
c0021190:	84 c0                	test   al,al
c0021192:	74 57                	je     c00211eb <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0021194:	a1 3c ae 02 c0       	mov    eax,ds:0xc002ae3c
c0021199:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002119d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00211a5:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00211ad:	7f 35                	jg     c00211e4 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00211af:	83 ec 0c             	sub    esp,0xc
c00211b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00211b6:	e8 2c 4a 00 00       	call   c0025be7 <__floatsisf>
c00211bb:	83 c4 10             	add    esp,0x10
c00211be:	8b 15 3c ae 02 c0    	mov    edx,DWORD PTR ds:0xc002ae3c
c00211c4:	83 ec 08             	sub    esp,0x8
c00211c7:	52                   	push   edx
c00211c8:	50                   	push   eax
c00211c9:	e8 2b 46 00 00       	call   c00257f9 <__mulsf3>
c00211ce:	83 c4 10             	add    esp,0x10
c00211d1:	89 c2                	mov    edx,eax
c00211d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211d7:	89 14 85 80 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1880],edx
c00211de:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00211e2:	eb c1                	jmp    c00211a5 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00211e4:	c6 05 80 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb80,0x1
c00211eb:	90                   	nop
c00211ec:	83 c4 1c             	add    esp,0x1c
c00211ef:	c3                   	ret    

c00211f0 <SoundChannel::play()>:
c00211f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211f4:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00211f8:	c3                   	ret    
c00211f9:	90                   	nop

c00211fa <SoundChannel::paused()>:
c00211fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211fe:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0021201:	c3                   	ret    

c0021202 <SoundChannel::getSampleRate()>:
c0021202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021206:	8b 00                	mov    eax,DWORD PTR [eax]
c0021208:	c3                   	ret    
c0021209:	90                   	nop

c002120a <SoundChannel::getBits()>:
c002120a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002120e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021211:	c3                   	ret    

c0021212 <SoundChannel::getBufferUsed()>:
c0021212:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021216:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021219:	c3                   	ret    

c002121a <SoundChannel::getBufferSize()>:
c002121a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002121e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021221:	c3                   	ret    

c0021222 <SoundChannel::unbuffer(float*, int, int)>:
c0021222:	56                   	push   esi
c0021223:	53                   	push   ebx
c0021224:	83 ec 40             	sub    esp,0x40
c0021227:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002122b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002122e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021232:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021235:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021239:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002123d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021241:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021245:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021249:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002124d:	e8 95 49 00 00       	call   c0025be7 <__floatsisf>
c0021252:	5a                   	pop    edx
c0021253:	89 c6                	mov    esi,eax
c0021255:	ff 33                	push   DWORD PTR [ebx]
c0021257:	e8 8b 49 00 00       	call   c0025be7 <__floatsisf>
c002125c:	59                   	pop    ecx
c002125d:	5a                   	pop    edx
c002125e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0021261:	50                   	push   eax
c0021262:	e8 92 45 00 00       	call   c00257f9 <__mulsf3>
c0021267:	59                   	pop    ecx
c0021268:	5a                   	pop    edx
c0021269:	50                   	push   eax
c002126a:	56                   	push   esi
c002126b:	e8 4c 47 00 00       	call   c00259bc <__divsf3>
c0021270:	89 04 24             	mov    DWORD PTR [esp],eax
c0021273:	e8 3f 5c 00 00       	call   c0026eb7 <__extendsfdf2>
c0021278:	59                   	pop    ecx
c0021279:	5e                   	pop    esi
c002127a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002127e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021282:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c002128a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002128e:	50                   	push   eax
c002128f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021292:	e8 ad 72 fe ff       	call   c0008544 <src_process>
c0021297:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002129b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002129e:	83 c4 0c             	add    esp,0xc
c00212a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00212a4:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00212a7:	29 d0                	sub    eax,edx
c00212a9:	c1 e0 02             	shl    eax,0x2
c00212ac:	50                   	push   eax
c00212ad:	8d 04 91             	lea    eax,[ecx+edx*4]
c00212b0:	50                   	push   eax
c00212b1:	51                   	push   ecx
c00212b2:	e8 66 f3 fd ff       	call   c000061d <memmove>
c00212b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00212bb:	83 c4 44             	add    esp,0x44
c00212be:	5b                   	pop    ebx
c00212bf:	5e                   	pop    esi
c00212c0:	c3                   	ret    
c00212c1:	90                   	nop

c00212c2 <SoundChannel::buffer8(unsigned char*, int)>:
c00212c2:	55                   	push   ebp
c00212c3:	57                   	push   edi
c00212c4:	56                   	push   esi
c00212c5:	53                   	push   ebx
c00212c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212ca:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00212ce:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00212d1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00212d5:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00212d8:	74 7a                	je     c0021354 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00212da:	85 ff                	test   edi,edi
c00212dc:	7e 76                	jle    c0021354 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00212de:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00212e2:	8d 70 01             	lea    esi,[eax+0x1]
c00212e5:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00212e8:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00212eb:	8b 1c 9d 80 e7 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1880]
c00212f2:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00212f5:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00212f8:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00212fb:	74 5e                	je     c002135b <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00212fd:	83 ff 01             	cmp    edi,0x1
c0021300:	74 4b                	je     c002134d <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021302:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021306:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021309:	8d 70 01             	lea    esi,[eax+0x1]
c002130c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002130f:	8b 1c 9d 80 e7 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1880]
c0021316:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021319:	b8 02 00 00 00       	mov    eax,0x2
c002131e:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021321:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021324:	75 23                	jne    c0021349 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021326:	eb 27                	jmp    c002134f <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021328:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002132d:	8d 71 01             	lea    esi,[ecx+0x1]
c0021330:	40                   	inc    eax
c0021331:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021334:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021337:	8b 1c 9d 80 e7 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1880]
c002133e:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021341:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021344:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021347:	74 06                	je     c002134f <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021349:	39 c7                	cmp    edi,eax
c002134b:	75 db                	jne    c0021328 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c002134d:	89 f8                	mov    eax,edi
c002134f:	5b                   	pop    ebx
c0021350:	5e                   	pop    esi
c0021351:	5f                   	pop    edi
c0021352:	5d                   	pop    ebp
c0021353:	c3                   	ret    
c0021354:	5b                   	pop    ebx
c0021355:	31 c0                	xor    eax,eax
c0021357:	5e                   	pop    esi
c0021358:	5f                   	pop    edi
c0021359:	5d                   	pop    ebp
c002135a:	c3                   	ret    
c002135b:	b8 01 00 00 00       	mov    eax,0x1
c0021360:	eb ed                	jmp    c002134f <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021362 <SoundDevice::SoundDevice(char const*)>:
c0021362:	83 ec 1c             	sub    esp,0x1c
c0021365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021369:	83 ec 08             	sub    esp,0x8
c002136c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021370:	50                   	push   eax
c0021371:	e8 ee 28 ff ff       	call   c0013c64 <Device::Device(char const*)>
c0021376:	83 c4 10             	add    esp,0x10
c0021379:	ba 48 ae 02 c0       	mov    edx,0xc002ae48
c002137e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021382:	89 10                	mov    DWORD PTR [eax],edx
c0021384:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021388:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021396:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00213a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00213a8:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00213ad:	7f 19                	jg     c00213c8 <SoundDevice::SoundDevice(char const*)+0x66>
c00213af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00213b7:	83 c2 54             	add    edx,0x54
c00213ba:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00213c2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00213c6:	eb e0                	jmp    c00213a8 <SoundDevice::SoundDevice(char const*)+0x46>
c00213c8:	90                   	nop
c00213c9:	83 c4 1c             	add    esp,0x1c
c00213cc:	c3                   	ret    
c00213cd:	90                   	nop

c00213ce <SoundDevice::~SoundDevice()>:
c00213ce:	53                   	push   ebx
c00213cf:	83 ec 18             	sub    esp,0x18
c00213d2:	ba 48 ae 02 c0       	mov    edx,0xc002ae48
c00213d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213db:	89 10                	mov    DWORD PTR [eax],edx
c00213dd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00213e5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00213ea:	7f 46                	jg     c0021432 <SoundDevice::~SoundDevice()+0x64>
c00213ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00213f4:	83 c2 54             	add    edx,0x54
c00213f7:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00213fb:	85 c0                	test   eax,eax
c00213fd:	74 2d                	je     c002142c <SoundDevice::~SoundDevice()+0x5e>
c00213ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021403:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021407:	83 c2 54             	add    edx,0x54
c002140a:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002140e:	85 db                	test   ebx,ebx
c0021410:	74 1a                	je     c002142c <SoundDevice::~SoundDevice()+0x5e>
c0021412:	83 ec 0c             	sub    esp,0xc
c0021415:	53                   	push   ebx
c0021416:	e8 21 fc ff ff       	call   c002103c <SoundChannel::~SoundChannel()>
c002141b:	83 c4 10             	add    esp,0x10
c002141e:	83 ec 08             	sub    esp,0x8
c0021421:	6a 2c                	push   0x2c
c0021423:	53                   	push   ebx
c0021424:	e8 7c 11 ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0021429:	83 c4 10             	add    esp,0x10
c002142c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021430:	eb b3                	jmp    c00213e5 <SoundDevice::~SoundDevice()+0x17>
c0021432:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021436:	83 ec 0c             	sub    esp,0xc
c0021439:	50                   	push   eax
c002143a:	e8 07 25 ff ff       	call   c0013946 <Device::~Device()>
c002143f:	83 c4 10             	add    esp,0x10
c0021442:	90                   	nop
c0021443:	83 c4 18             	add    esp,0x18
c0021446:	5b                   	pop    ebx
c0021447:	c3                   	ret    

c0021448 <SoundDevice::~SoundDevice()>:
c0021448:	83 ec 0c             	sub    esp,0xc
c002144b:	83 ec 0c             	sub    esp,0xc
c002144e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021452:	e8 77 ff ff ff       	call   c00213ce <SoundDevice::~SoundDevice()>
c0021457:	83 c4 10             	add    esp,0x10
c002145a:	83 ec 08             	sub    esp,0x8
c002145d:	68 e4 01 00 00       	push   0x1e4
c0021462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021466:	e8 3a 11 ff ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c002146b:	83 c4 10             	add    esp,0x10
c002146e:	83 c4 0c             	add    esp,0xc
c0021471:	c3                   	ret    

c0021472 <SoundDevice::getFreeChannelNum()>:
c0021472:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021476:	31 c0                	xor    eax,eax
c0021478:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021480:	74 09                	je     c002148b <SoundDevice::getFreeChannelNum()+0x19>
c0021482:	40                   	inc    eax
c0021483:	83 f8 20             	cmp    eax,0x20
c0021486:	75 f0                	jne    c0021478 <SoundDevice::getFreeChannelNum()+0x6>
c0021488:	83 c8 ff             	or     eax,0xffffffff
c002148b:	c3                   	ret    

c002148c <SoundDevice::addChannel(SoundChannel*)>:
c002148c:	56                   	push   esi
c002148d:	53                   	push   ebx
c002148e:	51                   	push   ecx
c002148f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021493:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021497:	53                   	push   ebx
c0021498:	e8 d5 ff ff ff       	call   c0021472 <SoundDevice::getFreeChannelNum()>
c002149d:	5a                   	pop    edx
c002149e:	83 f8 ff             	cmp    eax,0xffffffff
c00214a1:	74 51                	je     c00214f4 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00214a3:	85 f6                	test   esi,esi
c00214a5:	74 4d                	je     c00214f4 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00214a7:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00214ae:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00214b5:	75 30                	jne    c00214e7 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00214b7:	83 ec 0c             	sub    esp,0xc
c00214ba:	56                   	push   esi
c00214bb:	e8 42 fd ff ff       	call   c0021202 <SoundChannel::getSampleRate()>
c00214c0:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00214c6:	89 34 24             	mov    DWORD PTR [esp],esi
c00214c9:	e8 3c fd ff ff       	call   c002120a <SoundChannel::getBits()>
c00214ce:	83 c4 0c             	add    esp,0xc
c00214d1:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00214d7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00214d9:	50                   	push   eax
c00214da:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00214e0:	53                   	push   ebx
c00214e1:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00214e4:	83 c4 10             	add    esp,0x10
c00214e7:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00214ed:	b8 01 00 00 00       	mov    eax,0x1
c00214f2:	eb 03                	jmp    c00214f7 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00214f4:	83 c8 ff             	or     eax,0xffffffff
c00214f7:	5a                   	pop    edx
c00214f8:	5b                   	pop    ebx
c00214f9:	5e                   	pop    esi
c00214fa:	c3                   	ret    
c00214fb:	90                   	nop

c00214fc <SoundDevice::removeChannel(int)>:
c00214fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021504:	83 fa 1f             	cmp    edx,0x1f
c0021507:	77 23                	ja     c002152c <SoundDevice::removeChannel(int)+0x30>
c0021509:	8d 14 90             	lea    edx,[eax+edx*4]
c002150c:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021513:	74 17                	je     c002152c <SoundDevice::removeChannel(int)+0x30>
c0021515:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002151f:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021525:	75 05                	jne    c002152c <SoundDevice::removeChannel(int)+0x30>
c0021527:	8b 00                	mov    eax,DWORD PTR [eax]
c0021529:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c002152c:	c3                   	ret    
c002152d:	90                   	nop

c002152e <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002152e:	57                   	push   edi
c002152f:	56                   	push   esi
c0021530:	53                   	push   ebx
c0021531:	31 db                	xor    ebx,ebx
c0021533:	83 ec 10             	sub    esp,0x10
c0021536:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002153a:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002153e:	0f 8d cb 00 00 00    	jge    c002160f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021544:	83 ec 0c             	sub    esp,0xc
c0021547:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002154b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002154e:	e8 64 59 00 00       	call   c0026eb7 <__extendsfdf2>
c0021553:	83 c4 10             	add    esp,0x10
c0021556:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002155a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002155e:	68 00 00 f0 3f       	push   0x3ff00000
c0021563:	6a 00                	push   0x0
c0021565:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021569:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002156d:	e8 d1 48 00 00       	call   c0025e43 <__adddf3>
c0021572:	83 c4 10             	add    esp,0x10
c0021575:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021579:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002157d:	68 00 00 e0 3f       	push   0x3fe00000
c0021582:	6a 00                	push   0x0
c0021584:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002158c:	e8 2f 4f 00 00       	call   c00264c0 <__muldf3>
c0021591:	83 c4 10             	add    esp,0x10
c0021594:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021598:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002159c:	68 00 00 60 40       	push   0x40600000
c00215a1:	6a 00                	push   0x0
c00215a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215ab:	e8 10 4f 00 00       	call   c00264c0 <__muldf3>
c00215b0:	59                   	pop    ecx
c00215b1:	5f                   	pop    edi
c00215b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00215b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00215ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215c2:	e8 cc 57 00 00       	call   c0026d93 <__truncdfsf2>
c00215c7:	5a                   	pop    edx
c00215c8:	89 c7                	mov    edi,eax
c00215ca:	59                   	pop    ecx
c00215cb:	68 00 00 fe 42       	push   0x42fe0000
c00215d0:	50                   	push   eax
c00215d1:	e8 67 48 00 00       	call   c0025e3d <__gesf2>
c00215d6:	83 c4 10             	add    esp,0x10
c00215d9:	85 c0                	test   eax,eax
c00215db:	78 06                	js     c00215e3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00215dd:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00215e1:	eb 26                	jmp    c0021609 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00215e3:	50                   	push   eax
c00215e4:	50                   	push   eax
c00215e5:	6a 00                	push   0x0
c00215e7:	57                   	push   edi
c00215e8:	e8 54 48 00 00       	call   c0025e41 <__lesf2>
c00215ed:	83 c4 10             	add    esp,0x10
c00215f0:	85 c0                	test   eax,eax
c00215f2:	7f 06                	jg     c00215fa <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00215f4:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00215f8:	eb 0f                	jmp    c0021609 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00215fa:	83 ec 0c             	sub    esp,0xc
c00215fd:	57                   	push   edi
c00215fe:	e8 49 59 00 00       	call   c0026f4c <lrintf>
c0021603:	83 c4 10             	add    esp,0x10
c0021606:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0021609:	43                   	inc    ebx
c002160a:	e9 2b ff ff ff       	jmp    c002153a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002160f:	83 c4 10             	add    esp,0x10
c0021612:	5b                   	pop    ebx
c0021613:	5e                   	pop    esi
c0021614:	5f                   	pop    edi
c0021615:	c3                   	ret    

c0021616 <SoundDevice::getAudio(int, float*, float*)>:
c0021616:	55                   	push   ebp
c0021617:	57                   	push   edi
c0021618:	56                   	push   esi
c0021619:	53                   	push   ebx
c002161a:	31 db                	xor    ebx,ebx
c002161c:	83 ec 20             	sub    esp,0x20
c002161f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021623:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021627:	c1 e0 02             	shl    eax,0x2
c002162a:	50                   	push   eax
c002162b:	6a 00                	push   0x0
c002162d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021631:	e8 55 f0 fd ff       	call   c000068b <memset>
c0021636:	83 c4 10             	add    esp,0x10
c0021639:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002163d:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0021644:	85 c0                	test   eax,eax
c0021646:	0f 84 d7 00 00 00    	je     c0021723 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002164c:	83 ec 0c             	sub    esp,0xc
c002164f:	50                   	push   eax
c0021650:	e8 a5 fb ff ff       	call   c00211fa <SoundChannel::paused()>
c0021655:	83 c4 10             	add    esp,0x10
c0021658:	84 c0                	test   al,al
c002165a:	0f 85 c3 00 00 00    	jne    c0021723 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021660:	83 ec 0c             	sub    esp,0xc
c0021663:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002166a:	e8 19 fa ff ff       	call   c0021088 <SoundChannel::getVolume()>
c002166f:	83 c4 10             	add    esp,0x10
c0021672:	85 c0                	test   eax,eax
c0021674:	0f 84 a9 00 00 00    	je     c0021723 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002167a:	83 ec 0c             	sub    esp,0xc
c002167d:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021684:	e8 ff f9 ff ff       	call   c0021088 <SoundChannel::getVolume()>
c0021689:	83 ec 0c             	sub    esp,0xc
c002168c:	50                   	push   eax
c002168d:	e8 55 45 00 00       	call   c0025be7 <__floatsisf>
c0021692:	59                   	pop    ecx
c0021693:	5d                   	pop    ebp
c0021694:	31 ed                	xor    ebp,ebp
c0021696:	68 00 00 c8 42       	push   0x42c80000
c002169b:	50                   	push   eax
c002169c:	e8 1b 43 00 00       	call   c00259bc <__divsf3>
c00216a1:	83 c4 10             	add    esp,0x10
c00216a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00216a8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00216ac:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00216b2:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00216b6:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00216bd:	e8 60 fb ff ff       	call   c0021222 <SoundChannel::unbuffer(float*, int, int)>
c00216c2:	83 c4 20             	add    esp,0x20
c00216c5:	89 c1                	mov    ecx,eax
c00216c7:	39 cd                	cmp    ebp,ecx
c00216c9:	7d 52                	jge    c002171d <SoundDevice::getAudio(int, float*, float*)+0x107>
c00216cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00216cf:	50                   	push   eax
c00216d0:	50                   	push   eax
c00216d1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00216d5:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00216d8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00216dc:	e8 18 41 00 00       	call   c00257f9 <__mulsf3>
c00216e1:	5a                   	pop    edx
c00216e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00216e6:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00216ec:	e8 f6 44 00 00       	call   c0025be7 <__floatsisf>
c00216f1:	59                   	pop    ecx
c00216f2:	5a                   	pop    edx
c00216f3:	50                   	push   eax
c00216f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216f8:	e8 bf 42 00 00       	call   c00259bc <__divsf3>
c00216fd:	59                   	pop    ecx
c00216fe:	5a                   	pop    edx
c00216ff:	50                   	push   eax
c0021700:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021704:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021707:	e8 ca 3d 00 00       	call   c00254d6 <__addsf3>
c002170c:	83 c4 10             	add    esp,0x10
c002170f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021713:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021717:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c002171a:	45                   	inc    ebp
c002171b:	eb aa                	jmp    c00216c7 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002171d:	39 cf                	cmp    edi,ecx
c002171f:	7e 02                	jle    c0021723 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021721:	89 cf                	mov    edi,ecx
c0021723:	43                   	inc    ebx
c0021724:	83 fb 20             	cmp    ebx,0x20
c0021727:	0f 85 10 ff ff ff    	jne    c002163d <SoundDevice::getAudio(int, float*, float*)+0x27>
c002172d:	83 c4 1c             	add    esp,0x1c
c0021730:	89 f8                	mov    eax,edi
c0021732:	5b                   	pop    ebx
c0021733:	5e                   	pop    esi
c0021734:	5f                   	pop    edi
c0021735:	5d                   	pop    ebp
c0021736:	c3                   	ret    
c0021737:	90                   	nop

c0021738 <PCI::open(int, int, void*)>:
c0021738:	83 ec 18             	sub    esp,0x18
c002173b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002173f:	8b 10                	mov    edx,DWORD PTR [eax]
c0021741:	50                   	push   eax
c0021742:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0021745:	31 c0                	xor    eax,eax
c0021747:	83 c4 1c             	add    esp,0x1c
c002174a:	c3                   	ret    
c002174b:	90                   	nop

c002174c <PCI::close(int, int, void*)>:
c002174c:	31 c0                	xor    eax,eax
c002174e:	c3                   	ret    
c002174f:	90                   	nop

c0021750 <PCI::PCI()>:
c0021750:	83 ec 0c             	sub    esp,0xc
c0021753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021757:	83 ec 08             	sub    esp,0x8
c002175a:	68 78 ae 02 c0       	push   0xc002ae78
c002175f:	50                   	push   eax
c0021760:	e8 bb 1b ff ff       	call   c0013320 <Bus::Bus(char const*)>
c0021765:	83 c4 10             	add    esp,0x10
c0021768:	ba e4 ae 02 c0       	mov    edx,0xc002aee4
c002176d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021771:	89 10                	mov    DWORD PTR [eax],edx
c0021773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021777:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002177d:	0f b6 d0             	movzx  edx,al
c0021780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021784:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002178b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002178f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021795:	0f b6 d0             	movzx  edx,al
c0021798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002179c:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00217a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217a5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00217ab:	8d 50 01             	lea    edx,[eax+0x1]
c00217ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217b2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00217b8:	0f b6 d0             	movzx  edx,al
c00217bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217bf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00217c3:	83 c9 c0             	or     ecx,0xffffffc0
c00217c6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00217ca:	90                   	nop
c00217cb:	83 c4 0c             	add    esp,0xc
c00217ce:	c3                   	ret    
c00217cf:	90                   	nop

c00217d0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00217d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00217d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00217d9:	89 ca                	mov    edx,ecx
c00217db:	c1 e0 10             	shl    eax,0x10
c00217de:	81 e2 fc 00 00 00    	and    edx,0xfc
c00217e4:	09 d0                	or     eax,edx
c00217e6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00217eb:	c1 e2 08             	shl    edx,0x8
c00217ee:	09 d0                	or     eax,edx
c00217f0:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00217f5:	c1 e2 0b             	shl    edx,0xb
c00217f8:	09 d0                	or     eax,edx
c00217fa:	ba f8 0c 00 00       	mov    edx,0xcf8
c00217ff:	0d 00 00 00 80       	or     eax,0x80000000
c0021804:	ef                   	out    dx,eax
c0021805:	ba fc 0c 00 00       	mov    edx,0xcfc
c002180a:	ed                   	in     eax,dx
c002180b:	83 e1 02             	and    ecx,0x2
c002180e:	0f b6 c9             	movzx  ecx,cl
c0021811:	c1 e1 03             	shl    ecx,0x3
c0021814:	d3 e8                	shr    eax,cl
c0021816:	c3                   	ret    
c0021817:	90                   	nop

c0021818 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0021818:	6a 00                	push   0x0
c002181a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002181f:	50                   	push   eax
c0021820:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021825:	50                   	push   eax
c0021826:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002182b:	50                   	push   eax
c002182c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021830:	e8 9b ff ff ff       	call   c00217d0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021835:	83 c4 14             	add    esp,0x14
c0021838:	c3                   	ret    
c0021839:	90                   	nop

c002183a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002183a:	6a 0e                	push   0xe
c002183c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021841:	50                   	push   eax
c0021842:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021847:	50                   	push   eax
c0021848:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002184d:	50                   	push   eax
c002184e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021852:	e8 79 ff ff ff       	call   c00217d0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021857:	83 c4 14             	add    esp,0x14
c002185a:	0f b6 c0             	movzx  eax,al
c002185d:	c3                   	ret    

c002185e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002185e:	55                   	push   ebp
c002185f:	57                   	push   edi
c0021860:	56                   	push   esi
c0021861:	53                   	push   ebx
c0021862:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0021867:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c002186c:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0021871:	6a 0a                	push   0xa
c0021873:	56                   	push   esi
c0021874:	55                   	push   ebp
c0021875:	57                   	push   edi
c0021876:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002187a:	e8 51 ff ff ff       	call   c00217d0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002187f:	6a 0a                	push   0xa
c0021881:	89 c3                	mov    ebx,eax
c0021883:	56                   	push   esi
c0021884:	0f b6 db             	movzx  ebx,bl
c0021887:	55                   	push   ebp
c0021888:	57                   	push   edi
c0021889:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002188d:	e8 3e ff ff ff       	call   c00217d0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021892:	83 c4 28             	add    esp,0x28
c0021895:	25 00 ff 00 00       	and    eax,0xff00
c002189a:	09 d8                	or     eax,ebx
c002189c:	5b                   	pop    ebx
c002189d:	5e                   	pop    esi
c002189e:	5f                   	pop    edi
c002189f:	5d                   	pop    ebp
c00218a0:	c3                   	ret    
c00218a1:	90                   	nop

c00218a2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00218a2:	6a 08                	push   0x8
c00218a4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218a9:	50                   	push   eax
c00218aa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218af:	50                   	push   eax
c00218b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218b5:	50                   	push   eax
c00218b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00218ba:	e8 11 ff ff ff       	call   c00217d0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00218bf:	83 c4 14             	add    esp,0x14
c00218c2:	0f b6 c4             	movzx  eax,ah
c00218c5:	c3                   	ret    

c00218c6 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00218c6:	6a 08                	push   0x8
c00218c8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218cd:	50                   	push   eax
c00218ce:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218d3:	50                   	push   eax
c00218d4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218d9:	50                   	push   eax
c00218da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00218de:	e8 ed fe ff ff       	call   c00217d0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00218e3:	83 c4 14             	add    esp,0x14
c00218e6:	c3                   	ret    
c00218e7:	90                   	nop

c00218e8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00218e8:	6a 3c                	push   0x3c
c00218ea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218ef:	50                   	push   eax
c00218f0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218f5:	50                   	push   eax
c00218f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218fb:	50                   	push   eax
c00218fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021900:	e8 cb fe ff ff       	call   c00217d0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021905:	83 c4 14             	add    esp,0x14
c0021908:	c3                   	ret    
c0021909:	90                   	nop

c002190a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002190a:	6a 18                	push   0x18
c002190c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021911:	50                   	push   eax
c0021912:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021917:	50                   	push   eax
c0021918:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002191d:	50                   	push   eax
c002191e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021922:	e8 a9 fe ff ff       	call   c00217d0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021927:	83 c4 14             	add    esp,0x14
c002192a:	0f b6 c4             	movzx  eax,ah
c002192d:	c3                   	ret    

c002192e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002192e:	55                   	push   ebp
c002192f:	57                   	push   edi
c0021930:	56                   	push   esi
c0021931:	53                   	push   ebx
c0021932:	50                   	push   eax
c0021933:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0021937:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c002193c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021941:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0021946:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002194d:	8d 43 12             	lea    eax,[ebx+0x12]
c0021950:	83 c3 10             	add    ebx,0x10
c0021953:	0f b6 c0             	movzx  eax,al
c0021956:	0f b6 db             	movzx  ebx,bl
c0021959:	50                   	push   eax
c002195a:	51                   	push   ecx
c002195b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002195f:	57                   	push   edi
c0021960:	55                   	push   ebp
c0021961:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021965:	e8 66 fe ff ff       	call   c00217d0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002196a:	53                   	push   ebx
c002196b:	89 c6                	mov    esi,eax
c002196d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021971:	c1 e6 10             	shl    esi,0x10
c0021974:	51                   	push   ecx
c0021975:	57                   	push   edi
c0021976:	55                   	push   ebp
c0021977:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002197b:	e8 50 fe ff ff       	call   c00217d0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021980:	83 c4 2c             	add    esp,0x2c
c0021983:	0f b7 c0             	movzx  eax,ax
c0021986:	5b                   	pop    ebx
c0021987:	09 f0                	or     eax,esi
c0021989:	5e                   	pop    esi
c002198a:	5f                   	pop    edi
c002198b:	5d                   	pop    ebp
c002198c:	c3                   	ret    
c002198d:	90                   	nop

c002198e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002198e:	53                   	push   ebx
c002198f:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021994:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021999:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002199d:	c1 e1 10             	shl    ecx,0x10
c00219a0:	25 fc 00 00 00       	and    eax,0xfc
c00219a5:	09 c1                	or     ecx,eax
c00219a7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219ac:	c1 e0 08             	shl    eax,0x8
c00219af:	09 c1                	or     ecx,eax
c00219b1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00219b6:	c1 e0 0b             	shl    eax,0xb
c00219b9:	09 c1                	or     ecx,eax
c00219bb:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00219c1:	89 c8                	mov    eax,ecx
c00219c3:	ef                   	out    dx,eax
c00219c4:	ba fc 0c 00 00       	mov    edx,0xcfc
c00219c9:	ed                   	in     eax,dx
c00219ca:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00219cf:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00219d4:	74 0a                	je     c00219e0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c00219d6:	0f b7 d8             	movzx  ebx,ax
c00219d9:	89 d0                	mov    eax,edx
c00219db:	c1 e0 10             	shl    eax,0x10
c00219de:	eb 05                	jmp    c00219e5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c00219e0:	66 31 c0             	xor    ax,ax
c00219e3:	89 d3                	mov    ebx,edx
c00219e5:	09 c3                	or     ebx,eax
c00219e7:	ba f8 0c 00 00       	mov    edx,0xcf8
c00219ec:	89 c8                	mov    eax,ecx
c00219ee:	ef                   	out    dx,eax
c00219ef:	ba fc 0c 00 00       	mov    edx,0xcfc
c00219f4:	89 d8                	mov    eax,ebx
c00219f6:	ef                   	out    dx,eax
c00219f7:	5b                   	pop    ebx
c00219f8:	c3                   	ret    
c00219f9:	90                   	nop

c00219fa <PCI::checkBus(unsigned char)>:
c00219fa:	56                   	push   esi
c00219fb:	53                   	push   ebx
c00219fc:	31 db                	xor    ebx,ebx
c00219fe:	51                   	push   ecx
c00219ff:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021a04:	52                   	push   edx
c0021a05:	53                   	push   ebx
c0021a06:	43                   	inc    ebx
c0021a07:	56                   	push   esi
c0021a08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a0c:	e8 2b 03 00 00       	call   c0021d3c <PCI::checkDevice(unsigned char, unsigned char)>
c0021a11:	83 c4 10             	add    esp,0x10
c0021a14:	83 fb 20             	cmp    ebx,0x20
c0021a17:	75 eb                	jne    c0021a04 <PCI::checkBus(unsigned char)+0xa>
c0021a19:	58                   	pop    eax
c0021a1a:	5b                   	pop    ebx
c0021a1b:	5e                   	pop    esi
c0021a1c:	c3                   	ret    
c0021a1d:	90                   	nop

c0021a1e <PCI::foundDevice(PCIDeviceInfo)>:
c0021a1e:	55                   	push   ebp
c0021a1f:	57                   	push   edi
c0021a20:	56                   	push   esi
c0021a21:	53                   	push   ebx
c0021a22:	83 ec 1c             	sub    esp,0x1c
c0021a25:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021a29:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0021a2f:	0f 84 52 01 00 00    	je     c0021b87 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021a35:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0021a39:	66 81 f9 06 04       	cmp    cx,0x406
c0021a3e:	75 2c                	jne    c0021a6c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0021a40:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0021a45:	50                   	push   eax
c0021a46:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0021a4b:	50                   	push   eax
c0021a4c:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0021a51:	50                   	push   eax
c0021a52:	56                   	push   esi
c0021a53:	e8 b2 fe ff ff       	call   c002190a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0021a58:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021a5c:	0f b6 c0             	movzx  eax,al
c0021a5f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0021a63:	83 c4 2c             	add    esp,0x2c
c0021a66:	5b                   	pop    ebx
c0021a67:	5e                   	pop    esi
c0021a68:	5f                   	pop    edi
c0021a69:	5d                   	pop    ebp
c0021a6a:	eb 8e                	jmp    c00219fa <PCI::checkBus(unsigned char)>
c0021a6c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021a70:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0021a76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021a7a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0021a7e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0021a82:	88 d3                	mov    bl,dl
c0021a84:	85 c0                	test   eax,eax
c0021a86:	74 33                	je     c0021abb <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0021a88:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0021a8b:	85 d2                	test   edx,edx
c0021a8d:	74 28                	je     c0021ab7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021a8f:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0021a95:	31 ef                	xor    edi,ebp
c0021a97:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0021a9d:	75 18                	jne    c0021ab7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021a9f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021aa3:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0021aa9:	75 0c                	jne    c0021ab7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021aab:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0021ab1:	0f 84 d0 00 00 00    	je     c0021b87 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ab9:	eb c9                	jmp    c0021a84 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0021abb:	66 81 f9 01 06       	cmp    cx,0x601
c0021ac0:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0021ac4:	75 19                	jne    c0021adf <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0021ac6:	83 ec 0c             	sub    esp,0xc
c0021ac9:	68 64 01 00 00       	push   0x164
c0021ace:	e8 01 da fe ff       	call   c000f4d4 <malloc>
c0021ad3:	89 c5                	mov    ebp,eax
c0021ad5:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ad8:	e8 95 0f 00 00       	call   c0022a72 <SATABus::SATABus()>
c0021add:	eb 1e                	jmp    c0021afd <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0021adf:	66 81 f9 01 01       	cmp    cx,0x101
c0021ae4:	75 60                	jne    c0021b46 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0021ae6:	83 ec 0c             	sub    esp,0xc
c0021ae9:	68 70 02 00 00       	push   0x270
c0021aee:	e8 e1 d9 fe ff       	call   c000f4d4 <malloc>
c0021af3:	89 c5                	mov    ebp,eax
c0021af5:	89 04 24             	mov    DWORD PTR [esp],eax
c0021af8:	e8 03 03 00 00       	call   c0021e00 <IDE::IDE()>
c0021afd:	58                   	pop    eax
c0021afe:	5a                   	pop    edx
c0021aff:	55                   	push   ebp
c0021b00:	56                   	push   esi
c0021b01:	e8 6e 1f ff ff       	call   c0013a74 <Device::addChild(Device*)>
c0021b06:	83 ec 1c             	sub    esp,0x1c
c0021b09:	b9 09 00 00 00       	mov    ecx,0x9
c0021b0e:	fc                   	cld    
c0021b0f:	89 e7                	mov    edi,esp
c0021b11:	89 de                	mov    esi,ebx
c0021b13:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021b15:	55                   	push   ebp
c0021b16:	e8 63 1e ff ff       	call   c001397e <Device::preOpenPCI(PCIDeviceInfo)>
c0021b1b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021b1e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0021b22:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0021b2a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0021b32:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0021b3a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b3d:	83 c4 4c             	add    esp,0x4c
c0021b40:	5b                   	pop    ebx
c0021b41:	5e                   	pop    esi
c0021b42:	5f                   	pop    edi
c0021b43:	5d                   	pop    ebp
c0021b44:	ff e0                	jmp    eax
c0021b46:	83 ec 0c             	sub    esp,0xc
c0021b49:	68 58 01 00 00       	push   0x158
c0021b4e:	e8 81 d9 fe ff       	call   c000f4d4 <malloc>
c0021b53:	89 c5                	mov    ebp,eax
c0021b55:	58                   	pop    eax
c0021b56:	5a                   	pop    edx
c0021b57:	68 80 ae 02 c0       	push   0xc002ae80
c0021b5c:	55                   	push   ebp
c0021b5d:	e8 08 22 ff ff       	call   c0013d6a <DriverlessDevice::DriverlessDevice(char const*)>
c0021b62:	59                   	pop    ecx
c0021b63:	5f                   	pop    edi
c0021b64:	55                   	push   ebp
c0021b65:	56                   	push   esi
c0021b66:	e8 09 1f ff ff       	call   c0013a74 <Device::addChild(Device*)>
c0021b6b:	b9 09 00 00 00       	mov    ecx,0x9
c0021b70:	fc                   	cld    
c0021b71:	89 df                	mov    edi,ebx
c0021b73:	89 de                	mov    esi,ebx
c0021b75:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021b77:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0021b7b:	83 c4 2c             	add    esp,0x2c
c0021b7e:	5b                   	pop    ebx
c0021b7f:	5e                   	pop    esi
c0021b80:	5f                   	pop    edi
c0021b81:	5d                   	pop    ebp
c0021b82:	e9 f7 1d ff ff       	jmp    c001397e <Device::preOpenPCI(PCIDeviceInfo)>
c0021b87:	83 c4 1c             	add    esp,0x1c
c0021b8a:	5b                   	pop    ebx
c0021b8b:	5e                   	pop    esi
c0021b8c:	5f                   	pop    edi
c0021b8d:	5d                   	pop    ebp
c0021b8e:	c3                   	ret    
c0021b8f:	90                   	nop

c0021b90 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0021b90:	55                   	push   ebp
c0021b91:	57                   	push   edi
c0021b92:	56                   	push   esi
c0021b93:	53                   	push   ebx
c0021b94:	83 ec 5c             	sub    esp,0x5c
c0021b97:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0021b9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021b9f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0021ba3:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0021ba8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021bac:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0021bb0:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0021bb5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021bb9:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0021bbe:	6a 0c                	push   0xc
c0021bc0:	55                   	push   ebp
c0021bc1:	53                   	push   ebx
c0021bc2:	57                   	push   edi
c0021bc3:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0021bca:	e8 01 fc ff ff       	call   c00217d0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021bcf:	55                   	push   ebp
c0021bd0:	53                   	push   ebx
c0021bd1:	57                   	push   edi
c0021bd2:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021bd9:	e8 80 fc ff ff       	call   c002185e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0021bde:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0021be3:	83 c4 24             	add    esp,0x24
c0021be6:	55                   	push   ebp
c0021be7:	53                   	push   ebx
c0021be8:	57                   	push   edi
c0021be9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021bed:	e8 f6 fc ff ff       	call   c00218e8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0021bf2:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0021bf6:	6a 3c                	push   0x3c
c0021bf8:	55                   	push   ebp
c0021bf9:	53                   	push   ebx
c0021bfa:	57                   	push   edi
c0021bfb:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021c02:	e8 c9 fb ff ff       	call   c00217d0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021c07:	0f b6 c4             	movzx  eax,ah
c0021c0a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021c0e:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0021c12:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0021c16:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0021c1b:	83 c4 24             	add    esp,0x24
c0021c1e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021c24:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0021c2b:	74 6c                	je     c0021c99 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021c2d:	31 f6                	xor    esi,esi
c0021c2f:	8b 15 48 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c848
c0021c35:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021c3b:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c0021c41:	7e 56                	jle    c0021c99 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021c43:	8d 14 f2             	lea    edx,[edx+esi*8]
c0021c46:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0021c4d:	39 cb                	cmp    ebx,ecx
c0021c4f:	75 45                	jne    c0021c96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021c51:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0021c58:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0021c5c:	75 38                	jne    c0021c96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021c5e:	83 ec 0c             	sub    esp,0xc
c0021c61:	68 9a ae 02 c0       	push   0xc002ae9a
c0021c66:	e8 1a 0a ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0021c6b:	8b 15 48 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c848
c0021c71:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021c77:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0021c7f:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0021c83:	52                   	push   edx
c0021c84:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021c88:	53                   	push   ebx
c0021c89:	68 bf ae 02 c0       	push   0xc002aebf
c0021c8e:	e8 f2 09 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0021c93:	83 c4 20             	add    esp,0x20
c0021c96:	46                   	inc    esi
c0021c97:	eb 96                	jmp    c0021c2f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0021c99:	31 d2                	xor    edx,edx
c0021c9b:	83 ec 0c             	sub    esp,0xc
c0021c9e:	55                   	push   ebp
c0021c9f:	53                   	push   ebx
c0021ca0:	57                   	push   edi
c0021ca1:	52                   	push   edx
c0021ca2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021ca6:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021cad:	e8 7c fc ff ff       	call   c002192e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021cb2:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0021cb6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021cba:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0021cbe:	42                   	inc    edx
c0021cbf:	83 c4 20             	add    esp,0x20
c0021cc2:	83 fa 06             	cmp    edx,0x6
c0021cc5:	75 d4                	jne    c0021c9b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0021cc7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021ccb:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0021ccf:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0021cd3:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0021cd7:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0021cdb:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0021cdf:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0021ce4:	86 e0                	xchg   al,ah
c0021ce6:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0021ceb:	55                   	push   ebp
c0021cec:	53                   	push   ebx
c0021ced:	57                   	push   edi
c0021cee:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021cf2:	e8 ab fb ff ff       	call   c00218a2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0021cf7:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0021cfb:	55                   	push   ebp
c0021cfc:	53                   	push   ebx
c0021cfd:	57                   	push   edi
c0021cfe:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021d05:	e8 0e fb ff ff       	call   c0021818 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021d0a:	83 ec 0c             	sub    esp,0xc
c0021d0d:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0021d12:	b9 09 00 00 00       	mov    ecx,0x9
c0021d17:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0021d1b:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0021d1f:	fc                   	cld    
c0021d20:	89 e7                	mov    edi,esp
c0021d22:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021d24:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021d2b:	e8 ee fc ff ff       	call   c0021a1e <PCI::foundDevice(PCIDeviceInfo)>
c0021d30:	81 c4 8c 00 00 00    	add    esp,0x8c
c0021d36:	5b                   	pop    ebx
c0021d37:	5e                   	pop    esi
c0021d38:	5f                   	pop    edi
c0021d39:	5d                   	pop    ebp
c0021d3a:	c3                   	ret    
c0021d3b:	90                   	nop

c0021d3c <PCI::checkDevice(unsigned char, unsigned char)>:
c0021d3c:	55                   	push   ebp
c0021d3d:	57                   	push   edi
c0021d3e:	56                   	push   esi
c0021d3f:	53                   	push   ebx
c0021d40:	83 ec 0c             	sub    esp,0xc
c0021d43:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0021d47:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0021d4c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021d51:	6a 00                	push   0x0
c0021d53:	56                   	push   esi
c0021d54:	57                   	push   edi
c0021d55:	55                   	push   ebp
c0021d56:	e8 bd fa ff ff       	call   c0021818 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021d5b:	6a 00                	push   0x0
c0021d5d:	56                   	push   esi
c0021d5e:	57                   	push   edi
c0021d5f:	55                   	push   ebp
c0021d60:	e8 2b fe ff ff       	call   c0021b90 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021d65:	83 c4 20             	add    esp,0x20
c0021d68:	6a 00                	push   0x0
c0021d6a:	56                   	push   esi
c0021d6b:	57                   	push   edi
c0021d6c:	55                   	push   ebp
c0021d6d:	e8 c8 fa ff ff       	call   c002183a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021d72:	83 c4 10             	add    esp,0x10
c0021d75:	84 c0                	test   al,al
c0021d77:	79 27                	jns    c0021da0 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0021d79:	bb 01 00 00 00       	mov    ebx,0x1
c0021d7e:	53                   	push   ebx
c0021d7f:	56                   	push   esi
c0021d80:	57                   	push   edi
c0021d81:	55                   	push   ebp
c0021d82:	e8 91 fa ff ff       	call   c0021818 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021d87:	83 c4 10             	add    esp,0x10
c0021d8a:	66 40                	inc    ax
c0021d8c:	74 0c                	je     c0021d9a <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0021d8e:	53                   	push   ebx
c0021d8f:	56                   	push   esi
c0021d90:	57                   	push   edi
c0021d91:	55                   	push   ebp
c0021d92:	e8 f9 fd ff ff       	call   c0021b90 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021d97:	83 c4 10             	add    esp,0x10
c0021d9a:	43                   	inc    ebx
c0021d9b:	83 fb 08             	cmp    ebx,0x8
c0021d9e:	75 de                	jne    c0021d7e <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0021da0:	83 c4 0c             	add    esp,0xc
c0021da3:	5b                   	pop    ebx
c0021da4:	5e                   	pop    esi
c0021da5:	5f                   	pop    edi
c0021da6:	5d                   	pop    ebp
c0021da7:	c3                   	ret    

c0021da8 <PCI::detect()>:
c0021da8:	56                   	push   esi
c0021da9:	53                   	push   ebx
c0021daa:	53                   	push   ebx
c0021dab:	31 db                	xor    ebx,ebx
c0021dad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021db1:	6a 00                	push   0x0
c0021db3:	6a 00                	push   0x0
c0021db5:	6a 00                	push   0x0
c0021db7:	56                   	push   esi
c0021db8:	e8 7d fa ff ff       	call   c002183a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021dbd:	83 c4 10             	add    esp,0x10
c0021dc0:	a8 80                	test   al,0x80
c0021dc2:	75 21                	jne    c0021de5 <PCI::detect()+0x3d>
c0021dc4:	51                   	push   ecx
c0021dc5:	51                   	push   ecx
c0021dc6:	6a 00                	push   0x0
c0021dc8:	56                   	push   esi
c0021dc9:	e8 2c fc ff ff       	call   c00219fa <PCI::checkBus(unsigned char)>
c0021dce:	83 c4 10             	add    esp,0x10
c0021dd1:	eb 24                	jmp    c0021df7 <PCI::detect()+0x4f>
c0021dd3:	52                   	push   edx
c0021dd4:	52                   	push   edx
c0021dd5:	53                   	push   ebx
c0021dd6:	43                   	inc    ebx
c0021dd7:	56                   	push   esi
c0021dd8:	e8 1d fc ff ff       	call   c00219fa <PCI::checkBus(unsigned char)>
c0021ddd:	83 c4 10             	add    esp,0x10
c0021de0:	83 fb 08             	cmp    ebx,0x8
c0021de3:	74 12                	je     c0021df7 <PCI::detect()+0x4f>
c0021de5:	53                   	push   ebx
c0021de6:	6a 00                	push   0x0
c0021de8:	6a 00                	push   0x0
c0021dea:	56                   	push   esi
c0021deb:	e8 28 fa ff ff       	call   c0021818 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021df0:	83 c4 10             	add    esp,0x10
c0021df3:	66 40                	inc    ax
c0021df5:	74 dc                	je     c0021dd3 <PCI::detect()+0x2b>
c0021df7:	58                   	pop    eax
c0021df8:	5b                   	pop    ebx
c0021df9:	5e                   	pop    esi
c0021dfa:	c3                   	ret    
c0021dfb:	90                   	nop

c0021dfc <IDE::close(int, int, void*)>:
c0021dfc:	83 c8 ff             	or     eax,0xffffffff
c0021dff:	c3                   	ret    

c0021e00 <IDE::IDE()>:
c0021e00:	83 ec 0c             	sub    esp,0xc
c0021e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e07:	83 ec 08             	sub    esp,0x8
c0021e0a:	68 08 af 02 c0       	push   0xc002af08
c0021e0f:	50                   	push   eax
c0021e10:	e8 eb 1f ff ff       	call   c0013e00 <HardDiskController::HardDiskController(char const*)>
c0021e15:	83 c4 10             	add    esp,0x10
c0021e18:	ba 48 b1 02 c0       	mov    edx,0xc002b148
c0021e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e21:	89 10                	mov    DWORD PTR [eax],edx
c0021e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e27:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0021e2e:	90                   	nop
c0021e2f:	83 c4 0c             	add    esp,0xc
c0021e32:	c3                   	ret    
c0021e33:	90                   	nop

c0021e34 <IDE::prepareInterrupt(unsigned char)>:
c0021e34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021e39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021e3d:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0021e45:	c3                   	ret    

c0021e46 <selectDrive(unsigned char, unsigned char)>:
c0021e46:	c3                   	ret    
c0021e47:	90                   	nop

c0021e48 <IDE::getBase(unsigned char)>:
c0021e48:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0021e4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e51:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0021e59:	c3                   	ret    

c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0021e5a:	55                   	push   ebp
c0021e5b:	57                   	push   edi
c0021e5c:	56                   	push   esi
c0021e5d:	53                   	push   ebx
c0021e5e:	83 ec 1c             	sub    esp,0x1c
c0021e61:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021e65:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021e69:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0021e6c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0021e70:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021e74:	80 f9 03             	cmp    cl,0x3
c0021e77:	77 51                	ja     c0021eca <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0021e79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021e7d:	0f b6 f2             	movzx  esi,dl
c0021e80:	0f b6 db             	movzx  ebx,bl
c0021e83:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0021e86:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0021e8a:	83 ca 80             	or     edx,0xffffff80
c0021e8d:	0f b6 d2             	movzx  edx,dl
c0021e90:	52                   	push   edx
c0021e91:	6a 0c                	push   0xc
c0021e93:	56                   	push   esi
c0021e94:	57                   	push   edi
c0021e95:	e8 c0 ff ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021e9a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0021e9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021ea3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0021ea7:	ee                   	out    dx,al
c0021ea8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0021ead:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0021eb1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0021eb5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0021eb9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0021ec1:	83 c4 2c             	add    esp,0x2c
c0021ec4:	5b                   	pop    ebx
c0021ec5:	5e                   	pop    esi
c0021ec6:	5f                   	pop    edi
c0021ec7:	5d                   	pop    ebp
c0021ec8:	eb 90                	jmp    c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021eca:	80 fb 07             	cmp    bl,0x7
c0021ecd:	77 12                	ja     c0021ee1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0021ecf:	0f b6 d2             	movzx  edx,dl
c0021ed2:	0f b6 db             	movzx  ebx,bl
c0021ed5:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0021edd:	89 da                	mov    edx,ebx
c0021edf:	eb 2f                	jmp    c0021f10 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0021ee1:	80 fb 0d             	cmp    bl,0xd
c0021ee4:	77 13                	ja     c0021ef9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0021ee6:	0f b6 d2             	movzx  edx,dl
c0021ee9:	0f b6 db             	movzx  ebx,bl
c0021eec:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0021ef3:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0021ef7:	eb 17                	jmp    c0021f10 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0021ef9:	80 fb 15             	cmp    bl,0x15
c0021efc:	77 13                	ja     c0021f11 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0021efe:	0f b6 d2             	movzx  edx,dl
c0021f01:	0f b6 db             	movzx  ebx,bl
c0021f04:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0021f0c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0021f10:	ee                   	out    dx,al
c0021f11:	83 c4 1c             	add    esp,0x1c
c0021f14:	5b                   	pop    ebx
c0021f15:	5e                   	pop    esi
c0021f16:	5f                   	pop    edi
c0021f17:	5d                   	pop    ebp
c0021f18:	c3                   	ret    
c0021f19:	90                   	nop

c0021f1a <IDE::read(unsigned char, unsigned char)>:
c0021f1a:	55                   	push   ebp
c0021f1b:	57                   	push   edi
c0021f1c:	56                   	push   esi
c0021f1d:	53                   	push   ebx
c0021f1e:	83 ec 1c             	sub    esp,0x1c
c0021f21:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f25:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021f29:	8d 43 f8             	lea    eax,[ebx-0x8]
c0021f2c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0021f30:	3c 03                	cmp    al,0x3
c0021f32:	77 43                	ja     c0021f77 <IDE::read(unsigned char, unsigned char)+0x5d>
c0021f34:	0f b6 f2             	movzx  esi,dl
c0021f37:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0021f3a:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0021f3e:	83 c8 80             	or     eax,0xffffff80
c0021f41:	0f b6 c0             	movzx  eax,al
c0021f44:	50                   	push   eax
c0021f45:	6a 0c                	push   0xc
c0021f47:	56                   	push   esi
c0021f48:	57                   	push   edi
c0021f49:	e8 0c ff ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f4e:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0021f53:	0f b6 c3             	movzx  eax,bl
c0021f56:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0021f5a:	ec                   	in     al,dx
c0021f5b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0021f5f:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0021f64:	52                   	push   edx
c0021f65:	6a 0c                	push   0xc
c0021f67:	56                   	push   esi
c0021f68:	57                   	push   edi
c0021f69:	e8 ec fe ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f6e:	83 c4 20             	add    esp,0x20
c0021f71:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021f75:	eb 49                	jmp    c0021fc0 <IDE::read(unsigned char, unsigned char)+0xa6>
c0021f77:	80 fb 07             	cmp    bl,0x7
c0021f7a:	77 12                	ja     c0021f8e <IDE::read(unsigned char, unsigned char)+0x74>
c0021f7c:	0f b6 d2             	movzx  edx,dl
c0021f7f:	0f b6 c3             	movzx  eax,bl
c0021f82:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0021f8a:	89 c2                	mov    edx,eax
c0021f8c:	eb 31                	jmp    c0021fbf <IDE::read(unsigned char, unsigned char)+0xa5>
c0021f8e:	80 fb 0d             	cmp    bl,0xd
c0021f91:	77 13                	ja     c0021fa6 <IDE::read(unsigned char, unsigned char)+0x8c>
c0021f93:	0f b6 d2             	movzx  edx,dl
c0021f96:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0021f9d:	0f b6 d3             	movzx  edx,bl
c0021fa0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0021fa4:	eb 19                	jmp    c0021fbf <IDE::read(unsigned char, unsigned char)+0xa5>
c0021fa6:	31 c0                	xor    eax,eax
c0021fa8:	80 fb 15             	cmp    bl,0x15
c0021fab:	77 13                	ja     c0021fc0 <IDE::read(unsigned char, unsigned char)+0xa6>
c0021fad:	0f b6 d2             	movzx  edx,dl
c0021fb0:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0021fb8:	0f b6 d3             	movzx  edx,bl
c0021fbb:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0021fbf:	ec                   	in     al,dx
c0021fc0:	83 c4 1c             	add    esp,0x1c
c0021fc3:	5b                   	pop    ebx
c0021fc4:	5e                   	pop    esi
c0021fc5:	5f                   	pop    edi
c0021fc6:	5d                   	pop    ebp
c0021fc7:	c3                   	ret    

c0021fc8 <IDE::waitInterrupt(unsigned char)>:
c0021fc8:	55                   	push   ebp
c0021fc9:	57                   	push   edi
c0021fca:	56                   	push   esi
c0021fcb:	53                   	push   ebx
c0021fcc:	31 db                	xor    ebx,ebx
c0021fce:	83 ec 0c             	sub    esp,0xc
c0021fd1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021fd5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0021fda:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0021fe2:	89 e8                	mov    eax,ebp
c0021fe4:	84 c0                	test   al,al
c0021fe6:	75 34                	jne    c002201c <IDE::waitInterrupt(unsigned char)+0x54>
c0021fe8:	52                   	push   edx
c0021fe9:	6a 0c                	push   0xc
c0021feb:	56                   	push   esi
c0021fec:	57                   	push   edi
c0021fed:	e8 28 ff ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c0021ff2:	83 c4 10             	add    esp,0x10
c0021ff5:	a8 01                	test   al,0x1
c0021ff7:	75 2b                	jne    c0022024 <IDE::waitInterrupt(unsigned char)+0x5c>
c0021ff9:	f6 c3 04             	test   bl,0x4
c0021ffc:	75 16                	jne    c0022014 <IDE::waitInterrupt(unsigned char)+0x4c>
c0021ffe:	83 fb 32             	cmp    ebx,0x32
c0022001:	7e 11                	jle    c0022014 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022003:	50                   	push   eax
c0022004:	50                   	push   eax
c0022005:	6a 00                	push   0x0
c0022007:	68 80 96 98 00       	push   0x989680
c002200c:	e8 6d b1 ff ff       	call   c001d17e <nanoSleep(unsigned long long)>
c0022011:	83 c4 10             	add    esp,0x10
c0022014:	83 fb 3c             	cmp    ebx,0x3c
c0022017:	74 0b                	je     c0022024 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022019:	43                   	inc    ebx
c002201a:	eb be                	jmp    c0021fda <IDE::waitInterrupt(unsigned char)+0x12>
c002201c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022024:	83 c4 0c             	add    esp,0xc
c0022027:	89 e8                	mov    eax,ebp
c0022029:	5b                   	pop    ebx
c002202a:	5e                   	pop    esi
c002202b:	5f                   	pop    edi
c002202c:	5d                   	pop    ebp
c002202d:	c3                   	ret    

c002202e <ideChannel0IRQHandler(regs*, void*)>:
c002202e:	83 ec 10             	sub    esp,0x10
c0022031:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022035:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002203c:	6a 07                	push   0x7
c002203e:	6a 00                	push   0x0
c0022040:	50                   	push   eax
c0022041:	e8 d4 fe ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c0022046:	83 c4 1c             	add    esp,0x1c
c0022049:	c3                   	ret    

c002204a <ideChannel1IRQHandler(regs*, void*)>:
c002204a:	83 ec 10             	sub    esp,0x10
c002204d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022051:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022058:	6a 07                	push   0x7
c002205a:	6a 01                	push   0x1
c002205c:	50                   	push   eax
c002205d:	e8 b8 fe ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c0022062:	83 c4 1c             	add    esp,0x1c
c0022065:	c3                   	ret    

c0022066 <IDE::enableIRQs(unsigned char, bool)>:
c0022066:	57                   	push   edi
c0022067:	56                   	push   esi
c0022068:	be 04 00 00 00       	mov    esi,0x4
c002206d:	53                   	push   ebx
c002206e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022073:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022077:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002207c:	0f 94 c0             	sete   al
c002207f:	d1 e0                	shl    eax,1
c0022081:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022088:	0f b6 c0             	movzx  eax,al
c002208b:	50                   	push   eax
c002208c:	6a 0c                	push   0xc
c002208e:	57                   	push   edi
c002208f:	53                   	push   ebx
c0022090:	e8 c5 fd ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022095:	83 c4 10             	add    esp,0x10
c0022098:	50                   	push   eax
c0022099:	6a 0c                	push   0xc
c002209b:	57                   	push   edi
c002209c:	53                   	push   ebx
c002209d:	e8 78 fe ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c00220a2:	83 c4 10             	add    esp,0x10
c00220a5:	4e                   	dec    esi
c00220a6:	75 f0                	jne    c0022098 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00220a8:	5b                   	pop    ebx
c00220a9:	5e                   	pop    esi
c00220aa:	5f                   	pop    edi
c00220ab:	c3                   	ret    

c00220ac <IDE::open(int, int, void*)>:
c00220ac:	55                   	push   ebp
c00220ad:	57                   	push   edi
c00220ae:	56                   	push   esi
c00220af:	53                   	push   ebx
c00220b0:	83 ec 1c             	sub    esp,0x1c
c00220b3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00220b7:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00220c0:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00220c9:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00220d0:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00220d7:	0f 85 b0 02 00 00    	jne    c002238d <IDE::open(int, int, void*)+0x2e1>
c00220dd:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00220e3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00220e7:	83 e0 7f             	and    eax,0x7f
c00220ea:	3c 05                	cmp    al,0x5
c00220ec:	74 04                	je     c00220f2 <IDE::open(int, int, void*)+0x46>
c00220ee:	3c 0f                	cmp    al,0xf
c00220f0:	75 32                	jne    c0022124 <IDE::open(int, int, void*)+0x78>
c00220f2:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00220f8:	83 e0 fc             	and    eax,0xfffffffc
c00220fb:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022102:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022108:	83 e0 fc             	and    eax,0xfffffffc
c002210b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0022112:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022118:	83 e0 fc             	and    eax,0xfffffffc
c002211b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022122:	eb 14                	jmp    c0022138 <IDE::open(int, int, void*)+0x8c>
c0022124:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002212e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022138:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002213f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0022146:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002214a:	89 c6                	mov    esi,eax
c002214c:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022151:	c1 e6 10             	shl    esi,0x10
c0022154:	89 e8                	mov    eax,ebp
c0022156:	89 fa                	mov    edx,edi
c0022158:	c1 e0 0b             	shl    eax,0xb
c002215b:	09 f0                	or     eax,esi
c002215d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0022164:	c1 e6 08             	shl    esi,0x8
c0022167:	09 c6                	or     esi,eax
c0022169:	89 f0                	mov    eax,esi
c002216b:	0d 08 00 00 80       	or     eax,0x80000008
c0022170:	ef                   	out    dx,eax
c0022171:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0022176:	89 ca                	mov    edx,ecx
c0022178:	ed                   	in     eax,dx
c0022179:	c1 e8 10             	shr    eax,0x10
c002217c:	3d ff ff 00 00       	cmp    eax,0xffff
c0022181:	0f 84 f5 00 00 00    	je     c002227c <IDE::open(int, int, void*)+0x1d0>
c0022187:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002218d:	89 fa                	mov    edx,edi
c002218f:	89 f0                	mov    eax,esi
c0022191:	ef                   	out    dx,eax
c0022192:	b0 fe                	mov    al,0xfe
c0022194:	89 ca                	mov    edx,ecx
c0022196:	ee                   	out    dx,al
c0022197:	89 f0                	mov    eax,esi
c0022199:	89 fa                	mov    edx,edi
c002219b:	ef                   	out    dx,eax
c002219c:	89 ca                	mov    edx,ecx
c002219e:	ed                   	in     eax,dx
c002219f:	3c fe                	cmp    al,0xfe
c00221a1:	0f 85 a9 00 00 00    	jne    c0022250 <IDE::open(int, int, void*)+0x1a4>
c00221a7:	8b 15 48 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c848
c00221ad:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00221b4:	74 33                	je     c00221e9 <IDE::open(int, int, void*)+0x13d>
c00221b6:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00221bc:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00221c0:	40                   	inc    eax
c00221c1:	83 ec 0c             	sub    esp,0xc
c00221c4:	0f b6 c0             	movzx  eax,al
c00221c7:	50                   	push   eax
c00221c8:	55                   	push   ebp
c00221c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00221cd:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00221d3:	51                   	push   ecx
c00221d4:	e8 bb 54 ff ff       	call   c0017694 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00221d9:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00221de:	83 c4 1c             	add    esp,0x1c
c00221e1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00221e7:	eb 0a                	jmp    c00221f3 <IDE::open(int, int, void*)+0x147>
c00221e9:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00221f3:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00221fa:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0022201:	c1 e1 10             	shl    ecx,0x10
c0022204:	c1 e0 08             	shl    eax,0x8
c0022207:	bf f8 0c 00 00       	mov    edi,0xcf8
c002220c:	09 c1                	or     ecx,eax
c002220e:	89 fa                	mov    edx,edi
c0022210:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0022217:	c1 e0 0b             	shl    eax,0xb
c002221a:	09 c1                	or     ecx,eax
c002221c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0022222:	89 c8                	mov    eax,ecx
c0022224:	ef                   	out    dx,eax
c0022225:	be fc 0c 00 00       	mov    esi,0xcfc
c002222a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0022230:	89 f2                	mov    edx,esi
c0022232:	ee                   	out    dx,al
c0022233:	89 c8                	mov    eax,ecx
c0022235:	89 fa                	mov    edx,edi
c0022237:	ef                   	out    dx,eax
c0022238:	89 f2                	mov    edx,esi
c002223a:	ed                   	in     eax,dx
c002223b:	0f b6 c0             	movzx  eax,al
c002223e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0022244:	74 46                	je     c002228c <IDE::open(int, int, void*)+0x1e0>
c0022246:	83 ec 0c             	sub    esp,0xc
c0022249:	68 20 af 02 c0       	push   0xc002af20
c002224e:	eb 34                	jmp    c0022284 <IDE::open(int, int, void*)+0x1d8>
c0022250:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0022259:	75 17                	jne    c0022272 <IDE::open(int, int, void*)+0x1c6>
c002225b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0022260:	74 07                	je     c0022269 <IDE::open(int, int, void*)+0x1bd>
c0022262:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0022267:	75 09                	jne    c0022272 <IDE::open(int, int, void*)+0x1c6>
c0022269:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022270:	eb 1a                	jmp    c002228c <IDE::open(int, int, void*)+0x1e0>
c0022272:	83 ec 0c             	sub    esp,0xc
c0022275:	68 28 af 02 c0       	push   0xc002af28
c002227a:	eb 08                	jmp    c0022284 <IDE::open(int, int, void*)+0x1d8>
c002227c:	83 ec 0c             	sub    esp,0xc
c002227f:	68 59 af 02 c0       	push   0xc002af59
c0022284:	e8 16 75 ff ff       	call   c001979f <Krnl::panic(char const*)>
c0022289:	83 c4 10             	add    esp,0x10
c002228c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0022293:	79 1a                	jns    c00222af <IDE::open(int, int, void*)+0x203>
c0022295:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002229b:	83 e0 fc             	and    eax,0xfffffffc
c002229e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00222a5:	83 c0 08             	add    eax,0x8
c00222a8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00222af:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00222b5:	89 c2                	mov    edx,eax
c00222b7:	83 e2 0f             	and    edx,0xf
c00222ba:	66 83 fa 08          	cmp    dx,0x8
c00222be:	75 0a                	jne    c00222ca <IDE::open(int, int, void*)+0x21e>
c00222c0:	83 e8 02             	sub    eax,0x2
c00222c3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00222ca:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00222d0:	89 c2                	mov    edx,eax
c00222d2:	83 e2 0f             	and    edx,0xf
c00222d5:	66 83 fa 08          	cmp    dx,0x8
c00222d9:	75 0a                	jne    c00222e5 <IDE::open(int, int, void*)+0x239>
c00222db:	83 e8 02             	sub    eax,0x2
c00222de:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00222e5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00222ec:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00222f3:	89 d0                	mov    eax,edx
c00222f5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00222f8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00222fc:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0022300:	8d 4a 01             	lea    ecx,[edx+0x1]
c0022303:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022308:	0f b6 c9             	movzx  ecx,cl
c002230b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0022312:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022315:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022319:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002231d:	8d 50 02             	lea    edx,[eax+0x2]
c0022320:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022325:	0f b6 d2             	movzx  edx,dl
c0022328:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002232e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022331:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022335:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0022339:	8d 48 03             	lea    ecx,[eax+0x3]
c002233c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022341:	0f b6 c9             	movzx  ecx,cl
c0022344:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002234a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002234d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022351:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0022355:	8d 50 04             	lea    edx,[eax+0x4]
c0022358:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002235e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022363:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002236a:	66 85 f6             	test   si,si
c002236d:	74 3e                	je     c00223ad <IDE::open(int, int, void*)+0x301>
c002236f:	0f b6 d2             	movzx  edx,dl
c0022372:	83 c0 05             	add    eax,0x5
c0022375:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022378:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002237c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0022380:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0022386:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002238b:	eb 20                	jmp    c00223ad <IDE::open(int, int, void*)+0x301>
c002238d:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022397:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00223a1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00223a8:	e9 02 ff ff ff       	jmp    c00222af <IDE::open(int, int, void*)+0x203>
c00223ad:	52                   	push   edx
c00223ae:	52                   	push   edx
c00223af:	6a 00                	push   0x0
c00223b1:	53                   	push   ebx
c00223b2:	e8 7d fa ff ff       	call   c0021e34 <IDE::prepareInterrupt(unsigned char)>
c00223b7:	59                   	pop    ecx
c00223b8:	5e                   	pop    esi
c00223b9:	6a 01                	push   0x1
c00223bb:	53                   	push   ebx
c00223bc:	e8 73 fa ff ff       	call   c0021e34 <IDE::prepareInterrupt(unsigned char)>
c00223c1:	83 c4 0c             	add    esp,0xc
c00223c4:	6a 00                	push   0x0
c00223c6:	6a 00                	push   0x0
c00223c8:	53                   	push   ebx
c00223c9:	e8 98 fc ff ff       	call   c0022066 <IDE::enableIRQs(unsigned char, bool)>
c00223ce:	83 c4 0c             	add    esp,0xc
c00223d1:	6a 00                	push   0x0
c00223d3:	6a 01                	push   0x1
c00223d5:	53                   	push   ebx
c00223d6:	e8 8b fc ff ff       	call   c0022066 <IDE::enableIRQs(unsigned char, bool)>
c00223db:	83 c4 10             	add    esp,0x10
c00223de:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00223e5:	74 40                	je     c0022427 <IDE::open(int, int, void*)+0x37b>
c00223e7:	83 ec 0c             	sub    esp,0xc
c00223ea:	68 83 af 02 c0       	push   0xc002af83
c00223ef:	e8 91 02 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00223f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00223f7:	6a 01                	push   0x1
c00223f9:	68 2e 20 02 c0       	push   0xc002202e
c00223fe:	6a 0e                	push   0xe
c0022400:	53                   	push   ebx
c0022401:	e8 f2 15 ff ff       	call   c00139f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022406:	83 c4 14             	add    esp,0x14
c0022409:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002240f:	53                   	push   ebx
c0022410:	6a 01                	push   0x1
c0022412:	68 4a 20 02 c0       	push   0xc002204a
c0022417:	6a 0f                	push   0xf
c0022419:	53                   	push   ebx
c002241a:	e8 d9 15 ff ff       	call   c00139f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002241f:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022425:	eb 4a                	jmp    c0022471 <IDE::open(int, int, void*)+0x3c5>
c0022427:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0022431:	50                   	push   eax
c0022432:	6a 0f                	push   0xf
c0022434:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002243a:	68 9f af 02 c0       	push   0xc002af9f
c002243f:	e8 41 02 ff ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0022444:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022447:	6a 00                	push   0x0
c0022449:	68 2e 20 02 c0       	push   0xc002202e
c002244e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022454:	53                   	push   ebx
c0022455:	e8 9e 15 ff ff       	call   c00139f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002245a:	83 c4 14             	add    esp,0x14
c002245d:	53                   	push   ebx
c002245e:	6a 00                	push   0x0
c0022460:	68 4a 20 02 c0       	push   0xc002204a
c0022465:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002246b:	53                   	push   ebx
c002246c:	e8 87 15 ff ff       	call   c00139f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022471:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022473:	83 c4 20             	add    esp,0x20
c0022476:	83 ec 0c             	sub    esp,0xc
c0022479:	53                   	push   ebx
c002247a:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002247d:	83 c4 0c             	add    esp,0xc
c0022480:	6a 07                	push   0x7
c0022482:	6a 00                	push   0x0
c0022484:	53                   	push   ebx
c0022485:	e8 90 fa ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c002248a:	83 c4 0c             	add    esp,0xc
c002248d:	6a 07                	push   0x7
c002248f:	6a 01                	push   0x1
c0022491:	53                   	push   ebx
c0022492:	e8 83 fa ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c0022497:	83 c4 0c             	add    esp,0xc
c002249a:	6a 01                	push   0x1
c002249c:	6a 00                	push   0x0
c002249e:	53                   	push   ebx
c002249f:	e8 c2 fb ff ff       	call   c0022066 <IDE::enableIRQs(unsigned char, bool)>
c00224a4:	83 c4 0c             	add    esp,0xc
c00224a7:	6a 01                	push   0x1
c00224a9:	6a 01                	push   0x1
c00224ab:	53                   	push   ebx
c00224ac:	e8 b5 fb ff ff       	call   c0022066 <IDE::enableIRQs(unsigned char, bool)>
c00224b1:	83 c4 2c             	add    esp,0x2c
c00224b4:	31 c0                	xor    eax,eax
c00224b6:	5b                   	pop    ebx
c00224b7:	5e                   	pop    esi
c00224b8:	5f                   	pop    edi
c00224b9:	5d                   	pop    ebp
c00224ba:	c3                   	ret    
c00224bb:	90                   	nop

c00224bc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00224bc:	55                   	push   ebp
c00224bd:	57                   	push   edi
c00224be:	56                   	push   esi
c00224bf:	53                   	push   ebx
c00224c0:	83 ec 1c             	sub    esp,0x1c
c00224c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00224c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00224cb:	8d 50 f8             	lea    edx,[eax-0x8]
c00224ce:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00224d2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00224d6:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00224da:	80 fa 03             	cmp    dl,0x3
c00224dd:	77 5d                	ja     c002253c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00224df:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00224e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00224e7:	0f b6 db             	movzx  ebx,bl
c00224ea:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00224ed:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00224f1:	83 ca 80             	or     edx,0xffffff80
c00224f4:	0f b6 d2             	movzx  edx,dl
c00224f7:	52                   	push   edx
c00224f8:	6a 0c                	push   0xc
c00224fa:	53                   	push   ebx
c00224fb:	56                   	push   esi
c00224fc:	e8 59 f9 ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022501:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0022506:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002250a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002250e:	0f b6 c0             	movzx  eax,al
c0022511:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022515:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022517:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002251c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0022520:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022524:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022528:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022530:	83 c4 2c             	add    esp,0x2c
c0022533:	5b                   	pop    ebx
c0022534:	5e                   	pop    esi
c0022535:	5f                   	pop    edi
c0022536:	5d                   	pop    ebp
c0022537:	e9 1e f9 ff ff       	jmp    c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002253c:	3c 07                	cmp    al,0x7
c002253e:	77 10                	ja     c0022550 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0022540:	0f b6 db             	movzx  ebx,bl
c0022543:	0f b6 d0             	movzx  edx,al
c0022546:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002254e:	eb 2d                	jmp    c002257d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022550:	3c 0d                	cmp    al,0xd
c0022552:	77 13                	ja     c0022567 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0022554:	0f b6 db             	movzx  ebx,bl
c0022557:	0f b6 c0             	movzx  eax,al
c002255a:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0022561:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0022565:	eb 16                	jmp    c002257d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022567:	3c 15                	cmp    al,0x15
c0022569:	77 14                	ja     c002257f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002256b:	0f b6 db             	movzx  ebx,bl
c002256e:	0f b6 c0             	movzx  eax,al
c0022571:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0022579:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002257d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002257f:	83 c4 1c             	add    esp,0x1c
c0022582:	5b                   	pop    ebx
c0022583:	5e                   	pop    esi
c0022584:	5f                   	pop    edi
c0022585:	5d                   	pop    ebp
c0022586:	c3                   	ret    
c0022587:	90                   	nop

c0022588 <IDE::detect()>:
c0022588:	55                   	push   ebp
c0022589:	57                   	push   edi
c002258a:	56                   	push   esi
c002258b:	53                   	push   ebx
c002258c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0022592:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0022599:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00225a0:	0f 85 be 02 00 00    	jne    c0022864 <IDE::detect()+0x2dc>
c00225a6:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00225ad:	31 f6                	xor    esi,esi
c00225af:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00225b7:	31 ed                	xor    ebp,ebp
c00225b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225bd:	c1 e0 06             	shl    eax,0x6
c00225c0:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00225c8:	89 e8                	mov    eax,ebp
c00225ca:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00225ce:	c1 e0 04             	shl    eax,0x4
c00225d1:	83 c8 a0             	or     eax,0xffffffa0
c00225d4:	0f b6 c0             	movzx  eax,al
c00225d7:	50                   	push   eax
c00225d8:	6a 06                	push   0x6
c00225da:	56                   	push   esi
c00225db:	53                   	push   ebx
c00225dc:	e8 79 f8 ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00225e1:	83 c4 0c             	add    esp,0xc
c00225e4:	6a 0c                	push   0xc
c00225e6:	56                   	push   esi
c00225e7:	53                   	push   ebx
c00225e8:	e8 2d f9 ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c00225ed:	83 c4 0c             	add    esp,0xc
c00225f0:	6a 0c                	push   0xc
c00225f2:	56                   	push   esi
c00225f3:	53                   	push   ebx
c00225f4:	e8 21 f9 ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c00225f9:	83 c4 0c             	add    esp,0xc
c00225fc:	6a 0c                	push   0xc
c00225fe:	56                   	push   esi
c00225ff:	53                   	push   ebx
c0022600:	e8 15 f9 ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c0022605:	83 c4 0c             	add    esp,0xc
c0022608:	6a 0c                	push   0xc
c002260a:	56                   	push   esi
c002260b:	53                   	push   ebx
c002260c:	e8 09 f9 ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c0022611:	68 ec 00 00 00       	push   0xec
c0022616:	6a 07                	push   0x7
c0022618:	56                   	push   esi
c0022619:	53                   	push   ebx
c002261a:	e8 3b f8 ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002261f:	83 c4 1c             	add    esp,0x1c
c0022622:	6a 0c                	push   0xc
c0022624:	56                   	push   esi
c0022625:	53                   	push   ebx
c0022626:	e8 ef f8 ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c002262b:	83 c4 0c             	add    esp,0xc
c002262e:	6a 0c                	push   0xc
c0022630:	56                   	push   esi
c0022631:	53                   	push   ebx
c0022632:	e8 e3 f8 ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c0022637:	83 c4 0c             	add    esp,0xc
c002263a:	6a 0c                	push   0xc
c002263c:	56                   	push   esi
c002263d:	53                   	push   ebx
c002263e:	e8 d7 f8 ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c0022643:	83 c4 0c             	add    esp,0xc
c0022646:	6a 0c                	push   0xc
c0022648:	56                   	push   esi
c0022649:	53                   	push   ebx
c002264a:	e8 cb f8 ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c002264f:	83 c4 0c             	add    esp,0xc
c0022652:	6a 0c                	push   0xc
c0022654:	56                   	push   esi
c0022655:	53                   	push   ebx
c0022656:	e8 bf f8 ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c002265b:	83 c4 10             	add    esp,0x10
c002265e:	84 c0                	test   al,al
c0022660:	0f 84 8b 01 00 00    	je     c00227f1 <IDE::detect()+0x269>
c0022666:	31 ff                	xor    edi,edi
c0022668:	50                   	push   eax
c0022669:	6a 0c                	push   0xc
c002266b:	56                   	push   esi
c002266c:	53                   	push   ebx
c002266d:	e8 a8 f8 ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c0022672:	83 c4 10             	add    esp,0x10
c0022675:	a8 01                	test   al,0x1
c0022677:	0f 85 8e 01 00 00    	jne    c002280b <IDE::detect()+0x283>
c002267d:	84 c0                	test   al,al
c002267f:	78 04                	js     c0022685 <IDE::detect()+0xfd>
c0022681:	a8 08                	test   al,0x8
c0022683:	75 27                	jne    c00226ac <IDE::detect()+0x124>
c0022685:	47                   	inc    edi
c0022686:	81 ff 17 01 00 00    	cmp    edi,0x117
c002268c:	7e da                	jle    c0022668 <IDE::detect()+0xe0>
c002268e:	50                   	push   eax
c002268f:	50                   	push   eax
c0022690:	6a 00                	push   0x0
c0022692:	68 40 4b 4c 00       	push   0x4c4b40
c0022697:	e8 e2 aa ff ff       	call   c001d17e <nanoSleep(unsigned long long)>
c002269c:	83 c4 10             	add    esp,0x10
c002269f:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00226a5:	75 c1                	jne    c0022668 <IDE::detect()+0xe0>
c00226a7:	e9 5f 01 00 00       	jmp    c002280b <IDE::detect()+0x283>
c00226ac:	31 c9                	xor    ecx,ecx
c00226ae:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00226b2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00226b6:	83 ec 0c             	sub    esp,0xc
c00226b9:	68 80 00 00 00       	push   0x80
c00226be:	57                   	push   edi
c00226bf:	6a 00                	push   0x0
c00226c1:	56                   	push   esi
c00226c2:	53                   	push   ebx
c00226c3:	e8 f4 fd ff ff       	call   c00224bc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00226c8:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00226cd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00226d1:	89 d1                	mov    ecx,edx
c00226d3:	c1 e0 06             	shl    eax,0x6
c00226d6:	01 d8                	add    eax,ebx
c00226d8:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00226df:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00226e6:	89 f2                	mov    edx,esi
c00226e8:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00226ee:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00226f2:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00226f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00226fc:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0022703:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002270b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0022712:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002271a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0022720:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0022727:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002272d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022731:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022735:	83 c4 20             	add    esp,0x20
c0022738:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002273b:	83 c0 02             	add    eax,0x2
c002273e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0022744:	83 c7 02             	add    edi,0x2
c0022747:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002274a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0022750:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022754:	75 e2                	jne    c0022738 <IDE::detect()+0x1b0>
c0022756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002275a:	c1 e0 06             	shl    eax,0x6
c002275d:	01 d8                	add    eax,ebx
c002275f:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0022765:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002276c:	66 c1 ea 09          	shr    dx,0x9
c0022770:	83 e2 01             	and    edx,0x1
c0022773:	84 c9                	test   cl,cl
c0022775:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002277b:	75 2f                	jne    c00227ac <IDE::detect()+0x224>
c002277d:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0022783:	85 c0                	test   eax,eax
c0022785:	74 66                	je     c00227ed <IDE::detect()+0x265>
c0022787:	50                   	push   eax
c0022788:	55                   	push   ebp
c0022789:	56                   	push   esi
c002278a:	68 bb af 02 c0       	push   0xc002afbb
c002278f:	e8 f1 fe fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0022794:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002279b:	e8 34 cd fe ff       	call   c000f4d4 <malloc>
c00227a0:	89 c7                	mov    edi,eax
c00227a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00227a5:	e8 62 06 00 00       	call   c0022e0c <ATA::ATA()>
c00227aa:	eb 28                	jmp    c00227d4 <IDE::detect()+0x24c>
c00227ac:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00227b2:	55                   	push   ebp
c00227b3:	56                   	push   esi
c00227b4:	68 ea af 02 c0       	push   0xc002afea
c00227b9:	e8 c7 fe fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00227be:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00227c5:	e8 0a cd fe ff       	call   c000f4d4 <malloc>
c00227ca:	89 c7                	mov    edi,eax
c00227cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00227cf:	e8 68 0c 00 00       	call   c002343c <ATAPI::ATAPI()>
c00227d4:	5a                   	pop    edx
c00227d5:	59                   	pop    ecx
c00227d6:	57                   	push   edi
c00227d7:	53                   	push   ebx
c00227d8:	e8 97 12 ff ff       	call   c0013a74 <Device::addChild(Device*)>
c00227dd:	8b 07                	mov    eax,DWORD PTR [edi]
c00227df:	53                   	push   ebx
c00227e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00227e4:	6a 00                	push   0x0
c00227e6:	57                   	push   edi
c00227e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00227ea:	83 c4 20             	add    esp,0x20
c00227ed:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00227f1:	4d                   	dec    ebp
c00227f2:	74 0a                	je     c00227fe <IDE::detect()+0x276>
c00227f4:	bd 01 00 00 00       	mov    ebp,0x1
c00227f9:	e9 bb fd ff ff       	jmp    c00225b9 <IDE::detect()+0x31>
c00227fe:	4e                   	dec    esi
c00227ff:	74 63                	je     c0022864 <IDE::detect()+0x2dc>
c0022801:	be 01 00 00 00       	mov    esi,0x1
c0022806:	e9 ac fd ff ff       	jmp    c00225b7 <IDE::detect()+0x2f>
c002280b:	50                   	push   eax
c002280c:	6a 04                	push   0x4
c002280e:	56                   	push   esi
c002280f:	53                   	push   ebx
c0022810:	e8 05 f7 ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c0022815:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022819:	83 c4 0c             	add    esp,0xc
c002281c:	6a 05                	push   0x5
c002281e:	56                   	push   esi
c002281f:	53                   	push   ebx
c0022820:	e8 f5 f6 ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c0022825:	83 c4 10             	add    esp,0x10
c0022828:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002282c:	80 fa 14             	cmp    dl,0x14
c002282f:	75 04                	jne    c0022835 <IDE::detect()+0x2ad>
c0022831:	3c eb                	cmp    al,0xeb
c0022833:	eb 07                	jmp    c002283c <IDE::detect()+0x2b4>
c0022835:	3c 96                	cmp    al,0x96
c0022837:	75 b8                	jne    c00227f1 <IDE::detect()+0x269>
c0022839:	80 fa 69             	cmp    dl,0x69
c002283c:	75 b3                	jne    c00227f1 <IDE::detect()+0x269>
c002283e:	68 a1 00 00 00       	push   0xa1
c0022843:	6a 07                	push   0x7
c0022845:	56                   	push   esi
c0022846:	53                   	push   ebx
c0022847:	e8 0e f6 ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002284c:	5f                   	pop    edi
c002284d:	58                   	pop    eax
c002284e:	6a 00                	push   0x0
c0022850:	68 40 42 0f 00       	push   0xf4240
c0022855:	e8 24 a9 ff ff       	call   c001d17e <nanoSleep(unsigned long long)>
c002285a:	83 c4 10             	add    esp,0x10
c002285d:	b1 01                	mov    cl,0x1
c002285f:	e9 4a fe ff ff       	jmp    c00226ae <IDE::detect()+0x126>
c0022864:	81 c4 1c 02 00 00    	add    esp,0x21c
c002286a:	5b                   	pop    ebx
c002286b:	5e                   	pop    esi
c002286c:	5f                   	pop    edi
c002286d:	5d                   	pop    ebp
c002286e:	c3                   	ret    
c002286f:	90                   	nop

c0022870 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0022870:	55                   	push   ebp
c0022871:	57                   	push   edi
c0022872:	56                   	push   esi
c0022873:	53                   	push   ebx
c0022874:	83 ec 1c             	sub    esp,0x1c
c0022877:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002287b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002287f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022883:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022887:	88 c3                	mov    bl,al
c0022889:	84 c0                	test   al,al
c002288b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002288f:	0f 84 67 01 00 00    	je     c00229fc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0022895:	83 ec 0c             	sub    esp,0xc
c0022898:	68 1b b0 02 c0       	push   0xc002b01b
c002289d:	e8 e3 fd fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00228a2:	83 c4 10             	add    esp,0x10
c00228a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228a9:	3c 01                	cmp    al,0x1
c00228ab:	75 17                	jne    c00228c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00228ad:	83 ec 0c             	sub    esp,0xc
c00228b0:	b3 13                	mov    bl,0x13
c00228b2:	68 27 b0 02 c0       	push   0xc002b027
c00228b7:	e8 c9 fd fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00228bc:	83 c4 10             	add    esp,0x10
c00228bf:	e9 25 01 00 00       	jmp    c00229e9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00228c4:	3c 02                	cmp    al,0x2
c00228c6:	0f 85 ef 00 00 00    	jne    c00229bb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00228cc:	d1 e6                	shl    esi,1
c00228ce:	09 ee                	or     esi,ebp
c00228d0:	52                   	push   edx
c00228d1:	89 f0                	mov    eax,esi
c00228d3:	6a 01                	push   0x1
c00228d5:	0f b6 f0             	movzx  esi,al
c00228d8:	c1 e6 06             	shl    esi,0x6
c00228db:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00228e3:	50                   	push   eax
c00228e4:	57                   	push   edi
c00228e5:	e8 30 f6 ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c00228ea:	83 c4 10             	add    esp,0x10
c00228ed:	89 c6                	mov    esi,eax
c00228ef:	a8 01                	test   al,0x1
c00228f1:	74 12                	je     c0022905 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00228f3:	83 ec 0c             	sub    esp,0xc
c00228f6:	b3 07                	mov    bl,0x7
c00228f8:	68 3c b0 02 c0       	push   0xc002b03c
c00228fd:	e8 83 fd fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0022902:	83 c4 10             	add    esp,0x10
c0022905:	f7 c6 02 00 00 00    	test   esi,0x2
c002290b:	74 12                	je     c002291f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002290d:	83 ec 0c             	sub    esp,0xc
c0022910:	b3 03                	mov    bl,0x3
c0022912:	68 5a b0 02 c0       	push   0xc002b05a
c0022917:	e8 69 fd fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c002291c:	83 c4 10             	add    esp,0x10
c002291f:	f7 c6 04 00 00 00    	test   esi,0x4
c0022925:	74 12                	je     c0022939 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0022927:	83 ec 0c             	sub    esp,0xc
c002292a:	b3 14                	mov    bl,0x14
c002292c:	68 7a b0 02 c0       	push   0xc002b07a
c0022931:	e8 4f fd fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0022936:	83 c4 10             	add    esp,0x10
c0022939:	f7 c6 08 00 00 00    	test   esi,0x8
c002293f:	74 12                	je     c0022953 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0022941:	83 ec 0c             	sub    esp,0xc
c0022944:	b3 03                	mov    bl,0x3
c0022946:	68 5a b0 02 c0       	push   0xc002b05a
c002294b:	e8 35 fd fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0022950:	83 c4 10             	add    esp,0x10
c0022953:	f7 c6 10 00 00 00    	test   esi,0x10
c0022959:	74 12                	je     c002296d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c002295b:	83 ec 0c             	sub    esp,0xc
c002295e:	b3 15                	mov    bl,0x15
c0022960:	68 92 b0 02 c0       	push   0xc002b092
c0022965:	e8 1b fd fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c002296a:	83 c4 10             	add    esp,0x10
c002296d:	f7 c6 20 00 00 00    	test   esi,0x20
c0022973:	74 12                	je     c0022987 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0022975:	83 ec 0c             	sub    esp,0xc
c0022978:	b3 03                	mov    bl,0x3
c002297a:	68 5a b0 02 c0       	push   0xc002b05a
c002297f:	e8 01 fd fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0022984:	83 c4 10             	add    esp,0x10
c0022987:	f7 c6 40 00 00 00    	test   esi,0x40
c002298d:	74 12                	je     c00229a1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c002298f:	83 ec 0c             	sub    esp,0xc
c0022992:	b3 16                	mov    bl,0x16
c0022994:	68 ac b0 02 c0       	push   0xc002b0ac
c0022999:	e8 e7 fc fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c002299e:	83 c4 10             	add    esp,0x10
c00229a1:	89 f0                	mov    eax,esi
c00229a3:	84 c0                	test   al,al
c00229a5:	79 42                	jns    c00229e9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00229a7:	83 ec 0c             	sub    esp,0xc
c00229aa:	b3 0d                	mov    bl,0xd
c00229ac:	68 cd b0 02 c0       	push   0xc002b0cd
c00229b1:	e8 cf fc fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00229b6:	83 c4 10             	add    esp,0x10
c00229b9:	eb 2e                	jmp    c00229e9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00229bb:	3c 03                	cmp    al,0x3
c00229bd:	75 14                	jne    c00229d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00229bf:	83 ec 0c             	sub    esp,0xc
c00229c2:	b3 17                	mov    bl,0x17
c00229c4:	68 e1 b0 02 c0       	push   0xc002b0e1
c00229c9:	e8 b7 fc fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00229ce:	83 c4 10             	add    esp,0x10
c00229d1:	eb 16                	jmp    c00229e9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00229d3:	3c 04                	cmp    al,0x4
c00229d5:	75 12                	jne    c00229e9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00229d7:	83 ec 0c             	sub    esp,0xc
c00229da:	b3 08                	mov    bl,0x8
c00229dc:	68 f7 b0 02 c0       	push   0xc002b0f7
c00229e1:	e8 9f fc fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00229e6:	83 c4 10             	add    esp,0x10
c00229e9:	50                   	push   eax
c00229ea:	50                   	push   eax
c00229eb:	0f b6 c3             	movzx  eax,bl
c00229ee:	50                   	push   eax
c00229ef:	68 0f b1 02 c0       	push   0xc002b10f
c00229f4:	e8 8c fc fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00229f9:	83 c4 10             	add    esp,0x10
c00229fc:	83 c4 1c             	add    esp,0x1c
c00229ff:	88 d8                	mov    al,bl
c0022a01:	5b                   	pop    ebx
c0022a02:	5e                   	pop    esi
c0022a03:	5f                   	pop    edi
c0022a04:	5d                   	pop    ebp
c0022a05:	c3                   	ret    

c0022a06 <IDE::polling(unsigned char, unsigned int)>:
c0022a06:	57                   	push   edi
c0022a07:	56                   	push   esi
c0022a08:	53                   	push   ebx
c0022a09:	bb 04 00 00 00       	mov    ebx,0x4
c0022a0e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022a12:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022a17:	52                   	push   edx
c0022a18:	6a 0c                	push   0xc
c0022a1a:	56                   	push   esi
c0022a1b:	57                   	push   edi
c0022a1c:	e8 f9 f4 ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c0022a21:	83 c4 10             	add    esp,0x10
c0022a24:	4b                   	dec    ebx
c0022a25:	75 f0                	jne    c0022a17 <IDE::polling(unsigned char, unsigned int)+0x11>
c0022a27:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022a2c:	50                   	push   eax
c0022a2d:	6a 0c                	push   0xc
c0022a2f:	56                   	push   esi
c0022a30:	57                   	push   edi
c0022a31:	e8 e4 f4 ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c0022a36:	83 c4 10             	add    esp,0x10
c0022a39:	a8 01                	test   al,0x1
c0022a3b:	74 12                	je     c0022a4f <IDE::polling(unsigned char, unsigned int)+0x49>
c0022a3d:	83 ec 0c             	sub    esp,0xc
c0022a40:	68 29 b1 02 c0       	push   0xc002b129
c0022a45:	e8 3b fc fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0022a4a:	83 c4 10             	add    esp,0x10
c0022a4d:	eb 17                	jmp    c0022a66 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022a4f:	a8 20                	test   al,0x20
c0022a51:	75 0f                	jne    c0022a62 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0022a53:	4b                   	dec    ebx
c0022a54:	74 10                	je     c0022a66 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022a56:	84 c0                	test   al,al
c0022a58:	78 d2                	js     c0022a2c <IDE::polling(unsigned char, unsigned int)+0x26>
c0022a5a:	a8 08                	test   al,0x8
c0022a5c:	74 ce                	je     c0022a2c <IDE::polling(unsigned char, unsigned int)+0x26>
c0022a5e:	31 c0                	xor    eax,eax
c0022a60:	eb 06                	jmp    c0022a68 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022a62:	b0 01                	mov    al,0x1
c0022a64:	eb 02                	jmp    c0022a68 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022a66:	b0 02                	mov    al,0x2
c0022a68:	5b                   	pop    ebx
c0022a69:	5e                   	pop    esi
c0022a6a:	5f                   	pop    edi
c0022a6b:	c3                   	ret    

c0022a6c <SATABus::close(int, int, void*)>:
c0022a6c:	31 c0                	xor    eax,eax
c0022a6e:	c3                   	ret    
c0022a6f:	90                   	nop

c0022a70 <SATABus::detect()>:
c0022a70:	c3                   	ret    
c0022a71:	90                   	nop

c0022a72 <SATABus::SATABus()>:
c0022a72:	83 ec 0c             	sub    esp,0xc
c0022a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a79:	83 ec 08             	sub    esp,0x8
c0022a7c:	68 6c b1 02 c0       	push   0xc002b16c
c0022a81:	50                   	push   eax
c0022a82:	e8 79 13 ff ff       	call   c0013e00 <HardDiskController::HardDiskController(char const*)>
c0022a87:	83 c4 10             	add    esp,0x10
c0022a8a:	ba 28 b2 02 c0       	mov    edx,0xc002b228
c0022a8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a93:	89 10                	mov    DWORD PTR [eax],edx
c0022a95:	83 ec 0c             	sub    esp,0xc
c0022a98:	6a 50                	push   0x50
c0022a9a:	e8 d5 cf fe ff       	call   c000fa74 <Phys::allocateContiguousPages(int)>
c0022a9f:	83 c4 10             	add    esp,0x10
c0022aa2:	89 c2                	mov    edx,eax
c0022aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aa8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022aae:	83 ec 0c             	sub    esp,0xc
c0022ab1:	6a 50                	push   0x50
c0022ab3:	e8 dd eb fe ff       	call   c0011695 <Virt::allocateKernelVirtualPages(int)>
c0022ab8:	83 c4 10             	add    esp,0x10
c0022abb:	89 c2                	mov    edx,eax
c0022abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ac1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022ac7:	e8 59 ed fe ff       	call   c0011825 <Virt::getAKernelVAS()>
c0022acc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022ad0:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0022ad6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022ada:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022ae0:	83 ec 0c             	sub    esp,0xc
c0022ae3:	6a 03                	push   0x3
c0022ae5:	6a 50                	push   0x50
c0022ae7:	51                   	push   ecx
c0022ae8:	52                   	push   edx
c0022ae9:	50                   	push   eax
c0022aea:	e8 65 f5 fe ff       	call   c0012054 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0022aef:	83 c4 20             	add    esp,0x20
c0022af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022af6:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0022afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b00:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022b06:	83 ec 04             	sub    esp,0x4
c0022b09:	52                   	push   edx
c0022b0a:	50                   	push   eax
c0022b0b:	68 90 b1 02 c0       	push   0xc002b190
c0022b10:	e8 70 fb fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0022b15:	83 c4 10             	add    esp,0x10
c0022b18:	90                   	nop
c0022b19:	83 c4 0c             	add    esp,0xc
c0022b1c:	c3                   	ret    
c0022b1d:	90                   	nop

c0022b1e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0022b1e:	83 ec 0c             	sub    esp,0xc
c0022b21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022b25:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0022b28:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0022b2b:	09 c2                	or     edx,eax
c0022b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b31:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022b37:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022b39:	31 c0                	xor    eax,eax
c0022b3b:	c1 e9 08             	shr    ecx,0x8
c0022b3e:	83 e1 0f             	and    ecx,0xf
c0022b41:	39 c8                	cmp    eax,ecx
c0022b43:	74 0a                	je     c0022b4f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0022b45:	f6 c2 01             	test   dl,0x1
c0022b48:	74 18                	je     c0022b62 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0022b4a:	d1 ea                	shr    edx,1
c0022b4c:	40                   	inc    eax
c0022b4d:	eb f2                	jmp    c0022b41 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0022b4f:	83 ec 0c             	sub    esp,0xc
c0022b52:	68 b4 b1 02 c0       	push   0xc002b1b4
c0022b57:	e8 43 6c ff ff       	call   c001979f <Krnl::panic(char const*)>
c0022b5c:	83 c4 10             	add    esp,0x10
c0022b5f:	83 c8 ff             	or     eax,0xffffffff
c0022b62:	83 c4 0c             	add    esp,0xc
c0022b65:	c3                   	ret    

c0022b66 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0022b66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022b6a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0022b6d:	89 c2                	mov    edx,eax
c0022b6f:	c1 ea 08             	shr    edx,0x8
c0022b72:	83 e2 0f             	and    edx,0xf
c0022b75:	fe ca                	dec    dl
c0022b77:	75 31                	jne    c0022baa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022b79:	83 e0 0f             	and    eax,0xf
c0022b7c:	3c 03                	cmp    al,0x3
c0022b7e:	75 2a                	jne    c0022baa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022b80:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0022b83:	b8 02 00 00 00       	mov    eax,0x2
c0022b88:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0022b8e:	74 1c                	je     c0022bac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022b90:	b8 04 00 00 00       	mov    eax,0x4
c0022b95:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0022b9b:	74 0f                	je     c0022bac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022b9d:	31 c0                	xor    eax,eax
c0022b9f:	83 fa 03             	cmp    edx,0x3
c0022ba2:	0f 94 c0             	sete   al
c0022ba5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0022ba9:	c3                   	ret    
c0022baa:	31 c0                	xor    eax,eax
c0022bac:	c3                   	ret    
c0022bad:	90                   	nop

c0022bae <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0022bae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022bb2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022bb5:	0f ba e2 0f          	bt     edx,0xf
c0022bb9:	72 f7                	jb     c0022bb2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0022bbb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022bbe:	83 ca 10             	or     edx,0x10
c0022bc1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022bc4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022bc7:	83 ca 01             	or     edx,0x1
c0022bca:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022bcd:	c3                   	ret    

c0022bce <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0022bce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022bd2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022bd5:	83 e2 fe             	and    edx,0xfffffffe
c0022bd8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022bdb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022bde:	83 e2 ef             	and    edx,0xffffffef
c0022be1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022be4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022be7:	0f ba e2 0e          	bt     edx,0xe
c0022beb:	72 f7                	jb     c0022be4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022bed:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022bf0:	0f ba e2 0f          	bt     edx,0xf
c0022bf4:	72 ee                	jb     c0022be4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022bf6:	c3                   	ret    
c0022bf7:	90                   	nop

c0022bf8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0022bf8:	55                   	push   ebp
c0022bf9:	57                   	push   edi
c0022bfa:	56                   	push   esi
c0022bfb:	53                   	push   ebx
c0022bfc:	83 ec 1c             	sub    esp,0x1c
c0022bff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022c03:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c07:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022c0b:	53                   	push   ebx
c0022c0c:	89 fd                	mov    ebp,edi
c0022c0e:	56                   	push   esi
c0022c0f:	c1 e5 0a             	shl    ebp,0xa
c0022c12:	e8 b7 ff ff ff       	call   c0022bce <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0022c17:	83 ec 0c             	sub    esp,0xc
c0022c1a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0022c20:	01 e8                	add    eax,ebp
c0022c22:	89 03                	mov    DWORD PTR [ebx],eax
c0022c24:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022c26:	68 00 04 00 00       	push   0x400
c0022c2b:	6a 00                	push   0x0
c0022c2d:	50                   	push   eax
c0022c2e:	e8 58 da fd ff       	call   c000068b <memset>
c0022c33:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0022c39:	89 fa                	mov    edx,edi
c0022c3b:	01 e8                	add    eax,ebp
c0022c3d:	c1 e7 0d             	shl    edi,0xd
c0022c40:	89 03                	mov    DWORD PTR [ebx],eax
c0022c42:	c1 e2 08             	shl    edx,0x8
c0022c45:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022c4c:	81 c2 00 80 00 00    	add    edx,0x8000
c0022c52:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0022c56:	89 d0                	mov    eax,edx
c0022c58:	83 c4 1c             	add    esp,0x1c
c0022c5b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022c61:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022c64:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0022c67:	68 00 01 00 00       	push   0x100
c0022c6c:	6a 00                	push   0x0
c0022c6e:	50                   	push   eax
c0022c6f:	e8 17 da fd ff       	call   c000068b <memset>
c0022c74:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022c78:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0022c7e:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0022c84:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022c88:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0022c8b:	83 c4 10             	add    esp,0x10
c0022c8e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022c95:	31 ff                	xor    edi,edi
c0022c97:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0022c9d:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0022ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022ca7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022cad:	83 c5 20             	add    ebp,0x20
c0022cb0:	01 f8                	add    eax,edi
c0022cb2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022cb5:	52                   	push   edx
c0022cb6:	68 00 01 00 00       	push   0x100
c0022cbb:	6a 00                	push   0x0
c0022cbd:	50                   	push   eax
c0022cbe:	e8 c8 d9 fd ff       	call   c000068b <memset>
c0022cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022cc7:	83 c4 10             	add    esp,0x10
c0022cca:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0022cd0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0022cd7:	01 f8                	add    eax,edi
c0022cd9:	81 c7 00 01 00 00    	add    edi,0x100
c0022cdf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022ce2:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0022ce8:	75 b3                	jne    c0022c9d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0022cea:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0022cee:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0022cf2:	83 c4 1c             	add    esp,0x1c
c0022cf5:	5b                   	pop    ebx
c0022cf6:	5e                   	pop    esi
c0022cf7:	5f                   	pop    edi
c0022cf8:	5d                   	pop    ebp
c0022cf9:	e9 b0 fe ff ff       	jmp    c0022bae <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0022cfe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0022cfe:	55                   	push   ebp
c0022cff:	57                   	push   edi
c0022d00:	56                   	push   esi
c0022d01:	53                   	push   ebx
c0022d02:	31 db                	xor    ebx,ebx
c0022d04:	83 ec 0c             	sub    esp,0xc
c0022d07:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022d0b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022d0f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0022d12:	f7 c7 01 00 00 00    	test   edi,0x1
c0022d18:	0f 84 94 00 00 00    	je     c0022db2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022d1e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022d22:	89 d8                	mov    eax,ebx
c0022d24:	c1 e0 07             	shl    eax,0x7
c0022d27:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0022d2e:	55                   	push   ebp
c0022d2f:	56                   	push   esi
c0022d30:	e8 31 fe ff ff       	call   c0022b66 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0022d35:	59                   	pop    ecx
c0022d36:	83 f8 01             	cmp    eax,0x1
c0022d39:	5a                   	pop    edx
c0022d3a:	75 47                	jne    c0022d83 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c0022d3c:	51                   	push   ecx
c0022d3d:	51                   	push   ecx
c0022d3e:	53                   	push   ebx
c0022d3f:	68 d9 b1 02 c0       	push   0xc002b1d9
c0022d44:	e8 3c f9 fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0022d49:	83 c4 0c             	add    esp,0xc
c0022d4c:	53                   	push   ebx
c0022d4d:	55                   	push   ebp
c0022d4e:	56                   	push   esi
c0022d4f:	e8 a4 fe ff ff       	call   c0022bf8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022d54:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0022d5b:	e8 74 c7 fe ff       	call   c000f4d4 <malloc>
c0022d60:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d63:	89 c5                	mov    ebp,eax
c0022d65:	e8 de 0c 00 00       	call   c0023a48 <SATA::SATA()>
c0022d6a:	58                   	pop    eax
c0022d6b:	5a                   	pop    edx
c0022d6c:	55                   	push   ebp
c0022d6d:	56                   	push   esi
c0022d6e:	e8 01 0d ff ff       	call   c0013a74 <Device::addChild(Device*)>
c0022d73:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022d76:	56                   	push   esi
c0022d77:	6a 00                	push   0x0
c0022d79:	53                   	push   ebx
c0022d7a:	55                   	push   ebp
c0022d7b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022d7e:	83 c4 20             	add    esp,0x20
c0022d81:	eb 2f                	jmp    c0022db2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022d83:	83 f8 04             	cmp    eax,0x4
c0022d86:	75 1a                	jne    c0022da2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c0022d88:	52                   	push   edx
c0022d89:	52                   	push   edx
c0022d8a:	53                   	push   ebx
c0022d8b:	68 f0 b1 02 c0       	push   0xc002b1f0
c0022d90:	e8 f0 f8 fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0022d95:	83 c4 0c             	add    esp,0xc
c0022d98:	53                   	push   ebx
c0022d99:	55                   	push   ebp
c0022d9a:	56                   	push   esi
c0022d9b:	e8 58 fe ff ff       	call   c0022bf8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022da0:	eb 0d                	jmp    c0022daf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c0022da2:	50                   	push   eax
c0022da3:	50                   	push   eax
c0022da4:	53                   	push   ebx
c0022da5:	68 09 b2 02 c0       	push   0xc002b209
c0022daa:	e8 d6 f8 fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0022daf:	83 c4 10             	add    esp,0x10
c0022db2:	d1 ef                	shr    edi,1
c0022db4:	43                   	inc    ebx
c0022db5:	83 fb 20             	cmp    ebx,0x20
c0022db8:	0f 85 54 ff ff ff    	jne    c0022d12 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0022dbe:	83 c4 0c             	add    esp,0xc
c0022dc1:	5b                   	pop    ebx
c0022dc2:	5e                   	pop    esi
c0022dc3:	5f                   	pop    edi
c0022dc4:	5d                   	pop    ebp
c0022dc5:	c3                   	ret    

c0022dc6 <SATABus::open(int, int, void*)>:
c0022dc6:	83 ec 14             	sub    esp,0x14
c0022dc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022dcd:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0022dd3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022dd9:	52                   	push   edx
c0022dda:	50                   	push   eax
c0022ddb:	e8 1e ff ff ff       	call   c0022cfe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0022de0:	31 c0                	xor    eax,eax
c0022de2:	83 c4 1c             	add    esp,0x1c
c0022de5:	c3                   	ret    

c0022de6 <ATA::close(int, int, void*)>:
c0022de6:	83 ec 0c             	sub    esp,0xc
c0022de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ded:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022df3:	85 c0                	test   eax,eax
c0022df5:	74 0c                	je     c0022e03 <ATA::close(int, int, void*)+0x1d>
c0022df7:	83 ec 0c             	sub    esp,0xc
c0022dfa:	8b 10                	mov    edx,DWORD PTR [eax]
c0022dfc:	50                   	push   eax
c0022dfd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022e00:	83 c4 10             	add    esp,0x10
c0022e03:	31 c0                	xor    eax,eax
c0022e05:	83 c4 0c             	add    esp,0xc
c0022e08:	c3                   	ret    
c0022e09:	90                   	nop

c0022e0a <ATA::powerSaving(PowerSavingLevel)>:
c0022e0a:	c3                   	ret    
c0022e0b:	90                   	nop

c0022e0c <ATA::ATA()>:
c0022e0c:	83 ec 0c             	sub    esp,0xc
c0022e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e13:	83 ec 04             	sub    esp,0x4
c0022e16:	68 00 02 00 00       	push   0x200
c0022e1b:	68 1c b3 02 c0       	push   0xc002b31c
c0022e20:	50                   	push   eax
c0022e21:	e8 5e 10 ff ff       	call   c0013e84 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022e26:	83 c4 10             	add    esp,0x10
c0022e29:	ba 68 b2 02 c0       	mov    edx,0xc002b268
c0022e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e32:	89 10                	mov    DWORD PTR [eax],edx
c0022e34:	90                   	nop
c0022e35:	83 c4 0c             	add    esp,0xc
c0022e38:	c3                   	ret    
c0022e39:	90                   	nop

c0022e3a <ATA::flush(bool)>:
c0022e3a:	53                   	push   ebx
c0022e3b:	83 ec 08             	sub    esp,0x8
c0022e3e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0022e43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022e47:	19 c0                	sbb    eax,eax
c0022e49:	83 e0 fd             	and    eax,0xfffffffd
c0022e4c:	05 ea 00 00 00       	add    eax,0xea
c0022e51:	50                   	push   eax
c0022e52:	6a 07                	push   0x7
c0022e54:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022e5b:	50                   	push   eax
c0022e5c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022e62:	e8 f3 ef ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e67:	83 c4 0c             	add    esp,0xc
c0022e6a:	6a 00                	push   0x0
c0022e6c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022e73:	50                   	push   eax
c0022e74:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022e7a:	e8 87 fb ff ff       	call   c0022a06 <IDE::polling(unsigned char, unsigned int)>
c0022e7f:	83 c4 18             	add    esp,0x18
c0022e82:	5b                   	pop    ebx
c0022e83:	c3                   	ret    

c0022e84 <ATA::readyForCommand()>:
c0022e84:	56                   	push   esi
c0022e85:	53                   	push   ebx
c0022e86:	31 db                	xor    ebx,ebx
c0022e88:	50                   	push   eax
c0022e89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e8d:	50                   	push   eax
c0022e8e:	6a 0c                	push   0xc
c0022e90:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0022e97:	50                   	push   eax
c0022e98:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0022e9e:	e8 77 f0 ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c0022ea3:	83 c4 10             	add    esp,0x10
c0022ea6:	a8 88                	test   al,0x88
c0022ea8:	74 23                	je     c0022ecd <ATA::readyForCommand()+0x49>
c0022eaa:	43                   	inc    ebx
c0022eab:	83 fb 63             	cmp    ebx,0x63
c0022eae:	7e dd                	jle    c0022e8d <ATA::readyForCommand()+0x9>
c0022eb0:	51                   	push   ecx
c0022eb1:	51                   	push   ecx
c0022eb2:	6a 00                	push   0x0
c0022eb4:	68 40 42 0f 00       	push   0xf4240
c0022eb9:	e8 c0 a2 ff ff       	call   c001d17e <nanoSleep(unsigned long long)>
c0022ebe:	83 c4 10             	add    esp,0x10
c0022ec1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0022ec7:	75 c4                	jne    c0022e8d <ATA::readyForCommand()+0x9>
c0022ec9:	31 c0                	xor    eax,eax
c0022ecb:	eb 02                	jmp    c0022ecf <ATA::readyForCommand()+0x4b>
c0022ecd:	b0 01                	mov    al,0x1
c0022ecf:	5a                   	pop    edx
c0022ed0:	5b                   	pop    ebx
c0022ed1:	5e                   	pop    esi
c0022ed2:	c3                   	ret    
c0022ed3:	90                   	nop

c0022ed4 <ATA::access(unsigned long long, int, void*, bool)>:
c0022ed4:	55                   	push   ebp
c0022ed5:	57                   	push   edi
c0022ed6:	56                   	push   esi
c0022ed7:	53                   	push   ebx
c0022ed8:	83 ec 2c             	sub    esp,0x2c
c0022edb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0022edf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022ee3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0022ee7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022eeb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0022eef:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022ef3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022ef7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0022efd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022f01:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0022f07:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022f0b:	c1 e0 06             	shl    eax,0x6
c0022f0e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0022f16:	74 5d                	je     c0022f75 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0022f18:	89 fa                	mov    edx,edi
c0022f1a:	89 f0                	mov    eax,esi
c0022f1c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0022f20:	c1 ea 1c             	shr    edx,0x1c
c0022f23:	89 d1                	mov    ecx,edx
c0022f25:	09 c1                	or     ecx,eax
c0022f27:	74 25                	je     c0022f4e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0022f29:	31 ed                	xor    ebp,ebp
c0022f2b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0022f32:	89 fa                	mov    edx,edi
c0022f34:	89 f0                	mov    eax,esi
c0022f36:	0f ad d0             	shrd   eax,edx,cl
c0022f39:	d3 ea                	shr    edx,cl
c0022f3b:	f6 c1 20             	test   cl,0x20
c0022f3e:	74 02                	je     c0022f42 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0022f40:	89 d0                	mov    eax,edx
c0022f42:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0022f46:	45                   	inc    ebp
c0022f47:	83 fd 06             	cmp    ebp,0x6
c0022f4a:	75 df                	jne    c0022f2b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0022f4c:	eb 76                	jmp    c0022fc4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0022f4e:	89 f0                	mov    eax,esi
c0022f50:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0022f55:	89 fa                	mov    edx,edi
c0022f57:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0022f5e:	0f ac d0 10          	shrd   eax,edx,0x10
c0022f62:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0022f67:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0022f6b:	c1 ee 18             	shr    esi,0x18
c0022f6e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0022f73:	eb 56                	jmp    c0022fcb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0022f75:	6a 00                	push   0x0
c0022f77:	6a 3f                	push   0x3f
c0022f79:	57                   	push   edi
c0022f7a:	56                   	push   esi
c0022f7b:	e8 3c 24 00 00       	call   c00253bc <__umoddi3>
c0022f80:	83 c4 10             	add    esp,0x10
c0022f83:	40                   	inc    eax
c0022f84:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0022f88:	6a 00                	push   0x0
c0022f8a:	68 f0 03 00 00       	push   0x3f0
c0022f8f:	57                   	push   edi
c0022f90:	56                   	push   esi
c0022f91:	e8 26 23 00 00       	call   c00252bc <__udivdi3>
c0022f96:	83 c4 10             	add    esp,0x10
c0022f99:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0022f9e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0022fa5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0022faa:	6a 00                	push   0x0
c0022fac:	6a 3f                	push   0x3f
c0022fae:	57                   	push   edi
c0022faf:	56                   	push   esi
c0022fb0:	e8 07 23 00 00       	call   c00252bc <__udivdi3>
c0022fb5:	83 c4 10             	add    esp,0x10
c0022fb8:	89 c6                	mov    esi,eax
c0022fba:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0022fbf:	83 e6 0f             	and    esi,0xf
c0022fc2:	eb 07                	jmp    c0022fcb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0022fc4:	31 f6                	xor    esi,esi
c0022fc6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0022fcb:	bf 01 00 00 00       	mov    edi,0x1
c0022fd0:	50                   	push   eax
c0022fd1:	6a 00                	push   0x0
c0022fd3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022fda:	50                   	push   eax
c0022fdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022fdf:	e8 82 f0 ff ff       	call   c0022066 <IDE::enableIRQs(unsigned char, bool)>
c0022fe4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022fe7:	e8 98 fe ff ff       	call   c0022e84 <ATA::readyForCommand()>
c0022fec:	83 c4 10             	add    esp,0x10
c0022fef:	84 c0                	test   al,al
c0022ff1:	0f 84 50 02 00 00    	je     c0023247 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0022ff7:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0022ffd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023003:	c1 e0 04             	shl    eax,0x4
c0023006:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002300d:	09 c6                	or     esi,eax
c002300f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023014:	75 05                	jne    c002301b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023016:	83 ce a0             	or     esi,0xffffffa0
c0023019:	eb 03                	jmp    c002301e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002301b:	83 ce e0             	or     esi,0xffffffe0
c002301e:	89 f0                	mov    eax,esi
c0023020:	0f b6 f0             	movzx  esi,al
c0023023:	56                   	push   esi
c0023024:	6a 06                	push   0x6
c0023026:	51                   	push   ecx
c0023027:	52                   	push   edx
c0023028:	e8 2d ee ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002302d:	83 c4 10             	add    esp,0x10
c0023030:	6a 00                	push   0x0
c0023032:	6a 01                	push   0x1
c0023034:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002303b:	50                   	push   eax
c002303c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023042:	e8 13 ee ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023047:	83 c4 10             	add    esp,0x10
c002304a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002304f:	75 6e                	jne    c00230bf <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023051:	6a 00                	push   0x0
c0023053:	6a 08                	push   0x8
c0023055:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002305c:	50                   	push   eax
c002305d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023063:	e8 f2 ed ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023068:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002306d:	50                   	push   eax
c002306e:	6a 09                	push   0x9
c0023070:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023077:	50                   	push   eax
c0023078:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002307e:	e8 d7 ed ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023083:	83 c4 20             	add    esp,0x20
c0023086:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002308b:	50                   	push   eax
c002308c:	6a 0a                	push   0xa
c002308e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023095:	50                   	push   eax
c0023096:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002309c:	e8 b9 ed ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230a1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00230a6:	50                   	push   eax
c00230a7:	6a 0b                	push   0xb
c00230a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00230b0:	50                   	push   eax
c00230b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00230b7:	e8 9e ed ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230bc:	83 c4 20             	add    esp,0x20
c00230bf:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00230c4:	50                   	push   eax
c00230c5:	6a 02                	push   0x2
c00230c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00230ce:	50                   	push   eax
c00230cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00230d5:	e8 80 ed ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230da:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00230df:	50                   	push   eax
c00230e0:	6a 03                	push   0x3
c00230e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00230e9:	50                   	push   eax
c00230ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00230f0:	e8 65 ed ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230f5:	83 c4 20             	add    esp,0x20
c00230f8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00230fd:	50                   	push   eax
c00230fe:	6a 04                	push   0x4
c0023100:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023107:	50                   	push   eax
c0023108:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002310e:	e8 47 ed ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023113:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023118:	50                   	push   eax
c0023119:	6a 05                	push   0x5
c002311b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023122:	50                   	push   eax
c0023123:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023129:	e8 2c ed ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002312e:	83 c4 20             	add    esp,0x20
c0023131:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023136:	0f 94 c0             	sete   al
c0023139:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002313e:	74 09                	je     c0023149 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023140:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023147:	eb 07                	jmp    c0023150 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023149:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023150:	0f b6 c0             	movzx  eax,al
c0023153:	50                   	push   eax
c0023154:	6a 07                	push   0x7
c0023156:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002315d:	50                   	push   eax
c002315e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023164:	e8 f1 ec ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023169:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002316d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023171:	83 c4 10             	add    esp,0x10
c0023174:	85 f6                	test   esi,esi
c0023176:	0f 84 ac 00 00 00    	je     c0023228 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c002317c:	50                   	push   eax
c002317d:	6a 01                	push   0x1
c002317f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023186:	50                   	push   eax
c0023187:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002318d:	e8 74 f8 ff ff       	call   c0022a06 <IDE::polling(unsigned char, unsigned int)>
c0023192:	83 c4 10             	add    esp,0x10
c0023195:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002319b:	84 c0                	test   al,al
c002319d:	74 20                	je     c00231bf <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c002319f:	0f b6 f8             	movzx  edi,al
c00231a2:	0f b6 d2             	movzx  edx,dl
c00231a5:	57                   	push   edi
c00231a6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00231ad:	50                   	push   eax
c00231ae:	52                   	push   edx
c00231af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231b5:	e8 b6 f6 ff ff       	call   c0022870 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00231ba:	e9 85 00 00 00       	jmp    c0023244 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00231bf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00231c4:	74 41                	je     c0023207 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00231c6:	31 c9                	xor    ecx,ecx
c00231c8:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00231cc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00231d0:	50                   	push   eax
c00231d1:	50                   	push   eax
c00231d2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231d9:	50                   	push   eax
c00231da:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231e0:	e8 63 ec ff ff       	call   c0021e48 <IDE::getBase(unsigned char)>
c00231e5:	89 c2                	mov    edx,eax
c00231e7:	89 e8                	mov    eax,ebp
c00231e9:	66 ef                	out    dx,ax
c00231eb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00231ef:	83 c4 10             	add    esp,0x10
c00231f2:	41                   	inc    ecx
c00231f3:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00231f9:	75 cd                	jne    c00231c8 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c00231fb:	4e                   	dec    esi
c00231fc:	81 c7 00 02 00 00    	add    edi,0x200
c0023202:	e9 6d ff ff ff       	jmp    c0023174 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c0023207:	0f b6 d2             	movzx  edx,dl
c002320a:	51                   	push   ecx
c002320b:	51                   	push   ecx
c002320c:	52                   	push   edx
c002320d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023213:	e8 30 ec ff ff       	call   c0021e48 <IDE::getBase(unsigned char)>
c0023218:	b9 00 01 00 00       	mov    ecx,0x100
c002321d:	89 c2                	mov    edx,eax
c002321f:	fc                   	cld    
c0023220:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023223:	83 c4 10             	add    esp,0x10
c0023226:	eb d3                	jmp    c00231fb <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0023228:	31 ff                	xor    edi,edi
c002322a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002322f:	74 16                	je     c0023247 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0023231:	50                   	push   eax
c0023232:	50                   	push   eax
c0023233:	31 c0                	xor    eax,eax
c0023235:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002323a:	0f 94 c0             	sete   al
c002323d:	50                   	push   eax
c002323e:	53                   	push   ebx
c002323f:	e8 f6 fb ff ff       	call   c0022e3a <ATA::flush(bool)>
c0023244:	83 c4 10             	add    esp,0x10
c0023247:	83 c4 2c             	add    esp,0x2c
c002324a:	89 f8                	mov    eax,edi
c002324c:	5b                   	pop    ebx
c002324d:	5e                   	pop    esi
c002324e:	5f                   	pop    edi
c002324f:	5d                   	pop    ebp
c0023250:	c3                   	ret    
c0023251:	90                   	nop

c0023252 <ATA::read(unsigned long long, int, void*)>:
c0023252:	57                   	push   edi
c0023253:	b8 04 00 00 00       	mov    eax,0x4
c0023258:	56                   	push   esi
c0023259:	53                   	push   ebx
c002325a:	83 ec 10             	sub    esp,0x10
c002325d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023261:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023265:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023268:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002326c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023270:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023276:	77 3b                	ja     c00232b3 <ATA::read(unsigned long long, int, void*)+0x61>
c0023278:	b8 06 00 00 00       	mov    eax,0x6
c002327d:	85 d2                	test   edx,edx
c002327f:	74 32                	je     c00232b3 <ATA::read(unsigned long long, int, void*)+0x61>
c0023281:	50                   	push   eax
c0023282:	50                   	push   eax
c0023283:	6a 00                	push   0x0
c0023285:	52                   	push   edx
c0023286:	53                   	push   ebx
c0023287:	57                   	push   edi
c0023288:	56                   	push   esi
c0023289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002328d:	e8 42 fc ff ff       	call   c0022ed4 <ATA::access(unsigned long long, int, void*, bool)>
c0023292:	83 c4 20             	add    esp,0x20
c0023295:	85 c0                	test   eax,eax
c0023297:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002329b:	75 11                	jne    c00232ae <ATA::read(unsigned long long, int, void*)+0x5c>
c002329d:	01 1d 88 eb 02 c0    	add    DWORD PTR ds:0xc002eb88,ebx
c00232a3:	e8 ca d1 fe ff       	call   c0010472 <VgaText::updateDiskUsage()>
c00232a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232ac:	eb 05                	jmp    c00232b3 <ATA::read(unsigned long long, int, void*)+0x61>
c00232ae:	b8 01 00 00 00       	mov    eax,0x1
c00232b3:	83 c4 10             	add    esp,0x10
c00232b6:	5b                   	pop    ebx
c00232b7:	5e                   	pop    esi
c00232b8:	5f                   	pop    edi
c00232b9:	c3                   	ret    

c00232ba <ATA::write(unsigned long long, int, void*)>:
c00232ba:	57                   	push   edi
c00232bb:	b8 04 00 00 00       	mov    eax,0x4
c00232c0:	56                   	push   esi
c00232c1:	53                   	push   ebx
c00232c2:	83 ec 10             	sub    esp,0x10
c00232c5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00232c9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00232cd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00232d0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00232d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00232d8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00232de:	77 3b                	ja     c002331b <ATA::write(unsigned long long, int, void*)+0x61>
c00232e0:	b8 06 00 00 00       	mov    eax,0x6
c00232e5:	85 d2                	test   edx,edx
c00232e7:	74 32                	je     c002331b <ATA::write(unsigned long long, int, void*)+0x61>
c00232e9:	50                   	push   eax
c00232ea:	50                   	push   eax
c00232eb:	6a 01                	push   0x1
c00232ed:	52                   	push   edx
c00232ee:	53                   	push   ebx
c00232ef:	57                   	push   edi
c00232f0:	56                   	push   esi
c00232f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00232f5:	e8 da fb ff ff       	call   c0022ed4 <ATA::access(unsigned long long, int, void*, bool)>
c00232fa:	83 c4 20             	add    esp,0x20
c00232fd:	85 c0                	test   eax,eax
c00232ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023303:	75 11                	jne    c0023316 <ATA::write(unsigned long long, int, void*)+0x5c>
c0023305:	01 1d 84 eb 02 c0    	add    DWORD PTR ds:0xc002eb84,ebx
c002330b:	e8 62 d1 fe ff       	call   c0010472 <VgaText::updateDiskUsage()>
c0023310:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023314:	eb 05                	jmp    c002331b <ATA::write(unsigned long long, int, void*)+0x61>
c0023316:	b8 01 00 00 00       	mov    eax,0x1
c002331b:	83 c4 10             	add    esp,0x10
c002331e:	5b                   	pop    ebx
c002331f:	5e                   	pop    esi
c0023320:	5f                   	pop    edi
c0023321:	c3                   	ret    

c0023322 <ATA::detectCHS()>:
c0023322:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023326:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002332c:	c1 e0 06             	shl    eax,0x6
c002332f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023335:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002333f:	c7 44 24 04 4c b2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b24c
c0023347:	e9 53 64 ff ff       	jmp    c001979f <Krnl::panic(char const*)>

c002334c <ATA::open(int, int, void*)>:
c002334c:	53                   	push   ebx
c002334d:	83 ec 08             	sub    esp,0x8
c0023350:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023354:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023358:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002335c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023362:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023368:	c1 e0 06             	shl    eax,0x6
c002336b:	01 d0                	add    eax,edx
c002336d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0023374:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002337a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0023381:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002338b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0023391:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0023398:	75 0c                	jne    c00233a6 <ATA::open(int, int, void*)+0x5a>
c002339a:	83 ec 0c             	sub    esp,0xc
c002339d:	53                   	push   ebx
c002339e:	e8 7f ff ff ff       	call   c0023322 <ATA::detectCHS()>
c00233a3:	83 c4 10             	add    esp,0x10
c00233a6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00233ac:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00233b2:	c1 e0 06             	shl    eax,0x6
c00233b5:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00233bc:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00233c6:	d1 e8                	shr    eax,1
c00233c8:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00233ce:	6a 04                	push   0x4
c00233d0:	6a 0c                	push   0xc
c00233d2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00233d9:	50                   	push   eax
c00233da:	52                   	push   edx
c00233db:	e8 7a ea ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233e0:	90                   	nop
c00233e1:	90                   	nop
c00233e2:	6a 00                	push   0x0
c00233e4:	6a 0c                	push   0xc
c00233e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00233ed:	50                   	push   eax
c00233ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00233f4:	e8 61 ea ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233f9:	83 c4 14             	add    esp,0x14
c00233fc:	53                   	push   ebx
c00233fd:	e8 ea 0a ff ff       	call   c0013eec <PhysicalDisk::startCache()>
c0023402:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023405:	e8 0c 2b ff ff       	call   c0015f16 <createPartitionsForDisk(PhysicalDisk*)>
c002340a:	31 c0                	xor    eax,eax
c002340c:	83 c4 18             	add    esp,0x18
c002340f:	5b                   	pop    ebx
c0023410:	c3                   	ret    
c0023411:	90                   	nop

c0023412 <ATAPI::write(unsigned long long, int, void*)>:
c0023412:	b8 03 00 00 00       	mov    eax,0x3
c0023417:	c3                   	ret    

c0023418 <ATAPI::close(int, int, void*)>:
c0023418:	83 ec 0c             	sub    esp,0xc
c002341b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002341f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023425:	85 c0                	test   eax,eax
c0023427:	74 0c                	je     c0023435 <ATAPI::close(int, int, void*)+0x1d>
c0023429:	83 ec 0c             	sub    esp,0xc
c002342c:	8b 10                	mov    edx,DWORD PTR [eax]
c002342e:	50                   	push   eax
c002342f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023432:	83 c4 10             	add    esp,0x10
c0023435:	31 c0                	xor    eax,eax
c0023437:	83 c4 0c             	add    esp,0xc
c002343a:	c3                   	ret    
c002343b:	90                   	nop

c002343c <ATAPI::ATAPI()>:
c002343c:	83 ec 0c             	sub    esp,0xc
c002343f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023443:	83 ec 04             	sub    esp,0x4
c0023446:	68 00 08 00 00       	push   0x800
c002344b:	68 94 b2 02 c0       	push   0xc002b294
c0023450:	50                   	push   eax
c0023451:	e8 2e 0a ff ff       	call   c0013e84 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023456:	83 c4 10             	add    esp,0x10
c0023459:	ba d4 b2 02 c0       	mov    edx,0xc002b2d4
c002345e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023462:	89 10                	mov    DWORD PTR [eax],edx
c0023464:	90                   	nop
c0023465:	83 c4 0c             	add    esp,0xc
c0023468:	c3                   	ret    
c0023469:	90                   	nop

c002346a <ATAPI::readyForCommand()>:
c002346a:	56                   	push   esi
c002346b:	53                   	push   ebx
c002346c:	31 db                	xor    ebx,ebx
c002346e:	50                   	push   eax
c002346f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023473:	50                   	push   eax
c0023474:	6a 0c                	push   0xc
c0023476:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002347d:	50                   	push   eax
c002347e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023484:	e8 91 ea ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c0023489:	83 c4 10             	add    esp,0x10
c002348c:	a8 88                	test   al,0x88
c002348e:	74 23                	je     c00234b3 <ATAPI::readyForCommand()+0x49>
c0023490:	43                   	inc    ebx
c0023491:	83 fb 63             	cmp    ebx,0x63
c0023494:	7e dd                	jle    c0023473 <ATAPI::readyForCommand()+0x9>
c0023496:	51                   	push   ecx
c0023497:	51                   	push   ecx
c0023498:	6a 00                	push   0x0
c002349a:	68 40 42 0f 00       	push   0xf4240
c002349f:	e8 da 9c ff ff       	call   c001d17e <nanoSleep(unsigned long long)>
c00234a4:	83 c4 10             	add    esp,0x10
c00234a7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00234ad:	75 c4                	jne    c0023473 <ATAPI::readyForCommand()+0x9>
c00234af:	31 c0                	xor    eax,eax
c00234b1:	eb 02                	jmp    c00234b5 <ATAPI::readyForCommand()+0x4b>
c00234b3:	b0 01                	mov    al,0x1
c00234b5:	5a                   	pop    edx
c00234b6:	5b                   	pop    ebx
c00234b7:	5e                   	pop    esi
c00234b8:	c3                   	ret    
c00234b9:	90                   	nop

c00234ba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00234ba:	55                   	push   ebp
c00234bb:	57                   	push   edi
c00234bc:	56                   	push   esi
c00234bd:	53                   	push   ebx
c00234be:	83 ec 20             	sub    esp,0x20
c00234c1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00234c5:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00234c9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00234cd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00234d1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00234d5:	6a 01                	push   0x1
c00234d7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00234de:	50                   	push   eax
c00234df:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00234e5:	e8 7c eb ff ff       	call   c0022066 <IDE::enableIRQs(unsigned char, bool)>
c00234ea:	5e                   	pop    esi
c00234eb:	58                   	pop    eax
c00234ec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00234f3:	50                   	push   eax
c00234f4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00234fa:	e8 35 e9 ff ff       	call   c0021e34 <IDE::prepareInterrupt(unsigned char)>
c00234ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023502:	e8 63 ff ff ff       	call   c002346a <ATAPI::readyForCommand()>
c0023507:	83 c4 10             	add    esp,0x10
c002350a:	84 c0                	test   al,al
c002350c:	75 0a                	jne    c0023518 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002350e:	bb 01 00 00 00       	mov    ebx,0x1
c0023513:	e9 57 02 00 00       	jmp    c002376f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023518:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002351e:	c1 e0 04             	shl    eax,0x4
c0023521:	0f b6 c0             	movzx  eax,al
c0023524:	50                   	push   eax
c0023525:	6a 06                	push   0x6
c0023527:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002352e:	50                   	push   eax
c002352f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023535:	e8 20 e9 ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002353a:	6a 00                	push   0x0
c002353c:	6a 01                	push   0x1
c002353e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023545:	50                   	push   eax
c0023546:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002354c:	e8 09 e9 ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023551:	83 c4 20             	add    esp,0x20
c0023554:	0f b6 c3             	movzx  eax,bl
c0023557:	0f b6 df             	movzx  ebx,bh
c002355a:	50                   	push   eax
c002355b:	6a 04                	push   0x4
c002355d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023564:	50                   	push   eax
c0023565:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002356b:	e8 ea e8 ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023570:	53                   	push   ebx
c0023571:	6a 05                	push   0x5
c0023573:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002357a:	50                   	push   eax
c002357b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023581:	e8 d4 e8 ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023586:	83 c4 20             	add    esp,0x20
c0023589:	68 a0 00 00 00       	push   0xa0
c002358e:	6a 07                	push   0x7
c0023590:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023597:	50                   	push   eax
c0023598:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002359e:	e8 b7 e8 ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235a3:	83 c4 0c             	add    esp,0xc
c00235a6:	6a 01                	push   0x1
c00235a8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00235af:	50                   	push   eax
c00235b0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00235b6:	e8 4b f4 ff ff       	call   c0022a06 <IDE::polling(unsigned char, unsigned int)>
c00235bb:	83 c4 10             	add    esp,0x10
c00235be:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00235c4:	84 c0                	test   al,al
c00235c6:	74 23                	je     c00235eb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00235c8:	0f b6 d8             	movzx  ebx,al
c00235cb:	0f b6 d2             	movzx  edx,dl
c00235ce:	53                   	push   ebx
c00235cf:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00235d6:	50                   	push   eax
c00235d7:	52                   	push   edx
c00235d8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00235de:	e8 8d f2 ff ff       	call   c0022870 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00235e3:	83 c4 10             	add    esp,0x10
c00235e6:	e9 84 01 00 00       	jmp    c002376f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00235eb:	0f b6 d2             	movzx  edx,dl
c00235ee:	53                   	push   ebx
c00235ef:	53                   	push   ebx
c00235f0:	52                   	push   edx
c00235f1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00235f7:	e8 4c e8 ff ff       	call   c0021e48 <IDE::getBase(unsigned char)>
c00235fc:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023600:	b9 06 00 00 00       	mov    ecx,0x6
c0023605:	89 c2                	mov    edx,eax
c0023607:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002360a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002360e:	83 c4 10             	add    esp,0x10
c0023611:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023617:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002361e:	85 db                	test   ebx,ebx
c0023620:	0f 84 ec 00 00 00    	je     c0023712 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0023626:	51                   	push   ecx
c0023627:	51                   	push   ecx
c0023628:	52                   	push   edx
c0023629:	50                   	push   eax
c002362a:	e8 99 e9 ff ff       	call   c0021fc8 <IDE::waitInterrupt(unsigned char)>
c002362f:	83 c4 10             	add    esp,0x10
c0023632:	84 c0                	test   al,al
c0023634:	0f 84 d4 fe ff ff    	je     c002350e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002363a:	56                   	push   esi
c002363b:	56                   	push   esi
c002363c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023643:	50                   	push   eax
c0023644:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002364a:	e8 e5 e7 ff ff       	call   c0021e34 <IDE::prepareInterrupt(unsigned char)>
c002364f:	83 c4 0c             	add    esp,0xc
c0023652:	6a 04                	push   0x4
c0023654:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002365b:	50                   	push   eax
c002365c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023662:	e8 b3 e8 ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c0023667:	83 c4 0c             	add    esp,0xc
c002366a:	89 c6                	mov    esi,eax
c002366c:	6a 05                	push   0x5
c002366e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023675:	50                   	push   eax
c0023676:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002367c:	e8 99 e8 ff ff       	call   c0021f1a <IDE::read(unsigned char, unsigned char)>
c0023681:	89 f1                	mov    ecx,esi
c0023683:	0f b6 c0             	movzx  eax,al
c0023686:	0f b6 f1             	movzx  esi,cl
c0023689:	c1 e0 08             	shl    eax,0x8
c002368c:	09 c6                	or     esi,eax
c002368e:	d1 fe                	sar    esi,1
c0023690:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0023694:	83 c4 10             	add    esp,0x10
c0023697:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002369c:	74 41                	je     c00236df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002369e:	31 c9                	xor    ecx,ecx
c00236a0:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00236a6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00236ad:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00236b1:	75 0a                	jne    c00236bd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00236b3:	01 c9                	add    ecx,ecx
c00236b5:	01 cd                	add    ebp,ecx
c00236b7:	4b                   	dec    ebx
c00236b8:	e9 54 ff ff ff       	jmp    c0023611 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00236bd:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00236c2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00236c6:	51                   	push   ecx
c00236c7:	51                   	push   ecx
c00236c8:	52                   	push   edx
c00236c9:	50                   	push   eax
c00236ca:	e8 79 e7 ff ff       	call   c0021e48 <IDE::getBase(unsigned char)>
c00236cf:	89 c2                	mov    edx,eax
c00236d1:	89 f0                	mov    eax,esi
c00236d3:	66 ef                	out    dx,ax
c00236d5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00236d9:	83 c4 10             	add    esp,0x10
c00236dc:	41                   	inc    ecx
c00236dd:	eb c1                	jmp    c00236a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00236df:	31 f6                	xor    esi,esi
c00236e1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00236e7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00236ee:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00236f2:	75 06                	jne    c00236fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00236f4:	01 f6                	add    esi,esi
c00236f6:	01 f5                	add    ebp,esi
c00236f8:	eb bd                	jmp    c00236b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00236fa:	51                   	push   ecx
c00236fb:	51                   	push   ecx
c00236fc:	52                   	push   edx
c00236fd:	50                   	push   eax
c00236fe:	e8 45 e7 ff ff       	call   c0021e48 <IDE::getBase(unsigned char)>
c0023703:	89 c2                	mov    edx,eax
c0023705:	66 ed                	in     ax,dx
c0023707:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002370c:	83 c4 10             	add    esp,0x10
c002370f:	46                   	inc    esi
c0023710:	eb cf                	jmp    c00236e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0023712:	51                   	push   ecx
c0023713:	51                   	push   ecx
c0023714:	52                   	push   edx
c0023715:	50                   	push   eax
c0023716:	e8 ad e8 ff ff       	call   c0021fc8 <IDE::waitInterrupt(unsigned char)>
c002371b:	83 c4 10             	add    esp,0x10
c002371e:	84 c0                	test   al,al
c0023720:	0f 84 e8 fd ff ff    	je     c002350e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023726:	bb a0 86 01 00       	mov    ebx,0x186a0
c002372b:	52                   	push   edx
c002372c:	52                   	push   edx
c002372d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023734:	50                   	push   eax
c0023735:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002373b:	e8 f4 e6 ff ff       	call   c0021e34 <IDE::prepareInterrupt(unsigned char)>
c0023740:	83 c4 10             	add    esp,0x10
c0023743:	50                   	push   eax
c0023744:	50                   	push   eax
c0023745:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002374c:	50                   	push   eax
c002374d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023753:	e8 f0 e6 ff ff       	call   c0021e48 <IDE::getBase(unsigned char)>
c0023758:	8d 50 07             	lea    edx,[eax+0x7]
c002375b:	ec                   	in     al,dx
c002375c:	83 c4 10             	add    esp,0x10
c002375f:	a8 88                	test   al,0x88
c0023761:	74 0a                	je     c002376d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0023763:	4b                   	dec    ebx
c0023764:	75 dd                	jne    c0023743 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0023766:	bb 02 00 00 00       	mov    ebx,0x2
c002376b:	eb 02                	jmp    c002376f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002376d:	31 db                	xor    ebx,ebx
c002376f:	83 c4 1c             	add    esp,0x1c
c0023772:	89 d8                	mov    eax,ebx
c0023774:	5b                   	pop    ebx
c0023775:	5e                   	pop    esi
c0023776:	5f                   	pop    edi
c0023777:	5d                   	pop    ebp
c0023778:	c3                   	ret    
c0023779:	90                   	nop

c002377a <ATAPI::diskRemoved()>:
c002377a:	83 ec 18             	sub    esp,0x18
c002377d:	68 9f b2 02 c0       	push   0xc002b29f
c0023782:	e8 fe ee fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0023787:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002378b:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0023792:	83 c4 1c             	add    esp,0x1c
c0023795:	c3                   	ret    

c0023796 <ATAPI::eject()>:
c0023796:	57                   	push   edi
c0023797:	b9 03 00 00 00       	mov    ecx,0x3
c002379c:	53                   	push   ebx
c002379d:	83 ec 14             	sub    esp,0x14
c00237a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00237a4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00237a8:	fc                   	cld    
c00237a9:	31 c0                	xor    eax,eax
c00237ab:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00237ad:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00237b2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00237b7:	50                   	push   eax
c00237b8:	50                   	push   eax
c00237b9:	6a 00                	push   0x0
c00237bb:	6a 00                	push   0x0
c00237bd:	6a 00                	push   0x0
c00237bf:	6a 02                	push   0x2
c00237c1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00237c5:	50                   	push   eax
c00237c6:	53                   	push   ebx
c00237c7:	e8 ee fc ff ff       	call   c00234ba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00237cc:	83 c4 14             	add    esp,0x14
c00237cf:	53                   	push   ebx
c00237d0:	e8 a5 ff ff ff       	call   c002377a <ATAPI::diskRemoved()>
c00237d5:	83 c4 24             	add    esp,0x24
c00237d8:	5b                   	pop    ebx
c00237d9:	5f                   	pop    edi
c00237da:	c3                   	ret    
c00237db:	90                   	nop

c00237dc <ATAPI::diskInserted()>:
c00237dc:	53                   	push   ebx
c00237dd:	83 ec 14             	sub    esp,0x14
c00237e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00237e4:	68 b5 b2 02 c0       	push   0xc002b2b5
c00237e9:	e8 97 ee fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c00237ee:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00237f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00237f8:	e8 ef 06 ff ff       	call   c0013eec <PhysicalDisk::startCache()>
c00237fd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0023801:	83 c4 18             	add    esp,0x18
c0023804:	5b                   	pop    ebx
c0023805:	e9 0c 27 ff ff       	jmp    c0015f16 <createPartitionsForDisk(PhysicalDisk*)>

c002380a <ATAPI::detectMedia()>:
c002380a:	56                   	push   esi
c002380b:	53                   	push   ebx
c002380c:	83 ec 28             	sub    esp,0x28
c002380f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023813:	6a 0c                	push   0xc
c0023815:	6a 00                	push   0x0
c0023817:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002381b:	56                   	push   esi
c002381c:	e8 6a ce fd ff       	call   c000068b <memset>
c0023821:	58                   	pop    eax
c0023822:	5a                   	pop    edx
c0023823:	6a 00                	push   0x0
c0023825:	6a 00                	push   0x0
c0023827:	6a 00                	push   0x0
c0023829:	6a 00                	push   0x0
c002382b:	56                   	push   esi
c002382c:	53                   	push   ebx
c002382d:	e8 88 fc ff ff       	call   c00234ba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023832:	83 c4 1c             	add    esp,0x1c
c0023835:	6a 0c                	push   0xc
c0023837:	6a 00                	push   0x0
c0023839:	56                   	push   esi
c002383a:	e8 4c ce fd ff       	call   c000068b <memset>
c002383f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0023844:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0023849:	59                   	pop    ecx
c002384a:	58                   	pop    eax
c002384b:	6a 01                	push   0x1
c002384d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0023851:	50                   	push   eax
c0023852:	6a 00                	push   0x0
c0023854:	6a 12                	push   0x12
c0023856:	56                   	push   esi
c0023857:	53                   	push   ebx
c0023858:	e8 5d fc ff ff       	call   c00234ba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002385d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0023861:	83 c4 20             	add    esp,0x20
c0023864:	83 e0 7f             	and    eax,0x7f
c0023867:	3c 70                	cmp    al,0x70
c0023869:	74 15                	je     c0023880 <ATAPI::detectMedia()+0x76>
c002386b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023872:	75 0c                	jne    c0023880 <ATAPI::detectMedia()+0x76>
c0023874:	83 ec 0c             	sub    esp,0xc
c0023877:	53                   	push   ebx
c0023878:	e8 5f ff ff ff       	call   c00237dc <ATAPI::diskInserted()>
c002387d:	83 c4 10             	add    esp,0x10
c0023880:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023884:	83 e0 0f             	and    eax,0xf
c0023887:	3c 02                	cmp    al,0x2
c0023889:	75 1b                	jne    c00238a6 <ATAPI::detectMedia()+0x9c>
c002388b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0023890:	75 2d                	jne    c00238bf <ATAPI::detectMedia()+0xb5>
c0023892:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023899:	74 24                	je     c00238bf <ATAPI::detectMedia()+0xb5>
c002389b:	83 ec 0c             	sub    esp,0xc
c002389e:	53                   	push   ebx
c002389f:	e8 d6 fe ff ff       	call   c002377a <ATAPI::diskRemoved()>
c00238a4:	eb 16                	jmp    c00238bc <ATAPI::detectMedia()+0xb2>
c00238a6:	84 c0                	test   al,al
c00238a8:	75 15                	jne    c00238bf <ATAPI::detectMedia()+0xb5>
c00238aa:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00238b1:	75 0c                	jne    c00238bf <ATAPI::detectMedia()+0xb5>
c00238b3:	83 ec 0c             	sub    esp,0xc
c00238b6:	53                   	push   ebx
c00238b7:	e8 20 ff ff ff       	call   c00237dc <ATAPI::diskInserted()>
c00238bc:	83 c4 10             	add    esp,0x10
c00238bf:	83 c4 24             	add    esp,0x24
c00238c2:	5b                   	pop    ebx
c00238c3:	5e                   	pop    esi
c00238c4:	c3                   	ret    
c00238c5:	90                   	nop

c00238c6 <ATAPI::open(int, int, void*)>:
c00238c6:	53                   	push   ebx
c00238c7:	83 ec 08             	sub    esp,0x8
c00238ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00238ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00238d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00238d6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00238dc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00238e2:	c1 e0 06             	shl    eax,0x6
c00238e5:	01 d0                	add    eax,edx
c00238e7:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00238ee:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00238f4:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00238fb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0023905:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002390b:	6a 04                	push   0x4
c002390d:	6a 0c                	push   0xc
c002390f:	51                   	push   ecx
c0023910:	52                   	push   edx
c0023911:	e8 44 e5 ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023916:	90                   	nop
c0023917:	90                   	nop
c0023918:	6a 00                	push   0x0
c002391a:	6a 0c                	push   0xc
c002391c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023923:	50                   	push   eax
c0023924:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002392a:	e8 2b e5 ff ff       	call   c0021e5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002392f:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023936:	83 c4 14             	add    esp,0x14
c0023939:	53                   	push   ebx
c002393a:	e8 cb fe ff ff       	call   c002380a <ATAPI::detectMedia()>
c002393f:	31 c0                	xor    eax,eax
c0023941:	83 c4 18             	add    esp,0x18
c0023944:	5b                   	pop    ebx
c0023945:	c3                   	ret    

c0023946 <ATAPI::read(unsigned long long, int, void*)>:
c0023946:	55                   	push   ebp
c0023947:	57                   	push   edi
c0023948:	56                   	push   esi
c0023949:	53                   	push   ebx
c002394a:	83 ec 1c             	sub    esp,0x1c
c002394d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023951:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023955:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0023959:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023960:	74 41                	je     c00239a3 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0023962:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023966:	b9 03 00 00 00       	mov    ecx,0x3
c002396b:	fc                   	cld    
c002396c:	31 c0                	xor    eax,eax
c002396e:	86 fb                	xchg   bl,bh
c0023970:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023972:	c1 c3 10             	rol    ebx,0x10
c0023975:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002397a:	89 e8                	mov    eax,ebp
c002397c:	86 fb                	xchg   bl,bh
c002397e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0023982:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0023986:	50                   	push   eax
c0023987:	50                   	push   eax
c0023988:	55                   	push   ebp
c0023989:	c1 e5 0b             	shl    ebp,0xb
c002398c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023990:	6a 00                	push   0x0
c0023992:	55                   	push   ebp
c0023993:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023997:	50                   	push   eax
c0023998:	56                   	push   esi
c0023999:	e8 1c fb ff ff       	call   c00234ba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002399e:	83 c4 20             	add    esp,0x20
c00239a1:	eb 1a                	jmp    c00239bd <ATAPI::read(unsigned long long, int, void*)+0x77>
c00239a3:	83 ec 0c             	sub    esp,0xc
c00239a6:	56                   	push   esi
c00239a7:	e8 5e fe ff ff       	call   c002380a <ATAPI::detectMedia()>
c00239ac:	83 c4 10             	add    esp,0x10
c00239af:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00239b6:	75 aa                	jne    c0023962 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00239b8:	b8 02 00 00 00       	mov    eax,0x2
c00239bd:	83 c4 1c             	add    esp,0x1c
c00239c0:	5b                   	pop    ebx
c00239c1:	5e                   	pop    esi
c00239c2:	5f                   	pop    edi
c00239c3:	5d                   	pop    ebp
c00239c4:	c3                   	ret    
c00239c5:	90                   	nop

c00239c6 <SATA::close(int, int, void*)>:
c00239c6:	83 ec 0c             	sub    esp,0xc
c00239c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239cd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00239d3:	85 c0                	test   eax,eax
c00239d5:	74 0c                	je     c00239e3 <SATA::close(int, int, void*)+0x1d>
c00239d7:	83 ec 0c             	sub    esp,0xc
c00239da:	8b 10                	mov    edx,DWORD PTR [eax]
c00239dc:	50                   	push   eax
c00239dd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00239e0:	83 c4 10             	add    esp,0x10
c00239e3:	31 c0                	xor    eax,eax
c00239e5:	83 c4 0c             	add    esp,0xc
c00239e8:	c3                   	ret    
c00239e9:	90                   	nop

c00239ea <SATA::powerSaving(PowerSavingLevel)>:
c00239ea:	c3                   	ret    
c00239eb:	90                   	nop

c00239ec <SATA::open(int, int, void*)>:
c00239ec:	53                   	push   ebx
c00239ed:	83 ec 14             	sub    esp,0x14
c00239f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00239f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00239f8:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023a02:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0023a08:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c0023a12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023a16:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023a20:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0023a26:	68 00 b3 02 c0       	push   0xc002b300
c0023a2b:	e8 55 ec fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0023a30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023a33:	e8 b4 04 ff ff       	call   c0013eec <PhysicalDisk::startCache()>
c0023a38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023a3b:	e8 d6 24 ff ff       	call   c0015f16 <createPartitionsForDisk(PhysicalDisk*)>
c0023a40:	31 c0                	xor    eax,eax
c0023a42:	83 c4 18             	add    esp,0x18
c0023a45:	5b                   	pop    ebx
c0023a46:	c3                   	ret    
c0023a47:	90                   	nop

c0023a48 <SATA::SATA()>:
c0023a48:	83 ec 0c             	sub    esp,0xc
c0023a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a4f:	83 ec 04             	sub    esp,0x4
c0023a52:	68 00 02 00 00       	push   0x200
c0023a57:	68 1b b3 02 c0       	push   0xc002b31b
c0023a5c:	50                   	push   eax
c0023a5d:	e8 22 04 ff ff       	call   c0013e84 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023a62:	83 c4 10             	add    esp,0x10
c0023a65:	ba f8 b3 02 c0       	mov    edx,0xc002b3f8
c0023a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a6e:	89 10                	mov    DWORD PTR [eax],edx
c0023a70:	90                   	nop
c0023a71:	83 c4 0c             	add    esp,0xc
c0023a74:	c3                   	ret    
c0023a75:	90                   	nop

c0023a76 <SATA::access(unsigned long long, int, void*, bool)>:
c0023a76:	55                   	push   ebp
c0023a77:	57                   	push   edi
c0023a78:	56                   	push   esi
c0023a79:	53                   	push   ebx
c0023a7a:	81 ec 2c 04 00 00    	sub    esp,0x42c
c0023a80:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0023a87:	8b bc 24 4c 04 00 00 	mov    edi,DWORD PTR [esp+0x44c]
c0023a8e:	8b 9c 24 40 04 00 00 	mov    ebx,DWORD PTR [esp+0x440]
c0023a95:	8b b4 24 44 04 00 00 	mov    esi,DWORD PTR [esp+0x444]
c0023a9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023aa0:	83 ff 08             	cmp    edi,0x8
c0023aa3:	7e 10                	jle    c0023ab5 <SATA::access(unsigned long long, int, void*, bool)+0x3f>
c0023aa5:	83 ec 0c             	sub    esp,0xc
c0023aa8:	68 2b b3 02 c0       	push   0xc002b32b
c0023aad:	e8 ed 5c ff ff       	call   c001979f <Krnl::panic(char const*)>
c0023ab2:	83 c4 10             	add    esp,0x10
c0023ab5:	51                   	push   ecx
c0023ab6:	68 00 02 00 00       	push   0x200
c0023abb:	68 ee 00 00 00       	push   0xee
c0023ac0:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0023ac4:	55                   	push   ebp
c0023ac5:	e8 c1 cb fd ff       	call   c000068b <memset>
c0023aca:	83 c4 0c             	add    esp,0xc
c0023acd:	68 00 02 00 00       	push   0x200
c0023ad2:	68 ee 00 00 00       	push   0xee
c0023ad7:	8d 84 24 2c 02 00 00 	lea    eax,[esp+0x22c]
c0023ade:	50                   	push   eax
c0023adf:	e8 a7 cb fd ff       	call   c000068b <memset>
c0023ae4:	55                   	push   ebp
c0023ae5:	57                   	push   edi
c0023ae6:	56                   	push   esi
c0023ae7:	68 5d b3 02 c0       	push   0xc002b35d
c0023aec:	e8 94 eb fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0023af1:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023af7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023afd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023b01:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023b07:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023b0b:	c1 e0 07             	shl    eax,0x7
c0023b0e:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c0023b12:	83 c4 18             	add    esp,0x18
c0023b15:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0023b1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023b23:	8d 50 02             	lea    edx,[eax+0x2]
c0023b26:	c1 e2 07             	shl    edx,0x7
c0023b29:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c0023b2d:	52                   	push   edx
c0023b2e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023b32:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0023b38:	e8 e1 ef ff ff       	call   c0022b1e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023b3d:	89 c1                	mov    ecx,eax
c0023b3f:	58                   	pop    eax
c0023b40:	5a                   	pop    edx
c0023b41:	51                   	push   ecx
c0023b42:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0023b46:	68 92 b3 02 c0       	push   0xc002b392
c0023b4b:	e8 35 eb fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0023b50:	83 c4 10             	add    esp,0x10
c0023b53:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023b57:	83 f9 ff             	cmp    ecx,0xffffffff
c0023b5a:	0f 84 9a 01 00 00    	je     c0023cfa <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023b60:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023b66:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023b6a:	8b 12                	mov    edx,DWORD PTR [edx]
c0023b6c:	2b 90 5c 01 00 00    	sub    edx,DWORD PTR [eax+0x15c]
c0023b72:	03 90 58 01 00 00    	add    edx,DWORD PTR [eax+0x158]
c0023b78:	89 c8                	mov    eax,ecx
c0023b7a:	c1 e0 05             	shl    eax,0x5
c0023b7d:	01 c2                	add    edx,eax
c0023b7f:	8a 02                	mov    al,BYTE PTR [edx]
c0023b81:	83 e0 a0             	and    eax,0xffffffa0
c0023b84:	83 c8 05             	or     eax,0x5
c0023b87:	88 02                	mov    BYTE PTR [edx],al
c0023b89:	8d 47 ff             	lea    eax,[edi-0x1]
c0023b8c:	c1 f8 04             	sar    eax,0x4
c0023b8f:	40                   	inc    eax
c0023b90:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0023b94:	0f b7 c0             	movzx  eax,ax
c0023b97:	8b 9b 70 01 00 00    	mov    ebx,DWORD PTR [ebx+0x170]
c0023b9d:	83 c0 08             	add    eax,0x8
c0023ba0:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0023ba6:	c1 e0 04             	shl    eax,0x4
c0023ba9:	2b 8b 5c 01 00 00    	sub    ecx,DWORD PTR [ebx+0x15c]
c0023baf:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c0023bb2:	01 cb                	add    ebx,ecx
c0023bb4:	52                   	push   edx
c0023bb5:	50                   	push   eax
c0023bb6:	6a 00                	push   0x0
c0023bb8:	53                   	push   ebx
c0023bb9:	e8 cd ca fd ff       	call   c000068b <memset>
c0023bbe:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0023bc4:	83 c4 10             	add    esp,0x10
c0023bc7:	89 ab 80 00 00 00    	mov    DWORD PTR [ebx+0x80],ebp
c0023bcd:	25 00 00 c0 7f       	and    eax,0x7fc00000
c0023bd2:	8d ac 24 20 02 00 00 	lea    ebp,[esp+0x220]
c0023bd9:	0d ff 01 00 80       	or     eax,0x800001ff
c0023bde:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023be2:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0023be8:	b8 01 00 00 00       	mov    eax,0x1
c0023bed:	89 c2                	mov    edx,eax
c0023bef:	c1 e2 04             	shl    edx,0x4
c0023bf2:	89 ac 13 80 00 00 00 	mov    DWORD PTR [ebx+edx*1+0x80],ebp
c0023bf9:	8d 50 08             	lea    edx,[eax+0x8]
c0023bfc:	40                   	inc    eax
c0023bfd:	c1 e2 04             	shl    edx,0x4
c0023c00:	81 64 13 0c 00 00 c0 7f 	and    DWORD PTR [ebx+edx*1+0xc],0x7fc00000
c0023c08:	83 f8 10             	cmp    eax,0x10
c0023c0b:	75 e0                	jne    c0023bed <SATA::access(unsigned long long, int, void*, bool)+0x177>
c0023c0d:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0023c10:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c0023c14:	66 25 00 7f          	and    ax,0x7f00
c0023c18:	66 89 73 04          	mov    WORD PTR [ebx+0x4],si
c0023c1c:	66 0d 27 80          	or     ax,0x8027
c0023c20:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0023c24:	66 89 03             	mov    WORD PTR [ebx],ax
c0023c27:	66 89 7b 0c          	mov    WORD PTR [ebx+0xc],di
c0023c2b:	89 f0                	mov    eax,esi
c0023c2d:	31 d2                	xor    edx,edx
c0023c2f:	c1 e8 10             	shr    eax,0x10
c0023c32:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0023c35:	89 f0                	mov    eax,esi
c0023c37:	c1 e8 18             	shr    eax,0x18
c0023c3a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0023c3d:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023c41:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0023c44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023c48:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0023c4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c4f:	c1 e0 07             	shl    eax,0x7
c0023c52:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0023c56:	8b 98 20 01 00 00    	mov    ebx,DWORD PTR [eax+0x120]
c0023c5c:	80 e3 88             	and    bl,0x88
c0023c5f:	74 0b                	je     c0023c6c <SATA::access(unsigned long long, int, void*, bool)+0x1f6>
c0023c61:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023c67:	74 0b                	je     c0023c74 <SATA::access(unsigned long long, int, void*, bool)+0x1fe>
c0023c69:	42                   	inc    edx
c0023c6a:	eb ea                	jmp    c0023c56 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c0023c6c:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023c72:	75 0a                	jne    c0023c7e <SATA::access(unsigned long long, int, void*, bool)+0x208>
c0023c74:	83 ec 0c             	sub    esp,0xc
c0023c77:	68 9b b3 02 c0       	push   0xc002b39b
c0023c7c:	eb 60                	jmp    c0023cde <SATA::access(unsigned long long, int, void*, bool)+0x268>
c0023c7e:	be 01 00 00 00       	mov    esi,0x1
c0023c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023c87:	d3 e6                	shl    esi,cl
c0023c89:	c1 e3 07             	shl    ebx,0x7
c0023c8c:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0023c92:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0023c96:	83 ec 0c             	sub    esp,0xc
c0023c99:	68 a9 b3 02 c0       	push   0xc002b3a9
c0023c9e:	e8 e2 e9 fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0023ca3:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0023ca9:	83 c4 10             	add    esp,0x10
c0023cac:	85 c6                	test   esi,eax
c0023cae:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0023cb4:	74 1a                	je     c0023cd0 <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c0023cb6:	0f ba e0 1e          	bt     eax,0x1e
c0023cba:	73 da                	jae    c0023c96 <SATA::access(unsigned long long, int, void*, bool)+0x220>
c0023cbc:	83 ec 0c             	sub    esp,0xc
c0023cbf:	68 b6 b3 02 c0       	push   0xc002b3b6
c0023cc4:	e8 d6 5a ff ff       	call   c001979f <Krnl::panic(char const*)>
c0023cc9:	83 c4 10             	add    esp,0x10
c0023ccc:	31 c0                	xor    eax,eax
c0023cce:	eb 2f                	jmp    c0023cff <SATA::access(unsigned long long, int, void*, bool)+0x289>
c0023cd0:	0f ba e0 1e          	bt     eax,0x1e
c0023cd4:	73 12                	jae    c0023ce8 <SATA::access(unsigned long long, int, void*, bool)+0x272>
c0023cd6:	83 ec 0c             	sub    esp,0xc
c0023cd9:	68 b6 b3 02 c0       	push   0xc002b3b6
c0023cde:	e8 bc 5a ff ff       	call   c001979f <Krnl::panic(char const*)>
c0023ce3:	83 c4 10             	add    esp,0x10
c0023ce6:	eb 12                	jmp    c0023cfa <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023ce8:	83 ec 0c             	sub    esp,0xc
c0023ceb:	68 c7 b3 02 c0       	push   0xc002b3c7
c0023cf0:	e8 aa 5a ff ff       	call   c001979f <Krnl::panic(char const*)>
c0023cf5:	83 c4 10             	add    esp,0x10
c0023cf8:	eb fe                	jmp    c0023cf8 <SATA::access(unsigned long long, int, void*, bool)+0x282>
c0023cfa:	b8 01 00 00 00       	mov    eax,0x1
c0023cff:	81 c4 2c 04 00 00    	add    esp,0x42c
c0023d05:	5b                   	pop    ebx
c0023d06:	5e                   	pop    esi
c0023d07:	5f                   	pop    edi
c0023d08:	5d                   	pop    ebp
c0023d09:	c3                   	ret    

c0023d0a <SATA::read(unsigned long long, int, void*)>:
c0023d0a:	57                   	push   edi
c0023d0b:	b8 04 00 00 00       	mov    eax,0x4
c0023d10:	56                   	push   esi
c0023d11:	53                   	push   ebx
c0023d12:	83 ec 10             	sub    esp,0x10
c0023d15:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023d19:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023d1d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023d20:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023d24:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023d28:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023d2e:	77 3b                	ja     c0023d6b <SATA::read(unsigned long long, int, void*)+0x61>
c0023d30:	b8 06 00 00 00       	mov    eax,0x6
c0023d35:	85 d2                	test   edx,edx
c0023d37:	74 32                	je     c0023d6b <SATA::read(unsigned long long, int, void*)+0x61>
c0023d39:	50                   	push   eax
c0023d3a:	50                   	push   eax
c0023d3b:	6a 00                	push   0x0
c0023d3d:	52                   	push   edx
c0023d3e:	53                   	push   ebx
c0023d3f:	57                   	push   edi
c0023d40:	56                   	push   esi
c0023d41:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023d45:	e8 2c fd ff ff       	call   c0023a76 <SATA::access(unsigned long long, int, void*, bool)>
c0023d4a:	83 c4 20             	add    esp,0x20
c0023d4d:	85 c0                	test   eax,eax
c0023d4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023d53:	75 11                	jne    c0023d66 <SATA::read(unsigned long long, int, void*)+0x5c>
c0023d55:	01 1d 88 eb 02 c0    	add    DWORD PTR ds:0xc002eb88,ebx
c0023d5b:	e8 12 c7 fe ff       	call   c0010472 <VgaText::updateDiskUsage()>
c0023d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023d64:	eb 05                	jmp    c0023d6b <SATA::read(unsigned long long, int, void*)+0x61>
c0023d66:	b8 01 00 00 00       	mov    eax,0x1
c0023d6b:	83 c4 10             	add    esp,0x10
c0023d6e:	5b                   	pop    ebx
c0023d6f:	5e                   	pop    esi
c0023d70:	5f                   	pop    edi
c0023d71:	c3                   	ret    

c0023d72 <SATA::write(unsigned long long, int, void*)>:
c0023d72:	57                   	push   edi
c0023d73:	b8 04 00 00 00       	mov    eax,0x4
c0023d78:	56                   	push   esi
c0023d79:	53                   	push   ebx
c0023d7a:	83 ec 10             	sub    esp,0x10
c0023d7d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023d81:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023d85:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023d88:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023d8c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023d90:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023d96:	77 3b                	ja     c0023dd3 <SATA::write(unsigned long long, int, void*)+0x61>
c0023d98:	b8 06 00 00 00       	mov    eax,0x6
c0023d9d:	85 d2                	test   edx,edx
c0023d9f:	74 32                	je     c0023dd3 <SATA::write(unsigned long long, int, void*)+0x61>
c0023da1:	50                   	push   eax
c0023da2:	50                   	push   eax
c0023da3:	6a 01                	push   0x1
c0023da5:	52                   	push   edx
c0023da6:	53                   	push   ebx
c0023da7:	57                   	push   edi
c0023da8:	56                   	push   esi
c0023da9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023dad:	e8 c4 fc ff ff       	call   c0023a76 <SATA::access(unsigned long long, int, void*, bool)>
c0023db2:	83 c4 20             	add    esp,0x20
c0023db5:	85 c0                	test   eax,eax
c0023db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023dbb:	75 11                	jne    c0023dce <SATA::write(unsigned long long, int, void*)+0x5c>
c0023dbd:	01 1d 84 eb 02 c0    	add    DWORD PTR ds:0xc002eb84,ebx
c0023dc3:	e8 aa c6 fe ff       	call   c0010472 <VgaText::updateDiskUsage()>
c0023dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023dcc:	eb 05                	jmp    c0023dd3 <SATA::write(unsigned long long, int, void*)+0x61>
c0023dce:	b8 01 00 00 00       	mov    eax,0x1
c0023dd3:	83 c4 10             	add    esp,0x10
c0023dd6:	5b                   	pop    ebx
c0023dd7:	5e                   	pop    esi
c0023dd8:	5f                   	pop    edi
c0023dd9:	c3                   	ret    

c0023dda <AVX::open(int, int, void*)>:
c0023dda:	83 ec 0c             	sub    esp,0xc
c0023ddd:	e8 46 11 00 00       	call   c0024f28 <avxInit>
c0023de2:	b8 00 00 00 00       	mov    eax,0x0
c0023de7:	83 c4 0c             	add    esp,0xc
c0023dea:	c3                   	ret    
c0023deb:	90                   	nop

c0023dec <AVX::close(int, int, void*)>:
c0023dec:	83 ec 0c             	sub    esp,0xc
c0023def:	e8 35 11 00 00       	call   c0024f29 <avxClose>
c0023df4:	b8 00 00 00 00       	mov    eax,0x0
c0023df9:	83 c4 0c             	add    esp,0xc
c0023dfc:	c3                   	ret    
c0023dfd:	90                   	nop

c0023dfe <AVX::available()>:
c0023dfe:	83 ec 0c             	sub    esp,0xc
c0023e01:	e8 1a 11 00 00       	call   c0024f20 <avxDetect>
c0023e06:	85 c0                	test   eax,eax
c0023e08:	0f 95 c0             	setne  al
c0023e0b:	83 c4 0c             	add    esp,0xc
c0023e0e:	c3                   	ret    
c0023e0f:	90                   	nop

c0023e10 <AVX::save(void*)>:
c0023e10:	83 ec 0c             	sub    esp,0xc
c0023e13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023e17:	83 ec 0c             	sub    esp,0xc
c0023e1a:	50                   	push   eax
c0023e1b:	e8 06 11 00 00       	call   c0024f26 <avxSave>
c0023e20:	83 c4 10             	add    esp,0x10
c0023e23:	90                   	nop
c0023e24:	83 c4 0c             	add    esp,0xc
c0023e27:	c3                   	ret    

c0023e28 <AVX::load(void*)>:
c0023e28:	83 ec 0c             	sub    esp,0xc
c0023e2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023e2f:	83 ec 0c             	sub    esp,0xc
c0023e32:	50                   	push   eax
c0023e33:	e8 ef 10 00 00       	call   c0024f27 <avxLoad>
c0023e38:	83 c4 10             	add    esp,0x10
c0023e3b:	90                   	nop
c0023e3c:	83 c4 0c             	add    esp,0xc
c0023e3f:	c3                   	ret    

c0023e40 <AVX::AVX()>:
c0023e40:	83 ec 0c             	sub    esp,0xc
c0023e43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e47:	83 ec 08             	sub    esp,0x8
c0023e4a:	68 24 b4 02 c0       	push   0xc002b424
c0023e4f:	50                   	push   eax
c0023e50:	e8 0d 01 ff ff       	call   c0013f62 <FPU::FPU(char const*)>
c0023e55:	83 c4 10             	add    esp,0x10
c0023e58:	ba 34 b4 02 c0       	mov    edx,0xc002b434
c0023e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e61:	89 10                	mov    DWORD PTR [eax],edx
c0023e63:	90                   	nop
c0023e64:	83 c4 0c             	add    esp,0xc
c0023e67:	c3                   	ret    

c0023e68 <MMX::available()>:
c0023e68:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0023e6d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0023e73:	83 e0 20             	and    eax,0x20
c0023e76:	84 c0                	test   al,al
c0023e78:	0f 95 c0             	setne  al
c0023e7b:	c3                   	ret    

c0023e7c <MMX::open(int, int, void*)>:
c0023e7c:	83 ec 0c             	sub    esp,0xc
c0023e7f:	e8 28 11 00 00       	call   c0024fac <x87Init>
c0023e84:	b8 00 00 00 00       	mov    eax,0x0
c0023e89:	83 c4 0c             	add    esp,0xc
c0023e8c:	c3                   	ret    
c0023e8d:	90                   	nop

c0023e8e <MMX::close(int, int, void*)>:
c0023e8e:	83 ec 0c             	sub    esp,0xc
c0023e91:	e8 30 11 00 00       	call   c0024fc6 <x87Close>
c0023e96:	b8 00 00 00 00       	mov    eax,0x0
c0023e9b:	83 c4 0c             	add    esp,0xc
c0023e9e:	c3                   	ret    
c0023e9f:	90                   	nop

c0023ea0 <MMX::save(void*)>:
c0023ea0:	83 ec 0c             	sub    esp,0xc
c0023ea3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023ea7:	83 ec 0c             	sub    esp,0xc
c0023eaa:	50                   	push   eax
c0023eab:	e8 f1 10 00 00       	call   c0024fa1 <x87Save>
c0023eb0:	83 c4 10             	add    esp,0x10
c0023eb3:	90                   	nop
c0023eb4:	83 c4 0c             	add    esp,0xc
c0023eb7:	c3                   	ret    

c0023eb8 <MMX::load(void*)>:
c0023eb8:	83 ec 0c             	sub    esp,0xc
c0023ebb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023ebf:	83 ec 0c             	sub    esp,0xc
c0023ec2:	50                   	push   eax
c0023ec3:	e8 df 10 00 00       	call   c0024fa7 <x87Load>
c0023ec8:	83 c4 10             	add    esp,0x10
c0023ecb:	90                   	nop
c0023ecc:	83 c4 0c             	add    esp,0xc
c0023ecf:	c3                   	ret    

c0023ed0 <MMX::MMX()>:
c0023ed0:	83 ec 0c             	sub    esp,0xc
c0023ed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ed7:	83 ec 08             	sub    esp,0x8
c0023eda:	68 64 b4 02 c0       	push   0xc002b464
c0023edf:	50                   	push   eax
c0023ee0:	e8 7d 00 ff ff       	call   c0013f62 <FPU::FPU(char const*)>
c0023ee5:	83 c4 10             	add    esp,0x10
c0023ee8:	ba 74 b4 02 c0       	mov    edx,0xc002b474
c0023eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ef1:	89 10                	mov    DWORD PTR [eax],edx
c0023ef3:	90                   	nop
c0023ef4:	83 c4 0c             	add    esp,0xc
c0023ef7:	c3                   	ret    

c0023ef8 <SSE::open(int, int, void*)>:
c0023ef8:	83 ec 0c             	sub    esp,0xc
c0023efb:	e8 64 10 00 00       	call   c0024f64 <sseInit>
c0023f00:	b8 00 00 00 00       	mov    eax,0x0
c0023f05:	83 c4 0c             	add    esp,0xc
c0023f08:	c3                   	ret    
c0023f09:	90                   	nop

c0023f0a <SSE::close(int, int, void*)>:
c0023f0a:	83 ec 0c             	sub    esp,0xc
c0023f0d:	e8 62 10 00 00       	call   c0024f74 <sseClose>
c0023f12:	b8 00 00 00 00       	mov    eax,0x0
c0023f17:	83 c4 0c             	add    esp,0xc
c0023f1a:	c3                   	ret    
c0023f1b:	90                   	nop

c0023f1c <SSE::available()>:
c0023f1c:	83 ec 1c             	sub    esp,0x1c
c0023f1f:	e8 1c 10 00 00       	call   c0024f40 <absolutelyNoChanceInHell>
c0023f24:	85 c0                	test   eax,eax
c0023f26:	0f 95 c0             	setne  al
c0023f29:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023f31:	83 c4 1c             	add    esp,0x1c
c0023f34:	c3                   	ret    
c0023f35:	90                   	nop

c0023f36 <SSE::save(void*)>:
c0023f36:	83 ec 0c             	sub    esp,0xc
c0023f39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f3d:	83 ec 0c             	sub    esp,0xc
c0023f40:	50                   	push   eax
c0023f41:	e8 12 10 00 00       	call   c0024f58 <sseSave>
c0023f46:	83 c4 10             	add    esp,0x10
c0023f49:	90                   	nop
c0023f4a:	83 c4 0c             	add    esp,0xc
c0023f4d:	c3                   	ret    

c0023f4e <SSE::load(void*)>:
c0023f4e:	83 ec 0c             	sub    esp,0xc
c0023f51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f55:	83 ec 0c             	sub    esp,0xc
c0023f58:	50                   	push   eax
c0023f59:	e8 00 10 00 00       	call   c0024f5e <sseLoad>
c0023f5e:	83 c4 10             	add    esp,0x10
c0023f61:	90                   	nop
c0023f62:	83 c4 0c             	add    esp,0xc
c0023f65:	c3                   	ret    

c0023f66 <SSE::SSE()>:
c0023f66:	83 ec 0c             	sub    esp,0xc
c0023f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f6d:	83 ec 08             	sub    esp,0x8
c0023f70:	68 a4 b4 02 c0       	push   0xc002b4a4
c0023f75:	50                   	push   eax
c0023f76:	e8 e7 ff fe ff       	call   c0013f62 <FPU::FPU(char const*)>
c0023f7b:	83 c4 10             	add    esp,0x10
c0023f7e:	ba b4 b4 02 c0       	mov    edx,0xc002b4b4
c0023f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f87:	89 10                	mov    DWORD PTR [eax],edx
c0023f89:	90                   	nop
c0023f8a:	83 c4 0c             	add    esp,0xc
c0023f8d:	c3                   	ret    

c0023f8e <x87::open(int, int, void*)>:
c0023f8e:	83 ec 0c             	sub    esp,0xc
c0023f91:	e8 16 10 00 00       	call   c0024fac <x87Init>
c0023f96:	b8 00 00 00 00       	mov    eax,0x0
c0023f9b:	83 c4 0c             	add    esp,0xc
c0023f9e:	c3                   	ret    
c0023f9f:	90                   	nop

c0023fa0 <x87::close(int, int, void*)>:
c0023fa0:	83 ec 0c             	sub    esp,0xc
c0023fa3:	e8 1e 10 00 00       	call   c0024fc6 <x87Close>
c0023fa8:	b8 00 00 00 00       	mov    eax,0x0
c0023fad:	83 c4 0c             	add    esp,0xc
c0023fb0:	c3                   	ret    
c0023fb1:	90                   	nop

c0023fb2 <x87::available()>:
c0023fb2:	83 ec 0c             	sub    esp,0xc
c0023fb5:	e8 cc 0f 00 00       	call   c0024f86 <x87Detect>
c0023fba:	85 c0                	test   eax,eax
c0023fbc:	0f 95 c0             	setne  al
c0023fbf:	83 c4 0c             	add    esp,0xc
c0023fc2:	c3                   	ret    
c0023fc3:	90                   	nop

c0023fc4 <x87::save(void*)>:
c0023fc4:	83 ec 0c             	sub    esp,0xc
c0023fc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fcb:	83 ec 0c             	sub    esp,0xc
c0023fce:	50                   	push   eax
c0023fcf:	e8 cd 0f 00 00       	call   c0024fa1 <x87Save>
c0023fd4:	83 c4 10             	add    esp,0x10
c0023fd7:	90                   	nop
c0023fd8:	83 c4 0c             	add    esp,0xc
c0023fdb:	c3                   	ret    

c0023fdc <x87::load(void*)>:
c0023fdc:	83 ec 0c             	sub    esp,0xc
c0023fdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fe3:	83 ec 0c             	sub    esp,0xc
c0023fe6:	50                   	push   eax
c0023fe7:	e8 bb 0f 00 00       	call   c0024fa7 <x87Load>
c0023fec:	83 c4 10             	add    esp,0x10
c0023fef:	90                   	nop
c0023ff0:	83 c4 0c             	add    esp,0xc
c0023ff3:	c3                   	ret    

c0023ff4 <x87::x87()>:
c0023ff4:	83 ec 0c             	sub    esp,0xc
c0023ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ffb:	83 ec 08             	sub    esp,0x8
c0023ffe:	68 e4 b4 02 c0       	push   0xc002b4e4
c0024003:	50                   	push   eax
c0024004:	e8 59 ff fe ff       	call   c0013f62 <FPU::FPU(char const*)>
c0024009:	83 c4 10             	add    esp,0x10
c002400c:	ba f4 b4 02 c0       	mov    edx,0xc002b4f4
c0024011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024015:	89 10                	mov    DWORD PTR [eax],edx
c0024017:	90                   	nop
c0024018:	83 c4 0c             	add    esp,0xc
c002401b:	c3                   	ret    

c002401c <APIC::disable()>:
c002401c:	90                   	nop
c002401d:	c3                   	ret    

c002401e <APIC::close(int, int, void*)>:
c002401e:	55                   	push   ebp
c002401f:	89 e5                	mov    ebp,esp
c0024021:	83 ec 08             	sub    esp,0x8
c0024024:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024027:	8b 00                	mov    eax,DWORD PTR [eax]
c0024029:	83 c0 3c             	add    eax,0x3c
c002402c:	8b 00                	mov    eax,DWORD PTR [eax]
c002402e:	83 ec 0c             	sub    esp,0xc
c0024031:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024034:	ff d0                	call   eax
c0024036:	83 c4 10             	add    esp,0x10
c0024039:	b8 00 00 00 00       	mov    eax,0x0
c002403e:	c9                   	leave  
c002403f:	c3                   	ret    

c0024040 <IOAPIC::close(int, int, void*)>:
c0024040:	b8 00 00 00 00       	mov    eax,0x0
c0024045:	c3                   	ret    

c0024046 <APIC::io_wait()>:
c0024046:	eb 00                	jmp    c0024048 <APIC::io_wait()+0x2>
c0024048:	eb 00                	jmp    c002404a <APIC::io_wait()+0x4>
c002404a:	90                   	nop
c002404b:	c3                   	ret    

c002404c <APIC::getBase()>:
c002404c:	55                   	push   ebp
c002404d:	89 e5                	mov    ebp,esp
c002404f:	83 ec 18             	sub    esp,0x18
c0024052:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0024057:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002405d:	83 e0 08             	and    eax,0x8
c0024060:	84 c0                	test   al,al
c0024062:	75 07                	jne    c002406b <APIC::getBase()+0x1f>
c0024064:	b8 00 00 00 00       	mov    eax,0x0
c0024069:	eb 21                	jmp    c002408c <APIC::getBase()+0x40>
c002406b:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0024070:	83 ec 08             	sub    esp,0x8
c0024073:	6a 1b                	push   0x1b
c0024075:	50                   	push   eax
c0024076:	e8 01 aa fe ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c002407b:	83 c4 10             	add    esp,0x10
c002407e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024081:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024084:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024087:	25 00 f0 ff ff       	and    eax,0xfffff000
c002408c:	c9                   	leave  
c002408d:	c3                   	ret    

c002408e <APIC::eoi(unsigned char)>:
c002408e:	55                   	push   ebp
c002408f:	89 e5                	mov    ebp,esp
c0024091:	83 ec 28             	sub    esp,0x28
c0024094:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024097:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002409a:	83 ec 0c             	sub    esp,0xc
c002409d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00240a0:	e8 a7 ff ff ff       	call   c002404c <APIC::getBase()>
c00240a5:	83 c4 10             	add    esp,0x10
c00240a8:	05 b0 00 00 00       	add    eax,0xb0
c00240ad:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00240b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00240b3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00240b9:	90                   	nop
c00240ba:	c9                   	leave  
c00240bb:	c3                   	ret    

c00240bc <APIC::open(int, int, void*)>:
c00240bc:	55                   	push   ebp
c00240bd:	89 e5                	mov    ebp,esp
c00240bf:	57                   	push   edi
c00240c0:	56                   	push   esi
c00240c1:	53                   	push   ebx
c00240c2:	83 ec 2c             	sub    esp,0x2c
c00240c5:	83 ec 0c             	sub    esp,0xc
c00240c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00240cb:	e8 7c ff ff ff       	call   c002404c <APIC::getBase()>
c00240d0:	83 c4 10             	add    esp,0x10
c00240d3:	89 c2                	mov    edx,eax
c00240d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00240d8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00240de:	0f b6 f8             	movzx  edi,al
c00240e1:	89 d0                	mov    eax,edx
c00240e3:	ba 00 00 00 00       	mov    edx,0x0
c00240e8:	89 c1                	mov    ecx,eax
c00240ea:	80 e5 ff             	and    ch,0xff
c00240ed:	89 cb                	mov    ebx,ecx
c00240ef:	0f b6 f2             	movzx  esi,dl
c00240f2:	89 d8                	mov    eax,ebx
c00240f4:	89 f2                	mov    edx,esi
c00240f6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00240f9:	8d 5f 08             	lea    ebx,[edi+0x8]
c00240fc:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024100:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024104:	83 e0 00             	and    eax,0x0
c0024107:	09 d0                	or     eax,edx
c0024109:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002410d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024110:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024116:	8d 50 01             	lea    edx,[eax+0x1]
c0024119:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002411c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024122:	0f b6 d0             	movzx  edx,al
c0024125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024128:	83 c2 08             	add    edx,0x8
c002412b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002412f:	0f b6 c9             	movzx  ecx,cl
c0024132:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024138:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002413c:	83 ec 0c             	sub    esp,0xc
c002413f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024142:	e8 05 ff ff ff       	call   c002404c <APIC::getBase()>
c0024147:	83 c4 10             	add    esp,0x10
c002414a:	05 f0 00 00 00       	add    eax,0xf0
c002414f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0024152:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024155:	8b 00                	mov    eax,DWORD PTR [eax]
c0024157:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002415a:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0024161:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0024168:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002416b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002416e:	89 10                	mov    DWORD PTR [eax],edx
c0024170:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0024177:	a1 10 d1 02 c0       	mov    eax,ds:0xc002d110
c002417c:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002417f:	7d 7c                	jge    c00241fd <APIC::open(int, int, void*)+0x141>
c0024181:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024184:	8b 04 85 20 d1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2ee0]
c002418b:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002418e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024191:	8b 04 85 20 d1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2ee0]
c0024198:	c1 e8 08             	shr    eax,0x8
c002419b:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002419f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00241a2:	8b 04 85 20 d1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2ee0]
c00241a9:	c1 e8 18             	shr    eax,0x18
c00241ac:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00241af:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00241b3:	75 40                	jne    c00241f5 <APIC::open(int, int, void*)+0x139>
c00241b5:	83 ec 0c             	sub    esp,0xc
c00241b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00241bb:	e8 8c fe ff ff       	call   c002404c <APIC::getBase()>
c00241c0:	83 c4 10             	add    esp,0x10
c00241c3:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00241c7:	75 07                	jne    c00241d0 <APIC::open(int, int, void*)+0x114>
c00241c9:	ba 60 03 00 00       	mov    edx,0x360
c00241ce:	eb 05                	jmp    c00241d5 <APIC::open(int, int, void*)+0x119>
c00241d0:	ba 50 03 00 00       	mov    edx,0x350
c00241d5:	01 d0                	add    eax,edx
c00241d7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00241da:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00241dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00241df:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00241e2:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00241e9:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00241ed:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00241f0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00241f3:	89 10                	mov    DWORD PTR [eax],edx
c00241f5:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00241f8:	e9 7a ff ff ff       	jmp    c0024177 <APIC::open(int, int, void*)+0xbb>
c00241fd:	b8 00 00 00 00       	mov    eax,0x0
c0024202:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024205:	5b                   	pop    ebx
c0024206:	5e                   	pop    esi
c0024207:	5f                   	pop    edi
c0024208:	5d                   	pop    ebp
c0024209:	c3                   	ret    

c002420a <IOAPIC::IOAPIC()>:
c002420a:	83 ec 0c             	sub    esp,0xc
c002420d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024211:	83 ec 08             	sub    esp,0x8
c0024214:	68 24 b5 02 c0       	push   0xc002b524
c0024219:	50                   	push   eax
c002421a:	e8 45 fa fe ff       	call   c0013c64 <Device::Device(char const*)>
c002421f:	83 c4 10             	add    esp,0x10
c0024222:	ba 4c b6 02 c0       	mov    edx,0xc002b64c
c0024227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002422b:	89 10                	mov    DWORD PTR [eax],edx
c002422d:	90                   	nop
c002422e:	83 c4 0c             	add    esp,0xc
c0024231:	c3                   	ret    

c0024232 <APIC::APIC()>:
c0024232:	53                   	push   ebx
c0024233:	83 ec 18             	sub    esp,0x18
c0024236:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002423a:	83 ec 08             	sub    esp,0x8
c002423d:	68 2c b5 02 c0       	push   0xc002b52c
c0024242:	50                   	push   eax
c0024243:	e8 74 01 ff ff       	call   c00143bc <InterruptController::InterruptController(char const*)>
c0024248:	83 c4 10             	add    esp,0x10
c002424b:	ba 04 b6 02 c0       	mov    edx,0xc002b604
c0024250:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024254:	89 10                	mov    DWORD PTR [eax],edx
c0024256:	a0 e0 eb 02 c0       	mov    al,ds:0xc002ebe0
c002425b:	83 f0 01             	xor    eax,0x1
c002425e:	84 c0                	test   al,al
c0024260:	0f 84 a1 00 00 00    	je     c0024307 <APIC::APIC()+0xd5>
c0024266:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002426b:	a0 c0 d1 02 c0       	mov    al,ds:0xc002d1c0
c0024270:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0024274:	0f 83 86 00 00 00    	jae    c0024300 <APIC::APIC()+0xce>
c002427a:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0024282:	83 ec 0c             	sub    esp,0xc
c0024285:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024289:	e8 46 b2 fe ff       	call   c000f4d4 <malloc>
c002428e:	83 c4 10             	add    esp,0x10
c0024291:	89 c3                	mov    ebx,eax
c0024293:	83 ec 0c             	sub    esp,0xc
c0024296:	53                   	push   ebx
c0024297:	e8 6e ff ff ff       	call   c002420a <IOAPIC::IOAPIC()>
c002429c:	83 c4 10             	add    esp,0x10
c002429f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00242a3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00242a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00242ac:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c00242b3:	a1 a0 eb 02 c0       	mov    eax,ds:0xc002eba0
c00242b8:	40                   	inc    eax
c00242b9:	a3 a0 eb 02 c0       	mov    ds:0xc002eba0,eax
c00242be:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c00242c3:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00242c9:	83 ec 08             	sub    esp,0x8
c00242cc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00242d0:	50                   	push   eax
c00242d1:	e8 9e f7 fe ff       	call   c0013a74 <Device::addChild(Device*)>
c00242d6:	83 c4 10             	add    esp,0x10
c00242d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00242dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00242df:	83 c0 08             	add    eax,0x8
c00242e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00242e4:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00242e9:	6a 00                	push   0x0
c00242eb:	6a 00                	push   0x0
c00242ed:	52                   	push   edx
c00242ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00242f2:	ff d0                	call   eax
c00242f4:	83 c4 10             	add    esp,0x10
c00242f7:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00242fb:	e9 6b ff ff ff       	jmp    c002426b <APIC::APIC()+0x39>
c0024300:	c6 05 e0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002ebe0,0x1
c0024307:	90                   	nop
c0024308:	83 c4 18             	add    esp,0x18
c002430b:	5b                   	pop    ebx
c002430c:	c3                   	ret    
c002430d:	90                   	nop

c002430e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002430e:	55                   	push   ebp
c002430f:	89 e5                	mov    ebp,esp
c0024311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024314:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002431a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002431d:	72 1d                	jb     c002433c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002431f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024322:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0024328:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002432b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0024331:	01 d0                	add    eax,edx
c0024333:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024336:	73 04                	jae    c002433c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0024338:	b0 01                	mov    al,0x1
c002433a:	eb 02                	jmp    c002433e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002433c:	b0 00                	mov    al,0x0
c002433e:	5d                   	pop    ebp
c002433f:	c3                   	ret    

c0024340 <IOAPIC::read(int)>:
c0024340:	55                   	push   ebp
c0024341:	89 e5                	mov    ebp,esp
c0024343:	83 ec 10             	sub    esp,0x10
c0024346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024349:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002434f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0024352:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024355:	0f b6 d0             	movzx  edx,al
c0024358:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002435b:	89 10                	mov    DWORD PTR [eax],edx
c002435d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024360:	83 c0 10             	add    eax,0x10
c0024363:	8b 00                	mov    eax,DWORD PTR [eax]
c0024365:	c9                   	leave  
c0024366:	c3                   	ret    
c0024367:	90                   	nop

c0024368 <IOAPIC::open(int, int, void*)>:
c0024368:	55                   	push   ebp
c0024369:	89 e5                	mov    ebp,esp
c002436b:	57                   	push   edi
c002436c:	56                   	push   esi
c002436d:	53                   	push   ebx
c002436e:	83 ec 0c             	sub    esp,0xc
c0024371:	83 ec 0c             	sub    esp,0xc
c0024374:	68 57 b5 02 c0       	push   0xc002b557
c0024379:	e8 07 e3 fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c002437e:	83 c4 10             	add    esp,0x10
c0024381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024384:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024387:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002438d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024390:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024396:	8b 14 85 00 d2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2e00]
c002439d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00243a0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00243a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00243a9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00243af:	8b 14 85 80 d2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2d80]
c00243b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00243b9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00243bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00243c2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00243c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00243cb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00243d1:	0f b6 f8             	movzx  edi,al
c00243d4:	89 d0                	mov    eax,edx
c00243d6:	ba 00 00 00 00       	mov    edx,0x0
c00243db:	89 c1                	mov    ecx,eax
c00243dd:	80 e5 ff             	and    ch,0xff
c00243e0:	89 cb                	mov    ebx,ecx
c00243e2:	0f b6 f2             	movzx  esi,dl
c00243e5:	89 d8                	mov    eax,ebx
c00243e7:	89 f2                	mov    edx,esi
c00243e9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00243ec:	8d 5f 08             	lea    ebx,[edi+0x8]
c00243ef:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00243f3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00243f7:	83 e0 00             	and    eax,0x0
c00243fa:	09 d0                	or     eax,edx
c00243fc:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024403:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024409:	8d 50 01             	lea    edx,[eax+0x1]
c002440c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002440f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024415:	0f b6 d0             	movzx  edx,al
c0024418:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002441b:	83 c2 08             	add    edx,0x8
c002441e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024422:	0f b6 c9             	movzx  ecx,cl
c0024425:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002442b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002442f:	83 ec 08             	sub    esp,0x8
c0024432:	6a 01                	push   0x1
c0024434:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024437:	e8 04 ff ff ff       	call   c0024340 <IOAPIC::read(int)>
c002443c:	83 c4 10             	add    esp,0x10
c002443f:	c1 f8 10             	sar    eax,0x10
c0024442:	0f b6 c0             	movzx  eax,al
c0024445:	8d 50 01             	lea    edx,[eax+0x1]
c0024448:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002444b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0024451:	b8 00 00 00 00       	mov    eax,0x0
c0024456:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024459:	5b                   	pop    ebx
c002445a:	5e                   	pop    esi
c002445b:	5f                   	pop    edi
c002445c:	5d                   	pop    ebp
c002445d:	c3                   	ret    

c002445e <IOAPIC::write(int, int)>:
c002445e:	55                   	push   ebp
c002445f:	89 e5                	mov    ebp,esp
c0024461:	83 ec 10             	sub    esp,0x10
c0024464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024467:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002446d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0024470:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024473:	0f b6 d0             	movzx  edx,al
c0024476:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024479:	89 10                	mov    DWORD PTR [eax],edx
c002447b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002447e:	8d 50 10             	lea    edx,[eax+0x10]
c0024481:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024484:	89 02                	mov    DWORD PTR [edx],eax
c0024486:	90                   	nop
c0024487:	c9                   	leave  
c0024488:	c3                   	ret    
c0024489:	90                   	nop

c002448a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002448a:	55                   	push   ebp
c002448b:	89 e5                	mov    ebp,esp
c002448d:	53                   	push   ebx
c002448e:	83 ec 2c             	sub    esp,0x2c
c0024491:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024494:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0024497:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002449a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002449d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00244a0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00244a3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00244a6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00244a9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00244ac:	88 d8                	mov    al,bl
c00244ae:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00244b1:	88 c8                	mov    al,cl
c00244b3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00244b6:	88 d0                	mov    al,dl
c00244b8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00244bb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00244bf:	83 c0 08             	add    eax,0x8
c00244c2:	01 c0                	add    eax,eax
c00244c4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00244c7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00244cb:	83 c0 08             	add    eax,0x8
c00244ce:	01 c0                	add    eax,eax
c00244d0:	40                   	inc    eax
c00244d1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00244d4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00244d7:	50                   	push   eax
c00244d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00244db:	e8 60 fe ff ff       	call   c0024340 <IOAPIC::read(int)>
c00244e0:	83 c4 08             	add    esp,0x8
c00244e3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00244e6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00244ed:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00244f0:	c1 e0 18             	shl    eax,0x18
c00244f3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00244f6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00244f9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00244fc:	52                   	push   edx
c00244fd:	50                   	push   eax
c00244fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024501:	e8 58 ff ff ff       	call   c002445e <IOAPIC::write(int, int)>
c0024506:	83 c4 0c             	add    esp,0xc
c0024509:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002450c:	50                   	push   eax
c002450d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024510:	e8 2b fe ff ff       	call   c0024340 <IOAPIC::read(int)>
c0024515:	83 c4 08             	add    esp,0x8
c0024518:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002451b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0024522:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0024529:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0024530:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0024534:	74 09                	je     c002453f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0024536:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002453d:	eb 07                	jmp    c0024546 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002453f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0024546:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002454a:	74 09                	je     c0024555 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002454c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0024553:	eb 07                	jmp    c002455c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0024555:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002455c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0024563:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0024567:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002456a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002456d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024570:	52                   	push   edx
c0024571:	50                   	push   eax
c0024572:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024575:	e8 e4 fe ff ff       	call   c002445e <IOAPIC::write(int, int)>
c002457a:	83 c4 0c             	add    esp,0xc
c002457d:	90                   	nop
c002457e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0024581:	c9                   	leave  
c0024582:	c3                   	ret    
c0024583:	90                   	nop

c0024584 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0024584:	55                   	push   ebp
c0024585:	89 e5                	mov    ebp,esp
c0024587:	57                   	push   edi
c0024588:	56                   	push   esi
c0024589:	53                   	push   ebx
c002458a:	83 ec 2c             	sub    esp,0x2c
c002458d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0024590:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0024593:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0024597:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002459b:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002459f:	74 5a                	je     c00245fb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00245a1:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00245a5:	7f 44                	jg     c00245eb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00245a7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00245aa:	05 a0 ba 02 c0       	add    eax,0xc002baa0
c00245af:	8a 00                	mov    al,BYTE PTR [eax]
c00245b1:	0f b6 c0             	movzx  eax,al
c00245b4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00245b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00245ba:	66 8b 84 00 a0 d1 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2e60]
c00245c2:	0f b7 c0             	movzx  eax,ax
c00245c5:	83 e0 02             	and    eax,0x2
c00245c8:	85 c0                	test   eax,eax
c00245ca:	74 04                	je     c00245d0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00245cc:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00245d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00245d3:	66 8b 84 00 a0 d1 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2e60]
c00245db:	0f b7 c0             	movzx  eax,ax
c00245de:	83 e0 08             	and    eax,0x8
c00245e1:	85 c0                	test   eax,eax
c00245e3:	74 16                	je     c00245fb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00245e5:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00245e9:	eb 10                	jmp    c00245fb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00245eb:	83 ec 0c             	sub    esp,0xc
c00245ee:	68 68 b5 02 c0       	push   0xc002b568
c00245f3:	e8 a7 51 ff ff       	call   c001979f <Krnl::panic(char const*)>
c00245f8:	83 c4 10             	add    esp,0x10
c00245fb:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00245ff:	a1 a0 eb 02 c0       	mov    eax,ds:0xc002eba0
c0024604:	83 ec 08             	sub    esp,0x8
c0024607:	50                   	push   eax
c0024608:	68 a0 b5 02 c0       	push   0xc002b5a0
c002460d:	e8 73 e0 fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0024612:	83 c4 10             	add    esp,0x10
c0024615:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c002461c:	a1 a0 eb 02 c0       	mov    eax,ds:0xc002eba0
c0024621:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0024624:	7d 67                	jge    c002468d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024626:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024629:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c0024630:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024633:	83 ec 08             	sub    esp,0x8
c0024636:	52                   	push   edx
c0024637:	50                   	push   eax
c0024638:	e8 d1 fc ff ff       	call   c002430e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c002463d:	83 c4 10             	add    esp,0x10
c0024640:	84 c0                	test   al,al
c0024642:	74 44                	je     c0024688 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0024644:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024647:	8b 1c 85 c0 eb 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd1440]
c002464e:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0024652:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024655:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0024659:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002465c:	83 c0 20             	add    eax,0x20
c002465f:	0f b6 f0             	movzx  esi,al
c0024662:	b8 00 00 00 00       	mov    eax,0x0
c0024667:	99                   	cdq    
c0024668:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002466b:	0f b6 c9             	movzx  ecx,cl
c002466e:	83 ec 04             	sub    esp,0x4
c0024671:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0024674:	57                   	push   edi
c0024675:	56                   	push   esi
c0024676:	52                   	push   edx
c0024677:	50                   	push   eax
c0024678:	51                   	push   ecx
c0024679:	53                   	push   ebx
c002467a:	e8 0b fe ff ff       	call   c002448a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c002467f:	83 c4 20             	add    esp,0x20
c0024682:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0024686:	eb 05                	jmp    c002468d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024688:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002468b:	eb 8f                	jmp    c002461c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c002468d:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0024690:	83 f0 01             	xor    eax,0x1
c0024693:	84 c0                	test   al,al
c0024695:	74 10                	je     c00246a7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0024697:	83 ec 0c             	sub    esp,0xc
c002469a:	68 b7 b5 02 c0       	push   0xc002b5b7
c002469f:	e8 fb 50 ff ff       	call   c001979f <Krnl::panic(char const*)>
c00246a4:	83 c4 10             	add    esp,0x10
c00246a7:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00246ab:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00246b2:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00246b6:	7f 65                	jg     c002471d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00246b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00246bb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00246be:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00246c5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00246c8:	01 ca                	add    edx,ecx
c00246ca:	83 c2 54             	add    edx,0x54
c00246cd:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00246d1:	85 c0                	test   eax,eax
c00246d3:	75 43                	jne    c0024718 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00246d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00246d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00246db:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00246e2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00246e5:	01 ca                	add    edx,ecx
c00246e7:	8d 4a 54             	lea    ecx,[edx+0x54]
c00246ea:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00246ed:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00246f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00246f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00246f7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00246fe:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024701:	01 ca                	add    edx,ecx
c0024703:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0024709:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002470c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0024710:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024713:	83 e8 20             	sub    eax,0x20
c0024716:	eb 1a                	jmp    c0024732 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0024718:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002471b:	eb 95                	jmp    c00246b2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c002471d:	83 ec 0c             	sub    esp,0xc
c0024720:	68 c4 b5 02 c0       	push   0xc002b5c4
c0024725:	e8 75 50 ff ff       	call   c001979f <Krnl::panic(char const*)>
c002472a:	83 c4 10             	add    esp,0x10
c002472d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024732:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024735:	5b                   	pop    ebx
c0024736:	5e                   	pop    esi
c0024737:	5f                   	pop    edi
c0024738:	5d                   	pop    ebp
c0024739:	c3                   	ret    

c002473a <PIC::disable()>:
c002473a:	55                   	push   ebp
c002473b:	89 e5                	mov    ebp,esp
c002473d:	83 ec 10             	sub    esp,0x10
c0024740:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0024746:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002474a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002474d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024751:	ee                   	out    dx,al
c0024752:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0024758:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002475c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002475f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0024763:	ee                   	out    dx,al
c0024764:	90                   	nop
c0024765:	c9                   	leave  
c0024766:	c3                   	ret    
c0024767:	90                   	nop

c0024768 <PIC::close(int, int, void*)>:
c0024768:	55                   	push   ebp
c0024769:	89 e5                	mov    ebp,esp
c002476b:	83 ec 08             	sub    esp,0x8
c002476e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024771:	8b 00                	mov    eax,DWORD PTR [eax]
c0024773:	83 c0 3c             	add    eax,0x3c
c0024776:	8b 00                	mov    eax,DWORD PTR [eax]
c0024778:	83 ec 0c             	sub    esp,0xc
c002477b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002477e:	ff d0                	call   eax
c0024780:	83 c4 10             	add    esp,0x10
c0024783:	b8 00 00 00 00       	mov    eax,0x0
c0024788:	c9                   	leave  
c0024789:	c3                   	ret    

c002478a <PIC::PIC()>:
c002478a:	83 ec 0c             	sub    esp,0xc
c002478d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024791:	83 ec 08             	sub    esp,0x8
c0024794:	68 70 b6 02 c0       	push   0xc002b670
c0024799:	50                   	push   eax
c002479a:	e8 1d fc fe ff       	call   c00143bc <InterruptController::InterruptController(char const*)>
c002479f:	83 c4 10             	add    esp,0x10
c00247a2:	ba 9c b6 02 c0       	mov    edx,0xc002b69c
c00247a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247ab:	89 10                	mov    DWORD PTR [eax],edx
c00247ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00247b7:	0f b6 d0             	movzx  edx,al
c00247ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247be:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00247c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247c9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00247cf:	0f b6 d0             	movzx  edx,al
c00247d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247d6:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00247db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247df:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00247e5:	8d 50 01             	lea    edx,[eax+0x1]
c00247e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00247ec:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00247f2:	0f b6 d0             	movzx  edx,al
c00247f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247f9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00247fd:	83 e1 3f             	and    ecx,0x3f
c0024800:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024808:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002480e:	0f b6 d0             	movzx  edx,al
c0024811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024815:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c002481c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024820:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024826:	0f b6 d0             	movzx  edx,al
c0024829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002482d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0024832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024836:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002483c:	8d 50 01             	lea    edx,[eax+0x1]
c002483f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024843:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024849:	0f b6 d0             	movzx  edx,al
c002484c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024850:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024854:	83 e1 3f             	and    ecx,0x3f
c0024857:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002485b:	90                   	nop
c002485c:	83 c4 0c             	add    esp,0xc
c002485f:	c3                   	ret    

c0024860 <PIC::ioWait()>:
c0024860:	eb 00                	jmp    c0024862 <PIC::ioWait()+0x2>
c0024862:	eb 00                	jmp    c0024864 <PIC::ioWait()+0x4>
c0024864:	90                   	nop
c0024865:	c3                   	ret    

c0024866 <PIC::getIRQReg(int)>:
c0024866:	55                   	push   ebp
c0024867:	89 e5                	mov    ebp,esp
c0024869:	83 ec 10             	sub    esp,0x10
c002486c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002486f:	0f b6 c0             	movzx  eax,al
c0024872:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024878:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002487b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002487e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024882:	ee                   	out    dx,al
c0024883:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024886:	0f b6 c0             	movzx  eax,al
c0024889:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002488f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0024892:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024895:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024899:	ee                   	out    dx,al
c002489a:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00248a0:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00248a4:	89 c2                	mov    edx,eax
c00248a6:	ec                   	in     al,dx
c00248a7:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00248aa:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00248ad:	0f b6 c0             	movzx  eax,al
c00248b0:	c1 e0 08             	shl    eax,0x8
c00248b3:	89 c1                	mov    ecx,eax
c00248b5:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00248bb:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00248bf:	89 c2                	mov    edx,eax
c00248c1:	ec                   	in     al,dx
c00248c2:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00248c5:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00248c8:	0f b6 c0             	movzx  eax,al
c00248cb:	09 c8                	or     eax,ecx
c00248cd:	c9                   	leave  
c00248ce:	c3                   	ret    
c00248cf:	90                   	nop

c00248d0 <PIC::eoi(unsigned char)>:
c00248d0:	55                   	push   ebp
c00248d1:	89 e5                	mov    ebp,esp
c00248d3:	83 ec 14             	sub    esp,0x14
c00248d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00248d9:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00248dc:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00248e0:	75 1e                	jne    c0024900 <PIC::eoi(unsigned char)+0x30>
c00248e2:	6a 0b                	push   0xb
c00248e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00248e7:	e8 7a ff ff ff       	call   c0024866 <PIC::getIRQReg(int)>
c00248ec:	83 c4 08             	add    esp,0x8
c00248ef:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00248f3:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00248f7:	25 80 00 00 00       	and    eax,0x80
c00248fc:	85 c0                	test   eax,eax
c00248fe:	74 5f                	je     c002495f <PIC::eoi(unsigned char)+0x8f>
c0024900:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0024904:	75 2d                	jne    c0024933 <PIC::eoi(unsigned char)+0x63>
c0024906:	6a 0b                	push   0xb
c0024908:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002490b:	e8 56 ff ff ff       	call   c0024866 <PIC::getIRQReg(int)>
c0024910:	83 c4 08             	add    esp,0x8
c0024913:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0024917:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002491a:	66 85 c0             	test   ax,ax
c002491d:	78 14                	js     c0024933 <PIC::eoi(unsigned char)+0x63>
c002491f:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0024925:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0024929:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002492c:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024930:	ee                   	out    dx,al
c0024931:	eb 2d                	jmp    c0024960 <PIC::eoi(unsigned char)+0x90>
c0024933:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024937:	76 12                	jbe    c002494b <PIC::eoi(unsigned char)+0x7b>
c0024939:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002493f:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0024943:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024946:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002494a:	ee                   	out    dx,al
c002494b:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024951:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0024955:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024958:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002495c:	ee                   	out    dx,al
c002495d:	eb 01                	jmp    c0024960 <PIC::eoi(unsigned char)+0x90>
c002495f:	90                   	nop
c0024960:	c9                   	leave  
c0024961:	c3                   	ret    

c0024962 <PIC::remap()>:
c0024962:	55                   	push   ebp
c0024963:	89 e5                	mov    ebp,esp
c0024965:	83 ec 48             	sub    esp,0x48
c0024968:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002496f:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0024976:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002497c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002497f:	89 c2                	mov    edx,eax
c0024981:	ec                   	in     al,dx
c0024982:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0024985:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0024988:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002498b:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0024991:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0024994:	89 c2                	mov    edx,eax
c0024996:	ec                   	in     al,dx
c0024997:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002499a:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002499d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00249a0:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00249a6:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00249aa:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00249ad:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00249b0:	ee                   	out    dx,al
c00249b1:	83 ec 0c             	sub    esp,0xc
c00249b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00249b7:	e8 a4 fe ff ff       	call   c0024860 <PIC::ioWait()>
c00249bc:	83 c4 10             	add    esp,0x10
c00249bf:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00249c5:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00249c9:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00249cc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00249cf:	ee                   	out    dx,al
c00249d0:	83 ec 0c             	sub    esp,0xc
c00249d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00249d6:	e8 85 fe ff ff       	call   c0024860 <PIC::ioWait()>
c00249db:	83 c4 10             	add    esp,0x10
c00249de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00249e1:	0f b6 c0             	movzx  eax,al
c00249e4:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00249ea:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00249ed:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00249f0:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00249f3:	ee                   	out    dx,al
c00249f4:	83 ec 0c             	sub    esp,0xc
c00249f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00249fa:	e8 61 fe ff ff       	call   c0024860 <PIC::ioWait()>
c00249ff:	83 c4 10             	add    esp,0x10
c0024a02:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024a05:	0f b6 c0             	movzx  eax,al
c0024a08:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0024a0e:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0024a11:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0024a14:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024a17:	ee                   	out    dx,al
c0024a18:	83 ec 0c             	sub    esp,0xc
c0024a1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a1e:	e8 3d fe ff ff       	call   c0024860 <PIC::ioWait()>
c0024a23:	83 c4 10             	add    esp,0x10
c0024a26:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0024a2c:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0024a30:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0024a33:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0024a36:	ee                   	out    dx,al
c0024a37:	83 ec 0c             	sub    esp,0xc
c0024a3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a3d:	e8 1e fe ff ff       	call   c0024860 <PIC::ioWait()>
c0024a42:	83 c4 10             	add    esp,0x10
c0024a45:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0024a4b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0024a4f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0024a52:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024a55:	ee                   	out    dx,al
c0024a56:	83 ec 0c             	sub    esp,0xc
c0024a59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a5c:	e8 ff fd ff ff       	call   c0024860 <PIC::ioWait()>
c0024a61:	83 c4 10             	add    esp,0x10
c0024a64:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0024a6a:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0024a6e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0024a71:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024a74:	ee                   	out    dx,al
c0024a75:	83 ec 0c             	sub    esp,0xc
c0024a78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a7b:	e8 e0 fd ff ff       	call   c0024860 <PIC::ioWait()>
c0024a80:	83 c4 10             	add    esp,0x10
c0024a83:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0024a89:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0024a8d:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0024a90:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024a93:	ee                   	out    dx,al
c0024a94:	83 ec 0c             	sub    esp,0xc
c0024a97:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a9a:	e8 c1 fd ff ff       	call   c0024860 <PIC::ioWait()>
c0024a9f:	83 c4 10             	add    esp,0x10
c0024aa2:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0024aa6:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0024aac:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0024aaf:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0024ab2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024ab5:	ee                   	out    dx,al
c0024ab6:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0024aba:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0024ac0:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0024ac3:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0024ac6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024ac9:	ee                   	out    dx,al
c0024aca:	90                   	nop
c0024acb:	c9                   	leave  
c0024acc:	c3                   	ret    
c0024acd:	90                   	nop

c0024ace <PIC::open(int, int, void*)>:
c0024ace:	55                   	push   ebp
c0024acf:	89 e5                	mov    ebp,esp
c0024ad1:	83 ec 18             	sub    esp,0x18
c0024ad4:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0024ada:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0024ade:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024ae1:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024ae5:	ee                   	out    dx,al
c0024ae6:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0024aec:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0024af0:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024af3:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024af7:	ee                   	out    dx,al
c0024af8:	83 ec 0c             	sub    esp,0xc
c0024afb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024afe:	e8 5f fe ff ff       	call   c0024962 <PIC::remap()>
c0024b03:	83 c4 10             	add    esp,0x10
c0024b06:	b8 00 00 00 00       	mov    eax,0x0
c0024b0b:	c9                   	leave  
c0024b0c:	c3                   	ret    
c0024b0d:	90                   	nop

c0024b0e <APICTimer::close(int, int, void*)>:
c0024b0e:	b8 00 00 00 00       	mov    eax,0x0
c0024b13:	c3                   	ret    

c0024b14 <apicTimerHandler(regs*, void*)>:
c0024b14:	83 ec 0c             	sub    esp,0xc
c0024b17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0024b1d:	99                   	cdq    
c0024b1e:	52                   	push   edx
c0024b1f:	50                   	push   eax
c0024b20:	6a 00                	push   0x0
c0024b22:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024b27:	e8 90 07 00 00       	call   c00252bc <__udivdi3>
c0024b2c:	83 c4 10             	add    esp,0x10
c0024b2f:	83 ec 08             	sub    esp,0x8
c0024b32:	52                   	push   edx
c0024b33:	50                   	push   eax
c0024b34:	e8 82 17 ff ff       	call   c00162bb <timerHandler(unsigned long long)>
c0024b39:	83 c4 10             	add    esp,0x10
c0024b3c:	90                   	nop
c0024b3d:	83 c4 0c             	add    esp,0xc
c0024b40:	c3                   	ret    
c0024b41:	90                   	nop

c0024b42 <APICTimer::write(int)>:
c0024b42:	53                   	push   ebx
c0024b43:	83 ec 28             	sub    esp,0x28
c0024b46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024b4a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0024b4e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024b54:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0024b59:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024b5f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024b65:	83 ec 0c             	sub    esp,0xc
c0024b68:	50                   	push   eax
c0024b69:	e8 de f4 ff ff       	call   c002404c <APIC::getBase()>
c0024b6e:	83 c4 10             	add    esp,0x10
c0024b71:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024b75:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c0024b7a:	8b 15 d4 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002ced4
c0024b80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024b84:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0024b88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b8c:	05 e0 03 00 00       	add    eax,0x3e0
c0024b91:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024b97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b9b:	05 80 03 00 00       	add    eax,0x380
c0024ba0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0024ba6:	fb                   	sti    
c0024ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024baf:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0024bb4:	83 d2 00             	adc    edx,0x0
c0024bb7:	89 c1                	mov    ecx,eax
c0024bb9:	89 d3                	mov    ebx,edx
c0024bbb:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c0024bc0:	8b 15 d4 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002ced4
c0024bc6:	39 c8                	cmp    eax,ecx
c0024bc8:	89 d0                	mov    eax,edx
c0024bca:	19 d8                	sbb    eax,ebx
c0024bcc:	73 02                	jae    c0024bd0 <APICTimer::write(int)+0x8e>
c0024bce:	eb d7                	jmp    c0024ba7 <APICTimer::write(int)+0x65>
c0024bd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024bd4:	05 20 03 00 00       	add    eax,0x320
c0024bd9:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0024bdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024be3:	05 90 03 00 00       	add    eax,0x390
c0024be8:	8b 00                	mov    eax,DWORD PTR [eax]
c0024bea:	f7 d0                	not    eax
c0024bec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024bf0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024bf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024bf8:	ba 00 00 00 00       	mov    edx,0x0
c0024bfd:	f7 f3                	div    ebx
c0024bff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024c03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024c07:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024c0d:	0d 00 00 02 00       	or     eax,0x20000
c0024c12:	89 c2                	mov    edx,eax
c0024c14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c18:	05 20 03 00 00       	add    eax,0x320
c0024c1d:	89 10                	mov    DWORD PTR [eax],edx
c0024c1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c23:	05 e0 03 00 00       	add    eax,0x3e0
c0024c28:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024c2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c32:	05 80 03 00 00       	add    eax,0x380
c0024c37:	89 c2                	mov    edx,eax
c0024c39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024c3d:	89 02                	mov    DWORD PTR [edx],eax
c0024c3f:	90                   	nop
c0024c40:	83 c4 28             	add    esp,0x28
c0024c43:	5b                   	pop    ebx
c0024c44:	c3                   	ret    
c0024c45:	90                   	nop

c0024c46 <APICTimer::open(int, int, void*)>:
c0024c46:	57                   	push   edi
c0024c47:	56                   	push   esi
c0024c48:	53                   	push   ebx
c0024c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c4f:	83 c0 24             	add    eax,0x24
c0024c52:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c54:	83 ec 08             	sub    esp,0x8
c0024c57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024c5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024c5f:	ff d0                	call   eax
c0024c61:	83 c4 10             	add    esp,0x10
c0024c64:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0024c69:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c6f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024c75:	83 ec 0c             	sub    esp,0xc
c0024c78:	50                   	push   eax
c0024c79:	e8 ce f3 ff ff       	call   c002404c <APIC::getBase()>
c0024c7e:	83 c4 10             	add    esp,0x10
c0024c81:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0024c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c8b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024c91:	0f b6 f8             	movzx  edi,al
c0024c94:	89 d0                	mov    eax,edx
c0024c96:	ba 00 00 00 00       	mov    edx,0x0
c0024c9b:	89 c1                	mov    ecx,eax
c0024c9d:	80 e5 ff             	and    ch,0xff
c0024ca0:	89 cb                	mov    ebx,ecx
c0024ca2:	0f b6 f2             	movzx  esi,dl
c0024ca5:	89 d8                	mov    eax,ebx
c0024ca7:	89 f2                	mov    edx,esi
c0024ca9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024cad:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024cb0:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024cb4:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024cb8:	83 e0 00             	and    eax,0x0
c0024cbb:	09 d0                	or     eax,edx
c0024cbd:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cc5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024ccb:	8d 50 01             	lea    edx,[eax+0x1]
c0024cce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024cd2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024cd8:	0f b6 d0             	movzx  edx,al
c0024cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cdf:	83 c2 08             	add    edx,0x8
c0024ce2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024ce6:	0f b6 c9             	movzx  ecx,cl
c0024ce9:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024cef:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cf7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024cfb:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d05:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024d09:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0024d0f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024d13:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024d19:	83 ec 0c             	sub    esp,0xc
c0024d1c:	51                   	push   ecx
c0024d1d:	6a 01                	push   0x1
c0024d1f:	68 14 4b 02 c0       	push   0xc0024b14
c0024d24:	52                   	push   edx
c0024d25:	50                   	push   eax
c0024d26:	e8 cd ec fe ff       	call   c00139f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024d2b:	83 c4 20             	add    esp,0x20
c0024d2e:	89 c2                	mov    edx,eax
c0024d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d34:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024d3a:	b8 00 00 00 00       	mov    eax,0x0
c0024d3f:	5b                   	pop    ebx
c0024d40:	5e                   	pop    esi
c0024d41:	5f                   	pop    edi
c0024d42:	c3                   	ret    
c0024d43:	90                   	nop

c0024d44 <APICTimer::APICTimer()>:
c0024d44:	83 ec 0c             	sub    esp,0xc
c0024d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d4b:	83 ec 08             	sub    esp,0x8
c0024d4e:	68 dc b6 02 c0       	push   0xc002b6dc
c0024d53:	50                   	push   eax
c0024d54:	e8 d3 14 ff ff       	call   c001622c <Timer::Timer(char const*)>
c0024d59:	83 c4 10             	add    esp,0x10
c0024d5c:	ba f0 b6 02 c0       	mov    edx,0xc002b6f0
c0024d61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d65:	89 10                	mov    DWORD PTR [eax],edx
c0024d67:	90                   	nop
c0024d68:	83 c4 0c             	add    esp,0xc
c0024d6b:	c3                   	ret    

c0024d6c <PIT::write(int)>:
c0024d6c:	83 ec 10             	sub    esp,0x10
c0024d6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024d73:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024d77:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024d7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024d81:	a3 e4 eb 02 c0       	mov    ds:0xc002ebe4,eax
c0024d86:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0024d8b:	99                   	cdq    
c0024d8c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0024d90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d94:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0024d9b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0024da0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0024da4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0024da9:	ee                   	out    dx,al
c0024daa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024dae:	0f b6 c0             	movzx  eax,al
c0024db1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0024db8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0024dbc:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0024dc0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0024dc5:	ee                   	out    dx,al
c0024dc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024dca:	c1 f8 08             	sar    eax,0x8
c0024dcd:	0f b6 c0             	movzx  eax,al
c0024dd0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0024dd7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0024ddb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0024ddf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0024de4:	ee                   	out    dx,al
c0024de5:	90                   	nop
c0024de6:	83 c4 10             	add    esp,0x10
c0024de9:	c3                   	ret    

c0024dea <pitHandler(regs*, void*)>:
c0024dea:	83 ec 0c             	sub    esp,0xc
c0024ded:	a1 e4 eb 02 c0       	mov    eax,ds:0xc002ebe4
c0024df2:	99                   	cdq    
c0024df3:	52                   	push   edx
c0024df4:	50                   	push   eax
c0024df5:	6a 00                	push   0x0
c0024df7:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024dfc:	e8 bb 04 00 00       	call   c00252bc <__udivdi3>
c0024e01:	83 c4 10             	add    esp,0x10
c0024e04:	83 ec 08             	sub    esp,0x8
c0024e07:	52                   	push   edx
c0024e08:	50                   	push   eax
c0024e09:	e8 ad 14 ff ff       	call   c00162bb <timerHandler(unsigned long long)>
c0024e0e:	83 c4 10             	add    esp,0x10
c0024e11:	90                   	nop
c0024e12:	83 c4 0c             	add    esp,0xc
c0024e15:	c3                   	ret    

c0024e16 <PIT::open(int, int, void*)>:
c0024e16:	83 ec 0c             	sub    esp,0xc
c0024e19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e1f:	83 c0 24             	add    eax,0x24
c0024e22:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e24:	83 ec 08             	sub    esp,0x8
c0024e27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e2f:	ff d0                	call   eax
c0024e31:	83 c4 10             	add    esp,0x10
c0024e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e38:	83 ec 0c             	sub    esp,0xc
c0024e3b:	6a 00                	push   0x0
c0024e3d:	6a 01                	push   0x1
c0024e3f:	68 ea 4d 02 c0       	push   0xc0024dea
c0024e44:	6a 00                	push   0x0
c0024e46:	50                   	push   eax
c0024e47:	e8 ac eb fe ff       	call   c00139f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024e4c:	83 c4 20             	add    esp,0x20
c0024e4f:	89 c2                	mov    edx,eax
c0024e51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e55:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024e5b:	b8 00 00 00 00       	mov    eax,0x0
c0024e60:	83 c4 0c             	add    esp,0xc
c0024e63:	c3                   	ret    

c0024e64 <PIT::close(int, int, void*)>:
c0024e64:	83 ec 0c             	sub    esp,0xc
c0024e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e6b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0024e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e79:	6a 01                	push   0x1
c0024e7b:	68 ea 4d 02 c0       	push   0xc0024dea
c0024e80:	6a 00                	push   0x0
c0024e82:	50                   	push   eax
c0024e83:	e8 ae eb fe ff       	call   c0013a36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0024e88:	83 c4 10             	add    esp,0x10
c0024e8b:	b8 00 00 00 00       	mov    eax,0x0
c0024e90:	83 c4 0c             	add    esp,0xc
c0024e93:	c3                   	ret    

c0024e94 <PIT::PIT()>:
c0024e94:	83 ec 0c             	sub    esp,0xc
c0024e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e9b:	83 ec 08             	sub    esp,0x8
c0024e9e:	68 18 b7 02 c0       	push   0xc002b718
c0024ea3:	50                   	push   eax
c0024ea4:	e8 83 13 ff ff       	call   c001622c <Timer::Timer(char const*)>
c0024ea9:	83 c4 10             	add    esp,0x10
c0024eac:	ba 40 b7 02 c0       	mov    edx,0xc002b740
c0024eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eb5:	89 10                	mov    DWORD PTR [eax],edx
c0024eb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ebb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024ec1:	0f b6 d0             	movzx  edx,al
c0024ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ec8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0024ecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ed3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024ed9:	0f b6 d0             	movzx  edx,al
c0024edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ee0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0024ee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ee9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024eef:	8d 50 01             	lea    edx,[eax+0x1]
c0024ef2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024ef6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024efc:	0f b6 d0             	movzx  edx,al
c0024eff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f03:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024f07:	83 e1 3f             	and    ecx,0x3f
c0024f0a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024f0e:	90                   	nop
c0024f0f:	83 c4 0c             	add    esp,0xc
c0024f12:	c3                   	ret    
c0024f13:	66 90                	xchg   ax,ax
c0024f15:	66 90                	xchg   ax,ax
c0024f17:	66 90                	xchg   ax,ax
c0024f19:	66 90                	xchg   ax,ax
c0024f1b:	66 90                	xchg   ax,ax
c0024f1d:	66 90                	xchg   ax,ax
c0024f1f:	90                   	nop

c0024f20 <avxDetect>:
c0024f20:	b8 00 00 00 00       	mov    eax,0x0
c0024f25:	c3                   	ret    

c0024f26 <avxSave>:
c0024f26:	c3                   	ret    

c0024f27 <avxLoad>:
c0024f27:	c3                   	ret    

c0024f28 <avxInit>:
c0024f28:	c3                   	ret    

c0024f29 <avxClose>:
c0024f29:	c3                   	ret    

c0024f2a <wouldSheSayYes>:
c0024f2a:	c3                   	ret    
c0024f2b:	49                   	dec    ecx
c0024f2c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0024f30:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0024f34:	75 20                	jne    c0024f56 <sseDetect.noSSE+0x1>
c0024f36:	4e                   	dec    esi
c0024f37:	79 61                	jns    c0024f9a <x87Detect+0x14>
c0024f39:	68 2e 2e 2e 00       	push   0x2e2e2e
c0024f3e:	66 90                	xchg   ax,ax

c0024f40 <absolutelyNoChanceInHell>:
c0024f40:	b8 01 00 00 00       	mov    eax,0x1
c0024f45:	0f a2                	cpuid  
c0024f47:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0024f4d:	74 06                	je     c0024f55 <sseDetect.noSSE>
c0024f4f:	b8 01 00 00 00       	mov    eax,0x1
c0024f54:	c3                   	ret    

c0024f55 <sseDetect.noSSE>:
c0024f55:	31 c0                	xor    eax,eax
c0024f57:	c3                   	ret    

c0024f58 <sseSave>:
c0024f58:	0f ae 44 24 08       	fxsave [esp+0x8]
c0024f5d:	c3                   	ret    

c0024f5e <sseLoad>:
c0024f5e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0024f63:	c3                   	ret    

c0024f64 <sseInit>:
c0024f64:	e8 43 00 00 00       	call   c0024fac <x87Init>
c0024f69:	0f 20 e0             	mov    eax,cr4
c0024f6c:	66 0d 00 06          	or     ax,0x600
c0024f70:	0f 22 e0             	mov    cr4,eax
c0024f73:	c3                   	ret    

c0024f74 <sseClose>:
c0024f74:	c3                   	ret    
c0024f75:	66 90                	xchg   ax,ax
c0024f77:	66 90                	xchg   ax,ax
c0024f79:	66 90                	xchg   ax,ax
c0024f7b:	66 90                	xchg   ax,ax
c0024f7d:	66 90                	xchg   ax,ax
c0024f7f:	90                   	nop

c0024f80 <value_37F>:
c0024f80:	7f 03                	jg     c0024f85 <value_37A+0x1>

c0024f82 <value_37E>:
c0024f82:	7e 03                	jle    c0024f87 <x87Detect+0x1>

c0024f84 <value_37A>:
c0024f84:	7a 03                	jp     c0024f89 <x87Detect+0x3>

c0024f86 <x87Detect>:
c0024f86:	b8 01 00 00 00       	mov    eax,0x1
c0024f8b:	0f a2                	cpuid  
c0024f8d:	f7 c2 01 00 00 00    	test   edx,0x1
c0024f93:	74 06                	je     c0024f9b <x87Detect.nox87>
c0024f95:	b8 01 00 00 00       	mov    eax,0x1
c0024f9a:	c3                   	ret    

c0024f9b <x87Detect.nox87>:
c0024f9b:	b8 00 00 00 00       	mov    eax,0x0
c0024fa0:	c3                   	ret    

c0024fa1 <x87Save>:
c0024fa1:	9b dd 74 24 08       	fsave  [esp+0x8]
c0024fa6:	c3                   	ret    

c0024fa7 <x87Load>:
c0024fa7:	dd 64 24 08          	frstor [esp+0x8]
c0024fab:	c3                   	ret    

c0024fac <x87Init>:
c0024fac:	9b db e3             	finit  
c0024faf:	0f 20 c0             	mov    eax,cr0
c0024fb2:	66 25 fb ff          	and    ax,0xfffb
c0024fb6:	66 0d 22 00          	or     ax,0x22
c0024fba:	0f 22 c0             	mov    cr0,eax
c0024fbd:	0f 06                	clts   
c0024fbf:	d9 2d 84 4f 02 c0    	fldcw  WORD PTR ds:0xc0024f84
c0024fc5:	c3                   	ret    

c0024fc6 <x87Close>:
c0024fc6:	c3                   	ret    
c0024fc7:	90                   	nop

c0024fc8 <__do_global_ctors_aux>:
c0024fc8:	a1 bc 7a 02 c0       	mov    eax,ds:0xc0027abc
c0024fcd:	83 f8 ff             	cmp    eax,0xffffffff
c0024fd0:	74 1a                	je     c0024fec <__do_global_ctors_aux+0x24>
c0024fd2:	55                   	push   ebp
c0024fd3:	89 e5                	mov    ebp,esp
c0024fd5:	53                   	push   ebx
c0024fd6:	52                   	push   edx
c0024fd7:	bb bc 7a 02 c0       	mov    ebx,0xc0027abc
c0024fdc:	ff d0                	call   eax
c0024fde:	83 eb 04             	sub    ebx,0x4
c0024fe1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024fe3:	83 f8 ff             	cmp    eax,0xffffffff
c0024fe6:	75 f4                	jne    c0024fdc <__do_global_ctors_aux+0x14>
c0024fe8:	58                   	pop    eax
c0024fe9:	5b                   	pop    ebx
c0024fea:	5d                   	pop    ebp
c0024feb:	c3                   	ret    
c0024fec:	c3                   	ret    
c0024fed:	66 90                	xchg   ax,ax
c0024fef:	90                   	nop

c0024ff0 <__divdi3>:
c0024ff0:	55                   	push   ebp
c0024ff1:	57                   	push   edi
c0024ff2:	56                   	push   esi
c0024ff3:	53                   	push   ebx
c0024ff4:	83 ec 1c             	sub    esp,0x1c
c0024ff7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0024ffb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024fff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025002:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025006:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002500a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002500e:	85 db                	test   ebx,ebx
c0025010:	0f 88 8e 00 00 00    	js     c00250a4 <__divdi3+0xb4>
c0025016:	89 dd                	mov    ebp,ebx
c0025018:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025020:	89 d3                	mov    ebx,edx
c0025022:	85 d2                	test   edx,edx
c0025024:	79 0d                	jns    c0025033 <__divdi3+0x43>
c0025026:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002502a:	f7 d8                	neg    eax
c002502c:	83 d2 00             	adc    edx,0x0
c002502f:	f7 da                	neg    edx
c0025031:	89 d3                	mov    ebx,edx
c0025033:	89 c7                	mov    edi,eax
c0025035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025038:	85 db                	test   ebx,ebx
c002503a:	75 48                	jne    c0025084 <__divdi3+0x94>
c002503c:	39 ef                	cmp    edi,ebp
c002503e:	76 24                	jbe    c0025064 <__divdi3+0x74>
c0025040:	89 ea                	mov    edx,ebp
c0025042:	f7 f7                	div    edi
c0025044:	89 c1                	mov    ecx,eax
c0025046:	31 f6                	xor    esi,esi
c0025048:	89 c8                	mov    eax,ecx
c002504a:	89 f2                	mov    edx,esi
c002504c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025050:	85 c9                	test   ecx,ecx
c0025052:	74 07                	je     c002505b <__divdi3+0x6b>
c0025054:	f7 d8                	neg    eax
c0025056:	83 d2 00             	adc    edx,0x0
c0025059:	f7 da                	neg    edx
c002505b:	83 c4 1c             	add    esp,0x1c
c002505e:	5b                   	pop    ebx
c002505f:	5e                   	pop    esi
c0025060:	5f                   	pop    edi
c0025061:	5d                   	pop    ebp
c0025062:	c3                   	ret    
c0025063:	90                   	nop
c0025064:	85 ff                	test   edi,edi
c0025066:	75 0b                	jne    c0025073 <__divdi3+0x83>
c0025068:	b8 01 00 00 00       	mov    eax,0x1
c002506d:	31 d2                	xor    edx,edx
c002506f:	f7 f3                	div    ebx
c0025071:	89 c7                	mov    edi,eax
c0025073:	31 d2                	xor    edx,edx
c0025075:	89 e8                	mov    eax,ebp
c0025077:	f7 f7                	div    edi
c0025079:	89 c6                	mov    esi,eax
c002507b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002507e:	f7 f7                	div    edi
c0025080:	89 c1                	mov    ecx,eax
c0025082:	eb c4                	jmp    c0025048 <__divdi3+0x58>
c0025084:	39 eb                	cmp    ebx,ebp
c0025086:	77 3c                	ja     c00250c4 <__divdi3+0xd4>
c0025088:	0f bd f3             	bsr    esi,ebx
c002508b:	83 f6 1f             	xor    esi,0x1f
c002508e:	75 40                	jne    c00250d0 <__divdi3+0xe0>
c0025090:	39 eb                	cmp    ebx,ebp
c0025092:	72 09                	jb     c002509d <__divdi3+0xad>
c0025094:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0025097:	0f 87 97 00 00 00    	ja     c0025134 <__divdi3+0x144>
c002509d:	b9 01 00 00 00       	mov    ecx,0x1
c00250a2:	eb a4                	jmp    c0025048 <__divdi3+0x58>
c00250a4:	f7 d9                	neg    ecx
c00250a6:	83 d3 00             	adc    ebx,0x0
c00250a9:	f7 db                	neg    ebx
c00250ab:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00250ae:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00250b2:	89 dd                	mov    ebp,ebx
c00250b4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00250bc:	e9 5f ff ff ff       	jmp    c0025020 <__divdi3+0x30>
c00250c1:	8d 76 00             	lea    esi,[esi+0x0]
c00250c4:	31 f6                	xor    esi,esi
c00250c6:	31 c9                	xor    ecx,ecx
c00250c8:	e9 7b ff ff ff       	jmp    c0025048 <__divdi3+0x58>
c00250cd:	8d 76 00             	lea    esi,[esi+0x0]
c00250d0:	b8 20 00 00 00       	mov    eax,0x20
c00250d5:	29 f0                	sub    eax,esi
c00250d7:	89 f1                	mov    ecx,esi
c00250d9:	d3 e3                	shl    ebx,cl
c00250db:	89 fa                	mov    edx,edi
c00250dd:	88 c1                	mov    cl,al
c00250df:	d3 ea                	shr    edx,cl
c00250e1:	09 da                	or     edx,ebx
c00250e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00250e7:	89 f1                	mov    ecx,esi
c00250e9:	d3 e7                	shl    edi,cl
c00250eb:	89 eb                	mov    ebx,ebp
c00250ed:	88 c1                	mov    cl,al
c00250ef:	d3 eb                	shr    ebx,cl
c00250f1:	89 f1                	mov    ecx,esi
c00250f3:	d3 e5                	shl    ebp,cl
c00250f5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00250f8:	88 c1                	mov    cl,al
c00250fa:	d3 ea                	shr    edx,cl
c00250fc:	09 d5                	or     ebp,edx
c00250fe:	89 e8                	mov    eax,ebp
c0025100:	89 da                	mov    edx,ebx
c0025102:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0025106:	89 d3                	mov    ebx,edx
c0025108:	89 c5                	mov    ebp,eax
c002510a:	f7 e7                	mul    edi
c002510c:	39 d3                	cmp    ebx,edx
c002510e:	72 18                	jb     c0025128 <__divdi3+0x138>
c0025110:	74 0a                	je     c002511c <__divdi3+0x12c>
c0025112:	89 e9                	mov    ecx,ebp
c0025114:	31 f6                	xor    esi,esi
c0025116:	e9 2d ff ff ff       	jmp    c0025048 <__divdi3+0x58>
c002511b:	90                   	nop
c002511c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002511f:	89 f1                	mov    ecx,esi
c0025121:	d3 e7                	shl    edi,cl
c0025123:	39 c7                	cmp    edi,eax
c0025125:	73 eb                	jae    c0025112 <__divdi3+0x122>
c0025127:	90                   	nop
c0025128:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002512b:	31 f6                	xor    esi,esi
c002512d:	e9 16 ff ff ff       	jmp    c0025048 <__divdi3+0x58>
c0025132:	66 90                	xchg   ax,ax
c0025134:	31 c9                	xor    ecx,ecx
c0025136:	e9 0d ff ff ff       	jmp    c0025048 <__divdi3+0x58>
c002513b:	90                   	nop

c002513c <__moddi3>:
c002513c:	55                   	push   ebp
c002513d:	57                   	push   edi
c002513e:	56                   	push   esi
c002513f:	53                   	push   ebx
c0025140:	83 ec 2c             	sub    esp,0x2c
c0025143:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0025147:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002514b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002514f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0025153:	85 db                	test   ebx,ebx
c0025155:	0f 88 85 00 00 00    	js     c00251e0 <__moddi3+0xa4>
c002515b:	89 de                	mov    esi,ebx
c002515d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0025165:	89 d7                	mov    edi,edx
c0025167:	85 d2                	test   edx,edx
c0025169:	79 09                	jns    c0025174 <__moddi3+0x38>
c002516b:	f7 d8                	neg    eax
c002516d:	83 d2 00             	adc    edx,0x0
c0025170:	f7 da                	neg    edx
c0025172:	89 d7                	mov    edi,edx
c0025174:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025178:	89 cd                	mov    ebp,ecx
c002517a:	85 ff                	test   edi,edi
c002517c:	75 52                	jne    c00251d0 <__moddi3+0x94>
c002517e:	89 c3                	mov    ebx,eax
c0025180:	39 f0                	cmp    eax,esi
c0025182:	76 24                	jbe    c00251a8 <__moddi3+0x6c>
c0025184:	89 c8                	mov    eax,ecx
c0025186:	89 f2                	mov    edx,esi
c0025188:	f7 f3                	div    ebx
c002518a:	89 d6                	mov    esi,edx
c002518c:	89 f0                	mov    eax,esi
c002518e:	31 d2                	xor    edx,edx
c0025190:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025194:	85 c9                	test   ecx,ecx
c0025196:	74 07                	je     c002519f <__moddi3+0x63>
c0025198:	f7 d8                	neg    eax
c002519a:	83 d2 00             	adc    edx,0x0
c002519d:	f7 da                	neg    edx
c002519f:	83 c4 2c             	add    esp,0x2c
c00251a2:	5b                   	pop    ebx
c00251a3:	5e                   	pop    esi
c00251a4:	5f                   	pop    edi
c00251a5:	5d                   	pop    ebp
c00251a6:	c3                   	ret    
c00251a7:	90                   	nop
c00251a8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00251ac:	85 db                	test   ebx,ebx
c00251ae:	75 0d                	jne    c00251bd <__moddi3+0x81>
c00251b0:	b8 01 00 00 00       	mov    eax,0x1
c00251b5:	31 d2                	xor    edx,edx
c00251b7:	f7 f7                	div    edi
c00251b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00251bd:	89 f0                	mov    eax,esi
c00251bf:	31 d2                	xor    edx,edx
c00251c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00251c5:	f7 f7                	div    edi
c00251c7:	89 e8                	mov    eax,ebp
c00251c9:	f7 f7                	div    edi
c00251cb:	89 d6                	mov    esi,edx
c00251cd:	eb bd                	jmp    c002518c <__moddi3+0x50>
c00251cf:	90                   	nop
c00251d0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00251d4:	39 f7                	cmp    edi,esi
c00251d6:	76 20                	jbe    c00251f8 <__moddi3+0xbc>
c00251d8:	89 c8                	mov    eax,ecx
c00251da:	89 f2                	mov    edx,esi
c00251dc:	eb b2                	jmp    c0025190 <__moddi3+0x54>
c00251de:	66 90                	xchg   ax,ax
c00251e0:	f7 d9                	neg    ecx
c00251e2:	83 d3 00             	adc    ebx,0x0
c00251e5:	f7 db                	neg    ebx
c00251e7:	89 de                	mov    esi,ebx
c00251e9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00251f1:	e9 6f ff ff ff       	jmp    c0025165 <__moddi3+0x29>
c00251f6:	66 90                	xchg   ax,ax
c00251f8:	0f bd c7             	bsr    eax,edi
c00251fb:	83 f0 1f             	xor    eax,0x1f
c00251fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025202:	75 24                	jne    c0025228 <__moddi3+0xec>
c0025204:	39 f7                	cmp    edi,esi
c0025206:	72 06                	jb     c002520e <__moddi3+0xd2>
c0025208:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002520c:	77 0c                	ja     c002521a <__moddi3+0xde>
c002520e:	89 e9                	mov    ecx,ebp
c0025210:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0025214:	19 fe                	sbb    esi,edi
c0025216:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002521a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002521e:	89 f2                	mov    edx,esi
c0025220:	e9 6b ff ff ff       	jmp    c0025190 <__moddi3+0x54>
c0025225:	8d 76 00             	lea    esi,[esi+0x0]
c0025228:	b8 20 00 00 00       	mov    eax,0x20
c002522d:	89 c2                	mov    edx,eax
c002522f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025233:	29 da                	sub    edx,ebx
c0025235:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025239:	88 d9                	mov    cl,bl
c002523b:	d3 e7                	shl    edi,cl
c002523d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025241:	88 d1                	mov    cl,dl
c0025243:	d3 e8                	shr    eax,cl
c0025245:	09 c7                	or     edi,eax
c0025247:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002524b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002524f:	89 d8                	mov    eax,ebx
c0025251:	88 d9                	mov    cl,bl
c0025253:	d3 e7                	shl    edi,cl
c0025255:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0025259:	89 f3                	mov    ebx,esi
c002525b:	88 d1                	mov    cl,dl
c002525d:	d3 eb                	shr    ebx,cl
c002525f:	89 c7                	mov    edi,eax
c0025261:	88 c1                	mov    cl,al
c0025263:	d3 e6                	shl    esi,cl
c0025265:	89 e8                	mov    eax,ebp
c0025267:	88 d1                	mov    cl,dl
c0025269:	d3 e8                	shr    eax,cl
c002526b:	09 f0                	or     eax,esi
c002526d:	89 f9                	mov    ecx,edi
c002526f:	d3 e5                	shl    ebp,cl
c0025271:	89 da                	mov    edx,ebx
c0025273:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0025277:	89 d3                	mov    ebx,edx
c0025279:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002527d:	89 c6                	mov    esi,eax
c002527f:	89 d1                	mov    ecx,edx
c0025281:	39 d3                	cmp    ebx,edx
c0025283:	72 27                	jb     c00252ac <__moddi3+0x170>
c0025285:	74 21                	je     c00252a8 <__moddi3+0x16c>
c0025287:	29 f5                	sub    ebp,esi
c0025289:	19 cb                	sbb    ebx,ecx
c002528b:	89 de                	mov    esi,ebx
c002528d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0025291:	d3 e6                	shl    esi,cl
c0025293:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0025297:	89 f9                	mov    ecx,edi
c0025299:	d3 ed                	shr    ebp,cl
c002529b:	09 ee                	or     esi,ebp
c002529d:	89 f0                	mov    eax,esi
c002529f:	d3 eb                	shr    ebx,cl
c00252a1:	89 da                	mov    edx,ebx
c00252a3:	e9 e8 fe ff ff       	jmp    c0025190 <__moddi3+0x54>
c00252a8:	39 c5                	cmp    ebp,eax
c00252aa:	73 db                	jae    c0025287 <__moddi3+0x14b>
c00252ac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00252b0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00252b4:	89 d1                	mov    ecx,edx
c00252b6:	89 c6                	mov    esi,eax
c00252b8:	eb cd                	jmp    c0025287 <__moddi3+0x14b>
c00252ba:	66 90                	xchg   ax,ax

c00252bc <__udivdi3>:
c00252bc:	55                   	push   ebp
c00252bd:	57                   	push   edi
c00252be:	56                   	push   esi
c00252bf:	53                   	push   ebx
c00252c0:	83 ec 1c             	sub    esp,0x1c
c00252c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00252c7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00252cb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00252cf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00252d3:	85 d2                	test   edx,edx
c00252d5:	75 41                	jne    c0025318 <__udivdi3+0x5c>
c00252d7:	39 f7                	cmp    edi,esi
c00252d9:	76 15                	jbe    c00252f0 <__udivdi3+0x34>
c00252db:	89 e8                	mov    eax,ebp
c00252dd:	89 f2                	mov    edx,esi
c00252df:	f7 f7                	div    edi
c00252e1:	31 db                	xor    ebx,ebx
c00252e3:	89 da                	mov    edx,ebx
c00252e5:	83 c4 1c             	add    esp,0x1c
c00252e8:	5b                   	pop    ebx
c00252e9:	5e                   	pop    esi
c00252ea:	5f                   	pop    edi
c00252eb:	5d                   	pop    ebp
c00252ec:	c3                   	ret    
c00252ed:	8d 76 00             	lea    esi,[esi+0x0]
c00252f0:	89 f9                	mov    ecx,edi
c00252f2:	85 ff                	test   edi,edi
c00252f4:	75 0b                	jne    c0025301 <__udivdi3+0x45>
c00252f6:	b8 01 00 00 00       	mov    eax,0x1
c00252fb:	31 d2                	xor    edx,edx
c00252fd:	f7 f7                	div    edi
c00252ff:	89 c1                	mov    ecx,eax
c0025301:	31 d2                	xor    edx,edx
c0025303:	89 f0                	mov    eax,esi
c0025305:	f7 f1                	div    ecx
c0025307:	89 c3                	mov    ebx,eax
c0025309:	89 e8                	mov    eax,ebp
c002530b:	f7 f1                	div    ecx
c002530d:	89 da                	mov    edx,ebx
c002530f:	83 c4 1c             	add    esp,0x1c
c0025312:	5b                   	pop    ebx
c0025313:	5e                   	pop    esi
c0025314:	5f                   	pop    edi
c0025315:	5d                   	pop    ebp
c0025316:	c3                   	ret    
c0025317:	90                   	nop
c0025318:	39 f2                	cmp    edx,esi
c002531a:	77 1c                	ja     c0025338 <__udivdi3+0x7c>
c002531c:	0f bd da             	bsr    ebx,edx
c002531f:	83 f3 1f             	xor    ebx,0x1f
c0025322:	75 24                	jne    c0025348 <__udivdi3+0x8c>
c0025324:	39 f2                	cmp    edx,esi
c0025326:	72 08                	jb     c0025330 <__udivdi3+0x74>
c0025328:	39 ef                	cmp    edi,ebp
c002532a:	0f 87 84 00 00 00    	ja     c00253b4 <__udivdi3+0xf8>
c0025330:	b8 01 00 00 00       	mov    eax,0x1
c0025335:	eb ac                	jmp    c00252e3 <__udivdi3+0x27>
c0025337:	90                   	nop
c0025338:	31 db                	xor    ebx,ebx
c002533a:	31 c0                	xor    eax,eax
c002533c:	89 da                	mov    edx,ebx
c002533e:	83 c4 1c             	add    esp,0x1c
c0025341:	5b                   	pop    ebx
c0025342:	5e                   	pop    esi
c0025343:	5f                   	pop    edi
c0025344:	5d                   	pop    ebp
c0025345:	c3                   	ret    
c0025346:	66 90                	xchg   ax,ax
c0025348:	b8 20 00 00 00       	mov    eax,0x20
c002534d:	29 d8                	sub    eax,ebx
c002534f:	88 d9                	mov    cl,bl
c0025351:	d3 e2                	shl    edx,cl
c0025353:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0025357:	89 fa                	mov    edx,edi
c0025359:	88 c1                	mov    cl,al
c002535b:	d3 ea                	shr    edx,cl
c002535d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025361:	09 d1                	or     ecx,edx
c0025363:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025367:	88 d9                	mov    cl,bl
c0025369:	d3 e7                	shl    edi,cl
c002536b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002536f:	89 f7                	mov    edi,esi
c0025371:	88 c1                	mov    cl,al
c0025373:	d3 ef                	shr    edi,cl
c0025375:	88 d9                	mov    cl,bl
c0025377:	d3 e6                	shl    esi,cl
c0025379:	89 ea                	mov    edx,ebp
c002537b:	88 c1                	mov    cl,al
c002537d:	d3 ea                	shr    edx,cl
c002537f:	09 d6                	or     esi,edx
c0025381:	89 f0                	mov    eax,esi
c0025383:	89 fa                	mov    edx,edi
c0025385:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025389:	89 d7                	mov    edi,edx
c002538b:	89 c6                	mov    esi,eax
c002538d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025391:	39 d7                	cmp    edi,edx
c0025393:	72 13                	jb     c00253a8 <__udivdi3+0xec>
c0025395:	74 09                	je     c00253a0 <__udivdi3+0xe4>
c0025397:	89 f0                	mov    eax,esi
c0025399:	31 db                	xor    ebx,ebx
c002539b:	e9 43 ff ff ff       	jmp    c00252e3 <__udivdi3+0x27>
c00253a0:	88 d9                	mov    cl,bl
c00253a2:	d3 e5                	shl    ebp,cl
c00253a4:	39 c5                	cmp    ebp,eax
c00253a6:	73 ef                	jae    c0025397 <__udivdi3+0xdb>
c00253a8:	8d 46 ff             	lea    eax,[esi-0x1]
c00253ab:	31 db                	xor    ebx,ebx
c00253ad:	e9 31 ff ff ff       	jmp    c00252e3 <__udivdi3+0x27>
c00253b2:	66 90                	xchg   ax,ax
c00253b4:	31 c0                	xor    eax,eax
c00253b6:	e9 28 ff ff ff       	jmp    c00252e3 <__udivdi3+0x27>
c00253bb:	90                   	nop

c00253bc <__umoddi3>:
c00253bc:	55                   	push   ebp
c00253bd:	57                   	push   edi
c00253be:	56                   	push   esi
c00253bf:	53                   	push   ebx
c00253c0:	83 ec 1c             	sub    esp,0x1c
c00253c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00253c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00253cb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00253cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00253d3:	89 da                	mov    edx,ebx
c00253d5:	85 c0                	test   eax,eax
c00253d7:	75 37                	jne    c0025410 <__umoddi3+0x54>
c00253d9:	39 df                	cmp    edi,ebx
c00253db:	76 13                	jbe    c00253f0 <__umoddi3+0x34>
c00253dd:	89 f0                	mov    eax,esi
c00253df:	f7 f7                	div    edi
c00253e1:	89 d0                	mov    eax,edx
c00253e3:	31 d2                	xor    edx,edx
c00253e5:	83 c4 1c             	add    esp,0x1c
c00253e8:	5b                   	pop    ebx
c00253e9:	5e                   	pop    esi
c00253ea:	5f                   	pop    edi
c00253eb:	5d                   	pop    ebp
c00253ec:	c3                   	ret    
c00253ed:	8d 76 00             	lea    esi,[esi+0x0]
c00253f0:	89 fd                	mov    ebp,edi
c00253f2:	85 ff                	test   edi,edi
c00253f4:	75 0b                	jne    c0025401 <__umoddi3+0x45>
c00253f6:	b8 01 00 00 00       	mov    eax,0x1
c00253fb:	31 d2                	xor    edx,edx
c00253fd:	f7 f7                	div    edi
c00253ff:	89 c5                	mov    ebp,eax
c0025401:	89 d8                	mov    eax,ebx
c0025403:	31 d2                	xor    edx,edx
c0025405:	f7 f5                	div    ebp
c0025407:	89 f0                	mov    eax,esi
c0025409:	f7 f5                	div    ebp
c002540b:	89 d0                	mov    eax,edx
c002540d:	eb d4                	jmp    c00253e3 <__umoddi3+0x27>
c002540f:	90                   	nop
c0025410:	89 f1                	mov    ecx,esi
c0025412:	39 d8                	cmp    eax,ebx
c0025414:	76 0a                	jbe    c0025420 <__umoddi3+0x64>
c0025416:	89 f0                	mov    eax,esi
c0025418:	83 c4 1c             	add    esp,0x1c
c002541b:	5b                   	pop    ebx
c002541c:	5e                   	pop    esi
c002541d:	5f                   	pop    edi
c002541e:	5d                   	pop    ebp
c002541f:	c3                   	ret    
c0025420:	0f bd e8             	bsr    ebp,eax
c0025423:	83 f5 1f             	xor    ebp,0x1f
c0025426:	75 1c                	jne    c0025444 <__umoddi3+0x88>
c0025428:	39 d8                	cmp    eax,ebx
c002542a:	72 04                	jb     c0025430 <__umoddi3+0x74>
c002542c:	39 f7                	cmp    edi,esi
c002542e:	77 08                	ja     c0025438 <__umoddi3+0x7c>
c0025430:	89 da                	mov    edx,ebx
c0025432:	29 fe                	sub    esi,edi
c0025434:	19 c2                	sbb    edx,eax
c0025436:	89 f1                	mov    ecx,esi
c0025438:	89 c8                	mov    eax,ecx
c002543a:	83 c4 1c             	add    esp,0x1c
c002543d:	5b                   	pop    ebx
c002543e:	5e                   	pop    esi
c002543f:	5f                   	pop    edi
c0025440:	5d                   	pop    ebp
c0025441:	c3                   	ret    
c0025442:	66 90                	xchg   ax,ax
c0025444:	ba 20 00 00 00       	mov    edx,0x20
c0025449:	29 ea                	sub    edx,ebp
c002544b:	89 e9                	mov    ecx,ebp
c002544d:	d3 e0                	shl    eax,cl
c002544f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025453:	89 f8                	mov    eax,edi
c0025455:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025459:	88 d1                	mov    cl,dl
c002545b:	d3 e8                	shr    eax,cl
c002545d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025461:	09 c1                	or     ecx,eax
c0025463:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025467:	89 e9                	mov    ecx,ebp
c0025469:	d3 e7                	shl    edi,cl
c002546b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002546f:	89 d8                	mov    eax,ebx
c0025471:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025475:	88 d1                	mov    cl,dl
c0025477:	d3 e8                	shr    eax,cl
c0025479:	89 c7                	mov    edi,eax
c002547b:	89 e9                	mov    ecx,ebp
c002547d:	d3 e3                	shl    ebx,cl
c002547f:	89 f0                	mov    eax,esi
c0025481:	88 d1                	mov    cl,dl
c0025483:	d3 e8                	shr    eax,cl
c0025485:	09 d8                	or     eax,ebx
c0025487:	89 e9                	mov    ecx,ebp
c0025489:	d3 e6                	shl    esi,cl
c002548b:	89 f3                	mov    ebx,esi
c002548d:	89 fa                	mov    edx,edi
c002548f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025493:	89 d1                	mov    ecx,edx
c0025495:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025499:	89 c6                	mov    esi,eax
c002549b:	89 d7                	mov    edi,edx
c002549d:	39 d1                	cmp    ecx,edx
c002549f:	72 27                	jb     c00254c8 <__umoddi3+0x10c>
c00254a1:	74 21                	je     c00254c4 <__umoddi3+0x108>
c00254a3:	89 ca                	mov    edx,ecx
c00254a5:	29 f3                	sub    ebx,esi
c00254a7:	19 fa                	sbb    edx,edi
c00254a9:	89 d0                	mov    eax,edx
c00254ab:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00254af:	d3 e0                	shl    eax,cl
c00254b1:	89 e9                	mov    ecx,ebp
c00254b3:	d3 eb                	shr    ebx,cl
c00254b5:	09 d8                	or     eax,ebx
c00254b7:	d3 ea                	shr    edx,cl
c00254b9:	83 c4 1c             	add    esp,0x1c
c00254bc:	5b                   	pop    ebx
c00254bd:	5e                   	pop    esi
c00254be:	5f                   	pop    edi
c00254bf:	5d                   	pop    ebp
c00254c0:	c3                   	ret    
c00254c1:	8d 76 00             	lea    esi,[esi+0x0]
c00254c4:	39 c3                	cmp    ebx,eax
c00254c6:	73 db                	jae    c00254a3 <__umoddi3+0xe7>
c00254c8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00254cc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00254d0:	89 d7                	mov    edi,edx
c00254d2:	89 c6                	mov    esi,eax
c00254d4:	eb cd                	jmp    c00254a3 <__umoddi3+0xe7>

c00254d6 <__addsf3>:
c00254d6:	55                   	push   ebp
c00254d7:	89 e5                	mov    ebp,esp
c00254d9:	57                   	push   edi
c00254da:	56                   	push   esi
c00254db:	53                   	push   ebx
c00254dc:	83 ec 08             	sub    esp,0x8
c00254df:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00254e2:	89 fa                	mov    edx,edi
c00254e4:	89 f8                	mov    eax,edi
c00254e6:	c1 f8 17             	sar    eax,0x17
c00254e9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00254ec:	c1 e2 08             	shl    edx,0x8
c00254ef:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00254f5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00254f8:	89 de                	mov    esi,ebx
c00254fa:	c1 fe 17             	sar    esi,0x17
c00254fd:	c1 e3 08             	shl    ebx,0x8
c0025500:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025506:	31 f0                	xor    eax,esi
c0025508:	0f 88 3b 01 00 00    	js     c0025649 <__addsf3+0x173>
c002550e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0025511:	29 f1                	sub    ecx,esi
c0025513:	85 c9                	test   ecx,ecx
c0025515:	7e 54                	jle    c002556b <__addsf3+0x95>
c0025517:	89 f0                	mov    eax,esi
c0025519:	84 c0                	test   al,al
c002551b:	75 10                	jne    c002552d <__addsf3+0x57>
c002551d:	85 db                	test   ebx,ebx
c002551f:	0f 84 aa 02 00 00    	je     c00257cf <__addsf3+0x2f9>
c0025525:	49                   	dec    ecx
c0025526:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025529:	74 38                	je     c0025563 <__addsf3+0x8d>
c002552b:	eb 13                	jmp    c0025540 <__addsf3+0x6a>
c002552d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025530:	f7 d0                	not    eax
c0025532:	84 c0                	test   al,al
c0025534:	0f 84 95 02 00 00    	je     c00257cf <__addsf3+0x2f9>
c002553a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025540:	83 f9 1f             	cmp    ecx,0x1f
c0025543:	0f 8f 86 02 00 00    	jg     c00257cf <__addsf3+0x2f9>
c0025549:	89 de                	mov    esi,ebx
c002554b:	d3 ee                	shr    esi,cl
c002554d:	b8 20 00 00 00       	mov    eax,0x20
c0025552:	29 c8                	sub    eax,ecx
c0025554:	89 c1                	mov    ecx,eax
c0025556:	d3 e3                	shl    ebx,cl
c0025558:	31 c0                	xor    eax,eax
c002555a:	85 db                	test   ebx,ebx
c002555c:	0f 95 c0             	setne  al
c002555f:	09 f0                	or     eax,esi
c0025561:	01 d0                	add    eax,edx
c0025563:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025566:	e9 b6 00 00 00       	jmp    c0025621 <__addsf3+0x14b>
c002556b:	74 5c                	je     c00255c9 <__addsf3+0xf3>
c002556d:	89 f1                	mov    ecx,esi
c002556f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0025572:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025575:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0025579:	75 14                	jne    c002558f <__addsf3+0xb9>
c002557b:	85 d2                	test   edx,edx
c002557d:	0f 84 4c 02 00 00    	je     c00257cf <__addsf3+0x2f9>
c0025583:	49                   	dec    ecx
c0025584:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025587:	0f 84 94 00 00 00    	je     c0025621 <__addsf3+0x14b>
c002558d:	eb 12                	jmp    c00255a1 <__addsf3+0xcb>
c002558f:	89 f0                	mov    eax,esi
c0025591:	f7 d0                	not    eax
c0025593:	84 c0                	test   al,al
c0025595:	0f 84 34 02 00 00    	je     c00257cf <__addsf3+0x2f9>
c002559b:	81 ca 00 00 00 80    	or     edx,0x80000000
c00255a1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00255a4:	83 f9 1f             	cmp    ecx,0x1f
c00255a7:	0f 8f 22 02 00 00    	jg     c00257cf <__addsf3+0x2f9>
c00255ad:	89 d7                	mov    edi,edx
c00255af:	d3 ef                	shr    edi,cl
c00255b1:	b8 20 00 00 00       	mov    eax,0x20
c00255b6:	29 c8                	sub    eax,ecx
c00255b8:	89 c1                	mov    ecx,eax
c00255ba:	d3 e2                	shl    edx,cl
c00255bc:	31 c0                	xor    eax,eax
c00255be:	85 d2                	test   edx,edx
c00255c0:	0f 95 c0             	setne  al
c00255c3:	09 f8                	or     eax,edi
c00255c5:	01 d8                	add    eax,ebx
c00255c7:	eb 58                	jmp    c0025621 <__addsf3+0x14b>
c00255c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00255cc:	8d 70 01             	lea    esi,[eax+0x1]
c00255cf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00255d5:	75 32                	jne    c0025609 <__addsf3+0x133>
c00255d7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00255db:	75 1f                	jne    c00255fc <__addsf3+0x126>
c00255dd:	85 d2                	test   edx,edx
c00255df:	0f 84 e0 01 00 00    	je     c00257c5 <__addsf3+0x2ef>
c00255e5:	85 db                	test   ebx,ebx
c00255e7:	0f 84 e2 01 00 00    	je     c00257cf <__addsf3+0x2f9>
c00255ed:	89 d0                	mov    eax,edx
c00255ef:	01 d8                	add    eax,ebx
c00255f1:	0f 89 a9 01 00 00    	jns    c00257a0 <__addsf3+0x2ca>
c00255f7:	e9 9d 01 00 00       	jmp    c0025799 <__addsf3+0x2c3>
c00255fc:	85 d2                	test   edx,edx
c00255fe:	0f 85 cb 01 00 00    	jne    c00257cf <__addsf3+0x2f9>
c0025604:	e9 bc 01 00 00       	jmp    c00257c5 <__addsf3+0x2ef>
c0025609:	31 c0                	xor    eax,eax
c002560b:	89 f1                	mov    ecx,esi
c002560d:	f7 d1                	not    ecx
c002560f:	84 c9                	test   cl,cl
c0025611:	0f 84 90 01 00 00    	je     c00257a7 <__addsf3+0x2d1>
c0025617:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002561a:	d1 e8                	shr    eax,1
c002561c:	e9 86 01 00 00       	jmp    c00257a7 <__addsf3+0x2d1>
c0025621:	85 c0                	test   eax,eax
c0025623:	0f 89 7e 01 00 00    	jns    c00257a7 <__addsf3+0x2d1>
c0025629:	46                   	inc    esi
c002562a:	89 f2                	mov    edx,esi
c002562c:	f7 d2                	not    edx
c002562e:	84 d2                	test   dl,dl
c0025630:	0f 84 6f 01 00 00    	je     c00257a5 <__addsf3+0x2cf>
c0025636:	89 c2                	mov    edx,eax
c0025638:	83 e2 01             	and    edx,0x1
c002563b:	d1 e8                	shr    eax,1
c002563d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0025642:	09 d0                	or     eax,edx
c0025644:	e9 5e 01 00 00       	jmp    c00257a7 <__addsf3+0x2d1>
c0025649:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002564d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025650:	89 f0                	mov    eax,esi
c0025652:	0f b6 c0             	movzx  eax,al
c0025655:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025658:	29 c1                	sub    ecx,eax
c002565a:	85 c9                	test   ecx,ecx
c002565c:	7e 55                	jle    c00256b3 <__addsf3+0x1dd>
c002565e:	85 c0                	test   eax,eax
c0025660:	75 11                	jne    c0025673 <__addsf3+0x19d>
c0025662:	85 db                	test   ebx,ebx
c0025664:	0f 84 65 01 00 00    	je     c00257cf <__addsf3+0x2f9>
c002566a:	49                   	dec    ecx
c002566b:	75 19                	jne    c0025686 <__addsf3+0x1b0>
c002566d:	89 d0                	mov    eax,edx
c002566f:	29 d8                	sub    eax,ebx
c0025671:	eb 38                	jmp    c00256ab <__addsf3+0x1d5>
c0025673:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025676:	f7 d0                	not    eax
c0025678:	84 c0                	test   al,al
c002567a:	0f 84 4f 01 00 00    	je     c00257cf <__addsf3+0x2f9>
c0025680:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025686:	83 f9 1f             	cmp    ecx,0x1f
c0025689:	0f 8f 40 01 00 00    	jg     c00257cf <__addsf3+0x2f9>
c002568f:	89 de                	mov    esi,ebx
c0025691:	d3 ee                	shr    esi,cl
c0025693:	b8 20 00 00 00       	mov    eax,0x20
c0025698:	29 c8                	sub    eax,ecx
c002569a:	89 c1                	mov    ecx,eax
c002569c:	d3 e3                	shl    ebx,cl
c002569e:	31 c0                	xor    eax,eax
c00256a0:	85 db                	test   ebx,ebx
c00256a2:	0f 95 c0             	setne  al
c00256a5:	09 f0                	or     eax,esi
c00256a7:	29 c2                	sub    edx,eax
c00256a9:	89 d0                	mov    eax,edx
c00256ab:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00256ae:	e9 af 00 00 00       	jmp    c0025762 <__addsf3+0x28c>
c00256b3:	74 5c                	je     c0025711 <__addsf3+0x23b>
c00256b5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00256b8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00256bb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00256bf:	75 14                	jne    c00256d5 <__addsf3+0x1ff>
c00256c1:	85 d2                	test   edx,edx
c00256c3:	0f 84 06 01 00 00    	je     c00257cf <__addsf3+0x2f9>
c00256c9:	48                   	dec    eax
c00256ca:	75 1b                	jne    c00256e7 <__addsf3+0x211>
c00256cc:	89 d8                	mov    eax,ebx
c00256ce:	29 d0                	sub    eax,edx
c00256d0:	e9 8d 00 00 00       	jmp    c0025762 <__addsf3+0x28c>
c00256d5:	89 f1                	mov    ecx,esi
c00256d7:	f7 d1                	not    ecx
c00256d9:	84 c9                	test   cl,cl
c00256db:	0f 84 ee 00 00 00    	je     c00257cf <__addsf3+0x2f9>
c00256e1:	81 ca 00 00 00 80    	or     edx,0x80000000
c00256e7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00256ea:	83 f8 1f             	cmp    eax,0x1f
c00256ed:	0f 8f dc 00 00 00    	jg     c00257cf <__addsf3+0x2f9>
c00256f3:	89 d7                	mov    edi,edx
c00256f5:	88 c1                	mov    cl,al
c00256f7:	d3 ef                	shr    edi,cl
c00256f9:	b9 20 00 00 00       	mov    ecx,0x20
c00256fe:	29 c1                	sub    ecx,eax
c0025700:	d3 e2                	shl    edx,cl
c0025702:	31 c0                	xor    eax,eax
c0025704:	85 d2                	test   edx,edx
c0025706:	0f 95 c0             	setne  al
c0025709:	09 f8                	or     eax,edi
c002570b:	29 c3                	sub    ebx,eax
c002570d:	89 d8                	mov    eax,ebx
c002570f:	eb 51                	jmp    c0025762 <__addsf3+0x28c>
c0025711:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025714:	40                   	inc    eax
c0025715:	a8 fe                	test   al,0xfe
c0025717:	75 3d                	jne    c0025756 <__addsf3+0x280>
c0025719:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002571d:	0f 85 a7 00 00 00    	jne    c00257ca <__addsf3+0x2f4>
c0025723:	85 d2                	test   edx,edx
c0025725:	75 12                	jne    c0025739 <__addsf3+0x263>
c0025727:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002572a:	85 db                	test   ebx,ebx
c002572c:	0f 85 9d 00 00 00    	jne    c00257cf <__addsf3+0x2f9>
c0025732:	31 ff                	xor    edi,edi
c0025734:	e9 96 00 00 00       	jmp    c00257cf <__addsf3+0x2f9>
c0025739:	85 db                	test   ebx,ebx
c002573b:	0f 84 8e 00 00 00    	je     c00257cf <__addsf3+0x2f9>
c0025741:	89 d0                	mov    eax,edx
c0025743:	29 d8                	sub    eax,ebx
c0025745:	79 06                	jns    c002574d <__addsf3+0x277>
c0025747:	89 d8                	mov    eax,ebx
c0025749:	29 d0                	sub    eax,edx
c002574b:	eb 5a                	jmp    c00257a7 <__addsf3+0x2d1>
c002574d:	bf 00 00 00 00       	mov    edi,0x0
c0025752:	74 7b                	je     c00257cf <__addsf3+0x2f9>
c0025754:	eb 4a                	jmp    c00257a0 <__addsf3+0x2ca>
c0025756:	89 d0                	mov    eax,edx
c0025758:	29 d8                	sub    eax,ebx
c002575a:	79 12                	jns    c002576e <__addsf3+0x298>
c002575c:	89 d8                	mov    eax,ebx
c002575e:	29 d0                	sub    eax,edx
c0025760:	eb 09                	jmp    c002576b <__addsf3+0x295>
c0025762:	85 c0                	test   eax,eax
c0025764:	79 41                	jns    c00257a7 <__addsf3+0x2d1>
c0025766:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002576b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002576e:	31 f6                	xor    esi,esi
c0025770:	85 c0                	test   eax,eax
c0025772:	74 33                	je     c00257a7 <__addsf3+0x2d1>
c0025774:	0f bd c8             	bsr    ecx,eax
c0025777:	83 f1 1f             	xor    ecx,0x1f
c002577a:	d3 e0                	shl    eax,cl
c002577c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0025780:	39 ca                	cmp    edx,ecx
c0025782:	7f 10                	jg     c0025794 <__addsf3+0x2be>
c0025784:	29 d1                	sub    ecx,edx
c0025786:	41                   	inc    ecx
c0025787:	d3 e8                	shr    eax,cl
c0025789:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002578c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0025792:	eb 13                	jmp    c00257a7 <__addsf3+0x2d1>
c0025794:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025797:	29 ce                	sub    esi,ecx
c0025799:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002579e:	eb 07                	jmp    c00257a7 <__addsf3+0x2d1>
c00257a0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00257a3:	eb 02                	jmp    c00257a7 <__addsf3+0x2d1>
c00257a5:	31 c0                	xor    eax,eax
c00257a7:	89 c2                	mov    edx,eax
c00257a9:	c1 ea 08             	shr    edx,0x8
c00257ac:	a8 7f                	test   al,0x7f
c00257ae:	0f 95 c1             	setne  cl
c00257b1:	09 d1                	or     ecx,edx
c00257b3:	83 e1 01             	and    ecx,0x1
c00257b6:	c1 e8 07             	shr    eax,0x7
c00257b9:	21 c8                	and    eax,ecx
c00257bb:	c1 e6 17             	shl    esi,0x17
c00257be:	09 d6                	or     esi,edx
c00257c0:	8d 3c 30             	lea    edi,[eax+esi*1]
c00257c3:	eb 0a                	jmp    c00257cf <__addsf3+0x2f9>
c00257c5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00257c8:	eb 05                	jmp    c00257cf <__addsf3+0x2f9>
c00257ca:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00257cf:	89 f8                	mov    eax,edi
c00257d1:	5a                   	pop    edx
c00257d2:	59                   	pop    ecx
c00257d3:	5b                   	pop    ebx
c00257d4:	5e                   	pop    esi
c00257d5:	5f                   	pop    edi
c00257d6:	5d                   	pop    ebp
c00257d7:	c3                   	ret    

c00257d8 <__subsf3>:
c00257d8:	55                   	push   ebp
c00257d9:	89 e5                	mov    ebp,esp
c00257db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257de:	05 00 00 00 80       	add    eax,0x80000000
c00257e3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00257e6:	5d                   	pop    ebp
c00257e7:	e9 ea fc ff ff       	jmp    c00254d6 <__addsf3>

c00257ec <__negsf2>:
c00257ec:	55                   	push   ebp
c00257ed:	89 e5                	mov    ebp,esp
c00257ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257f2:	05 00 00 00 80       	add    eax,0x80000000
c00257f7:	5d                   	pop    ebp
c00257f8:	c3                   	ret    

c00257f9 <__mulsf3>:
c00257f9:	55                   	push   ebp
c00257fa:	89 e5                	mov    ebp,esp
c00257fc:	57                   	push   edi
c00257fd:	56                   	push   esi
c00257fe:	53                   	push   ebx
c00257ff:	83 ec 1c             	sub    esp,0x1c
c0025802:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0025805:	89 f0                	mov    eax,esi
c0025807:	89 f1                	mov    ecx,esi
c0025809:	c1 f9 17             	sar    ecx,0x17
c002580c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002580f:	c1 e0 08             	shl    eax,0x8
c0025812:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025817:	89 c1                	mov    ecx,eax
c0025819:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002581c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002581f:	89 c7                	mov    edi,eax
c0025821:	c1 ff 17             	sar    edi,0x17
c0025824:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025828:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002582b:	89 f8                	mov    eax,edi
c002582d:	0f b6 c0             	movzx  eax,al
c0025830:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0025833:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0025837:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002583a:	42                   	inc    edx
c002583b:	80 e2 fe             	and    dl,0xfe
c002583e:	75 7b                	jne    c00258bb <__mulsf3+0xc2>
c0025840:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025844:	74 54                	je     c002589a <__mulsf3+0xa1>
c0025846:	85 c9                	test   ecx,ecx
c0025848:	0f 85 64 01 00 00    	jne    c00259b2 <__mulsf3+0x1b9>
c002584e:	8d 57 01             	lea    edx,[edi+0x1]
c0025851:	80 e2 fe             	and    dl,0xfe
c0025854:	75 1f                	jne    c0025875 <__mulsf3+0x7c>
c0025856:	85 c0                	test   eax,eax
c0025858:	b8 00 00 00 00       	mov    eax,0x0
c002585d:	74 29                	je     c0025888 <__mulsf3+0x8f>
c002585f:	53                   	push   ebx
c0025860:	53                   	push   ebx
c0025861:	50                   	push   eax
c0025862:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025865:	e8 96 05 00 00       	call   c0025e00 <__nesf2>
c002586a:	83 c4 10             	add    esp,0x10
c002586d:	85 c0                	test   eax,eax
c002586f:	0f 85 3a 01 00 00    	jne    c00259af <__mulsf3+0x1b6>
c0025875:	85 ff                	test   edi,edi
c0025877:	0f 89 35 01 00 00    	jns    c00259b2 <__mulsf3+0x1b9>
c002587d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0025883:	e9 2a 01 00 00       	jmp    c00259b2 <__mulsf3+0x1b9>
c0025888:	51                   	push   ecx
c0025889:	51                   	push   ecx
c002588a:	50                   	push   eax
c002588b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002588e:	e8 6d 05 00 00       	call   c0025e00 <__nesf2>
c0025893:	83 c4 10             	add    esp,0x10
c0025896:	85 c0                	test   eax,eax
c0025898:	eb 15                	jmp    c00258af <__mulsf3+0xb6>
c002589a:	85 c9                	test   ecx,ecx
c002589c:	74 0b                	je     c00258a9 <__mulsf3+0xb0>
c002589e:	8d 53 ff             	lea    edx,[ebx-0x1]
c00258a1:	01 c9                	add    ecx,ecx
c00258a3:	78 16                	js     c00258bb <__mulsf3+0xc2>
c00258a5:	89 d3                	mov    ebx,edx
c00258a7:	eb f5                	jmp    c002589e <__mulsf3+0xa5>
c00258a9:	89 f8                	mov    eax,edi
c00258ab:	f7 d0                	not    eax
c00258ad:	84 c0                	test   al,al
c00258af:	75 c4                	jne    c0025875 <__mulsf3+0x7c>
c00258b1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00258b6:	e9 f7 00 00 00       	jmp    c00259b2 <__mulsf3+0x1b9>
c00258bb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00258be:	c1 e6 08             	shl    esi,0x8
c00258c1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00258c7:	8d 57 01             	lea    edx,[edi+0x1]
c00258ca:	80 e2 fe             	and    dl,0xfe
c00258cd:	75 63                	jne    c0025932 <__mulsf3+0x139>
c00258cf:	85 c0                	test   eax,eax
c00258d1:	74 2f                	je     c0025902 <__mulsf3+0x109>
c00258d3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00258d7:	0f 89 d2 00 00 00    	jns    c00259af <__mulsf3+0x1b6>
c00258dd:	52                   	push   edx
c00258de:	52                   	push   edx
c00258df:	6a 00                	push   0x0
c00258e1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00258e4:	e8 dc 04 00 00       	call   c0025dc5 <__eqsf2>
c00258e9:	83 c4 10             	add    esp,0x10
c00258ec:	85 c0                	test   eax,eax
c00258ee:	0f 85 bb 00 00 00    	jne    c00259af <__mulsf3+0x1b6>
c00258f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258f7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00258fd:	e9 b0 00 00 00       	jmp    c00259b2 <__mulsf3+0x1b9>
c0025902:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025905:	50                   	push   eax
c0025906:	50                   	push   eax
c0025907:	6a 00                	push   0x0
c0025909:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002590c:	e8 b4 04 00 00       	call   c0025dc5 <__eqsf2>
c0025911:	83 c4 10             	add    esp,0x10
c0025914:	85 c0                	test   eax,eax
c0025916:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025919:	75 0c                	jne    c0025927 <__mulsf3+0x12e>
c002591b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002591f:	0f 89 8a 00 00 00    	jns    c00259af <__mulsf3+0x1b6>
c0025925:	eb cd                	jmp    c00258f4 <__mulsf3+0xfb>
c0025927:	8d 43 ff             	lea    eax,[ebx-0x1]
c002592a:	01 f6                	add    esi,esi
c002592c:	78 04                	js     c0025932 <__mulsf3+0x139>
c002592e:	89 c3                	mov    ebx,eax
c0025930:	eb f5                	jmp    c0025927 <__mulsf3+0x12e>
c0025932:	89 c8                	mov    eax,ecx
c0025934:	0d 00 00 00 80       	or     eax,0x80000000
c0025939:	81 ce 00 00 00 80    	or     esi,0x80000000
c002593f:	f7 e6                	mul    esi
c0025941:	85 c0                	test   eax,eax
c0025943:	0f 95 c0             	setne  al
c0025946:	0f b6 c0             	movzx  eax,al
c0025949:	09 c2                	or     edx,eax
c002594b:	78 03                	js     c0025950 <__mulsf3+0x157>
c002594d:	01 d2                	add    edx,edx
c002594f:	4b                   	dec    ebx
c0025950:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0025956:	7f 22                	jg     c002597a <__mulsf3+0x181>
c0025958:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002595e:	85 db                	test   ebx,ebx
c0025960:	7f 23                	jg     c0025985 <__mulsf3+0x18c>
c0025962:	83 fb e9             	cmp    ebx,0xffffffe9
c0025965:	7c 1a                	jl     c0025981 <__mulsf3+0x188>
c0025967:	81 ca 00 00 00 80    	or     edx,0x80000000
c002596d:	b9 01 00 00 00       	mov    ecx,0x1
c0025972:	29 d9                	sub    ecx,ebx
c0025974:	d3 ea                	shr    edx,cl
c0025976:	31 db                	xor    ebx,ebx
c0025978:	eb 0b                	jmp    c0025985 <__mulsf3+0x18c>
c002597a:	bb ff 00 00 00       	mov    ebx,0xff
c002597f:	eb 02                	jmp    c0025983 <__mulsf3+0x18a>
c0025981:	31 db                	xor    ebx,ebx
c0025983:	31 d2                	xor    edx,edx
c0025985:	89 d0                	mov    eax,edx
c0025987:	c1 e8 08             	shr    eax,0x8
c002598a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002598d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025993:	09 fb                	or     ebx,edi
c0025995:	c1 e3 17             	shl    ebx,0x17
c0025998:	09 c3                	or     ebx,eax
c002599a:	f6 c2 7f             	test   dl,0x7f
c002599d:	0f 95 c1             	setne  cl
c00259a0:	09 c8                	or     eax,ecx
c00259a2:	83 e0 01             	and    eax,0x1
c00259a5:	c1 ea 07             	shr    edx,0x7
c00259a8:	21 c2                	and    edx,eax
c00259aa:	8d 34 13             	lea    esi,[ebx+edx*1]
c00259ad:	eb 03                	jmp    c00259b2 <__mulsf3+0x1b9>
c00259af:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00259b2:	89 f0                	mov    eax,esi
c00259b4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00259b7:	5b                   	pop    ebx
c00259b8:	5e                   	pop    esi
c00259b9:	5f                   	pop    edi
c00259ba:	5d                   	pop    ebp
c00259bb:	c3                   	ret    

c00259bc <__divsf3>:
c00259bc:	55                   	push   ebp
c00259bd:	89 e5                	mov    ebp,esp
c00259bf:	57                   	push   edi
c00259c0:	56                   	push   esi
c00259c1:	53                   	push   ebx
c00259c2:	83 ec 1c             	sub    esp,0x1c
c00259c5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00259c8:	89 d8                	mov    eax,ebx
c00259ca:	89 d9                	mov    ecx,ebx
c00259cc:	c1 f9 17             	sar    ecx,0x17
c00259cf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00259d2:	c1 e0 08             	shl    eax,0x8
c00259d5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00259da:	89 c1                	mov    ecx,eax
c00259dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259df:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00259e2:	89 c7                	mov    edi,eax
c00259e4:	c1 ff 17             	sar    edi,0x17
c00259e7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00259eb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00259ee:	89 f8                	mov    eax,edi
c00259f0:	0f b6 c0             	movzx  eax,al
c00259f3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00259f6:	29 c6                	sub    esi,eax
c00259f8:	83 c6 7f             	add    esi,0x7f
c00259fb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00259fe:	42                   	inc    edx
c00259ff:	80 e2 fe             	and    dl,0xfe
c0025a02:	0f 85 9c 00 00 00    	jne    c0025aa4 <__divsf3+0xe8>
c0025a08:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025a0c:	74 33                	je     c0025a41 <__divsf3+0x85>
c0025a0e:	85 c9                	test   ecx,ecx
c0025a10:	0f 85 c7 01 00 00    	jne    c0025bdd <__divsf3+0x221>
c0025a16:	8d 57 01             	lea    edx,[edi+0x1]
c0025a19:	80 e2 fe             	and    dl,0xfe
c0025a1c:	75 2f                	jne    c0025a4d <__divsf3+0x91>
c0025a1e:	85 c0                	test   eax,eax
c0025a20:	74 2b                	je     c0025a4d <__divsf3+0x91>
c0025a22:	51                   	push   ecx
c0025a23:	51                   	push   ecx
c0025a24:	6a 00                	push   0x0
c0025a26:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025a29:	e8 d2 03 00 00       	call   c0025e00 <__nesf2>
c0025a2e:	83 c4 10             	add    esp,0x10
c0025a31:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025a34:	85 c0                	test   eax,eax
c0025a36:	0f 85 a1 01 00 00    	jne    c0025bdd <__divsf3+0x221>
c0025a3c:	e9 92 01 00 00       	jmp    c0025bd3 <__divsf3+0x217>
c0025a41:	85 c9                	test   ecx,ecx
c0025a43:	75 1b                	jne    c0025a60 <__divsf3+0xa4>
c0025a45:	8d 57 01             	lea    edx,[edi+0x1]
c0025a48:	80 e2 fe             	and    dl,0xfe
c0025a4b:	74 1e                	je     c0025a6b <__divsf3+0xaf>
c0025a4d:	85 ff                	test   edi,edi
c0025a4f:	0f 89 88 01 00 00    	jns    c0025bdd <__divsf3+0x221>
c0025a55:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0025a5b:	e9 7d 01 00 00       	jmp    c0025bdd <__divsf3+0x221>
c0025a60:	8d 56 ff             	lea    edx,[esi-0x1]
c0025a63:	01 c9                	add    ecx,ecx
c0025a65:	78 3d                	js     c0025aa4 <__divsf3+0xe8>
c0025a67:	89 d6                	mov    esi,edx
c0025a69:	eb f5                	jmp    c0025a60 <__divsf3+0xa4>
c0025a6b:	85 c0                	test   eax,eax
c0025a6d:	b8 00 00 00 00       	mov    eax,0x0
c0025a72:	74 18                	je     c0025a8c <__divsf3+0xd0>
c0025a74:	52                   	push   edx
c0025a75:	52                   	push   edx
c0025a76:	50                   	push   eax
c0025a77:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025a7a:	e8 81 03 00 00       	call   c0025e00 <__nesf2>
c0025a7f:	83 c4 10             	add    esp,0x10
c0025a82:	85 c0                	test   eax,eax
c0025a84:	0f 85 50 01 00 00    	jne    c0025bda <__divsf3+0x21e>
c0025a8a:	eb c1                	jmp    c0025a4d <__divsf3+0x91>
c0025a8c:	56                   	push   esi
c0025a8d:	56                   	push   esi
c0025a8e:	50                   	push   eax
c0025a8f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025a92:	e8 69 03 00 00       	call   c0025e00 <__nesf2>
c0025a97:	83 c4 10             	add    esp,0x10
c0025a9a:	85 c0                	test   eax,eax
c0025a9c:	0f 84 31 01 00 00    	je     c0025bd3 <__divsf3+0x217>
c0025aa2:	eb a9                	jmp    c0025a4d <__divsf3+0x91>
c0025aa4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0025aa7:	c1 e3 08             	shl    ebx,0x8
c0025aaa:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025ab0:	8d 57 01             	lea    edx,[edi+0x1]
c0025ab3:	80 e2 fe             	and    dl,0xfe
c0025ab6:	75 71                	jne    c0025b29 <__divsf3+0x16d>
c0025ab8:	85 c0                	test   eax,eax
c0025aba:	ba 00 00 00 00       	mov    edx,0x0
c0025abf:	74 2f                	je     c0025af0 <__divsf3+0x134>
c0025ac1:	51                   	push   ecx
c0025ac2:	51                   	push   ecx
c0025ac3:	52                   	push   edx
c0025ac4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025ac7:	e8 f9 02 00 00       	call   c0025dc5 <__eqsf2>
c0025acc:	83 c4 10             	add    esp,0x10
c0025acf:	85 c0                	test   eax,eax
c0025ad1:	0f 85 03 01 00 00    	jne    c0025bda <__divsf3+0x21e>
c0025ad7:	31 d2                	xor    edx,edx
c0025ad9:	89 d3                	mov    ebx,edx
c0025adb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025ade:	31 f8                	xor    eax,edi
c0025ae0:	0f 89 f7 00 00 00    	jns    c0025bdd <__divsf3+0x221>
c0025ae6:	bb 00 00 00 80       	mov    ebx,0x80000000
c0025aeb:	e9 ed 00 00 00       	jmp    c0025bdd <__divsf3+0x221>
c0025af0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025af3:	50                   	push   eax
c0025af4:	50                   	push   eax
c0025af5:	52                   	push   edx
c0025af6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025af9:	e8 c7 02 00 00       	call   c0025dc5 <__eqsf2>
c0025afe:	83 c4 10             	add    esp,0x10
c0025b01:	85 c0                	test   eax,eax
c0025b03:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025b06:	75 16                	jne    c0025b1e <__divsf3+0x162>
c0025b08:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025b0b:	31 fb                	xor    ebx,edi
c0025b0d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0025b13:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0025b19:	e9 bf 00 00 00       	jmp    c0025bdd <__divsf3+0x221>
c0025b1e:	8d 46 01             	lea    eax,[esi+0x1]
c0025b21:	01 db                	add    ebx,ebx
c0025b23:	78 04                	js     c0025b29 <__divsf3+0x16d>
c0025b25:	89 c6                	mov    esi,eax
c0025b27:	eb f5                	jmp    c0025b1e <__divsf3+0x162>
c0025b29:	89 c8                	mov    eax,ecx
c0025b2b:	0d 00 00 00 80       	or     eax,0x80000000
c0025b30:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025b36:	31 d2                	xor    edx,edx
c0025b38:	39 d8                	cmp    eax,ebx
c0025b3a:	72 07                	jb     c0025b43 <__divsf3+0x187>
c0025b3c:	29 d8                	sub    eax,ebx
c0025b3e:	ba 01 00 00 00       	mov    edx,0x1
c0025b43:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0025b4a:	01 d2                	add    edx,edx
c0025b4c:	89 c1                	mov    ecx,eax
c0025b4e:	01 c0                	add    eax,eax
c0025b50:	85 c9                	test   ecx,ecx
c0025b52:	78 04                	js     c0025b58 <__divsf3+0x19c>
c0025b54:	39 c3                	cmp    ebx,eax
c0025b56:	77 05                	ja     c0025b5d <__divsf3+0x1a1>
c0025b58:	29 d8                	sub    eax,ebx
c0025b5a:	83 ca 01             	or     edx,0x1
c0025b5d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0025b60:	75 e8                	jne    c0025b4a <__divsf3+0x18e>
c0025b62:	85 c0                	test   eax,eax
c0025b64:	0f 95 c0             	setne  al
c0025b67:	0f b6 c0             	movzx  eax,al
c0025b6a:	c1 e2 06             	shl    edx,0x6
c0025b6d:	09 c2                	or     edx,eax
c0025b6f:	78 03                	js     c0025b74 <__divsf3+0x1b8>
c0025b71:	01 d2                	add    edx,edx
c0025b73:	4e                   	dec    esi
c0025b74:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025b7a:	7f 22                	jg     c0025b9e <__divsf3+0x1e2>
c0025b7c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025b82:	85 f6                	test   esi,esi
c0025b84:	7f 23                	jg     c0025ba9 <__divsf3+0x1ed>
c0025b86:	83 fe e9             	cmp    esi,0xffffffe9
c0025b89:	7c 1a                	jl     c0025ba5 <__divsf3+0x1e9>
c0025b8b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025b91:	b9 01 00 00 00       	mov    ecx,0x1
c0025b96:	29 f1                	sub    ecx,esi
c0025b98:	d3 ea                	shr    edx,cl
c0025b9a:	31 f6                	xor    esi,esi
c0025b9c:	eb 0b                	jmp    c0025ba9 <__divsf3+0x1ed>
c0025b9e:	be ff 00 00 00       	mov    esi,0xff
c0025ba3:	eb 02                	jmp    c0025ba7 <__divsf3+0x1eb>
c0025ba5:	31 f6                	xor    esi,esi
c0025ba7:	31 d2                	xor    edx,edx
c0025ba9:	89 d0                	mov    eax,edx
c0025bab:	c1 e8 08             	shr    eax,0x8
c0025bae:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025bb1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025bb7:	09 fe                	or     esi,edi
c0025bb9:	c1 e6 17             	shl    esi,0x17
c0025bbc:	09 c6                	or     esi,eax
c0025bbe:	f6 c2 7f             	test   dl,0x7f
c0025bc1:	0f 95 c1             	setne  cl
c0025bc4:	09 c8                	or     eax,ecx
c0025bc6:	83 e0 01             	and    eax,0x1
c0025bc9:	c1 ea 07             	shr    edx,0x7
c0025bcc:	21 c2                	and    edx,eax
c0025bce:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0025bd1:	eb 0a                	jmp    c0025bdd <__divsf3+0x221>
c0025bd3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0025bd8:	eb 03                	jmp    c0025bdd <__divsf3+0x221>
c0025bda:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025bdd:	89 d8                	mov    eax,ebx
c0025bdf:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025be2:	5b                   	pop    ebx
c0025be3:	5e                   	pop    esi
c0025be4:	5f                   	pop    edi
c0025be5:	5d                   	pop    ebp
c0025be6:	c3                   	ret    

c0025be7 <__floatsisf>:
c0025be7:	55                   	push   ebp
c0025be8:	89 e5                	mov    ebp,esp
c0025bea:	53                   	push   ebx
c0025beb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025bee:	85 d2                	test   edx,edx
c0025bf0:	7e 2b                	jle    c0025c1d <__floatsisf+0x36>
c0025bf2:	0f bd ca             	bsr    ecx,edx
c0025bf5:	83 f1 1f             	xor    ecx,0x1f
c0025bf8:	d3 e2                	shl    edx,cl
c0025bfa:	89 d0                	mov    eax,edx
c0025bfc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025c01:	89 c3                	mov    ebx,eax
c0025c03:	c1 eb 08             	shr    ebx,0x8
c0025c06:	80 e2 7f             	and    dl,0x7f
c0025c09:	0f 95 c2             	setne  dl
c0025c0c:	09 da                	or     edx,ebx
c0025c0e:	83 e2 01             	and    edx,0x1
c0025c11:	c1 e8 07             	shr    eax,0x7
c0025c14:	21 c2                	and    edx,eax
c0025c16:	b8 9e 00 00 00       	mov    eax,0x9e
c0025c1b:	eb 32                	jmp    c0025c4f <__floatsisf+0x68>
c0025c1d:	b8 00 00 00 00       	mov    eax,0x0
c0025c22:	74 34                	je     c0025c58 <__floatsisf+0x71>
c0025c24:	f7 da                	neg    edx
c0025c26:	0f bd ca             	bsr    ecx,edx
c0025c29:	83 f1 1f             	xor    ecx,0x1f
c0025c2c:	d3 e2                	shl    edx,cl
c0025c2e:	89 d0                	mov    eax,edx
c0025c30:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025c35:	89 c3                	mov    ebx,eax
c0025c37:	c1 eb 08             	shr    ebx,0x8
c0025c3a:	80 e2 7f             	and    dl,0x7f
c0025c3d:	0f 95 c2             	setne  dl
c0025c40:	09 da                	or     edx,ebx
c0025c42:	83 e2 01             	and    edx,0x1
c0025c45:	c1 e8 07             	shr    eax,0x7
c0025c48:	21 c2                	and    edx,eax
c0025c4a:	b8 9e 01 00 00       	mov    eax,0x19e
c0025c4f:	29 c8                	sub    eax,ecx
c0025c51:	c1 e0 17             	shl    eax,0x17
c0025c54:	09 d8                	or     eax,ebx
c0025c56:	01 d0                	add    eax,edx
c0025c58:	5b                   	pop    ebx
c0025c59:	5d                   	pop    ebp
c0025c5a:	c3                   	ret    

c0025c5b <__floatunsisf>:
c0025c5b:	55                   	push   ebp
c0025c5c:	89 e5                	mov    ebp,esp
c0025c5e:	53                   	push   ebx
c0025c5f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025c62:	31 c0                	xor    eax,eax
c0025c64:	85 d2                	test   edx,edx
c0025c66:	74 32                	je     c0025c9a <__floatunsisf+0x3f>
c0025c68:	0f bd ca             	bsr    ecx,edx
c0025c6b:	83 f1 1f             	xor    ecx,0x1f
c0025c6e:	d3 e2                	shl    edx,cl
c0025c70:	89 d0                	mov    eax,edx
c0025c72:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025c77:	89 c3                	mov    ebx,eax
c0025c79:	c1 eb 08             	shr    ebx,0x8
c0025c7c:	80 e2 7f             	and    dl,0x7f
c0025c7f:	0f 95 c2             	setne  dl
c0025c82:	09 da                	or     edx,ebx
c0025c84:	83 e2 01             	and    edx,0x1
c0025c87:	c1 e8 07             	shr    eax,0x7
c0025c8a:	21 c2                	and    edx,eax
c0025c8c:	b8 9e 00 00 00       	mov    eax,0x9e
c0025c91:	29 c8                	sub    eax,ecx
c0025c93:	c1 e0 17             	shl    eax,0x17
c0025c96:	09 d8                	or     eax,ebx
c0025c98:	01 d0                	add    eax,edx
c0025c9a:	5b                   	pop    ebx
c0025c9b:	5d                   	pop    ebp
c0025c9c:	c3                   	ret    

c0025c9d <__fixsfsi>:
c0025c9d:	55                   	push   ebp
c0025c9e:	89 e5                	mov    ebp,esp
c0025ca0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025ca3:	89 d1                	mov    ecx,edx
c0025ca5:	c1 e1 08             	shl    ecx,0x8
c0025ca8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0025cae:	c1 fa 17             	sar    edx,0x17
c0025cb1:	78 1c                	js     c0025ccf <__fixsfsi+0x32>
c0025cb3:	83 ea 7f             	sub    edx,0x7f
c0025cb6:	31 c0                	xor    eax,eax
c0025cb8:	83 fa 1e             	cmp    edx,0x1e
c0025cbb:	77 40                	ja     c0025cfd <__fixsfsi+0x60>
c0025cbd:	89 c8                	mov    eax,ecx
c0025cbf:	0d 00 00 00 80       	or     eax,0x80000000
c0025cc4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025cc9:	29 d1                	sub    ecx,edx
c0025ccb:	d3 e8                	shr    eax,cl
c0025ccd:	eb 2e                	jmp    c0025cfd <__fixsfsi+0x60>
c0025ccf:	31 c0                	xor    eax,eax
c0025cd1:	81 c2 81 00 00 00    	add    edx,0x81
c0025cd7:	78 24                	js     c0025cfd <__fixsfsi+0x60>
c0025cd9:	83 fa 1e             	cmp    edx,0x1e
c0025cdc:	7e 09                	jle    c0025ce7 <__fixsfsi+0x4a>
c0025cde:	83 fa 1f             	cmp    edx,0x1f
c0025ce1:	75 18                	jne    c0025cfb <__fixsfsi+0x5e>
c0025ce3:	85 c9                	test   ecx,ecx
c0025ce5:	75 14                	jne    c0025cfb <__fixsfsi+0x5e>
c0025ce7:	89 c8                	mov    eax,ecx
c0025ce9:	0d 00 00 00 80       	or     eax,0x80000000
c0025cee:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025cf3:	29 d1                	sub    ecx,edx
c0025cf5:	d3 e8                	shr    eax,cl
c0025cf7:	f7 d8                	neg    eax
c0025cf9:	eb 02                	jmp    c0025cfd <__fixsfsi+0x60>
c0025cfb:	31 c0                	xor    eax,eax
c0025cfd:	5d                   	pop    ebp
c0025cfe:	c3                   	ret    

c0025cff <__fixunssfsi>:
c0025cff:	55                   	push   ebp
c0025d00:	89 e5                	mov    ebp,esp
c0025d02:	53                   	push   ebx
c0025d03:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025d06:	89 d3                	mov    ebx,edx
c0025d08:	c1 fb 17             	sar    ebx,0x17
c0025d0b:	83 eb 7f             	sub    ebx,0x7f
c0025d0e:	31 c0                	xor    eax,eax
c0025d10:	83 fb 1f             	cmp    ebx,0x1f
c0025d13:	77 18                	ja     c0025d2d <__fixunssfsi+0x2e>
c0025d15:	89 d0                	mov    eax,edx
c0025d17:	c1 e0 08             	shl    eax,0x8
c0025d1a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025d1f:	0d 00 00 00 80       	or     eax,0x80000000
c0025d24:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025d29:	29 d9                	sub    ecx,ebx
c0025d2b:	d3 e8                	shr    eax,cl
c0025d2d:	5b                   	pop    ebx
c0025d2e:	5d                   	pop    ebp
c0025d2f:	c3                   	ret    

c0025d30 <__cmpsf2>:
c0025d30:	55                   	push   ebp
c0025d31:	89 e5                	mov    ebp,esp
c0025d33:	57                   	push   edi
c0025d34:	56                   	push   esi
c0025d35:	53                   	push   ebx
c0025d36:	83 ec 24             	sub    esp,0x24
c0025d39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025d3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d3f:	e8 4f 10 00 00       	call   c0026d93 <__truncdfsf2>
c0025d44:	5a                   	pop    edx
c0025d45:	59                   	pop    ecx
c0025d46:	89 c3                	mov    ebx,eax
c0025d48:	c1 e8 17             	shr    eax,0x17
c0025d4b:	0f b6 f0             	movzx  esi,al
c0025d4e:	89 d8                	mov    eax,ebx
c0025d50:	c1 e8 1f             	shr    eax,0x1f
c0025d53:	31 c6                	xor    esi,eax
c0025d55:	c1 e3 08             	shl    ebx,0x8
c0025d58:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0025d5b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0025d5e:	e8 30 10 00 00       	call   c0026d93 <__truncdfsf2>
c0025d63:	83 c4 10             	add    esp,0x10
c0025d66:	89 c1                	mov    ecx,eax
c0025d68:	c1 e9 17             	shr    ecx,0x17
c0025d6b:	0f b6 c9             	movzx  ecx,cl
c0025d6e:	89 c7                	mov    edi,eax
c0025d70:	c1 ef 1f             	shr    edi,0x1f
c0025d73:	89 ca                	mov    edx,ecx
c0025d75:	31 fa                	xor    edx,edi
c0025d77:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0025d7a:	c1 e0 08             	shl    eax,0x8
c0025d7d:	89 c2                	mov    edx,eax
c0025d7f:	89 d8                	mov    eax,ebx
c0025d81:	09 d0                	or     eax,edx
c0025d83:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025d88:	09 f0                	or     eax,esi
c0025d8a:	75 08                	jne    c0025d94 <__cmpsf2+0x64>
c0025d8c:	31 c0                	xor    eax,eax
c0025d8e:	39 f9                	cmp    ecx,edi
c0025d90:	75 0c                	jne    c0025d9e <__cmpsf2+0x6e>
c0025d92:	eb 29                	jmp    c0025dbd <__cmpsf2+0x8d>
c0025d94:	b8 01 00 00 00       	mov    eax,0x1
c0025d99:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025d9c:	7f 1f                	jg     c0025dbd <__cmpsf2+0x8d>
c0025d9e:	83 c8 ff             	or     eax,0xffffffff
c0025da1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025da4:	7c 17                	jl     c0025dbd <__cmpsf2+0x8d>
c0025da6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025dac:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025db2:	b8 01 00 00 00       	mov    eax,0x1
c0025db7:	39 d3                	cmp    ebx,edx
c0025db9:	77 02                	ja     c0025dbd <__cmpsf2+0x8d>
c0025dbb:	19 c0                	sbb    eax,eax
c0025dbd:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025dc0:	5b                   	pop    ebx
c0025dc1:	5e                   	pop    esi
c0025dc2:	5f                   	pop    edi
c0025dc3:	5d                   	pop    ebp
c0025dc4:	c3                   	ret    

c0025dc5 <__eqsf2>:
c0025dc5:	55                   	push   ebp
c0025dc6:	89 e5                	mov    ebp,esp
c0025dc8:	83 ec 24             	sub    esp,0x24
c0025dcb:	6a 01                	push   0x1
c0025dcd:	83 ec 0c             	sub    esp,0xc
c0025dd0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025dd3:	e8 df 10 00 00       	call   c0026eb7 <__extendsfdf2>
c0025dd8:	83 c4 10             	add    esp,0x10
c0025ddb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025dde:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025de1:	52                   	push   edx
c0025de2:	50                   	push   eax
c0025de3:	50                   	push   eax
c0025de4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025de7:	e8 cb 10 00 00       	call   c0026eb7 <__extendsfdf2>
c0025dec:	59                   	pop    ecx
c0025ded:	59                   	pop    ecx
c0025dee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025df1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025df4:	52                   	push   edx
c0025df5:	50                   	push   eax
c0025df6:	e8 35 ff ff ff       	call   c0025d30 <__cmpsf2>
c0025dfb:	83 c4 20             	add    esp,0x20
c0025dfe:	c9                   	leave  
c0025dff:	c3                   	ret    

c0025e00 <__nesf2>:
c0025e00:	eb c3                	jmp    c0025dc5 <__eqsf2>

c0025e02 <__gtsf2>:
c0025e02:	55                   	push   ebp
c0025e03:	89 e5                	mov    ebp,esp
c0025e05:	83 ec 24             	sub    esp,0x24
c0025e08:	6a ff                	push   0xffffffff
c0025e0a:	83 ec 0c             	sub    esp,0xc
c0025e0d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025e10:	e8 a2 10 00 00       	call   c0026eb7 <__extendsfdf2>
c0025e15:	83 c4 10             	add    esp,0x10
c0025e18:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025e1b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025e1e:	52                   	push   edx
c0025e1f:	50                   	push   eax
c0025e20:	50                   	push   eax
c0025e21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e24:	e8 8e 10 00 00       	call   c0026eb7 <__extendsfdf2>
c0025e29:	59                   	pop    ecx
c0025e2a:	59                   	pop    ecx
c0025e2b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025e2e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025e31:	52                   	push   edx
c0025e32:	50                   	push   eax
c0025e33:	e8 f8 fe ff ff       	call   c0025d30 <__cmpsf2>
c0025e38:	83 c4 20             	add    esp,0x20
c0025e3b:	c9                   	leave  
c0025e3c:	c3                   	ret    

c0025e3d <__gesf2>:
c0025e3d:	eb c3                	jmp    c0025e02 <__gtsf2>

c0025e3f <__ltsf2>:
c0025e3f:	eb 84                	jmp    c0025dc5 <__eqsf2>

c0025e41 <__lesf2>:
c0025e41:	eb 82                	jmp    c0025dc5 <__eqsf2>

c0025e43 <__adddf3>:
c0025e43:	55                   	push   ebp
c0025e44:	89 e5                	mov    ebp,esp
c0025e46:	57                   	push   edi
c0025e47:	56                   	push   esi
c0025e48:	53                   	push   ebx
c0025e49:	83 ec 24             	sub    esp,0x24
c0025e4c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025e4f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025e52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025e55:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025e58:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025e5b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025e5e:	89 c8                	mov    eax,ecx
c0025e60:	89 ce                	mov    esi,ecx
c0025e62:	c1 fe 14             	sar    esi,0x14
c0025e65:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0025e68:	89 fb                	mov    ebx,edi
c0025e6a:	89 fa                	mov    edx,edi
c0025e6c:	c1 e2 0b             	shl    edx,0xb
c0025e6f:	c1 e0 0b             	shl    eax,0xb
c0025e72:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025e77:	c1 eb 15             	shr    ebx,0x15
c0025e7a:	09 d8                	or     eax,ebx
c0025e7c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0025e7f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0025e82:	c1 fe 14             	sar    esi,0x14
c0025e85:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0025e88:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025e8b:	89 f3                	mov    ebx,esi
c0025e8d:	c1 e3 0b             	shl    ebx,0xb
c0025e90:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0025e93:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025e96:	c1 e3 0b             	shl    ebx,0xb
c0025e99:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0025e9f:	c1 ee 15             	shr    esi,0x15
c0025ea2:	09 f3                	or     ebx,esi
c0025ea4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0025ea7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025eaa:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0025ead:	0f 88 5f 02 00 00    	js     c0026112 <__adddf3+0x2cf>
c0025eb3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025eb6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0025eb9:	85 db                	test   ebx,ebx
c0025ebb:	0f 8e c7 00 00 00    	jle    c0025f88 <__adddf3+0x145>
c0025ec1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0025ec8:	75 1a                	jne    c0025ee4 <__adddf3+0xa1>
c0025eca:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025ecd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0025ed0:	0f 84 b2 05 00 00    	je     c0026488 <__adddf3+0x645>
c0025ed6:	4b                   	dec    ebx
c0025ed7:	75 23                	jne    c0025efc <__adddf3+0xb9>
c0025ed9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0025edc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0025edf:	e9 99 00 00 00       	jmp    c0025f7d <__adddf3+0x13a>
c0025ee4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025ee7:	f7 d6                	not    esi
c0025ee9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0025eef:	0f 84 93 05 00 00    	je     c0026488 <__adddf3+0x645>
c0025ef5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0025efc:	83 fb 1f             	cmp    ebx,0x1f
c0025eff:	7e 42                	jle    c0025f43 <__adddf3+0x100>
c0025f01:	83 fb 3f             	cmp    ebx,0x3f
c0025f04:	0f 8f 7e 05 00 00    	jg     c0026488 <__adddf3+0x645>
c0025f0a:	83 e3 1f             	and    ebx,0x1f
c0025f0d:	89 d9                	mov    ecx,ebx
c0025f0f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0025f12:	d3 ef                	shr    edi,cl
c0025f14:	31 db                	xor    ebx,ebx
c0025f16:	85 c9                	test   ecx,ecx
c0025f18:	74 15                	je     c0025f2f <__adddf3+0xec>
c0025f1a:	be 20 00 00 00       	mov    esi,0x20
c0025f1f:	29 ce                	sub    esi,ecx
c0025f21:	89 f1                	mov    ecx,esi
c0025f23:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025f26:	d3 e6                	shl    esi,cl
c0025f28:	31 db                	xor    ebx,ebx
c0025f2a:	85 f6                	test   esi,esi
c0025f2c:	0f 95 c3             	setne  bl
c0025f2f:	31 c9                	xor    ecx,ecx
c0025f31:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025f35:	0f 95 c1             	setne  cl
c0025f38:	09 cf                	or     edi,ecx
c0025f3a:	09 fb                	or     ebx,edi
c0025f3c:	01 da                	add    edx,ebx
c0025f3e:	83 d0 00             	adc    eax,0x0
c0025f41:	eb 3a                	jmp    c0025f7d <__adddf3+0x13a>
c0025f43:	bf 20 00 00 00       	mov    edi,0x20
c0025f48:	29 df                	sub    edi,ebx
c0025f4a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025f4d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025f50:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0025f53:	d3 e6                	shl    esi,cl
c0025f55:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0025f58:	88 d9                	mov    cl,bl
c0025f5a:	d3 ef                	shr    edi,cl
c0025f5c:	09 fe                	or     esi,edi
c0025f5e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0025f61:	88 d9                	mov    cl,bl
c0025f63:	d3 ef                	shr    edi,cl
c0025f65:	89 fb                	mov    ebx,edi
c0025f67:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0025f6a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0025f6d:	d3 e7                	shl    edi,cl
c0025f6f:	85 ff                	test   edi,edi
c0025f71:	0f 95 c1             	setne  cl
c0025f74:	0f b6 c9             	movzx  ecx,cl
c0025f77:	09 ce                	or     esi,ecx
c0025f79:	01 f2                	add    edx,esi
c0025f7b:	11 d8                	adc    eax,ebx
c0025f7d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025f80:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025f83:	e9 52 01 00 00       	jmp    c00260da <__adddf3+0x297>
c0025f88:	0f 84 d5 00 00 00    	je     c0026063 <__adddf3+0x220>
c0025f8e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025f91:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0025f94:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0025f97:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0025f9a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0025fa1:	75 20                	jne    c0025fc3 <__adddf3+0x180>
c0025fa3:	89 d6                	mov    esi,edx
c0025fa5:	09 c6                	or     esi,eax
c0025fa7:	0f 84 db 04 00 00    	je     c0026488 <__adddf3+0x645>
c0025fad:	4b                   	dec    ebx
c0025fae:	75 29                	jne    c0025fd9 <__adddf3+0x196>
c0025fb0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025fb3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025fb6:	01 d1                	add    ecx,edx
c0025fb8:	11 c6                	adc    esi,eax
c0025fba:	89 f0                	mov    eax,esi
c0025fbc:	89 ca                	mov    edx,ecx
c0025fbe:	e9 17 01 00 00       	jmp    c00260da <__adddf3+0x297>
c0025fc3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0025fc6:	f7 d6                	not    esi
c0025fc8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0025fce:	0f 84 b4 04 00 00    	je     c0026488 <__adddf3+0x645>
c0025fd4:	0d 00 00 00 80       	or     eax,0x80000000
c0025fd9:	83 fb 1f             	cmp    ebx,0x1f
c0025fdc:	7e 48                	jle    c0026026 <__adddf3+0x1e3>
c0025fde:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0025fe1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0025fe4:	83 fb 3f             	cmp    ebx,0x3f
c0025fe7:	0f 8f 9b 04 00 00    	jg     c0026488 <__adddf3+0x645>
c0025fed:	83 e3 1f             	and    ebx,0x1f
c0025ff0:	89 d9                	mov    ecx,ebx
c0025ff2:	89 c7                	mov    edi,eax
c0025ff4:	d3 ef                	shr    edi,cl
c0025ff6:	31 db                	xor    ebx,ebx
c0025ff8:	85 c9                	test   ecx,ecx
c0025ffa:	74 12                	je     c002600e <__adddf3+0x1cb>
c0025ffc:	be 20 00 00 00       	mov    esi,0x20
c0026001:	29 ce                	sub    esi,ecx
c0026003:	89 f1                	mov    ecx,esi
c0026005:	d3 e0                	shl    eax,cl
c0026007:	31 db                	xor    ebx,ebx
c0026009:	85 c0                	test   eax,eax
c002600b:	0f 95 c3             	setne  bl
c002600e:	31 c0                	xor    eax,eax
c0026010:	85 d2                	test   edx,edx
c0026012:	0f 95 c0             	setne  al
c0026015:	09 c7                	or     edi,eax
c0026017:	09 fb                	or     ebx,edi
c0026019:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002601c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002601f:	01 da                	add    edx,ebx
c0026021:	83 d6 00             	adc    esi,0x0
c0026024:	eb 39                	jmp    c002605f <__adddf3+0x21c>
c0026026:	be 20 00 00 00       	mov    esi,0x20
c002602b:	29 de                	sub    esi,ebx
c002602d:	89 c7                	mov    edi,eax
c002602f:	89 f1                	mov    ecx,esi
c0026031:	d3 e7                	shl    edi,cl
c0026033:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026036:	89 d7                	mov    edi,edx
c0026038:	88 d9                	mov    cl,bl
c002603a:	d3 ef                	shr    edi,cl
c002603c:	89 f9                	mov    ecx,edi
c002603e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026041:	09 cf                	or     edi,ecx
c0026043:	88 d9                	mov    cl,bl
c0026045:	d3 e8                	shr    eax,cl
c0026047:	89 f1                	mov    ecx,esi
c0026049:	d3 e2                	shl    edx,cl
c002604b:	85 d2                	test   edx,edx
c002604d:	0f 95 c2             	setne  dl
c0026050:	0f b6 d2             	movzx  edx,dl
c0026053:	09 d7                	or     edi,edx
c0026055:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026058:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002605b:	01 fa                	add    edx,edi
c002605d:	11 c6                	adc    esi,eax
c002605f:	89 f0                	mov    eax,esi
c0026061:	eb 77                	jmp    c00260da <__adddf3+0x297>
c0026063:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026066:	46                   	inc    esi
c0026067:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002606a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026070:	75 41                	jne    c00260b3 <__adddf3+0x270>
c0026072:	89 d3                	mov    ebx,edx
c0026074:	09 c3                	or     ebx,eax
c0026076:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002607d:	75 27                	jne    c00260a6 <__adddf3+0x263>
c002607f:	85 db                	test   ebx,ebx
c0026081:	0f 84 fb 03 00 00    	je     c0026482 <__adddf3+0x63f>
c0026087:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002608a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002608d:	0f 84 f5 03 00 00    	je     c0026488 <__adddf3+0x645>
c0026093:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026096:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026099:	85 c0                	test   eax,eax
c002609b:	0f 89 91 03 00 00    	jns    c0026432 <__adddf3+0x5ef>
c00260a1:	e9 85 03 00 00       	jmp    c002642b <__adddf3+0x5e8>
c00260a6:	85 db                	test   ebx,ebx
c00260a8:	0f 85 da 03 00 00    	jne    c0026488 <__adddf3+0x645>
c00260ae:	e9 cf 03 00 00       	jmp    c0026482 <__adddf3+0x63f>
c00260b3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00260b6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00260b9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00260bc:	f7 d1                	not    ecx
c00260be:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00260c4:	0f 84 70 03 00 00    	je     c002643a <__adddf3+0x5f7>
c00260ca:	d1 ea                	shr    edx,1
c00260cc:	89 c1                	mov    ecx,eax
c00260ce:	c1 e1 1f             	shl    ecx,0x1f
c00260d1:	09 ca                	or     edx,ecx
c00260d3:	d1 e8                	shr    eax,1
c00260d5:	e9 6f 03 00 00       	jmp    c0026449 <__adddf3+0x606>
c00260da:	85 c0                	test   eax,eax
c00260dc:	0f 89 67 03 00 00    	jns    c0026449 <__adddf3+0x606>
c00260e2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00260e5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00260e8:	f7 d1                	not    ecx
c00260ea:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00260f0:	0f 84 44 03 00 00    	je     c002643a <__adddf3+0x5f7>
c00260f6:	89 d1                	mov    ecx,edx
c00260f8:	d1 e9                	shr    ecx,1
c00260fa:	83 e2 01             	and    edx,0x1
c00260fd:	09 ca                	or     edx,ecx
c00260ff:	89 c1                	mov    ecx,eax
c0026101:	c1 e1 1f             	shl    ecx,0x1f
c0026104:	09 ca                	or     edx,ecx
c0026106:	d1 e8                	shr    eax,1
c0026108:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002610d:	e9 37 03 00 00       	jmp    c0026449 <__adddf3+0x606>
c0026112:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026115:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002611b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002611e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026121:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026127:	29 de                	sub    esi,ebx
c0026129:	85 f6                	test   esi,esi
c002612b:	0f 8e bd 00 00 00    	jle    c00261ee <__adddf3+0x3ab>
c0026131:	85 db                	test   ebx,ebx
c0026133:	75 17                	jne    c002614c <__adddf3+0x309>
c0026135:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026138:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002613b:	0f 84 47 03 00 00    	je     c0026488 <__adddf3+0x645>
c0026141:	4e                   	dec    esi
c0026142:	75 20                	jne    c0026164 <__adddf3+0x321>
c0026144:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026147:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002614a:	eb 5b                	jmp    c00261a7 <__adddf3+0x364>
c002614c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002614f:	f7 d3                	not    ebx
c0026151:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026157:	0f 84 2b 03 00 00    	je     c0026488 <__adddf3+0x645>
c002615d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026164:	83 fe 1f             	cmp    esi,0x1f
c0026167:	7e 49                	jle    c00261b2 <__adddf3+0x36f>
c0026169:	83 fe 3f             	cmp    esi,0x3f
c002616c:	0f 8f 16 03 00 00    	jg     c0026488 <__adddf3+0x645>
c0026172:	83 e6 1f             	and    esi,0x1f
c0026175:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026178:	89 f1                	mov    ecx,esi
c002617a:	d3 ef                	shr    edi,cl
c002617c:	31 db                	xor    ebx,ebx
c002617e:	85 f6                	test   esi,esi
c0026180:	74 13                	je     c0026195 <__adddf3+0x352>
c0026182:	b9 20 00 00 00       	mov    ecx,0x20
c0026187:	29 f1                	sub    ecx,esi
c0026189:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002618c:	d3 e6                	shl    esi,cl
c002618e:	31 db                	xor    ebx,ebx
c0026190:	85 f6                	test   esi,esi
c0026192:	0f 95 c3             	setne  bl
c0026195:	31 c9                	xor    ecx,ecx
c0026197:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002619b:	0f 95 c1             	setne  cl
c002619e:	09 cf                	or     edi,ecx
c00261a0:	09 fb                	or     ebx,edi
c00261a2:	29 da                	sub    edx,ebx
c00261a4:	83 d8 00             	sbb    eax,0x0
c00261a7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00261aa:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00261ad:	e9 aa 01 00 00       	jmp    c002635c <__adddf3+0x519>
c00261b2:	bf 20 00 00 00       	mov    edi,0x20
c00261b7:	29 f7                	sub    edi,esi
c00261b9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00261bc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00261bf:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00261c2:	d3 e3                	shl    ebx,cl
c00261c4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00261c7:	89 f1                	mov    ecx,esi
c00261c9:	d3 ef                	shr    edi,cl
c00261cb:	09 fb                	or     ebx,edi
c00261cd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00261d0:	89 f1                	mov    ecx,esi
c00261d2:	d3 ef                	shr    edi,cl
c00261d4:	89 fe                	mov    esi,edi
c00261d6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00261d9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00261dc:	d3 e7                	shl    edi,cl
c00261de:	85 ff                	test   edi,edi
c00261e0:	0f 95 c1             	setne  cl
c00261e3:	0f b6 c9             	movzx  ecx,cl
c00261e6:	09 cb                	or     ebx,ecx
c00261e8:	29 da                	sub    edx,ebx
c00261ea:	19 f0                	sbb    eax,esi
c00261ec:	eb b9                	jmp    c00261a7 <__adddf3+0x364>
c00261ee:	0f 84 cd 00 00 00    	je     c00262c1 <__adddf3+0x47e>
c00261f4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00261f7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00261fa:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00261fd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026201:	75 1b                	jne    c002621e <__adddf3+0x3db>
c0026203:	89 d6                	mov    esi,edx
c0026205:	09 c6                	or     esi,eax
c0026207:	0f 84 7b 02 00 00    	je     c0026488 <__adddf3+0x645>
c002620d:	4b                   	dec    ebx
c002620e:	75 24                	jne    c0026234 <__adddf3+0x3f1>
c0026210:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026213:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026216:	29 d1                	sub    ecx,edx
c0026218:	19 c6                	sbb    esi,eax
c002621a:	89 ca                	mov    edx,ecx
c002621c:	eb 61                	jmp    c002627f <__adddf3+0x43c>
c002621e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026221:	f7 d6                	not    esi
c0026223:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026229:	0f 84 59 02 00 00    	je     c0026488 <__adddf3+0x645>
c002622f:	0d 00 00 00 80       	or     eax,0x80000000
c0026234:	83 fb 1f             	cmp    ebx,0x1f
c0026237:	7e 4d                	jle    c0026286 <__adddf3+0x443>
c0026239:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002623c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002623f:	83 fb 3f             	cmp    ebx,0x3f
c0026242:	0f 8f 40 02 00 00    	jg     c0026488 <__adddf3+0x645>
c0026248:	83 e3 1f             	and    ebx,0x1f
c002624b:	89 d9                	mov    ecx,ebx
c002624d:	89 c7                	mov    edi,eax
c002624f:	d3 ef                	shr    edi,cl
c0026251:	31 db                	xor    ebx,ebx
c0026253:	85 c9                	test   ecx,ecx
c0026255:	74 12                	je     c0026269 <__adddf3+0x426>
c0026257:	be 20 00 00 00       	mov    esi,0x20
c002625c:	29 ce                	sub    esi,ecx
c002625e:	89 f1                	mov    ecx,esi
c0026260:	d3 e0                	shl    eax,cl
c0026262:	31 db                	xor    ebx,ebx
c0026264:	85 c0                	test   eax,eax
c0026266:	0f 95 c3             	setne  bl
c0026269:	31 c0                	xor    eax,eax
c002626b:	85 d2                	test   edx,edx
c002626d:	0f 95 c0             	setne  al
c0026270:	09 c7                	or     edi,eax
c0026272:	09 fb                	or     ebx,edi
c0026274:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026277:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002627a:	29 da                	sub    edx,ebx
c002627c:	83 de 00             	sbb    esi,0x0
c002627f:	89 f0                	mov    eax,esi
c0026281:	e9 d6 00 00 00       	jmp    c002635c <__adddf3+0x519>
c0026286:	be 20 00 00 00       	mov    esi,0x20
c002628b:	29 de                	sub    esi,ebx
c002628d:	89 c7                	mov    edi,eax
c002628f:	89 f1                	mov    ecx,esi
c0026291:	d3 e7                	shl    edi,cl
c0026293:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026296:	89 d7                	mov    edi,edx
c0026298:	88 d9                	mov    cl,bl
c002629a:	d3 ef                	shr    edi,cl
c002629c:	89 f9                	mov    ecx,edi
c002629e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00262a1:	09 cf                	or     edi,ecx
c00262a3:	88 d9                	mov    cl,bl
c00262a5:	d3 e8                	shr    eax,cl
c00262a7:	89 f1                	mov    ecx,esi
c00262a9:	d3 e2                	shl    edx,cl
c00262ab:	85 d2                	test   edx,edx
c00262ad:	0f 95 c2             	setne  dl
c00262b0:	0f b6 d2             	movzx  edx,dl
c00262b3:	09 d7                	or     edi,edx
c00262b5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00262b8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00262bb:	29 fa                	sub    edx,edi
c00262bd:	19 c6                	sbb    esi,eax
c00262bf:	eb be                	jmp    c002627f <__adddf3+0x43c>
c00262c1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00262c4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00262c7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00262cd:	75 6a                	jne    c0026339 <__adddf3+0x4f6>
c00262cf:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00262d3:	75 58                	jne    c002632d <__adddf3+0x4ea>
c00262d5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00262d8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00262db:	89 d6                	mov    esi,edx
c00262dd:	09 c6                	or     esi,eax
c00262df:	75 17                	jne    c00262f8 <__adddf3+0x4b5>
c00262e1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00262e4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00262e7:	85 db                	test   ebx,ebx
c00262e9:	0f 85 99 01 00 00    	jne    c0026488 <__adddf3+0x645>
c00262ef:	31 ff                	xor    edi,edi
c00262f1:	31 c9                	xor    ecx,ecx
c00262f3:	e9 90 01 00 00       	jmp    c0026488 <__adddf3+0x645>
c00262f8:	85 db                	test   ebx,ebx
c00262fa:	0f 84 88 01 00 00    	je     c0026488 <__adddf3+0x645>
c0026300:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026303:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0026306:	85 c0                	test   eax,eax
c0026308:	79 10                	jns    c002631a <__adddf3+0x4d7>
c002630a:	31 c9                	xor    ecx,ecx
c002630c:	f7 da                	neg    edx
c002630e:	0f 95 c1             	setne  cl
c0026311:	01 c8                	add    eax,ecx
c0026313:	f7 d8                	neg    eax
c0026315:	e9 2f 01 00 00       	jmp    c0026449 <__adddf3+0x606>
c002631a:	31 ff                	xor    edi,edi
c002631c:	31 c9                	xor    ecx,ecx
c002631e:	89 c3                	mov    ebx,eax
c0026320:	09 d3                	or     ebx,edx
c0026322:	0f 84 60 01 00 00    	je     c0026488 <__adddf3+0x645>
c0026328:	e9 05 01 00 00       	jmp    c0026432 <__adddf3+0x5ef>
c002632d:	31 ff                	xor    edi,edi
c002632f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026334:	e9 4f 01 00 00       	jmp    c0026488 <__adddf3+0x645>
c0026339:	89 c1                	mov    ecx,eax
c002633b:	89 d0                	mov    eax,edx
c002633d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0026340:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0026343:	89 ca                	mov    edx,ecx
c0026345:	85 c9                	test   ecx,ecx
c0026347:	79 2c                	jns    c0026375 <__adddf3+0x532>
c0026349:	31 c9                	xor    ecx,ecx
c002634b:	f7 d8                	neg    eax
c002634d:	0f 95 c1             	setne  cl
c0026350:	01 ca                	add    edx,ecx
c0026352:	f7 da                	neg    edx
c0026354:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026357:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002635a:	eb 19                	jmp    c0026375 <__adddf3+0x532>
c002635c:	85 c0                	test   eax,eax
c002635e:	0f 89 e5 00 00 00    	jns    c0026449 <__adddf3+0x606>
c0026364:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026369:	89 c1                	mov    ecx,eax
c002636b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002636e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026371:	89 d0                	mov    eax,edx
c0026373:	89 ca                	mov    edx,ecx
c0026375:	85 d2                	test   edx,edx
c0026377:	74 59                	je     c00263d2 <__adddf3+0x58f>
c0026379:	0f bd da             	bsr    ebx,edx
c002637c:	83 f3 1f             	xor    ebx,0x1f
c002637f:	88 d9                	mov    cl,bl
c0026381:	d3 e2                	shl    edx,cl
c0026383:	bf 20 00 00 00       	mov    edi,0x20
c0026388:	89 f9                	mov    ecx,edi
c002638a:	29 d9                	sub    ecx,ebx
c002638c:	89 c6                	mov    esi,eax
c002638e:	d3 ee                	shr    esi,cl
c0026390:	09 d6                	or     esi,edx
c0026392:	88 d9                	mov    cl,bl
c0026394:	d3 e0                	shl    eax,cl
c0026396:	89 c2                	mov    edx,eax
c0026398:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002639b:	25 ff 07 00 00       	and    eax,0x7ff
c00263a0:	39 d8                	cmp    eax,ebx
c00263a2:	7f 22                	jg     c00263c6 <__adddf3+0x583>
c00263a4:	29 c3                	sub    ebx,eax
c00263a6:	43                   	inc    ebx
c00263a7:	88 d9                	mov    cl,bl
c00263a9:	d3 ea                	shr    edx,cl
c00263ab:	29 df                	sub    edi,ebx
c00263ad:	89 f9                	mov    ecx,edi
c00263af:	89 f0                	mov    eax,esi
c00263b1:	d3 e0                	shl    eax,cl
c00263b3:	09 c2                	or     edx,eax
c00263b5:	89 f0                	mov    eax,esi
c00263b7:	88 d9                	mov    cl,bl
c00263b9:	d3 e8                	shr    eax,cl
c00263bb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00263be:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00263c4:	eb 6f                	jmp    c0026435 <__adddf3+0x5f2>
c00263c6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00263c9:	29 d8                	sub    eax,ebx
c00263cb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00263ce:	89 f0                	mov    eax,esi
c00263d0:	eb 59                	jmp    c002642b <__adddf3+0x5e8>
c00263d2:	85 c0                	test   eax,eax
c00263d4:	74 6a                	je     c0026440 <__adddf3+0x5fd>
c00263d6:	0f bd c8             	bsr    ecx,eax
c00263d9:	83 f1 1f             	xor    ecx,0x1f
c00263dc:	d3 e0                	shl    eax,cl
c00263de:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00263e1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00263e7:	83 c1 20             	add    ecx,0x20
c00263ea:	39 cb                	cmp    ebx,ecx
c00263ec:	7f 35                	jg     c0026423 <__adddf3+0x5e0>
c00263ee:	29 d9                	sub    ecx,ebx
c00263f0:	8d 71 01             	lea    esi,[ecx+0x1]
c00263f3:	83 fe 1f             	cmp    esi,0x1f
c00263f6:	7e 09                	jle    c0026401 <__adddf3+0x5be>
c00263f8:	83 e9 1f             	sub    ecx,0x1f
c00263fb:	d3 e8                	shr    eax,cl
c00263fd:	89 c3                	mov    ebx,eax
c00263ff:	eb 11                	jmp    c0026412 <__adddf3+0x5cf>
c0026401:	b9 20 00 00 00       	mov    ecx,0x20
c0026406:	29 f1                	sub    ecx,esi
c0026408:	89 c3                	mov    ebx,eax
c002640a:	d3 e3                	shl    ebx,cl
c002640c:	89 f1                	mov    ecx,esi
c002640e:	d3 e8                	shr    eax,cl
c0026410:	89 c2                	mov    edx,eax
c0026412:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026415:	25 00 f8 ff ff       	and    eax,0xfffff800
c002641a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002641d:	89 d0                	mov    eax,edx
c002641f:	89 da                	mov    edx,ebx
c0026421:	eb 26                	jmp    c0026449 <__adddf3+0x606>
c0026423:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026426:	29 cf                	sub    edi,ecx
c0026428:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002642b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026430:	eb 17                	jmp    c0026449 <__adddf3+0x606>
c0026432:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026435:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026438:	eb 0f                	jmp    c0026449 <__adddf3+0x606>
c002643a:	31 d2                	xor    edx,edx
c002643c:	31 c0                	xor    eax,eax
c002643e:	eb 09                	jmp    c0026449 <__adddf3+0x606>
c0026440:	89 c2                	mov    edx,eax
c0026442:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0026449:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002644c:	c1 e1 14             	shl    ecx,0x14
c002644f:	89 c3                	mov    ebx,eax
c0026451:	c1 eb 0b             	shr    ebx,0xb
c0026454:	09 d9                	or     ecx,ebx
c0026456:	89 d3                	mov    ebx,edx
c0026458:	c1 eb 0b             	shr    ebx,0xb
c002645b:	c1 e0 15             	shl    eax,0x15
c002645e:	09 d8                	or     eax,ebx
c0026460:	89 c7                	mov    edi,eax
c0026462:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0026468:	0f 95 c0             	setne  al
c002646b:	89 c6                	mov    esi,eax
c002646d:	09 f3                	or     ebx,esi
c002646f:	83 e3 01             	and    ebx,0x1
c0026472:	c1 ea 0a             	shr    edx,0xa
c0026475:	21 da                	and    edx,ebx
c0026477:	89 f8                	mov    eax,edi
c0026479:	01 d0                	add    eax,edx
c002647b:	83 d1 00             	adc    ecx,0x0
c002647e:	89 c7                	mov    edi,eax
c0026480:	eb 06                	jmp    c0026488 <__adddf3+0x645>
c0026482:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026485:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026488:	89 f8                	mov    eax,edi
c002648a:	89 ca                	mov    edx,ecx
c002648c:	83 c4 24             	add    esp,0x24
c002648f:	5b                   	pop    ebx
c0026490:	5e                   	pop    esi
c0026491:	5f                   	pop    edi
c0026492:	5d                   	pop    ebp
c0026493:	c3                   	ret    

c0026494 <__subdf3>:
c0026494:	55                   	push   ebp
c0026495:	89 e5                	mov    ebp,esp
c0026497:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002649a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002649d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00264a3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00264a6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00264a9:	5d                   	pop    ebp
c00264aa:	e9 94 f9 ff ff       	jmp    c0025e43 <__adddf3>

c00264af <__negdf2>:
c00264af:	55                   	push   ebp
c00264b0:	89 e5                	mov    ebp,esp
c00264b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264b5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00264b8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00264be:	5d                   	pop    ebp
c00264bf:	c3                   	ret    

c00264c0 <__muldf3>:
c00264c0:	55                   	push   ebp
c00264c1:	89 e5                	mov    ebp,esp
c00264c3:	57                   	push   edi
c00264c4:	56                   	push   esi
c00264c5:	53                   	push   ebx
c00264c6:	83 ec 24             	sub    esp,0x24
c00264c9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00264cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264cf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00264d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00264d5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00264d8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00264db:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00264de:	89 c8                	mov    eax,ecx
c00264e0:	c1 f8 14             	sar    eax,0x14
c00264e3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00264e6:	89 f8                	mov    eax,edi
c00264e8:	89 fb                	mov    ebx,edi
c00264ea:	c1 e3 0b             	shl    ebx,0xb
c00264ed:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00264f0:	c1 e1 0b             	shl    ecx,0xb
c00264f3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00264f9:	c1 e8 15             	shr    eax,0x15
c00264fc:	09 c1                	or     ecx,eax
c00264fe:	89 d6                	mov    esi,edx
c0026500:	89 d0                	mov    eax,edx
c0026502:	c1 f8 14             	sar    eax,0x14
c0026505:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026508:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002650b:	89 c3                	mov    ebx,eax
c002650d:	c1 e3 0b             	shl    ebx,0xb
c0026510:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026513:	c1 e6 0b             	shl    esi,0xb
c0026516:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002651c:	c1 e8 15             	shr    eax,0x15
c002651f:	09 c6                	or     esi,eax
c0026521:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026524:	25 ff 07 00 00       	and    eax,0x7ff
c0026529:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002652c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002652f:	25 ff 07 00 00       	and    eax,0x7ff
c0026534:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026537:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002653a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002653d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0026544:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026547:	40                   	inc    eax
c0026548:	a9 fe 07 00 00       	test   eax,0x7fe
c002654d:	0f 85 8d 00 00 00    	jne    c00265e0 <__muldf3+0x120>
c0026553:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026556:	09 c8                	or     eax,ecx
c0026558:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c002655c:	74 44                	je     c00265a2 <__muldf3+0xe2>
c002655e:	85 c0                	test   eax,eax
c0026560:	0f 85 31 02 00 00    	jne    c0026797 <__muldf3+0x2d7>
c0026566:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026569:	40                   	inc    eax
c002656a:	a9 fe 07 00 00       	test   eax,0x7fe
c002656f:	75 13                	jne    c0026584 <__muldf3+0xc4>
c0026571:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026574:	09 f1                	or     ecx,esi
c0026576:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002657a:	74 22                	je     c002659e <__muldf3+0xde>
c002657c:	85 c9                	test   ecx,ecx
c002657e:	0f 85 0d 02 00 00    	jne    c0026791 <__muldf3+0x2d1>
c0026584:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0026588:	0f 89 09 02 00 00    	jns    c0026797 <__muldf3+0x2d7>
c002658e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026591:	05 00 00 00 80       	add    eax,0x80000000
c0026596:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026599:	e9 f9 01 00 00       	jmp    c0026797 <__muldf3+0x2d7>
c002659e:	85 c9                	test   ecx,ecx
c00265a0:	eb 2e                	jmp    c00265d0 <__muldf3+0x110>
c00265a2:	85 c0                	test   eax,eax
c00265a4:	74 20                	je     c00265c6 <__muldf3+0x106>
c00265a6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00265a9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00265ac:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00265af:	c1 ef 1f             	shr    edi,0x1f
c00265b2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00265b5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00265b8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00265bb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00265be:	09 f9                	or     ecx,edi
c00265c0:	78 1e                	js     c00265e0 <__muldf3+0x120>
c00265c2:	89 c3                	mov    ebx,eax
c00265c4:	eb e0                	jmp    c00265a6 <__muldf3+0xe6>
c00265c6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00265c9:	f7 d0                	not    eax
c00265cb:	a9 ff 07 00 00       	test   eax,0x7ff
c00265d0:	75 b2                	jne    c0026584 <__muldf3+0xc4>
c00265d2:	31 ff                	xor    edi,edi
c00265d4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00265db:	e9 b7 01 00 00       	jmp    c0026797 <__muldf3+0x2d7>
c00265e0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00265e3:	40                   	inc    eax
c00265e4:	a9 fe 07 00 00       	test   eax,0x7fe
c00265e9:	75 57                	jne    c0026642 <__muldf3+0x182>
c00265eb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00265ee:	09 f0                	or     eax,esi
c00265f0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00265f4:	74 23                	je     c0026619 <__muldf3+0x159>
c00265f6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00265fa:	0f 89 91 01 00 00    	jns    c0026791 <__muldf3+0x2d1>
c0026600:	85 c0                	test   eax,eax
c0026602:	0f 85 89 01 00 00    	jne    c0026791 <__muldf3+0x2d1>
c0026608:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002660b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0026611:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026614:	e9 7e 01 00 00       	jmp    c0026797 <__muldf3+0x2d7>
c0026619:	85 c0                	test   eax,eax
c002661b:	75 0c                	jne    c0026629 <__muldf3+0x169>
c002661d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0026621:	0f 89 6a 01 00 00    	jns    c0026791 <__muldf3+0x2d1>
c0026627:	eb df                	jmp    c0026608 <__muldf3+0x148>
c0026629:	01 f6                	add    esi,esi
c002662b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002662e:	c1 ea 1f             	shr    edx,0x1f
c0026631:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026634:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0026637:	8d 43 ff             	lea    eax,[ebx-0x1]
c002663a:	09 d6                	or     esi,edx
c002663c:	78 04                	js     c0026642 <__muldf3+0x182>
c002663e:	89 c3                	mov    ebx,eax
c0026640:	eb e7                	jmp    c0026629 <__muldf3+0x169>
c0026642:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0026648:	81 ce 00 00 00 80    	or     esi,0x80000000
c002664e:	89 c8                	mov    eax,ecx
c0026650:	f7 e6                	mul    esi
c0026652:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0026655:	89 c7                	mov    edi,eax
c0026657:	89 c8                	mov    eax,ecx
c0026659:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c002665c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c002665f:	89 c1                	mov    ecx,eax
c0026661:	89 f0                	mov    eax,esi
c0026663:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0026666:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0026669:	89 c6                	mov    esi,eax
c002666b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002666e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0026671:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026674:	31 c0                	xor    eax,eax
c0026676:	01 f1                	add    ecx,esi
c0026678:	0f 92 c0             	setb   al
c002667b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002667e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026681:	83 d6 00             	adc    esi,0x0
c0026684:	01 c7                	add    edi,eax
c0026686:	83 d6 00             	adc    esi,0x0
c0026689:	01 ca                	add    edx,ecx
c002668b:	0f 92 c1             	setb   cl
c002668e:	0f b6 c9             	movzx  ecx,cl
c0026691:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0026694:	83 d6 00             	adc    esi,0x0
c0026697:	01 cf                	add    edi,ecx
c0026699:	83 d6 00             	adc    esi,0x0
c002669c:	31 c9                	xor    ecx,ecx
c002669e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00266a1:	0f 95 c1             	setne  cl
c00266a4:	09 cf                	or     edi,ecx
c00266a6:	85 f6                	test   esi,esi
c00266a8:	78 0c                	js     c00266b6 <__muldf3+0x1f6>
c00266aa:	01 f6                	add    esi,esi
c00266ac:	89 f8                	mov    eax,edi
c00266ae:	c1 e8 1f             	shr    eax,0x1f
c00266b1:	09 c6                	or     esi,eax
c00266b3:	01 ff                	add    edi,edi
c00266b5:	4b                   	dec    ebx
c00266b6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00266bc:	0f 8f 85 00 00 00    	jg     c0026747 <__muldf3+0x287>
c00266c2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00266c8:	85 db                	test   ebx,ebx
c00266ca:	0f 8f 84 00 00 00    	jg     c0026754 <__muldf3+0x294>
c00266d0:	83 fb cc             	cmp    ebx,0xffffffcc
c00266d3:	7c 79                	jl     c002674e <__muldf3+0x28e>
c00266d5:	ba 01 00 00 00       	mov    edx,0x1
c00266da:	29 da                	sub    edx,ebx
c00266dc:	81 ce 00 00 00 80    	or     esi,0x80000000
c00266e2:	83 fa 1f             	cmp    edx,0x1f
c00266e5:	7e 30                	jle    c0026717 <__muldf3+0x257>
c00266e7:	83 fa 20             	cmp    edx,0x20
c00266ea:	75 0b                	jne    c00266f7 <__muldf3+0x237>
c00266ec:	31 c0                	xor    eax,eax
c00266ee:	85 ff                	test   edi,edi
c00266f0:	0f 95 c0             	setne  al
c00266f3:	89 c7                	mov    edi,eax
c00266f5:	eb 1a                	jmp    c0026711 <__muldf3+0x251>
c00266f7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00266fa:	89 f0                	mov    eax,esi
c00266fc:	d3 e0                	shl    eax,cl
c00266fe:	09 f8                	or     eax,edi
c0026700:	0f 95 c0             	setne  al
c0026703:	0f b6 c0             	movzx  eax,al
c0026706:	89 c7                	mov    edi,eax
c0026708:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002670d:	29 d9                	sub    ecx,ebx
c002670f:	d3 ee                	shr    esi,cl
c0026711:	09 f7                	or     edi,esi
c0026713:	31 db                	xor    ebx,ebx
c0026715:	eb 3b                	jmp    c0026752 <__muldf3+0x292>
c0026717:	83 c3 1f             	add    ebx,0x1f
c002671a:	89 f0                	mov    eax,esi
c002671c:	88 d9                	mov    cl,bl
c002671e:	d3 e0                	shl    eax,cl
c0026720:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026723:	89 f8                	mov    eax,edi
c0026725:	88 d1                	mov    cl,dl
c0026727:	d3 e8                	shr    eax,cl
c0026729:	89 c1                	mov    ecx,eax
c002672b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002672e:	09 c8                	or     eax,ecx
c0026730:	88 d9                	mov    cl,bl
c0026732:	d3 e7                	shl    edi,cl
c0026734:	31 db                	xor    ebx,ebx
c0026736:	85 ff                	test   edi,edi
c0026738:	0f 95 c3             	setne  bl
c002673b:	89 df                	mov    edi,ebx
c002673d:	09 c7                	or     edi,eax
c002673f:	88 d1                	mov    cl,dl
c0026741:	d3 ee                	shr    esi,cl
c0026743:	31 db                	xor    ebx,ebx
c0026745:	eb 0d                	jmp    c0026754 <__muldf3+0x294>
c0026747:	bb ff 07 00 00       	mov    ebx,0x7ff
c002674c:	eb 02                	jmp    c0026750 <__muldf3+0x290>
c002674e:	31 db                	xor    ebx,ebx
c0026750:	31 ff                	xor    edi,edi
c0026752:	31 f6                	xor    esi,esi
c0026754:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026757:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c002675a:	25 00 f8 ff ff       	and    eax,0xfffff800
c002675f:	09 c3                	or     ebx,eax
c0026761:	c1 e3 14             	shl    ebx,0x14
c0026764:	89 f0                	mov    eax,esi
c0026766:	c1 e8 0b             	shr    eax,0xb
c0026769:	09 c3                	or     ebx,eax
c002676b:	89 f8                	mov    eax,edi
c002676d:	c1 e8 0b             	shr    eax,0xb
c0026770:	c1 e6 15             	shl    esi,0x15
c0026773:	09 c6                	or     esi,eax
c0026775:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002677b:	0f 95 c1             	setne  cl
c002677e:	09 c8                	or     eax,ecx
c0026780:	83 e0 01             	and    eax,0x1
c0026783:	c1 ef 0a             	shr    edi,0xa
c0026786:	21 c7                	and    edi,eax
c0026788:	01 f7                	add    edi,esi
c002678a:	83 d3 00             	adc    ebx,0x0
c002678d:	89 da                	mov    edx,ebx
c002678f:	eb 03                	jmp    c0026794 <__muldf3+0x2d4>
c0026791:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0026794:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026797:	89 f8                	mov    eax,edi
c0026799:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002679c:	83 c4 24             	add    esp,0x24
c002679f:	5b                   	pop    ebx
c00267a0:	5e                   	pop    esi
c00267a1:	5f                   	pop    edi
c00267a2:	5d                   	pop    ebp
c00267a3:	c3                   	ret    

c00267a4 <__divdf3>:
c00267a4:	55                   	push   ebp
c00267a5:	89 e5                	mov    ebp,esp
c00267a7:	57                   	push   edi
c00267a8:	56                   	push   esi
c00267a9:	53                   	push   ebx
c00267aa:	83 ec 2c             	sub    esp,0x2c
c00267ad:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00267b0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00267b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00267b6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00267b9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00267bc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00267bf:	89 ce                	mov    esi,ecx
c00267c1:	89 c8                	mov    eax,ecx
c00267c3:	c1 f8 14             	sar    eax,0x14
c00267c6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00267c9:	89 f8                	mov    eax,edi
c00267cb:	89 fb                	mov    ebx,edi
c00267cd:	c1 e3 0b             	shl    ebx,0xb
c00267d0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00267d3:	c1 e6 0b             	shl    esi,0xb
c00267d6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00267dc:	c1 e8 15             	shr    eax,0x15
c00267df:	09 c6                	or     esi,eax
c00267e1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00267e4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00267e7:	89 c2                	mov    edx,eax
c00267e9:	c1 fa 14             	sar    edx,0x14
c00267ec:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00267ef:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00267f2:	89 de                	mov    esi,ebx
c00267f4:	c1 e6 0b             	shl    esi,0xb
c00267f7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00267fa:	c1 e0 0b             	shl    eax,0xb
c00267fd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026802:	c1 eb 15             	shr    ebx,0x15
c0026805:	09 d8                	or     eax,ebx
c0026807:	89 c2                	mov    edx,eax
c0026809:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002680c:	25 ff 07 00 00       	and    eax,0x7ff
c0026811:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026814:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026817:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002681d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0026820:	29 d8                	sub    eax,ebx
c0026822:	05 ff 03 00 00       	add    eax,0x3ff
c0026827:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002682a:	46                   	inc    esi
c002682b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026831:	0f 85 a5 00 00 00    	jne    c00268dc <__divdf3+0x138>
c0026837:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002683a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c002683d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0026841:	74 2a                	je     c002686d <__divdf3+0xc9>
c0026843:	85 f6                	test   esi,esi
c0026845:	0f 85 cc 02 00 00    	jne    c0026b17 <__divdf3+0x373>
c002684b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002684e:	40                   	inc    eax
c002684f:	a9 fe 07 00 00       	test   eax,0x7fe
c0026854:	75 26                	jne    c002687c <__divdf3+0xd8>
c0026856:	85 db                	test   ebx,ebx
c0026858:	74 22                	je     c002687c <__divdf3+0xd8>
c002685a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002685d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026860:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026863:	09 d0                	or     eax,edx
c0026865:	0f 85 ac 02 00 00    	jne    c0026b17 <__divdf3+0x373>
c002686b:	eb 63                	jmp    c00268d0 <__divdf3+0x12c>
c002686d:	85 f6                	test   esi,esi
c002686f:	75 22                	jne    c0026893 <__divdf3+0xef>
c0026871:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026874:	40                   	inc    eax
c0026875:	a9 fe 07 00 00       	test   eax,0x7fe
c002687a:	74 36                	je     c00268b2 <__divdf3+0x10e>
c002687c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026880:	0f 89 91 02 00 00    	jns    c0026b17 <__divdf3+0x373>
c0026886:	89 f8                	mov    eax,edi
c0026888:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002688e:	e9 80 02 00 00       	jmp    c0026b13 <__divdf3+0x36f>
c0026893:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026896:	01 f6                	add    esi,esi
c0026898:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002689b:	c1 ef 1f             	shr    edi,0x1f
c002689e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00268a1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00268a4:	8d 48 ff             	lea    ecx,[eax-0x1]
c00268a7:	09 f7                	or     edi,esi
c00268a9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00268ac:	78 2e                	js     c00268dc <__divdf3+0x138>
c00268ae:	89 c8                	mov    eax,ecx
c00268b0:	eb e1                	jmp    c0026893 <__divdf3+0xef>
c00268b2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00268b5:	09 d0                	or     eax,edx
c00268b7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00268bb:	74 0f                	je     c00268cc <__divdf3+0x128>
c00268bd:	85 c0                	test   eax,eax
c00268bf:	74 bb                	je     c002687c <__divdf3+0xd8>
c00268c1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00268c4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00268c7:	e9 4b 02 00 00       	jmp    c0026b17 <__divdf3+0x373>
c00268cc:	85 c0                	test   eax,eax
c00268ce:	75 ac                	jne    c002687c <__divdf3+0xd8>
c00268d0:	31 ff                	xor    edi,edi
c00268d2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00268d7:	e9 3b 02 00 00       	jmp    c0026b17 <__divdf3+0x373>
c00268dc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00268df:	8d 4f 01             	lea    ecx,[edi+0x1]
c00268e2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00268e8:	75 6b                	jne    c0026955 <__divdf3+0x1b1>
c00268ea:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00268ed:	09 d6                	or     esi,edx
c00268ef:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00268f3:	74 28                	je     c002691d <__divdf3+0x179>
c00268f5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00268f8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00268fb:	85 f6                	test   esi,esi
c00268fd:	0f 85 14 02 00 00    	jne    c0026b17 <__divdf3+0x373>
c0026903:	31 ff                	xor    edi,edi
c0026905:	31 c9                	xor    ecx,ecx
c0026907:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002690a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002690d:	0f 89 04 02 00 00    	jns    c0026b17 <__divdf3+0x373>
c0026913:	b9 00 00 00 80       	mov    ecx,0x80000000
c0026918:	e9 fa 01 00 00       	jmp    c0026b17 <__divdf3+0x373>
c002691d:	85 f6                	test   esi,esi
c002691f:	75 1b                	jne    c002693c <__divdf3+0x198>
c0026921:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026924:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026927:	25 00 00 00 80       	and    eax,0x80000000
c002692c:	31 c9                	xor    ecx,ecx
c002692e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0026933:	89 cf                	mov    edi,ecx
c0026935:	89 c1                	mov    ecx,eax
c0026937:	e9 db 01 00 00       	jmp    c0026b17 <__divdf3+0x373>
c002693c:	01 d2                	add    edx,edx
c002693e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026941:	c1 eb 1f             	shr    ebx,0x1f
c0026944:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026947:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002694a:	8d 48 01             	lea    ecx,[eax+0x1]
c002694d:	09 da                	or     edx,ebx
c002694f:	78 04                	js     c0026955 <__divdf3+0x1b1>
c0026951:	89 c8                	mov    eax,ecx
c0026953:	eb e7                	jmp    c002693c <__divdf3+0x198>
c0026955:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026958:	81 ce 00 00 00 80    	or     esi,0x80000000
c002695e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026964:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0026967:	39 d6                	cmp    esi,edx
c0026969:	77 0d                	ja     c0026978 <__divdf3+0x1d4>
c002696b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002696e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0026971:	72 1b                	jb     c002698e <__divdf3+0x1ea>
c0026973:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0026976:	75 16                	jne    c002698e <__divdf3+0x1ea>
c0026978:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002697b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002697e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0026981:	83 de 00             	sbb    esi,0x0
c0026984:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0026987:	ba 01 00 00 00       	mov    edx,0x1
c002698c:	eb 02                	jmp    c0026990 <__divdf3+0x1ec>
c002698e:	31 d2                	xor    edx,edx
c0026990:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0026997:	31 ff                	xor    edi,edi
c0026999:	01 ff                	add    edi,edi
c002699b:	89 d1                	mov    ecx,edx
c002699d:	c1 e9 1f             	shr    ecx,0x1f
c00269a0:	09 cf                	or     edi,ecx
c00269a2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00269a5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00269a8:	89 da                	mov    edx,ebx
c00269aa:	89 f3                	mov    ebx,esi
c00269ac:	8d 34 36             	lea    esi,[esi+esi*1]
c00269af:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00269b2:	c1 e9 1f             	shr    ecx,0x1f
c00269b5:	09 ce                	or     esi,ecx
c00269b7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00269ba:	01 c9                	add    ecx,ecx
c00269bc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00269bf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00269c2:	85 db                	test   ebx,ebx
c00269c4:	78 29                	js     c00269ef <__divdf3+0x24b>
c00269c6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00269c9:	72 07                	jb     c00269d2 <__divdf3+0x22e>
c00269cb:	75 3c                	jne    c0026a09 <__divdf3+0x265>
c00269cd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00269d0:	77 37                	ja     c0026a09 <__divdf3+0x265>
c00269d2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00269d5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00269d8:	31 d2                	xor    edx,edx
c00269da:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00269dd:	0f 97 c2             	seta   dl
c00269e0:	29 d6                	sub    esi,edx
c00269e2:	89 d9                	mov    ecx,ebx
c00269e4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00269e7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00269ea:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00269ed:	eb 17                	jmp    c0026a06 <__divdf3+0x262>
c00269ef:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00269f2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00269f5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00269f8:	0f 97 c1             	seta   cl
c00269fb:	0f b6 c9             	movzx  ecx,cl
c00269fe:	29 ce                	sub    esi,ecx
c0026a00:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0026a03:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0026a06:	83 ca 01             	or     edx,0x1
c0026a09:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0026a0c:	75 8b                	jne    c0026999 <__divdf3+0x1f5>
c0026a0e:	c1 e7 09             	shl    edi,0x9
c0026a11:	89 d1                	mov    ecx,edx
c0026a13:	c1 e9 17             	shr    ecx,0x17
c0026a16:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026a19:	09 f3                	or     ebx,esi
c0026a1b:	0f 95 c3             	setne  bl
c0026a1e:	0f b6 db             	movzx  ebx,bl
c0026a21:	c1 e2 09             	shl    edx,0x9
c0026a24:	09 d3                	or     ebx,edx
c0026a26:	89 ca                	mov    edx,ecx
c0026a28:	09 fa                	or     edx,edi
c0026a2a:	78 0c                	js     c0026a38 <__divdf3+0x294>
c0026a2c:	01 d2                	add    edx,edx
c0026a2e:	89 d9                	mov    ecx,ebx
c0026a30:	c1 e9 1f             	shr    ecx,0x1f
c0026a33:	09 ca                	or     edx,ecx
c0026a35:	01 db                	add    ebx,ebx
c0026a37:	48                   	dec    eax
c0026a38:	3d fe 07 00 00       	cmp    eax,0x7fe
c0026a3d:	0f 8f 83 00 00 00    	jg     c0026ac6 <__divdf3+0x322>
c0026a43:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026a49:	85 c0                	test   eax,eax
c0026a4b:	0f 8f 82 00 00 00    	jg     c0026ad3 <__divdf3+0x32f>
c0026a51:	83 f8 cc             	cmp    eax,0xffffffcc
c0026a54:	7c 77                	jl     c0026acd <__divdf3+0x329>
c0026a56:	be 01 00 00 00       	mov    esi,0x1
c0026a5b:	29 c6                	sub    esi,eax
c0026a5d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a63:	83 fe 1f             	cmp    esi,0x1f
c0026a66:	7e 2f                	jle    c0026a97 <__divdf3+0x2f3>
c0026a68:	83 fe 20             	cmp    esi,0x20
c0026a6b:	75 0a                	jne    c0026a77 <__divdf3+0x2d3>
c0026a6d:	85 db                	test   ebx,ebx
c0026a6f:	0f 95 c3             	setne  bl
c0026a72:	0f b6 db             	movzx  ebx,bl
c0026a75:	eb 1a                	jmp    c0026a91 <__divdf3+0x2ed>
c0026a77:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0026a7a:	89 d7                	mov    edi,edx
c0026a7c:	d3 e7                	shl    edi,cl
c0026a7e:	89 f9                	mov    ecx,edi
c0026a80:	09 d9                	or     ecx,ebx
c0026a82:	0f 95 c3             	setne  bl
c0026a85:	0f b6 db             	movzx  ebx,bl
c0026a88:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026a8d:	29 c1                	sub    ecx,eax
c0026a8f:	d3 ea                	shr    edx,cl
c0026a91:	09 d3                	or     ebx,edx
c0026a93:	31 c0                	xor    eax,eax
c0026a95:	eb 3a                	jmp    c0026ad1 <__divdf3+0x32d>
c0026a97:	83 c0 1f             	add    eax,0x1f
c0026a9a:	89 d7                	mov    edi,edx
c0026a9c:	88 c1                	mov    cl,al
c0026a9e:	d3 e7                	shl    edi,cl
c0026aa0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026aa3:	89 df                	mov    edi,ebx
c0026aa5:	89 f1                	mov    ecx,esi
c0026aa7:	d3 ef                	shr    edi,cl
c0026aa9:	89 f9                	mov    ecx,edi
c0026aab:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026aae:	09 cf                	or     edi,ecx
c0026ab0:	88 c1                	mov    cl,al
c0026ab2:	d3 e3                	shl    ebx,cl
c0026ab4:	85 db                	test   ebx,ebx
c0026ab6:	0f 95 c3             	setne  bl
c0026ab9:	0f b6 db             	movzx  ebx,bl
c0026abc:	09 fb                	or     ebx,edi
c0026abe:	89 f1                	mov    ecx,esi
c0026ac0:	d3 ea                	shr    edx,cl
c0026ac2:	31 c0                	xor    eax,eax
c0026ac4:	eb 0d                	jmp    c0026ad3 <__divdf3+0x32f>
c0026ac6:	b8 ff 07 00 00       	mov    eax,0x7ff
c0026acb:	eb 02                	jmp    c0026acf <__divdf3+0x32b>
c0026acd:	31 c0                	xor    eax,eax
c0026acf:	31 db                	xor    ebx,ebx
c0026ad1:	31 d2                	xor    edx,edx
c0026ad3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0026ad6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0026ad9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0026adf:	09 c8                	or     eax,ecx
c0026ae1:	c1 e0 14             	shl    eax,0x14
c0026ae4:	89 d1                	mov    ecx,edx
c0026ae6:	c1 e9 0b             	shr    ecx,0xb
c0026ae9:	09 c8                	or     eax,ecx
c0026aeb:	89 c6                	mov    esi,eax
c0026aed:	89 d9                	mov    ecx,ebx
c0026aef:	c1 e9 0b             	shr    ecx,0xb
c0026af2:	c1 e2 15             	shl    edx,0x15
c0026af5:	09 ca                	or     edx,ecx
c0026af7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0026afd:	0f 95 c0             	setne  al
c0026b00:	09 c1                	or     ecx,eax
c0026b02:	83 e1 01             	and    ecx,0x1
c0026b05:	c1 eb 0a             	shr    ebx,0xa
c0026b08:	21 cb                	and    ebx,ecx
c0026b0a:	01 d3                	add    ebx,edx
c0026b0c:	89 d8                	mov    eax,ebx
c0026b0e:	83 d6 00             	adc    esi,0x0
c0026b11:	89 f2                	mov    edx,esi
c0026b13:	89 c7                	mov    edi,eax
c0026b15:	89 d1                	mov    ecx,edx
c0026b17:	89 f8                	mov    eax,edi
c0026b19:	89 ca                	mov    edx,ecx
c0026b1b:	83 c4 2c             	add    esp,0x2c
c0026b1e:	5b                   	pop    ebx
c0026b1f:	5e                   	pop    esi
c0026b20:	5f                   	pop    edi
c0026b21:	5d                   	pop    ebp
c0026b22:	c3                   	ret    

c0026b23 <__floatsidf>:
c0026b23:	55                   	push   ebp
c0026b24:	89 e5                	mov    ebp,esp
c0026b26:	56                   	push   esi
c0026b27:	53                   	push   ebx
c0026b28:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026b2b:	85 db                	test   ebx,ebx
c0026b2d:	7e 15                	jle    c0026b44 <__floatsidf+0x21>
c0026b2f:	0f bd cb             	bsr    ecx,ebx
c0026b32:	83 f1 1f             	xor    ecx,0x1f
c0026b35:	d3 e3                	shl    ebx,cl
c0026b37:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026b3d:	b8 1e 04 00 00       	mov    eax,0x41e
c0026b42:	eb 21                	jmp    c0026b65 <__floatsidf+0x42>
c0026b44:	b8 00 00 00 00       	mov    eax,0x0
c0026b49:	ba 00 00 00 00       	mov    edx,0x0
c0026b4e:	74 2a                	je     c0026b7a <__floatsidf+0x57>
c0026b50:	f7 db                	neg    ebx
c0026b52:	0f bd cb             	bsr    ecx,ebx
c0026b55:	83 f1 1f             	xor    ecx,0x1f
c0026b58:	d3 e3                	shl    ebx,cl
c0026b5a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026b60:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0026b65:	29 c8                	sub    eax,ecx
c0026b67:	c1 e0 14             	shl    eax,0x14
c0026b6a:	89 c1                	mov    ecx,eax
c0026b6c:	89 de                	mov    esi,ebx
c0026b6e:	c1 ee 0b             	shr    esi,0xb
c0026b71:	09 f1                	or     ecx,esi
c0026b73:	89 ca                	mov    edx,ecx
c0026b75:	c1 e3 15             	shl    ebx,0x15
c0026b78:	89 d8                	mov    eax,ebx
c0026b7a:	5b                   	pop    ebx
c0026b7b:	5e                   	pop    esi
c0026b7c:	5d                   	pop    ebp
c0026b7d:	c3                   	ret    

c0026b7e <__floatunsidf>:
c0026b7e:	55                   	push   ebp
c0026b7f:	89 e5                	mov    ebp,esp
c0026b81:	56                   	push   esi
c0026b82:	53                   	push   ebx
c0026b83:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026b86:	85 db                	test   ebx,ebx
c0026b88:	74 2a                	je     c0026bb4 <__floatunsidf+0x36>
c0026b8a:	0f bd cb             	bsr    ecx,ebx
c0026b8d:	83 f1 1f             	xor    ecx,0x1f
c0026b90:	d3 e3                	shl    ebx,cl
c0026b92:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026b98:	b8 1e 04 00 00       	mov    eax,0x41e
c0026b9d:	29 c8                	sub    eax,ecx
c0026b9f:	c1 e0 14             	shl    eax,0x14
c0026ba2:	89 c1                	mov    ecx,eax
c0026ba4:	89 de                	mov    esi,ebx
c0026ba6:	c1 ee 0b             	shr    esi,0xb
c0026ba9:	09 f1                	or     ecx,esi
c0026bab:	89 ca                	mov    edx,ecx
c0026bad:	c1 e3 15             	shl    ebx,0x15
c0026bb0:	89 d8                	mov    eax,ebx
c0026bb2:	eb 04                	jmp    c0026bb8 <__floatunsidf+0x3a>
c0026bb4:	31 c0                	xor    eax,eax
c0026bb6:	31 d2                	xor    edx,edx
c0026bb8:	5b                   	pop    ebx
c0026bb9:	5e                   	pop    esi
c0026bba:	5d                   	pop    ebp
c0026bbb:	c3                   	ret    

c0026bbc <__fixdfsi>:
c0026bbc:	55                   	push   ebp
c0026bbd:	89 e5                	mov    ebp,esp
c0026bbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026bc2:	89 d1                	mov    ecx,edx
c0026bc4:	c1 e1 0b             	shl    ecx,0xb
c0026bc7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026bcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026bd0:	c1 e8 15             	shr    eax,0x15
c0026bd3:	09 c1                	or     ecx,eax
c0026bd5:	c1 fa 14             	sar    edx,0x14
c0026bd8:	78 1f                	js     c0026bf9 <__fixdfsi+0x3d>
c0026bda:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0026be0:	31 c0                	xor    eax,eax
c0026be2:	83 fa 1e             	cmp    edx,0x1e
c0026be5:	77 40                	ja     c0026c27 <__fixdfsi+0x6b>
c0026be7:	89 c8                	mov    eax,ecx
c0026be9:	0d 00 00 00 80       	or     eax,0x80000000
c0026bee:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026bf3:	29 d1                	sub    ecx,edx
c0026bf5:	d3 e8                	shr    eax,cl
c0026bf7:	eb 2e                	jmp    c0026c27 <__fixdfsi+0x6b>
c0026bf9:	31 c0                	xor    eax,eax
c0026bfb:	81 c2 01 04 00 00    	add    edx,0x401
c0026c01:	78 24                	js     c0026c27 <__fixdfsi+0x6b>
c0026c03:	83 fa 1e             	cmp    edx,0x1e
c0026c06:	7e 09                	jle    c0026c11 <__fixdfsi+0x55>
c0026c08:	83 fa 1f             	cmp    edx,0x1f
c0026c0b:	75 18                	jne    c0026c25 <__fixdfsi+0x69>
c0026c0d:	85 c9                	test   ecx,ecx
c0026c0f:	75 14                	jne    c0026c25 <__fixdfsi+0x69>
c0026c11:	89 c8                	mov    eax,ecx
c0026c13:	0d 00 00 00 80       	or     eax,0x80000000
c0026c18:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026c1d:	29 d1                	sub    ecx,edx
c0026c1f:	d3 e8                	shr    eax,cl
c0026c21:	f7 d8                	neg    eax
c0026c23:	eb 02                	jmp    c0026c27 <__fixdfsi+0x6b>
c0026c25:	31 c0                	xor    eax,eax
c0026c27:	5d                   	pop    ebp
c0026c28:	c3                   	ret    

c0026c29 <__fixunsdfsi>:
c0026c29:	55                   	push   ebp
c0026c2a:	89 e5                	mov    ebp,esp
c0026c2c:	53                   	push   ebx
c0026c2d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026c30:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026c33:	89 d3                	mov    ebx,edx
c0026c35:	c1 fb 14             	sar    ebx,0x14
c0026c38:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0026c3e:	31 c0                	xor    eax,eax
c0026c40:	83 fb 1f             	cmp    ebx,0x1f
c0026c43:	77 1d                	ja     c0026c62 <__fixunsdfsi+0x39>
c0026c45:	89 d0                	mov    eax,edx
c0026c47:	c1 e0 0b             	shl    eax,0xb
c0026c4a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026c4f:	c1 e9 15             	shr    ecx,0x15
c0026c52:	09 c8                	or     eax,ecx
c0026c54:	0d 00 00 00 80       	or     eax,0x80000000
c0026c59:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026c5e:	29 d9                	sub    ecx,ebx
c0026c60:	d3 e8                	shr    eax,cl
c0026c62:	5b                   	pop    ebx
c0026c63:	5d                   	pop    ebp
c0026c64:	c3                   	ret    

c0026c65 <__cmpdf2>:
c0026c65:	55                   	push   ebp
c0026c66:	89 e5                	mov    ebp,esp
c0026c68:	57                   	push   edi
c0026c69:	56                   	push   esi
c0026c6a:	53                   	push   ebx
c0026c6b:	83 ec 0c             	sub    esp,0xc
c0026c6e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0026c71:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026c74:	89 ca                	mov    edx,ecx
c0026c76:	c1 ea 14             	shr    edx,0x14
c0026c79:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0026c7f:	89 cb                	mov    ebx,ecx
c0026c81:	c1 fb 1f             	sar    ebx,0x1f
c0026c84:	31 da                	xor    edx,ebx
c0026c86:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026c89:	89 df                	mov    edi,ebx
c0026c8b:	c1 e7 0b             	shl    edi,0xb
c0026c8e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026c91:	c1 e1 0b             	shl    ecx,0xb
c0026c94:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026c9a:	c1 eb 15             	shr    ebx,0x15
c0026c9d:	09 d9                	or     ecx,ebx
c0026c9f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0026ca2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0026ca5:	89 ce                	mov    esi,ecx
c0026ca7:	c1 ee 14             	shr    esi,0x14
c0026caa:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026cb0:	89 cb                	mov    ebx,ecx
c0026cb2:	c1 fb 1f             	sar    ebx,0x1f
c0026cb5:	31 de                	xor    esi,ebx
c0026cb7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0026cba:	89 df                	mov    edi,ebx
c0026cbc:	c1 e7 0b             	shl    edi,0xb
c0026cbf:	c1 e1 0b             	shl    ecx,0xb
c0026cc2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026cc8:	c1 eb 15             	shr    ebx,0x15
c0026ccb:	09 d9                	or     ecx,ebx
c0026ccd:	89 d3                	mov    ebx,edx
c0026ccf:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026cd5:	43                   	inc    ebx
c0026cd6:	83 fb 01             	cmp    ebx,0x1
c0026cd9:	77 08                	ja     c0026ce3 <__cmpdf2+0x7e>
c0026cdb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026cde:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026ce1:	75 68                	jne    c0026d4b <__cmpdf2+0xe6>
c0026ce3:	89 f3                	mov    ebx,esi
c0026ce5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026ceb:	43                   	inc    ebx
c0026cec:	83 fb 01             	cmp    ebx,0x1
c0026cef:	77 06                	ja     c0026cf7 <__cmpdf2+0x92>
c0026cf1:	89 fb                	mov    ebx,edi
c0026cf3:	09 cb                	or     ebx,ecx
c0026cf5:	75 54                	jne    c0026d4b <__cmpdf2+0xe6>
c0026cf7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026cfa:	09 f8                	or     eax,edi
c0026cfc:	09 c8                	or     eax,ecx
c0026cfe:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0026d01:	75 12                	jne    c0026d15 <__cmpdf2+0xb0>
c0026d03:	8d 42 01             	lea    eax,[edx+0x1]
c0026d06:	83 f8 01             	cmp    eax,0x1
c0026d09:	77 0a                	ja     c0026d15 <__cmpdf2+0xb0>
c0026d0b:	8d 5e 01             	lea    ebx,[esi+0x1]
c0026d0e:	31 c0                	xor    eax,eax
c0026d10:	83 fb 01             	cmp    ebx,0x1
c0026d13:	76 36                	jbe    c0026d4b <__cmpdf2+0xe6>
c0026d15:	b8 01 00 00 00       	mov    eax,0x1
c0026d1a:	39 f2                	cmp    edx,esi
c0026d1c:	7f 2d                	jg     c0026d4b <__cmpdf2+0xe6>
c0026d1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026d23:	7c 26                	jl     c0026d4b <__cmpdf2+0xe6>
c0026d25:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026d28:	77 07                	ja     c0026d31 <__cmpdf2+0xcc>
c0026d2a:	72 16                	jb     c0026d42 <__cmpdf2+0xdd>
c0026d2c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0026d2f:	76 0a                	jbe    c0026d3b <__cmpdf2+0xd6>
c0026d31:	89 d0                	mov    eax,edx
c0026d33:	c1 f8 1f             	sar    eax,0x1f
c0026d36:	83 c8 01             	or     eax,0x1
c0026d39:	eb 10                	jmp    c0026d4b <__cmpdf2+0xe6>
c0026d3b:	b8 00 00 00 00       	mov    eax,0x0
c0026d40:	73 09                	jae    c0026d4b <__cmpdf2+0xe6>
c0026d42:	89 d0                	mov    eax,edx
c0026d44:	c1 f8 1f             	sar    eax,0x1f
c0026d47:	83 e0 02             	and    eax,0x2
c0026d4a:	48                   	dec    eax
c0026d4b:	83 c4 0c             	add    esp,0xc
c0026d4e:	5b                   	pop    ebx
c0026d4f:	5e                   	pop    esi
c0026d50:	5f                   	pop    edi
c0026d51:	5d                   	pop    ebp
c0026d52:	c3                   	ret    

c0026d53 <__eqdf2>:
c0026d53:	55                   	push   ebp
c0026d54:	89 e5                	mov    ebp,esp
c0026d56:	50                   	push   eax
c0026d57:	6a 01                	push   0x1
c0026d59:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026d5c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026d5f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d65:	e8 fb fe ff ff       	call   c0026c65 <__cmpdf2>
c0026d6a:	83 c4 18             	add    esp,0x18
c0026d6d:	c9                   	leave  
c0026d6e:	c3                   	ret    

c0026d6f <__nedf2>:
c0026d6f:	eb e2                	jmp    c0026d53 <__eqdf2>

c0026d71 <__gtdf2>:
c0026d71:	55                   	push   ebp
c0026d72:	89 e5                	mov    ebp,esp
c0026d74:	50                   	push   eax
c0026d75:	6a ff                	push   0xffffffff
c0026d77:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026d7a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026d7d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d83:	e8 dd fe ff ff       	call   c0026c65 <__cmpdf2>
c0026d88:	83 c4 18             	add    esp,0x18
c0026d8b:	c9                   	leave  
c0026d8c:	c3                   	ret    

c0026d8d <__gedf2>:
c0026d8d:	eb e2                	jmp    c0026d71 <__gtdf2>

c0026d8f <__ltdf2>:
c0026d8f:	eb c2                	jmp    c0026d53 <__eqdf2>

c0026d91 <__ledf2>:
c0026d91:	eb c0                	jmp    c0026d53 <__eqdf2>

c0026d93 <__truncdfsf2>:
c0026d93:	55                   	push   ebp
c0026d94:	89 e5                	mov    ebp,esp
c0026d96:	57                   	push   edi
c0026d97:	56                   	push   esi
c0026d98:	53                   	push   ebx
c0026d99:	83 ec 0c             	sub    esp,0xc
c0026d9c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026d9f:	89 d1                	mov    ecx,edx
c0026da1:	c1 f9 14             	sar    ecx,0x14
c0026da4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026da7:	89 df                	mov    edi,ebx
c0026da9:	c1 e7 0b             	shl    edi,0xb
c0026dac:	89 d0                	mov    eax,edx
c0026dae:	c1 e0 0b             	shl    eax,0xb
c0026db1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026db6:	c1 eb 15             	shr    ebx,0x15
c0026db9:	09 d8                	or     eax,ebx
c0026dbb:	89 cb                	mov    ebx,ecx
c0026dbd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026dc3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0026dc9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0026dcf:	0f 86 9e 00 00 00    	jbe    c0026e73 <__truncdfsf2+0xe0>
c0026dd5:	85 db                	test   ebx,ebx
c0026dd7:	75 0a                	jne    c0026de3 <__truncdfsf2+0x50>
c0026dd9:	c1 fa 17             	sar    edx,0x17
c0026ddc:	30 d2                	xor    dl,dl
c0026dde:	e9 84 00 00 00       	jmp    c0026e67 <__truncdfsf2+0xd4>
c0026de3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0026de9:	83 fe 83             	cmp    esi,0xffffff83
c0026dec:	7d 4b                	jge    c0026e39 <__truncdfsf2+0xa6>
c0026dee:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0026df3:	29 f1                	sub    ecx,esi
c0026df5:	83 f9 1f             	cmp    ecx,0x1f
c0026df8:	7f 6b                	jg     c0026e65 <__truncdfsf2+0xd2>
c0026dfa:	0d 00 00 00 80       	or     eax,0x80000000
c0026dff:	89 c3                	mov    ebx,eax
c0026e01:	d3 eb                	shr    ebx,cl
c0026e03:	be 01 00 00 00       	mov    esi,0x1
c0026e08:	d3 e6                	shl    esi,cl
c0026e0a:	4e                   	dec    esi
c0026e0b:	21 f0                	and    eax,esi
c0026e0d:	09 f8                	or     eax,edi
c0026e0f:	0f 95 c0             	setne  al
c0026e12:	0f b6 c0             	movzx  eax,al
c0026e15:	09 c3                	or     ebx,eax
c0026e17:	89 d9                	mov    ecx,ebx
c0026e19:	c1 e9 08             	shr    ecx,0x8
c0026e1c:	f6 c3 7f             	test   bl,0x7f
c0026e1f:	0f 95 c0             	setne  al
c0026e22:	09 c8                	or     eax,ecx
c0026e24:	83 e0 01             	and    eax,0x1
c0026e27:	c1 eb 07             	shr    ebx,0x7
c0026e2a:	21 c3                	and    ebx,eax
c0026e2c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0026e32:	09 d1                	or     ecx,edx
c0026e34:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0026e37:	eb 76                	jmp    c0026eaf <__truncdfsf2+0x11c>
c0026e39:	83 c6 80             	add    esi,0xffffff80
c0026e3c:	7e 1d                	jle    c0026e5b <__truncdfsf2+0xc8>
c0026e3e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0026e44:	75 0b                	jne    c0026e51 <__truncdfsf2+0xbe>
c0026e46:	09 f8                	or     eax,edi
c0026e48:	74 09                	je     c0026e53 <__truncdfsf2+0xc0>
c0026e4a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0026e4f:	eb 02                	jmp    c0026e53 <__truncdfsf2+0xc0>
c0026e51:	31 c0                	xor    eax,eax
c0026e53:	c1 fa 17             	sar    edx,0x17
c0026e56:	80 ca ff             	or     dl,0xff
c0026e59:	eb 0e                	jmp    c0026e69 <__truncdfsf2+0xd6>
c0026e5b:	c1 fa 1f             	sar    edx,0x1f
c0026e5e:	c1 e2 08             	shl    edx,0x8
c0026e61:	09 ca                	or     edx,ecx
c0026e63:	eb 04                	jmp    c0026e69 <__truncdfsf2+0xd6>
c0026e65:	31 d2                	xor    edx,edx
c0026e67:	31 c0                	xor    eax,eax
c0026e69:	c1 e2 17             	shl    edx,0x17
c0026e6c:	c1 e8 08             	shr    eax,0x8
c0026e6f:	09 d0                	or     eax,edx
c0026e71:	eb 3c                	jmp    c0026eaf <__truncdfsf2+0x11c>
c0026e73:	81 e9 80 03 00 00    	sub    ecx,0x380
c0026e79:	89 ca                	mov    edx,ecx
c0026e7b:	c1 fa 0b             	sar    edx,0xb
c0026e7e:	c1 e2 08             	shl    edx,0x8
c0026e81:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026e84:	31 db                	xor    ebx,ebx
c0026e86:	85 ff                	test   edi,edi
c0026e88:	0f 95 c3             	setne  bl
c0026e8b:	09 d8                	or     eax,ebx
c0026e8d:	89 c3                	mov    ebx,eax
c0026e8f:	c1 eb 08             	shr    ebx,0x8
c0026e92:	a8 7f                	test   al,0x7f
c0026e94:	0f 95 c2             	setne  dl
c0026e97:	89 d6                	mov    esi,edx
c0026e99:	09 de                	or     esi,ebx
c0026e9b:	83 e6 01             	and    esi,0x1
c0026e9e:	c1 e8 07             	shr    eax,0x7
c0026ea1:	21 f0                	and    eax,esi
c0026ea3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026ea6:	09 ca                	or     edx,ecx
c0026ea8:	c1 e2 17             	shl    edx,0x17
c0026eab:	09 da                	or     edx,ebx
c0026ead:	01 d0                	add    eax,edx
c0026eaf:	83 c4 0c             	add    esp,0xc
c0026eb2:	5b                   	pop    ebx
c0026eb3:	5e                   	pop    esi
c0026eb4:	5f                   	pop    edi
c0026eb5:	5d                   	pop    ebp
c0026eb6:	c3                   	ret    

c0026eb7 <__extendsfdf2>:
c0026eb7:	55                   	push   ebp
c0026eb8:	89 e5                	mov    ebp,esp
c0026eba:	57                   	push   edi
c0026ebb:	56                   	push   esi
c0026ebc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026ebf:	89 d1                	mov    ecx,edx
c0026ec1:	c1 f9 17             	sar    ecx,0x17
c0026ec4:	c1 e2 08             	shl    edx,0x8
c0026ec7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026ecd:	89 c8                	mov    eax,ecx
c0026ecf:	80 e4 f8             	and    ah,0xf8
c0026ed2:	8d 71 01             	lea    esi,[ecx+0x1]
c0026ed5:	81 e6 fe 00 00 00    	and    esi,0xfe
c0026edb:	75 27                	jne    c0026f04 <__extendsfdf2+0x4d>
c0026edd:	81 e1 ff 00 00 00    	and    ecx,0xff
c0026ee3:	75 18                	jne    c0026efd <__extendsfdf2+0x46>
c0026ee5:	85 d2                	test   edx,edx
c0026ee7:	74 20                	je     c0026f09 <__extendsfdf2+0x52>
c0026ee9:	41                   	inc    ecx
c0026eea:	01 d2                	add    edx,edx
c0026eec:	79 fb                	jns    c0026ee9 <__extendsfdf2+0x32>
c0026eee:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026ef4:	29 c8                	sub    eax,ecx
c0026ef6:	05 81 03 00 00       	add    eax,0x381
c0026efb:	eb 0c                	jmp    c0026f09 <__extendsfdf2+0x52>
c0026efd:	05 00 07 00 00       	add    eax,0x700
c0026f02:	eb 05                	jmp    c0026f09 <__extendsfdf2+0x52>
c0026f04:	05 80 03 00 00       	add    eax,0x380
c0026f09:	c1 e0 14             	shl    eax,0x14
c0026f0c:	89 c1                	mov    ecx,eax
c0026f0e:	89 d0                	mov    eax,edx
c0026f10:	c1 e8 0b             	shr    eax,0xb
c0026f13:	09 c1                	or     ecx,eax
c0026f15:	c1 e2 15             	shl    edx,0x15
c0026f18:	89 d0                	mov    eax,edx
c0026f1a:	89 ca                	mov    edx,ecx
c0026f1c:	5e                   	pop    esi
c0026f1d:	5f                   	pop    edi
c0026f1e:	5d                   	pop    ebp
c0026f1f:	c3                   	ret    

c0026f20 <fabs>:
c0026f20:	83 ec 0c             	sub    esp,0xc
c0026f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f27:	89 04 24             	mov    DWORD PTR [esp],eax
c0026f2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026f2e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026f37:	dd 04 24             	fld    QWORD PTR [esp]
c0026f3a:	83 c4 0c             	add    esp,0xc
c0026f3d:	c3                   	ret    
c0026f3e:	66 90                	xchg   ax,ax

c0026f40 <lrint>:
c0026f40:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026f44:	83 ec 04             	sub    esp,0x4
c0026f47:	db 1c 24             	fistp  DWORD PTR [esp]
c0026f4a:	58                   	pop    eax
c0026f4b:	c3                   	ret    

c0026f4c <lrintf>:
c0026f4c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0026f50:	83 ec 04             	sub    esp,0x4
c0026f53:	db 1c 24             	fistp  DWORD PTR [esp]
c0026f56:	58                   	pop    eax
c0026f57:	c3                   	ret    

Disassembly of section .init:

c0026f58 <_init>:
c0026f58:	55                   	push   ebp
c0026f59:	89 e5                	mov    ebp,esp
c0026f5b:	e8 b8 91 fd ff       	call   c0000118 <frame_dummy>
c0026f60:	e8 63 e0 ff ff       	call   c0024fc8 <__do_global_ctors_aux>
c0026f65:	5d                   	pop    ebp
c0026f66:	c3                   	ret    

Disassembly of section .fini:

c0026f67 <_fini>:
c0026f67:	55                   	push   ebp
c0026f68:	89 e5                	mov    ebp,esp
c0026f6a:	e8 39 91 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0026f6f:	5d                   	pop    ebp
c0026f70:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0026f72 <Computer::~Computer()>:
c0026f72:	83 ec 0c             	sub    esp,0xc
c0026f75:	ba 10 8a 02 c0       	mov    edx,0xc0028a10
c0026f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f7e:	89 10                	mov    DWORD PTR [eax],edx
c0026f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f84:	83 ec 0c             	sub    esp,0xc
c0026f87:	50                   	push   eax
c0026f88:	e8 b9 c9 fe ff       	call   c0013946 <Device::~Device()>
c0026f8d:	83 c4 10             	add    esp,0x10
c0026f90:	90                   	nop
c0026f91:	83 c4 0c             	add    esp,0xc
c0026f94:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0026f96 <Computer::~Computer()>:
c0026f96:	83 ec 0c             	sub    esp,0xc
c0026f99:	83 ec 0c             	sub    esp,0xc
c0026f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026fa0:	e8 cd ff ff ff       	call   c0026f72 <Computer::~Computer()>
c0026fa5:	83 c4 10             	add    esp,0x10
c0026fa8:	83 ec 08             	sub    esp,0x8
c0026fab:	68 ec 01 00 00       	push   0x1ec
c0026fb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026fb4:	e8 ec b5 fe ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0026fb9:	83 c4 10             	add    esp,0x10
c0026fbc:	83 c4 0c             	add    esp,0xc
c0026fbf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0026fc0 <idleCommon()>:
c0026fc0:	83 ec 0c             	sub    esp,0xc
c0026fc3:	e8 66 5c ff ff       	call   c001cc2e <lockScheduler()>
c0026fc8:	e8 9d 5f ff ff       	call   c001cf6a <schedule()>
c0026fcd:	83 c4 0c             	add    esp,0xc
c0026fd0:	e9 5b 5c ff ff       	jmp    c001cc30 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0026fd6 <LinkedList<UnixFile>::~LinkedList()>:
c0026fd6:	90                   	nop
c0026fd7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0026fd8 <LinkedList<UnixFile>::LinkedList()>:
c0026fd8:	83 ec 0c             	sub    esp,0xc
c0026fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fdf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026fe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fe9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ff4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026ffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027009:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027014:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002701b:	83 ec 0c             	sub    esp,0xc
c002701e:	68 6a 8c 02 c0       	push   0xc0028c6a
c0027023:	e8 5d b6 fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0027028:	83 c4 10             	add    esp,0x10
c002702b:	90                   	nop
c002702c:	83 c4 0c             	add    esp,0xc
c002702f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027030 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027030:	83 ec 0c             	sub    esp,0xc
c0027033:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027038:	75 10                	jne    c002704a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002703a:	83 ec 0c             	sub    esp,0xc
c002703d:	68 84 8c 02 c0       	push   0xc0028c84
c0027042:	e8 58 27 ff ff       	call   c001979f <Krnl::panic(char const*)>
c0027047:	83 c4 10             	add    esp,0x10
c002704a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002704e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027050:	85 c0                	test   eax,eax
c0027052:	74 34                	je     c0027088 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027058:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002705b:	85 c0                	test   eax,eax
c002705d:	74 29                	je     c0027088 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002705f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027063:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027066:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002706a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002706d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027071:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027075:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002707c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002707f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027086:	eb 65                	jmp    c00270ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002708c:	8b 00                	mov    eax,DWORD PTR [eax]
c002708e:	85 c0                	test   eax,eax
c0027090:	75 4b                	jne    c00270dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027096:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027099:	85 c0                	test   eax,eax
c002709b:	75 40                	jne    c00270dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002709d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00270a5:	89 10                	mov    DWORD PTR [eax],edx
c00270a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00270af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00270b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00270b9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00270c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00270c7:	85 c0                	test   eax,eax
c00270c9:	74 22                	je     c00270ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00270cb:	83 ec 0c             	sub    esp,0xc
c00270ce:	68 a6 8c 02 c0       	push   0xc0028ca6
c00270d3:	e8 c7 26 ff ff       	call   c001979f <Krnl::panic(char const*)>
c00270d8:	83 c4 10             	add    esp,0x10
c00270db:	eb 10                	jmp    c00270ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00270dd:	83 ec 0c             	sub    esp,0xc
c00270e0:	68 b0 8c 02 c0       	push   0xc0028cb0
c00270e5:	e8 b5 26 ff ff       	call   c001979f <Krnl::panic(char const*)>
c00270ea:	83 c4 10             	add    esp,0x10
c00270ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00270f4:	8d 50 01             	lea    edx,[eax+0x1]
c00270f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00270fe:	90                   	nop
c00270ff:	83 c4 0c             	add    esp,0xc
c0027102:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027104 <LinkedList<UnixFile>::getFirstElement()>:
c0027104:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027108:	8b 00                	mov    eax,DWORD PTR [eax]
c002710a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002710c <LinkedList<UnixFile>::removeFirst()>:
c002710c:	83 ec 0c             	sub    esp,0xc
c002710f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027113:	8b 00                	mov    eax,DWORD PTR [eax]
c0027115:	85 c0                	test   eax,eax
c0027117:	75 12                	jne    c002712b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0027119:	83 ec 0c             	sub    esp,0xc
c002711c:	68 bc 8c 02 c0       	push   0xc0028cbc
c0027121:	e8 79 26 ff ff       	call   c001979f <Krnl::panic(char const*)>
c0027126:	83 c4 10             	add    esp,0x10
c0027129:	eb 7e                	jmp    c00271a9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002712f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027132:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027135:	85 c0                	test   eax,eax
c0027137:	74 10                	je     c0027149 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027139:	83 ec 0c             	sub    esp,0xc
c002713c:	68 07 8d 02 c0       	push   0xc0028d07
c0027141:	e8 59 26 ff ff       	call   c001979f <Krnl::panic(char const*)>
c0027146:	83 c4 10             	add    esp,0x10
c0027149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002714d:	8b 00                	mov    eax,DWORD PTR [eax]
c002714f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027152:	85 c0                	test   eax,eax
c0027154:	75 33                	jne    c0027189 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002715a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027164:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002716b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002716f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027172:	83 f8 01             	cmp    eax,0x1
c0027175:	74 21                	je     c0027198 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027177:	83 ec 0c             	sub    esp,0xc
c002717a:	68 e0 8c 02 c0       	push   0xc0028ce0
c002717f:	e8 1b 26 ff ff       	call   c001979f <Krnl::panic(char const*)>
c0027184:	83 c4 10             	add    esp,0x10
c0027187:	eb 0f                	jmp    c0027198 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002718d:	8b 00                	mov    eax,DWORD PTR [eax]
c002718f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0027192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027196:	89 10                	mov    DWORD PTR [eax],edx
c0027198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002719c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002719f:	8d 50 ff             	lea    edx,[eax-0x1]
c00271a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00271a9:	83 c4 0c             	add    esp,0xc
c00271ac:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00271ae <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00271ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00271b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00271b5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00271b6 <DriverlessDevice::~DriverlessDevice()>:
c00271b6:	ba c4 93 02 c0       	mov    edx,0xc00293c4
c00271bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00271bf:	89 10                	mov    DWORD PTR [eax],edx
c00271c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00271c5:	50                   	push   eax
c00271c6:	e8 7b c7 fe ff       	call   c0013946 <Device::~Device()>
c00271cb:	83 c4 04             	add    esp,0x4
c00271ce:	90                   	nop
c00271cf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00271d0 <DriverlessDevice::~DriverlessDevice()>:
c00271d0:	83 ec 0c             	sub    esp,0xc
c00271d3:	83 ec 0c             	sub    esp,0xc
c00271d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00271da:	e8 d7 ff ff ff       	call   c00271b6 <DriverlessDevice::~DriverlessDevice()>
c00271df:	83 c4 10             	add    esp,0x10
c00271e2:	83 ec 08             	sub    esp,0x8
c00271e5:	68 58 01 00 00       	push   0x158
c00271ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00271ee:	e8 b2 b3 fe ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c00271f3:	83 c4 10             	add    esp,0x10
c00271f6:	83 c4 0c             	add    esp,0xc
c00271f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00271fa <LinkedList<Device>::addElement(Device*)>:
c00271fa:	83 ec 0c             	sub    esp,0xc
c00271fd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027202:	75 10                	jne    c0027214 <LinkedList<Device>::addElement(Device*)+0x1a>
c0027204:	83 ec 0c             	sub    esp,0xc
c0027207:	68 84 8c 02 c0       	push   0xc0028c84
c002720c:	e8 8e 25 ff ff       	call   c001979f <Krnl::panic(char const*)>
c0027211:	83 c4 10             	add    esp,0x10
c0027214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027218:	8b 00                	mov    eax,DWORD PTR [eax]
c002721a:	85 c0                	test   eax,eax
c002721c:	74 3a                	je     c0027258 <LinkedList<Device>::addElement(Device*)+0x5e>
c002721e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027222:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027225:	85 c0                	test   eax,eax
c0027227:	74 2f                	je     c0027258 <LinkedList<Device>::addElement(Device*)+0x5e>
c0027229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002722d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027230:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027234:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002723a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002723e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027242:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027249:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002724c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027256:	eb 68                	jmp    c00272c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002725c:	8b 00                	mov    eax,DWORD PTR [eax]
c002725e:	85 c0                	test   eax,eax
c0027260:	75 4e                	jne    c00272b0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0027262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027266:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027269:	85 c0                	test   eax,eax
c002726b:	75 43                	jne    c00272b0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002726d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027271:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027275:	89 10                	mov    DWORD PTR [eax],edx
c0027277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002727b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002727f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027286:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027289:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027297:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002729a:	85 c0                	test   eax,eax
c002729c:	74 22                	je     c00272c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c002729e:	83 ec 0c             	sub    esp,0xc
c00272a1:	68 a6 8c 02 c0       	push   0xc0028ca6
c00272a6:	e8 f4 24 ff ff       	call   c001979f <Krnl::panic(char const*)>
c00272ab:	83 c4 10             	add    esp,0x10
c00272ae:	eb 10                	jmp    c00272c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00272b0:	83 ec 0c             	sub    esp,0xc
c00272b3:	68 b0 8c 02 c0       	push   0xc0028cb0
c00272b8:	e8 e2 24 ff ff       	call   c001979f <Krnl::panic(char const*)>
c00272bd:	83 c4 10             	add    esp,0x10
c00272c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00272c7:	8d 50 01             	lea    edx,[eax+0x1]
c00272ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00272d1:	90                   	nop
c00272d2:	83 c4 0c             	add    esp,0xc
c00272d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00272d6 <LinkedList<Device>::LinkedList()>:
c00272d6:	83 ec 0c             	sub    esp,0xc
c00272d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00272e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00272ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272f2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00272f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027307:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002730e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027312:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027319:	83 ec 0c             	sub    esp,0xc
c002731c:	68 6a 8c 02 c0       	push   0xc0028c6a
c0027321:	e8 5f b3 fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0027326:	83 c4 10             	add    esp,0x10
c0027329:	90                   	nop
c002732a:	83 c4 0c             	add    esp,0xc
c002732d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002732e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027332:	8b 00                	mov    eax,DWORD PTR [eax]
c0027334:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0027336 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0027336:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002733a:	8b 00                	mov    eax,DWORD PTR [eax]
c002733c:	85 c0                	test   eax,eax
c002733e:	75 0e                	jne    c002734e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0027340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027344:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027347:	85 c0                	test   eax,eax
c0027349:	75 03                	jne    c002734e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002734b:	b0 01                	mov    al,0x1
c002734d:	c3                   	ret    
c002734e:	b0 00                	mov    al,0x0
c0027350:	90                   	nop
c0027351:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0027352 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0027352:	83 ec 0c             	sub    esp,0xc
c0027355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027359:	8b 00                	mov    eax,DWORD PTR [eax]
c002735b:	85 c0                	test   eax,eax
c002735d:	75 15                	jne    c0027374 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002735f:	83 ec 0c             	sub    esp,0xc
c0027362:	68 bc 8c 02 c0       	push   0xc0028cbc
c0027367:	e8 33 24 ff ff       	call   c001979f <Krnl::panic(char const*)>
c002736c:	83 c4 10             	add    esp,0x10
c002736f:	e9 88 00 00 00       	jmp    c00273fc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0027374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027378:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002737b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002737e:	85 c0                	test   eax,eax
c0027380:	0f 95 c0             	setne  al
c0027383:	84 c0                	test   al,al
c0027385:	74 10                	je     c0027397 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0027387:	83 ec 0c             	sub    esp,0xc
c002738a:	68 07 8d 02 c0       	push   0xc0028d07
c002738f:	e8 0b 24 ff ff       	call   c001979f <Krnl::panic(char const*)>
c0027394:	83 c4 10             	add    esp,0x10
c0027397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002739b:	8b 00                	mov    eax,DWORD PTR [eax]
c002739d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00273a0:	85 c0                	test   eax,eax
c00273a2:	0f 94 c0             	sete   al
c00273a5:	84 c0                	test   al,al
c00273a7:	74 33                	je     c00273dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00273a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00273b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00273be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00273c5:	83 f8 01             	cmp    eax,0x1
c00273c8:	74 21                	je     c00273eb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00273ca:	83 ec 0c             	sub    esp,0xc
c00273cd:	68 e0 8c 02 c0       	push   0xc0028ce0
c00273d2:	e8 c8 23 ff ff       	call   c001979f <Krnl::panic(char const*)>
c00273d7:	83 c4 10             	add    esp,0x10
c00273da:	eb 0f                	jmp    c00273eb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00273dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00273e2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00273e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273e9:	89 10                	mov    DWORD PTR [eax],edx
c00273eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00273f2:	8d 50 ff             	lea    edx,[eax-0x1]
c00273f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00273fc:	83 c4 0c             	add    esp,0xc
c00273ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0027400 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0027400:	83 ec 0c             	sub    esp,0xc
c0027403:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027408:	75 10                	jne    c002741a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002740a:	83 ec 0c             	sub    esp,0xc
c002740d:	68 84 8c 02 c0       	push   0xc0028c84
c0027412:	e8 88 23 ff ff       	call   c001979f <Krnl::panic(char const*)>
c0027417:	83 c4 10             	add    esp,0x10
c002741a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002741e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027420:	85 c0                	test   eax,eax
c0027422:	74 34                	je     c0027458 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0027424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027428:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002742b:	85 c0                	test   eax,eax
c002742d:	74 29                	je     c0027458 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002742f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027433:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027436:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002743a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002743d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027441:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027445:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002744c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002744f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027456:	eb 65                	jmp    c00274bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0027458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002745c:	8b 00                	mov    eax,DWORD PTR [eax]
c002745e:	85 c0                	test   eax,eax
c0027460:	75 4b                	jne    c00274ad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0027462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027466:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027469:	85 c0                	test   eax,eax
c002746b:	75 40                	jne    c00274ad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002746d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027471:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027475:	89 10                	mov    DWORD PTR [eax],edx
c0027477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002747b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002747f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027486:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027489:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027494:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027497:	85 c0                	test   eax,eax
c0027499:	74 22                	je     c00274bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002749b:	83 ec 0c             	sub    esp,0xc
c002749e:	68 a6 8c 02 c0       	push   0xc0028ca6
c00274a3:	e8 f7 22 ff ff       	call   c001979f <Krnl::panic(char const*)>
c00274a8:	83 c4 10             	add    esp,0x10
c00274ab:	eb 10                	jmp    c00274bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00274ad:	83 ec 0c             	sub    esp,0xc
c00274b0:	68 b0 8c 02 c0       	push   0xc0028cb0
c00274b5:	e8 e5 22 ff ff       	call   c001979f <Krnl::panic(char const*)>
c00274ba:	83 c4 10             	add    esp,0x10
c00274bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274c1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00274c4:	8d 50 01             	lea    edx,[eax+0x1]
c00274c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274cb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00274ce:	90                   	nop
c00274cf:	83 c4 0c             	add    esp,0xc
c00274d2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00274d4 <ACPI::~ACPI()>:
c00274d4:	83 ec 0c             	sub    esp,0xc
c00274d7:	ba 68 9c 02 c0       	mov    edx,0xc0029c68
c00274dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274e0:	89 10                	mov    DWORD PTR [eax],edx
c00274e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274e6:	83 ec 0c             	sub    esp,0xc
c00274e9:	50                   	push   eax
c00274ea:	e8 57 c4 fe ff       	call   c0013946 <Device::~Device()>
c00274ef:	83 c4 10             	add    esp,0x10
c00274f2:	90                   	nop
c00274f3:	83 c4 0c             	add    esp,0xc
c00274f6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00274f8 <ACPI::~ACPI()>:
c00274f8:	83 ec 0c             	sub    esp,0xc
c00274fb:	83 ec 0c             	sub    esp,0xc
c00274fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027502:	e8 cd ff ff ff       	call   c00274d4 <ACPI::~ACPI()>
c0027507:	83 c4 10             	add    esp,0x10
c002750a:	83 ec 08             	sub    esp,0x8
c002750d:	68 68 22 00 00       	push   0x2268
c0027512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027516:	e8 8a b0 fe ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c002751b:	83 c4 10             	add    esp,0x10
c002751e:	83 c4 0c             	add    esp,0xc
c0027521:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0027522 <CPU::~CPU()>:
c0027522:	83 ec 0c             	sub    esp,0xc
c0027525:	ba 58 a0 02 c0       	mov    edx,0xc002a058
c002752a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002752e:	89 10                	mov    DWORD PTR [eax],edx
c0027530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027534:	83 ec 0c             	sub    esp,0xc
c0027537:	50                   	push   eax
c0027538:	e8 09 c4 fe ff       	call   c0013946 <Device::~Device()>
c002753d:	83 c4 10             	add    esp,0x10
c0027540:	90                   	nop
c0027541:	83 c4 0c             	add    esp,0xc
c0027544:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0027546 <CPU::~CPU()>:
c0027546:	83 ec 0c             	sub    esp,0xc
c0027549:	83 ec 0c             	sub    esp,0xc
c002754c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027550:	e8 cd ff ff ff       	call   c0027522 <CPU::~CPU()>
c0027555:	83 c4 10             	add    esp,0x10
c0027558:	83 ec 08             	sub    esp,0x8
c002755b:	68 98 11 00 00       	push   0x1198
c0027560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027564:	e8 3c b0 fe ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0027569:	83 c4 10             	add    esp,0x10
c002756c:	83 c4 0c             	add    esp,0xc
c002756f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0027570 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0027570:	90                   	nop
c0027571:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0027572 <ThreadControlBlock::ThreadControlBlock()>:
c0027572:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027576:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002757d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027581:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0027588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002758c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0027593:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027597:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002759e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00275a2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00275a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00275aa:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00275ae:	90                   	nop
c00275af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00275b0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00275b0:	83 ec 0c             	sub    esp,0xc
c00275b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00275bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00275c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275cc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00275d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00275dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00275e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275ec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00275f3:	83 ec 0c             	sub    esp,0xc
c00275f6:	68 6a 8c 02 c0       	push   0xc0028c6a
c00275fb:	e8 85 b0 fe ff       	call   c0012685 <Dbg::kprintf(char const*, ...)>
c0027600:	83 c4 10             	add    esp,0x10
c0027603:	90                   	nop
c0027604:	83 c4 0c             	add    esp,0xc
c0027607:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0027608 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0027608:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002760c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002760f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0027610 <Vm::_FPUState::_FPUState()>:
c0027610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027614:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002761b:	90                   	nop
c002761c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002761e <PCI::~PCI()>:
c002761e:	83 ec 0c             	sub    esp,0xc
c0027621:	ba e4 ae 02 c0       	mov    edx,0xc002aee4
c0027626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002762a:	89 10                	mov    DWORD PTR [eax],edx
c002762c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027630:	83 ec 0c             	sub    esp,0xc
c0027633:	50                   	push   eax
c0027634:	e8 1d bd fe ff       	call   c0013356 <Bus::~Bus()>
c0027639:	83 c4 10             	add    esp,0x10
c002763c:	90                   	nop
c002763d:	83 c4 0c             	add    esp,0xc
c0027640:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0027642 <PCI::~PCI()>:
c0027642:	83 ec 0c             	sub    esp,0xc
c0027645:	83 ec 0c             	sub    esp,0xc
c0027648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002764c:	e8 cd ff ff ff       	call   c002761e <PCI::~PCI()>
c0027651:	83 c4 10             	add    esp,0x10
c0027654:	83 ec 08             	sub    esp,0x8
c0027657:	68 58 01 00 00       	push   0x158
c002765c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027660:	e8 40 af fe ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0027665:	83 c4 10             	add    esp,0x10
c0027668:	83 c4 0c             	add    esp,0xc
c002766b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002766c <IDE::~IDE()>:
c002766c:	83 ec 0c             	sub    esp,0xc
c002766f:	ba 48 b1 02 c0       	mov    edx,0xc002b148
c0027674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027678:	89 10                	mov    DWORD PTR [eax],edx
c002767a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002767e:	83 ec 0c             	sub    esp,0xc
c0027681:	50                   	push   eax
c0027682:	e8 af c7 fe ff       	call   c0013e36 <HardDiskController::~HardDiskController()>
c0027687:	83 c4 10             	add    esp,0x10
c002768a:	90                   	nop
c002768b:	83 c4 0c             	add    esp,0xc
c002768e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0027690 <IDE::~IDE()>:
c0027690:	83 ec 0c             	sub    esp,0xc
c0027693:	83 ec 0c             	sub    esp,0xc
c0027696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002769a:	e8 cd ff ff ff       	call   c002766c <IDE::~IDE()>
c002769f:	83 c4 10             	add    esp,0x10
c00276a2:	83 ec 08             	sub    esp,0x8
c00276a5:	68 70 02 00 00       	push   0x270
c00276aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276ae:	e8 f2 ae fe ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c00276b3:	83 c4 10             	add    esp,0x10
c00276b6:	83 c4 0c             	add    esp,0xc
c00276b9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00276ba <SATABus::~SATABus()>:
c00276ba:	83 ec 0c             	sub    esp,0xc
c00276bd:	ba 28 b2 02 c0       	mov    edx,0xc002b228
c00276c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276c6:	89 10                	mov    DWORD PTR [eax],edx
c00276c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276cc:	83 ec 0c             	sub    esp,0xc
c00276cf:	50                   	push   eax
c00276d0:	e8 61 c7 fe ff       	call   c0013e36 <HardDiskController::~HardDiskController()>
c00276d5:	83 c4 10             	add    esp,0x10
c00276d8:	90                   	nop
c00276d9:	83 c4 0c             	add    esp,0xc
c00276dc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00276de <SATABus::~SATABus()>:
c00276de:	83 ec 0c             	sub    esp,0xc
c00276e1:	83 ec 0c             	sub    esp,0xc
c00276e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276e8:	e8 cd ff ff ff       	call   c00276ba <SATABus::~SATABus()>
c00276ed:	83 c4 10             	add    esp,0x10
c00276f0:	83 ec 08             	sub    esp,0x8
c00276f3:	68 64 01 00 00       	push   0x164
c00276f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276fc:	e8 a4 ae fe ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0027701:	83 c4 10             	add    esp,0x10
c0027704:	83 c4 0c             	add    esp,0xc
c0027707:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0027708 <ATA::~ATA()>:
c0027708:	83 ec 0c             	sub    esp,0xc
c002770b:	ba 68 b2 02 c0       	mov    edx,0xc002b268
c0027710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027714:	89 10                	mov    DWORD PTR [eax],edx
c0027716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002771a:	83 ec 0c             	sub    esp,0xc
c002771d:	50                   	push   eax
c002771e:	e8 f1 c7 fe ff       	call   c0013f14 <PhysicalDisk::~PhysicalDisk()>
c0027723:	83 c4 10             	add    esp,0x10
c0027726:	90                   	nop
c0027727:	83 c4 0c             	add    esp,0xc
c002772a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002772c <ATA::~ATA()>:
c002772c:	83 ec 0c             	sub    esp,0xc
c002772f:	83 ec 0c             	sub    esp,0xc
c0027732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027736:	e8 cd ff ff ff       	call   c0027708 <ATA::~ATA()>
c002773b:	83 c4 10             	add    esp,0x10
c002773e:	83 ec 08             	sub    esp,0x8
c0027741:	68 7c 01 00 00       	push   0x17c
c0027746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002774a:	e8 56 ae fe ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c002774f:	83 c4 10             	add    esp,0x10
c0027752:	83 c4 0c             	add    esp,0xc
c0027755:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0027756 <ATAPI::~ATAPI()>:
c0027756:	83 ec 0c             	sub    esp,0xc
c0027759:	ba d4 b2 02 c0       	mov    edx,0xc002b2d4
c002775e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027762:	89 10                	mov    DWORD PTR [eax],edx
c0027764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027768:	83 ec 0c             	sub    esp,0xc
c002776b:	50                   	push   eax
c002776c:	e8 a3 c7 fe ff       	call   c0013f14 <PhysicalDisk::~PhysicalDisk()>
c0027771:	83 c4 10             	add    esp,0x10
c0027774:	90                   	nop
c0027775:	83 c4 0c             	add    esp,0xc
c0027778:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002777a <ATAPI::~ATAPI()>:
c002777a:	83 ec 0c             	sub    esp,0xc
c002777d:	83 ec 0c             	sub    esp,0xc
c0027780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027784:	e8 cd ff ff ff       	call   c0027756 <ATAPI::~ATAPI()>
c0027789:	83 c4 10             	add    esp,0x10
c002778c:	83 ec 08             	sub    esp,0x8
c002778f:	68 80 01 00 00       	push   0x180
c0027794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027798:	e8 08 ae fe ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c002779d:	83 c4 10             	add    esp,0x10
c00277a0:	83 c4 0c             	add    esp,0xc
c00277a3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00277a4 <SATA::~SATA()>:
c00277a4:	83 ec 0c             	sub    esp,0xc
c00277a7:	ba f8 b3 02 c0       	mov    edx,0xc002b3f8
c00277ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277b0:	89 10                	mov    DWORD PTR [eax],edx
c00277b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277b6:	83 ec 0c             	sub    esp,0xc
c00277b9:	50                   	push   eax
c00277ba:	e8 55 c7 fe ff       	call   c0013f14 <PhysicalDisk::~PhysicalDisk()>
c00277bf:	83 c4 10             	add    esp,0x10
c00277c2:	90                   	nop
c00277c3:	83 c4 0c             	add    esp,0xc
c00277c6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00277c8 <SATA::~SATA()>:
c00277c8:	83 ec 0c             	sub    esp,0xc
c00277cb:	83 ec 0c             	sub    esp,0xc
c00277ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277d2:	e8 cd ff ff ff       	call   c00277a4 <SATA::~SATA()>
c00277d7:	83 c4 10             	add    esp,0x10
c00277da:	83 ec 08             	sub    esp,0x8
c00277dd:	68 74 01 00 00       	push   0x174
c00277e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277e6:	e8 ba ad fe ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c00277eb:	83 c4 10             	add    esp,0x10
c00277ee:	83 c4 0c             	add    esp,0xc
c00277f1:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00277f2 <AVX::~AVX()>:
c00277f2:	83 ec 0c             	sub    esp,0xc
c00277f5:	ba 34 b4 02 c0       	mov    edx,0xc002b434
c00277fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277fe:	89 10                	mov    DWORD PTR [eax],edx
c0027800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027804:	83 ec 0c             	sub    esp,0xc
c0027807:	50                   	push   eax
c0027808:	e8 8b c7 fe ff       	call   c0013f98 <FPU::~FPU()>
c002780d:	83 c4 10             	add    esp,0x10
c0027810:	90                   	nop
c0027811:	83 c4 0c             	add    esp,0xc
c0027814:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0027816 <AVX::~AVX()>:
c0027816:	83 ec 0c             	sub    esp,0xc
c0027819:	83 ec 0c             	sub    esp,0xc
c002781c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027820:	e8 cd ff ff ff       	call   c00277f2 <AVX::~AVX()>
c0027825:	83 c4 10             	add    esp,0x10
c0027828:	83 ec 08             	sub    esp,0x8
c002782b:	68 58 01 00 00       	push   0x158
c0027830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027834:	e8 6c ad fe ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0027839:	83 c4 10             	add    esp,0x10
c002783c:	83 c4 0c             	add    esp,0xc
c002783f:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0027840 <MMX::~MMX()>:
c0027840:	83 ec 0c             	sub    esp,0xc
c0027843:	ba 74 b4 02 c0       	mov    edx,0xc002b474
c0027848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002784c:	89 10                	mov    DWORD PTR [eax],edx
c002784e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027852:	83 ec 0c             	sub    esp,0xc
c0027855:	50                   	push   eax
c0027856:	e8 3d c7 fe ff       	call   c0013f98 <FPU::~FPU()>
c002785b:	83 c4 10             	add    esp,0x10
c002785e:	90                   	nop
c002785f:	83 c4 0c             	add    esp,0xc
c0027862:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0027864 <MMX::~MMX()>:
c0027864:	83 ec 0c             	sub    esp,0xc
c0027867:	83 ec 0c             	sub    esp,0xc
c002786a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002786e:	e8 cd ff ff ff       	call   c0027840 <MMX::~MMX()>
c0027873:	83 c4 10             	add    esp,0x10
c0027876:	83 ec 08             	sub    esp,0x8
c0027879:	68 58 01 00 00       	push   0x158
c002787e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027882:	e8 1e ad fe ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0027887:	83 c4 10             	add    esp,0x10
c002788a:	83 c4 0c             	add    esp,0xc
c002788d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002788e <SSE::~SSE()>:
c002788e:	83 ec 0c             	sub    esp,0xc
c0027891:	ba b4 b4 02 c0       	mov    edx,0xc002b4b4
c0027896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002789a:	89 10                	mov    DWORD PTR [eax],edx
c002789c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278a0:	83 ec 0c             	sub    esp,0xc
c00278a3:	50                   	push   eax
c00278a4:	e8 ef c6 fe ff       	call   c0013f98 <FPU::~FPU()>
c00278a9:	83 c4 10             	add    esp,0x10
c00278ac:	90                   	nop
c00278ad:	83 c4 0c             	add    esp,0xc
c00278b0:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00278b2 <SSE::~SSE()>:
c00278b2:	83 ec 0c             	sub    esp,0xc
c00278b5:	83 ec 0c             	sub    esp,0xc
c00278b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278bc:	e8 cd ff ff ff       	call   c002788e <SSE::~SSE()>
c00278c1:	83 c4 10             	add    esp,0x10
c00278c4:	83 ec 08             	sub    esp,0x8
c00278c7:	68 58 01 00 00       	push   0x158
c00278cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278d0:	e8 d0 ac fe ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c00278d5:	83 c4 10             	add    esp,0x10
c00278d8:	83 c4 0c             	add    esp,0xc
c00278db:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00278dc <x87::~x87()>:
c00278dc:	83 ec 0c             	sub    esp,0xc
c00278df:	ba f4 b4 02 c0       	mov    edx,0xc002b4f4
c00278e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278e8:	89 10                	mov    DWORD PTR [eax],edx
c00278ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278ee:	83 ec 0c             	sub    esp,0xc
c00278f1:	50                   	push   eax
c00278f2:	e8 a1 c6 fe ff       	call   c0013f98 <FPU::~FPU()>
c00278f7:	83 c4 10             	add    esp,0x10
c00278fa:	90                   	nop
c00278fb:	83 c4 0c             	add    esp,0xc
c00278fe:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0027900 <x87::~x87()>:
c0027900:	83 ec 0c             	sub    esp,0xc
c0027903:	83 ec 0c             	sub    esp,0xc
c0027906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002790a:	e8 cd ff ff ff       	call   c00278dc <x87::~x87()>
c002790f:	83 c4 10             	add    esp,0x10
c0027912:	83 ec 08             	sub    esp,0x8
c0027915:	68 58 01 00 00       	push   0x158
c002791a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002791e:	e8 82 ac fe ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0027923:	83 c4 10             	add    esp,0x10
c0027926:	83 c4 0c             	add    esp,0xc
c0027929:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002792a <IOAPIC::~IOAPIC()>:
c002792a:	83 ec 0c             	sub    esp,0xc
c002792d:	ba 4c b6 02 c0       	mov    edx,0xc002b64c
c0027932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027936:	89 10                	mov    DWORD PTR [eax],edx
c0027938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002793c:	83 ec 0c             	sub    esp,0xc
c002793f:	50                   	push   eax
c0027940:	e8 01 c0 fe ff       	call   c0013946 <Device::~Device()>
c0027945:	83 c4 10             	add    esp,0x10
c0027948:	90                   	nop
c0027949:	83 c4 0c             	add    esp,0xc
c002794c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002794e <IOAPIC::~IOAPIC()>:
c002794e:	83 ec 0c             	sub    esp,0xc
c0027951:	83 ec 0c             	sub    esp,0xc
c0027954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027958:	e8 cd ff ff ff       	call   c002792a <IOAPIC::~IOAPIC()>
c002795d:	83 c4 10             	add    esp,0x10
c0027960:	83 ec 08             	sub    esp,0x8
c0027963:	68 68 01 00 00       	push   0x168
c0027968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002796c:	e8 34 ac fe ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0027971:	83 c4 10             	add    esp,0x10
c0027974:	83 c4 0c             	add    esp,0xc
c0027977:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0027978 <APIC::~APIC()>:
c0027978:	83 ec 0c             	sub    esp,0xc
c002797b:	ba 04 b6 02 c0       	mov    edx,0xc002b604
c0027980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027984:	89 10                	mov    DWORD PTR [eax],edx
c0027986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002798a:	83 ec 0c             	sub    esp,0xc
c002798d:	50                   	push   eax
c002798e:	e8 cf ca fe ff       	call   c0014462 <InterruptController::~InterruptController()>
c0027993:	83 c4 10             	add    esp,0x10
c0027996:	90                   	nop
c0027997:	83 c4 0c             	add    esp,0xc
c002799a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002799c <APIC::~APIC()>:
c002799c:	83 ec 0c             	sub    esp,0xc
c002799f:	83 ec 0c             	sub    esp,0xc
c00279a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279a6:	e8 cd ff ff ff       	call   c0027978 <APIC::~APIC()>
c00279ab:	83 c4 10             	add    esp,0x10
c00279ae:	83 ec 08             	sub    esp,0x8
c00279b1:	68 58 21 00 00       	push   0x2158
c00279b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279ba:	e8 e6 ab fe ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c00279bf:	83 c4 10             	add    esp,0x10
c00279c2:	83 c4 0c             	add    esp,0xc
c00279c5:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00279c6 <PIC::~PIC()>:
c00279c6:	83 ec 0c             	sub    esp,0xc
c00279c9:	ba 9c b6 02 c0       	mov    edx,0xc002b69c
c00279ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279d2:	89 10                	mov    DWORD PTR [eax],edx
c00279d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279d8:	83 ec 0c             	sub    esp,0xc
c00279db:	50                   	push   eax
c00279dc:	e8 81 ca fe ff       	call   c0014462 <InterruptController::~InterruptController()>
c00279e1:	83 c4 10             	add    esp,0x10
c00279e4:	90                   	nop
c00279e5:	83 c4 0c             	add    esp,0xc
c00279e8:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00279ea <PIC::~PIC()>:
c00279ea:	83 ec 0c             	sub    esp,0xc
c00279ed:	83 ec 0c             	sub    esp,0xc
c00279f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279f4:	e8 cd ff ff ff       	call   c00279c6 <PIC::~PIC()>
c00279f9:	83 c4 10             	add    esp,0x10
c00279fc:	83 ec 08             	sub    esp,0x8
c00279ff:	68 58 21 00 00       	push   0x2158
c0027a04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a08:	e8 98 ab fe ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0027a0d:	83 c4 10             	add    esp,0x10
c0027a10:	83 c4 0c             	add    esp,0xc
c0027a13:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0027a14 <APICTimer::~APICTimer()>:
c0027a14:	83 ec 0c             	sub    esp,0xc
c0027a17:	ba f0 b6 02 c0       	mov    edx,0xc002b6f0
c0027a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a20:	89 10                	mov    DWORD PTR [eax],edx
c0027a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a26:	83 ec 0c             	sub    esp,0xc
c0027a29:	50                   	push   eax
c0027a2a:	e8 33 e8 fe ff       	call   c0016262 <Timer::~Timer()>
c0027a2f:	83 c4 10             	add    esp,0x10
c0027a32:	90                   	nop
c0027a33:	83 c4 0c             	add    esp,0xc
c0027a36:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0027a38 <APICTimer::~APICTimer()>:
c0027a38:	83 ec 0c             	sub    esp,0xc
c0027a3b:	83 ec 0c             	sub    esp,0xc
c0027a3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a42:	e8 cd ff ff ff       	call   c0027a14 <APICTimer::~APICTimer()>
c0027a47:	83 c4 10             	add    esp,0x10
c0027a4a:	83 ec 08             	sub    esp,0x8
c0027a4d:	68 60 01 00 00       	push   0x160
c0027a52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a56:	e8 4a ab fe ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0027a5b:	83 c4 10             	add    esp,0x10
c0027a5e:	83 c4 0c             	add    esp,0xc
c0027a61:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0027a62 <PIT::~PIT()>:
c0027a62:	83 ec 0c             	sub    esp,0xc
c0027a65:	ba 40 b7 02 c0       	mov    edx,0xc002b740
c0027a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a6e:	89 10                	mov    DWORD PTR [eax],edx
c0027a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a74:	83 ec 0c             	sub    esp,0xc
c0027a77:	50                   	push   eax
c0027a78:	e8 e5 e7 fe ff       	call   c0016262 <Timer::~Timer()>
c0027a7d:	83 c4 10             	add    esp,0x10
c0027a80:	90                   	nop
c0027a81:	83 c4 0c             	add    esp,0xc
c0027a84:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0027a86 <PIT::~PIT()>:
c0027a86:	83 ec 0c             	sub    esp,0xc
c0027a89:	83 ec 0c             	sub    esp,0xc
c0027a8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a90:	e8 cd ff ff ff       	call   c0027a62 <PIT::~PIT()>
c0027a95:	83 c4 10             	add    esp,0x10
c0027a98:	83 ec 08             	sub    esp,0x8
c0027a9b:	68 5c 01 00 00       	push   0x15c
c0027aa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027aa4:	e8 fc aa fe ff       	call   c00125a5 <operator delete(void*, unsigned long)>
c0027aa9:	83 c4 10             	add    esp,0x10
c0027aac:	83 c4 0c             	add    esp,0xc
c0027aaf:	c3                   	ret    
